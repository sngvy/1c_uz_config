///////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ СИНХРОНИЗАЦИИ С АТС
///////////////////////////////////////////////////////////////////////////////

// возвращает объект соединения с БД
Функция ПодключитьсяКБазеДанных(УзелОбмена, Ошибка)
	бд = Неопределено;
	Попытка
		// название драйвера ODBC по умолчанию
		стрMySQL_ODBCДрайвер = "MySQL ODBC 5.1 Driver";
		
		// получить список всех драйверов ODBC
		значенияРеестра = Неопределено;
		типыЗначенийРеестра = Неопределено;
		обРегПров = ПолучитьCOMОбъект("winmgmts:\\.\root\default:StdRegProv");
		стрПутьРеестра = "SOFTWARE\ODBC\ODBCINST.INI\ODBC Drivers";
		HKEY_LOCAL_MACHINE = 2147483650;
		обРегПров.EnumValues(HKEY_LOCAL_MACHINE, стрПутьРеестра, значенияРеестра, типыЗначенийРеестра);
		
		// найти драйвер MySQL
		Для Каждого стрДрайверODBC ИЗ значенияРеестра Цикл
			стрДрайверODBC_верх = ВРег(стрДрайверODBC);
			Если Найти(стрДрайверODBC_верх, "MYSQL") > 0 Тогда
				стрMySQL_ODBCДрайвер = стрДрайверODBC;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		//
		стрХост = УзелОбмена.ХостБД;
		стрНаименованиеБД = УзелОбмена.НаименованиеБД;
		стрПользователь = УзелОбмена.ПользовательБД;
		стрПароль = УзелОбмена.ПарольБД;
		бд = Новый COMОбъект("ADODB.Connection");
		//
		// MS SQL - для тестирования
		// строкаСоединения = "Provider='sqloledb';Data Source='" + стрХост +
		//     "';Integrated Security='SSPI';Initial Catalog='" + стрНаименованиеБД + "';";
		// ---
		// MySQL.
		строкаСоединения = "DRIVER={" + стрMySQL_ODBCДрайвер + "};SERVER=" + стрХост + ";PORT=" + "3306" + ";DATABASE=" + стрНаименованиеБД + 
			";UID=" + стрПользователь + ";PWD=" + стрПароль + ";";

		бд.Open(строкаСоединения);
	Исключение
		Ошибка = Ошибка + ОписаниеОшибки();
		бд = Неопределено;
	КонецПопытки;
	Возврат бд;
КонецФункции

// отключение от БД
Процедура ОтключитьсяОтБазыДанных(бдСсылка)
	Если бдСсылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	бдСсылка.Close();
	бдСсылка = Неопределено;
КонецПроцедуры

// возвращает имя таблицы контрагентов в базе данных
Функция ПолучитьИмяТаблицыКонтрагентов()
	Возврат "Exchange1c_Clients";
КонецФункции

// возвращает имя таблицы менеджеров в базе данных
Функция ПолучитьИмяТаблицыМенеджеров()
	Возврат "Exchange1c_Managers";
КонецФункции

// возвращает имя таблицы номеров контрагентов в базе данных
Функция ПолучитьИмяТаблицыНомеровКонтрагентов()
	Возврат "Exchange1c_Numbers";
КонецФункции

// возвращает строку - уникальный идентификатор менеджера
Функция ПолучитьИдентификаторМенеджера(менеджерСсылка)
	стрИдМенеджера = "";
	Если менеджерСсылка <> Неопределено Тогда
		стрИдМенеджера = Строка(менеджерСсылка.УникальныйИдентификатор());
	КонецЕсли;
	Возврат стрИдМенеджера;
КонецФункции

// возвращает строку - уникальный идентификатор контрагента
Функция ПолучитьИдентификаторКонтрагента(контрагентСсылка)
	стрИдКонтрагента = "";
	Если контрагентСсылка <> Неопределено Тогда
		стрИдКонтрагента = Строка(контрагентСсылка.УникальныйИдентификатор());
	КонецЕсли;
	Возврат стрИдКонтрагента;
КонецФункции

// возвращает строку - номер телефона пользователя базы
Функция ПолучитьНомерПользователя(ПользовательСсылка)
	// получение из настроек БИТ.Phone
	менеджЗапись = РегистрыСведений.бит_БитфонНастройки.СоздатьМенеджерЗаписи();
	менеджЗапись.Пользователь = ПользовательСсылка;
	менеджЗапись.Прочитать();
	стрНомер = "";
	Если менеджЗапись.Выбран() Тогда
		стрНомер = менеджЗапись.СвойНомер;
	КонецЕсли;
	//
	Если НЕ ЗначениеЗаполнено(стрНомер) Тогда
		// получение из настроек подключения к БИТ.АТС
		менеджЗапись = РегистрыСведений.бит_БитАТСНастройки.СоздатьМенеджерЗаписи();
		менеджЗапись.Пользователь = ПользовательСсылка;
		менеджЗапись.Прочитать();
		Если менеджЗапись.Выбран() Тогда
			стрНомер = менеджЗапись.НомерСвязанногоТелефона;
		КонецЕсли;
	КонецЕсли;
	//
	Возврат стрНомер;
КонецФункции

// Проверяет наличие в БД менеджера с заданным ключом и обновляет его номер при необходимости.
// Если менеджер не найден - создает.
//
// Параметры:
//   номер базы 1С (входящий, число),
//   ссылка на менеджера (входящий, элемент справочника Пользователи),
//   строка сообщения об ошибке (исходящий, строка).
//
// Возвращаемое значение:
//   успешность выполнения, булево.
//
Функция ПроверитьНаличиеМенеджераВБазеДанных(бдСсылка, базаИд, менеджерСсылка, Ошибка)
	Если бдСсылка = Неопределено Тогда
		Ошибка = Ошибка + Символы.ПС + "ПроверитьНаличиеМенеджераВБазеДанных() пустая ссылка на базу данных";
		Возврат Ложь;
	КонецЕсли;
	//
	Если менеджерСсылка = Неопределено Тогда
		Ошибка = Ошибка + Символы.ПС + "Менеджер - пустая ссылка";
		Возврат Ложь;
	КонецЕсли;
	//
	стрМенеджерИд = ПолучитьИдентификаторМенеджера(менеджерСсылка);
	стрМенеджерНомер = ПолучитьНомерПользователя(менеджерСсылка);
	//
	стрЗапрос = "SELECT Number FROM " + ПолучитьИмяТаблицыМенеджеров() + " WHERE (id=N'" + стрМенеджерИд + "' AND DatabaseID=" + базаИд + ")";
	колвоСтрок = 0;
	найден = Ложь;
	Попытка
		табл = бдСсылка.Execute(стрЗапрос, колвоСтрок);
		найден = (колвоСтрок <> 0);
		Если найден Тогда
			табл.MoveFirst();
			// проверить номер
			стрМенеджерНомерБД = СокрЛП( табл.Fields("Number").Value );
			Если стрМенеджерНомерБД <> стрМенеджерНомер Тогда
				стрЗапрос = "UPDATE " + ПолучитьИмяТаблицыМенеджеров() + " SET Number=N'" + стрМенеджерНомер + "' WHERE (id=N'" + стрМенеджерИд + "' AND DatabaseID=" + базаИд + ")";
				бдСсылка.Execute(стрЗапрос);
			КонецЕсли;
		Иначе
			// создать
			стрЗапрос = "INSERT INTO " + ПолучитьИмяТаблицыМенеджеров() +
				" (id, DatabaseID, Number) VALUES (N'" + стрМенеджерИд + "', " + Строка(базаИд) + ", N'" + стрМенеджерНомер + "')";
			колвоСтрок = 0;
			бдСсылка.Execute(стрЗапрос, колвоСтрок);
			найден = (колвоСтрок > 0);
		КонецЕсли;
	Исключение
		найден = Ложь;
		Ошибка = Ошибка + Символы.ПС +
			"Ошибка проверки менеджера " + Строка(менеджерСсылка) + " - " + ОписаниеОшибки() +
			Символы.ПС + "SQL-запрос """ + стрЗапрос + """";
	КонецПопытки;
	Возврат найден;
КонецФункции

// Проверяет наличие в БД контрагента с заданным ключом и обновляет наименование при необходимости.
// Если контрагент не найден - создает.
//
// Параметры:
//   номер базы 1С (входящий, число),
//   ссылка на контрагента (входящий),
//   строка сообщения об ошибке (исходящий, строка).
//
// Возвращаемое значение:
//   успешность выполнения, булево.
//
Функция ПроверитьНаличиеКонтрагентаВБазеДанных(бдСсылка, базаИд, контрагентСсылка, Ошибка)
	Если бдСсылка = Неопределено Тогда
		Ошибка = Ошибка + Символы.ПС + "ПроверитьНаличиеКонтрагентаВБазеДанных() пустая ссылка на базу данных";
		Возврат Ложь;
	КонецЕсли;
	//
	Если контрагентСсылка = Неопределено Тогда
		Ошибка = Ошибка + Символы.ПС + "Контрагент - пустая ссылка";
		Возврат Ложь;
	КонецЕсли;
	//
	стрИд = ПолучитьИдентификаторКонтрагента(контрагентСсылка);
	//
	стрНаименование = контрагентСсылка.Наименование;
	стрНаименование = СтрЗаменить(стрНаименование, "'", "");
	//
	менеджерСсылка = бит_ТелефонияСерверПереопределяемый.ПолучитьОсновногоМенеджераКонтрагента(контрагентСсылка);
	стрМенеджерИд = ПолучитьИдентификаторМенеджера(менеджерСсылка);
	//
	стрЗапрос = "SELECT Name, ManagerID FROM " + ПолучитьИмяТаблицыКонтрагентов() + " WHERE (id=N'" + стрИд + "' AND DatabaseID=" + базаИд + ")";
	колвоСтрок = 0;
	найден = Ложь;
	Попытка
		табл = бдСсылка.Execute(стрЗапрос, колвоСтрок);
		найден = (колвоСтрок <> 0);
		Если найден Тогда
			//
			табл.MoveFirst();
			// проверить наименование
			стрНаименованиеБД = СокрЛП( табл.Fields("Name").Value );
			Если стрНаименованиеБД <> стрНаименование Тогда
				стрЗапрос = "UPDATE " + ПолучитьИмяТаблицыКонтрагентов() + " SET Name=N'" + стрНаименование + "' WHERE (id=N'" + стрИд + "' AND DatabaseID=" + базаИд + ")";
				бдСсылка.Execute(стрЗапрос);
			КонецЕсли;
			// проверить менеджера
			стрМенеджерИдБД = СокрЛП( табл.Fields("ManagerID").Value );
			Если стрМенеджерИдБД <> стрМенеджерИд Тогда
				ПроверитьНаличиеМенеджераВБазеДанных(бдСсылка, базаИд, менеджерСсылка, Ошибка);
				стрЗапрос = "UPDATE " + ПолучитьИмяТаблицыКонтрагентов() + " SET ManagerID=N'" + стрМенеджерИд + "' WHERE (id=N'" + стрИд + "' AND DatabaseID=" + базаИд + ")";
				бдСсылка.Execute(стрЗапрос);
			КонецЕсли;
		Иначе
			// создать
			ПроверитьНаличиеМенеджераВБазеДанных(бдСсылка, базаИд, менеджерСсылка, Ошибка);
			стрЗапрос = "INSERT INTO " + ПолучитьИмяТаблицыКонтрагентов() +
				" (id,DatabaseID, Name, ManagerID) VALUES (N'" + стрИд + "', " + Строка(базаИд) + ", N'" + стрНаименование + "', N'" + стрМенеджерИд + "')";
			колвоСтрок = 0;
			бдСсылка.Execute(стрЗапрос, колвоСтрок);
			найден = (колвоСтрок > 0);
		КонецЕсли;
	Исключение
		найден = Ложь;
		Ошибка = Ошибка + Символы.ПС +
			"Ошибка проверки контрагента " + Строка(контрагентСсылка) + " - " + ОписаниеОшибки() +
			Символы.ПС + "SQL-запрос """ + стрЗапрос + """";
	КонецПопытки;
	Возврат найден;
КонецФункции

// Проверяет наличие в БД номера телефона контрагента и обновляет привязку к контрагенту при необходимости.
// Если номер телефона не найден - создает.
//
// Параметры:
//   номер базы 1С (входящий, число),
//   номер телефона (строка),
//   ссылка на контрагента (входящий),
//   строка сообщения об ошибке (исходящий, строка).
//
// Возвращаемое значение:
//   успешность выполнения, булево.
//
Функция ПроверитьНаличиеНомераТелефонаВБазеДанных(бдСсылка, базаИд, стрНомер, контрагентСсылка, Ошибка)
	Если бдСсылка = Неопределено Тогда
		Ошибка = Ошибка + Символы.ПС + "ПроверитьНаличиеНомераТелефонаВБазеДанных() пустая ссылка на базу данных";
		Возврат Ложь;
	КонецЕсли;
	//
	Если контрагентСсылка = Неопределено Тогда
		Ошибка = Ошибка + Символы.ПС + "ПроверитьНаличиеНомераТелефонаВБазеДанных() контрагент - пустая ссылка";
		Возврат Ложь;
	КонецЕсли;
	//
	стрИдКонтрагента = ПолучитьИдентификаторКонтрагента(контрагентСсылка);
	стрНаименованиеКонтрагента = контрагентСсылка.Наименование;
	//
	стрЗапрос = "SELECT ClientID FROM " + ПолучитьИмяТаблицыНомеровКонтрагентов() + " WHERE (Number=N'" + стрНомер + "' AND DatabaseID=" + базаИд + ")";
	колвоСтрок = 0;
	найден = Ложь;
	Попытка
		табл = бдСсылка.Execute(стрЗапрос, колвоСтрок);
		найден = (колвоСтрок <> 0);
		Если найден Тогда
			//
			табл.MoveFirst();
			// проверить идентификатор контрагента
			стрИдКонтрагентаБД = СокрЛП( табл.Fields("ClientID").Value );
			Если стрИдКонтрагентаБД <> стрИдКонтрагента Тогда
				стрЗапрос = "UPDATE " + ПолучитьИмяТаблицыНомеровКонтрагентов() + " SET ClientID=N'" + стрИдКонтрагента + "' WHERE (Number=N'" + стрНомер + "' AND DatabaseID=" + базаИд + ")";
				бдСсылка.Execute(стрЗапрос);
			КонецЕсли;
		Иначе
			// создать
			ПроверитьНаличиеКонтрагентаВБазеДанных(бдСсылка, базаИд, контрагентСсылка, Ошибка);
			стрЗапрос = "INSERT INTO " + ПолучитьИмяТаблицыНомеровКонтрагентов() +
				" (Number, DatabaseID, ClientID) VALUES (N'" + стрНомер + "', " + Строка(базаИд) + ", N'" + стрИдКонтрагента + "')";
			колвоСтрок = 0;
			бдСсылка.Execute(стрЗапрос, колвоСтрок);
			найден = (колвоСтрок > 0);
		КонецЕсли;
	Исключение
		найден = Ложь;
		Ошибка = Ошибка + Символы.ПС +
			"Ошибка проверки телефона контрагента " + Строка(контрагентСсылка) + " номер " + стрНомер + " - " + ОписаниеОшибки() +
			Символы.ПС + "SQL-запрос """ + стрЗапрос + """";
	КонецПопытки;
	Возврат найден;
КонецФункции

// Возвращаемое значение:
//   успешность выполнения, булево.
Функция ОбновитьНомераТелефоновКонтрагента(бдСсылка, базаИд, контрагентСсылка, массивНомеровКонтрагента, Сообщение, Ошибка)
	Если бдСсылка = Неопределено ИЛИ
		контрагентСсылка = Неопределено ИЛИ
		массивНомеровКонтрагента = Неопределено
	Тогда
		Возврат Ложь;
	КонецЕсли;
	//
	обновлено = Истина;
	Для Каждого стрНомерКонтрагента Из массивНомеровКонтрагента Цикл
		стрНомер = бит_ТелефонияКлиентСервер.ОчиститьНомерТолькоЦифры(стрНомерКонтрагента);
		стрНомер = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(стрНомер);
		проверен = ПроверитьНаличиеНомераТелефонаВБазеДанных(бдСсылка, базаИд, стрНомер, контрагентСсылка, Ошибка);
		Если проверен Тогда
			Сообщение = Сообщение + Символы.ПС + "Контактная информация контрагента " + Строка(контрагентСсылка) + " изменена";
		Иначе
			обновлено = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат обновлено;
КонецФункции

// Проверяет изменения в узле обмена
// Возвращаемое значение:
//   булево, Истина (есть изменения) или Ложь.
Функция ПроверитьИзмененияВУзле(Узел)
	Если НЕ ЗначениеЗаполнено(Узел) Тогда
		Возврат Ложь;
	КонецЕсли;
	выборка = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного);
	Возврат выборка.Следующий();
КонецФункции

//
Процедура ОбновитьИзмененияМенеджеров(Узел, бдСсылка, Сообщение, Ошибка)
	количествоИзменений = 0;
	//
	метаданныеНомера = Новый Массив;
	метаданныеНомера.Добавить(Метаданные.РегистрыСведений.бит_БитфонНастройки);
	метаданныеНомера.Добавить(Метаданные.РегистрыСведений.бит_БитАТСНастройки);
	выборка = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного, метаданныеНомера);
	Пока выборка.Следующий() Цикл
		наборЗаписейРС = выборка.Получить();
		удалитьРегИзм = Истина;
		Если наборЗаписейРС.Количество() > 0 Тогда
			Для Каждого записьРС Из наборЗаписейРС Цикл
				удалитьРегИзм = ПроверитьНаличиеМенеджераВБазеДанных(бдСсылка, Узел.ИдентификаторБазы, записьРС.Пользователь, Ошибка);
				Если удалитьРегИзм Тогда
					Сообщение = Сообщение + Символы.ПС + "Настройки пользователя " + Строка(записьРС.Пользователь) + " изменены";
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			пользовУдаленнЗаписи = наборЗаписейРС.Отбор.Пользователь.Значение;
			ПроверитьНаличиеМенеджераВБазеДанных(бдСсылка, Узел.ИдентификаторБазы, пользовУдаленнЗаписи, Ошибка);
			Для Каждого метаданнРС Из метаданныеНомера Цикл
				Если ТипЗнч(наборЗаписейРС) = Тип("РегистрСведенийНаборЗаписей." + метаданнРС.Имя) Тогда
					Сообщение = Сообщение + Символы.ПС + метаданнРС.Синоним + " пользователя " + Строка(пользовУдаленнЗаписи) + " удалены";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		//
		Если удалитьРегИзм Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, наборЗаписейРС);
		КонецЕсли;
		//
		количествоИзменений = количествоИзменений + 1;
	КонецЦикла;
	//
	Если количествоИзменений = 0 Тогда
		Сообщение = Сообщение + Символы.ПС + "Изменений менеджеров нет";
	КонецЕсли;
КонецПроцедуры

//
// параметр стрВерсияУТ равен "11" для УТ 11
Процедура ОбновитьИзмененияКонтрагентов(Узел, бдСсылка, Сообщение, Ошибка, стрВерсияУТ)
	количествоИзменений = 0;
	//
	метаданныеКонтрагенты = Метаданные.НайтиПоПолномуИмени("Справочник." + бит_ТелефонияСерверПереопределяемый.ПолучитьИмяСправочникаКонтрагентов());
	выборка = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного, метаданныеКонтрагенты);
	Пока выборка.Следующий() Цикл
		объект = выборка.Получить();
		//
		удалитьРегИзм = Истина;
		Если ТипЗнч(объект) <> Тип("УдалениеОбъекта") Тогда
			Если НЕ объект.ЭтоГруппа Тогда
				// проверка контрагента в базе, при необходимости создание
				контрагентСсылка = объект.Ссылка;
				удалитьРегИзм = ПроверитьНаличиеКонтрагентаВБазеДанных(бдСсылка, Узел.ИдентификаторБазы, контрагентСсылка, Ошибка);
				Если удалитьРегИзм Тогда
					Сообщение = Сообщение + Символы.ПС + "Контрагент " + контрагентСсылка.Наименование + " изменен";
					//
					//Если стрВерсияУТ = "11" Тогда
						// для УТ 11 контактная информация хранится в табличной части элемента справочника
						массивНомеров = бит_ТелефонияСерверПереопределяемый.НайтиНомераКонтрагента(контрагентСсылка);
						удалитьРегИзм = ОбновитьНомераТелефоновКонтрагента(бдСсылка, Узел.ИдентификаторБазы, контрагентСсылка, массивНомеров, Сообщение, Ошибка);
					//КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//
		Если удалитьРегИзм Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, объект);
		КонецЕсли;
		//
		количествоИзменений = количествоИзменений + 1;
	КонецЦикла;
	//
	Если количествоИзменений = 0 Тогда
		Сообщение = Сообщение + Символы.ПС + "Изменений контрагентов нет";
	КонецЕсли;
КонецПроцедуры

//
Процедура ОбновитьИзмененияКонтактныхЛицУТ11(Узел, бдСсылка, Сообщение, Ошибка)
	количествоИзменений = 0;
	//
	метаданныеКонтрагенты = Метаданные.НайтиПоПолномуИмени("Справочник." + бит_ТелефонияСерверПереопределяемый.ПолучитьИмяСправочникаКонтактныхЛиц());
	выборка = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного, метаданныеКонтрагенты);
	Пока выборка.Следующий() Цикл
		объект = выборка.Получить();
		//
		удалитьРегИзм = Истина;
		Если ТипЗнч(объект) <> Тип("УдалениеОбъекта") Тогда
			Если НЕ объект.ЭтоГруппа Тогда
				// получение контрагента по контактному лицу
				контактноеЛицоСсылка = объект.Ссылка;
				контрагентСсылка = контактноеЛицоСсылка.Владелец;
				// проверка контрагента в базе, при необходимости создание
				удалитьРегИзм = ПроверитьНаличиеКонтрагентаВБазеДанных(бдСсылка, Узел.ИдентификаторБазы, контрагентСсылка, Ошибка);
				Если удалитьРегИзм Тогда
					// для УТ 11 контактная информация хранится в табличной части элемента справочника
					массивНомеров = бит_ТелефонияСерверПереопределяемый.НайтиНомераКонтактногоЛица(контактноеЛицоСсылка);
					удалитьРегИзм = ОбновитьНомераТелефоновКонтрагента(бдСсылка, Узел.ИдентификаторБазы, контрагентСсылка, массивНомеров, Сообщение, Ошибка);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//
		Если удалитьРегИзм Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, объект);
		КонецЕсли;
		//
		количествоИзменений = количествоИзменений + 1;
	КонецЦикла;
	//
	Если количествоИзменений = 0 Тогда
		Сообщение = Сообщение + Символы.ПС + "Изменений контактных лиц нет";
	КонецЕсли;
КонецПроцедуры

//
Процедура ОбновитьИзмененияКонтактнойИнформацииУТ10(Узел, бдСсылка, Сообщение, Ошибка)
	количествоИзменений = 0;
	//
	выборка = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного, Метаданные.РегистрыСведений.КонтактнаяИнформация);
	Пока выборка.Следующий() Цикл
		наборЗаписейРС = выборка.Получить();
		удалитьРегИзм = Истина;
		Для Каждого записьРС Из наборЗаписейРС Цикл
			Если записьРС.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
				массивНомеров = Новый Массив();
				контрагентСсылка = Неопределено;
				Если ТипЗнч(записьРС.Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
					контрагентСсылка = записьРС.Объект;
					массивНомеров = бит_ТелефонияСерверПереопределяемый.НайтиНомераКонтрагента(контрагентСсылка);
				ИначеЕсли ТипЗнч(записьРС.Объект) = Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов") Тогда
					контрагентСсылка = записьРС.Объект.Владелец;
					массивНомеров = бит_ТелефонияСерверПереопределяемый.НайтиНомераКонтактногоЛица(записьРС.Объект);
				КонецЕсли;
				Если контрагентСсылка <> Неопределено Тогда
					удалитьРегИзм = ОбновитьНомераТелефоновКонтрагента(бдСсылка, Узел.ИдентификаторБазы, контрагентСсылка, массивНомеров, Сообщение, Ошибка);
					Если НЕ удалитьРегИзм Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		//
		Если удалитьРегИзм Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, наборЗаписейРС);
		КонецЕсли;
		//
		количествоИзменений = количествоИзменений + 1;
	КонецЦикла;
	//
	Если количествоИзменений = 0 Тогда
		Сообщение = Сообщение + Символы.ПС + "Изменений контактной информации нет";
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ВНЕШНИЙ ИНТЕРФЕЙС

// Проверяет соединение к базе данных на АТС.
//
// Параметры:
//   ссылка на узел обмена (входящий),
//   строка ошибок (исходящий).
//
// Возвращаемое значение:
//   Булево - успешность подключения.
//
Функция ПроверитьСоединениеКБазеДанных(УзелОбмена, Ошибка) ЭКСПОРТ
	
	СоединениеУспешно = Истина;
	
	// подключение к БД
	бд = ПодключитьсяКБазеДанных(УзелОбмена, Ошибка);
	Если бд = Неопределено Тогда
		СоединениеУспешно = Ложь;
	Иначе
		СоединениеУспешно = Истина;
		ОтключитьсяОтБазыДанных(бд);
	КонецЕсли;
	
	Возврат СоединениеУспешно;
	
КонецФункции
	
// Выгружает на АТС изменения наименований и телефонов контрагентов, номеров перевода.
//
// Параметры:
//   ссылка на узел обмена (входящий),
//   строка состояния выполнения (исходящий),
//   строка ошибок (исходящий).
//
Процедура ВыполнитьВыгрузкуИзмененийНаАТС(УзелОбмена, Сообщение, Ошибка) ЭКСПОРТ

	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		Ошибка = Ошибка + Символы.ПС + "Не задан узел обмена.";
		Возврат;
	КонецЕсли;
	
	Если НЕ ( ЗначениеЗаполнено(УзелОбмена.НаименованиеБД)
			И ЗначениеЗаполнено(УзелОбмена.ХостБД) ) Тогда
		Ошибка = Ошибка + Символы.ПС + "Не все обязательные поля заполнены для узла обмена '" + Строка(УзелОбмена) + "'.";
		Возврат;
	КонецЕсли;
		
	естьИзменения = ПроверитьИзмененияВУзле(УзелОбмена);
	Если НЕ естьИзменения Тогда
		Сообщение = Сообщение + Символы.ПС + "Изменений в узле обмена нет.";
		Возврат;
	КонецЕсли;
	
	// версия конфигурации
	стрВерсияУТ = Лев(бит_ТелефонияСервер.ПолучитьВерсию1С(), 2);
	
	// подключение к БД
	бд = ПодключитьсяКБазеДанных(УзелОбмена, Ошибка);
	Если бд = Неопределено Тогда
		Ошибка = Ошибка + Символы.ПС + "Не удалось подключиться к базе данных.";
		Возврат;
	КонецЕсли;

	ОбновитьИзмененияМенеджеров(УзелОбмена, бд, Сообщение, Ошибка);
	ОбновитьИзмененияКонтрагентов(УзелОбмена, бд, Сообщение, Ошибка, стрВерсияУТ);
	Если стрВерсияУТ = "10" Тогда
		ОбновитьИзмененияКонтактнойИнформацииУТ10(УзелОбмена, бд, Сообщение, Ошибка);
	ИначеЕсли стрВерсияУТ = "11" Тогда
		ОбновитьИзмененияКонтактныхЛицУТ11(УзелОбмена, бд, Сообщение, Ошибка);
	КонецЕсли;

	ОтключитьсяОтБазыДанных(бд);
КонецПроцедуры

// Удаляет на АТС все данные в таблицах номеров телефонов, менеджеров и названий контрагентов.
//
// Параметры:
//   ссылка на узел обмена (входящий),
//   строка состояния выполнения (исходящий),
//   строка ошибок (исходящий).
//
Процедура ОчиститьБазуДанныхНаАТС(УзелОбмена, Сообщение, Ошибка) ЭКСПОРТ
	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		Ошибка = Ошибка + Символы.ПС + "Не задан узел обмена.";
		Возврат;
	КонецЕсли;
	
	Если НЕ ( ЗначениеЗаполнено(УзелОбмена.НаименованиеБД)
			И ЗначениеЗаполнено(УзелОбмена.ХостБД) ) Тогда
		Ошибка = Ошибка + Символы.ПС + "Не все обязательные поля заполнены для узла обмена '" + Строка(УзелОбмена) + "'.";
		Возврат;
	КонецЕсли;
	
	// подключение к БД
	бд = ПодключитьсяКБазеДанных(УзелОбмена, Ошибка);
	Если бд = Неопределено Тогда
		Ошибка = Ошибка + Символы.ПС + "Не удалось подключиться к базе данных.";
		Возврат;
	КонецЕсли;

	базаИд = УзелОбмена.ИдентификаторБазы;
	стрЗапрос = "";
	колвоСтрок = 0;
	Попытка
		// удаление контрагентов
		стрЗапрос = "DELETE FROM " + ПолучитьИмяТаблицыКонтрагентов() + " WHERE DatabaseID=" + базаИд;
		табл = бд.Execute(стрЗапрос, колвоСтрок);
		Сообщение = Сообщение + Символы.ПС + "Удалено контрагентов: " + Строка(колвоСтрок);
		//
		// удаление менеджеров
		стрЗапрос = "DELETE FROM " + ПолучитьИмяТаблицыМенеджеров() + " WHERE DatabaseID=" + базаИд;
		табл = бд.Execute(стрЗапрос, колвоСтрок);
		Сообщение = Сообщение + Символы.ПС + "Удалено менеджеров: " + Строка(колвоСтрок);
		//
		// удаление номеров контрагентов
		стрЗапрос = "DELETE FROM " + ПолучитьИмяТаблицыНомеровКонтрагентов() + " WHERE DatabaseID=" + базаИд;
		табл = бд.Execute(стрЗапрос, колвоСтрок);
		Сообщение = Сообщение + Символы.ПС + "Удалено номеров контрагентов: " + Строка(колвоСтрок);
	Исключение
		Ошибка = Ошибка + Символы.ПС +
			"Ошибка очистки базы, SQL-запрос """ + стрЗапрос + """ - " + ОписаниеОшибки();
	КонецПопытки;

	ОтключитьсяОтБазыДанных(бд);
КонецПроцедуры

// Возвращает строку - версию механизма синхронизации с АТС.
Функция ПолучитьВерсиюМеханизмаСинхронизации() ЭКСПОРТ
	Возврат "1.7";
КонецФункции

// Процедура регламентного задания
Процедура СинхронизацияСАТС() ЭКСПОРТ
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_ОбменАТС.Ссылка
	               |ИЗ
	               |	ПланОбмена.бит_ОбменАТС КАК бит_ОбменАТС
	               |ГДЕ
	               |	бит_ОбменАТС.ПометкаУдаления = ЛОЖЬ";
	табл = Запрос.Выполнить().Выгрузить();
	Для Каждого запись ИЗ табл Цикл
		узелОбмена = запись.Ссылка;
		Если ЗначениеЗаполнено(узелОбмена) И
			ЗначениеЗаполнено(узелОбмена.ХостБД) И
			ЗначениеЗаполнено(узелОбмена.НаименованиеБД)
		Тогда
			стрСообщение = "";
			стрОшибка = "";
			ВыполнитьВыгрузкуИзмененийНаАТС(узелОбмена, стрСообщение, стрОшибка);
			Если ЗначениеЗаполнено(стрОшибка) Тогда
				ЗаписьЖурналаРегистрации("БИТ.АТС", УровеньЖурналаРегистрации.Ошибка,
					, "Ошибка выгрузки данных на БИТ.АТС", стрОшибка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла
КонецПроцедуры

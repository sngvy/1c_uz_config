&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)  
		
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		Объект.СтроковыеАдреса = Ложь;
		Объект.ДействующиеДоговоры = Ложь;
		Значение = НЕ Объект.СтроковыеАдреса;
		СкрытьСтроки("C8.", "ФЛ", Значение);
		СкрытьСтроки("C9.", "ФЛ", Значение);
		СкрытьСтроки("B2.", "ЮЛ", Значение);
		Значение = НЕ Объект.ДействующиеДоговоры;
		СкрытьСтроки("C55.", "Сделка", Значение);	 		
		
	КонецЕсли;
	
	Рекв = РеквизитФормыВЗначение("Объект");
	Рекв.Записать_НаименованиеПолейРегистраКИ("СубъектФизическоеЛицо");
	Рекв.Записать_НаименованиеПолейРегистраКИ("СубъектЮридическоеЛицо");
	Рекв.Записать_НаименованиеПолейРегистраКИ("Сделка");
	Рекв.Записать_НаименованиеПолейРегистраКИ("СубъектНаследник");
	Рекв.Записать_НаименованиеПолейРегистраКИ("СубъектПоручитель");
	Если Не ЗначениеЗаполнено(Объект.ВерсияФормата) Тогда
		Рекв.СоздатьВерсию();  
	КонецЕсли;
	ЗначениеВРеквизитФормы(Рекв, "Объект");
		
	//УстановитьОформление();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ) 
	
	Если ЭтоНоваяНастройка() Тогда
		
		ДействующиеДоговорыПриИзменении(ЭтаФорма);
		ПоУмолчаниюДОПриИзменении(ЭтаФорма);
		ПоУмолчаниюРасчетныйБлокПриИзменении(ЭтаФорма);
		ПоУмолчаниюСудебныйБлокПриИзменении(ЭтаФорма);
		ПоУмолчаниюСоглашенияПриИзменении(ЭтаФорма); 
		ПоУмолчаниюОбеспечениеПриИзменении(ЭтаФорма);
		ПоУмолчаниюДееспособностьПриИзменении(ЭтаФорма);
		СтроковыеАдресаПриИзменении(ЭтаФорма); 
		ПоУмолчаниюБанкротствоПриИзменении(ЭтаФорма);
		ПоУмолчаниюПродажаПриИзменении(ЭтаФорма);
		ПоУмолчаниюНеденежноеОбязательствоПриИзменении(ЭтаФорма);
		ПоУмолчаниюПоручительПриИзменении(ЭтаФорма);    
		ПоУмолчаниюНаследникПриИзменении(ЭтаФорма);
		ПоЛьготноеФинансированиеСГосПоддержкойПриИзменении(ЭтаФорма); 
		ПоУмолчаниюОбеспечиваемоеОбязательствоПриИзменении(ЭтаФорма);
		ПоУмолчаниюДолговаяНагрузкаПриИзменении(ЭтаФорма);
		ВсеГражданеРФПриИзменении(ЭтаФорма);       
	Иначе
		УстановитьОформление();		
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьФормуВыбораРеквизитов(Элемент, ДанныеВыбора, СтандартнаяОбработка,ПараметрВыбранноеЗначение)
	СтандартнаяОбработка = Ложь;
	ВызывающийДокумент = Объект.НаПримереДокумента;
	ОтфильтрТипов = Неопределено;

	Если ВызывающийДокумент = Неопределено или Не ЗначениеЗаполнено(ВызывающийДокумент) Тогда
		Сообщить("Поле ""На примере документа"" должно быть заполнено!", СтатусСообщения.Внимание); 
		Возврат;	
	КонецЕсли; 
			
	Форма = ПолучитьФорму("Справочник.НастройкиВыгрузкиНБКИ_RUTDF.Форма.ФормаВыбораРеквизитов",ПараметрВыбранноеЗначение);
	Форма.ВладелецФормы = ЭтаФорма;
	Если ЗначениеЗаполнено(ОтФильтрТипов) Тогда	
		ЗаголовогПлюс = " по типу """ + Строка(ОтФильтрТипов) + """";	
	КонецЕсли; 
	форма.Заголовок = "Выбор реквизитов" + ЗаголовогПлюс;
	Форма.ЗакрыватьПриЗакрытииВладельца = Истина;
	Форма.Документ = ВызывающийДокумент;
	Форма.ОтФильтрТипов = ОтФильтрТипов;
	Форма.Элементы.ТабМетаданныеДерево.ПодчиненныеЭлементы.тзМетаданныеЗначение.Видимость = Истина;
	
	ОткрытьФорму(Форма);
КонецПроцедуры  

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "НастройкиНБКИВыборРеквизитаRUTDF" Тогда
		ЭлТаблица = ЭтаФорма.ТекущийЭлемент;
		РеквизитыИСвойстваЗначениеЗаполнение(Параметр,ЭлТаблица);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыИСвойстваЗначениеЗаполнение(СтруктураПараметров,Таблица) 
	
	ТекущиеДанные = Таблица.ТекущиеДанные;
	ИмяТаблицы = Таблица.Имя;
	Если Не СтруктураПараметров = Неопределено Тогда	
		ТекущиеДанные.Значение 	= СтруктураПараметров.Синоним;
		МассивДанных = СтруктураПараметров.МассивДанных; 	
		
		ТекущиеДанные.КодДопСвойства = СтруктураПараметров.КодДопСвойства;
		ТекущиеДанные.ОбъектДопСвойства = СтруктураПараметров.ОбъектДопСвойства;
		
		Список = Новый СписокЗначений;
		Для Каждого Стр Из МассивДанных Цикл
			Список.Добавить(Стр);
		КонецЦикла;
		ТекущиеДанные.Хранилище1 = Список;
		ЗаписатьДанныеВСтрокуХранилище(ТекущиеДанные.НомерСтроки, МассивДанных, ИмяТаблицы);	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеВСтрокуХранилище(НомерСтроки, МассивДанных, ИмяТаблицы)
	
	Рекв = РеквизитФормыВЗначение("Объект");
	Рекв.Записать_СтрокаХранилище(НомерСтроки, МассивДанных,ИмяТаблицы);
	ЗначениеВРеквизитФормы(Рекв, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура СделкаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрВыбранноеЗначение = Новый Структура("ВыбранноеЗначение", Этаформа.Элементы.Сделка.ТекущиеДанные.Значение);
	ОткрытьФормуВыбораРеквизитов(Элемент, ДанныеВыбора, СтандартнаяОбработка,ПараметрВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура СубъектФизическоеЛицоЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрВыбранноеЗначение = Новый Структура("ВыбранноеЗначение", Этаформа.Элементы.СубъектФизическоеЛицо.ТекущиеДанные.Значение);
	ОткрытьФормуВыбораРеквизитов(Элемент, ДанныеВыбора, СтандартнаяОбработка,ПараметрВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура СубъектЮридическоеЛицоЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрВыбранноеЗначение = Новый Структура("ВыбранноеЗначение", Этаформа.Элементы.СубъектЮридическоеЛицо.ТекущиеДанные.Значение);
	ОткрытьФормуВыбораРеквизитов(Элемент, ДанныеВыбора, СтандартнаяОбработка,ПараметрВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ПриобретательПраваТребованияЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрВыбранноеЗначение = Новый Структура("ВыбранноеЗначение", Этаформа.Элементы.ПриобретательПраваТребования.ТекущиеДанные.Значение);
	ОткрытьФормуВыбораРеквизитов(Элемент, ДанныеВыбора, СтандартнаяОбработка,ПараметрВыбранноеЗначение);
КонецПроцедуры 

&НаКлиенте
Процедура ДействующиеДоговорыПриИзменении(Элемент)
	Значение = НЕ Объект.ДействующиеДоговоры;  
	СкрытьСтроки("C55.", "Сделка", Значение);
	СкрытьСтроки("C29.4", "Сделка", Значение);
	УстановитьОформление();
КонецПроцедуры

&НаКлиенте
Процедура ПоУмолчаниюДОПриИзменении(Элемент) 
	Значение = Объект.ПоУмолчаниюДО;  
	СкрытьСтроки("C17.2", "Сделка", Значение);
	СкрытьСтроки("B11.1", "Сделка", Значение);
	СкрытьСтроки("C18.1", "Сделка", Объект.ПоУмолчаниюРасчетныйБлок ИЛИ Объект.ПоУмолчаниюДО);
	СкрытьСтроки("C18.3", "Сделка", Объект.ПоУмолчаниюРасчетныйБлок ИЛИ Объект.ПоУмолчаниюДО);
	СкрытьСтроки("C18.6", "Сделка", Значение);
	СкрытьСтроки("C19.2", "Сделка", Значение);
	СкрытьСтроки("C20.", "Сделка", Значение);
	СкрытьСтроки("C38.", "Сделка", Значение);
	СкрытьСтроки("C45.", "Сделка", Значение);
	СкрытьСтроки("C54.1", "Сделка", Значение); 
	СкрытьСтроки("C56.1", "Сделка", Значение); 
	СкрытьСтроки("C56.2", "Сделка", Значение);
	СкрытьСтроки("C56.6", "Сделка", Значение);
	СкрытьСтроки("C10.1", "ФЛ", Значение); 
	СкрытьСтроки("C10.2" ,"ФЛ", Значение);

   	УстановитьОформление();
КонецПроцедуры

&НаКлиенте
Процедура ПоУмолчаниюРасчетныйБлокПриИзменении(Элемент)
	Значение = Объект.ПоУмолчаниюРасчетныйБлок;   
	
	СкрытьСтроки("C18.1", "Сделка", Объект.ПоУмолчаниюРасчетныйБлок ИЛИ Объект.ПоУмолчаниюДО);
	//СкрытьСтроки("C18.2","Сделка",Значение);
	СкрытьСтроки("C18.3", "Сделка", Объект.ПоУмолчаниюРасчетныйБлок ИЛИ Объект.ПоУмолчаниюДО);
	СкрытьСтроки("C18.4", "Сделка", Значение);
	СкрытьСтроки("C18.8", "Сделка", Значение); 
	СкрытьСтроки("C18.9", "Сделка", Значение);
	СкрытьСтроки("C18.10", "Сделка", Значение);
	СкрытьСтроки("C18.11", "Сделка", Значение); 
	СкрытьСтроки("C18.12", "Сделка", Значение); 
	СкрытьСтроки("C18.13", "Сделка", Значение);
	СкрытьСтроки("C18.14", "Сделка", Значение);
	СкрытьСтроки("C18.15", "Сделка", Значение); 
	СкрытьСтроки("C18.16", "Сделка", Значение);
	СкрытьСтроки("C18.18", "Сделка", Значение); 
	СкрытьСтроки("C18.19", "Сделка", Значение);
	СкрытьСтроки("C18.20", "Сделка", Значение);

	СкрытьСтроки("C19.", "Сделка", Значение);
	
	СкрытьСтроки("C21.", "Сделка", Значение);
    СкрытьСтроки("C22.", "Сделка", Значение);
	СкрытьСтроки("C23.", "Сделка", Значение);
    СкрытьСтроки("C24.", "Сделка", Значение); 
	СкрытьСтроки("C55.", "Сделка", Значение);
	СкрытьСтроки("C56.", "Сделка", Значение);
	УстановитьОформление();
КонецПроцедуры

&НаКлиенте
Процедура ПоУмолчаниюСудебныйБлокПриИзменении(Элемент) 
	Значение = Объект.ПоУмолчаниюСудебныйБлок;
	СкрытьСтроки("C39.","Сделка",Значение); 
	СкрытьСтроки("C20.","Сделка",Значение);
	УстановитьОформление();
КонецПроцедуры

&НаКлиенте
Процедура ПоУмолчаниюСоглашенияПриИзменении(Элемент) 
	Значение = Объект.ПоУмолчаниюСоглашения;
	СкрытьСтроки("C23.", "Сделка", Значение); 
	СкрытьСтроки("C23.1.", "Сделка", Значение);

	УстановитьОформление();
КонецПроцедуры

&НаКлиенте
Процедура ПоУмолчаниюОбеспечениеПриИзменении(Элемент)  
	Значение = Объект.ПоУмолчаниюОбеспечение;
	СкрытьСтроки("C32.","Сделка",Значение); 
	СкрытьСтроки("C33.","Сделка",Значение);
	СкрытьСтроки("C34.","Сделка",Значение);
    СкрытьСтроки("C35.","Сделка",Значение);
	СкрытьСтроки("C36.","Сделка",Значение);
    СкрытьСтроки("C37.","Сделка",Значение);
	СкрытьСтроки("C19.3","Сделка",Значение);
	СкрытьСтроки("C19.4","Сделка",Значение);
	СкрытьСтроки("C19.5","Сделка",Значение); 
	СкрытьСтроки("C19.6","Сделка",Значение);
	СкрытьСтроки("C24.","Сделка",Значение);
	УстановитьОформление();
КонецПроцедуры

&НаКлиенте
Процедура ПоУмолчаниюДееспособностьПриИзменении(Элемент)
	Значение = Объект.ПоУмолчаниюДееспособность;
	СкрытьСтроки("C12.","ФЛ", Значение);  
	УстановитьОформление();
КонецПроцедуры

&НаКлиенте
Процедура СтроковыеАдресаПриИзменении(Элемент) 
	Значение = НЕ Объект.СтроковыеАдреса;
	СкрытьСтроки("C8.", "ФЛ", Значение);
	СкрытьСтроки("C9.", "ФЛ", Значение);
	СкрытьСтроки("B2.", "ЮЛ", Значение);
	УстановитьОформление();
КонецПроцедуры 


&НаКлиенте
Процедура ПоУмолчаниюБанкротствоПриИзменении(Элемент)
	Значение = Объект.ПоУмолчаниюБанкротство;
	СкрытьСтроки("C.", "Сделка", Значение);  
	СкрытьСтроки("C13.", "ФЛ", Значение);
	СкрытьСтроки("C14.", "ФЛ", Значение); 
	СкрытьСтроки("B6.", "ЮЛ", Значение);
	СкрытьСтроки("В7.", "ЮЛ", Значение);

	УстановитьОформление();
КонецПроцедуры 

&НаКлиенте
Процедура ПоУмолчаниюПродажаПриИзменении(Элемент)
	Значение = Объект.ПоУмолчаниюПродажа;
	СкрытьСтроки("C45.","Сделка",Значение);
	СкрытьСтроки("C51.10","ПриобретательПраваТребования",Значение);
	СкрытьСтроки("C52.16","ПриобретательПраваТребования",Значение);  
	СкрытьСтроки("C18.17", "Сделка", Значение);
	СкрытьСтроки("C53.8","ПриобретательПраваТребования",Значение);
	СкрытьСтроки("C53.9","ПриобретательПраваТребования",Значение);
	СкрытьСтроки("C53.10","ПриобретательПраваТребования",Значение);
    СкрытьСтроки("C53.11","ПриобретательПраваТребования",Значение);
	УстановитьОформление();
КонецПроцедуры 

&НаКлиенте
Процедура ПоУмолчаниюНеденежноеОбязательствоПриИзменении(Элемент)
	Значение = Объект.ПоУмолчаниюНеденежноеОбязательство;
	СкрытьСтроки("C30.", "Сделка",Значение);
	СкрытьСтроки("C31", "Сделка",Значение); 
	
	СкрытьСтроки("C18.9", "Сделка", Значение);
	СкрытьСтроки("C18.10", "Сделка", Значение);
	
	УстановитьОформление();
КонецПроцедуры



&НаСервере
Процедура СкрытьСтроки(Блок, Субъект, Значение)  
	Если Субъект = "Сделка" Тогда
		Для каждого стр из Объект.Сделка Цикл 
			
			Если СтрНайти(стр.НомерПоказателяНБКИФЛ, Блок) > 0 Тогда 
				Если ЗначениеЗаполнено(стр.СтрокаХранилище) ИЛИ ЗначениеЗаполнено(стр.Функция) Тогда 
					Стр.ЗаполнятьПоУмолчанию = Ложь;
					Продолжить; 
				Иначе
					Стр.ЗаполнятьПоУмолчанию = Значение;
					Продолжить;
				КонецЕсли;   
				
			КонецЕсли;  
			
			Если СтрНайти(стр.НомерПоказателяНБКИЮЛ, Блок) > 0 Тогда
				Стр.ЗаполнятьПоУмолчанию = Значение;
			КонецЕсли;
		КонецЦикла;	  
	КонецЕсли; 
	
	Если Субъект = "ФЛ" Тогда
		Для каждого стр из Объект.СубъектФизическоеЛицо Цикл			
			Если СтрНайти(стр.НомерПоказателяНБКИФЛ, Блок) > 0 Тогда
				Стр.ЗаполнятьПоУмолчанию = Значение;
				
				Если стр.НомерПоказателяНБКИФЛ = "C8." ИЛИ стр.НомерПоказателяНБКИФЛ = "C9." Тогда
					Стр.ЗаполнятьПоУмолчанию = НЕ Значение; 
					Продолжить;
				КонецЕсли; 
				
				Если стр.НомерПоказателяНБКИФЛ = "C8.1" ИЛИ стр.НомерПоказателяНБКИФЛ = "C9.1" Тогда
					Стр.ЗаполнятьПоУмолчанию = Ложь; 
					Продолжить;
				КонецЕсли; 
				
				Если стр.НомерПоказателяНБКИФЛ = "C8.14" Тогда
					Стр.ЗаполнятьПоУмолчанию = Ложь; 
					Продолжить;
				КонецЕсли;  
				
                Если стр.НомерПоказателяНБКИФЛ = "C8.15" Тогда
					Стр.ЗаполнятьПоУмолчанию = Ложь; 
					Продолжить;
				КонецЕсли;  
				
				Если стр.НомерПоказателяНБКИФЛ = "C8.16" Тогда
					Стр.ЗаполнятьПоУмолчанию = Ложь; 
					Продолжить;
				КонецЕсли; 

			КонецЕсли;
			
		КонецЦикла;	
	КонецЕсли; 
	Если Субъект = "ЮЛ" Тогда
		Для каждого стр из Объект.СубъектЮридическоеЛицо Цикл 
			Если ЗначениеЗаполнено(стр.СтрокаХранилище) ИЛИ ЗначениеЗаполнено(стр.Функция) Тогда
				Стр.ЗаполнятьПоУмолчанию = Ложь;
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(стр.НомерПоказателяНБКИЮЛ, Блок) > 0 Тогда
				Стр.ЗаполнятьПоУмолчанию = Значение;
				
				Если стр.НомерПоказателяНБКИЮЛ = "B2." Тогда
					Стр.ЗаполнятьПоУмолчанию = НЕ Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли; 
	
	Если Субъект = "ПриобретательПраваТребования" Тогда
		Для каждого стр из Объект.ПриобретательПраваТребования Цикл 
			Если ЗначениеЗаполнено(стр.СтрокаХранилище) ИЛИ ЗначениеЗаполнено(стр.Функция) Тогда
				Стр.ЗаполнятьПоУмолчанию = Ложь;
				Продолжить;
			КонецЕсли;
			Если СтрНайти(стр.НомерПоказателяНБКИФЛ, Блок) > 0 Тогда
				Стр.ЗаполнятьПоУмолчанию = Значение;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	

КонецПроцедуры	


&НаСервере
Процедура УстановитьОформление()
	УсловноеОформление.Элементы.Очистить();
	
	МассивИменТаблиц = новый Массив;
	МассивИменТаблиц.Добавить("Сделка");
	МассивИменТаблиц.Добавить("СубъектЮридическоеЛицо");
	МассивИменТаблиц.Добавить("СубъектФизическоеЛицо");
	МассивИменТаблиц.Добавить("ПриобретательПраваТребования");
	МассивИменТаблиц.Добавить("СубъектПоручитель");
	МассивИменТаблиц.Добавить("СубъектНаследник");
	
	Для Каждого Т из МассивИменТаблиц Цикл
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		
		// Создаем условие отбора
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + Т + ".ЗаполнятьПоУмолчанию"); // имя поля
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; // либо задаем свой
		//**** Значение для отбора
		ЭлементОтбора.ПравоеЗначение = Ложь;
		ЭлементОтбора.Использование = Истина;
		
		//2.
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоКоралловый);
		
		ЭлементОформления.Использование = Истина;
		
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(Т);
		ПолеОформления.Использование = Истина;
		
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		
		// Создаем условие отбора
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + Т + ".ЗаполнятьПоУмолчанию"); // имя поля
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; // либо задаем свой
		//**** Значение для отбора
		ЭлементОтбора.ПравоеЗначение = Истина;
		ЭлементОтбора.Использование = Истина;
		
		//2.
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.ЦветМорскойВолныТемный);
		
		ЭлементОформления.Использование = Истина;
		
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(Т);
		ПолеОформления.Использование = Истина;
		
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	КонецЦикла;	    
КонецПроцедуры


&НаКлиенте
Процедура ПервичноеЗаполнение(Команда)	
	ТекстУведомления = "";
	
	ДатаСтарта = ПолучитьДатуСтартаПередачи(ТекстУведомления);
	Если НЕ ЗначениеЗаполнено(ДатаСтарта) Тогда 
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = ТекстУведомления;
		Сообщение.Поле = "ДатаПервичногоЗаполенения";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	
	//ИДЗадания = "";
	ПараметрыЗапуска = Новый Структура;
	ПараметрыЗапуска.Вставить("ИсточникСобытия", Объект.Ссылка);
	ПараметрыЗапуска.Вставить("ДатаСобытия", ДатаСтарта);
	//ПервичноеЗаполнениеСерв(ПараметрыЗапуска); 
	
	СтруктураФоновогоЗадания  = ВыполнитьФоновоеЗаданиеПервичноеЗаполнениеНаСервере(ПараметрыЗапуска, УникальныйИдентификатор);
	ИДЗадания = СтруктураФоновогоЗадания.ИдентификаторЗадания;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);     
	
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.Интервал 	= 2;	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(СтруктураФоновогоЗадания, Новый ОписаниеОповещения("ОбработатьДанные", ЭтотОбъект), ПараметрыОжидания); 
	
	
КонецПроцедуры    

&НаКлиенте
Процедура ОбработатьДанные(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Выполнено!";
		Сообщение.Сообщить();
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Статус задачи неопределен!";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры     

&НаСервере
Функция ВыполнитьФоновоеЗаданиеПервичноеЗаполнениеНаСервере(ПараметрыЗапуска, УникальныйИдентификатор)
	
	НаименованиеЗадания = "Первичное Заполнение РС НБКИ RUTDF";

	ВыполняемыйМетод = "КредитныеИстории.ЗаполнитьПервичныеПараметрыДоговоровИСубъектов";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне 	= Истина;
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", УникальныйИдентификатор); 
	
	СтруктураФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыЗапуска, ПараметрыВыполнения);
	
	Возврат СтруктураФоновогоЗадания;
	
КонецФункции


&НаКлиенте
Процедура КаталогДляВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекФайл = Новый Файл (Элемент.ВыделенныйТекст);
	ТекКаталог = ТекФайл.Путь;      
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = "Выберите каталог хранения файлов выгрузки НБКИ.";
	Диалог.ПредварительныйПросмотр = Ложь;
	Диалог.Каталог = ТекКаталог;
	Диалог.МножественныйВыбор = Ложь;
	
	Диалог.Показать(Новый ОписаниеОповещения("КаталогДляВыгрузкиНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("Диалог", Диалог)));
	

КонецПроцедуры     

&НаКлиенте
Процедура КаталогДляВыгрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Объект.КаталогДляВыгрузки = Диалог.Каталог; 	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КаталогДляВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;        
	ЗапуститьПриложение(Объект.КаталогДляВыгрузки);
КонецПроцедуры

&НаСервере
Функция ЗаписатьСобытие2_10НаСервере(ПараметрыЗапуска, УникальныйИдентификатор)
	НаименованиеЗадания = "2_10 НБКИ RUTDF";
	
	ВыполняемыйМетод = "КредитныеИстории.ЗаписатьСобитиеИсточникПрекратилПередачу";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне 	= Истина;
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", УникальныйИдентификатор); 
	
	СтруктураФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыЗапуска, ПараметрыВыполнения);
	
	Возврат СтруктураФоновогоЗадания;
	
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьСобытие2_10(Команда) 
	ИДЗадания = "";
		
	ПараметрыЗапуска = Новый Структура;
	ПараметрыЗапуска.Вставить("ИсточникСобытия", Объект.Ссылка);
	ПараметрыЗапуска.Вставить("ДатаСобытия", ОбщегоНазначенияКлиент.ДатаСеанса());	
	
	СтруктураФоновогоЗадания  = ЗаписатьСобытие2_10НаСервере(ПараметрыЗапуска, УникальныйИдентификатор);
	ИДЗадания = СтруктураФоновогоЗадания.ИдентификаторЗадания;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);     
	
    ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.Интервал 	= 2;	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(СтруктураФоновогоЗадания, Новый ОписаниеОповещения("ОбработатьДанные", ЭтотОбъект), ПараметрыОжидания);


	
КонецПроцедуры 

&НаСервере
Функция ПолучитьДатуСтартаПередачи(стрСообщение)
	Если Не ЗначениеЗаполнено(Объект.ПризнакЦессии) Тогда
		Возврат Дата("19950126");
	Иначе
		Возврат Объект.ПризнакЦессии;
	КонецЕсли;	
КонецФункции 


&НаСервере
Процедура ПервичноеЗаполнениеСерв(ПараметрыЗапуска)  
   	// ДЛЯ Отладки, явный вызов
	КредитныеИстории.ЗаполнитьПервичныеПараметрыДоговоровИСубъектов(ПараметрыЗапуска, Неопределено);
	   	
КонецПроцедуры 

&НаКлиенте
Процедура ПоУмолчаниюПоручительПриИзменении(Элемент)
	ПоУмолчаниюПоручительПриИзмененииСервер();
КонецПроцедуры 

&НаСервере
Процедура ПоУмолчаниюПоручительПриИзмененииСервер()	
	Объект.СубъектПоручитель.Очистить();
	Если Объект.ПоУмолчаниюПоручитель Тогда
		Объект.СубъектПоручитель.Загрузить(Объект.СубъектФизическоеЛицо.Выгрузить());
	Иначе 
		Рекв = РеквизитФормыВЗначение("Объект");
		Рекв.ЗаполнитьПоляФЛ("СубъектПоручитель");
		ЗначениеВРеквизитФормы(Рекв, "Объект");	  	
	КонецЕсли; 
	
	УстановитьОформление();
КонецПроцедуры

&НаСервере
Процедура ПоУмолчаниюНаследникПриИзмененииНаСервере()
	Объект.СубъектНаследник.Очистить();
	Если Объект.ПоУмолчаниюНаследник Тогда
		Объект.СубъектНаследник.Загрузить(Объект.СубъектФизическоеЛицо.Выгрузить());
	Иначе
		Рекв = РеквизитФормыВЗначение("Объект");
		Рекв.ЗаполнитьПоляФЛ("СубъектНаследник");
		ЗначениеВРеквизитФормы(Рекв, "Объект");
	КонецЕсли;   
	
	УстановитьОформление();

КонецПроцедуры

&НаКлиенте
Процедура ПоУмолчаниюНаследникПриИзменении(Элемент) 
	Значение = Объект.ПоУмолчаниюНаследник;
	СкрытьСтроки("C18.21", "Сделка", Значение);
	ПоУмолчаниюНаследникПриИзмененииНаСервере();
КонецПроцедуры


&НаСервере
Процедура ДобавитьИзмененияВерсии(Версия)
	КредитныеИстории.ЗаполнитьПервичныеСправочникиНБКИ();
	КредитныеИсторииИзменения.ПометитьНаУдалениеНеактуальныеЗначенияСправочников();   
КонецПроцедуры 

&НаСервере
Процедура ДобавитьИзменения5(ИмяТаблицы)
	Если ИмяТаблицы = "СубъектФизическоеЛицо" ИЛИ ИмяТаблицы = "СубъектПоручитель" ИЛИ ИмяТаблицы = "СубъектНаследник" Тогда
		МассивНалогоплательщик = Новый Массив;
		МассивНалогоплательщик.Добавить("Признак специального налогового режима"); 
		
		Сч = 4;
		Для каждого ЭлементФЛ из МассивНалогоплательщик Цикл  
			ШаблонНомера = "C6.";
			Нстр = Объект[ИмяТаблицы].Добавить(); 
			Нстр.Поле = ЭлементФЛ; 
			НСтр.НомерПоказателяНБКИФЛ = ШаблонНомера + строка(Сч);  
			
			Сч = Сч + 1;
		КонецЦикла;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Новые поля версии 5.0 добавлены в конец таблицы " + ИмяТаблицы + "!";
		Сообщение.Сообщить();
		
	КонецЕсли;
	
	Если ИмяТаблицы = "СубъектЮридическоеЛицо" ИЛИ  ИмяТаблицы = "ПриобретательПраваТребования" Тогда 
		Возврат;
	КонецЕсли; 
	
	Если ИмяТаблицы = "Сделка" Тогда
		
		
		МассивУИД = Новый Массив;  
		//5.0
		МассивУИД.Добавить("НомерСделки");
		
		Сч = 2;
		Для каждого ЭлементСделка из МассивУИД Цикл 
			ШаблонНомераФ = "C17.";
			ШаблонНомераЮ = "B10.";
			
			Нстр = Объект.Сделка.Добавить(); 
			Нстр.Поле = ЭлементСделка;    
			НСтр.НомерПоказателяНБКИФЛ = ШаблонНомераФ + строка(Сч);
			НСтр.НомерПоказателяНБКИЮЛ = ШаблонНомераЮ + строка(Сч); 
			Сч = Сч + 1;
		КонецЦикла;	
		
		МассивОбщиеСведения = Новый Массив; 
		//Параметры
		//5.0
		МассивОбщиеСведения.Добавить("Код вида кредитора – заимодавца");
		МассивОбщиеСведения.Добавить("Признак возникновения обязательства в результате получения части прав кредитора от другого лица");
		МассивОбщиеСведения.Добавить("Признак кредитной линии");
		МассивОбщиеСведения.Добавить("Код типа кредитной линии");
		МассивОбщиеСведения.Добавить("Признак плавающей (переменной) процентной ставки");
		МассивОбщиеСведения.Добавить("Признак частичной передачи прав кредитора другому лицу");
		МассивОбщиеСведения.Добавить("УИд сделки, по которой права кредитора частично переданы другому лицу");
		МассивОбщиеСведения.Добавить("Дата возникновения обязательства субъекта");
		
		Сч = 12;
		Для каждого ЭлементСделка из МассивОбщиеСведения Цикл 
			ШаблонНомераФ = "C18.";
			ШаблонНомераЮ = "B11.";
			
			Нстр = Объект.Сделка.Добавить(); 
			Нстр.Поле = ЭлементСделка;    
			НСтр.НомерПоказателяНБКИФЛ = ШаблонНомераФ + строка(Сч);
			НСтр.НомерПоказателяНБКИЮЛ = ШаблонНомераЮ + строка(Сч); 
			
			Сч = Сч + 1;
		КонецЦикла;	
		
		МассивОбязательство = Новый Массив;
		// 5.0
		МассивОбязательство.Добавить("Валюта обеспечиваемого обязательства");
		МассивОбязательство.Добавить("Дата расчета");
		МассивОбязательство.Добавить("УИд сделки, в результате которой возникло обеспечиваемое обязательство");
		
		
		Сч = 5;
		Для каждого ЭлементСделка из МассивОбязательство Цикл 
			ШаблонНомераФ = "C19.";
			ШаблонНомераЮ = "B12.";
			
			Нстр = Объект.Сделка.Добавить(); 
			Нстр.Поле = ЭлементСделка;    
			НСтр.НомерПоказателяНБКИФЛ = ШаблонНомераФ + строка(Сч);
			НСтр.НомерПоказателяНБКИЮЛ = ШаблонНомераЮ + строка(Сч);  		
			Сч = Сч + 1;
		КонецЦикла;	
		
		
				
		МассивПередачаФинансирования = Новый Массив;
		//5.0
		МассивПередачаФинансирования.Добавить("Порядковый номер транша");
		
		Сч = 2;
		Для каждого ЭлементСделка из МассивПередачаФинансирования Цикл 
			ШаблонНомераФ = "C24.";
			ШаблонНомераЮ = "B16.";
			
			Нстр = Объект.Сделка.Добавить(); 
			Нстр.Поле = ЭлементСделка;    
			НСтр.НомерПоказателяНБКИФЛ = ШаблонНомераФ + строка(Сч);
			НСтр.НомерПоказателяНБКИЮЛ = ШаблонНомераЮ + строка(Сч); 
			Сч = Сч + 1;    
		КонецЦикла;	
		
			
		//Неденежное обязательство
		//5.0 
		МассивНеденежноеОбязательствоИсточник = Новый Массив;
		МассивНеденежноеОбязательствоИсточник.Добавить("Идентификационный код предоставляемого имущества");
		
		Сч = 5;
		Для каждого ЭлементСделка из МассивНеденежноеОбязательствоИсточник Цикл 
			ШаблонНомераФ = "C30.";
			ШаблонНомераЮ = "B21.";
			
			Нстр = Объект.Сделка.Добавить(); 
			Нстр.Поле = ЭлементСделка;    
			НСтр.НомерПоказателяНБКИФЛ = ШаблонНомераФ + строка(Сч);
			НСтр.НомерПоказателяНБКИЮЛ = ШаблонНомераЮ + строка(Сч); 
			Сч = Сч + 1;    
		КонецЦикла;	
		
		МассивНеденежноеОбязательствоСубъект = Новый Массив;
		//5.0
		МассивНеденежноеОбязательствоСубъект.Добавить("Код полученного имущества");
		Сч = 5;
		Для каждого ЭлементСделка из МассивНеденежноеОбязательствоСубъект Цикл 
			ШаблонНомераФ = "C31.";
			ШаблонНомераЮ = "B22.";
			
			Нстр = Объект.Сделка.Добавить(); 
			Нстр.Поле = ЭлементСделка;    
			НСтр.НомерПоказателяНБКИФЛ = ШаблонНомераФ + строка(Сч);
			НСтр.НомерПоказателяНБКИЮЛ = ШаблонНомераЮ + строка(Сч);
			Сч = Сч + 1;    
		КонецЦикла;	
		
		МассивЗалог  = Новый Массив;
		
		//5.0
		МассивЗалог.Добавить("Вид стоимости предмета залога");
		МассивЗалог.Добавить("Сумма обязательств по всем договорам, исполнение которых обеспечено предметом залога");
		МассивЗалог.Добавить("Количество договоров, исполнение обязательств по которым обеспечено предметом залога");
		
		Сч = 12;
		Для каждого ЭлементСделка из МассивЗалог Цикл 
			ШаблонНомераФ = "C32.";
			ШаблонНомераЮ = "B23.";
			
			Нстр = Объект.Сделка.Добавить(); 
			Нстр.Поле = ЭлементСделка;    
			НСтр.НомерПоказателяНБКИФЛ = ШаблонНомераФ + строка(Сч);
			НСтр.НомерПоказателяНБКИЮЛ = ШаблонНомераЮ + строка(Сч); 
			Сч = Сч + 1;    
		КонецЦикла;	
		
				
		МассивСтрахованиеЗалога  = Новый Массив;
		//Страхование
		//5.0
		МассивСтрахованиеЗалога.Добавить("Идентификационный код предмета залога");
		
		
		Сч = 9;
		Для каждого ЭлементСделка из МассивСтрахованиеЗалога Цикл 
			ШаблонНомераФ = "C35.";
			ШаблонНомераЮ = "B26.";
			
			Нстр = Объект.Сделка.Добавить(); 
			Нстр.Поле = ЭлементСделка;    
			НСтр.НомерПоказателяНБКИФЛ = ШаблонНомераФ + строка(Сч);
			НСтр.НомерПоказателяНБКИЮЛ = ШаблонНомераЮ + строка(Сч); 
			Сч = Сч + 1;    
		КонецЦикла;	
		
				
		МассивУчетНаБалансе = Новый Массив;  
		//5.0
		МассивУчетНаБалансе.Добавить("Процентная ставка");  
		МассивУчетНаБалансе.Добавить("Сумма обязательства, учтенная на внебалансовых счетах");
		МассивУчетНаБалансе.Добавить("Признак льготного финансирования с государственной поддержкой");
		МассивУчетНаБалансе.Добавить("Информация о программе государственной поддержки");
		
		Сч = 2;
		Для каждого ЭлементСделка из МассивУчетНаБалансе Цикл 
			ШаблонНомераФ = "C54.";
			ШаблонНомераЮ = "B44.";
			
			Нстр = Объект.Сделка.Добавить(); 
			Нстр.Поле = ЭлементСделка;    
			НСтр.НомерПоказателяНБКИФЛ = ШаблонНомераФ + строка(Сч);
			НСтр.НомерПоказателяНБКИЮЛ = ШаблонНомераЮ + строка(Сч);
			Сч = Сч + 1;    
		КонецЦикла;	  
		
		МассивПредложениеСделки = Новый Массив;
		//5.0
		МассивПредложениеСделки.Добавить("Дата окончания срока рассмотрения обращения");
		МассивПредложениеСделки.Добавить("Код цели запрошенного займа (кредита)"); 
		МассивПредложениеСделки.Добавить("Код стадии рассмотрения обращения");
		МассивПредложениеСделки.Добавить("Дата перехода обращения в текущую стадию рассмотрения");
		МассивПредложениеСделки.Добавить("Код вида обращения");
		МассивПредложениеСделки.Добавить("Номер обращения");
		
		
		Сч = 9;
		Для каждого ЭлементСделка из МассивПредложениеСделки Цикл 
			ШаблонНомераФ = "C55.";
			ШаблонНомераЮ = "B45.";
			
			Нстр = Объект.Сделка.Добавить(); 
			Нстр.Поле = ЭлементСделка;    
			НСтр.НомерПоказателяНБКИФЛ = ШаблонНомераФ + строка(Сч);
			НСтр.НомерПоказателяНБКИЮЛ = ШаблонНомераЮ + строка(Сч);
			Сч = Сч + 1;    
		КонецЦикла;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Новые поля версии 5.0 добавлены в конец таблицы Сделка!";
		Сообщение.Сообщить();

		
	КонецЕсли;     
	
			
КонецПроцедуры 

&НаСервере
Процедура ВерсияФорматаПриИзмененииНаСервере()
	 ДобавитьИзмененияВерсии(Объект.ВерсияФормата);
КонецПроцедуры

&НаКлиенте
Процедура ВерсияФорматаПриИзменении(Элемент)
	ВерсияФорматаПриИзмененииНаСервере();
	УстановитьОформление();  
КонецПроцедуры

&НаКлиенте
Процедура ПисатьСобытиеПравопреемстваПриИзменении(Элемент)
	УстановитьОформление();
КонецПроцедуры

&НаСервере
Процедура ПоЛьготноеФинансированиеСГосПоддержкойПриИзмененииНаСервере()
	Значение = Объект.ЛьготноеФинансированиеСГосПоддержкой;
	СкрытьСтроки("C54.4","Сделка" , Значение);
	СкрытьСтроки("C54.5", "Сделка" , Значение);
	УстановитьОформление();

КонецПроцедуры

&НаКлиенте
Процедура ПоЛьготноеФинансированиеСГосПоддержкойПриИзменении(Элемент)
	ПоЛьготноеФинансированиеСГосПоддержкойПриИзмененииНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьИзмененияВерсииВКИ(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Сначала произведите настройки новой версии и сохраните Настройку!";
		Сообщение.Сообщить();      
		Возврат;
	КонецЕсли;	
	
	
	ПараметрыЗапуска = Новый Структура;
	ПараметрыЗапуска.Вставить("Настройка", Объект.Ссылка);  
	//КредитныеИсторииИзменения.ОбновитьТекущиеЗаписиКредитнойИстории(ПараметрыЗапуска)
		
	СтруктураФоновогоЗадания  = ВыполнитьФоновоеЗаданиеОбновлениеКИНаСервере(ПараметрыЗапуска, УникальныйИдентификатор);
	ИДЗадания = СтруктураФоновогоЗадания.ИдентификаторЗадания;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);     
	
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.Интервал 	= 2;	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(СтруктураФоновогоЗадания, Новый ОписаниеОповещения("ОбработатьДанные", ЭтотОбъект), ПараметрыОжидания); 
КонецПроцедуры 

&НаСервере
Функция ВыполнитьФоновоеЗаданиеОбновлениеКИНаСервере(ПараметрыЗапуска, УникальныйИдентификатор)
	
	НаименованиеЗадания = "Обновление РС КИ НБКИ Единый формат";

	ВыполняемыйМетод = "КредитныеИсторииИзменения.ОбновитьТекущиеЗаписиКредитнойИстории";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне 	= Истина;
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", УникальныйИдентификатор); 
	
	СтруктураФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыЗапуска, ПараметрыВыполнения);
	
	Возврат СтруктураФоновогоЗадания; 
	
	//КредитныеИсторииИзменения.ОбновитьТекущиеЗаписиКредитнойИстории(ПараметрыЗапуска, Неопределено)
	
КонецФункции


&НаКлиенте
Процедура ПоУмолчаниюОбеспечиваемоеОбязательствоПриИзменении(Элемент)
	Значение = Объект.ПоУмолчаниюОбеспечиваемоеОбязательство;
	СкрытьСтроки("C19.1.", "Сделка" , Значение);
	УстановитьОформление();
КонецПроцедуры


&НаКлиенте
Процедура ПоУмолчаниюДолговаяНагрузкаПриИзменении(Элемент)
	Значение = Объект.ПоУмолчаниюДолговаяНагрузка;
	СкрытьСтроки("C29.1.","Сделка" , Значение);
	УстановитьОформление();
КонецПроцедуры

&НаСервере
Процедура СортироватьПоказателиКИНаСервере()
	Объект.Сделка.Сортировать("НомерПоказателяНБКИФЛ");
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоказателиКИ(Команда)
	СортироватьПоказателиКИНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВсеГражданеРФПриИзменении(Элемент)
	Значение = Объект.ВсеГражданеРФ;
	СкрытьСтроки("C4.11", "ФЛ" , Значение);    
	СкрытьСтроки("B2.15", "ЮЛ" , Значение); 
	УстановитьОформление();
КонецПроцедуры  

&НаСервере
Процедура ЕдиноеЗначениеМаксМинПСКППриИзмененииНаСервере(Единые)
	
	ПустаяСтрока = Объект.Сделка.Добавить();
	СтрокаПСКПроцент = ПустаяСтрока;
	СтрокаПСКДВ = ПустаяСтрока;
	
	Для каждого стр из Объект.Сделка Цикл 
		
		Если СтрНайти(стр.НомерПоказателяНБКИФЛ, "C22.1") > 0 Тогда 
			Если Единые Тогда
				СтрокаПСКПроцент = стр; 
				Продолжить;  
			КонецЕсли;
		КонецЕсли;  
		
		Если СтрНайти(стр.НомерПоказателяНБКИФЛ, "C22.2") > 0 Тогда 
			Если Единые Тогда 
				СтрокаПСКДВ =  стр;
				Продолжить; 
			КонецЕсли;
		КонецЕсли;   
		
		Если СтрНайти(стр.НомерПоказателяНБКИФЛ, "C22.4") > 0 ИЛИ СтрНайти(стр.НомерПоказателяНБКИФЛ, "C22.6") > 0 ИЛИ СтрНайти(стр.НомерПоказателяНБКИФЛ, "C22.7") > 0 Тогда 
			ЗаполнитьЗначенияСвойств(стр, СтрокаПСКПроцент, ,"НомерПоказателяНБКИФЛ, НомерПоказателяНБКИЮЛ, НаименованиеПоляРегистраКИ, Поле");
			Продолжить;
		КонецЕсли;  
		
		Если СтрНайти(стр.НомерПоказателяНБКИФЛ, "C22.5") Тогда 
			ЗаполнитьЗначенияСвойств(стр, СтрокаПСКДВ, ,"НомерПоказателяНБКИФЛ, НомерПоказателяНБКИЮЛ, НаименованиеПоляРегистраКИ, Поле");
			Продолжить;
		КонецЕсли;  
		
	КонецЦикла;	
	
	Объект.Сделка.Удалить(Объект.Сделка.Количество() - 1);
			
КонецПроцедуры


&НаКлиенте
Процедура ЕдиныеЗначенияМаксМинПСКПриИзменении(Элемент)	
	ЕдиноеЗначениеМаксМинПСКППриИзмененииНаСервере(Объект.ЕдиныеЗначенияМаксМинПСК);	
КонецПроцедуры

&НаСервере
Процедура ЕдиноеЗначениеМаксМинПроцентнойСтавкиПриИзмененииНаСервере(Единые)
	ПустаяСтрока = Объект.Сделка.Добавить();
	СтрокаПроцентнаяСтавка = ПустаяСтрока;
	
	Для каждого стр из Объект.Сделка Цикл 
			
		Если СтрНайти(стр.НомерПоказателяНБКИФЛ, "C54.2") > 0 Тогда 
			Если Единые Тогда
				СтрокаПроцентнаяСтавка = стр;
				Продолжить; 
			КонецЕсли;
		КонецЕсли;   
				
		Если СтрНайти(стр.НомерПоказателяНБКИФЛ, "C54.6") Тогда 
			ЗаполнитьЗначенияСвойств(стр, СтрокаПроцентнаяСтавка, ,"НомерПоказателяНБКИФЛ, НомерПоказателяНБКИЮЛ, НаименованиеПоляРегистраКИ, Поле");
			Продолжить;
		КонецЕсли;  
		
	КонецЦикла;	
	
	Объект.Сделка.Удалить(Объект.Сделка.Количество() - 1);

	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиноеЗначениеМаксМинПроцентнойСтавкиПриИзменении(Элемент)
	ЕдиноеЗначениеМаксМинПроцентнойСтавкиПриИзмененииНаСервере(Объект.ЕдиноеЗначениеМаксМинПроцентнойСтавки);
КонецПроцедуры


&НаСервере
Функция ЭтоНоваяНастройка() 
	Возврат Объект.Ссылка.Пустая(); 
		    
КонецФункции

// Для работы в режиме тонкого клиента

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизитаНаСервере(ИмяОбъекта, ИмяРеквизита)
Возврат ИмяОбъекта[ИмяРеквизита];
КонецФункции

//

&НаКлиенте
Процедура ОбязательствоПриИзменении(Элемент)
	ЭтаФорма.Должник = ПолучитьЗначениеРеквизитаНаСервере(ЭтаФорма.Обязательство, "Должник");
КонецПроцедуры

&НаКлиенте
Процедура ПервичноеЗаполнениеПоОдномуДО(Команда) Экспорт	
	ТекстУведомления = "";
	
	ДатаСтарта = ПолучитьДатуСтартаПередачи(ТекстУведомления);
	Если НЕ ЗначениеЗаполнено(ДатаСтарта) Тогда 
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = ТекстУведомления;
		Сообщение.Поле = "ДатаПервичногоЗаполенения";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	
	//ИДЗадания = "";
	ПараметрыЗапуска = Новый Структура;
	ПараметрыЗапуска.Вставить("ИсточникСобытия", Объект.Ссылка);
	ПараметрыЗапуска.Вставить("ДатаСобытия", ДатаСтарта);
	ПараметрыЗапуска.Вставить("Обязательство", ЭтаФорма.Обязательство);
	ПараметрыЗапуска.Вставить("Должник", ЭтаФорма.Должник);
	// Возврат без адреса регистрации должника
	Если ЗначениеЗаполнено(ОбъектыСервер.ПолучитьЗначениеСвойства(ЭтаФорма.Должник, "0049")) = Ложь Тогда
		Сообщить("По ДО " + ЭтаФорма.Обязательство + " формирование событий КИ невозможно! Отсутствует адрес регистрации должника");
		Возврат;
	КонецЕсли;
	Попытка
		ПолучитьОКАТО(ОбъектыСервер.ПолучитьЗначениеСвойства(ЭтаФорма.Должник, "0049"));
	Исключение
		Предупреждение("Не удалось определить ОКАТО! Проверьте наличие и корректность адреса регистрации",,"Формирование событий КИ");
		Возврат;
	КонецПопытки;
	//ПервичноеЗаполнениеСерв(ПараметрыЗапуска); 
	
	СтруктураФоновогоЗадания  = ВыполнитьФоновоеЗаданиеПервичноеЗаполнениеПоОдномуДОНаСервере(ПараметрыЗапуска, УникальныйИдентификатор);
	ИДЗадания = СтруктураФоновогоЗадания.ИдентификаторЗадания;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);     
	
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	// ПараметрыОжидания.Интервал 	= 2;
	ПараметрыОжидания.Интервал 	= 5;
	// Не отображать длительную операцию
	// ДлительныеОперацииКлиент.ОжидатьЗавершение(СтруктураФоновогоЗадания, Новый ОписаниеОповещения("ОбработатьДанные", ЭтотОбъект), ПараметрыОжидания);
	Сообщить("События КИ для ДО " + ЭтаФорма.Обязательство + " сформированы");
КонецПроцедуры

&НаСервере
Процедура ПолучитьОКАТО(Адрес)
	Константы.АхантерОКАТО.Установить(ДаДатаСлужебный.ПолучитьОКАТО(Адрес));
КонецПроцедуры

&НаСервере
Функция ВыполнитьФоновоеЗаданиеПервичноеЗаполнениеПоОдномуДОНаСервере(ПараметрыЗапуска, УникальныйИдентификатор)
	
	НаименованиеЗадания = "Первичное Заполнение РС НБКИ RUTDF";

	ВыполняемыйМетод = "КредитныеИстории.ЗаполнитьПервичныеПараметрыДоговораИСубъекта";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне 	= Истина;
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", УникальныйИдентификатор);
	
	СтруктураФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыЗапуска, ПараметрыВыполнения);
	
	Возврат СтруктураФоновогоЗадания;
КонецФункции


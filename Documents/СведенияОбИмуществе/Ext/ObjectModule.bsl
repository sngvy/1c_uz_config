
#Область ОбработкаСобытий

Процедура ОбработкаПроведения(Отказ, Режим)

	Ошибки = ОшибкиЗаполнения();
	Если Ошибки.Количество() > 0 Тогда
	
		Отказ = Истина;
		ТекстОшибок = СтрСоединить(Ошибки, Символы.ПС);
		
		ВызватьИсключение ТекстОшибок;
	
	КонецЕсли;
	
	// регистр СведенияОбИмуществе
	Движения.СведенияОбИмуществе.Записывать = Истина;
	Для Каждого ТекСтрокаДанные Из Данные Цикл
		Движение = Движения.СведенияОбИмуществе.Добавить();
		Движение.Период = Дата;
		Движение.Свойство = ТекСтрокаДанные.Свойство;
		Движение.Имущество = Имущество;
		Движение.Источник = Источник;
		Движение.Значение = ТекСтрокаДанные.Значение;
	КонецЦикла;

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	Ошибки = ОшибкиЗаполнения();
	
	Сообщатель = УправленияСообщениями;
	Если Ошибки.Количество() > 0 Тогда
	
		Отказ = Истина;
		Для каждого Ошибка Из Ошибки Цикл
		
			Сообщатель.ТекстовоеСообщить(Ошибка);
		
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ТехническийИнтерфейс

Функция УстановитьПоля(ТекущиеПоля) Экспорт

	Для каждого Поле Из ТекущиеПоля Цикл
	
		Запись = ЭтотОбъект.Данные.Добавить();
		Запись.Свойство = Поле.Свойство;
		Запись.Значение = Поле.Значение;
	
	КонецЦикла;
	
	Возврат ЭтотОбъект;

КонецФункции // ()

Функция УстановитьИмущество(ТекущийИмущество) Экспорт

	ЭтотОбъект.Имущество = ТекущийИмущество;
	
	Возврат ЭтотОбъект;

КонецФункции // ()

Функция УстановитьИсточник(ТекущийИсточник) Экспорт

	ЭтотОбъект.Источник = ТекущийИсточник;
	
	Возврат ЭтотОбъект;

КонецФункции // ()

#КонецОбласти

#Область Техническая

Функция ОшибкиЗаполнения()

	Ошибки = Новый Массив;
	
	Сообщатель = УправленияСообщениями;
	Если Не ПравильныеТипыСвойств() Тогда
	
		
		Текст = Сообщатель.ПредупреждениеОбПользовательскойОшибке(
			"Не корректные типы свойств"
		);
		Ошибки.Добавить(Текст);
	
	КонецЕсли;
	
	Если Не ПравильныеТипыЗначений() Тогда
	
		Текст = Сообщатель.ПредупреждениеОбПользовательскойОшибке(
			"Не корректные типы значений"
		);
		Ошибки.Добавить(Текст);
	
	КонецЕсли;
	
	Возврат Ошибки;

КонецФункции // ()

Функция ПравильныеТипыЗначений()

	Для каждого Поле Из ЭтотОбъект.Данные Цикл
	
		Если Не ПравильныйТипЗначения(Поле) Тогда
		
			Возврат Ложь;
		
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Истина;

КонецФункции // ()

Функция ПравильныйТипЗначения(Поле)

	Если Не ЗначениеЗаполнено(Поле.Свойство) Тогда
	
		Возврат Ложь;
	
	КонецЕсли;

	ТипыЗначения = Поле.Свойство.ТипЗначения;
	Возврат ТипыЗначения.СодержитТип(ТипЗнч(Поле.Значение));

КонецФункции // ()

Функция ПравильныеТипыСвойств()

	ДопустимыеТипы = Справочники[Имущество.Метаданные().Имя].ДопустимыеВариантыСвойст();
	Для каждого Поле Из ЭтотОбъект.Данные Цикл
	
		Если Не ПравильныйТипСвойства(Поле, ДопустимыеТипы) Тогда
		
			Возврат Ложь;
		
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Истина;

КонецФункции // ()

Функция ПравильныйТипСвойства(Поле, ДопустимыеТипы)

	Если Не ЗначениеЗаполнено(Поле.Свойство) Тогда
	
		Возврат Истина;
	
	КонецЕсли;
	
	Возврат ДопустимыеТипы.Найти(Поле.Свойство.ТипИмущества) <> Неопределено;

КонецФункции // ()

#КонецОбласти







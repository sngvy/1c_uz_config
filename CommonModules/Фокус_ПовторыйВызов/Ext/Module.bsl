
Функция МодульФокус() Экспорт
	
	МодульФокус = Неопределено;		
	
	Если Метаданные.РегистрыСведений.Найти("Фокус_ДополнительныеРеквизиты") = Неопределено Тогда
		
		ВызватьИсключение "Не обнаружены объекты, необходимые для работы модуля Контур.Фокус";
		
	КонецЕсли;
	
	//На диске
	Путь				= ПолучитьЗначениеСвойстваФокус("МодульКонтурФокусПуть");	
	//Обработка
	ИмяОбработки		= ПолучитьЗначениеСвойстваФокус("МодульКонтурФокусИмяОбработки");
	//Спр. дополнительных обработок
	СправочникВид		= ПолучитьЗначениеСвойстваФокус("МодульКонтурФокусВидСправочника");
	СправочникGUID		= ПолучитьЗначениеСвойстваФокус("МодульКонтурФокусGUID");
	
	// Из файловой системы	
	
	Если ЗначениеЗаполнено(Путь) Тогда
		
		ОписаниеЗащиты = ЗащитаОтОпасныхДействия();
		
		Если ОписаниеЗащиты = Неопределено Тогда
			МодульФокус = ВнешниеОбработки.Создать(Путь, Ложь);
		Иначе
			МодульФокус = ВнешниеОбработки.Создать(Путь, Ложь, ОписаниеЗащиты);	
		КонецЕсли;
		
	// Из метаданных

	ИначеЕсли ЗначениеЗаполнено(ИмяОбработки) Тогда
		
		МодульФокус = Обработки[ИмяОбработки].Создать();	
		
	// Из дополнительных обработок	
		
	ИначеЕсли ЗначениеЗаполнено(СправочникВид) 
				и ЗначениеЗаполнено(СправочникGUID) Тогда
	
		СправочникСсылка = Справочники[СправочникВид].ПолучитьСсылку(Новый УникальныйИдентификатор(СправочникGUID));
		
		Если СправочникСсылка = Справочники[СправочникВид].ПустаяСсылка() Тогда
			
			ВызватьИсключение "Не найден элемент справочника, содержащий обработку Контур.Фокус";
			
		КонецЕсли;
		
		Обработка   = ПодключитьВнешнююОбработку(СправочникСсылка);
		МодульФокус = ВнешниеОбработки.Создать(Обработка, Ложь);
		
	Иначе
		ВызватьИсключение "Не удалось определить настройки подключения Контур.Фокус";	
	КонецЕсли;
	
	МодульФокус.ИнициализироватьМодульДляФоновойРаботы();
	
	Возврат МодульФокус; 
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ЗащитаОтОпасныхДействия()
	
	ЗащитаОтОпасныхДействий = Неопределено;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;		
	Если СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.11.0") >= 0 Тогда
		
		ЗащитаОтОпасныхДействий = Вычислить("Новый ОписаниеЗащитыОтОпасныхДействий");		
		ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;		
		
	КонецЕсли;
	
	Возврат ЗащитаОтОпасныхДействий;
	
КонецФункции

Функция ИмяРеквизитаСодержащегоОбработку(Ссылка)
	
	ИмяРеквизита = Неопределено;
		
	Если Ссылка.Метаданные().Реквизиты.Найти("ХранилищеВнешнейОбработки") <> Неопределено Тогда
		
		ИмяРеквизита = "ХранилищеВнешнейОбработки"; 	
			
	ИначеЕсли Ссылка.Метаданные().Реквизиты.Найти("ХранилищеОбработки") <> Неопределено Тогда
		
		ИмяРеквизита = "ХранилищеОбработки";	
		
	Иначе
		
		Для Каждого Реквизит Из Ссылка.Метаданные().Реквизиты Цикл
			
			Если Реквизит.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
				
				ИмяРеквизита = Реквизит.Имя;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Возврат ИмяРеквизита;
	
КонецФункции

Функция ПодключитьВнешнююОбработку(Ссылка)
	
	ИмяРеквизита = ИмяРеквизитаСодержащегоОбработку(Ссылка);
		
	Если ИмяРеквизита = Неопределено Тогда
			
		ВызватьИсключение "Не удалось найти реквизит 'ХранилищеЗначения'";	
			
	КонецЕсли;
	
	ДвоичныеДанные = Ссылка[ИмяРеквизита].Получить();
	
#Если ТолстыйКлиентОбычноеПриложение Тогда
		
	ИмяОбработки = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные.Записать(ИмяОбработки);
	Возврат ИмяОбработки;
	
#КонецЕсли

	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	ОписаниеЗащиты = ЗащитаОтОпасныхДействия();
	Если ОписаниеЗащиты = Неопределено Тогда
		
		ИмяОбработки = ВнешниеОбработки.Подключить(АдресВоВременномХранилище, , Ложь);
		
	Иначе
		
		ИмяОбработки = ВнешниеОбработки.Подключить(АдресВоВременномХранилище, , Ложь, ОписаниеЗащиты);
		
	КонецЕсли;
		
	Возврат ИмяОбработки;
	
КонецФункции

Функция ПолучитьЗначениеСвойстваФокус(ИмяСвойства) 

	Запись = РегистрыСведений.Фокус_ДополнительныеРеквизиты.СоздатьМенеджерЗаписи();
	Запись.Свойство = ИмяСвойства;
	Запись.Прочитать();
	
	Возврат Запись.Значение;

КонецФункции

Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2)
	
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "2.0.5.1.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "2.0.5.1.0", СтрокаВерсии2);
	Версия1 = РазложитьСтрокуВМассивПодстрок(Строка1, ".");
	Если Версия1.Количество() <> 4 Тогда
		ВызватьИсключение "Неправильный формат строки версии";
	КонецЕсли;
	Версия2 = РазложитьСтрокуВМассивПодстрок(Строка2, ".");
	Если Версия2.Количество() <> 4 Тогда
		ВызватьИсключение "Неправильный формат строки версии";
	КонецЕсли;
	
	Результат = 0;
	Для Разряд = 0 По 3 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено)
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
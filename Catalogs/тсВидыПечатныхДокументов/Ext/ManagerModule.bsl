#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// По переданной печатной форме проверяет тип документа первого шаблона
//     И возвращает результат сравнения
Функция ЭтоУниверсальная(ПечатнаяФорма) Экспорт

	Возврат ТипПервогоШаблона(ПечатнаяФорма) = Перечисления.ТипыЭлДок.Универсальный;

КонецФункции // ()

// Необходимые параметры шаблона
Функция ИнициализироватьСтруктуруНастройкиШаблонов() Экспорт

	НастройкиШаблона = Новый Структура;
	НастройкиШаблона.Вставить("ШаблонПечатнойФормы", Неопределено);
	НастройкиШаблона.Вставить("ФункцияСвойств", Неопределено);
	НастройкиШаблона.Вставить("ФункцияКоличество", Неопределено);
	НастройкиШаблона.Вставить("ИсходящийНомер", Ложь);
	НастройкиШаблона.Вставить("Прикреплять", Неопределено);
	
	Возврат НастройкиШаблона;

КонецФункции // ()

// Возвращаемое значение:
//    Комплекты = Новый Соответствие;
//    Комплекты.Вставить(Справочник.Ссылка, Новый Соответствие(АдресДвоичныхДанных))
Функция СформироватьУниверсальныеШаблоны(ПечатнаяФорма, Основания) Экспорт

	НаборыШаблонов = НаборыДляПечати(ПечатнаяФорма);
	
	Комплекты = Новый Соответствие;
	Для каждого Набор Из НаборыШаблонов Цикл
	
		ТипНазначения = УЭДСервер.ПолучитьТипИзСтроки(Набор.Назначение);
		ОснованияШаблона = ОбъектыПоНазначению(Основания, ТипНазначения);
		СформироватьКомплектыПоШаблонам(
			ПечатнаяФорма,
			ОснованияШаблона,
			Комплекты
		);
	
	КонецЦикла;
	
	Возврат Комплекты;

КонецФункции // ()

// Интерфейс для формирования печатной формы конвертв
Функция СформироватьКонверт(Основание, МакетСНастройкой) Экспорт

	Возврат СформироватьПечатнуюФорму(Основание, МакетСНастройкой);

КонецФункции // ()

// Возвращает МакетСНастройками для конверта
//     Дополняет стандартный макет значениями ШтрихКода
Функция ЗаполнитьКонверт(ВидШаблона, ЗначенияШПИ) Экспорт

	ОписаниеМакетов = ЗаполнитьМакетШаблона(ВидШаблона);
	ОписаниеМакета = ОписаниеМакетов["МакетСНастройками"];
	
	Возврат ДополнитьМакетШаблонов(ОписаниеМакета, ЗначенияШПИ);

КонецФункции // ()

// Отдает количество строк в таблице ШаблоныПечатныхФорм,
//   без учета тсВидыПечатныхДокументов
//
// Параметры:
//  ВидШаблона  - СправочникСсылка.тсВидыПечатныхДокументов - Набор шаблонов
//                  для печати
//
// Возвращаемое значение:
//   Число   - ШаблоныПечатныхФорм.Количество() - Количество(Тип(тсВидыПечатныхДокументов))
//
Функция Количество(ВидШаблона) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	тсВидыПечатныхДокументовШаблоныПечатныхФорм.ШаблонПечатнойФормы КАК ШаблонПечатнойФормы
		|ПОМЕСТИТЬ втВсеШаблоны
		|ИЗ
		|	Справочник.тсВидыПечатныхДокументов.ШаблоныПечатныхФорм КАК тсВидыПечатныхДокументовШаблоныПечатныхФорм
		|ГДЕ
		|	тсВидыПечатныхДокументовШаблоныПечатныхФорм.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(втВсеШаблоны.ШаблонПечатнойФормы) КАК ШаблонПечатнойФормы
		|ПОМЕСТИТЬ втКоличествоВсех
		|ИЗ
		|	втВсеШаблоны КАК втВсеШаблоны
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ВЫРАЗИТЬ(втВсеШаблоны.ШаблонПечатнойФормы КАК Справочник.тсВидыПечатныхДокументов)) КАК ШаблонПечатнойФормы
		|ПОМЕСТИТЬ втКоличествоВидыШаблонов
		|ИЗ
		|	втВсеШаблоны КАК втВсеШаблоны
		|ГДЕ
		|	втВсеШаблоны.ШаблонПечатнойФормы ССЫЛКА Справочник.тсВидыПечатныхДокументов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втКоличествоВсех.ШаблонПечатнойФормы - втКоличествоВидыШаблонов.ШаблонПечатнойФормы КАК Количество
		|ИЗ
		|	втКоличествоВсех КАК втКоличествоВсех,
		|	втКоличествоВидыШаблонов КАК втКоличествоВидыШаблонов";
	
	Запрос.УстановитьПараметр("Ссылка", ВидШаблона);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Количество;

КонецФункции // ()

// Отдает шаблоны для печати, исключая тсВидыПечатныхДокументов
//
// Параметры:
//  ВидШаблона  - СправочникСсылка.тсВидыПечатныхДокументов - Набор шаблонов
//                  для печати
//
// Возвращаемое значение:
//   Массив   - СправочникСсылка.ШаблоныПечатныхФорм
//
Функция ШаблоныДляПечати(ВидШаблона) Экспорт

	Выгрузка = ВыгрузкаШаблоновДляПечати(ВидШаблона);
	Возврат Выгрузка.ВыгрузитьКолонку("ШаблонПечатнойФормы");

КонецФункции // ()

Функция НаборыДляПечати(ВидШаблона) Экспорт

	Набор = Новый Массив;
	Набор.Добавить(ВидШаблона);
	
	Номер = 0;
	Пока Номер < Набор.Количество() Цикл
	
		Шаблоны = ВложенныеНаборыДляПечати(Набор[Номер]);
		Номер = Номер + 1;
		
		Для каждого ВложенныйНабор Из Шаблоны Цикл
		
			Набор.Добавить(ВложенныйНабор);
		
		КонецЦикла;
	
	КонецЦикла;
	
	Возврат Набор;

КонецФункции // ()

// Проверяет есть ли в записанных Наборах Цикл, Например:
//   ВидШаблона1 -> ВидШаблона2 И ВидШаблона2 -> ВидШаблона1
//
// Возвращаемое значение:
//   Булево   - Есть зацикливание
//
Функция ЕстьПовторы() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	тсВидыПечатныхДокументовШаблоныПечатныхФорм.Ссылка КАК Ссылка,
		|	ВЫРАЗИТЬ(тсВидыПечатныхДокументовШаблоныПечатныхФорм.ШаблонПечатнойФормы КАК Справочник.тсВидыПечатныхДокументов) КАК Шаблон
		|ИЗ
		|	Справочник.тсВидыПечатныхДокументов.ШаблоныПечатныхФорм КАК тсВидыПечатныхДокументовШаблоныПечатныхФорм
		|ГДЕ
		|	тсВидыПечатныхДокументовШаблоныПечатныхФорм.ШаблонПечатнойФормы ССЫЛКА Справочник.тсВидыПечатныхДокументов
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|ИТОГИ ПО
		|	Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СодержаниеВладельцев = Новый Соответствие;
	Пока ВыборкаСсылка.Следующий() Цикл
	
		Владелец = ВыборкаСсылка.Ссылка;
		
		ВладелецЧейТоПотомок = СодержаниеВладельцев.Получить(Владелец);
		Пока ВладелецЧейТоПотомок <> Неопределено Цикл
		
			Владелец = ВладелецЧейТоПотомок;
			ВладелецЧейТоПотомок = СодержаниеВладельцев.Получить(Владелец);
		
		КонецЦикла;
		
		ВыборкаДетальныеЗаписи = ВыборкаСсылка.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Потомок = ВыборкаДетальныеЗаписи.Шаблон;
			Если Потомок = Владелец Тогда
			
				Возврат Истина;
			
			КонецЕсли;
			УжеЕстьВладелец = СодержаниеВладельцев.Получить(Потомок);
			Если УжеЕстьВладелец <> Неопределено Тогда
			
				Возврат Истина;
			
			КонецЕсли;
			СодержаниеВладельцев.Вставить(Потомок, Владелец);
			
		КонецЦикла;
	
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции // ()

Функция ОбъектыПоНазначению(Объекты, ТипНазначения) Экспорт

	Менеджер = УправлениеМетаданными.МенеджерОбъектаПоТипу(ТипНазначения);
	Попытка
	
		КонвертированныеОбъекты = Менеджер.КонвертироватьЗависимости(Объекты);
	
	Исключение
		ВызватьИсключение "Для типа: " + ТипНазначения + " конвертация не реализована";
	КонецПопытки;

	Возврат КонвертированныеОбъекты;

КонецФункции // ()

#КонецОбласти

#Область Вспомагательные

Процедура СформироватьКомплектыПоШаблонам(ПечатнаяФорма, Основания, Комплекты)

	Шаблоны = ВыгрузкаШаблоновДляПечати(ПечатнаяФорма);
	Макеты = ПолучитьМакетыШаблонов(Шаблоны, ПечатнаяФорма.ОднаИсходящаяКорреспонденция);
	
	Для каждого Основание Из Основания Цикл
	
		АдресаДокументовПоОснованию = СформироватьКомплектБСП(Основание, Макеты);
		
		ЗаполненыеАдреса = Комплекты.Получить(Основание);
		Если ЗаполненыеАдреса <> Неопределено Тогда
		
			Для каждого АдресДокументов Из ЗаполненыеАдреса Цикл
			
				АдресаДокументовПоОснованию.Вставить(
					АдресДокументов.Ключ,
					АдресДокументов.Значение
				);
			
			КонецЦикла;
		
		КонецЕсли;
		
		Комплекты.Вставить(Основание, АдресаДокументовПоОснованию);
	
	КонецЦикла;
	
	ОписаниеМакетов = Макеты["ОписаниеМакетов"];
	Для каждого Макет Из ОписаниеМакетов Цикл
	
		УправлениеПечатью.ОчиститьСсылки(Макет.Значение.Макет);
	
	КонецЦикла;

КонецПроцедуры

Функция ВложенныеНаборыДляПечати(ВидШаблона)

	Выгрузка = ВыгрузкаШаблоновДляПечати(ВидШаблона, Истина);
	Возврат Выгрузка.ВыгрузитьКолонку("ШаблонПечатнойФормы");

КонецФункции // ()

Функция ВыгрузкаШаблоновДляПечати(ВидШаблона, ПолучитьНаборы = Ложь)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	тсВидыПечатныхДокументовШаблоныПечатныхФорм.ШаблонПечатнойФормы КАК ШаблонПечатнойФормы,
		|	тсВидыПечатныхДокументовШаблоныПечатныхФорм.ФункцияСвойств КАК ФункцияСвойств,
		|	тсВидыПечатныхДокументовШаблоныПечатныхФорм.ФункцияКоличество КАК ФункцияКоличество,
		|	тсВидыПечатныхДокументовШаблоныПечатныхФорм.ИсходящийНомер КАК ИсходящийНомер,
		|	тсВидыПечатныхДокументовШаблоныПечатныхФорм.Прикреплять КАК Прикреплять
		|ИЗ
		|	Справочник.тсВидыПечатныхДокументов.ШаблоныПечатныхФорм КАК тсВидыПечатныхДокументовШаблоныПечатныхФорм
		|ГДЕ
		|	тсВидыПечатныхДокументовШаблоныПечатныхФорм.Ссылка = &Ссылка
		|	И &УсловиеОтбораПоНаборам";
	
	Запрос.УстановитьПараметр("Ссылка", ВидШаблона);
	Замена = "тсВидыПечатныхДокументовШаблоныПечатныхФорм.ШаблонПечатнойФормы ССЫЛКА Справочник.тсВидыПечатныхДокументов";
	Если Не ПолучитьНаборы Тогда
	
		Замена = "НЕ " + Замена;
	
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбораПоНаборам", Замена);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();

КонецФункции // ()

Функция ТипПервогоШаблона(ПечатнаяФорма)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВЫРАЗИТЬ(тсВидыПечатныхДокументовШаблоныПечатныхФорм.ШаблонПечатнойФормы КАК Справочник.тсШаблоныПечатныхДокументов) КАК Шаблон,
		|	тсВидыПечатныхДокументовШаблоныПечатныхФорм.ШаблонПечатнойФормы.ТипДокумента КАК ТипДокумента
		|ИЗ
		|	Справочник.тсВидыПечатныхДокументов.ШаблоныПечатныхФорм КАК тсВидыПечатныхДокументовШаблоныПечатныхФорм
		|ГДЕ
		|	тсВидыПечатныхДокументовШаблоныПечатныхФорм.ШаблонПечатнойФормы ССЫЛКА Справочник.тсШаблоныПечатныхДокументов
		|	И тсВидыПечатныхДокументовШаблоныПечатныхФорм.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ПечатнаяФорма);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
	
		Возврат ВыборкаДетальныеЗаписи.ТипДокумента;
	
	КонецЕсли;
	
	Возврат Константы.ТипШаблонаДляПечати.Получить();

КонецФункции

Функция ПолучитьНастройкуШаблоновКомплекта(Комплект)

	Возврат Комплект.Значение.Ключ;

КонецФункции // ()

Функция ЗначенияПоОбласти(Область, ДанныеОбъекта)

	Если Область.ТипОбласти = "Общая" Тогда
	
		Возврат ДанныеОбъекта.Общие;
	
	КонецЕсли;
	
	Если Область.ТипОбласти = "СтрокаТаблицы" Тогда
	
		Возврат ДанныеОбъекта.Таблицы[Область.ИмяОбласти];
	
	КонецЕсли;
	
	Возврат Новый Структура;

КонецФункции // ()

#КонецОбласти

Функция ПолучитьМакетыШаблонов(Шаблоны, ОднаКорреспонденция)

	ОписаниеМакетов = Новый Соответствие;

	Для каждого СтрокаВидШаблона Из Шаблоны Цикл

		ВидШаблона = СтрокаВидШаблона.ШаблонПечатнойФормы;
		ОписаниеМакета = ЗаполнитьМакетШаблона(ВидШаблона, СтрокаВидШаблона);
		ОписаниеМакетов.Вставить(
			ОписаниеМакета["НастройкиШаблона"],
			ОписаниеМакета["МакетСНастройками"]
		);
		
	КонецЦикла;
	
	НастройкиФормированияКорреспонденции = Новый Структура;
	НастройкиФормированияКорреспонденции.Вставить("Пачкой", ОднаКорреспонденция);
	НастройкиФормированияКорреспонденции.Вставить("ЗначенияСформированы", Ложь);
	НастройкиФормированияКорреспонденции.Вставить("РегистрационныйНомер", Неопределено);
	НастройкиФормированияКорреспонденции.Вставить("ДатаРегистрации", Неопределено);
	
	Данные = Новый Структура;
	Данные.Вставить("ОписаниеМакетов", ОписаниеМакетов);
	Данные.Вставить("Корреспонденция", НастройкиФормированияКорреспонденции);
	
	Возврат Данные;

КонецФункции

Функция ЗаполнитьМакетШаблона(ВидШаблона, СтрокаВидШаблона = Неопределено)

	ВидШаблонаОбъект = ВидШаблона.ПолучитьОбъект();
	БинарныеДанные = ВидШаблонаОбъект.МакетШаблона();
	
	Макет = УправлениеПечатью.ИнициализироватьМакетОфисногоДокумента(БинарныеДанные, "");
	
	ОписаниеОбластей = Новый Структура;
	ЗадатьОбласти(ОписаниеОбластей, ВидШаблона);
	
	НастройкиОбластей = Новый Структура;
	НастройкиОбластей.Вставить(
		"Общая",
		Справочники.тсШаблоныПечатныхДокументов.НастройкаСоответствияРеквизитов(ВидШаблона)
	);
	НастройкиОбластей.Вставить(
		"СтрокаТаблицы",
		Справочники.тсШаблоныПечатныхДокументов.НастройкаСоответствияТабличнойЧасти(ВидШаблона)
	);
	НастройкиОбластей.Вставить("ОписаниеОбластей", ОписаниеОбластей);

	МакетСНастройками = Новый Структура;
	МакетСНастройками.Вставить("Макет", Макет);
	МакетСНастройками.Вставить("Области", НастройкиОбластей);
	
	НастройкиШаблона = ИнициализироватьСтруктуруНастройкиШаблонов();
	Если СтрокаВидШаблона <> Неопределено Тогда
	
		НастройкиШаблона.Вставить("ШаблонПечатнойФормы", СтрокаВидШаблона.ШаблонПечатнойФормы);
		НастройкиШаблона.Вставить("ФункцияСвойств", СтрокаВидШаблона.ФункцияСвойств);
		НастройкиШаблона.Вставить("ФункцияКоличество", СтрокаВидШаблона.ФункцияКоличество);
		НастройкиШаблона.Вставить("ИсходящийНомер", СтрокаВидШаблона.ИсходящийНомер);
		НастройкиШаблона.Вставить("Прикреплять", СтрокаВидШаблона.Прикреплять);
	
	КонецЕсли;
	
	Если НастройкиШаблона["ИсходящийНомер"] Тогда
	
		НастройкиКорреспонденции = Новый Структура;
		НастройкиКорреспонденции.Вставить("ИмяНомера", ВидШаблона.ТегРегНомер);
		НастройкиКорреспонденции.Вставить("ИмяДаты", ВидШаблона.ТегРегДата);
		НастройкиКорреспонденции.Вставить("ТипПисьма", ВидШаблона.ТипПисьма);
		НастройкиКорреспонденции.Вставить("НачалоТега", ВидШаблона.НачалоТега);
		НастройкиКорреспонденции.Вставить("КонецТега", ВидШаблона.КонецТега);
		НастройкиКорреспонденции.Вставить("РегистрационныйНомер", Неопределено);
		НастройкиКорреспонденции.Вставить("ДатаРегистрации", Неопределено);
		
		МакетСНастройками.Вставить("Корреспонденция", НастройкиКорреспонденции);
	
	КонецЕсли;
	
	ОписаниеМакета = Новый Структура;
	ОписаниеМакета.Вставить("НастройкиШаблона", НастройкиШаблона);
	ОписаниеМакета.Вставить("МакетСНастройками", МакетСНастройками);
	
	Возврат ОписаниеМакета;

КонецФункции

Функция СформироватьКомплектБСП(Основание, Макеты)

	АдресаПечатныхФорм = Новый Соответствие;
	ОписаниеМакетов = Макеты["ОписаниеМакетов"];
	Корреспонденция = Макеты["Корреспонденция"];
	Корреспонденция["ЗначенияСформированы"] = Ложь;
	Для каждого ОписаниеМакета Из ОписаниеМакетов Цикл
	
		МакетСНастройкой = ОписаниеМакета.Значение;
		ТекущийАдрес = СформироватьПечатнуюФорму(Основание, МакетСНастройкой, Корреспонденция);
		
		НастройкиШаблона = ОписаниеМакета.Ключ;
		Данные = Новый Структура;
		Для каждого Элемент Из НастройкиШаблона Цикл
		
			Данные.Вставить(Элемент.Ключ, Элемент.Значение);
		
		КонецЦикла;
		
		НастройкиКорреспонденции = Неопределено;
		МакетСНастройкой.Свойство("Корреспонденция", НастройкиКорреспонденции);
		Если НастройкиКорреспонденции <> Неопределено Тогда
		
			Данные.Вставить("РегистрационныйНомер", НастройкиКорреспонденции["РегистрационныйНомер"]);
			Данные.Вставить("ДатаРегистрации", НастройкиКорреспонденции["ДатаРегистрации"]);
		
		КонецЕсли;
		
		АдресаПечатныхФорм.Вставить(Данные, ТекущийАдрес);
	
	КонецЦикла;
	
	Возврат АдресаПечатныхФорм;

КонецФункции

Функция СформироватьПечатнуюФорму(Основание, МакетСНастройкой, ОбщиеНастройкиКорреспонденции = Неопределено)

	Макет = МакетСНастройкой.Макет;
	
	Попытка
	
		ПечатнаяФорма = УправлениеПечатью.ИнициализироватьПечатнуюФорму(Неопределено, , Макет);
		АдресХранилищаПечатнойФормы = "";
		
		Если ПечатнаяФорма = Неопределено Тогда
			УправлениеПечатью.ОчиститьСсылки(Макет);
			Возврат "";
		КонецЕсли;

		НастройкиКорреспонденции = Неопределено;
		Если ОбщиеНастройкиКорреспонденции <> Неопределено Тогда
		
			МакетСНастройкой.Свойство("Корреспонденция", НастройкиКорреспонденции);
		
		КонецЕсли;
		ДанныеОбъекта = ДанныеПоОснованию(
			Основание,
			МакетСНастройкой.Области,
			НастройкиКорреспонденции,
			ОбщиеНастройкиКорреспонденции
		);
	
		ОписаниеОбластей = МакетСНастройкой.Области.ОписаниеОбластей;

		Для каждого ОписаниеОбласти Из ОписаниеОбластей Цикл
		
			Область = УправлениеПечатью.ОбластьМакета(Макет, ОписаниеОбласти.Значение);
			
			ДанныеОбласти = ЗначенияПоОбласти(ОписаниеОбласти.Значение, ДанныеОбъекта);
			
			Если ОписаниеОбласти.Значение.ТипОбласти = "СтрокаТаблицы" Тогда
			
				УправлениеПечатью.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбласти);
				Продолжить;
			
			КонецЕсли;
			УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбласти);
		
		КонецЦикла;
		
		АдресХранилищаПечатнойФормы = УправлениеПечатью.СформироватьДокумент(ПечатнаяФорма);
	
	Исключение
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗакрытьОкноПечатнойФормы = Истина;
	КонецПопытки;
	
	УправлениеПечатью.ОчиститьСсылки(ПечатнаяФорма, ЗакрытьОкноПечатнойФормы);
	
	Возврат АдресХранилищаПечатнойФормы;

КонецФункции

Процедура ЗадатьОбласти(ОписаниеОбластей, ВидШаблона)

	НастройкаПоПорядку = Справочники.тсШаблоныПечатныхДокументов.ПорядокОбластей(ВидШаблона);
	Для каждого Настройка Из НастройкаПоПорядку Цикл
	
		УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, Настройка.ИмяОбласти, Настройка.ТипОбласти);
	
	КонецЦикла;

КонецПроцедуры // ()

Функция ДанныеПоОснованию(Основание, НастройкиОбласти, НастройкаКорреспонденция, ОбщиеНастройкиКорреспонденции)

	НастройкаОбщая = НастройкиОбласти.Общая;
	НастройкаТаблицы = НастройкиОбласти.СтрокаТаблицы;
	
	ДанныеРеквизитов = Новый Структура;
	ДанныеТаблиц = Новый Структура;
	
	ЗаполнитьПоля(ДанныеРеквизитов, НастройкаОбщая, Основание);
	
	Если НастройкаКорреспонденция <> Неопределено Тогда
	
		ДобавитьПоляКорреспонденции(ДанныеРеквизитов, НастройкаКорреспонденция, ОбщиеНастройкиКорреспонденции, Основание);
	
	КонецЕсли;
	
	ФункцииОбластей = НастройкаТаблицы.Скопировать();
	ФункцииОбластей.Свернуть("ИмяОбласти, ФункцияОбласти");
	Для каждого ФункцияОбласти Из ФункцииОбластей Цикл
	
		ЗначенияТаблицы = ТабличныеЗначения(Основание, ФункцияОбласти);

		ОтборОбласти = Новый Структура;
		ОтборОбласти.Вставить("ИмяОбласти", ФункцияОбласти.ИмяОбласти);
		НастройкиПоИмениОбласти = НастройкаТаблицы.НайтиСтроки(ОтборОбласти);
		ЗначенияПолей = Новый ТаблицаЗначений;
		Для каждого СтрокаНастройки Из НастройкиПоИмениОбласти Цикл
		
			Поле = УбратьТегиПоля(СтрокаНастройки.Поле, СтрокаНастройки.НачалоТега, СтрокаНастройки.КонецТега);
			ЗначенияПолей.Колонки.Добавить(Поле);
		
		КонецЦикла;
		
		Для каждого СтрокаТаблицы Из ЗначенияТаблицы Цикл
		
			ОбработатьПоляТаблицы(ЗначенияПолей, НастройкиПоИмениОбласти, СтрокаТаблицы);
		
		КонецЦикла;
		
		ФинальныеЗначенияТабличнойОбласти = ОбщегоНазначения.ТаблицаЗначенийВМассив(ЗначенияПолей);
		ДанныеТаблиц.Вставить(ФункцияОбласти.ИмяОбласти, ФинальныеЗначенияТабличнойОбласти);
	
	КонецЦикла;
	
	Данные = Новый Структура;
	Данные.Вставить("Общие", ДанныеРеквизитов);
	Данные.Вставить("Таблицы", ДанныеТаблиц);
	Возврат Данные;

КонецФункции // ()

Функция ТабличныеЗначения(ОбъектВх, СтрокаНастройки)

	Значение = Новый ТаблицаЗначений;
	Выполнить(СтрокаНастройки.ФункцияОбласти.Функция);
	
	Возврат Значение;

КонецФункции // ()

Функция УбратьТегиПоля(Поле, НачалоТега, КонецТега)

	Поле = СтрЗаменить(Поле, НачалоТега, "");
	Поле = СтрЗаменить(Поле, КонецТега, "");
	
	Возврат Поле;

КонецФункции // ()

Процедура ОбработатьПоляТаблицы(РезультирующаяТаблица, НастройкаСоответствий, СтрокаТаблицы)

	СтрокаРезультат = РезультирующаяТаблица.Добавить();
	Для каждого СтрокаНастройки Из НастройкаСоответствий Цикл
	
		Поле = УбратьТегиПоля(СтрокаНастройки.Поле, СтрокаНастройки.НачалоТега, СтрокаНастройки.КонецТега);
		
		Значение = СтрокаТаблицы[СтрокаНастройки.Значение];
		Основание = Неопределено;
		Значение = ПрименитьФункцию(СтрокаНастройки, Основание, Значение);

		СтрокаРезультат[Поле] = Значение;
	
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьПоля(ГотовыеЗначения, НастройкаСоответствий, Основание)

	Для каждого СтрокаНастройки Из НастройкаСоответствий Цикл
	
		Поле = УбратьТегиПоля(СтрокаНастройки.Поле, СтрокаНастройки.НачалоТега, СтрокаНастройки.КонецТега);
		
		Значение = "";
		Выполнить("Значение = ЗначениеПоОснованию_" + Строка(СтрокаНастройки.ТипПоля) + "(СтрокаНастройки, Основание)");

		ГотовыеЗначения.Вставить(Поле, Значение);
	
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьПоляКорреспонденции(ГотовыеЗначения, НастройкаКорреспонденция, ОбщиеНастройкиКорреспонденции, Основание)

	КонтрольДанныеИсходящейКорреспонденции(НастройкаКорреспонденция, ОбщиеНастройкиКорреспонденции, Основание);
	РегистрационныйНомер = НастройкаКорреспонденция["РегистрационныйНомер"];
	ДатаРегистрации = НастройкаКорреспонденция["ДатаРегистрации"];
	
	ИмяМодуля = УбратьТегиПоля(
		НастройкаКорреспонденция["ИмяНомера"],
		НастройкаКорреспонденция.НачалоТега,
		НастройкаКорреспонденция.КонецТега
	);
	ГотовыеЗначения.Вставить(
		ИмяМодуля,
		РегистрационныйНомер
	);
	ИмяДаты = УбратьТегиПоля(
		НастройкаКорреспонденция["ИмяДаты"],
		НастройкаКорреспонденция.НачалоТега,
		НастройкаКорреспонденция.КонецТега
	);
	ГотовыеЗначения.Вставить(
		ИмяДаты,
		Формат(ДатаРегистрации, "ДФ=dd.MM.yyyy")
	);

КонецПроцедуры

Процедура КонтрольДанныеИсходящейКорреспонденции(НастройкаКорреспонденция, ОбщиеНастройкиКорреспонденции, Основание)

	Если Не ОбщиеНастройкиКорреспонденции["ЗначенияСформированы"] Тогда
	
		ОбщиеНастройкиКорреспонденции["РегистрационныйНомер"] = РегистрацияКорреспонденции.СледующийНомер(
			НастройкаКорреспонденция["ТипПисьма"],
			Основание
		);
		ОбщиеНастройкиКорреспонденции["ДатаРегистрации"] = ТекущаяДатаСеанса();
		
		Если ОбщиеНастройкиКорреспонденции["Пачкой"] Тогда
		
			ОбщиеНастройкиКорреспонденции["ЗначенияСформированы"] = Истина;
		
		КонецЕсли;
	
	КонецЕсли;
	
	НастройкаКорреспонденция["РегистрационныйНомер"] = ОбщиеНастройкиКорреспонденции["РегистрационныйНомер"];
	НастройкаКорреспонденция["ДатаРегистрации"] = ОбщиеНастройкиКорреспонденции["ДатаРегистрации"];

КонецПроцедуры // ()

#Область ЗаполнениеЗначений

Функция ЗначениеПоОснованию_Реквизит(СтрокаНастройки, Основание)

	Значение = УЭДСервер.ГенерацияЗначениия(СтрокаНастройки, Ложь, Основание);
	
	Возврат ПрименитьФункцию(СтрокаНастройки, Основание, Значение);

КонецФункции // ()

Функция ЗначениеПоОснованию_Текст(СтрокаНастройки, Основание)

	Значение = СтрокаНастройки.Значение;
	
	Возврат ПрименитьФункцию(СтрокаНастройки, Основание, Значение);

КонецФункции // ()

Функция ПрименитьФункцию(СтрокаНастройки, Основание, Значение)

	НовоеЗначение = Значение;
	
	ФункцияОпределена = УЭДСервер.ФункцияУспешноОпределена(СтрокаНастройки);
	Если ФункцияОпределена Тогда
		
		НовоеЗначение = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(
			СтрокаНастройки.Функция,
			Основание,
			НовоеЗначение
		);

	КонецЕсли;
	
	Возврат НовоеЗначение;

КонецФункции // ()

#КонецОбласти

#Область ВспомогательныеКонверт

Функция ДополнитьМакетШаблонов(МакетСНастройками, ВставляемыеЗначения)

	НастройкиОбластей = МакетСНастройками["Области"];
	ТаблицаЗаполнения = НастройкиОбластей["Общая"];
	
	Теги = Обработки.МастерСозданияПартионнойПочты;
	Штрихкод = Теги.ТегШтрихкода();
	Отображение = Теги.ТегОтображения();

	Для каждого ПоискЗначенийШПИ Из ТаблицаЗаполнения Цикл
	
		Поле = СтрЗаменить(ПоискЗначенийШПИ.Поле, ПоискЗначенийШПИ.НачалоТега, "");
		Поле = СтрЗаменить(Поле, ПоискЗначенийШПИ.КонецТега, "");
		Если Поле = Штрихкод ИЛИ Поле = Отображение Тогда
		
			ПоискЗначенийШПИ.Значение = ВставляемыеЗначения[Поле];
			ПоискЗначенийШПИ.ТипПоля = Перечисления.ТипыПолейУЭД.Текст;
		
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат МакетСНастройками;

КонецФункции

#КонецОбласти

Функция ЗначенияОбщейОбласти(Основание, НастройкаМакета)

	Данные = Новый Структура;
	
	Для каждого СтрокаНастройки Из НастройкаМакета Цикл
	
		Поле = СтрЗаменить(СтрокаНастройки.Поле, СтрокаНастройки.НачалоТега, "");
		Поле = СтрЗаменить(Поле, СтрокаНастройки.КонецТега, "");
		
		Значение = "";
		Выполнить("Значение = ПоОснованию_" + Строка(СтрокаНастройки.ТипПоля) + "(СтрокаНастройки, Основание)");

		Данные.Вставить(Поле, Значение);
	
	КонецЦикла;
	
	Возврат Данные;

КонецФункции // ()

#КонецЕсли

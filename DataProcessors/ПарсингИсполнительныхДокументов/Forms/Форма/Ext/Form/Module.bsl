&НаКлиенте
Перем ОтветПередЗакрытием;

&НаСервере
Процедура РаспознатьНаСервере()
	Объект.ТЧ.Очистить();
	ImageMagickConvert = Константы.ImageMagickConvert.Получить();
	Tesseract = Константы.Tesseract.Получить();		
	ПутьВременныеКаталоги = ПутьВременныеКаталогиНаСервере();
	УдаленыВременныеКаталоги = УдалитьВременныеКаталогиПередВыполнениемНаСервере(ПутьВременныеКаталоги);
	ВременныеКаталоги = СоздатьВременныеКаталогиНаСервере(ПутьВременныеКаталоги);
	ПроверкаНаДубли = ПроверкаНаДубли();
	Если УдаленыВременныеКаталоги И ЗначениеЗаполнено(Настройка) И ПроверкаНаДубли И ВременныеКаталоги <> Неопределено 
		И ЗначениеЗаполнено(ImageMagickConvert) И ЗначениеЗаполнено(Tesseract) Тогда
		сНастройка = ПолучитьНастройкиНаСервере(Настройка); 
		ЗаполитьТчИКонвертироватьВордВПдфНаСервере(ВременныеКаталоги, сНастройка);
		СоздатьFilesToJPEGНаСервере(ВременныеКаталоги, ImageMagickConvert, сНастройка);
		СоздатьJPEGToTxtНаСервере(ВременныеКаталоги, Tesseract,сНастройка);
		ОбходТХТНаСервере(ВременныеКаталоги, сНастройка);
		Если сНастройка.СжиматьИзображаниеДляПросмотра Тогда
			СоздатьДляПросмотраFilesToJPEGНаСервере(ВременныеКаталоги, ImageMagickConvert, сНастройка);
			КаталогПросмотра = ВременныеКаталоги.Получить("TempJpeg");
		Иначе
			КаталогПросмотра = ВременныеКаталоги.Получить("jpeg");	
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РаспознатьНаКлиенте()
	Объект.ТЧ.Очистить();
	сНастройка = ПолучитьНастройкиНаСервере(Настройка); 
	ImageMagickConvert = сНастройка.ImageMagickConvert;
	Tesseract = сНастройка.Tesseract;		
	ПутьВременныеКаталоги = ПутьВременныеКаталогиНаСервере();
	УдаленыВременныеКаталоги = УдалитьВременныеКаталогиПередВыполнениемНаКлиенте(ПутьВременныеКаталоги);
	ВременныеКаталоги = СоздатьВременныеКаталогиНаКлиенте(ПутьВременныеКаталоги);
	Если УдаленыВременныеКаталоги И ЗначениеЗаполнено(Настройка) И ВременныеКаталоги <> Неопределено 
		И ЗначениеЗаполнено(ImageMagickConvert) И ЗначениеЗаполнено(Tesseract) Тогда
		ЗаполитьТчИКонвертироватьВордВПдфНаКлиенте(ВременныеКаталоги, сНастройка);
		СоздатьFilesToJpegНаКлиенте(ВременныеКаталоги, ImageMagickConvert, сНастройка);
		СоздатьJpegToTxtНаКлиенте(ВременныеКаталоги, Tesseract,сНастройка);
		ОбходТХТНаКлиенте(ВременныеКаталоги, сНастройка);
			Если сНастройка.СжиматьИзображаниеДляПросмотра Тогда
			СоздатьДляПросмотраFilesToJPEGНаКлиенте(ВременныеКаталоги, ImageMagickConvert, сНастройка);
			КаталогПросмотра = ВременныеКаталоги.Получить("TempJpeg");
		Иначе
			КаталогПросмотра = ВременныеКаталоги.Получить("jpeg");	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция РеквизитыНастройки()
	мРеквизитов = Новый Массив();	
	Для Каждого Реквизит Из Настройка.Метаданные().Реквизиты Цикл
		мРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	Возврат мРеквизитов;
КонецФункции // РеквизитыНастройки()

&НаСервере
Функция ПроверкаНаДубли()
	ТЗДубли = Новый ТаблицаЗначений;
	ТЗДубли.Колонки.Добавить("ИмяБезРасширения",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024)));
	ТЗДубли.Колонки.Добавить("ПолноеИмя",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024)));
	Файлы = НайтиФайлы(КаталогДокументов,"*.*",Ложь);
	Для Каждого Файл Из Файлы Цикл
		СтрокаТЗ = ТЗДубли.Добавить();
		ИмяБезРасширения = СтрЗаменить(Файл.ИмяБезРасширения," ","");
		СтрокаТЗ.ИмяБезРасширения = СтрЗаменить(ИмяБезРасширения,"-","");	
		СтрокаТЗ.ПолноеИмя = Файл.ПолноеИмя;	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗДубли.ИмяБезРасширения КАК ИмяБезРасширения,
	|	ТЗДубли.ПолноеИмя КАК ПолноеИмя
	|ПОМЕСТИТЬ ВТ_ТЗДубли
	|ИЗ
	|	&ТЗДубли КАК ТЗДубли
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЗДубли.ИмяБезРасширения КАК ИмяБезРасширения,
	|	КОЛИЧЕСТВО(ВТ_ТЗДубли.ИмяБезРасширения) КАК ИмяБезРасширения1,
	|	ВТ_ТЗДубли1.ПолноеИмя КАК ПолноеИмя
	|ИЗ
	|	ВТ_ТЗДубли КАК ВТ_ТЗДубли
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТЗДубли КАК ВТ_ТЗДубли1
	|		ПО ВТ_ТЗДубли.ИмяБезРасширения = ВТ_ТЗДубли1.ИмяБезРасширения
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТЗДубли.ИмяБезРасширения,
	|	ВТ_ТЗДубли1.ПолноеИмя
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ВТ_ТЗДубли.ИмяБезРасширения) > 1";
	
	Запрос.УстановитьПараметр("ТЗДубли",ТЗДубли);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = Объект.ТЧ.Добавить();
		СтрокаТЧ.ОригиналСкана = Выборка.ПолноеИмя;
		СтрокаТЧ.Ошибка = Истина;
	КонецЦикла;
	
	Если Объект.ТЧ.Количество() = 0 Тогда
		Возврат Истина;
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Присутсвуют дубли файлов по имени без учета расширения файла или дубли файлов без учета пробелов в имени. Необходимо исправить имена файлов выделенные красным.";
		Сообщение.Сообщить();
		Возврат Ложь
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура Распознать(Команда)
	
	Если Не УправлениеДоступами.ЕстьДоступНаПарсинг() Тогда
	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Нужны права на парсинг!";
		Сообщение.Сообщить();
		Возврат;
	
	КонецЕсли;
	
	ОчиститьСообщения();  
	ВыполнятьНа = ВыполнятьНа();
	Если ВыполнятьНа = "2" Тогда
		РаспознатьНаКлиенте();
	Иначе
		РаспознатьНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СоздатьВременныеКаталогиНаСервере(ПутьВременныеКаталоги)
	Попытка		
		Cmd = Новый Файл(ПутьВременныеКаталоги.Получить("Cmd"));
		Если Cmd.Существует() = Ложь Тогда
			СоздатьКаталог(Cmd.ПолноеИмя);
		КонецЕсли;
		ПутьCmd = Cmd.ПолноеИмя + "\";
		
		WordToPDF = Новый Файл(ПутьВременныеКаталоги.Получить("WordToPDF"));
		Если WordToPDF.Существует() = Ложь Тогда
			СоздатьКаталог(WordToPDF.ПолноеИмя);
		КонецЕсли;
		ПутьWordToPDF = WordToPDF.ПолноеИмя + "\";
		
		jpeg = Новый Файл(ПутьВременныеКаталоги.Получить("jpeg"));
		Если jpeg.Существует() = Ложь Тогда
			СоздатьКаталог(jpeg.ПолноеИмя);
		КонецЕсли;
		Путьjpeg = jpeg.ПолноеИмя + "\";
		КлиентПутьjpeg = Путьjpeg;
		
		TXT = Новый Файл(ПутьВременныеКаталоги.Получить("TXT"));
		Если TXT.Существует() = Ложь Тогда
			СоздатьКаталог(TXT.ПолноеИмя);
		КонецЕсли;		
		ПутьTXT = TXT.ПолноеИмя + "\";
		
		TempJpeg = Новый Файл(ПутьВременныеКаталоги.Получить("TempJpeg"));
		Если TempJpeg.Существует() = Ложь Тогда
			СоздатьКаталог(TempJpeg.ПолноеИмя);
		КонецЕсли;
		ПутьTempJpeg = TempJpeg.ПолноеИмя + "\";
	
		ВременныеКаталоги = Новый Соответствие;
		ВременныеКаталоги.Вставить("КаталогДокументов",КаталогДокументов);
		ВременныеКаталоги.Вставить("Cmd",ПутьCmd);
		ВременныеКаталоги.Вставить("WordToPDF",ПутьWordToPDF);
		ВременныеКаталоги.Вставить("jpeg",Путьjpeg);
		ВременныеКаталоги.Вставить("TXT",ПутьTXT);
		ВременныеКаталоги.Вставить("TempJpeg",ПутьTempJpeg);
		Возврат ВременныеКаталоги;
	Исключение
		Ошибка = ОписаниеОшибки();
		ЗаписатьВЖурналРегистрации(Ошибка);
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции // СоздатьВременныеКаталогиНаСервере()

&НаКлиенте
Функция СоздатьВременныеКаталогиНаКлиенте(ПутьВременныеКаталоги)
	Попытка		
		Cmd = Новый Файл(ПутьВременныеКаталоги.Получить("Cmd"));
		Если Cmd.Существует() = Ложь Тогда
			СоздатьКаталог(Cmd.ПолноеИмя);
		КонецЕсли;
		ПутьCmd = Cmd.ПолноеИмя + "\";
		
		WordToPDF = Новый Файл(ПутьВременныеКаталоги.Получить("WordToPDF"));
		Если WordToPDF.Существует() = Ложь Тогда
			СоздатьКаталог(WordToPDF.ПолноеИмя);
		КонецЕсли;
		ПутьWordToPDF = WordToPDF.ПолноеИмя + "\";
		
		jpeg = Новый Файл(ПутьВременныеКаталоги.Получить("jpeg"));
		Если jpeg.Существует() = Ложь Тогда
			СоздатьКаталог(jpeg.ПолноеИмя);
		КонецЕсли;
		Путьjpeg = jpeg.ПолноеИмя + "\";
		КлиентПутьjpeg = Путьjpeg;
		
		TXT = Новый Файл(ПутьВременныеКаталоги.Получить("TXT"));
		Если TXT.Существует() = Ложь Тогда
			СоздатьКаталог(TXT.ПолноеИмя);
		КонецЕсли;		
		ПутьTXT = TXT.ПолноеИмя + "\";
		
		TempJpeg = Новый Файл(ПутьВременныеКаталоги.Получить("TempJpeg"));
		Если TempJpeg.Существует() = Ложь Тогда
			СоздатьКаталог(TempJpeg.ПолноеИмя);
		КонецЕсли;
		ПутьTempJpeg = TempJpeg.ПолноеИмя + "\";
	
		ВременныеКаталоги = Новый Соответствие;
		ВременныеКаталоги.Вставить("КаталогДокументов",КаталогДокументов);
		ВременныеКаталоги.Вставить("Cmd",ПутьCmd);
		ВременныеКаталоги.Вставить("WordToPDF",ПутьWordToPDF);
		ВременныеКаталоги.Вставить("jpeg",Путьjpeg);
		ВременныеКаталоги.Вставить("TXT",ПутьTXT);
		ВременныеКаталоги.Вставить("TempJpeg",ПутьTempJpeg);
		Возврат ВременныеКаталоги;
	Исключение
		Ошибка = ОписаниеОшибки();
		ЗаписатьВЖурналРегистрации(Ошибка);
		Сообщить(Ошибка);
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции // СоздатьВременныеКаталогиНаСервере()

&НаСервере
Функция ПутьВременныеКаталогиНаСервере()
	ПутьCmd = КаталогДокументов + "\Cmd\";	
	ПутьWordToPDF = КаталогДокументов + "\WordToPDF\";		
	Путьjpeg = КаталогДокументов + "\jpeg\";
	КлиентПутьjpeg = Путьjpeg;		
	ПутьTXT = КаталогДокументов + "\TXT\";
	ПутьTempJpeg = КаталогДокументов + "\TempJpeg\";

	ВременныеКаталоги = Новый Соответствие;
	ВременныеКаталоги.Вставить("КаталогДокументов",КаталогДокументов);
	ВременныеКаталоги.Вставить("Cmd",ПутьCmd);
	ВременныеКаталоги.Вставить("WordToPDF",ПутьWordToPDF);
	ВременныеКаталоги.Вставить("jpeg",Путьjpeg);
	ВременныеКаталоги.Вставить("TXT",ПутьTXT);
	ВременныеКаталоги.Вставить("TempJpeg",ПутьTempJpeg);
	Возврат ВременныеКаталоги;	
КонецФункции // ПутьВременныеКаталогиНаСервере()

&НаСервере
Процедура УдалитьВременныеКаталогиНаСервере(ВременныеКаталоги)
	Попытка
		WordToPDF = ВременныеКаталоги.Получить("WordToPDF");
		ФайлWordToPDF = Новый Файл(WordToPDF);
		Если ФайлWordToPDF.Существует() Тогда
			УдалитьФайлы(WordToPDF);
		КонецЕсли;
		
		Cmd = ВременныеКаталоги.Получить("Cmd");
		ФайлCmd = Новый Файл(Cmd);
		Если ФайлCmd.Существует() Тогда
			УдалитьФайлы(Cmd);
		КонецЕсли;
		
		jpeg = ВременныеКаталоги.Получить("jpeg");
		Файлjpeg = Новый Файл(jpeg);
		Если Файлjpeg.Существует() Тогда
			УдалитьФайлы(jpeg);
		КонецЕсли;
		
		TXT = ВременныеКаталоги.Получить("TXT");
		ФайлTXT = Новый Файл(TXT);
		Если ФайлTXT.Существует() Тогда
			УдалитьФайлы(TXT);
		КонецЕсли;
		
		TempJpeg = ВременныеКаталоги.Получить("TempJpeg");
		ФайлTXT = Новый Файл(TempJpeg);
		Если ФайлTXT.Существует() Тогда
			УдалитьФайлы(TempJpeg);
		КонецЕсли;

	Исключение
		Ошибка = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("НедопустимаяОперация", УровеньЖурналаРегистрации.Ошибка,,,Ошибка);
		Сообщить(Ошибка);
	КонецПопытки;
КонецПроцедуры

&НаСервере
Функция УдалитьВременныеКаталогиПередВыполнениемНаСервере(ВременныеКаталоги)
	Попытка
		WordToPDF = ВременныеКаталоги.Получить("WordToPDF");
		ФайлWordToPDF = Новый Файл(WordToPDF);
		Если ФайлWordToPDF.Существует() Тогда
			УдалитьФайлы(WordToPDF);
		КонецЕсли;
		
		Cmd = ВременныеКаталоги.Получить("Cmd");
		ФайлCmd = Новый Файл(Cmd);
		Если ФайлCmd.Существует() Тогда
			УдалитьФайлы(Cmd);
		КонецЕсли;
		
		jpeg = ВременныеКаталоги.Получить("jpeg");
		Файлjpeg = Новый Файл(jpeg);
		Если Файлjpeg.Существует() Тогда
			УдалитьФайлы(jpeg);
		КонецЕсли;
		
		TXT = ВременныеКаталоги.Получить("TXT");
		ФайлTXT = Новый Файл(TXT);
		Если ФайлTXT.Существует() Тогда
			УдалитьФайлы(TXT);
		КонецЕсли;
		
		TempJpeg = ВременныеКаталоги.Получить("TempJpeg");
		ФайлTXT = Новый Файл(TempJpeg);
		Если ФайлTXT.Существует() Тогда
			УдалитьФайлы(TempJpeg);
		КонецЕсли;
	
		Возврат Истина;
	Исключение
		Ошибка = ОписаниеОшибки();
		ЗаписатьВЖурналРегистрации(Ошибка);
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаКлиенте
Функция УдалитьВременныеКаталогиПередВыполнениемНаКлиенте(ВременныеКаталоги)
	Попытка
		WordToPDF = ВременныеКаталоги.Получить("WordToPDF");
		ФайлWordToPDF = Новый Файл(WordToPDF);
		Если ФайлWordToPDF.Существует() Тогда
			УдалитьФайлы(WordToPDF);
		КонецЕсли;
		
		Cmd = ВременныеКаталоги.Получить("Cmd");
		ФайлCmd = Новый Файл(Cmd);
		Если ФайлCmd.Существует() Тогда
			УдалитьФайлы(Cmd);
		КонецЕсли;
		
		jpeg = ВременныеКаталоги.Получить("jpeg");
		Файлjpeg = Новый Файл(jpeg);
		Если Файлjpeg.Существует() Тогда
			УдалитьФайлы(jpeg);
		КонецЕсли;
		
		TXT = ВременныеКаталоги.Получить("TXT");
		ФайлTXT = Новый Файл(TXT);
		Если ФайлTXT.Существует() Тогда
			УдалитьФайлы(TXT);
		КонецЕсли;
		
		TempJpeg = ВременныеКаталоги.Получить("TempJpeg");
		ФайлTXT = Новый Файл(TempJpeg);
		Если ФайлTXT.Существует() Тогда
			УдалитьФайлы(TempJpeg);
		КонецЕсли;
	
		Возврат Истина;
	Исключение
		Ошибка = ОписаниеОшибки();
		ЗаписатьВЖурналРегистрации(Ошибка);
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаСервере
Процедура ЗаписатьВЖурналРегистрации(Ошибка)

	ЗаписьЖурналаРегистрации("НедопустимаяОперация", УровеньЖурналаРегистрации.Ошибка,,,Ошибка);
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Ошибка;
	Сообщение.Сообщить();

КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивРасширенийWord()
	
	мДокТипов = Новый Массив;
	мДокТипов.Добавить(".doc");
	мДокТипов.Добавить(".docx");
	мДокТипов.Добавить(".odt");
	мДокТипов.Добавить(".rtf");
	Возврат мДокТипов;
	
КонецФункции

&НаСервере
Процедура ЗаполитьТчИКонвертироватьВордВПдфНаСервере(ВременныеКаталоги, сНастройка)
	мДокТипов = МассивРасширенийWord();
	Файлы = НайтиФайлы(КаталогДокументов,"*.*",сНастройка.ВключатьВложенныеКаталоги);
	Для Каждого Файл Из Файлы Цикл
		Если Файл.ПолучитьНевидимость() ИЛИ ВременныеКаталоги.Получить(Файл.Имя) <> Неопределено Тогда
			Продолжить;
		ИначеЕсли ЗначениеЗаполнено(мДокТипов.Найти(Файл.Расширение)) Тогда
			СтрокаТЧ = Объект.ТЧ.Добавить();
			Наименование = Файл.ИмяБезРасширения;
			ФайлКопия = ВременныеКаталоги.Получить("WordToPDF") + Наименование + ".pdf";
			Попытка
				Если сНастройка.ТипыЭлДок = Перечисления.ТипыЭлДок.Word Тогда
					MSWordApp = Новый COMОбъект("Word.Application");
					MSWordApp.Visible = False;                     
					MSWordApp.Documents.Open(Файл.ПолноеИмя);				
					WordDocument = MSWordApp.Application.Documents(1);
					WordDocument.Activate();
					WordDocument.SaveAs(ФайлКопия, 17);				
					MSWordApp.Application.Quit();
					СтрокаТЧ.ОригиналСкана = Файл.ПолноеИмя;
					СтрокаТЧ.СокрОригиналСкана = ФайлКопия;
					СтрокаТЧ.Наименование = Наименование;
					СтрокаТЧ.Расширение = ".pdf"; 
				ИначеЕсли сНастройка.ТипыЭлДок = Перечисления.ТипыЭлДок.OpenOffice Тогда
					ServiceManager    = Новый COMОбъект("com.sun.star.ServiceManager");       
					
					Скрипт             = Новый COMОбъект("MSScriptControl.ScriptControl");
					Скрипт.language    = "javascript";
					Скрипт.AddObject("OpenOffice", ServiceManager);
					
					Скрипт.eval("Массив=new Array()");       
					Массив = Скрипт.eval("Массив");   
					Скрипт.eval("Массив[0] = OpenOffice.Bridge_GetStruct('com.sun.star.beans.PropertyValue')");
					Скрипт.eval("Массив[0].Name     = 'Hidden'");
					Скрипт.eval("Массив[0].Value = true");
					
					Скрипт.AddCode("function SetItem(ind,val){Массив[ind]=val}");       
					Скрипт.AddObject("ServiceManager",ServiceManager);
					Desktop = ServiceManager.createInstance("com.sun.star.frame.Desktop");       
					Document = Desktop.LoadComponentFromURL(ПреобразоватьВURL(Файл.ПолноеИмя), "_blank", 0, Массив);
					
					Скрипт.eval("Массив2=new Array()");       
					Массив2 = Скрипт.eval("Массив2");       
					Скрипт.eval("Массив2[0] = OpenOffice.Bridge_GetStruct('com.sun.star.beans.PropertyValue')");       
					Скрипт.eval("Массив2[0].Name  = 'FilterName'");
					Скрипт.eval("Массив2[0].Value = 'writer_pdf_Export'");
					
					ПолноеИмяФайлаPDF = ПреобразоватьВURL(ФайлКопия); 
					Document.storeToURL(ПолноеИмяФайлаPDF, Массив2);
					Document.close(-1);        //Закрыть документ
					
					//Контрольная очистка переменных
					Document    = Неопределено;
					Desktop     = Неопределено;	
					СтрокаТЧ.ОригиналСкана = Файл.ПолноеИмя;
					СтрокаТЧ.СокрОригиналСкана = ФайлКопия;
					СтрокаТЧ.Наименование = Наименование;
					СтрокаТЧ.Расширение = ".pdf"; 
				Иначе
					СтрокаТЧ.ОригиналСкана = Файл.ПолноеИмя;
					СтрокаТЧ.Ошибка = Истина;
					СтрокаТЧ.ТекстОшибки = "не заполнена настройка Чтение текстовых файлов"; 
					Ошибка = ОписаниеОшибки();
					ЗаписьЖурналаРегистрации("НедопустимаяОперация", УровеньЖурналаРегистрации.Ошибка,,,Ошибка);
					Сообщить(Ошибка);
				КонецЕсли;
			Исключение
				СтрокаТЧ.ОригиналСкана = Файл.ПолноеИмя;
				СтрокаТЧ.Ошибка = Истина;
				СтрокаТЧ.ТекстОшибки = "не удалось преобразовать документ в pdf или сохранить во временный каталог, возможно отсутствует программа Word или OpenOffice"; 
				Ошибка = ОписаниеОшибки();
				ЗаписатьВЖурналРегистрации(Ошибка);
			КонецПопытки;
		ИначеЕсли ЗначениеЗаполнено(Файл.Расширение) Тогда
			СтрокаТЧ = Объект.ТЧ.Добавить();
			СтрокаТЧ.ОригиналСкана = Файл.ПолноеИмя;
			СтрокаТЧ.СокрОригиналСкана = Файл.ПолноеИмя;
			СтрокаТЧ.Наименование = Файл.ИмяБезРасширения;
			СтрокаТЧ.Расширение = Файл.Расширение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполитьТчИКонвертироватьВордВПдфНаКлиенте(ВременныеКаталоги, сНастройка)
	мДокТипов = МассивРасширенийWord();
	Файлы = НайтиФайлы(КаталогДокументов,"*.*",сНастройка.ВключатьВложенныеКаталоги);
	Для Каждого Файл Из Файлы Цикл
		Если Файл.ПолучитьНевидимость() ИЛИ ВременныеКаталоги.Получить(Файл.Имя) <> Неопределено Тогда
			Продолжить;
		ИначеЕсли ЗначениеЗаполнено(мДокТипов.Найти(Файл.Расширение)) Тогда
			СтрокаТЧ = Объект.ТЧ.Добавить();
			Наименование = Файл.ИмяБезРасширения;
			ФайлКопия = ВременныеКаталоги.Получить("WordToPDF") + Наименование + ".pdf";
			Попытка
				Если сНастройка.ТипыЭлДок = ПредопределенноеЗначение("Перечисления.ТипыЭлДок.Word") Тогда
					MSWordApp = Новый COMОбъект("Word.Application");
					MSWordApp.Visible = False;                     
					MSWordApp.Documents.Open(Файл.ПолноеИмя);				
					WordDocument = MSWordApp.Application.Documents(1);
					WordDocument.Activate();
					WordDocument.SaveAs(ФайлКопия, 17);				
					MSWordApp.Application.Quit();
					СтрокаТЧ.ОригиналСкана = Файл.ПолноеИмя;
					СтрокаТЧ.СокрОригиналСкана = ФайлКопия;
					СтрокаТЧ.Наименование = Наименование;
					СтрокаТЧ.Расширение = ".pdf"; 
				ИначеЕсли сНастройка.ТипыЭлДок = ПредопределенноеЗначение("Перечисления.ТипыЭлДок.OpenOffice") Тогда
					ServiceManager    = Новый COMОбъект("com.sun.star.ServiceManager");       
					
					Скрипт             = Новый COMОбъект("MSScriptControl.ScriptControl");
					Скрипт.language    = "javascript";
					Скрипт.AddObject("OpenOffice", ServiceManager);
					
					Скрипт.eval("Массив=new Array()");       
					Массив = Скрипт.eval("Массив");   
					Скрипт.eval("Массив[0] = OpenOffice.Bridge_GetStruct('com.sun.star.beans.PropertyValue')");
					Скрипт.eval("Массив[0].Name     = 'Hidden'");
					Скрипт.eval("Массив[0].Value = true");
					
					Скрипт.AddCode("function SetItem(ind,val){Массив[ind]=val}");       
					Скрипт.AddObject("ServiceManager",ServiceManager);
					Desktop = ServiceManager.createInstance("com.sun.star.frame.Desktop");       
					Document = Desktop.LoadComponentFromURL(ПреобразоватьВURL(Файл.ПолноеИмя), "_blank", 0, Массив);
					
					Скрипт.eval("Массив2=new Array()");       
					Массив2 = Скрипт.eval("Массив2");       
					Скрипт.eval("Массив2[0] = OpenOffice.Bridge_GetStruct('com.sun.star.beans.PropertyValue')");       
					Скрипт.eval("Массив2[0].Name  = 'FilterName'");
					Скрипт.eval("Массив2[0].Value = 'writer_pdf_Export'");
					
					ПолноеИмяФайлаPDF = ПреобразоватьВURL(ФайлКопия); 
					Document.storeToURL(ПолноеИмяФайлаPDF, Массив2);
					Document.close(-1);        //Закрыть документ
					
					//Контрольная очистка переменных
					Document    = Неопределено;
					Desktop     = Неопределено;	
					СтрокаТЧ.ОригиналСкана = Файл.ПолноеИмя;
					СтрокаТЧ.СокрОригиналСкана = ФайлКопия;
					СтрокаТЧ.Наименование = Наименование;
					СтрокаТЧ.Расширение = ".pdf"; 
				Иначе
					СтрокаТЧ.ОригиналСкана = Файл.ПолноеИмя;
					СтрокаТЧ.Ошибка = Истина;
					СтрокаТЧ.ТекстОшибки = "не заполнена настройка Чтение текстовых файлов"; 
					Ошибка = ОписаниеОшибки();
					ЗаписатьВЖурналРегистрации(Ошибка);
				КонецЕсли;
			Исключение
				СтрокаТЧ.ОригиналСкана = Файл.ПолноеИмя;
				СтрокаТЧ.Ошибка = Истина;
				СтрокаТЧ.ТекстОшибки = "не удалось преобразовать документ в pdf или сохранить во временный каталог, возможно отсутствует программа Word или OpenOffice"; 
				Ошибка = ОписаниеОшибки();
				ЗаписатьВЖурналРегистрации(Ошибка);
			КонецПопытки;
		ИначеЕсли ЗначениеЗаполнено(Файл.Расширение) Тогда
			СтрокаТЧ = Объект.ТЧ.Добавить();
			СтрокаТЧ.ОригиналСкана = Файл.ПолноеИмя;
			СтрокаТЧ.СокрОригиналСкана = Файл.ПолноеИмя;
			СтрокаТЧ.Наименование = Файл.ИмяБезРасширения;
			СтрокаТЧ.Расширение = Файл.Расширение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПреобразоватьВURL(ИмяФайла)   
	Возврат "file:///" + СтрЗаменить(ИмяФайла, "\", "/"); 
КонецФункции

&НаСервере
Процедура СоздатьFilesToJPEGНаСервере(ВременныеКаталоги, ImageMagickConvert, сНастройка)	
	ПутьCmd = ВременныеКаталоги.Получить("Cmd");
	ТекстДок = ТекстСоздатьFilesToJPEG(ВременныеКаталоги, ImageMagickConvert, сНастройка);	
	
	Попытка
		//ТекстДок.ДобавитьСтроку("PAUSE");
		ТекстДок.Записать(ПутьCmd + "\FilesToJPEG.cmd", КодировкаТекста.OEM);
		ЗапуститьПриложение(ПутьCmd + "\FilesToJPEG.cmd",,Истина);
	Исключение
		Ошибка = ОписаниеОшибки();
		ЗаписатьВЖурналРегистрации(Ошибка);
	КонецПопытки;	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьFilesToJPEGНаКлиенте(ВременныеКаталоги, ImageMagickConvert, сНастройка)	
	ПутьCmd = ВременныеКаталоги.Получить("Cmd");
	ТекстДок = ТекстСоздатьFilesToJPEG(ВременныеКаталоги, ImageMagickConvert, сНастройка);	
	
	Попытка
		//ТекстДок.ДобавитьСтроку("PAUSE");
		ТекстДок.Записать(ПутьCmd + "\FilesToJPEG.cmd", КодировкаТекста.OEM);
		ЗапуститьПриложение(ПутьCmd + "\FilesToJPEG.cmd",,Истина);
	Исключение
		Ошибка = ОписаниеОшибки();
		ЗаписатьВЖурналРегистрации(Ошибка);
	КонецПопытки;	
КонецПроцедуры

&НаСервере
Функция ТекстСоздатьFilesToJPEG(ВременныеКаталоги, ImageMagickConvert, сНастройка)	
    //-background white -colorspace Gray 
	//-white-threshold 10000 -statistic NonPeak 3 
	//-wavelet-denoise threshold   
	//-sharpen 0%
	КаталогДокументов = ВременныеКаталоги.Получить("КаталогДокументов");
	ПутьCmd = ВременныеКаталоги.Получить("Cmd");
	Путьjpeg = ВременныеКаталоги.Получить("jpeg");
	ВсеСтраницы = сНастройка.ВсеСтраницы;
	Первая = сНастройка.ИЛПерваяСтраница-1;
	Пятая = сНастройка.ИЛПятаяСтраница-1;
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.ДобавитьСтроку("@ECHO OFF");
	ТекстДок.ДобавитьСтроку("@chcp 866");
	ДоСтраницы = сНастройка.ДоСтраницы-1;
	Для Каждого СтрокаТЧ Из Объект.ТЧ Цикл	
		Если Не СтрокаТЧ.Ошибка Тогда
			Файл = СтрокаТЧ.СокрОригиналСкана; 
			jpeg = Путьjpeg + СтрокаТЧ.Наименование  + ".jpeg";
            Если ВсеСтраницы Тогда
				ТекстДок.ДобавитьСтроку(""""+ ImageMagickConvert + """" + " -density 300 -trim " + """"+ Файл + """" + " -quality 100 -monochrome -threshold 50% -sharpen 0%" + " " + """" + jpeg + """");
			Иначе
				ТекстДок.ДобавитьСтроку(""""+ ImageMagickConvert + """" + " -density 300 -trim " + """"+ Файл + """" + "[" + Первая  + "," + Пятая + "] -quality 100 -monochrome -threshold 50% -sharpen 0%" + " " + """" + jpeg + """");
			КонецЕсли;	 
		КонецЕсли;
	КонецЦикла;

	Возврат ТекстДок;
КонецФункции // ТекстСоздатьFilesToJPEG()

&НаСервере
Процедура СоздатьДляПросмотраFilesToJPEGНаСервере(ВременныеКаталоги, ImageMagickConvert, сНастройка)	
	ПутьCmd = ВременныеКаталоги.Получить("Cmd");
	ТекстДок = ТекстСоздатьДляПросмотраFilesToJPEGНаСервере(ВременныеКаталоги, ImageMagickConvert, сНастройка);
	
	Попытка
		//ТекстДок.ДобавитьСтроку("PAUSE");
		ТекстДок.Записать(ПутьCmd + "\FilesToTempJpeg.cmd", КодировкаТекста.OEM);
		ЗапуститьПриложение(ПутьCmd + "\FilesToTempJpeg.cmd",,Истина);
	Исключение
		Ошибка = ОписаниеОшибки();
		ЗаписатьВЖурналРегистрации(Ошибка);
	КонецПопытки;	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДляПросмотраFilesToJPEGНаКлиенте(ВременныеКаталоги, ImageMagickConvert, сНастройка)	
	ПутьCmd = ВременныеКаталоги.Получить("Cmd");
	ТекстДок = ТекстСоздатьДляПросмотраFilesToJPEGНаСервере(ВременныеКаталоги, ImageMagickConvert, сНастройка);
	
	Попытка
		//ТекстДок.ДобавитьСтроку("PAUSE");
		ТекстДок.Записать(ПутьCmd + "\FilesToTempJpeg.cmd", КодировкаТекста.OEM);
		ЗапуститьПриложение(ПутьCmd + "\FilesToTempJpeg.cmd",,Истина);
	Исключение
		Ошибка = ОписаниеОшибки();
		ЗаписатьВЖурналРегистрации(Ошибка);
	КонецПопытки;	
КонецПроцедуры

&НаСервере
Функция ТекстСоздатьДляПросмотраFilesToJPEGНаСервере(ВременныеКаталоги, ImageMagickConvert, сНастройка)	

	КаталогДокументов = ВременныеКаталоги.Получить("КаталогДокументов");
	ПутьCmd = ВременныеКаталоги.Получить("Cmd");
	Путьjpeg = ВременныеКаталоги.Получить("TempJpeg");   
	ВсеСтраницы = сНастройка.ВсеСтраницы;
	Первая = сНастройка.ИЛПерваяСтраница-1;
	Пятая = сНастройка.ИЛПятаяСтраница-1;
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.ДобавитьСтроку("@ECHO OFF");
	ТекстДок.ДобавитьСтроку("@chcp 866");
	ДоСтраницы = сНастройка.ДоСтраницы-1;
	Для Каждого СтрокаТЧ Из Объект.ТЧ Цикл	
		Если Не СтрокаТЧ.Ошибка Тогда
			Файл = СтрокаТЧ.СокрОригиналСкана; 
			jpeg = Путьjpeg + СтрокаТЧ.Наименование  + ".jpeg";                          
			Если ВсеСтраницы Тогда
				ТекстДок.ДобавитьСтроку(""""+ ImageMagickConvert + """" + " -density 300 " + """"+ Файл + """" + " -resize " + сНастройка.Ширина + "x" + сНастройка.Высота + " " + """" + jpeg + """");
			Иначе
				ТекстДок.ДобавитьСтроку(""""+ ImageMagickConvert + """" + " -density 300 " + """"+ Файл + """" + "[" + Первая + "," + Пятая + "] -resize " + сНастройка.Ширина + "x" + сНастройка.Высота + " " + """" + jpeg + """");
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;

	Возврат ТекстДок;

КонецФункции // ТекстСоздатьДляПросмотраFilesToJPEGНаСервере()

&НаСервере
Процедура СоздатьJPEGToTxtНаСервере(ВременныеКаталоги, Tesseract,сНастройка)	
	ПутьCmd = ВременныеКаталоги.Получить("Cmd");
	ТекстДок = ТекстСоздатьJPEGToTxtНаСервере(ВременныеКаталоги, Tesseract, сНастройка);
	
	Попытка
		ТекстДок.Записать(ПутьCmd + "\JPEGToTxt.cmd", КодировкаТекста.OEM);
		ЗапуститьПриложение(ПутьCmd + "\JPEGToTxt.cmd",,Истина);
	Исключение
		Ошибка = ОписаниеОшибки();
		ЗаписатьВЖурналРегистрации(Ошибка);
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьJPEGToTxtНаКлиенте(ВременныеКаталоги, Tesseract,сНастройка)	
	ПутьCmd = ВременныеКаталоги.Получить("Cmd");
	ТекстДок = ТекстСоздатьJPEGToTxtНаКлиенте(ВременныеКаталоги, Tesseract, сНастройка);
	
	Попытка
		ТекстДок.Записать(ПутьCmd + "\JPEGToTxt.cmd", КодировкаТекста.OEM);
		ЗапуститьПриложение(ПутьCmd + "\JPEGToTxt.cmd",,Истина);
	Исключение
		Ошибка = ОписаниеОшибки();
		ЗаписатьВЖурналРегистрации(Ошибка);
	КонецПопытки;
КонецПроцедуры

&НаСервере
Функция ТекстСоздатьJPEGToTxtНаСервере(ВременныеКаталоги, Tesseract, сНастройка)

	ПутьTXT = ВременныеКаталоги.Получить("TXT");
	Путьjpeg = ВременныеКаталоги.Получить("jpeg");
	ПутьCmd = ВременныеКаталоги.Получить("Cmd");  
	ВсеСтраницы = сНастройка.ВсеСтраницы;
	ИЛПервая = сНастройка.ИЛПерваяСтраница-1;
	ИЛПятая = сНастройка.ИЛПятаяСтраница-1;
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.ДобавитьСтроку("@ECHO OFF");
	ТекстДок.ДобавитьСтроку("@chcp 866");
	Для Каждого СтрокаТЧ Из Объект.ТЧ Цикл	
		Если Не СтрокаТЧ.Ошибка Тогда
			Наименование = СтрокаТЧ.Наименование;
			НесколькоСтраницСкана = НайтиФайлы(Путьjpeg, "*" + Наименование + "-*");
			НКолВо = НесколькоСтраницСкана.Количество();
			Если НКолВо = 0 Тогда
				ТекстДок.ДобавитьСтроку("""" + Tesseract + """ """ + Путьjpeg + Наименование + ".jpeg" + """ " + """" + ПутьTXT  + Наименование +  """" + " -l rus "); 
			ИначеЕсли ВсеСтраницы Тогда
				НКолВо = НКолВо - 1;
				ТекСтраница = 0;
				Пока ТекСтраница <= НКолВо Цикл    
					Наименование = СтрокаТЧ.Наименование + "-" + ТекСтраница;
					ТекстДок.ДобавитьСтроку("""" + Tesseract + """ """ + Путьjpeg + Наименование + ".jpeg" + """ " + """" + ПутьTXT  + Наименование +  """" + " -l rus ");			
					ТекСтраница = ТекСтраница + 1;
				КонецЦикла;
			Иначе     
				Наименование = СтрокаТЧ.Наименование;
				ТекстДок.ДобавитьСтроку("""" + Tesseract + """ """ + Путьjpeg + Наименование + "-" + ИЛПервая + ".jpeg" + """ " + """" + ПутьTXT  + Наименование + "-0" +  """" + " -l rus ");    
				ТекстДок.ДобавитьСтроку("""" + Tesseract + """ """ + Путьjpeg + Наименование + "-" + ИЛПятая + ".jpeg" + """ " + """" + ПутьTXT  + Наименование + "-4" +  """" + " -l rus ");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат ТекстДок;
КонецФункции // ТекстСоздатьJPEGToTxt()    

&НаКлиенте
Функция ТекстСоздатьJPEGToTxtНаКлиенте(ВременныеКаталоги, Tesseract, сНастройка)

	ПутьTXT = ВременныеКаталоги.Получить("TXT");
	Путьjpeg = ВременныеКаталоги.Получить("jpeg");
	ПутьCmd = ВременныеКаталоги.Получить("Cmd");  
	ВсеСтраницы = сНастройка.ВсеСтраницы;
	ИЛПервая = сНастройка.ИЛПерваяСтраница-1;
	ИЛПятая = сНастройка.ИЛПятаяСтраница-1;
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.ДобавитьСтроку("@ECHO OFF");
	ТекстДок.ДобавитьСтроку("@chcp 866");
	Для Каждого СтрокаТЧ Из Объект.ТЧ Цикл	
		Если Не СтрокаТЧ.Ошибка Тогда
			Наименование = СтрокаТЧ.Наименование;
			НесколькоСтраницСкана = НайтиФайлы(Путьjpeg, "*" + Наименование + "-*");
			НКолВо = НесколькоСтраницСкана.Количество();
			Если НКолВо = 0 Тогда
				ТекстДок.ДобавитьСтроку("""" + Tesseract + """ """ + Путьjpeg + Наименование + ".jpeg" + """ " + """" + ПутьTXT  + Наименование +  """" + " -l rus "); 
			ИначеЕсли ВсеСтраницы Тогда
				НКолВо = НКолВо - 1;
				ТекСтраница = 0;
				Пока ТекСтраница <= НКолВо Цикл    
					Наименование = СтрокаТЧ.Наименование + "-" + ТекСтраница;
					ТекстДок.ДобавитьСтроку("""" + Tesseract + """ """ + Путьjpeg + Наименование + ".jpeg" + """ " + """" + ПутьTXT  + Наименование +  """" + " -l rus ");			
					ТекСтраница = ТекСтраница + 1;
				КонецЦикла;
			Иначе     
				Наименование = СтрокаТЧ.Наименование;
				ТекстДок.ДобавитьСтроку("""" + Tesseract + """ """ + Путьjpeg + Наименование + "-" + ИЛПервая + ".jpeg" + """ " + """" + ПутьTXT  + Наименование + "-0" +  """" + " -l rus ");    
				ТекстДок.ДобавитьСтроку("""" + Tesseract + """ """ + Путьjpeg + Наименование + "-" + ИЛПятая + ".jpeg" + """ " + """" + ПутьTXT  + Наименование + "-4" +  """" + " -l rus ");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат ТекстДок;
КонецФункции // ТекстСоздатьJPEGToTxt()

&НаСервере
Процедура ОбходТХТНаСервере(ВременныеКаталоги, сНастройка)
	ПутьTXT = ВременныеКаталоги.Получить("TXT");
	ПДДлинаСловаВСимволах = сНастройка.ДлинаСловаВСимволах;
	ВсеСтраницы = сНастройка.ВсеСтраницы;
	Первая = сНастройка.ИЛПерваяСтраница-1;
	Пятая = сНастройка.ИЛПятаяСтраница-1;
	Для Каждого СтрокаТЧ Из Объект.ТЧ Цикл	
		Если Не СтрокаТЧ.Ошибка Тогда
			сТекста = Новый Структура;  
			сТекста.Вставить("мВсеСловаПоиска", Новый Массив);
			сТекста.Вставить("мВсеДатыПоиска", Новый Массив);       
			сТекста.Вставить("Текст", ""); 
			сТекста.Вставить("ИсходныйТекст", "");
			сТекста.Вставить("Контрагент","");
			сТекста.Вставить("СудебноеДело","");
			Наименование = СтрокаТЧ.Наименование;
			НесколькоСтраницСкана = НайтиФайлы(ПутьTXT, "*" + Наименование + "-*");
			НКолВо = НесколькоСтраницСкана.Количество();
			Если НКолВо = 0 Тогда
				TXT = ПутьTXT + Наименование + ".txt"; 
				ФайлTXT = Новый Файл(TXT);
				Если ФайлTXT.Существует() Тогда
					ТекстДок = Новый ТекстовыйДокумент;
					ТекстДок.Прочитать(TXT, КодировкаТекста.UTF8); 
					Текст = ТекстДок.ПолучитьТекст();
					сТекста = ПарсингТХТ(Текст, ПДДлинаСловаВСимволах, СтрокаТЧ.НомерСтроки, сНастройка, сТекста);
					СтрокаТЧ.СП = Истина; //определяем по количеству листов, что это судебный приказ
				Иначе         
					СтрокаТЧ.Ошибка = Истина;
					СтрокаТЧ.ТекстОшибки = "текстовый файл не найден";	
				КонецЕсли;
			ИначеЕсли ВсеСтраницы Тогда
				НКолВо = НКолВо - 1;
				ТекСтраница = 0;
				Пока ТекСтраница <= НКолВо Цикл  
					Наименование = СтрокаТЧ.Наименование + "-" + ТекСтраница;
					TXT = ПутьTXT + Наименование + ".txt"; 
					ФайлTXT = Новый Файл(TXT);
					Если ФайлTXT.Существует() Тогда
						ТекстДок = Новый ТекстовыйДокумент;
						ТекстДок.Прочитать(TXT, КодировкаТекста.UTF8); 
						Текст = ТекстДок.ПолучитьТекст();
						сТекста = ПарсингТХТ(Текст, ПДДлинаСловаВСимволах, СтрокаТЧ.НомерСтроки, сНастройка, сТекста);
						ТекСтраница = ТекСтраница + 1;
					Иначе  
						СтрокаТЧ.Ошибка = Истина;
						СтрокаТЧ.ТекстОшибки = "текстовый файл не найден";
						Прервать;
					КонецЕсли;
				КонецЦикла;	
				
				СтрокаТЧ.СП = ДопПроверкаНаСППоТексту(сТекста.ИсходныйТекст);
				
			Иначе 
				Наименование = СтрокаТЧ.Наименование;
				ИЛПерваяСтр = Наименование + "-" + Первая;
				ИЛПятаяСтр = Наименование + "-" + Пятая;
				TXTПервая = ПутьTXT + ИЛПерваяСтр + ".txt"; 
				TXTПятая = ПутьTXT + ИЛПятаяСтр + ".txt"; 
				ФайлTXTПервая = Новый Файл(TXTПервая);
				Если ФайлTXTПервая.Существует() Тогда
					ТекстДок = Новый ТекстовыйДокумент;
					ТекстДок.Прочитать(TXTПервая, КодировкаТекста.UTF8); 
					Текст = ТекстДок.ПолучитьТекст();
					сТекста = ПарсингТХТ(Текст, ПДДлинаСловаВСимволах, СтрокаТЧ.НомерСтроки, сНастройка, сТекста); 
				Иначе         
					СтрокаТЧ.Ошибка = Истина;
					СтрокаТЧ.ТекстОшибки = "текстовый файл не найден";	
				КонецЕсли;
				ФайлTXTПятая = Новый Файл(TXTПятая);
				Если ФайлTXTПятая.Существует() Тогда
					ТекстДок = Новый ТекстовыйДокумент;
					ТекстДок.Прочитать(TXTПятая, КодировкаТекста.UTF8); 
					Текст = ТекстДок.ПолучитьТекст();
					сТекста = ПарсингТХТ(Текст, ПДДлинаСловаВСимволах, СтрокаТЧ.НомерСтроки, сНастройка, сТекста); 
				Иначе         
					СтрокаТЧ.Ошибка = Истина;
					СтрокаТЧ.ТекстОшибки = "текстовый файл не найден";	
				КонецЕсли;
			КонецЕсли;
			сТекста = НайтиСудебноеДелоПоИсполДоку(сТекста, сНастройка, СтрокаТЧ.СП); 
			Если ЗначениеЗаполнено(сТекста.СудебноеДело) Тогда
				СтрокаТЧ.СудебноеДело = сТекста.СудебноеДело;
				СтрокаТЧ.ДолговоеОбязательство = СтрокаТЧ.СудебноеДело.Займ;
				СтрокаТЧ.Контрагент = сТекста.Контрагент;
				ЗаполнитьТЧРеквизитыИсполнительногоДокумента(СтрокаТЧ.НомерСтроки,сТекста);		
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбходТХТ()

&НаКлиенте
Процедура ОбходТХТНаКлиенте(ВременныеКаталоги, сНастройка)
	ПутьTXT = ВременныеКаталоги.Получить("TXT");
	ПДДлинаСловаВСимволах = сНастройка.ДлинаСловаВСимволах;
	ВсеСтраницы = сНастройка.ВсеСтраницы;
	Первая = сНастройка.ИЛПерваяСтраница-1;
	Пятая = сНастройка.ИЛПятаяСтраница-1;
	Для Каждого СтрокаТЧ Из Объект.ТЧ Цикл	
		Если Не СтрокаТЧ.Ошибка Тогда
			сТекста = Новый Структура;  
			сТекста.Вставить("мВсеСловаПоиска", Новый Массив);
			сТекста.Вставить("мВсеДатыПоиска", Новый Массив);       
			сТекста.Вставить("Текст", ""); 
			сТекста.Вставить("ИсходныйТекст", "");
			сТекста.Вставить("Контрагент","");
			сТекста.Вставить("СудебноеДело","");
			Наименование = СтрокаТЧ.Наименование;
			НесколькоСтраницСкана = НайтиФайлы(ПутьTXT, "*" + Наименование + "-*");
			НКолВо = НесколькоСтраницСкана.Количество();
			Если НКолВо = 0 Тогда
				TXT = ПутьTXT + Наименование + ".txt"; 
				ФайлTXT = Новый Файл(TXT);
				Если ФайлTXT.Существует() Тогда
					ТекстДок = Новый ТекстовыйДокумент;
					ТекстДок.Прочитать(TXT, КодировкаТекста.UTF8); 
					Текст = ТекстДок.ПолучитьТекст();
					сТекста = ПарсингТХТ(Текст, ПДДлинаСловаВСимволах, СтрокаТЧ.НомерСтроки, сНастройка, сТекста);
					СтрокаТЧ.СП = Истина; //определяем по количеству листов, что это судебный приказ
				Иначе         
					СтрокаТЧ.Ошибка = Истина;
					СтрокаТЧ.ТекстОшибки = "текстовый файл не найден";	
				КонецЕсли;
			ИначеЕсли ВсеСтраницы Тогда
				НКолВо = НКолВо - 1;
				ТекСтраница = 0;
				Пока ТекСтраница <= НКолВо Цикл  
					Наименование = СтрокаТЧ.Наименование + "-" + ТекСтраница;
					TXT = ПутьTXT + Наименование + ".txt"; 
					ФайлTXT = Новый Файл(TXT);
					Если ФайлTXT.Существует() Тогда
						ТекстДок = Новый ТекстовыйДокумент;
						ТекстДок.Прочитать(TXT, КодировкаТекста.UTF8); 
						Текст = ТекстДок.ПолучитьТекст();
						сТекста = ПарсингТХТ(Текст, ПДДлинаСловаВСимволах, СтрокаТЧ.НомерСтроки, сНастройка, сТекста);
						ТекСтраница = ТекСтраница + 1;
					Иначе         
						СтрокаТЧ.Ошибка = Истина;
						СтрокаТЧ.ТекстОшибки = "текстовый файл не найден";	
					КонецЕсли;
				КонецЦикла; 
				
				СтрокаТЧ.СП = ДопПроверкаНаСППоТексту(сТекста.ИсходныйТекст);
				
			Иначе 
				Наименование = СтрокаТЧ.Наименование;
				ИЛПерваяСтр = Наименование + "-" + Первая;
				ИЛПятаяСтр = Наименование + "-" + Пятая;
				TXTПервая = ПутьTXT + ИЛПерваяСтр + ".txt"; 
				TXTПятая = ПутьTXT + ИЛПятаяСтр + ".txt"; 
				ФайлTXTПервая = Новый Файл(TXTПервая);
				Если ФайлTXTПервая.Существует() Тогда
					ТекстДок = Новый ТекстовыйДокумент;
					ТекстДок.Прочитать(TXTПервая, КодировкаТекста.UTF8); 
					Текст = ТекстДок.ПолучитьТекст();
					сТекста = ПарсингТХТ(Текст, ПДДлинаСловаВСимволах, СтрокаТЧ.НомерСтроки, сНастройка, сТекста); 
				Иначе         
					СтрокаТЧ.Ошибка = Истина;
					СтрокаТЧ.ТекстОшибки = "текстовый файл не найден";	
				КонецЕсли;
				ФайлTXTПятая = Новый Файл(TXTПятая);
				Если ФайлTXTПятая.Существует() Тогда
					ТекстДок = Новый ТекстовыйДокумент;
					ТекстДок.Прочитать(TXTПятая, КодировкаТекста.UTF8); 
					Текст = ТекстДок.ПолучитьТекст();
					сТекста = ПарсингТХТ(Текст, ПДДлинаСловаВСимволах, СтрокаТЧ.НомерСтроки, сНастройка, сТекста); 
				Иначе         
					СтрокаТЧ.Ошибка = Истина;
					СтрокаТЧ.ТекстОшибки = "текстовый файл не найден";	
				КонецЕсли;
			КонецЕсли;
			сТекста = НайтиСудебноеДелоПоИсполДоку(сТекста, сНастройка, СтрокаТЧ.СП); 
			Если ЗначениеЗаполнено(сТекста.СудебноеДело) Тогда
				СтрокаТЧ.СудебноеДело = сТекста.СудебноеДело;
				СтрокаТЧ.ДолговоеОбязательство =  ПолучитьЗайм(СтрокаТЧ.СудебноеДело);
				СтрокаТЧ.Контрагент = сТекста.Контрагент;
				ЗаполнитьТЧРеквизитыИсполнительногоДокумента(СтрокаТЧ.НомерСтроки, сТекста);		
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбходТХТ()         
                                       
&НаСервере
Функция ПолучитьЗайм(СудебноеДело)
	 Возврат СудебноеДело.Займ;
КонецФункции

&НаСервере
Процедура ЗаполнитьТЧРеквизитыИсполнительногоДокумента(НомерСтроки, сТекста)
    СтрокаТЧ = Объект.ТЧ[НомерСтроки-1];
	СудебноеДело = СтрокаТЧ.СудебноеДело;
	Контрагент = СтрокаТЧ.Контрагент; 
	
	Удовлетворено = Истина;
	
	Если Не ЗначениеЗаполнено(СудебноеДело.Решение) И СтрНайти(ВРег(сТекста.Текст), "ОТКАЗ") > 0 Тогда
		СтрокаТЧ.РешениеОтказ = Истина;	
		СтрокаТЧ.СодержаниеИД = "ОТКАЗ"; 
		Удовлетворено = Ложь;
	КонецЕсли; 
	
	Если СтрНайти(ВРег(сТекста.Текст), "ОТМЕНИТЬ") > 0 Тогда	
		СтрокаТЧ.СодержаниеИД = "ОТМЕНА"; 
		Удовлетворено = Ложь;
	КонецЕсли;
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ответчик", Контрагент);      
	мИД = СудебноеДело.ИД.НайтиСтроки(Отбор);
	Если мИД.Количество() > 0 Тогда
		СтрИД = мИД[0];
		СтрокаТЧ.ИсполнительныйДокумент = СтрИД.ИсполнительныйДокумент;
	КонецЕсли; 
	
    ИсходныйТекст = сТекста.ИсходныйТекст;
	
	Если СтрокаТЧ.СП Тогда    
			
		Если сТекста.мВсеДатыПоиска.Количество() > 0 Тогда
			СтрокаТЧ.ДатаИД = сТекста.мВсеДатыПоиска[0];    
		КонецЕсли;   
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.НомерДела) И ЗначениеЗаполнено(СтрокаТЧ.СудебноеДело) Тогда
			СтрокаТЧ.НомерДела = Строка(СтрокаТЧ.СудебноеДело.НомерДела);
		КонецЕсли;

		//СтрВзыскать = СтрНайти(ИсходныйТекст, "Взыскать"); 
		//СтрРуб = СтрНайти(ИсходныйТекст, " руб",НаправлениеПоиска.СКонца);  
		//СтрРубЧислоСимвалов = СтрРуб - СтрВзыскать; 
		//Если СтрВзыскать > 0 И СтрРуб > 0 И СтрРуб > СтрВзыскать Тогда   
		//	СтрокаТЧ.СодержаниеИД = СтрЗаменить(Сред(ИсходныйТекст,СтрВзыскать,СтрРубЧислоСимвалов+5),Символы.ПС," "); //плюс символы " руб." 
		//КонецЕсли;
	Иначе 
		мВсеСловаПоиска = сТекста.мВсеСловаПоиска;
		СловаКолВо = мВсеСловаПоиска.ВГраница();
		
		НайденНомерИЛ = мВсеСловаПоиска.Найти("ЕстьИЛСерия");
		
		Если НайденНомерИЛ <> Неопределено Тогда
			 СтрокаТЧ.НомерДела = мВсеСловаПоиска[НайденНомерИЛ - 1];
		КонецЕсли;	 
		
		Если СловаКолВо > 0 И Не ЗначениеЗаполнено(СтрокаТЧ.НомерДела) Тогда
			СтрокаТЧ.НомерДела = мВсеСловаПоиска[СловаКолВо-1] + " " + мВсеСловаПоиска[СловаКолВо];	//посление символы 5 листа	
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.НомерДела) И ЗначениеЗаполнено(СтрокаТЧ.ИсполнительныйДокумент) Тогда
			СтрокаТЧ.НомерДела = Строка(СтрокаТЧ.ИсполнительныйДокумент);
		КонецЕсли;

		
		Если сТекста.мВсеДатыПоиска.Количество() > 0 Тогда
			СтрокаТЧ.ДатаПринятияСудебногоАкта = сТекста.мВсеДатыПоиска[0];	
		КонецЕсли;             
		Если сТекста.мВсеДатыПоиска.Количество() > 1 И сТекста.мВсеДатыПоиска[1] > СтрокаТЧ.ДатаПринятияСудебногоАкта Тогда
			СтрокаТЧ.ДатаВступленияВЗаконнуюСилу = сТекста.мВсеДатыПоиска[1];// и больше ДатаПринятияСудебногоАкта	
		КонецЕсли; 	    
		Если сТекста.мВсеДатыПоиска.Количество() > 2 И сТекста.мВсеДатыПоиска[2] > СтрокаТЧ.ДатаПринятияСудебногоАкта Тогда
			СтрокаТЧ.ДатаРешения = сТекста.мВсеДатыПоиска[2];// и больше ДатаПринятияСудебногоАкта	
		КонецЕсли; 
	КонецЕсли;  
	
	Если Удовлетворено Тогда
		
		СтрВзыскать = СтрНайти(ИсходныйТекст, "Взыскать");
		Если СтрВзыскать = 0 Тогда
			СтрВзыскать = ПодобратьНачалоРезолютивнойЧасти(ИсходныйТекст); 
			СтрВзыскать = ?(СтрВзыскать = Неопределено, 0, СтрВзыскать);
		КонецЕсли;
		
		СтрВалюта = СтрНайти(ИсходныйТекст, "коп.", НаправлениеПоиска.СКонца); 
		Если СтрВалюта = 0 Тогда
			СтрВалюта = СтрНайти(ИсходныйТекст, " руб", НаправлениеПоиска.СКонца);
		КонецЕсли;   
		
		СтрЧислоСимволов = СтрВалюта - СтрВзыскать; 
		Если СтрВзыскать > 0 И СтрВалюта > 0 И СтрВалюта > СтрВзыскать Тогда   
			СтрокаТЧ.СодержаниеИД = СтрЗаменить(Сред(ИсходныйТекст, СтрВзыскать, СтрЧислоСимволов + 5), Символы.ПС, " "); //плюс символы " руб." 
		КонецЕсли; 
		
	КонецЕсли;
	

КонецПроцедуры

&НаСервере
Функция ПодобратьНачалоРезолютивнойЧасти(ИсходныйТекст)
	мСтартаРезолютивнойЧасти = Новый Массив;
	мСтартаРезолютивнойЧасти.Добавить("ПОСТАНОВИЛ");
	мСтартаРезолютивнойЧасти.Добавить("РЕШИЛ");
	мСтартаРезолютивнойЧасти.Добавить("ОПРЕДЕЛИЛ"); 
	мСтартаРезолютивнойЧасти.Добавить("ВЗЫСКАТЬ"); 
	мСтартаРезолютивнойЧасти.Добавить("ПРИКАЗЫВАЮ");	
	
	мСтартаРезолютивнойЧасти.Добавить(Нрег("ПОСТАНОВИЛ"));
	мСтартаРезолютивнойЧасти.Добавить(Нрег("РЕШИЛ"));
	мСтартаРезолютивнойЧасти.Добавить(Нрег("ОПРЕДЕЛИЛ"));
	мСтартаРезолютивнойЧасти.Добавить(Нрег("ПРИКАЗЫВАЮ"));
	
	мСтартаРезолютивнойЧасти.Добавить("Постановил");
	мСтартаРезолютивнойЧасти.Добавить("Решил");
	мСтартаРезолютивнойЧасти.Добавить("Приказываю");
	
	Для каждого ЭлСтарт из мСтартаРезолютивнойЧасти Цикл
		Поиск = СтрНайти(ИсходныйТекст, ЭлСтарт) ; 
		Если Поиск > 0 Тогда
			Возврат Поиск;
		КонецЕсли;
	КонецЦикла;	 
	
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИсполнительныйДокументНаСервере()
	
	ПросуживатьИзСкана = ЭтаФорма.ПрочитатьЧастиРешенияИзСкана;
	ОтменятьСД = ЭтаФорма.ОтменятьДокументСудДело;
	
	ВидОтметки = "ОтметкаИД";
	ТипФайла = ТипПрикрепляемогоФайла();
	ДетализацияПоИд = ДетализацияПоИд();
	ХранитьПрикрепляемыеФайлыНаСервере = ХранитьПрикрепляемыеФайлыНаСервере();
	Каталог =  КаталогХраненияПрикрепляемыхФайловНаСервере();
		мСтрок = Объект.ТЧ.НайтиСтроки(Новый Структура(ВидОтметки, Истина));
		Для Каждого Стр Из мСтрок Цикл
			ЗаполнитьИД(Стр, ПросуживатьИзСкана, ОтменятьСД);
			ПрикрепитьФайлы = Документы.ПрикрепитьФайлы.СоздатьДокумент();
			ПрикрепитьФайлы.Дата = ТекущаяДатаСеанса();
			Пользователи.ЗаполнитьРеквизитыПоДаннымПользователя(ПрикрепитьФайлы);
			ПрикрепитьФайлы.Комментарий = "Автоматически Парсинг документов";
			Если ВидОтметки = "ОтметкаИД" И ДетализацияПоИД Тогда	
				Если ТипЗнч(Стр.ИсполнительныйДокумент) = Тип("СправочникСсылка.ИсполнительныеДокументы") Тогда
					ПрикрепитьФайлы.Объект = Стр.ИсполнительныйДокумент;	
				ИначеЕсли ТипЗнч(Стр.ИсполнительныйДокумент) = Тип("ДокументСсылка.СудебноеДело") Тогда
					Попытка
						ПрикрепитьФайлы.Объект = Стр.ИсполнительныйДокумент.Займ;
					Исключение
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = "у документа " + Стр.ИсполнительныйДокумент + " не найден Владелец";
						Сообщение.Сообщить();		
					КонецПопытки;
				КонецЕсли;
			ИначеЕсли ВидОтметки = "ОтметкаИД" Тогда
				Если ТипЗнч(Стр.ИсполнительныйДокумент) = Тип("СправочникСсылка.ИсполнительныеДокументы") Тогда
					Попытка
						ПрикрепитьФайлы.Объект = Стр.ИсполнительныйДокумент.Владелец;	
					Исключение
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = "у документа " + Стр.ИсполнительныйДокумент + " не найден Владелец";
						Сообщение.Сообщить();		
					КонецПопытки;
				ИначеЕсли ТипЗнч(Стр.ИсполнительныйДокумент) = Тип("ДокументСсылка.СудебноеДело") Тогда
					Попытка
						ПрикрепитьФайлы.Объект = Стр.ИсполнительныйДокумент.Займ;
					Исключение
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = "у документа " + Стр.ИсполнительныйДокумент + " не найден Владелец";
						Сообщение.Сообщить();		
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			СтрПФ = ПрикрепитьФайлы.Файлы.Добавить();
			Если ХранитьПрикрепляемыеФайлыНаСервере Тогда
				Файл = Новый Файл(Стр.ОригиналСкана);
				СтрПФ.УИД = Новый УникальныйИдентификатор();
				ДвДанные = Новый ДвоичныеДанные(Стр.ОригиналСкана);
				ДвДанные.Записать(Каталог + "\" + Строка(СтрПФ.УИД) + Файл.Расширение);
				СтрПФ.Путь = Стр.ОригиналСкана;
				СтрПФ.Размер = ОкруглитьРазмерФайла(Строка(Файл.Размер()));
				СтрПФ.Загружен = Истина;
				Если ВидОтметки = "ОтметкаИД" И ЗначениеЗаполнено(Стр.ТипФайла) Тогда
					СтрПФ.ТипФайла = Стр.ТипФайла;	
				Иначе
					СтрПФ.ТипФайла = ТипФайла;
				КонецЕсли;
			Иначе
				СтрПФ.Загружен = Истина;  
				СтрПФ.Путь = Стр.ОригиналСкана;
				СтрПФ.УИД = Новый УникальныйИдентификатор();
				Если ВидОтметки = "ОтметкаИД" И ЗначениеЗаполнено(Стр.ТипФайла) Тогда
					СтрПФ.ТипФайла = Стр.ТипФайла;
				Иначе
					СтрПФ.ТипФайла = ТипФайла;
				КонецЕсли;
				Файл = Новый Файл(Стр.ОригиналСкана);
				СтрПФ.Размер = ОкруглитьРазмерФайла(Строка(Файл.Размер()));
				МассивДанных = Новый Массив;
				Данные = Новый ДвоичныеДанные(СтрПФ.Путь);
				МассивДанных.Добавить(Данные);
				ПрикрепитьФайлы.ПоместитьВХранилище(МассивДанных);	
			КонецЕсли;
			Если ЗначениеЗаполнено(ПрикрепитьФайлы.Объект) Тогда
				ПрикрепитьФайлы.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
			КонецЕсли;
		КонецЦикла;

КонецПроцедуры

&НаСервере
Функция СоздатьИД(СудебноеДело, Контрагент, СтрИД)

	ИД = Справочники.ИсполнительныеДокументы.СоздатьЭлемент();
	ИД.Владелец = СудебноеДело.Займ;
	ИД.Должник = Контрагент;
	ФИО = ОбъектыСервер.РазыменоватьСсылку(Контрагент, "ФИО_Действующее");
	ИД.ОтветчикФИО = ФИО;			
	ИД.Взыскатель = СудебноеДело.Истец;			
	ИД.ВидОтветчика = СтрИД.ВидОтветчика;	
	ИД.ТипИД = СтрИД.ВидРешения;				
	Если СудебноеДело.ВидТребований = ПредопределенноеЗНачение("Перечисление.ВидыИсковыхТребований.СудебныйПриказ") Тогда
		ИД.СерияНомерИД = СудебноеДело.НомерДела;
		ИД.НомерДела = СудебноеДело.НомерДела;
		ИД.ДатаИД = СудебноеДело.ДатаРешения;
		ИД.ВидИД = ПредопределенноеЗначение("Справочник.ФССП_ТипыИсполнительныхДокументов.СудебныйПриказ");
	ИначеЕсли СудебноеДело.ВидТребований = ПредопределенноеЗначение("Перечисление.ВидыИсковыхТребований.ИсковоеЗаявление") Тогда
		ИД.ВидИД = ПредопределенноеЗНачение("Справочник.ФССП_ТипыИсполнительныхДокументов.ИсполнительныйЛист");
	КонецЕсли;
	ИД.КодИД = ИД.НомерДела + " " + Формат(ИД.ДатаИД, "ДФ='dd.MM.yyyy'") +  " " + ОбъектыСервер.РазыменоватьСсылку(СтрИД.Ответчик, "КодКонтрагента");
	ИД.СудебноеРешение = СудебноеДело;
	ИД.ЧастьРешения = СтрИД.ЧастьРешения;
	ИД.СтатусИД = ПредопределенноеЗначение("Справочник.СтатусыИсполнительногоДокумента.ВРаботе");
	ИД.РОСП = СудебноеДело.РОСП;			
	Массив = РасчетЗадолженностиСудопроизводство.СписокРеквизитовДокументаСудебноеДело();
		
	ИД.Записать();
	Для Каждого стр из Массив Цикл
		Менеджер = РегистрыСведений.ХарактеристикиИД.СоздатьМенеджерЗаписи();				
		Менеджер.ИсполнительныйДокумент = ИД.Ссылка;
		Менеджер.Свойство = ПланыВидовХарактеристик.ХарактеристикиИД["СД_" + стр];			
		Менеджер.Значение = СудебноеДело[стр];
		Менеджер.Записать();
	КонецЦикла;				
	стр = Новый Структура("ЧастьРешения", СтрИД.ЧастьРешения);
	строки = СудебноеДело.ЧастиРешения.НайтиСтроки(стр);
	Если Строки.Количество() > 0 Тогда
		Менеджер = РегистрыСведений.ХарактеристикиИД.СоздатьМенеджерЗаписи();				
		Менеджер.ИсполнительныйДокумент = ИД.Ссылка;
		Менеджер.Свойство = ПланыВидовХарактеристик.ХарактеристикиИД.СД_СуммаРешения;			
		Менеджер.Значение = Строки[0].СуммаРешения;
		Менеджер.Записать();
	КонецЕсли;  
		
	Возврат ИД;
КонецФункции // СоздатьИД()
 
&НаСервере
Функция ПарсингТХТ(Текст, ПДДлинаСловаВСимволах, НомерСтроки, сНастройка, сТекста)
		СтрокаТЧ = Объект.ТЧ[НомерСтроки-1];
	    ТЗПадежиМесяцов = ПадежиМесяцов();
		ИсходныйТекст = Текст;
		Текст = УбратьЛишниеСимволы(ИсходныйТекст, сНастройка);
		СтрокаТЧ.ТипФайла = сНастройка.ТипыПрикрепляемыхФайлов;
		мСлова = СтрРазделить(Текст," ",Ложь);
		мСловаПоиска = Новый Массив;
		мДатыПоиска = Новый Массив;
		Для Индекс = 0 по мСлова.ВГраница() Цикл
			Слово = мСлова[Индекс];
			Если СтрДлина(Слово) >= ПДДлинаСловаВСимволах Тогда
				Месяц = ТЗПадежиМесяцов.Найти(Слово,"Месяц");
				дСлово = СтроковыеФункцииКлиентСервер.СтрокаВДату(Слово);
				Если Месяц <> Неопределено Тогда
					дСлово = СтроковыеФункцииКлиентСервер.СтрокаВДату(мСлова[Индекс-1] + "." + Месяц.Номер + "." + мСлова[Индекс+1]);
					Если ТипЗнч(дСлово) = Тип("Дата") И дСлово < Дата(2077,1,1) Тогда
						мДатыПоиска.Добавить(дСлово);		
					КонецЕсли;
				ИначеЕсли ТипЗнч(дСлово) = Тип("Дата") И дСлово <> Дата(1,1,1) И дСлово < Дата(2077,1,1) Тогда
					мДатыПоиска.Добавить(дСлово);		
				ИначеЕсли сНастройка.ЗаглавныеБуквыЦифры Тогда
					пСлово = ЗаглавныеБуквыЦифрыСлова(Слово);
					Если пСлово <> Неопределено Тогда 
						мСловаПоиска.Добавить(пСлово);	
					КонецЕсли;
				Иначе
					мСловаПоиска.Добавить(Слово);	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 	
				
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(сТекста.мВсеСловаПоиска, мСловаПоиска);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(сТекста.мВсеДатыПоиска, мДатыПоиска);

		сТекста.Вставить("Текст", сТекста.Текст + Текст + " "); 
		сТекста.Вставить("ИсходныйТекст", сТекста.ИсходныйТекст + ИсходныйТекст  + " "); 
		
		ИндексСерия = мСловаПоиска.Найти("Серия");
		Если ИндексСерия <> Неопределено Тогда 
			НомерИсполЛиста = мСловаПоиска[ИндексСерия + 1] + " " + мСловаПоиска[ИндексСерия + 2];
			НомерИсполЛиста = СтрЗаменить(НомерИсполЛиста, ".", ""); 
			сТекста.мВсеСловаПоиска.Добавить(НомерИсполЛиста);
			сТекста.мВсеСловаПоиска.Добавить("ЕстьИЛСерия");
		КонецЕсли;
		
		Возврат сТекста;
	
КонецФункции // ПарсингТХТ()



&НаСервере
Функция НайтиСудебноеДелоПоИсполДоку(сТекста, сНастройка, СП)
	мСлова = сТекста.мВсеСловаПоиска;
	мДаты = сТекста.мВсеДатыПоиска;
	ДопРеквДата = сНастройка.КАДатаРождения;  
		
	Для Индекс = 0 по мСлова.ВГраница()- 2 Цикл
		Если СтрДлина(мСлова[Индекс]) > 3 И СтрДлина(мСлова[Индекс + 1]) = 1 И СтрДлина(мСлова[Индекс + 2]) = 1 Тогда      //фамилия от 3 символов , ИО 1 символ
			ЭтоПолноеФИО = Ложь;
			ФИО = мСлова[Индекс];
		ИначеЕсли СтрДлина(мСлова[Индекс]) > 3 Тогда  //фамилия от 3 символов 	
			ЭтоПолноеФИО = Истина;
			ФИО = мСлова[Индекс] + " " + мСлова[Индекс + 1] + " " + мСлова[Индекс + 2];
		Иначе
			Продолжить;
		КонецЕсли;  
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СклонениеФИО.Контрагент КАК Контрагент,
		|	СудебноеДелоОтветчики.Ссылка КАК СудебноеДело
		|ИЗ
		|	РегистрСведений.СклонениеФИО КАК СклонениеФИО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СудебноеДело.Ответчики КАК СудебноеДелоОтветчики
		|		ПО СклонениеФИО.Контрагент = СудебноеДелоОтветчики.Значение
		|ГДЕ
		|	(СклонениеФИО.Именительный = &ФИО
		|			ИЛИ СклонениеФИО.Родительный = &ФИО
		|			ИЛИ СклонениеФИО.Творительный = &ФИО
		|			ИЛИ СклонениеФИО.Предолжный = &ФИО
		|			ИЛИ СклонениеФИО.Дательный = &ФИО)
		|	И СудебноеДелоОтветчики.Ссылка.НомерДела В(&НомерДела)
		|	И ВЫБОР
		|			КОГДА &СП = ИСТИНА
		|				ТОГДА СудебноеДелоОтветчики.Ссылка.ВидТребований = ЗНАЧЕНИЕ(Перечисление.ВидыИсковыхТребований.СудебныйПриказ)
		|			ИНАЧЕ СудебноеДелоОтветчики.Ссылка.ВидТребований = ЗНАЧЕНИЕ(Перечисление.ВидыИсковыхТребований.ИсковоеЗаявление)
		|		КОНЕЦ";
		
		ФИО = СтрЗаменить(ФИО, ".", " ");
		ФИО = СокрЛП(ФИО);
		
		Запрос.УстановитьПараметр("ФИО", ФИО);
		Запрос.УстановитьПараметр("НомерДела", мСлова);
		Запрос.УстановитьПараметр("СП", СП);
		
		Выборка = Запрос.Выполнить().Выбрать();
		КоличествоРезультатов = Выборка.Количество(); 
		
		Пока Выборка.Следующий() Цикл
			Контрагент = Выборка.Контрагент;
			
			Если КоличествоРезультатов > 1 И ЗначениеЗаполнено(ДопРеквДата) Тогда	
				ДатаРождения = ОбъектыСервер.ПолучитьЗначениеСвойства(Контрагент, ДопРеквДата.Код);	
				Для Каждого Стр Из мДаты Цикл
					Если ДатаРождения = Стр Тогда
						сТекста.Контрагент = Контрагент;
						сТекста.СудебноеДело = Выборка.СудебноеДело;
						Возврат сТекста;	
					КонецЕсли;
				КонецЦикла;  
			Иначе  
				
				сТекста.Контрагент = Контрагент;
				сТекста.СудебноеДело = Выборка.СудебноеДело;
				Возврат сТекста;	 
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат сТекста;
	
КонецФункции

&НаСервере
Функция ПадежиМесяцов()
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Месяц");
	ТЗ.Колонки.Добавить("Номер");
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "январь";
	нСтр.Номер = "01";  
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "января";
	нСтр.Номер = "01";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "февраль";
	нСтр.Номер = "02";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "февраля";
	нСтр.Номер = "02";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "март";
	нСтр.Номер = "03";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "марта";
	нСтр.Номер = "03";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "апрель";
	нСтр.Номер = "04";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "апреля";
	нСтр.Номер = "04";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "май";
	нСтр.Номер = "05";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "мая";
	нСтр.Номер = "05";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "июнь";
	нСтр.Номер = "06";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "июня";
	нСтр.Номер = "06";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "июль";
	нСтр.Номер = "07";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "июля";
	нСтр.Номер = "07";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "август";
	нСтр.Номер = "08";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "августа";
	нСтр.Номер = "08";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "сентябрь";
	нСтр.Номер = "09";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "сентября";
	нСтр.Номер = "09";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "октябрь";
	нСтр.Номер = "10";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "октября";
	нСтр.Номер = "10";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "ноябрь";
	нСтр.Номер = "11";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "ноября";
	нСтр.Номер = "11";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "декабрь";
	нСтр.Номер = "12";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "декабря";
	нСтр.Номер = "12";
	
	Возврат ТЗ;
КонецФункции // ПадежиМесяцов()

&НаСервере
Функция ЗаглавныеБуквыЦифрыСлова(Слово)
	Если Лев(Слово,1) = ВРег(Лев(Слово,1)) Тогда
		Возврат Слово;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции // ЗаглавныеБуквыЦифры()

&НаСервере
Функция ЗаглавныеБуквыЦифры(мСлова)
	мСловаПоиска = Новый Массив;
	Для Каждого Слово Из мСлова Цикл
		Если Лев(Слово,1) = ВРег(Лев(Слово,1)) Тогда
			мСловаПоиска.Добавить(Слово);	
		КонецЕсли;
	КонецЦикла;
	
	Возврат мСловаПоиска;
КонецФункции // ЗаглавныеБуквыЦифры()

&НаСервере
Функция УбратьЛишниеСимволы(Строка, сНастройка)
	
	Возврат ФункцииРазбораТекста.УбратьЛишниеСимволы(
		Строка,
		сНастройка.ЧитаемыеСимволы,
		сНастройка.НомерМожетСодержатьТочку
	);
	
	//зСтрока = Строка;
	//зСтрока = СтрЗаменить(зСтрока,Символы.ПС," ");
	//зСтрока = СтрЗаменить(зСтрока,"ё","е");
	//НомерМожетСодержатьТочку = сНастройка.НомерМожетСодержатьТочку;
	//НоваяСтрока = "";
	//ЧитаемыеСимволы = сНастройка.ЧитаемыеСимволы;
	//Для Сч = 1 по СтрДлина(зСтрока) Цикл
	//	Символ = Сред(зСтрока, Сч, 1);
	//	Если Найти(ЧитаемыеСимволы, Символ) > 0 Тогда
	//		НоваяСтрока = НоваяСтрока + Символ;
	//	ИначеЕсли Сч > 1 И Символ = "." И СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Сред(зСтрока, Сч - 1, 1)) <> Неопределено Тогда // если точка и предущий символ число , то предпологаем что это дата через точку
	//		НоваяСтрока = НоваяСтрока + Символ;	
	//	ИначеЕсли НомерМожетСодержатьТочку И Сч < СтрДлина(зСтрока) И Символ = "." И Сред(зСтрока, Сч + 1, 1) = " " Тогда //если точка и далее пробел, то предпологаем это конец строки 
	//		Продолжить;	
	//	ИначеЕсли НомерМожетСодержатьТочку И Символ = "." Тогда
	//		НоваяСтрока = НоваяСтрока + Символ;	  	
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Возврат НоваяСтрока;
	
КонецФункции

&НаКлиенте
Процедура КаталогСкановНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Если Диалог.Выбрать() Тогда
		КаталогДокументов = Диалог.Каталог;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТЧОригиналСканаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗапуститьПриложение(Элемент.ТекстРедактирования);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	КаталогДокументов = Настройка.КаталогДокументовПоУмолчанию; 
	Если Настройка.ДолговыеОбязательства Тогда
		Элементы.ТЧДолговоеОбязательство.Видимость = Истина;
		Элементы.ТЧОтметкаДО.Видимость = Истина;
	КонецЕсли;
	
	Если Настройка.Контрагенты Тогда
		Элементы.ТЧКонтрагент.Видимость = Истина;
		Элементы.ТЧОтметкаКА.Видимость = Истина;
	КонецЕсли;
	
	Если Настройка.ИсполнительноеПроизводство Тогда
		Элементы.ТЧИсполнительноеПроизводство.Видимость = Истина;
		Элементы.ТЧОтметкаИП.Видимость = Истина;
	КонецЕсли;
	
	Если Настройка.ИсполнительныеДокументы Тогда
		Элементы.ТЧИсполнительныйДокументу.Видимость = Истина;
		Элементы.ТЧОтметкаИД.Видимость = Истина;
	КонецЕсли;
	
	Если Настройка.ПоказатьДокумент Тогда
		Элементы.ГруппаПраво.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиНаСервере(Настройка)
	РеквизитыНастройки = РеквизитыНастройки();
	сНастройка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Настройка,РеквизитыНастройки);
	НеУдалятьВременныеФайлы = Настройка.НеУдалятьВременныеФайлы;
	
	Возврат сНастройка;
КонецФункции

&НаКлиенте
Процедура НастройкаПриИзменении(Элемент)
	
	НастройкиПоУмолчанию = ПолучитьНастройкиНаСервере(Настройка);
	КаталогДокументовПоУмолчанию = НастройкиПоУмолчанию.КаталогДокументовПоУмолчанию; 
	Если ЗначениеЗаполнено(КаталогДокументовПоУмолчанию) Тогда
		КаталогДокументов = КаталогДокументовПоУмолчанию; 	
	КонецЕсли;
		
	ПоказатьДокумент = НастройкиПоУмолчанию.ПоказатьДокумент;   
	ВсеСтраницы = НастройкиПоУмолчанию.ВсеСтраницы;
	ПоказыватьСкрытьДокумент = ПоказатьДокумент;  
	Если ПоказатьДокумент И ВсеСтраницы Тогда   
		Элементы.ГруппаПраво.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элементы.СсылкаНаКартинку2.Видимость = Ложь;
		Элементы.ГруппаПравоКоманды.Видимость = Истина;   
	ИначеЕсли ПоказатьДокумент Тогда
		Элементы.ГруппаПраво.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		Элементы.СсылкаНаКартинку2.Видимость = Истина;
		Элементы.ГруппаПравоКоманды.Видимость = Ложь;   
		ПерваяСтр = НастройкиПоУмолчанию.ИЛПерваяСтраница-1; 
		ПятаяСтр = НастройкиПоУмолчанию.ИЛПятаяСтраница-1;
	КонецЕсли;
	Элементы.ГруппаПраво.Видимость = ПоказатьДокумент; 
КонецПроцедуры

&НаСервере
Процедура ДобавитьВПрекрепляемыеФайлыНаСервере(ВидОтметки,ТипФайла)
	мСтрок = Объект.ТЧ.НайтиСтроки(Новый Структура(ВидОтметки,Истина));
	ДетализацияПоИД = Константы.ДетализацияПоИД.Получить();
	Для Каждого Стр Из мСтрок Цикл
		ПрикрепитьФайлы = Документы.ПрикрепитьФайлы.СоздатьДокумент();
		ПрикрепитьФайлы.Дата = ТекущаяДата();
		Пользователи.ЗаполнитьРеквизитыПоДаннымПользователя(ПрикрепитьФайлы);
		ПрикрепитьФайлы.Комментарий = "Автоматически Парсинг документов";
		Если ВидОтметки = "ОтметкаКА" Тогда
			ПрикрепитьФайлы.Объект = Стр.Контрагент;
		ИначеЕсли ВидОтметки = "ОтметкаДО" Тогда
			ПрикрепитьФайлы.Объект = Стр.ДолговоеОбязательство;
		ИначеЕсли ВидОтметки = "ОтметкаИП" Тогда
			Попытка
				ПрикрепитьФайлы.Объект = Стр.ИсполнительноеПроизводство.НомерИД.Владелец;
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "у документа " + Стр.ИсполнительноеПроизводство + " не найден ИД или Владелец ИД";
				Сообщение.Сообщить();	
			КонецПопытки;
		ИначеЕсли ВидОтметки = "ОтметкаИД" И ДетализацияПоИД Тогда	
			Если ТипЗнч(Стр.ИсполнительныйДокумент) = Тип("СправочникСсылка.ИсполнительныеДокументы") Тогда
				ПрикрепитьФайлы.Объект = Стр.ИсполнительныйДокумент;	
			ИначеЕсли ТипЗнч(Стр.ИсполнительныйДокумент) = Тип("ДокументСсылка.СудебноеДело") Тогда
				Попытка
					ПрикрепитьФайлы.Объект = Стр.ИсполнительныйДокумент.Займ;
				Исключение
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "у документа " + Стр.ИсполнительныйДокумент + " не найден Владелец";
					Сообщение.Сообщить();		
				КонецПопытки;
			КонецЕсли;
		ИначеЕсли ВидОтметки = "ОтметкаИД" Тогда
			Если ТипЗнч(Стр.ИсполнительныйДокумент) = Тип("СправочникСсылка.ИсполнительныеДокументы") Тогда
				Попытка
					ПрикрепитьФайлы.Объект = Стр.ИсполнительныйДокумент.Владелец;	
				Исключение
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "у документа " + Стр.ИсполнительныйДокумент + " не найден Владелец";
					Сообщение.Сообщить();		
				КонецПопытки;
			ИначеЕсли ТипЗнч(Стр.ИсполнительныйДокумент) = Тип("ДокументСсылка.СудебноеДело") Тогда
				Попытка
					ПрикрепитьФайлы.Объект = Стр.ИсполнительныйДокумент.Займ;
				Исключение
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "у документа " + Стр.ИсполнительныйДокумент + " не найден Владелец";
					Сообщение.Сообщить();		
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		СтрПФ = ПрикрепитьФайлы.Файлы.Добавить();
		НаСервере = Константы.ХранитьПрикрепляемыеФайлыНаСервере.Получить();
		Если НаСервере Тогда
			Каталог = Константы.КаталогХраненияПрикрепляемыхФайловНаСервере.Получить();
			Ф = Новый Файл(Каталог);
			ДопПарам = Новый Структура("Файл",Ф);
			ДопПарам.Вставить("Каталог",Каталог);
			Файл = Новый Файл(Стр.ОригиналСкана);
			СтрПФ.УИД = Новый УникальныйИдентификатор();
			ДвДанные = Новый ДвоичныеДанные(Стр.ОригиналСкана);
			ДвДанные.Записать(Каталог + "\" + Строка(СтрПФ.УИД) + Файл.Расширение);
			СтрПФ.Путь = Стр.ОригиналСкана;
			СтрПФ.Размер = ОкруглитьРазмерФайла(Строка(Файл.Размер()));
			СтрПФ.Загружен = Истина;
			Если ВидОтметки = "ОтметкаИД" И ЗначениеЗаполнено(Стр.ТипФайла) Тогда
				СтрПФ.ТипФайла = Стр.ТипФайла;	
			Иначе
				СтрПФ.ТипФайла = ТипФайла;
			КонецЕсли;
		Иначе
			СтрПФ.Загружен = Истина;  
			СтрПФ.Путь = Стр.ОригиналСкана;
			СтрПФ.УИД = Новый УникальныйИдентификатор();
			Если ВидОтметки = "ОтметкаИД" И ЗначениеЗаполнено(Стр.ТипФайла) Тогда
				СтрПФ.ТипФайла = Стр.ТипФайла;
			Иначе
				СтрПФ.ТипФайла = ТипФайла;
			КонецЕсли;
			Файл = Новый Файл(Стр.ОригиналСкана);
			СтрПФ.Размер = ОкруглитьРазмерФайла(Строка(Файл.Размер()));
			МассивДанных = Новый Массив;
			МассивДанных.Добавить(Стр.ОригиналСкана);
			ПрикрепитьФайлы.ПоместитьВХранилище(МассивДанных);	
		КонецЕсли;
		Если ЗначениеЗаполнено(ПрикрепитьФайлы.Объект) Тогда
			ПрикрепитьФайлы.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере                        
Функция ОкруглитьРазмерФайла(СтрРазмер)
	Размер = Число(СтрРазмер);
	Если Размер > 1024 Тогда
		Размер = Окр(Размер/1024, 0);
		Стр = Строка(Размер) + " Кб";
	КонецЕсли;
	Если Размер > 1024 Тогда
		Размер = Окр(Размер/1024, 1);
		Стр = Строка(Размер) + " Мб";
	КонецЕсли;	
	Возврат Стр;		
КонецФункции

&НаКлиенте
Процедура ДобавитьВПрекрепляемыеФайлы(Команда)
	ТипФайла = ТипПрикрепляемогоФайла();
	ДобавитьВПрекрепляемыеФайлыНаСервере("ОтметкаИД",ТипФайла);
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Прикрепление документов завершено";
	Сообщение.Сообщить();
КонецПроцедуры

&НаСервере 
Функция ТипПрикрепляемогоФайла()

	Возврат Настройка.ТипыПрикрепляемыхФайлов;

КонецФункции // ТипПрикрепляемогоФайла()

&НаКлиенте
Процедура ТЧПриАктивизацииСтроки(Элемент)
	Если ПоказыватьСкрытьДокумент Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;    
		Если Элементы.СсылкаНаКартинку2.Видимость Тогда
			Если ТекущиеДанные <> Неопределено И НЕ ЗначениеЗаполнено(ТекущиеДанные.Страница) Тогда
				ОднаКартинка = КаталогПросмотра + ТекущиеДанные.Наименование + ".jpeg";
				ПерваяКартинка = КаталогПросмотра + ТекущиеДанные.Наименование + "-" + ПерваяСтр + ".jpeg";
				ПятаяКартинка = КаталогПросмотра + ТекущиеДанные.Наименование + "-" + ПятаяСтр + ".jpeg";
				ФайлОднаКартинка = Новый Файл(ОднаКартинка);
				ФайлПерваяКартинка = Новый Файл(ПерваяКартинка);
				ФайлПятаяКартинка = Новый Файл(ПятаяКартинка);
				Если ФайлОднаКартинка.Существует() Тогда
					СсылкаНаКартинку = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ОднаКартинка));
				ИначеЕсли ФайлПерваяКартинка.Существует() Тогда
					СсылкаНаКартинку = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПерваяКартинка));  
				Иначе
					СсылкаНаКартинку = Неопределено;
				КонецЕсли;
				Если ФайлПятаяКартинка.Существует() Тогда
					СсылкаНаКартинку2 = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПятаяКартинка));
				Иначе
					СсылкаНаКартинку2 = Неопределено;	
				КонецЕсли;
			КонецЕсли;  
		Иначе
			Если ТекущиеДанные <> Неопределено И НЕ ЗначениеЗаполнено(ТекущиеДанные.Страница) Тогда
				ОднаКартинка = КаталогПросмотра + ТекущиеДанные.Наименование + ".jpeg";
				ПерваяКартинка = КаталогПросмотра + ТекущиеДанные.Наименование + "-0" + ".jpeg";
				ФайлОднаКартинка = Новый Файл(ОднаКартинка);
				ФайлПерваяКартинка = Новый Файл(ПерваяКартинка);
				Если ФайлОднаКартинка.Существует() Тогда
					СсылкаНаКартинку = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ОднаКартинка));
					ТекущиеДанные.Страница = 0;
					Элементы.СсылкаНаКартинку.Заголовок = "Страница номер 1";
				ИначеЕсли ФайлПерваяКартинка.Существует() Тогда
					СсылкаНаКартинку = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПерваяКартинка));
					ТекущиеДанные.Страница = 0;
					Элементы.СсылкаНаКартинку.Заголовок = "Страница номер 1"; 
				Иначе
					СсылкаНаКартинку = Неопределено;
				КонецЕсли;
			ИначеЕсли ТекущиеДанные <> Неопределено И ТекущиеДанные.Страница = -1 Тогда
				ОднаКартинка = КаталогПросмотра + ТекущиеДанные.Наименование + ".jpeg";
				СсылкаНаКартинку = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ОднаКартинка));
				Элементы.СсылкаНаКартинку.Заголовок = "Страница номер 1";
			ИначеЕсли ТекущиеДанные <> Неопределено И ТекущиеДанные.Страница > -1 Тогда
				ПерваяКартинка = КаталогПросмотра + ТекущиеДанные.Наименование + "-" + ТекущиеДанные.Страница + ".jpeg";
				СсылкаНаКартинку = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПерваяКартинка));
				Элементы.СсылкаНаКартинку.Заголовок = "Страница номер " + (ТекущиеДанные.Страница + 1);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДокумент(Команда)
	Если Элементы.ГруппаПраво.Видимость Тогда
		Элементы.ГруппаПраво.Видимость = Ложь;
		ПоказыватьСкрытьДокумент = Ложь;
	Иначе
		Элементы.ГруппаПраво.Видимость = Истина; 
		ПоказыватьСкрытьДокумент = Истина;
		ТекущиеДанные = Элементы.ТЧ.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ОднаКартинка = КаталогПросмотра + ТекущиеДанные.Наименование + ".jpeg";
			ПерваяКартинка = КаталогПросмотра + ТекущиеДанные.Наименование + "-0" + ".jpeg";
			ПятаяКартинка = КаталогПросмотра + ТекущиеДанные.Наименование + "-4" + ".jpeg";
			ФайлОднаКартинка = Новый Файл(ОднаКартинка);
			ФайлПерваяКартинка = Новый Файл(ПерваяКартинка);
			ФайлПятаяКартинка = Новый Файл(ПятаяКартинка);
			Если ФайлОднаКартинка.Существует() Тогда
				СсылкаНаКартинку = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ОднаКартинка));
			ИначеЕсли ФайлПерваяКартинка.Существует() Тогда
				СсылкаНаКартинку = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПерваяКартинка));
			КонецЕсли;
			Если ФайлПятаяКартинка.Существует() Тогда
				СсылкаНаКартинку2 = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПятаяКартинка));
			Иначе
				СсылкаНаКартинку2 = Неопределено;	
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если НеУдалятьВременныеФайлы = Ложь Тогда      
		Попытка
			ПутьВременныеКаталоги = ПутьВременныеКаталогиНаСервере();
			УдалитьВременныеКаталогиНаСервере(ПутьВременныеКаталоги); 
		Исключение
			а = 1; 	
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)	
	Если НЕ ЗавершениеРаботы Тогда
		Если ОтветПередЗакрытием <> Истина Тогда
			Отказ = Истина;
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОповещениеОЗакрытии, "Вы хотите закрыть форму?", РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	Иначе	
		Отказ = Истина;
		ТекстПредупреждения = "При закрытии формы все не сохраненные данные будут утеряны. Продолжить?";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда		
		ОтветПередЗакрытием = Истина;		
		Закрыть();			
	Иначе		
		ОтветПередЗакрытием = Неопределено;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметки(Команда)
	СнятьПоВидуОтметки("ОтметкаИД");
КонецПроцедуры

&НаКлиенте
Процедура СнятьПоВидуОтметки(ВидОтметки)
	мСтрок = Объект.ТЧ.НайтиСтроки(Новый Структура(ВидОтметки,Истина));
	Для Каждого Стр Из мСтрок Цикл
		Стр[ВидОтметки] = Ложь;		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметки(Команда)
	Для Каждого Стр Из Объект.ТЧ Цикл
		Если ЗначениеЗаполнено(Стр.СудебноеДело) Тогда
			Стр.ОтметкаИД = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбработатьБезПодгатовкиНаСервере()
	сНастройка = ПолучитьНастройкиНаСервере(Настройка);
	ПутьВременныеКаталоги = ПутьВременныеКаталогиНаСервере();
	ОбходТХТНаСервере(ПутьВременныеКаталоги, сНастройка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьБезПодгатовкиНаКлиенте()
	сНастройка = ПолучитьНастройкиНаСервере(Настройка);
	ПутьВременныеКаталоги = ПутьВременныеКаталогиНаСервере();
	ОбходТХТНаКлиенте(ПутьВременныеКаталоги, сНастройка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьБезПодгатовки(Команда)

	Если Не УправлениеДоступами.ЕстьДоступНаПарсинг() Тогда
	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Нужны права на парсинг!";
		Сообщение.Сообщить();
		Возврат;
	
	КонецЕсли;
	
	ВыполнятьНа = ВыполнятьНа();
	Если ВыполнятьНа = "2" Тогда
		ОбработатьБезПодгатовкиНаКлиенте();	
	Иначе
		ОбработатьБезПодгатовкиНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИДиДобавитьВПрекрепляемыеФайлы(Команда)
	
	ВыполнятьНа = ВыполнятьНа();
	Если ВыполнятьНа = "2" Тогда
		ТипФайла = ТипПрикрепляемогоФайла();
		ДетализацияПоИд = ДетализацияПоИд();
		ХранитьПрикрепляемыеФайлыНаСервере = ХранитьПрикрепляемыеФайлыНаСервере();
		КаталогХраненияПрикрепляемыхФайловНаСервере =  КаталогХраненияПрикрепляемыхФайловНаСервере();
		мСтрок = Объект.ТЧ.НайтиСтроки(Новый Структура("ОтметкаИД",Истина));
		Для Каждого Стр Из мСтрок Цикл
			ИндексСтроки = Стр.НомерСтроки - 1;
			Файл = Новый Файл(Стр.ОригиналСкана);
			Расширение = Файл.Расширение;
			Размер = ОкруглитьРазмерФайла(Строка(Файл.Размер()));
			ФайлДвДанные = Новый ДвоичныеДанные(Стр.ОригиналСкана);
			ДобавитьВПрекрепляемыеФайлыСКлиент("ОтметкаИД",ИндексСтроки,ФайлДвДанные,Расширение,Размер,
			ТипФайла,ДетализацияПоИд,ХранитьПрикрепляемыеФайлыНаСервере,КаталогХраненияПрикрепляемыхФайловНаСервере);	
		КонецЦикла;	
	Иначе // по умолчанию всегда на сервере, даже если не заполнена настройка т.к. ранее выполнялось только на сервере
		ЗаполнитьИсполнительныйДокументНаСервере();
	КонецЕсли;
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Прикрепление документов завершено";
	Сообщение.Сообщить();

КонецПроцедуры

&НаСервере
Процедура ДобавитьВПрекрепляемыеФайлыСКлиент(ВидОтметки,
											ИндексСтроки,
											ФайлДвДанные,
											Расширение,
											Размер,
											ТипФайла,
											ДетализацияПоИд,
											ХранитьПрикрепляемыеФайлыНаСервере,
											Каталог)
	Стр = Объект.ТЧ[ИндексСтроки];
	ПрикрепитьФайлы = Документы.ПрикрепитьФайлы.СоздатьДокумент();
	ПрикрепитьФайлы.Дата = ТекущаяДатаСеанса();
	Пользователи.ЗаполнитьРеквизитыПоДаннымПользователя(ПрикрепитьФайлы);
	ПрикрепитьФайлы.Комментарий = "Автоматически Парсинг документов";
	Если ВидОтметки = "ОтметкаИД" И ДетализацияПоИД Тогда	
		Если ТипЗнч(Стр.ИсполнительныйДокумент) = Тип("СправочникСсылка.ИсполнительныеДокументы") Тогда
			ПрикрепитьФайлы.Объект = Стр.ИсполнительныйДокумент;	
		ИначеЕсли ТипЗнч(Стр.ИсполнительныйДокумент) = Тип("ДокументСсылка.СудебноеДело") Тогда
			Попытка
				ПрикрепитьФайлы.Объект = Стр.ИсполнительныйДокумент.Займ;
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "у документа " + Стр.ИсполнительныйДокумент + " не найден Владелец";
				Сообщение.Сообщить();		
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли ВидОтметки = "ОтметкаИД" Тогда
		Если ТипЗнч(Стр.ИсполнительныйДокумент) = Тип("СправочникСсылка.ИсполнительныеДокументы") Тогда
			Попытка
				ПрикрепитьФайлы.Объект = Стр.ИсполнительныйДокумент.Владелец;	
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "у документа " + Стр.ИсполнительныйДокумент + " не найден Владелец";
				Сообщение.Сообщить();		
			КонецПопытки;
		ИначеЕсли ТипЗнч(Стр.ИсполнительныйДокумент) = Тип("ДокументСсылка.СудебноеДело") Тогда
			Попытка
				ПрикрепитьФайлы.Объект = Стр.ИсполнительныйДокумент.Займ;
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "у документа " + Стр.ИсполнительныйДокумент + " не найден Владелец";
				Сообщение.Сообщить();		
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	СтрПФ = ПрикрепитьФайлы.Файлы.Добавить();
	Если ХранитьПрикрепляемыеФайлыНаСервере Тогда
		СтрПФ.УИД = Новый УникальныйИдентификатор();
		ДвДанные = ФайлДвДанные;
		ДвДанные.Записать(Каталог + "\" + Строка(СтрПФ.УИД) + Расширение);
		СтрПФ.Путь = Стр.ОригиналСкана;
		СтрПФ.Размер = Размер;
		СтрПФ.Загружен = Истина;
		Если ВидОтметки = "ОтметкаИД" И ЗначениеЗаполнено(Стр.ТипФайла) Тогда
			СтрПФ.ТипФайла = Стр.ТипФайла;	
		Иначе
			СтрПФ.ТипФайла = ТипФайла;
		КонецЕсли;
	Иначе
		СтрПФ.Загружен = Истина;  
		СтрПФ.Путь = Стр.ОригиналСкана;
		СтрПФ.УИД = Новый УникальныйИдентификатор();
		Если ВидОтметки = "ОтметкаИД" И ЗначениеЗаполнено(Стр.ТипФайла) Тогда
			СтрПФ.ТипФайла = Стр.ТипФайла;
		Иначе
			СтрПФ.ТипФайла = ТипФайла;
		КонецЕсли;
		СтрПФ.Размер = Размер;
		МассивДанных = Новый Массив;
		Данные = ФайлДвДанные;
		МассивДанных.Добавить(Данные);
		ПрикрепитьФайлы.ПоместитьВХранилище(МассивДанных);	
	КонецЕсли;
	Если ЗначениеЗаполнено(ПрикрепитьФайлы.Объект) Тогда
		ПрикрепитьФайлы.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ДетализацияПоИд()

	Возврат Константы.ДетализацияПоИД.Получить();

КонецФункции // ДетализацияПоИд()

&НаСервере
Функция ХранитьПрикрепляемыеФайлыНаСервере()

	Возврат Константы.ХранитьПрикрепляемыеФайлыНаСервере.Получить();

КонецФункции // ХранитьПрикрепляемыеФайлыНаСервере()

&НаСервере
Функция КаталогХраненияПрикрепляемыхФайловНаСервере()

	Возврат Константы.КаталогХраненияПрикрепляемыхФайловНаСервере.Получить();

КонецФункции // КаталогХраненияПрикрепляемыхФайловНаСервере()

&НаСервере
Функция ВыполнятьНа()

	Возврат Настройка.ВыполнятьНа;

КонецФункции // ВыполнятьНа()

&НаСервере
Процедура ЗаполнитьИД(Стр, ПросуживатьИзСкана, ОтменятьСД) 
	СудебноеДело = Стр.СудебноеДело;
	обСудебноеДело = СудебноеДело.ПолучитьОбъект();   
	
	Если Не ЗначениеЗаполнено(СудебноеДело.Решение) И Стр.РешениеОтказ Тогда
		обСудебноеДело.Решение = Перечисления.СтатусыСудебногоДела.Отказ;
		обСудебноеДело.Записать(РежимЗаписиДокумента.Проведение);
		Возврат;   
	ИначеЕсли Стр.СодержаниеИД = "ОТМЕНА" И ОтменятьСД Тогда  //И если в настройке стоит отменять проведение отмененных дел
		обСудебноеДело.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(СудебноеДело.Решение) Тогда
		обСудебноеДело.Решение = Перечисления.СтатусыСудебногоДела.Удовлетворено;
		обСудебноеДело.РешениеОсновнойДолг = СудебноеДело.ИскОсновнойДолг;
		обСудебноеДело.РешениеПроценты = СудебноеДело.ИскПроценты;
		обСудебноеДело.РешениеШтрафы = СудебноеДело.ИскШтрафы;
		обСудебноеДело.РешениеПени = СудебноеДело.ИскПени;
		обСудебноеДело.РешениеГоспошлина = СудебноеДело.ИскГоспошлина;
		обСудебноеДело.РешениеСуммаИндексации208 = СудебноеДело.ИскСуммаИндексации208;
		обСудебноеДело.РешениеНачисленныеПроценты395 = СудебноеДело.ИскНачисленныеПроценты395;
		обСудебноеДело.ЗаполнитьСуммыРешения();
	КонецЕсли;  
	
	Контрагент = Стр.Контрагент;
	Отбор = Новый Структура();
	Отбор.Вставить("Ответчик", Контрагент);      
	мИД = СудебноеДело.ИД.НайтиСтроки(Отбор);
	Если мИД.Количество() = 0 Тогда
		обСудебноеДело.ЗаполнитьЧастиРешения();
		обСудебноеДело.Записать();
	КонецЕсли;
	
	мИД = СудебноеДело.ИД.НайтиСтроки(Отбор);
	Если мИД.Количество() > 0 Тогда
		СтрИД = мИД[0];
		Если ЗначениеЗаполнено(СтрИД.ИсполнительныйДокумент) Тогда
			обИД = СтрИД.ИсполнительныйДокумент.ПолучитьОбъект();
		Иначе
			обИД = СоздатьИД(СудебноеДело, Контрагент, СтрИД);	
			обСудебноеДело.ИД[СтрИД.НомерСтроки-1].ИсполнительныйДокумент = обИД.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Стр.ДатаИД) Тогда
		обИД.ДатаИД = Стр.ДатаИД;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Стр.СодержаниеИД) Тогда
		обИД.СодержаниеИД = Стр.СодержаниеИД;	
		Если ПросуживатьИзСкана Тогда
			структураРешения = ПолучитьЧастиРешенияИзТекста(Стр.СодержаниеИД, СудебноеДело);  
			Если структураРешения <> "ПолноеПросуживание" Тогда 
				Если Не ЗначениеЗаполнено(СудебноеДело.Решение) Тогда   
					обСудебноеДело.Решение = Перечисления.СтатусыСудебногоДела.Удовлетворено;
					обСудебноеДело.РешениеОсновнойДолг = структураРешения.ОсновнойДолг;
					обСудебноеДело.РешениеПроценты = структураРешения.Проценты;
					обСудебноеДело.РешениеШтрафы = структураРешения.Штрафы;
					обСудебноеДело.РешениеПени = структураРешения.Пени;
					обСудебноеДело.РешениеГоспошлина = структураРешения.Госпошлина; 
					обСудебноеДело.ЗаполнитьСуммыРешения(); 
					Если структураРешения <> "НеРаспознано" Тогда
						обСудебноеДело.Комментарий = "Не удалось распознать части решения через инструмент Парсинга" + обСудебноеДело.Комментарий;  
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Стр.НомерДела) Тогда     
		обИД.НомерДела = Стр.НомерДела;	       // номер исполнительного документа
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Стр.ДатаПринятияСудебногоАкта) Тогда
		обИД.ДатаПринятияСудебногоАкта = Стр.ДатаПринятияСудебногоАкта;	
	КонецЕсли;
	
	обИД.Записать();
	
	Стр.ИсполнительныйДокумент = обИД.Ссылка;
	
	Если ЗначениеЗаполнено(Стр.ДатаВступленияВЗаконнуюСилу) Тогда
		Менеджер = РегистрыСведений.ХарактеристикиИД.СоздатьМенеджерЗаписи();				
		Менеджер.ИсполнительныйДокумент = обИД.Ссылка;
		Менеджер.Свойство = ПланыВидовХарактеристик.ХарактеристикиИД.СД_ДатаВступленияВЗаконнуюСилу;			
		Менеджер.Значение = Стр.ДатаВступленияВЗаконнуюСилу;
		Менеджер.Записать();		
		//обИД.ДатаВступленияВЗаконнуюСилу = Стр.ДатаВступленияВЗаконнуюСилу;	 //СД_ДатаВступленияВЗаконнуюСилу
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Стр.ДатаРешения) Тогда
		Менеджер = РегистрыСведений.ХарактеристикиИД.СоздатьМенеджерЗаписи();				
		Менеджер.ИсполнительныйДокумент = обИД.Ссылка;
		Менеджер.Свойство = ПланыВидовХарактеристик.ХарактеристикиИД.СД_ДатаРешения;			
		Менеджер.Значение = Стр.ДатаРешения;
		Менеджер.Записать();
		//обИД.ДатаРешения = Стр.ДатаРешения;	//СД_ДатаРешения
	КонецЕсли;
	
	обСудебноеДело.Записать(РежимЗаписиДокумента.Проведение);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИДКомандаНаСервере()
	ВидОтметки = "ОтметкаИД";
	мСтрок = Объект.ТЧ.НайтиСтроки(Новый Структура(ВидОтметки, Истина)); 
	ПросуживатьИзСкана = ЭтаФорма.ПрочитатьЧастиРешенияИзСкана;
	ОтменятьСД = ЭтаФорма.ОтменятьДокументСудДело;
	Для Каждого Стр Из мСтрок Цикл
		ЗаполнитьИД(Стр, ПросуживатьИзСкана, ОтменятьСД);	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИДКоманда(Команда)
	ЗаполнитьИДКомандаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СледующаяСтраница(Команда)
	Если ПоказыватьСкрытьДокумент Тогда
		ТекущиеДанные = Элементы.ТЧ.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ПерваяКартинка = КаталогПросмотра + ТекущиеДанные.Наименование + "-" + (ТекущиеДанные.Страница + 1) + ".jpeg";
			ФайлПерваяКартинка = Новый Файл(ПерваяКартинка);
			Если ФайлПерваяКартинка.Существует() Тогда			
				ТекущиеДанные.Страница = ТекущиеДанные.Страница + 1;
				Элементы.СсылкаНаКартинку.Заголовок = "Страница номер " + (ТекущиеДанные.Страница + 1);
				СсылкаНаКартинку = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПерваяКартинка));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущаяСтраница(Команда)
	Если ПоказыватьСкрытьДокумент Тогда
		ТекущиеДанные = Элементы.ТЧ.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ПерваяКартинка = КаталогПросмотра + ТекущиеДанные.Наименование + "-" + (ТекущиеДанные.Страница - 1) + ".jpeg";
			ФайлПерваяКартинка = Новый Файл(ПерваяКартинка);
			Если ФайлПерваяКартинка.Существует() Тогда
				СсылкаНаКартинку = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПерваяКартинка));
				ТекущиеДанные.Страница = ТекущиеДанные.Страница - 1;
				Элементы.СсылкаНаКартинку.Заголовок = "Страница номер " + (ТекущиеДанные.Страница - 1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры    

&НаСервере
Функция ПолучитьЧастиРешенияИзТекста(текстСодержание, СудебноеДело)   
	//СтрЧислоВхождений(<Строка>, <ПодстрокаПоиска>)
	
	ИскОсновнойДолг = СудебноеДело.ИскОсновнойДолг;
	ИскПроценты = СудебноеДело.ИскПроценты;
	ИскШтрафы = СудебноеДело.ИскШтрафы;
	ИскПени = СудебноеДело.ИскПени;
	ИскГоспошлина = СудебноеДело.ИскГоспошлина;  
	
	ОжидаемыйВидИД = ?(СудебноеДело.ВидТребований = Перечисления.ВидыИсковыхТребований.СудебныйПриказ, "СП", "ИЛ");
			
	поискРуб = "руб";
	поискКоп = "коп";
	
	КопейкиОтдельно = СтрНайти(текстСодержание, поискКоп, НаправлениеПоиска.СКонца) > 0;
	текстСодержание = СтрЗаменить(текстСодержание, "—", "-");
	
	мТекстСодержание = СтрРазделить(текстСодержание, " ", Ложь);
	
	СтартПоиска = ?(мТекстСодержание.Найти("размере") = Неопределено, мТекстСодержание.Найти("сумме"), мТекстСодержание.Найти("размере")); 
	
	Если СтартПоиска = Неопределено Тогда
		СтартПоиска = 0;
	КонецЕсли;   
	
	ПредыдущееСлово = ""; 
	ТипСловаПред = "";  
		
    КоличествоСумм = 0;
	МассивСумм = новый Массив;
	
	//Находим все суммы из текста
	
	Для Индекс = СтартПоиска По мТекстСодержание.Количество() - 1 Цикл
		ТекущееСлово = СокрЛП(мТекстСодержание[Индекс]); 
		ТекущееСлово = нРег(ТекущееСлово);
		ТипСлова = бит_ФССП_ИнтеграцияФССП.ПолучитьТипСлова(ТекущееСлово);
		Если ТипСлова = "Число" Тогда  
			Если ТипСловаПред = "Число" И СтрДлина(ТекущееСлово) > 2 И СтрДлина(ПредыдущееСлово) <= 3 Тогда 
				//случай 10ПРОБЕЛ000
				стрСуммаРуб = ПредыдущееСлово + ТекущееСлово;
				МассивСумм[КоличествоСумм - 1] = стрСуммаРуб; 
			ИначеЕсли КопейкиОтдельно и СтрДлина(ТекущееСлово) = 2 и СтрНайти(мТекстСодержание[Индекс + 1], поискКоп) > 0 Тогда
				стрСуммаРуб = стрСуммаРуб + "," + ТекущееСлово; 
				МассивСумм[КоличествоСумм - 1] = стрСуммаРуб;
			ИначеЕсли КопейкиОтдельно и СтрДлина(ТекущееСлово) = 2 и СтрНайти(ПредыдущееСлово, поискРуб) > 0 Тогда
				стрСуммаРуб = стрСуммаРуб + "," + ТекущееСлово;	
				МассивСумм[КоличествоСумм - 1] = стрСуммаРуб;
			Иначе
				Если ОжидаемыйВидИД = "ИЛ" И СтрДлина(ТекущееСлово) >= 9 Тогда
					Продолжить;
				Иначе	
					стрСуммаРуб = СтрЗаменить(ТекущееСлово, ".", ","); 
					КоличествоСумм = КоличествоСумм + 1; 
					МассивСумм.Добавить(стрСуммаРуб); 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
		ПредыдущееСлово = ТекущееСлово; 
		ТипСловаПред = ТипСлова;  				
	КонецЦикла;	  
	
	//Далее определяем полноту просуживания. Если полное - то возвращаем строку и оставляем заполнение из документа, иска
	// Если нет - заполняем и возвращаем структуру решения
	Решение = Неопределено;
	Если МассивСумм.Количество() <= 2 Тогда
		//Это полное просуживание. В тексте указана только сумма иска и сумма ГП. 
		//просуживаем на все исковые требования
		Решение = "ПолноеПросуживание";
	ИначеЕсли МассивСумм.Количество() = 3 Тогда
		// Тут два варианта. 
		МассивСуммКопия = МассивСумм;
		ЭтоПолноеПросуживание = СуммаДвухРавнаТретьему(МассивСуммКопия); 
		Если ЭтоПолноеПросуживание Тогда 
			//или тут написаны исковые, гп + ИТОГ, тогда как в первом
			//просуживаем на все исковые требования 
			Решение = "ПолноеПросуживание";
		Иначе
			// тут долг в разбивке, ищем и заполняем части.
			Решение = НайтиИЗаполнитьЧастиРешения(текстСодержание, МассивСумм);
			Если Решение = Неопределено Тогда
				Решение = "НеРаспознано";
			КонецЕсли;
		КонецЕсли; 
	Иначе 
		// тут долг в разбивке, ищем и заполняем части.   
		Решение = НайтиИЗаполнитьЧастиРешения(текстСодержание, МассивСумм);
		Если Решение = Неопределено Тогда
			Решение = "НеРаспознано";
		КонецЕсли;	
	КонецЕсли; 
	
	Возврат Решение;
КонецФункции  

&НаСервере
Функция СуммаДвухРавнаТретьему(мСуммы)  
	
	Для Индекс = 0 по мСуммы.ВГраница() Цикл
		мСуммы[Индекс] = Число(мСуммы[Индекс]); 
	КонецЦикла;
		
	Если мСуммы[2] = мСуммы[1] + мСуммы[0] Тогда
		Возврат Истина;  
	ИначеЕсли мСуммы[0] = мСуммы[1] + мСуммы[2] Тогда
		Возврат Истина; 
	ИначеЕсли мСуммы[1] = мСуммы[0] + мСуммы[2] Тогда
		Возврат Истина;  
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции 

&НаСервере
Функция НайтиИЗаполнитьЧастиРешения(текстСодержание, мСуммы)
	 
	ЧастиРешения = Неопределено;   
	
	поискРуб = " руб";
	РазбитоПоРублям = Ложь;
	поискКоп = " коп";
	РазбитоПоКопейкам = Ложь; 
	
	КоличествоРаспознанныхЧастей = 0;
		
	Если СтрНайти(текстСодержание, поискКоп, НаправлениеПоиска.СКонца) > 0 Тогда
		ТекстКопия = текстСодержание;	
		ПреобразоватьРублиКопейки(ТекстКопия, ПоискКоп);	
		Подстроки = СтрРазделить(ТекстКопия, "$", Ложь);	
		Если Подстроки.Количество() >= мСуммы.Количество() Тогда
			ОбработатьПодстрокиРешения(ЧастиРешения, Подстроки, мСуммы, КоличествоРаспознанныхЧастей); 	
			Если КоличествоРаспознанныхЧастей = мСуммы.Количество() Тогда	
				РазбитоПоКопейкам = Истина;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	Если РазбитоПоКопейкам = Ложь И СтрНайти(текстСодержание, поискРуб, НаправлениеПоиска.СКонца) > 0 Тогда 
		ТекстКопия = текстСодержание;	
		ПреобразоватьРублиКопейки(ТекстКопия, поискРуб);
		Подстроки = СтрРазделить(ТекстКопия, "$", Ложь); 
		КоличествоРаспознанныхЧастей = 0;
		Если Подстроки.Количество() >= мСуммы.Количество() Тогда
			ОбработатьПодстрокиРешения(ЧастиРешения, Подстроки, мСуммы, КоличествоРаспознанныхЧастей); 	 
			Если КоличествоРаспознанныхЧастей = мСуммы.Количество() Тогда	
				РазбитоПоРублям = Истина;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ РазбитоПоКопейкам И НЕ РазбитоПоРублям Тогда
		Подстроки = СтрРазделить(текстСодержание, ",", Ложь);
		КоличествоРаспознанныхЧастей = 0;
		ОбработатьПодстрокиРешения(ЧастиРешения, Подстроки, мСуммы, КоличествоРаспознанныхЧастей);
		Если КоличествоРаспознанныхЧастей <> мСуммы.Количество() Тогда	
			ЧастиРешения = Неопределено;
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат ЧастиРешения;
КонецФункции  


&НаСервере
Процедура ОбработатьПодстрокиРешения(сЧастиРешения, подстрокиСодержание, мСуммы, СчетчикНайденныхЧастей)  
	поискОД = "основн";
	поискПроцент = "процент";
	поискГП = "государствен";
	поискШтрафы = "штраф";
	поискПени = "пен"; 
	ПоискИск = "размер"; 
	ПоискВсего = "всего";
	ПоискИтого = "итого";
	
		
	сЧастиРешения = Новый Структура("ОсновнойДолг, Проценты, Госпошлина, Штрафы, Пени, Иск, Итого");	

	Для Каждого строкаСодержание Из подстрокиСодержание Цикл
		СтрокаДляПоиска = Нрег(СтрЗаменить(строкаСодержание, " ", "")); 
		Для Каждого строкаСумма Из мСуммы Цикл  
			
			Если СтрНайти(строкаСумма, "," ) > 0 Тогда
				Рубли = Лев(строкаСумма, СтрНайти(строкаСумма, "," ) - 1);   
			Иначе 
				Рубли = строкаСумма; 
			КонецЕсли;
			
			Если СтрНайти(СтрокаДляПоиска, Рубли) > 0 Тогда   
				Если СтрНайти(СтрокаДляПоиска, поискОД) > 0 Тогда 
					сЧастиРешения.ОсновнойДолг = Число(строкаСумма);  
					СчетчикНайденныхЧастей = СчетчикНайденныхЧастей + 1;  
					Прервать;
				КонецЕсли;	
				
				Если СтрНайти(СтрокаДляПоиска, поискПроцент) > 0 Тогда 
					сЧастиРешения.Проценты = Число(строкаСумма);   
					СчетчикНайденныхЧастей = СчетчикНайденныхЧастей + 1; 
					Прервать;
				КонецЕсли;
				
				Если СтрНайти(СтрокаДляПоиска, поискГП) > 0 Тогда 
					сЧастиРешения.Госпошлина = Число(строкаСумма); 
					СчетчикНайденныхЧастей = СчетчикНайденныхЧастей + 1; 
					Прервать;
				КонецЕсли;
				
				Если СтрНайти(СтрокаДляПоиска, поискШтрафы) > 0 Тогда 
					сЧастиРешения.Штрафы = Число(строкаСумма);  
					СчетчикНайденныхЧастей = СчетчикНайденныхЧастей + 1;
					Прервать;
				КонецЕсли;
				
				Если СтрНайти(СтрокаДляПоиска, поискПени) > 0 Тогда 
					сЧастиРешения.Пени = Число(строкаСумма);
					СчетчикНайденныхЧастей = СчетчикНайденныхЧастей + 1;
					Прервать;
				КонецЕсли;	 
				
				Если СтрНайти(СтрокаДляПоиска, поискИск) > 0 Тогда 
					сЧастиРешения.Иск = Число(строкаСумма);
					СчетчикНайденныхЧастей = СчетчикНайденныхЧастей + 1;
					Прервать;
				КонецЕсли;  
				
				Если СтрНайти(СтрокаДляПоиска, ПоискВсего) > 0 Тогда 
					сЧастиРешения.Итого = Число(строкаСумма);
					СчетчикНайденныхЧастей = СчетчикНайденныхЧастей + 1;
					Прервать;
				КонецЕсли;   
				
				Если СтрНайти(СтрокаДляПоиска, ПоискИтого) > 0 Тогда 
					сЧастиРешения.Итого = Число(строкаСумма);
					СчетчикНайденныхЧастей = СчетчикНайденныхЧастей + 1;
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры  


&НаСервере
Процедура ПреобразоватьРублиКопейки(Текст, Валюта)
	Если Валюта  = " коп" Тогда
		Если СтрНайти(Текст, Валюта, НаправлениеПоиска.СКонца) > 0 Тогда 
			Текст = СтрЗаменить(Текст, "копейками", "$");
			Текст = СтрЗаменить(Текст, "копейкам", "$");
			Текст = СтрЗаменить(Текст, "копейках", "$");
			Текст = СтрЗаменить(Текст, "копейкой", "$");
			Текст = СтрЗаменить(Текст, "копейка", "$");
			Текст = СтрЗаменить(Текст, "копейки", "$");
			Текст = СтрЗаменить(Текст, "копейке", "$");
			Текст = СтрЗаменить(Текст, "копейку", "$");
			Текст = СтрЗаменить(Текст, "копеек", "$");
			Текст = СтрЗаменить(Текст, "коп.", "$");
			Текст = СтрЗаменить(Текст, "коп", "$");
		КонецЕсли; 
	КонецЕсли;   
	
	Если Валюта  = " руб" Тогда
		Если СтрНайти(Текст, Валюта, НаправлениеПоиска.СКонца) > 0 Тогда 
			Текст = СтрЗаменить(Текст, "рублями", "$");
			Текст = СтрЗаменить(Текст, "рублём", "$");
			Текст = СтрЗаменить(Текст, "рублем", "$");
			Текст = СтрЗаменить(Текст, "рублях", "$");
			Текст = СтрЗаменить(Текст, "рублей", "$");
			Текст = СтрЗаменить(Текст, "рубль", "$");
			Текст = СтрЗаменить(Текст, "рубля", "$");
			Текст = СтрЗаменить(Текст, "рублю", "$"); 
			Текст = СтрЗаменить(Текст, "рубле", "$");
			Текст = СтрЗаменить(Текст, "рубли", "$");  
			Текст = СтрЗаменить(Текст, "рубл", "$");
			Текст = СтрЗаменить(Текст, "руб.", "$");
			Текст = СтрЗаменить(Текст, "руб", "$");
		КонецЕсли; 
	КонецЕсли;
		
КонецПроцедуры    

&НаСервере
Функция ДопПроверкаНаСППоТексту(СтрокаТекст) 
	Если СтрНайти(СтрокаТекст, "СУДЕБНЫЙ ПРИКАЗ") > 0 ИЛИ СтрНайти(СтрокаТекст, "Судебный Приказ") > 0 ИЛИ СтрНайти(СтрокаТекст, "Судебный приказ") > 0
		ИЛИ СтрНайти(СтрокаТекст, "судебный приказ") > 0 Тогда 
		ЭтоСП = Истина;
	Иначе
		ЭтоСП = Ложь;
	КонецЕсли;	
	Возврат ЭтоСП;	
КонецФункции

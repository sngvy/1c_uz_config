Процедура СоздатьДоБ(Контрагент, ДатаПоследнейПроверки = Неопределено) Экспорт
	ИДДолжника =  ОбъектыСервер.ПолучитьЗначениеСвойства(Контрагент,Константы.БанкротствоИДДолжника.Получить().Код); 
	Если НЕ ЗначениеЗаполнено(ИДДолжника) Тогда
		ИДДолжника = ПолучитьНаФедРесурсеИДДолжника(Контрагент);
	КонецЕсли;
	Если ИДДолжника <> Неопределено Тогда
		мИДСообщений = СоздатьСообщенияПоДолжнику(ИДДолжника, Контрагент, ДатаПоследнейПроверки);	
		Если мИДСообщений = Неопределено Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Нет новых сообщений по контрагенту";
			Сообщение.Сообщить();	
		Иначе		
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИдентификаторыСообщенийБанкротство.Регистратор КАК СообщениеРегистратор,
			|	ИдентификаторыСообщенийБанкротство.НомерСудебногоДела КАК НомерСудебногоДела,
			|	ИдентификаторыСообщенийБанкротство.Регистратор.ТипСообщения КАК ТипСообщения,
			|	ИдентификаторыСообщенийБанкротство.Регистратор.Дата КАК РегистраторДата,
			|	ИдентификаторыСообщенийБанкротство.Регистратор.ТипСудебногоРешения КАК ТипСудебногоРешения,
			|	СостояниеДоБ.ДоБ КАК ДоБ
			|ИЗ
			|	РегистрСведений.ИдентификаторыСообщенийБанкротство КАК ИдентификаторыСообщенийБанкротство
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеДоБ КАК СостояниеДоБ
			|		ПО ИдентификаторыСообщенийБанкротство.НомерСудебногоДела = СостояниеДоБ.НомерСудебногоДела
			|ГДЕ
			|	ИдентификаторыСообщенийБанкротство.ИДСообщения В(&ИДСообщения)
			|
			|СГРУППИРОВАТЬ ПО
			|	ИдентификаторыСообщенийБанкротство.Регистратор,
			|	ИдентификаторыСообщенийБанкротство.НомерСудебногоДела,
			|	ИдентификаторыСообщенийБанкротство.Регистратор.ТипСообщения,
			|	ИдентификаторыСообщенийБанкротство.Регистратор.Дата,
			|	ИдентификаторыСообщенийБанкротство.Регистратор.ТипСудебногоРешения,
			|	СостояниеДоБ.ДоБ
			|
			|УПОРЯДОЧИТЬ ПО
			|	РегистраторДата УБЫВ
			|ИТОГИ ПО
			|	НомерСудебногоДела,
			|	ДоБ";
			
			Запрос.УстановитьПараметр("ИДСообщения", мИДСообщений);
			
			Результат = Запрос.Выполнить();
			
			ВыборкаПерваяГруппировка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПерваяГруппировка.Следующий() Цикл
				ВыборкаНомерСудебногоДела = ВыборкаПерваяГруппировка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаНомерСудебногоДела.Следующий() Цикл
					Если ТипЗнч(ВыборкаНомерСудебногоДела.ДоБ)  = Тип("СправочникСсылка.ДелоОБанкротстве") Тогда
						ДелоОБанкротстве = ВыборкаНомерСудебногоДела.ДоБ.ПолучитьОбъект();	
					Иначе
						ДелоОБанкротстве = Справочники.ДелоОБанкротстве.СоздатьЭлемент();
						ДелоОБанкротстве.Наименование = Контрагент.Наименование + " № " + ВыборкаНомерСудебногоДела.НомерСудебногоДела; 
						ДелоОБанкротстве.НомерСудебногоДела = ВыборкаНомерСудебногоДела.НомерСудебногоДела; 
						ДелоОБанкротстве.Контрагент = Контрагент;
						ДелоОБанкротстве.ИДДолжника = ИДДолжника;
					КонецЕсли;	
					Выборка = ВыборкаНомерСудебногоДела.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
					Пока Выборка.Следующий() Цикл
						ТЧСообщенияОБанкротстве = ДелоОБанкротстве.СообщенияОБанкротстве.Добавить();
						ТЧСообщенияОБанкротстве.ДатаСообщения = Выборка.РегистраторДата;
						ТЧСообщенияОБанкротстве.Сообщение = Выборка.СообщениеРегистратор;
						ТЧСообщенияОБанкротстве.ТипСообщения = Выборка.ТипСообщения;
						ТЧСообщенияОБанкротстве.ТипСудебногоРешения = Выборка.ТипСудебногоРешения;
					КонецЦикла;
					ДелоОБанкротстве.СообщенияОБанкротстве.Свернуть("ДатаСообщения,Сообщение,ТипСообщения,ТипСудебногоРешения");	
					ДелоОБанкротстве.ДатаПоследнейПроверки = ТекущаяДата();
					ДелоОБанкротстве.Записать();
				КонецЦикла;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Создан объект: Дело о банкротствте " + ДелоОБанкротстве;
				Сообщение.Сообщить();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // СоздатьДоБ()

Функция СоздатьСообщенияПоДолжнику(ИДДолжника,Контрагент,ДатаПоследнейПроверки = Неопределено)
	
	СообщенияПоДолжникуXML = ПолучитьДанныеМетодом("СписокСообщенийПоДолжникуЗаПериод",ДатаПоследнейПроверки,,,,ИДДолжника); 
	Попытка
		СообщениеСтрокаXDTO = ОбщегоНазначения.ОбъектXDTOИзСтрокиXML(СообщенияПоДолжникуXML); 
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Не читаемое сообщение'"),
		УровеньЖурналаРегистрации.Ошибка,,,
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;
	СообщениеСтрокаXDTO = СообщениеСтрокаXDTO.Body.GetDebtorMessagesContentForPeriodByIdBankruptResponse.GetDebtorMessagesContentForPeriodByIdBankruptResult;
	СообщениеСтрокаXDTO = УдалитьТипВXML(СообщениеСтрокаXDTO);
	СписокСообщенийXDTO = ОбщегоНазначения.ОбъектXDTOИзСтрокиXML(СообщениеСтрокаXDTO);	
	Если СписокСообщенийXDTO.Свойства().Количество() = 0 Тогда
		Возврат Неопределено;	
	КонецЕсли;
	СписокСообщений = Новый Соответствие;
	мИДСообщений = Новый Массив;
	
	Если ТипЗнч(СписокСообщенийXDTO.MessageData) = Тип("СписокXDTO") Тогда
		Для каждого СообщениеXDTO Из СписокСообщенийXDTO.MessageData Цикл 
			ИДСообщения = СообщениеXDTO.Id;
			ДеревоСообщения = ПоместитьВДерево(СообщениеXDTO);
			СписокСообщений.Вставить(ИДСообщения, ДеревоСообщения);		
			мИДСообщений.Добавить(СообщениеXDTO.Id);
		КонецЦикла;
	ИначеЕсли ЗначениеЗаполнено(СписокСообщенийXDTO.MessageData.Id) Тогда
		ИДСообщения = СписокСообщенийXDTO.MessageData.Id;
		ДеревоСообщения = ПоместитьВДерево(СписокСообщенийXDTO.MessageData);	
		СписокСообщений.Вставить(ИДСообщения, ДеревоСообщения);
		мИДСообщений.Добавить(ИДСообщения);
	КонецЕсли;
	СоздатьСообщения(СписокСообщений,Контрагент);	
	
	Возврат мИДСообщений; 
	
	
КонецФункции // ПолучитьСообщенияПоДолжнику()

Функция ПолучитьНаФедРесурсеИДДолжника(Контрагент)
	
	idBankrupt = Константы.БанкротствоИДДолжника.Получить().Код;	
	Выборка = РегистрыСведений.БанкротствоРеквизитыПоискаИДДолжника.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗначениеКода = ОбъектыСервер.ПолучитьЗначениеСвойства(Контрагент,Выборка.ДополнительныйРеквизит.Код);
			Если ЗначениеЗаполнено(ЗначениеКода) И ТолькоЦифры(ЗначениеКода) И Число(ЗначениеКода)>0 Тогда
				Попытка
			  	ЗначениеКода = СтрЗаменить(СтрЗаменить(ЗначениеКода,"-","")," ","");
				ДанныеПоДолжникуПоКодуXML = ПолучитьДанныеМетодом("ДанныеПоДолжникуПоКоду",,,Выборка.ВидыПоискаКонтрагентаБанкротство,ЗначениеКода);
				Если ДанныеПоДолжникуПоКодуXML <> Неопределено Тогда 
					ЧтениеXML = Новый ЧтениеXML();
					ЧтениеXML.УстановитьСтроку(ДанныеПоДолжникуПоКодуXML);
					ДанныеПоДолжникуПоКодуXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
					Если ДанныеПоДолжникуПоКодуXDTO.Свойства().Количество() > 0 И ДанныеПоДолжникуПоКодуXDTO.Body.SearchDebtorByCodeResponse.SearchDebtorByCodeResult.DebtorList.Свойства().Количество() > 0 Тогда
						ИДДолжника = ДанныеПоДолжникуПоКодуXDTO.Body.SearchDebtorByCodeResponse.SearchDebtorByCodeResult.DebtorList.DebtorPerson.BankruptId;
						Если ЗначениеЗаполнено(ИДДолжника) Тогда
							ОбъектыСервер.ЗаписатьЗначениеСвойства(Контрагент,idBankrupt,ИДДолжника);
							Возврат ИДДолжника;
							Прервать;
						КонецЕсли;
					КонецЕсли; 
				КонецЕсли;
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Не удалось подключится к сервису services.fedresurs.ru'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Контрагент - " + Контрагент + " не найден в базе Федресурс Банкротство" ;
	Сообщение.Сообщить();
	Возврат Неопределено;
	
КонецФункции // ЗаполнитьИДДолжника()

Процедура ПолучитьСообщенияЗаПериод(ДатаНачала, ДатаОкончания) Экспорт
	
	СписокСообщенийXML = ПолучитьДанныеМетодом("СписокИдентификаторовСообщенийЗаПериод",ДатаНачала,ДатаОкончания);	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.УстановитьСтроку(СписокСообщенийXML);
	СписокСообщенийXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Если СписокСообщенийXDTO.Свойства().Количество() > 0 И СписокСообщенийXDTO.Body.GetMessageIdsResponse.GetMessageIdsResult.Свойства().Количество() > 0 Тогда
		СоздатьСообщенияПоИдентификаторуСообщения(СписокСообщенийXDTO.Body.GetMessageIdsResponse.GetMessageIdsResult.int);
	КонецЕсли;	
	
КонецПроцедуры // ПолучитьСообщения()

Процедура СоздатьСообщенияПоИдентификаторуСообщения(ИдСписокСообщений)
	СписокСообщений = Новый Соответствие;
	Для Каждого ИДСообщения Из ИдСписокСообщений Цикл
		//ИДСообщения = "1666540";
		СообщениеXML = ПолучитьДанныеМетодом("СообщениеПоИдентификаторуСообщения",,,,,,ИДСообщения);
		СообщениеСтрокаXDTO = ОбщегоНазначения.ОбъектXDTOИзСтрокиXML(СообщениеXML);
		СообщениеСтрокаXDTO = СообщениеСтрокаXDTO.Body.GetMessageContentResponse.GetMessageContentResult;
		СообщениеСтрокаXDTO = УдалитьТипВXML(СообщениеСтрокаXDTO);
		СообщениеXDTO = ОбщегоНазначения.ОбъектXDTOИзСтрокиXML(СообщениеСтрокаXDTO);
		ДеревоСообщения = ПоместитьВДерево(СообщениеXDTO);			
		СписокСообщений.Вставить(ИДСообщения,ДеревоСообщения);
	КонецЦикла;
	СоздатьСообщения(СписокСообщений);
КонецПроцедуры // СоздатьСообщенияПоИдентификаторуСообщения()

Функция ПоместитьВДерево(Об)
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Свойство");
	Дерево.Колонки.Добавить("Значение");
	Дерево.Колонки.Добавить("ИсходноеИмя");
	
	Строка = Дерево.Строки.Добавить();
	Строка.Свойство = "Сообщение";
	Строка.ИсходноеИмя = "Сообщение";
	ПрочитатьУзел(Об, Строка);
	Возврат Дерево;
КонецФункции

Процедура ПрочитатьУзел(Об, Дерево)
	Если ТипЗнч(Об) = Тип("СписокXDTO") Тогда 
		Для Каждого Ст ИЗ Об Цикл			
			Строка = Дерево.Строки.Добавить();
			Строка.Свойство = Об.ВладеющееСвойство.Имя;
			Строка.ИсходноеИмя = Об.ВладеющееСвойство.Имя;
			Если ТипЗнч(Ст) = Тип("СписокXDTO") ИЛИ ТипЗнч(Ст) = Тип("ОбъектXDTO") Тогда
				ПрочитатьУзел(Ст, Строка);
			ИначеЕсли Об.ВладеющееСвойство.Имя = "NameHistoryItem" Тогда
				Строка.Значение = Ст;	
			Иначе
				Строка.Свойство = Ст;
				Строка.ИсходноеИмя = Ст;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого Ст ИЗ Об.Свойства() Цикл
			Строка = Дерево.Строки.Добавить();
			Строка.Свойство = Ст.Имя;
			Строка.ИсходноеИмя = Ст.Имя;
			Если ТипЗнч(Об[Ст.Имя]) = Тип("СписокXDTO") ИЛИ ТипЗнч(Об[Ст.Имя]) = Тип("ОбъектXDTO") Тогда
				ПрочитатьУзел(Об[Ст.Имя], Строка);
			Иначе
				Строка.Свойство = Ст.Имя;
				Строка.ИсходноеИмя = Ст.Имя;
				Строка.Значение = Об[Ст.Имя];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура СоздатьСообщения(СписокСообщений,Контрагент = Неопределено)	
	Для Каждого ДеревоСообщения Из СписокСообщений Цикл		
		ТЗ = ПолучитьТзСообщения();
		СвойстваСЗначениями = ПолучитьСвойстваСЗначениями(); 
		ГУИД = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		ПереборВсехСтрокДереваЗначений(ДеревоСообщения.Значение,ТЗ,СвойстваСЗначениями,ГУИД);	
		мДатаПубликации = ТЗ.НайтиСтроки(Новый Структура("Свойство", Справочники.БанкротствоИерархияСвойств.НайтиПоРеквизиту("ИсходноеНаименование","PublishDate")));
		Сообщение = ПолучитьСообщениеОБанкротстве(ДеревоСообщения.Ключ);
		Если Сообщение = Неопределено Тогда	
			СообщениеБанкротства = Документы.СообщениеБанкротства.СоздатьДокумент();
			СообщениеБанкротства.Дата = мДатаПубликации[0].Значение;
			СообщениеБанкротства.Номер = ДеревоСообщения.Ключ;
			СообщениеБанкротства.Контрагент = Контрагент;
			СообщениеБанкротства.ДанныеСообщения.Загрузить(ТЗ);		
			СообщениеБанкротства.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры // СоздатьСообщения()

Функция ПолучитьСообщениеОБанкротстве(Идентификатор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИдентификаторыСообщенийБанкротство.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.ИдентификаторыСообщенийБанкротство КАК ИдентификаторыСообщенийБанкротство
	|ГДЕ
	|	ИдентификаторыСообщенийБанкротство.ИДСообщения = &ИДСообщения";
	
	Запрос.УстановитьПараметр("ИДСообщения", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Регистратор.ПолучитьОбъект();		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьСообщениеОБанкротстве()

Функция ПолучитьТзСообщения()
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Свойство",Новый ОписаниеТипов("СправочникСсылка.БанкротствоИерархияСвойств"));
	ТЗ.Колонки.Добавить("Значение");
	ТЗ.Колонки.Добавить("ГУИД");
	ТЗ.Колонки.Добавить("РодительГУИД");
	Возврат ТЗ;
КонецФункции // ПолучитьТзСообщения()

Функция ПолучитьСвойстваСЗначениями()
	Список = Новый СписокЗначений;
	Список.Добавить("MessageType");
	Список.Добавить("TradeType");
	Список.Добавить("PriceType");
	Список.Добавить("AuctionStepUnit");
	Список.Добавить("PublisherType");
	Список.Добавить("AdvanceStepUnit");
	Список.Добавить("Code");
	Список.Добавить("Сообщение/MessageInfo/CourtDecision/DecisionType/Name/");
	
	Возврат Список;
КонецФункции // ПолучитьТзСообщения()

Процедура ПереборВсехСтрокДереваЗначений(текСтрока,ТаблицаЗначений,СвойстваСЗначениями,ГУИД)
	СтрокиДЗ = текСтрока.Строки;	
	Для Каждого ТекСтр Из СтрокиДЗ Цикл	
		ТекСтр.Свойство = ПолучитьИсточникДерева(ТекСтр);
		Если СвойстваСЗначениями.НайтиПоЗначению(ТекСтр.Свойство.ИсходноеНаименование) <> Неопределено
			ИЛИ	СвойстваСЗначениями.НайтиПоЗначению(ТекСтр.Свойство.ПолныйПутьКДанным) <> Неопределено Тогда
			ТекСтр.Значение = ПолучитьИмяТегаЗначения(ТекСтр.Свойство,ТекСтр.Значение);	
		ИначеЕсли ТекСтр.Значение = "true" Тогда
			ТекСтр.Значение = "Да";
		ИначеЕсли ТекСтр.Значение = "false" Тогда
			ТекСтр.Значение = "Нет"; 
		ИначеЕсли ТекСтр.Значение = "Currency" Тогда
			ТекСтр.Значение = "рубли"; 
		ИначеЕсли ТекСтр.Значение = "Percent" Тогда
			ТекСтр.Значение = "проценты"; 			
		КонецЕсли;
		Если Найти(ТекСтр.ИсходноеИмя,"Date") > 0 И ЗначениеЗаполнено(ТекСтр.Значение) Тогда
			ТекСтр.Значение = XMLЗначение(Тип("Дата"), ТекСтр.Значение);
		КонецЕсли;
		
		НовСтрока = ТаблицаЗначений.Добавить();
		НовСтрока.Свойство = ТекСтр.Свойство;
		НовСтрока.Значение = ТекСтр.Значение;
		НовСтрока.РодительГУИД = ГУИД;
		НовСтрока.ГУИД = Новый УникальныйИдентификатор();
		
		ПереборВсехСтрокДереваЗначений(ТекСтр, ТаблицаЗначений,СвойстваСЗначениями, НовСтрока.ГУИД);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьИсточникДерева(СтрокаДЗ)
	Строка = "";
	ЗаполнитьСтрокаИсточник(СтрокаДЗ, Строка);
	СтрокаРодитель = Строка; 
	СтрокаЭлемент = Строка + СтрокаДЗ.ИсходноеИмя + "/"; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанкротствоИерархияСвойств.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БанкротствоИерархияСвойств КАК БанкротствоИерархияСвойств
	|ГДЕ
	|	БанкротствоИерархияСвойств.ПолныйПутьКДанным = &ПолныйПутьКДанным";
	
	Запрос.УстановитьПараметр("ПолныйПутьКДанным", СтрокаЭлемент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Спр = Справочники.БанкротствоИерархияСвойств.СоздатьЭлемент();
		Спр.Наименование = СтрокаДЗ.ИсходноеИмя;
		Спр.ИсходноеНаименование = СтрокаДЗ.ИсходноеИмя;
		Спр.ПолныйПутьКДанным = СтрокаЭлемент;
		Спр.Родитель = Справочники.БанкротствоИерархияСвойств.НайтиПоРеквизиту("ПолныйПутьКДанным",СтрокаРодитель);
		Спр.Записать();
		Возврат Спр.Ссылка;
	КонецЕсли;;
	
	Возврат Строка
КонецФункции // ПолучитьИсточникДерева()

Процедура ЗаполнитьСтрокаИсточник(СтрокаДЗ, Строка)
	Если ЗначениеЗаполнено(СтрокаДЗ.Родитель) Тогда
		Строка = СтрокаДЗ.Родитель.ИсходноеИмя + "/" + Строка;
		ЗаполнитьСтрокаИсточник(СтрокаДЗ.Родитель, Строка);
	КонецЕсли;
КонецПроцедуры // ЗаполнитьСтрокаИсточник()

Функция ПолучитьИмяТегаСвойства(Свойство,Владелец)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанкротствоИерархияСвойств.Представление КАК Представление
	|ИЗ
	|	Справочник.БанкротствоИерархияСвойств КАК БанкротствоИерархияСвойств
	|ГДЕ
	|	БанкротствоИерархияСвойств.ПолныйПутьКДанным = &ПолныйПутьКДанным";
	
	Запрос.УстановитьПараметр("ПолныйПутьКДанным", Свойство);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Представление;
	КонецЕсли;                        
	
	
КонецФункции // ПолучитьИмяТега()

Функция ПолучитьИмяТегаЗначения(Владелец,ИсходноеНаименование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БанкротствоЗначенияСвойств.Ссылка КАК Ссылка,
	|	0 КАК Представление
	|ИЗ
	|	Справочник.БанкротствоЗначенияСвойств КАК БанкротствоЗначенияСвойств
	|ГДЕ
	|	БанкротствоЗначенияСвойств.Владелец = &Владелец
	|	И БанкротствоЗначенияСвойств.ИсходноеНаименование = &ИсходноеНаименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	БанкротствоЗначенияСвойств.Представление
	|ИЗ
	|	Справочник.БанкротствоЗначенияСвойств КАК БанкротствоЗначенияСвойств
	|ГДЕ
	|	БанкротствоЗначенияСвойств.ИсходноеНаименование = &ИсходноеНаименование";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("ИсходноеНаименование", ИсходноеНаименование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если НЕ ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			Спр = Справочники.БанкротствоЗначенияСвойств.СоздатьЭлемент();
			Спр.Наименование = Выборка.Представление;
			Спр.Владелец =  Владелец;
			Спр.ИсходноеНаименование = ИсходноеНаименование;
			Спр.Записать();
			Возврат Спр.Ссылка;
		КонецЕсли;
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Возврат ИсходноеНаименование;
	
КонецФункции // ПолучитьИмяТега()

Функция УдалитьТипВXML(ИсходнаяСтрока)
	НоваяСтрока = "";   
	Для Индекс=1 по СтрЧислоСтрок(ИсходнаяСтрока) Цикл	
		СтрТекста=СтрПолучитьСтроку(ИсходнаяСтрока,Индекс); 
		Если СтрНайти(СтрТекста,"xsi:type=") > 0 Тогда		
			СтрТекста = СокрЛП(СтрТекста);
			ТегОткрыть = СтрЗаменить(Лев(СтрТекста, СтрНайти(СтрТекста," ")-1),"<","");
			ТегЗакрыть = "/" + СтрЗаменить(Лев(СтрТекста, СтрНайти(СтрТекста," ")-1),"<","");
			ТегЗакрытьУсловия = "<" + ТегЗакрыть + ">"; 
			СтрТип = СтрЗаменить(СтрЗаменить(Прав(СтрТекста, СтрДлина(СтрТекста) - СтрНайти(СтрТекста,"xsi:type=")-9),">",""),"""","");
			СтрТипТегОткрыть = "<" + СтрТип + ">";
			СтрТипТегЗакрыть = "</" + СтрТип + ">";
			СтрТекста = "<" + ТегОткрыть + ">" +  Символы.ПС + СтрТипТегОткрыть;
		КонецЕсли;
		Если СокрЛП(СтрТекста) = ТегЗакрытьУсловия Тогда
			СтрТекста = СтрЗаменить(СтрТекста,ТегЗакрыть,СтрТипТегЗакрыть);
			СтрТекста = СтрТипТегЗакрыть +  Символы.ПС + "</" + ТегОткрыть + ">";
		КонецЕсли;
		НоваяСтрока = НоваяСтрока + СтрТекста + Символы.ПС;
	КонецЦикла; 
	
	Возврат НоваяСтрока;
КонецФункции // УдалитьТипXML()

Функция ПолучитьДанныеМетодом(Метод, Знач ДатаНачала = Неопределено, Знач ДатаОкончания = Неопределено, ТипКода = Неопределено, ЗначениеКода = Неопределено,
	ИДДолжника = Неопределено, ИДСообщения = Неопределено) Экспорт
	
	Попытка 
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type","text/xml;charset=UTF-8");
		
		ТелоЗапросаНачало = "<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:tem=""http://tempuri.org/"">  
		|<soapenv:Header/>
		|<soapenv:Body>";
		
		Если Метод = "СписокДолжниковСПоследнейПубликациейВУказанныйПериод" Тогда 
			ДатаНачала = ПолучитьФорматДаты(ДатаНачала);
			ДатаОкончания = ПолучитьФорматДаты(ДатаОкончания); 
			ТелоМетода = "
			|<tem:GetDebtorsByLastPublicationPeriod>
			|<tem:startDate>ДатаНач</tem:startDate>
			|<tem:endDate>ДатаКон</tem:endDate>
			|</tem:GetDebtorsByLastPublicationPeriod>";
			ТелоМетода = СтрЗаменить(ТелоМетода,"ДатаНач",ДатаНачала);
			ТелоМетода = СтрЗаменить(ТелоМетода,"ДатаКон",ДатаОкончания);
			Заголовки.Вставить("SOAPAction","http://tempuri.org/IMessageService/GetDebtorsByLastPublicationPeriod");
			
		ИначеЕсли Метод = "СписокДолжников" Тогда 
			ДатаНачала = ПолучитьФорматДаты(ДатаНачала);
			ТелоМетода = "
			|<tem:GetDebtorRegister>
			|<tem:date>ДатаНач</tem:date>
			|</tem:GetDebtorRegister>";
			Если ЗначениеЗаполнено(ДатаНачала) Тогда
				ТелоМетода = СтрЗаменить(ТелоМетода,"ДатаНач",ДатаНачала);
			Иначе
				ТелоМетода = СтрЗаменить(ТелоМетода,"<tem:date>ДатаНач</tem:date>","");
			КонецЕсли;
			Заголовки.Вставить("SOAPAction","http://tempuri.org/IMessageService/GetDebtorRegister");
			
		ИначеЕсли Метод = "ДанныеПоДолжникуПоКоду" Тогда  //Данные по должнику по коду (ИНН, ОГРН, ОГРНИП, СНИЛС)
			ТелоМетода = "
			|<tem:SearchDebtorByCode>
			|<tem:codeType>ТипКода</tem:codeType>
			|<tem:codeValue>ЗначениеКода</tem:codeValue>
			|</tem:SearchDebtorByCode>";
			ТелоМетода = СтрЗаменить(ТелоМетода,"ТипКода",ТипКода);
			ТелоМетода = СтрЗаменить(ТелоМетода,"ЗначениеКода",ЗначениеКода);
			Заголовки.Вставить("SOAPAction","http://tempuri.org/IMessageService/SearchDebtorByCode");
			
		ИначеЕсли Метод = "ДанныеПоДолжникуПоЕгоИдентификатору" Тогда  //Данные по должнику по его идентификатору
			ТелоМетода = "
			|<tem:GetDebtorByIdBankrupt>
			|<tem:idBankrupt>ИДДолжника</tem:idBankrupt>
			|</tem:GetDebtorByIdBankrupt>";
			ТелоМетода = СтрЗаменить(ТелоМетода,"ИДДолжника",ИДДолжника);
			Заголовки.Вставить("SOAPAction","http://tempuri.org/IMessageService/GetDebtorByIdBankrupt");
			
		ИначеЕсли Метод = "СписокСообщенийПоДолжникуЗаПериод" Тогда   //Список сообщений по должнику за период
			ТелоМетода = "
			|<tem:GetDebtorMessagesContentForPeriodByIdBankrupt>
			|<tem:idBankrupt>ИДДолжника</tem:idBankrupt>
			|<tem:startDate>ДатаНач</tem:startDate>
			|</tem:GetDebtorMessagesContentForPeriodByIdBankrupt>";
			ТелоМетода = СтрЗаменить(ТелоМетода,"ИДДолжника",ИДДолжника);
			Если ЗначениеЗаполнено(ДатаНачала) Тогда
				ДатаНачала = ПолучитьФорматДаты(ДатаНачала);
				ТелоМетода = СтрЗаменить(ТелоМетода,"ДатаНач",ДатаНачала);
			Иначе
				ТелоМетода = СтрЗаменить(ТелоМетода,"<tem:startDate>ДатаНач</tem:startDate>","");
			КонецЕсли;
			Заголовки.Вставить("SOAPAction","http://tempuri.org/IMessageService/GetDebtorMessagesContentForPeriodByIdBankrupt");
			
		ИначеЕсли Метод = "СписокОтчетовПоДолжникуЗаПериод" Тогда  //Список отчетов по должнику за период
			ДатаНачала = ПолучитьФорматДаты(ДатаНачала);
			ТелоМетода = "
			|<tem:GetDebtorMessagesContentForPeriodByIdBankrupt>
			|<tem:idBankrupt>ИДДолжника</tem:idBankrupt>
			|<tem:startDate>ДатаНач</tem:startDate>
			|</tem:GetDebtorMessagesContentForPeriodByIdBankrupt>";
			ТелоМетода = СтрЗаменить(ТелоМетода,"ИДДолжника",ИДДолжника);
			Если ЗначениеЗаполнено(ДатаНачала) Тогда
				ТелоМетода = СтрЗаменить(ТелоМетода,"ДатаНач",ДатаНачала);	
			Иначе
				ТелоМетода = СтрЗаменить(ТелоМетода,"<tem:startDate>ДатаНач</tem:startDate>","");	
			КонецЕсли;
			Заголовки.Вставить("SOAPAction","http://tempuri.org/IMessageService/GetDebtorReportsContentForPeriodByIdBankrupt");
			
		ИначеЕсли Метод = "СписокИдентификаторовСообщенийЗаПериод" Тогда  //Список идентификаторов сообщений за период
			ДатаНачала = ПолучитьФорматДаты(ДатаНачала);
			ДатаОкончания = ПолучитьФорматДаты(ДатаОкончания); 
			ТелоМетода = "
			|<tem:GetMessageIds>
			|<tem:startDate>ДатаНач</tem:startDate>
			|<tem:endDate>ДатаКон</tem:endDate>
			|</tem:GetMessageIds>";
			ТелоМетода = СтрЗаменить(ТелоМетода,"ДатаНач",ДатаНачала);	
			ТелоМетода = СтрЗаменить(ТелоМетода,"ДатаКон",ДатаОкончания);
			Заголовки.Вставить("SOAPAction","http://tempuri.org/IMessageService/GetMessageIds");
			
		ИначеЕсли Метод = "СообщениеПоИдентификаторуСообщения" Тогда  //Сообщение по идентификатору сообщенияд
			ТелоМетода = "
			|<tem:GetMessageContent>
			|<tem:id>ИДСообщения</tem:id>
			|</tem:GetMessageContent>";
			ТелоМетода = СтрЗаменить(ТелоМетода,"ИДСообщения",ИДСообщения);	
			Заголовки.Вставить("SOAPAction","http://tempuri.org/IMessageService/GetMessageContent");
		КонецЕсли;
		
		ТелоЗапросаКонец = "
		|</soapenv:Body>
		|</soapenv:Envelope>";	
		ТелоЗапроса = ТелоЗапросаНачало + ТелоМетода + ТелоЗапросаКонец; 
		
		Сервер = "services.fedresurs.ru";
		Порт = 443;
		Доступ = БанкротствоПовтИсп.БанкротствоДоступКСервису();
		Логин = Доступ.Логин;
		Пароль = Доступ.Пароль;
		Сервис = Доступ.Сервис;
		Ssl = Новый ЗащищенноеСоединениеOpenSSL();
		Прокси = Новый ИнтернетПрокси(Ложь);
		СоединениеHTTP = Новый HTTPСоединение(Сервер, Порт, Логин, Пароль, Прокси,,Ssl);	
		ЗапросHTTP = Новый HTTPЗапрос(Сервис, Заголовки);	
		ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса);
		
		Результат = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP);
		Ответ = ПолучитьПараметрыDigestАутентификация(Результат.Заголовки.Получить("WWW-Authenticate"));
		realm = ОтветЗначение("realm",Ответ.realm);
		HA1 = ПолучитьХеш(Логин+":"+realm+":"+Пароль);    
		HA1 = ХексВСтроку(HA1);
		URI = ?(Лев(Сервис,1)<>"/","/"+Сервис,Сервис);
		HA2 = ПолучитьХеш(ВРег("POST")+":"+URI);
		HA2 = ХексВСтроку(HA2);
		qop = "auth";
		nonce = ОтветЗначение("nonce",Ответ.nonce);
		opaque = ОтветЗначение("opaque",Ответ.opaque);
		nc = "00000001";
		ncStr = формат(nc,"ЧЦ=8; ЧДЦ=; ЧВН=; ЧГ=0");
		cnonce = Новый УникальныйИдентификатор;
		cnonce = НРег(СтрЗаменить(Строка(cnonce), "-", ""));
		Response = ПолучитьХеш(HA1+":"+nonce+":"+ncStr+":"+cnonce+":"+qop+":"+HA2);    
		Response = ХексВСтроку(Response);
		
		DigestЗапрос = "Digest username="""+Логин+""", realm="""+realm+""", nonce="""+nonce;
		DigestЗапрос = DigestЗапрос+""", uri="""+URI+""", qop="+qop+", nc="+ncStr;
		DigestЗапрос = DigestЗапрос+", cnonce="""+cnonce+""", response="""+Response+""",  algorithm=MD5  opaque="""+opaque+"""";
		
		Заголовки.Вставить("Authorization", DigestЗапрос);
		Запрос = ПолучитьЗапросHTTP(Сервис, Заголовки, ТелоЗапроса);
		Результат = СоединениеHTTP.ОтправитьДляОбработки(Запрос);
		Если Результат.КодСостояния = 200 Тогда
			Данные = Результат.ПолучитьТелоКакСтроку();
			Возврат Данные;
		ИначеЕсли Результат.КодСостояния = 500 Тогда
			Возврат Неопределено;
		Иначе
			БанкротствоСервер.Пауза(180);	
			Данные = ПолучитьДанныеМетодом(Метод, ДатаНачала,ДатаОкончания, ТипКода, ЗначениеКода ,ИДДолжника, ИДСообщения);
			Возврат Данные;
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Не удалось подключится к сервису services.fedresurs.ru'"),
		УровеньЖурналаРегистрации.Ошибка,,,
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось подключится к сервису services.fedresurs.ru";
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьПараметрыDigestАутентификация(WWW_Authenticate)
	
	МассивПараметров = СтрРазделить(WWW_Authenticate,",");
	СтруктураDigest = Новый Структура;
	Для Каждого Параметр Из МассивПараметров Цикл
		Если Найти(Параметр,"realm") Тогда
			СтруктураDigest.Вставить("realm",Параметр)	
		ИначеЕсли  Найти(Параметр,"nonce") Тогда
			СтруктураDigest.Вставить("nonce",Параметр)
		ИначеЕсли  Найти(Параметр,"opaque") Тогда
			СтруктураDigest.Вставить("opaque",Параметр)		
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураDigest;
	
КонецФункции // ПолучитьПараметрыDigestАутентификация()

Функция ПолучитьФорматДаты(Дата)	
	Дата = Формат(Дата,"ДФ=гггг-ММ-ддTЧЧ:мм:сс");	
	Возврат Дата;	
КонецФункции 

Функция ПолучитьХеш(Текст)
	ОбъектХеш = Новый ХешированиеДанных(ХешФункция.MD5);
	ОбъектХеш.Добавить(Текст);
	Возврат ОбъектХеш.ХешСумма;
КонецФункции

Функция ОтветЗначение(Ответ,Значение)
	Результат = Сред(Значение,Найти(Значение,Ответ+"=")+СтрДлина(Ответ)+2);
	Результат = Лев(результат,СтрДлина(результат)-1);
	Возврат Результат;
КонецФункции

Функция ХексВСтроку(Текст)
	Возврат НРег(СтрЗаменить(Строка(Текст), " ", ""));
КонецФункции

Функция ПолучитьЗапросHTTP(Сервис, Заголовки = Неопределено, ТелоЗапроса = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Заголовки) ИЛИ ТипЗнч(Заголовки) <> Тип("Соответствие") Тогда
		Заголовки = Новый Соответствие;
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос(Сервис, Заголовки);
	
	Если ЗначениеЗаполнено(ТелоЗапроса) Тогда
		Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Процедура Банкротство_ЗагрузкаСообщенийИДоБ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыВРаботеОстатки.Объект.Должник КАК Контрагент,
	|	МИНИМУМ(ДелоОБанкротстве.ДатаПоследнейПроверки) КАК ДатаПоследнейПроверки
	|ИЗ
	|	РегистрНакопления.ОбъектыВРаботе.Остатки КАК ОбъектыВРаботеОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДелоОБанкротстве КАК ДелоОБанкротстве
	|		ПО ОбъектыВРаботеОстатки.Объект.Должник = ДелоОБанкротстве.Контрагент
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыВРаботеОстатки.Объект.Должник";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СоздатьДоБ(Выборка.Контрагент, Выборка.ДатаПоследнейПроверки);	
	КонецЦикла;
	
	ЗаполнитьНаименованияСвойствПоПодобным();
	
КонецПроцедуры

Процедура Банкротство_ЗагрузкаСообщенийИДоБДлительныйОперации(Парам1,Парам2) Экспорт
	
	Банкротство_ЗагрузкаСообщенийИДоБ();
	
КонецПроцедуры

Процедура ЗаполнитьНаименованияСвойствПоПодобным() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанкротствоИерархияСвойств.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_КПеренименованию
	|ИЗ
	|	Справочник.БанкротствоИерархияСвойств КАК БанкротствоИерархияСвойств
	|ГДЕ
	|	БанкротствоИерархияСвойств.Наименование = БанкротствоИерархияСвойств.ИсходноеНаименование
	|	И НЕ БанкротствоИерархияСвойств.Предопределенный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КПеренименованию.Ссылка КАК Ссылка,
	|	БанкротствоИерархияСвойств.Наименование КАК Наименование
	|ИЗ
	|	ВТ_КПеренименованию КАК ВТ_КПеренименованию
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанкротствоИерархияСвойств КАК БанкротствоИерархияСвойств
	|		ПО ВТ_КПеренименованию.Ссылка.ИсходноеНаименование = БанкротствоИерархияСвойств.ИсходноеНаименование
	|			И ВТ_КПеренименованию.Ссылка.Родитель.ИсходноеНаименование = БанкротствоИерархияСвойств.Родитель.ИсходноеНаименование
	|			И ВТ_КПеренименованию.Ссылка.Родитель.Родитель.ИсходноеНаименование = БанкротствоИерархияСвойств.Родитель.Родитель.ИсходноеНаименование
	|ГДЕ
	|	БанкротствоИерархияСвойств.Наименование <> БанкротствоИерархияСвойств.ИсходноеНаименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СпрБИС = Выборка.Ссылка.ПолучитьОбъект();
		СпрБИС.Наименование = Выборка.Наименование;
		Попытка
			СпрБИС.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение операции'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНаименованияСвойствПоПодобным()

// Останавливает выполнение кода на заданное время.
//
// Параметры:
//  Секунд - Число - время ожидания в секундах.
//
Процедура Пауза(Секунд) Экспорт
	
	ТекущийСеансИнформационнойБазы = ПолучитьТекущийСеансИнформационнойБазы();
	ФоновоеЗадание = ТекущийСеансИнформационнойБазы.ПолучитьФоновоеЗадание();
	
	Если ФоновоеЗадание = Неопределено Тогда
		Параметры = Новый Массив;
		Параметры.Добавить(Секунд);
		ФоновоеЗадание = ФоновыеЗадания.Выполнить("БанкротствоСервер.Пауза", Параметры);
	КонецЕсли;
		
	ФоновоеЗадание.ОжидатьЗавершенияВыполнения(Секунд);
	
КонецПроцедуры   

Функция ТолькоЦифры(Стр)
    Цифры = "0123456789";
    СтрКоличество = СтрДлина(Стр);
    Для Счетчик = 1 По СтрКоличество Цикл
        Если Найти(Цифры,Сред(Стр,Счетчик,1)) = 0 Тогда
            Возврат Ложь;
        КонецЕсли;
    КонецЦикла;
    Возврат Истина;
КонецФункции  

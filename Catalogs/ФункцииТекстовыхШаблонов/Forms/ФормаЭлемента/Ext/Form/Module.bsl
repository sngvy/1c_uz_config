
&НаКлиенте
Процедура КонструкторЗапроса(Команда)
	#Если ТолстыйКлиентУправляемоеПриложение Тогда
		Конструктор = Новый КонструкторЗапроса();
		Конструктор.РежимКомпоновкиДанных = Ложь;
		Конструктор.АвтоДобавлениеПредставлений = Ложь;
		                     
		СтарыйЗапрос = Ложь;	
		ИсходныйТекстЗапроса = "";
		ИсходныйТекст = Элементы.ПолеТекстовогоДокумента.ВыделенныйТекст;	
		// Определяем нужно ли вставить только текст запроса (по выделению). 
		// Если выделенияе ест, то дополнительные фразы писать не будем и попытаемся получить текст
		// старого запроса.
		Если НЕ ИсходныйТекст = "" Тогда
			СтарыйЗапрос = истина;
			Если Найти(ИсходныйТекст,"ВЫБРАТЬ") <> Неопределено Тогда
				ИсходныйТекстЗапроса = СтрЗаменить(ИсходныйТекст, "|", " ");
			КонецЕсли;
		КонецЕсли;	
		// Пробуем передать в конструктор текст старого запроса.
		Если ИсходныйТекстЗапроса <> "" Тогда
			Попытка
				Конструктор.Текст = ИсходныйТекстЗапроса;
			Исключение		
			КонецПопытки;
		КонецЕсли;
		
		//Чуров
		Конструктор.Показать(Новый ОписаниеОповещения("КонструкторЗапросаЗавершение", ЭтаФорма, Новый Структура("СтарыйЗапрос", СтарыйЗапрос)));	
	#Иначе
		Сообщить("Конструктор запроса работает только под Толстый клиент (управляемое приложение)!");
	#КонецЕсли	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторЗапросаЗавершение(ТекстЗапроса, ДополнительныеПараметры) Экспорт
	
	Если ТекстЗапроса = Неопределено Или ТекстЗапроса = "" Тогда
		Возврат;	
	КонецЕсли; 
	
	//Добавляем разделители
	ТекстЗапросаСРазделителями = "";
	КоличествоСтрок = СтрЧислоСтрок(ТекстЗапроса);
	Для Счетчик = 1 По КоличествоСтрок Цикл
		Если Счетчик = 1 И ДополнительныеПараметры.СтарыйЗапрос=Истина Тогда
			ТекСтрока = ""+СтрПолучитьСтроку(ТекстЗапроса, Счетчик);
		Иначе
			ТекСтрока = "|"+СтрПолучитьСтроку(ТекстЗапроса, Счетчик);		
		КонецЕсли;			
		Если Не Счетчик = КоличествоСтрок  Тогда 			
			ТекСтрока = ТекСтрока + Символы.ПС;
		КонецЕсли;	
		ТекстЗапросаСРазделителями = ТекстЗапросаСРазделителями + ТекСтрока;		
	КонецЦикла;

	ВспомогательнаяЧасть = Объект.Функция;
	Если ЗначениеЗаполнено(ВспомогательнаяЧасть) Тогда
		ВспомогательнаяЧасть = ВспомогательнаяЧасть + Символы.ПС;	
	КонецЕсли;
							
	Если ДополнительныеПараметры.СтарыйЗапрос Тогда
		ДобавленныйТекст = ТекстЗапросаСРазделителями;
	Иначе
		ДобавленныйТекст =  
				"Запрос = Новый Запрос();" + Символы.ПС +
				"Запрос.Текст = """ + Символы.ПС +
				ТекстЗапросаСРазделителями +
				""";" + Символы.ПС +
				"Запрос.УстановитьПараметр("""", );" + Символы.ПС +
				"Результат = Запрос.Выполнить();" + Символы.ПС +
				"Значение = Результат.Выгрузить();";
	КонецЕсли;
	
	Если Не Элементы.ПолеТекстовогоДокумента.ВыделенныйТекст = "" Тогда										
		Элементы.ПолеТекстовогоДокумента.ВыделенныйТекст = ДобавленныйТекст;
	Иначе
		Элементы.ПолеТекстовогоДокумента.ВыделенныйТекст = Элементы.ПолеТекстовогоДокумента.ВыделенныйТекст + 
				ДобавленныйТекст;
	КонецЕсли;
	Объект.Функция = ПолеТекстовогоДокумента.ПолучитьТекст();
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьТаблицВыходныхДанных();
	
	ПолеТекстовогоДокумента.УстановитьТекст(Объект.Функция);
	Если Объект.ВозвращаемыеКолонки.Количество() = 0 Тогда
		Объект.ВозвращаемыеКолонки.Добавить().Наименование = "Значение";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Тест(Команда)
	КомандаТестНаСервере();	
КонецПроцедуры

&НаСервере
Процедура КомандаТестНаСервере()
	Объект.Функция = ПолеТекстовогоДокумента.ПолучитьТекст();
	Если Объект.ВидВозвращаемогоЗначения = 
			ПредопределенноеЗначение("Перечисление.ВидыВозвращаемыхЗначений.Реквизит") Тогда
		ПолученныйРеквизит = ВычислитьФункцию(Объект.Функция, НаПримереОбъект, Объект.НаПримереЗначение);
		
	ИначеЕсли Объект.ВидВозвращаемогоЗначения = 
			ПредопределенноеЗначение("Перечисление.ВидыВозвращаемыхЗначений.Таблица") Тогда
		ПолученнаяТаблица.Очистить();
		ПолученноеЗначение = ВычислитьФункцию(Объект.Функция, НаПримереОбъект, Объект.НаПримереЗначение);
		
		Если ТипЗнч(ПолученноеЗначение) = Тип("Структура") Тогда
			НоваяСтрока = ПолученнаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПолученноеЗначение);
			
		ИначеЕсли ТипЗнч(ПолученноеЗначение) = Тип("Массив") Тогда
			Если ПолученноеЗначение.Количество() > 0 И ТипЗнч(ПолученноеЗначение[0]) = Тип("Структура") Тогда
				Для Каждого Элемент Из ПолученноеЗначение Цикл
					НоваяСтрока = ПолученнаяТаблица.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент); 		
				КонецЦикла;	
			Иначе	
				ТаблицаОбъект = РеквизитФормыВЗначение("ПолученнаяТаблица");
				ТаблицаОбъект.ЗагрузитьКолонку(ПолученноеЗначение, Объект.ВозвращаемыеКолонки[0].Наименование);
				ЗначениеВРеквизитФормы(ТаблицаОбъект, "ПолученнаяТаблица");
			КонецЕсли;
			
		Иначе //Таблица
			Попытка
				ПолученнаяТаблица.Загрузить(ПолученноеЗначение);
			Исключение
				Сообщить("Это не таблица!");
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВычислитьФункцию(Знач Запрос, Знач ОбъектВх, Знач Значение = Неопределено)
	Выполнить(Запрос);	
	Возврат Значение;
КонецФункции

&НаКлиенте
Процедура ПолеТекстовогоДокументаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Не Объект.Ссылка.Пустая() Тогда
		//Заполнение полей НаПримере
		ИмяСправочника = Перечисления.ОбъектыУчета.ПолучитьИмяСправочника(Объект.ОбъектУчета);
		Если ИмяСправочника <> Неопределено Тогда
			Выполнить("НаПримереОбъект = Справочники." + ИмяСправочника + ".НайтиПоКоду(Объект.НаПримереОбъект);");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектПриИзменении(Элемент)
	Объект.НаПримереОбъект = ПолучитьКодПоСсылке(НаПримереОбъект);
КонецПроцедуры

&НаСервере
Функция ПолучитьКодПоСсылке(Элемент)
	Попытка
		Возврат Элемент.Код;
	Исключение 
		Возврат "";
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура ВозвращаемоеЗначениеПриИзменении(Элемент)
	УстановитьВидимостьТаблицВыходныхДанных();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьТаблицВыходныхДанных()
	Если Объект.ВидВозвращаемогоЗначения = 
			ПредопределенноеЗначение("Перечисление.ВидыВозвращаемыхЗначений.Реквизит") Тогда
		Элементы.ГруппаКолонки.Доступность = Ложь;
		Элементы.ПолученныйРеквизит.Видимость = Истина;		
		Элементы.ПолученнаяТаблица.Видимость = Ложь;
		ПолученныйРеквизит = "";
		
	ИначеЕсли Объект.ВидВозвращаемогоЗначения = 
			ПредопределенноеЗначение("Перечисление.ВидыВозвращаемыхЗначений.Таблица") Тогда
		Элементы.ГруппаКолонки.Доступность = Истина;	
		Элементы.ПолученныйРеквизит.Видимость = Ложь;
		Элементы.ПолученнаяТаблица.Видимость = Истина;
		
		ОбновитьКолонкиТаблицы();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьКолонкиТаблицы()
	ТаблицаОбъект = РеквизитФормыВЗначение("ПолученнаяТаблица");	
	МассивДляУдаления = Новый Массив();	
	Для Каждого Элемент Из ТаблицаОбъект.Колонки Цикл 
		МассивДляУдаления.Добавить("ПолученнаяТаблица." + Элемент.Имя);
		Элементы.Удалить(Элементы.Найти("ПолученнаяТаблица" + Элемент.Имя));
	КонецЦикла;     
	ЭтаФорма.ИзменитьРеквизиты(,МассивДляУдаления);
	
	
	КолонкиТаблицы = Новый Массив();		
	Если Объект.ВозвращаемыеКолонки.Количество() = 0 Тогда
		Реквизит = Новый РеквизитФормы("Пусто", Новый ОписаниеТипов("Строка"), "ПолученнаяТаблица", "Пусто");
		КолонкиТаблицы.Добавить(Реквизит);
		ЭтаФорма.ИзменитьРеквизиты(КолонкиТаблицы);
		
		ПолеФормы = Элементы.Добавить("ПолученнаяТаблицаПусто",  Тип("ПолеФормы"), Элементы.ПолученнаяТаблица);
		ПолеФормы.Вид = ВидПоляФормы.ПолеВвода;
		ПолеФормы.ПутьКДанным = "ПолученнаяТаблица.Пусто";
	Иначе
		Для Каждого Элемент Из Объект.ВозвращаемыеКолонки Цикл	
			Реквизит = Новый РеквизитФормы(Элемент.Наименование, Новый ОписаниеТипов("Строка, Число, Булево, Дата"), 
					"ПолученнаяТаблица", Элемент.Наименование);
			КолонкиТаблицы.Добавить(Реквизит);
		КонецЦикла;
		ЭтаФорма.ИзменитьРеквизиты(КолонкиТаблицы);
		Для Каждого Элемент Из Объект.ВозвращаемыеКолонки Цикл							
			ПолеФормы = Элементы.Добавить("ПолученнаяТаблица" + Элемент.Наименование,  Тип("ПолеФормы"), 
					Элементы.ПолученнаяТаблица);
			ПолеФормы.Вид = ВидПоляФормы.ПолеВвода;
			ПолеФормы.ПутьКДанным = "ПолученнаяТаблица." + Элемент.Наименование;
			ПолеФормы.ФорматРедактирования = "ЧН=";
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторФормата(Команда)
	Конструктор = Новый КонструкторФорматнойСтроки();
	
	ИсходныйТекстФормата = "";
	ИсходныйТекст = Элементы.ПолеТекстовогоДокумента.ВыделенныйТекст;
	Если НЕ ИсходныйТекст = "" Тогда
		Если Найти(ИсходныйТекст, "Формат") <> Неопределено Тогда
			Попытка
				ПерваяКовычка =Найти(ИсходныйТекст, Символ(34));
				ВтораяКовычка = Найти(Сред(ИсходныйТекст, ПерваяКовычка + 1), Символ(34));
				ИсходныйТекстФормата = Сред(ИсходныйТекст, ПерваяКовычка + 1, ВтораяКовычка - 1);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	СтарыйТекст = Ложь;
	Попытка
		Конструктор.Текст = ИсходныйТекстФормата;
		Если ИсходныйТекстФормата <> "" Тогда
			СтарыйТекст = Истина;
		КонецЕсли;
	Исключение
		
	КонецПопытки;
		
	//Боевкин 15.02.2018
	Конструктор.Показать(Новый ОписаниеОповещения("КонструкторФорматаЗавершение", Этаформа, Новый Структура("СтарыйТекст", СтарыйТекст)));	
КонецПроцедуры

//Чуров++
&НаКлиенте
Процедура КонструкторФорматаЗавершение(ФорматнаяСтрока, ДополнительныеПараметры) Экспорт
	 
	Если ФорматнаяСтрока = Неопределено Или ФорматнаяСтрока = "" Тогда
		Возврат;	
	КонецЕсли; 
	
	ВспомогательнаяЧасть = Объект.Функция;
	Если ЗначениеЗаполнено(ВспомогательнаяЧасть) Тогда
		ВспомогательнаяЧасть = ВспомогательнаяЧасть + Символы.ПС;	
	КонецЕсли;
	Если ДополнительныеПараметры.СтарыйТекст Тогда
		ДобавленныйТекст = "Значение[н] = Формат(Значение[н], """ + ФорматнаяСтрока + """);"
	Иначе
		ДобавленныйТекст =  
				"Для н = 0 По Значение.ВГраница() Цикл" + Символы.ПС + 
				Символы.Таб + "Значение[н] = Формат(Значение[н], """ + ФорматнаяСтрока + """);" + Символы.ПС + 
				"КонецЦикла;";
	КонецЕсли;
	
	Если Не Элементы.ПолеТекстовогоДокумента.ВыделенныйТекст = "" Тогда										
		Элементы.ПолеТекстовогоДокумента.ВыделенныйТекст = ДобавленныйТекст;
	Иначе
		Элементы.ПолеТекстовогоДокумента.ВыделенныйТекст = Элементы.ПолеТекстовогоДокумента.ВыделенныйТекст + 
				ДобавленныйТекст;
	КонецЕсли;
	Объект.Функция = ПолеТекстовогоДокумента.ПолучитьТекст();
КонецПроцедуры
//Чуров--

&НаКлиенте
Процедура ВозвращаемыеКолонкиПередУдалением(Элемент, Отказ)
	Отказ = Объект.ВозвращаемыеКолонки.Количество() = 1;
КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемыеКолонкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Отказ = (Элементы.ВозвращаемыеКолонки.ТекущиеДанные.Наименование = "");
КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемыеКолонкиНаименованиеПриИзменении(Элемент)
	ОбновитьКолонкиТаблицы();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Объект.Функция = ПолеТекстовогоДокумента.ПолучитьТекст();
КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемыеКолонкиПослеУдаления(Элемент)
	ОбновитьКолонкиТаблицы();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общий модуль телефонии БИТ
// Содержит общие функции, вызываемые на сервере.
////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьВерсиюИзМетаданныхКонфигурации()
	Возврат Метаданные.Версия;
КонецФункции

Функция ПолучитьВерсию1С() ЭКСПОРТ
	стрВерсия = ПолучитьВерсиюИзМетаданныхКонфигурации();
	ИндексРазделителя = Найти(стрВерсия, "/");
	Если ИндексРазделителя > 0 Тогда
		стрВерсия = Лев(стрВерсия, ИндексРазделителя - 1);
	КонецЕсли;
	Возврат стрВерсия;
КонецФункции

Функция ПолучитьВерсиюПодсистемы() ЭКСПОРТ
	Возврат "1.6.10.215";
КонецФункции

Функция ЗаписатьОшибкуВЖурналРегистрации(стрИсточник, стрОшибка, стрОписание) ЭКСПОРТ
	ЗаписьЖурналаРегистрации(стрИсточник, УровеньЖурналаРегистрации.Ошибка, , стрОшибка, стрОписание);
КонецФункции

Функция ПолучитьТекущегоПользователя() ЭКСПОРТ
	//ПользовательБД = ИмяПользователя();
	//Пользователь = Справочники.Пользователи.НайтиПоКоду(ПользовательБД);
	Пользователь = ПараметрыСеанса.ТекущийПользователь;
	Возврат Пользователь;
КонецФункции

Процедура УстановитьНастройкуТекущегоПользователя(стрИмяРегистраСведений, стрИмяМодуля, стрНастройка, значениеНастройки) ЭКСПОРТ
	ПользовательЗап = бит_ТелефонияСервер.ПолучитьТекущегоПользователя();
	зап = РегистрыСведений[стрИмяРегистраСведений].СоздатьМенеджерЗаписи();
	зап.Пользователь = ПользовательЗап;
	зап.Прочитать();
	обновитьЗапись = Ложь;
	Если НЕ зап.Выбран() Тогда
		ОбщийМодуль = Вычислить(стрИмяМодуля);
		ОбщийМодуль.ЗаполнитьНастройкиПоУмолчаниюТекущегоПользователя(зап);
		обновитьЗапись = Истина;
	КонецЕсли;
	Если зап[стрНастройка] <> значениеНастройки Тогда
		зап[стрНастройка] = значениеНастройки;
		обновитьЗапись = Истина;
	КонецЕсли;
	Если обновитьЗапись Тогда
		зап.Записать();
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьПараметрыОткрытияФормыНастроек(стрИмяРегистраСведений, стрИмяМодуля) ЭКСПОРТ
	ПользовательЗап =  ПолучитьТекущегоПользователя();
	менеджЗапись = РегистрыСведений[стрИмяРегистраСведений].СоздатьМенеджерЗаписи();
	менеджЗапись.Пользователь = ПользовательЗап;
	менеджЗапись.Прочитать();
	Если НЕ менеджЗапись.Выбран() Тогда
		ОбщийМодуль = Вычислить(стрИмяМодуля);
		ОбщийМодуль.ЗаполнитьНастройкиПоУмолчаниюТекущегоПользователя(менеджЗапись);
		менеджЗапись.Записать();
	КонецЕсли;
	Отбор = Новый Структура("Пользователь", ПользовательЗап);
	ключзап = РегистрыСведений[стрИмяРегистраСведений].СоздатьКлючЗаписи(Отбор);
	ПараметрыОткрытияНастроек = Новый Структура("Ключ", ключзап);
	Возврат ПараметрыОткрытияНастроек;
КонецФункции

// Возвращает массив из 3 чисел или Неопределено
Функция ПолучитьРежимСовместимостиКонфигурации() ЭКСПОРТ
	РежСовмест = Метаданные.РежимСовместимости;
	Если РежСовмест = Метаданные.СвойстваОбъектов.РежимСовместимости.НеИспользовать Тогда
		Возврат Неопределено;
	КонецЕсли;
	стрРежимСовмест = Строка(РежСовмест);
	стрРежимСовмест = СтрЗаменить(стрРежимСовмест, "Версия", "");
	списЗначРеж = бит_ТелефонияКлиентСервер.СтрРазбить(стрРежимСовмест, "_");
	массРеж = Новый Массив(3);
	Для й=0 По 2 Цикл
		массРеж[й] = Число(списЗначРеж[й].Значение);
	КонецЦикла;
	Возврат массРеж;
КонецФункции

Функция ПолучитьПрефиксВыходаНаВнешнююЛиниюПоУмолчанию() ЭКСПОРТ
	Возврат "9";
КонецФункции

Функция ПолучитьНаименованиеНабранногоНомера(стрНабранныйНомер) ЭКСПОРТ
	стрНомерПоиска = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(
							бит_ТелефонияКлиентСервер.ОчиститьНомерТолькоЦифры(стрНабранныйНомер)
							);
	стрНаименование = стрНомерПоиска;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	бит_НабранныеНомера.Наименование
	               |ИЗ
	               |	РегистрСведений.бит_НабранныеНомера КАК бит_НабранныеНомера
	               |ГДЕ
	               |	бит_НабранныеНомера.Номер = &Номер";
	Запрос.УстановитьПараметр("Номер", стрНомерПоиска);
	резт = Запрос.Выполнить();
	Если НЕ резт.Пустой() Тогда
		табл = резт.Выгрузить();
		наим = СокрЛП(табл[0].Наименование);
		Если ЗначениеЗаполнено(наим) Тогда
			стрНаименование = наим;
		КонецЕсли;
	КонецЕсли;
	Возврат стрНаименование;
КонецФункции

//-----------------------------------------------------------------------------
// Работа с историей звонков

Процедура ДобавитьВИсториюЗвонков(СвойНомер,
							флагТипЗвонкаВходящий,
							Номер,
							Абонент,
							КонтактноеЛицо,
							Успешность,
							Длительность,
							НабранныйНомер,
							стрПутьКЗаписи) ЭКСПОРТ
	//
	датаНачРазговора = ТекущаяДата() - Длительность;
	//
	запись = РегистрыСведений.бит_ИсторияЗвонков.СоздатьМенеджерЗаписи();
	запись.Пользователь			= ПолучитьТекущегоПользователя();
	запись.СвойНомер			= СвойНомер;
	запись.Дата					= датаНачРазговора;
	запись.Абонент				= Абонент;
	запись.КонтактноеЛицо		= КонтактноеЛицо;
	запись.Номер				= Номер;
	запись.ТипЗвонка = ? ( флагТипЗвонкаВходящий, Перечисления.бит_ТипЗвонка.Входящий, Перечисления.бит_ТипЗвонка.Исходящий);
	запись.Успешность			= Успешность;
	запись.ДлительностьЗвонка	= Длительность;
	запись.НабранныйНомер		= НабранныйНомер;
	запись.ЗаписьРазговора		= стрПутьКЗаписи;
	запись.Записать();
КонецПроцедуры

Функция УдалитьИсториюЗвонковКонтрагента(контрагентСсылка) ЭКСПОРТ
	Отбор = Новый Структура("Абонент", контрагентСсылка);
	выборка = РегистрыСведений.бит_ИсторияЗвонков.Выбрать(Отбор);
	записейУдалено = 0;
	Пока выборка.Следующий() Цикл
		менеджер = выборка.ПолучитьМенеджерЗаписи();
		менеджер.Удалить();
		записейУдалено = записейУдалено + 1;
	КонецЦикла;
	Возврат записейУдалено;
КонецФункции

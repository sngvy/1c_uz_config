             
Процедура ЗаполнитьНастройкиРаспределения() Экспорт
	Набор = РегистрыСведений.НастройкиАвтораспределения.СоздатьМенеджерЗаписи();
	Набор.Ответственный = ЭтотОбъект.Ответственный;
	Набор.Прочитать();
	ЭтотОбъект.ВариантРаспределения = Набор.ВариантРаспределения;
	ЭтотОбъект.ТипСотрудника = Набор.ТипСотрудника;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СотрудникиАвтораспределения.Сотрудник,
	                      |	СотрудникиАвтораспределения.УчаствуетВРаспределении,
	                      |	КОЛИЧЕСТВО(ОбъектыВРаботеОстатки.Объект) КАК КоличествоОбъектов,
	                      |	СУММА(ЗадолженностьПоОбъектамОстатки.СуммаРеглОстаток) КАК СуммаЗадолженности
	                      |ИЗ
	                      |	РегистрСведений.СотрудникиАвтораспределения КАК СотрудникиАвтораспределения
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбъектыВРаботе.Остатки(, Подразделение = &Подразделение) КАК ОбъектыВРаботеОстатки
	                      |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗадолженностьПоОбъектам.Остатки КАК ЗадолженностьПоОбъектамОстатки
	                      |			ПО ОбъектыВРаботеОстатки.Объект = ЗадолженностьПоОбъектамОстатки.Объект
	                      |		ПО СотрудникиАвтораспределения.Сотрудник = ОбъектыВРаботеОстатки.Сотрудник
	                      |ГДЕ
	                      |	СотрудникиАвтораспределения.Ответственный = &Ответственный
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	СотрудникиАвтораспределения.Сотрудник,
	                      |	СотрудникиАвтораспределения.УчаствуетВРаспределении");
	Запрос.УстановитьПараметр("Подразделение", ЭтотОбъект.Ответственный.Подразделение);
	Запрос.УстановитьПараметр("Ответственный", ЭтотОбъект.Ответственный);
	ЭтотОбъект.Сотрудники.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

Процедура ЗаполнитьТаблицуСДолговымиОбязательствами() Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОбъектыВРаботеОстатки.Объект,
	                      |	ЗадолженностьПоОбъектамОстатки.СуммаРеглОстаток КАК СуммаЗадолженности
	                      |ИЗ
	                      |	РегистрНакопления.ОбъектыВРаботе.Остатки(, Подразделение = &Подразделение) КАК ОбъектыВРаботеОстатки
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗадолженностьПоОбъектам.Остатки КАК ЗадолженностьПоОбъектамОстатки
	                      |		ПО ОбъектыВРаботеОстатки.Объект = ЗадолженностьПоОбъектамОстатки.Объект
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ОбъектыВРаботеОстатки.Объект,
	                      |	ЗадолженностьПоОбъектамОстатки.СуммаРеглОстаток
	                      |
	                      |ИМЕЮЩИЕ
	                      |	КОЛИЧЕСТВО(*) = 1");
	Запрос.УстановитьПараметр("Подразделение", ЭтотОбъект.Ответственный.Подразделение);
	ЭтотОбъект.Объекты.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры


Функция ВыполнитьРаспределение() Экспорт
	Если ЭтотОбъект.ВариантРаспределения.Пустая() Тогда
		ЭтотОбъект.ВариантРаспределения = Перечисления.ВариантыРаспределенияДолжников.ПоровнуПоКоличеству;			
	КонецЕсли;
	Если ЭтотОбъект.Сотрудники.НайтиСтроки(Новый Структура("УчаствуетВРаспределении", Истина)).Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Элемент Из ЭтотОбъект.Сотрудники Цикл
		Элемент.КоличествоДОНовое = Элемент.КоличествоДолговыхОбязательств;
		Элемент.СуммаЗадолженностиНовое = Элемент.СуммаЗадолженности;
	КонецЦикла;
	Для Каждого Элемент Из ЭтотОбъект.Объекты Цикл
		Элемент.НовыйСотрудник = Неопределено;
	КонецЦикла;
	
	Если ЭтотОбъект.ВариантРаспределения = Перечисления.ВариантыРаспределенияДолжников.ПоровнуПоКоличеству Тогда	
		ДолговоеОбязательство = НайтиДолговоеОбязательствоСМаксимальнойЗадолженностью();
		Пока ДолговоеОбязательство <> Неопределено Цикл			
			Сотрудник = ПолучитьТекущегоОтветственногоДО(ДолговоеОбязательство);
			ПрибавлятьКоличествоДО = Ложь;
			Если Сотрудник = Неопределено Тогда
				Сотрудник = НайтиСотрудникаСМинимальнойНагрузкойПоКоличеству();
				ПрибавлятьКоличествоДО = Истина;
			КонецЕсли;
			ПрисвоитьСотрудникуДО(Сотрудник, ДолговоеОбязательство, ПрибавлятьКоличествоДО);		
			ДолговоеОбязательство = НайтиДолговоеОбязательствоСМаксимальнойЗадолженностью();
		КонецЦикла;
		
	ИначеЕсли ЭтотОбъект.ВариантРаспределения = Перечисления.ВариантыРаспределенияДолжников.ПоровнуПоСуммеДолга Тогда 
		ДолговоеОбязательство = НайтиДолговоеОбязательствоСМаксимальнойЗадолженностью();
		Пока ДолговоеОбязательство <> Неопределено Цикл
			Сотрудник = ПолучитьТекущегоОтветственногоДО(ДолговоеОбязательство);
			ПрибавлятьКоличествоДО = Ложь;
			Если Сотрудник = Неопределено Тогда
				Сотрудник = НайтиСотрудникаСМинимальнойНагрузкойПоСумме();
				ПрибавлятьКоличествоДО = Истина;
			КонецЕсли;
			ПрисвоитьСотрудникуДО(Сотрудник, ДолговоеОбязательство, ПрибавлятьКоличествоДО);		
			ДолговоеОбязательство = НайтиДолговоеОбязательствоСМаксимальнойЗадолженностью();
		КонецЦикла;
	КонецЕсли;	
	
	Возврат Истина;
КонецФункции

Функция НайтиДолговоеОбязательствоСМаксимальнойЗадолженностью()
	Строки = ЭтотОбъект.Объекты.НайтиСтроки(Новый Структура("НовыйСотрудник", Справочники.Пользователи.ПустаяСсылка()));
	ДолговоеОбязательство = Неопределено;
	СуммаМакс = 0;
	Для Каждого Элемент Из Строки Цикл		
		Если ДолговоеОбязательство = Неопределено ИЛИ Элемент.СуммаЗадолженности > СуммаМакс Тогда
			ДолговоеОбязательство = Элемент.Объект;
			СуммаМакс = Элемент.СуммаЗадолженности;
		КонецЕсли;
	КонецЦикла;	
	Возврат ДолговоеОбязательство;
КонецФункции

Функция НайтиСотрудникаСМинимальнойНагрузкойПоКоличеству()
	Сотрудник = Неопределено;
	КолМин = 0;
	СуммаМин = 0;
	Для Каждого Элемент Из ЭтотОбъект.Сотрудники.НайтиСтроки(Новый Структура("УчаствуетВРаспределении", Истина)) Цикл
		Если Сотрудник = Неопределено ИЛИ Элемент.КоличествоДОНовое < КолМин ИЛИ 
				(Элемент.КоличествоДОНовое = КолМин И Элемент.СуммаЗадолженностиНовое < СуммаМин) Тогда
			Сотрудник = Элемент.Сотрудник;
			КолМин = Элемент.КоличествоДОНовое;
			СуммаМин = Элемент.СуммаЗадолженностиНовое;
		КонецЕсли;
	КонецЦикла;
	Возврат Сотрудник;	
КонецФункции

Функция НайтиСотрудникаСМинимальнойНагрузкойПоСумме()
	Сотрудник = Неопределено;
	КолМин = 0;
	СуммаМин = 0;
	Для Каждого Элемент Из ЭтотОбъект.Сотрудники.НайтиСтроки(Новый Структура("УчаствуетВРаспределении", Истина)) Цикл
		Если Сотрудник = Неопределено ИЛИ Элемент.СуммаЗадолженностиНовое < СуммаМин ИЛИ 
				(Элемент.СуммаЗадолженностиНовое = СуммаМин И Элемент.КоличествоДОНовое < КолМин) Тогда
			Сотрудник = Элемент.Сотрудник;
			КолМин = Элемент.КоличествоДОНовое;
			СуммаМин = Элемент.СуммаЗадолженностиНовое;
		КонецЕсли;
	КонецЦикла;
	Возврат Сотрудник;
КонецФункции

Функция ПолучитьТекущегоОтветственногоДО(ДолговоеОбязательство)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОбъектыВРаботеОстатки.Сотрудник КАК Ответственный
	                      |ИЗ
	                      |	РегистрНакопления.ОбъектыВРаботе.Остатки(, Объект = &ДО) КАК ОбъектыВРаботеОстатки");
	Запрос.УстановитьПараметр("ДО", ДолговоеОбязательство);
	Результат = Запрос.Выполнить().Выбрать();
	Сотрудник = Неопределено;
	Пока Результат.Следующий() Цикл
		Строки = ЭтотОбъект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", Результат.Ответственный));
		Если Строки.Количество() > 0 Тогда
			Сотрудник = Результат.Ответственный;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Сотрудник;
КонецФункции

Процедура ПрисвоитьСотрудникуДО(Сотрудник, ДолговоеОбязательство, ПрибавлятьКоличествоДО)
	СтрокаДО = ЭтотОбъект.Объекты.НайтиСтроки(Новый Структура("Объект", ДолговоеОбязательство))[0];
	СтрокаСотрудника = ЭтотОбъект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник))[0];
	
	СтрокаДО.НовыйСотрудник = Сотрудник;
	Если ПрибавлятьКоличествоДО Тогда
		СтрокаСотрудника.КоличествоДОНовое = СтрокаСотрудника.КоличествоДОНовое + 1;
		СтрокаСотрудника.СуммаЗадолженностиНовое = СтрокаСотрудника.СуммаЗадолженностиНовое + СтрокаДО.СуммаЗадолженности;
	КонецЕсли;
КонецПроцедуры


Процедура ПередатьСотрудникам(Отказ = Неопределено) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТаблицаДолжников.Объект,
	                      |	ТаблицаДолжников.НовыйСотрудник
	                      |ПОМЕСТИТЬ ТаблицаДолжников
	                      |ИЗ
	                      |	&ВыбранныеОбъекты КАК ТаблицаДолжников
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	МАКСИМУМ(ЕСТЬNULL(ОбъектыВРаботеОстатки.Сотрудник, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))) КАК Ответственный,
	                      |	ТаблицаДолжников.Объект,
	                      |	ТаблицаДолжников.НовыйСотрудник КАК НовыйСотрудник
	                      |ИЗ
	                      |	ТаблицаДолжников КАК ТаблицаДолжников
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОбъектыВРаботе.Остатки(&Момент, Подразделение = &Подразделение) КАК ОбъектыВРаботеОстатки
	                      |		ПО ТаблицаДолжников.Объект = ОбъектыВРаботеОстатки.Объект
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ТаблицаДолжников.Объект,
	                      |	ТаблицаДолжников.НовыйСотрудник
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Ответственный,
	                      |	НовыйСотрудник
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ ТаблицаДолжников");
						  
	Запрос.УстановитьПараметр("ВыбранныеОбъекты", ЭтотОбъект.Объекты.Выгрузить());
	Запрос.УстановитьПараметр("Момент", Новый Граница(КонецДня(ТекущаяДата()), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Подразделение", ЭтотОбъект.Подразделение);	
	Результат = Запрос.ВыполнитьПакет();
	ТЗ = Результат[1].Выгрузить();
	
	ДокументОбъект = Неопределено;
	СтарыйОтветственный = Неопределено;
	НовыйОтветственный = Неопределено; 
	Для Каждого Элемент Из ТЗ Цикл
		Если Элемент.Ответственный = Элемент.НовыйСотрудник Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтарыйОтветственный <> Элемент.Ответственный ИЛИ НовыйОтветственный <> Элемент.НовыйСотрудник Тогда
			Если ДокументОбъект <> Неопределено Тогда
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					Отказ = Истина;
					Возврат;
				КонецПопытки;
			КонецЕсли;
			ДокументОбъект = Документы.АктПередачи.СоздатьДокумент();
			ДокументОбъект.Дата = ТекущаяДата();
			ДокументОбъект.Организация = Элемент.НовыйСотрудник.Организация;
			//ДокументОбъект.СотрудникПередающий = Элемент.Ответственный;
			ДокументОбъект.СотрудникПринимающий = Элемент.НовыйСотрудник;
			//ДокументОбъект.ПодразделениеПередающее = Элемент.Ответственный.Подразделение;
			ДокументОбъект.ПодразделениеПринимающее = Элемент.НовыйСотрудник.Подразделение;
			ДокументОбъект.Автор = ЭтотОбъект.Автор;
			ДокументОбъект.ТипСотрудникаПринимающего = ТипСотрудника;
		КонецЕсли;		
		ДокументОбъект.Объекты.Добавить().Объект = Элемент.Объект;		
	КонецЦикла;
	
	Если ДокументОбъект <> Неопределено Тогда
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура Отобрать(Команда)
	ОтобратьСервер(); 
КонецПроцедуры

&НаСервере
Процедура ОтобратьСервер()
    Объект.Объекты.Очистить();
	Если Объект.ТипИсточника = Тип("ДокументСсылка.ПринятиеВРаботуОрганизации") Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		               |	СправочникСписок.Ссылка КАК Объект,
		               |	ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.Контрагенты) КАК ТипЭлемента
		               |ПОМЕСТИТЬ Таблица
		               |ИЗ
		               |	Справочник.Контрагенты КАК СправочникСписок
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	СправочникСписок.Ссылка,
		               |	ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.ДоговорыКонтрагентов)
		               |ИЗ
		               |	Справочник.ДоговорыКонтрагентов КАК СправочникСписок
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	СправочникСписок.Ссылка,
		               |	ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.УслугиПоДоговорам)
		               |ИЗ
		               |	Справочник.УслугиПоДоговору КАК СправочникСписок
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	СправочникСписок.Ссылка,
		               |	ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.ДолговыеОбязательства)
		               |ИЗ
		               |	Справочник.ДолговыеОбязательства КАК СправочникСписок
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	СправочникСписок.Ссылка,
		               |	ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.ИсполнительныеДокументы)
		               |ИЗ
		               |	Справочник.ИсполнительныеДокументы КАК СправочникСписок
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	СправочникСписок.Ссылка,
		               |	ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.Залоги)
		               |ИЗ
		               |	Справочник.Залоги КАК СправочникСписок
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Таблица.Объект,
		               |	Таблица.ТипЭлемента,
		               |	ИСТИНА КАК Пометка
		               |ИЗ
		               |	Таблица КАК Таблица
		               |ГДЕ
		               |	ИСТИНА";
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ
		               |	Таб1.Объект,
		               |	ВЫБОР ТИПЗНАЧЕНИЯ(Таб1.Объект)
		               |		КОГДА ТИП(Справочник.Контрагенты)
		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.Контрагенты)
		               |		КОГДА ТИП(Справочник.ДоговорыКонтрагентов)
		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.ДоговорыКонтрагентов)
		               |		КОГДА ТИП(Справочник.УслугиПоДоговору)
		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.УслугиПоДоговорам)
		               |		КОГДА ТИП(Справочник.ДолговыеОбязательства)
		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.ДолговыеОбязательства)
		               |		КОГДА ТИП(Справочник.ИсполнительныеДокументы)
		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.ИсполнительныеДокументы)
		               |		КОГДА ТИП(Справочник.Залоги)
		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.Залоги)
		               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.ПустаяСсылка)
		               |	КОНЕЦ КАК ТипЭлемента,
		               |	Таб1.Объект.Должник
		               |ПОМЕСТИТЬ Таблица
		               |ИЗ
		               |	РегистрНакопления.ОбъектыВРаботе.Остатки(, Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Таб1
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Таблица.Объект,
		               |	Таблица.ТипЭлемента,
		               |	ИСТИНА КАК Пометка
		               |ИЗ
		               |	Таблица КАК Таблица
		               |ГДЕ
		               |	ИСТИНА";
	КонецЕсли;
	
	
	Запрос = Новый Запрос();		
	СписокПолей = Новый СписокЗначений();
	Стр = "ГДЕ ";	
	Если Не СкомпоноватьСтрокуДляЗапроса(Стр, Дерево.ПолучитьЭлементы()[0], Запрос, СписокПолей) Тогда
		Стр = "";
		Запрос.Текст = ТекстЗапроса;
		
	Иначе
		Стр = СтрЗаменить(Стр, "(Объект ", "(Таблица.Объект ");
		Стр = СтрЗаменить(Стр, "(Объект.", "(Таблица.Объект.");
		Стр = СтрЗаменить(Стр, " Объект ", " Таблица.Объект ");
		Стр = СтрЗаменить(Стр, " Объект.", " Таблица.Объект.");
		
		Для Номер = 0 По СписокПолей.Количество() - 1 Цикл
			Элемент = СписокПолей[Номер];
			СинонимТаблицы = "";
			АдресТаблицы = "";
			СинонимПервойТаблицы = "";
			РезультатБезКодаПВХ = "";
			ИмяОбъектаДляСвязи = "";
			ИмяСвойстваДляСвязи = "";
			СвойствоСсылка = Неопределено;
			ИмяРеквизитаДляЗначения = "";
			
			Результат = ПолучитьНаличиеПВХ(Элемент.Значение, СинонимТаблицы, АдресТаблицы, 
					СинонимПервойТаблицы, РезультатБезКодаПВХ, ИмяОбъектаДляСвязи, ИмяСвойстваДляСвязи, СвойствоСсылка,
					ИмяРеквизитаДляЗначения);
			Если Результат <> "" Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " КАК " + СинонимПервойТаблицы + Символы.ПС, " КАК " + СинонимПервойТаблицы + Символы.ПС + 
						"ЛЕВОЕ СОЕДИНЕНИЕ " + АдресТаблицы + " КАК " + СинонимТаблицы + Символы.ПС + 
						"ПО " + РезультатБезКодаПВХ + " = " + СинонимТаблицы + "." + ИмяОбъектаДляСвязи + " И " + 
							СинонимТаблицы + "." + ИмяСвойстваДляСвязи + " = &" + СинонимТаблицы + Символы.ПС);
				Если СинонимТаблицы = "Ч" Тогда
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " И Ч.Сотрудник = &Ч", "");
				КонецЕсли;
				
				Стр = СтрЗаменить(Стр, Результат, СинонимТаблицы + "." + ИмяРеквизитаДляЗначения);			
				Элемент.Значение = СтрЗаменить(Элемент.Значение, Результат, СинонимТаблицы + "." + ИмяРеквизитаДляЗначения);			
				Запрос.УстановитьПараметр(СинонимТаблицы, СвойствоСсылка); 			
				Номер = Номер - 1;
			КонецЕсли;
		КонецЦикла;   
		
		Запрос.Текст = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 6) + Сред(Стр, 5);
		Запрос.Текст = Запрос.Текст + Символы.ПС + "СГРУППИРОВАТЬ ПО" + Символы.ПС + "Таблица.Объект," + "Таблица.ТипЭлемента";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтветственныйСотрудник) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрНакопления.ОбъектыВРаботе.Остатки(, Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Таб1", "РегистрНакопления.ОбъектыВРаботе.Остатки(, Сотрудник = &ОтветственныйСотрудник) КАК Таб1");
	КонецЕсли; 
	Запрос.УстановитьПараметр("ОтветственныйСотрудник", ОтветственныйСотрудник);    
	
	Объект.Объекты.Загрузить(Запрос.Выполнить().Выгрузить());
    ОбъектыСервер.РасширитьТабличнуюЧасть(Объект.Объекты);
КонецПроцедуры

&НаСервере
Функция ПолучитьНаличиеПВХ(Знач Стр, СинонимТаблицы, АдресТаблицы, СинонимПервойТаблицы, РезультатБезКодаПВХ,
		ИмяОбъектаДляСвязи, ИмяСвойстваДляСвязи, СвойствоСсылка, ИмяРеквизитаДляЗначения)
		
	Результат = "";
	РезультатБезКодаПВХ = "";
	
	Стр = СтрЗаменить(Стр, ".", Символы.ПС);
	Для Номер = 1 По СтрЧислоСтрок(Стр) Цикл
		Стр2 = СтрПолучитьСтроку(Стр, Номер);
		
		Если Номер = 1 Тогда
			СинонимПервойТаблицы = Стр2;
		КонецЕсли;
		
		Результат = Результат + Стр2 + ".";
		Если Номер < 3 Тогда
			РезультатБезКодаПВХ = РезультатБезКодаПВХ + Стр2 + ".";
			Продолжить;
		КонецЕсли;
		
		Если Стр2 = "Ч" Тогда
			СвойствоСсылка = Неопределено;
			АдресТаблицы = "РегистрСведений.ОбъектыВРаботеСотрудника";
			ИмяОбъектаДляСвязи = "Объект";
			ИмяСвойстваДляСвязи = "Сотрудник";
			ИмяРеквизитаДляЗначения = "Сотрудник";
			РезультатБезКодаПВХ = Лев(РезультатБезКодаПВХ, СтрДлина(РезультатБезКодаПВХ) - 1);
			СинонимПервойТаблицы = "Таблица";
			СинонимТаблицы = "Ч";
			Возврат Лев(Результат, СтрДлина(Результат) - 1);
		КонецЕсли;
		
		Если СтрДлина(Стр2) = 10 Тогда 
			Попытка
				КодСвойства = СтрЗаменить(Сред(Стр2, 2), "_", " ");
				а = Число(КодСвойства);
			Исключение
				РезультатБезКодаПВХ = РезультатБезКодаПВХ + Стр2 + ".";
				Продолжить;
			КонецПопытки;
			
			СинонимТаблицы = Стр2;
			Если Лев(Стр2, 1) = "Р" Тогда
				СвойствоСсылка = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоКоду(КодСвойства);
				Если СвойствоСсылка.ЭтоДополнительноеСведение Тогда
					АдресТаблицы = "РегистрСведений.ДополнительныеСведения";
					ИмяОбъектаДляСвязи = "Объект";
				Иначе                               
					АдресТаблицы = СтрЗаменить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьИмяПредопределенного(
							СвойствоСсылка.Родитель.Родитель), "_", ".") + ".ДополнительныеРеквизиты";
					ИмяОбъектаДляСвязи = "Ссылка";		
				КонецЕсли; 
				ИмяСвойстваДляСвязи = "Свойство";
				ИмяРеквизитаДляЗначения = "Значение";
				РезультатБезКодаПВХ = Лев(РезультатБезКодаПВХ, СтрДлина(РезультатБезКодаПВХ) - 1);
				Возврат Лев(Результат, СтрДлина(Результат) - 1);
				
			ИначеЕсли Лев(Стр2, 1) = "С" Тогда
				СвойствоСсылка = ПланыВидовХарактеристик.ТипыСотрудников.НайтиПоКоду(КодСвойства);
				АдресТаблицы = "РегистрСведений.ОтветственныеСотрудники";
				ИмяОбъектаДляСвязи = "Объект";
				ИмяСвойстваДляСвязи = "ТипСотрудника";
				ИмяРеквизитаДляЗначения = "Пользователь";
				РезультатБезКодаПВХ = Лев(РезультатБезКодаПВХ, СтрДлина(РезультатБезКодаПВХ) - 1);
				Возврат Лев(Результат, СтрДлина(Результат) - 1);
				
			ИначеЕсли Лев(Стр2, 1) = "В" Тогда
				СвойствоСсылка = ПланыВидовХарактеристик.ВидыСкоринга.НайтиПоКоду(КодСвойства);
				АдресТаблицы = "РегистрСведений.СостоянияПоКатегориямОстатки";
				ИмяОбъектаДляСвязи = "Объект";
				ИмяСвойстваДляСвязи = "Скоринг";
				ИмяРеквизитаДляЗначения = "Категория";
				РезультатБезКодаПВХ = Лев(РезультатБезКодаПВХ, СтрДлина(РезультатБезКодаПВХ) - 1);
				Возврат Лев(Результат, СтрДлина(Результат) - 1);
				
			ИначеЕсли Лев(Стр2, 1) = "З" Тогда
				СвойствоСсылка = ПланыВидовХарактеристик.ТипыЗадолженности.НайтиПоКоду(КодСвойства);
				АдресТаблицы = "РегистрСведений.ЗадолженностьПоОбъектамОстатки";
				ИмяОбъектаДляСвязи = "Объект";
				ИмяСвойстваДляСвязи = "ТипЗадолженности";
				ИмяРеквизитаДляЗначения = "СуммаРегл";
				РезультатБезКодаПВХ = Лев(РезультатБезКодаПВХ, СтрДлина(РезультатБезКодаПВХ) - 1);
				Возврат Лев(Результат, СтрДлина(Результат) - 1);
	
			Иначе
				РезультатБезКодаПВХ = РезультатБезКодаПВХ + Стр2 + ".";
				Продолжить;
			КонецЕсли;
			
		Иначе
			РезультатБезКодаПВХ = РезультатБезКодаПВХ + Стр2 + ".";
		КонецЕсли;	
	КонецЦикла;
	
	Возврат "";
КонецФункции

&НаСервере
Функция СкомпоноватьСтрокуДляЗапроса(Стр, ЭлементДерева, Запрос, СписокПолей)
	Результат = Ложь;
	Если Не ЭлементДерева.Использование Тогда
		Возврат Результат;
	КонецЕсли;
	//Если ЭлементДерева.РасшифровкаПоля = "Объект.Ч" Тогда
	//	Возврат ИСТИНА;
	//КонецЕсли;
	
	
	Если ЭлементДерева.Поле = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
	    Стр = Стр + "(";
	ИначеЕсли ЭлементДерева.Поле = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
		Стр = Стр + "(";
	ИначеЕсли ЭлементДерева.Поле = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
		Стр = Стр + "НЕ (";
		
	Иначе	
		Результат = Истина;
        //
		СтрФорматИдентификатор = Формат(ЭлементДерева.ПолучитьИдентификатор(), "ЧН=; ЧГ=");
		
		Если ЭлементДерева.ВидСравнения = ВидСравнения.ВСписке ИЛИ ЭлементДерева.ВидСравнения = ВидСравнения.НеВСписке Тогда
			Массив = Новый Массив();
			Строки = Список.НайтиСтроки(Новый Структура("Идентификатор", ЭлементДерева.НомерСтроки));
			Для Каждого Эл Из Строки Цикл
				Массив.Добавить(Эл.Значение);
			КонецЦикла;
			Запрос.УстановитьПараметр("Параметр1_" + СтрФорматИдентификатор, Массив);
		Иначе
			Если ЭлементДерева.Значение = Неопределено Тогда
				Запрос.УстановитьПараметр("Параметр1_" + СтрФорматИдентификатор, ЭлементДерева.ТипПоля.ПривестиЗначение(Неопределено));
			Иначе
				Если ЭлементДерева.ВидСтроки = Перечисления.ВидыТипаСтрока.Адрес ИЛИ ЭлементДерева.ВидСтроки = Перечисления.ВидыТипаСтрока.Телефон Тогда
					Запрос.УстановитьПараметр("Параметр1_" + СтрФорматИдентификатор, "%;" + ЭлементДерева.ВидСоставляющей + "=" + ЭлементДерева.Значение + ";%");
				Иначе
					Запрос.УстановитьПараметр("Параметр1_" + СтрФорматИдентификатор, ЭлементДерева.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Запрос.УстановитьПараметр("Параметр0_" + СтрФорматИдентификатор, ЭлементДерева.ТипПоля.ПривестиЗначение(Неопределено));
		Запрос.УстановитьПараметр("Параметр2_" + ЭлементДерева.ПолучитьИдентификатор(), ЭлементДерева.Значение2);
		
		//
		СтрРасшифровкаПоля = Строка(ЭлементДерева.РасшифровкаПоля);
		
		Если СписокПолей.НайтиПоЗначению("Таблица." + СтрРасшифровкаПоля) = Неопределено Тогда
			СписокПолей.Добавить("Таблица." + СтрРасшифровкаПоля);
		КонецЕсли;
		СтрРасшифровкаПоля = "ЕСТЬNULL(" + СтрРасшифровкаПоля + ", &Параметр0_" + СтрФорматИдентификатор + ")";
				
		Если ЭлементДерева.ВидСравнения = ВидСравнения.Больше Тогда
			Стр = Стр + "(" + СтрРасшифровкаПоля + " > &Параметр1_" + СтрФорматИдентификатор + ")";
		ИначеЕсли ЭлементДерева.ВидСравнения = ВидСравнения.БольшеИлиРавно Тогда
			Стр = Стр + "(" + СтрРасшифровкаПоля + " >= &Параметр1_" + СтрФорматИдентификатор + ")";
		ИначеЕсли ЭлементДерева.ВидСравнения = ВидСравнения.ВСписке Тогда	
			Стр = Стр + "(" + СтрРасшифровкаПоля + " В (&Параметр1_" + СтрФорматИдентификатор + "))";
		ИначеЕсли ЭлементДерева.ВидСравнения = ВидСравнения.Интервал Тогда	
			Стр = Стр + "(" + СтрРасшифровкаПоля + " > &Параметр1_" + СтрФорматИдентификатор + " И " + 
					СтрРасшифровкаПоля + " < &Параметр2_" + СтрФорматИдентификатор + ")";
		ИначеЕсли ЭлементДерева.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда	
			Стр = Стр + "(" + СтрРасшифровкаПоля + " >= &Параметр1_" + СтрФорматИдентификатор + " И " + 
					СтрРасшифровкаПоля + " <= &Параметр2_" + СтрФорматИдентификатор + ")";
		ИначеЕсли ЭлементДерева.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало Тогда
			Стр = Стр + "(" + СтрРасшифровкаПоля + " >= &Параметр1_" + СтрФорматИдентификатор + " И " + 
					СтрРасшифровкаПоля + " < &Параметр2_" + СтрФорматИдентификатор + ")";
		ИначеЕсли ЭлементДерева.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
			Стр = Стр + "(" + СтрРасшифровкаПоля + " > &Параметр1_" + СтрФорматИдентификатор + " И " + 
					СтрРасшифровкаПоля + " <= &Параметр2_" + СтрФорматИдентификатор + ")";
		ИначеЕсли ЭлементДерева.ВидСравнения = ВидСравнения.Меньше Тогда
			Стр = Стр + "(" + СтрРасшифровкаПоля + " < &Параметр1_" + СтрФорматИдентификатор + ")";
		ИначеЕсли ЭлементДерева.ВидСравнения = ВидСравнения.МеньшеИлиРавно Тогда
			Стр = Стр + "(" + СтрРасшифровкаПоля + " <= &Параметр1_" + СтрФорматИдентификатор + ")";
		ИначеЕсли ЭлементДерева.ВидСравнения = ВидСравнения.НеВСписке Тогда	
			Стр = Стр + "НЕ (" + СтрРасшифровкаПоля + " В (&Параметр1_" + СтрФорматИдентификатор + "))";
		ИначеЕсли ЭлементДерева.ВидСравнения = ВидСравнения.НеРавно Тогда	
			Стр = Стр + "(" + СтрРасшифровкаПоля + " <> &Параметр1_" + СтрФорматИдентификатор + ")";
		ИначеЕсли ЭлементДерева.ВидСравнения = ВидСравнения.НеСодержит Тогда
			Стр = Стр + "НЕ (" + СтрРасшифровкаПоля + " ПОДОБНО &Параметр1_" + СтрФорматИдентификатор + ")";
		ИначеЕсли ЭлементДерева.ВидСравнения = ВидСравнения.Равно Тогда
			Если ЭлементДерева.ВидСтроки = Перечисления.ВидыТипаСтрока.Адрес ИЛИ ЭлементДерева.ВидСтроки = Перечисления.ВидыТипаСтрока.Телефон Тогда
				Стр = Стр + "(" + СтрРасшифровкаПоля + " ПОДОБНО &Параметр1_" + СтрФорматИдентификатор + ")";
			Иначе
				Стр = Стр + "(" + СтрРасшифровкаПоля + " = &Параметр1_" + СтрФорматИдентификатор + ")";
			КонецЕсли;
		ИначеЕсли ЭлементДерева.ВидСравнения = ВидСравнения.Содержит Тогда
			Стр = Стр + "(" + СтрРасшифровкаПоля + " ПОДОБНО &Параметр1_" + СтрФорматИдентификатор + ")";
		Иначе
			Стр = Стр + " ЛОЖЬ ";
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Элемент Из ЭлементДерева.ПолучитьЭлементы() Цикл
		Результат2 = СкомпоноватьСтрокуДляЗапроса(Стр, Элемент, Запрос, СписокПолей);
		Результат = Результат2 ИЛИ Результат;
		
		Если Результат2 Тогда
			Если ЭлементДерева.Поле = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
			    Стр = Стр + " И   ";
			ИначеЕсли ЭлементДерева.Поле = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
				Стр = Стр + " ИЛИ ";
			ИначеЕсли ЭлементДерева.Поле = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
				Стр = Стр + " И   ";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементДерева.ПолучитьЭлементы().Количество() > 0 Тогда
		Стр = Лев(Стр, СтрДлина(Стр) - 5);
	КонецЕсли;
	Если ТипЗнч(ЭлементДерева.Поле) = Тип("ТипГруппыЭлементовОтбораКомпоновкиДанных") Тогда
		Стр	= Стр  + ")";
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура Добавить(Команда)
	ПомеченныеСтроки = Объект.Объекты.НайтиСтроки(Новый Структура("Пометка", Истина));
		
	Если ПомеченныеСтроки.Количество() = 0 Тогда
		Сообщить("Ничего не отмечено!");
	Иначе			
		Для Каждого Элемент Из ПомеченныеСтроки Цикл
			Нов = ВладелецФормы.Объект.Объекты.Добавить();
			Нов.Объект = Элемент.Объект;	
			Попытка
				Нов.Контрагент = Элемент.Объект;
				Нов.ДоговорКонтрагента = Элемент.Объект;	
				Нов.УслугаПоДоговору = Элемент.Объект;
				Нов.ДолговоеОбязательство = Элемент.Объект;
				Нов.ИсполнительныйДокумент = Элемент.Объект;
			Исключение
			КонецПопытки;
		КонецЦикла;
		ЭтаФорма.Закрыть();
	КонецЕсли;  	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	Если Объект.НастройкаПодбор <> ПредопределенноеЗначение("Справочник.НастройкиПодборДО.ПустаяСсылка") Тогда
		
		Массив = Новый Массив();
		ПараметрыЗапроса = ПолучитьПараметрыЗапроса();
		ДобавитьЭлементВМассив(Массив, Дерево.ПолучитьЭлементы());
		ПерезаписатьЭлементПодбора(Объект.НастройкаПодбор, Массив);		
		ЗагрузитьСписокПараметров(Объект.НастройкаПодбор);		
	Иначе
		Массив = Новый Массив();
		ПараметрыЗапроса = ПолучитьПараметрыЗапроса();
		ДобавитьЭлементВМассив(Массив, Дерево.ПолучитьЭлементы());
		Форма = ПолучитьФорму("Справочник.НастройкиПодборДО.Форма.ФормаЭлемента", Новый Структура("Настройка", Массив), 
		ЭтаФорма);
		
		Форма.Объект.НомерСтроки = Объект.НомерСтроки;
		Форма.Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначениеНастроекОтбора.ПодборДО");
		Форма.Объект.ТекстЗапроса = Объект.ТекстЗапроса;
		//	Форма.Объект.ПараметрыЗапроса.Загрузить(ПолучитьСписокПараметров());// = Новый ХранилищеЗначения(ПараметрыЗапроса, Новый СжатиеДанных(5));
		Для Каждого Элемент Из Список Цикл
			Нов = Форма.Объект.Список.Добавить();
			Нов.Идентификатор = Элемент.Идентификатор;
			Нов.Значение = Элемент.Значение;
		КонецЦикла;
		
		Форма.ОткрытьМодально();	
		Если Не Форма.Объект.Ссылка.Пустая() Тогда
			Объект.НастройкаПодбор = Форма.Объект.Ссылка;
			ЗагрузитьСписокПараметров(Объект.НастройкаПодбор);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСписокПараметров(Подбор)
	ПодборОбъект = Подбор.ПолучитьОбъект();
	ПодборОбъект.ПараметрыЗапроса.Очистить();
	ПодборОбъект.ПараметрыЗапроса.Загрузить(Объект.ПараметрыЗапроса.Выгрузить());
	ПодборОбъект.Записать();
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыЗапроса()
	Если Объект.ТипИсточника = Тип("ДокументСсылка.ПринятиеВРаботуОрганизации") Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		               |	СправочникСписок.Ссылка КАК Объект,
		               |	ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.Контрагенты) КАК ТипЭлемента
		               |ПОМЕСТИТЬ Таблица
		               |ИЗ
		               |	Справочник.Контрагенты КАК СправочникСписок
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	СправочникСписок.Ссылка,
		               |	ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.ДоговорыКонтрагентов)
		               |ИЗ
		               |	Справочник.ДоговорыКонтрагентов КАК СправочникСписок
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	СправочникСписок.Ссылка,
		               |	ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.УслугиПоДоговорам)
		               |ИЗ
		               |	Справочник.УслугиПоДоговору КАК СправочникСписок
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	СправочникСписок.Ссылка,
		               |	ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.ДолговыеОбязательства)
		               |ИЗ
		               |	Справочник.ДолговыеОбязательства КАК СправочникСписок
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	СправочникСписок.Ссылка,
		               |	ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.ИсполнительныеДокументы)
		               |ИЗ
		               |	Справочник.ИсполнительныеДокументы КАК СправочникСписок
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	СправочникСписок.Ссылка,
		               |	ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.Залоги)
		               |ИЗ
		               |	Справочник.Залоги КАК СправочникСписок
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Таблица.Объект,
		               |	Таблица.ТипЭлемента,
		               |	ИСТИНА КАК Пометка
		               |ИЗ
		               |	Таблица КАК Таблица
		               |ГДЕ
		               |	ИСТИНА";
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ
		               |	Таб1.Объект,
		               |	ВЫБОР ТИПЗНАЧЕНИЯ(Таб1.Объект)
		               |		КОГДА ТИП(Справочник.Контрагенты)
		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.Контрагенты)
		               |		КОГДА ТИП(Справочник.ДоговорыКонтрагентов)
		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.ДоговорыКонтрагентов)
		               |		КОГДА ТИП(Справочник.УслугиПоДоговору)
		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.УслугиПоДоговорам)
		               |		КОГДА ТИП(Справочник.ДолговыеОбязательства)
		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.ДолговыеОбязательства)
		               |		КОГДА ТИП(Справочник.ИсполнительныеДокументы)
		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.ИсполнительныеДокументы)
		               |		КОГДА ТИП(Справочник.Залоги)
		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.Залоги)
		               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.ПустаяСсылка)
		               |	КОНЕЦ КАК ТипЭлемента
		               |ПОМЕСТИТЬ Таблица
		               |ИЗ
		               |	РегистрНакопления.ОбъектыВРаботе.Остатки(, Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Таб1
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Таблица.Объект,
		               |	Таблица.ТипЭлемента,
		               |	ИСТИНА КАК Пометка
		               |ИЗ
		               |	Таблица КАК Таблица
		               |ГДЕ
		               |	ИСТИНА";
	КонецЕсли;
	
	
	Запрос = Новый Запрос();		
	СписокПолей = Новый СписокЗначений();
	Стр = "ГДЕ ";	
	Если Не СкомпоноватьСтрокуДляЗапроса(Стр, Дерево.ПолучитьЭлементы()[0], Запрос, СписокПолей) Тогда
		Стр = "";
		Запрос.Текст = ТекстЗапроса;
		
	Иначе
		Стр = СтрЗаменить(Стр, "(Объект ", "(Таблица.Объект ");
		Стр = СтрЗаменить(Стр, "(Объект.", "(Таблица.Объект.");
		Стр = СтрЗаменить(Стр, " Объект ", " Таблица.Объект ");
		Стр = СтрЗаменить(Стр, " Объект.", " Таблица.Объект.");
		
		Для Номер = 0 По СписокПолей.Количество() - 1 Цикл
			Элемент = СписокПолей[Номер];
			СинонимТаблицы = "";
			АдресТаблицы = "";
			СинонимПервойТаблицы = "";
			РезультатБезКодаПВХ = "";
			ИмяОбъектаДляСвязи = "";
			ИмяСвойстваДляСвязи = "";
			СвойствоСсылка = Неопределено;
			ИмяРеквизитаДляЗначения = "";
			
			Результат = ПолучитьНаличиеПВХ(Элемент.Значение, СинонимТаблицы, АдресТаблицы, 
			СинонимПервойТаблицы, РезультатБезКодаПВХ, ИмяОбъектаДляСвязи, ИмяСвойстваДляСвязи, СвойствоСсылка,
			ИмяРеквизитаДляЗначения);
			//Если Результат <> "" Тогда
			//	Если СвойствоСсылка = Неопределено Тогда
			//		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " КАК " + СинонимПервойТаблицы + Символы.ПС, " КАК " + СинонимПервойТаблицы + Символы.ПС + 
			//		"ЛЕВОЕ СОЕДИНЕНИЕ " + АдресТаблицы + " КАК " + СинонимТаблицы + Символы.ПС + 
			//		"ПО " + РезультатБезКодаПВХ + " = " + СинонимТаблицы + "." + ИмяОбъектаДляСвязи + Символы.ПС);
			//		
			//		Стр = СтрЗаменить(Стр, Результат, СинонимТаблицы + "." + ИмяРеквизитаДляЗначения);			
			//		Элемент.Значение = СтрЗаменить(Элемент.Значение, Результат, СинонимТаблицы + "." + ИмяРеквизитаДляЗначения);						
			//		Номер = Номер - 1;
			//		
			//	Иначе					
			//		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " КАК " + СинонимПервойТаблицы + Символы.ПС, " КАК " + СинонимПервойТаблицы + Символы.ПС + 
			//		"ЛЕВОЕ СОЕДИНЕНИЕ " + АдресТаблицы + " КАК " + СинонимТаблицы + Символы.ПС + 
			//		"ПО " + РезультатБезКодаПВХ + " = " + СинонимТаблицы + "." + ИмяОбъектаДляСвязи + " И " + 
			//		СинонимТаблицы + "." + ИмяСвойстваДляСвязи + " = &" + СинонимТаблицы + Символы.ПС);
			//		
			//		Стр = СтрЗаменить(Стр, Результат, СинонимТаблицы + "." + ИмяРеквизитаДляЗначения);			
			//		Элемент.Значение = СтрЗаменить(Элемент.Значение, Результат, СинонимТаблицы + "." + ИмяРеквизитаДляЗначения);			
			//		Запрос.УстановитьПараметр(СинонимТаблицы, СвойствоСсылка); 			
			//		Номер = Номер - 1;
			//	КонецЕсли;
			//КонецЕсли;
			Если Результат <> "" Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " КАК " + СинонимПервойТаблицы + Символы.ПС, " КАК " + СинонимПервойТаблицы + Символы.ПС + 
						"ЛЕВОЕ СОЕДИНЕНИЕ " + АдресТаблицы + " КАК " + СинонимТаблицы + Символы.ПС + 
						"ПО " + РезультатБезКодаПВХ + " = " + СинонимТаблицы + "." + ИмяОбъектаДляСвязи + " И " + 
							СинонимТаблицы + "." + ИмяСвойстваДляСвязи + " = &" + СинонимТаблицы + Символы.ПС);
				Если СинонимТаблицы = "Ч" Тогда
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " И Ч.Сотрудник = &Ч", "");
				КонецЕсли;
				
				Стр = СтрЗаменить(Стр, Результат, СинонимТаблицы + "." + ИмяРеквизитаДляЗначения);			
				Элемент.Значение = СтрЗаменить(Элемент.Значение, Результат, СинонимТаблицы + "." + ИмяРеквизитаДляЗначения);			
				Запрос.УстановитьПараметр(СинонимТаблицы, СвойствоСсылка); 			
				Номер = Номер - 1;
			КонецЕсли;			
		КонецЦикла;   
		
		Запрос.Текст = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 6) + Сред(Стр, 5);
		Запрос.Текст = Запрос.Текст + Символы.ПС + "СГРУППИРОВАТЬ ПО" + Символы.ПС + "Таблица.Объект," + "Таблица.ТипЭлемента";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтветственныйСотрудник) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрНакопления.ОбъектыВРаботе.Остатки(, Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Таб1", "РегистрНакопления.ОбъектыВРаботе.Остатки(, Сотрудник = &ОтветственныйСотрудник) КАК Таб1");
	КонецЕсли; 
	Запрос.УстановитьПараметр("ОтветственныйСотрудник", ОтветственныйСотрудник);
	
	Объект.ТекстЗапроса = Запрос.Текст;
	//Возврат Запрос.Параметры;
	Объект.ПараметрыЗапроса.Очистить();
	Для Каждого Элемент ИЗ Запрос.Параметры Цикл
		Строка = Объект.ПараметрыЗапроса.Добавить();
		Строка.Ключ = Элемент.Ключ;
		Строка.Значение = Элемент.Значение;
	КонецЦикла;
КонецФункции

&НаКлиенте
Процедура ДобавитьЭлементВМассив(Массив, ЭлементыДерева)
	Для Каждого Элемент Из ЭлементыДерева Цикл	   
		Если ТипЗнч(Элемент.Поле) = Тип("ПолеКомпоновкиДанных") Тогда 
			Стр = Новый Структура("ВидСравнения, Использование, Поле, Значение, Значение2, РасшифровкаПоля, ТипПоля", 
					Элемент.ВидСравнения, Элемент.Использование, Элемент.Поле, Элемент.Значение, Элемент.Значение2,
					Элемент.РасшифровкаПоля, Элемент.ТипПоля);
		ИначеЕсли ТипЗнч(Элемент.Поле) = Тип("ТипГруппыЭлементовОтбораКомпоновкиДанных") Тогда
			Стр = Новый Структура("Использование, Поле, Элементы", Элемент.Использование, Элемент.Поле, Новый Массив());			
			ДобавитьЭлементВМассив(Стр.Элементы, Элемент.ПолучитьЭлементы());					
		КонецЕсли;
		Массив.Добавить(Стр);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПодборПриИзменении(Элемент)
	Если Не Объект.НастройкаПодбор.Пустая() Тогда
		Массив = ОбъектыСервер.РазыменоватьСсылку(Объект.НастройкаПодбор, "Настройка.Получить()");
		Если Массив <> Неопределено Тогда
			ЗаполнитьРеквизитСписок(Объект.НастройкаПодбор);
			
			Дерево.ПолучитьЭлементы().Очистить();
		    ДобавитьЭлементВОтбор(Массив, Дерево.ПолучитьЭлементы());						
			Элементы.Дерево.Развернуть(Дерево.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Истина);
		КонецЕсли;
	Иначе
		//Список.Очистить();
		//Дерево.ПолучитьЭлементы().Очистить();
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьРеквизитСписок(НастройкаСсылка)
	Список.Загрузить(НастройкаСсылка.Список.Выгрузить());
	Объект.НомерСтроки = НастройкаСсылка.НомерСтроки;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭлементВОтбор(Массив, ЭлементыДерева)
	Для Каждого Элемент Из Массив Цикл
		Если ТипЗнч(Элемент.Поле) = Тип("ПолеКомпоновкиДанных") Тогда
			Нов = ЭлементыДерева.Добавить();
			Нов.ВидСравнения    = Элемент.ВидСравнения;
			Нов.Значение        = Элемент.Значение;
			Нов.Значение2       = Элемент.Значение2;
			Нов.Использование   = Элемент.Использование; 			
			Нов.Поле            = Элемент.Поле;
			Нов.РасшифровкаПоля = Элемент.РасшифровкаПоля; 
			Нов.ТипПоля         = Элемент.ТипПоля;
					
		ИначеЕсли ТипЗнч(Элемент.Поле) = Тип("ТипГруппыЭлементовОтбораКомпоновкиДанных") Тогда
			Нов = ЭлементыДерева.Добавить(); 
			Нов.Использование = Элемент.Использование; 
			Нов.Поле          = Элемент.Поле;
			ДобавитьЭлементВОтбор(Элемент.Элементы, Нов.ПолучитьЭлементы());			
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	Для Каждого Элемент Из Объект.Объекты Цикл
		Элемент.Пометка = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	Для Каждого Элемент Из Объект.Объекты Цикл
		Элемент.Пометка = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПолеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ТипЗнч(Элементы.Дерево.ТекущиеДанные.Поле) = Тип("ПолеКомпоновкиДанных") Тогда
		СтандартнаяОбработка = Ложь;		
		Форма = ПолучитьФорму("Обработка.ПодборДО.Форма.ФормаВыбора",, ЭтаФорма);
		
		
		//Форма.Список.Добавить(Новый ОписаниеТипов("СправочникСсылка.Контрагенты,
		//		| СправочникСсылка.ДолговыеОбязательства"), "Объект");
				
		Если ОбъектыСервер.ПолучитьЗначениеКонстанты("УчетПоДО") Тогда
			Форма.Список.Добавить(Новый ОписаниеТипов("СправочникСсылка.ДолговыеОбязательства"), "Объект");
		Иначе
			Форма.Список.Добавить(Новый ОписаниеТипов("СправочникСсылка.Контрагенты"), "Объект");
		КонецЕсли;

		Форма.Список.Добавить(Новый ОписаниеТипов("ПеречислениеСсылка.ОбъектыУчета"), "ТипЭлемента");		
		Форма.РезультатДляОтображения = Строка(Элементы.Дерево.ТекущиеДанные.Поле);
		Форма.РезультатДляОтображения = СтрЗаменить(Форма.РезультатДляОтображения, "[", "");
		Форма.РезультатДляОтображения = СтрЗаменить(Форма.РезультатДляОтображения, "]", "");
		Форма.РезультатДляВыполнения = Элементы.Дерево.ТекущиеДанные.РасшифровкаПоля;
				
		Если Форма.ОткрытьМодально() = Истина Тогда
			Элементы.Дерево.ТекущиеДанные.Поле = Новый ПолеКомпоновкиДанных(Форма.РезультатДляОтображения);// Форма.РезультатДляОтображения;
			Элементы.Дерево.ТекущиеДанные.РасшифровкаПоля = Форма.РезультатДляВыполнения;
			СтарыйТип = Элементы.Дерево.ТекущиеДанные.ТипПоля;
			Элементы.Дерево.ТекущиеДанные.ТипПоля = Форма.РезультатТип;
			Элементы.Дерево.ТекущиеДанные.ВидСтроки = Форма.РезультатВидСтроки;
			Элементы.Дерево.ТекущиеДанные.ВидСоставляющей = Форма.РезультатВидСоставляющей;

			Элементы.ДеревоЗначение.ОграничениеТипа = Элементы.Дерево.ТекущиеДанные.ТипПоля;
			Элементы.ДеревоЗначение2.ОграничениеТипа = Элементы.Дерево.ТекущиеДанные.ТипПоля;
			Элементы.Дерево.ТекущиеДанные.ВидСтроки = Форма.РезультатВидСтроки;
			Если СтарыйТип <> Элементы.Дерево.ТекущиеДанные.ТипПоля Тогда
				Элементы.Дерево.ТекущиеДанные.Значение  = Неопределено;
				Элементы.Дерево.ТекущиеДанные.Значение2 = Неопределено;
			КонецЕсли;
			Если (Элементы.Дерево.ТекущиеДанные.ВидСравнения = ВидСравнения.Интервал) ИЛИ
					(Элементы.Дерево.ТекущиеДанные.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы) ИЛИ
					(Элементы.Дерево.ТекущиеДанные.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало) ИЛИ
					(Элементы.Дерево.ТекущиеДанные.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание) Тогда
				Элементы.ДеревоЗначение2.ТолькоПросмотр = Истина;
			Иначе
				Элементы.Дерево.ТекущиеДанные.Значение2 = Неопределено;
				Элементы.ДеревоЗначение2.ТолькоПросмотр = Ложь;
			КонецЕсли;	
			
			//
			ДеревоПриИзмененииАктивности();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Нов = Дерево.ПолучитьЭлементы().Добавить();
	Нов.Использование = Истина;
	Нов.Поле = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Нов.ВидСравнения = "";
	Нов.НомерСтроки = 1;
	Объект.НомерСтроки = 2;
	
	Элементы.ДеревоВидСравнения.ОграничениеТипа = Новый ОписаниеТипов("ВидСравнения");
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	Номер = Элементы.Дерево.ТекущаяСтрока;
	Если Копирование Тогда			
		ТекЭлемент = Дерево.НайтиПоИдентификатору(Номер);
		ТекРодитель = ТекЭлемент.ПолучитьРодителя();
		Если ТекРодитель = Неопределено Тогда
			ТекРодитель = Дерево.ПолучитьЭлементы()[0];
		КонецЕсли;
		
		Нов = ТекРодитель.ПолучитьЭлементы().Добавить();		
		Нов.Поле            = ТекЭлемент.Поле;
		Нов.ВидСравнения    = ТекЭлемент.ВидСравнения;
		Нов.Значение        = ТекЭлемент.Значение;
		Нов.Значение2       = ТекЭлемент.Значение2;
		Нов.РасшифровкаПоля = ТекЭлемент.РасшифровкаПоля;
		Нов.Использование   = ТекЭлемент.Использование;
		Нов.ТипПоля         = ТекЭлемент.ТипПоля;
		Нов.НомерСтроки     = Объект.НомерСтроки;
		Объект.НомерСтроки = Объект.НомерСтроки + 1;
		
		Если ТекЭлемент.ВидСравнения = ВидСравнения.ВСписке ИЛИ ТекЭлемент.ВидСравнения = ВидСравнения.НеВСписке Тогда
			КолВоЭл = Список.Количество();
			Для НомерЭл = 0 По КолВоЭл Цикл
				Если Список[НомерЭл].Идентификатор = ТекЭлемент.НомерСтроки Тогда
					НовЭл = Список.Добавить();
					НовЭл.Идентификатор = Нов.НомерСтроки;
					НовЭл.Значение = Список[НомерЭл].Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		Если Номер <> Неопределено Тогда 
			Если ТипЗнч(Дерево.НайтиПоИдентификатору(Номер).Поле) = Тип("ТипГруппыЭлементовОтбораКомпоновкиДанных") Тогда
				Нов = Дерево.НайтиПоИдентификатору(Номер).ПолучитьЭлементы().Добавить();
			Иначе	
				Нов = Дерево.НайтиПоИдентификатору(Номер).ПолучитьРодителя().ПолучитьЭлементы().Добавить();
			КонецЕсли;
		Иначе
			нов = Дерево.ПолучитьЭлементы().Добавить();
		КонецЕсли;
		Нов.Использование = Истина;
		Нов.Поле = Новый ПолеКомпоновкиДанных("");
		Нов.ВидСравнения = ВидСравнения.Равно;
		Нов.НомерСтроки = Объект.НомерСтроки;
		Объект.НомерСтроки = Объект.НомерСтроки + 1;				
	КонецЕсли;
	Если Номер <> Неопределено Тогда
		Элементы.Дерево.Развернуть(Номер, Ложь);
	КонецЕсли;
	Элементы.Дерево.ТекущаяСтрока = Нов.ПолучитьИдентификатор();
	Элементы.Дерево.ТекущийЭлемент = Элементы.ДеревоПоле;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДобавитьГруппу(Команда)
	Номер = Элементы.Дерево.ТекущаяСтрока;
	Если Номер <> Неопределено Тогда
		Если ТипЗнч(Дерево.НайтиПоИдентификатору(Номер).Поле) = Тип("ТипГруппыЭлементовОтбораКомпоновкиДанных") Тогда
		    Нов = Дерево.НайтиПоИдентификатору(Номер).ПолучитьЭлементы().Добавить();
		Иначе	
			Нов = Дерево.НайтиПоИдентификатору(Номер).ПолучитьРодителя().ПолучитьЭлементы().Добавить();
		КонецЕсли;	
		Нов.Использование = Истина;
		Нов.Поле = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		Нов.ВидСравнения = "";
		Нов.НомерСтроки = Объект.НомерСтроки;
		Объект.НомерСтроки = Объект.НомерСтроки + 1;
			 		
		Элементы.Дерево.Развернуть(Номер, Ложь);
		Элементы.Дерево.ТекущаяСтрока = Нов.ПолучитьИдентификатор();
		Элементы.Дерево.ТекущийЭлемент = Элементы.ДеревоПоле;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриАктивизацииСтроки(Элемент)
	ДеревоПриИзмененииАктивности();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВидСравненияПриИзменении(Элемент)
    ДеревоПриИзмененииАктивности();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриИзмененииАктивности()
	Если Элементы.Дерево.ТекущиеДанные <> Неопределено Тогда
		Если (Элементы.Дерево.ТекущиеДанные.ВидСравнения = ВидСравнения.ВСписке) ИЛИ
			(Элементы.Дерево.ТекущиеДанные.ВидСравнения = ВидСравнения.НеВСписке) Тогда
			Элементы.ДеревоЗначение.ОграничениеТипа = Новый ОписаниеТипов("Строка");
			Элементы.ДеревоЗначение.КнопкаВыбора = Истина;
			Элементы.ДеревоЗначение.РедактированиеТекста = Ложь;
		Иначе
			Элементы.ДеревоЗначение.ОграничениеТипа = Элементы.Дерево.ТекущиеДанные.ТипПоля;
			Элементы.ДеревоЗначение.КнопкаВыбора = Неопределено;
			Элементы.ДеревоЗначение.РедактированиеТекста = Истина;
		КонецЕсли;
		
		Элементы.ДеревоЗначение2.ОграничениеТипа = Элементы.Дерево.ТекущиеДанные.ТипПоля;
		
		
		Элементы.ДеревоВидСравнения.ТолькоПросмотр = 
		(ТипЗнч(Элементы.Дерево.ТекущиеДанные.Поле) = Тип("ТипГруппыЭлементовОтбораКомпоновкиДанных"));
		Элементы.ДеревоЗначение.ТолькоПросмотр = 
		(ТипЗнч(Элементы.Дерево.ТекущиеДанные.Поле) = Тип("ТипГруппыЭлементовОтбораКомпоновкиДанных"));;
		Элементы.ДеревоЗначение2.ТолькоПросмотр = Не ((Элементы.Дерево.ТекущиеДанные.ВидСравнения = ВидСравнения.Интервал) ИЛИ
		(Элементы.Дерево.ТекущиеДанные.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы) ИЛИ
		(Элементы.Дерево.ТекущиеДанные.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало) ИЛИ
		(Элементы.Дерево.ТекущиеДанные.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	
	Если (ТекущиеДанные.ВидСравнения = ВидСравнения.ВСписке) ИЛИ
           	(ТекущиеДанные.ВидСравнения = ВидСравнения.НеВСписке) Тогда
			
		Массив = Новый Массив();		
		Для Каждого Эл Из Список Цикл
			Если Эл.Идентификатор = ТекущиеДанные.НомерСтроки Тогда
				Массив.Добавить(Эл.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Форма = ПолучитьФорму("Обработка.ПодборДО.Форма.ФормаНабора", 
				Новый Структура("ИмяТипа, Таблица", ТекущиеДанные.ТипПоля, Массив), ЭтаФорма);
			
		Результат = Форма.ОткрытьМодально();
		Если Результат <> Неопределено Тогда
			//удаление старых значений
			Для Номер = 0 По Список.Количество() - 1 Цикл 
				Если Список[Номер].Идентификатор = ТекущиеДанные.НомерСтроки Тогда
				    Список.Удалить(Список[Номер].ПолучитьИдентификатор());
					Номер = Номер - 1;
				КонецЕсли;
			КонецЦикла;
			
			//добавление новых значений
			Стр = "";
			Для Каждого Эл Из Результат Цикл
				Нов = Список.Добавить();
				Нов.Идентификатор = ТекущиеДанные.НомерСтроки;
				Нов.Значение = Эл;
				Стр = Стр + ", " + Строка(Эл);
			КонецЦикла;
			ТекущиеДанные.Значение = Сред(Стр, 3);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастрйкиКак(Команда)
	//Результат = ОткрытьФормуМодально("Справочник.НастройкиПодборДО.ФормаВыбора"); 
	//Если Результат <> Неопределено Тогда
	//	Массив = Новый Массив();
	//	ПараметрыЗапроса = ПолучитьПараметрыЗапроса();
	//	ДобавитьЭлементВМассив(Массив, Дерево.ПолучитьЭлементы());
	//	ПерезаписатьЭлементПодбора(Результат, Массив);		
	//	Объект.НастройкаПодбор = Результат;
	//	ЗагрузитьСписокПараметров(Объект.НастройкаПодбор);
	//КонецЕсли;
	
			Массив = Новый Массив();
		ПараметрыЗапроса = ПолучитьПараметрыЗапроса();
		ДобавитьЭлементВМассив(Массив, Дерево.ПолучитьЭлементы());
		Форма = ПолучитьФорму("Справочник.НастройкиПодборДО.Форма.ФормаЭлемента", Новый Структура("Настройка", Массив), 
		ЭтаФорма);
		
		Форма.Объект.НомерСтроки = Объект.НомерСтроки;
		Форма.Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначениеНастроекОтбора.ПодборДО");
		Форма.Объект.ТекстЗапроса = Объект.ТекстЗапроса;
		//	Форма.Объект.ПараметрыЗапроса.Загрузить(ПолучитьСписокПараметров());// = Новый ХранилищеЗначения(ПараметрыЗапроса, Новый СжатиеДанных(5));
		Для Каждого Элемент Из Список Цикл
			Нов = Форма.Объект.Список.Добавить();
			Нов.Идентификатор = Элемент.Идентификатор;
			Нов.Значение = Элемент.Значение;
		КонецЦикла;
		
		Форма.ОткрытьМодально();	
		Если Не Форма.Объект.Ссылка.Пустая() Тогда
			Объект.НастройкаПодбор = Форма.Объект.Ссылка;
			ЗагрузитьСписокПараметров(Объект.НастройкаПодбор);
		КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПерезаписатьЭлементПодбора(ПодборСсылка, Массив)
	ПодборОбъект = ПодборСсылка.ПолучитьОбъект();
	ПодборОбъект.ТекстЗапроса = Объект.ТекстЗапроса;
	ПодборОбъект.Назначение = Перечисления.НазначениеНастроекОтбора.ПодборДО;
	ПодборОбъект.Настройка = Новый ХранилищеЗначения(Массив);
	Для Каждого Элемент Из Список Цикл
		Нов = ПодборОбъект.Список.Добавить();
		Нов.Идентификатор = Элемент.Идентификатор;
		Нов.Значение = Элемент.Значение;
	КонецЦикла;
	ПодборОбъект.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ВладелецФормы = Неопределено или ВладелецФормы.ИмяФормы = "Справочник.НастройкиПодборДО.Форма.ФормаВыбора" Тогда
		Элементы.Добавить.Видимость = Ложь;
	КонецЕсли;
	
	Если ВладелецФормы.ИмяФормы = "Справочник.НастройкиПодборДО.Форма.ФормаВыбора" Тогда
		НастройкаПодборПриИзменении(Неопределено);
	КонецЕсли;	
КонецПроцедуры

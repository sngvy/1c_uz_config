// Переменные этой формы
Перем ДеревоНастроек;
Перем ТекущийУчетПоВсем;
//////Перем ТекущаяОрганизация;
//////Перем ТекущееПодразделение;
//////Перем ТекущийОтдел;

//Переменные для формы ИБ (информационной базы)
Перем мОбработкаТайпингаВидаКИ;
Перем мТекстТайпингаВидаКИ;
Перем мПоследнееЗначениеЭлементаТайпингаВидаКИ;
Перем мОрганизация;
Перем мСтруктураРедактированияКИ;

// Хранит список видов настроек, для которых разрешен выбор группы
Перем мСписокНастроекВыбораГруппы;
Перем мСтароеИмяПользователя; //1    
Перем мНаличиеПраваАдминистрирования;
Перем мЭтоНовыйЭлементСправочника;
Перем мКопияНабораКонтактнойИнформации;

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	Если Объект.ИдентификаторПользователяИБ <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
		Элементы.КраткоеИмя.ТолькоПросмотр = Истина;
	Иначе
		Элементы.КраткоеИмя.ТолькоПросмотр = Ложь;
	КонецЕсли;		
	ЗаполнитьДерево(); 	 
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Код = СокрЛП(Объект.Код); //Поидейке она должна быть пустой изначально, т.к. стоит Переменная длина, но она из пробелов
	КонецЕсли;	
		
	ЗаполнитьДерево();  
	ЗаполнениеПеременныхПриОткрытииФормы(); 
КонецПроцедуры

Процедура ЗаполнитьДерево()
	
	ДеревоНастроек = РеквизитФормыВЗначение("Настройки");
	
	ДеревоНастроек.Строки.Очистить();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Объект.Ссылка);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Настройки.Родитель,
	|	Настройки.Ссылка,
	|	Настройки.ЭтоГруппа КАК ЭтоГруппа,
	|	ЗначениеНастроек.Значение
	|ИЗ
	|	ПланВидовХарактеристик.НастройкиПользователей КАК Настройки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователей КАК ЗначениеНастроек
	|		ПО ЗначениеНастроек.Настройка = Настройки.Ссылка И (ЗначениеНастроек.Пользователь = &Пользователь)
	|
	|ГДЕ
	|	(Настройки.ПометкаУдаления = ЛОЖЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоГруппа ИЕРАРХИЯ,
	|	Настройки.Наименование";
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		Если Не Выборка.Родитель.Пустая() Тогда

			СтрокаГруппы = ДеревоНастроек.Строки.Найти(Выборка.Родитель, "Настройка", Истина);

			Если СтрокаГруппы=Неопределено Тогда
				СтрокаГруппы = ДеревоНастроек.Строки.Добавить();
				СтрокаГруппы.Настройка = Выборка.Родитель;
				СтрокаГруппы.ЭтоГруппа = Выборка.ЭтоГруппа;
			КонецЕсли;

		Иначе
			СтрокаГруппы = ДеревоНастроек;

		КонецЕсли;

		СтрокаНастройки = СтрокаГруппы.Строки.Добавить();
		СтрокаНастройки.Настройка = Выборка.Ссылка;
		СтрокаНастройки.Значение  = Выборка.Ссылка.ТипЗначения.ПривестиЗначение(Выборка.Значение);
		СтрокаНастройки.ЭтоГруппа = Выборка.ЭтоГруппа;
		
		Если СтрокаНастройки.Настройка.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
			
			мОрганизация = СтрокаНастройки.Значение;
			
		КонецЕсли;
		
		// Если новый элемент справочника, заполняем настройки по умолчанию.
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			Если СтрокаНастройки.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ЗапрашиватьПодтверждениеПриЗакрытии Тогда
				СтрокаНастройки.Значение = Истина;
			КонецЕсли;
			
			//Если СтрокаНастройки.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ПоказыватьВДокументахСчетаУчета Тогда
			//	СтрокаНастройки.Значение = Истина;
			//КонецЕсли;
					
		КонецЕсли;

	КонецЦикла;

	ЗначениеВРеквизитФормы(ДеревоНастроек, "Настройки");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройки(Отказ, Ссылка)
	СтандартнаяОбработка = Ложь;
	
	Набор = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
	Набор.Отбор.Пользователь.Использование = Истина;
	Набор.Отбор.Пользователь.Значение      = Ссылка;

	ДеревоНастроек = РеквизитФормыВЗначение("Настройки");	
	ЗаполнитьНаборЗаписей(ДеревоНастроек.Строки, Набор, Ссылка);

	//Если НЕ ТекущийУчетПоВсем И НЕ ЗначениеЗаполнено(ТекущаяОрганизация) Тогда
	//	Сообщить("В том случае, если учет ведется по одной организации, необходимо её указать в настройках.", СтатусСообщения.Внимание);
	//	Отказ = Истина;
	//Иначе
		Набор.Записать();
	//КонецЕсли;	
КонецПроцедуры

&НаСервере
// Процедура заполняет набор записей регистра сведений значениями настроек
Процедура ЗаполнитьНаборЗаписей(СтрокиДерева, НаборЗаписей, Ссылка)
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл		
		Если Не СтрокаДерева.ЭтоГруппа Тогда        
			Запись = НаборЗаписей.Добавить();
			Запись.Пользователь = Ссылка;
			Запись.Настройка    = СтрокаДерева.Настройка;
			Запись.Значение     = СтрокаДерева.Настройка.ТипЗначения.ПривестиЗначение(СтрокаДерева.Значение);

			//Если Запись.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.УчетПоВсемОрганизациям Тогда
			//	ТекущийУчетПоВсем = Запись.Значение;
			//КонецЕсли;	
		Иначе
			ЗаполнитьНаборЗаписей(СтрокаДерева.Строки, НаборЗаписей, Ссылка)
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
// Процедура заполняет набор записей регистра сведений значениями настроек
Процедура ЗаполнитьРеквизитыИзНабораЗаписей(СтрокиДерева)
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл		
		Если Не СтрокаДерева.ЭтоГруппа Тогда        
			//////Если СтрокаДерева.Настройка = 
			//////		ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация Тогда
			//////	ТекущаяОрганизация = СтрокаДерева.Настройка.ТипЗначения.ПривестиЗначение(СтрокаДерева.Значение);
			//////ИначеЕсли СтрокаДерева.Настройка = 
			//////		ПланыВидовХарактеристик.НастройкиПользователей.ОсновноеПодразделениеОрганизации Тогда
			//////	ТекущееПодразделение = СтрокаДерева.Настройка.ТипЗначения.ПривестиЗначение(СтрокаДерева.Значение);
			//ИначеЕсли СтрокаДерева.Настройка = 
			//		ПланыВидовХарактеристик.НастройкиПользователей.Отдел Тогда
			//	ТекущийОтдел = СтрокаДерева.Настройка.ТипЗначения.ПривестиЗначение(СтрокаДерева.Значение);
			//////КонецЕсли;	
		Иначе
			ЗаполнитьРеквизитыИзНабораЗаписей(СтрокаДерева.Строки)
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Значение = Элементы.Настройки.ТекущиеДанные.Настройка;
	
	Если ТипЗначенияВыбраннойСтроки(Значение) И Элемент.Имя = "Значение" Тогда
		
		Элемент.КнопкаВыбора = Истина;
		Элемент.КнопкаОткрытия = Истина;
		Элемент.КнопкаОчистки = Истина;
		
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		Диалог.Каталог   = Элементы.Настройки.ТекущиеДанные.Значение;
		Диалог.Заголовок = "Укажите каталог...";

		Если Не Диалог.Выбрать() Тогда
			Возврат;
		КонецЕсли;

		Элементы.Настройки.ТекущиеДанные.Значение = Диалог.Каталог;
		СтандартнаяОбработка = Ложь;

	КонецЕсли;

КонецПроцедуры

Функция ТипЗначенияВыбраннойСтроки(Значение)
	
	Если Значение = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойКаталогФайлов Тогда	 
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура КодОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность ИЛИ 
			Элемент.ТекстРедактирования <> СокрЛП(Объект.Код) Тогда
		Объект.Код = Элемент.ТекстРедактирования;
		КраткоеИмяПриИзменении(Элемент);
		Сообщить("Перед открытием необходимо записать текущие данные.");
		
	ИначеЕсли Объект.ИдентификаторПользователяИБ = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
		Результат = ПроверитьПользователяИБПоИмени();
		Если Результат <> Неопределено Тогда;
			Объект.ИдентификаторПользователяИБ = Результат;
			Записать();
			ОткрытьФорму("Справочник.Пользователи.Форма.ФормаРедактированиеПользователяИБ",
					Новый Структура("Объект, ИДПользователяИБ, СоздатьКопированием", 
						Объект.Ссылка, Результат, Ложь), ЭтаФорма);
		Иначе	
			Сообщить("Пользователь ИБ не найден! Будет создан новый.");
			ОткрытьФорму("Справочник.Пользователи.Форма.ФормаРедактированиеПользователяИБ",
					Новый Структура("Объект, ИДПользователяИБ, СоздатьКопированием", 
						Объект.Ссылка, Неопределено, Ложь), ЭтаФорма);
		КонецЕсли;
					
	Иначе
		ОткрытьФорму("Справочник.Пользователи.Форма.ФормаРедактированиеПользователяИБ",
				Новый Структура("Объект, ИДПользователяИБ, СоздатьКопированием", 
					Объект.Ссылка, Объект.ИдентификаторПользователяИБ, Ложь), ЭтаФорма);					 	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверитьПользователяИБПоИмени()
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Объект.Код);
	Если ПользовательИБ <> Неопределено И 
			ПользовательИБ.УникальныйИдентификатор <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
		Возврат ПользовательИБ.УникальныйИдентификатор;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаСервере
//Процедура открывает форму редактирования пользователя БД
Процедура ОткрытьФормуРедактированияПользователяБД(Знач АвтоматическиСоздаватьНовогоПользователяБД = Ложь)
	        
	Если мСтароеИмяПользователя = "НеАвторизован" Тогда		
		Сообщить("Для пользователя ""НеАвторизован"" недопустимо создавать пользователя БД.");
		Возврат;		
	КонецЕсли;
	
	СтарыйПользовательБД = УправлениеПользователями.НайтиПользователяБД(мСтароеИмяПользователя);
		
	Если СтарыйПользовательБД = Неопределено Тогда
		
		Если НЕ мНаличиеПраваАдминистрирования Тогда
			
			// нет прав на администрирование
			Сообщить("Нет прав на просмотр информации о пользователях БД.");
				
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;	
		
	// есть права администрирования, а пользователь БД не найден
	// надо проверить модифицирована ли форма или нет
	Если Модифицированность Тогда
			
		//////УспешноЗаписан = РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
		УспешноЗаписан = ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
		
		Если НЕ УспешноЗаписан Тогда
			Возврат;
		КонецЕсли;	
			
		// еще раз попробуем взять пользователя БД
		СтарыйПользовательБД = УправлениеПользователями.НайтиПользователяБД(мСтароеИмяПользователя);
			
	КонецЕсли;
	
	СозданНовыйЭлемент = Ложь;
	Если СтарыйПользовательБД = Неопределено Тогда
		
		Если НЕ АвтоматическиСоздаватьНовогоПользователяБД Тогда
			Возврат;
		КонецЕсли;
		
		// создаем нового пользователя БД
		СтарыйПользовательБД = ПользователиИнформационнойБазы.СоздатьПользователя();
		СтарыйПользовательБД.Имя = мСтароеИмяПользователя;
		СтарыйПользовательБД.ПолноеИмя = СокрЛП(Объект.Наименование);
		
		СозданНовыйЭлемент = Истина;
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
//Процедура обновляет визуальные объекты формы
Процедура ОбновитьВизуальныеОбъектыФормы()
	
	//мЭтоНовыйЭлементСправочника = Объект.ЭтоНовый();
	
	мСтароеИмяПользователя = СокрЛП(Объект.Код);
	
	//можно ли код редактировать или нет
	РазрешитьРедактироватьКод = Ложь;

	Если НЕ ЗначениеЗаполнено(Объект.Код) Тогда
		
		РазрешитьРедактироватьКод = Истина;
				
	Иначе	
		
		СтарыйПользовательБД = УправлениеПользователями.НайтиПользователяБД(мСтароеИмяПользователя);
		РазрешитьРедактироватьКод = (СтарыйПользовательБД = Неопределено);
			
	КонецЕсли;
	
	Элементы.Код.ТолькоПросмотр = Не РазрешитьРедактироватьКод;	
	
КонецПроцедуры

//// Функция спрашивает пользователя записать ли объект, или нет, если он новый
////
//// Параметры
////  ФормаОбъекта - Форма объекта, из которой пытаются произвести действия
////
//// Возвращаемое значение:
////   Булево - Объект записан или нет
////
Функция ЗаписатьНовыйОбъектВФорме(ФормаОбъекта)

	//Если ФормаОбъекта.ЭтоНовый() Тогда
	//	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ФормаОбъекта.Объект.Ссылка)) Тогда
	//		ТекстВопроса = "Для выполнения данной операции необходимо записать документ.";
	//	Иначе // Справочник
	//		ТекстВопроса = "Для выполнения данной операции необходимо записать элемент.";
	//	КонецЕсли; 
	//	
	//	Возврат Ложь;
	//Иначе
	//	Возврат Истина;
	//КонецЕсли; 
	Возврат Истина;

КонецФункции

Процедура ЗаполнениеПеременныхПриОткрытииФормы()
	//переменные для формы ИБ
	мОбработкаТайпингаВидаКИ                 = Ложь;
	мТекстТайпингаВидаКИ                     = "";
	мПоследнееЗначениеЭлементаТайпингаВидаКИ = Неопределено;
	мСписокНастроекВыбораГруппы = Новый СписокЗначений;
	мСтароеИмяПользователя = "";
	мНаличиеПраваАдминистрирования = ПравоДоступа("Администрирование", Метаданные);
КонецПроцедуры

&НаКлиенте
Процедура КраткоеИмяПриИзменении(Элемент)
	КраткоеИмяПриИзмененииНаСервере();	
КонецПроцедуры

&НаСервере
Процедура КраткоеИмяПриИзмененииНаСервере()
	Если Объект.Наименование = "" Тогда
		ПользовательИБ = УправлениеПользователями.НайтиПользователяБД(Объект.Код);
		Если ПользовательИБ = Неопределено Тогда
			Объект.Наименование = Объект.Код;
		Иначе
			Объект.Наименование = ПользовательИБ.ПолноеИмя;
		КонецЕсли 
	КонецЕсли;
КонецПроцедуры
	
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если Объект.ИдентификаторПользователяИБ <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
		Элементы.КраткоеИмя.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Для Каждого Элемент Из СписокГрупп Цикл
		ОповеститьОбИзменении(Элемент.Значение);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	УправлениеСвойствами.ПередЗаписьюНаСервере2(ЭтаФорма, ТекущийОбъект, Отказ);
	
	//
	Если Объект.Ссылка.Пустая() И Не Справочники.Пользователи.НайтиПоКоду(Объект.Код).Пустая() Тогда 	
		Сообщить("Пользователь с таким ""Кратким именем"" уже существует!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
		
	ПользовательИБ = УправлениеПользователями.НайтиПользователяБД(Объект.Код);	
	Если ПользовательИБ <> Неопределено Тогда
		Объект.ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
		Если Объект.Наименование <> "" Тогда
			ПользовательИБ.ПолноеИмя = Объект.Наименование;
			ПользовательИБ.Записать();
		Иначе
			Объект.Наименование = ПользовательИБ.ПолноеИмя;
		КонецЕсли;
	КонецЕсли;
	
	//Заполнение реквизитов объекта
	ДеревоНастроек = РеквизитФормыВЗначение("Настройки");
	ЗаполнитьРеквизитыИзНабораЗаписей(ДеревоНастроек.Строки);
	//////ТекущийОбъект.Организация = ТекущаяОрганизация;
	//////ТекущийОбъект.Подразделение = ТекущееПодразделение;
	//ТекущийОбъект.Отдел = ТекущийОтдел;
	
	//УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Объект.Код = СокрЛП(Объект.Код);
	Если Объект.Код = "" Тогда
		Отказ = Истина;
		Сообщить("""Краткое имя"" не может быть пустым!");
	КонецЕсли;
	
	Если Объект.НомерОператора <> 0 И Не УникальныйУИДОператора() Тогда
		Отказ = Истина;
		Сообщить("УИД оператора не уникален!");
	КонецЕсли;	
	
	//Очистка списка групп
	Если Объект.НомерОператора = 0 Тогда
		Для Каждого Элемент Из СписокГрупп Цикл
			Элемент.Пометка = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	//
	Объект.ГруппыПользователей.Очистить();		
	Для Каждого Эл Из СписокГруппПользователей Цикл	
		Если Эл.Пометка Тогда
			Объект.ГруппыПользователей.Добавить().Группа = Эл.Значение;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьНастройки(Отказ, ТекущийОбъект.Ссылка);	
	СохранитьНастройкиГруппОператоров();	
КонецПроцедуры


&НаКлиенте
Процедура СписокГруппПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ДополнительныеРеквизиты.Загрузить(Объект.ДополнительныеРеквизиты.Выгрузить());
	УправлениеЗаполнением.ДобавитьДополнительныеРеквизиты(ЭтаФорма);
	
	//
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ГруппыОператоров.Ссылка КАК Значение,
	                      |	ВЫБОР
	                      |		КОГДА ГруппыОператоровОператоры.Ссылка ЕСТЬ NULL 
	                      |			ТОГДА ЛОЖЬ
	                      |		ИНАЧЕ ИСТИНА
	                      |	КОНЕЦ КАК Пометка
	                      |ИЗ
	                      |	Справочник.ГруппыОператоров КАК ГруппыОператоров
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыОператоров.Операторы КАК ГруппыОператоровОператоры
	                      |		ПО (ГруппыОператоровОператоры.Ссылка = ГруппыОператоров.Ссылка)
	                      |			И (ГруппыОператоровОператоры.Оператор = &Пользователь)");					  
	Запрос.УстановитьПараметр("Пользователь", Объект.Ссылка);
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл 
		СписокГрупп.Добавить(Результат.Значение,, Результат.Пометка);
	КонецЦикла;
	
	//Заполнение СписокГруппыПользователя
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГруппыПользователей.Ссылка КАК Значение,
	               |	ВЫБОР
	               |		КОГДА ПользователиГруппыПользователей.Группа ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Пометка
	               |ИЗ
	               |	Справочник.ГруппыПользователей КАК ГруппыПользователей
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.ГруппыПользователей КАК ПользователиГруппыПользователей
	               |		ПО (ПользователиГруппыПользователей.Ссылка = &Пользователь)
	               |			И (ПользователиГруппыПользователей.Группа = ГруппыПользователей.Ссылка)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ГруппыПользователей.Наименование";	        
	Результат = Запрос.Выполнить().Выбрать();	
	Пока Результат.Следующий() Цикл 
		СписокГруппПользователей.Добавить(Результат.Значение,, Результат.Пометка);	
	КонецЦикла;	
	
	//УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаКонтактнаяИнформация");
	ТекущийПользовательПолныеПрава = РольДоступна("тсАдминистрирование") ИЛИ 
			ПустаяСтрока(ПользователиИнформационнойБазы.ТекущийПользователь().Имя);	
	Если ПользователиИнформационнойБазы.ТекущийПользователь().Имя <> Объект.Ссылка.Код И 
			Не ТекущийПользовательПолныеПрава Тогда 
		Элементы.КраткоеИмя.КнопкаОткрытия = Ложь;
	КонецЕсли;
	
	//доступность реквизитов
	Если Не РольДоступна("тсАдминистрирование") Тогда
		Элементы.Родитель.ТолькоПросмотр = Истина;
		Элементы.КраткоеИмя.ТолькоПросмотр = Истина;
		Элементы.Наименование.ТолькоПросмотр = Истина;
		Элементы.Организация.ТолькоПросмотр = Истина;
		Элементы.Подразделение.ТолькоПросмотр = Истина;
		Элементы.ТипСотрудника.ТолькоПросмотр = Истина;
		Элементы.ГруппаДопНастройки.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Не УсловиеДоступностиЭлементов() Тогда
		Элементы.Организация.ТолькоПросмотр = Истина;
		Элементы.Подразделение.ТолькоПросмотр = Истина;
		Элементы.ТипСотрудника.ТолькоПросмотр = Истина;
	КонецЕсли;	
КонецПроцедуры


&НаСервере
Функция УсловиеДоступностиЭлементов()
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ОбъектыВРаботеОстатки.Объект,
	                      |	ОбъектыВРаботеОстатки.Организация,
	                      |	ОбъектыВРаботеОстатки.Подразделение,
	                      |	ОбъектыВРаботеОстатки.Сотрудник,
	                      |	ОбъектыВРаботеОстатки.КоличествоОстаток
	                      |ИЗ
	                      |	РегистрНакопления.ОбъектыВРаботе.Остатки(, Сотрудник = &Сотрудник) КАК ОбъектыВРаботеОстатки");
	Запрос.УстановитьПараметр("Сотрудник", Объект.Ссылка);
	Возврат Объект.Ссылка.Пустая() ИЛИ Запрос.Выполнить().Пустой();	
КонецФункции

&НаСервере
Процедура СохранитьНастройкиГруппОператоров()
	Результат = Справочники.ГруппыОператоров.Выбрать();
	Пока Результат.Следующий() Цикл
		СтрокиГруппы = Результат.Операторы.НайтиСтроки(Новый Структура("Оператор", Объект.Ссылка));
		
		СтрокаСписка = СписокГрупп.НайтиПоЗначению(Результат.Ссылка);
		Если СтрокаСписка <> Неопределено Тогда
			Если СтрокаСписка.Пометка Тогда
				//Есть в группе
				Если СтрокиГруппы.Количество() = 0 Тогда
					//Надо добавить
					ОбъектГруппа = Результат.ПолучитьОбъект();
					ОбъектГруппа.Операторы.Добавить().Оператор = Объект.Ссылка;
					ОбъектГруппа.Записать();
				КонецЕсли;
			Иначе 
				//Нет в группе
				Если СтрокиГруппы.Количество() > 0 Тогда
					//Надо удалить
					ОбъектГруппа = Результат.ПолучитьОбъект();
					СтрокиГруппы = ОбъектГруппа.Операторы.НайтиСтроки(Новый Структура("Оператор", Объект.Ссылка));
					ОбъектГруппа.Операторы.Удалить(СтрокиГруппы[0]);
					ОбъектГруппа.Записать();
				КонецЕсли;		
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура СписокГруппПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НомерОператораПриИзменении(Элемент)
	Если Объект.НомерОператора <> 0 И Не УникальныйУИДОператора() Тогда
		Сообщить("УИД оператора равный " + Строка(Объект.НомерОператора) + " не уникален!");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция УникальныйУИДОператора()
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Пользователи.Ссылка
	                      |ИЗ
	                      |	Справочник.Пользователи КАК Пользователи
	                      |ГДЕ
	                      |	Пользователи.НомерОператора = &НомерОператора
	                      |	И Пользователи.Ссылка <> &Ссылка");
	Запрос.УстановитьПараметр("НомерОператора", Объект.НомерОператора);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
    Возврат Запрос.Выполнить().Пустой();
КонецФункции

&НаКлиенте
Процедура ДополнительныеРеквизитыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Свойство = Неопределено;
	СвойствоВидСтроки = Неопределено;
	Код = Сред(Элемент.Имя, Найти(Элемент.Имя, "_") + 1);
	УправлениеСвойствами.ПолучитьСвойствоПоКоду(СтрЗаменить(Код, "_", " "), Свойство, СвойствоВидСтроки);
	
	Если СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Адрес") ИЛИ
			СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Телефон") Тогда
	    Строки = ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Свойство));
		ТекСтрокаПараметры = Строки[0].Параметры;
						
		СписокСтрок = СтрЗаменить(ТекСтрокаПараметры, ";", Символы.ПС);
		ЗначенияПолей = Новый СписокЗначений();
		Если СтрЧислоСтрок(СписокСтрок) > 1 Тогда
			Для Индекс = 1 По СтрЧислоСтрок(СписокСтрок) Цикл
				Стр = СтрПолучитьСтроку(СписокСтрок, Индекс);
				Если Стр <> "" Тогда 
					СписокПодстрок = СтрЗаменить(Стр, "=", Символы.ПС);
					ЗначенияПолей.Добавить(СтрПолучитьСтроку(СписокПодстрок, 2), СтрПолучитьСтроку(СписокПодстрок, 1));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;			
		Если СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Адрес") Тогда
			ИмяФормыРедактирования = "ОбщаяФорма.ВводАдреса";
		ИначеЕсли СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Телефон") Тогда
			ИмяФормыРедактирования = "ОбщаяФорма.ВводТелефона";
		КонецЕсли;
			
		Пар = Новый Структура;
		Пар.Вставить("ЗначенияПолей",                ЗначенияПолей);
		Пар.Вставить("Вид",                          ""); //"Адрес");
		Пар.Вставить("БылиВнесеныИзменения",         Ложь);
		Пар.Вставить("Представление",                Элемент.ТекстРедактирования);
		Пар.Вставить("РедактированиеТолькоВДиалоге", Не Элемент.РедактированиеТекста);
		Пар.Вставить("АдресТолькоРоссийский",        Ложь);
			
		//Чуров
		Результат = ОткрытьФорму(ИмяФормыРедактирования, Пар);	
		//Результат = ОткрытьФормуМодально(ИмяФормыРедактирования, Пар);	
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Строки[0].Значение = Результат.Представление;
			ЭтаФорма[Элемент.Имя] = Результат.Представление;
			ЗначенияПолей = Результат.ЗначенияПолей;
			Модифицированность = Истина;
			
			РезультатЗначение = "";
			Для Каждого Элемент Из ЗначенияПолей Цикл
				РезультатЗначение = РезультатЗначение + Элемент.Представление + "=" + Элемент.Значение + ";"; 
			КонецЦикла;
			
			Строки[0].Параметры = РезультатЗначение;
		КонецЕсли;
	ИначеЕсли СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.АдресФИАС") Тогда 
		
		Строки = ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Свойство)); 
		ТекСтрока = Строки[0]; 
		
		ИмяФормыРедактирования = "Обработка.РасширенныйВводКонтактнойИнформации.Форма.ВводАдреса"; 
		Если ТекСтрока.Параметры = "" Тогда 
			ЗнПолей = ""; 
		Иначе 
			ЗнПолей = бит_АдресныйКлассификатор.ПолучитьJSONИзXML(ТекСтрока.Параметры); 
		КонецЕсли; 
		Пар = Новый Структура; 
		Пар.Вставить("ЗначенияПолей", ЗнПолей); 
		Пар.Вставить("Вид", ""); //"Адрес"); 
		Пар.Вставить("БылиВнесеныИзменения", Ложь); 
		Пар.Вставить("Представление", Элемент.ТекстРедактирования); 
		Пар.Вставить("РедактированиеТолькоВДиалоге", Не Элемент.РедактированиеТекста); 
		Пар.Вставить("АдресТолькоРоссийский", Ложь); 
		
		Результат = ОткрытьФормуМодально(ИмяФормыРедактирования, Пар); 
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда 
			Строки[0].Значение = Результат.Представление; 
			ЭтаФорма[Элемент.Имя] = Результат.Представление; 
			Модифицированность = Истина; 
			СтрокаJSON = Результат.Значение; 
			
			Если СтрокаJSON = "" Тогда 
				СтрокаJSON = бит_АдресныйКлассификатор.ПолучитьJSONИзXML(СтрокаJSON); 
			КонецЕсли; 
			
			Строки[0].Параметры = бит_АдресныйКлассификатор.ПолучитьСтрокуXML(СтрокаJSON); 
		КонецЕсли;
		
	ИначеЕсли СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.ПутьКФайлу") Тогда	
		#Если Не ВебКлиент Тогда
			СтандартнаяОбработка = Ложь;
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			Диалог.Заголовок = "Выберите файл";
			Диалог.ПолноеИмяФайла = ЭтаФорма[Элемент.Имя];
			Диалог.МножественныйВыбор = Ложь;
			Если Диалог.Выбрать() Тогда
				ЭтаФорма[Элемент.Имя] = Диалог.ПолноеИмяФайла;
			КонецЕсли;	
		#Иначе
			СтандартнаяОбработка = Ложь;
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			Диалог.Заголовок = "Выберите файл";
			Диалог.ПолноеИмяФайла = ЭтаФорма[Элемент.Имя];
			//Фильтр = "EXE (*.exe)|*.exe"; 
			//Диалог.Фильтр = Фильтр; 
			Диалог.МножественныйВыбор = Ложь;
			//Диалог.Каталог = "F:\";
			Диалог.Показать(Новый ОписаниеОповещения("ДополнительныеРеквизитыНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("Диалог, Элемент", Диалог, Элемент)));
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	Элемент = ДополнительныеПараметры.Элемент;
	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ЭтаФорма[Элемент.Имя] = Диалог.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Стр = СтрЗаменить(Элемент.Имя, "Реквизит_", "РеквизитСвойство_");
	Строки = ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Вычислить(Стр)));
	СтрокаЗапуска = "";	
	Если Строки.Количество() > 0 Тогда
		СтрокаЗапуска = Строки[0].Значение;
	КонецЕсли;

	Попытка
		ЗапуститьПриложение(СтрокаЗапуска);
	Исключение
		ОткрытьЗначение(СтрокаЗапуска);
	КонецПопытки;
КонецПроцедуры

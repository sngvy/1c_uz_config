&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	Объект.Дата = ТекущаяДата();
	Объект.Интервал = 2;
	//УстановитьОтбор("ФактическаяДата", НачалоДня(Объект.Дата), 1);
	//Если Объект.Интервал = 0 Тогда
	//	УстановитьОтбор("ФактическаяДата", КонецДня(Объект.Дата) + 1, 2);
	//ИначеЕсли Объект.Интервал = 1 Тогда
	//	//
	//ИначеЕсли Объект.Интервал = 2 Тогда
	//	УстановитьОтбор("ФактическаяДата", КонецДня(Объект.ДатаКонца) + 1, 2);
	//КонецЕсли;
		
	Попытка
		Объект.Пользователь = Параметры.Пользователь;
	Исключение
		Объект.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецПопытки;
	
	СписокПользователей.Очистить();	
	Если ТипЗнч(Объект.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		СписокПользователей.Добавить(Объект.Пользователь);		
	ИначеЕсли ТипЗнч(Объект.Пользователь) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда 
		ЗаполнитьСписокПользователей(Объект.Пользователь, СписокПользователей);
	КонецЕсли;
	
	//Если ТипЗнч(Объект.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
	//	УстановитьПараметр("Сотрудник", Объект.Пользователь);
	//	УстановитьПараметр("Подразделение", Неопределено);
	//Иначе
	//	УстановитьПараметр("Сотрудник", Неопределено);
	//	УстановитьПараметр("Подразделение", Объект.Пользователь);
	//КонецЕсли;
	//
	//УстановитьОтбор("Исполнитель", СписокПользователей);
	Заголовок = Строка(Объект.Пользователь);
	
	
	//Установить отбор в Сообщения
	Поле = Сообщения.Параметры.Элементы.Найти("Сотрудник");
	Поле.Значение = УдалитьОбщегоНазначения.ТекущийПользователь();
	Поле.Использование = Истина;
		
	//Заполнить список неотображаемых типов
	ЗаполнитьСписокНеотображаемыхТипов();
	ОтменаСобытияЗапланированныеПриАктивизацииЯчейки = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)	
	ДатаПриИзменении(Неопределено);
	ИнтервалПриИзменении("");
	ПроверкаГруппироватьМероприятия();	
	УбратьВидимость();	
	Элементы.МероприятияВыполнить.Доступность = Ложь;	
	ОтменаСобытияЗапланированныеПриАктивизацииЯчейки = Ложь;
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеДляПараметраДата(ЗначениеДаты)
	Результат = Формат(ЗначениеДаты, "ДЛФ=DD");
	Строки = СтрЗаменить(Результат, " ", Символы.ПС);
	Возврат СтрПолучитьСтроку(Строки, 1) + " " + СтрПолучитьСтроку(Строки, 2);
КонецФункции

&НаСервере
Процедура ЗаполнитьРасписание()
	Для Номер = 1 По 7 Цикл
		НоваяСтрока = Расписание.Добавить();
		НоваяСтрока.ДеньНедели = 1;
		НоваяСтрока.НачалоРД = Дата(1,1,1,8,30,0);
		НоваяСтрока.КонецРД = Дата(1,1,1,17,30,0);
		НоваяСтрока.Выходной = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокМероприятий()
	//0 - получить список мероприятий у которых проставлено планируемое время начала 
	//    список отсортировать по времени начала и времени конца
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОтветственныеСотрудники.Объект,
	                      |	ОтветственныеСотрудники.ТипСотрудника,
	                      |	ОтветственныеСотрудники.Пользователь,
	                      |	ИСТИНА КАК Главный
	                      |ПОМЕСТИТЬ ОтвСотр
	                      |ИЗ
	                      |	РегистрСведений.ОтветственныеСотрудники КАК ОтветственныеСотрудники
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	СотрудникиВПомощь.Объект,
	                      |	СотрудникиВПомощь.ТипСотрудника,
	                      |	СотрудникиВПомощь.Пользователь,
	                      |	ЛОЖЬ
	                      |ИЗ
	                      |	РегистрСведений.СотрудникиВПомощь КАК СотрудникиВПомощь
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ОтвСотр.Пользователь,
	                      |	ОтвСотр.Главный,
	                      |	Мероприятие.Ссылка КАК Ссылка,
	                      |	ОтвСотр.ТипСотрудника.Глубина КАК Глубина,
	                      |	Мероприятие.Ответственный,
	                      |	Мероприятие.ПланируемоеВремя КАК ВремяНачала,
	                      |	Мероприятие.ПланируемоеВремяКонца КАК ВремяКонца,
	                      |	Мероприятие.Выполнена,
	                      |	Мероприятие.Исполнитель
	                      |ПОМЕСТИТЬ ОтвМер
	                      |ИЗ
	                      |	РегистрНакопления.ОбъектыВРаботе.Остатки(, Сотрудник В (&Ответственный)) КАК ОбъектыВРаботеОстатки
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.Мероприятие КАК Мероприятие
	                      |			ЛЕВОЕ СОЕДИНЕНИЕ ОтвСотр КАК ОтвСотр
	                      |			ПО (ОтвСотр.Объект = Мероприятие.Объект)
	                      |		ПО (ОбъектыВРаботеОстатки.Объект = Мероприятие.Объект
	                      |				ИЛИ ОбъектыВРаботеОстатки.Объект = Мероприятие.Объект.Владелец)
	                      |ГДЕ
	                      |	Мероприятие.ПланируемаяДата = &ПланируемаяДата
	                      |	И Мероприятие.ПланируемоеВремя <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	                      |	И НЕ Мероприятие.ПометкаУдаления
	                      |	И (Мероприятие.БизнесПроцесс = ЗНАЧЕНИЕ(БизнесПроцесс.БизнесПроцессы.ПустаяСсылка)
	                      |			ИЛИ НЕ Мероприятие.БизнесПроцесс.ПометкаУдаления)
	                      |	И (НЕ Мероприятие.Выполнена
	                      |			ИЛИ &ОтображатьВыполненные)
	                      |	И НЕ Мероприятие.ТипМероприятия В (&ТипМероприятия)
	                      |	И (Мероприятие.Ответственный.Родители ПОДОБНО ОтвСотр.ТипСотрудника.РодителиШаблон
	                      |			ИЛИ Мероприятие.Ответственный В (&Ответственный)
	                      |			ИЛИ Мероприятие.Исполнитель В (&Ответственный))
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ОтвМер.Ссылка,
	                      |	МАКСИМУМ(ОтвМер.Глубина) КАК Глубина
	                      |ПОМЕСТИТЬ ОтвМакс
	                      |ИЗ
	                      |	ОтвМер КАК ОтвМер
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ОтвМер.Ссылка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	МАКСИМУМ(ОтвМер.Главный) КАК Главный,
	                      |	ОтвМер.Ссылка КАК Мероприятие,
	                      |	ОтвМер.ВремяНачала КАК ВремяНачала,
	                      |	ОтвМер.ВремяКонца КАК ВремяКонца,
	                      |	ОтвМер.Выполнена
	                      |ИЗ
	                      |	ОтвМер КАК ОтвМер
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ОтвМакс КАК ОтвМакс
	                      |		ПО ОтвМер.Ссылка = ОтвМакс.Ссылка
	                      |			И ОтвМер.Глубина = ОтвМакс.Глубина
	                      |ГДЕ
	                      |	(ОтвМер.Пользователь В (&Ответственный)
	                      |				И НЕ ОтвМакс.Ссылка ЕСТЬ NULL 
	                      |			ИЛИ ОтвМер.Ответственный В (&Ответственный)
	                      |			ИЛИ ОтвМер.Исполнитель В (&Ответственный))
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ОтвМер.Ссылка,
	                      |	ОтвМер.ВремяНачала,
	                      |	ОтвМер.ВремяКонца,
	                      |	ОтвМер.Выполнена
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ВремяНачала,
	                      |	ВремяКонца");			  						  
	Запрос.УстановитьПараметр("ОтображатьВыполненные", ОтображатьВыполненные);
	Запрос.УстановитьПараметр("ПланируемаяДата", Объект.Дата);
	Запрос.УстановитьПараметр("Ответственный", СписокПользователей);
	Запрос.УстановитьПараметр("ТипМероприятия", СписокНеотображаемыхТипов);
	СписокМероприятий.Загрузить(Запрос.Выполнить().Выгрузить());
	
	
	//2 - завести массив время конца
	МассивВремяКонца = Новый Массив();
	Для Каждого Элемент Из СписокМероприятий Цикл 
		//1 - вычислить планируемую дату конца если ее нет
		Если Не ЗначениеЗаполнено(Элемент.ВремяКонца) Тогда
			Элемент.ВремяКонца = Элемент.ВремяНачала + 5 * 60;
		КонецЕсли;
		
		//1 - Округлить даты мероприятий в большую сторону
		ВремяНачалаМинута = Минута(Элемент.ВремяНачала);
		ВремяНачалаРазность = (ВремяНачалаМинута - Цел(ВремяНачалаМинута / 15) * 15) * 60 + Секунда(Элемент.ВремяНачала);

		Элемент.ВремяНачала = Элемент.ВремяНачала - ВремяНачалаРазность;
		Элемент.ВремяКонца = Элемент.ВремяКонца - ВремяНачалаРазность;		
		Элемент.ВремяКонца = Элемент.ВремяКонца - Секунда(Элемент.ВремяКонца);
		
		Если Минута(Элемент.ВремяКонца) <> 0 Тогда
			ВремяКонцаЧас = Час(Элемент.ВремяКонца);
			ВремяКонцаМинута = Минута(Элемент.ВремяКонца - 1);
			ВремяКонцаМинута = (Цел(ВремяКонцаМинута / 15) + 1) * 15;
			Если ВремяКонцаМинута = 60 Тогда
				ВремяКонцаМинута = 0;
				ВремяКонцаЧас = ВремяКонцаЧас + 1;
			КонецЕсли;
			
			Если ВремяКонцаЧас = 24 Тогда
				Элемент.ВремяКонца = Дата(1,1,1, 23, 59, 59);
			Иначе
				Элемент.ВремяКонца = Дата(1,1,1, ВремяКонцаЧас, ВремяКонцаМинута, 0) - 1;
			КонецЕсли;
		Иначе
			Элемент.ВремяКонца = Элемент.ВремяКонца - 1;
		КонецЕсли;	
			
		//3 - Заполнить номера колонок в списке мероприятий
	    Для Номер = 0 По МассивВремяКонца.Количество() - 1 Цикл
			Если МассивВремяКонца[Номер] < Элемент.ВремяНачала Тогда
				Элемент.НомерКолонки = Номер;
				МассивВремяКонца[Номер] = Элемент.ВремяКонца;
				Прервать;
			КонецЕсли;
		КонецЦикла;	
		Если Номер = МассивВремяКонца.Количество() Тогда
			Элемент.НомерКолонки = Номер;
			МассивВремяКонца.Добавить(Элемент.ВремяКонца);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоКолонок = МассивВремяКонца.Количество();
	Если КоличествоКолонок = 0 Тогда
		КоличествоКолонок = 1;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокМероприятийТЗ()
	//0 - получить список мероприятий у которых проставлено планируемое время начала 
	//    список отсортировать по времени начала и времени конца
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОтветственныеСотрудники.Объект,
	                      |	ОтветственныеСотрудники.ТипСотрудника,
	                      |	ОтветственныеСотрудники.Пользователь,
	                      |	ИСТИНА КАК Главный
	                      |ПОМЕСТИТЬ ОтвСотр
	                      |ИЗ
	                      |	РегистрСведений.ОтветственныеСотрудники КАК ОтветственныеСотрудники
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	СотрудникиВПомощь.Объект,
	                      |	СотрудникиВПомощь.ТипСотрудника,
	                      |	СотрудникиВПомощь.Пользователь,
	                      |	ЛОЖЬ
	                      |ИЗ
	                      |	РегистрСведений.СотрудникиВПомощь КАК СотрудникиВПомощь
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ОтвСотр.Пользователь,
	                      |	ОтвСотр.Главный,
	                      |	Мероприятие.Ссылка КАК Ссылка,
	                      |	ОтвСотр.ТипСотрудника.Глубина КАК Глубина,
	                      |	Мероприятие.Ответственный,
	                      |	Мероприятие.ПланируемоеВремя КАК ВремяНачала,
	                      |	Мероприятие.ПланируемоеВремяКонца КАК ВремяКонца,
	                      |	Мероприятие.Выполнена,
	                      |	Мероприятие.Исполнитель,
	                      |	Мероприятие.Объект,
	                      |	Мероприятие.ПланируемаяДата
	                      |ПОМЕСТИТЬ ОтвМер
	                      |ИЗ
	                      |	РегистрНакопления.ОбъектыВРаботе.Остатки(, Сотрудник В (&Ответственный)) КАК ОбъектыВРаботеОстатки
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.Мероприятие КАК Мероприятие
	                      |			ЛЕВОЕ СОЕДИНЕНИЕ ОтвСотр КАК ОтвСотр
	                      |			ПО (ОтвСотр.Объект = Мероприятие.Объект)
	                      |		ПО (ОбъектыВРаботеОстатки.Объект = Мероприятие.Объект
	                      |				ИЛИ ОбъектыВРаботеОстатки.Объект = Мероприятие.Объект.Владелец)
	                      |ГДЕ
	                      |	НЕ Мероприятие.ПометкаУдаления
	                      |	И (Мероприятие.БизнесПроцесс = ЗНАЧЕНИЕ(БизнесПроцесс.БизнесПроцессы.ПустаяСсылка)
	                      |			ИЛИ НЕ Мероприятие.БизнесПроцесс.ПометкаУдаления)
	                      |	И НЕ Мероприятие.Выполнена
	                      |	И НЕ Мероприятие.ТипМероприятия В (&ТипМероприятия)
	                      |	И (Мероприятие.Ответственный.Родители ПОДОБНО ОтвСотр.ТипСотрудника.РодителиШаблон
	                      |			ИЛИ Мероприятие.Ответственный В (&Ответственный)
	                      |			ИЛИ Мероприятие.Исполнитель В (&Ответственный))
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ОтвМер.Ссылка,
	                      |	МАКСИМУМ(ОтвМер.Глубина) КАК Глубина
	                      |ПОМЕСТИТЬ ОтвМакс
	                      |ИЗ
	                      |	ОтвМер КАК ОтвМер
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ОтвМер.Ссылка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	МАКСИМУМ(ОтвМер.Главный) КАК Главный,
	                      |	ОтвМер.Ссылка КАК Мероприятие,
	                      |	ОтвМер.ВремяНачала КАК ВремяНачала,
	                      |	ОтвМер.ВремяКонца КАК ВремяКонца,
	                      |	ОтвМер.Выполнена,
	                      |	ОтвМер.Объект,
	                      |	ОтвМер.ПланируемаяДата,
	                      |	ОтвМер.Ответственный КАК Пользователь
	                      |ИЗ
	                      |	ОтвМер КАК ОтвМер
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ОтвМакс КАК ОтвМакс
	                      |		ПО ОтвМер.Ссылка = ОтвМакс.Ссылка
	                      |			И ОтвМер.Глубина = ОтвМакс.Глубина
	                      |ГДЕ
	                      |	(ОтвМер.Пользователь В (&Ответственный)
	                      |				И НЕ ОтвМакс.Ссылка ЕСТЬ NULL 
	                      |			ИЛИ ОтвМер.Ответственный В (&Ответственный)
	                      |			ИЛИ ОтвМер.Исполнитель В (&Ответственный))
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ОтвМер.Ссылка,
	                      |	ОтвМер.ВремяНачала,
	                      |	ОтвМер.ВремяКонца,
	                      |	ОтвМер.Выполнена,
	                      |	ОтвМер.Объект,
	                      |	ОтвМер.ПланируемаяДата,
	                      |	ОтвМер.Ответственный
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ВремяНачала,
	                      |	ВремяКонца");			  						  
	Запрос.УстановитьПараметр("Ответственный", СписокПользователей);
	Запрос.УстановитьПараметр("ТипМероприятия", СписокНеотображаемыхТипов);
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		СтрТЧ = ЗапланированныеТЗ.Добавить(); 
		СтрТЧ.ПланируемаяДата         = Результат.ПланируемаяДата;
		СтрТЧ.Ссылка                  = Результат.Мероприятие;
       	СтрТЧ.Пользователь            = Результат.Пользователь;
		СтрТЧ.Объект                  = Результат.Объект;    
		СтрТЧ.Контрагент              = Результат.Объект;
		СтрТЧ.ДоговорыКонтрагентов    = Результат.Объект;
		СтрТЧ.УслугиПоДоговору        = Результат.Объект;
		СтрТЧ.ДолговыеОбязательства   = Результат.Объект;
		СтрТЧ.ИсполнительныеДокументы = Результат.Объект;	
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметр(Параметр, Значение, Использование = Истина)
	ПараметрДанных = Запланированные.Параметры.Элементы.Найти(Параметр);
	ПараметрДанных.Значение = Значение;
	ПараметрДанных.Использование = Использование;	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтбор(Поле, Значение, НомерПоля = 1)
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(Поле);	
	Для Каждого ЭлементОтбора Из Выполненные.Отбор.Элементы Цикл		
		Если ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			Если НомерПоля = 1 Тогда
				ЭлементОтбора.ПравоеЗначение = Значение;
				Прервать;
			Иначе
				НомерПоля = НомерПоля - 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	Если Объект.Дата > Объект.ДатаКонца Тогда
		Объект.ДатаКонца = Объект.Дата + 2 * 24 * 3600;
	КонецЕсли;
		
	//УстановитьОтбор("ФактическаяДата", НачалоДня(Объект.Дата), 1);
	//Если Объект.Интервал = 0 Тогда
	//	УстановитьОтбор("ФактическаяДата", КонецДня(Объект.Дата) + 1, 2);
	//ИначеЕсли Объект.Интервал = 1 Тогда
	//	//
	//ИначеЕсли Объект.Интервал = 2 Тогда
	//	УстановитьОтбор("ФактическаяДата", КонецДня(Объект.ДатаКонца) + 1, 2);
	//КонецЕсли;
	
	Если Элемент <> Неопределено Тогда
		// Чтобы не выполнять заного запрос для ЗапланированныеТЗ 
		НеОбновляемЗапланированныеТЗ = Истина;
		ОбновитьТД(НеОбновляемЗапланированныеТЗ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаКонцаПриИзменении(Элемент)
	Если Объект.Дата > Объект.ДатаКонца Тогда
		Объект.Дата = Объект.ДатаКонца - 7 * 24 * 3600;
	КонецЕсли;
	
	//УстановитьОтбор("ФактическаяДата", НачалоДня(Объект.Дата), 1);
	//УстановитьОтбор("ФактическаяДата", КонецДня(Объект.ДатаКонца) + 1, 2);	
	// Чтобы не выполнять заного запрос для ЗапланированныеТЗ 
	НеОбновляемЗапланированныеТЗ = Истина;
	ОбновитьТД(НеОбновляемЗапланированныеТЗ);
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьВыполненныеПриИзменении(Элемент)
	ПроверкаГруппироватьМероприятия();
	// Чтобы не выполнять заного запрос для ЗапланированныеТЗ 
	НеОбновляемЗапланированныеТЗ = Истина;
	ОбновитьТД(НеОбновляемЗапланированныеТЗ);
	ОтменаСобытияЗапланированныеПриАктивизацииЯчейки = Ложь;
КонецПроцедуры

&НаСервере
Процедура ОбновитьТД(НеОбновляемЗапланированныеТЗ)
	ТабДокИсторияДО.Очистить();
	Если Не НеОбновляемЗапланированныеТЗ Тогда
		ЗапланированныеТЗ.Очистить();
	КонецЕсли;
	Если Объект.Интервал = 0 Тогда
		ЗаполнитьРасписание();
		ЗаполнитьСписокМероприятий();
		Планировщик.ЗаполнитьТДДень(ТабличныйДокумент, Объект, СписокВремен, Расписание, КоличествоКолонок, СписокМероприятий);	
		ЗаполнитьСписокМероприятийТЗ();
	ИначеЕсли Объект.Интервал = 1 Тогда	
		Планировщик.ЗаполнитьТДНеделя();		
	ИначеЕсли Объект.Интервал = 2 Тогда		
		Планировщик.ЗаполнитьТДПроизвольный(ТабличныйДокумент, Объект, СписокПользователей, ОтображатьВыполненные, 
				СписокНеотображаемыхТипов, ГруппироватьМероприятия, ЗапланированныеТЗ, НеОбновляемЗапланированныеТЗ);		
	КонецЕсли;
	НеОбновляемЗапланированныеТЗ = Ложь;		
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалПриИзменении(Элемент)
	Если Объект.Интервал = 0 Тогда		
		Элементы.ДатаКонца.Доступность = Ложь;		
	ИначеЕсли Объект.Интервал = 1 Тогда		
		Элементы.ДатаКонца.Доступность = Истина;		
	ИначеЕсли Объект.Интервал = 2 Тогда		
		Элементы.ДатаКонца.Доступность = Истина;		
	КонецЕсли;	
	
	Если Элемент <> Неопределено Тогда
		// Чтобы не выполнять заного запрос для ЗапланированныеТЗ 
		НеОбновляемЗапланированныеТЗ = Ложь;
		ОбновитьТД(НеОбновляемЗапланированныеТЗ);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	СписокПользователей.Очистить();	
	Если ТипЗнч(Объект.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		СписокПользователей.Добавить(Объект.Пользователь);		
	ИначеЕсли ТипЗнч(Объект.Пользователь) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда 
		// Когда первый раз выбирается подразделение, а не конкретный пользователь, то отрабатывает 
		// данное событие, но само подразделение ещё не выбрано.
		Если Объект.Пользователь.Пустая() Тогда
			Возврат;	
		КонецЕсли;
		ЗаполнитьСписокПользователей(Объект.Пользователь, СписокПользователей);
	КонецЕсли;
	
	//Если ТипЗнч(Объект.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
	//	УстановитьПараметр("Сотрудник", Объект.Пользователь);
	//	УстановитьПараметр("Подразделение", Неопределено);
	//Иначе
	//	УстановитьПараметр("Сотрудник", Неопределено);
	//	УстановитьПараметр("Подразделение", Объект.Пользователь);
	//КонецЕсли;
	//УстановитьОтбор("Исполнитель", СписокПользователей);
	Заголовок = Строка(Объект.Пользователь);
	НеОбновляемЗапланированныеТЗ = Ложь;	
	ОбновитьТД(НеОбновляемЗапланированныеТЗ);	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьТД" Тогда
		НеОбновляемЗапланированныеТЗ = Ложь;
		ОбновитьТД(НеОбновляемЗапланированныеТЗ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновить(Команда)  
	Попытка
		Элементы.Запланированные.Обновить();  
	Исключение
	КонецПопытки;
	Попытка
		Элементы.Выполненные.Обновить(); 
	Исключение 
	КонецПопытки;   
	НеОбновляемЗапланированныеТЗ = Ложь;
	ОбновитьТД(НеОбновляемЗапланированныеТЗ);
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Элемент.ТолькоПросмотр = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Элемент.ТолькоПросмотр = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	СтандартнаяОбработка = Ложь;
	ОбластьСтарая = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	ОбластьНовая = Область.Имя;
	
	Если Объект.Интервал = 0 Тогда	
		ТабличныйДокументПеретаскиваниеДень(ОбластьСтарая, ОбластьНовая, Область);
	ИначеЕсли Объект.Интервал = 1 Тогда	
		//
	ИначеЕсли Объект.Интервал = 2 Тогда
		ТабличныйДокументПеретаскиваниеПроизвольный(ОбластьСтарая, ОбластьНовая, Область);		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПеретаскиваниеДень(ОбластьСтарая, ОбластьНовая, Область)
	Номер = Найти(ОбластьСтарая, "C");
	СтрокаСтарая = Лев(ОбластьСтарая, Номер - 1);
	Номер = Найти(ОбластьНовая, "C");
	СтрокаНовая = Лев(ОбластьНовая, Номер - 1);		
	Если СтрокаСтарая = СтрокаНовая ИЛИ (ЭтоТонкаяЯчейка(СтрокаСтарая) И 
			Элементы.ТабличныйДокумент.ТекущаяОбласть.Верх = Элементы.ТабличныйДокумент.ТекущаяОбласть.Низ) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаСтарая = СдвинутьСтрокуЯчейки(СтрокаСтарая, Ложь); 
	СтрокаНовая = СдвинутьСтрокуЯчейки(СтрокаНовая, Истина);
	
	СтрокаСтараяКонец = ОбластьСтарая;
	Номер = Найти(СтрокаСтараяКонец, ":");
	Если Номер > 0 Тогда
		СтрокаСтараяКонец = Сред(СтрокаСтараяКонец, Номер + 1);
	КонецЕсли;
	Номер = Найти(СтрокаСтараяКонец, "C");
	СтрокаСтараяКонец = Лев(СтрокаСтараяКонец, Номер - 1);
			
	//1) Определить величину сдвига по времени
	ВремяСтарое = Неопределено;
	ВремяНовое = Неопределено;
	ВремяСтароеКонец = Неопределено;
	Для Каждого Элемент Из СписокВремен Цикл	
		Если ВремяСтарое = Неопределено И Элемент.Представление = СтрокаСтарая Тогда
			ВремяСтарое = Элемент.Значение;
		ИначеЕсли ВремяНовое = Неопределено И Элемент.Представление = СтрокаНовая Тогда
			ВремяНовое = Элемент.Значение;
		КонецЕсли;
		Если ВремяСтароеКонец = Неопределено И Элемент.Представление = СтрокаСтараяКонец Тогда
			ВремяСтароеКонец = Элемент.Значение;
		КонецЕсли;
			
		Если ВремяСтарое <> Неопределено И ВремяНовое <> Неопределено И ВремяСтароеКонец <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;	
		
	ВремяСдвиг = ВремяНовое - ВремяСтарое;
	Если ВремяСтароеКонец = Неопределено Тогда
		ВремяСтароеКонец = Дата(1,1,1,23,59,59);
	КонецЕсли;
	
	//3) Перенести мероприятия в транзакции и обновить поле ТД
	Если ПеретаскиваниеНаСервере(ВремяСтарое, ВремяСтароеКонец, ВремяСдвиг) Тогда
		Элементы.ТабличныйДокумент.ТекущаяОбласть = Область;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПеретаскиваниеПроизвольный(ОбластьСтарая, ОбластьНовая, Область)
	Номер = Найти(ОбластьСтарая, "C");
	СтолбецСтарый = Сред(ОбластьСтарая, Номер);
	Номер = Найти(ОбластьНовая, "C");
	СтолбецНовый = Сред(ОбластьНовая, Номер);
	//Если СтолбецСтарый = СтолбецНовый ИЛИ (ЭтоТонкаяЯчейка(СтолбецСтарый) И 
	//		Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево = Элементы.ТабличныйДокумент.ТекущаяОбласть.Право) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//СтолбецСтарый = СдвинутьСтолбецЯчейки(СтолбецСтарый, Ложь); 
	//СтолбецНовый = СдвинутьСтолбецЯчейки(СтолбецНовый, Истина);
	
	////3) Перенести мероприятия в транзакции и обновить поле ТД
	//Если ПеретаскиваниеНаСервереПроизвольныйИнтервал(ВремяСтарое, ВремяСтароеКонец, ВремяСдвиг) Тогда
	//	Элементы.ТабличныйДокумент.ТекущаяОбласть = Область;
	//КонецЕсли;
КонецПроцедуры

&НаСервере
//День
Функция ПеретаскиваниеНаСервере(ВремяСтарое, ВремяСтароеКонец, ВремяСдвиг)
	Результат = Истина;
	НачатьТранзакцию();
	Для Каждого Элемент Из СписокМероприятий Цикл 
		Если Элемент.ВремяНачала >= ВремяСтарое И Элемент.ВремяНачала <= ВремяСтароеКонец Тогда
			ОбъектМ = Элемент.Мероприятие.ПолучитьОбъект();
			ОбъектМ.ПланируемоеВремя = ОбъектМ.ПланируемоеВремя + ВремяСдвиг;
			Если ОбъектМ.ПланируемоеВремя > Дата(1,1,1,23,59,59) Тогда
				ОбъектМ.ПланируемоеВремя = Дата(1,1,1,23,59,59);
			КонецЕсли;	
			Если ЗначениеЗаполнено(ОбъектМ.ПланируемоеВремяКонца) Тогда
				ОбъектМ.ПланируемоеВремяКонца = ОбъектМ.ПланируемоеВремяКонца + ВремяСдвиг;
				Если ОбъектМ.ПланируемоеВремяКонца > Дата(1,1,1,23,59,59) Тогда
					ОбъектМ.ПланируемоеВремяКонца = Дата(1,1,1,23,59,59);
				КонецЕсли;
			КонецЕсли;
			
			Попытка
				ОбъектМ.Записать();
			Исключение
				ОтменитьТранзакцию();
				Результат = Ложь;
				Прервать;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;	
	
	Если Результат Тогда
		ЗафиксироватьТранзакцию();
		НеОбновляемЗапланированныеТЗ = Ложь;
		ОбновитьТД(НеОбновляемЗапланированныеТЗ);
	КонецЕсли;	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПеретаскиваниеНаСервереПроизвольныйИнтервал(ВремяСтарое, ВремяСтароеКонец, ВремяСдвиг)
	
КонецФункции

&НаКлиенте
//День
Функция СдвинутьСтрокуЯчейки(Знач ИмяЯчейки, МинусСтрока = Истина)
	СтрокаЧисло = Число(Сред(ИмяЯчейки, 2));
	Если СтрокаЧисло % 2 = 0 Тогда
		ИмяЯчейки = "R" + Формат(СтрокаЧисло + ?(МинусСтрока, -1, 1), "ЧН=; ЧГ=");
	КонецЕсли;
	Возврат ИмяЯчейки;	
КонецФункции

&НаКлиенте
//Произвольный
Функция СдвинутьСтолбецЯчейки(Знач ИмяЯчейки, МинусСтолбец = Истина)
	СтолбецЧисло = Число(Сред(ИмяЯчейки, 2));
	Если СтолбецЧисло % 2 = 0 Тогда
		ИмяЯчейки = "C" + Формат(СтолбецЧисло + ?(МинусСтолбец, -1, 1), "ЧН=; ЧГ=");
	КонецЕсли;
	Возврат ИмяЯчейки;	
КонецФункции

&НаКлиенте
//День
Функция ЭтоТонкаяЯчейка(ИмяЯчейки)
	СтрокаЧисло = Число(Сред(ИмяЯчейки, 2));
	Возврат СтрокаЧисло % 2 = 0;
КонецФункции

&НаКлиенте
Процедура ЗапланированныеПриАктивизацииЯчейки(Элемент)
	Если ОтменаСобытияЗапланированныеПриАктивизацииЯчейки Тогда
		//Возврат;
	КонецЕсли;
	Попытка
		ВыбранноеМероприятие = Элемент.ТекущиеДанные.Ссылка;				
	Исключение
		Возврат;
	КонецПопытки;
	Если ГруппироватьМероприятия Тогда
		ТипМероприятия = ОбъектыСервер.РазыменоватьСсылку(ВыбранноеМероприятие, "ТипМероприятия");
		Если Не ЗаполненыРеквизиты() Тогда
			Элементы.МероприятияВыполнить.Доступность = Ложь;			
		Иначе
			Элементы.МероприятияВыполнить.Доступность = Истина;
		КонецЕсли;
		Мероприятия.Очистить();
		ВариантКод.Очистить();
		УбратьВидимость();	
		Результат = ЗаполнитьМероприятия();
		Сч = 1;
		Для Каждого Эл Из Результат Цикл
			Элементы["Вариант" + Строка(Сч)].Заголовок =  Строка(Эл);
			Элементы["Вариант" + Строка(Сч)].Видимость = Истина;
			ВариантКод.Добавить(Эл, "Вариант" + Строка(Сч));
			Сч = Сч + 1;	
		КонецЦикла;	
		ЗаполнитьТаблЧасть();
	Иначе
		ЗаполнитьИсториюПоДО(ВыбранноеМероприятие);
	КонецЕсли;
	ОтменаСобытияЗапланированныеПриАктивизацииЯчейки = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	//Если Не ОтменаСобытияЗапланированныеПриАктивизацииЯчейки Тогда	
		Если ВыбранноеМероприятие <> Элементы.ТабличныйДокумент.ТекущаяОбласть.Расшифровка Тогда
			Если Не Элементы.ТабличныйДокумент.ТекущаяОбласть.Расшифровка = Неопределено Тогда
				ВыбранноеМероприятие = Элементы.ТабличныйДокумент.ТекущаяОбласть.Расшифровка;
			КонецЕсли;
			Элементы.Запланированные.ТекущаяСтрока = ?(ОбъектыСервер.РазыменоватьСсылку(ВыбранноеМероприятие, "Выполнена"), 
			Неопределено, ВыбранноеМероприятие);		
			Если Не ГруппироватьМероприятия Тогда
				ЗаполнитьИсториюПоДО(ВыбранноеМероприятие);
			КонецЕсли;	
		КонецЕсли;
	//КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсториюПоДО(МероприятиеСсылка)
	ОбъектыСервер.ЗаполнитьОтчетОбъекта(МероприятиеСсылка, ТабДокИсторияДО, Константы.ОтчетДляПланировщика);	
	ОтменаСобытияЗапланированныеПриАктивизацииЯчейки = Истина;
КонецПроцедуры

&НаСервере
Функция ПолучитьКолонкуКомментариев(СсылкаДО)
	Запрос = Новый Запрос("ВЫБРАТЬ
			|	Мероприятие.ТипМероприятия,
			|	Мероприятие.ФактическаяДата КАК ФактическаяДата,
			|	Мероприятие.Комментарий
			|ИЗ
			|	Задача.Мероприятие КАК Мероприятие
			|ГДЕ
			|	Мероприятие.ФактическаяДата МЕЖДУ &НачалоПериода И &КонецПериода
			|	И Мероприятие.Выполнена
			|	И (Мероприятие.Объект = &ДО
	        |			ИЛИ Мероприятие.Объект.Владелец = &ДО)
			|	И (НЕ Мероприятие.ПометкаУдаления)
			|	И (Мероприятие.БизнесПроцесс = ЗНАЧЕНИЕ(БизнесПроцесс.БизнесПроцессы.ПустаяСсылка)
			|		ИЛИ (НЕ Мероприятие.БизнесПроцесс.ПометкаУдаления))
			|
			|УПОРЯДОЧИТЬ ПО
			|	ФактическаяДата");
	Запрос.УстановитьПараметр("НачалоПериода", Дата(1,1,1));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Объект", СсылкаДО);
	
	
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Номер = 1;
	СтрокаДействий = "";
	Пока Выборка.Следующий() Цикл
		//Если Отчет.ОтчетПоТипамМероприятий Тогда
		//	СтрокаТМП = Формат(Номер, "ЧГ=") + ") " + Формат(Выборка.ФактическаяДата, "ДЛФ=Д") + " " + 
		//	Выборка.ТипМероприятия + " " + ?(Выборка.Комментарий = "", "", " <" + Выборка.Комментарий + ">");
		//	СтрокаДействий = СтрокаДействий + СтрокаТМП + Символы.ПС;
		//	Номер = Номер + 1;
		//	
		//Иначе
			Если Выборка.Комментарий = "" Тогда
				СтрокаТМП = "";
			Иначе
				СтрокаТМП = Формат(Номер, "ЧГ=") + ") " + Выборка.Комментарий;
				СтрокаДействий = СтрокаДействий + СтрокаТМП + Символы.ПС;
				Номер = Номер + 1;
			КонецЕсли;	
		//КонецЕсли;
	КонецЦикла;
	Возврат СтрокаДействий;
КонецФункции

&НаКлиенте
Процедура ПользовательОчистка(Элемент, СтандартнаяОбработка)
	Объект.Пользователь = Неопределено;
	Элемент.ВыбиратьТип = Истина;
	Элемент.КнопкаВыбора = Истина;
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПользовательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Объект.Пользователь) Тогда
		Элементы.Пользователь.ВыбиратьТип = Ложь;
	Иначе 
		Элементы.Пользователь.ВыбиратьТип = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокПользователей(Подразделение, Список)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Пользователи.Ссылка
	                      |ИЗ
	                      |	Справочник.Пользователи КАК Пользователи
	                      |ГДЕ
	                      |	Пользователи.Подразделение = &Подразделение");	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		Список.Добавить(Выборка.Ссылка);
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокНеотображаемыхТипов();
    Запрос = Новый Запрос("ВЫБРАТЬ
                          |	ТипыМероприятий.Ссылка
                          |ИЗ
                          |	Справочник.ТипыМероприятий КАК ТипыМероприятий
                          |ГДЕ
                          |	ТипыМероприятий.НеОтображатьВПланировщике");
	СписокНеотображаемыхТипов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
КонецПроцедуры

// При установке флажка "Группировать по типам" процедура скрывает ТабДок "История",
// механизм пакетной обработки мероприятий становится видим.
&НаКлиенте
Процедура ПроверкаГруппироватьМероприятия()
	Если ГруппироватьМероприятия Тогда
		Элементы.ТипМероприятия.Видимость  = Истина;
		Элементы.Мероприятия.Видимость     = Истина;
		Элементы.ТабДокИсторияДО.Видимость = Ложь;
		ТипМероприятия = ОбъектыСервер.РазыменоватьСсылку(ВыбранноеМероприятие, "ТипМероприятия");
	Иначе
		Элементы.ТипМероприятия.Видимость  = Ложь;
		Элементы.Мероприятия.Видимость     = Ложь;
		Элементы.ТабДокИсторияДО.Видимость = Истина;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьТЧ(Команда)
	Результат = Вопрос("Произвести присваивание результатов мероприятиям?", РежимДиалогаВопрос.ОКОтмена, 20, КодВозвратаДиалога.Отмена, 
			"Подтверждение действий", КодВозвратаДиалога.Отмена); 
	Если Результат = КодВозвратаДиалога.Таймаут Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;	
	КонецЕсли;	
	ВыполнитьТЧ_Сервер();		
КонецПроцедуры
	
&НаКлиенте 
Процедура УбратьВидимость()
	Элементы.МероприятияОбъектТЧ.Видимость = Ложь;
	Элементы.Вариант1.Видимость = Ложь;
	Элементы.Вариант2.Видимость = Ложь;
	Элементы.Вариант3.Видимость = Ложь;
	Элементы.Вариант4.Видимость = Ложь;
	Элементы.Вариант5.Видимость = Ложь;
	Элементы.Вариант6.Видимость = Ложь;
	Элементы.Вариант7.Видимость = Ложь;	
	Элементы.Вариант8.Видимость = Ложь;
	Элементы.Вариант9.Видимость = Ложь;
	Элементы.Вариант10.Видимость = Ложь;
	Элементы.Вариант11.Видимость = Ложь;
	Элементы.Вариант12.Видимость = Ложь;
	Элементы.Вариант13.Видимость = Ложь;
	Элементы.Вариант14.Видимость = Ложь;
	Элементы.Вариант15.Видимость = Ложь;	
	ОтменаСобытияЗапланированныеПриАктивизацииЯчейки = Истина;
КонецПроцедуры

&НаКлиенте
Функция ЗаполненыРеквизиты()
	// Вывод сообщений отменён до просьбе заказчика.
	ОчиститьСообщения();
	Проверка = Истина;
	Если Объект.Пользователь.Пустая() Тогда
		//Сообщение = Новый СообщениеПользователю; 
		//Сообщение.Текст = "Необходимо заполнить поле ""Пользователь"""; 
		//Сообщение.Поле = "Пользователь"; //"Имя ПоляФормы";   
		//Сообщение.УстановитьДанные(ЭтаФорма);
		//Сообщение.Сообщить();
	Проверка = Ложь;
	КонецЕсли;   
	Если Не Проверка Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ЗаполнитьМероприятия()
	// Переименовываем колонки, имена берем из запроса.
	// Для не используемых колонкок убиваем видимость для пользователя.
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РезультатыМероприятий.Ссылка
	                      |ИЗ
	                      |	Справочник.РезультатыМероприятий КАК РезультатыМероприятий
	                      |ГДЕ
	                      |	РезультатыМероприятий.Владелец = &ТипМероприятия
	                      |	И РезультатыМероприятий.ПометкаУдаления = ЛОЖЬ
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	РезультатыМероприятий.Наименование");
	Запрос.УстановитьПараметр("ТипМероприятия", ТипМероприятия);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"); 
	// Каждая колонка является по сути одним из результатов справочника РезультатыМероприятий.
	// ВариантКод служит, чтобы по выбранному флажку определить ссылку элемента справочника РезультатыМероприятий. 
	Если Результат.Количество() > 15 Тогда
		Сообщить("Вариантов результата у данного типа мероприятия более 15 (Можно выбрать только первые 15)");
	КонецЕсли;
	Возврат Результат; 
КонецФункции

// Процедура подставляет выбранный вариант (флажком) результата в мероприятие.
&НаСервере
Процедура ВыполнитьТЧ_Сервер()
	ЕстьПометка = Ложь;
	Для Каждого Эл Из Мероприятия Цикл
		Если Эл.Пометка Тогда
			ЕстьПометка = Истина;
			Сч = 1;
			Пока Сч <= ВариантКод.Количество() Цикл
				Если Вычислить("Эл.Вариант" + Строка(Сч)) Тогда
					ЭлОбъект = Эл.Мероприятие.ПолучитьОбъект();
					ЭлОбъект.Результат = ВариантКод[Сч - 1].Значение;				
					ЭлОбъект.Автор = ПараметрыСеанса.ТекущийПользователь;
					ЭлОбъект.ФактическаяДата = ТекущаяДата();
					Отказ = Ложь;
					ЭлОбъект.ВыполнитьМероприятиеКакНеАктуальное(Отказ);
				КонецЕсли;
				Сч = Сч + 1;	
			КонецЦикла;		
		КонецЕсли;
	КонецЦикла;
	Если Не ЕстьПометка Тогда
		Сообщить("Не выбрано ни одного варианта результата мероприятий!");
		Возврат;
	КонецЕсли;
	Мероприятия.Очистить();
	ВариантКод.Очистить();
	ЗаполнитьМероприятия();
	ЗаполнитьТаблЧасть();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблЧасть()
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Мероприятие2.Ссылка КАК Ссылка,
	                      |	Мероприятие2.Объект
	                      |ИЗ
	                      |	(ВЫБРАТЬ
	                      |		Мероприятие.Ссылка КАК Ссылка,
	                      |		ВЫБОР
	                      |			КОГДА ТИПЗНАЧЕНИЯ(Мероприятие.Объект) = ТИП(Справочник.ИсполнительныеДокументы)
	                      |					ИЛИ ТИПЗНАЧЕНИЯ(Мероприятие.Объект) = ТИП(Справочник.УслугиПоДоговору)
	                      |				ТОГДА Мероприятие.Объект.Владелец
	                      |			ИНАЧЕ Мероприятие.Объект
	                      |		КОНЕЦ КАК Объект2,
	                      |		МАКСИМУМ(ТипыСотрудников.Глубина) КАК Глубина
	                      |	ИЗ
	                      |		РегистрНакопления.ОбъектыВРаботе.Остатки(
	                      |				,
	                      |				Сотрудник = &Сотрудник
	                      |					ИЛИ Подразделение = &Подразделение) КАК ОбъектыВРаботеОстатки
	                      |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.Мероприятие КАК Мероприятие
	                      |			ПО (ОбъектыВРаботеОстатки.Объект = Мероприятие.Объект
	                      |					ИЛИ ОбъектыВРаботеОстатки.Объект = Мероприятие.Объект.Владелец)
	                      |				И (Мероприятие.Выполнена = ЛОЖЬ)
	                      |				И (НЕ Мероприятие.ПометкаУдаления)
	                      |				И (Мероприятие.БизнесПроцесс = ЗНАЧЕНИЕ(БизнесПроцесс.БизнесПроцессы.ПустаяСсылка)
	                      |					ИЛИ НЕ Мероприятие.БизнесПроцесс.ПометкаУдаления)
	                      |				И (НЕ Мероприятие.ТипМероприятия.НеОтображатьВПланировщике)
	                      |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеСотрудники КАК ОтветственныеСотрудники
	                      |				ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ТипыСотрудников КАК ТипыСотрудников
	                      |				ПО ОтветственныеСотрудники.ТипСотрудника = ТипыСотрудников.Ссылка
	                      |			ПО (ОтветственныеСотрудники.Объект = ОбъектыВРаботеОстатки.Объект)
	                      |	ГДЕ
	                      |		НЕ Мероприятие.ПометкаУдаления
	                      |		И (Мероприятие.БизнесПроцесс = ЗНАЧЕНИЕ(БизнесПроцесс.БизнесПроцессы.ПустаяСсылка)
	                      |				ИЛИ НЕ Мероприятие.БизнесПроцесс.ПометкаУдаления)
	                      |		И (Мероприятие.Ответственный.Родители ПОДОБНО ТипыСотрудников.РодителиШаблон
	                      |				ИЛИ ТИПЗНАЧЕНИЯ(Мероприятие.Ответственный) = ТИП(Справочник.Пользователи))
	                      |	
	                      |	СГРУППИРОВАТЬ ПО
	                      |		Мероприятие.Ссылка,
	                      |		ВЫБОР
	                      |			КОГДА ТИПЗНАЧЕНИЯ(Мероприятие.Объект) = ТИП(Справочник.ИсполнительныеДокументы)
	                      |					ИЛИ ТИПЗНАЧЕНИЯ(Мероприятие.Объект) = ТИП(Справочник.УслугиПоДоговору)
	                      |				ТОГДА Мероприятие.Объект.Владелец
	                      |			ИНАЧЕ Мероприятие.Объект
	                      |		КОНЕЦ) КАК ОтвМакс
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеСотрудники КАК ОтветственныеСотрудники2
	                      |			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ТипыСотрудников КАК ТипыСотрудников2
	                      |			ПО ОтветственныеСотрудники2.ТипСотрудника = ТипыСотрудников2.Ссылка
	                      |		ПО (ОтветственныеСотрудники2.Объект = ОтвМакс.Объект2)
	                      |			И (ТипыСотрудников2.Глубина = ОтвМакс.Глубина)
	                      |			И (&Сотрудник = НЕОПРЕДЕЛЕНО
	                      |				ИЛИ ОтветственныеСотрудники2.Пользователь = &Сотрудник)
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Задача.Мероприятие КАК Мероприятие2
	                      |		ПО ОтвМакс.Ссылка = Мероприятие2.Ссылка
	                      |ГДЕ
	                      |	Мероприятие2.ТипМероприятия = &ТипМероприятия");
	Запрос.УстановитьПараметр("Подразделение", Объект.Пользователь.Подразделение);
	Запрос.УстановитьПараметр("Сотрудник", Объект.Пользователь);
	Запрос.УстановитьПараметр("ТипМероприятия", ТипМероприятия);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Количество() = 0 Тогда	
		Элементы.МероприятияВыполнить.Доступность = Ложь;	
	КонецЕсли;
	Элементы.МероприятияОбъектТЧ.Видимость = Истина;
    Пока Результат.Следующий() Цикл
   		Эл = Мероприятия.Добавить();
		Эл.Мероприятие = Результат.Ссылка;
		Эл.ОбъектТЧ = Результат.Объект;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ВариантПриИзменении(Элемент)
	ЭлВыбранный = Элемент.Имя;
	ТекДанные = Элементы.Мероприятия.ТекущиеДанные;
	ФлажокЭлВыбранный = Ложь;
	Выполнить("ФлажокЭлВыбранный = ТекДанные." + ЭлВыбранный + ";");	
	Сч = 1;
	Пока Сч <= ВариантКод.Количество() Цикл		
		Выполнить("ТекДанные.Вариант" + Строка(Сч)+ " = Ложь;");
		Сч = Сч + 1;	
	КонецЦикла;	
	Выполнить("ТекДанные." + Строка(ЭлВыбранный) + " = ФлажокЭлВыбранный;");
	ТекДанные.Пометка = ФлажокЭлВыбранный;	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	Для Каждого  Эл Из Мероприятия Цикл
		Сч = 1;
		Пока Сч <= ВариантКод.Количество() Цикл
			Выполнить("Эл.Вариант" + Строка(Сч)+ " = Ложь;");
	        Сч = Сч + 1;
		КонецЦикла;;
		Попытка
			Выполнить("Эл." + Элементы.Мероприятия.ТекущийЭлемент.Имя + " = Истина;");
			Эл.Пометка = Истина;	
		Исключение
			ОчиститьСообщения();
			Сообщить("Не выбран ни один из вариантов результатов");
			Возврат;	
		КонецПопытки;
	КонецЦикла;		
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	Для Каждого Эл Из Мероприятия Цикл
		Сч = 1;
		Пока Сч <= ВариантКод.Количество() Цикл
			Выполнить("Эл.Вариант" + Строка(Сч) + " = Ложь;");
	        Сч = Сч + 1;
		КонецЦикла;;
		Эл.Пометка = Ложь;	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеПретензионногоПисьма(Команда)
	НоваяФорма = ПолучитьФорму("Документ.ФормированиеПретензионногоПисьма.Форма.ФормаДокумента");
	ТабЧасть = НоваяФорма.Объект.Объекты;
	Для Каждого Эл Из Мероприятия Цикл
		Если Эл.Пометка Тогда
			НовСтр                        = ТабЧасть.Добавить();
			НовСтр.Объект                 = Эл.ОбъектТЧ;
			НовСтр.ДоговорКонтрагента     = Эл.ОбъектТЧ;
			НовСтр.ДолговоеОбязательство  = Эл.ОбъектТЧ;
			НовСтр.ИсполнительныйДокумент = Эл.ОбъектТЧ;
			НовСтр.Контрагент             = Эл.ОбъектТЧ;
		КонецЕсли;	
	КонецЦикла;	
	НоваяФорма.Открыть();	
КонецПроцедуры

&НаКлиенте
Процедура ЗапланированныеТЗВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьЗначение(Элемент.ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ЗапланированныеТЗПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Создать(Команда)
	//Чурво
	открытьФорму("Задача.Мероприятие.Форма.ФормаМероприятия");		
	//ПолучитьФорму("Задача.Мероприятие.Форма.ФормаМероприятия").Открыть();		
КонецПроцедуры

&НаКлиенте
Процедура ЗапланированныеТЗПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Копирование;
КонецПроцедуры

&НаКлиенте
Процедура ЗапланированныеТЗПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

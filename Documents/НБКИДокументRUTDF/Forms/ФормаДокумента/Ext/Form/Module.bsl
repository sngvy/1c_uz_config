
&НаСервере
Функция СформироватьОтчетНаСервере()
		
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ТекстСообщенияФормирования = "";
	ТекстовыйДокумент = ДокОбъект.СформироватьФайлыВыгрузкиRUTDF(ТекстСообщенияФормирования);
	Сообщить(ТекстСообщенияФормирования);  
	Возврат ТекстовыйДокумент;
КонецФункции

&НаКлиенте
Процедура СформироватьОтчет(Команда) Экспорт
	Если Объект.Ссылка.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Сначала сохраните документ!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.НастройкаВыгрузки) И ЗначениеЗаполнено(Объект.ИмяФайла) Тогда
		КаталогФайловВыгрузки = КаталогВыгрузкиВызовСервер();
		Путь = КаталогФайловВыгрузки + "\" + Объект.ИмяФайла;		
		ТекстовыйДок = СформироватьОтчетНаСервере();  
		Попытка
			ТекстовыйДок.Записать(Путь, КодировкаТекста.ANSI, ,Ложь); 
			ТекстСообщения = "Выгрузка завершена!" + Символы.ПС + ТекстСообщения;
		Исключение    
			ТекстСообщения = "Произошла ошибка сохранения файла в папку!" + Символы.ПС + ТекстСообщения;
		КонецПопытки;
		
	Иначе  
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Не выбрана настройка для формирования отчета!";
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры 

&НаСервере
Функция КаталогВыгрузкиВызовСервер()
	Возврат Объект.НастройкаВыгрузки.КаталогДляВыгрузки;
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Объект.Операция = Перечисления.ВидыОперацийОтчетаRUTDF.B; 
		Объект.Дата = ТекущаяДата(); 
		Объект.Принято = Перечисления.СтатусыОтчетаНБКИ.ВОбработке;
	КонецЕсли;
	ПустойМассивОбъектов = Новый Массив;
	ПустойМассивОбъектов.Добавить(Справочники.ДолговыеОбязательства.ПустаяСсылка());
	ЗаписиДляКорректировки.Параметры.УстановитьЗначениеПараметра("ОбъектУчета", ПустойМассивОбъектов);
КонецПроцедуры

&НаСервере
Процедура НастройкаВыгрузкиПриИзмененииНаСервере()    	
	ИмяПользователя = Объект.НастройкаВыгрузки.ИмяПользователяНБКИ;
	Объект.ИмяФайла = Строка(ИмяПользователя) + "_" + КредитныеИстории.СформироватьСтрокуДаты(Объект.Дата);  
	Если Объект.Операция = Перечисления.ВидыОперацийОтчетаRUTDF.TUTDF Тогда
		Объект.ИмяФайла = "TUTDF_" + Объект.ИмяФайла;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВыгрузкиПриИзменении(Элемент) Экспорт
	НастройкаВыгрузкиПриИзмененииНаСервере();   
КонецПроцедуры

&НаСервере
Процедура ОбработатьОтказНаСервере()
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.ОбработатьRejectФайл();
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтказ(Команда)
	ОбработатьОтказНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПутьФайлаОтказаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбора.Заголовок = "Выберите файл REJET";
	
	Если ДиалогВыбора.Выбрать() Тогда
		ИмяФайлаОтказа = ДиалогВыбора.ПолноеИмяФайла;
		Объект.ПутьФайлаОтказа = ИмяФайлаОтказа;
		Текст = Новый ЧтениеТекста(ИмяФайлаОтказа);	
		Объект.ТекстФайлаОтказа  =  Текст.Прочитать(); 	
	КонецЕсли;
	
КонецПроцедуры     

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеВидимостью();
	ЗапретитьФормироватьОтчетПовторно();
	УправлениеПодписью();
	ДоступностьЭЦП();
	
КонецПроцедуры


&НаСервере
Процедура УправлениеВидимостью()  
	Если Объект.Операция = Перечисления.ВидыОперацийОтчетаRUTDF.A Тогда 
		Элементы.ГруппатчНовыеЗаписиА.ТолькоПросмотр = Ложь;  
		ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы.тчНовыеЗаписиА;
		Элементы.ГруппатчОбновляемыеЗаписиB.ТолькоПросмотр = Истина;
		Элементы.ГруппатчАннулируемыеЗаписиD.ТолькоПросмотр = Истина;
		Элементы.ГруппатчИсправляемыеЗаписиC.ТолькоПросмотр = Истина;
		Элементы.ГруппатчЗаписиTUTDF.ТолькоПросмотр = Истина; 
		Элементы.Принято.Доступность = Истина;
		
		Элементы.тчНовыеЗаписиАПодбор.Доступность = Истина;
		Элементы.тчНовыеЗаписиАПодборПоНастройкам.Доступность = Истина;  
		Элементы.тчНовыеЗаписиАПодборИзФайла.Доступность = Истина;
		
		Элементы.тчАннулируемыеЗаписиDПодбор.Доступность = Ложь;  
		Элементы.тчАннулируемыеЗаписиDПодборПоНастройкам.Доступность = Ложь;
		Элементы.тчАннулируемыеЗаписиDПодборИзФайла.Доступность = Ложь;
		
		Элементы.тчОбновляемыеЗаписиBПодбор.Доступность = Ложь;  
		Элементы.тчОбновляемыеЗаписиBПодборПоНастройкам.Доступность = Ложь;
		Элементы.тчОбновляемыеЗаписиBПодборИзФайла.Доступность = Ложь;
		
		Элементы.тчИсправляемыеЗаписиCПодбор.Доступность = Ложь;
		Элементы.тчИсправляемыеЗаписиCПодборПоНастройкам.Доступность = Ложь;
		Элементы.тчИсправляемыеЗаписиCПодборИзФайла.Доступность = Ложь;
		
		Элементы.тчЗаписиTUTDFПодбор.Доступность = Ложь;
		Элементы.тчЗаписиTUTDFПодборПоНастройкам.Доступность = Ложь; 
		Элементы.тчЗаписиTUTDFПодборИзФайла.Доступность = Ложь;

        Элементы.ФормаСформироватьОтчет.Доступность = Истина;

	ИначеЕсли Объект.Операция = Перечисления.ВидыОперацийОтчетаRUTDF.B Тогда
		Элементы.ГруппатчНовыеЗаписиА.ТолькоПросмотр = Истина;
		Элементы.ГруппатчОбновляемыеЗаписиB.ТолькоПросмотр = Ложь;
		ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы.тчОбновляемыеЗаписиB;
		Элементы.ГруппатчАннулируемыеЗаписиD.ТолькоПросмотр = Истина;
		Элементы.ГруппатчИсправляемыеЗаписиC.ТолькоПросмотр = Истина;
		Элементы.ГруппатчЗаписиTUTDF.ТолькоПросмотр = Истина;
		
		Элементы.тчНовыеЗаписиАПодбор.Доступность = Ложь;
		Элементы.тчНовыеЗаписиАПодборПоНастройкам.Доступность = Ложь;
		Элементы.тчНовыеЗаписиАПодборИзФайла.Доступность = Ложь;
		
		Элементы.тчАннулируемыеЗаписиDПодбор.Доступность = Ложь;  
		Элементы.тчАннулируемыеЗаписиDПодборПоНастройкам.Доступность = Ложь;
		Элементы.тчАннулируемыеЗаписиDПодборИзФайла.Доступность = Ложь;
		
		Элементы.тчОбновляемыеЗаписиBПодбор.Доступность = Истина;  
		Элементы.тчОбновляемыеЗаписиBПодборПоНастройкам.Доступность = Истина; 
		Элементы.тчОбновляемыеЗаписиBПодборИзФайла.Доступность = Истина;
		
		Элементы.тчИсправляемыеЗаписиCПодбор.Доступность = Ложь;
		Элементы.тчИсправляемыеЗаписиCПодборПоНастройкам.Доступность = Ложь;
		Элементы.тчИсправляемыеЗаписиCПодборИзФайла.Доступность = Ложь;
		
		Элементы.тчЗаписиTUTDFПодбор.Доступность = Ложь;
		Элементы.тчЗаписиTUTDFПодборПоНастройкам.Доступность = Ложь; 
		Элементы.тчЗаписиTUTDFПодборИзФайла.Доступность = Ложь;
		
		Элементы.Принято.Доступность = Истина;

        Элементы.ФормаСформироватьОтчет.Доступность = Истина;
		
	ИначеЕсли Объект.Операция = Перечисления.ВидыОперацийОтчетаRUTDF.C Тогда
		Элементы.ГруппатчНовыеЗаписиА.ТолькоПросмотр = Истина;
		Элементы.ГруппатчОбновляемыеЗаписиB.ТолькоПросмотр = Истина;
		Элементы.ГруппатчАннулируемыеЗаписиD.ТолькоПросмотр = Истина;
		Элементы.ГруппатчИсправляемыеЗаписиC.ТолькоПросмотр = Ложь; 
		ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы.тчИсправляемыеЗаписиC;
		Элементы.ГруппатчЗаписиTUTDF.ТолькоПросмотр = Истина;
		
		Элементы.тчНовыеЗаписиАПодбор.Доступность = Ложь;
		Элементы.тчНовыеЗаписиАПодборПоНастройкам.Доступность = Ложь;
		Элементы.тчНовыеЗаписиАПодборИзФайла.Доступность = Ложь;
		
		Элементы.тчАннулируемыеЗаписиDПодбор.Доступность = Ложь;  
		Элементы.тчАннулируемыеЗаписиDПодборПоНастройкам.Доступность = Ложь;   
		Элементы.тчАннулируемыеЗаписиDПодборИзФайла.Доступность = Ложь;
		
		Элементы.тчОбновляемыеЗаписиBПодбор.Доступность = Ложь;  
		Элементы.тчОбновляемыеЗаписиBПодборПоНастройкам.Доступность = Ложь;
		Элементы.тчОбновляемыеЗаписиBПодборИзФайла.Доступность = Ложь;		
		
		Элементы.тчИсправляемыеЗаписиCПодбор.Доступность = Истина;
		Элементы.тчИсправляемыеЗаписиCПодборПоНастройкам.Доступность = Истина;
		Элементы.тчИсправляемыеЗаписиCПодборИзФайла.Доступность = Истина;
		
		Элементы.тчЗаписиTUTDFПодбор.Доступность = Ложь;
		Элементы.тчЗаписиTUTDFПодборПоНастройкам.Доступность = Ложь; 
		Элементы.тчЗаписиTUTDFПодборИзФайла.Доступность = Ложь;

        Элементы.ФормаСформироватьОтчет.Доступность = Истина;

	ИначеЕсли Объект.Операция = Перечисления.ВидыОперацийОтчетаRUTDF.D Тогда
		Элементы.ГруппатчНовыеЗаписиА.ТолькоПросмотр = Истина;
		Элементы.ГруппатчОбновляемыеЗаписиB.ТолькоПросмотр = Истина;
		Элементы.ГруппатчАннулируемыеЗаписиD.ТолькоПросмотр = Ложь;  
		ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы.тчАннулируемыеЗаписиD;	
		Элементы.ГруппатчИсправляемыеЗаписиC.ТолькоПросмотр = Истина;  
		Элементы.ГруппатчЗаписиTUTDF.ТолькоПросмотр = Истина;
		
		Элементы.тчНовыеЗаписиАПодбор.Доступность = Ложь;
		Элементы.тчНовыеЗаписиАПодборПоНастройкам.Доступность = Ложь;
		Элементы.тчНовыеЗаписиАПодборИзФайла.Доступность = Ложь;
		
		Элементы.тчАннулируемыеЗаписиDПодбор.Доступность = Истина;  
		Элементы.тчАннулируемыеЗаписиDПодборПоНастройкам.Доступность = Истина;
		Элементы.тчАннулируемыеЗаписиDПодборИзФайла.Доступность = Истина;
		
		Элементы.тчОбновляемыеЗаписиBПодбор.Доступность = Ложь;  
		Элементы.тчОбновляемыеЗаписиBПодборПоНастройкам.Доступность = Ложь;
		Элементы.тчОбновляемыеЗаписиBПодборИзФайла.Доступность = Ложь;
		
		Элементы.тчИсправляемыеЗаписиCПодбор.Доступность = Ложь;
		Элементы.тчИсправляемыеЗаписиCПодборПоНастройкам.Доступность = Ложь; 
		Элементы.тчИсправляемыеЗаписиCПодборИзФайла.Доступность = Ложь;
		
		Элементы.тчЗаписиTUTDFПодбор.Доступность = Ложь;
		Элементы.тчЗаписиTUTDFПодборПоНастройкам.Доступность = Ложь; 
		Элементы.тчЗаписиTUTDFПодборИзФайла.Доступность = Ложь;

		Элементы.ФормаСформироватьОтчет.Доступность = Истина;

	ИначеЕсли Объект.Операция = Перечисления.ВидыОперацийОтчетаRUTDF.TUTDF Тогда
		Элементы.ГруппатчНовыеЗаписиА.ТолькоПросмотр = Истина;
		Элементы.ГруппатчОбновляемыеЗаписиB.ТолькоПросмотр = Истина;
		Элементы.ГруппатчАннулируемыеЗаписиD.ТолькоПросмотр = Истина;  
		ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы.тчЗаписиTUTDF;	
		Элементы.ГруппатчИсправляемыеЗаписиC.ТолькоПросмотр = Истина;  
		Элементы.ГруппатчЗаписиTUTDF.ТолькоПросмотр = Ложь;
		
		Элементы.тчНовыеЗаписиАПодбор.Доступность = Ложь;
		Элементы.тчНовыеЗаписиАПодборПоНастройкам.Доступность = Ложь;
		Элементы.тчНовыеЗаписиАПодборИзФайла.Доступность = Ложь;
		
		Элементы.тчАннулируемыеЗаписиDПодбор.Доступность = Ложь;  
		Элементы.тчАннулируемыеЗаписиDПодборПоНастройкам.Доступность = Ложь;
		Элементы.тчАннулируемыеЗаписиDПодборИзФайла.Доступность = Ложь;
		
		Элементы.тчОбновляемыеЗаписиBПодбор.Доступность = Ложь;  
		Элементы.тчОбновляемыеЗаписиBПодборПоНастройкам.Доступность = Ложь;
		Элементы.тчОбновляемыеЗаписиBПодборИзФайла.Доступность = Ложь;
		
		Элементы.тчИсправляемыеЗаписиCПодбор.Доступность = Ложь;
		Элементы.тчИсправляемыеЗаписиCПодборПоНастройкам.Доступность = Ложь;
		Элементы.тчИсправляемыеЗаписиCПодборИзФайла.Доступность = Ложь;
		
		Элементы.тчЗаписиTUTDFПодбор.Доступность = Истина;
		Элементы.тчЗаписиTUTDFПодборПоНастройкам.Доступность = Истина; 
		Элементы.тчЗаписиTUTDFПодборИзФайла.Доступность = Истина; 
		
		Элементы.Принято.Доступность = Ложь; 
		Элементы.ФормаСформироватьОтчет.Доступность = Ложь;
		
	Иначе  	
		Элементы.Страницы.Доступность = Ложь;	
	КонецЕсли; 
	
	Если Объект.Проведен Тогда
		Элементы.ГруппатчНовыеЗаписиА.ТолькоПросмотр = Истина;
		Элементы.ГруппатчОбновляемыеЗаписиB.ТолькоПросмотр = Истина;
		Элементы.ГруппатчАннулируемыеЗаписиD.ТолькоПросмотр = Истина;
		Элементы.ГруппатчИсправляемыеЗаписиC.ТолькоПросмотр = Истина;  
		Элементы.НепринятыйДокумент.ТолькоПросмотр = Истина; 
		Элементы.ГруппатчЗаписиTUTDF.ТолькоПросмотр = Истина;
		
		Элементы.тчНовыеЗаписиАПодбор.Доступность = Ложь;
		Элементы.тчНовыеЗаписиАПодборПоНастройкам.Доступность = Ложь;  
		
		Элементы.тчАннулируемыеЗаписиDПодбор.Доступность = Ложь;  
		Элементы.тчАннулируемыеЗаписиDПодборПоНастройкам.Доступность = Ложь;
		Элементы.тчАннулируемыеЗаписиDПодборИзФайла.Доступность = Ложь;
		
		Элементы.тчОбновляемыеЗаписиBПодбор.Доступность = Ложь;  
		Элементы.тчОбновляемыеЗаписиBПодборПоНастройкам.Доступность = Ложь;
		Элементы.тчОбновляемыеЗаписиBПодборИзФайла.Доступность = Ложь; 
		
		Элементы.тчИсправляемыеЗаписиCПодбор.Доступность = Ложь;
		Элементы.тчИсправляемыеЗаписиCПодборПоНастройкам.Доступность = Ложь;
		Элементы.тчИсправляемыеЗаписиCПодборИзФайла.Доступность = Ложь;

        Элементы.тчЗаписиTUTDFПодбор.Доступность = Ложь;
		Элементы.тчЗаписиTUTDFПодборПоНастройкам.Доступность = Ложь; 
		Элементы.тчЗаписиTUTDFПодборИзФайла.Доступность = Ложь;
	КонецЕсли;
	
	Если Объект.Принято = Перечисления.СтатусыОтчетаНБКИ.НеПринято Тогда
		Элементы.ГруппатчНовыеЗаписиА.ТолькоПросмотр = Истина;
		Элементы.ГруппатчОбновляемыеЗаписиB.ТолькоПросмотр = Истина;
		Элементы.ГруппатчАннулируемыеЗаписиD.ТолькоПросмотр = Истина;
		Элементы.ГруппатчИсправляемыеЗаписиC.ТолькоПросмотр = Истина;
		Элементы.ГруппатчЗаписиTUTDF.ТолькоПросмотр = Истина;
		
		Элементы.тчНовыеЗаписиАПодбор.Доступность = Ложь;
		Элементы.тчНовыеЗаписиАПодборПоНастройкам.Доступность = Ложь;
		Элементы.тчНовыеЗаписиАПодборИзФайла.Доступность = Ложь;
		
		Элементы.тчАннулируемыеЗаписиDПодбор.Доступность = Ложь;  
		Элементы.тчАннулируемыеЗаписиDПодборПоНастройкам.Доступность = Ложь;
		Элементы.тчАннулируемыеЗаписиDПодборИзФайла.Доступность = Ложь;
		
		Элементы.тчОбновляемыеЗаписиBПодбор.Доступность = Ложь;  
		Элементы.тчОбновляемыеЗаписиBПодборПоНастройкам.Доступность = Ложь;
		Элементы.тчОбновляемыеЗаписиBПодборИзФайла.Доступность = Ложь;
		
		Элементы.тчИсправляемыеЗаписиCПодбор.Доступность = Ложь;
		Элементы.тчИсправляемыеЗаписиCПодборПоНастройкам.Доступность = Ложь;
		Элементы.тчИсправляемыеЗаписиCПодборИзФайла.Доступность = Ложь;
		
		Элементы.тчЗаписиTUTDFПодбор.Доступность = Ложь;
		Элементы.тчЗаписиTUTDFПодборПоНастройкам.Доступность = Ложь; 
		Элементы.тчЗаписиTUTDFПодборИзФайла.Доступность = Ложь;
	КонецЕсли;
	
	Если Объект.Принято = Перечисления.СтатусыОтчетаНБКИ.НеПринято Тогда
		ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы.ТекстФайлаОтказа;
		Элементы.REJECT.ТолькоПросмотр = Ложь;  
		Элементы.ОбработатьОтказ.Доступность = Истина;
	Иначе  
		Элементы.REJECT.ТолькоПросмотр = Истина; 
		Элементы.ОбработатьОтказ.Доступность = Ложь;
	КонецЕсли;	
	
	Элементы.НепринятыйДокумент.ТолькоПросмотр = НЕ Объект.ЭтоКорректировкаРанееОтправленогоДокумента;
	
	Если Объект.Операция = Перечисления.ВидыОперацийОтчетаRUTDF.D ИЛИ Объект.Операция = Перечисления.ВидыОперацийОтчетаRUTDF.C Тогда
		Элементы.ЭтоИсправлениеВсейКредитнойИнформации.Доступность = Истина;
	Иначе
		Элементы.ЭтоИсправлениеВсейКредитнойИнформации.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.ЗаписиДляКорректировкиC.Видимость = НЕ Объект.ЭтоИсправлениеВсейКредитнойИнформации;
	Элементы.ЗаписиДляКорректировкиD.Видимость = НЕ Объект.ЭтоИсправлениеВсейКредитнойИнформации;
	
	Элементы.тчАннулируемыеЗаписиDКомментарий.Видимость = Объект.ЭтоИсправлениеВсейКредитнойИнформации;
	Элементы.тчАннулируемыеЗаписиDПричина.Видимость = Объект.ЭтоИсправлениеВсейКредитнойИнформации;
	Элементы.тчИсправляемыеЗаписиCКомментарий.Видимость = Объект.ЭтоИсправлениеВсейКредитнойИнформации;
	Элементы.тчИсправляемыеЗаписиCПричина.Видимость = Объект.ЭтоИсправлениеВсейКредитнойИнформации; 
	
	Элементы.ГруппатчАннулируемыеЗаписиD.Видимость = (Объект.НастройкаВыгрузки.ВерсияRUTDF = Перечисления.ВерсияRUTDF.v3 ИЛИ Объект.НастройкаВыгрузки.ВерсияRUTDF = Перечисления.ВерсияRUTDF.v4);
	Элементы.ГруппатчИсправляемыеЗаписиC.Видимость = (Объект.НастройкаВыгрузки.ВерсияRUTDF = Перечисления.ВерсияRUTDF.v3 ИЛИ Объект.НастройкаВыгрузки.ВерсияRUTDF = Перечисления.ВерсияRUTDF.v4);	
КонецПроцедуры  

&НаКлиенте
Процедура ОперацияПриИзменении(Элемент)
	ПроверкаВерсии();
	УправлениеВидимостью();   	
	УстановитьПараметрыОперации();
	Объект.Объекты.Очистить();
КонецПроцедуры   

&НаСервере
Процедура ПроверкаВерсии()
	Если Объект.Операция = Перечисления.ВидыОперацийОтчетаRUTDF.C ИЛИ Объект.Операция = Перечисления.ВидыОперацийОтчетаRUTDF.D Тогда
		Если Объект.НастройкаВыгрузки.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v3 И Объект.НастройкаВыгрузки.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v4 Тогда 
			 Сообщение = Новый СообщениеПользователю;
			 Сообщение.Текст = "Данные операции не совместимы с версией RUTDF в текущей настройке.";
			 Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыОперации()
	Если Объект.Операция = Перечисления.ВидыОперацийОтчетаRUTDF.TUTDF Тогда 
		Объект.Принято = Перечисления.СтатусыОтчетаНБКИ.Принято;   
		ДатаRUTDF = Дата(2022, 11, 01);
		Объект.Дата = ДатаRUTDF - 86400; 
		НастройкаВыгрузкиПриИзмененииНаСервере();
	Иначе
		Объект.Принято = Перечисления.СтатусыОтчетаНБКИ.ВОбработке;   
		Объект.Дата = ТекущаяДатаСеанса();
		НастройкаВыгрузкиПриИзмененииНаСервере();
	КонецЕсли;	
КонецПроцедуры 

&НаКлиенте
Процедура ПринятоПриИзменении(Элемент)
	УправлениеВидимостью(); 
	ПроставитьЗаписямСтатус();
КонецПроцедуры 

&НаСервере
Процедура ПроставитьЗаписямСтатус()
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.ПроставитьЗаписямСтатус();			
КонецПроцедуры  


&НаКлиенте
Процедура ЭтоКорректировкаРанееОтправленогоДокументаПриИзменении(Элемент)
	УправлениеВидимостью();
	Если НЕ Объект.ЭтоКорректировкаРанееОтправленогоДокумента Тогда
		ОчиститьНепринятыйДокумент();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНепринятыйДокумент()
	Объект.Операция = Перечисления.ВидыОперацийОтчетаRUTDF.B;
	Объект.НепринятыйДокумент = "";
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	Объект.Объекты.Очистить();
	ОбъектыКлиент.Подбор(ЭтаФорма);
	ПодключитьОбработчикОжидания("ОбработатьРезультатПодбора", 1, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоНастройкам(Команда)
	Объект.Объекты.Очистить();
	ФормаПодбор = ПолучитьФорму("Обработка.ПодборДО.Форма.Форма",, ЭтаФорма); 
	ФормаПодбор.Объект.ТипИсточника = Неопределено;
	ОткрытьФорму(ФормаПодбор); 
	ПодключитьОбработчикОжидания("ОбработатьРезультатПодбора", 1, Ложь);
КонецПроцедуры   

&НаСервере
Процедура ОбработатьРезультатПодбораСервер(КоличествоОбъектов) 
	
	Если Объект.Операция = Перечисления.ВидыОперацийОтчетаRUTDF.A Тогда
		ИмяВызывающейТаблицы = "тчНовыеЗаписиА";
	ИначеЕсли Объект.Операция = Перечисления.ВидыОперацийОтчетаRUTDF.C Тогда
		ИмяВызывающейТаблицы = "тчИсправляемыеЗаписиC";
		ЗаписиДляКорректировки.Параметры.УстановитьЗначениеПараметра("ОбъектУчета", Объект.Объекты.Выгрузить().ВыгрузитьКолонку("Объект"));
	ИначеЕсли Объект.Операция = Перечисления.ВидыОперацийОтчетаRUTDF.D Тогда
		ИмяВызывающейТаблицы = "тчАннулируемыеЗаписиD"; 
		ЗаписиДляКорректировки.Параметры.УстановитьЗначениеПараметра("ОбъектУчета", Объект.Объекты.Выгрузить().ВыгрузитьКолонку("Объект")); 
	ИначеЕсли Объект.Операция = Перечисления.ВидыОперацийОтчетаRUTDF.TUTDF Тогда
		ИмяВызывающейТаблицы = "тчЗаписиTUTDF"; 
	Иначе
		ИмяВызывающейТаблицы = "тчОбновляемыеЗаписиB";
	КонецЕсли;  
	
	РабочаяТЧ = Объект[ИмяВызывающейТаблицы]; 	
	РабочаяТЧ.Очистить();
	Для каждого стр из Объект.Объекты Цикл
		Нстр =  РабочаяТЧ.Добавить();
		Нстр.ОбъектУчета = Стр.Объект;
		Попытка
			Нстр.Должник = Стр.Объект.Должник;
		Исключение
			Нстр.Должник = Справочники.Контрагенты.ПустаяСсылка();
		КонецПопытки;	
	КонецЦикла;
	
	КоличествоОбъектов = РабочаяТЧ.Количество();	
КонецПроцедуры  

&НаКлиенте
Процедура ОбработатьРезультатПодбора() Экспорт
	КоличествоОбъектов = 0;
	ОбработатьРезультатПодбораСервер(КоличествоОбъектов);
	Если КоличествоОбъектов > 0 Тогда
		ОтключитьОбработчикОжидания("ОбработатьРезультатПодбора");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыПриАктивизацииСтроки(Элемент)
	ОбработатьРезультатПодбора();
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыПриИзменении(Элемент)
	ОбработатьРезультатПодбора();
КонецПроцедуры


&НаКлиенте
Процедура ЭтоИсправлениеВсейКредитнойИнформацииПриИзменении(Элемент)
	УправлениеВидимостью();
КонецПроцедуры


&НаКлиенте
Процедура ПодборИзФайла(Команда)
	Объект.Объекты.Очистить();
	ОбъектыКлиент.ПодборИзДОК(ЭтаФорма);
	ПодключитьОбработчикОжидания("ОбработатьРезультатПодбора", 1, Ложь);
КонецПроцедуры 


&НаСервере
Процедура ПеренестиСобытияНаСервере(ПараметрыЗапуска)
	//Отладка,Явный вызов
	КредитныеИсторииИзменения.ГлавнаяВосстановитьСобытияTUTDF(ПараметрыЗапуска, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиСобытия(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Сначала сохраните документ!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	

	
	ТекстУведомления = "";
	ПараметрыЗапуска = 	ОпределитьПараметрыЗапуска();
	//ПеренестиСобытияНаСервере(ПараметрыЗапуска); 
	
	СтруктураФоновогоЗадания  = ВыполнитьФоновоеЗаданиеПеренестиСобытияНаСервере(ПараметрыЗапуска, УникальныйИдентификатор);
	ИДЗадания = СтруктураФоновогоЗадания.ИдентификаторЗадания;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);     
	
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.Интервал 	= 2;	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(СтруктураФоновогоЗадания, Новый ОписаниеОповещения("ОбработатьРезультатПереноса", ЭтотОбъект), ПараметрыОжидания); 
	

КонецПроцедуры  

&НаСервере
Функция ОпределитьПараметрыЗапуска()
	ПараметрыЗапуска = Новый Структура;
	ПараметрыЗапуска.Вставить("ДокОтчетСсылка", Объект.Ссылка);
	Возврат ПараметрыЗапуска;
КонецФункции

&НаСервере
Функция ВыполнитьФоновоеЗаданиеПеренестиСобытияНаСервере(ПараметрыЗапуска, УникальныйИдентификатор)
	НаименованиеЗадания = "Перенос событий TUTDF";

	ВыполняемыйМетод = "КредитныеИсторииИзменения.ГлавнаяВосстановитьСобытияTUTDF";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне 	= Истина;
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", УникальныйИдентификатор); 
	
	СтруктураФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыЗапуска, ПараметрыВыполнения);
	
	Возврат СтруктураФоновогоЗадания;

КонецФункции     

&НаКлиенте
Процедура ОбработатьРезультатПереноса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Выполнено!";
		Сообщение.Сообщить();
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Статус задачи неопределен!";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры   


#Область ЭЦП

&НаКлиенте
Процедура ДоступностьЭЦП()

	ВидимостьЭлементовЭЦП(Ложь);
	Если УправлениеДоступами.ЕстьДоступЭЦП() Тогда
	
		ВидимостьЭлементовЭЦП(Истина)
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидимостьЭлементовЭЦП(ЗначениеВидимости)

	Элементы.Подпись.Видимость = ЗначениеВидимости;
	Элементы.Архив.Видимость = ЗначениеВидимости;
	
	Элементы.ЭлементФайлы.Видимость = ЗначениеВидимости;
	Элементы.АрхивНБКИ.Видимость = ЗначениеВидимости;

КонецПроцедуры

&НаКлиенте
Процедура Прикрепить(Команда)

	Попытка
	
		ФайлКлиента = УправлениеФайловаяСистема.НайтиФайл(Объект.ИмяФайла, КаталогВыгрузкиВызовСервер());
	
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат;
	КонецПопытки;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Ссылка", "ЭлементФайлы");
	ДополнительныеПараметры.Вставить("КонтрольФормы", Истина);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеПомещения", ЭтаФорма, ДополнительныеПараметры);
	
	АдресХранилища = "";
	НачатьПомещениеФайлаНаСервер(
		ОповещениеОЗавершении,
		,,
		АдресХранилища,
		ФайлКлиента.ПолноеИмя,
		ЭтаФорма.УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ПослеПомещения(ПомещенныйФайл, ПараметрыПомещения) Экспорт

	Если НЕ ЭтоАдресВременногоХранилища(ПомещенныйФайл.Адрес) Тогда
	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось поместить файл";
		Сообщение.Сообщить();
		Возврат;
	
	КонецЕсли;

	ДанныеДляПомещения = Новый Структура;
	ДанныеДляПомещения.Вставить("АдресХранилища", ПомещенныйФайл.Адрес);
	ДанныеДляПомещения.Вставить("ИмяБезРасширения", ПомещенныйФайл.СсылкаНаФайл.Файл.ИмяБезРасширения);
	ДанныеДляПомещения.Вставить("Расширение", ПомещенныйФайл.СсылкаНаФайл.Расширение);
	
	Попытка
	
		ЭлементыСправочникаФайлы = ПолучитьСправочникФайл(ДанныеДляПомещения);
		Если ЭлементыСправочникаФайлы.Количество() = 1 Тогда
		
			УстановитьСсылкуНаСправочникФайлы(ЭлементыСправочникаФайлы, ПараметрыПомещения);
		
		КонецЕсли;
	
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось прикрепить файл: " + ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат;
	КонецПопытки;
	
	ЗанестиВБазу = Ложь;
	Если ПараметрыПомещения.Свойство("Архив", ЗанестиВБазу)
		И ЗанестиВБазу Тогда
		
		ЗашифроватьФайл(Объект.АрхивНБКИ, Истина);
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСсылкуНаСправочникФайлы(ЭлементыСправочникаФайлы, ПараметрыПомещения);

	Объект[ПараметрыПомещения["Ссылка"]] = ЭлементыСправочникаФайлы[0];
	
	Если ПараметрыПомещения["КонтрольФормы"] Тогда
	
		ЗапретитьФормироватьОтчетПовторно();
		УправлениеПодписью();
	
	КонецЕсли;

	
	//Объект.ЭлементФайлы = ЭлементыСправочникаФайлы[0];
	//ЗапретитьФормироватьОтчетПовторно();
	//УправлениеПодписью();

КонецПроцедуры


&НаКлиенте
Процедура ЗапретитьФормироватьОтчетПовторно()

	Если ЗначениеЗаполнено(Объект.ЭлементФайлы) Тогда
	
		Элементы.ФормаСформироватьОтчет.Доступность = Ложь;
		Элементы.ФормаПрикрепить.Доступность = Ложь;
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УправлениеПодписью()

	Элементы.ФормаГруппаПодписание.Доступность = Ложь;
	Если ЗначениеЗаполнено(Объект.ЭлементФайлы) Тогда
	
		Элементы.ФормаГруппаПодписание.Доступность = Истина;
		Элементы.ФормаПрикрепить.Доступность = Ложь;
	
	КонецЕсли;

КонецПроцедуры


&НаСервере
Функция ПолучитьСправочникФайл(ДанныеДляПомещения)

	ДанныеДляПомещения.Вставить("ПапкаВладелец", Справочники.ПапкиФайлов.НБКИ);
	ЭлементыСправочникаФайлы = Обработки.Интерфейс_Файлы.ПолучитьФайлы(ДанныеДляПомещения);
	
	Возврат ЭлементыСправочникаФайлы;

КонецФункции // ()


&НаКлиенте
Процедура Подписать(Команда)

	РаботаСФайламиКлиент.ПодписатьФайл(Объект.ЭлементФайлы, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура Зашифровать(Команда)

	ЗашифроватьФайл(Объект.ЭлементФайлы);
	//ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(Объект.ЭлементФайлы);
	//
	//ПараметрыОбработчика = Новый Структура;
	//ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	//ПараметрыОбработчика.Вставить("ОбъектСсылка", Объект.ЭлементФайлы);
	//
	//Обработчик = Новый ОписаниеОповещения("ПослеШифрования", ЭтаФорма, ПараметрыОбработчика);
	//
	//РаботаСФайламиСлужебныйКлиент.Зашифровать(Обработчик, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеШифрования(Результат, ПараметрыШифрования) Экспорт

	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРабочегоКаталога = РаботаСФайламиСлужебныйКлиент.РабочийКаталогПользователя();
	
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	
	ЗашифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		Результат.МассивОтпечатков,
		МассивФайловВРабочемКаталогеДляУдаления,
		ИмяРабочегоКаталога,
		ПараметрыШифрования.ОбъектСсылка);
	
	РаботаСФайламиСлужебныйКлиент.ИнформироватьОШифровании(
		МассивФайловВРабочемКаталогеДляУдаления,
		ПараметрыШифрования.ДанныеФайла.Владелец,
		ПараметрыШифрования.ОбъектСсылка);

	Если ПараметрыШифрования["Архив"] Тогда
	
		РаботаСФайламиСлужебныйКлиент.СохранитьФайлВместеСПодписью(
			Объект.АрхивНБКИ,
			УникальныйИдентификатор);
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗашифроватьСервер(МассивДанныхДляЗанесенияВБазу, МассивОтпечатков, 
	МассивФайловВРабочемКаталогеДляУдаления,
	ИмяРабочегоКаталога, ОбъектСсылка)
	
	Зашифровать = Истина;
	РаботаСФайламиСлужебный.ЗаписатьИнформациюОШифровании(
		ОбъектСсылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		Неопределено,  // УникальныйИдентификатор
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)

	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(Объект.ЭлементФайлы);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", Объект.ЭлементФайлы);
	Обработчик = Новый ОписаниеОповещения("ПослеРасшифровки", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиСлужебныйКлиент.Расшифровать(
		Обработчик,
		ДанныеФайла.Ссылка,
		УникальныйИдентификатор,
		ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРасшифровки(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Ложь Или Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРабочегоКаталога = РаботаСФайламиСлужебныйКлиент.РабочийКаталогПользователя();
	
	РасшифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		ИмяРабочегоКаталога,
		ПараметрыВыполнения.ОбъектСсылка);
	
	РаботаСФайламиСлужебныйКлиент.ИнформироватьОРасшифровке(
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		ПараметрыВыполнения.ОбъектСсылка);

КонецПроцедуры

&НаСервере
Процедура РасшифроватьСервер(МассивДанныхДляЗанесенияВБазу, 
	ИмяРабочегоКаталога, ОбъектСсылка)
	
	Зашифровать = Ложь;
	МассивОтпечатков = Новый Массив;
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	
	РаботаСФайламиСлужебный.ЗаписатьИнформациюОШифровании(
		ОбъектСсылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		Неопределено,  // УникальныйИдентификатор
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВместеСПодписью(Команда)
	
	РаботаСФайламиСлужебныйКлиент.СохранитьФайлВместеСПодписью(
		Объект.ЭлементФайлы,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьВАрхив(Команда)

	АдресАрхива = АрхивироватьНБКИФайлы();
	Если НЕ ЗначениеЗаполнено(АдресАрхива) Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ЗанестиАрхивВБазу(АдресАрхива);

КонецПроцедуры

&НаКлиенте
Функция АрхивироватьНБКИФайлы()

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберете отчет и подпись";
	Диалог.Фильтр = "Все файлы (*.*)|*.*";
	Диалог.МножественныйВыбор = Истина;
	
	Если НЕ Диалог.Выбрать() Тогда
	
		Возврат "";
	
	КонецЕсли;
	
	ВыбранныеФайлы = Диалог.ВыбранныеФайлы;
	Если ВыбранныеФайлы.Количество() = 0 Тогда
	
		Возврат ""
	
	КонецЕсли;
	
	ПервыйФайл = ВыбранныеФайлы[0];
	ФайлПервыйФайл = Новый Файл(ПервыйФайл);
	Каталог = ФайлПервыйФайл.Путь;
	АдресАрхива = Каталог + ПолучитьРазделительПутиКлиента() + Объект.ИмяФайла + ".zip";
	
	НовыйАрхив = Новый ЗаписьZipФайла(
		АдресАрхива,
		"",
		,
		МетодСжатияZIP.Сжатие,
		УровеньСжатияZIP.Оптимальный);
	
	Для каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
	
		НовыйАрхив.Добавить(ВыбранныйФайл);
	
	КонецЦикла;
	
	НовыйАрхив.Записать();
	
	Возврат АдресАрхива;

КонецФункции // ()

&НаКлиенте
Функция ЗанестиАрхивВБазу(АдресАрхива)

	Архив = Новый Файл(АдресАрхива);
	
	Попытка
	
		ФайлКлиента = УправлениеФайловаяСистема.НайтиФайл(Архив.Имя, Архив.Путь);
	
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецПопытки;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Ссылка", "АрхивНБКИ");
	ДополнительныеПараметры.Вставить("КонтрольФормы", Ложь);
	ДополнительныеПараметры.Вставить("Архив", Истина);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеПомещения", ЭтаФорма, ДополнительныеПараметры);
	
	АдресХранилища = "";

	НачатьПомещениеФайлаНаСервер(
		ОповещениеОЗавершении,
		,,
		АдресХранилища,
		ФайлКлиента.ПолноеИмя,
		ЭтаФорма.УникальныйИдентификатор);

	Возврат Истина;

КонецФункции // ()

&НаКлиенте
Процедура ЗашифроватьФайл(СсылкаНаФайл, Архив = Ложь)

	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(СсылкаНаФайл);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", СсылкаНаФайл);
	ПараметрыОбработчика.Вставить("Архив", Архив);
	
	Обработчик = Новый ОписаниеОповещения("ПослеШифрования", ЭтаФорма, ПараметрыОбработчика);
	
	РаботаСФайламиСлужебныйКлиент.Зашифровать(Обработчик, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти





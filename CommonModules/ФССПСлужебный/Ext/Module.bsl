
&НаСервере
Процедура ПолучитьИП(Массив) Экспорт
	Для Каждого Эл Из Массив Цикл
		Попытка
			// Запрос к API
			SSL = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Новый СертификатыУдостоверяющихЦентровОС());  
			Соединение = Новый HTTPСоединение("api.xn--80ajbekothchmme5j.xn--p1ai", 443,,,,, SSL);
			
			Заголовки = Новый Соответствие;
			Заголовки.Вставить("Authorization", "Bearer " + "Y-dpR94nzXZM4Oj7JmrKEPxvQ_hyjtS1");
			Заголовки.Вставить("Content-Type", "application/json");
			
			Данные = Новый Структура();
			Данные.Вставить("document_type", "fio_birth_date_requisite");
			ИП = Новый Структура();
			ИП.Вставить("birth_date", Эл.ДатаРождения);
			ИП.Вставить("fio", Эл.Должник);
			ИП.Вставить("region_id", Эл.КодРегиона);
			Данные.Вставить("document_value", ИП);
			
			ЗаписьJSON = Новый ЗаписьJSON;            
			ЗаписьJSON.УстановитьСтроку();
			ЗаписатьJSON(ЗаписьJSON, Данные);            
			ТелоЗапроса = ЗаписьJSON.Закрыть(); 
			
			Запрос = Новый HTTPЗапрос("/fssp/frontend-search?yandexToken=&lead_source_id=search&lead_source_id_ext=google", Заголовки);
			Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
			
			Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
			
			Если Ответ.КодСостояния = 500 ИЛИ Ответ.КодСостояния = 429 Тогда
				//МенеджерЗаписи = РегистрыСведений.ИсполнительныеПроизводства.СоздатьМенеджерЗаписи();			
				//МенеджерЗаписи.Должник = Справочники.Контрагенты.НайтиПоНаименованию(Эл.Должник);
				//УИДЗапроса = Новый УникальныйИдентификатор();
				//МенеджерЗаписи.ИП = "База данных ФССП России не отвечает " + "(" + УИДЗапроса + ")";
				//МенеджерЗаписи.ДатаПроверки = ТекущаяДата();			
				//МенеджерЗаписи.Записать();
				
				Если Массив.Количество() > 1 Тогда
					ИнтеграцииСлужебный.Пауза(900);
				КонецЕсли;
			КонецЕсли;		
			
			//Сообщить(Ответ.ПолучитьТелоКакСтроку());
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
			Данные = ПрочитатьJSON(ЧтениеJSON, Ложь);
			ЧтениеJSON.Закрыть();	
			
			// Парсинг JSON
			Попытка
				Если Данные[0].accruals = Неопределено Или Данные[0].accrual_count = 0 Тогда
					МенеджерЗаписи = РегистрыСведений.ИсполнительныеПроизводства.СоздатьМенеджерЗаписи();				
					МенеджерЗаписи.Должник = Справочники.Контрагенты.НайтиПоНаименованию(Эл.Должник);
					УИДЗапроса = Новый УникальныйИдентификатор();
					МенеджерЗаписи.ИП = "Действующие ИП не найдены " + "(" + УИДЗапроса + ")";
					МенеджерЗаписи.ДатаПроверки = СтрСоединить(СтрРазделить(Данные[0].check_date, "- :"), "");				
					МенеджерЗаписи.Записать();
					
				ИначеЕсли Данные[0].accruals.Количество() > 0 Тогда
					УдалитьСтарыеИП(Справочники.Контрагенты.НайтиПоНаименованию(Эл.Должник));
					// Записать признак наличия ИП
					ДолжникОбъект = Справочники.Контрагенты.НайтиПоНаименованию(Эл.Должник).ПолучитьОбъект();
					Если Не ДолжникОбъект.ЕстьИП Тогда
						ДолжникОбъект.ЕстьИП = Истина;
						ДолжникОбъект.Записать();
					КонецЕсли;
					Для Сч = 0 По Данные[0].accruals.ВГраница() Цикл
						ИП = Данные[0].accruals[Сч].account;
						ОСП = Данные[0].accruals[Сч].additional_fields.division_name;
						ИД = Данные[0].accruals[Сч].additional_fields.exe_doc_reqs;
						РеквизитыИД = СтрокуВЧисло(Данные[0].accruals[Сч].additional_fields.exe_doc_reqs);
						Для Каждого Стр Из РеквизитыИД Цикл
							Если СтрДлина(Стр) = 10 Тогда
								ИННВзыскателя = Стр;
								// Нормализовать взыскателя							
								Попытка
									Взыскатель = ДаДатаСлужебный.ПолучитьВзыскателя(Стр);
								Исключение
									Взыскатель = "—";
								КонецПопытки;
							Иначе
								Взыскатель = "—";
							КонецЕсли;
						КонецЦикла;
						ДанныеСПИ = Данные[0].accruals[Сч].additional_fields.officer;
						// Разложить на массив
						МассивДанныхСПИ = СтрРазделить(СтрЗаменить(ДанныеСПИ, ".+", ". +"), " ", Ложь);
						СПИ = МассивДанныхСПИ[0] + " " + МассивДанныхСПИ[1]  + " " + МассивДанныхСПИ[2];
						Если МассивДанныхСПИ.Количество() > 3 Тогда 
							ТелефонСПИ = МассивДанныхСПИ[3];
						КонецЕсли;
						ДатаПроверки = СтрСоединить(СтрРазделить(Данные[0].accruals[Сч].check_time, "- :"), "");
						ДатаВозбуждения = СтрСоединить(СтрРазделить(Данные[0].accruals[Сч].date, "- :"), "");
						// Привести суммы к дробному числу
						МассивСуммИП = ДостатьЧислаИзСтроки(Данные[0].accruals[Сч].description);
						Если МассивСуммИП.Количество() > 1 Тогда
							СуммаИП = МассивСуммИП[0];
							СуммаИспСбора = МассивСуммИП[1];
						Иначе
							СуммаИП = МассивСуммИП[0];
						КонецЕсли;
						ТипИД = Данные[0].accruals[Сч].description;
						СтатусИД = Данные[0].accruals[Сч].status.name;
						
						// Записать ИП в регистр сведений
						МенеджерЗаписи = РегистрыСведений.ИсполнительныеПроизводства.СоздатьМенеджерЗаписи();					
						МенеджерЗаписи.Должник = Справочники.Контрагенты.НайтиПоНаименованию(Эл.Должник);
						//МенеджерЗаписи.ИП = ИП + "-ИП";
						МенеджерЗаписи.ИП = ИП;
						МенеджерЗаписи.ОСП = ОСП;
						МенеджерЗаписи.ИД = ИД;
						МенеджерЗаписи.Взыскатель = Взыскатель;
						МенеджерЗаписи.СПИ = СПИ; 
						МенеджерЗаписи.ТелефонСПИ = ТелефонСПИ;
						МенеджерЗаписи.ДатаПроверки = ДатаПроверки;
						МенеджерЗаписи.ДатаВозбуждения = ДатаВозбуждения;
						МенеджерЗаписи.СуммаЗадолженности = СуммаИП;
						МенеджерЗаписи.СуммаИсполнительскогоСбора = СуммаИспСбора;
						МенеджерЗаписи.Всего = СуммаИП + ?(ЗначениеЗаполнено(СуммаИспСбора), СуммаИспСбора, 0);
						МенеджерЗаписи.ТипИД = ТипИД;
						МенеджерЗаписи.СтатусИД = СтатусИД;					
						МенеджерЗаписи.Записать();
					КонецЦикла;
				КонецЕсли;
			Исключение
			КонецПопытки;
		Исключение
			МенеджерЗаписи = РегистрыСведений.ИсполнительныеПроизводства.СоздатьМенеджерЗаписи();		
			МенеджерЗаписи.Должник = Справочники.Контрагенты.НайтиПоНаименованию(Эл.Должник);
			УИДЗапроса = Новый УникальныйИдентификатор();
			МенеджерЗаписи.ИП = "Нет соединения с базой данных ФССП России " + "(" + УИДЗапроса + ")";
			МенеджерЗаписи.ДатаПроверки = ТекущаяДата();		
			МенеджерЗаписи.Записать();
		КонецПопытки;
		
		Если Массив.Количество() > 1 Тогда
			ИнтеграцииСлужебный.Пауза(60);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ДостатьЧислаИзСтроки(ИсходнаяСтрока, Разделители =  ".,") Экспорт
	Масс = Новый Массив;
	RegExp = Новый COMОбъект("VBScript.RegExp"); 
	RegExp.IgnoreCase = Истина; 
	RegExp.Global = Истина; 
	RegExp.MultiLine = Ложь; 
	RegExp.Pattern = "-*\d+[" + разделители + "]\d*";
	Matches= RegExp.Execute(ИсходнаяСтрока); 
	Для Сч = 0 по Matches.Count() - 1 Цикл
		Match = Matches.Item(Сч);
		Попытка
			Масс.Добавить(Число(Match.Value));
		Исключение
		КонецПопытки;
		Submatches = Match.Submatches;
		Для Сч1 = 0 по Submatches.Count() - 1 Цикл
			Submatch = Submatches.Item(Сч1);
			Попытка
				Масс.Добавить(Число(Submatch.Value));
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Масс;
КонецФункции

&НаСервере
Функция СтрокуВЧисло(СтрокаСЧислом) Экспорт
	МассивСтрок = СтрРазделить(СтрокаСЧислом, "0123456789", Ложь);
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Текст");
	ТЗ.Колонки.Добавить("Длина", Новый ОписаниеТипов("Число"));
	Для Каждого ТекСтрока из МассивСтрок Цикл 
		Приемник = ТЗ.Добавить();
		Приемник.Текст = ТекСтрока;
		Приемник.Длина = СтрДлина(ТекСтрока);
	КонецЦикла;  
	
	ТЗ.Сортировать("Длина УБЫВ");    
	
	Для Каждого Запись из ТЗ Цикл 
		ТекСтрока = Запись.Текст;
		СтрокаСЧислом = СтрЗаменить(СтрокаСЧислом, ТекСтрока, Символы.ПС);
	КонецЦикла;
	
	МассивЧисел = СтрРазделить(СтрокаСЧислом, Символы.ПС, Ложь);
	
	Возврат МассивЧисел;
КонецФункции

Функция УдалитьСтарыеИП(Должник) Экспорт
	// Удалить старые ИП по должнику
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсполнительныеПроизводства.ДатаПроверки КАК ДатаПроверки,
	|	ИсполнительныеПроизводства.Должник КАК Должник,
	|	ИсполнительныеПроизводства.ОСП КАК ОСП,
	|	ИсполнительныеПроизводства.ИД КАК ИД,
	|	ИсполнительныеПроизводства.Взыскатель КАК Взыскатель,
	|	ИсполнительныеПроизводства.СПИ КАК СПИ,
	|	ИсполнительныеПроизводства.ТелефонСПИ КАК ТелефонСПИ,
	|	ИсполнительныеПроизводства.ДатаВозбуждения КАК ДатаВозбуждения,
	|	ИсполнительныеПроизводства.СуммаЗадолженности КАК СуммаЗадолженности,
	|	ИсполнительныеПроизводства.СуммаИсполнительскогоСбора КАК СуммаИсполнительскогоСбора,
	|	ИсполнительныеПроизводства.Всего КАК Всего,
	|	ИсполнительныеПроизводства.ТипИД КАК ТипИД,
	|	ИсполнительныеПроизводства.СтатусИД КАК СтатусИД
	|ИЗ
	|	РегистрСведений.ИсполнительныеПроизводства КАК ИсполнительныеПроизводства
	|ГДЕ
	|	ИсполнительныеПроизводства.Должник = &Должник";
	Запрос.УстановитьПараметр("Должник", Должник);	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();	
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ИсполнительныеПроизводства.СоздатьМенеджерЗаписи();		
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);		
		МенеджерЗаписи.Удалить();        
	КонецЦикла;
КонецФункции

Функция ПолучитьКодРегионаПоДолжнику(Должник) Экспорт
	Если ЗначениеЗаполнено(ОбъектыСервер.ПолучитьЗначениеСвойства(Должник, "0188")) Тогда
		КодРегиона = ОбъектыСервер.ПолучитьЗначениеСвойства(Должник, "0188");
		Возврат КодРегиона;
	Иначе
		Попытка
			// Получить код региона	
			КодРегиона = ДаДатаСлужебный.ПолучитьКодРегиона(ОбъектыСервер.ПолучитьЗначениеСвойства(Должник, "0049"));
			ОбъектыСервер.ЗаписатьЗначениеСвойства(Должник, "0188", КодРегиона);
			Возврат ОбъектыСервер.ПолучитьЗначениеСвойства(Должник, "0188");
		Исключение 
			// Адрес непригоден
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
КонецФункции
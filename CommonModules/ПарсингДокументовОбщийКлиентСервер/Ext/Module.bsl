
#Область ПрограммныйИнтерфейс

#Область КонфигурацияПарсингаДокументов

Функция ПолучитьМодульСтадии(Стадия) Экспорт

	Стадии = Новый Соответствие;
	Стадии.Вставить("ПарсингПодготовкаДанныхКлиентСервер", ПарсингПодготовкаДанныхКлиентСервер);
	Стадии.Вставить("ПарсингОфисныхДокументовКлиентСервер", ПарсингОфисныхДокументовКлиентСервер);
	Стадии.Вставить("КонвертерИзображенийКлиентСервер", КонвертерИзображенийКлиентСервер);
	Стадии.Вставить("ПревьюДелательИзображенийКлиентСервер", ПревьюДелательИзображенийКлиентСервер);
	Стадии.Вставить("РаспозновательИзображенийКлиентСервер", РаспозновательИзображенийКлиентСервер);
	Стадии.Вставить("ПарсингОбработкаТекстовыхФайловКлиентСервер", ПарсингОбработкаТекстовыхФайловКлиентСервер);
	
	Возврат Стадии.Получить(Стадия);

КонецФункции

#КонецОбласти

// Возвращает описание каталогов для парсинга документов
//   Не проверяет наличие каталога!
//
// Параметры:
//   Общий - Строка - Полный путь к каталогу для парсинга
//
// Возвращаемое значение:
//   Структура   - Описание структуры каталогов для парсинга
//                   Общий - Полный путь к каталогу для парсинга,
//                   Остальные - Разделы внутри Общего каталога
Функция КаталогиДляПарсинга(Знач КаталогОбработки, Знач КаталогИсточник) Экспорт

	Подкаталоги = ОписаниеПодкаталогов();
	
	Если СтрСравнить(КаталогОбработки, КаталогИсточник) = 0 Тогда
	
		ВызватьИсключение УправленияСообщениямиКлиентСервер.ИнструкцияКОшибке(
			"Из корневого каталога файлы не обрабатываются",
			"По умолчанию файлы берутся из каталога " + Подкаталоги["Начальный"] + ", в корне каталога обработки
			|Если требуется изменить источник данных, можно указать любой каталог, кроме корневого
			|
			|Следует изменить каталог источник или переместить файлы"
		);
	
	КонецЕсли;
	
	// TODO - Добавить проверку по регулярному выражению с версии 23
	Если СтрНайти(КаталогОбработки, " ") <> 0 Тогда
	
		ВызватьИсключение УправленияСообщениямиКлиентСервер.ИнструкцияКОшибке(
			"Пробел в имени пути к корневому каталогу",
			"Путь к корневому каталогу не должен содержать пробельных символов"
		);
	
	КонецЕсли;

	Описание = Новый Структура;
	Описание.Вставить("Исполняемый", Подкаталоги["Исполняемый"]);
	Описание.Вставить("PDF", Подкаталоги["PDF"]);
	Описание.Вставить("Изображения", Подкаталоги["Изображения"]);
	Описание.Вставить("Текст", Подкаталоги["Текст"]);
	Описание.Вставить("МиниИзображения", Подкаталоги["МиниИзображения"]);
	
	Корень = Новый Файл(КаталогОбработки);
	Для каждого ПодКаталог Из Описание Цикл
	
		Описание.Вставить(
			ПодКаталог.Ключ,
			Корень.ПолноеИмя + ПолучитьРазделительПути() + ПодКаталог.Значение
		);
	
	КонецЦикла;
	
	Описание.Вставить("Корень", КаталогОбработки);
	
	ПоУмолчанию = ИспользоватьКаталогПоУмолчанию(КаталогИсточник);
	Начальный = КаталогИсточник;
	Если ПоУмолчанию Тогда
	
		Начальный = Корень.ПолноеИмя + ПолучитьРазделительПути() + Подкаталоги["Начальный"];
	
	КонецЕсли;
	Описание.Вставить("Начальный", Начальный);

	Возврат Описание;

КонецФункции // ()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СоздатьДанныеПоНастройке(Знач КаталогОбработки) Экспорт

	Корень = Новый Файл(КаталогОбработки);
	Если Не Корень.Существует()
		ИЛИ Не Корень.ЭтоКаталог() Тогда
	
		ВызватьИсключение УправленияСообщениямиКлиентСервер.ИнструкцияКОшибке(
			"Не указан корневой каталог для обработки",
			"Укажите каталог в котором будет происходить обработка документов"
		);
	
	КонецЕсли;
	
	Подкаталоги = ОписаниеПодкаталогов();
	Попытка
	
		ПолноеИмя = Корень.ПолноеИмя + ПолучитьРазделительПути();
		СоздатьКаталог(ПолноеИмя + Подкаталоги["Исполняемый"]);
		СоздатьКаталог(ПолноеИмя + Подкаталоги["Начальный"]);
	
	Исключение
		ВызватьИсключение УправленияСообщениямиКлиентСервер.ИнструкцияКОшибке(
			"Не удалось создать каталог",
			"При попытке создания каталога произошла ошибка:
			|" + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
		);
	КонецПопытки;
	
	СоздатьИсполнимыеФайлы(ПолноеИмя + Подкаталоги["Исполняемый"]);
	
	Возврат Истина;

КонецФункции // ()

// Возвращает Файлы каталогов в значениях структуры
//   Создается только на файл Приемник
// Для остальный каталогов проводится только проверка и конвертация представления
//
// Параметры:
//  Каталоги  - Структура - Данные каталогов
//                 См. Область СлужебныйНастройкаКаталогов
//
// Возвращаемое значение:
//   Структура   - Файлы каталогов
//
Функция СоздатьКаталоги(Каталоги) Экспорт

	КаталогПриемник = КаталогПриемник(Каталоги);
	Приемник = Новый Файл(КаталогПриемник);
	Если Приемник.Существует() Тогда
	
		УдалитьФайлы(Приемник.ПолноеИмя);
	
	КонецЕсли;
	СоздатьКаталог(Приемник.ПолноеИмя);
	
	Возврат КонвертироватьПутиВФайлы(Каталоги);

КонецФункции // ()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция УдалитьВременныеКаталоги(Каталоги) Экспорт

	ВременныеКаталоги = КаталогиДляОчистки(Каталоги);

	Возврат УдалитьКаталоги(ВременныеКаталоги);

КонецФункции // ()

// Возвращает только найденные Файлы в Источнике
//   Возврат очищается от каталогов и невидимых файлов
//
// Параметры:
//  Каталоги  - Структура - Данные каталогов
//                 См. СоздатьКаталоги
//  ВключатьВложенныеКаталоги  - Булево - Поиск в подкаталогах
//
// Возвращаемое значение:
//   Массив   - Найденные в Источнике Файлы
//
Функция ПолучитьФайлыИсточника(Каталоги, ВключатьВложенныеКаталоги = Ложь) Экспорт

	Источник = Каталоги["Источник"];
	
	Файлы = Новый Массив;
	Если СуществуетКаталог(Источник) Тогда
	
		НайденыеФайлы = НайтиФайлы(Источник.ПолноеИмя, "*", ВключатьВложенныеКаталоги);
		Для каждого Файл Из НайденыеФайлы Цикл
		
			Если Файл.ПолучитьНевидимость() Тогда
			
				Продолжить;
			
			КонецЕсли;
			
			Если Файл.ЭтоКаталог() Тогда
			
				Продолжить;
			
			КонецЕсли;
			
			Файлы.Добавить(Файл);
		
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат Файлы;

КонецФункции // ()

// Составляет базовые настройки для выполнения
//   консольной программы по парсингу
//
// Параметры:
//  КаталогИсполнитель  - Файл - Каталог, где сохраняется программа
//                 См. УправлениеКонсолью.УстановитьТекущийКаталог
//  Кодировка  - Строка - См. УправлениеКонсолью.УстановитьКодировку
//
// Возвращаемое значение:
//   Структура   - См. УправлениеКонсолью.НоваяПрограмма
//
Функция НоваяПрограммаПарсинга(КаталогИсполнитель, Кодировка) Экспорт

	Программа = УправлениеКонсолью.НоваяПрограмма();
	УправлениеКонсолью
		.УстановитьТекущийКаталог(Программа, КаталогИсполнитель)
		.УстановитьКодировку(Программа, Кодировка)
	;
	
	Возврат Программа;

КонецФункции // ()

// Заполняет сведения о не существующем файле
//
// Параметры:
//  ТекущийФайл  - Файл - Файл для конвертации в структуру
//
// Возвращаемое значение:
//   Структура   - Данные файла с описанием ошибки
//
Функция СформироватьДанныеОНесуществующемФайле(ТекущийФайл) Экспорт

	СведенияОФайле = ПолучитьСведенияОФайле(ТекущийФайл);
	СведенияОФайле.Вставить("Ошибка", Истина);
	СведенияОФайле.Вставить("ТекстОшибки", "Файл не существует");
	
	Возврат СведенияОФайле;

КонецФункции // ()

// Переносит данные файла в структуру
//
// Параметры:
//  ТекущийФайл  - Файл - Файл для конвертации в структуру
//
// Возвращаемое значение:
//   Структура   - Данные файла
//
Функция ПолучитьСведенияОФайле(ТекущийФайл) Экспорт

	Данные = Новый Структура;
	Данные.Вставить("Имя", ТекущийФайл.Имя);
	Данные.Вставить("ПолноеИмя", ТекущийФайл.ПолноеИмя);
	Данные.Вставить("ИмяБезРасширения", ТекущийФайл.ИмяБезРасширения);
	Данные.Вставить("Расширение", ТекущийФайл.Расширение);
	
	Возврат Данные;

КонецФункции // ()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ИсполнитьПрограммуПарсинга(Программа) Экспорт

	ДанныеКИсполнению = УправлениеКонсолью.СобратьПрограмму(Программа);
	
	УправлениеКонсолью.ИсполнитьПрограмму(
		ДанныеКИсполнению
	);

КонецФункции // ()

#Область ИнтерфейстСтадииПарсинга

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ОпределитьСтадииПарсинга(
	ПредварительнаяПодготовка = Истина,
	БылоВордВПдфНаУдаление = Ложь,
	ПеревестиВТекст = Ложь,
	МиниИзображения = Ложь,
	ОбработкаТекста = Ложь
	) Экспорт
	
	Стадии = Новый Массив;
	Если ПредварительнаяПодготовка Тогда
	
		Стадии.Добавить("ПарсингПодготовкаДанныхКлиентСервер");
	
	КонецЕсли;
	Если БылоВордВПдфНаУдаление Тогда
	
		Стадии.Добавить("ПарсингОфисныхДокументовКлиентСервер");
	
	КонецЕсли;
	Если ПеревестиВТекст Тогда
	
		Стадии.Добавить("КонвертерИзображенийКлиентСервер");
		Стадии.Добавить("РаспозновательИзображенийКлиентСервер");
	
	КонецЕсли;
	
	Если МиниИзображения Тогда
	
		Стадии.Добавить("ПревьюДелательИзображенийКлиентСервер");
	
	КонецЕсли;
	
	// Не реализовано - применять в конкретной форме
	Если ОбработкаТекста Тогда
	
		Стадии.Добавить("ПарсингОбработкаТекстовыхФайловКлиентСервер");
	
	КонецЕсли;
	
	Возврат Стадии;

КонецФункции 

Функция ОбработатьСтадииПарсингаОбщий(ПараметрыСтадийПарсинга) Экспорт

	Результаты = Новый Структура;
	Для каждого Стадия Из ПараметрыСтадийПарсинга Цикл
		
		МодульСтадии = ПолучитьМодульСтадии(Стадия["Модуль"]);
		ПараметрыСтадии = Стадия["Параметры"];
		Результат = МодульСтадии.Обработать(ПараметрыСтадии);
			
		Результаты.Вставить(Стадия["Модуль"], Результат); 
	
	КонецЦикла;
	
	Возврат Результаты;

КонецФункции

Функция РезультатПодготовки(Результаты) Экспорт

	ИмяСтадии = "ПарсингПодготовкаДанныхКлиентСервер";
	Возврат РезультатСтадии(Результаты, ИмяСтадии)

КонецФункции // ()

Функция РезультатПолученияТекстовогоФайлаКонвертация(Результаты) Экспорт

	ИмяСтадии = "КонвертерИзображенийКлиентСервер";
	Возврат РезультатСтадии(Результаты, ИмяСтадии)

КонецФункции // ()

Функция РезультатПолученияТекстовогоФайлаПревью(Результаты) Экспорт

	ИмяСтадии = "ПревьюДелательИзображенийКлиентСервер";
	Возврат РезультатСтадии(Результаты, ИмяСтадии)

КонецФункции // ()

Функция РезультатПолученияТекстовогоФайлаРаспознание(Результаты) Экспорт

	ИмяСтадии = "РаспозновательИзображенийКлиентСервер";
	Возврат РезультатСтадии(Результаты, ИмяСтадии)

КонецФункции // ()

Функция РезультатСтадии(Результаты, ИмяСтадии)

	Возврат Результаты[ИмяСтадии];

КонецФункции // ()

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область СлужебныйИнтерфейсКаталогов

Функция КореньКаталогов(Каталоги) Экспорт

	Возврат Каталоги["Корень"];

КонецФункции // ()

Функция КаталогИсточник(Каталоги) Экспорт

	Возврат Каталоги["Источник"];

КонецФункции // ()

Функция КаталогПриемник(Каталоги) Экспорт

	Возврат Каталоги["Приемник"];

КонецФункции // ()

Функция КаталогИсполнитель(Каталоги) Экспорт

	Возврат Каталоги["Исполнитель"];

КонецФункции // ()

Функция КоличествоСтраниц(Каталоги) Экспорт

	Страницы = Неопределено;
	Если Не Каталоги.Свойство("Страницы", Страницы) Тогда
	
		ВызватьИсключение "Для стадии не предусмотренно свойство - Страницы";
	
	КонецЕсли;
	
	Возврат Страницы;

КонецФункции // ()

#КонецОбласти

#Область СлужебныйНастройкаКаталогов

// По общей структуре документов возвращает данные,
//   по которым определяется из какого каталога возьмутся документы
//   и в какой каталог поместится результат
//
// Параметры:
//  Каталоги  - Структура - См.КаталогиДляПарсинга
//
// Возвращаемое значение:
//   Структура   - Описание каталогов для проведения конвертации
//
Функция КаталогиДляКонвертации(Каталоги) Экспорт

	Описание = Новый Структура;
	
	Описание.Вставить("Источник", Каталоги["Начальный"]);
	Описание.Вставить("Приемник", Каталоги["Изображения"]);
	Описание.Вставить("Исполнитель", Каталоги["Исполняемый"]);

	Возврат Описание;

КонецФункции // ()

Функция КаталогиДляПревью(Каталоги) Экспорт

	Описание = Новый Структура;
	
	Описание.Вставить("Источник", Каталоги["Изображения"]);
	Описание.Вставить("Приемник", Каталоги["МиниИзображения"]);
	Описание.Вставить("Исполнитель", Каталоги["Исполняемый"]);

	Возврат Описание;

КонецФункции // ()

Функция КаталогиДляРаспознования(Каталоги) Экспорт

	Описание = Новый Структура;
	Описание.Вставить("Корень", Каталоги["Корень"]);
	Описание.Вставить("Источник", Каталоги["Изображения"]);
	Описание.Вставить("Приемник", Каталоги["Текст"]);
	Описание.Вставить("Исполнитель", Каталоги["Исполняемый"]);

	Возврат Описание;

КонецФункции // ()

Функция КаталогиДляПервичнойПодготовки(Каталоги) Экспорт

	Описание = Новый Структура;
	Описание.Вставить("Корень", Каталоги["Корень"]);
	Описание.Вставить("Источник", Каталоги["Начальный"]);

	Возврат Описание;

КонецФункции // ()

Функция КаталогиДляТекстовойОбработки(Каталоги) Экспорт

	Описание = Новый Структура;
	Описание.Вставить("Корень", Каталоги["Корень"]);
	Описание.Вставить("Источник", Каталоги["Текст"]);

	Возврат Описание;

КонецФункции // ()

Функция ИспользоватьКаталогПоУмолчанию(КаталогИсточник)

	Возврат ПустаяСтрока(КаталогИсточник);

КонецФункции // ()

#КонецОбласти

#Область СлужебныйИнтерфейсИсполняемыеФайлы

Функция ИмяФайлаКонвертера() Экспорт

	Имена = ИсполнимыеФайлы();
	Возврат Имена["Конвертер"];

КонецФункции // ()

Функция ИмяФайлаПревью() Экспорт

	Имена = ИсполнимыеФайлы();
	Возврат Имена["Уменьшатель"];

КонецФункции // ()

Функция ИмяФайлаРаспознавателя() Экспорт

	Имена = ИсполнимыеФайлы();
	Возврат Имена["Распознаватель"];

КонецФункции // ()

#КонецОбласти

Функция СоставитьОграничениеСтраниц(ПоследняяСтраница) Экспорт

	Возврат ОграничениеСтраницКонвертера(ПоследняяСтраница);

КонецФункции

Функция СуществуетКаталог(Каталог) Экспорт

	Если Не (Каталог.Существует()
		И Каталог.ЭтоКаталог()) Тогда
	
		МестоИсполнения = ГдеИсполняетсяКод();

		ВызватьИсключение СтрШаблон(
			"%1 не существует каталог: %2",
			МестоИсполнения,
			Каталог.ПолноеИмя
		);
	
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ()

#Область СлужебныйИнтерфейсТехнический

#Область ТехническийСрелаВыполнения

Функция ЭтоWindows() Экспорт

	#Если Сервер Тогда
		Возврат ОбщегоНазначения.ЭтоWindowsСервер();
	#КонецЕсли
	
	#Если Клиент Тогда
		Возврат ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент();
	#КонецЕсли
	
	Возврат Ложь;

КонецФункции // ()

Функция ЭтоLinux() Экспорт

	#Если Сервер Тогда
		Возврат ОбщегоНазначения.ЭтоLinuxСервер();
	#КонецЕсли
	
	#Если Клиент Тогда
		Возврат ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент();
	#КонецЕсли
	
	Возврат Ложь;

КонецФункции // ()

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КонфигурационныеНастройки

Функция КаталогиДляОчистки(Каталоги) Экспорт

	Набор = Новый Массив;
	Набор.Добавить(Каталоги["PDF"]);
	Набор.Добавить(Каталоги["Изображения"]);
	Набор.Добавить(Каталоги["Текст"]);
	Набор.Добавить(Каталоги["МиниИзображения"]);

	Возврат Набор;

КонецФункции // ()

Функция ОписаниеПодкаталогов()

	Описание = Новый Структура;
	Описание.Вставить("Исполняемый", "CMD");
	Описание.Вставить("PDF", "WORDTOPDF");
	Описание.Вставить("Изображения", "JPEG");
	Описание.Вставить("Текст", "TXT");
	Описание.Вставить("МиниИзображения", "TEMPJPEG");
	Описание.Вставить("Начальный", "START");
	
	Возврат Описание;

КонецФункции // ()

Функция ИсполнимыеФайлы()

	Описание = ОбщиеНастройкиКонфигурации.ПарсингДокументовИсполнимыеФайлы();
	Если Не ЗначениеЗаполнено(Описание) Тогда
	
		ВызватьИсключение УправленияСообщениямиКлиентСервер.ИнструкцияКОшибке(
			"Не поддерживаемая система",
			"Обработка документов производится на:
			| - Windows
			| - Linux (Рекомендуемая OS - Ubuntu)"
		);
	
	КонецЕсли;
	
	Возврат Описание;

КонецФункции // ()

Функция МакетыИсполнения()

	//Макеты = Новый Структура;
	//Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
	//
	//	Макеты.Вставить("Конвертер", "ConverterLinux");
	//	Макеты.Вставить("Распознаватель", "ParserLinux");
	//
	//ИначеЕсли ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент() Тогда
	//
	//	Макеты.Вставить("Конвертер", "ConverterWindows");
	//	Макеты.Вставить("Распознаватель", "ParserWindows");
	//
	//ИначеЕсли ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
	//
	//	ВызватьИсключение "В разработке";
	//
	//Иначе
	//
	//	ВызватьИсключение УправленияСообщениямиКлиентСервер.ИнструкцияКОшибке(
	//		"Не поддерживаемая система",
	//		"Обработка документов производится на:
	//		| - Windows
	//		| - Linux (Рекомендуемая OS - Ubuntu)"
	//	);
	//
	//КонецЕсли;
	
	Макеты = ОбщиеНастройкиКонфигурации.ПарсингДокументовМакеты();
	Если Не ЗначениеЗаполнено(Макеты) Тогда
	
		ВызватьИсключение УправленияСообщениямиКлиентСервер.ИнструкцияКОшибке(
			"Не поддерживаемая система",
			"Обработка документов производится на:
			| - Windows
			| - Linux (Рекомендуемая OS - Ubuntu)"
		);
	
	КонецЕсли;
	
	Возврат Макеты;

КонецФункции // ()

#КонецОбласти

#Область СлужебныеИсполнимыеФайлы

Функция СоздатьИсполнимыеФайлы(ИсполняемыйКаталог)

	ОписаниеИсполнения = ИсполнимыеФайлы();
	Макеты =  МакетыИсполнения();
	
	Каталог = Новый Файл(ИсполняемыйКаталог);
	Для каждого Макет Из Макеты Цикл
	
		ДвоичныеДанные = НастройкиПарсингаКлиентСервер.ПолучитьДанныеМакета(Макет.Значение);
		Файл = Новый Файл(Каталог.ПолноеИмя + ПолучитьРазделительПути() + ОписаниеИсполнения[Макет.Ключ]);
		Попытка
		
			ДвоичныеДанные.Записать(Файл.ПолноеИмя);
		
		Исключение
			ВызватьИсключение УправленияСообщениямиКлиентСервер.ИнструкцияКОшибке(
				"Не удалось записать исполняемый файл",
				ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
	
	КонецЦикла;

	Возврат Истина;
	
КонецФункции // ()

#КонецОбласти

Функция КонвертироватьПутиВФайлы(Каталоги)

	ФайлыКаталогов = Новый Структура;
	Для каждого Каталог Из Каталоги Цикл
	
		Файл = Новый Файл(Каталог.Значение);
		Если Не Файл.Существует() Тогда
		
			ВызватьИсключение УправленияСообщениямиКлиентСервер.ИнструкцияКОшибке(
				"Ошибка при проверке каталога",
				"Не существует каталога: " + Каталог.Значение
			);
		
		КонецЕсли;
		ФайлыКаталогов.Вставить(Каталог.Ключ, Файл);
	
	КонецЦикла;
	
	Возврат ФайлыКаталогов;

КонецФункции // ()

Функция ОграничениеСтраницКонвертера(ПоследняяСтраница)

	Если ПоследняяСтраница = 0 Тогда
	
		Возврат "";
	
	КонецЕсли;
	Возврат СтрШаблон("[0-%1]", ПоследняяСтраница - 1);

КонецФункции // ()

Функция ГдеИсполняетсяКод()

	#Если Сервер Тогда
		Возврат "На Сервере";
	#КонецЕсли
	
	#Если Клиент Тогда
		Возврат "На Клиенте";
	#КонецЕсли

КонецФункции // ()

Функция УдалитьКаталоги(Каталоги)

	Для каждого Каталог Из Каталоги Цикл
	
		Файл = Новый Файл(Каталог);
		Если Не Файл.Существует() Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		Попытка
		
			УдалитьФайлы(Каталог);
		
		Исключение
			Возврат Ложь;
		КонецПопытки;
	
	КонецЦикла;
	
	Возврат Истина;

КонецФункции // ()

#КонецОбласти

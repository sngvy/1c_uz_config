Процедура ПроставитьЧасовойПояс() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ЭтоГруппа = ЛОЖЬ
		|	И Контрагенты.ЧасовойПояс = """"";
	
	Запрос.УстановитьПараметр("Ссылка", Справочники.Контрагенты.ПустаяСсылка());
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого ДолжникСсылка из РезультатЗапроса Цикл
		ДолжникОбъект = ДолжникСсылка.Ссылка.ПолучитьОбъект();
		КодРегиона = НайтиКодРегиона(ДолжникСсылка.Ссылка);
		ЧасовойПояс = НайтиЧасПояс(Строка(КодРегиона));
		ДолжникОбъект.ЧасовойПояс = ЧасовойПояс;
		ДолжникОбъект.Записать();		
	КонецЦикла;	
КонецПроцедуры

Функция НайтиКодРегиона(Должник) Экспорт
	//Изменено Лебедева 30.01.2019
	//В зависимости от вида строки адреса: ФИАС, КЛАДР и Строка искать Регион по индексу
	
	//Определим, доп реквизит или доп сведение
	//изменено Лебедева 19.06.2019
	Свойство = Константы.АдресИндекс.Получить(); //ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоКоду("0101     ");
	ЭтоДопСведение = Свойство.ЭтоДополнительноеСведение;
	Если ЭтоДопСведение Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеСведения.Объект КАК Объект,
		|	ДополнительныеСведения.Свойство КАК Свойство,
		|	ДополнительныеСведения.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Свойство = &Свойство
		|	И ДополнительныеСведения.Объект = &Объект";
		
		Запрос.УстановитьПараметр("Объект", Должник);
		
		Запрос.УстановитьПараметр("Свойство", Свойство);
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрагентыДополнительныеРеквизиты.Ссылка КАК Ссылка,
		|	КонтрагентыДополнительныеРеквизиты.Свойство КАК Свойство,
		|	КонтрагентыДополнительныеРеквизиты.Значение КАК Значение
		|ИЗ
		|	Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
		|ГДЕ
		|	КонтрагентыДополнительныеРеквизиты.Свойство = &Свойство
		|	И КонтрагентыДополнительныеРеквизиты.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Должник);
		Запрос.УстановитьПараметр("Свойство", Свойство);	
	КонецЕсли;
	
	ВидСтрокиСвойства = Свойство.ВидСтроки;
		
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		СтрАдрес = Результат.Значение;
		СтрИндекс = ПолучитьИндексПоАдресу(СтрАдрес,"Индекс",ВидСтрокиСвойства);
		Возврат ПолучитьКодРегионаПоИндексу(стрИндекс,ВидСтрокиСвойства);		
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция НайтиЧасПояс(Регион)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЧасовыеПояса.ЧасовойПояс КАК ЧасовойПояс
		|ИЗ
		|	РегистрСведений.ЧасовыеПояса КАК ЧасовыеПояса
		|ГДЕ
		|	ЧасовыеПояса.КодРегиона = &КодРегиона";
	
	Запрос.УстановитьПараметр("КодРегиона", Регион);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Возврат ("");
	Иначе
		Массив = ПолучитьДопустимыеЧасовыеПояса();
		//МассивПредставлений = Новый Массив;
		НайденныйПояс = Строка(РезультатЗапроса[0].ЧасовойПояс);
		Для Каждого Пояс Из Массив Цикл
			Если Найти(ПредставлениеЧасовогоПояса(Пояс), НайденныйПояс) > 0 Тогда
				Возврат Пояс; 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
КонецФункции

Процедура ЗаполнитьКонстантыИзФЗ()Экспорт
	
	Константы.БудниВремяОт.Установить(Дата('00010101080000'));
	Константы.ВыходныеВремяОт.Установить(Дата ('00010101090000'));
	Константы.БудниВремяДо.Установить(Дата('00010101220000'));
	Константы.ВыходныеВремяДо.Установить(Дата('00010101200000'));
	
	Константы.ЗвонкиДень.Установить(Число("1"));
	Константы.ЗвонкиНеделя.Установить(Число("2"));
	Константы.ЗвонкиМесяц.Установить(Число("8"));
	
	Константы.СообщенияДень.Установить(Число("2"));
	Константы.СообщенияНеделя.Установить(Число("4"));
	Константы.СообщенияМесяц.Установить(Число("16"));
	
	АдресМестоположения = ПолучитьАдресМестоположения();
	Константы.АдресИндекс.Установить(АдресМестоположения);
	
КонецПроцедуры

Функция ПолучитьАдресМестоположения()Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	                      |ГДЕ
	                      |	ДополнительныеРеквизитыИСведения.ЭтоГруппа = ЛОЖЬ
	                      |	И ДополнительныеРеквизитыИСведения.ПометкаУдаления = ЛОЖЬ
	                      |	И ДополнительныеРеквизитыИСведения.Наименование ПОДОБНО ""%адрес%""
	                      |	И ДополнительныеРеквизитыИСведения.СправочникВладелец = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.Справочник_Контрагенты)");
	
	//Запрос.УстановитьПараметр("Наименование","Адрес");
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 0 Тогда
		Возврат Результат[0].Ссылка;
	Иначе
		Возврат ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
	КонецЕсли;	
	
	
КонецФункции

&НаСервере
Функция ПолучитьКодРегионаПоИндексу(Индекс,ВидСтрокиСвойства) Экспорт
	
	ИспользоватьЭталонныйСправочник = Константы.ИспользоватьЭталонныйСправочникИндексов.Получить(); 
	Если ИспользоватьЭталонныйСправочник Тогда
		Значение = ПолучитьКодРегионаПоИндексуЭталонныйСправочник(Индекс);
	Иначе	
		Если ВидСтрокиСвойства = Перечисления.ВидыТипаСтрока.Строка Тогда
			Значение = 0;
			Значение = ПолучитьКодРегионаПоИндексуКЛАДР(Индекс);
			Если Значение = 0 Тогда
				Значение = ПолучитьКодРегионаПоИндексуФИАС(Индекс);
			КонецЕсли;	
		ИначеЕсли ВидСтрокиСвойства = Перечисления.ВидыТипаСтрока.Адрес Тогда
			Значение = ПолучитьКодРегионаПоИндексуКЛАДР(Индекс); 
		ИначеЕсли ВидСтрокиСвойства = Перечисления.ВидыТипаСтрока.АдресФИАС Тогда
			Значение = ПолучитьКодРегионаПоИндексуФИАС(Индекс);		 
		Иначе
			Значение = 0;
		КонецЕсли;	
	КонецЕсли;
	Возврат Значение;

КонецФункции

&НаСервере
Функция ПолучитьИндексПоАдресу(СтрАдрес,ЧастьАдресаИ,ВидСтрокиСвойства) Экспорт
	Если ВидСтрокиСвойства = Перечисления.ВидыТипаСтрока.Строка Тогда
		Значение = СтрАдрес;
		стрцифры = "0123456789";
		стрИндекс = "";
		Для к = 1 по стрДлина(Значение) Цикл
			Буква = Сред(Значение, к, 1);
			Если Найти(стрЦифры, Буква) > 0 Тогда
				стрИндекс = стрИндекс + Буква;
				если стрДлина(стрИндекс) = 6 Тогда
					Прервать;
				КонецЕсли;
			Иначе
				стрИндекс = "";
			КонецЕсли;
		КонецЦикла;	
	ИначеЕсли ВидСтрокиСвойства = Перечисления.ВидыТипаСтрока.Адрес Тогда
		стрИндекс = бит_АдресныйКлассификатор.ПолучитьЧастьАдресаИзКЛАДР(СтрАдрес,ЧастьАдресаИ);
	ИначеЕсли ВидСтрокиСвойства = Перечисления.ВидыТипаСтрока.АдресФИАС Тогда
		стрИндекс = бит_АдресныйКлассификатор.ПолучитьЧастьАдресаИзФИАС(СтрАдрес,ЧастьАдресаИ);
	Иначе
		СтрИндекс = "";
	КонецЕсли;	
	Возврат СтрИндекс;
КонецФункции


&НаСервере
Функция ПолучитьКодРегионаПоИндексуКЛАДР(Индекс) Экспорт 
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	АдресныйКлассификатор.КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде
	|ИЗ
	|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|ГДЕ
	|	АдресныйКлассификатор.Индекс = &Индекс");	
	Запрос.УстановитьПараметр("Индекс", Индекс);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Значение = Результат.КодАдресногоОбъектаВКоде;
	Иначе
		Значение = 0;
	КонецЕсли;
	Возврат Значение;
КонецФункции	

&НаСервере
Функция ПолучитьКодРегионаПоИндексуФИАС(Индекс) Экспорт 
	Попытка
		ЧислоИндекс = Число(Индекс);
	Исключение
		Возврат 0;
	КонецПопытки;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	| ДополнительныеАдресныеСведения.КодСубъектаРФ КАК КодАдресногоОбъектаВКоде,
	| ДополнительныеАдресныеСведения.ПочтовыйИндекс КАК стрИндекc
	|ИЗ
	| РегистрСведений.ДополнительныеАдресныеСведения КАК ДополнительныеАдресныеСведения
	|ГДЕ
	| ДополнительныеАдресныеСведения.ПочтовыйИндекс = &Индекс");
	
	
	Запрос.УстановитьПараметр("Индекс", ЧислоИндекс);
	
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Значение = Результат.КодАдресногоОбъектаВКоде;
	Иначе
		Запрос1 = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|ДополнительныеАдресныеСведения.КодСубъектаРФ КАК КодАдресногоОбъектаВКоде,
		|ВЫРАЗИТЬ(ДополнительныеАдресныеСведения.ПочтовыйИндекс / 1000 - 0.5 КАК ЧИСЛО(3,0)) КАК стрИндек
		|ИЗ
		|РегистрСведений.ДополнительныеАдресныеСведения КАК ДополнительныеАдресныеСведения
		|ГДЕ
		|(ВЫРАЗИТЬ(ДополнительныеАдресныеСведения.ПочтовыйИндекс / 1000 - 0.5 КАК ЧИСЛО(3, 0))) = &Индекс");
		
		
		Запрос1.УстановитьПараметр("Индекс", Число(Лев(Индекс, 3)));
		Результат1 = Запрос1.Выполнить().Выбрать();
		Если Результат1.Следующий() Тогда
			Значение = Результат1.КодАдресногоОбъектаВКоде;
		Иначе
			Значение = 0;
		КонецЕсли;
	КонецЕсли;
	Возврат Значение;

КонецФункции	

&НаСервере
Функция ПолучитьКодРегионаПоИндексуЭталонныйСправочник(Индекс) Экспорт 
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭталонныйСправочникИндексовРФ.КодРегиона КАК КодРегиона
	|ИЗ
	|	РегистрСведений.ЭталонныйСправочникИндексовРФ КАК ЭталонныйСправочникИндексовРФ
	|ГДЕ
	|	ЭталонныйСправочникИндексовРФ.Индекс = &Индекс";
	
	Запрос.УстановитьПараметр("Индекс", Индекс);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Значение = ВыборкаДетальныеЗаписи.КодРегиона; 
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		ТриЦифрыРегиона = Лев(Индекс,3) + Строка("%");
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭталонныйСправочникИндексовРФ.КодРегиона КАК КодРегиона
		|ИЗ
		|	РегистрСведений.ЭталонныйСправочникИндексовРФ КАК ЭталонныйСправочникИндексовРФ
		|ГДЕ
		|	ЭталонныйСправочникИндексовРФ.Индекс ПОДОБНО &Индекс";
		
		Запрос.УстановитьПараметр("Индекс", ТриЦифрыРегиона);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Значение = ВыборкаДетальныеЗаписи.КодРегиона;
		КонецЦикла;
	КонецЕсли;   	
	
	Возврат Значение;

КонецФункции	

&НаСервере
Функция ПолучитьКодРегионаПоСтроке(СтрокаЗначение) Экспорт
	Значение = 0;
	
	СтрокаЗначение = стрЗаменить(СтрокаЗначение, "(", " ");
	СтрокаЗначение = стрЗаменить(СтрокаЗначение, ".", " ");
	СтрокаЗначение = стрЗаменить(СтрокаЗначение, ")", " ");
	СтрокаЗначение = стрЗаменить(СтрокаЗначение, ":", " ");
	СтрокаЗначение = стрЗаменить(СтрокаЗначение, ";", " ");
	СтрокаЗначение = стрЗаменить(СтрокаЗначение, ",", " ");
	СтрокаЗначение = стрЗаменить(СтрокаЗначение, "  ", " ");
	СтрокаЗначение = стрЗаменить(СтрокаЗначение, "  ", " ");
	
	
	
	МассивПодстрок =  СтрРазделить(СтрокаЗначение," ",Ложь);
	
	Для Каждого Построка из МассивПодстрок Цикл   
		ТипСлова = ПолучитьТипСлова(Построка);
		Если ТипСлова = "Число" Тогда
			Значение = Число(Построка);
			Прервать; 
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Значение;
	
	
КонецФункции       

&НаСервере
Функция ПолучитьТипСлова(Слово) 
	
	
	//Попытка
	//      ДатаИП = Дата(Слово + " 00:00:00");
	//      Возврат "Дата";
	//Исключение
	//КонецПопытки;
	
	Если Врег(Слово) = "СЕРИЯ" Тогда
		Возврат "Символ";
	КонецЕсли;
	
	СтрокаЦифры = "0123456789";
	СтрокаБуквы = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЫЬЪЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ";
	СтрокаСимволы = "-/";
	
	
	ЕстьБуквы = Ложь;
	стр = Слово;
	Пока СтрДлина(стр) > 0 Цикл
		Буква = Лев(стр, 1);
		стр = Прав(стр, стрДлина(стр) - 1);
		Если СтрНайти(СтрокаБуквы, врег(Буква)) > 0 Тогда
			ЕстьБуквы = Истина;
			//Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьЦифры = Ложь;
	стр = Слово;
	Пока СтрДлина(стр) > 0 Цикл
		Буква = Лев(стр, 1);
		стр = Прав(стр, стрДлина(стр) - 1);
		Если СтрНайти(СтрокаЦифры, Буква) > 0 Тогда
			ЕстьЦифры = Истина;
			//Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьСимволы = Ложь;
	
	
	Если ЕстьЦифры И Не ЕстьБуквы Тогда
		Попытка
			ДатаИП = Дата(Слово + " 00:00:00");
			Возврат "Дата";
		Исключение
			Возврат "Число";
		КонецПопытки;
	ИначеЕсли ЕстьЦифры и ЕстьБуквы Тогда
		Возврат "Номер";
	ИначеЕсли Не ЕстьЦифры и ЕстьБуквы Тогда
		Если стрДлина(Слово) > 2 Тогда
			Возврат "Слово";
		Иначе
			Возврат "Буква";
		КонецЕсли;
	ИначеЕсли Не ЕстьЦифры и Не ЕстьБуквы Тогда
		Возврат "Символ";
	КонецЕсли;
КонецФункции



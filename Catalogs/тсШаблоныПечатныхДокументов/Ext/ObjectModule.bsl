
#Область ПрограммныйИнтерфейс

Процедура _ЗаписатьХранилищеЗначений(НомерСтроки, Хранилище) Экспорт
	Записать();
	Для Каждого Стр Из ЭтотОбъект.РеквизитыИСвойства Цикл
		Если Стр.НомерСтроки = НомерСтроки Тогда
			Стр.Хранилище = Хранилище;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Записать();
КонецПроцедуры

Процедура Записать_СтрокаХранилище(НомерСтроки, МассивДанных) Экспорт
	Записать();
	Для Каждого Стр Из ЭтотОбъект.РеквизитыИСвойства Цикл
		Если Стр.НомерСтроки = НомерСтроки Тогда
			Стр.СтрокаХранилище = "";
			Для Каждого СтрМ Из МассивДанных Цикл
				Стр.СтрокаХранилище = Стр.СтрокаХранилище + "[" + СтрМ + "]";
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Записать();
КонецПроцедуры

Процедура _ЗаписатьХранилищеЗначенийТаблицаТаблиц(ИндексСтроки, Хранилище, UID) Экспорт
	Записать();
	Структура = Новый Структура;
	Структура.Вставить("UID", UID);
	Стр = ЭтотОбъект.ТаблицаТаблиц.НайтиСтроки(Структура);
	Стр[ИндексСтроки].Хранилище = Хранилище;
	Записать();
КонецПроцедуры

Процедура _ЗаполнитьХранилищеТаблицаВыбораТаблиц(НомерСтроки, Хранилище) Экспорт
	Записать();
	Для Каждого Стр Из ЭтотОбъект.ТаблицаВыбораТаблиц Цикл
		Если Стр.НомерСтроки = НомерСтроки Тогда
			Стр.Хранилище = Хранилище;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Записать();
КонецПроцедуры

Процедура ЗагрузитьМакет(АдресВХ) Экспорт

	ЗагрузитьМакетБезСохранения(АдресВХ);
	Записать();

КонецПроцедуры

Функция МакетШаблона() Экспорт

	Возврат ХранилищеШаблона.Получить();
	
КонецФункции

#Область ИнтерфейсИнициализация

Функция ЭтоКонвертация() Экспорт

	ДополнительныеСвойства.Вставить("Конвертация", Истина);
	
	Возврат ЭтотОбъект;

КонецФункции // ()

Функция УстановитьМакет(Значение) Экспорт

	ДополнительныеСвойства.Вставить("Макет", Значение);
	
	Возврат ЭтотОбъект;

КонецФункции // ()

Функция ТипШаблона(Значение) Экспорт

	Если ТипЗнч(Значение) <> Тип("ПеречислениеСсылка.ТипыЭлДок") Тогда
	
		ВызватьИсключение "Необходимо передать ПеречислениеСсылка.ТипыЭлДок";
	
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТипШаблона", Значение);
	
	Возврат ЭтотОбъект;

КонецФункции // ()

Функция ТегЛево(Значение = "") Экспорт

	Тег = ЗначенияНовогоТега();
	Тег.Вставить("Начало", Значение);
	
	Возврат ЭтотОбъект;

КонецФункции // ()

Функция ТегПраво(Значение = "") Экспорт

	Тег = ЗначенияНовогоТега();
	Тег.Вставить("Конец", Значение);
	
	Возврат ЭтотОбъект;

КонецФункции // ()

Функция Собрать() Экспорт

	УстановитьНовыйТег();
	УстановитьНовыйМакет();
	УстановитьТипШаблона();
	КорректировкаНастроенныхТегов();
	ЗаполнитьСведенияОбластей();
	
	Возврат ЭтотОбъект;

КонецФункции // ()

#КонецОбласти

#Область ИнтерфейсОбработкаМакетаСКД

Функция ПараметрыОбластейШаблонаСКД() Экспорт

	Макет = ИнициализироватьМакет();
	ПараметрыОбластей = Новый Структура;
	Для каждого Область Из Макет.СтруктураДокумента.ОбластиДокумента Цикл
	
		ТегиОбласти = Справочники.тсШаблоныПечатныхДокументов.ПолучитьПараметрыОбласти(
			Макет,
			Область
		);
		ПараметрыОбластей.Вставить(
			Область.Ключ,
			ТегиОбласти
		);
	
	КонецЦикла;
	
	Возврат ПараметрыОбластей;

КонецФункции // ()

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если НЕ ЭтотОбъект.ЭтоГруппа Тогда
	
		ЭтотОбъект.ТипДокумента = Константы.ТипШаблонаДляПечати.Получить();
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	Если ТипДокумента = Перечисления.ТипыЭлДок.Универсальный
		И ВТегахЕстьТочки() Тогда
	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "В Универсальных шаблонах у Тегов не должно быть ""."" (Точек)";
		Сообщение.Сообщить();
		
		Отказ = Истина;
	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеОбработкаМакетаСКД

Функция ИнициализироватьМакет()

	БинДанные = МакетШаблона();
	Возврат УправлениеПечатью.ИнициализироватьМакетОфисногоДокумента(
		БинДанные,
		""
	);

КонецФункции // ()

#КонецОбласти

Функция ЗначенияНовогоТега()

	Тег = Неопределено;
	Если Не ДополнительныеСвойства.Свойство("Тег", Тег) Тогда
	
		Тег = Новый Структура;
		Тег.Вставить("Начало", "");
		Тег.Вставить("Конец", "");
	
	КонецЕсли;
	
	Возврат Тег;

КонецФункции // ()

Процедура УстановитьНовыйТег()

	Тег = ЗначенияНовогоТега();
	
	СтарыйТег = Новый Структура;
	СтарыйТег.Вставить("Начало", НачалоТега);
	СтарыйТег.Вставить("Конец", КонецТега);
	
	НачалоТега = Тег["Начало"];
	КонецТега = Тег["Конец"];
	
	ТегРегНомер = ЗаменитьСимволТега(ТегРегНомер, СтарыйТег, Тег);
	ТегРегДата = ЗаменитьСимволТега(ТегРегДата, СтарыйТег, Тег);
	
	Для каждого Настройка Из РеквизитыИСвойства Цикл
	
		Настройка.Поле = ЗаменитьСимволТега(
			Настройка.Поле,
			СтарыйТег,
			Тег
		);
	
	КонецЦикла;

КонецПроцедуры

Функция ЗаменитьСимволТега(Знач Текст, СтарыйТег, Тег)

	ЭтоКонвертация = Неопределено;
	Если ДополнительныеСвойства.Свойство("Конвертация", ЭтоКонвертация)
		И ЭтоКонвертация Тогда
	
		Текст = СтрЗаменить(Текст, " ", "");
	
	КонецЕсли;
	
	ЗашитыеДанные = УправлениеПечатьюУЗВспомогательныйКлиентСервер;
	Возврат ЗашитыеДанные.ЗаменитьСимволТега(Текст, СтарыйТег, Тег);

КонецФункции // ()

Процедура УстановитьНовыйМакет()

	Макет = Неопределено;
	Если ДополнительныеСвойства.Свойство("Макет", Макет) Тогда
	
		ЗагрузитьМакетБезСохранения(Макет);
	
	КонецЕсли;

КонецПроцедуры

Процедура ЗагрузитьМакетБезСохранения(Макет)

	БинДанные = ПолучитьИзВременногоХранилища(Макет);
	ХранилищеШаблона = Новый ХранилищеЗначения(БинДанные);

КонецПроцедуры

Процедура УстановитьТипШаблона()

	Если Не ЗначениеЗаполнено(ТипДокумента) Тогда
	
		ТипДокумента = Константы.ТипШаблонаДляПечати.Получить();
	
	КонецЕсли;
	
	ТипШаблона = Неопределено;
	Если ДополнительныеСвойства.Свойство("ТипШаблона", ТипШаблона) Тогда
	
		ТипДокумента = ТипШаблона;
	
	КонецЕсли;

КонецПроцедуры

Функция ТипШаблонаУстановленВручную()

	Возврат ДополнительныеСвойства.Свойство("ТипШаблона")
		ИЛИ ЗначениеЗаполнено(ТипДокумента);

КонецФункции // ()

Процедура ЗаполнитьСведенияОбластей()

	ОбластиШаблона.Очистить();
	Если ТипДокумента <> Перечисления.ТипыЭлДок.Универсальный Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ПараметрыОбластей = ПараметрыОбластейШаблонаСКД();

	Для каждого ПараметрыОбласти Из ПараметрыОбластей Цикл
	
		НоваяОбласть = ОбластиШаблона.Добавить();
		НоваяОбласть.ИмяОбласти = ПараметрыОбласти.Ключ;
		НоваяОбласть.ТипОбласти = "Общая";

		ПараметрыТекущейОбласти = ПараметрыОбласти.Значение;
		Для каждого ПараметрОбласти Из ПараметрыТекущейОбласти Цикл
		
			ТекущийПараметр = РеквизитыИСвойства.Найти(ПараметрОбласти, "Поле");
			
			Если ТекущийПараметр = Неопределено Тогда
			
				ТекущийПараметр = РеквизитыИСвойства.Добавить();
				ТекущийПараметр.Используется = Истина;
				ТекущийПараметр.Поле = ПараметрОбласти;
				ТекущийПараметр.ТипПоля = Перечисления.ТипыПолейУЭД.Реквизит;
			
			КонецЕсли;
			
			ТекущийПараметр.ИмяОбласти = НоваяОбласть.ИмяОбласти;
		
		КонецЦикла;
	
	КонецЦикла;

КонецПроцедуры

Процедура КорректировкаНастроенныхТегов()

	Если ТипДокумента <> Перечисления.ТипыЭлДок.Универсальный Тогда
	
		Возврат;
	
	КонецЕсли;
	
	Для каждого Настройка Из РеквизитыИСвойства Цикл
	
		Настройка.Поле = СтрЗаменить(Настройка.Поле, " ", "");
	
	КонецЦикла;

КонецПроцедуры

Функция ВТегахЕстьТочки()

	Поля = РеквизитыИСвойства.ВыгрузитьКолонку("Поле");
	Для каждого Поле Из Поля Цикл
	
		Если СтрНайти(Поле, ".") <> 0 Тогда
		
			Возврат Истина;
		
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции // ()


#КонецОбласти

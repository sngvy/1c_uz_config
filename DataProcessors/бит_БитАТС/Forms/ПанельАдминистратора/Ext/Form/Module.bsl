
&НаКлиенте
Перем обКонтроллерАТС;

&НаКлиенте
Перем Хост;

// Тип - Соответствие (Map)
// ключ - внутренний номер, значение - Строка, имя внутреннего абонента.
&НаКлиенте
Перем СоответствиеНомеровХоста;

&НаКлиенте
Перем фильтрТип;		// переменная для проверки изменения фильтра

&НаКлиенте
Перем фильтрВнешние;	// переменная для проверки изменения фильтра

&НаКлиенте
Перем ИнтервалОбновления;

//-----------------------------------------------------------------------------
// Тип - Соответствие (Map)
//  ключ - строка-номер телефона,
//  значение - структура из трех полей (КонтрагентСсылка, КонтактноеЛицоСсылка, Обновлен).
&НаКлиенте
Перем кэшКонтактов;

//-----------------------------------------------------------------------------
&НаКлиенте
Функция ИмяИсточникаСобытий()
	Возврат "БИТ.УправлениеАТС";
КонецФункции

&НаКлиенте
Процедура ОбновитьДоступность()
	Элементы.ГруппаАТС.Доступность						= Подключен;
	Элементы.ПодключитьАТС.Доступность					= НЕ Подключен;
	Элементы.ОтключитьАТС.Доступность					= Подключен;
	Элементы.ПозвонитьСоСвязанногоТелефона.Доступность	= Подключен;
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьТаймерОбновления(Таймаут)
	ПодключитьОбработчикОжидания("ОбновитьТаблицы", Таймаут, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОстановитьТаймерОбновления()
	ОтключитьОбработчикОжидания("ОбновитьТаблицы");
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	кэшКонтактов = Новый Соответствие;
	
	бит_ТелефонияКлиент.УстановитьЭлементОтбораДинамическогоСписка(ДеревоНомеров, "Владелец", ПредопределенноеЗначение("Справочник.бит_ТелефонныеСтанцииБитАТС.ПустаяСсылка"));
		
	ОбновитьДоступность();
		
	АвторизацияАдминистратор = бит_АТССервер.ПроверитьПраваАдминистрировать();
	
	Если АвторизацияАдминистратор Тогда
		Заголовок = "Администрирование БИТ.АТС";
	Иначе
		Заголовок = "Просмотр информации БИТ.АТС";
	КонецЕсли;
	
	Элементы.ЗвонкиКонтекстноеМенюПрослушать.Видимость	= АвторизацияАдминистратор;
	Элементы.ЗвонкиКонтекстноеМенюКонференция.Видимость	= АвторизацияАдминистратор;
	
	//
	Для Каждого ПолеНомера Из Элементы.Номера.ПодчиненныеЭлементы Цикл
		ПолеНомераЗаголовок = ПолеНомера.Заголовок;
		Если НЕ ЗначениеЗаполнено(ПолеНомераЗаголовок) Тогда
			ПолеНомераЗаголовок = ПолучитьЗаголовокПоляНомераИзРеквизитаСервер(ПолеНомера.Имя);
		КонецЕсли;
		Элементы.ПолеСортировки.СписокВыбора.Добавить(ПолеНомераЗаголовок);
	КонецЦикла;
	Если Элементы.ПолеСортировки.СписокВыбора.Количество() > 0 Тогда
		ПолеСортировки = Элементы.ПолеСортировки.СписокВыбора[0].Значение;
	КонецЕсли;
	//
	Если Элементы.НаправлениеСортировки.СписокВыбора.Количество() > 0 Тогда
		НаправлениеСортировки = Элементы.НаправлениеСортировки.СписокВыбора[0].Значение;
	КонецЕсли;
	
	ПодключитьВК();
	
КонецПроцедуры

&НаСервере
Функция ПроверитьДоступностьПодключенияКРазговоруСервер(ГруппаДоступаСсылка)
	АдминистраторАТС = бит_АТССервер.ПроверитьПраваАдминистрировать();
	Если АдминистраторАТС Тогда
		Возврат Истина;
	КонецЕсли;
	ТекущПольз = бит_ТелефонияСервер.ПолучитьТекущегоПользователя();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_ГруппыДоступаБитАТСПользователи.Пользователь.Ссылка
	               |ИЗ
	               |	Справочник.бит_ГруппыДоступаБитАТС.Пользователи КАК бит_ГруппыДоступаБитАТСПользователи
	               |ГДЕ
	               |	бит_ГруппыДоступаБитАТСПользователи.Ссылка = &ГруппаДоступа
	               |	И бит_ГруппыДоступаБитАТСПользователи.Пользователь.Ссылка = &Пользователь";
	Запрос.УстановитьПараметр("ГруппаДоступа", ГруппаДоступаСсылка);
	Запрос.УстановитьПараметр("Пользователь", ТекущПольз);
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции

&НаСервере
Функция ПолучитьЗаголовокПоляНомераИзРеквизитаСервер(ИмяЭлемента)
	ЗаголовокРеквизита = "";
	ПутьКДаннымРеквизита = Элементы[ИмяЭлемента].ПутьКДанным;
	массРеквизитов = ПолучитьРеквизиты("Номера");
	Для Каждого реквизит Из массРеквизитов Цикл
		путьРеквизита = реквизит.Путь + "." + реквизит.Имя;
		Если путьРеквизита = ПутьКДаннымРеквизита Тогда
			ЗаголовокРеквизита = реквизит.Заголовок;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат ЗаголовокРеквизита;
КонецФункции

&НаКлиенте
Процедура ПодключитьАТС(Команда)
	ПодключитьВК();
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьАТС(Команда)
	Отключить();
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьВК()
	Если обКонтроллерАТС <> Неопределено Тогда
		обКонтроллерАТС = Неопределено;
	КонецЕсли;
	бит_АТСКлиент.ПодключениеКомпонентыУправлениеАТС("БитфонПанельБИТАТС_ПодключениеВнешнейКомпоненты");
КонецПроцедуры

&НаКлиенте
Процедура Подключить()
	
	Попытка

		бит_АТСКлиент.УстановитьПараметрыПроверкиЛицензии(обКонтроллерАТС, Ложь);
		
		ТекущаяАТС = бит_АТССервер.ПолучитьАТС();
		
		Если НЕ ЗначениеЗаполнено(ТекущаяАТС) Тогда
			бит_ТелефонияКлиент.ВывестиСообщение("Не задана АТС для подключения в настройках", ЭтаФорма);
			Возврат;
		КонецЕсли;
		
		НомерСвязанногоТелефона = бит_АТССервер.ПолучитьНомерСвязанногоТелефона();
		Если НЕ ЗначениеЗаполнено(НомерСвязанногоТелефона) Тогда
			бит_ТелефонияКлиент.ВывестиСообщение(
				"Не задан номер связанного телефона в настройках! Исходящие звонки, подключения к разговорам и перевод ожидающих звонков себе невозможны",
				ЭтаФорма);
		КонецЕсли;
		
		ИнтервалОбновления = бит_АТССервер.ПолучитьИнтервалОбновления();
		Если ИнтервалОбновления = 0 Тогда
			бит_ТелефонияКлиент.ВывестиСообщение("Не задан интервал обновления в настройках, принимается 5 сек", ЭтаФорма);
			ИнтервалОбновления = 5;
		КонецЕсли;
				
		СписокНомеровХоста = "";
		Хост = бит_АТССервер.ПолучитьПараметрыАТС(ТекущаяАТС, СписокНомеровХоста, СоответствиеНомеровХоста);
		
		обКонтроллерАТС.Connect(Хост.Адрес, Хост.Пользователь, Хост.Пароль,
							СписокНомеровХоста);
		
		Подключен = обКонтроллерАТС.IsConnected;
		
		ВосстановлениеПодключения = НЕ Подключен;
	
		// установка фильтра дерева иерархии номеров
		бит_ТелефонияКлиент.УстановитьЭлементОтбораДинамическогоСписка(ДеревоНомеров, "Владелец", ТекущаяАТС);
		
		//
		ОбновитьДоступность();
		
	Исключение
		бит_ТелефонияКлиент.ВывестиСообщение( ОписаниеОшибки(), ЭтаФорма );
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Отключить()
	
	ОстановитьТаймерОбновления();
		
	Попытка
		
		обКонтроллерАТС.Disconnect();
		
		Подключен = обКонтроллерАТС.IsConnected;
		
	Исключение
		
		бит_ТелефонияКлиент.ВывестиСообщение( "Ошибка отключения от АТС", ЭтаФорма );
		бит_ТелефонияКлиент.ВывестиСообщение( ОписаниеОшибки(), ЭтаФорма );
		Подключен = Ложь;
		
	КонецПопытки;
	
	ОбновитьДоступность();
	
	//
	
	НомерСвязанногоТелефона = "";
	ТекущаяАТС = ПредопределенноеЗначение("Справочник.бит_ТелефонныеСтанцииБитАТС.ПустаяСсылка");
	
	Хост = Неопределено;
	
	СоответствиеНомеровХоста = Неопределено;
	
	// сброс фильтра дерева иерархии номеров
	бит_ТелефонияКлиент.УстановитьЭлементОтбораДинамическогоСписка(ДеревоНомеров, "Владелец", ПредопределенноеЗначение("Справочник.бит_ТелефонныеСтанцииБитАТС.ПустаяСсылка"));
	
	//
	
	ОчиститьТаблицуНомеров();
	
	ОчиститьТаблицуЗвонков();
	
	ОчиститьТаблицуКрасныхГрупп();
	
	ОчиститьТаблицуОчередей();
	
	ОчиститьТаблицуОжидающих();
	
	ОчиститьТаблицуТранков();
	
	ВсегоЗвонков = 0;
	
	Элементы.ГруппаАТС.ТекущаяСтраница = Элементы.ГруппаНомера;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура ОчиститьТаблицуНомеров()
	Номера.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуЗвонков()
	Звонки.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуКрасныхГрупп()
	КрасныеГруппы.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуОчередей()
	Очереди.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуОжидающих()
	Ожидающие.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуТранков()
	ЗагрузкаТранков.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицыОчередейИОжидающих(ХмлОчереди)
	
	чтение = Новый ЧтениеXML();
	чтение.УстановитьСтроку(ХмлОчереди);
	
	дом = Новый ПостроительDOM();
	докХмл = дом.Прочитать(чтение);
	
	списокОчередей = докХмл.ЭлементДокумента.ДочерниеУзлы;
	
	ИзменитьРазмерТаблицы(Очереди, списокОчередей.Количество());
	
	//
	ИндексТекущейСтрокиОжидающих = Ожидающие.Индекс(Элементы.Ожидающие.ТекущиеДанные);
	ОчиститьТаблицуОжидающих();
	
	//
	ИндексТекущейСтрокиКрасныхГрупп = КрасныеГруппы.Индекс(Элементы.КрасныеГруппы.ТекущиеДанные);
	ОчиститьТаблицуКрасныхГрупп();
	
	//
	счетчикОчередей = 0;
	Для Каждого домОчередь ИЗ списокОчередей Цикл
		ид					= домОчередь.ПолучитьАтрибут("id");
		ИмяОчереди			= домОчередь.ПолучитьАтрибут("name");
		НомерОчереди		= домОчередь.ПолучитьАтрибут("number");
		текущиеЗвонки		= домОчередь.ПолучитьАтрибут("current_calls");
		стратегия			= домОчередь.ПолучитьАтрибут("strategy");
		времяУдержания		= домОчередь.ПолучитьАтрибут("hold_time");
		времяРазговора		= домОчередь.ПолучитьАтрибут("talk_time");
		вес					= домОчередь.ПолучитьАтрибут("weight");
		отвечено			= домОчередь.ПолучитьАтрибут("answered");
		неотвечено			= домОчередь.ПолучитьАтрибут("unanswered");
		уровеньОбслуживания	= домОчередь.ПолучитьАтрибут("service_level");
		периодОбслуживания	= домОчередь.ПолучитьАтрибут("service_period");
		//
		списокЧленов = домОчередь.ПолучитьЭлементыПоИмени("Members", "Member");
		списокОжидающих = домОчередь.ПолучитьЭлементыПоИмени("Callers", "Caller");
		//
		КолвоОжидающих = списокОжидающих.Количество();
		//
		СтрокаТаблОчередей = Очереди[счетчикОчередей];
		СтрокаТаблОчередей.ID					= ид;
		СтрокаТаблОчередей.Наименование			= ИмяОчереди;
		СтрокаТаблОчередей.Номер				= НомерОчереди;
		СтрокаТаблОчередей.ТекущиеЗвонки		= текущиеЗвонки;
		СтрокаТаблОчередей.Стратегия			= стратегия;
		СтрокаТаблОчередей.ВремяУдержания		= времяУдержания;
		СтрокаТаблОчередей.ВремяРазговора		= времяРазговора;
		СтрокаТаблОчередей.Вес					= вес;
		СтрокаТаблОчередей.Отвечено				= отвечено;
		СтрокаТаблОчередей.Неотвечено			= неотвечено;
		СтрокаТаблОчередей.УровеньОбслуживания	= уровеньОбслуживания;
		СтрокаТаблОчередей.ПериодОбслуживания	= периодОбслуживания;
		СтрокаТаблОчередей.Члены				= Строка(списокЧленов.Количество());
		СтрокаТаблОчередей.Ожидающие			= Строка(КолвоОжидающих);
		//
		Для Каждого домОжидающийОчереди ИЗ списокОжидающих Цикл
			СтрокаТаблОжидающих = Ожидающие.Добавить();
			СтрокаТаблОжидающих.Очередь			= ИмяОчереди;
			//
			стрНомер = домОжидающийОчереди.ПолучитьАтрибут("CallerIDnum");
			внешн = Ложь;
			стрНомер = бит_АТСКлиент.СократитьНомер(стрНомер, внешн);
			СтрокаТаблОжидающих.Номер			= стрНомер;
			//
			КонтрагентСсылка = Неопределено;
			КонтактноеЛицоСсылка = Неопределено;
			бит_АТСКлиент.СократитьНомерНайтиКонтрагента(кэшКонтактов, СоответствиеНомеровХоста, стрНомер, КонтрагентСсылка, КонтактноеЛицоСсылка);
			СтрокаТаблОжидающих.Контрагент		= КонтрагентСсылка;
			СтрокаТаблОжидающих.КонтактноеЛицо	= КонтактноеЛицоСсылка;
			//
			стрВремяОжидания = домОжидающийОчереди.ПолучитьАтрибут("Wait");
			числВремяОжидания = Число(стрВремяОжидания);
			СтрокаТаблОжидающих.ВремяОжидания	= бит_ТелефонияКлиентСервер.ФорматироватьДлительностьЗвонкаСЛидНулями(числВремяОжидания);
			//
			СтрокаТаблОжидающих.Канал			= домОжидающийОчереди.ПолучитьАтрибут("Channel");
		КонецЦикла;
		//
		Если Хост <> Неопределено Тогда
			НаименованиеГр = Хост.КрасныеГруппы.Получить(НомерОчереди);
			Если НаименованиеГр <> Неопределено Тогда
				строкаКрасныеГр = КрасныеГруппы.Добавить();
				строкаКрасныеГр.Номер			= НомерОчереди;
				строкаКрасныеГр.Наименование	= ИмяОчереди;
				строкаКрасныеГр.Всего			= Строка(списокЧленов.Количество());
				строкаКрасныеГр.Ожидающие		= Строка(КолвоОжидающих);
				строкаКрасныеГр.ID				= ид;
				//
				краснаяГрСвободно = 0;
				краснаяГрЗанято = 0;
				краснаяГрНеВСети = 0;
				Для Каждого домЧленОчереди ИЗ списокЧленов Цикл
					СтатусЧленаОчередиЧисл = Число(домЧленОчереди.ПолучитьАтрибут("Status"));
					Если СтатусЧленаОчередиЧисл = 1 Тогда
						краснаяГрСвободно = краснаяГрСвободно + 1;	// "Свободен"
					ИначеЕсли СтатусЧленаОчередиЧисл = 2 Тогда
						краснаяГрЗанято = краснаяГрЗанято + 1;		// "Разговаривает"
					ИначеЕсли СтатусЧленаОчередиЧисл = 3 Тогда
						краснаяГрЗанято = краснаяГрЗанято + 1;		// "Не беспокоить (DND)"
					ИначеЕсли СтатусЧленаОчередиЧисл = 5 Тогда
						краснаяГрНеВСети = краснаяГрНеВСети + 1;	// "Не зарегистирован на АТС"
					ИначеЕсли СтатусЧленаОчередиЧисл = 6 Тогда
						краснаяГрЗанято = краснаяГрЗанято + 1;		// "Входящий звонок"
					ИначеЕсли СтатусЧленаОчередиЧисл = 7 Тогда
						краснаяГрЗанято = краснаяГрЗанято + 1;		// "Разговаривает + входящий звонок"
					ИначеЕсли СтатусЧленаОчередиЧисл = 8 Тогда
						краснаяГрЗанято = краснаяГрЗанято + 1;		// "Удержание"
					Иначе
						краснаяГрНеВСети = краснаяГрНеВСети + 1;	// "Неизвестно"
					КонецЕсли;
				КонецЦикла;
				строкаКрасныеГр.Свободно		= краснаяГрСвободно;
				строкаКрасныеГр.Занято			= краснаяГрЗанято;
				строкаКрасныеГр.НеВСети			= краснаяГрНеВСети;
			КонецЕсли;
		КонецЕсли;
		//
		счетчикОчередей = счетчикОчередей + 1;
	КонецЦикла;
	
	Если (ИндексТекущейСтрокиОжидающих >= 0) И (ИндексТекущейСтрокиОжидающих < Ожидающие.Количество()) Тогда
		ВыделеннаяСтрокаОжид = Ожидающие[ИндексТекущейСтрокиОжидающих];
		Элементы.Ожидающие.ТекущаяСтрока = ВыделеннаяСтрокаОжид.ПолучитьИдентификатор();
	КонецЕсли;
	
	Если (ИндексТекущейСтрокиКрасныхГрупп >= 0) И (ИндексТекущейСтрокиКрасныхГрупп < КрасныеГруппы.Количество()) Тогда
		ВыделеннаяСтрокаКрасныхГрупп = КрасныеГруппы[ИндексТекущейСтрокиКрасныхГрупп];
		Элементы.КрасныеГруппы.ТекущаяСтрока = ВыделеннаяСтрокаКрасныхГрупп.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

// Коды картинок статусов:
// 0 - не найден,
// 1 - свободен,
// 2 - разговаривает,
// 3 - режим не беспокоить (DND),
// 4 - не зарегистрирован (на АТС),
// 5 - входящий звонок,
// 6 - удержание.

&НаКлиенте
Процедура ЗаполнитьТаблицыНомеровЗвонковТранков(ХмлКаналы)
	
	чтение = Новый ЧтениеXML();
	чтение.УстановитьСтроку(ХмлКаналы);
	
	дом = Новый ПостроительDOM();
	докХмл = дом.Прочитать(чтение);
	
	/////////////////////////////////////
	// Номера
	/////////////////////////////////////
	
	Если Хост = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	массивЭкстеншенов = Хост.Номера;
	
	// временная таблица, без фильтра
	массНомераВременный = Новый Массив();
	Для Каждого Экстеншен Из массивЭкстеншенов Цикл
		НомерЭкст			= Экстеншен.Номер;
		ИмяЭкст				= Экстеншен.Имя;
		ГруппаДоступаЭкст	= Экстеншен.ГруппаДоступа;
		//
		списокЭкстенш = докХмл.ПолучитьЭлементыПоИмени("/ChannelsInfo/Extensions", "Extension_" + НомерЭкст);
		Если списокЭкстенш.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		обЭкстенш = списокЭкстенш[0];
		стрСтатусЭкстенш = обЭкстенш.ПолучитьАтрибут("status");
		статусЭкстенш = Число(стрСтатусЭкстенш);
		
		списокАккаунтовЭкстенш = обЭкстенш.ПолучитьЭлементыПоИмени("SIPLogins", "SIPLogin");
		
		колвоАккаунтовНомера = списокАккаунтовЭкстенш.Количество();
		
		Если колвоАккаунтовНомера = 0 Тогда
			// хинты для экстеншена не включены, статус не известен
			ДобавитьСтатусНомераВМассив(ИмяЭкст, НомерЭкст, стрСтатусЭкстенш, ГруппаДоступаЭкст,
				"", "", "", "", Ложь, Ложь, 0, "", "", "", массНомераВременный);
		КонецЕсли;
		//
		Для йАккаунт=0 По (колвоАккаунтовНомера-1) Цикл
			//
			обАккаунтЭкстенш = списокАккаунтовЭкстенш[йАккаунт];
			//
			СтатусНомера		= статусЭкстенш;
			//
			ИндексКартинкиСтатуса = 0;
			Если СтатусНомера = 0 Тогда
				ИндексКартинкиСтатуса = 1;
			ИначеЕсли СтатусНомера = 1 ИЛИ СтатусНомера = 9 ИЛИ СтатусНомера = 17 Тогда
				ИндексКартинкиСтатуса = 2;
			ИначеЕсли СтатусНомера = 2 Тогда
				ИндексКартинкиСтатуса = 3;
			ИначеЕсли СтатусНомера = 4 Тогда
				ИндексКартинкиСтатуса = 4;
			ИначеЕсли СтатусНомера = 8 Тогда
				ИндексКартинкиСтатуса = 5;
			ИначеЕсли СтатусНомера = 16 Тогда
				ИндексКартинкиСтатуса = 6;
			КонецЕсли;
			//
			СипУстройствоНомера	= обАккаунтЭкстенш.ПолучитьАтрибут("value");
			//
			Если колвоАккаунтовНомера > 1 Тогда
				ИмяЭкст = Экстеншен.Имя + " (" + СипУстройствоНомера + ")";
			КонецЕсли;
			//
			списокЗвонковАккаунта = обАккаунтЭкстенш.ПолучитьЭлементыПоИмени("Channel");
			колвоЗвонковАккаунта = списокЗвонковАккаунта.Количество();
			//
			Если колвоЗвонковАккаунта > 0 Тогда
				Для йЗвонокАккаунта=0 По (колвоЗвонковАккаунта-1) Цикл
					//
					обЗвонокАккаунта = списокЗвонковАккаунта[йЗвонокАккаунта];
					//
					НаправлениеЗвонка		= "";
					СоединениеНомера		= "";
					ДлительностьРазговора	= "";
					ВнешнийВызов			= Ложь;
					//
					ВходящийЗвонок			= Булево(Число(обЗвонокАккаунта.ПолучитьАтрибут("Incoming")));
					НаправлениеЗвонка = ? ( ВходящийЗвонок, "<-", "->");
					//
					ДлительностьРазговора	= обЗвонокАккаунта.ПолучитьАтрибут("Duration");
					//
					СоединениеНомера		= обЗвонокАккаунта.ПолучитьАтрибут("BridgetNum");
					Если СоединениеНомера = "(connecting)" Тогда
						СоединениеНомера = "соединение...";
					Иначе
						СоединениеНомера = бит_АТСКлиент.СократитьНомер(СоединениеНомера, ВнешнийВызов);
					КонецЕсли;
					//
					ИмяКанала				= обЗвонокАккаунта.ПолучитьАтрибут("Name");
					ИмяСвязанногоКанала		= обЗвонокАккаунта.ПолучитьАтрибут("BridgetName");
					//
					НабранныйНомер			= "";
					//Если ВходящийЗвонок Тогда
					//	НабранныйНомер = обКонтроллерАТС.GetDestination(ИмяКанала);
					//	НабранныйНомер = бит_ТелефонияСервер.ПолучитьНаименованиеНабранногоНомера(НабранныйНомер);
					//КонецЕсли;
					//
					ДобавитьСтатусНомераВМассив(ИмяЭкст, НомерЭкст, стрСтатусЭкстенш, ГруппаДоступаЭкст,
						СипУстройствоНомера, НаправлениеЗвонка, СоединениеНомера, ДлительностьРазговора,
						ВнешнийВызов, ВходящийЗвонок, ИндексКартинкиСтатуса, ИмяКанала, ИмяСвязанногоКанала,
						НабранныйНомер,
						массНомераВременный);
				КонецЦикла;
			Иначе
				// свободный аккаунт
				ДобавитьСтатусНомераВМассив(ИмяЭкст, НомерЭкст, стрСтатусЭкстенш, ГруппаДоступаЭкст,
					СипУстройствоНомера, "", "", "", Ложь, Ложь, ИндексКартинкиСтатуса, "", "", "",
					массНомераВременный);
			КонецЕсли;
			//
		КонецЦикла;
	КонецЦикла;
	
	ФильтрИзменен = Ложь;
	Если ((фильтрТип <> ФильтрНомеровТип) ИЛИ (фильтрВнешние <> ФильтрНомеровВнешние)) Тогда
		ФильтрИзменен = Истина;
		// сохранение новых значений
		фильтрТип		= ФильтрНомеровТип;
		фильтрВнешние	= ФильтрНомеровВнешние;
	КонецЕсли;
	
	ТекущаяСтрокаНомеровИнф = ПолучитьТекущуюСтрокуНомеровСтрукт();
	ИндексТекущейСтрокиНомеров = Номера.Индекс(Элементы.Номера.ТекущиеДанные);
	
	Если ФильтрИзменен Тогда
		ОчиститьТаблицуНомеров();
	КонецЕсли;
	
	массНомераПослеФильтра = Новый Массив();
	Для Каждого строкаНомераВременный Из массНомераВременный Цикл
		
		Если ФильтрНомеровВнешние ИЛИ (ФильтрНомеровТип <> 0) Тогда
			
			Если НЕ ((строкаНомераВременный.ИндексКартинкиСтатуса = 2) ИЛИ
					(строкаНомераВременный.ИндексКартинкиСтатуса = 5) ИЛИ
					(строкаНомераВременный.ИндексКартинкиСтатуса = 6)) Тогда
				Продолжить; // не разговор, не входящий и не удержание
			КонецЕсли;
			
			Если ФильтрНомеровВнешние Тогда
				Если НЕ строкаНомераВременный.Внешний Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ФильтрНомеровТип = 1 Тогда
				Если НЕ строкаНомераВременный.Входящий Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ФильтрНомеровТип = 2 Тогда
				Если строкаНомераВременный.Входящий Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		строкаНомераПослеФильтра = Новый Структура();
		Для Каждого полеСтруктуры Из строкаНомераВременный Цикл
			строкаНомераПослеФильтра.Вставить(полеСтруктуры.Ключ, полеСтруктуры.Значение);
		КонецЦикла;
		массНомераПослеФильтра.Добавить(строкаНомераПослеФильтра);
	КонецЦикла;
	
	// изменение размера таблицы
	ИзменитьРазмерТаблицы(Номера, массНомераПослеФильтра.Количество());
	
	Для й=1 По Номера.Количество() Цикл
		СтрокаТаблНомеров = Номера[й-1];
		строкаНомераПослеФильтра = массНомераПослеФильтра[й-1];
		ЗаполнитьЗначенияСвойств(СтрокаТаблНомеров, строкаНомераПослеФильтра);
		Если ЗначениеЗаполнено(СтрокаТаблНомеров.Соединен) Тогда
			// поиск контрагента по номеру
			КонтрагентСсылка = Неопределено;
			КонтактноеЛицоСсылка = Неопределено;
			бит_АТСКлиент.НайтиКонтрагентаПоСокращНомеру(кэшКонтактов, СоответствиеНомеровХоста, СтрокаТаблНомеров.Соединен, СтрокаТаблНомеров.Внешний, КонтрагентСсылка, КонтактноеЛицоСсылка);
			СтрокаТаблНомеров.Контрагент = КонтрагентСсылка;
			СтрокаТаблНомеров.КонтактноеЛицо = КонтактноеЛицоСсылка;
		Иначе
			СтрокаТаблНомеров.Контрагент = "";
			СтрокаТаблНомеров.КонтактноеЛицо = "";
		КонецЕсли;
	КонецЦикла;
	
	// сортировка
	СортироватьТаблицуНомеров(ТекущаяСтрокаНомеровИнф, ИндексТекущейСтрокиНомеров);
	
	/////////////////////////////////////
	// Звонки
	/////////////////////////////////////
	
	ТекущаяСтрокаЗвонков = Элементы.Звонки.ТекущиеДанные;
	ТекущаяСтрокаЗвонковСтрукт = Неопределено;
	Если ТекущаяСтрокаЗвонков <> Неопределено Тогда
		ТекущаяСтрокаЗвонковСтрукт = Новый Структура();
		ТекущаяСтрокаЗвонковСтрукт.Вставить("От");
		ТекущаяСтрокаЗвонковСтрукт.Вставить("Кому");
		ЗаполнитьЗначенияСвойств(ТекущаяСтрокаЗвонковСтрукт, ТекущаяСтрокаЗвонков);
	КонецЕсли;
	
	списокАктивныхЗвонков = докХмл.ПолучитьЭлементыПоИмени("/ChannelsInfo/ActiveCalls", "ActiveCall");
	
	КолвоЗвонков = списокАктивныхЗвонков.Количество();
	
	ИзменитьРазмерТаблицы(Звонки, КолвоЗвонков);
	
	Для й = 0 По (КолвоЗвонков - 1) Цикл
		обАктивныйЗвонок = списокАктивныхЗвонков[й];
		//
		НомерЗвОт = обАктивныйЗвонок.ПолучитьАтрибут("From");
		КонтрагентОтСсылка = Неопределено;
		КонтактноеЛицоОтСсылка = Неопределено;
		бит_АТСКлиент.СократитьНомерНайтиКонтрагента(кэшКонтактов, СоответствиеНомеровХоста, НомерЗвОт, КонтрагентОтСсылка, КонтактноеЛицоОтСсылка);
		//
		НомерЗвКому = обАктивныйЗвонок.ПолучитьАтрибут("To");
		КонтрагентКомуСсылка = Неопределено;
		КонтактноеЛицоКомуСсылка = Неопределено;
		бит_АТСКлиент.СократитьНомерНайтиКонтрагента(кэшКонтактов, СоответствиеНомеровХоста, НомерЗвКому, КонтрагентКомуСсылка, КонтактноеЛицоКомуСсылка);
		//
		ЗвонокДлительность	= обАктивныйЗвонок.ПолучитьАтрибут("Duration");
		ЗвонокSIPЛогин		= обАктивныйЗвонок.ПолучитьАтрибут("SIPLogin");
		ЗвонокSpyНомер		= обАктивныйЗвонок.ПолучитьАтрибут("SpyNumber");
		//
		СтрокаТаблЗвонков = Звонки[й];
		СтрокаТаблЗвонков.От				= НомерЗвОт;
		СтрокаТаблЗвонков.ОтКонтрагент		= КонтрагентОтСсылка;
		СтрокаТаблЗвонков.ОтКонтактноеЛицо	= КонтактноеЛицоОтСсылка;
		СтрокаТаблЗвонков.Кому				= НомерЗвКому;
		СтрокаТаблЗвонков.КомуКонтрагент	= КонтрагентКомуСсылка;
		СтрокаТаблЗвонков.КомуКонтактноеЛицо= КонтактноеЛицоКомуСсылка;
		СтрокаТаблЗвонков.Длительность		= ЗвонокДлительность;
		СтрокаТаблЗвонков.SIPЛогин			= ЗвонокSIPЛогин;
		СтрокаТаблЗвонков.SpyНомер			= ЗвонокSpyНомер;
	КонецЦикла;
	
	ВсегоЗвонков = КолвоЗвонков;
	
	Звонки.Сортировать("Длительность Убыв");
	
	Если ТекущаяСтрокаЗвонковСтрукт <> Неопределено Тогда
		массЗвонки = Звонки.НайтиСтроки(ТекущаяСтрокаЗвонковСтрукт);
		Если массЗвонки.Количество() > 0 Тогда
			найденныйЗвонок = массЗвонки[0];
			Элементы.Звонки.ТекущаяСтрока = найденныйЗвонок.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	/////////////////////////////////////
	// Транки
	/////////////////////////////////////
	
	списокУзловТранки = докХмл.ПолучитьЭлементыПоИмени("/ChannelsInfo", "Trunks");
	Если списокУзловТранки.Количество() > 0 Тогда
		узелТранки = списокУзловТранки[0];
		КолвоТранков = узелТранки.ДочерниеУзлы.Количество();
		ИзменитьРазмерТаблицы(ЗагрузкаТранков, КолвоТранков);
		Для й = 0 По (КолвоТранков-1) Цикл
			обТранк = узелТранки.ДочерниеУзлы[й];
			стрПирТранкаСПрефиксом = обТранк.ИмяУзла;
			ИмяТранка = обТранк.ПолучитьАтрибут("Name");
			СтрокаТаблТранков = ЗагрузкаТранков[й];
			СтрокаТаблТранков.Наименование			= ИмяТранка;
			СтрокаТаблТранков.КоличествоЗвонков		= Строка(обТранк.ДочерниеУзлы.Количество());
			СтрокаТаблТранков.ПирТранкаСПрефиксом	= стрПирТранкаСПрефиксом;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтатусНомераВМассив(ИмяЭкст, НомерЭкст, СтатусЭкст, ГруппаДоступаЭкст, СипУстройствоНомера,
				НаправлениеЗвонка, СоединениеНомера, ДлительностьРазговора, ВнешнийВызов, ВходящийЗвонок,
				ИндексКартинкиСтатуса, Канал, СвязКанал, НабранныйНомер, массивНомеров)
			
	строкаНомераСтрукт = Новый Структура();
	
	строкаНомераСтрукт.Вставить("Наименование",				ИмяЭкст);
	строкаНомераСтрукт.Вставить("Номер", 					НомерЭкст);
	строкаНомераСтрукт.Вставить("Статус",					СтатусЭкст);
	строкаНомераСтрукт.Вставить("ГруппаДоступа",			ГруппаДоступаЭкст);
	строкаНомераСтрукт.Вставить("SIPЛогин",					СипУстройствоНомера);
	строкаНомераСтрукт.Вставить("Направление",				НаправлениеЗвонка);
	строкаНомераСтрукт.Вставить("Соединен",					СоединениеНомера);
	строкаНомераСтрукт.Вставить("Длительность",				ДлительностьРазговора);
	строкаНомераСтрукт.Вставить("Внешний",					ВнешнийВызов);
	строкаНомераСтрукт.Вставить("Входящий",					ВходящийЗвонок);
	строкаНомераСтрукт.Вставить("ИндексКартинкиСтатуса",	ИндексКартинкиСтатуса);
	строкаНомераСтрукт.Вставить("Канал",					Канал);
	строкаНомераСтрукт.Вставить("СвязКанал",				СвязКанал);
	строкаНомераСтрукт.Вставить("НабранныйНомер",			НабранныйНомер);
	
	массивНомеров.Добавить(строкаНомераСтрукт);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРазмерТаблицы(ТаблицаФормы, НовыйРазмер)
	Если ТаблицаФормы.Количество() <> НовыйРазмер Тогда
		разницаРазмеров = ТаблицаФормы.Количество()- НовыйРазмер;
		разницаРазмеров = ? (разницаРазмеров < 0, -разницаРазмеров, разницаРазмеров);
		Если ТаблицаФормы.Количество() < НовыйРазмер Тогда
			Для й=1 По разницаРазмеров Цикл
				ТаблицаФормы.Добавить();
			КонецЦикла;
		Иначе
			Для й=1 По разницаРазмеров Цикл
				ТаблицаФормы.Удалить(0);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицы()
	
	Попытка
		
		ИмяТекСтраницы = Элементы.ГруппаАТС.ТекущаяСтраница.Имя;
		Если ИмяТекСтраницы = "ГруппаНомера" ИЛИ ИмяТекСтраницы = "ГруппаЗвонки" ИЛИ ИмяТекСтраницы = "ГруппаТранки" Тогда
			
			обКонтроллерАТС.GetExtensionsStatusesAndChannels();
			
		ИначеЕсли ИмяТекСтраницы = "ГруппаОчереди" ИЛИ ИмяТекСтраницы = "ГруппаОжидающие" ИЛИ ИмяТекСтраницы = "ГруппаКрасныеГруппы" Тогда
			
			обКонтроллерАТС.GetQueues();
			
		Иначе
			//
		КонецЕсли;
		
	Исключение
		
		бит_ТелефонияКлиент.ВывестиСообщение( ОписаниеОшибки(), ЭтаФорма );
		
	КонецПопытки;
	
	//
	
	Если обКонтроллерАТС.IsConnected Тогда
		
		ЗапуститьТаймерОбновления(ИнтервалОбновления);
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущуюСтрокуНомеровСтрукт()
	структураИнф = Неопределено;
	ТекущаяСтрокаНомеров = Элементы.Номера.ТекущиеДанные;
	Если ТекущаяСтрокаНомеров <> Неопределено Тогда
		структураИнф = Новый Структура();
		структураИнф.Вставить("Наименование");
		структураИнф.Вставить("Номер");
		структураИнф.Вставить("SIPЛогин");
		ЗаполнитьЗначенияСвойств(структураИнф, ТекущаяСтрокаНомеров);
	КонецЕсли;
	Возврат структураИнф;
КонецФункции

&НаКлиенте
Процедура СортироватьТаблицуНомеров(ТекущаяСтрокаНомеровИнф, ИндексТекущейСтрокиНомеров)
	
	СтрокаСортировки = ПолеСортировки + " " + НаправлениеСортировки;
	Номера.Сортировать(СтрокаСортировки);
	
	Если ПолеСортировки = "Наименование" ИЛИ ПолеСортировки = "Номер" Тогда
		Если ТекущаяСтрокаНомеровИнф <> Неопределено Тогда
			массНомера = Номера.НайтиСтроки(ТекущаяСтрокаНомеровИнф);
			Если массНомера.Количество() > 0 Тогда
				найденныйНомер = массНомера[0];
				Элементы.Номера.ТекущаяСтрока = найденныйНомер.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если (ИндексТекущейСтрокиНомеров >= 0) И (ИндексТекущейСтрокиНомеров < Номера.Количество()) Тогда
			ВыделеннаяСтрока = Номера[ИндексТекущейСтрокиНомеров];
			Элементы.Номера.ТекущаяСтрока = ВыделеннаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьТаблицуНомеровССохранениемТекущейСтроки()
	ТекущаяСтрокаНомеровИнф = ПолучитьТекущуюСтрокуНомеровСтрукт();
	ИндексТекущейСтрокиНомеров = Номера.Индекс(Элементы.Номера.ТекущиеДанные);
	СортироватьТаблицуНомеров(ТекущаяСтрокаНомеровИнф, ИндексТекущейСтрокиНомеров);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДетальнуюИнформациюОчереди(ОчередьИд, ОчередьИмя, ОчередьНомер)
	формаИнфОчереди = ПолучитьФорму("Обработка.бит_БитАТС.Форма.ИнформацияОчередь");
	формаИнфОчереди.ИсточникВнешнихСобытий	= ИмяИсточникаСобытий();
	формаИнфОчереди.ИдентификаторОчереди	= ОчередьИд;
	формаИнфОчереди.ИмяОчереди				= ОчередьИмя;
	формаИнфОчереди.НомерОчереди			= ОчередьНомер;
	формаИнфОчереди.УстановитьКонтроллерАТС(обКонтроллерАТС);
	формаИнфОчереди.УстановитьСоответствиеНомеров(СоответствиеНомеровХоста, кэшКонтактов);
	бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуСБлокировкойВладельца(формаИнфОчереди);
КонецПроцедуры

&НаКлиенте
Процедура ОчередиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьДетальнуюИнформациюОчереди(Элементы.Очереди.ТекущиеДанные.ID,
		Элементы.Очереди.ТекущиеДанные.Наименование,
		Элементы.Очереди.ТекущиеДанные.Номер);
КонецПроцедуры

&НаКлиенте
Процедура КрасныеГруппыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьДетальнуюИнформациюОчереди(Элементы.КрасныеГруппы.ТекущиеДанные.ID,
		Элементы.КрасныеГруппы.ТекущиеДанные.Наименование,
		Элементы.КрасныеГруппы.ТекущиеДанные.Номер);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаТранковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТранкИмя = Элементы.ЗагрузкаТранков.ТекущиеДанные.Наименование;
	ТранкПирПреф = Элементы.ЗагрузкаТранков.ТекущиеДанные.ПирТранкаСПрефиксом;
	формаИнфТранка = ПолучитьФорму("Обработка.бит_БитАТС.Форма.ИнформацияТранк");
	формаИнфТранка.ИсточникВнешнихСобытий	= ИмяИсточникаСобытий();
	формаИнфТранка.ИмяТранка = ТранкИмя;
	формаИнфТранка.ПирТранка = ТранкПирПреф;
	формаИнфТранка.УстановитьКонтроллерАТС(обКонтроллерАТС);
	формаИнфТранка.УстановитьСоответствиеНомеров(СоответствиеНомеровХоста, кэшКонтактов);
	бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуСБлокировкойВладельца(формаИнфТранка);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаСтатусаСвободен()
	Свободен = Ложь;
	Если Элементы.Номера.ТекущиеДанные = Неопределено Тогда
		бит_ТелефонияКлиентПереопределяемый.ПоказПредупреждение("Не выбран номер");
	Иначе
		Свободен = (Элементы.Номера.ТекущиеДанные.ИндексКартинкиСтатуса = 1);
		Если НЕ Свободен Тогда
			бит_ТелефонияКлиентПереопределяемый.ПоказПредупреждение("Звонок возможен только на свободный номер");
		КонецЕсли;
	КонецЕсли;
	Возврат Свободен;
КонецФункции

&НаКлиенте
Функция ПроверкаСтатусаРазговаривает()
	Разговаривает = Ложь;
	Если Элементы.Номера.ТекущиеДанные = Неопределено Тогда
		бит_ТелефонияКлиентПереопределяемый.ПоказПредупреждение("Не выбран номер");
	Иначе
		ИндексКартинкиСтатуса = Элементы.Номера.ТекущиеДанные.ИндексКартинкиСтатуса;
		Разговаривает = ((ИндексКартинкиСтатуса = 2) ИЛИ (ИндексКартинкиСтатуса = 5) ИЛИ (ИндексКартинкиСтатуса = 6));
		Если НЕ Разговаривает Тогда
			бит_ТелефонияКлиентПереопределяемый.ПоказПредупреждение("На выбранном номере нет идущего разговора");
		КонецЕсли;
	КонецЕсли;
	Возврат Разговаривает;
КонецФункции

&НаКлиенте
Процедура Позвонить(Команда)
	Если ПроверкаСтатусаСвободен() Тогда
		НачатьЗвонок(Элементы.Номера.ТекущиеДанные.Номер);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Прослушать(Команда)
	ПодключитьсяКРазговору(0);
КонецПроцедуры

&НаКлиенте
Процедура Подсказать(Команда)
	ПодключитьсяКРазговору(1);
КонецПроцедуры

&НаКлиенте
Процедура Конференция(Команда)
	ПодключитьсяКРазговору(2);
КонецПроцедуры

&НаКлиенте
Процедура НомераИнформация(Команда)
	формаЛегенда = ПолучитьФорму("Обработка.бит_БитАТС.Форма.ЛегендаСтатусов", , ЭтаФорма);
	бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуСБлокировкойВладельца(формаЛегенда);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСвойстваКанала(Команда)
	ТекущаяСтрокаНомеров = Элементы.Номера.ТекущиеДанные;
	Если ТекущаяСтрокаНомеров <> Неопределено Тогда
		ИмяКанала			= ТекущаяСтрокаНомеров.Канал;
		ИмяСвязанногоКанала	= ТекущаяСтрокаНомеров.СвязКанал;
		флагВходящий		= ТекущаяСтрокаНомеров.Входящий;
		//
		бит_ТелефонияКлиент.ВывестиСообщение("Имя канала: " + ИмяКанала, ЭтаФорма);
		бит_ТелефонияКлиент.ВывестиСообщение("Имя связанного канала: " + ИмяСвязанногоКанала, ЭтаФорма);
		//
		ХэшЗаписи	= обКонтроллерАТС.GetRecordHash(ИмяКанала, флагВходящий, ИмяСвязанногоКанала);
		бит_ТелефонияКлиент.ВывестиСообщение("Хэш записи: " + ХэшЗаписи, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПозвонитьСоСвязанногоТелефона(Команда)
	формаВводаНомера = ПолучитьФорму("Обработка.бит_БитАТС.Форма.НаборНомера", , ЭтаФорма);
	бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуСБлокировкойВладельца(формаВводаНомера);
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗвонок(ВызываемыйНомер)
	
	Если НЕ ЗначениеЗаполнено(НомерСвязанногоТелефона) Тогда
		бит_ТелефонияКлиентПереопределяемый.ПоказПредупреждение("Не задан номер связанного телефона", , "Ошибка");
		Возврат;
	КонецЕсли;
	
	ЗаголовокАвтоподнятия = бит_АТССервер.ПолучитьФлагЗаголовокАвтоподнятия();
	ТаймаутЗвонка = бит_АТСКлиент.ПолучитьТаймаутЗвонка();
	
	ВызываемыйНомер = бит_АТСКлиент.СформироватьНомерСПрефиксами(ВызываемыйНомер);
	
	Состояние("Вызов номера '" + ВызываемыйНомер + "' со связанного телефона...");
	
	Попытка
		обКонтроллерАТС.MakeCall(НомерСвязанногоТелефона, ВызываемыйНомер, ЗаголовокАвтоподнятия, ТаймаутЗвонка);
	Исключение
		бит_ТелефонияКлиент.ВывестиСообщение( ОписаниеОшибки(), ЭтаФорма );
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыТекущегоРазговора(SIPЛогинТекущ, НомерТекущ, ГруппаДоступаТекущ)
	ИмяТекСтраницы = Элементы.ГруппаАТС.ТекущаяСтраница.Имя;
	получены = Истина;
	Если ИмяТекСтраницы = "ГруппаНомера" Тогда
		получены = ПроверкаСтатусаРазговаривает();
		Если получены Тогда
			SIPЛогинТекущ		= Элементы.Номера.ТекущиеДанные.SIPЛогин;
			НомерТекущ			= Элементы.Номера.ТекущиеДанные.Номер;
			ГруппаДоступаТекущ	= Элементы.Номера.ТекущиеДанные.ГруппаДоступа;
		КонецЕсли;
	ИначеЕсли ИмяТекСтраницы = "ГруппаЗвонки" Тогда
		Если Элементы.Звонки.ТекущиеДанные = Неопределено Тогда
			бит_ТелефонияКлиентПереопределяемый.ПоказПредупреждение("Не выбран звонок");
			получены = Ложь;
		Иначе
			SIPЛогинТекущ		= Элементы.Звонки.ТекущиеДанные.SIPЛогин;
			НомерТекущ			= Элементы.Звонки.ТекущиеДанные.SpyНомер;
			ГруппаДоступаТекущ	= Неопределено;
			Если Найти(НомерТекущ, "SIP/") > 0 Тогда
				НомерТекущ = НомерСвязанногоТелефона;
			КонецЕсли;
		КонецЕсли;
	Иначе
		получены = Ложь;
	КонецЕсли;
	Возврат получены;
КонецФункции

&НаКлиенте
Процедура ПодключитьсяКРазговору(РежимПодключения)
	
	Если НЕ ЗначениеЗаполнено(НомерСвязанногоТелефона) Тогда
		бит_ТелефонияКлиентПереопределяемый.ПоказПредупреждение("Не задан номер связанного телефона", , "Ошибка");
		Возврат;
	КонецЕсли;
	
	ПодключаемыйSIPЛогин = "";
	ПодключаемыйНомер = "";
	ГруппаДоступаНомера = Неопределено;
	
	параметрыТекРазгПолучены = ПолучитьПараметрыТекущегоРазговора(ПодключаемыйSIPЛогин, ПодключаемыйНомер, ГруппаДоступаНомера);
	Если НЕ параметрыТекРазгПолучены Тогда
		бит_ТелефонияКлиент.ВывестиСообщение("Не удалось получить параметры текущего разговора", ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	ПодключениеРазрешено = ПроверитьДоступностьПодключенияКРазговоруСервер(ГруппаДоступаНомера);
	
	Если НЕ ПодключениеРазрешено Тогда
		бит_ТелефонияКлиентПереопределяемый.ПоказПредупреждение("Недостаточно прав для подключения к разговору");
		Возврат;
	КонецЕсли;
	
	ТаймаутЗвонка = бит_АТСКлиент.ПолучитьТаймаутЗвонка();
	
	Состояние("Подключение к разговору...");
	
	Попытка
		обКонтроллерАТС.Spy(ПодключаемыйSIPЛогин, ПодключаемыйНомер, НомерСвязанногоТелефона, РежимПодключения, ТаймаутЗвонка);
	Исключение
		бит_ТелефонияКлиент.ВывестиСообщение( ОписаниеОшибки(), ЭтаФорма );
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрНомеровТипПриИзменении(Элемент)
	ОбновитьТаблицы();
КонецПроцедуры

&НаКлиенте
Процедура ФильтрНомеровВнешниеПриИзменении(Элемент)
	ОбновитьТаблицы();
КонецПроцедуры

&НаКлиенте
Процедура ПолеСортировкиПриИзменении(Элемент)
	СортироватьТаблицуНомеровССохранениемТекущейСтроки();
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеСортировкиПриИзменении(Элемент)
	СортироватьТаблицуНомеровССохранениемТекущейСтроки();
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	бит_АТСКлиент.ОткрытьФормуНастроек(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораГруппыДереваНомеров()
	Если Хост <> Неопределено Тогда 
		Хост.Номера = бит_АТССервер.ПолучитьНомераАТС(ТекущаяАТС, Элементы.ДеревоНомеров.ТекущаяСтрока);
		ОбновитьТаблицы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНомеровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработкаВыбораГруппыДереваНомеров();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНомеровПриАктивизацииСтроки(Элемент)
	ОбработкаВыбораГруппыДереваНомеров();
КонецПроцедуры

&НаКлиенте
Процедура НомераВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СсылкаТекущ = Неопределено;
	Если Поле.Имя = "НомераКонтрагент" Тогда
		СсылкаТекущ = Элементы.Номера.ТекущиеДанные.Контрагент;
	ИначеЕсли Поле.Имя = "НомераКонтактноеЛицо" Тогда
		СсылкаТекущ = Элементы.Номера.ТекущиеДанные.КонтактноеЛицо;
	КонецЕсли;
	Если ЗначениеЗаполнено(СсылкаТекущ) Тогда
		бит_ТелефонияКлиентПереопределяемый.ПоказЗначение(СсылкаТекущ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОжидающиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СсылкаТекущ = Неопределено;
	Если Поле.Имя = "ОжидающиеКонтрагент" Тогда
		СсылкаТекущ = Элементы.Ожидающие.ТекущиеДанные.Контрагент;
	ИначеЕсли Поле.Имя = "ОжидающиеКонтактноеЛицо" Тогда
		СсылкаТекущ = Элементы.Ожидающие.ТекущиеДанные.КонтактноеЛицо;
	КонецЕсли;
	Если ЗначениеЗаполнено(СсылкаТекущ) Тогда
		бит_ТелефонияКлиентПереопределяемый.ПоказЗначение(СсылкаТекущ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиНаВыбранныйНомер(Команда)
	бит_АТСКлиент.ПеревестиОжидающийЗвонокВыборНомера(ЭтаФорма, "Ожидающие", "БитфонПанельБИТАТС_ПеревестиОжидающийЗвонок");
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиНаСвойНомер(Команда)
	бит_АТСКлиент.ПеревестиОжидающийЗвонокНаНомер(ЭтаФорма, "Ожидающие", НомерСвязанногоТелефона, обКонтроллерАТС);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаАТСПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ОбновитьТаблицы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		НачатьЗвонок(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Источник <> ИмяИсточникаСобытий() Тогда
		Возврат;
	КонецЕсли;
	
	Если Событие = "Ошибка" Тогда
		
		бит_ТелефонияКлиент.ВывестиСообщение(Данные, ЭтаФорма);
		
		бит_ТелефонияСервер.ЗаписатьОшибкуВЖурналРегистрации(Источник,
			"КомпонентаУправлениеАТС_Ошибка", Данные);
		
		Если НЕ обКонтроллерАТС.IsConnected Тогда
			
			Если Подключен Тогда
				ВосстановлениеПодключения = Истина;
			КонецЕсли;
			
			Отключить();
			
			Если ВосстановлениеПодключения Тогда
				бит_ТелефонияКлиент.ВывестиСообщение("Соединение с АТС потеряно, попытка переподключения...", ЭтаФорма);
				ПодключитьОбработчикОжидания("Подключить", 10, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если НЕ Подключен Тогда
			Возврат;
		КонецЕсли;
		
		бОбновлениеОчередей = (Событие = "ОбновлениеОчередей");
		бОбновлениеНомеров = (Событие = "ОбновлениеНомеров");
		
		Если бОбновлениеОчередей ИЛИ бОбновлениеНомеров Тогда
			
			бит_АТСКлиент.ОчиститьФлагОбновленВсегоКэшаКонтактов(кэшКонтактов);
			
			Если бОбновлениеОчередей Тогда
				ЗаполнитьТаблицыОчередейИОжидающих(Данные);
			ИначеЕсли бОбновлениеНомеров Тогда
				ЗаполнитьТаблицыНомеровЗвонковТранков(Данные);
			КонецЕсли;
		
			бит_АТСКлиент.УдалитьНеобновленныеКонтактыИзКэша(кэшКонтактов);
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "БитфонПанельБИТАТС_ПодключениеВнешнейКомпоненты" Тогда
		
		обКонтроллерАТС = Параметр.Результат;
		
		Если обКонтроллерАТС <> Неопределено Тогда
			
			обКонтроллерАТС.SetMessageSourceName( ИмяИсточникаСобытий() );
		
			Подключить();
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "БитфонМониторПанель_ОбновлениеНастроек" Тогда

		Если Подключен Тогда
		
			ТекущаяАТСНов				= бит_АТССервер.ПолучитьАТС();
			НомерСвязанногоТелефонаНов 	= бит_АТССервер.ПолучитьНомерСвязанногоТелефона();

			Если ТекущаяАТС <> ТекущаяАТСНов Тогда
				Отключить();
				Подключить();
			КонецЕсли;
			
			Если НомерСвязанногоТелефона <> НомерСвязанногоТелефонаНов Тогда
				НомерСвязанногоТелефона = НомерСвязанногоТелефонаНов;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "БитфонПанельБИТАТС_ПеревестиОжидающийЗвонок" Тогда
		
		Если ЗначениеЗаполнено(Параметр.Результат) Тогда
			номерПеревода = Параметр.Результат;
			бит_АТСКлиент.ПеревестиОжидающийЗвонокНаНомер(ЭтаФорма, "Ожидающие", номерПеревода, обКонтроллерАТС);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


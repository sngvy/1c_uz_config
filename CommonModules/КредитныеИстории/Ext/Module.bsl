Процедура ЗаполнитьПервичныеСправочникиНБКИ() Экспорт 
	// Заполнить События субъекта, Сделки 
	ЗаполнитьСобытияСубъекта();   
	ЗаполнитьСобытияСделки();
	//Настройки отчета
	ЗаполнитьКонфигурационныйРегистрСобытий();
	// Коды предметов залогов, 
	ЗаполнитьПредметыЗалогаНБКИ();	
	// Причины прекращения обеспечительства    
	ЗаполнитьПрекращениеОбеспечения();  
	
	// ЦелиКредита    
	ЗаполнитьЦелиКредита();
	//Корректировка КИ
	ЗаполнитьСобытияДляИсправленияКИ();  
	ЗаполнитьРегистрДействийКорректировкиКИ();
	
КонецПроцедуры

Процедура ЗаполнитьКонфигурационныйРегистрСобытий() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КредитныеИсторииСобытияСделки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КредитныеИсторииСобытияСделки КАК КредитныеИсторииСобытияСделки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Ссылка.КодНБКИ = "1.1" ИЛИ ВыборкаДетальныеЗаписи.Ссылка.КодНБКИ = "1.2" ИЛИ ВыборкаДетальныеЗаписи.Ссылка.КодНБКИ = "1.3" ИЛИ ВыборкаДетальныеЗаписи.Ссылка.КодНБКИ = "1.4" Тогда
			НаборЗаписей = РегистрыСведений.КредитныеИстории_СобытияИГруппыБлоков.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Событие.Установить(ВыборкаДетальныеЗаписи.Ссылка);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок55_45";
				Запись.ФормироватьПриКорректировке = Истина;  
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;  
		
		Если ВыборкаДетальныеЗаписи.Ссылка.КодНБКИ = "1.3" Тогда
			НаборЗаписей = РегистрыСведений.КредитныеИстории_СобытияИГруппыБлоков.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Событие.Установить(ВыборкаДетальныеЗаписи.Ссылка);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок57_47";
				Запись.ФормироватьПриКорректировке = Истина;  
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли; 
		
		Если ВыборкаДетальныеЗаписи.Ссылка.КодНБКИ = "1.4" Тогда   
			НаборЗаписей = РегистрыСведений.КредитныеИстории_СобытияИГруппыБлоков.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Событие.Установить(ВыборкаДетальныеЗаписи.Ссылка);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок17_10"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок18_11"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок19_12";
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок20_13"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок21_14"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок22_Х";
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок30_21"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок31_22";
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок54_44";
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;
		
		Если ВыборкаДетальныеЗаписи.Ссылка.КодНБКИ = "2.1" Тогда 
			НаборЗаписей = РегистрыСведений.КредитныеИстории_СобытияИГруппыБлоков.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Событие.Установить(ВыборкаДетальныеЗаписи.Ссылка);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок17_10"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок18_11"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок19_12";
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок20_13"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок21_14"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок22_Х"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок23_15";
				Запись.ФормироватьПриКорректировке = Истина;
				Запись = НаборЗаписей.Добавить(); 	
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок24_16"; 
				Запись = НаборЗаписей.Добавить(); 
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок252627_171819"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок28_20"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок29";
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок31_22";
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок54_44"; 
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;  
		
		Если ВыборкаДетальныеЗаписи.Ссылка.КодНБКИ = "2.2" Тогда  
			НаборЗаписей = РегистрыСведений.КредитныеИстории_СобытияИГруппыБлоков.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Событие.Установить(ВыборкаДетальныеЗаписи.Ссылка);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок17_10";
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок18_11"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок19_12"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок21_14"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок22_Х"; 	
				Запись = НаборЗаписей.Добавить(); 	
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок24_16";
				Запись.ФормироватьПриКорректировке = Истина;
				Запись = НаборЗаписей.Добавить(); 
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок252627_171819"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок28_20"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок29";
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок30_21";
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок56_46";
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;  
		
		Если ВыборкаДетальныеЗаписи.Ссылка.КодНБКИ = "2.3" Тогда 
			НаборЗаписей = РегистрыСведений.КредитныеИстории_СобытияИГруппыБлоков.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Событие.Установить(ВыборкаДетальныеЗаписи.Ссылка);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок17_10";
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок18_11"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок19_12"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок21_14"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок22_Х"; 	
				Запись = НаборЗаписей.Добавить(); 	
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок24_16"; 
				Запись = НаборЗаписей.Добавить(); 
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок252627_171819"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок28_20";
				Запись.ФормироватьПриКорректировке = Истина;
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок29";
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок31_22";
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок54_44"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок56_46";
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли; 
		
		Если ВыборкаДетальныеЗаписи.Ссылка.КодНБКИ = "2.4" Тогда  
			НаборЗаписей = РегистрыСведений.КредитныеИстории_СобытияИГруппыБлоков.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Событие.Установить(ВыборкаДетальныеЗаписи.Ссылка);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок17_10";
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок32_35";
				Запись.ФормироватьПриКорректировке = Истина;
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок36_27";
				Запись.ФормироватьПриКорректировке = Истина; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок37_28";
				Запись.ФормироватьПриКорректировке = Истина; 
				НаборЗаписей.Записать(); 
			КонецЕсли;
		КонецЕсли;  
		
		Если ВыборкаДетальныеЗаписи.Ссылка.КодНБКИ = "2.5" Тогда  
			НаборЗаписей = РегистрыСведений.КредитныеИстории_СобытияИГруппыБлоков.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Событие.Установить(ВыборкаДетальныеЗаписи.Ссылка);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок17_10";
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок18_11"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок19_12"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок21_14"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок22_Х"; 	
				Запись = НаборЗаписей.Добавить(); 	
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок24_16"; 
				Запись = НаборЗаписей.Добавить(); 
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок252627_171819"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок28_20"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок29";
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок31_22";
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок38_29"; 
				Запись.ФормироватьПриКорректировке = Истина;
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок56_46";
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;
		
		Если ВыборкаДетальныеЗаписи.Ссылка.КодНБКИ = "2.6" Тогда
			НаборЗаписей = РегистрыСведений.КредитныеИстории_СобытияИГруппыБлоков.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Событие.Установить(ВыборкаДетальныеЗаписи.Ссылка);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок17_10";
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок39_30";
				Запись.ФормироватьПриКорректировке = Истина;  
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;    
		
		Если ВыборкаДетальныеЗаписи.Ссылка.КодНБКИ = "2.10" Тогда 
			НаборЗаписей = РегистрыСведений.КредитныеИстории_СобытияИГруппыБлоков.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Событие.Установить(ВыборкаДетальныеЗаписи.Ссылка);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок17_10";
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок45_35";
				Запись.ФормироватьПриКорректировке = Истина; 
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли; 
		
		Если ВыборкаДетальныеЗаписи.Ссылка.КодНБКИ = "2.11" Тогда
			НаборЗаписей = РегистрыСведений.КредитныеИстории_СобытияИГруппыБлоков.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Событие.Установить(ВыборкаДетальныеЗаписи.Ссылка);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок17_10";
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок45_35"; 
				Запись.ФормироватьПриКорректировке = Истина;
				
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок50СведенияОПродаже";
				
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок54_44";  
				НаборЗаписей.Записать();				
			КонецЕсли;
		КонецЕсли;  
		
		Если ВыборкаДетальныеЗаписи.Ссылка.КодНБКИ = "2.12" Тогда  
			НаборЗаписей = РегистрыСведений.КредитныеИстории_СобытияИГруппыБлоков.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Событие.Установить(ВыборкаДетальныеЗаписи.Ссылка);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок17_10";
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок50СведенияОПродаже";
				Запись.ФормироватьПриКорректировке = Истина;
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок54_44"; 
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли; 	
		
		Если ВыборкаДетальныеЗаписи.Ссылка.КодНБКИ = "2.11.2" Тогда
			НаборЗаписей = РегистрыСведений.КредитныеИстории_СобытияИГруппыБлоков.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Событие.Установить(ВыборкаДетальныеЗаписи.Ссылка);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				Запись = НаборЗаписей.Добавить();  
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок17_10";
				Запись.ФормироватьПриКорректировке = Истина;  
				
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок18_11";
				
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок19_12"; 
				
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок20_13";
				
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок21_14";  
				
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок22_Х";
				
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок24_16";
				
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок252627_171819";
				
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок28_20";
				
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок29";  
				
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок31_22";
				
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок54_44"; 
				
				Запись = НаборЗаписей.Добавить();
   				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок56_46"; 
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;  
		
		Если ВыборкаДетальныеЗаписи.Ссылка.КодНБКИ = "2.11.1" Тогда
			НаборЗаписей = РегистрыСведений.КредитныеИстории_СобытияИГруппыБлоков.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Событие.Установить(ВыборкаДетальныеЗаписи.Ссылка);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок17_10";
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок18_11"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок19_12"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок21_14"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок22_Х"; 	
				Запись = НаборЗаписей.Добавить(); 	
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок24_16"; 
				Запись = НаборЗаписей.Добавить(); 
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок252627_171819"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок28_20"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок29";
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок31_22";
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок54_44";
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок56_46";
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;  
		
		Если ВыборкаДетальныеЗаписи.Ссылка.КодНБКИ = "2.2.1" Тогда 
			//отдельно формировать блок 25
			НаборЗаписей = РегистрыСведений.КредитныеИстории_СобытияИГруппыБлоков.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Событие.Установить(ВыборкаДетальныеЗаписи.Ссылка);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок17_10";
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок18_11"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок19_12"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок21_14"; 
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок22_Х"; 	
				Запись = НаборЗаписей.Добавить(); 	
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок24_16";
				Запись.ФормироватьПриКорректировке = Истина;
				Запись = НаборЗаписей.Добавить(); 
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок252627_171819";
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок54_44";	
				Запись = НаборЗаписей.Добавить();
				Запись.Событие = ВыборкаДетальныеЗаписи.Ссылка;
				Запись.ИмяПроцедурыУЗ = "СформироватьБлок56_46";
				НаборЗаписей.Записать();
			КонецЕсли; 
		КонецЕсли;
      
	КонецЦикла;
	
	
КонецПроцедуры	     

Процедура ЗаполнитьПредметыЗалогаНБКИ() 
	// КодНБКИ	Наименование 	
	
	МассивСобытий = Новый Массив; 
	
	ЗаполнитьНедвижимость(МассивСобытий);
	ЗаполнитьТранспортныеСредства(МассивСобытий);	
	ЗаполнитьМашиныИОборудование(МассивСобытий);	
	ЗаполнитьВоздушныеСуда(МассивСобытий);	
	ЗаполнитьПлавучиеСооружения(МассивСобытий);	
	ЗаполнитьЖелезнодорожныйПодвижныйСостав(МассивСобытий);
	ЗаполнитьКосмическиеОбъекты(МассивСобытий); 
	ЗаполнитьТоварыВОбороте(МассивСобытий);
	ЗаполнитьБудущиеУрожаи(МассивСобытий);
	ЗаполнитьАффинированныеДрагоценныеМеталлы(МассивСобытий);
	ЗаполнитьИнтелектуальнаяДеятельность(МассивСобытий);
	ЗаполнитьПраваПоДоговоруБанковскогоСчета(МассивСобытий); 
	ЗаполнитьДолиВУставномКапиталеООО(МассивСобытий);
	ЗаполнитьВекселя(МассивСобытий);
	ЗаполнитьЭмиссионныеЦенныеБумаги(МассивСобытий);
	ЗаполнитьИвестиционныеПаи(МассивСобытий);
	ЗаполнитьИпотечныеСертификатыУчастия(МассивСобытий);
	ЗаполнитьПрочиеЦенныеБумаги(МассивСобытий);
	ЗаполнитьПрочиеИмущественныеПрава(МассивСобытий);
	ЗаполнитьПрочиеДвижимыеВещи(МассивСобытий);
	
	Для каждого эл из МассивСобытий Цикл
		СуществующийЭлемент = Справочники.ПредметыЗалога.НайтиПоРеквизиту("КодНБКИ", эл.КодНБКИ);
		Если Не ЗначениеЗаполнено(СуществующийЭлемент) Тогда
			НовЗалог = Справочники.ПредметыЗалога.СоздатьЭлемент();
			НовЗалог.КодНБКИ = эл.КодНБКИ;
			НовЗалог.Наименование = эл.Наименование;
			НовЗалог.Записать(); 
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	 

Процедура ЗаполнитьНедвижимость(МассивСобытий) 
	// КодНБКИ	Наименование 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "1.1");  
	СтруктураСобытия.Вставить("Наименование", "Здание");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "1.2");  
	СтруктураСобытия.Вставить("Наименование", "Сооружение");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "1.3");  
	СтруктураСобытия.Вставить("Наименование", "Помещение");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "1.4");  
	СтруктураСобытия.Вставить("Наименование", "Машино-место");
	МассивСобытий.Добавить(СтруктураСобытия);    
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "1.5");  
	СтруктураСобытия.Вставить("Наименование", "Объект незавершенного строительства");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "1.6");  
	СтруктураСобытия.Вставить("Наименование", "Земельный участок");
	МассивСобытий.Добавить(СтруктураСобытия);    
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "1.7");  
	СтруктураСобытия.Вставить("Наименование", "Единый недвижимый комплекс");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "1.8");  
	СтруктураСобытия.Вставить("Наименование", "Имущественный комплекс");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
КонецПроцедуры	

Процедура ЗаполнитьТранспортныеСредства(МассивСобытий) 
	// КодНБКИ	Наименование 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "2.1");  
	СтруктураСобытия.Вставить("Наименование", "Самоходная машина");
	МассивСобытий.Добавить(СтруктураСобытия);   
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "2.2");  
	СтруктураСобытия.Вставить("Наименование", "Иное транспортное средство");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
КонецПроцедуры	

Процедура ЗаполнитьМашиныИОборудование(МассивСобытий) 
	// КодНБКИ	Наименование 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "3.1");  
	СтруктураСобытия.Вставить("Наименование", "Сельскохозяйственное оборудование");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "3.2");  
	СтруктураСобытия.Вставить("Наименование", "Оборудование для строительства");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "3.3");  
	СтруктураСобытия.Вставить("Наименование","Оборудование для добычи полезных ископаемых");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "3.4");  
	СтруктураСобытия.Вставить("Наименование", "Оборудование нефтеперерабатывающей и нефтехимической промышленности");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "3.5");  
	СтруктураСобытия.Вставить("Наименование","Оборудование черной и цветной металлургии");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "3.6");  
	СтруктураСобытия.Вставить("Наименование", "Оборудование металлообрабатывающее");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "3.7");  
	СтруктураСобытия.Вставить("Наименование", "Оборудование деревообрабатывающее и целлюлозно-бумажной промышленности");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "3.8");  
	СтруктураСобытия.Вставить("Наименование", "Энергетическое оборудование");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "3.9");  
	СтруктураСобытия.Вставить("Наименование", "Оборудование легкой промышленности");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "3.10");  
	СтруктураСобытия.Вставить("Наименование", "Оборудование пищевой промышленности");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "3.11");  
	СтруктураСобытия.Вставить("Наименование", "Медицинское оборудование");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "3.12");  
	СтруктураСобытия.Вставить("Наименование", "Оборудование для добычи полезных ископаемых");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "3.99");  
	СтруктураСобытия.Вставить("Наименование", "Иное");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	
КонецПроцедуры	 

Процедура ЗаполнитьВоздушныеСуда(МассивСобытий) 
	// КодНБКИ	Наименование 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "4.1");  
	СтруктураСобытия.Вставить("Наименование", "Самолет");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "4.2");  
	СтруктураСобытия.Вставить("Наименование", "Вертолет");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "4.99");  
	СтруктураСобытия.Вставить("Наименование", "Иное");
	МассивСобытий.Добавить(СтруктураСобытия);
	
КонецПроцедуры

Процедура ЗаполнитьПлавучиеСооружения(МассивСобытий) 
	// КодНБКИ	Наименование 
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "5.1");  
	СтруктураСобытия.Вставить("Наименование", "Судно для перевозки пассажиров и их багажа");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "5.2");  
	СтруктураСобытия.Вставить("Наименование", "Судно для перевозки грузов или буксировки, а также для хранения грузов");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "5.3");  
	СтруктураСобытия.Вставить("Наименование","Судно для рыболовства");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "5.4");  
	СтруктураСобытия.Вставить("Наименование", "Судно для иных целей");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "5.5");  
	СтруктураСобытия.Вставить("Наименование","Плавучее сооружение, не являющееся судном");
	МассивСобытий.Добавить(СтруктураСобытия);	
КонецПроцедуры

Процедура ЗаполнитьЖелезнодорожныйПодвижныйСостав(МассивСобытий) 
	// КодНБКИ	Наименование 
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "6.1");  
	СтруктураСобытия.Вставить("Наименование", "Локомотив");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "6.2");  
	СтруктураСобытия.Вставить("Наименование", "Самоходная единица специального железнодорожного подвижного состава");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "6.3");  
	СтруктураСобытия.Вставить("Наименование","Вагон моторвагонного подвижного состава");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "6.4");  
	СтруктураСобытия.Вставить("Наименование", "Грузовой вагон");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "6.5");  
	СтруктураСобытия.Вставить("Наименование", "Пассажирский вагон локомотивной тяги");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "6.6");  
	СтруктураСобытия.Вставить("Наименование", "Вагон высокоскоростного железнодорожного подвижного состава");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "6.7");  
	СтруктураСобытия.Вставить("Наименование", "Несамоходная единица специального железнодорожного подвижного состава");
	МассивСобытий.Добавить(СтруктураСобытия);
КонецПроцедуры

Процедура ЗаполнитьКосмическиеОбъекты(МассивСобытий) 
	// КодНБКИ	Наименование 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "7.1");  
	СтруктураСобытия.Вставить("Наименование", "Космический объект");
	МассивСобытий.Добавить(СтруктураСобытия);   
	
КонецПроцедуры	

Процедура ЗаполнитьТоварыВОбороте(МассивСобытий) 
	// КодНБКИ	Наименование 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "8.1");  
	СтруктураСобытия.Вставить("Наименование", "Сельскохозяйственная продукция, в том числе продукты растениеводства");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "8.2");  
	СтруктураСобытия.Вставить("Наименование", "Животные заменимые");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "8.3");  
	СтруктураСобытия.Вставить("Наименование","Продукты пищевые, напитки, изделия табачные");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "8.4");  
	СтруктураСобытия.Вставить("Наименование", "Драгоценные металлы и драгоценные камни");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "8.5");  
	СтруктураСобытия.Вставить("Наименование","Ювелирные и другие изделия из драгоценных металлов или драгоценных камней");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "8.6");  
	СтруктураСобытия.Вставить("Наименование", "Строительные и отделочные материалы, металлопродукция");
	МассивСобытий.Добавить(СтруктураСобытия);

	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "8.7");  
	СтруктураСобытия.Вставить("Наименование", "Транспортные средства, оборудование, комплектующие и запасные части к ним");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "8.8");  
	СтруктураСобытия.Вставить("Наименование", "Текстиль и изделия текстильные");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "8.9");  
	СтруктураСобытия.Вставить("Наименование", "Топливно-энергетические ресурсы");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "8.10");  
	СтруктураСобытия.Вставить("Наименование", "Вещества химические и продукты химические");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "8.11");  
	СтруктураСобытия.Вставить("Наименование", "Средства лекарственные и материалы, применяемые в медицинских целях");
	МассивСобытий.Добавить(СтруктураСобытия); 
		
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "8.99");  
	СтруктураСобытия.Вставить("Наименование", "Иное");
	МассивСобытий.Добавить(СтруктураСобытия); 

	
КонецПроцедуры

Процедура ЗаполнитьБудущиеУрожаи(МассивСобытий) 
	// КодНБКИ	Наименование 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "9.1");  
	СтруктураСобытия.Вставить("Наименование", "Зерновые культуры");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "9.2");  
	СтруктураСобытия.Вставить("Наименование", "Зернобобовые культуры");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "9.3");  
	СтруктураСобытия.Вставить("Наименование","Масличные культуры");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "9.4");  
	СтруктураСобытия.Вставить("Наименование", "Технические культуры");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "9.5");  
	СтруктураСобытия.Вставить("Наименование","Кормовые культуры");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "9.6");  
	СтруктураСобытия.Вставить("Наименование", "Бахчевые культуры");
	МассивСобытий.Добавить(СтруктураСобытия);

	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "9.7");  
	СтруктураСобытия.Вставить("Наименование", "Картофель");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "9.8");  
	СтруктураСобытия.Вставить("Наименование", "Овощи");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "9.9");  
	СтруктураСобытия.Вставить("Наименование", "Многолетние насаждения");
	МассивСобытий.Добавить(СтруктураСобытия);  
			
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "9.99");  
	СтруктураСобытия.Вставить("Наименование", "Иное");
	МассивСобытий.Добавить(СтруктураСобытия); 

КонецПроцедуры

Процедура ЗаполнитьАффинированныеДрагоценныеМеталлы(МассивСобытий) 
	// КодНБКИ	Наименование 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "10.1");  
	СтруктураСобытия.Вставить("Наименование", "Золото");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "10.2");  
	СтруктураСобытия.Вставить("Наименование", "Серебро");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "10.3");  
	СтруктураСобытия.Вставить("Наименование", "Платина");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "10.4");  
	СтруктураСобытия.Вставить("Наименование", "Палладий");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	
КонецПроцедуры

Процедура ЗаполнитьИнтелектуальнаяДеятельность(МассивСобытий) 
	// КодНБКИ	Наименование 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "11.1");  
	СтруктураСобытия.Вставить("Наименование", "Произведение науки, литературы или искусства");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "11.2");  
	СтруктураСобытия.Вставить("Наименование", "Программа для электронных вычислительных машин (ЭВМ)");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "11.3");  
	СтруктураСобытия.Вставить("Наименование", "База данных");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "11.4");  
	СтруктураСобытия.Вставить("Наименование", "Изобретение");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "11.5");  
	СтруктураСобытия.Вставить("Наименование", "Секрет производства (ноу-хау)");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "11.6");  
	СтруктураСобытия.Вставить("Наименование", "Товарный знак или знак обслуживания");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "11.99");  
	СтруктураСобытия.Вставить("Наименование", "Иное");
	МассивСобытий.Добавить(СтруктураСобытия); 
КонецПроцедуры

Процедура ЗаполнитьПраваПоДоговоруБанковскогоСчета(МассивСобытий) 
	// КодНБКИ	Наименование 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "12.1");  
	СтруктураСобытия.Вставить("Наименование", "Права в отношении всей денежной суммы на залоговом счете в любой момент в течение времени действия договора залога");
	МассивСобытий.Добавить(СтруктураСобытия);   
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "12.2");  
	СтруктураСобытия.Вставить("Наименование", "Права в отношении денежной суммы, размер которой указан в договоре залога");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
КонецПроцедуры

Процедура ЗаполнитьДолиВУставномКапиталеООО(МассивСобытий) 
	// КодНБКИ	Наименование 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "13.1");  
	СтруктураСобытия.Вставить("Наименование", "Доля в уставном капитале общества с ограниченной ответственностью");
	МассивСобытий.Добавить(СтруктураСобытия);   
	
КонецПроцедуры	

Процедура ЗаполнитьВекселя(МассивСобытий) 
	// КодНБКИ	Наименование 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "14.1");  
	СтруктураСобытия.Вставить("Наименование", "Вексель");
	МассивСобытий.Добавить(СтруктураСобытия);   
	
КонецПроцедуры   

Процедура ЗаполнитьЭмиссионныеЦенныеБумаги(МассивСобытий) 
	// КодНБКИ	Наименование 
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "15.1");  
	СтруктураСобытия.Вставить("Наименование", "Акция");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "15.2");  
	СтруктураСобытия.Вставить("Наименование", "Облигация");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "15.3");  
	СтруктураСобытия.Вставить("Наименование","Опцион эмитента");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "15.4");  
	СтруктураСобытия.Вставить("Наименование", "Депозитарная расписка");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "15.99");  
	СтруктураСобытия.Вставить("Наименование", "Иное");
	МассивСобытий.Добавить(СтруктураСобытия);	
КонецПроцедуры

Процедура ЗаполнитьИвестиционныеПаи(МассивСобытий) 
	// КодНБКИ	Наименование 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "16.1");  
	СтруктураСобытия.Вставить("Наименование", "Инвестиционный пай");
	МассивСобытий.Добавить(СтруктураСобытия);   
	
КонецПроцедуры 

Процедура ЗаполнитьИпотечныеСертификатыУчастия(МассивСобытий) 
	// КодНБКИ	Наименование 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "17.1");  
	СтруктураСобытия.Вставить("Наименование", "Ипотечный сертификат участия");
	МассивСобытий.Добавить(СтруктураСобытия);   
	
КонецПроцедуры 

Процедура ЗаполнитьПрочиеЦенныеБумаги(МассивСобытий) 
	// КодНБКИ	Наименование 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "18.1");  
	СтруктураСобытия.Вставить("Наименование", "Закладная");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "18.2");  
	СтруктураСобытия.Вставить("Наименование", "Депозитный сертификат");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "18.3");  
	СтруктураСобытия.Вставить("Наименование", "Сберегательный сертификат");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "18.99");  
	СтруктураСобытия.Вставить("Наименование", "Иное");
	МассивСобытий.Добавить(СтруктураСобытия);
	
КонецПроцедуры  

Процедура ЗаполнитьПрочиеИмущественныеПрава(МассивСобытий) 
	// КодНБКИ	Наименование 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "19.1");  
	СтруктураСобытия.Вставить("Наименование", "Право аренды или пользования");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "19.2");  
	СтруктураСобытия.Вставить("Наименование", "Права участника долевого строительства");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "19.3");  
	СтруктураСобытия.Вставить("Наименование", "Имущественные права на недвижимое имущество");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "19.99");  
	СтруктураСобытия.Вставить("Наименование", "Иное");
	МассивСобытий.Добавить(СтруктураСобытия);
	
КонецПроцедуры   

Процедура ЗаполнитьПрочиеДвижимыеВещи(МассивСобытий) 
	// КодНБКИ	Наименование 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "20.1");  
	СтруктураСобытия.Вставить("Наименование", "Животное, индивидуально определенное");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "20.2");  
	СтруктураСобытия.Вставить("Наименование", "Монета, содержащая драгоценные металлы");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "20.3");  
	СтруктураСобытия.Вставить("Наименование", "Предмет бытового использования (бытовая техника, мебель и другое)");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ", "Наименование");
	СтруктураСобытия.Вставить("КодНБКИ", "20.99");  
	СтруктураСобытия.Вставить("Наименование", "Иное");
	МассивСобытий.Добавить(СтруктураСобытия);
	
КонецПроцедуры 

Процедура ЗаполнитьСобытияСубъекта() 
// Смена ФИО - Код НБКИ 1.7
// Смена ДУЛ - Код НБКИ 1.7
// Смена Наименования - Код НБКИ 1.7
// Реорганизация - Код НБКИ 1.7
// Недееспособность Субъекта - Код НБКИ 1.10
// Смена контактной информации, ИП, Адреса - Код НБКИ 1.9
// Смерть - псевдокод НБКИ 2.5.14
// Первичное заполнение - псевдокод НБКИ УЗ 0

	
	
	МассивСобытий = Новый Массив;
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","1.7");  
	СтруктураСобытия.Вставить("Наименование","Смена сведений осноыной части КИ субъекта");
	МассивСобытий.Добавить(СтруктураСобытия); 
	 
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","1.10"); 
	СтруктураСобытия.Вставить("Наименование","Недееспособность Субъекта");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","1.9");  
	СтруктураСобытия.Вставить("Наименование","Смена контактной информации, ИП, Адреса");
	МассивСобытий.Добавить(СтруктураСобытия);    
	
		
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","0.0");  
	СтруктураСобытия.Вставить("Наименование","Первичное заполнение");
	МассивСобытий.Добавить(СтруктураСобытия); 
	  
	
		
	Для каждого эл из МассивСобытий Цикл
		СуществующееСобытие = Справочники.КредитныеИсторииСобытияСубъекта.НайтиПоРеквизиту("КодНБКИ", эл.КодНБКИ);
		Если Не ЗначениеЗаполнено(СуществующееСобытие) Тогда
			
			НовСобытие = Справочники.КредитныеИсторииСобытияСубъекта.СоздатьЭлемент();
			НовСобытие.КодНБКИ = эл.КодНБКИ;
			НовСобытие.Наименование = эл.Наименование;
			НовСобытие.Записать(); 
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	 

Процедура ЗаполнитьСобытияДляИсправленияКИ() 
	
	
	МассивСобытий = Новый Массив;
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","3.1");  
	СтруктураСобытия.Вставить("Наименование","Исправление ошибки в показателях КИ, не связанных с записью КИ");
	МассивСобытий.Добавить(СтруктураСобытия); 
	 
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","3.2"); 
	СтруктураСобытия.Вставить("Наименование","Исправление ошибки в показателях КИ, связанных с записью КИ");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","3.3");  
	СтруктураСобытия.Вставить("Наименование","Исключение отстутствующей у Источника ифнормации");
	МассивСобытий.Добавить(СтруктураСобытия);    
	
		
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","3.4");  
	СтруктураСобытия.Вставить("Наименование","Исключение Обращения субъекта");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","3.5");  
	СтруктураСобытия.Вставить("Наименование","Исключение кредитной истории субъекта, сведения о которой отсутствуют у источника");
	МассивСобытий.Добавить(СтруктураСобытия); 

	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","4.1");  
	СтруктураСобытия.Вставить("Наименование","Аннулирование отдельных показателей КИ");
	МассивСобытий.Добавить(СтруктураСобытия); 
	 
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","4.2"); 
	СтруктураСобытия.Вставить("Наименование","Аннулирование записи КИ");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","4.3");  
	СтруктураСобытия.Вставить("Наименование","Аннулирование всей КИ");
	МассивСобытий.Добавить(СтруктураСобытия);    
	  
	
		
	Для каждого эл из МассивСобытий Цикл
		СуществующееСобытие = Справочники.КредитныеИсторииСобытияИсключенияАннулированияКорректировки.НайтиПоРеквизиту("КодНБКИ", эл.КодНБКИ);
		Если Не ЗначениеЗаполнено(СуществующееСобытие) Тогда
			
			НовСобытие = Справочники.КредитныеИсторииСобытияИсключенияАннулированияКорректировки.СоздатьЭлемент();
			НовСобытие.КодНБКИ = эл.КодНБКИ;
			НовСобытие.Наименование = эл.Наименование;
			НовСобытие.Записать(); 
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	  

Процедура ЗаполнитьРегистрДействийКорректировкиКИ()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(1) КАК КоличествоЗаписей
	|ИЗ
	|	РегистрСведений.КредитныеИсторииДействияКорректировкиКИ КАК КредитныеИсторииДействияКорректировкиКИ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.КоличествоЗаписей) Тогда
			Если ВыборкаДетальныеЗаписи.КоличествоЗаписей > 0 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьДействие = РегистрыСведений.КредитныеИсторииДействияКорректировкиКИ.СоздатьМенеджерЗаписи(); 	
	ЗаписьДействие.ЧастьКИ  = Перечисления.ЧастиКИДляКорректировкиRUTDF.БлокТитульнойЧастиСубъекта;
	ЗаписьДействие.Действие = Перечисления.ДействияКорректировкиКИRUTDF.Исключение;     
	ЗаписьДействие.СобытиеКорректировки = Справочники.КредитныеИсторииСобытияИсключенияАннулированияКорректировки.НайтиПоРеквизиту("КодНБКИ", "3.1");
	ЗаписьДействие.ОперацияКорректировки = Перечисления.ВидыОперацийИсправленияИУдаленияRUTDF.C_2; 
	ЗаписьДействие.Записать();
	
	ЗаписьДействие = РегистрыСведений.КредитныеИсторииДействияКорректировкиКИ.СоздатьМенеджерЗаписи();
	ЗаписьДействие.ЧастьКИ  = Перечисления.ЧастиКИДляКорректировкиRUTDF.БлокТитульнойЧастиСубъекта;
	ЗаписьДействие.Действие = Перечисления.ДействияКорректировкиКИRUTDF.Исправление;     
	ЗаписьДействие.СобытиеКорректировки = Справочники.КредитныеИсторииСобытияИсключенияАннулированияКорректировки.НайтиПоРеквизиту("КодНБКИ", "3.1");
	ЗаписьДействие.ОперацияКорректировки = Перечисления.ВидыОперацийИсправленияИУдаленияRUTDF.C_1;
	ЗаписьДействие.Записать();
	
	ЗаписьДействие = РегистрыСведений.КредитныеИсторииДействияКорректировкиКИ.СоздатьМенеджерЗаписи();
	ЗаписьДействие.ЧастьКИ  = Перечисления.ЧастиКИДляКорректировкиRUTDF.БлокТитульнойЧастиСубъекта;
	ЗаписьДействие.Действие = Перечисления.ДействияКорректировкиКИRUTDF.Аннулирование;     
	ЗаписьДействие.СобытиеКорректировки = Справочники.КредитныеИсторииСобытияИсключенияАннулированияКорректировки.НайтиПоРеквизиту("КодНБКИ", "4.1");
	ЗаписьДействие.ОперацияКорректировки = Перечисления.ВидыОперацийИсправленияИУдаленияRUTDF.D_1; 
	ЗаписьДействие.Записать();
	
	ЗаписьДействие = РегистрыСведений.КредитныеИсторииДействияКорректировкиКИ.СоздатьМенеджерЗаписи();
	ЗаписьДействие.ЧастьКИ  = Перечисления.ЧастиКИДляКорректировкиRUTDF.БлокТитульнойЧастиСубъекта;
	ЗаписьДействие.Действие = Перечисления.ДействияКорректировкиКИRUTDF.Аннулирование;     
	ЗаписьДействие.СобытиеКорректировки = Справочники.КредитныеИсторииСобытияИсключенияАннулированияКорректировки.НайтиПоРеквизиту("КодНБКИ", "4.1");
	ЗаписьДействие.ОперацияКорректировки = Перечисления.ВидыОперацийИсправленияИУдаленияRUTDF.D_2;
	ЗаписьДействие.Записать();
	
	ЗаписьДействие = РегистрыСведений.КредитныеИсторииДействияКорректировкиКИ.СоздатьМенеджерЗаписи();
	ЗаписьДействие.ЧастьКИ  = Перечисления.ЧастиКИДляКорректировкиRUTDF.БлокТитульнойЧастиСубъекта;
	ЗаписьДействие.Действие = Перечисления.ДействияКорректировкиКИRUTDF.Аннулирование;     
	ЗаписьДействие.СобытиеКорректировки = Справочники.КредитныеИсторииСобытияИсключенияАннулированияКорректировки.НайтиПоРеквизиту("КодНБКИ", "4.1");
	ЗаписьДействие.ОперацияКорректировки = Перечисления.ВидыОперацийИсправленияИУдаленияRUTDF.D_3;  
	ЗаписьДействие.Записать();
	
	ЗаписьДействие = РегистрыСведений.КредитныеИсторииДействияКорректировкиКИ.СоздатьМенеджерЗаписи();
	ЗаписьДействие.ЧастьКИ  = Перечисления.ЧастиКИДляКорректировкиRUTDF.БлокТитульнойЧастиСубъекта;
	ЗаписьДействие.Действие = Перечисления.ДействияКорректировкиКИRUTDF.Аннулирование;     
	ЗаписьДействие.СобытиеКорректировки = Справочники.КредитныеИсторииСобытияИсключенияАннулированияКорректировки.НайтиПоРеквизиту("КодНБКИ", "4.1");
	ЗаписьДействие.ОперацияКорректировки = Перечисления.ВидыОперацийИсправленияИУдаленияRUTDF.D_4;
	ЗаписьДействие.Записать();
	
	ЗаписьДействие = РегистрыСведений.КредитныеИсторииДействияКорректировкиКИ.СоздатьМенеджерЗаписи();
	ЗаписьДействие.ЧастьКИ  = Перечисления.ЧастиКИДляКорректировкиRUTDF.БлокДополнительнойЧастиСубъекта;
	ЗаписьДействие.Действие = Перечисления.ДействияКорректировкиКИRUTDF.Исправление;     
	ЗаписьДействие.СобытиеКорректировки = Справочники.КредитныеИсторииСобытияИсключенияАннулированияКорректировки.НайтиПоРеквизиту("КодНБКИ", "3.1");
	ЗаписьДействие.ОперацияКорректировки = Перечисления.ВидыОперацийИсправленияИУдаленияRUTDF.C_1; 
	ЗаписьДействие.Записать();
	
	ЗаписьДействие = РегистрыСведений.КредитныеИсторииДействияКорректировкиКИ.СоздатьМенеджерЗаписи();
	ЗаписьДействие.ЧастьКИ  = Перечисления.ЧастиКИДляКорректировкиRUTDF.БлокДополнительнойЧастиСубъекта;
	ЗаписьДействие.Действие = Перечисления.ДействияКорректировкиКИRUTDF.Исключение;     
	ЗаписьДействие.СобытиеКорректировки = Справочники.КредитныеИсторииСобытияИсключенияАннулированияКорректировки.НайтиПоРеквизиту("КодНБКИ", "3.1");
	ЗаписьДействие.ОперацияКорректировки = Перечисления.ВидыОперацийИсправленияИУдаленияRUTDF.C_2; 
	ЗаписьДействие.Записать();
	
	ЗаписьДействие = РегистрыСведений.КредитныеИсторииДействияКорректировкиКИ.СоздатьМенеджерЗаписи();
	ЗаписьДействие.ЧастьКИ  = Перечисления.ЧастиКИДляКорректировкиRUTDF.ОбращениеСубъекта;
	ЗаписьДействие.Действие = Перечисления.ДействияКорректировкиКИRUTDF.Исключение;     
	ЗаписьДействие.СобытиеКорректировки = Справочники.КредитныеИсторииСобытияИсключенияАннулированияКорректировки.НайтиПоРеквизиту("КодНБКИ", "3.4");
	ЗаписьДействие.ОперацияКорректировки = Перечисления.ВидыОперацийИсправленияИУдаленияRUTDF.C_2;     
	ЗаписьДействие.Записать();
	
	ЗаписьДействие = РегистрыСведений.КредитныеИсторииДействияКорректировкиКИ.СоздатьМенеджерЗаписи();
    ЗаписьДействие.ЧастьКИ  = Перечисления.ЧастиКИДляКорректировкиRUTDF.ИнформативныйБлокСделкиСубъекта;
	ЗаписьДействие.Действие = Перечисления.ДействияКорректировкиКИRUTDF.Исключение;     
	ЗаписьДействие.СобытиеКорректировки = Справочники.КредитныеИсторииСобытияИсключенияАннулированияКорректировки.НайтиПоРеквизиту("КодНБКИ", "3.1");
	ЗаписьДействие.ОперацияКорректировки = Перечисления.ВидыОперацийИсправленияИУдаленияRUTDF.C_2; 
	ЗаписьДействие.Записать();
	
	ЗаписьДействие = РегистрыСведений.КредитныеИсторииДействияКорректировкиКИ.СоздатьМенеджерЗаписи();
	ЗаписьДействие.ЧастьКИ  = Перечисления.ЧастиКИДляКорректировкиRUTDF.ИнформативныйБлокСделкиСубъекта;
	ЗаписьДействие.Действие = Перечисления.ДействияКорректировкиКИRUTDF.Исправление;     
	ЗаписьДействие.СобытиеКорректировки = Справочники.КредитныеИсторииСобытияИсключенияАннулированияКорректировки.НайтиПоРеквизиту("КодНБКИ", "3.1");
	ЗаписьДействие.ОперацияКорректировки = Перечисления.ВидыОперацийИсправленияИУдаленияRUTDF.C_1;
    ЗаписьДействие.Записать();
	
	ЗаписьДействие = РегистрыСведений.КредитныеИсторииДействияКорректировкиКИ.СоздатьМенеджерЗаписи();
	ЗаписьДействие.ЧастьКИ  = Перечисления.ЧастиКИДляКорректировкиRUTDF.ИнформативныйБлокСделкиСубъекта;
	ЗаписьДействие.Действие = Перечисления.ДействияКорректировкиКИRUTDF.Аннулирование;     
	ЗаписьДействие.СобытиеКорректировки = Справочники.КредитныеИсторииСобытияИсключенияАннулированияКорректировки.НайтиПоРеквизиту("КодНБКИ", "4.1");
	ЗаписьДействие.ОперацияКорректировки = Перечисления.ВидыОперацийИсправленияИУдаленияRUTDF.D_1;
    ЗаписьДействие.Записать();
	
	ЗаписьДействие = РегистрыСведений.КредитныеИсторииДействияКорректировкиКИ.СоздатьМенеджерЗаписи();
	ЗаписьДействие.ЧастьКИ  = Перечисления.ЧастиКИДляКорректировкиRUTDF.ИнформативныйБлокСделкиСубъекта;
	ЗаписьДействие.Действие = Перечисления.ДействияКорректировкиКИRUTDF.Аннулирование;     
	ЗаписьДействие.СобытиеКорректировки = Справочники.КредитныеИсторииСобытияИсключенияАннулированияКорректировки.НайтиПоРеквизиту("КодНБКИ", "4.1");
	ЗаписьДействие.ОперацияКорректировки = Перечисления.ВидыОперацийИсправленияИУдаленияRUTDF.D_2;
	ЗаписьДействие.Записать();
	
	ЗаписьДействие = РегистрыСведений.КредитныеИсторииДействияКорректировкиКИ.СоздатьМенеджерЗаписи();
	ЗаписьДействие.ЧастьКИ  = Перечисления.ЧастиКИДляКорректировкиRUTDF.ИнформативныйБлокСделкиСубъекта;
	ЗаписьДействие.Действие = Перечисления.ДействияКорректировкиКИRUTDF.Аннулирование;     
	ЗаписьДействие.СобытиеКорректировки = Справочники.КредитныеИсторииСобытияИсключенияАннулированияКорректировки.НайтиПоРеквизиту("КодНБКИ", "4.1");
	ЗаписьДействие.ОперацияКорректировки = Перечисления.ВидыОперацийИсправленияИУдаленияRUTDF.D_3;
	ЗаписьДействие.Записать();
	
	ЗаписьДействие = РегистрыСведений.КредитныеИсторииДействияКорректировкиКИ.СоздатьМенеджерЗаписи();
	ЗаписьДействие.ЧастьКИ  = Перечисления.ЧастиКИДляКорректировкиRUTDF.ИнформативныйБлокСделкиСубъекта;
	ЗаписьДействие.Действие = Перечисления.ДействияКорректировкиКИRUTDF.Аннулирование;     
	ЗаписьДействие.СобытиеКорректировки = Справочники.КредитныеИсторииСобытияИсключенияАннулированияКорректировки.НайтиПоРеквизиту("КодНБКИ", "4.1");
	ЗаписьДействие.ОперацияКорректировки = Перечисления.ВидыОперацийИсправленияИУдаленияRUTDF.D_4;
    ЗаписьДействие.Записать();  
	
    ЗаписьДействие = РегистрыСведений.КредитныеИсторииДействияКорректировкиКИ.СоздатьМенеджерЗаписи();
    ЗаписьДействие.ЧастьКИ  = Перечисления.ЧастиКИДляКорректировкиRUTDF.СделкаСубъекта;
	ЗаписьДействие.Действие = Перечисления.ДействияКорректировкиКИRUTDF.Исключение;     
	ЗаписьДействие.СобытиеКорректировки = Справочники.КредитныеИсторииСобытияИсключенияАннулированияКорректировки.НайтиПоРеквизиту("КодНБКИ", "3.3");
	ЗаписьДействие.ОперацияКорректировки = Перечисления.ВидыОперацийИсправленияИУдаленияRUTDF.C_2;    
	ЗаписьДействие.Записать();
	
	ЗаписьДействие = РегистрыСведений.КредитныеИсторииДействияКорректировкиКИ.СоздатьМенеджерЗаписи();
	ЗаписьДействие.ЧастьКИ  = Перечисления.ЧастиКИДляКорректировкиRUTDF.СделкаСубъекта;
	ЗаписьДействие.Действие = Перечисления.ДействияКорректировкиКИRUTDF.Аннулирование;     
	ЗаписьДействие.СобытиеКорректировки = Справочники.КредитныеИсторииСобытияИсключенияАннулированияКорректировки.НайтиПоРеквизиту("КодНБКИ", "4.2");
	ЗаписьДействие.ОперацияКорректировки = Перечисления.ВидыОперацийИсправленияИУдаленияRUTDF.D_1;
    ЗаписьДействие.Записать();
	
	ЗаписьДействие = РегистрыСведений.КредитныеИсторииДействияКорректировкиКИ.СоздатьМенеджерЗаписи();
	ЗаписьДействие.ЧастьКИ  = Перечисления.ЧастиКИДляКорректировкиRUTDF.СделкаСубъекта;
	ЗаписьДействие.Действие = Перечисления.ДействияКорректировкиКИRUTDF.Аннулирование;     
	ЗаписьДействие.СобытиеКорректировки = Справочники.КредитныеИсторииСобытияИсключенияАннулированияКорректировки.НайтиПоРеквизиту("КодНБКИ", "4.2");
	ЗаписьДействие.ОперацияКорректировки = Перечисления.ВидыОперацийИсправленияИУдаленияRUTDF.D_2;
	ЗаписьДействие.Записать();
	
	ЗаписьДействие = РегистрыСведений.КредитныеИсторииДействияКорректировкиКИ.СоздатьМенеджерЗаписи();
	ЗаписьДействие.ЧастьКИ  = Перечисления.ЧастиКИДляКорректировкиRUTDF.СделкаСубъекта;
	ЗаписьДействие.Действие = Перечисления.ДействияКорректировкиКИRUTDF.Аннулирование;     
	ЗаписьДействие.СобытиеКорректировки = Справочники.КредитныеИсторииСобытияИсключенияАннулированияКорректировки.НайтиПоРеквизиту("КодНБКИ", "4.2");
	ЗаписьДействие.ОперацияКорректировки = Перечисления.ВидыОперацийИсправленияИУдаленияRUTDF.D_3;
	ЗаписьДействие.Записать();
	
	ЗаписьДействие = РегистрыСведений.КредитныеИсторииДействияКорректировкиКИ.СоздатьМенеджерЗаписи();
	ЗаписьДействие.ЧастьКИ  = Перечисления.ЧастиКИДляКорректировкиRUTDF.СделкаСубъекта;
	ЗаписьДействие.Действие = Перечисления.ДействияКорректировкиКИRUTDF.Аннулирование;     
	ЗаписьДействие.СобытиеКорректировки = Справочники.КредитныеИсторииСобытияИсключенияАннулированияКорректировки.НайтиПоРеквизиту("КодНБКИ", "4.2");
	ЗаписьДействие.ОперацияКорректировки = Перечисления.ВидыОперацийИсправленияИУдаленияRUTDF.D_4;
    ЗаписьДействие.Записать();
	
	ЗаписьДействие = РегистрыСведений.КредитныеИсторииДействияКорректировкиКИ.СоздатьМенеджерЗаписи();
	ЗаписьДействие.ЧастьКИ  = Перечисления.ЧастиКИДляКорректировкиRUTDF.ВсеСделкиСубъекта;
	ЗаписьДействие.Действие = Перечисления.ДействияКорректировкиКИRUTDF.Исключение;     
	ЗаписьДействие.СобытиеКорректировки = Справочники.КредитныеИсторииСобытияИсключенияАннулированияКорректировки.НайтиПоРеквизиту("КодНБКИ", "3.5");
	ЗаписьДействие.ОперацияКорректировки = Перечисления.ВидыОперацийИсправленияИУдаленияRUTDF.C_2;    
	ЗаписьДействие.Записать();
	
	ЗаписьДействие = РегистрыСведений.КредитныеИсторииДействияКорректировкиКИ.СоздатьМенеджерЗаписи();
	ЗаписьДействие.ЧастьКИ  = Перечисления.ЧастиКИДляКорректировкиRUTDF.ВсеСделкиСубъекта;
	ЗаписьДействие.Действие = Перечисления.ДействияКорректировкиКИRUTDF.Аннулирование;     
	ЗаписьДействие.СобытиеКорректировки = Справочники.КредитныеИсторииСобытияИсключенияАннулированияКорректировки.НайтиПоРеквизиту("КодНБКИ", "4.3");
	ЗаписьДействие.ОперацияКорректировки = Перечисления.ВидыОперацийИсправленияИУдаленияRUTDF.D_1;
    ЗаписьДействие.Записать();
	
	ЗаписьДействие = РегистрыСведений.КредитныеИсторииДействияКорректировкиКИ.СоздатьМенеджерЗаписи();
	ЗаписьДействие.ЧастьКИ  = Перечисления.ЧастиКИДляКорректировкиRUTDF.ВсеСделкиСубъекта;
	ЗаписьДействие.Действие = Перечисления.ДействияКорректировкиКИRUTDF.Аннулирование;     
	ЗаписьДействие.СобытиеКорректировки = Справочники.КредитныеИсторииСобытияИсключенияАннулированияКорректировки.НайтиПоРеквизиту("КодНБКИ", "4.3");
	ЗаписьДействие.ОперацияКорректировки = Перечисления.ВидыОперацийИсправленияИУдаленияRUTDF.D_2;
	ЗаписьДействие.Записать();
	
	ЗаписьДействие = РегистрыСведений.КредитныеИсторииДействияКорректировкиКИ.СоздатьМенеджерЗаписи();
	ЗаписьДействие.ЧастьКИ  = Перечисления.ЧастиКИДляКорректировкиRUTDF.ВсеСделкиСубъекта;
	ЗаписьДействие.Действие = Перечисления.ДействияКорректировкиКИRUTDF.Аннулирование;     
	ЗаписьДействие.СобытиеКорректировки = Справочники.КредитныеИсторииСобытияИсключенияАннулированияКорректировки.НайтиПоРеквизиту("КодНБКИ", "4.3");
	ЗаписьДействие.ОперацияКорректировки = Перечисления.ВидыОперацийИсправленияИУдаленияRUTDF.D_3;
	ЗаписьДействие.Записать();
	
	ЗаписьДействие = РегистрыСведений.КредитныеИсторииДействияКорректировкиКИ.СоздатьМенеджерЗаписи();
	ЗаписьДействие.ЧастьКИ  = Перечисления.ЧастиКИДляКорректировкиRUTDF.ВсеСделкиСубъекта;
	ЗаписьДействие.Действие = Перечисления.ДействияКорректировкиКИRUTDF.Аннулирование;     
	ЗаписьДействие.СобытиеКорректировки = Справочники.КредитныеИсторииСобытияИсключенияАннулированияКорректировки.НайтиПоРеквизиту("КодНБКИ", "4.3");
	ЗаписьДействие.ОперацияКорректировки = Перечисления.ВидыОперацийИсправленияИУдаленияRUTDF.D_4; 
	ЗаписьДействие.Записать();   
	
    ЗаписьДействие = РегистрыСведений.КредитныеИсторииДействияКорректировкиКИ.СоздатьМенеджерЗаписи();
	ЗаписьДействие.ЧастьКИ  = Перечисления.ЧастиКИДляКорректировкиRUTDF.ДинамическаяИнформацияСделкиСубъекта;
	ЗаписьДействие.Действие = Перечисления.ДействияКорректировкиКИRUTDF.Исправление;     
	ЗаписьДействие.СобытиеКорректировки = Справочники.КредитныеИсторииСобытияИсключенияАннулированияКорректировки.НайтиПоРеквизиту("КодНБКИ", "3.2");
	ЗаписьДействие.ОперацияКорректировки = Перечисления.ВидыОперацийИсправленияИУдаленияRUTDF.C_1; 
	ЗаписьДействие.Записать();
	
	ЗаписьДействие = РегистрыСведений.КредитныеИсторииДействияКорректировкиКИ.СоздатьМенеджерЗаписи();
	ЗаписьДействие.ЧастьКИ  = Перечисления.ЧастиКИДляКорректировкиRUTDF.ДинамическаяИнформацияСделкиСубъекта;
	ЗаписьДействие.Действие = Перечисления.ДействияКорректировкиКИRUTDF.Исключение;     
	ЗаписьДействие.СобытиеКорректировки = Справочники.КредитныеИсторииСобытияИсключенияАннулированияКорректировки.НайтиПоРеквизиту("КодНБКИ", "3.2");
	ЗаписьДействие.ОперацияКорректировки = Перечисления.ВидыОперацийИсправленияИУдаленияRUTDF.C_2; 
	ЗаписьДействие.Записать();

КонецПроцедуры	 
  
Процедура ЗаполнитьСобытияСделки() 
// КодНБКИ	Наименование 
// Смена условий - код НБКИ 2.1
// Прощение - Код НБКИ 2.5 или 2.1
// Мировое соглашение - Код НБКИ 2.5 или 2.1
// Продажа - Код НБКИ 2.11
// Передача по агентской схеме - Код НБКИ 2.12
// Поступление платежа (Изменения в исполнении обязательства) - Код НБКИ 2.3
// Заявка - Код НБКИ 1.1
// Одобрение - Код НБКИ 1.2
// Отказ - Код НБКИ 1.3
// Заключение договора - Код НБКИ 1.4
// Судопроизводство - Код НБКИ 2.6
// Прекращение передачи - Код НБКИ 2.10
// Выдача Суммы -  Код НБКИ 2.2
// Обеспечение - Код НБКИ 2.4
// Обязательство субъекта прекратилось - Код НБКИ 2.5
// Первичное заполнение - псевдокод НБКИ УЗ 0.
//RUTDF 5.0
// Права кредитора по обязательству получены от другого лица - Код НБКИ 2.11.2
// Права кредитора по обязательству частично перешли к другому лицу - Код НБКИ 2.11.1
// Субъект стал принципалом по гарантии или поручителем по сделке - Код НБКИ 2.2.1
	
	МассивСобытий = Новый Массив;
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","1.1");  
	СтруктураСобытия.Вставить("Наименование","Заявка");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","1.2");  
	СтруктураСобытия.Вставить("Наименование","Одобрение");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","1.3");  
	СтруктураСобытия.Вставить("Наименование","Отказ");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","1.4");  
	СтруктураСобытия.Вставить("Наименование","Заключение договора");
	МассивСобытий.Добавить(СтруктураСобытия);    
	 
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","2.1");  
	СтруктураСобытия.Вставить("Наименование","Смена условий");
	МассивСобытий.Добавить(СтруктураСобытия);   
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","2.2");  
	СтруктураСобытия.Вставить("Наименование","Выдача Суммы");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","2.3");  
	СтруктураСобытия.Вставить("Наименование","Исполнение обязательства-Поступление платежа");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","2.4");  
	СтруктураСобытия.Вставить("Наименование","Обеспечение");
	МассивСобытий.Добавить(СтруктураСобытия); 
		
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","2.5");  
	СтруктураСобытия.Вставить("Наименование","Обязательство субъекта прекратилось");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
		
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","2.6");  
	СтруктураСобытия.Вставить("Наименование","Судопроизводство");
	МассивСобытий.Добавить(СтруктураСобытия);    
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","2.10");  
	СтруктураСобытия.Вставить("Наименование","Прекращение передачи");
	МассивСобытий.Добавить(СтруктураСобытия);     
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","2.11");  
	СтруктураСобытия.Вставить("Наименование","Продажа");
	МассивСобытий.Добавить(СтруктураСобытия);    
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","2.12");  
	СтруктураСобытия.Вставить("Наименование","Передача по агентской схеме");
	МассивСобытий.Добавить(СтруктураСобытия);   
  
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","0.0");  
	СтруктураСобытия.Вставить("Наименование","Первичное заполнение");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","2.11.2");  
	СтруктураСобытия.Вставить("Наименование","Правопреемство от другого лица");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","2.11.1");  
	СтруктураСобытия.Вставить("Наименование","Частичная передача прав другому лицу");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","2.2.1");  
	СтруктураСобытия.Вставить("Наименование","Поручительство или гарант по сделке");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	
	Для каждого эл из МассивСобытий Цикл
		СуществующееСобытие = Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", эл.КодНБКИ);
		Если Не ЗначениеЗаполнено(СуществующееСобытие) Тогда
			НовСобытие = Справочники.КредитныеИсторииСобытияСделки.СоздатьЭлемент();
			НовСобытие.КодНБКИ = эл.КодНБКИ;
			НовСобытие.Наименование = эл.Наименование;
			НовСобытие.Записать();  
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ЗаполнитьПрекращениеОбеспечения() 
	// КодНБКИ	Наименование 
	// 1	Обеспечивающее обязательство прекращено в связи с надлежащим исполнением основного обязательства
	// 2	Обеспечивающее обязательство прекращено в счет погашения требований кредитора по основному обязательству
	// 3	Залог прекращен в связи с гибелью или утратой заложенного имущества
	// 99	Обеспечивающее обязательство прекращено на ином основании
	
	
	
	МассивСобытий = Новый Массив;
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","1");  
	СтруктураСобытия.Вставить("Наименование","Обеспечивающее обязательство прекращено в связи с надлежащим исполнением основного обязательства");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","2");  
	СтруктураСобытия.Вставить("Наименование","Обеспечивающее обязательство прекращено в счет погашения требований кредитора по основному обязательству");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","3");  
	СтруктураСобытия.Вставить("Наименование","Залог прекращен в связи с гибелью или утратой заложенного имущества");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","99");  
	СтруктураСобытия.Вставить("Наименование","Обеспечивающее обязательство прекращено на ином основании");
	МассивСобытий.Добавить(СтруктураСобытия);    
		
	
	Для каждого эл из МассивСобытий Цикл 
		СуществующийЭлемент = Справочники.ПричиныПрекращенияОбеспечительства.НайтиПоРеквизиту("КодНБКИ", эл.КодНБКИ);
		Если Не ЗначениеЗаполнено(СуществующийЭлемент) Тогда
			
			НовЭлемент = Справочники.ПричиныПрекращенияОбеспечительства.СоздатьЭлемент();
			НовЭлемент.КодНБКИ = эл.КодНБКИ;
			НовЭлемент.Наименование = эл.Наименование;
			НовЭлемент.Записать();  
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	 

Процедура ЗаполнитьЦелиКредита() 
	// КодНБКИ	Наименование 
//	1	Пополнение оборотных средств
//2.1	Приобретение земельного участка
//2.2	Приобретение жилого здания
//2.3	Приобретение нежилого здания
//2.4	Приобретение жилого помещения на первичном рынке
//2.5	Приобретение жилого помещения на вторичном рынке
//2.6	Приобретение нежилого помещения
//2.7	Приобретение иной недвижимости
//3	Приобретение основных средств, за исключением недвижимости
//4.1	Строительство жилого здания
//4.2	Реконструкция жилого здания
//4.3	Строительство нежилого здания
//4.4	Реконструкция нежилого здания
//4.5	Приобретение имущественных прав по договору участия в долевом строительстве многоквартирного дома или иного жилого здания
//4.6	Приобретение имущественных прав по договору участия в долевом строительстве нежилого здания
//4.7	Финансирование инвестиционного проекта, предусматривающего строительство или реконструкцию жилого здания или жилых и нежилых зданий
//4.8	Финансирование инвестиционного проекта, предусматривающего строительство или реконструкцию только нежилого здания
//4.9	Финансирование инвестиционного проекта, предусматривающего строительство или реконструкцию инженерно-технической инфраструктуры
//5	Приобретение ценных бумаг
//6	Обеспечение участия в электронных торгах, аукционе или конкурсе
//7	Вклад в уставный капитал юридического лица
//8	Погашение задолженности (рефинансирование) субъекта перед организацией, в которую он обратился 
//9	Погашение задолженности (рефинансирование) субъекта перед лицом, отличным от организации, в которую он обратился 
//10	Погашение субъектом задолженности третьего лица перед организацией, в которую оно обратилось, или иным лицом
//11	Финансирование лизинговой деятельности
//12	Приобретение прав кредитора по займам (кредитам)
//13	Предоставление займа (кредита) иному лицу
//14	POS-заем
//15	Бытовые или текущие нужды (ремонт, приобретение мебели, бытовой техники, медицинские услуги)
//16.1	Образовательный кредит с государственной поддержкой в соответствии с частью 4 статьи 104 Федерального закона от 29 декабря 2012 года № 273-ФЗ «Об образовании в Российской Федерации» 
//16.2 	Образовательный кредит без государственной поддержки в соответствии со статьей 104 Федерального закона от 29 декабря 2012 года № 273-ФЗ «Об образовании в Российской Федерации»
//16.3	Иной заем (кредит) на оплату образования
//17	Приобретение автомобиля с пробегом менее 1000 километров
//18	Приобретение автомобиля с пробегом от 1000 километров
//19	Цель не определена
//20	Заем (кредит), подлежащий компенсации согласно статье 11 Федерального закона от 24 ноября 1995 года № 181-ФЗ «О социальной защите инвалидов в Российской Федерации»
//99	Иная цель
	
	
	
	МассивСобытий = Новый Массив;
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","1");  
	СтруктураСобытия.Вставить("Наименование","Пополнение оборотных средств");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","2.1");  
	СтруктураСобытия.Вставить("Наименование", "Приобретение земельного участка");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","2.2");  
	СтруктураСобытия.Вставить("Наименование","Приобретение жилого здания");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","2.3");  
	СтруктураСобытия.Вставить("Наименование","Приобретение нежилого здания");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","2.4");  
	СтруктураСобытия.Вставить("Наименование","Приобретение жилого помещения на первичном рынке");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","2.5");  
	СтруктураСобытия.Вставить("Наименование","Приобретение жилого помещения на вторичном рынке");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","2.6");  
	СтруктураСобытия.Вставить("Наименование","Приобретение нежилого помещения");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","2.7");  
	СтруктураСобытия.Вставить("Наименование","Приобретение иной недвижимости");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","3");  
	СтруктураСобытия.Вставить("Наименование","Приобретение основных средств, за исключением недвижимости");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","4.1");  
	СтруктураСобытия.Вставить("Наименование","Строительство жилого здания");
	МассивСобытий.Добавить(СтруктураСобытия);   

	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","4.2");  
	СтруктураСобытия.Вставить("Наименование","Реконструкция жилого здания");
	МассивСобытий.Добавить(СтруктураСобытия);   

	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","4.3");  
	СтруктураСобытия.Вставить("Наименование","Строительство нежилого здания");
	МассивСобытий.Добавить(СтруктураСобытия);   

	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","4.4");  
	СтруктураСобытия.Вставить("Наименование","Реконструкция нежилого здания");
	МассивСобытий.Добавить(СтруктураСобытия);   

	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","4.5");  
	СтруктураСобытия.Вставить("Наименование","Приобретение имущественных прав по договору участия в долевом строительстве многоквартирного дома или иного жилого здания");
	МассивСобытий.Добавить(СтруктураСобытия);   

	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","4.6");  
	СтруктураСобытия.Вставить("Наименование","Приобретение имущественных прав по договору участия в долевом строительстве нежилого здания");
	МассивСобытий.Добавить(СтруктураСобытия);   

	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","4.7");  
	СтруктураСобытия.Вставить("Наименование","Финансирование инвестиционного проекта, предусматривающего строительство или реконструкцию жилого здания или жилых и нежилых зданий");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","4.8");  
	СтруктураСобытия.Вставить("Наименование","Финансирование инвестиционного проекта, предусматривающего строительство или реконструкцию только нежилого здания");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","4.9");  
	СтруктураСобытия.Вставить("Наименование","Финансирование инвестиционного проекта, предусматривающего строительство или реконструкцию инженерно-технической инфраструктуры");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","5");  
	СтруктураСобытия.Вставить("Наименование","Приобретение ценных бумаг");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","6");  
	СтруктураСобытия.Вставить("Наименование","Обеспечение участия в электронных торгах, аукционе или конкурсе");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","7");  
	СтруктураСобытия.Вставить("Наименование","Вклад в уставный капитал юридического лица");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","8");  
	СтруктураСобытия.Вставить("Наименование","Погашение задолженности (рефинансирование) субъекта перед организацией, в которую он обратился ");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","9");  
	СтруктураСобытия.Вставить("Наименование","Погашение задолженности (рефинансирование) субъекта перед лицом, отличным от организации, в которую он обратился ");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","10");  
	СтруктураСобытия.Вставить("Наименование","Погашение субъектом задолженности третьего лица перед организацией, в которую оно обратилось, или иным лицом");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","11");  
	СтруктураСобытия.Вставить("Наименование","Финансирование лизинговой деятельности");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","12");  
	СтруктураСобытия.Вставить("Наименование","Приобретение прав кредитора по займам (кредитам)");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","13");  
	СтруктураСобытия.Вставить("Наименование","Предоставление займа (кредита) иному лицу");
	МассивСобытий.Добавить(СтруктураСобытия); 
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","14");  
	СтруктураСобытия.Вставить("Наименование","POS-заем");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","15");  
	СтруктураСобытия.Вставить("Наименование","Бытовые или текущие нужды (ремонт, приобретение мебели, бытовой техники, медицинские услуги)");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","16.1");  
	СтруктураСобытия.Вставить("Наименование","Образовательный кредит с государственной поддержкой в соответствии с ч 4 с 104 ФЗ № 273-ФЗ");
	МассивСобытий.Добавить(СтруктураСобытия);   
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","16.2");  
	СтруктураСобытия.Вставить("Наименование","Образовательный кредит без государственной поддержки в соответствии с ч 4 с 104 ФЗ № 273-ФЗ");
	МассивСобытий.Добавить(СтруктураСобытия);
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","16.3");  
	СтруктураСобытия.Вставить("Наименование","Иной заем (кредит) на оплату образования");
	МассивСобытий.Добавить(СтруктураСобытия);  
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","17");  
	СтруктураСобытия.Вставить("Наименование","Приобретение автомобиля с пробегом менее 1000 километров");
	МассивСобытий.Добавить(СтруктураСобытия);   
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","18");  
	СтруктураСобытия.Вставить("Наименование","Приобретение автомобиля с пробегом от 1000 километров");
	МассивСобытий.Добавить(СтруктураСобытия);   
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","19");  
	СтруктураСобытия.Вставить("Наименование","Цель не определена");
	МассивСобытий.Добавить(СтруктураСобытия);   
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","20");  
	СтруктураСобытия.Вставить("Наименование","Заем (кредит), подлежащий компенсации согласно с 11 ФЗ № 181-ФЗ ");
	МассивСобытий.Добавить(СтруктураСобытия);   

	
	
	
	СтруктураСобытия = Новый Структура("КодНБКИ","Наименование");
	СтруктураСобытия.Вставить("КодНБКИ","99");  
	СтруктураСобытия.Вставить("Наименование","Иная цель");
	МассивСобытий.Добавить(СтруктураСобытия);    
		
	
	Для каждого эл из МассивСобытий Цикл 
		СуществующийЭлемент = Справочники.ЦелиКредита.НайтиПоРеквизиту("КодНБКИ", эл.КодНБКИ);
		Если Не ЗначениеЗаполнено(СуществующийЭлемент) Тогда
			
			НовЭлемент = Справочники.ЦелиКредита.СоздатьЭлемент();
			НовЭлемент.КодНБКИ = эл.КодНБКИ;
			НовЭлемент.Наименование = эл.Наименование;
			НовЭлемент.Записать();  
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	   

Процедура ТипЗначенияДляВерсииНБКИ() Экспорт 
	//Вызвать при обновлении		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиВыгрузкиНБКИ_RUTDF.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиВыгрузкиНБКИ_RUTDF КАК НастройкиВыгрузкиНБКИ_RUTDF
		|ГДЕ
		|	НЕ НастройкиВыгрузкиНБКИ_RUTDF.ПометкаУдаления
		|	И НастройкиВыгрузкиНБКИ_RUTDF.Используется";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		НастройкаОбъект = Справочники.НастройкиВыгрузкиНБКИ_RUTDF.СоздатьЭлемент();
		Если СтрНайти(Строка(НастройкаОбъект.ВерсияRUTDF), "3") > 0 Тогда
			НастройкаОбъект.ВерсияRUTDF = Перечисления.ВерсияRUTDF.v3;
		Иначе
			НастройкаОбъект.ВерсияRUTDF = Перечисления.ВерсияRUTDF.v4;
		КонецЕсли;
		НастройкаОбъект.Записать();
	КонецЦикла;	

КонецПроцедуры

Функция ВычислитьКодВидаОбеспечительства(Вид) Экспорт 
	Если Вид = Перечисления.ВидыОбеспечения.Залог Тогда
		Возврат "1";
	ИначеЕсли Вид = Перечисления.ВидыОбеспечения.Поручительство Тогда
		Возврат "2";
	ИначеЕсли Вид = Перечисления.ВидыОбеспечения.НезависимаяГарантия Тогда
		Возврат "3";
	ИначеЕсли Вид = Перечисления.ВидыОбеспечения.ИнаяГарантия Тогда
		Возврат "4";
	ИначеЕсли Вид = Перечисления.ВидыОбеспечения.ГарантийныйДепозит Тогда
		Возврат "5";
	ИначеЕсли Вид = Перечисления.ВидыОбеспечения.Страхование Тогда
		Возврат "6";
	ИначеЕсли Вид = Перечисления.ВидыОбеспечения.ИноеОбеспечение Тогда
		Возврат "99"; 	
	Иначе
		Возврат Неопределено; 
	КонецЕсли;
КонецФункции	 

Функция РасчетИсковойДавности(ДатаСобытия = Неопределено, ДатаПлатежа = Неопределено, ДатаОкончанияДоговора = Неопределено) Экспорт 
	ТриГода = 94694400;
	ДатаРасчета = ?(ЗначениеЗаполнено(ДатаСобытия), ДатаСобытия, ТекущаяДатаСеанса());
	
	Если ЗначениеЗаполнено(ДатаПлатежа) Тогда
		
		Возврат ДатаРасчета - ДатаПлатежа >= ТриГода;
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ДатаОкончанияДоговора) Тогда
		
		Возврат ДатаРасчета - ДатаОкончанияДоговора >= ТриГода;
		
	КонецЕсли;
	
	Возврат Ложь;	
КонецФункции  

Функция ВычислитьПараметрПоУмолчанию(КодНБКИ, СтруктураОб,  Об) Экспорт 	
		
	Параметр = Неопределено;
	
	Если КодНБКИ = "C20.1" Тогда
		Если Не ЗначениеЗаполнено(СтруктураОб.СудебноеДело) Тогда
			СчетчикДолжников = 0;
			Для каждого стр из Об.Контрагенты Цикл
				Если стр.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Должник Тогда
					СчетчикДолжников = СчетчикДолжников + 1;
				КонецЕсли;	
			КонецЦикла; 
			
			Параметр = Строка(СчетчикДолжников);
		Иначе  
			Параметр = Строка(СтруктураОб.СудебноеДело.Ответчики.Количество()); 
		КонецЕсли;
	КонецЕсли;
	
	Если КодНБКИ = "C38.1" Тогда 
		ЕстьЗадолженность = ?(Объектысервер.ВычислитьЗадолженностьНаДату(Об, ТекущаяДатаСеанса()) <> Неопределено, Истина, Ложь);
		Если ЕстьЗадолженность = Истина Тогда 
			Параметр = 0;
		Иначе	
			// Если по графику текущая задолженность = 0 и нет Дней просрочки
			Если ЗначениеЗаполнено(СтруктураОб.ДоговорМКЗ) Тогда 
				Запрос = Новый Запрос("ВЫБРАТЬ
				|	РасчетныеДанные.Значение КАК Значение,
				|	РасчетныеДанные.Свойство КАК Свойство
				|ИЗ
				|	РегистрСведений.РасчетныеДанные КАК РасчетныеДанные
				|ГДЕ
				|	РасчетныеДанные.Займ = &Займ
				|	И РасчетныеДанные.Свойство = &Свойство");
				Запрос.УстановитьПараметр("Займ",Об);
				Запрос.УстановитьПараметр("Свойство",ПланыВидовХарактеристик.РасчетныеХарактеристики.ДниПросрочки);
				Рез = Запрос.Выполнить().Выбрать();
				Если Рез.Значение <> Неопределено Тогда
					Если Рез.Значение > 0 Тогда				
						Параметр = 1;  
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Если есть исполдок и текЗадолженность = 0 
			Если ЗначениеЗаполнено(СтруктураОб.СудебноеДело) Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ИсполнительныеДокументы.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ИсполнительныеДокументы КАК ИсполнительныеДокументы
				|ГДЕ
				|	ИсполнительныеДокументы.ПометкаУдаления = ЛОЖЬ
				|	И ИсполнительныеДокументы.Владелец = &Владелец";
				
				Запрос.УстановитьПараметр("Владелец", Об);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда
					Параметр = 2; 
				КонецЕсли;
			КонецЕсли;     
			
			// Есть Обеспечение с погашенной задолженностью и текзадолженность = 0  
			Если ЗначениеЗаполнено(СтруктураОб.Обеспечительство) Тогда
				Если СтруктураОб.Обеспечительство.ПогашеноОсновноеОбязательство Тогда
					Параметр = 4;
				КонецЕсли;
			КонецЕсли; 
			
			// Есть рестурктуризация - новация и задолженность = 0 
			
			Если ЗначениеЗаполнено(СтруктураОб.РеструктуризацияМКЗ) Тогда
				Если СтруктураОб.РеструктуризацияМКЗ.ВидРеструктуризации = Перечисления.ВидыРеструктуризацииЗадолженности.Новация Тогда
					Параметр = 10;
				КонецЕсли;
			КонецЕсли;
			  
			Если ЗначениеЗаполнено(СтруктураОб.СведенияОбИзмененииДоговора) Тогда
				Если СтруктураОб.СведенияОбИзмененииДоговора.ПолноеПрощение Тогда
					Параметр = 11;
				КонецЕсли;
			КонецЕсли;
			
			// Есть банкротство и текзадолженность  = 0
			Если ЗначениеЗаполнено(СтруктураОб.Банкротство) Тогда
				Параметр = 11;
			КонецЕсли;	 
           			
			Параметр = 99; 
		КонецЕсли;
		
	КонецЕсли;  
	
	Если КодНБКИ = "C56.5" Тогда
		Если ЗначениеЗаполнено(СтруктураОб.ДоговорМКЗ) ИЛИ ЗначениеЗаполнено(СтруктураОб.РеструктуризацияМКЗ) Тогда 
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	РасчетныеДанные.Значение КАК Значение,
			|	РасчетныеДанные.Свойство КАК Свойство
			|ИЗ
			|	РегистрСведений.РасчетныеДанные КАК РасчетныеДанные
			|ГДЕ
			|	РасчетныеДанные.Займ = &Займ
			|	И РасчетныеДанные.Свойство = &Свойство");
			Запрос.УстановитьПараметр("Займ",Об);
			Запрос.УстановитьПараметр("Свойство",ПланыВидовХарактеристик.РасчетныеХарактеристики.ДниПросрочки);
			Рез = Запрос.Выполнить().Выбрать();
			Если Рез.Значение > 90 Тогда				
				Параметр = "1";
			Иначе
				Параметр = "0";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если КодНБКИ = "C18.3" Тогда			
		Параметр = "1";
	КонецЕсли;  
	
	Если КодНБКИ = "C18.4" Тогда			
		Параметр = "1";  
		Если ЗначениеЗаполнено(СтруктураОб.ДоговорМКЗ) ИЛИ ЗначениеЗаполнено(СтруктураОб.РеструктуризацияМКЗ) Тогда
			Если НЕ СтруктураОб.ДоговорМКЗ.ПрограммаРасчета.БанковскаяПрограмма Тогда
				Параметр = "3";
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;  
	
	Если КодНБКИ = "C18.6" Тогда			
		Параметр = "1";  	
	КонецЕсли;   
	
	Если КодНБКИ = "C26.7" Тогда
		// Срочная
		Параметр = ТекущаяДатаСеанса(); 
		Если ЗначениеЗаполнено(СтруктураОб.ДоговорМКЗ) ИЛИ ЗначениеЗаполнено(СтруктураОб.РеструктуризацияМКЗ) Тогда
			ТекущийДоговор =?(ЗначениеЗаполнено(СтруктураОб.РеструктуризацияМКЗ), СтруктураОб.РеструктуризацияМКЗ, СтруктураОб.ДоговорМКЗ);
			ВидПогашения = ТекущийДоговор.СпособПогашения;
			ТаблицаГрафика = РасчетЗадолженностиМФО.ПолучитьСрез(СтруктураОб.Обязательство);
			Если ВидПогашения = Перечисления.СпособыПогашенияЗаймов.НаДатуОкончанияДоговора Тогда
				Для каждого стр из ТаблицаГрафика Цикл
					Если НЕ стр.ФлагНаличияПросрочки И стр.ПлановыйГрафик_СуммаПлатежа > 0 Тогда
						Параметр = стр.Дата;
						Прервать;
					КонецЕсли;
				КонецЦикла;	
			Иначе
				Для каждого стр из ТаблицаГрафика Цикл
					Если НЕ стр.ФлагНаличияПросрочки И стр.ПлановыйГрафик_СуммаПлатежа > 0 И НачалоМесяца(стр.Дата) = НачалоМесяца(ТекущаяДатаСеанса()) Тогда
						Параметр = стр.Дата;
						Прервать;
					КонецЕсли;
				КонецЦикла;			
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;  
	
	Если КодНБКИ = "C27.7" Тогда
		// Просроченная
		Параметр = ТекущаяДатаСеанса(); 
		Если ЗначениеЗаполнено(СтруктураОб.ДоговорМКЗ) ИЛИ ЗначениеЗаполнено(СтруктураОб.РеструктуризацияМКЗ) Тогда
			ТекущийДоговор =?(ЗначениеЗаполнено(СтруктураОб.РеструктуризацияМКЗ), СтруктураОб.РеструктуризацияМКЗ, СтруктураОб.ДоговорМКЗ);
			ВидПогашения = ТекущийДоговор.СпособПогашения;
			ТаблицаГрафика = РасчетЗадолженностиМФО.ПолучитьСрез(СтруктураОб.Обязательство);
			Если ВидПогашения = Перечисления.СпособыПогашенияЗаймов.НаДатуОкончанияДоговора Тогда
				Для каждого стр из ТаблицаГрафика Цикл
					Если стр.ФлагНаличияПросрочки И стр.ПлановыйГрафик_СуммаПлатежа > 0 Тогда
						Параметр = стр.Дата;
						Прервать;
					КонецЕсли;
				КонецЦикла;	
			Иначе
				Для каждого стр из ТаблицаГрафика Цикл
					Если стр.ФлагНаличияПросрочки И стр.ПлановыйГрафик_СуммаПлатежа > 0 И НачалоМесяца(стр.Дата) = НачалоМесяца(ТекущаяДатаСеанса()) Тогда
						Параметр = стр.Дата;
						Прервать;
					КонецЕсли;
				КонецЦикла;			
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;   
		
	Возврат Параметр;
КонецФункции 

Функция ОбработатьЗначенияПризнаков(Значение) Экспорт
	ОбработаноБулево = Ложь;
	Если Значение = "1" ИЛИ Значение = "0" Тогда 
		ОбработаноБулево = Истина;
		Возврат Значение; 
	КонецЕсли;	
	Если ЭтоЗначениеИстина(Значение) <> Неопределено Тогда
		ОбработаноБулево = Истина;
		Возврат "1";
	КонецЕсли;	
	Если ЭтоЗначениеЛожь(Значение) <> Неопределено Тогда
		ОбработаноБулево = Истина;
		Возврат "0";
	КонецЕсли;
	
	Если НЕ ОбработаноБулево Тогда
		Возврат Значение;
	КонецЕсли;	
КонецФункции   

Функция ЭтоЗначениеИстина(Значение)
	МассивИстины = Новый Массив; 
	МассивИстины.Добавить(1);
	МассивИстины.Добавить("ДА");  
	МассивИстины.Добавить("Да");
	МассивИстины.Добавить("да");
	МассивИстины.Добавить(Истина);
	
	Найдено = МассивИстины.Найти(Значение);
	
	Возврат Найдено;
КонецФункции  

Функция ЭтоЗначениеЛожь(Значение)
	МассивЛожь = Новый Массив; 
	МассивЛожь.Добавить(0);
	МассивЛожь.Добавить("НЕТ");  
	МассивЛожь.Добавить("Нет");
	МассивЛожь.Добавить("нет");
	МассивЛожь.Добавить(Ложь);
	МассивЛожь.Добавить(Не ЗначениеЗаполнено(Значение));
	Найдено = МассивЛожь.Найти(Значение);
	
	Возврат Найдено;
КонецФункции

Процедура ЗаписатьСобытиеСущности(ОбъектВх, ДатаСобытия, ИсточникСобытия, КодСобытия) Экспорт 
	Если Константы.ИспользоватьНБКИRUTDF.Получить() = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустыеНастройки() Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ОбъектВх) Тогда
		Возврат;
	КонецЕсли;	
	Если ТипЗнч(ОбъектВх) = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда
		ЗаписатьСобытиеСделки(ОбъектВх, ДатаСобытия, ИсточникСобытия, КодСобытия);
	Иначе
		ЗаписатьСобытиеСубъекта(ОбъектВх, ДатаСобытия, ИсточникСобытия, КодСобытия);
	КонецЕсли;	 		
КонецПроцедуры

Процедура ЗаписатьСобытиеСделки(ОбъектВх, ДатаСобытия, ИсточникСобытия, КодСобытия) Экспорт 
	Если Константы.ИспользоватьНБКИRUTDF.Получить() = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустыеНастройки() Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КредитныеИсторииДанныеСделки.Сделка КАК Сделка,
	|	МАКСИМУМ(КредитныеИсторииДанныеСделки.ДатаСобытия) КАК ДатаСобытия
	|ПОМЕСТИТЬ ДатаПоследнегоСобытия
	|ИЗ
	|	РегистрСведений.КредитныеИсторииДанныеСделки КАК КредитныеИсторииДанныеСделки
	|ГДЕ
	|	КредитныеИсторииДанныеСделки.Сделка = &Сделка
	|
	|СГРУППИРОВАТЬ ПО
	|	КредитныеИсторииДанныеСделки.Сделка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатаПоследнегоСобытия.Сделка КАК Сделка,
	|	ДатаПоследнегоСобытия.ДатаСобытия КАК ДатаСобытия,
	|	КредитныеИсторииДанныеСделки.Событие КАК Событие,
	|	КредитныеИсторииДанныеСделки.ДокументСобытие КАК ДокументСобытие,
	|	КредитныеИсторииДанныеСделки.UID КАК UID,
	|	КредитныеИсторииДанныеСделки.ДатаНачалаСделки КАК ДатаНачалаСделки,
	|	КредитныеИсторииДанныеСделки.ДатаОкончанияСделки КАК ДатаОкончанияСделки,
	|	КредитныеИсторииДанныеСделки.ДатаПередачиФинансирования КАК ДатаПередачиФинансирования,
	|	КредитныеИсторииДанныеСделки.СуммаСделки КАК СуммаСделки,
	|	КредитныеИсторииДанныеСделки.СолидарныйДоговор КАК СолидарныйДоговор,
	|	КредитныеИсторииДанныеСделки.ДоговорМКЗ КАК ДоговорМКЗ,
	|	КредитныеИсторииДанныеСделки.РеструктуризацияМКЗ КАК РеструктуризацияМКЗ,
	|	КредитныеИсторииДанныеСделки.Обеспечительство КАК Обеспечительство,
	|	КредитныеИсторииДанныеСделки.СудебноеДело КАК СудебноеДело,
	|	КредитныеИсторииДанныеСделки.ПрекращениеОбязательства КАК ПрекращениеОбязательства,
	|	КредитныеИсторииДанныеСделки.Продан КАК Продан,
	|	КредитныеИсторииДанныеСделки.Просрочка90плюс КАК Просрочка90плюс,
	|	КредитныеИсторииДанныеСделки.ПризнакПотребительскогоКредита КАК ПризнакПотребительскогоКредита,
	|	КредитныеИсторииДанныеСделки.ПризнакПлатежнойКарты КАК ПризнакПлатежнойКарты,
	|	КредитныеИсторииДанныеСделки.НеденежноеОбязательство КАК НеденежноеОбязательство,
	|	КредитныеИсторииДанныеСделки.КодНБКИВидКредита КАК КодНБКИВидКредита,
	|	КредитныеИсторииДанныеСделки.КодНБКИТипКредита КАК КодНБКИТипКредита,
	|	КредитныеИсторииДанныеСделки.КодНБКИЦельКредита КАК КодНБКИЦельКредита,
	|	КредитныеИсторииДанныеСделки.Прощение КАК Прощение,
	|	КредитныеИсторииДанныеСделки.Банкротство КАК Банкротство,
	|	КредитныеИсторииДанныеСделки.БезнадежныйДолг КАК БезнадежныйДолг,
	|	КредитныеИсторииДанныеСделки.ДатаРасчетаСрочнойЗадолженности КАК ДатаРасчетаСрочнойЗадолженности,
	|	КредитныеИсторииДанныеСделки.ДатаРасчетаПросроченнойЗадолженности КАК ДатаРасчетаПросроченнойЗадолженности,
	|	КредитныеИсторииДанныеСделки.ДатаВыходаНаПросрочку КАК ДатаВыходаНаПросрочку,
	|	КредитныеИсторииДанныеСделки.ВидЗаимодавца КАК ВидЗаимодавца,
	|	КредитныеИсторииДанныеСделки.ЧастичноеПравопреемство КАК ЧастичноеПравопреемство,
	|	КредитныеИсторииДанныеСделки.ПризнакКредитнойЛинии КАК ПризнакКредитнойЛинии,
	|	КредитныеИсторииДанныеСделки.КодНБКИТипКредититнойЛинии КАК КодНБКИТипКредититнойЛинии,
	|	КредитныеИсторииДанныеСделки.ПризнакПлавающейПроцентнойСтавки КАК ПризнакПлавающейПроцентнойСтавки,
	|	КредитныеИсторииДанныеСделки.ДатаВозникновенияОбязательстваСубъекта КАК ДатаВозникновенияОбязательстваСубъекта,
	|	КредитныеИсторииДанныеСделки.ПорядковыйНомерТранша КАК ПорядковыйНомерТранша,
	|	КредитныеИсторииДанныеСделки.ПроцентнаяСтавкаПоУсловиям КАК ПроцентнаяСтавкаПоУсловиям,
	|	КредитныеИсторииДанныеСделки.ЧастичнаяПродажа КАК ЧастичнаяПродажа
	|ИЗ
	|	ДатаПоследнегоСобытия КАК ДатаПоследнегоСобытия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КредитныеИсторииДанныеСделки КАК КредитныеИсторииДанныеСделки
	|		ПО ДатаПоследнегоСобытия.Сделка = КредитныеИсторииДанныеСделки.Сделка
	|			И ДатаПоследнегоСобытия.ДатаСобытия = КредитныеИсторииДанныеСделки.ДатаСобытия";
	
	Запрос.УстановитьПараметр("Сделка",ОбъектВх);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяЗапись = РегистрыСведений.КредитныеИсторииДанныеСделки.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
		НоваяЗапись.ДатаСобытия = ДатаСобытия;
		НоваяЗапись.Событие = Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", КодСобытия);
		НоваяЗапись.ДокументСобытие = ИсточникСобытия;
		ОбработатьСобытиеПоИсточнику(НоваяЗапись, ИсточникСобытия);
		НоваяЗапись.Записать();
	КонецЦикла;
		
КонецПроцедуры    

Функция ПустыеНастройки() Экспорт 
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиВыгрузкиНБКИ_RUTDF.Наименование КАК Наименование
		|ИЗ
		|	Справочник.НастройкиВыгрузкиНБКИ_RUTDF КАК НастройкиВыгрузкиНБКИ_RUTDF
		|ГДЕ
		|	НЕ НастройкиВыгрузкиНБКИ_RUTDF.ПометкаУдаления
		|	И НастройкиВыгрузкиНБКИ_RUTDF.Используется";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	

КонецФункции	

Процедура ЗаписатьСобытиеСубъекта(ОбъектВх, ДатаСобытия, ИсточникСобытия, КодСобытия) Экспорт
	Если Константы.ИспользоватьНБКИRUTDF.Получить() = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустыеНастройки() Тогда
		Возврат;
	КонецЕсли;

	Если ОбъектВх.ЮрФизЛицо = Справочники.ЮрФизЛицо.ФизЛицо Тогда
		ЗаписатьСобытиеФЛ(ОбъектВх, ДатаСобытия, ИсточникСобытия, КодСобытия);
		Возврат;
	ИначеЕсли ОбъектВх.ЮрФизЛицо = Справочники.ЮрФизЛицо.ЮрЛицо Тогда
		ЗаписатьСобытиеЮЛ(ОбъектВх, ДатаСобытия, ИсточникСобытия, КодСобытия);
		Возврат;
	Иначе
		ТипДолжника = ОбъектВх.ЮрФизЛицо;  
		НаборЗаписей = РегистрыСведений.ТипДолжникаПризнак.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТипКонтрагента.Установить(ТипДолжника);
		НаборЗаписей.Прочитать();
		Для каждого Запись из НаборЗаписей Цикл
			Если Запись.ФизическоеЛицо Тогда 
				ЗаписатьСобытиеФЛ(ОбъектВх, ДатаСобытия, ИсточникСобытия, КодСобытия);
			Конецесли;
			
			Если Запись.ЮридическоеЛицо Тогда 
				ЗаписатьСобытиеЮЛ(ОбъектВх, ДатаСобытия, ИсточникСобытия, КодСобытия);
			Конецесли;
			
			Если Запись.ИндивидуальныйПредприниматель Тогда 
				 ЗаписатьСобытиеФЛ(ОбъектВх, ДатаСобытия, ИсточникСобытия, КодСобытия);
			Конецесли;
			
		КонецЦикла;			
	КонецЕсли;	 
	
КонецПроцедуры

Процедура ЗаписатьСобытиеФЛ(ОбъектВх, ДатаСобытия, ИсточникСобытия, КодСобытия) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КредитныеИсторииДанныеФизЛица.Должник КАК Должник,
		|	МАКСИМУМ(КредитныеИсторииДанныеФизЛица.ДатаСобытия) КАК ДатаСобытия
		|ПОМЕСТИТЬ ДатаПоследнегоСобытия
		|ИЗ
		|	РегистрСведений.КредитныеИсторииДанныеФизЛица КАК КредитныеИсторииДанныеФизЛица
		|ГДЕ
		|	КредитныеИсторииДанныеФизЛица.Должник = &ОбъектВх
		|
		|СГРУППИРОВАТЬ ПО
		|	КредитныеИсторииДанныеФизЛица.Должник
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Должник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатаПоследнегоСобытия.Должник КАК Должник,
		|	ДатаПоследнегоСобытия.ДатаСобытия КАК ДатаСобытия,
		|	КредитныеИсторииДанныеФизЛица.Событие КАК Событие,
		|	КредитныеИсторииДанныеФизЛица.ДокументСобытие КАК ДокументСобытие,
		|	КредитныеИсторииДанныеФизЛица.ДатаРождения КАК ДатаРождения,
		|	КредитныеИсторииДанныеФизЛица.МестоРождения КАК МестоРождения,
		|	КредитныеИсторииДанныеФизЛица.КодСтраны КАК КодСтраны,
		|	КредитныеИсторииДанныеФизЛица.ИНН КАК ИНН,
		|	КредитныеИсторииДанныеФизЛица.СНИЛС КАК СНИЛС,
		|	КредитныеИсторииДанныеФизЛица.ЭлПочта КАК ЭлПочта,
		|	КредитныеИсторииДанныеФизЛица.Дееспособность КАК Дееспособность,
		|	КредитныеИсторииДанныеФизЛица.Иное КАК Иное,
		|	КредитныеИсторииДанныеФизЛица.КодСтраныДокумента КАК КодСтраныДокумента,
		|	КредитныеИсторииДанныеФизЛица.НаименованиеИнойСтраныДокумента КАК НаименованиеИнойСтраныДокумента,
		|	КредитныеИсторииДанныеФизЛица.КодНБКИДокумента КАК КодНБКИДокумента,
		|	КредитныеИсторииДанныеФизЛица.НаименованиеИногоДокумента КАК НаименованиеИногоДокумента,
		|	КредитныеИсторииДанныеФизЛица.СерияДокумента КАК СерияДокумента,
		|	КредитныеИсторииДанныеФизЛица.НомерДокумента КАК НомерДокумента,
		|	КредитныеИсторииДанныеФизЛица.КемВыданДокумент КАК КемВыданДокумент,
		|	КредитныеИсторииДанныеФизЛица.ДатаВыдачиДокумента КАК ДатаВыдачиДокумента,
		|	КредитныеИсторииДанныеФизЛица.КодПодразделенияРФ КАК КодПодразделенияРФ,
		|	КредитныеИсторииДанныеФизЛица.ДатаОкончанияДействияДокумента КАК ДатаОкончанияДействияДокумента,
		|	КредитныеИсторииДанныеФизЛица.ОтметкаОСмерти КАК ОтметкаОСмерти,
		|	КредитныеИсторииДанныеФизЛица.ЭтоИП КАК ЭтоИП,
		|	КредитныеИсторииДанныеФизЛица.ДатаРегистрацииИП КАК ДатаРегистрацииИП,
		|	КредитныеИсторииДанныеФизЛица.ИНН_ИП КАК ИНН_ИП,
		|	КредитныеИсторииДанныеФизЛица.ДатаРегистрацииПоДокументу КАК ДатаРегистрацииПоДокументу,
		|	КредитныеИсторииДанныеФизЛица.НаименованиеРегистрирующегоОргана КАК НаименованиеРегистрирующегоОргана,
		|	КредитныеИсторииДанныеФизЛица.КодПодразделенияРегистрацииРФ КАК КодПодразделенияРегистрацииРФ,
		|	КредитныеИсторииДанныеФизЛица.СпециальныйНалоговыйРежим КАК СпециальныйНалоговыйРежим
		|ИЗ
		|	ДатаПоследнегоСобытия КАК ДатаПоследнегоСобытия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КредитныеИсторииДанныеФизЛица КАК КредитныеИсторииДанныеФизЛица
		|		ПО ДатаПоследнегоСобытия.Должник = КредитныеИсторииДанныеФизЛица.Должник
		|			И ДатаПоследнегоСобытия.ДатаСобытия = КредитныеИсторииДанныеФизЛица.ДатаСобытия";
	
	Запрос.УстановитьПараметр("ОбъектВх", ОбъектВх);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяЗапись = РегистрыСведений.КредитныеИсторииДанныеФизЛица.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
		НоваяЗапись.ДатаСобытия = ДатаСобытия;
		НоваяЗапись.Событие = Справочники.КредитныеИсторииСобытияСубъекта.НайтиПоРеквизиту("КодНБКИ", КодСобытия);
		НоваяЗапись.ДокументСобытие = ИсточникСобытия; 
		ОбработатьСобытиеПоИсточнику(НоваяЗапись, ИсточникСобытия);
		НоваяЗапись.Записать();
	КонецЦикла;
	
			
КонецПроцедуры       

Процедура ЗаписатьСобытиеЮЛ(ОбъектВх, ДатаСобытия, ИсточникСобытия, КодСобытия) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КредитныеИсторииДанныеЮрЛица.Должник КАК Должник,
		|	МАКСИМУМ(КредитныеИсторииДанныеЮрЛица.ДатаСобытия) КАК ДатаСобытия
		|ПОМЕСТИТЬ ДатаПоследнегоСобытия
		|ИЗ
		|	РегистрСведений.КредитныеИсторииДанныеЮрЛица КАК КредитныеИсторииДанныеЮрЛица
		|ГДЕ
		|	КредитныеИсторииДанныеЮрЛица.Должник = &ОбъектВх
		|
		|СГРУППИРОВАТЬ ПО
		|	КредитныеИсторииДанныеЮрЛица.Должник
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Должник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатаПоследнегоСобытия.Должник КАК Должник,
		|	ДатаПоследнегоСобытия.ДатаСобытия КАК ДатаСобытия,
		|	КредитныеИсторииДанныеЮрЛица.Событие КАК Событие,
		|	КредитныеИсторииДанныеЮрЛица.ДокументСобытие КАК ДокументСобытие,
		|	КредитныеИсторииДанныеЮрЛица.ПолноеНаименование КАК ПолноеНаименование,
		|	КредитныеИсторииДанныеЮрЛица.ИноеНаименование КАК ИноеНаименование,
		|	КредитныеИсторииДанныеЮрЛица.ОГРН КАК ОГРН,
		|	КредитныеИсторииДанныеЮрЛица.ИдентификаторLEI КАК ИдентификаторLEI,
		|	КредитныеИсторииДанныеЮрЛица.ИНН КАК ИНН,
		|	КредитныеИсторииДанныеЮрЛица.ДатаРеорганизации КАК ДатаРеорганизации,
		|	КредитныеИсторииДанныеЮрЛица.Иное КАК Иное,
		|	КредитныеИсторииДанныеЮрЛица.ЛиквидацияЮЛ КАК ЛиквидацияЮЛ,
		|	КредитныеИсторииДанныеЮрЛица.ЭлПочта КАК ЭлПочта,
		|	КредитныеИсторииДанныеЮрЛица.НаличиеПравопредшественника КАК НаличиеПравопредшественника,
		|	КредитныеИсторииДанныеЮрЛица.ПравопредшественникИзРФ КАК ПравопредшественникИзРФ,
		|	КредитныеИсторииДанныеЮрЛица.ПолноеНаименованиеПравопредшественника КАК ПолноеНаименованиеПравопредшественника,
		|	КредитныеИсторииДанныеЮрЛица.ОГРНПравопредшественника КАК ОГРНПравопредшественника
		|ИЗ
		|	ДатаПоследнегоСобытия КАК ДатаПоследнегоСобытия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КредитныеИсторииДанныеЮрЛица КАК КредитныеИсторииДанныеЮрЛица
		|		ПО ДатаПоследнегоСобытия.Должник = КредитныеИсторииДанныеЮрЛица.Должник
		|			И ДатаПоследнегоСобытия.ДатаСобытия = КредитныеИсторииДанныеЮрЛица.ДатаСобытия";
	
	Запрос.УстановитьПараметр("ОбъектВх", ОбъектВх);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяЗапись = РегистрыСведений.КредитныеИсторииДанныеЮрЛица.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
		НоваяЗапись.ДатаСобытия = ДатаСобытия;
		НоваяЗапись.Событие = Справочники.КредитныеИсторииСобытияСубъекта.НайтиПоРеквизиту("КодНБКИ", КодСобытия); 
		НоваяЗапись.ДокументСобытие = ИсточникСобытия; 
		ОбработатьСобытиеПоИсточнику(НоваяЗапись, ИсточникСобытия);
		НоваяЗапись.Записать();
	КонецЦикла;
	

		
КонецПроцедуры

Процедура ЗаписатьАдресОбъекта(МассивСтруктурАдрес, ОбъектВх, ФизЛицо, ЕстьСтроковыеАдреса) Экспорт  
	
	Если ФизЛицо = Истина Тогда 
		НоваяЗапись = РегистрыСведений.КредитныеИсторииСтруктураАдреса.СоздатьМенеджерЗаписи();
		Для каждого Элемент из МассивСтруктурАдрес Цикл
			Если Элемент.НБКИФЛ = "C8." Тогда
				НоваяЗапись.Должник = ОбъектВх;
				НоваяЗапись.ВидАдреса = Перечисления.КредитныеИсторииВидыАдресов.Регистрации;
				Если НЕ ЕстьСтроковыеАдреса Тогда
					// Отключить классификатор
					//ЗаполнитьАдресПоКлассификатору(ОбъектВх, Элемент.Значение, НоваяЗапись);
					ЗаполнитьАдресПоДополнительнымРеквизитам(ОбъектВх, МассивСтруктурАдрес, ФизЛицо, НоваяЗапись);
					НоваяЗапись.Записать();
					Прервать;
				Иначе
					ЗаполнитьАдресПоДополнительнымРеквизитам(ОбъектВх, МассивСтруктурАдрес, ФизЛицо, НоваяЗапись);
					НоваяЗапись.Записать();
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;    
	
	Если ФизЛицо = Истина Тогда
		НоваяЗапись = РегистрыСведений.КредитныеИсторииСтруктураАдреса.СоздатьМенеджерЗаписи();
		Для каждого Элемент из МассивСтруктурАдрес Цикл
			Если Элемент.НБКИФЛ = "C9." Тогда  
				НоваяЗапись.Должник = ОбъектВх;
				НоваяЗапись.ВидАдреса = Перечисления.КредитныеИсторииВидыАдресов.Фактический;
				Если НЕ ЕстьСтроковыеАдреса Тогда
					ЗаполнитьАдресПоКлассификатору(ОбъектВх,Элемент.Значение, НоваяЗапись);
					НоваяЗапись.Записать();
					Прервать;
				Иначе
					ЗаполнитьАдресПоДополнительнымРеквизитам(ОбъектВх, МассивСтруктурАдрес, ФизЛицо, НоваяЗапись); 
					НоваяЗапись.Записать();
					Прервать;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли; 
	
	
	Если ФизЛицо = Ложь Тогда
		НоваяЗапись = Регистрысведений.КредитныеИсторииСтруктураАдреса.СоздатьМенеджерЗаписи();  
		НоваяЗапись.Должник = ОбъектВх;
		НоваяЗапись.ВидАдреса = Перечисления.КредитныеИсторииВидыАдресов.Юридический;
		Для каждого Элемент из МассивСтруктурАдрес Цикл
			Если Элемент.НБКИЮЛ = "B2." Тогда
				Если Элемент.ЗаполнятьПоУмолчанию Тогда
					ЗаполнитьАдресПоКлассификатору(ОбъектВх, Элемент.Значение, НоваяЗапись);
					НоваяЗапись.Записать();
					Возврат;
				Иначе
					ЗаполнитьАдресПоДополнительнымРеквизитам(ОбъектВх, МассивСтруктурАдрес, ФизЛицо, НоваяЗапись);
					НоваяЗапись.Записать();
					Возврат;
				КонецЕсли;
			Конецесли;				
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры    

Процедура ЗаполнитьАдресПоДополнительнымРеквизитам(ОбъектВх, МассивСтруктурАдрес, ФизЛицо, ЗаписьРегистраСведений) Экспорт
	
	Если ЗаписьРегистраСведений.ВидАдреса = Перечисления.КредитныеИсторииВидыАдресов.Регистрации Тогда  
		ЭтоРегистрация = Истина;
	Иначе
		ЭтоРегистрация = Ложь; 
	КонецЕсли;	
	
	
	Если ФизЛицо = Истина Тогда
		ЦифраБлока = "9";
		Если ЭтоРегистрация Тогда 
			ЦифраБлока = "8";
		КонецЕсли;	
		Для Каждого структура Из МассивСтруктурАдрес Цикл   
			
			Если Структура.НБКИФЛ = "C" + ЦифраБлока + ".2" Тогда 	
				ЗаписьРегистраСведений.Индекс = Структура.Значение;
				Продолжить;  
			КонецЕсли;    
			
			Если Структура.НБКИФЛ = "C" + ЦифраБлока + ".3.4" Тогда
				струкСтрана = ФЗ_230.ВычислитьЗначениеСтраныОКСМ(Структура.Значение);
				ЗаписьРегистраСведений.КодСтраныОКСМ = струкСтрана.ОКСМ;
				ЗаписьРегистраСведений.НаименованиеИнойСтраны = струкСтрана.Наименование;
				Продолжить;
			КонецЕсли;
			
			Если Структура.НБКИФЛ = "C" + ЦифраБлока + ".5" Тогда
				ЗаписьРегистраСведений.НомерАдресаФИАС = Структура.Значение;
				Продолжить;
			КонецЕсли;  
			
			Если Структура.НБКИФЛ = "C" + ЦифраБлока + ".6.7" Тогда 
				ОКАТО = ?(ЗначениеЗаполнено(ЗаписьРегистраСведений.Индекс),ФЗ_230.ПолучитьОКАТОПоИндексуФИАС(ЗаписьРегистраСведений.Индекс),"99 999 999 999");
				ЗаписьРегистраСведений.НаселенныйПунктОКАТО = ОКАТО;
				ЗаписьРегистраСведений.НаселенныйПунктНазвание = Структура.Значение;
				Продолжить;
			КонецЕсли; 
			
			Если Структура.НБКИФЛ = "C" + ЦифраБлока + ".8" Тогда
				ЗаписьРегистраСведений.Улица = Структура.Значение;
				Продолжить;
			КонецЕсли;  
			
			Если Структура.НБКИФЛ = "C" + ЦифраБлока + ".9" Тогда
				ЗаписьРегистраСведений.Дом = Структура.Значение;
				Продолжить;
			КонецЕсли;  
			
			Если Структура.НБКИФЛ = "C" + ЦифраБлока + ".10" Тогда
				ЗаписьРегистраСведений.Владение = Структура.Значение;
				Продолжить;
			КонецЕсли; 
			
			Если Структура.НБКИФЛ = "C" + ЦифраБлока + ".11" Тогда
				ЗаписьРегистраСведений.Корпус = Структура.Значение;
				Продолжить;
			КонецЕсли; 
			
			Если Структура.НБКИФЛ = "C" + ЦифраБлока + ".12" Тогда
				ЗаписьРегистраСведений.Строение = Структура.Значение;
				Продолжить;
			КонецЕсли; 
			
			Если Структура.НБКИФЛ = "C" + ЦифраБлока+ ".13" Тогда
				ЗаписьРегистраСведений.КвартираПомещениеОфис = Структура.Значение; 
				Продолжить;
			КонецЕсли;  
		КонецЦикла;	
	Иначе        
		Для Каждого структура Из МассивСтруктурАдрес Цикл
			Если Структура.НБКИЮЛ = "B2.1.2" Тогда
				струкСтрана = ФЗ_230.ВычислитьЗначениеСтраныОКСМ(Структура.Значение);
				ЗаписьРегистраСведений.КодСтраныОКСМ = струкСтрана.ОКСМ;
				ЗаписьРегистраСведений.НаименованиеИнойСтраны = струкСтрана.Наименование;
				Продолжить;
			КонецЕсли;        
			
			Если Структура.НБКИЮЛ = "B2.3" Тогда
				ЗаписьРегистраСведений.НомерАдресаФИАС = Структура.Значение; 
				Продолжить;
			КонецЕсли;   
			
			Если Структура.НБКИЮЛ = "B2.4.5" Тогда
				ОКАТО = ?(ЗначениеЗаполнено(ЗаписьРегистраСведений.Индекс),ФЗ_230.ПолучитьОКАТОПоИндексуФИАС(ЗаписьРегистраСведений.Индекс),"99 999 999 999");
				ЗаписьРегистраСведений.НаселенныйПунктОКАТО = ОКАТО;
				ЗаписьРегистраСведений.НаселенныйПунктНазвание = Структура.Значение;
				Продолжить;
			КонецЕсли;   
			
			Если Структура.НБКИЮЛ = "B2.6" Тогда
				ЗаписьРегистраСведений.Улица = Структура.Значение;   
				Продолжить;
			КонецЕсли;   
			
			Если Структура.НБКИЮЛ = "B2.7" Тогда
				ЗаписьРегистраСведений.Дом = Структура.Значение;   
				Продолжить;
			КонецЕсли;   
			
			Если Структура.НБКИЮЛ = "B2.8" Тогда
				ЗаписьРегистраСведений.Владение = Структура.Значение;   
				Продолжить;
			КонецЕсли;   
			
			Если Структура.НБКИЮЛ = "B2.9" Тогда
				ЗаписьРегистраСведений.Корпус = Структура.Значение;   
				Продолжить;
			КонецЕсли;   
			
			Если Структура.НБКИЮЛ = "B2.10" Тогда
				ЗаписьРегистраСведений.Строение = Структура.Значение;   
				Продолжить;
			КонецЕсли; 
			
			Если Структура.НБКИЮЛ = "B2.11" Тогда
				ЗаписьРегистраСведений.КвартираПомещениеОфис = Структура.Значение;   
				Продолжить;
			КонецЕсли;  
			
		КонецЦикла;	
		
	КонецЕсли;
	
	
КонецПроцедуры  

Процедура ЗаполнитьАдресПоКлассификатору(ОбъектВх, ЗначениеКлассификатор, ЗаписьРегистраСведений) Экспорт
	
	Если СтрНайти(ЗначениеКлассификатор, "КонтактнаяИнформация") > 0 Тогда
		ЗаписьРегистраСведений.Индекс = бит_Адресныйклассификатор.ПолучитьЧастьАдресаИзФИАС(ЗначениеКлассификатор,"Индекс");
		ЗаписьРегистраСведений.КодСтраныОКСМ = "643";
		ЗаписьРегистраСведений.НаименованиеИнойСтраны = "РОССИЯ";
		ЗаписьРегистраСведений.НомерАдресаФИАС = Строка(АдресныйКлассификатор.ИдентификаторыАдреса(ЗначениеКлассификатор).ИдентификаторАдресногоОбъекта);
		ЗаписьРегистраСведений.НаселенныйПунктОКАТО = ФЗ_230.ПолучитьОКАТОПоИндексуФИАС(ЗаписьРегистраСведений.Индекс);   
		НасПункт = бит_Адресныйклассификатор.ПолучитьЧастьАдресаИзФИАС(ЗначениеКлассификатор,"НаселенныйПункт");
		ЗаписьРегистраСведений.НаселенныйПунктНазвание =?(ЗначениеЗаполнено(НасПункт),НасПункт,бит_Адресныйклассификатор.ПолучитьЧастьАдресаИзФИАС(ЗначениеКлассификатор,"Город")); 
		ЗаписьРегистраСведений.Улица = бит_Адресныйклассификатор.ПолучитьЧастьАдресаИзФИАС(ЗначениеКлассификатор,"Улица");  
		ТипДома = бит_Адресныйклассификатор.ПолучитьЧастьАдресаИзФИАС(ЗначениеКлассификатор,"ТипДома");
		НомерДома = бит_Адресныйклассификатор.ПолучитьЧастьАдресаИзФИАС(ЗначениеКлассификатор,"Дом");
		Если ТипДома <> "Дом" Тогда
			ЗаписьРегистраСведений.Владение = НомерДома;  
		Иначе	
			ЗаписьРегистраСведений.Дом = НомерДома;
		КонецЕсли;	
		
		ТипКорпуса = бит_Адресныйклассификатор.ПолучитьЧастьАдресаИзФИАС(ЗначениеКлассификатор,"ТипКорпуса");
		НомерКорпуса = бит_Адресныйклассификатор.ПолучитьЧастьАдресаИзФИАС(ЗначениеКлассификатор,"Корпус");
		Если ТипДома <> "Корпус" Тогда
			ЗаписьРегистраСведений.Строение = НомерКорпуса;
		Иначе	
			ЗаписьРегистраСведений.Корпус = НомерКорпуса;
		КонецЕсли;	 
   		ЗаписьРегистраСведений.КвартираПомещениеОфис = бит_Адресныйклассификатор.ПолучитьЧастьАдресаИзФИАС(ЗначениеКлассификатор,"Квартира");
		
	Иначе  
		ЗаписьРегистраСведений.Индекс = бит_Адресныйклассификатор.ПолучитьЧастьАдресаИзКЛАДР(ЗначениеКлассификатор,"Индекс");
		ЗаписьРегистраСведений.КодСтраныОКСМ = "643";
		ЗаписьРегистраСведений.НаименованиеИнойСтраны = "РОССИЯ";
		ЗаписьРегистраСведений.НаселенныйПунктОКАТО = ФЗ_230.ПолучитьОКАТОПоИндексуФИАС(ЗаписьРегистраСведений.Индекс);   
		НасПункт = бит_Адресныйклассификатор.ПолучитьЧастьАдресаИзКЛАДР(ЗначениеКлассификатор,"НаселенныйПункт");
		ЗаписьРегистраСведений.НаселенныйПунктНазвание =?(ЗначениеЗаполнено(НасПункт),НасПункт,бит_Адресныйклассификатор.ПолучитьЧастьАдресаИзКЛАДР(ЗначениеКлассификатор,"Город")); 
		ЗаписьРегистраСведений.Улица = бит_Адресныйклассификатор.ПолучитьЧастьАдресаИзКЛАДР(ЗначениеКлассификатор,"Улица");  
		ТипДома = бит_Адресныйклассификатор.ПолучитьЧастьАдресаИзКЛАДР(ЗначениеКлассификатор,"ТипДома");
		НомерДома = бит_Адресныйклассификатор.ПолучитьЧастьАдресаИзКЛАДР(ЗначениеКлассификатор,"Дом");
		
		Если ТипДома <> "дом" Тогда
			ЗаписьРегистраСведений.Владение = НомерДома;  
		Иначе	
			ЗаписьРегистраСведений.Дом = НомерДома;
		КонецЕсли;	 
		
		ТипКорпуса = бит_Адресныйклассификатор.ПолучитьЧастьАдресаИзКЛАДР(ЗначениеКлассификатор,"ТипКорпуса");   
		НомерКорпуса = бит_Адресныйклассификатор.ПолучитьЧастьАдресаИзКЛАДР(ЗначениеКлассификатор,"Корпус"); 
		
		Если ТипКорпуса <> "корпус" Тогда
			ЗаписьРегистраСведений.Строение = НомерКорпуса;
		Иначе
			ЗаписьРегистраСведений.Корпус = НомерКорпуса;
		КонецЕсли;
	
		ЗаписьРегистраСведений.КвартираПомещениеОфис = бит_Адресныйклассификатор.ПолучитьЧастьАдресаИзКЛАДР(ЗначениеКлассификатор,"Квартира");

	КонецЕсли;	
	
	
КонецПроцедуры
 
Процедура ОбработатьСобытиеПоИсточнику(Запись, ИсточникСобытия) Экспорт
	ТипДокументаСобытия = ТипЗнч(ИсточникСобытия);
	
	Если ТипДокументаСобытия = Тип("ДокументСсылка.ДоговорМикрозайма") Тогда
		Запись.ДоговорМКЗ = ИсточникСобытия;
		Запись.ДатаНачалаСделки = ИсточникСобытия.ДатаДоговора;
		Запись.ДатаОкончанияСделки = ИсточникСобытия.ДатаПогашения; 
		Запись.ДатаПередачиФинансирования = ИсточникСобытия.ДатаВыдачиЗайма;
		Запись.СуммаСделки = ИсточникСобытия.СуммаВыданногоЗайма; 
		Если Не ЗначениеЗаполнено(Запись.UID) И ЗначениеЗаполнено(ИсточникСобытия.UIDНБКИ) Тогда 
			Запись.UID = ИсточникСобытия.UIDНБКИ;
		КонецЕсли;
		
		ВидПогашения = ИсточникСобытия.СпособПогашения;
		ТаблицаГрафика = РасчетЗадолженностиМФО.ПолучитьСрез(Запись.Сделка);
		Если Не ЗначениеЗаполнено(ТаблицаГрафика) Тогда
		
			Возврат;
		
		КонецЕсли;
		
		СтрокаДниПросрочки = ТаблицаГрафика.Найти(НачалоДня(ТекущаяДатаСеанса()), "Дата");
		Если ЗначениеЗаполнено(СтрокаДниПросрочки) Тогда
			Запись.Просрочка90плюс = ?(СтрокаДниПросрочки.ДниПросрочки > 90, "1", "0");
		КонецЕсли;
		
		Если ВидПогашения = Перечисления.СпособыПогашенияЗаймов.НаДатуОкончанияДоговора Тогда
			Для каждого стр из ТаблицаГрафика Цикл
				Если стр.ФлагНаличияПросрочки И стр.ПлановыйГрафик_СуммаПлатежа > 0 Тогда
					Запись.ДатаРасчетаПросроченнойЗадолженности = стр.Дата;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для каждого стр из ТаблицаГрафика Цикл
				Если стр.ФлагНаличияПросрочки И стр.ПлановыйГрафик_СуммаПлатежа > 0 И НачалоМесяца(стр.Дата) = НачалоМесяца(ТекущаяДатаСеанса()) Тогда
					Запись.ДатаРасчетаПросроченнойЗадолженности = стр.Дата;
					Прервать;
				КонецЕсли;
			КонецЦикла;			
		КонецЕсли;  
		
		Запись.ВидЗаимодавца = ?(ЗначениеЗаполнено(ИсточникСобытия.ВидЗаимодавца), ИсточникСобытия.ВидЗаимодавца, 17); 
		Запись.ПризнакКредитнойЛинии = ?(ЗначениеЗаполнено(ИсточникСобытия.КредитнаяЛиния), "1", "0");
		Запись.КодНБКИТипКредититнойЛинии = ?(ЗначениеЗаполнено(ИсточникСобытия.КредитнаяЛиния), Строка(ИсточникСобытия.КредитнаяЛиния), "");
		Запись.ПризнакПлавающейПроцентнойСтавки = ?(ИсточникСобытия.ВидПроцентнойСтавки = Перечисления.ВидыПроцентнойСтавки.ФиксированнаяПроцентнаяСтавка, "0", "1");
		Запись.ЦельКредита = ИсточникСобытия.ЦельКредита.КодНБКИ;  
		Запись.ДатаВозникновенияОбязательстваСубъекта = ИсточникСобытия.ДатаПогашения;
		Запись.ПроцентнаяСтавкаПоУсловиям = ИсточникСобытия.ПроцентнаяСтавка;
	КонецЕсли;
	
	Если ТипДокументаСобытия = Тип("ДокументСсылка.РеструктуризацияМикрозайма") Тогда
		Запись.РеструктуризацияМКЗ = ИсточникСобытия; 
		Запись.ДатаНачалаСделки = ИсточникСобытия.ДатаДоговора;
		Запись.ДатаОкончанияСделки = ИсточникСобытия.ДатаПогашения;  
		Запись.ДатаПередачиФинансирования = ИсточникСобытия.ДатаВыдачиЗайма;
		Запись.СуммаСделки = ИсточникСобытия.СуммаВыданногоЗайма; 
		Если Не ЗначениеЗаполнено(Запись.UID) Тогда  
			Попытка
				Запись.UID = ИсточникСобытия.ТекущийДоговор.UIDНБКИ;
			Исключение  
				Запись.UID = "Не удалось прочитать УИД действующего договора!";
			КонецПопытки;	
		КонецЕсли; 
		
		ВидПогашения = ИсточникСобытия.СпособПогашения;
		ТаблицаГрафика = РасчетЗадолженностиМФО.ПолучитьСрез(Запись.Сделка); 
		
		СтрокаДниПросрочки = ТаблицаГрафика.Найти(НачалоДня(ТекущаяДатаСеанса()), "Дата");
		Если ЗначениеЗаполнено(СтрокаДниПросрочки) Тогда	
			Запись.Просрочка90плюс = ?(СтрокаДниПросрочки.ДниПросрочки > 90, "1", "0"); 
		КонецЕсли;	
		
		Если ВидПогашения = Перечисления.СпособыПогашенияЗаймов.НаДатуОкончанияДоговора Тогда
			Для каждого стр из ТаблицаГрафика Цикл
				Если стр.ФлагНаличияПросрочки И стр.ПлановыйГрафик_СуммаПлатежа > 0 Тогда
					Запись.ДатаРасчетаПросроченнойЗадолженности = стр.Дата;
					Прервать;
				КонецЕсли;
			КонецЦикла;	
		Иначе
			Для каждого стр из ТаблицаГрафика Цикл
				Если стр.ФлагНаличияПросрочки И стр.ПлановыйГрафик_СуммаПлатежа > 0 И НачалоМесяца(стр.Дата) = НачалоМесяца(ТекущаяДатаСеанса()) Тогда
					Запись.ДатаРасчетаПросроченнойЗадолженности = стр.Дата;
					Прервать;
				КонецЕсли;
			КонецЦикла;			
		КонецЕсли;
		
		Запись.ВидЗаимодавца = ?(ЗначениеЗаполнено(ИсточникСобытия.ВидЗаимодавца), ИсточникСобытия.ВидЗаимодавца, 17); 
		Запись.ПризнакКредитнойЛинии = ?(ЗначениеЗаполнено(ИсточникСобытия.ТекущийДоговор.КредитнаяЛиния), "1", "0");
		Запись.КодНБКИТипКредититнойЛинии = ?(ЗначениеЗаполнено(ИсточникСобытия.ТекущийДоговор.КредитнаяЛиния), Строка(ИсточникСобытия.ТекущийДоговор.КредитнаяЛиния), "");
        Запись.ПризнакПлавающейПроцентнойСтавки = ?(ИсточникСобытия.ВидПроцентнойСтавки = Перечисления.ВидыПроцентнойСтавки.ФиксированнаяПроцентнаяСтавка, "0", "1");
		Запись.ЦельКредита = ИсточникСобытия.ТекущийДоговор.ЦельКредита.КодНБКИ;
		Запись.ДатаВозникновенияОбязательстваСубъекта = ИсточникСобытия.ДатаПогашения; 
		Запись.ПроцентнаяСтавкаПоУсловиям = ИсточникСобытия.ПроцентнаяСтавка;

	КонецЕсли;
	
	Если ТипДокументаСобытия = Тип("ДокументСсылка.Обеспечительства") Тогда
		Запись.Обеспечительство = ИсточникСобытия;
	КонецЕсли;   
	
	Если ТипДокументаСобытия = Тип("ДокументСсылка.СудебноеДело") Тогда
		Запись.СудебноеДело = ИсточникСобытия;
		Если ЗначениеЗаполнено(ИсточникСобытия.ДатаВступленияВЗаконнуюСилу) 
			и (ИсточникСобытия.Решение = Перечисления.СтатусыСудебногоДела.Удовлетворено ИЛИ ИсточникСобытия.Решение = Перечисления.СтатусыСудебногоДела.УдовлетвореноЧастично) Тогда 
			Запись.ДатаРасчетаПросроченнойЗадолженности = ИсточникСобытия.ДатаВступленияВЗаконнуюСилу; 
		Иначе
			Запись.ДатаРасчетаПросроченнойЗадолженности = ИсточникСобытия.ДатаИска - 24*60*60;
		КонецЕсли;	
	КонецЕсли;
	
	Если ТипДокументаСобытия = Тип("ДокументСсылка.СведенияОбИзмененииДоговора") Тогда
		Запись.Прощение = ИсточникСобытия; 
		Если ИсточникСобытия.ПолноеПрощение Тогда
			Запись.ПрекращениеОбязательства = Строка(ИсточникСобытия.ПричиныПрекращенияОбязательства);
		КонецЕсли;		
	КонецЕсли;  
	 
	
	Если ТипДокументаСобытия = Тип("СправочникСсылка.ДелоОБанкротстве") Тогда
		Запись.Банкротство = ИсточникСобытия;
	КонецЕсли;   
	
	Если ТипДокументаСобытия = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда
		// Найти по поручителям или контрагентам!! 
		Если Не ЗначениеЗаполнено(Запись.СудебноеДело) Тогда
			СчетчикДолжников = 0;
			Для каждого стр из ИсточникСобытия.Контрагенты Цикл
				Если стр.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Должник Тогда
					СчетчикДолжников = СчетчикДолжников + 1;
				КонецЕсли;	
			КонецЦикла; 
			
			Параметр = Строка(СчетчикДолжников);
		Иначе  
			Параметр = Строка(Запись.СудебноеДело.Ответчики.Количество()); 
		КонецЕсли;   
		Запись.СолидарныйДоговор = Параметр; 
		Запись.БезнадежныйДолг = ?(КредитныеИстории.РасчетИсковойДавности(Запись.ДатаСобытия, ,Запись.ДатаОкончанияСделки), "1", "0");
	КонецЕсли;
	
	Если ТипДокументаСобытия = Тип("СправочникСсылка.ДелоОНедееспособностиСубъекта") Тогда
		Запись.Дееспособность = ИсточникСобытия;
	КонецЕсли; 
	
	Если ТипДокументаСобытия = Тип("СправочникСсылка.НеденежныеОбязательства") Тогда
		Запись.НеденежноеОбязательство = ИсточникСобытия; 
		Запись.ДатаНачалаСделки = ИсточникСобытия.ДатаОдобренияИсточником;
		Запись.ДатаОкончанияСделки = ИсточникСобытия.ДатаПрекращенияДоговора; 
		Запись.ДатаПередачиФинансирования = ИсточникСобытия.ДатаПередачиИмуществаСубъекту;
		
		Если Не ЗначениеЗаполнено(Запись.UID) И ЗначениеЗаполнено(ИсточникСобытия.UIDНБКИ) Тогда 
			Запись.UID = ИсточникСобытия.UIDНБКИ;
		КонецЕсли;   
		
		Запись.ВидЗаимодавца = ?(ЗначениеЗаполнено(ИсточникСобытия.ВидЗаимодавца), ИсточникСобытия.ВидЗаимодавца, 17); 
		Запись.ПризнакКредитнойЛинии = "0";
        Запись.ПризнакПлавающейПроцентнойСтавки = "0";
		Запись.ЦельКредита = ИсточникСобытия.ЦельКредита.КодНБКИ;
		Запись.ДатаВозникновенияОбязательстваСубъекта = ИсточникСобытия.ДатаВозникновенияОбязательства; 
		Запись.ЧастичноеПравопреемство = ?(ИсточникСобытия.ЧастичноДругойКредитор, "1", "0");


	КонецЕсли;   
	
	Если ТипДокументаСобытия = Тип("ДокументСсылка.ПродажаОбъектовУчета") Тогда  
		Запись.Продан = ?(ИсточникСобытия.Цессия, "1", "0"); 
		Запись.ЧастичнаяПродажа = ?(ИсточникСобытия.ЭтоЧастичнаяПередачаПрав, "1", "0");
	КонецЕсли;  
	
	Если ТипДокументаСобытия = Тип("ДокументСсылка.ПоступлениеПлатежа") Тогда
		Запись.ДатаРасчетаСрочнойЗадолженности = ?(ИсточникСобытия.ДатаПлатежа <= Запись.ДатаОкончанияСделки, ИсточникСобытия.ДатаПлатежа ,Дата(1,1,1)); 
		Запись.ДатаРасчетаПросроченнойЗадолженности = ?(ИсточникСобытия.ДатаПлатежа > Запись.ДатаОкончанияСделки, ИсточникСобытия.ДатаПлатежа ,Дата(1,1,1));
		Запись.БезнадежныйДолг = ?(КредитныеИстории.РасчетИсковойДавности(Запись.ДатаСобытия, ИсточникСобытия.ДатаПлатежа), "1", "0"); 
	КонецЕсли; 
	
	Если Запись.Событие.КодНБКИ = "2.5" Тогда
		Запись.БезнадежныйДолг = ?(КредитныеИстории.РасчетИсковойДавности( Запись.ДатаСобытия, ,Запись.ДатаОкончанияСделки), "1", "0"); 
		Запись.ДатаСобытия = Запись.ДатаСобытия + 1;
	КонецЕсли;  
	
	Если ТипДокументаСобытия = Тип("ДокументСсылка.ЗагрузкаИсторииПлатежей") ИЛИ ТипДокументаСобытия = Тип("ДокументСсылка.ПоступлениеПлатежей") Тогда
		ТабПлатежи = ИсточникСобытия.Объекты;
		СтрПлатеж = ТабПлатежи.Найти(Запись.Сделка, "Объект");
		Запись.ДатаРасчетаСрочнойЗадолженности = ?(СтрПлатеж.ДатаПлатежа <= Запись.ДатаОкончанияСделки, СтрПлатеж.ДатаПлатежа, Дата(1,1,1)); 
		Запись.ДатаРасчетаПросроченнойЗадолженности = ?(СтрПлатеж.ДатаПлатежа > Запись.ДатаОкончанияСделки, СтрПлатеж.ДатаПлатежа, Дата(1,1,1));
	КонецЕсли; 
	
	Если ТипДокументаСобытия <> Тип("ДокументСсылка.ДоговорМикрозайма") И ТипДокументаСобытия <> Тип("ДокументСсылка.РеструктуризацияМикрозайма")  Тогда
		ДниПросрочки = Окр((НачалоДня(Запись.ДатаСобытия) - НачалоДня(Запись.ДатаОкончанияСделки)) / 86400);
		Запись.Просрочка90плюс = ?(ДниПросрочки > 90, "1", "0"); 
	КонецЕсли;
	
	Если ТипДокументаСобытия = Тип("СправочникСсылка.ИсполнительныеДокументы") Тогда
		Запись.СудебноеДело = ИсточникСобытия.СудебноеРешение;
		Запись.ДатаРасчетаПросроченнойЗадолженности = ИсточникСобытия.ДатаИД; 
	КонецЕсли;
	
КонецПроцедуры     

Процедура ЗаполнитьПризнакиПредопределенныхТиповКонтрагентов() Экспорт  
	НЗ = РегистрыСведений.ТипДолжникаПризнак.СоздатьМенеджерЗаписи();
	НЗ.ТипКонтрагента = Справочники.ЮрФизЛицо.ФизЛицо;
	НЗ.ФизическоеЛицо = Истина;
	НЗ.Записать();  
	
	НЗ = РегистрыСведений.ТипДолжникаПризнак.СоздатьМенеджерЗаписи();
	НЗ.ТипКонтрагента = Справочники.ЮрФизЛицо.ЮрЛицо;
	НЗ.ЮридическоеЛицо = Истина;
	НЗ.Записать();
КонецПроцедуры	

Процедура ЗаписатьПлатежиПослеНоября(Сделка) Экспорт
	
	ДатаРУТДФ = Дата("20221101");
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеПлатежейОбъекты.Ссылка КАК Ссылка,
		|	ПоступлениеПлатежейОбъекты.ДатаПлатежа КАК ДатаПлатежа
		|ИЗ
		|	Документ.ПоступлениеПлатежей.Объекты КАК ПоступлениеПлатежейОбъекты
		|ГДЕ
		|	ПоступлениеПлатежейОбъекты.Объект = &Объект
		|	И ПоступлениеПлатежейОбъекты.ДатаПлатежа >= &ДатаРУТДФ
		|	И НЕ ПоступлениеПлатежейОбъекты.Ссылка.ПометкаУдаления
		|	И ПоступлениеПлатежейОбъекты.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗагрузкаИсторииПлатежейОбъекты.Ссылка,
		|	ЗагрузкаИсторииПлатежейОбъекты.ДатаПлатежа
		|ИЗ
		|	Документ.ЗагрузкаИсторииПлатежей.Объекты КАК ЗагрузкаИсторииПлатежейОбъекты
		|ГДЕ
		|	ЗагрузкаИсторииПлатежейОбъекты.Объект = &Объект
		|	И ЗагрузкаИсторииПлатежейОбъекты.ДатаПлатежа >= &ДатаРУТДФ
		|	И ЗагрузкаИсторииПлатежейОбъекты.Ссылка.Проведен
		|	И НЕ ЗагрузкаИсторииПлатежейОбъекты.Ссылка.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеПлатежа.Ссылка,
		|	ПоступлениеПлатежа.ДатаПлатежа
		|ИЗ
		|	Документ.ПоступлениеПлатежа КАК ПоступлениеПлатежа
		|ГДЕ
		|	ПоступлениеПлатежа.Займ = &Объект
		|	И ПоступлениеПлатежа.ДатаПлатежа >= &ДатаРУТДФ
		|	И НЕ ПоступлениеПлатежа.ПометкаУдаления
		|	И ПоступлениеПлатежа.Проведен";
	
	Запрос.УстановитьПараметр("ДатаРУТДФ", ДатаРУТДФ);
	Запрос.УстановитьПараметр("Объект", Сделка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл   
		 КредитныеИстории.ЗаписатьСобытиеСделки(Сделка, ВыборкаДетальныеЗаписи.ДатаПлатежа, ВыборкаДетальныеЗаписи.Ссылка, "2.3");
	КонецЦикла;
КонецПроцедуры	  


Процедура ЗаполнитьПервичныеПараметрыДоговоровИСубъектов(Параметры, АдресРезультата) Экспорт   
	
	//ПараметрыЗапуска.Вставить("ИсточникСобытия", Объект.Ссылка);
	//ПараметрыЗапуска.Вставить("ДатаСобытия", ДатаСтарта);

	
	ИсточникСобытия = Параметры.ИсточникСобытия;  
	Если ЗначениеЗаполнено(ИсточникСобытия.РеквизитДатаПервичногоЗаполнения) Тогда
		КодРеквизита = ИсточникСобытия.РеквизитДатаПервичногоЗаполнения.Код; 
	Иначе
		КодРеквизита = "";
	КонецЕсли;	
	ДатаСобытия = Параметры.ДатаСобытия; 
	ПрогрессВыполнения = 1; 
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КредитныеИсторииДанныеСделки.Сделка КАК Сделка,
		|	КредитныеИсторииДанныеСделки.Событие КАК Событие
		|ПОМЕСТИТЬ ЕстьСобытиеПервичногоЗаполнения
		|ИЗ
		|	РегистрСведений.КредитныеИсторииДанныеСделки КАК КредитныеИсторииДанныеСделки
		|ГДЕ
		|	КредитныеИсторииДанныеСделки.Событие В (&Событие)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ОбъектыВРаботеОстатки.Объект КАК Справочник.ДолговыеОбязательства) КАК Обязательство,
		|	ОбъектыВРаботеОстатки.Объект.Должник КАК Должник
		|ПОМЕСТИТЬ ВРаботе
		|ИЗ
		|	РегистрНакопления.ОбъектыВРаботе.Остатки(
		|			,
		|			НЕ Объект В
		|						(ВЫБРАТЬ
		|							ЕстьСобытиеПервичногоЗаполнения.Сделка КАК Сделка
		|						ИЗ
		|							ЕстьСобытиеПервичногоЗаполнения КАК ЕстьСобытиеПервичногоЗаполнения)
		|				И НЕ Объект ЕСТЬ NULL) КАК ОбъектыВРаботеОстатки
		|ГДЕ
		|	ОбъектыВРаботеОстатки.Объект ССЫЛКА Справочник.ДолговыеОбязательства
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсполнительныеДокументы.Владелец КАК Владелец,
		|	МАКСИМУМ(ИсполнительныеДокументы.Ссылка) КАК Ссылка
		|ПОМЕСТИТЬ ИсполДоки
		|ИЗ
		|	Справочник.ИсполнительныеДокументы КАК ИсполнительныеДокументы
		|ГДЕ
		|	НЕ ИсполнительныеДокументы.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсполнительныеДокументы.Владелец
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Владелец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВРаботе.Обязательство КАК Обязательство,
		|	ВРаботе.Должник КАК Должник,
		|	НеденежныеОбязательства.Ссылка КАК НеденежноеОбязательство,
		|	ДелоОНедееспособностиСубъекта.Ссылка КАК Дееспособность,
		|	ДелоОБанкротстве.Ссылка КАК Банкротство,
		|	ДоговорМикрозайма.Ссылка КАК ДоговорМКЗ,
		|	РеструктуризацияМикрозайма.Ссылка КАК РеструктуризацияМКЗ,
		|	СудебноеДело.Ссылка КАК СудебноеДело,
		|	Обеспечительства.Ссылка КАК Обеспечительство,
		|	СведенияОбИзмененииДоговора.Ссылка КАК СведенияОбИзмененииДоговора,
		|	ИсполДоки.Ссылка КАК ИсполДок
		|ИЗ
		|	ВРаботе КАК ВРаботе
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НеденежныеОбязательства КАК НеденежныеОбязательства
		|		ПО ВРаботе.Обязательство = НеденежныеОбязательства.ОбъектОбязательства
		|			И (НеденежныеОбязательства.ПометкаУдаления = ЛОЖЬ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДелоОНедееспособностиСубъекта КАК ДелоОНедееспособностиСубъекта
		|		ПО ВРаботе.Должник = ДелоОНедееспособностиСубъекта.Владелец
		|			И (ДелоОНедееспособностиСубъекта.ПометкаУдаления = ЛОЖЬ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДелоОБанкротстве КАК ДелоОБанкротстве
		|		ПО ВРаботе.Должник = ДелоОБанкротстве.Контрагент
		|			И (ДелоОБанкротстве.ПометкаУдаления = ЛОЖЬ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорМикрозайма КАК ДоговорМикрозайма
		|		ПО ВРаботе.Обязательство = ДоговорМикрозайма.Займ
		|			И (ДоговорМикрозайма.ПометкаУдаления = ЛОЖЬ)
		|			И (ДоговорМикрозайма.Проведен)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеструктуризацияМикрозайма КАК РеструктуризацияМикрозайма
		|		ПО ВРаботе.Обязательство = РеструктуризацияМикрозайма.Займ
		|			И (РеструктуризацияМикрозайма.ПометкаУдаления = ЛОЖЬ)
		|			И (РеструктуризацияМикрозайма.Проведен)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СудебноеДело КАК СудебноеДело
		|		ПО ВРаботе.Обязательство = СудебноеДело.Займ
		|			И (СудебноеДело.ПометкаУдаления = ЛОЖЬ)
		|			И (СудебноеДело.Проведен)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Обеспечительства КАК Обеспечительства
		|		ПО ВРаботе.Обязательство = Обеспечительства.ОбъектОбеспечительства
		|			И (Обеспечительства.ПометкаУдаления = ЛОЖЬ)
		|			И (Обеспечительства.Проведен)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОбИзмененииДоговора КАК СведенияОбИзмененииДоговора
		|		ПО ВРаботе.Обязательство = СведенияОбИзмененииДоговора.ОбъектУчета
		|			И (СведенияОбИзмененииДоговора.ПометкаУдаления = ЛОЖЬ)
		|			И (СведенияОбИзмененииДоговора.Проведен)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИсполДоки КАК ИсполДоки
		|		ПО ВРаботе.Обязательство = ИсполДоки.Владелец";
	
	мСобытия = Новый Массив;
	мСобытия.Добавить(Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", "0.0")); 
	мСобытия.Добавить(Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", "2.11.2"));	
	
	Запрос.УстановитьПараметр("Событие", мСобытия);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВсегоОбъектов = ВыборкаДетальныеЗаписи.Количество();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДатаИзРеквизита = "";
		НоваяЗапись = РегистрыСведений.КредитныеИсторииДанныеСделки.СоздатьМенеджерЗаписи();
		Если НачалоДня(ДатаСобытия) = Дата("19950126") Тогда
			ДатаИзРеквизита = ОбъектыСервер.ПолучитьЗначениеСвойства(ВыборкаДетальныеЗаписи.Обязательство, КодРеквизита);
			НоваяЗапись.ДатаСобытия = ?(ЗначениеЗаполнено(ДатаИзРеквизита), ДатаИзРеквизита, ТекущаяДатаСеанса());
		Иначе  
			НоваяЗапись.ДатаСобытия = ДатаСобытия;
		КонецЕсли;
		НоваяЗапись.Сделка = ВыборкаДетальныеЗаписи.Обязательство;
		НоваяЗапись.Событие = ВыбратьПервоеСобытиеСделки(ВыборкаДетальныеЗаписи.Обязательство, ИсточникСобытия);
		НоваяЗапись.ДокументСобытие = ИсточникСобытия;
		Настройка = ИсточникСобытия;
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
		ТЗ = Настройка.Сделка.Выгрузить();
		Строки = УдалитьОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗ); 
		Результат = Новый Массив();
		Для Каждого Элемент Из Строки Цикл
			Результат.Добавить(Новый Структура("ИмяТаблицы, Поле, НБКИФЛ, НБКИЮЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение, Функция, СтрокаДляПолученияЗначения, КодДопСвойства,
			| ОбъектДопСвойства, СтрокаХранилище","Сделка", Элемент.Поле, Элемент.НомерПоказателяНБКИФЛ, Элемент.НомерПоказателяНБКИЮЛ,  Элемент.НаименованиеПоляРегистраКИ, Элемент.ЗаполнятьПоУмолчанию, Элемент.Значение, Элемент.Функция,
			Элемент.СтрокаДляПолученияЗначения, Элемент.КодДопСвойства, Элемент.ОбъектДопСвойства, Элемент.СтрокаХранилище));	
		КонецЦикла;
		
		НоваяЗапись.Продан = "0";
		НоваяЗапись.ЧастичнаяПродажа = "0";

		мсЗначения = Новый Массив;
		Для Каждого ТекСтрокаПодстановки Из Результат Цикл 
			ТекНастройка = Новый Структура("Поле, НБКИФЛ, НБКИЮЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение",
			ТекСтрокаПодстановки.Поле, ТекСтрокаПодстановки.НБКИФЛ, ТекСтрокаПодстановки.НБКИЮЛ, ТекСтрокаПодстановки.НаименованиеПоляРегистраКИ, ТекСтрокаПодстановки.ЗаполнятьПоУмолчанию); 
			
			Значение = УЭДСервер.ГенерацияЗначениия(ТекСтрокаПодстановки, Ложь, НоваяЗапись.Сделка, НоваяЗапись.Сделка);
			ФункцияОпределена = УЭДСервер.ФункцияУспешноОпределена(ТекСтрокаПодстановки);
			Если ФункцияОпределена Тогда
				Значение = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(ТекСтрокаПодстановки.Функция, НоваяЗапись.Сделка, Значение);
				Если ТипЗнч(Значение) <> Тип("ТаблицаЗначений") Тогда
					Значение = СокрЛП(Значение);
				КонецЕсли;	
				ТекНастройка.Значение = Значение;
				мсЗначения.Добавить(ТекНастройка);
			Иначе 	
				Значение = СокрЛП(Значение);
				ТекНастройка.Значение = Значение;
				мсЗначения.Добавить(ТекНастройка);
			КонецЕсли; 
		КонецЦикла;	  
		
		Для Каждого структура Из мсЗначения Цикл
			
			Если ЗначениеЗаполнено(Структура.НаименованиеПоляРегистраКИ) Тогда
				НаименованиеПоляРегистраКИ = Структура.НаименованиеПоляРегистраКИ;
				ЗначениеВРегистр = Структура.Значение;
				Если Структура.ЗаполнятьПоУмолчанию И НЕ ЗначениеЗаполнено(Структура.Значение) Тогда
					ЗначениеВРегистр = ВычислитьПараметрПоУмолчанию(Структура.НБКИФЛ, ВыборкаДетальныеЗаписи, НоваяЗапись.Сделка);
				КонецЕсли;
				ЗначениеВРегистр = ОбработатьЗначенияПризнаков(ЗначениеВРегистр);  
				Если Структура.НБКИФЛ = "C25.8" Тогда 
					ДатаРасчета = ?(ЗначениеЗаполнено(Структура.Значение), Структура.Значение, ТекущаяДатаСеанса());
				Иначе					
					НоваяЗапись[НаименованиеПоляРегистраКИ] = ЗначениеВРегистр;
				КонецЕсли; 
				
			Иначе
				Продолжить;
			КонецЕсли;
		
			
		КонецЦикла;	
		
		Если Не ЗначениеЗаполнено(НоваяЗапись.ДатаПередачиФинансирования) Тогда
			НоваяЗапись.ДатаПередачиФинансирования = НоваяЗапись.ДатаНачалаСделки;
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(НоваяЗапись.ДатаВыходаНаПросрочку) Тогда
			НоваяЗапись.ДатаВыходаНаПросрочку = НоваяЗапись.ДатаОкончанияСделки;
		КонецЕсли; 
		
				
		Если Не ЗначениеЗаполнено(НоваяЗапись.ДатаРасчетаСрочнойЗадолженности) Тогда
			НоваяЗапись.ДатаРасчетаСрочнойЗадолженности = ДатаРасчета;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НоваяЗапись.ДатаРасчетаПросроченнойЗадолженности) Тогда
			НоваяЗапись.ДатаРасчетаПросроченнойЗадолженности = ДатаРасчета;
		КонецЕсли;   
		
		Если Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v3 И Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v4 Тогда
			КредитныеИсторииИзменения.ЗаменитьНеиспользуемыеКодыВидаКредита(НоваяЗапись.КодНБКИВидКредита); 
			КредитныеИсторииИзменения.ЗаменитьНеиспользуемыеКодыТипаКредита(НоваяЗапись.КодНБКИТипКредита);
		КонецЕсли;

		
		НоваяЗапись.Записать();
		НоваяЗапись = Неопределено; 
					
		
		ДатаСобытияСуд = ДатаСобытия;
		
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СудебноеДело) Тогда
			ДатаСобытияСуд = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СудебноеДело.ДатаИска), ВыборкаДетальныеЗаписи.СудебноеДело.ДатаИска, ВыборкаДетальныеЗаписи.СудебноеДело.ДатаРешения);
			КредитныеИстории.ЗаписатьСобытиеСделки(ВыборкаДетальныеЗаписи.Обязательство, ДатаСобытияСуд, ВыборкаДетальныеЗаписи.СудебноеДело, "2.6");
		КонецЕсли;   
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИсполДок) Тогда
			ДатаСобытияИД = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИсполДок.ДатаПринятияСудебногоАкта), ВыборкаДетальныеЗаписи.ИсполДок.ДатаПринятияСудебногоАкта, ВыборкаДетальныеЗаписи.ИсполДок.ДатаИД);
			Если ДатаСобытияИД = ДатаСобытияСуд Тогда
				ДатаСобытияИД = ДатаСобытияИД + 1; 
			КонецЕсли;	 
			КредитныеИстории.ЗаписатьСобытиеСделки(ВыборкаДетальныеЗаписи.Обязательство, ДатаСобытияИД, ВыборкаДетальныеЗаписи.ИсполДок, "2.6");
		КонецЕсли; 
		
		ЗаписатьПлатежиПослеНоября(ВыборкаДетальныеЗаписи.Обязательство);
		
		
		
		ЭтоФизЛицо = "";
		Если ВыборкаДетальныеЗаписи.Должник.ЮрФизЛицо = Справочники.ЮрФизЛицо.ФизЛицо Тогда
			ЭтоФизЛицо  = Истина;
		ИначеЕсли ВыборкаДетальныеЗаписи.Должник.ЮрФизЛицо = Справочники.ЮрФизЛицо.ЮрЛицо Тогда
			ЭтоФизЛицо  = Ложь;
		Иначе
			ТипДолжника = ВыборкаДетальныеЗаписи.Должник.ЮрФизЛицо;  
			НаборЗаписей = РегистрыСведений.ТипДолжникаПризнак.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ТипКонтрагента.Установить(ТипДолжника);
			НаборЗаписей.Прочитать();
			Для каждого Запись из НаборЗаписей Цикл
				Если Запись.ФизическоеЛицо Тогда 
					ЭтоФизЛицо = Истина;
				Конецесли;
				
				Если Запись.ЮридическоеЛицо Тогда 
					ЭтоФизЛицо = Ложь;
				Конецесли;
				
				Если Запись.ИндивидуальныйПредприниматель Тогда 
					ЭтоФизЛицо  = Истина;
				Конецесли;
				
			КонецЦикла;			
		КонецЕсли;	 
		
		
		Если ЭтоФизЛицо Тогда 		
			НоваяЗапись = РегистрыСведений.КредитныеИсторииДанныеФизЛица.СоздатьМенеджерЗаписи();
			НоваяЗапись.ДатаСобытия = ?(ЗначениеЗаполнено(ДатаИзРеквизита), ДатаИзРеквизита, ДатаСобытия); 
			НоваяЗапись.Должник = ВыборкаДетальныеЗаписи.Должник;
			НоваяЗапись.Событие = Справочники.КредитныеИсторииСобытияСубъекта.НайтиПоРеквизиту("КодНБКИ", "0.0"); 
			НоваяЗапись.ДокументСобытие = ИсточникСобытия;
			Настройка = ИсточникСобытия;
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
			ТЗ = Настройка.СубъектФизическоеЛицо.Выгрузить();
			Строки = УдалитьОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗ); 
			Результат = Новый Массив();
			Для Каждого Элемент Из Строки Цикл
				Результат.Добавить(Новый Структура("ИмяТаблицы, Поле, НБКИФЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение, Функция, СтрокаДляПолученияЗначения, КодДопСвойства,
				| ОбъектДопСвойства, СтрокаХранилище","СубъектФизическоеЛицо", Элемент.Поле, Элемент.НомерПоказателяНБКИФЛ, Элемент.НаименованиеПоляРегистраКИ, Элемент.ЗаполнятьПоУмолчанию, Элемент.Значение, Элемент.Функция,
				Элемент.СтрокаДляПолученияЗначения, Элемент.КодДопСвойства, Элемент.ОбъектДопСвойства, Элемент.СтрокаХранилище));	
			КонецЦикла;
			
			
			
			мсЗначения = Новый Массив;
			Для Каждого ТекСтрокаПодстановки Из Результат Цикл 
				ТекНастройка = Новый Структура("Поле, НБКИФЛ, НаименованиеПоляРегистраКИ ,ЗаполнятьПоУмолчанию, Значение",
				ТекСтрокаПодстановки.Поле, ТекСтрокаПодстановки.НБКИФЛ, ТекСтрокаПодстановки.НаименованиеПоляРегистраКИ, ТекСтрокаПодстановки.ЗаполнятьПоУмолчанию); 
				
				Значение = УЭДСервер.ГенерацияЗначениия(ТекСтрокаПодстановки, Ложь, ВыборкаДетальныеЗаписи.Обязательство, ВыборкаДетальныеЗаписи.Обязательство);
				ФункцияОпределена = УЭДСервер.ФункцияУспешноОпределена(ТекСтрокаПодстановки);
				Если ФункцияОпределена Тогда
					Значение = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(ТекСтрокаПодстановки.Функция, НоваяЗапись.Должник, Значение);
					Если ТипЗнч(Значение) <> Тип("ТаблицаЗначений") Тогда
						Значение = СокрЛП(Значение);
					КонецЕсли;	
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				Иначе 	
					Значение = СокрЛП(Значение);
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				КонецЕсли; 
			КонецЦикла;	  
			
			МассивАдрес = Новый Массив;
			Для Каждого структура Из мсЗначения Цикл   
				Если ЗначениеЗаполнено(Структура.НаименованиеПоляРегистраКИ) Тогда
					НаименованиеПоляРегистраКИ = Структура.НаименованиеПоляРегистраКИ;
					ЗначениеВРегистр = Структура.Значение;
					//Если Структура.ЗаполнятьПоУмолчанию Тогда
					//	ЗначениеВРегистр = ВычислитьПараметрПоУмолчанию(Структура.НБКИФЛ, ВыборкаДетальныеЗаписи, НоваяЗапись.Сделка);
					//КонецЕсли;
					ЗначениеВРегистр = ОбработатьЗначенияПризнаков(ЗначениеВРегистр); 
					
					Если Структура.НБКИФЛ = "C3.2" Тогда   
						Если Не ЗначениеЗаполнено(ЗначениеВРегистр) Тогда 
							ЗначениеВРегистр = Справочники.СтраныМира.Россия;
						Иначе
							ЗначениеВРегистр = ФЗ_230.ВычислитьЗначениеСтраныОКСМ(Структура.Значение).ОКСМ;   
						КонецЕсли;
					КонецЕсли; 
					
					Если Структура.НБКИФЛ = "C4.1.2" Тогда
						структСтрана = ФЗ_230.ВычислитьЗначениеСтраныОКСМ(Структура.Значение);
						НоваяЗапись.КодСтраныДокумента = структСтрана.ОКСМ;	
						НоваяЗапись.НаименованиеИнойСтраныДокумента = структСтрана.Наименование;  
					ИначеЕсли Структура.НБКИФЛ = "C4.3.4" Тогда
						НоваяЗапись.КодНБКИДокумента = Структура.Значение;  
						Если СтрНайти(Структура.Значение, "999") > 0 Тогда 
							НоваяЗапись.НаименованиеИногоДокумента = Структура.Значение;
						КонецЕсли;	
					Иначе
						НоваяЗапись[НаименованиеПоляРегистраКИ] = ЗначениеВРегистр;
					КонецЕсли; 
				ИначеЕсли СтрНайти(Структура.НБКИФЛ, "C8.") > 0 ИЛИ СтрНайти(Структура.НБКИФЛ, "C9.") > 0 Тогда
					МассивАдрес.Добавить(Структура); 
					Продолжить;
				Иначе
					Продолжить;
				КонецЕсли; 
												
			КонецЦикла;	 
			
			Если СтрНайти(НоваяЗапись.КодНБКИДокумента, "999") > 0 и НЕ ЗначениеЗаполнено(НоваяЗапись.НаименованиеИногоДокумента) Тогда 
				НоваяЗапись.НаименованиеИногоДокумента = НоваяЗапись.КодНБКИДокумента;
			КонецЕсли;	 
			
			Если Не ЗначениеЗаполнено(НоваяЗапись.Дееспособность)  Тогда 
				СовершеннолетиеСек = 567648000;
				НоваяЗапись.Дееспособность = ?(ТекущаяДатаСеанса() - НоваяЗапись.ДатаРождения >= СовершеннолетиеСек, "1", "2");
			КонецЕсли;
			НоваяЗапись.Записать();
			НоваяЗапись = Неопределено;
			ЗаписатьАдресОбъекта(МассивАдрес, ВыборкаДетальныеЗаписи.Должник, ЭтоФизЛицо, Настройка.СтроковыеАдреса);
		Иначе  
			НоваяЗапись = РегистрыСведений.КредитныеИсторииДанныеЮрЛица.СоздатьМенеджерЗаписи();
			НоваяЗапись.ДатаСобытия = ?(ЗначениеЗаполнено(ДатаИзРеквизита), ДатаИзРеквизита, ДатаСобытия);  
			НоваяЗапись.Должник = ВыборкаДетальныеЗаписи.Должник;
			НоваяЗапись.Событие = Справочники.КредитныеИсторииСобытияСубъекта.НайтиПоРеквизиту("КодНБКИ", "0.0");
			НоваяЗапись.ДокументСобытие = ИсточникСобытия;
			Настройка = ИсточникСобытия;
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
			ТЗ = Настройка.СубъектЮридическоеЛицо.Выгрузить();
			Строки = УдалитьОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗ); 
			Результат = Новый Массив();
			Для Каждого Элемент Из Строки Цикл
				Результат.Добавить(Новый Структура("ИмяТаблицы, Поле, НБКИЮЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение, Функция, СтрокаДляПолученияЗначения, КодДопСвойства,
				| ОбъектДопСвойства, СтрокаХранилище","СубъектЮридическоеЛицо", Элемент.Поле, Элемент.НомерПоказателяНБКИЮЛ, Элемент.НаименованиеПоляРегистраКИ, Элемент.ЗаполнятьПоУмолчанию, Элемент.Значение, Элемент.Функция,
				Элемент.СтрокаДляПолученияЗначения, Элемент.КодДопСвойства, Элемент.ОбъектДопСвойства, Элемент.СтрокаХранилище));	
			КонецЦикла;	
			
			мсЗначения = Новый Массив;
			Для Каждого ТекСтрокаПодстановки Из Результат Цикл 
				ТекНастройка = Новый Структура("Поле, НБКИЮЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение",
				ТекСтрокаПодстановки.Поле, ТекСтрокаПодстановки.НБКИЮЛ, ТекСтрокаПодстановки.НаименованиеПоляРегистраКИ, ТекСтрокаПодстановки.ЗаполнятьПоУмолчанию); 
				
				Значение = УЭДСервер.ГенерацияЗначениия(ТекСтрокаПодстановки, Ложь, ВыборкаДетальныеЗаписи.Обязательство, ВыборкаДетальныеЗаписи.Обязательство);
				ФункцияОпределена = УЭДСервер.ФункцияУспешноОпределена(ТекСтрокаПодстановки);
				Если ФункцияОпределена Тогда
					Значение = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(ТекСтрокаПодстановки.Функция, НоваяЗапись.Должник, Значение);
					Если ТипЗнч(Значение) <> Тип("ТаблицаЗначений") Тогда
						Значение = СокрЛП(Значение);
					КонецЕсли;	
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				Иначе 	
					Значение = СокрЛП(Значение);
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				КонецЕсли; 
			КонецЦикла;	  
			
			МассивАдрес = Новый Массив;
			Для Каждого структура Из мсЗначения Цикл
				
				Если ЗначениеЗаполнено(Структура.НаименованиеПоляРегистраКИ) Тогда
					НаименованиеПоляРегистраКИ = Структура.НаименованиеПоляРегистраКИ;
					ЗначениеВРегистр = Структура.Значение;
					//Если Структура.ЗаполнятьПоУмолчанию Тогда
					//	ЗначениеВРегистр = ВычислитьПараметрПоУмолчанию(Структура.НБКИФЛ, ВыборкаДетальныеЗаписи, НоваяЗапись.Сделка);
					//КонецЕсли;
					ЗначениеВРегистр = ОбработатьЗначенияПризнаков(ЗначениеВРегистр); 
					НоваяЗапись[НаименованиеПоляРегистраКИ] = ЗначениеВРегистр;				
				ИначеЕсли СтрНайти(Структура.НБКИЮЛ, "B2.") > 0 Тогда
					МассивАдрес.Добавить(Структура); 
					Продолжить;
				Иначе
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;	
			НоваяЗапись.Записать();
			НоваяЗапись = Неопределено;
			
            ЗаписатьАдресОбъекта(МассивАдрес, ВыборкаДетальныеЗаписи.Должник, ЭтоФизЛицо, Настройка.СтроковыеАдреса);
			
		КонецЕсли; 
		
		ПроцентВыполнения = (ПрогрессВыполнения / ВсегоОбъектов)*100;
		ПроцентВыполнения = Окр(ПроцентВыполнения,0);    
		
		ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения,СокрЛП(ВыборкаДетальныеЗаписи.Обязательство));
		
		ПрогрессВыполнения = ПрогрессВыполнения + 1;
		ДатаСобытия = ДатаСобытия + 1;
	КонецЦикла;  
	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КредитныеИсторииДанныеФизЛица.Должник КАК Должник,
		|	КредитныеИсторииДанныеФизЛица.Событие КАК Событие
		|ПОМЕСТИТЬ ЕстьСобытиеПервичногоЗаполнения
		|ИЗ
		|	РегистрСведений.КредитныеИсторииДанныеФизЛица КАК КредитныеИсторииДанныеФизЛица
		|ГДЕ
		|	КредитныеИсторииДанныеФизЛица.Событие = &Событие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КредитныеИсторииДанныеЮрЛица.Должник,
		|	КредитныеИсторииДанныеЮрЛица.Событие
		|ИЗ
		|	РегистрСведений.КредитныеИсторииДанныеЮрЛица КАК КредитныеИсторииДанныеЮрЛица
		|ГДЕ
		|	КредитныеИсторииДанныеЮрЛица.Событие = &Событие
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Должник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Поручительства.Поручитель КАК Должник,
		|	ЕстьСобытиеПервичногоЗаполнения.Событие КАК ПервЗаполнение,
		|	Поручительства.ДолговоеОбязательство КАК Обязательство
		|ИЗ
		|	РегистрСведений.Поручительства КАК Поручительства
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЕстьСобытиеПервичногоЗаполнения КАК ЕстьСобытиеПервичногоЗаполнения
		|		ПО Поручительства.Поручитель = ЕстьСобытиеПервичногоЗаполнения.Должник
		|ГДЕ
		|	ЕстьСобытиеПервичногоЗаполнения.Событие ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Событие", Справочники.КредитныеИсторииСобытияСубъекта.НайтиПоРеквизиту("КодНБКИ", "0.0"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВсегоОбъектов = ВыборкаДетальныеЗаписи.Количество();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
		ЭтоФизЛицо = "";
		Если ВыборкаДетальныеЗаписи.Должник.ЮрФизЛицо = Справочники.ЮрФизЛицо.ФизЛицо Тогда
			ЭтоФизЛицо  = Истина;
		ИначеЕсли ВыборкаДетальныеЗаписи.Должник.ЮрФизЛицо = Справочники.ЮрФизЛицо.ЮрЛицо Тогда
			ЭтоФизЛицо  = Ложь;
		Иначе
			ТипДолжника = ВыборкаДетальныеЗаписи.Должник.ЮрФизЛицо;  
			НаборЗаписей = РегистрыСведений.ТипДолжникаПризнак.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ТипКонтрагента.Установить(ТипДолжника);
			НаборЗаписей.Прочитать();
			Для каждого Запись из НаборЗаписей Цикл
				Если Запись.ФизическоеЛицо Тогда 
					ЭтоФизЛицо = Истина;
				Конецесли;
				
				Если Запись.ЮридическоеЛицо Тогда 
					ЭтоФизЛицо = Ложь;
				Конецесли;
				
				Если Запись.ИндивидуальныйПредприниматель Тогда 
					ЭтоФизЛицо  = Истина;
				Конецесли;
				
			КонецЦикла;			
		КонецЕсли;	 
		
		
		Если ЭтоФизЛицо Тогда 		
			НоваяЗапись = РегистрыСведений.КредитныеИсторииДанныеФизЛица.СоздатьМенеджерЗаписи();
			ДатаИзРеквизита = "";
			Если НачалоДня(ДатаСобытия) = Дата("19950126") Тогда
				ДатаИзРеквизита = ОбъектыСервер.ПолучитьЗначениеСвойства(ВыборкаДетальныеЗаписи.Обязательство, КодРеквизита);
				НоваяЗапись.ДатаСобытия = ?(ЗначениеЗаполнено(ДатаИзРеквизита), ДатаИзРеквизита, ТекущаяДатаСеанса());
			Иначе  
				НоваяЗапись.ДатаСобытия = ДатаСобытия;
			КонецЕсли;
			
			НоваяЗапись.Должник = ВыборкаДетальныеЗаписи.Должник;
			НоваяЗапись.Событие = Справочники.КредитныеИсторииСобытияСубъекта.НайтиПоРеквизиту("КодНБКИ", "0.0"); 
			НоваяЗапись.ДокументСобытие = ИсточникСобытия;
			Настройка = ИсточникСобытия;
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
			ТЗ = Настройка.СубъектПоручитель.Выгрузить();
			Строки = УдалитьОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗ); 
			Результат = Новый Массив();
			Для Каждого Элемент Из Строки Цикл
				Результат.Добавить(Новый Структура("ИмяТаблицы, Поле, НБКИФЛ, ЗаполнятьПоУмолчанию, НаименованиеПоляРегистраКИ, Значение, Функция, СтрокаДляПолученияЗначения, КодДопСвойства,
				| ОбъектДопСвойства, СтрокаХранилище","СубъектПоручитель", Элемент.Поле, Элемент.НомерПоказателяНБКИФЛ, Элемент.НаименованиеПоляРегистраКИ, Элемент.ЗаполнятьПоУмолчанию, Элемент.НаименованиеПоляРегистраКИ, Элемент.Значение, Элемент.Функция,
				Элемент.СтрокаДляПолученияЗначения, Элемент.КодДопСвойства, Элемент.ОбъектДопСвойства, Элемент.СтрокаХранилище));	
			КонецЦикла;
			
			
			
			мсЗначения = Новый Массив;
			Для Каждого ТекСтрокаПодстановки Из Результат Цикл 
				ТекНастройка = Новый Структура("Поле, НБКИФЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение",
				ТекСтрокаПодстановки.Поле, ТекСтрокаПодстановки.НБКИФЛ, ТекСтрокаПодстановки.НаименованиеПоляРегистраКИ, ТекСтрокаПодстановки.ЗаполнятьПоУмолчанию); 
				
				Значение = УЭДСервер.ГенерацияЗначениия(ТекСтрокаПодстановки, Ложь, ВыборкаДетальныеЗаписи.Обязательство, ВыборкаДетальныеЗаписи.Обязательство);
				ФункцияОпределена = УЭДСервер.ФункцияУспешноОпределена(ТекСтрокаПодстановки);
				Если ФункцияОпределена Тогда
					Значение = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(ТекСтрокаПодстановки.Функция, НоваяЗапись.Должник, Значение);
					Если ТипЗнч(Значение) <> Тип("ТаблицаЗначений") Тогда
						Значение = СокрЛП(Значение);
					КонецЕсли;	
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				Иначе 	
					Значение = СокрЛП(Значение);
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				КонецЕсли; 
			КонецЦикла;	  
			
			МассивАдрес = Новый Массив;
			Для Каждого структура Из мсЗначения Цикл   
				Если ЗначениеЗаполнено(Структура.НаименованиеПоляРегистраКИ) Тогда
					НаименованиеПоляРегистраКИ = Структура.НаименованиеПоляРегистраКИ;
					ЗначениеВРегистр = Структура.Значение;
					//Если Структура.ЗаполнятьПоУмолчанию Тогда
					//	ЗначениеВРегистр = ВычислитьПараметрПоУмолчанию(Структура.НБКИФЛ, ВыборкаДетальныеЗаписи, НоваяЗапись.Сделка);
					//КонецЕсли;
					ЗначениеВРегистр = ОбработатьЗначенияПризнаков(ЗначениеВРегистр); 
					
					Если Структура.НБКИФЛ = "C3.2" Тогда   
						Если Не ЗначениеЗаполнено(ЗначениеВРегистр) Тогда 
							ЗначениеВРегистр = Справочники.СтраныМира.Россия;
						Иначе
							ЗначениеВРегистр = ФЗ_230.ВычислитьЗначениеСтраныОКСМ(Структура.Значение).ОКСМ;   
						КонецЕсли;
					КонецЕсли; 
					
					Если Структура.НБКИФЛ = "C4.1.2" Тогда
						структСтрана = ФЗ_230.ВычислитьЗначениеСтраныОКСМ(Структура.Значение);
						НоваяЗапись.КодСтраныДокумента = структСтрана.ОКСМ;	
						НоваяЗапись.НаименованиеИнойСтраныДокумента = структСтрана.Наименование;   
					ИначеЕсли Структура.НБКИФЛ = "C4.3.4" Тогда
						НоваяЗапись.КодНБКИДокумента = Структура.Значение;  
						Если СтрНайти(Структура.Значение, "999") > 0 Тогда 
							НоваяЗапись.НаименованиеИногоДокумента = Структура.Значение;
						КонецЕсли;	
					Иначе
						НоваяЗапись[НаименованиеПоляРегистраКИ] = ЗначениеВРегистр;
					КонецЕсли; 					
				ИначеЕсли СтрНайти(Структура.НБКИФЛ, "C8.") > 0 ИЛИ СтрНайти(Структура.НБКИФЛ, "C9.") > 0 Тогда
					МассивАдрес.Добавить(Структура); 
					Продолжить;  
				Иначе 
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;	
			
			Если СтрНайти(НоваяЗапись.КодНБКИДокумента, "999") > 0 и НЕ ЗначениеЗаполнено(НоваяЗапись.НаименованиеИногоДокумента) Тогда 
				НоваяЗапись.НаименованиеИногоДокумента = НоваяЗапись.КодНБКИДокумента;
			КонецЕсли;	 
			
			Если Не ЗначениеЗаполнено(НоваяЗапись.Дееспособность) Тогда 
				СовершеннолетиеСек = 567648000;
				НоваяЗапись.Дееспособность = ?(ТекущаяДатаСеанса() - НоваяЗапись.ДатаРождения >= СовершеннолетиеСек, "1", "2");
			КонецЕсли;	
			

			НоваяЗапись.Записать();
			НоваяЗапись = Неопределено;
			ЗаписатьАдресОбъекта(МассивАдрес, ВыборкаДетальныеЗаписи.Должник, ЭтоФизЛицо, Настройка.СтроковыеАдреса);
		Иначе  
			НоваяЗапись = РегистрыСведений.КредитныеИсторииДанныеЮрЛица.СоздатьМенеджерЗаписи();
			Если НачалоДня(ДатаСобытия) = Дата("19950126") Тогда
				ДатаИзРеквизита = ОбъектыСервер.ПолучитьЗначениеСвойства(ВыборкаДетальныеЗаписи.Обязательство, КодРеквизита);
				НоваяЗапись.ДатаСобытия = ?(ЗначениеЗаполнено(ДатаИзРеквизита), ДатаИзРеквизита, ТекущаяДатаСеанса());
			Иначе  
				НоваяЗапись.ДатаСобытия = ДатаСобытия;
			КонецЕсли; 
			НоваяЗапись.Должник = ВыборкаДетальныеЗаписи.Должник;
			НоваяЗапись.Событие = Справочники.КредитныеИсторииСобытияСубъекта.НайтиПоРеквизиту("КодНБКИ", "0.0");
			НоваяЗапись.ДокументСобытие = ИсточникСобытия;
			Настройка = ИсточникСобытия;
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
			ТЗ = Настройка.СубъектЮридическоеЛицо.Выгрузить();
			Строки = УдалитьОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗ); 
			Результат = Новый Массив();
			Для Каждого Элемент Из Строки Цикл
				Результат.Добавить(Новый Структура("ИмяТаблицы, Поле, НБКИЮЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение, Функция, СтрокаДляПолученияЗначения, КодДопСвойства,
				| ОбъектДопСвойства, СтрокаХранилище", "СубъектЮридическоеЛицо", Элемент.Поле, Элемент.НомерПоказателяНБКИЮЛ, Элемент.НаименованиеПоляРегистраКИ, Элемент.ЗаполнятьПоУмолчанию, Элемент.Значение, Элемент.Функция,
				Элемент.СтрокаДляПолученияЗначения, Элемент.КодДопСвойства, Элемент.ОбъектДопСвойства, Элемент.СтрокаХранилище));	
			КонецЦикла;
			
			
			
			мсЗначения = Новый Массив;
			Для Каждого ТекСтрокаПодстановки Из Результат Цикл 
				ТекНастройка = Новый Структура("Поле, НБКИЮЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение",
				ТекСтрокаПодстановки.Поле, ТекСтрокаПодстановки.НБКИЮЛ, ТекСтрокаПодстановки.НаименованиеПоляРегистраКИ, ТекСтрокаПодстановки.ЗаполнятьПоУмолчанию); 
				
				Значение = УЭДСервер.ГенерацияЗначениия(ТекСтрокаПодстановки, Ложь, ВыборкаДетальныеЗаписи.Обязательство, ВыборкаДетальныеЗаписи.Обязательство);
				ФункцияОпределена = УЭДСервер.ФункцияУспешноОпределена(ТекСтрокаПодстановки);
				Если ФункцияОпределена Тогда
					Значение = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(ТекСтрокаПодстановки.Функция, НоваяЗапись.Должник, Значение);
					Если ТипЗнч(Значение) <> Тип("ТаблицаЗначений") Тогда
						Значение = СокрЛП(Значение);
					КонецЕсли;	
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				Иначе 	
					Значение = СокрЛП(Значение);
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				КонецЕсли; 
			КонецЦикла;	  
			
			МассивАдрес = Новый Массив;
			Для Каждого структура Из мсЗначения Цикл
				
				Если ЗначениеЗаполнено(Структура.НаименованиеПоляРегистраКИ) Тогда
					НаименованиеПоляРегистраКИ = Структура.НаименованиеПоляРегистраКИ;
					ЗначениеВРегистр = Структура.Значение;
					//Если Структура.ЗаполнятьПоУмолчанию Тогда
					//	ЗначениеВРегистр = ВычислитьПараметрПоУмолчанию(Структура.НБКИФЛ, ВыборкаДетальныеЗаписи, НоваяЗапись.Сделка);
					//КонецЕсли;
					ЗначениеВРегистр = ОбработатьЗначенияПризнаков(ЗначениеВРегистр); 
					НоваяЗапись[НаименованиеПоляРегистраКИ] = ЗначениеВРегистр;				
				ИначеЕсли СтрНайти(Структура.НБКИЮЛ, "B2.") > 0 Тогда
					МассивАдрес.Добавить(Структура); 
					Продолжить;
				Иначе
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;	
			НоваяЗапись.Записать();
			НоваяЗапись = Неопределено;
			
            ЗаписатьАдресОбъекта(МассивАдрес, ВыборкаДетальныеЗаписи.Должник, ЭтоФизЛицо, Настройка.СтроковыеАдреса);
			
		КонецЕсли; 
		
		ПроцентВыполнения = (ПрогрессВыполнения / ВсегоОбъектов)*100;
		ПроцентВыполнения = Окр(ПроцентВыполнения,0);    
		
		ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения,СокрЛП(ВыборкаДетальныеЗаписи.Обязательство));
		
		ПрогрессВыполнения = ПрогрессВыполнения + 1;
		ДатаСобытия = ДатаСобытия + 1;
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КредитныеИсторииДанныеФизЛица.Должник КАК Должник,
		|	КредитныеИсторииДанныеФизЛица.Событие КАК Событие
		|ПОМЕСТИТЬ ЕстьСобытиеПервичногоЗаполнения
		|ИЗ
		|	РегистрСведений.КредитныеИсторииДанныеФизЛица КАК КредитныеИсторииДанныеФизЛица
		|ГДЕ
		|	КредитныеИсторииДанныеФизЛица.Событие = &Событие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КредитныеИсторииДанныеЮрЛица.Должник,
		|	КредитныеИсторииДанныеЮрЛица.Событие
		|ИЗ
		|	РегистрСведений.КредитныеИсторииДанныеЮрЛица КАК КредитныеИсторииДанныеЮрЛица
		|ГДЕ
		|	КредитныеИсторииДанныеЮрЛица.Событие = &Событие
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Должник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕстьСобытиеПервичногоЗаполнения.Событие КАК ПервЗаполнение,
		|	Наследники.ДолговоеОбязательство КАК Обязательство,
		|	Наследники.Наследник КАК Должник
		|ИЗ
		|	РегистрСведений.Наследники КАК Наследники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЕстьСобытиеПервичногоЗаполнения КАК ЕстьСобытиеПервичногоЗаполнения
		|		ПО Наследники.Наследник = ЕстьСобытиеПервичногоЗаполнения.Должник
		|ГДЕ
		|	ЕстьСобытиеПервичногоЗаполнения.Событие ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Событие", Справочники.КредитныеИсторииСобытияСубъекта.НайтиПоРеквизиту("КодНБКИ", "0.0"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВсегоОбъектов = ВыборкаДетальныеЗаписи.Количество();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
		ЭтоФизЛицо = "";
		Если ВыборкаДетальныеЗаписи.Должник.ЮрФизЛицо = Справочники.ЮрФизЛицо.ФизЛицо Тогда
			ЭтоФизЛицо  = Истина;
		ИначеЕсли ВыборкаДетальныеЗаписи.Должник.ЮрФизЛицо = Справочники.ЮрФизЛицо.ЮрЛицо Тогда
			ЭтоФизЛицо  = Ложь;
		Иначе
			ТипДолжника = ВыборкаДетальныеЗаписи.Должник.ЮрФизЛицо;  
			НаборЗаписей = РегистрыСведений.ТипДолжникаПризнак.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ТипКонтрагента.Установить(ТипДолжника);
			НаборЗаписей.Прочитать();
			Для каждого Запись из НаборЗаписей Цикл
				Если Запись.ФизическоеЛицо Тогда 
					ЭтоФизЛицо = Истина;
				Конецесли;
				
				Если Запись.ЮридическоеЛицо Тогда 
					ЭтоФизЛицо = Ложь;
				Конецесли;
				
				Если Запись.ИндивидуальныйПредприниматель Тогда 
					ЭтоФизЛицо  = Истина;
				Конецесли;
				
			КонецЦикла;			
		КонецЕсли;	 
		
		
		Если ЭтоФизЛицо Тогда 		
			НоваяЗапись = РегистрыСведений.КредитныеИсторииДанныеФизЛица.СоздатьМенеджерЗаписи();
			ДатаИзРеквизита = "";
			Если НачалоДня(ДатаСобытия) = Дата("19950126") Тогда
				ДатаИзРеквизита = ОбъектыСервер.ПолучитьЗначениеСвойства(ВыборкаДетальныеЗаписи.Обязательство, КодРеквизита);
				НоваяЗапись.ДатаСобытия = ?(ЗначениеЗаполнено(ДатаИзРеквизита), ДатаИзРеквизита, ТекущаяДатаСеанса());
			Иначе  
				НоваяЗапись.ДатаСобытия = ДатаСобытия;
			КонецЕсли;
			
			НоваяЗапись.Должник = ВыборкаДетальныеЗаписи.Должник;
			НоваяЗапись.Событие = Справочники.КредитныеИсторииСобытияСубъекта.НайтиПоРеквизиту("КодНБКИ", "0.0"); 
			НоваяЗапись.ДокументСобытие = ИсточникСобытия;
			Настройка = ИсточникСобытия;
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
			ТЗ = Настройка.СубъектНаследник.Выгрузить();
			Строки = УдалитьОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗ); 
			Результат = Новый Массив();
			Для Каждого Элемент Из Строки Цикл
				Результат.Добавить(Новый Структура("ИмяТаблицы, Поле, НБКИФЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение, Функция, СтрокаДляПолученияЗначения, КодДопСвойства,
				| ОбъектДопСвойства, СтрокаХранилище", "СубъектНаследник", Элемент.Поле, Элемент.НомерПоказателяНБКИФЛ, Элемент.НаименованиеПоляРегистраКИ, Элемент.ЗаполнятьПоУмолчанию, Элемент.Значение, Элемент.Функция,
				Элемент.СтрокаДляПолученияЗначения, Элемент.КодДопСвойства, Элемент.ОбъектДопСвойства, Элемент.СтрокаХранилище));	
			КонецЦикла;
			
			
			
			мсЗначения = Новый Массив;
			Для Каждого ТекСтрокаПодстановки Из Результат Цикл 
				ТекНастройка = Новый Структура("Поле, НБКИФЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение",
				ТекСтрокаПодстановки.Поле, ТекСтрокаПодстановки.НБКИФЛ, ТекСтрокаПодстановки.НаименованиеПоляРегистраКИ, ТекСтрокаПодстановки.ЗаполнятьПоУмолчанию); 
				
				Значение = УЭДСервер.ГенерацияЗначениия(ТекСтрокаПодстановки, Ложь, ВыборкаДетальныеЗаписи.Обязательство, ВыборкаДетальныеЗаписи.Обязательство);
				ФункцияОпределена = УЭДСервер.ФункцияУспешноОпределена(ТекСтрокаПодстановки);
				Если ФункцияОпределена Тогда
					Значение = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(ТекСтрокаПодстановки.Функция, НоваяЗапись.Должник, Значение);
					Если ТипЗнч(Значение) <> Тип("ТаблицаЗначений") Тогда
						Значение = СокрЛП(Значение);
					КонецЕсли;	
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				Иначе 	
					Значение = СокрЛП(Значение);
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				КонецЕсли; 
			КонецЦикла;	  
			
			МассивАдрес = Новый Массив;
			Для Каждого структура Из мсЗначения Цикл   
				Если ЗначениеЗаполнено(Структура.НаименованиеПоляРегистраКИ) Тогда
					НаименованиеПоляРегистраКИ = Структура.НаименованиеПоляРегистраКИ;
					ЗначениеВРегистр = Структура.Значение;
					//Если Структура.ЗаполнятьПоУмолчанию Тогда
					//	ЗначениеВРегистр = ВычислитьПараметрПоУмолчанию(Структура.НБКИФЛ, ВыборкаДетальныеЗаписи, НоваяЗапись.Сделка);
					//КонецЕсли;
					ЗначениеВРегистр = ОбработатьЗначенияПризнаков(ЗначениеВРегистр); 
					
					Если Структура.НБКИФЛ = "C3.2" Тогда   
						Если Не ЗначениеЗаполнено(ЗначениеВРегистр) Тогда 
							ЗначениеВРегистр = Справочники.СтраныМира.Россия;
						Иначе
							ЗначениеВРегистр = ФЗ_230.ВычислитьЗначениеСтраныОКСМ(Структура.Значение).ОКСМ;   
						КонецЕсли;
					КонецЕсли; 
					
					Если Структура.НБКИФЛ = "C4.1.2" Тогда
						структСтрана = ФЗ_230.ВычислитьЗначениеСтраныОКСМ(Структура.Значение);
						НоваяЗапись.КодСтраныДокумента = структСтрана.ОКСМ;	
						НоваяЗапись.НаименованиеИнойСтраныДокумента = структСтрана.Наименование;   
					ИначеЕсли Структура.НБКИФЛ = "C4.3.4" Тогда
						НоваяЗапись.КодНБКИДокумента = Структура.Значение;  
						Если СтрНайти(Структура.Значение, "999") > 0 Тогда 
							НоваяЗапись.НаименованиеИногоДокумента = Структура.Значение;
						КонецЕсли;	
					Иначе
						НоваяЗапись[НаименованиеПоляРегистраКИ] = ЗначениеВРегистр;
					КонецЕсли; 					
					
				ИначеЕсли СтрНайти(Структура.НБКИФЛ, "C8.") > 0 ИЛИ СтрНайти(Структура.НБКИФЛ, "C9.") > 0 Тогда
					МассивАдрес.Добавить(Структура); 
					Продолжить;  
				Иначе
					Продолжить;
				КонецЕсли; 
				
			КонецЦикла;	
			
			Если СтрНайти(НоваяЗапись.КодНБКИДокумента, "999") > 0 и НЕ ЗначениеЗаполнено(НоваяЗапись.НаименованиеИногоДокумента) Тогда 
				НоваяЗапись.НаименованиеИногоДокумента = НоваяЗапись.КодНБКИДокумента;
			КонецЕсли;	 
			
			Если Не ЗначениеЗаполнено(НоваяЗапись.Дееспособность) Тогда 
				СовершеннолетиеСек = 567648000;
				НоваяЗапись.Дееспособность = ?(ТекущаяДатаСеанса() - НоваяЗапись.ДатаРождения >= СовершеннолетиеСек, "1", "2");
			КонецЕсли;	

			
			НоваяЗапись.Записать();
			НоваяЗапись = Неопределено;
			ЗаписатьАдресОбъекта(МассивАдрес, ВыборкаДетальныеЗаписи.Должник, ЭтоФизЛицо, Настройка.СтроковыеАдреса);
		Иначе  
			НоваяЗапись = РегистрыСведений.КредитныеИсторииДанныеЮрЛица.СоздатьМенеджерЗаписи();
			Если НачалоДня(ДатаСобытия) = Дата("19950126") Тогда
				ДатаИзРеквизита = ОбъектыСервер.ПолучитьЗначениеСвойства(ВыборкаДетальныеЗаписи.Обязательство, КодРеквизита);
				НоваяЗапись.ДатаСобытия = ?(ЗначениеЗаполнено(ДатаИзРеквизита), ДатаИзРеквизита, ТекущаяДатаСеанса());
			Иначе  
				НоваяЗапись.ДатаСобытия = ДатаСобытия;
			КонецЕсли; 
			НоваяЗапись.Должник = ВыборкаДетальныеЗаписи.Должник;
			НоваяЗапись.Событие = Справочники.КредитныеИсторииСобытияСубъекта.НайтиПоРеквизиту("КодНБКИ", "0.0");
			НоваяЗапись.ДокументСобытие = ИсточникСобытия;
			Настройка = ИсточникСобытия;
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
			ТЗ = Настройка.СубъектЮридическоеЛицо.Выгрузить();
			Строки = УдалитьОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗ); 
			Результат = Новый Массив();
			Для Каждого Элемент Из Строки Цикл
				Результат.Добавить(Новый Структура("ИмяТаблицы, Поле, НБКИЮЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение, Функция, СтрокаДляПолученияЗначения, КодДопСвойства,
				| ОбъектДопСвойства, СтрокаХранилище","СубъектЮридическоеЛицо", Элемент.Поле, Элемент.НомерПоказателяНБКИЮЛ, Элемент.НаименованиеПоляРегистраКИ, Элемент.ЗаполнятьПоУмолчанию, Элемент.Значение, Элемент.Функция,
				Элемент.СтрокаДляПолученияЗначения, Элемент.КодДопСвойства, Элемент.ОбъектДопСвойства, Элемент.СтрокаХранилище));	
			КонецЦикла;
			
			
			
			мсЗначения = Новый Массив;
			Для Каждого ТекСтрокаПодстановки Из Результат Цикл 
				ТекНастройка = Новый Структура("Поле, НБКИЮЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение",
				ТекСтрокаПодстановки.Поле, ТекСтрокаПодстановки.НБКИЮЛ, ТекСтрокаПодстановки.НаименованиеПоляРегистраКИ, ТекСтрокаПодстановки.ЗаполнятьПоУмолчанию); 
				
				Значение = УЭДСервер.ГенерацияЗначениия(ТекСтрокаПодстановки, Ложь, ВыборкаДетальныеЗаписи.Обязательство, ВыборкаДетальныеЗаписи.Обязательство);
				ФункцияОпределена = УЭДСервер.ФункцияУспешноОпределена(ТекСтрокаПодстановки);
				Если ФункцияОпределена Тогда
					Значение = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(ТекСтрокаПодстановки.Функция, НоваяЗапись.Должник, Значение);
					Если ТипЗнч(Значение) <> Тип("ТаблицаЗначений") Тогда
						Значение = СокрЛП(Значение);
					КонецЕсли;	
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				Иначе 	
					Значение = СокрЛП(Значение);
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				КонецЕсли; 
			КонецЦикла;	  
			
			МассивАдрес = Новый Массив;
			Для Каждого структура Из мсЗначения Цикл
				
				Если ЗначениеЗаполнено(Структура.НаименованиеПоляРегистраКИ) Тогда
					НаименованиеПоляРегистраКИ = Структура.НаименованиеПоляРегистраКИ;
					ЗначениеВРегистр = Структура.Значение;
					//Если Структура.ЗаполнятьПоУмолчанию Тогда
					//	ЗначениеВРегистр = ВычислитьПараметрПоУмолчанию(Структура.НБКИФЛ, ВыборкаДетальныеЗаписи, НоваяЗапись.Сделка);
					//КонецЕсли;
					ЗначениеВРегистр = ОбработатьЗначенияПризнаков(ЗначениеВРегистр); 
					НоваяЗапись[НаименованиеПоляРегистраКИ] = ЗначениеВРегистр;				
				ИначеЕсли СтрНайти(Структура.НБКИЮЛ, "B2.") > 0 Тогда
					МассивАдрес.Добавить(Структура); 
					Продолжить;
				Иначе
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;	
			НоваяЗапись.Записать();
			НоваяЗапись = Неопределено;
			
            ЗаписатьАдресОбъекта(МассивАдрес, ВыборкаДетальныеЗаписи.Должник, ЭтоФизЛицо, Настройка.СтроковыеАдреса);
			
		КонецЕсли; 
		
		ПроцентВыполнения = (ПрогрессВыполнения / ВсегоОбъектов)*100;
		ПроцентВыполнения = Окр(ПроцентВыполнения,0);    
		
		ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения,СокрЛП(ВыборкаДетальныеЗаписи.Обязательство));
		
		ПрогрессВыполнения = ПрогрессВыполнения + 1;
		ДатаСобытия = ДатаСобытия + 1;
	КонецЦикла; 	
	

	
КонецПроцедуры

Процедура ЗаполнитьПервичныеПараметрыДоговораИСубъекта(Параметры, АдресРезультата) Экспорт   
	
	//ПараметрыЗапуска.Вставить("ИсточникСобытия", Объект.Ссылка);
	//ПараметрыЗапуска.Вставить("ДатаСобытия", ДатаСтарта);

	
	ИсточникСобытия = Параметры.ИсточникСобытия;  
	Если ЗначениеЗаполнено(ИсточникСобытия.РеквизитДатаПервичногоЗаполнения) Тогда
		КодРеквизита = ИсточникСобытия.РеквизитДатаПервичногоЗаполнения.Код; 
	Иначе
		КодРеквизита = "";
	КонецЕсли;	
	ДатаСобытия = Параметры.ДатаСобытия; 
	ПрогрессВыполнения = 1; 
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КредитныеИсторииДанныеСделки.Сделка КАК Сделка,
		|	КредитныеИсторииДанныеСделки.Событие КАК Событие
		|ПОМЕСТИТЬ ЕстьСобытиеПервичногоЗаполнения
		|ИЗ
		|	РегистрСведений.КредитныеИсторииДанныеСделки КАК КредитныеИсторииДанныеСделки
		|ГДЕ
		|	КредитныеИсторииДанныеСделки.Событие В(&Событие)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ОбъектыВРаботеОстатки.Объект КАК Справочник.ДолговыеОбязательства) КАК Обязательство,
		|	ОбъектыВРаботеОстатки.Объект.Должник КАК Должник
		|ПОМЕСТИТЬ ВРаботе
		|ИЗ
		|	РегистрНакопления.ОбъектыВРаботе.Остатки(
		|			,
		|			НЕ Объект В
		|						(ВЫБРАТЬ
		|							ЕстьСобытиеПервичногоЗаполнения.Сделка КАК Сделка
		|						ИЗ
		|							ЕстьСобытиеПервичногоЗаполнения КАК ЕстьСобытиеПервичногоЗаполнения)
		|				И НЕ Объект ЕСТЬ NULL) КАК ОбъектыВРаботеОстатки
		|ГДЕ
		|	ОбъектыВРаботеОстатки.Объект ССЫЛКА Справочник.ДолговыеОбязательства
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсполнительныеДокументы.Владелец КАК Владелец,
		|	МАКСИМУМ(ИсполнительныеДокументы.Ссылка) КАК Ссылка
		|ПОМЕСТИТЬ ИсполДоки
		|ИЗ
		|	Справочник.ИсполнительныеДокументы КАК ИсполнительныеДокументы
		|ГДЕ
		|	НЕ ИсполнительныеДокументы.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсполнительныеДокументы.Владелец
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Владелец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВРаботе.Обязательство КАК Обязательство,
		|	ВРаботе.Должник КАК Должник,
		|	НеденежныеОбязательства.Ссылка КАК НеденежноеОбязательство,
		|	ДелоОНедееспособностиСубъекта.Ссылка КАК Дееспособность,
		|	ДелоОБанкротстве.Ссылка КАК Банкротство,
		|	ДоговорМикрозайма.Ссылка КАК ДоговорМКЗ,
		|	РеструктуризацияМикрозайма.Ссылка КАК РеструктуризацияМКЗ,
		|	СудебноеДело.Ссылка КАК СудебноеДело,
		|	Обеспечительства.Ссылка КАК Обеспечительство,
		|	СведенияОбИзмененииДоговора.Ссылка КАК СведенияОбИзмененииДоговора,
		|	ИсполДоки.Ссылка КАК ИсполДок
		|ИЗ
		|	ВРаботе КАК ВРаботе
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НеденежныеОбязательства КАК НеденежныеОбязательства
		|		ПО ВРаботе.Обязательство = НеденежныеОбязательства.ОбъектОбязательства
		|			И (НеденежныеОбязательства.ПометкаУдаления = ЛОЖЬ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДелоОНедееспособностиСубъекта КАК ДелоОНедееспособностиСубъекта
		|		ПО ВРаботе.Должник = ДелоОНедееспособностиСубъекта.Владелец
		|			И (ДелоОНедееспособностиСубъекта.ПометкаУдаления = ЛОЖЬ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДелоОБанкротстве КАК ДелоОБанкротстве
		|		ПО ВРаботе.Должник = ДелоОБанкротстве.Контрагент
		|			И (ДелоОБанкротстве.ПометкаУдаления = ЛОЖЬ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорМикрозайма КАК ДоговорМикрозайма
		|		ПО ВРаботе.Обязательство = ДоговорМикрозайма.Займ
		|			И (ДоговорМикрозайма.ПометкаУдаления = ЛОЖЬ)
		|			И (ДоговорМикрозайма.Проведен)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеструктуризацияМикрозайма КАК РеструктуризацияМикрозайма
		|		ПО ВРаботе.Обязательство = РеструктуризацияМикрозайма.Займ
		|			И (РеструктуризацияМикрозайма.ПометкаУдаления = ЛОЖЬ)
		|			И (РеструктуризацияМикрозайма.Проведен)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СудебноеДело КАК СудебноеДело
		|		ПО ВРаботе.Обязательство = СудебноеДело.Займ
		|			И (СудебноеДело.ПометкаУдаления = ЛОЖЬ)
		|			И (СудебноеДело.Проведен)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Обеспечительства КАК Обеспечительства
		|		ПО ВРаботе.Обязательство = Обеспечительства.ОбъектОбеспечительства
		|			И (Обеспечительства.ПометкаУдаления = ЛОЖЬ)
		|			И (Обеспечительства.Проведен)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОбИзмененииДоговора КАК СведенияОбИзмененииДоговора
		|		ПО ВРаботе.Обязательство = СведенияОбИзмененииДоговора.ОбъектУчета
		|			И (СведенияОбИзмененииДоговора.ПометкаУдаления = ЛОЖЬ)
		|			И (СведенияОбИзмененииДоговора.Проведен)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИсполДоки КАК ИсполДоки
		|		ПО ВРаботе.Обязательство = ИсполДоки.Владелец
		|ГДЕ
		|	ВРаботе.Обязательство = &Обязательство
		|	И ВРаботе.Должник = &Должник";
	
	мСобытия = Новый Массив;
	мСобытия.Добавить(Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", "0.0")); 
	мСобытия.Добавить(Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", "2.11.2"));	
	
	Запрос.УстановитьПараметр("Событие", мСобытия);
	Запрос.УстановитьПараметр("Обязательство", Параметры.Обязательство);
	Запрос.УстановитьПараметр("Должник", Параметры.Должник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВсегоОбъектов = ВыборкаДетальныеЗаписи.Количество();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДатаИзРеквизита = "";
		НоваяЗапись = РегистрыСведений.КредитныеИсторииДанныеСделки.СоздатьМенеджерЗаписи();
		Если НачалоДня(ДатаСобытия) = Дата("19950126") Тогда
			ДатаИзРеквизита = ОбъектыСервер.ПолучитьЗначениеСвойства(ВыборкаДетальныеЗаписи.Обязательство, КодРеквизита);
			НоваяЗапись.ДатаСобытия = ?(ЗначениеЗаполнено(ДатаИзРеквизита), ДатаИзРеквизита, ТекущаяДатаСеанса());
		Иначе  
			НоваяЗапись.ДатаСобытия = ДатаСобытия;
		КонецЕсли;
		НоваяЗапись.Сделка = ВыборкаДетальныеЗаписи.Обязательство;
		НоваяЗапись.Событие = ВыбратьПервоеСобытиеСделки(ВыборкаДетальныеЗаписи.Обязательство, ИсточникСобытия);
		НоваяЗапись.ДокументСобытие = ИсточникСобытия;
		Настройка = ИсточникСобытия;
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
		ТЗ = Настройка.Сделка.Выгрузить();
		Строки = УдалитьОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗ); 
		Результат = Новый Массив();
		Для Каждого Элемент Из Строки Цикл
			Результат.Добавить(Новый Структура("ИмяТаблицы, Поле, НБКИФЛ, НБКИЮЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение, Функция, СтрокаДляПолученияЗначения, КодДопСвойства,
			| ОбъектДопСвойства, СтрокаХранилище","Сделка", Элемент.Поле, Элемент.НомерПоказателяНБКИФЛ, Элемент.НомерПоказателяНБКИЮЛ,  Элемент.НаименованиеПоляРегистраКИ, Элемент.ЗаполнятьПоУмолчанию, Элемент.Значение, Элемент.Функция,
			Элемент.СтрокаДляПолученияЗначения, Элемент.КодДопСвойства, Элемент.ОбъектДопСвойства, Элемент.СтрокаХранилище));	
		КонецЦикла;
		
		НоваяЗапись.Продан = "0";
		НоваяЗапись.ЧастичнаяПродажа = "0";

		мсЗначения = Новый Массив;
		Для Каждого ТекСтрокаПодстановки Из Результат Цикл 
			ТекНастройка = Новый Структура("Поле, НБКИФЛ, НБКИЮЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение",
			ТекСтрокаПодстановки.Поле, ТекСтрокаПодстановки.НБКИФЛ, ТекСтрокаПодстановки.НБКИЮЛ, ТекСтрокаПодстановки.НаименованиеПоляРегистраКИ, ТекСтрокаПодстановки.ЗаполнятьПоУмолчанию); 
			
			Значение = УЭДСервер.ГенерацияЗначениия(ТекСтрокаПодстановки, Ложь, НоваяЗапись.Сделка, НоваяЗапись.Сделка);
			ФункцияОпределена = УЭДСервер.ФункцияУспешноОпределена(ТекСтрокаПодстановки);
			Если ФункцияОпределена Тогда
				Значение = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(ТекСтрокаПодстановки.Функция, НоваяЗапись.Сделка, Значение);
				Если ТипЗнч(Значение) <> Тип("ТаблицаЗначений") Тогда
					Значение = СокрЛП(Значение);
				КонецЕсли;	
				ТекНастройка.Значение = Значение;
				мсЗначения.Добавить(ТекНастройка);
			Иначе 	
				Значение = СокрЛП(Значение);
				ТекНастройка.Значение = Значение;
				мсЗначения.Добавить(ТекНастройка);
			КонецЕсли; 
		КонецЦикла;	  
		
		Для Каждого структура Из мсЗначения Цикл
			
			Если ЗначениеЗаполнено(Структура.НаименованиеПоляРегистраКИ) Тогда
				НаименованиеПоляРегистраКИ = Структура.НаименованиеПоляРегистраКИ;
				ЗначениеВРегистр = Структура.Значение;
				Если Структура.ЗаполнятьПоУмолчанию И НЕ ЗначениеЗаполнено(Структура.Значение) Тогда
					ЗначениеВРегистр = ВычислитьПараметрПоУмолчанию(Структура.НБКИФЛ, ВыборкаДетальныеЗаписи, НоваяЗапись.Сделка);
				КонецЕсли;
				ЗначениеВРегистр = ОбработатьЗначенияПризнаков(ЗначениеВРегистр);  
				Если Структура.НБКИФЛ = "C25.8" Тогда 
					ДатаРасчета = ?(ЗначениеЗаполнено(Структура.Значение), Структура.Значение, ТекущаяДатаСеанса());
				Иначе					
					НоваяЗапись[НаименованиеПоляРегистраКИ] = ЗначениеВРегистр;
				КонецЕсли; 
				
			Иначе
				Продолжить;
			КонецЕсли;
		
			
		КонецЦикла;	
		
		Если Не ЗначениеЗаполнено(НоваяЗапись.ДатаПередачиФинансирования) Тогда
			НоваяЗапись.ДатаПередачиФинансирования = НоваяЗапись.ДатаНачалаСделки;
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(НоваяЗапись.ДатаВыходаНаПросрочку) Тогда
			НоваяЗапись.ДатаВыходаНаПросрочку = НоваяЗапись.ДатаОкончанияСделки;
		КонецЕсли; 
		
				
		Если Не ЗначениеЗаполнено(НоваяЗапись.ДатаРасчетаСрочнойЗадолженности) Тогда
			НоваяЗапись.ДатаРасчетаСрочнойЗадолженности = ДатаРасчета;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НоваяЗапись.ДатаРасчетаПросроченнойЗадолженности) Тогда
			НоваяЗапись.ДатаРасчетаПросроченнойЗадолженности = ДатаРасчета;
		КонецЕсли;   
		
		Если Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v3 И Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v4 Тогда
			КредитныеИсторииИзменения.ЗаменитьНеиспользуемыеКодыВидаКредита(НоваяЗапись.КодНБКИВидКредита); 
			КредитныеИсторииИзменения.ЗаменитьНеиспользуемыеКодыТипаКредита(НоваяЗапись.КодНБКИТипКредита);
		КонецЕсли;

		
		НоваяЗапись.Записать();
		НоваяЗапись = Неопределено; 
					
		
		ДатаСобытияСуд = ДатаСобытия;
		
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СудебноеДело) Тогда
			ДатаСобытияСуд = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СудебноеДело.ДатаИска), ВыборкаДетальныеЗаписи.СудебноеДело.ДатаИска, ВыборкаДетальныеЗаписи.СудебноеДело.ДатаРешения);
			КредитныеИстории.ЗаписатьСобытиеСделки(ВыборкаДетальныеЗаписи.Обязательство, ДатаСобытияСуд, ВыборкаДетальныеЗаписи.СудебноеДело, "2.6");
		КонецЕсли;   
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИсполДок) Тогда
			ДатаСобытияИД = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИсполДок.ДатаПринятияСудебногоАкта), ВыборкаДетальныеЗаписи.ИсполДок.ДатаПринятияСудебногоАкта, ВыборкаДетальныеЗаписи.ИсполДок.ДатаИД);
			Если ДатаСобытияИД = ДатаСобытияСуд Тогда
				ДатаСобытияИД = ДатаСобытияИД + 1; 
			КонецЕсли;	 
			КредитныеИстории.ЗаписатьСобытиеСделки(ВыборкаДетальныеЗаписи.Обязательство, ДатаСобытияИД, ВыборкаДетальныеЗаписи.ИсполДок, "2.6");
		КонецЕсли; 
		
		ЗаписатьПлатежиПослеНоября(ВыборкаДетальныеЗаписи.Обязательство);
		
		
		
		ЭтоФизЛицо = "";
		Если ВыборкаДетальныеЗаписи.Должник.ЮрФизЛицо = Справочники.ЮрФизЛицо.ФизЛицо Тогда
			ЭтоФизЛицо  = Истина;
		ИначеЕсли ВыборкаДетальныеЗаписи.Должник.ЮрФизЛицо = Справочники.ЮрФизЛицо.ЮрЛицо Тогда
			ЭтоФизЛицо  = Ложь;
		Иначе
			ТипДолжника = ВыборкаДетальныеЗаписи.Должник.ЮрФизЛицо;  
			НаборЗаписей = РегистрыСведений.ТипДолжникаПризнак.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ТипКонтрагента.Установить(ТипДолжника);
			НаборЗаписей.Прочитать();
			Для каждого Запись из НаборЗаписей Цикл
				Если Запись.ФизическоеЛицо Тогда 
					ЭтоФизЛицо = Истина;
				Конецесли;
				
				Если Запись.ЮридическоеЛицо Тогда 
					ЭтоФизЛицо = Ложь;
				Конецесли;
				
				Если Запись.ИндивидуальныйПредприниматель Тогда 
					ЭтоФизЛицо  = Истина;
				Конецесли;
				
			КонецЦикла;			
		КонецЕсли;	 
		
		
		Если ЭтоФизЛицо Тогда 		
			НоваяЗапись = РегистрыСведений.КредитныеИсторииДанныеФизЛица.СоздатьМенеджерЗаписи();
			НоваяЗапись.ДатаСобытия = ?(ЗначениеЗаполнено(ДатаИзРеквизита), ДатаИзРеквизита, ДатаСобытия); 
			НоваяЗапись.Должник = ВыборкаДетальныеЗаписи.Должник;
			НоваяЗапись.Событие = Справочники.КредитныеИсторииСобытияСубъекта.НайтиПоРеквизиту("КодНБКИ", "0.0"); 
			НоваяЗапись.ДокументСобытие = ИсточникСобытия;
			Настройка = ИсточникСобытия;
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
			ТЗ = Настройка.СубъектФизическоеЛицо.Выгрузить();
			Строки = УдалитьОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗ); 
			Результат = Новый Массив();
			Для Каждого Элемент Из Строки Цикл
				Результат.Добавить(Новый Структура("ИмяТаблицы, Поле, НБКИФЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение, Функция, СтрокаДляПолученияЗначения, КодДопСвойства,
				| ОбъектДопСвойства, СтрокаХранилище","СубъектФизическоеЛицо", Элемент.Поле, Элемент.НомерПоказателяНБКИФЛ, Элемент.НаименованиеПоляРегистраКИ, Элемент.ЗаполнятьПоУмолчанию, Элемент.Значение, Элемент.Функция,
				Элемент.СтрокаДляПолученияЗначения, Элемент.КодДопСвойства, Элемент.ОбъектДопСвойства, Элемент.СтрокаХранилище));	
			КонецЦикла;
			
			
			
			мсЗначения = Новый Массив;
			Для Каждого ТекСтрокаПодстановки Из Результат Цикл 
				ТекНастройка = Новый Структура("Поле, НБКИФЛ, НаименованиеПоляРегистраКИ ,ЗаполнятьПоУмолчанию, Значение",
				ТекСтрокаПодстановки.Поле, ТекСтрокаПодстановки.НБКИФЛ, ТекСтрокаПодстановки.НаименованиеПоляРегистраКИ, ТекСтрокаПодстановки.ЗаполнятьПоУмолчанию); 
				
				Значение = УЭДСервер.ГенерацияЗначениия(ТекСтрокаПодстановки, Ложь, ВыборкаДетальныеЗаписи.Обязательство, ВыборкаДетальныеЗаписи.Обязательство);
				ФункцияОпределена = УЭДСервер.ФункцияУспешноОпределена(ТекСтрокаПодстановки);
				Если ФункцияОпределена Тогда
					Значение = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(ТекСтрокаПодстановки.Функция, НоваяЗапись.Должник, Значение);
					Если ТипЗнч(Значение) <> Тип("ТаблицаЗначений") Тогда
						Значение = СокрЛП(Значение);
					КонецЕсли;	
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				Иначе 	
					Значение = СокрЛП(Значение);
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				КонецЕсли; 
			КонецЦикла;	  
			
			МассивАдрес = Новый Массив;
			Для Каждого структура Из мсЗначения Цикл   
				Если ЗначениеЗаполнено(Структура.НаименованиеПоляРегистраКИ) Тогда
					НаименованиеПоляРегистраКИ = Структура.НаименованиеПоляРегистраКИ;
					ЗначениеВРегистр = Структура.Значение;
					//Если Структура.ЗаполнятьПоУмолчанию Тогда
					//	ЗначениеВРегистр = ВычислитьПараметрПоУмолчанию(Структура.НБКИФЛ, ВыборкаДетальныеЗаписи, НоваяЗапись.Сделка);
					//КонецЕсли;
					ЗначениеВРегистр = ОбработатьЗначенияПризнаков(ЗначениеВРегистр); 
					
					Если Структура.НБКИФЛ = "C3.2" Тогда   
						Если Не ЗначениеЗаполнено(ЗначениеВРегистр) Тогда 
							ЗначениеВРегистр = Справочники.СтраныМира.Россия;
						Иначе
							ЗначениеВРегистр = ФЗ_230.ВычислитьЗначениеСтраныОКСМ(Структура.Значение).ОКСМ;   
						КонецЕсли;
					КонецЕсли; 
					
					Если Структура.НБКИФЛ = "C4.1.2" Тогда
						структСтрана = ФЗ_230.ВычислитьЗначениеСтраныОКСМ(Структура.Значение);
						НоваяЗапись.КодСтраныДокумента = структСтрана.ОКСМ;	
						НоваяЗапись.НаименованиеИнойСтраныДокумента = структСтрана.Наименование;  
					ИначеЕсли Структура.НБКИФЛ = "C4.3.4" Тогда
						НоваяЗапись.КодНБКИДокумента = Структура.Значение;  
						Если СтрНайти(Структура.Значение, "999") > 0 Тогда 
							НоваяЗапись.НаименованиеИногоДокумента = Структура.Значение;
						КонецЕсли;	
					Иначе
						НоваяЗапись[НаименованиеПоляРегистраКИ] = ЗначениеВРегистр;
					КонецЕсли; 
				ИначеЕсли СтрНайти(Структура.НБКИФЛ, "C8.") > 0 ИЛИ СтрНайти(Структура.НБКИФЛ, "C9.") > 0 Тогда
					МассивАдрес.Добавить(Структура); 
					Продолжить;
				Иначе
					Продолжить;
				КонецЕсли; 
												
			КонецЦикла;	 
			
			Если СтрНайти(НоваяЗапись.КодНБКИДокумента, "999") > 0 и НЕ ЗначениеЗаполнено(НоваяЗапись.НаименованиеИногоДокумента) Тогда 
				НоваяЗапись.НаименованиеИногоДокумента = НоваяЗапись.КодНБКИДокумента;
			КонецЕсли;	 
			
			Если Не ЗначениеЗаполнено(НоваяЗапись.Дееспособность)  Тогда 
				СовершеннолетиеСек = 567648000;
				НоваяЗапись.Дееспособность = ?(ТекущаяДатаСеанса() - НоваяЗапись.ДатаРождения >= СовершеннолетиеСек, "1", "2");
			КонецЕсли;
			НоваяЗапись.Записать();
			НоваяЗапись = Неопределено;
			ЗаписатьАдресОбъекта(МассивАдрес, ВыборкаДетальныеЗаписи.Должник, ЭтоФизЛицо, Настройка.СтроковыеАдреса);
		Иначе  
			НоваяЗапись = РегистрыСведений.КредитныеИсторииДанныеЮрЛица.СоздатьМенеджерЗаписи();
			НоваяЗапись.ДатаСобытия = ?(ЗначениеЗаполнено(ДатаИзРеквизита), ДатаИзРеквизита, ДатаСобытия);  
			НоваяЗапись.Должник = ВыборкаДетальныеЗаписи.Должник;
			НоваяЗапись.Событие = Справочники.КредитныеИсторииСобытияСубъекта.НайтиПоРеквизиту("КодНБКИ", "0.0");
			НоваяЗапись.ДокументСобытие = ИсточникСобытия;
			Настройка = ИсточникСобытия;
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
			ТЗ = Настройка.СубъектЮридическоеЛицо.Выгрузить();
			Строки = УдалитьОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗ); 
			Результат = Новый Массив();
			Для Каждого Элемент Из Строки Цикл
				Результат.Добавить(Новый Структура("ИмяТаблицы, Поле, НБКИЮЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение, Функция, СтрокаДляПолученияЗначения, КодДопСвойства,
				| ОбъектДопСвойства, СтрокаХранилище","СубъектЮридическоеЛицо", Элемент.Поле, Элемент.НомерПоказателяНБКИЮЛ, Элемент.НаименованиеПоляРегистраКИ, Элемент.ЗаполнятьПоУмолчанию, Элемент.Значение, Элемент.Функция,
				Элемент.СтрокаДляПолученияЗначения, Элемент.КодДопСвойства, Элемент.ОбъектДопСвойства, Элемент.СтрокаХранилище));	
			КонецЦикла;	
			
			мсЗначения = Новый Массив;
			Для Каждого ТекСтрокаПодстановки Из Результат Цикл 
				ТекНастройка = Новый Структура("Поле, НБКИЮЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение",
				ТекСтрокаПодстановки.Поле, ТекСтрокаПодстановки.НБКИЮЛ, ТекСтрокаПодстановки.НаименованиеПоляРегистраКИ, ТекСтрокаПодстановки.ЗаполнятьПоУмолчанию); 
				
				Значение = УЭДСервер.ГенерацияЗначениия(ТекСтрокаПодстановки, Ложь, ВыборкаДетальныеЗаписи.Обязательство, ВыборкаДетальныеЗаписи.Обязательство);
				ФункцияОпределена = УЭДСервер.ФункцияУспешноОпределена(ТекСтрокаПодстановки);
				Если ФункцияОпределена Тогда
					Значение = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(ТекСтрокаПодстановки.Функция, НоваяЗапись.Должник, Значение);
					Если ТипЗнч(Значение) <> Тип("ТаблицаЗначений") Тогда
						Значение = СокрЛП(Значение);
					КонецЕсли;	
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				Иначе 	
					Значение = СокрЛП(Значение);
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				КонецЕсли; 
			КонецЦикла;	  
			
			МассивАдрес = Новый Массив;
			Для Каждого структура Из мсЗначения Цикл
				
				Если ЗначениеЗаполнено(Структура.НаименованиеПоляРегистраКИ) Тогда
					НаименованиеПоляРегистраКИ = Структура.НаименованиеПоляРегистраКИ;
					ЗначениеВРегистр = Структура.Значение;
					//Если Структура.ЗаполнятьПоУмолчанию Тогда
					//	ЗначениеВРегистр = ВычислитьПараметрПоУмолчанию(Структура.НБКИФЛ, ВыборкаДетальныеЗаписи, НоваяЗапись.Сделка);
					//КонецЕсли;
					ЗначениеВРегистр = ОбработатьЗначенияПризнаков(ЗначениеВРегистр); 
					НоваяЗапись[НаименованиеПоляРегистраКИ] = ЗначениеВРегистр;				
				ИначеЕсли СтрНайти(Структура.НБКИЮЛ, "B2.") > 0 Тогда
					МассивАдрес.Добавить(Структура); 
					Продолжить;
				Иначе
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;	
			НоваяЗапись.Записать();
			НоваяЗапись = Неопределено;
			
            ЗаписатьАдресОбъекта(МассивАдрес, ВыборкаДетальныеЗаписи.Должник, ЭтоФизЛицо, Настройка.СтроковыеАдреса);
			
		КонецЕсли; 
		
		ПроцентВыполнения = (ПрогрессВыполнения / ВсегоОбъектов)*100;
		ПроцентВыполнения = Окр(ПроцентВыполнения,0);    
		
		ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения,СокрЛП(ВыборкаДетальныеЗаписи.Обязательство));
		
		ПрогрессВыполнения = ПрогрессВыполнения + 1;
		ДатаСобытия = ДатаСобытия + 1;
	КонецЦикла;  
	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КредитныеИсторииДанныеФизЛица.Должник КАК Должник,
		|	КредитныеИсторииДанныеФизЛица.Событие КАК Событие
		|ПОМЕСТИТЬ ЕстьСобытиеПервичногоЗаполнения
		|ИЗ
		|	РегистрСведений.КредитныеИсторииДанныеФизЛица КАК КредитныеИсторииДанныеФизЛица
		|ГДЕ
		|	КредитныеИсторииДанныеФизЛица.Событие = &Событие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КредитныеИсторииДанныеЮрЛица.Должник,
		|	КредитныеИсторииДанныеЮрЛица.Событие
		|ИЗ
		|	РегистрСведений.КредитныеИсторииДанныеЮрЛица КАК КредитныеИсторииДанныеЮрЛица
		|ГДЕ
		|	КредитныеИсторииДанныеЮрЛица.Событие = &Событие
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Должник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Поручительства.Поручитель КАК Должник,
		|	ЕстьСобытиеПервичногоЗаполнения.Событие КАК ПервЗаполнение,
		|	Поручительства.ДолговоеОбязательство КАК Обязательство
		|ИЗ
		|	РегистрСведений.Поручительства КАК Поручительства
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЕстьСобытиеПервичногоЗаполнения КАК ЕстьСобытиеПервичногоЗаполнения
		|		ПО Поручительства.Поручитель = ЕстьСобытиеПервичногоЗаполнения.Должник
		|ГДЕ
		|	ЕстьСобытиеПервичногоЗаполнения.Событие ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Событие", Справочники.КредитныеИсторииСобытияСубъекта.НайтиПоРеквизиту("КодНБКИ", "0.0"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВсегоОбъектов = ВыборкаДетальныеЗаписи.Количество();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
		ЭтоФизЛицо = "";
		Если ВыборкаДетальныеЗаписи.Должник.ЮрФизЛицо = Справочники.ЮрФизЛицо.ФизЛицо Тогда
			ЭтоФизЛицо  = Истина;
		ИначеЕсли ВыборкаДетальныеЗаписи.Должник.ЮрФизЛицо = Справочники.ЮрФизЛицо.ЮрЛицо Тогда
			ЭтоФизЛицо  = Ложь;
		Иначе
			ТипДолжника = ВыборкаДетальныеЗаписи.Должник.ЮрФизЛицо;  
			НаборЗаписей = РегистрыСведений.ТипДолжникаПризнак.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ТипКонтрагента.Установить(ТипДолжника);
			НаборЗаписей.Прочитать();
			Для каждого Запись из НаборЗаписей Цикл
				Если Запись.ФизическоеЛицо Тогда 
					ЭтоФизЛицо = Истина;
				Конецесли;
				
				Если Запись.ЮридическоеЛицо Тогда 
					ЭтоФизЛицо = Ложь;
				Конецесли;
				
				Если Запись.ИндивидуальныйПредприниматель Тогда 
					ЭтоФизЛицо  = Истина;
				Конецесли;
				
			КонецЦикла;			
		КонецЕсли;	 
		
		
		Если ЭтоФизЛицо Тогда 		
			НоваяЗапись = РегистрыСведений.КредитныеИсторииДанныеФизЛица.СоздатьМенеджерЗаписи();
			ДатаИзРеквизита = "";
			Если НачалоДня(ДатаСобытия) = Дата("19950126") Тогда
				ДатаИзРеквизита = ОбъектыСервер.ПолучитьЗначениеСвойства(ВыборкаДетальныеЗаписи.Обязательство, КодРеквизита);
				НоваяЗапись.ДатаСобытия = ?(ЗначениеЗаполнено(ДатаИзРеквизита), ДатаИзРеквизита, ТекущаяДатаСеанса());
			Иначе  
				НоваяЗапись.ДатаСобытия = ДатаСобытия;
			КонецЕсли;
			
			НоваяЗапись.Должник = ВыборкаДетальныеЗаписи.Должник;
			НоваяЗапись.Событие = Справочники.КредитныеИсторииСобытияСубъекта.НайтиПоРеквизиту("КодНБКИ", "0.0"); 
			НоваяЗапись.ДокументСобытие = ИсточникСобытия;
			Настройка = ИсточникСобытия;
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
			ТЗ = Настройка.СубъектПоручитель.Выгрузить();
			Строки = УдалитьОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗ); 
			Результат = Новый Массив();
			Для Каждого Элемент Из Строки Цикл
				Результат.Добавить(Новый Структура("ИмяТаблицы, Поле, НБКИФЛ, ЗаполнятьПоУмолчанию, НаименованиеПоляРегистраКИ, Значение, Функция, СтрокаДляПолученияЗначения, КодДопСвойства,
				| ОбъектДопСвойства, СтрокаХранилище","СубъектПоручитель", Элемент.Поле, Элемент.НомерПоказателяНБКИФЛ, Элемент.НаименованиеПоляРегистраКИ, Элемент.ЗаполнятьПоУмолчанию, Элемент.НаименованиеПоляРегистраКИ, Элемент.Значение, Элемент.Функция,
				Элемент.СтрокаДляПолученияЗначения, Элемент.КодДопСвойства, Элемент.ОбъектДопСвойства, Элемент.СтрокаХранилище));	
			КонецЦикла;
			
			
			
			мсЗначения = Новый Массив;
			Для Каждого ТекСтрокаПодстановки Из Результат Цикл 
				ТекНастройка = Новый Структура("Поле, НБКИФЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение",
				ТекСтрокаПодстановки.Поле, ТекСтрокаПодстановки.НБКИФЛ, ТекСтрокаПодстановки.НаименованиеПоляРегистраКИ, ТекСтрокаПодстановки.ЗаполнятьПоУмолчанию); 
				
				Значение = УЭДСервер.ГенерацияЗначениия(ТекСтрокаПодстановки, Ложь, ВыборкаДетальныеЗаписи.Обязательство, ВыборкаДетальныеЗаписи.Обязательство);
				ФункцияОпределена = УЭДСервер.ФункцияУспешноОпределена(ТекСтрокаПодстановки);
				Если ФункцияОпределена Тогда
					Значение = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(ТекСтрокаПодстановки.Функция, НоваяЗапись.Должник, Значение);
					Если ТипЗнч(Значение) <> Тип("ТаблицаЗначений") Тогда
						Значение = СокрЛП(Значение);
					КонецЕсли;	
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				Иначе 	
					Значение = СокрЛП(Значение);
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				КонецЕсли; 
			КонецЦикла;	  
			
			МассивАдрес = Новый Массив;
			Для Каждого структура Из мсЗначения Цикл   
				Если ЗначениеЗаполнено(Структура.НаименованиеПоляРегистраКИ) Тогда
					НаименованиеПоляРегистраКИ = Структура.НаименованиеПоляРегистраКИ;
					ЗначениеВРегистр = Структура.Значение;
					//Если Структура.ЗаполнятьПоУмолчанию Тогда
					//	ЗначениеВРегистр = ВычислитьПараметрПоУмолчанию(Структура.НБКИФЛ, ВыборкаДетальныеЗаписи, НоваяЗапись.Сделка);
					//КонецЕсли;
					ЗначениеВРегистр = ОбработатьЗначенияПризнаков(ЗначениеВРегистр); 
					
					Если Структура.НБКИФЛ = "C3.2" Тогда   
						Если Не ЗначениеЗаполнено(ЗначениеВРегистр) Тогда 
							ЗначениеВРегистр = Справочники.СтраныМира.Россия;
						Иначе
							ЗначениеВРегистр = ФЗ_230.ВычислитьЗначениеСтраныОКСМ(Структура.Значение).ОКСМ;   
						КонецЕсли;
					КонецЕсли; 
					
					Если Структура.НБКИФЛ = "C4.1.2" Тогда
						структСтрана = ФЗ_230.ВычислитьЗначениеСтраныОКСМ(Структура.Значение);
						НоваяЗапись.КодСтраныДокумента = структСтрана.ОКСМ;	
						НоваяЗапись.НаименованиеИнойСтраныДокумента = структСтрана.Наименование;   
					ИначеЕсли Структура.НБКИФЛ = "C4.3.4" Тогда
						НоваяЗапись.КодНБКИДокумента = Структура.Значение;  
						Если СтрНайти(Структура.Значение, "999") > 0 Тогда 
							НоваяЗапись.НаименованиеИногоДокумента = Структура.Значение;
						КонецЕсли;	
					Иначе
						НоваяЗапись[НаименованиеПоляРегистраКИ] = ЗначениеВРегистр;
					КонецЕсли; 					
				ИначеЕсли СтрНайти(Структура.НБКИФЛ, "C8.") > 0 ИЛИ СтрНайти(Структура.НБКИФЛ, "C9.") > 0 Тогда
					МассивАдрес.Добавить(Структура); 
					Продолжить;  
				Иначе 
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;	
			
			Если СтрНайти(НоваяЗапись.КодНБКИДокумента, "999") > 0 и НЕ ЗначениеЗаполнено(НоваяЗапись.НаименованиеИногоДокумента) Тогда 
				НоваяЗапись.НаименованиеИногоДокумента = НоваяЗапись.КодНБКИДокумента;
			КонецЕсли;	 
			
			Если Не ЗначениеЗаполнено(НоваяЗапись.Дееспособность) Тогда 
				СовершеннолетиеСек = 567648000;
				НоваяЗапись.Дееспособность = ?(ТекущаяДатаСеанса() - НоваяЗапись.ДатаРождения >= СовершеннолетиеСек, "1", "2");
			КонецЕсли;	
			

			НоваяЗапись.Записать();
			НоваяЗапись = Неопределено;
			ЗаписатьАдресОбъекта(МассивАдрес, ВыборкаДетальныеЗаписи.Должник, ЭтоФизЛицо, Настройка.СтроковыеАдреса);
		Иначе  
			НоваяЗапись = РегистрыСведений.КредитныеИсторииДанныеЮрЛица.СоздатьМенеджерЗаписи();
			Если НачалоДня(ДатаСобытия) = Дата("19950126") Тогда
				ДатаИзРеквизита = ОбъектыСервер.ПолучитьЗначениеСвойства(ВыборкаДетальныеЗаписи.Обязательство, КодРеквизита);
				НоваяЗапись.ДатаСобытия = ?(ЗначениеЗаполнено(ДатаИзРеквизита), ДатаИзРеквизита, ТекущаяДатаСеанса());
			Иначе  
				НоваяЗапись.ДатаСобытия = ДатаСобытия;
			КонецЕсли; 
			НоваяЗапись.Должник = ВыборкаДетальныеЗаписи.Должник;
			НоваяЗапись.Событие = Справочники.КредитныеИсторииСобытияСубъекта.НайтиПоРеквизиту("КодНБКИ", "0.0");
			НоваяЗапись.ДокументСобытие = ИсточникСобытия;
			Настройка = ИсточникСобытия;
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
			ТЗ = Настройка.СубъектЮридическоеЛицо.Выгрузить();
			Строки = УдалитьОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗ); 
			Результат = Новый Массив();
			Для Каждого Элемент Из Строки Цикл
				Результат.Добавить(Новый Структура("ИмяТаблицы, Поле, НБКИЮЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение, Функция, СтрокаДляПолученияЗначения, КодДопСвойства,
				| ОбъектДопСвойства, СтрокаХранилище", "СубъектЮридическоеЛицо", Элемент.Поле, Элемент.НомерПоказателяНБКИЮЛ, Элемент.НаименованиеПоляРегистраКИ, Элемент.ЗаполнятьПоУмолчанию, Элемент.Значение, Элемент.Функция,
				Элемент.СтрокаДляПолученияЗначения, Элемент.КодДопСвойства, Элемент.ОбъектДопСвойства, Элемент.СтрокаХранилище));	
			КонецЦикла;
			
			
			
			мсЗначения = Новый Массив;
			Для Каждого ТекСтрокаПодстановки Из Результат Цикл 
				ТекНастройка = Новый Структура("Поле, НБКИЮЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение",
				ТекСтрокаПодстановки.Поле, ТекСтрокаПодстановки.НБКИЮЛ, ТекСтрокаПодстановки.НаименованиеПоляРегистраКИ, ТекСтрокаПодстановки.ЗаполнятьПоУмолчанию); 
				
				Значение = УЭДСервер.ГенерацияЗначениия(ТекСтрокаПодстановки, Ложь, ВыборкаДетальныеЗаписи.Обязательство, ВыборкаДетальныеЗаписи.Обязательство);
				ФункцияОпределена = УЭДСервер.ФункцияУспешноОпределена(ТекСтрокаПодстановки);
				Если ФункцияОпределена Тогда
					Значение = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(ТекСтрокаПодстановки.Функция, НоваяЗапись.Должник, Значение);
					Если ТипЗнч(Значение) <> Тип("ТаблицаЗначений") Тогда
						Значение = СокрЛП(Значение);
					КонецЕсли;	
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				Иначе 	
					Значение = СокрЛП(Значение);
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				КонецЕсли; 
			КонецЦикла;	  
			
			МассивАдрес = Новый Массив;
			Для Каждого структура Из мсЗначения Цикл
				
				Если ЗначениеЗаполнено(Структура.НаименованиеПоляРегистраКИ) Тогда
					НаименованиеПоляРегистраКИ = Структура.НаименованиеПоляРегистраКИ;
					ЗначениеВРегистр = Структура.Значение;
					//Если Структура.ЗаполнятьПоУмолчанию Тогда
					//	ЗначениеВРегистр = ВычислитьПараметрПоУмолчанию(Структура.НБКИФЛ, ВыборкаДетальныеЗаписи, НоваяЗапись.Сделка);
					//КонецЕсли;
					ЗначениеВРегистр = ОбработатьЗначенияПризнаков(ЗначениеВРегистр); 
					НоваяЗапись[НаименованиеПоляРегистраКИ] = ЗначениеВРегистр;				
				ИначеЕсли СтрНайти(Структура.НБКИЮЛ, "B2.") > 0 Тогда
					МассивАдрес.Добавить(Структура); 
					Продолжить;
				Иначе
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;	
			НоваяЗапись.Записать();
			НоваяЗапись = Неопределено;
			
            ЗаписатьАдресОбъекта(МассивАдрес, ВыборкаДетальныеЗаписи.Должник, ЭтоФизЛицо, Настройка.СтроковыеАдреса);
			
		КонецЕсли; 
		
		ПроцентВыполнения = (ПрогрессВыполнения / ВсегоОбъектов)*100;
		ПроцентВыполнения = Окр(ПроцентВыполнения,0);    
		
		ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения,СокрЛП(ВыборкаДетальныеЗаписи.Обязательство));
		
		ПрогрессВыполнения = ПрогрессВыполнения + 1;
		ДатаСобытия = ДатаСобытия + 1;
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КредитныеИсторииДанныеФизЛица.Должник КАК Должник,
		|	КредитныеИсторииДанныеФизЛица.Событие КАК Событие
		|ПОМЕСТИТЬ ЕстьСобытиеПервичногоЗаполнения
		|ИЗ
		|	РегистрСведений.КредитныеИсторииДанныеФизЛица КАК КредитныеИсторииДанныеФизЛица
		|ГДЕ
		|	КредитныеИсторииДанныеФизЛица.Событие = &Событие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КредитныеИсторииДанныеЮрЛица.Должник,
		|	КредитныеИсторииДанныеЮрЛица.Событие
		|ИЗ
		|	РегистрСведений.КредитныеИсторииДанныеЮрЛица КАК КредитныеИсторииДанныеЮрЛица
		|ГДЕ
		|	КредитныеИсторииДанныеЮрЛица.Событие = &Событие
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Должник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕстьСобытиеПервичногоЗаполнения.Событие КАК ПервЗаполнение,
		|	Наследники.ДолговоеОбязательство КАК Обязательство,
		|	Наследники.Наследник КАК Должник
		|ИЗ
		|	РегистрСведений.Наследники КАК Наследники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЕстьСобытиеПервичногоЗаполнения КАК ЕстьСобытиеПервичногоЗаполнения
		|		ПО Наследники.Наследник = ЕстьСобытиеПервичногоЗаполнения.Должник
		|ГДЕ
		|	ЕстьСобытиеПервичногоЗаполнения.Событие ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Событие", Справочники.КредитныеИсторииСобытияСубъекта.НайтиПоРеквизиту("КодНБКИ", "0.0"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВсегоОбъектов = ВыборкаДетальныеЗаписи.Количество();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
		ЭтоФизЛицо = "";
		Если ВыборкаДетальныеЗаписи.Должник.ЮрФизЛицо = Справочники.ЮрФизЛицо.ФизЛицо Тогда
			ЭтоФизЛицо  = Истина;
		ИначеЕсли ВыборкаДетальныеЗаписи.Должник.ЮрФизЛицо = Справочники.ЮрФизЛицо.ЮрЛицо Тогда
			ЭтоФизЛицо  = Ложь;
		Иначе
			ТипДолжника = ВыборкаДетальныеЗаписи.Должник.ЮрФизЛицо;  
			НаборЗаписей = РегистрыСведений.ТипДолжникаПризнак.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ТипКонтрагента.Установить(ТипДолжника);
			НаборЗаписей.Прочитать();
			Для каждого Запись из НаборЗаписей Цикл
				Если Запись.ФизическоеЛицо Тогда 
					ЭтоФизЛицо = Истина;
				Конецесли;
				
				Если Запись.ЮридическоеЛицо Тогда 
					ЭтоФизЛицо = Ложь;
				Конецесли;
				
				Если Запись.ИндивидуальныйПредприниматель Тогда 
					ЭтоФизЛицо  = Истина;
				Конецесли;
				
			КонецЦикла;			
		КонецЕсли;	 
		
		
		Если ЭтоФизЛицо Тогда 		
			НоваяЗапись = РегистрыСведений.КредитныеИсторииДанныеФизЛица.СоздатьМенеджерЗаписи();
			ДатаИзРеквизита = "";
			Если НачалоДня(ДатаСобытия) = Дата("19950126") Тогда
				ДатаИзРеквизита = ОбъектыСервер.ПолучитьЗначениеСвойства(ВыборкаДетальныеЗаписи.Обязательство, КодРеквизита);
				НоваяЗапись.ДатаСобытия = ?(ЗначениеЗаполнено(ДатаИзРеквизита), ДатаИзРеквизита, ТекущаяДатаСеанса());
			Иначе  
				НоваяЗапись.ДатаСобытия = ДатаСобытия;
			КонецЕсли;
			
			НоваяЗапись.Должник = ВыборкаДетальныеЗаписи.Должник;
			НоваяЗапись.Событие = Справочники.КредитныеИсторииСобытияСубъекта.НайтиПоРеквизиту("КодНБКИ", "0.0"); 
			НоваяЗапись.ДокументСобытие = ИсточникСобытия;
			Настройка = ИсточникСобытия;
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
			ТЗ = Настройка.СубъектНаследник.Выгрузить();
			Строки = УдалитьОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗ); 
			Результат = Новый Массив();
			Для Каждого Элемент Из Строки Цикл
				Результат.Добавить(Новый Структура("ИмяТаблицы, Поле, НБКИФЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение, Функция, СтрокаДляПолученияЗначения, КодДопСвойства,
				| ОбъектДопСвойства, СтрокаХранилище", "СубъектНаследник", Элемент.Поле, Элемент.НомерПоказателяНБКИФЛ, Элемент.НаименованиеПоляРегистраКИ, Элемент.ЗаполнятьПоУмолчанию, Элемент.Значение, Элемент.Функция,
				Элемент.СтрокаДляПолученияЗначения, Элемент.КодДопСвойства, Элемент.ОбъектДопСвойства, Элемент.СтрокаХранилище));	
			КонецЦикла;
			
			
			
			мсЗначения = Новый Массив;
			Для Каждого ТекСтрокаПодстановки Из Результат Цикл 
				ТекНастройка = Новый Структура("Поле, НБКИФЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение",
				ТекСтрокаПодстановки.Поле, ТекСтрокаПодстановки.НБКИФЛ, ТекСтрокаПодстановки.НаименованиеПоляРегистраКИ, ТекСтрокаПодстановки.ЗаполнятьПоУмолчанию); 
				
				Значение = УЭДСервер.ГенерацияЗначениия(ТекСтрокаПодстановки, Ложь, ВыборкаДетальныеЗаписи.Обязательство, ВыборкаДетальныеЗаписи.Обязательство);
				ФункцияОпределена = УЭДСервер.ФункцияУспешноОпределена(ТекСтрокаПодстановки);
				Если ФункцияОпределена Тогда
					Значение = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(ТекСтрокаПодстановки.Функция, НоваяЗапись.Должник, Значение);
					Если ТипЗнч(Значение) <> Тип("ТаблицаЗначений") Тогда
						Значение = СокрЛП(Значение);
					КонецЕсли;	
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				Иначе 	
					Значение = СокрЛП(Значение);
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				КонецЕсли; 
			КонецЦикла;	  
			
			МассивАдрес = Новый Массив;
			Для Каждого структура Из мсЗначения Цикл   
				Если ЗначениеЗаполнено(Структура.НаименованиеПоляРегистраКИ) Тогда
					НаименованиеПоляРегистраКИ = Структура.НаименованиеПоляРегистраКИ;
					ЗначениеВРегистр = Структура.Значение;
					//Если Структура.ЗаполнятьПоУмолчанию Тогда
					//	ЗначениеВРегистр = ВычислитьПараметрПоУмолчанию(Структура.НБКИФЛ, ВыборкаДетальныеЗаписи, НоваяЗапись.Сделка);
					//КонецЕсли;
					ЗначениеВРегистр = ОбработатьЗначенияПризнаков(ЗначениеВРегистр); 
					
					Если Структура.НБКИФЛ = "C3.2" Тогда   
						Если Не ЗначениеЗаполнено(ЗначениеВРегистр) Тогда 
							ЗначениеВРегистр = Справочники.СтраныМира.Россия;
						Иначе
							ЗначениеВРегистр = ФЗ_230.ВычислитьЗначениеСтраныОКСМ(Структура.Значение).ОКСМ;   
						КонецЕсли;
					КонецЕсли; 
					
					Если Структура.НБКИФЛ = "C4.1.2" Тогда
						структСтрана = ФЗ_230.ВычислитьЗначениеСтраныОКСМ(Структура.Значение);
						НоваяЗапись.КодСтраныДокумента = структСтрана.ОКСМ;	
						НоваяЗапись.НаименованиеИнойСтраныДокумента = структСтрана.Наименование;   
					ИначеЕсли Структура.НБКИФЛ = "C4.3.4" Тогда
						НоваяЗапись.КодНБКИДокумента = Структура.Значение;  
						Если СтрНайти(Структура.Значение, "999") > 0 Тогда 
							НоваяЗапись.НаименованиеИногоДокумента = Структура.Значение;
						КонецЕсли;	
					Иначе
						НоваяЗапись[НаименованиеПоляРегистраКИ] = ЗначениеВРегистр;
					КонецЕсли; 					
					
				ИначеЕсли СтрНайти(Структура.НБКИФЛ, "C8.") > 0 ИЛИ СтрНайти(Структура.НБКИФЛ, "C9.") > 0 Тогда
					МассивАдрес.Добавить(Структура); 
					Продолжить;  
				Иначе
					Продолжить;
				КонецЕсли; 
				
			КонецЦикла;	
			
			Если СтрНайти(НоваяЗапись.КодНБКИДокумента, "999") > 0 и НЕ ЗначениеЗаполнено(НоваяЗапись.НаименованиеИногоДокумента) Тогда 
				НоваяЗапись.НаименованиеИногоДокумента = НоваяЗапись.КодНБКИДокумента;
			КонецЕсли;	 
			
			Если Не ЗначениеЗаполнено(НоваяЗапись.Дееспособность) Тогда 
				СовершеннолетиеСек = 567648000;
				НоваяЗапись.Дееспособность = ?(ТекущаяДатаСеанса() - НоваяЗапись.ДатаРождения >= СовершеннолетиеСек, "1", "2");
			КонецЕсли;	

			
			НоваяЗапись.Записать();
			НоваяЗапись = Неопределено;
			ЗаписатьАдресОбъекта(МассивАдрес, ВыборкаДетальныеЗаписи.Должник, ЭтоФизЛицо, Настройка.СтроковыеАдреса);
		Иначе  
			НоваяЗапись = РегистрыСведений.КредитныеИсторииДанныеЮрЛица.СоздатьМенеджерЗаписи();
			Если НачалоДня(ДатаСобытия) = Дата("19950126") Тогда
				ДатаИзРеквизита = ОбъектыСервер.ПолучитьЗначениеСвойства(ВыборкаДетальныеЗаписи.Обязательство, КодРеквизита);
				НоваяЗапись.ДатаСобытия = ?(ЗначениеЗаполнено(ДатаИзРеквизита), ДатаИзРеквизита, ТекущаяДатаСеанса());
			Иначе  
				НоваяЗапись.ДатаСобытия = ДатаСобытия;
			КонецЕсли; 
			НоваяЗапись.Должник = ВыборкаДетальныеЗаписи.Должник;
			НоваяЗапись.Событие = Справочники.КредитныеИсторииСобытияСубъекта.НайтиПоРеквизиту("КодНБКИ", "0.0");
			НоваяЗапись.ДокументСобытие = ИсточникСобытия;
			Настройка = ИсточникСобытия;
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
			ТЗ = Настройка.СубъектЮридическоеЛицо.Выгрузить();
			Строки = УдалитьОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗ); 
			Результат = Новый Массив();
			Для Каждого Элемент Из Строки Цикл
				Результат.Добавить(Новый Структура("ИмяТаблицы, Поле, НБКИЮЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение, Функция, СтрокаДляПолученияЗначения, КодДопСвойства,
				| ОбъектДопСвойства, СтрокаХранилище","СубъектЮридическоеЛицо", Элемент.Поле, Элемент.НомерПоказателяНБКИЮЛ, Элемент.НаименованиеПоляРегистраКИ, Элемент.ЗаполнятьПоУмолчанию, Элемент.Значение, Элемент.Функция,
				Элемент.СтрокаДляПолученияЗначения, Элемент.КодДопСвойства, Элемент.ОбъектДопСвойства, Элемент.СтрокаХранилище));	
			КонецЦикла;
			
			
			
			мсЗначения = Новый Массив;
			Для Каждого ТекСтрокаПодстановки Из Результат Цикл 
				ТекНастройка = Новый Структура("Поле, НБКИЮЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение",
				ТекСтрокаПодстановки.Поле, ТекСтрокаПодстановки.НБКИЮЛ, ТекСтрокаПодстановки.НаименованиеПоляРегистраКИ, ТекСтрокаПодстановки.ЗаполнятьПоУмолчанию); 
				
				Значение = УЭДСервер.ГенерацияЗначениия(ТекСтрокаПодстановки, Ложь, ВыборкаДетальныеЗаписи.Обязательство, ВыборкаДетальныеЗаписи.Обязательство);
				ФункцияОпределена = УЭДСервер.ФункцияУспешноОпределена(ТекСтрокаПодстановки);
				Если ФункцияОпределена Тогда
					Значение = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(ТекСтрокаПодстановки.Функция, НоваяЗапись.Должник, Значение);
					Если ТипЗнч(Значение) <> Тип("ТаблицаЗначений") Тогда
						Значение = СокрЛП(Значение);
					КонецЕсли;	
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				Иначе 	
					Значение = СокрЛП(Значение);
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				КонецЕсли; 
			КонецЦикла;	  
			
			МассивАдрес = Новый Массив;
			Для Каждого структура Из мсЗначения Цикл
				
				Если ЗначениеЗаполнено(Структура.НаименованиеПоляРегистраКИ) Тогда
					НаименованиеПоляРегистраКИ = Структура.НаименованиеПоляРегистраКИ;
					ЗначениеВРегистр = Структура.Значение;
					//Если Структура.ЗаполнятьПоУмолчанию Тогда
					//	ЗначениеВРегистр = ВычислитьПараметрПоУмолчанию(Структура.НБКИФЛ, ВыборкаДетальныеЗаписи, НоваяЗапись.Сделка);
					//КонецЕсли;
					ЗначениеВРегистр = ОбработатьЗначенияПризнаков(ЗначениеВРегистр); 
					НоваяЗапись[НаименованиеПоляРегистраКИ] = ЗначениеВРегистр;				
				ИначеЕсли СтрНайти(Структура.НБКИЮЛ, "B2.") > 0 Тогда
					МассивАдрес.Добавить(Структура); 
					Продолжить;
				Иначе
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;	
			НоваяЗапись.Записать();
			НоваяЗапись = Неопределено;
			
            ЗаписатьАдресОбъекта(МассивАдрес, ВыборкаДетальныеЗаписи.Должник, ЭтоФизЛицо, Настройка.СтроковыеАдреса);
			
		КонецЕсли; 
		
		ПроцентВыполнения = (ПрогрессВыполнения / ВсегоОбъектов)*100;
		ПроцентВыполнения = Окр(ПроцентВыполнения,0);    
		
		ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения,СокрЛП(ВыборкаДетальныеЗаписи.Обязательство));
		
		ПрогрессВыполнения = ПрогрессВыполнения + 1;
		ДатаСобытия = ДатаСобытия + 1;
	КонецЦикла; 	
	

	
КонецПроцедуры


Функция ВыбратьПервоеСобытиеСделки(Сделка, Настройка) Экспорт 
	Событие = Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", "0.0");
	Если Настройка.ПисатьСобытиеПравопреемства Тогда 
		Если ЗначениеЗаполнено(Настройка.ПризнакЦессии) Тогда
			ПризнакЗначение = ОбъектыСервер.ПолучитьЗначениеСвойства(Сделка, Настройка.ПризнакЦессии.Код);
			Если ЗначениеЗаполнено(ПризнакЗначение) Тогда
				Событие = Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", "2.11.2");
			конецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Событие;
КонецФункции


Функция СобытиеСделкиЗафиксированоИсточником(Сделка, Источник, КодСобытие) Экспорт
	
	Если Константы.ИспользоватьНБКИRUTDF.Получить() = Ложь Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПустыеНастройки() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЭтоПлатеж = (ТипЗнч(Источник) = Тип("ДокументСсылка.ПоступлениеПлатежа"));
	
	Событие =  Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", КодСобытие);
	
	Если ЭтоПлатеж И КодСобытие = "2.3" Тогда
		ДатаРУТДФ = Дата("20221101");
		Если Источник.ДатаПлатежа < ДатаРУТДФ Тогда
			Зафиксировано = Истина;
		Иначе	
			НаборЗаписей = РегистрыСведений.КредитныеИсторииДанныеСделки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сделка.Установить(Сделка); 
			НаборЗаписей.Отбор.Событие.Установить(Событие);
			НаборЗаписей.Отбор.ДатаСобытия.Установить(Источник.ДатаПлатежа);
	
			НаборЗаписей.Прочитать();
			Зафиксировано = ?(НаборЗаписей.Количество() > 0, Истина, Ложь);
		КонецЕсли;
		
	Иначе
		НаборЗаписей = РегистрыСведений.КредитныеИсторииДанныеСделки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сделка.Установить(Сделка); 
		НаборЗаписей.Отбор.Событие.Установить(Событие);
		НаборЗаписей.Отбор.ДокументСобытие.Установить(Источник);
		
		НаборЗаписей.Прочитать();
		Зафиксировано = ?(НаборЗаписей.Количество() > 0, Истина, Ложь);
	КонецЕсли;
	
	Возврат Зафиксировано;
	
КонецФункции

Функция СобытиеСделкиПринятоВНБКИ(Сделка, ДатаСобытия, КодСобытие) Экспорт
	
	Если Константы.ИспользоватьНБКИRUTDF.Получить() = Ложь Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПустыеНастройки() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаСобытия) Тогда
		Возврат Ложь;
	КонецЕсли;

	
	Событие =  Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", КодСобытие);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЖурналВыгрузокНБКИRUTDF.ИмяФайла КАК ИмяФайла
		|ИЗ
		|	РегистрСведений.ЖурналВыгрузокНБКИRUTDF КАК ЖурналВыгрузокНБКИRUTDF
		|ГДЕ
		|	ЖурналВыгрузокНБКИRUTDF.ОбъектУчета = &ОбъектУчета
		|	И ЖурналВыгрузокНБКИRUTDF.Событие = &Событие
		|	И ЖурналВыгрузокНБКИRUTDF.Принято = &Принято
		|	И ЖурналВыгрузокНБКИRUTDF.ДатаСобытия = &ДатаСобытия";
	
	Запрос.УстановитьПараметр("ДатаСобытия", ДатаСобытия);
	Запрос.УстановитьПараметр("ОбъектУчета", Сделка);
	Запрос.УстановитьПараметр("Принято", Перечисления.СтатусыОтчетаНБКИ.Принято);
	Запрос.УстановитьПараметр("Событие", Событие);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Принято = Ложь;
	Иначе
		Принято = Истина;
	КонецЕсли;	
	
	
	Возврат Принято;
	
КонецФункции 


Функция Событие30ДнейЗафиксированоИсточником(Сделка, Источник, КодСобытие, ДатаСобытия) Экспорт
	
	Если Константы.ИспользоватьНБКИRUTDF.Получить() = Ложь Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПустыеНастройки() Тогда
		Возврат Истина;
	КонецЕсли;
	
	
	Событие =  Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", КодСобытие);
	НаборЗаписей = РегистрыСведений.КредитныеИсторииДанныеСделки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сделка.Установить(Сделка); 
	НаборЗаписей.Отбор.Событие.Установить(Событие); 
	НаборЗаписей.Отбор.ДокументСобытие.Установить(Источник);
	НаборЗаписей.Отбор.ДатаСобытия.Установить(ДатаСобытия);
		
	НаборЗаписей.Прочитать();       
	
	Зафиксировано = ?(НаборЗаписей.Количество() > 0, Истина, Ложь);
	Возврат Зафиксировано;
	
КонецФункции  



Процедура УдалитьСобытиеСделки(Сделка, Источник, КодСобытие) Экспорт 
	Если Константы.ИспользоватьНБКИRUTDF.Получить() = Ложь Тогда
		Возврат;
	КонецЕсли; 
	
	Если ПустыеНастройки() Тогда
		Возврат;
	КонецЕсли;
	
	Событие =  Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", КодСобытие);
	
	НаборЗаписей = РегистрыСведений.КредитныеИсторииДанныеСделки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сделка.Установить(Сделка); 
	НаборЗаписей.Отбор.Событие.Установить(Событие);
	НаборЗаписей.Отбор.ДокументСобытие.Установить(Источник);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры    

Процедура УдалитьСобытияИсточника(Сделка, Источник) Экспорт
	
	Если Константы.ИспользоватьНБКИRUTDF.Получить() = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустыеНастройки() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.КредитныеИсторииДанныеСделки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сделка.Установить(Сделка); 
	НаборЗаписей.Отбор.ДокументСобытие.Установить(Источник); 
	
	НаборЗаписей.Записать();
	
КонецПроцедуры 

Функция СобытиеСубъектаЗафиксированоИсточником(Субъект, Источник, КодСобытие) Экспорт 
	
	Событие =  Справочники.КредитныеИсторииСобытияСубъекта.НайтиПоРеквизиту("КодНБКИ", КодСобытие);
	Зафиксировано = Ложь;
	
	Если Субъект.ЮрФизЛицо = Справочники.ЮрФизЛицо.ФизЛицо Тогда  
		НаборЗаписей = РегистрыСведений.КредитныеИсторииДанныеФизЛица.СоздатьНаборЗаписей();
	ИначеЕсли Субъект.ЮрФизЛицо = Справочники.ЮрФизЛицо.ЮрЛицо Тогда 
		НаборЗаписей = РегистрыСведений.КредитныеИсторииДанныеЮрЛица.СоздатьНаборЗаписей();
	Иначе
		ТипДолжника = Субъект.ЮрФизЛицо;  
		НаборЗаписейТип = РегистрыСведений.ТипДолжникаПризнак.СоздатьНаборЗаписей();
		НаборЗаписейТип.Отбор.ТипКонтрагента.Установить(ТипДолжника);
		НаборЗаписейТип.Прочитать();
		Для каждого Запись из НаборЗаписейТип Цикл
			Если Запись.ФизическоеЛицо Тогда 
				НаборЗаписей = РегистрыСведений.КредитныеИсторииДанныеФизЛица.СоздатьНаборЗаписей();
			Конецесли;
			
			Если Запись.ЮридическоеЛицо Тогда 
				НаборЗаписей = РегистрыСведений.КредитныеИсторииДанныеЮрЛица.СоздатьНаборЗаписей();
			Конецесли;
			
			Если Запись.ИндивидуальныйПредприниматель Тогда 
				НаборЗаписей = РегистрыСведений.КредитныеИсторииДанныеЮрЛица.СоздатьНаборЗаписей();
			Конецесли;
		КонецЦикла;			
	КонецЕсли;	
	
	НаборЗаписей.Отбор.Должник.Установить(Субъект); 
	НаборЗаписей.Отбор.Событие.Установить(Событие);
	НаборЗаписей.Отбор.ДокументСобытие.Установить(Источник);
	
	НаборЗаписей.Прочитать();
	Зафиксировано = ?(НаборЗаписей.Количество() > 0, Истина, Ложь);
	
	Возврат Зафиксировано;
			
КонецФункции       

Процедура УдалитьСобытиеСубъекта(Субъект, Источник, КодСобытие) Экспорт
	
	Событие =  Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", КодСобытие);
		
	Если Субъект.ЮрФизЛицо = Справочники.ЮрФизЛицо.ФизЛицо Тогда  
		НаборЗаписей = РегистрыСведений.КредитныеИсторииДанныеФизЛица.СоздатьНаборЗаписей();
	ИначеЕсли Субъект.ЮрФизЛицо = Справочники.ЮрФизЛицо.ЮрЛицо Тогда 
		НаборЗаписей = РегистрыСведений.КредитныеИсторииДанныеЮрЛица.СоздатьНаборЗаписей();
	Иначе
		ТипДолжника = Субъект.ЮрФизЛицо;  
		НаборЗаписейТип = РегистрыСведений.ТипДолжникаПризнак.СоздатьНаборЗаписей();
		НаборЗаписейТип.Отбор.ТипКонтрагента.Установить(ТипДолжника);
		НаборЗаписейТип.Прочитать();
		Для каждого Запись из НаборЗаписейТип Цикл
			Если Запись.ФизическоеЛицо Тогда 
				НаборЗаписей = РегистрыСведений.КредитныеИсторииДанныеФизЛица.СоздатьНаборЗаписей();
			Конецесли;
			
			Если Запись.ЮридическоеЛицо Тогда 
				НаборЗаписей = РегистрыСведений.КредитныеИсторииДанныеЮрЛица.СоздатьНаборЗаписей();
			Конецесли;
			
			Если Запись.ИндивидуальныйПредприниматель Тогда 
				НаборЗаписей = РегистрыСведений.КредитныеИсторииДанныеЮрЛица.СоздатьНаборЗаписей();
			Конецесли;
		КонецЦикла;			
	КонецЕсли;	
	
	НаборЗаписей.Отбор.Должник.Установить(Субъект); 
	НаборЗаписей.Отбор.Событие.Установить(Событие);
	НаборЗаписей.Отбор.ДокументСобытие.Установить(Источник);
		
	НаборЗаписей.Записать();	
КонецПроцедуры  

Процедура УдалитьСобытияИсточникаСубъекта(Субъект, Источник) Экспорт	
		
	Если Субъект.ЮрФизЛицо = Справочники.ЮрФизЛицо.ФизЛицо Тогда  
		НаборЗаписей = РегистрыСведений.КредитныеИсторииДанныеФизЛица.СоздатьНаборЗаписей();
	ИначеЕсли Субъект.ЮрФизЛицо = Справочники.ЮрФизЛицо.ЮрЛицо Тогда 
		НаборЗаписей = РегистрыСведений.КредитныеИсторииДанныеЮрЛица.СоздатьНаборЗаписей();
	Иначе
		ТипДолжника = Субъект.ЮрФизЛицо;  
		НаборЗаписейТип = РегистрыСведений.ТипДолжникаПризнак.СоздатьНаборЗаписей();
		НаборЗаписейТип.Отбор.ТипКонтрагента.Установить(ТипДолжника);
		НаборЗаписейТип.Прочитать();
		Для каждого Запись из НаборЗаписейТип Цикл
			Если Запись.ФизическоеЛицо Тогда 
				НаборЗаписей = РегистрыСведений.КредитныеИсторииДанныеФизЛица.СоздатьНаборЗаписей();
			Конецесли;
			
			Если Запись.ЮридическоеЛицо Тогда 
				НаборЗаписей = РегистрыСведений.КредитныеИсторииДанныеЮрЛица.СоздатьНаборЗаписей();
			Конецесли;
			
			Если Запись.ИндивидуальныйПредприниматель Тогда 
				НаборЗаписей = РегистрыСведений.КредитныеИсторииДанныеЮрЛица.СоздатьНаборЗаписей();
			Конецесли;
		КонецЦикла;			
	КонецЕсли;	
	
	НаборЗаписей.Отбор.Должник.Установить(Субъект); 
	НаборЗаписей.Отбор.ДокументСобытие.Установить(Источник); 
	
	НаборЗаписей.Записать();
	
КонецПроцедуры  

Процедура ЗаписатьСобытиеСменаКИ(ОбъектВх, ИмяРегистра, ДатаСобытия, ПараметрыЗаполнения) Экспорт
	
	Событие =  Справочники.КредитныеИсторииСобытияСубъекта.НайтиПоРеквизиту("КодНБКИ", "1.7");
	
	
	Если ИмяРегистра = "КредитныеИсторииДанныеФизЛица" Тогда 
		
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Должник.Установить(ОбъектВх); 	
		
		НаборЗаписей.Прочитать(); 
		Для Каждого СтараяЗапись из НаборЗаписей Цикл
			СтараяЗапись.ДатаОкончанияДействияДокумента = ПараметрыЗаполнения.ДатаОкончанияДействияДокумента;
		КонецЦикла;  
		
		НаборЗаписей.Записать();
		ПараметрыЗаполнения.ДатаОкончанияДействияДокумента = Дата(1,1,1);
		
	КонецЕсли;
	
	
	НоваяЗапись = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, СтараяЗапись);
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ПараметрыЗаполнения);
	НоваяЗапись.ДатаСобытия = ДатаСобытия;
	НоваяЗапись.Событие = Событие;
	НоваяЗапись.ДокументСобытие = ОбъектВх; 
	НоваяЗапись.Записать();
	
	
КонецПроцедуры    

Функция СформироватьТекстЗаголовкаHEADER(Настройка, ИмяФайла, ДатаОтчета, НепринятыйОтчет) Экспорт
	
	ТекстЗаголовка = "HEADER"; 
	
	ДобавитьКСтроке(ТекстЗаголовка, Настройка.ИННПользователяНБКИ);
	ДобавитьКСтроке(ТекстЗаголовка, Настройка.ОГРНПользователяНБКИ);
	ДобавитьКСтроке(ТекстЗаголовка, ИмяФайла);
	ДобавитьКСтроке(ТекстЗаголовка, Строка(Формат(ДатаОтчета,"ДФ=dd.MM.yyyy")));
	ДобавитьКСтроке(ТекстЗаголовка, "");
	ДобавитьКСтроке(ТекстЗаголовка, Настройка.ИмяПользователяНБКИ);
	
	Пароль = ОбработкаБезопасноеХранилище.ПолучитьПароль(Настройка);
	ТекстЗаголовка = ТекстЗаголовка + Символы.Таб + Пароль;
	
	ДобавитьКСтроке(ТекстЗаголовка, "RUTDF" + ПолучитьВерсиюRUTDF(Настройка.ВерсияRUTDF));
	
	Если ЗначениеЗаполнено(НепринятыйОтчет) Тогда
		ДобавитьКСтроке(ТекстЗаголовка, НепринятыйОтчет.ИмяФайла);
	Иначе
		ДобавитьКСтроке(ТекстЗаголовка, "");
	КонецЕсли;
	
	Если Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v3 И  Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v4 Тогда
		КредитныеИсторииИзменения.ДобавитьИзмененияHeader(ТекстЗаголовка, Настройка, ИмяФайла, ДатаОтчета, НепринятыйОтчет);
	КонецЕсли;
		
	Возврат ТекстЗаголовка;
	                            
КонецФункции

Функция СформироватьСтрокуДаты(Дата) Экспорт
	
	ДатаСтрока = "";
	Число = Формат(Дата, "ДФ=дд"); 
	Месяц = Формат(Дата, "ДФ=ММ"); 
	Год = Формат(Дата, "ДФ=гггг");
    Час = Формат(Дата, "ДФ=ЧЧ");
    Минута = Формат(Дата, "ДФ=мм"); 
    Секунда = Формат(Дата, "ДФ=сс"); 
	ДатаСтрока = Год+Месяц+Число+"_"+Час+Минута+Секунда;
	Возврат ДатаСтрока;

КонецФункции  

Функция СформироватьТелоОтчета(КоличествоОбъектовУчета, КоличествоГруппБлоков, Настройка, Операция, ИзмененныеЗаписи = Неопределено, МассивТитульныхЗаписей, ДатаОтчета, ДокументОтчет) Экспорт 
	// Смотрим изменения по самим должникам, записываем их первыми 
	// 0 - Массив изменений сделок
	// 1 - изменения ФЛ
	// 2 - Изменения ЮЛ   
	
	// В титульных Записях
	// 0 ФЛ 
	// 1 ЮЛ        
	ТитульныеЗаписиДолжника = МассивТитульныхЗаписей.ТитульныеЗаписиДолжника;
	ТитульныеЗаписиПоручителя = МассивТитульныхЗаписей.ТитульныеЗаписиПоручителя;
	ТитульныеЗаписиНаследника = МассивТитульныхЗаписей.ТитульныеЗаписиНаследника;
	
	КоличествоГруппБлоков = 1;
	тТелоОтчета = Новый ТаблицаЗначений;
	тТелоОтчета.Колонки.Добавить("Строка");
	
	Если ИзмененныеЗаписи = Неопределено Тогда  
		//Требует доработки в связи с новыми правилами 5.0
		Если ДокументОтчет.ЭтоИсправлениеВсейКредитнойИнформации Тогда
			СформироватьКорректировкуВсейКИ(КоличествоОбъектовУчета, КоличествоГруппБлоков, тТелоОтчета, ТитульныеЗаписиДолжника, Настройка, Операция, ДатаОтчета, ДокументОтчет);
		Иначе	
			СформироватьКорректирующиеЗаписи(КоличествоОбъектовУчета, КоличествоГруппБлоков, тТелоОтчета, ТитульныеЗаписиДолжника, ТитульныеЗаписиПоручителя, ТитульныеЗаписиНаследника, Настройка, Операция, ДатаОтчета, ДокументОтчет); 	
		КонецЕсли;
	Иначе	 
		
		Если ИзмененныеЗаписи.Количество() > 1 Тогда	
			Если ИзмененныеЗаписи[1].Количество() > 0 Тогда
				тзПредыдущихЗаписей = ПолучитьПредыдущиеПоказателиФЛ(ИзмененныеЗаписи[1].ВыгрузитьКолонку("Должник"));
				ДобавитьИзмененияФЛ(КоличествоОбъектовУчета, КоличествоГруппБлоков, тТелоОтчета, ИзмененныеЗаписи[1], тзПредыдущихЗаписей, Настройка, Операция, ДатаОтчета, ДокументОтчет); 	
			КонецЕсли;
			
		КонецЕсли; 
		
		Если ИзмененныеЗаписи.Количество() > 2 Тогда
			Если ИзмененныеЗаписи[2].Количество() > 0 Тогда
				тзПредыдущихЗаписей = ПолучитьПредыдущиеПоказателиЮЛ(ИзмененныеЗаписи[1].ВыгрузитьКолонку("Должник"));
				ДобавитьИзмененияЮЛ(КоличествоОбъектовУчета, КоличествоГруппБлоков, тТелоОтчета, ИзмененныеЗаписи[2], тзПредыдущихЗаписей, Настройка, Операция, ДатаОтчета, ДокументОтчет); 	
			КонецЕсли; 
		КонецЕсли;
		
		Если ИзмененныеЗаписи.Количество() > 0 Тогда
			Если ИзмененныеЗаписи[0].Количество() > 0 Тогда
				ДобавитьИзмененияСделки(КоличествоОбъектовУчета, КоличествоГруппБлоков, тТелоОтчета, ИзмененныеЗаписи[0], ТитульныеЗаписиДолжника, ТитульныеЗаписиПоручителя, ТитульныеЗаписиНаследника, Настройка, Операция, ДатаОтчета, ДокументОтчет); 	
			КонецЕсли;
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат тТелоОтчета;	
КонецФункции  

Процедура СформироватьКорректирующиеЗаписи(КоличествоОбъектовУчета, КоличествоГруппБлоков, тТелоОтчета, ТитульныеЗаписиДолжника, ТитульныеЗаписиПоручителя, ТитульныеЗаписиНаследника, Настройка, Операция, ДатаОтчета, ДокументОтчет) Экспорт
	
	ПараметрыФункций = Новый Структура;
	ПараметрыФункций.Вставить("Настройка", Настройка);
	ПараметрыФункций.Вставить("ПСК", 0); 
	ПараметрыФункций.Вставить("ЕстьЗадолженность", Истина); 
	ПараметрыФункций.Вставить("Поручитель", "1");
	ПараметрыФункций.Вставить("Наследник", "1");   
	ПараметрыФункций.Вставить("ТекущаяЗадолженность", 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЖурналВыгрузокНБКИRUTDF.ОбъектУчета КАК ОбъектУчета,
		|	ЖурналВыгрузокНБКИRUTDF.ДатаПоследнейВыгрузки КАК ДатаПоследнейВыгрузки,
		|	ЖурналВыгрузокНБКИRUTDF.Событие КАК Событие,
		|	ЖурналВыгрузокНБКИRUTDF.ДатаСобытия КАК ДатаСобытия,
		|	ЖурналВыгрузокНБКИRUTDF.Операция КАК Операция,
		|	ЖурналВыгрузокНБКИRUTDF.Принято КАК Принято,
		|	ЖурналВыгрузокНБКИRUTDF.Идентификатор КАК Идентификатор,
		|	ЖурналВыгрузокНБКИRUTDF.Комментарий КАК Комментарий,
		|	ЖурналВыгрузокНБКИRUTDF.Причина КАК Причина
		|ПОМЕСТИТЬ ДляКорректировки
		|ИЗ
		|	РегистрСведений.ЖурналВыгрузокНБКИRUTDF КАК ЖурналВыгрузокНБКИRUTDF
		|ГДЕ
		|	ЖурналВыгрузокНБКИRUTDF.Принято = &Принято
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектУчета,
		|	Событие,
		|	ДатаСобытия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДляКорректировки.ОбъектУчета КАК ОбъектУчета,
		|	ДляКорректировки.ДатаПоследнейВыгрузки КАК ДатаПоследнейВыгрузки,
		|	ДляКорректировки.Событие КАК Событие,
		|	ДляКорректировки.ДатаСобытия КАК ДатаСобытия,
		|	ДляКорректировки.Операция КАК Операция,
		|	ДляКорректировки.Принято КАК Принято,
		|	ДляКорректировки.Идентификатор КАК Идентификатор,
		|	ДляКорректировки.Комментарий КАК Комментарий,
		|	ДляКорректировки.Причина КАК Причина,
		|	КредитныеИсторииДанныеСделки.ДокументСобытие КАК ДокументСобытие,
		|	КредитныеИсторииДанныеСделки.UID КАК UID,
		|	КредитныеИсторииДанныеСделки.ДатаНачалаСделки КАК ДатаНачалаСделки,
		|	КредитныеИсторииДанныеСделки.ДатаОкончанияСделки КАК ДатаОкончанияСделки,
		|	КредитныеИсторииДанныеСделки.ДатаПередачиФинансирования КАК ДатаПередачиФинансирования,
		|	КредитныеИсторииДанныеСделки.ДатаРасчетаСрочнойЗадолженности КАК ДатаРасчетаСрочнойЗадолженности,
		|	КредитныеИсторииДанныеСделки.ДатаРасчетаПросроченнойЗадолженности КАК ДатаРасчетаПросроченнойЗадолженности,
		|	КредитныеИсторииДанныеСделки.СуммаСделки КАК СуммаСделки,
		|	КредитныеИсторииДанныеСделки.СолидарныйДоговор КАК СолидарныйДоговор,
		|	КредитныеИсторииДанныеСделки.ДоговорМКЗ КАК ДоговорМКЗ,
		|	КредитныеИсторииДанныеСделки.РеструктуризацияМКЗ КАК РеструктуризацияМКЗ,
		|	КредитныеИсторииДанныеСделки.Обеспечительство КАК Обеспечительство,
		|	КредитныеИсторииДанныеСделки.СудебноеДело КАК СудебноеДело,
		|	КредитныеИсторииДанныеСделки.ПрекращениеОбязательства КАК ПрекращениеОбязательства,
		|	КредитныеИсторииДанныеСделки.НеденежноеОбязательство КАК НеденежноеОбязательство,
		|	КредитныеИсторииДанныеСделки.Продан КАК Продан,
		|	КредитныеИсторииДанныеСделки.Просрочка90плюс КАК Просрочка90плюс,
		|	КредитныеИсторииДанныеСделки.ПризнакПотребительскогоКредита КАК ПризнакПотребительскогоКредита,
		|	КредитныеИсторииДанныеСделки.ПризнакПлатежнойКарты КАК ПризнакПлатежнойКарты,
		|	КредитныеИсторииДанныеСделки.КодНБКИВидКредита КАК КодНБКИВидКредита,
		|	КредитныеИсторииДанныеСделки.КодНБКИТипКредита КАК КодНБКИТипКредита,
		|	КредитныеИсторииДанныеСделки.КодНБКИЦельКредита КАК КодНБКИЦельКредита,
		|	КредитныеИсторииДанныеСделки.Прощение КАК Прощение,
		|	КредитныеИсторииДанныеСделки.Банкротство КАК Банкротство,
		|	КредитныеИсторииДанныеСделки.БезнадежныйДолг КАК БезнадежныйДолг,
		|	КредитныеИсторииДанныеСделки.Сделка.Должник КАК Должник,
		|	КредитныеИсторииДанныеСделки.Сделка КАК Сделка,
		|	1 КАК Счетчик
		|ИЗ
		|	ДляКорректировки КАК ДляКорректировки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КредитныеИсторииДанныеСделки КАК КредитныеИсторииДанныеСделки
		|		ПО ДляКорректировки.ОбъектУчета = КредитныеИсторииДанныеСделки.Сделка
		|			И ДляКорректировки.Событие = КредитныеИсторииДанныеСделки.Событие
		|			И ДляКорректировки.ДатаСобытия = КредитныеИсторииДанныеСделки.ДатаСобытия";
	
	Запрос.УстановитьПараметр("Принято", Перечисления.СтатусыОтчетаНБКИ.ТребуетКорректировки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Запись = РезультатЗапроса.Выбрать();
	
	Пока Запись.Следующий() Цикл
		СформироватьТекстГруппыGROUPHEADER(КоличествоГруппБлоков, тТелоОтчета, Операция, Запись.ДатаСобытия, Запись.Событие.КодНБКИ, Запись.Комментарий, Запись.Причина, Запись.Идентификатор);
		
		НаследникСобытия = ВычислитьНаследника(Запись.Сделка, Запись.ДокументСобытие);
		ПоручительСобытия = ВычислитьПоручителяСобытия(Запись.ДокументСобытие);		
		
		
		Если ЗначениеЗаполнено(НаследникСобытия) Тогда
			ТитульнаяЗапись = НайтиЗаписьДолжникаДляЗаголовка(ТитульныеЗаписиНаследника, НаследникСобытия);	
			ПараметрыФункций.Вставить("Наследник", НаследникСобытия);
		Иначе
			Если ЗначениеЗаполнено(ПоручительСобытия) Тогда
				ТитульнаяЗапись = НайтиЗаписьДолжникаДляЗаголовка(ТитульныеЗаписиПоручителя, ПоручительСобытия);
				ПараметрыФункций.Вставить("Поручитель", ПоручительСобытия);
			Иначе
				ТитульнаяЗапись = НайтиЗаписьДолжникаДляЗаголовка(ТитульныеЗаписиДолжника, Запись.Сделка.Должник);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТитульнаяЗапись) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Для договора " + Запись.Сделка + "не определен субъект события! Проверьте все связанные документы, Наследников и Поручителей.";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(ТитульнаяЗапись) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Для договора " + Запись.Сделка + "не определен субъект события! Проверьте все связанные документы, Наследников и Поручителей.";
			Сообщение.Сообщить();
			Возврат;
        КонецЕсли;
		
 
		СформироватьБлокиТитульныхЗаписей(ТитульнаяЗапись, тТелоОтчета, Настройка);
		
			
		ДобавитьКТелуОтчета(тТелоОтчета, "DELETE");   
		Попытка
			ДР = ТитульнаяЗапись.ДатаРождения;
			Префикс = "C";  
			ПараметрыФункций.Вставить("Дееспособность", ТитульнаяЗапись.Дееспособность); 
            ПараметрыФункций.Вставить("ЛицоНеСуществует", Ложь);
		Исключение
			Префикс = "B";
			ПараметрыФункций.Вставить("Дееспособность", Ложь); 
            ПараметрыФункций.Вставить("ЛицоНеСуществует", ТитульнаяЗапись.ЛиквидацияЮЛ);
		КонецПопытки; 
		
		  
		НЗСоставОтчета = РегистрыСведений.КредитныеИстории_СобытияИГруппыБлоков.СоздатьНаборЗаписей();
		НЗСоставОтчета.Отбор.Событие.Установить(Запись.Событие);
		НЗСоставОтчета.Отбор.ФормироватьПриКорректировке.Установить(Истина);
		НЗСоставОтчета.Прочитать();
		
		Для Каждого ЗаписьСостава ИЗ НЗСоставОтчета Цикл	
			РезультатФункции = Вычислить("КредитныеИстории." + ЗаписьСостава.ИмяПроцедурыУЗ + "(Запись, Префикс, ПараметрыФункций)");
			Если ТипЗнч(РезультатФункции) = Тип("Строка") Тогда
				Если ЗначениеЗаполнено(РезультатФункции) Тогда
					ДобавитьКТелуОтчета(тТелоОтчета, РезультатФункции); 
				КонецЕсли;
			ИначеЕсли ТипЗнч(РезультатФункции) = Тип("Массив") Тогда
				Для Каждого Значение Из РезультатФункции Цикл
					Если ЗначениеЗаполнено(Значение) Тогда
						ДобавитьКТелуОтчета(тТелоОтчета, Значение);
					КонецЕсли;
				КонецЦикла;	
			Иначе
				ДобавитьКТелуОтчета(тТелоОтчета, "Ошибка формирования группы блоков! " + Строка(Запись.Сделка));
			КонецЕсли;
		КонецЦикла;
		
		ЗанестиЗаписьВЖурналRUTDF(Запись, ДатаОтчета, Операция, ДокументОтчет, Запись.UID);	
		
	КонецЦикла;
	
	Свертка = Запрос.Выполнить().Выгрузить();
	Свертка.Свернуть("ОбъектУчета", "Счетчик");
	
	КоличествоОбъектовУчета = Свертка.Количество();
		
		
	
КонецПроцедуры 

Процедура СформироватьКорректировкуВсейКИ(КоличествоОбъектовУчета, КоличествоГруппБлоков, тТелоОтчета, ТитульныеЗаписиДолжника, Настройка, Операция, ДатаОтчета, ДокументОтчет) Экспорт
	
	
	тчОбъектовДляПравки = ВернутьТаблицуДокументаПоОперации(Операция, ДокументОтчет);
	 
	
	Для каждого Запись из  тчОбъектовДляПравки Цикл
		СформироватьТекстГруппыGROUPHEADER(КоличествоГруппБлоков, тТелоОтчета, Операция, Запись.ДатаСобытия, Запись.Событие.КодНБКИ, Запись.Комментарий, Запись.Причина, Запись.Идентификатор);
		
		ТитульнаяЗапись = НайтиЗаписьДолжникаДляЗаголовка(ТитульныеЗаписиДолжника, Запись.Должник); 
		
		Если Не ЗначениеЗаполнено(ТитульнаяЗапись) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Для договора " + Запись.Сделка + "не определен субъект события! Проверьте все связанные документы, Наследников и Поручителей.";
			Сообщение.Сообщить();
			Возврат;
        КонецЕсли;
		
		СформироватьБлокиТитульныхЗаписей(ТитульнаяЗапись, тТелоОтчета, Настройка); 
		
				
		ДобавитьКТелуОтчета(тТелоОтчета, "DELETE");   
		Попытка
			ДР = ТитульнаяЗапись.ДатаРождения;
			Префикс = "C";  
		Исключение
			Префикс = "B";
		КонецПопытки; 
		
		ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "17_UID", "10_UID");
		СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб +  Запись.Идентификатор;
		ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета); 
		
		ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "56_OBLIGPARTTAKE", "46_OBLIGPARTTAKE");
		СтрокаОтчета = ИмяСтрокиОтчета;
		ДобавитьКСтроке(СтрокаОтчета, "1");
		ДобавитьКСтроке(СтрокаОтчета, Запись.КодНБКИВидКредита);
		ДобавитьКСтроке(СтрокаОтчета, Запись.UID); 
		ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Запись.ДатаПередачиФинансирования));
		ДобавитьКСтроке(СтрокаОтчета, Запись.Просрочка90плюс);
		ДобавитьКСтроке(СтрокаОтчета, ?(Запись.ЕстьПрекращение, "1", "0"));

		ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета); 

		  		
		ЗанестиЗаписьВЖурналRUTDF(Запись, ДатаОтчета, Операция, ДокументОтчет, Запись.Идентификатор);	
		
	КонецЦикла;
	
	КоличествоОбъектовУчета = тчОбъектовДляПравки.Количество();
		
	
КонецПроцедуры 

Функция ВернутьТаблицуДокументаПоОперации(Операция, ДокОтчет)
	ДатаСобытия = ДокОтчет.Дата;
	Событие = Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", "2.3");
	ТабЧасть = Новый ТаблицаЗначений;
	РезультатЗапроса = Новый ТаблицаЗначений;
	Если Операция = "C" Тогда
		ТабЧасть = ДокОтчет.тчИсправляемыеЗаписиC.Выгрузить();
	КонецЕсли;	
	
	Если Операция = "D" Тогда
		ТабЧасть = ДокОтчет.тчАннулируемыеЗаписиD.Выгрузить();
	КонецЕсли;	
	
	Если Табчасть.Количество() > 0 Тогда
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КредитныеИсторииДанныеСделки.Сделка КАК Сделка,
		|	МАКСИМУМ(КредитныеИсторииДанныеСделки.ДатаСобытия) КАК ДатаСобытия
		|ПОМЕСТИТЬ ПоследняяЗаписьПоСделке
		|ИЗ
		|	РегистрСведений.КредитныеИсторииДанныеСделки КАК КредитныеИсторииДанныеСделки
		|ГДЕ
		|	КредитныеИсторииДанныеСделки.Сделка В(&Сделка)
		|
		|СГРУППИРОВАТЬ ПО
		|	КредитныеИсторииДанныеСделки.Сделка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сделка,
		|	ДатаСобытия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КредитныеИсторииДанныеСделки.UID КАК Идентификатор,
		|	ВЫБОР
		|		КОГДА КредитныеИсторииДанныеСделки.Событие.КодНБКИ = ""2.5""
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьПрекращение,
		|	КредитныеИсторииДанныеСделки.Просрочка90плюс КАК Просрочка90плюс,
		|	КредитныеИсторииДанныеСделки.КодНБКИВидКредита КАК КодНБКИВидКредита,
		|	КредитныеИсторииДанныеСделки.ДатаПередачиФинансирования КАК ДатаПередачиФинансирования,
		|	ПоследняяЗаписьПоСделке.Сделка КАК Сделка,
		|	КредитныеИсторииДанныеСделки.Сделка.Должник КАК Должник,
		|	КредитныеИсторииДанныеСделки.UID КАК UID
		|ИЗ
		|	ПоследняяЗаписьПоСделке КАК ПоследняяЗаписьПоСделке
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КредитныеИсторииДанныеСделки КАК КредитныеИсторииДанныеСделки
		|		ПО ПоследняяЗаписьПоСделке.Сделка = КредитныеИсторииДанныеСделки.Сделка
		|			И ПоследняяЗаписьПоСделке.ДатаСобытия = КредитныеИсторииДанныеСделки.ДатаСобытия";
		
		Запрос.УстановитьПараметр("Сделка", ТабЧасть.ВыгрузитьКолонку("ОбъектУчета"));
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		РезультатЗапроса.Колонки.Добавить("ДатаСобытия");
		РезультатЗапроса.Колонки.Добавить("Событие");
		РезультатЗапроса.Колонки.Добавить("Комментарий");
		РезультатЗапроса.Колонки.Добавить("Причина");

		
		
		Для каждого Стр из РезультатЗапроса Цикл
			Стр.ДатаСобытия = ДатаСобытия;
			Стр.Событие = Событие;
			Для каждого стрТч ИЗ ТабЧасть Цикл  
				Если стр.Сделка = стрТч.ОбъектУчета Тогда
					Стр.Комментарий = стрТч.Комментарий;
					Стр.Причина = стрТч.Причина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		
	КонецЕсли;
	
	
	Возврат РезультатЗапроса;
КонецФункции


Процедура ДобавитьИзмененияФЛ(КоличествоОбъектовУчета, КоличествоГруппБлоков, тТелоОтчета, ИзмененныеЗаписиФЛ, ПредыдущиеЗаписи, Настройка, Операция, ДатаОтчета, ДокументОтчет) Экспорт  
	// Смена ФИО – Код НБКИ 1.7
	// Смена ДУЛ – Код НБКИ 1.7
	// Недееспособность Субъекта – Код НБКИ 1.10
	// Смена контактной информации, ИП, Адреса – Код НБКИ 1.9   
	ИзмененныеЗаписиФЛ.Колонки.Добавить("Счетчик");
	ИмяСтрокиОтчета = "C";   
	Для каждого Запись из ИзмененныеЗаписиФЛ Цикл 
		
		СформироватьТекстГруппыGROUPHEADER(КоличествоГруппБлоков, тТелоОтчета, Операция, Запись.ДатаСобытия, Запись.Событие.КодНБКИ, "", "", "");  
		
		СтрокаОтчета = "";  
		
		Запись.Счетчик = 1;
		
		Если Запись.Событие.КодНБКИ = "0.0" Тогда 
			СтрокаОтчета = "Ошибка формирования события Физ.лица!";
			ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета);
			Продолжить;
		Иначе
			// Паспорт и ФИО 
			ИмяСтрокиОтчета = "C1_NAME";
			СтрокаОтчета = ИмяСтрокиОтчета; 
			ФИОТекущее = Запись.Должник.ФИО[Запись.Должник.ФИО.Количество() - 1];  
			ДобавитьКСтроке(СтрокаОтчета, ФИОТекущее.Фамилия);
			ДобавитьКСтроке(СтрокаОтчета, ФИОТекущее.Имя);
			ДобавитьКСтроке(СтрокаОтчета, ФИОТекущее.Отчество);
			ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета); 
			Попытка
				ФИОПредыдущее = Запись.Должник.ФИО[Запись.Должник.ФИО.Количество() - 2];
			Исключение
				ФИОПредыдущее = Неопределено;
			КонецПопытки;
			
			Если ЗначениеЗаполнено(ФИОПредыдущее) Тогда
				ИмяСтрокиОтчета = "C2_PREVNAME";
				СтрокаОтчета = ИмяСтрокиОтчета; 
				ДатаВыдачиДокумента = ?(ЗначениеЗаполнено(Запись.ДатаВыдачиДокумента), Запись.ДатаВыдачиДокумента, ТекущаяДатаСеанса()); 
				ДатаВыдачиДокумента = киФорматДаты(ДатаВыдачиДокумента);
				ДобавитьКСтроке(СтрокаОтчета, "1");
				ДобавитьКСтроке(СтрокаОтчета, ФИОПредыдущее.Фамилия);
				ДобавитьКСтроке(СтрокаОтчета, ФИОПредыдущее.Имя);
				ДобавитьКСтроке(СтрокаОтчета, ФИОПредыдущее.Отчество);
				ДобавитьКСтроке(СтрокаОтчета, ДатаВыдачиДокумента);
				ДобавитьКТелуОтчета(тТелоОтчета,СтрокаОтчета); 
			Иначе
				ИмяСтрокиОтчета = "C2_PREVNAME"; 	
				СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + "0" + Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб;
				ДобавитьКТелуОтчета(тТелоОтчета,СтрокаОтчета);
			КонецЕсли;	
			ИмяСтрокиОтчета = "C3_BIRTH";
			СтрокаОтчета = ИмяСтрокиОтчета;
			ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Запись.ДатаРождения));
			ДобавитьКСтроке(СтрокаОтчета, ?(ВРег(Запись.КодСтраны) = "РОССИЯ", "643", Запись.КодСтраны));
			ДобавитьКСтроке(СтрокаОтчета,  Запись.МестоРождения);
			СтрокаОтчета = ОчисткаСтроки(СтрокаОтчета);
			ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета); 
			
			ИмяСтрокиОтчета = "C4_ID";
			СтрокаОтчета = ИмяСтрокиОтчета;    
			ДобавитьКСтроке(СтрокаОтчета, ?(ВРег(Запись.КодСтраныДокумента) = "РОССИЯ", "643", Запись.КодСтраныДокумента));
			ДобавитьКСтроке(СтрокаОтчета, ?(СтрНайти(Запись.КодСтраныДокумента, "999") > 0, Запись.НаименованиеИнойСтраныДокумента, ""));
			ДобавитьКСтроке(СтрокаОтчета, Запись.КодНБКИДокумента);
			ДобавитьКСтроке(СтрокаОтчета, ?(СтрНайти(Запись.КодНБКИДокумента, "999") > 0, Запись.НаименованиеИногоДокумента, ""));
			ДобавитьКСтроке(СтрокаОтчета, Запись.СерияДокумента);
			ДобавитьКСтроке(СтрокаОтчета, Запись.НомерДокумента);
			ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Запись.ДатаВыдачиДокумента));
			ДобавитьКСтроке(СтрокаОтчета, Запись.КемВыданДокумент);
			КодПодразделения = ПроверкаФорматаКодаПодразделения(Запись.КодПодразделенияРФ);
			ДобавитьКСтроке(СтрокаОтчета, ?(Запись.КодНБКИДокумента = "21", КодПодразделения, ""));
			ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Запись.ДатаОкончанияДействияДокумента));
			СтрокаОтчета = ОчисткаСтроки(СтрокаОтчета);
			ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета); 
			АЙДИ = СтрЗаменить(СтрокаОтчета, Символы.Таб, ""); 
			АЙДИ = СтрЗаменить(АЙДИ, "C4_ID", "");
			мПредыдущиеЗаписи = ПредыдущиеЗаписи.НайтиСтроки(Новый Структура("Должник", Запись.Должник));
			Если мПредыдущиеЗаписи.Количество() > 0 Тогда
				стрПредыдущаяЗапись = мПредыдущиеЗаписи[мПредыдущиеЗаписи.Количество() - 1];
				Если ЗначениеЗаполнено(стрПредыдущаяЗапись.ДатаОкончанияДействияДокумента) Тогда
					ИмяСтрокиОтчета = "C5_PREVID";
					СтрокаОтчета = ИмяСтрокиОтчета;
					ДобавитьКСтроке(СтрокаОтчета, "1");
					ДобавитьКСтроке(СтрокаОтчета, стрПредыдущаяЗапись.КодСтраныДокумента);
					ДобавитьКСтроке(СтрокаОтчета, ?(СтрНайти(стрПредыдущаяЗапись.КодСтраныДокумента, "999") > 0, стрПредыдущаяЗапись.НаименованиеИнойСтраныДокумента, ""));
					ДобавитьКСтроке(СтрокаОтчета, стрПредыдущаяЗапись.КодНБКИДокумента);
					ДобавитьКСтроке(СтрокаОтчета, ?(СтрНайти(стрПредыдущаяЗапись.КодНБКИДокумента, "999") > 0, стрПредыдущаяЗапись.НаименованиеИногоДокумента, ""));
					ДобавитьКСтроке(СтрокаОтчета, стрПредыдущаяЗапись.СерияДокумента);
					ДобавитьКСтроке(СтрокаОтчета, стрПредыдущаяЗапись.НомерДокумента);
					ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(стрПредыдущаяЗапись.ДатаВыдачиДокумента));
					ДобавитьКСтроке(СтрокаОтчета, стрПредыдущаяЗапись.КемВыданДокумент);
					КодПодразделения = ПроверкаФорматаКодаПодразделения(стрПредыдущаяЗапись.КодПодразделенияРФ); 
					ДобавитьКСтроке(СтрокаОтчета, ?(стрПредыдущаяЗапись.КодНБКИДокумента = "21", КодПодразделения, ""));
					ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(стрПредыдущаяЗапись.ДатаОкончанияДействияДокумента));
					СтрокаОтчета = ОчисткаСтроки(СтрокаОтчета);
					ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета);
				Иначе
					ИмяСтрокиОтчета = "C5_PREVID";
					СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + "0" + Символы.Таб + Символы.Таб 
					+ Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб 
					+ Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб; 
					ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета);	
				КонецЕсли;  
			Иначе
				ИмяСтрокиОтчета = "C5_PREVID";
				СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + "0" + Символы.Таб + Символы.Таб 
				+ Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб 
				+ Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб; 
				ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета);	
				
			КонецЕсли; 
			
			ИмяСтрокиОтчета = "C6_REGNUM"; 
			КодИНН = ""; 
			Если ЗначениеЗаполнено(Запись.ИНН) Тогда
				КодИНН = ?(СтрДлина(Запись.ИНН) = 12, "1", "2");
			КонецЕсли;
			СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + КодИНН + Символы.Таб + Запись.ИНН 
			+ Символы.Таб + ?(ЗначениеЗаполнено(Запись.ИНН_ИП), Запись.ИНН_ИП, ""); 
			
			Если Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v3 И Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v4 Тогда 
				КредитныеИсторииИзменения.ДобавитьИзмененияТитульныхЗаписей(Настройка, Запись, ИмяСтрокиОтчета, СтрокаОтчета);
			КонецЕсли;
			
			ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета);
			
			
			ИмяСтрокиОтчета = "C7_SNILS";
			СНИЛС = СтрЗаменить(Запись.СНИЛС, "-", "");
			СНИЛС = СтрЗаменить(СНИЛС, " ", "");
			СНИЛС = СтрЗаменить(СНИЛС, Символы.НПП, "");
			СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + СНИЛС; 
			ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета);
			
			Если Запись.Событие.КодНБКИ = "1.9" Тогда 
				ПараметрыРегистрации = Новый Структура;
				ПараметрыРегистрации.Вставить("ДатаРегистрацииПоДокументу", Запись.ДатаРегистрацииПоДокументу);
				ПараметрыРегистрации.Вставить("НаименованиеРегистрирующегоОргана", Запись.НаименованиеРегистрирующегоОргана);
				ПараметрыРегистрации.Вставить("КодПодразделенияРегистрацииРФ", Запись.КодПодразделенияРегистрацииРФ);
				ПараметрыРегистрации.Вставить("ДатаВыдачиДокумента", Запись.ДатаВыдачиДокумента);
				
				МассивСтрок = ЗаполнитьАдресаДолжникаФЛ(Запись.Должник, ПараметрыРегистрации);
				Для каждого Строка из МассивСтрок Цикл 
					ДобавитьКТелуОтчета(тТелоОтчета, Строка);
				КонецЦикла;	
				// 10 телефоны  
				Если Запись.Должник.Телефоны.Количество() > 0 Тогда
					ИмяСтрокиОтчета = "C10_CONTACTINFO";  
					ТелНомер = СтрЗаменить(Запись.Должник.Телефоны[0].Номер, " ", "");
					Комментарий = Строка(Запись.Должник.Телефоны[0].ВидНомера) + " " + Строка(Запись.Должник.Телефоны[0].Комментарий);
					Комментарий = ?(ЗначениеЗаполнено(Комментарий), Нрег(Комментарий), "телефон должника");
					СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + ТелНомер + Символы.Таб + Комментарий + Символы.Таб + Нрег(Запись.ЭлПочта);  
					ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета);
				КонецЕсли;			
				// 11 ИП
				ИмяСтрокиОтчета = "C11_ENTREP";
				СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + Запись.ЭтоИП + Символы.Таб + Запись.ИНН_ИП + Символы.Таб + киФорматДаты(Запись.ДатаРегистрацииИП);
				ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета);
			КонецЕсли;	
			Если Запись.Событие.КодНБКИ = "1.10" Тогда
				ИмяСтрокиОтчета = "C12_CAPABILITY";
				ВозрастСек = ТекущаяДатаСеанса() - Запись.ДатаРождения;
				СовершеннолетиеСек = 567993600;
				КодДееспособности = ?(ВозрастСек >= СовершеннолетиеСек, "1", "2");
				НеСудебнаяДееспособность = ИмяСтрокиОтчета + Символы.Таб + КодДееспособности + Символы.Таб 
				+ Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб;			
				Если ТипЗнч(Запись.Дееспособность) = Тип("СправочникСсылка.ДелоОНедееспособностиСубъекта") Тогда 
					СтрокаОтчета = СформироватьБлокДееспособность(Запись.Дееспособность);
					СтрокаОтчета = ИмяСтрокиОтчета + СтрокаОтчета;	
					ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета);
				Иначе
					// По настройкам 
					СтрокаОтчета = СформироватьБлокПоНастройкам(Запись.Должник, Настройка, ИмяСтрокиОтчета, "СубъектФизическоеЛицо");
					ЭтоСудебнаяДееспособность = ?(ЗначениеЗаполнено(СтрокаОтчета), Истина, Ложь);
					СтрокаОтчета = ?(ЭтоСудебнаяДееспособность, ИмяСтрокиОтчета + Символы.Таб + СтрокаОтчета, НеСудебнаяДееспособность);
					ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		ЗанестиЗаписьВЖурналRUTDF(Запись, ДатаОтчета, Операция, ДокументОтчет, АЙДИ); 
		
	КонецЦикла;	    
	
	Свертка = ИзмененныеЗаписиФЛ.Скопировать();
	Свертка.Свернуть("Должник", "Счетчик");  
	КоличествоОбъектовУчета = Свертка.Количество();
КонецПроцедуры   

Функция киФорматДаты(дДата) Экспорт
	Если НЕ ЗначениеЗаполнено(дДата) Тогда
		ДатаСтрокой = "";
	Иначе	
		ДатаСтрокой = Формат(дДата, "ДЛФ=D");
	КонецЕсли;
	Возврат ДатаСтрокой;
КонецФункции

Функция киФорматЧисла(чЧисло) Экспорт
	Если чЧисло = 0 Тогда
		ЧислоСтрокой = "0,00";
	Иначе	
		ЧислоСтрокой = Формат(чЧисло, "ЧЦ=10; ЧДЦ=2");
		ЧислоСтрокой =  СтрЗаменить(ЧислоСтрокой, Символы.НПП, "");
		ЧислоСтрокой =  СтрЗаменить(ЧислоСтрокой, " ", "");
	КонецЕсли;
	Возврат ЧислоСтрокой;
КонецФункции

Процедура ДобавитьКТелуОтчета(тзТелоОтчета, вхСтрока) Экспорт
	Если ЗначениеЗаполнено(вхСтрока) Тогда
		НСтр = тзТелоОтчета.Добавить();
		Нстр.Строка = вхСтрока;
	КонецЕсли;
КонецПроцедуры			

Функция ПолучитьИзмененияПоОбъектамУчета(ТаблицаОбъектов, ДатаОтчета) Экспорт  
	// ОбъектУчета
	// Должник
	
	МассивВыборок = Новый Массив;
			
	
	ЗапросДанныеСделки = Новый Запрос;
	ЗапросДанныеСделки.Текст = 	 
		"ВЫБРАТЬ
		|	КредитныеИсторииДанныеСделки.Сделка КАК Сделка,
		|	КредитныеИсторииДанныеСделки.ДатаСобытия КАК ДатаСобытия,
		|	КредитныеИсторииДанныеСделки.Событие КАК Событие,
		|	КредитныеИсторииДанныеСделки.ДокументСобытие КАК ДокументСобытие,
		|	КредитныеИсторииДанныеСделки.UID КАК UID,
		|	КредитныеИсторииДанныеСделки.ДатаНачалаСделки КАК ДатаНачалаСделки,
		|	КредитныеИсторииДанныеСделки.ДатаОкончанияСделки КАК ДатаОкончанияСделки,
		|	КредитныеИсторииДанныеСделки.ДатаПередачиФинансирования КАК ДатаПередачиФинансирования,
		|	КредитныеИсторииДанныеСделки.ДатаРасчетаСрочнойЗадолженности КАК ДатаРасчетаСрочнойЗадолженности,
		|	КредитныеИсторииДанныеСделки.ДатаРасчетаПросроченнойЗадолженности КАК ДатаРасчетаПросроченнойЗадолженности,
		|	КредитныеИсторииДанныеСделки.СуммаСделки КАК СуммаСделки,
		|	КредитныеИсторииДанныеСделки.СолидарныйДоговор КАК СолидарныйДоговор,
		|	КредитныеИсторииДанныеСделки.ДоговорМКЗ КАК ДоговорМКЗ,
		|	КредитныеИсторииДанныеСделки.РеструктуризацияМКЗ КАК РеструктуризацияМКЗ,
		|	КредитныеИсторииДанныеСделки.Обеспечительство КАК Обеспечительство,
		|	КредитныеИсторииДанныеСделки.СудебноеДело КАК СудебноеДело,
		|	КредитныеИсторииДанныеСделки.ПрекращениеОбязательства КАК ПрекращениеОбязательства,
		|	КредитныеИсторииДанныеСделки.НеденежноеОбязательство КАК НеденежноеОбязательство,
		|	КредитныеИсторииДанныеСделки.Продан КАК Продан,
		|	КредитныеИсторииДанныеСделки.Просрочка90плюс КАК Просрочка90плюс,
		|	КредитныеИсторииДанныеСделки.ПризнакПотребительскогоКредита КАК ПризнакПотребительскогоКредита,
		|	КредитныеИсторииДанныеСделки.ПризнакПлатежнойКарты КАК ПризнакПлатежнойКарты,
		|	КредитныеИсторииДанныеСделки.КодНБКИВидКредита КАК КодНБКИВидКредита,
		|	КредитныеИсторииДанныеСделки.КодНБКИТипКредита КАК КодНБКИТипКредита,
		|	КредитныеИсторииДанныеСделки.КодНБКИЦельКредита КАК КодНБКИЦельКредита,
		|	КредитныеИсторииДанныеСделки.Прощение КАК Прощение,
		|	КредитныеИсторииДанныеСделки.Банкротство КАК Банкротство,
		|	КредитныеИсторииДанныеСделки.БезнадежныйДолг КАК БезнадежныйДолг,
		|	ЕСТЬNULL(ЖурналВыгрузокНБКИRUTDF.Принято, ""БезСтатуса"") КАК Принято,
		|	ЖурналВыгрузокНБКИRUTDF.ДатаПоследнейВыгрузки КАК ДатаПоследнейВыгрузки,
		|	КредитныеИсторииДанныеСделки.ДатаВыходаНаПросрочку КАК ДатаВыходаНаПросрочку,
		|	КредитныеИсторииДанныеСделки.ВидЗаимодавца КАК ВидЗаимодавца,
		|	КредитныеИсторииДанныеСделки.ЧастичноеПравопреемство КАК ЧастичноеПравопреемство,
		|	КредитныеИсторииДанныеСделки.ПризнакКредитнойЛинии КАК ПризнакКредитнойЛинии,
		|	КредитныеИсторииДанныеСделки.КодНБКИТипКредититнойЛинии КАК КодНБКИТипКредититнойЛинии,
		|	КредитныеИсторииДанныеСделки.ПризнакПлавающейПроцентнойСтавки КАК ПризнакПлавающейПроцентнойСтавки,
		|	КредитныеИсторииДанныеСделки.ДатаВозникновенияОбязательстваСубъекта КАК ДатаВозникновенияОбязательстваСубъекта,
		|	КредитныеИсторииДанныеСделки.ПорядковыйНомерТранша КАК ПорядковыйНомерТранша,
		|	КредитныеИсторииДанныеСделки.ПроцентнаяСтавкаПоУсловиям КАК ПроцентнаяСтавкаПоУсловиям,
		|	КредитныеИсторииДанныеСделки.ЧастичнаяПродажа КАК ЧастичнаяПродажа
		|ПОМЕСТИТЬ СобытияИСтатусы
		|ИЗ
		|	РегистрСведений.КредитныеИсторииДанныеСделки КАК КредитныеИсторииДанныеСделки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналВыгрузокНБКИRUTDF КАК ЖурналВыгрузокНБКИRUTDF
		|		ПО КредитныеИсторииДанныеСделки.Сделка = ЖурналВыгрузокНБКИRUTDF.ОбъектУчета
		|			И КредитныеИсторииДанныеСделки.Событие = ЖурналВыгрузокНБКИRUTDF.Событие
		|			И КредитныеИсторииДанныеСделки.ДатаСобытия = ЖурналВыгрузокНБКИRUTDF.ДатаСобытия
		|ГДЕ
		|	КредитныеИсторииДанныеСделки.Сделка В(&ОбъектУчета)
		|	И КредитныеИсторииДанныеСделки.Событие <> &Первичное
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СобытияИСтатусы.Сделка КАК Сделка,
		|	СобытияИСтатусы.ДатаСобытия КАК ДатаСобытия,
		|	СобытияИСтатусы.Событие КАК Событие,
		|	СобытияИСтатусы.ДокументСобытие КАК ДокументСобытие,
		|	СобытияИСтатусы.UID КАК UID,
		|	СобытияИСтатусы.ДатаНачалаСделки КАК ДатаНачалаСделки,
		|	СобытияИСтатусы.ДатаОкончанияСделки КАК ДатаОкончанияСделки,
		|	СобытияИСтатусы.ДатаПередачиФинансирования КАК ДатаПередачиФинансирования,
		|	СобытияИСтатусы.ДатаРасчетаСрочнойЗадолженности КАК ДатаРасчетаСрочнойЗадолженности,
		|	СобытияИСтатусы.ДатаРасчетаПросроченнойЗадолженности КАК ДатаРасчетаПросроченнойЗадолженности,
		|	СобытияИСтатусы.СуммаСделки КАК СуммаСделки,
		|	СобытияИСтатусы.СолидарныйДоговор КАК СолидарныйДоговор,
		|	СобытияИСтатусы.ДоговорМКЗ КАК ДоговорМКЗ,
		|	СобытияИСтатусы.РеструктуризацияМКЗ КАК РеструктуризацияМКЗ,
		|	СобытияИСтатусы.Обеспечительство КАК Обеспечительство,
		|	СобытияИСтатусы.СудебноеДело КАК СудебноеДело,
		|	СобытияИСтатусы.ПрекращениеОбязательства КАК ПрекращениеОбязательства,
		|	СобытияИСтатусы.НеденежноеОбязательство КАК НеденежноеОбязательство,
		|	СобытияИСтатусы.Продан КАК Продан,
		|	СобытияИСтатусы.Просрочка90плюс КАК Просрочка90плюс,
		|	СобытияИСтатусы.ПризнакПотребительскогоКредита КАК ПризнакПотребительскогоКредита,
		|	СобытияИСтатусы.ПризнакПлатежнойКарты КАК ПризнакПлатежнойКарты,
		|	СобытияИСтатусы.КодНБКИВидКредита КАК КодНБКИВидКредита,
		|	СобытияИСтатусы.КодНБКИТипКредита КАК КодНБКИТипКредита,
		|	СобытияИСтатусы.КодНБКИЦельКредита КАК КодНБКИЦельКредита,
		|	СобытияИСтатусы.Прощение КАК Прощение,
		|	СобытияИСтатусы.Банкротство КАК Банкротство,
		|	СобытияИСтатусы.БезнадежныйДолг КАК БезнадежныйДолг,
		|	СобытияИСтатусы.Принято КАК Принято,
		|	СобытияИСтатусы.ДатаПоследнейВыгрузки КАК ДатаПоследнейВыгрузки,
		|	СобытияИСтатусы.ДатаВыходаНаПросрочку КАК ДатаВыходаНаПросрочку,
		|	СобытияИСтатусы.ВидЗаимодавца КАК ВидЗаимодавца,
		|	СобытияИСтатусы.ЧастичноеПравопреемство КАК ЧастичноеПравопреемство,
		|	СобытияИСтатусы.ПризнакКредитнойЛинии КАК ПризнакКредитнойЛинии,
		|	СобытияИСтатусы.КодНБКИТипКредититнойЛинии КАК КодНБКИТипКредититнойЛинии,
		|	СобытияИСтатусы.ПризнакПлавающейПроцентнойСтавки КАК ПризнакПлавающейПроцентнойСтавки,
		|	СобытияИСтатусы.ДатаВозникновенияОбязательстваСубъекта КАК ДатаВозникновенияОбязательстваСубъекта,
		|	СобытияИСтатусы.ПорядковыйНомерТранша КАК ПорядковыйНомерТранша,
		|	СобытияИСтатусы.ПроцентнаяСтавкаПоУсловиям КАК ПроцентнаяСтавкаПоУсловиям,
		|	СобытияИСтатусы.ЧастичнаяПродажа КАК ЧастичнаяПродажа
		|ИЗ
		|	СобытияИСтатусы КАК СобытияИСтатусы
		|ГДЕ
		|	СобытияИСтатусы.ДатаПоследнейВыгрузки ЕСТЬ NULL
		|	И СобытияИСтатусы.Принято <> &Принято
		|	И НАЧАЛОПЕРИОДА(СобытияИСтатусы.ДатаСобытия, ДЕНЬ) <= &ДатаОтчета";
	
	ЗапросДанныеСделки.УстановитьПараметр("Принято", Перечисления.СтатусыОтчетаНБКИ.Принято);
	ЗапросДанныеСделки.УстановитьПараметр("ОбъектУчета", ТаблицаОбъектов.ВыгрузитьКолонку("ОбъектУчета")); 
	ЗапросДанныеСделки.УстановитьПараметр("Первичное", Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", "0.0"));
    ЗапросДанныеСделки.УстановитьПараметр("ДатаОтчета", НачалоДня(ДатаОтчета));
	
	РезультатЗапроса = ЗапросДанныеСделки.Выполнить();
	ВыборкаДанныеСделки = РезультатЗапроса.Выгрузить(); 
	
	Если ВыборкаДанныеСделки.Количество() > 0 Тогда
		МассивВыборок.Добавить(ВыборкаДанныеСделки);
	КонецЕсли;	
	
	ЗапросДанныеСубъектаФЛ = Новый Запрос;
	ЗапросДанныеСубъектаФЛ.Текст = 
		"ВЫБРАТЬ
		|	КредитныеИсторииДанныеФизЛица.Должник КАК Должник,
		|	КредитныеИсторииДанныеФизЛица.ДатаСобытия КАК ДатаСобытия,
		|	КредитныеИсторииДанныеФизЛица.Событие КАК Событие,
		|	КредитныеИсторииДанныеФизЛица.ДокументСобытие КАК ДокументСобытие,
		|	КредитныеИсторииДанныеФизЛица.ДатаРождения КАК ДатаРождения,
		|	КредитныеИсторииДанныеФизЛица.МестоРождения КАК МестоРождения,
		|	КредитныеИсторииДанныеФизЛица.КодСтраны КАК КодСтраны,
		|	КредитныеИсторииДанныеФизЛица.ИНН КАК ИНН,
		|	КредитныеИсторииДанныеФизЛица.СНИЛС КАК СНИЛС,
		|	КредитныеИсторииДанныеФизЛица.ЭлПочта КАК ЭлПочта,
		|	КредитныеИсторииДанныеФизЛица.Дееспособность КАК Дееспособность,
		|	КредитныеИсторииДанныеФизЛица.Иное КАК Иное,
		|	КредитныеИсторииДанныеФизЛица.КодСтраныДокумента КАК КодСтраныДокумента,
		|	КредитныеИсторииДанныеФизЛица.НаименованиеИнойСтраныДокумента КАК НаименованиеИнойСтраныДокумента,
		|	КредитныеИсторииДанныеФизЛица.КодНБКИДокумента КАК КодНБКИДокумента,
		|	КредитныеИсторииДанныеФизЛица.НаименованиеИногоДокумента КАК НаименованиеИногоДокумента,
		|	КредитныеИсторииДанныеФизЛица.СерияДокумента КАК СерияДокумента,
		|	КредитныеИсторииДанныеФизЛица.НомерДокумента КАК НомерДокумента,
		|	КредитныеИсторииДанныеФизЛица.КемВыданДокумент КАК КемВыданДокумент,
		|	КредитныеИсторииДанныеФизЛица.ДатаВыдачиДокумента КАК ДатаВыдачиДокумента,
		|	КредитныеИсторииДанныеФизЛица.КодПодразделенияРФ КАК КодПодразделенияРФ,
		|	КредитныеИсторииДанныеФизЛица.ДатаОкончанияДействияДокумента КАК ДатаОкончанияДействияДокумента,
		|	КредитныеИсторииДанныеФизЛица.ОтметкаОСмерти КАК ОтметкаОСмерти,
		|	КредитныеИсторииДанныеФизЛица.ЭтоИП КАК ЭтоИП,
		|	КредитныеИсторииДанныеФизЛица.ДатаРегистрацииИП КАК ДатаРегистрацииИП,
		|	КредитныеИсторииДанныеФизЛица.ИНН_ИП КАК ИНН_ИП,
		|	КредитныеИсторииДанныеФизЛица.ДатаРегистрацииПоДокументу КАК ДатаРегистрацииПоДокументу,
		|	КредитныеИсторииДанныеФизЛица.НаименованиеРегистрирующегоОргана КАК НаименованиеРегистрирующегоОргана,
		|	КредитныеИсторииДанныеФизЛица.КодПодразделенияРегистрацииРФ КАК КодПодразделенияРегистрацииРФ,
		|	ЕСТЬNULL(ЖурналВыгрузокНБКИRUTDF.Принято, ""БезСтатуса"") КАК Принято,
		|	ЖурналВыгрузокНБКИRUTDF.ДатаПоследнейВыгрузки КАК ДатаПоследнейВыгрузки,
		|	КредитныеИсторииДанныеФизЛица.СпециальныйНалоговыйРежим КАК СпециальныйНалоговыйРежим
		|ПОМЕСТИТЬ СобытияИСтатусы
		|ИЗ
		|	РегистрСведений.КредитныеИсторииДанныеФизЛица КАК КредитныеИсторииДанныеФизЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналВыгрузокНБКИRUTDF КАК ЖурналВыгрузокНБКИRUTDF
		|		ПО КредитныеИсторииДанныеФизЛица.Должник = ЖурналВыгрузокНБКИRUTDF.ОбъектУчета
		|			И КредитныеИсторииДанныеФизЛица.Событие = ЖурналВыгрузокНБКИRUTDF.Событие
		|			И КредитныеИсторииДанныеФизЛица.ДатаСобытия = ЖурналВыгрузокНБКИRUTDF.ДатаСобытия
		|ГДЕ
		|	КредитныеИсторииДанныеФизЛица.Должник В(&СубъектУчета)
		|	И КредитныеИсторииДанныеФизЛица.Событие <> &Первичное
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СобытияИСтатусы.Должник КАК Должник,
		|	СобытияИСтатусы.ДатаСобытия КАК ДатаСобытия,
		|	СобытияИСтатусы.Событие КАК Событие,
		|	СобытияИСтатусы.ДокументСобытие КАК ДокументСобытие,
		|	СобытияИСтатусы.ДатаРождения КАК ДатаРождения,
		|	СобытияИСтатусы.МестоРождения КАК МестоРождения,
		|	СобытияИСтатусы.КодСтраны КАК КодСтраны,
		|	СобытияИСтатусы.ИНН КАК ИНН,
		|	СобытияИСтатусы.СНИЛС КАК СНИЛС,
		|	СобытияИСтатусы.ЭлПочта КАК ЭлПочта,
		|	СобытияИСтатусы.Дееспособность КАК Дееспособность,
		|	СобытияИСтатусы.Иное КАК Иное,
		|	СобытияИСтатусы.КодСтраныДокумента КАК КодСтраныДокумента,
		|	СобытияИСтатусы.НаименованиеИнойСтраныДокумента КАК НаименованиеИнойСтраныДокумента,
		|	СобытияИСтатусы.КодНБКИДокумента КАК КодНБКИДокумента,
		|	СобытияИСтатусы.НаименованиеИногоДокумента КАК НаименованиеИногоДокумента,
		|	СобытияИСтатусы.СерияДокумента КАК СерияДокумента,
		|	СобытияИСтатусы.НомерДокумента КАК НомерДокумента,
		|	СобытияИСтатусы.КемВыданДокумент КАК КемВыданДокумент,
		|	СобытияИСтатусы.ДатаВыдачиДокумента КАК ДатаВыдачиДокумента,
		|	СобытияИСтатусы.КодПодразделенияРФ КАК КодПодразделенияРФ,
		|	СобытияИСтатусы.ДатаОкончанияДействияДокумента КАК ДатаОкончанияДействияДокумента,
		|	СобытияИСтатусы.ОтметкаОСмерти КАК ОтметкаОСмерти,
		|	СобытияИСтатусы.ЭтоИП КАК ЭтоИП,
		|	СобытияИСтатусы.ДатаРегистрацииИП КАК ДатаРегистрацииИП,
		|	СобытияИСтатусы.ИНН_ИП КАК ИНН_ИП,
		|	СобытияИСтатусы.ДатаРегистрацииПоДокументу КАК ДатаРегистрацииПоДокументу,
		|	СобытияИСтатусы.НаименованиеРегистрирующегоОргана КАК НаименованиеРегистрирующегоОргана,
		|	СобытияИСтатусы.КодПодразделенияРегистрацииРФ КАК КодПодразделенияРегистрацииРФ,
		|	СобытияИСтатусы.ДатаПоследнейВыгрузки КАК ДатаПоследнейВыгрузки,
		|	СобытияИСтатусы.СпециальныйНалоговыйРежим КАК СпециальныйНалоговыйРежим
		|ИЗ
		|	СобытияИСтатусы КАК СобытияИСтатусы
		|ГДЕ
		|	СобытияИСтатусы.ДатаПоследнейВыгрузки ЕСТЬ NULL
		|	И СобытияИСтатусы.Принято <> &Принято
		|	И НАЧАЛОПЕРИОДА(СобытияИСтатусы.ДатаСобытия, ДЕНЬ) <= &ДатаОтчета";
	
	ЗапросДанныеСубъектаФЛ.УстановитьПараметр("Принято", Перечисления.СтатусыОтчетаНБКИ.Принято);
	ЗапросДанныеСубъектаФЛ.УстановитьПараметр("СубъектУчета", ТаблицаОбъектов.ВыгрузитьКолонку("Должник")); 
	ЗапросДанныеСубъектаФЛ.УстановитьПараметр("Первичное", Справочники.КредитныеИсторииСобытияСубъекта.НайтиПоРеквизиту("КодНБКИ", "0.0"));
	ЗапросДанныеСубъектаФЛ.УстановитьПараметр("ДатаОтчета", НачалоДня(ДатаОтчета));
	
	РезультатЗапроса = ЗапросДанныеСубъектаФЛ.Выполнить();
	
	ВыборкаДанныеФЛ = РезультатЗапроса.Выгрузить();  
	
	Если ВыборкаДанныеФЛ.Количество() > 0 Тогда
		МассивВыборок.Добавить(ВыборкаДанныеФЛ);
	КонецЕсли;		
	
	ЗапросДанныеСубъектаЮЛ = Новый Запрос;
	ЗапросДанныеСубъектаЮЛ.Текст = 
		"ВЫБРАТЬ
		|	КредитныеИсторииДанныеЮрЛица.Должник КАК Должник,
		|	КредитныеИсторииДанныеЮрЛица.ДатаСобытия КАК ДатаСобытия,
		|	КредитныеИсторииДанныеЮрЛица.Событие КАК Событие,
		|	КредитныеИсторииДанныеЮрЛица.ДокументСобытие КАК ДокументСобытие,
		|	КредитныеИсторииДанныеЮрЛица.ПолноеНаименование КАК ПолноеНаименование,
		|	КредитныеИсторииДанныеЮрЛица.ИноеНаименование КАК ИноеНаименование,
		|	КредитныеИсторииДанныеЮрЛица.ОГРН КАК ОГРН,
		|	КредитныеИсторииДанныеЮрЛица.ИдентификаторLEI КАК ИдентификаторLEI,
		|	КредитныеИсторииДанныеЮрЛица.ИНН КАК ИНН,
		|	КредитныеИсторииДанныеЮрЛица.ДатаРеорганизации КАК ДатаРеорганизации,
		|	КредитныеИсторииДанныеЮрЛица.Иное КАК Иное,
		|	КредитныеИсторииДанныеЮрЛица.ЛиквидацияЮЛ КАК ЛиквидацияЮЛ,
		|	КредитныеИсторииДанныеЮрЛица.ЭлПочта КАК ЭлПочта,
		|	КредитныеИсторииДанныеЮрЛица.НаличиеПравопредшественника КАК НаличиеПравопредшественника,
		|	КредитныеИсторииДанныеЮрЛица.ПравопредшественникИзРФ КАК ПравопредшественникИзРФ,
		|	КредитныеИсторииДанныеЮрЛица.ПолноеНаименованиеПравопредшественника КАК ПолноеНаименованиеПравопредшественника,
		|	КредитныеИсторииДанныеЮрЛица.ОГРНПравопредшественника КАК ОГРНПравопредшественника,
		|	ЕСТЬNULL(ЖурналВыгрузокНБКИRUTDF.Принято, ""БезСтатуса"") КАК Принято,
		|	ЖурналВыгрузокНБКИRUTDF.ДатаПоследнейВыгрузки КАК ДатаПоследнейВыгрузки
		|ПОМЕСТИТЬ СобытияИСтатусы
		|ИЗ
		|	РегистрСведений.КредитныеИсторииДанныеЮрЛица КАК КредитныеИсторииДанныеЮрЛица,
		|	РегистрСведений.ЖурналВыгрузокНБКИRUTDF КАК ЖурналВыгрузокНБКИRUTDF
		|ГДЕ
		|	КредитныеИсторииДанныеЮрЛица.Должник В(&СубъектУчета)
		|	И КредитныеИсторииДанныеЮрЛица.Событие <> &Первичное
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СобытияИСтатусы.Должник КАК Должник,
		|	СобытияИСтатусы.ДатаСобытия КАК ДатаСобытия,
		|	СобытияИСтатусы.Событие КАК Событие,
		|	СобытияИСтатусы.ДокументСобытие КАК ДокументСобытие,
		|	СобытияИСтатусы.ПолноеНаименование КАК ПолноеНаименование,
		|	СобытияИСтатусы.ИноеНаименование КАК ИноеНаименование,
		|	СобытияИСтатусы.ОГРН КАК ОГРН,
		|	СобытияИСтатусы.ИдентификаторLEI КАК ИдентификаторLEI,
		|	СобытияИСтатусы.ИНН КАК ИНН,
		|	СобытияИСтатусы.ДатаРеорганизации КАК ДатаРеорганизации,
		|	СобытияИСтатусы.Иное КАК Иное,
		|	СобытияИСтатусы.ЛиквидацияЮЛ КАК ЛиквидацияЮЛ,
		|	СобытияИСтатусы.ЭлПочта КАК ЭлПочта,
		|	СобытияИСтатусы.НаличиеПравопредшественника КАК НаличиеПравопредшественника,
		|	СобытияИСтатусы.ПравопредшественникИзРФ КАК ПравопредшественникИзРФ,
		|	СобытияИСтатусы.ПолноеНаименованиеПравопредшественника КАК ПолноеНаименованиеПравопредшественника,
		|	СобытияИСтатусы.ОГРНПравопредшественника КАК ОГРНПравопредшественника,
		|	СобытияИСтатусы.Принято КАК Принято,
		|	СобытияИСтатусы.ДатаПоследнейВыгрузки КАК ДатаПоследнейВыгрузки
		|ИЗ
		|	СобытияИСтатусы КАК СобытияИСтатусы
		|ГДЕ
		|	СобытияИСтатусы.ДатаПоследнейВыгрузки ЕСТЬ NULL
		|	И СобытияИСтатусы.Принято = &Принято
	    |	И НАЧАЛОПЕРИОДА(СобытияИСтатусы.ДатаСобытия, ДЕНЬ) <= &ДатаОтчета";
	
	ЗапросДанныеСубъектаЮЛ.УстановитьПараметр("Принято", Перечисления.СтатусыОтчетаНБКИ.Принято);
	ЗапросДанныеСубъектаЮЛ.УстановитьПараметр("СубъектУчета", ТаблицаОбъектов.ВыгрузитьКолонку("Должник"));
	ЗапросДанныеСубъектаЮЛ.УстановитьПараметр("Первичное", Справочники.КредитныеИсторииСобытияСубъекта.НайтиПоРеквизиту("КодНБКИ", "0.0"));
    ЗапросДанныеСубъектаЮЛ.УстановитьПараметр("ДатаОтчета", НачалоДня(ДатаОтчета));
	
	РезультатЗапроса = ЗапросДанныеСубъектаЮЛ.Выполнить();
	                                                   
	ВыборкаДанныеЮЛ = РезультатЗапроса.Выгрузить(); 
		
	Если ВыборкаДанныеЮЛ.Количество() > 0 Тогда
		МассивВыборок.Добавить(ВыборкаДанныеЮЛ);
	КонецЕсли;
	
	Возврат МассивВыборок;
			
	
КонецФункции 

Функция ПолучитьПредыдущиеПоказателиФЛ(мДолжники) Экспорт  
	// Должник  ФЛ
		
	ЗапросДанныеСубъектаФЛ = Новый Запрос;
	ЗапросДанныеСубъектаФЛ.Текст = 
		"ВЫБРАТЬ
		|	КредитныеИсторииДанныеФизЛица.Должник КАК Должник,
		|	КредитныеИсторииДанныеФизЛица.ДатаСобытия КАК ДатаСобытия,
		|	КредитныеИсторииДанныеФизЛица.Событие КАК Событие,
		|	КредитныеИсторииДанныеФизЛица.ДокументСобытие КАК ДокументСобытие,
		|	КредитныеИсторииДанныеФизЛица.ДатаРождения КАК ДатаРождения,
		|	КредитныеИсторииДанныеФизЛица.МестоРождения КАК МестоРождения,
		|	КредитныеИсторииДанныеФизЛица.КодСтраны КАК КодСтраны,
		|	КредитныеИсторииДанныеФизЛица.ИНН КАК ИНН,
		|	КредитныеИсторииДанныеФизЛица.СНИЛС КАК СНИЛС,
		|	КредитныеИсторииДанныеФизЛица.ЭлПочта КАК ЭлПочта,
		|	КредитныеИсторииДанныеФизЛица.Дееспособность КАК Дееспособность,
		|	КредитныеИсторииДанныеФизЛица.Иное КАК Иное,
		|	КредитныеИсторииДанныеФизЛица.КодСтраныДокумента КАК КодСтраныДокумента,
		|	КредитныеИсторииДанныеФизЛица.НаименованиеИнойСтраныДокумента КАК НаименованиеИнойСтраныДокумента,
		|	КредитныеИсторииДанныеФизЛица.КодНБКИДокумента КАК КодНБКИДокумента,
		|	КредитныеИсторииДанныеФизЛица.НаименованиеИногоДокумента КАК НаименованиеИногоДокумента,
		|	КредитныеИсторииДанныеФизЛица.СерияДокумента КАК СерияДокумента,
		|	КредитныеИсторииДанныеФизЛица.НомерДокумента КАК НомерДокумента,
		|	КредитныеИсторииДанныеФизЛица.КемВыданДокумент КАК КемВыданДокумент,
		|	КредитныеИсторииДанныеФизЛица.ДатаВыдачиДокумента КАК ДатаВыдачиДокумента,
		|	КредитныеИсторииДанныеФизЛица.КодПодразделенияРФ КАК КодПодразделенияРФ,
		|	КредитныеИсторииДанныеФизЛица.ДатаОкончанияДействияДокумента КАК ДатаОкончанияДействияДокумента,
		|	КредитныеИсторииДанныеФизЛица.ОтметкаОСмерти КАК ОтметкаОСмерти,
		|	КредитныеИсторииДанныеФизЛица.ЭтоИП КАК ЭтоИП,
		|	КредитныеИсторииДанныеФизЛица.ДатаРегистрацииИП КАК ДатаРегистрацииИП,
		|	КредитныеИсторииДанныеФизЛица.ИНН_ИП КАК ИНН_ИП,
		|	КредитныеИсторииДанныеФизЛица.ДатаРегистрацииПоДокументу КАК ДатаРегистрацииПоДокументу,
		|	КредитныеИсторииДанныеФизЛица.НаименованиеРегистрирующегоОргана КАК НаименованиеРегистрирующегоОргана,
		|	КредитныеИсторииДанныеФизЛица.КодПодразделенияРегистрацииРФ КАК КодПодразделенияРегистрацииРФ,
		|	КредитныеИсторииДанныеФизЛица.СпециальныйНалоговыйРежим КАК СпециальныйНалоговыйРежим
		|ИЗ
		|	РегистрСведений.КредитныеИсторииДанныеФизЛица КАК КредитныеИсторииДанныеФизЛица
		|ГДЕ
		|	КредитныеИсторииДанныеФизЛица.Должник В(&СубъектУчета)
		|	И КредитныеИсторииДанныеФизЛица.ДатаОкончанияДействияДокумента <> &ПустаяДата
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСобытия УБЫВ";
	
	ЗапросДанныеСубъектаФЛ.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	ЗапросДанныеСубъектаФЛ.УстановитьПараметр("СубъектУчета", мДолжники);
	
	РезультатЗапроса = ЗапросДанныеСубъектаФЛ.Выполнить();
	
	ВыборкаДанныеФЛ = РезультатЗапроса.Выгрузить();  
	Возврат ВыборкаДанныеФЛ;
				
	
КонецФункции 

Функция ВернутьКодСудебнойДееспособности(ЗначениеРешенияДокумент)
	
	Если ЗначениеРешенияДокумент = Перечисления.ВидыРешенияДееспособностьСубъекта.ОграничениеДееспособности Тогда  
		КодДееспособности = "3";
	ИначеЕсли ЗначениеРешенияДокумент = Перечисления.ВидыРешенияДееспособностьСубъекта.ПолнаяНедееспособность Тогда   
		КодДееспособности = "4";
	ИначеЕсли ЗначениеРешенияДокумент = Перечисления.ВидыРешенияДееспособностьСубъекта.ОтменаНедееспособности Тогда
		КодДееспособности = "5";
	Иначе
		КодДееспособности = "1";
	КонецЕсли;
	
	Возврат КодДееспособности;
КонецФункции

Функция СформироватьБлокПоНастройкам(ОбъектВх, Настройка, ИмяБлока, ИмяТаблицы) Экспорт 
	
	ИмяБлока = Лев(ИмяБлока, стрНайти(ИмяБлока, "_") - 1);
	СтрокаОтчета = ""; 
	ТЗ = Настройка[ИмяТаблицы].Выгрузить();
	Строки = УдалитьОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗ); 
	Результат = Новый Массив();
	Для Каждого Элемент Из Строки Цикл
		Результат.Добавить(Новый Структура("ИмяТаблицы, Поле, НомерПоказателя, ЗаполнятьПоУмолчанию, Значение, Функция, СтрокаДляПолученияЗначения, КодДопСвойства,
		| ОбъектДопСвойства, СтрокаХранилище",ИмяТаблицы, Элемент.Поле, ?(Стрнайти(ИмяБлока, "C") > 0, Элемент.НомерПоказателяНБКИФЛ, Элемент.НомерПоказателяНБКИЮЛ), Элемент.ЗаполнятьПоУмолчанию, Элемент.Значение, Элемент.Функция,
		Элемент.СтрокаДляПолученияЗначения, Элемент.КодДопСвойства, Элемент.ОбъектДопСвойства, Элемент.СтрокаХранилище));	
	КонецЦикла; 
	
	НастройкаНаПримереДокумента = Настройка.НаПримереДокумента;
		
	Если ТипЗнч(НастройкаНаПримереДокумента) = ТипЗнч(ОбъектВх) Тогда
		НаПримереДокумента = ОбъектВх;
	Иначе
		НаПримереДокумента = ВернутьСвязанныйДокументТипа(ОбъектВх,ТипЗнч(НастройкаНаПримереДокумента));
	КонецЕсли;	 
	
	
		
	мсЗначения = Новый Массив;
	Для Каждого ТекСтрокаПодстановки Из Результат Цикл 
		Если СтрНайти(ТекСтрокаПодстановки.НомерПоказателя, ИмяБлока) = 0 Тогда
			Продолжить;
		КонецЕсли;	
		ТекНастройка = Новый Структура("Поле, НомерПоказателя, ЗаполнятьПоУмолчанию, Значение",
		ТекСтрокаПодстановки.Поле, ТекСтрокаПодстановки.НомерПоказателя, ТекСтрокаПодстановки.ЗаполнятьПоУмолчанию,); 
		
		Если ИмяТаблицы = "ПриобретательПраваТребования" Тогда
			 ТекСтрокаПодстановки.СтрокаХранилище = стрЗаменить(ТекСтрокаПодстановки.СтрокаХранилище, "[Кредитор][Ссылка]", "[Ссылка]");
			 ТекСтрокаПодстановки.СтрокаХранилище = стрЗаменить(ТекСтрокаПодстановки.СтрокаХранилище, "[Организация][Ссылка]", "[Ссылка]");
			 ТекСтрокаПодстановки.СтрокаХранилище = стрЗаменить(ТекСтрокаПодстановки.СтрокаХранилище, "[Контрагент][Ссылка]", "[Ссылка]");
		КонецЕсли;	 
			 
				
		Значение = УЭДСервер.ГенерацияЗначениия(ТекСтрокаПодстановки, Ложь, НаПримереДокумента, НаПримереДокумента);
		ФункцияОпределена = УЭДСервер.ФункцияУспешноОпределена(ТекСтрокаПодстановки);
		Если ФункцияОпределена Тогда
			Значение = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(ТекСтрокаПодстановки.Функция, НаПримереДокумента, Значение);
			Если ТипЗнч(Значение) <> Тип("ТаблицаЗначений") Тогда
				Значение = СокрЛП(Значение);
			КонецЕсли;	
			ТекНастройка.Значение = Значение;
			мсЗначения.Добавить(ТекНастройка);
		Иначе 	
			Значение = СокрЛП(Значение);
			ТекНастройка.Значение = Значение;
			мсЗначения.Добавить(ТекНастройка);
		КонецЕсли; 
	КонецЦикла;	  
	
	Для Каждого структура Из мсЗначения Цикл
		СтрокаОтчета = СтрокаОтчета +  Символы.Таб + СтрЗаменить(Структура.Значение, " 0:00:00", "");								
	КонецЦикла;	
	
	Возврат СтрокаОтчета;
	
КонецФункции  

Функция ВернутьСвязанныйДокументТипа(СсылкаИсточник, Тип)
	Если Тип = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда 
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДолговыеОбязательства.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
		|ГДЕ
		|	ДолговыеОбязательства.Должник = &Должник";
		
		Запрос.УстановитьПараметр("Должник", СсылкаИсточник);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
				
	КонецЕсли;	
	
	Если ТипЗнч(СсылкаИсточник) = Тип("СправочникСсылка.Контрагенты") ИЛИ ТипЗнч(СсылкаИсточник) = Тип("СправочникСсылка.Организации")Тогда
		Возврат СсылкаИсточник;
			
	КонецЕсли;	

	
	
КонецФункции

Функция СформироватьБлокДееспособность(Дееспособность) Экспорт
	СтрокаОтчета = "";    
	
	КодДееспособности = ВернутьКодСудебнойДееспособности(Дееспособность.РешениеСудаДееспособность);
	Если Число(КодДееспособности) < 2 Тогда
		СтрокаОтчета = КодДееспособности + Символы.Таб + Символы.Таб 
		+ Символы.Таб +  Символы.Таб + Символы.Таб + Символы.Таб;  
	Иначе  
		Если Число(КодДееспособности) = 5 Тогда 
			ДобавитьКСтроке(СтрокаОтчета, КодДееспособности);
			ДобавитьКСтроке(СтрокаОтчета, ""); 
			ДобавитьКСтроке(СтрокаОтчета, "");
			ДобавитьКСтроке(СтрокаОтчета, "");
			ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Дееспособность.ДатаРешенияСуда));
			ДобавитьКСтроке(СтрокаОтчета, Дееспособность.НомерРешенияСуда);
			ДобавитьКСтроке(СтрокаОтчета, Дееспособность.Суд.Наименование);
		Иначе   
			ДобавитьКСтроке(СтрокаОтчета, КодДееспособности);
			ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Дееспособность.ДатаРешенияСуда));
			ДобавитьКСтроке(СтрокаОтчета, Дееспособность.НомерРешенияСуда);
			ДобавитьКСтроке(СтрокаОтчета, Дееспособность.Суд.Наименование);
			ДобавитьКСтроке(СтрокаОтчета, ""); 
			ДобавитьКСтроке(СтрокаОтчета, "");
			ДобавитьКСтроке(СтрокаОтчета, "");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрокаОтчета;
КонецФункции    

Функция ЗаполнитьАдресаДолжникаФЛ(Должник, ПараметрыРегистрации) Экспорт
	СтрокаОтчета = "";
	МассивАдресов = новый массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КредитныеИсторииСтруктураАдреса.Должник КАК Должник,
		|	КредитныеИсторииСтруктураАдреса.Индекс КАК Индекс,
		|	КредитныеИсторииСтруктураАдреса.КодСтраныОКСМ КАК КодСтраныОКСМ,
		|	КредитныеИсторииСтруктураАдреса.НаименованиеИнойСтраны КАК НаименованиеИнойСтраны,
		|	КредитныеИсторииСтруктураАдреса.НомерАдресаФИАС КАК НомерАдресаФИАС,
		|	КредитныеИсторииСтруктураАдреса.НаселенныйПунктОКАТО КАК НаселенныйПунктОКАТО,
		|	КредитныеИсторииСтруктураАдреса.НаселенныйПунктНазвание КАК НаселенныйПунктНазвание,
		|	КредитныеИсторииСтруктураАдреса.Улица КАК Улица,
		|	КредитныеИсторииСтруктураАдреса.Дом КАК Дом,
		|	КредитныеИсторииСтруктураАдреса.Владение КАК Владение,
		|	КредитныеИсторииСтруктураАдреса.Корпус КАК Корпус,
		|	КредитныеИсторииСтруктураАдреса.Строение КАК Строение,
		|	КредитныеИсторииСтруктураАдреса.КвартираПомещениеОфис КАК КвартираПомещениеОфис,
		|	СУММА(1) КАК СовпадениеАдресов
		|ПОМЕСТИТЬ ВтСверткаАдресов
		|ИЗ
		|	РегистрСведений.КредитныеИсторииСтруктураАдреса КАК КредитныеИсторииСтруктураАдреса
		|ГДЕ
		|	КредитныеИсторииСтруктураАдреса.Должник = &Должник
		|
		|СГРУППИРОВАТЬ ПО
		|	КредитныеИсторииСтруктураАдреса.Должник,
		|	КредитныеИсторииСтруктураАдреса.НомерАдресаФИАС,
		|	КредитныеИсторииСтруктураАдреса.НаименованиеИнойСтраны,
		|	КредитныеИсторииСтруктураАдреса.КодСтраныОКСМ,
		|	КредитныеИсторииСтруктураАдреса.Дом,
		|	КредитныеИсторииСтруктураАдреса.Улица,
		|	КредитныеИсторииСтруктураАдреса.НаселенныйПунктНазвание,
		|	КредитныеИсторииСтруктураАдреса.НаселенныйПунктОКАТО,
		|	КредитныеИсторииСтруктураАдреса.КвартираПомещениеОфис,
		|	КредитныеИсторииСтруктураАдреса.Владение,
		|	КредитныеИсторииСтруктураАдреса.Корпус,
		|	КредитныеИсторииСтруктураАдреса.Строение,
		|	КредитныеИсторииСтруктураАдреса.Индекс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КредитныеИсторииСтруктураАдреса.Должник КАК Должник,
		|	КредитныеИсторииСтруктураАдреса.ВидАдреса КАК ВидАдреса,
		|	КредитныеИсторииСтруктураАдреса.Индекс КАК Индекс,
		|	КредитныеИсторииСтруктураАдреса.КодСтраныОКСМ КАК КодСтраныОКСМ,
		|	КредитныеИсторииСтруктураАдреса.НаименованиеИнойСтраны КАК НаименованиеИнойСтраны,
		|	КредитныеИсторииСтруктураАдреса.НомерАдресаФИАС КАК НомерАдресаФИАС,
		|	КредитныеИсторииСтруктураАдреса.НаселенныйПунктОКАТО КАК НаселенныйПунктОКАТО,
		|	КредитныеИсторииСтруктураАдреса.НаселенныйПунктНазвание КАК НаселенныйПунктНазвание,
		|	КредитныеИсторииСтруктураАдреса.Улица КАК Улица,
		|	КредитныеИсторииСтруктураАдреса.Дом КАК Дом,
		|	КредитныеИсторииСтруктураАдреса.Владение КАК Владение,
		|	КредитныеИсторииСтруктураАдреса.Корпус КАК Корпус,
		|	КредитныеИсторииСтруктураАдреса.Строение КАК Строение,
		|	КредитныеИсторииСтруктураАдреса.КвартираПомещениеОфис КАК КвартираПомещениеОфис
		|ИЗ
		|	РегистрСведений.КредитныеИсторииСтруктураАдреса КАК КредитныеИсторииСтруктураАдреса
		|ГДЕ
		|	КредитныеИсторииСтруктураАдреса.Должник = &Должник";
	
	Запрос.УстановитьПараметр("Должник", Должник); 
	
	Результат = Запрос.ВыполнитьПакетСПромежуточнымиДанными()[0].Выбрать(); 
    ЕстьСовпадение = Ложь;
	Пока Результат.Следующий() Цикл
		ЕстьСовпадение =?(Результат.СовпадениеАдресов > 2, Истина, Ложь);
	КонецЦикла;	

	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		Если ВыборкаДетальныеЗаписи.ВидАдреса = Перечисления.КредитныеИсторииВидыАдресов.Фактический И ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
			СтрокаОтчета = "C8_REGADDR" + Символы.Таб + "3" +  Символы.Таб + Символы.Таб + Символы.Таб  
										+ Символы.Таб +  Символы.Таб + Символы.Таб + Символы.Таб
										+ Символы.Таб +  Символы.Таб + Символы.Таб + Символы.Таб
			                            + Символы.Таб +  Символы.Таб + Символы.Таб + Символы.Таб; 
			МассивАдресов.Добавить(СтрокаОтчета);
			СтрокаОтчета = "C9_ACTUALADDR";
			ДобавитьКСтроке(СтрокаОтчета, "1");
			ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.Индекс);
			ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.КодСтраныОКСМ);
			ДобавитьКСтроке(СтрокаОтчета, ?(СтрНайти(ВыборкаДетальныеЗаписи.КодСтраныОКСМ, "999") > 0, ВыборкаДетальныеЗаписи.НаименованиеИнойСтраны, ""));
			ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.НомерАдресаФИАС);
			ДобавитьКСтроке(СтрокаОтчета, СтрЗаменить(ВыборкаДетальныеЗаписи.НаселенныйПунктОКАТО, Символы.НПП, ""));
			ДобавитьКСтроке(СтрокаОтчета, ?(СтрНайти(ВыборкаДетальныеЗаписи.НаселенныйПунктОКАТО, "99 999 999 999") > 0, ВыборкаДетальныеЗаписи.НаселенныйПунктНазвание, ""));
			ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.Улица);
			ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.Дом);
			ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.Владение);
			ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.Корпус);
			ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.Строение);
			ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.КвартираПомещениеОфис);
			МассивАдресов.Добавить(СтрокаОтчета);	
			Прервать;
		КонецЕсли;
		
		Если ВыборкаДетальныеЗаписи.ВидАдреса = Перечисления.КредитныеИсторииВидыАдресов.Регистрации Тогда
			СтрокаОтчета = "C8_REGADDR";
			ДобавитьКСтроке(СтрокаОтчета, "1");
			ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.Индекс);
			ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.КодСтраныОКСМ);
			ДобавитьКСтроке(СтрокаОтчета, ?(СтрНайти(ВыборкаДетальныеЗаписи.КодСтраныОКСМ, "999") > 0, ВыборкаДетальныеЗаписи.НаименованиеИнойСтраны, ""));
			ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.НомерАдресаФИАС);
			ДобавитьКСтроке(СтрокаОтчета, СтрЗаменить(ВыборкаДетальныеЗаписи.НаселенныйПунктОКАТО, Символы.НПП, ""));
			ДобавитьКСтроке(СтрокаОтчета, ?(СтрНайти(ВыборкаДетальныеЗаписи.НаселенныйПунктОКАТО, "99 999 999 999") > 0, ВыборкаДетальныеЗаписи.НаселенныйПунктНазвание, ""));
			ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.Улица);
			ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.Дом);
			ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.Владение);
			ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.Корпус);
			ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.Строение);
			ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.КвартираПомещениеОфис);
			ДобавитьКСтроке(СтрокаОтчета, ?(ЗначениеЗаполнено(ПараметрыРегистрации.ДатаРегистрацииПоДокументу), киФорматДаты(ПараметрыРегистрации.ДатаРегистрацииПоДокументу), киФорматДаты(ПараметрыРегистрации.ДатаВыдачиДокумента)));
			ДобавитьКСтроке(СтрокаОтчета, ПараметрыРегистрации.НаименованиеРегистрирующегоОргана);
			ДобавитьКСтроке(СтрокаОтчета, ПараметрыРегистрации.КодПодразделенияРегистрацииРФ);
            МассивАдресов.Добавить(СтрокаОтчета);
            Продолжить;
		КонецЕсли; 
		Если ВыборкаДетальныеЗаписи.ВидАдреса = Перечисления.КредитныеИсторииВидыАдресов.Пребывания Тогда
			СтрокаОтчета = "C8_REGADDR";
			ДобавитьКСтроке(СтрокаОтчета, "1");
			ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.Индекс);
			ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.КодСтраныОКСМ);
			ДобавитьКСтроке(СтрокаОтчета, ?(СтрНайти(ВыборкаДетальныеЗаписи.КодСтраныОКСМ, "999") > 0, ВыборкаДетальныеЗаписи.НаименованиеИнойСтраны, ""));
			ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.НомерАдресаФИАС);
			ДобавитьКСтроке(СтрокаОтчета, СтрЗаменить(ВыборкаДетальныеЗаписи.НаселенныйПунктОКАТО, Символы.НПП, ""));
			ДобавитьКСтроке(СтрокаОтчета, ?(СтрНайти(ВыборкаДетальныеЗаписи.НаселенныйПунктОКАТО, "99 999 999 999") > 0, ВыборкаДетальныеЗаписи.НаселенныйПунктНазвание, ""));
			ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.Улица);
			ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.Дом);
			ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.Владение);
			ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.Корпус);
			ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.Строение);
			ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.КвартираПомещениеОфис);
			ДобавитьКСтроке(СтрокаОтчета, ?(ЗначениеЗаполнено(ПараметрыРегистрации.ДатаРегистрацииПоДокументу), киФорматДаты(ПараметрыРегистрации.ДатаРегистрацииПоДокументу), киФорматДаты(ПараметрыРегистрации.ДатаВыдачиДокумента)));
			ДобавитьКСтроке(СтрокаОтчета, ПараметрыРегистрации.НаименованиеРегистрирующегоОргана);
			ДобавитьКСтроке(СтрокаОтчета, ПараметрыРегистрации.КодПодразделенияРегистрацииРФ); 
			МассивАдресов.Добавить(СтрокаОтчета);
			Продолжить;
		КонецЕсли;

		Если ВыборкаДетальныеЗаписи.ВидАдреса = Перечисления.КредитныеИсторииВидыАдресов.Фактический Тогда
			Если ЕстьСовпадение Тогда    
				СтрокаОтчета = "C9_ACTUALADDR" + Символы.Таб + "0" + Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб 
				+ Символы.Таб + Символы.Таб	+ Символы.Таб + Символы.Таб
				+ Символы.Таб + Символы.Таб + Символы.Таб +  Символы.Таб; 
				МассивАдресов.Добавить(СтрокаОтчета);
				Продолжить; 
			Иначе	
				СтрокаОтчета = "C9_ACTUALADDR";
				ДобавитьКСтроке(СтрокаОтчета, "1");
				ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.Индекс);
				ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.КодСтраныОКСМ);
				ДобавитьКСтроке(СтрокаОтчета, ?(СтрНайти(ВыборкаДетальныеЗаписи.КодСтраныОКСМ, "999") > 0, ВыборкаДетальныеЗаписи.НаименованиеИнойСтраны, ""));
				ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.НомерАдресаФИАС);
				ДобавитьКСтроке(СтрокаОтчета, СтрЗаменить(ВыборкаДетальныеЗаписи.НаселенныйПунктОКАТО, Символы.НПП, ""));
				ДобавитьКСтроке(СтрокаОтчета, ?(СтрНайти(ВыборкаДетальныеЗаписи.НаселенныйПунктОКАТО, "99 999 999 999") > 0, ВыборкаДетальныеЗаписи.НаселенныйПунктНазвание, ""));
				ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.Улица);
				ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.Дом);
				ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.Владение);
				ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.Корпус);
				ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.Строение);
				ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.КвартираПомещениеОфис);
				МассивАдресов.Добавить(СтрокаОтчета);
				Продолжить; 
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	
	Возврат МассивАдресов;
КонецФункции 

Процедура ДобавитьИзмененияЮЛ(КоличествоОбъектовУчета, КоличествоГруппБлоков, тТелоОтчета, ИзмененныеЗаписиЮЛ, ПредыдущиеЗаписи, Настройка, Операция, ДатаОтчета, ДокументОтчет) Экспорт  
	// Смена Наименования – Код НБКИ 1.7
	// Реорганизация – Код НБКИ 1.7

	// Смена контактной информации, Адреса – Код НБКИ 1.9
	ИзмененныеЗаписиЮЛ.Колонки.Добавить("Счетчик");
	ИмяСтрокиОтчета = "B";   
	СтрокаОтчета = "";
	Для каждого Запись из ИзмененныеЗаписиЮЛ Цикл
		СформироватьТекстГруппыGROUPHEADER(КоличествоГруппБлоков, тТелоОтчета, Операция, Запись.ДатаСобытия, Запись.Событие.КодНБКИ, "", "", "");				
		Запись.Счетчик = 1;
		Если Запись.Событие.КодНБКИ = "0.0" Тогда
			Продолжить;
		ИначеЕсли Запись.Событие.КодНБКИ = "1.7" Тогда
			// Наименование 
			ИмяСтрокиОтчета = "B1_NAME";  
			СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + Запись.ПолноеНаименование + Символы.Таб + Запись.Должник.Наименование + Символы.Таб + Запись.ИноеНаименование + Символы.Таб + "" + Символы.Таб;
			ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета); 	
			
			ИмяСтрокиОтчета = "B2_ADDR";  
			СтрокаОтчета = ЗаполнитьАдресаДолжникаЮЛ(Запись.Должник, Запись.ЭлПочта);
			ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета); 
			
			ИмяСтрокиОтчета = "B3_REGNUM";
			СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + Запись.ОГРН + Символы.Таб + Запись.ИдентификаторLEI;
			ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета); 
			
			ИмяСтрокиОтчета = "B4_TAXPAYERID";
			СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + ?(СтрДлина(Запись.ИНН) = 10, "1", "2") + Символы.Таб + Запись.ИНН;
			ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета); 
			
			мПредыдущиеЗаписи = ПредыдущиеЗаписи.НайтиСтроки(Новый Структура("Должник", Запись.Должник));
			Если мПредыдущиеЗаписи.Количество() > 0 Тогда
				стрПредыдущаяЗапись = мПредыдущиеЗаписи[мПредыдущиеЗаписи.Количество() - 1];
				Если ЗначениеЗаполнено(стрПредыдущаяЗапись.ДатаРеорганизации) Тогда
					ИмяСтрокиОтчета = "B5_REORG";
					СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + ?(стрПредыдущаяЗапись.ЛиквидацияЮЛ = "0", "1", "0") + Символы.Таб + стрПредыдущаяЗапись.ЛиквидацияЮЛ 
					+ Символы.Таб + стрПредыдущаяЗапись.ПолноеНаименование + Символы.Таб + стрПредыдущаяЗапись.Должник.Наименование 
					+ Символы.Таб + стрПредыдущаяЗапись.ОГРН + Символы.Таб + киФорматДаты(стрПредыдущаяЗапись.ДатаРеорганизации); 
					ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета);
				КонецЕсли;
			КонецЕсли;	
									
		ИначеЕсли Запись.Событие.КодНБКИ = "1.9"  Тогда 
			ИмяСтрокиОтчета = "B8_PREVCRED";
			Если Настройка.ВерисяRUTDF = Перечисления.ВерсияRUTDF.v3 или Настройка.ВерисяRUTDF = Перечисления.ВерсияRUTDF.v4 Тогда 
				СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + Запись.НаличиеПравопредшественника + Символы.Таб + Запись.ПравопредшественникИзРФ + Символы.Таб + Запись.ПолноеНаименованиеПравопредшественника 
				+ Символы.Таб + Запись.ОГРНПравопредшественника;
				ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета);	 
			Иначе
				Продолжить;
			КонецЕсли;
		Иначе
			СтрокаОтчета = "Ошибка формирования изменений Юр Лица!";
			ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета);
		КонецЕсли;
		
		ЗанестиЗаписьВЖурналRUTDF(Запись, ДатаОтчета, Операция, ДокументОтчет, Запись.ОГРН + " " + Запись.ИдентификаторLEI); 
	КонецЦикла;	   
	
	Свертка = ИзмененныеЗаписиЮЛ.Скопировать();
	Свертка.Свернуть("Должник", "Счетчик");  
	КоличествоОбъектовУчета = Свертка.Количество();

КонецПроцедуры   

Функция ЗаполнитьАдресаДолжникаЮЛ(Должник, ЭлПочта) Экспорт
	СтрокаОтчета = "";
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КредитныеИсторииСтруктураАдреса.Должник КАК Должник,
		|	КредитныеИсторииСтруктураАдреса.ВидАдреса КАК ВидАдреса,
		|	КредитныеИсторииСтруктураАдреса.Индекс КАК Индекс,
		|	КредитныеИсторииСтруктураАдреса.КодСтраныОКСМ КАК КодСтраныОКСМ,
		|	КредитныеИсторииСтруктураАдреса.НаименованиеИнойСтраны КАК НаименованиеИнойСтраны,
		|	КредитныеИсторииСтруктураАдреса.НомерАдресаФИАС КАК НомерАдресаФИАС,
		|	КредитныеИсторииСтруктураАдреса.НаселенныйПунктОКАТО КАК НаселенныйПунктОКАТО,
		|	КредитныеИсторииСтруктураАдреса.НаселенныйПунктНазвание КАК НаселенныйПунктНазвание,
		|	КредитныеИсторииСтруктураАдреса.Улица КАК Улица,
		|	КредитныеИсторииСтруктураАдреса.Дом КАК Дом,
		|	КредитныеИсторииСтруктураАдреса.Владение КАК Владение,
		|	КредитныеИсторииСтруктураАдреса.Корпус КАК Корпус,
		|	КредитныеИсторииСтруктураАдреса.Строение КАК Строение,
		|	КредитныеИсторииСтруктураАдреса.КвартираПомещениеОфис КАК КвартираПомещениеОфис
		|ИЗ
		|	РегистрСведений.КредитныеИсторииСтруктураАдреса КАК КредитныеИсторииСтруктураАдреса
		|ГДЕ
		|	КредитныеИсторииСтруктураАдреса.Должник = &Должник
		|	И КредитныеИсторииСтруктураАдреса.ВидАдреса = &ВидАдреса";
	
	Запрос.УстановитьПараметр("Должник", Должник);
	Запрос.УстановитьПараметр("ВидАдреса", Перечисления.КредитныеИсторииВидыАдресов.Юридический);
	
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	ТелНомер = "";
	Комментарий = "";
	
	Если Должник.Телефоны.Количество() > 0 Тогда
		ТелНомер = Должник.Телефоны[0].НомерТелефона;
		Комментарий = Строка(Должник.Телефоны[0].ВидНомера) + " " + Строка(Должник.Телефоны[0].Комментарий);
	КонецЕсли;	
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		СтрокаОтчета = "B2_ADDR";
		ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.КодСтраныОКСМ);
		ДобавитьКСтроке(СтрокаОтчета, ?(СтрНайти(ВыборкаДетальныеЗаписи.КодСтраныОКСМ, "999") > 0, ВыборкаДетальныеЗаписи.НаименованиеИнойСтраны, ""));
		ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.НомерАдресаФИАС);
		ДобавитьКСтроке(СтрокаОтчета, СтрЗаменить(ВыборкаДетальныеЗаписи.НаселенныйПунктОКАТО, Символы.НПП, ""));
		ДобавитьКСтроке(СтрокаОтчета, ?(СтрНайти(ВыборкаДетальныеЗаписи.НаселенныйПунктОКАТО, "99 999 999 999") > 0, ВыборкаДетальныеЗаписи.НаселенныйПунктНазвание, ""));
		ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.Улица);
		ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.Дом);
		ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.Владение);
		ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.Корпус);
		ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.Строение);
		ДобавитьКСтроке(СтрокаОтчета, ВыборкаДетальныеЗаписи.КвартираПомещениеОфис); 
		ДобавитьКСтроке(СтрокаОтчета, ТелНомер);
		ДобавитьКСтроке(СтрокаОтчета, Комментарий);
		ДобавитьКСтроке(СтрокаОтчета, ЭлПочта);
	КонецЦикла;
		
	Возврат СтрокаОтчета;
КонецФункции

Функция ПолучитьПредыдущиеПоказателиЮЛ(мДолжники) Экспорт  
	// Должник  ЮЛ
		
	ПолучитьПредыдущиеПоказателиЮЛ = Новый Запрос;
	ПолучитьПредыдущиеПоказателиЮЛ.Текст = 
		"ВЫБРАТЬ
		|	КредитныеИсторииДанныеЮрЛица.Должник КАК Должник,
		|	КредитныеИсторииДанныеЮрЛица.ДатаСобытия КАК ДатаСобытия,
		|	КредитныеИсторииДанныеЮрЛица.Событие КАК Событие,
		|	КредитныеИсторииДанныеЮрЛица.ДокументСобытие КАК ДокументСобытие,
		|	КредитныеИсторииДанныеЮрЛица.ПолноеНаименование КАК ПолноеНаименование,
		|	КредитныеИсторииДанныеЮрЛица.ИноеНаименование КАК ИноеНаименование,
		|	КредитныеИсторииДанныеЮрЛица.ОГРН КАК ОГРН,
		|	КредитныеИсторииДанныеЮрЛица.ИдентификаторLEI КАК ИдентификаторLEI,
		|	КредитныеИсторииДанныеЮрЛица.ИНН КАК ИНН,
		|	КредитныеИсторииДанныеЮрЛица.ДатаРеорганизации КАК ДатаРеорганизации,
		|	КредитныеИсторииДанныеЮрЛица.Иное КАК Иное,
		|	КредитныеИсторииДанныеЮрЛица.ЛиквидацияЮЛ КАК ЛиквидацияЮЛ,
		|	КредитныеИсторииДанныеЮрЛица.ЭлПочта КАК ЭлПочта,
		|	КредитныеИсторииДанныеЮрЛица.НаличиеПравопредшественника КАК НаличиеПравопредшественника,
		|	КредитныеИсторииДанныеЮрЛица.ПравопредшественникИзРФ КАК ПравопредшественникИзРФ,
		|	КредитныеИсторииДанныеЮрЛица.ПолноеНаименованиеПравопредшественника КАК ПолноеНаименованиеПравопредшественника,
		|	КредитныеИсторииДанныеЮрЛица.ОГРНПравопредшественника КАК ОГРНПравопредшественника
		|ИЗ
		|	РегистрСведений.КредитныеИсторииДанныеЮрЛица КАК КредитныеИсторииДанныеЮрЛица
		|ГДЕ
		|	КредитныеИсторииДанныеЮрЛица.Должник В (&СубъектУчета)
		|	И КредитныеИсторииДанныеЮрЛица.ДатаРеорганизации <> &ПустаяДата
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСобытия УБЫВ";
	
	ПолучитьПредыдущиеПоказателиЮЛ.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	ПолучитьПредыдущиеПоказателиЮЛ.УстановитьПараметр("СубъектУчета", мДолжники);
	
	РезультатЗапроса = ПолучитьПредыдущиеПоказателиЮЛ.Выполнить();
	
	ВыборкаДанныеЮЛ = РезультатЗапроса.Выгрузить();  
	Возврат ВыборкаДанныеЮЛ;
				
	
КонецФункции 

Функция СформироватьТитульныеЗаписиПоДолжникам(мДолжники) Экспорт  
	
	МассивВыборок = Новый Массив;
	
	ЗапросДанныеСубъектаФЛ = Новый Запрос;
	ЗапросДанныеСубъектаФЛ.Текст = 
	"ВЫБРАТЬ
	|	КредитныеИсторииДанныеФизЛица.Должник КАК Должник,
	|	МАКСИМУМ(КредитныеИсторииДанныеФизЛица.ДатаСобытия) КАК ДатаСобытия
	|ПОМЕСТИТЬ ДатаПоследнегоСобытия
	|ИЗ
	|	РегистрСведений.КредитныеИсторииДанныеФизЛица КАК КредитныеИсторииДанныеФизЛица
	|ГДЕ
	|	КредитныеИсторииДанныеФизЛица.Должник В(&мДолжники)
	|
	|СГРУППИРОВАТЬ ПО
	|	КредитныеИсторииДанныеФизЛица.Должник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Должник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатаПоследнегоСобытия.Должник КАК Должник,
	|	ДатаПоследнегоСобытия.ДатаСобытия КАК ДатаСобытия,
	|	КредитныеИсторииДанныеФизЛица.Событие КАК Событие,
	|	КредитныеИсторииДанныеФизЛица.ДокументСобытие КАК ДокументСобытие,
	|	КредитныеИсторииДанныеФизЛица.ДатаРождения КАК ДатаРождения,
	|	КредитныеИсторииДанныеФизЛица.МестоРождения КАК МестоРождения,
	|	КредитныеИсторииДанныеФизЛица.КодСтраны КАК КодСтраны,
	|	КредитныеИсторииДанныеФизЛица.ИНН КАК ИНН,
	|	КредитныеИсторииДанныеФизЛица.СНИЛС КАК СНИЛС,
	|	КредитныеИсторииДанныеФизЛица.ЭлПочта КАК ЭлПочта,
	|	КредитныеИсторииДанныеФизЛица.Дееспособность КАК Дееспособность,
	|	КредитныеИсторииДанныеФизЛица.Иное КАК Иное,
	|	КредитныеИсторииДанныеФизЛица.КодСтраныДокумента КАК КодСтраныДокумента,
	|	КредитныеИсторииДанныеФизЛица.НаименованиеИнойСтраныДокумента КАК НаименованиеИнойСтраныДокумента,
	|	КредитныеИсторииДанныеФизЛица.КодНБКИДокумента КАК КодНБКИДокумента,
	|	КредитныеИсторииДанныеФизЛица.НаименованиеИногоДокумента КАК НаименованиеИногоДокумента,
	|	КредитныеИсторииДанныеФизЛица.СерияДокумента КАК СерияДокумента,
	|	КредитныеИсторииДанныеФизЛица.НомерДокумента КАК НомерДокумента,
	|	КредитныеИсторииДанныеФизЛица.КемВыданДокумент КАК КемВыданДокумент,
	|	КредитныеИсторииДанныеФизЛица.ДатаВыдачиДокумента КАК ДатаВыдачиДокумента,
	|	КредитныеИсторииДанныеФизЛица.КодПодразделенияРФ КАК КодПодразделенияРФ,
	|	КредитныеИсторииДанныеФизЛица.ДатаОкончанияДействияДокумента КАК ДатаОкончанияДействияДокумента,
	|	КредитныеИсторииДанныеФизЛица.ОтметкаОСмерти КАК ОтметкаОСмерти,
	|	КредитныеИсторииДанныеФизЛица.ЭтоИП КАК ЭтоИП,
	|	КредитныеИсторииДанныеФизЛица.ДатаРегистрацииИП КАК ДатаРегистрацииИП,
	|	КредитныеИсторииДанныеФизЛица.ИНН_ИП КАК ИНН_ИП,
	|	КредитныеИсторииДанныеФизЛица.ДатаРегистрацииПоДокументу КАК ДатаРегистрацииПоДокументу,
	|	КредитныеИсторииДанныеФизЛица.НаименованиеРегистрирующегоОргана КАК НаименованиеРегистрирующегоОргана,
	|	КредитныеИсторииДанныеФизЛица.КодПодразделенияРегистрацииРФ КАК КодПодразделенияРегистрацииРФ,
	|	КредитныеИсторииДанныеФизЛица.СпециальныйНалоговыйРежим КАК СпециальныйНалоговыйРежим
	|ИЗ
	|	ДатаПоследнегоСобытия КАК ДатаПоследнегоСобытия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КредитныеИсторииДанныеФизЛица КАК КредитныеИсторииДанныеФизЛица
	|		ПО ДатаПоследнегоСобытия.Должник = КредитныеИсторииДанныеФизЛица.Должник
	|			И ДатаПоследнегоСобытия.ДатаСобытия = КредитныеИсторииДанныеФизЛица.ДатаСобытия";
	
	ЗапросДанныеСубъектаФЛ.УстановитьПараметр("мДолжники", мДолжники);
	
	РезультатЗапроса = ЗапросДанныеСубъектаФЛ.Выполнить();
	
	ВыборкаДанныеФЛ = РезультатЗапроса.Выгрузить();  
	
	Если ВыборкаДанныеФЛ.Количество() > 0 Тогда
		МассивВыборок.Добавить(ВыборкаДанныеФЛ);
	КонецЕсли;		
	
	ЗапросДанныеСубъектаЮЛ = Новый Запрос;
	ЗапросДанныеСубъектаЮЛ.Текст = 
	"ВЫБРАТЬ
	|	КредитныеИсторииДанныеЮрЛица.Должник КАК Должник,
	|	МАКСИМУМ(КредитныеИсторииДанныеЮрЛица.ДатаСобытия) КАК ДатаСобытия
	|ПОМЕСТИТЬ ДатаПоследнегоСобытия
	|ИЗ
	|	РегистрСведений.КредитныеИсторииДанныеЮрЛица КАК КредитныеИсторииДанныеЮрЛица
	|ГДЕ
	|	КредитныеИсторииДанныеЮрЛица.Должник В(&мДолжники)
	|
	|СГРУППИРОВАТЬ ПО
	|	КредитныеИсторииДанныеЮрЛица.Должник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Должник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатаПоследнегоСобытия.Должник КАК Должник,
	|	ДатаПоследнегоСобытия.ДатаСобытия КАК ДатаСобытия,
	|	КредитныеИсторииДанныеЮрЛица.Событие КАК Событие,
	|	КредитныеИсторииДанныеЮрЛица.ДокументСобытие КАК ДокументСобытие,
	|	КредитныеИсторииДанныеЮрЛица.ПолноеНаименование КАК ПолноеНаименование,
	|	КредитныеИсторииДанныеЮрЛица.ИноеНаименование КАК ИноеНаименование,
	|	КредитныеИсторииДанныеЮрЛица.ОГРН КАК ОГРН,
	|	КредитныеИсторииДанныеЮрЛица.ИдентификаторLEI КАК ИдентификаторLEI,
	|	КредитныеИсторииДанныеЮрЛица.ИНН КАК ИНН,
	|	КредитныеИсторииДанныеЮрЛица.ДатаРеорганизации КАК ДатаРеорганизации,
	|	КредитныеИсторииДанныеЮрЛица.Иное КАК Иное,
	|	КредитныеИсторииДанныеЮрЛица.ЛиквидацияЮЛ КАК ЛиквидацияЮЛ,
	|	КредитныеИсторииДанныеЮрЛица.ЭлПочта КАК ЭлПочта,
	|	КредитныеИсторииДанныеЮрЛица.НаличиеПравопредшественника КАК НаличиеПравопредшественника,
	|	КредитныеИсторииДанныеЮрЛица.ПравопредшественникИзРФ КАК ПравопредшественникИзРФ,
	|	КредитныеИсторииДанныеЮрЛица.ПолноеНаименованиеПравопредшественника КАК ПолноеНаименованиеПравопредшественника,
	|	КредитныеИсторииДанныеЮрЛица.ОГРНПравопредшественника КАК ОГРНПравопредшественника
	|ИЗ
	|	ДатаПоследнегоСобытия КАК ДатаПоследнегоСобытия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КредитныеИсторииДанныеЮрЛица КАК КредитныеИсторииДанныеЮрЛица
	|		ПО ДатаПоследнегоСобытия.Должник = КредитныеИсторииДанныеЮрЛица.Должник
	|			И ДатаПоследнегоСобытия.ДатаСобытия = КредитныеИсторииДанныеЮрЛица.ДатаСобытия";
	
	ЗапросДанныеСубъектаЮЛ.УстановитьПараметр("мДолжники", мДолжники);
	
	РезультатЗапроса = ЗапросДанныеСубъектаЮЛ.Выполнить();
	
	ВыборкаДанныеЮЛ = РезультатЗапроса.Выгрузить(); 
		
	Если ВыборкаДанныеЮЛ.Количество() > 0 Тогда
		МассивВыборок.Добавить(ВыборкаДанныеЮЛ);
	КонецЕсли;
	
	Возврат МассивВыборок; 
		
	
КонецФункции       

Функция СформироватьТитульныеЗаписиПоПоручителям(мСделки) Экспорт  
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Поручительства.Поручитель КАК Поручитель
		|ИЗ
		|	РегистрСведений.Поручительства КАК Поручительства
		|ГДЕ
		|	Поручительства.ДолговоеОбязательство В(&ДолговоеОбязательство)";
	
	Запрос.УстановитьПараметр("ДолговоеОбязательство", мСделки);
	
	РезультатПоручитель = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Поручитель");
	
	
	МассивВыборок = Новый Массив;
	
	ЗапросДанныеСубъектаФЛ = Новый Запрос;
	ЗапросДанныеСубъектаФЛ.Текст = 
	"ВЫБРАТЬ
	|	КредитныеИсторииДанныеФизЛица.Должник КАК Должник,
	|	МАКСИМУМ(КредитныеИсторииДанныеФизЛица.ДатаСобытия) КАК ДатаСобытия
	|ПОМЕСТИТЬ ДатаПоследнегоСобытия
	|ИЗ
	|	РегистрСведений.КредитныеИсторииДанныеФизЛица КАК КредитныеИсторииДанныеФизЛица
	|ГДЕ
	|	КредитныеИсторииДанныеФизЛица.Должник В(&мДолжники)
	|
	|СГРУППИРОВАТЬ ПО
	|	КредитныеИсторииДанныеФизЛица.Должник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Должник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатаПоследнегоСобытия.Должник КАК Должник,
	|	ДатаПоследнегоСобытия.ДатаСобытия КАК ДатаСобытия,
	|	КредитныеИсторииДанныеФизЛица.Событие КАК Событие,
	|	КредитныеИсторииДанныеФизЛица.ДокументСобытие КАК ДокументСобытие,
	|	КредитныеИсторииДанныеФизЛица.ДатаРождения КАК ДатаРождения,
	|	КредитныеИсторииДанныеФизЛица.МестоРождения КАК МестоРождения,
	|	КредитныеИсторииДанныеФизЛица.КодСтраны КАК КодСтраны,
	|	КредитныеИсторииДанныеФизЛица.ИНН КАК ИНН,
	|	КредитныеИсторииДанныеФизЛица.СНИЛС КАК СНИЛС,
	|	КредитныеИсторииДанныеФизЛица.ЭлПочта КАК ЭлПочта,
	|	КредитныеИсторииДанныеФизЛица.Дееспособность КАК Дееспособность,
	|	КредитныеИсторииДанныеФизЛица.Иное КАК Иное,
	|	КредитныеИсторииДанныеФизЛица.КодСтраныДокумента КАК КодСтраныДокумента,
	|	КредитныеИсторииДанныеФизЛица.НаименованиеИнойСтраныДокумента КАК НаименованиеИнойСтраныДокумента,
	|	КредитныеИсторииДанныеФизЛица.КодНБКИДокумента КАК КодНБКИДокумента,
	|	КредитныеИсторииДанныеФизЛица.НаименованиеИногоДокумента КАК НаименованиеИногоДокумента,
	|	КредитныеИсторииДанныеФизЛица.СерияДокумента КАК СерияДокумента,
	|	КредитныеИсторииДанныеФизЛица.НомерДокумента КАК НомерДокумента,
	|	КредитныеИсторииДанныеФизЛица.КемВыданДокумент КАК КемВыданДокумент,
	|	КредитныеИсторииДанныеФизЛица.ДатаВыдачиДокумента КАК ДатаВыдачиДокумента,
	|	КредитныеИсторииДанныеФизЛица.КодПодразделенияРФ КАК КодПодразделенияРФ,
	|	КредитныеИсторииДанныеФизЛица.ДатаОкончанияДействияДокумента КАК ДатаОкончанияДействияДокумента,
	|	КредитныеИсторииДанныеФизЛица.ОтметкаОСмерти КАК ОтметкаОСмерти,
	|	КредитныеИсторииДанныеФизЛица.ЭтоИП КАК ЭтоИП,
	|	КредитныеИсторииДанныеФизЛица.ДатаРегистрацииИП КАК ДатаРегистрацииИП,
	|	КредитныеИсторииДанныеФизЛица.ИНН_ИП КАК ИНН_ИП,
	|	КредитныеИсторииДанныеФизЛица.ДатаРегистрацииПоДокументу КАК ДатаРегистрацииПоДокументу,
	|	КредитныеИсторииДанныеФизЛица.НаименованиеРегистрирующегоОргана КАК НаименованиеРегистрирующегоОргана,
	|	КредитныеИсторииДанныеФизЛица.КодПодразделенияРегистрацииРФ КАК КодПодразделенияРегистрацииРФ,
	|	КредитныеИсторииДанныеФизЛица.СпециальныйНалоговыйРежим КАК СпециальныйНалоговыйРежим
	|ИЗ
	|	ДатаПоследнегоСобытия КАК ДатаПоследнегоСобытия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КредитныеИсторииДанныеФизЛица КАК КредитныеИсторииДанныеФизЛица
	|		ПО ДатаПоследнегоСобытия.Должник = КредитныеИсторииДанныеФизЛица.Должник
	|			И ДатаПоследнегоСобытия.ДатаСобытия = КредитныеИсторииДанныеФизЛица.ДатаСобытия";
	
	ЗапросДанныеСубъектаФЛ.УстановитьПараметр("мДолжники", РезультатПоручитель);
	
	РезультатЗапроса = ЗапросДанныеСубъектаФЛ.Выполнить();
	
	ВыборкаДанныеФЛ = РезультатЗапроса.Выгрузить();  
	
	Если ВыборкаДанныеФЛ.Количество() > 0 Тогда
		МассивВыборок.Добавить(ВыборкаДанныеФЛ);
	КонецЕсли;		
	
	ЗапросДанныеСубъектаЮЛ = Новый Запрос;
	ЗапросДанныеСубъектаЮЛ.Текст = 
	"ВЫБРАТЬ
	|	КредитныеИсторииДанныеЮрЛица.Должник КАК Должник,
	|	МАКСИМУМ(КредитныеИсторииДанныеЮрЛица.ДатаСобытия) КАК ДатаСобытия
	|ПОМЕСТИТЬ ДатаПоследнегоСобытия
	|ИЗ
	|	РегистрСведений.КредитныеИсторииДанныеЮрЛица КАК КредитныеИсторииДанныеЮрЛица
	|ГДЕ
	|	КредитныеИсторииДанныеЮрЛица.Должник В(&мДолжники)
	|
	|СГРУППИРОВАТЬ ПО
	|	КредитныеИсторииДанныеЮрЛица.Должник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Должник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатаПоследнегоСобытия.Должник КАК Должник,
	|	ДатаПоследнегоСобытия.ДатаСобытия КАК ДатаСобытия,
	|	КредитныеИсторииДанныеЮрЛица.Событие КАК Событие,
	|	КредитныеИсторииДанныеЮрЛица.ДокументСобытие КАК ДокументСобытие,
	|	КредитныеИсторииДанныеЮрЛица.ПолноеНаименование КАК ПолноеНаименование,
	|	КредитныеИсторииДанныеЮрЛица.ИноеНаименование КАК ИноеНаименование,
	|	КредитныеИсторииДанныеЮрЛица.ОГРН КАК ОГРН,
	|	КредитныеИсторииДанныеЮрЛица.ИдентификаторLEI КАК ИдентификаторLEI,
	|	КредитныеИсторииДанныеЮрЛица.ИНН КАК ИНН,
	|	КредитныеИсторииДанныеЮрЛица.ДатаРеорганизации КАК ДатаРеорганизации,
	|	КредитныеИсторииДанныеЮрЛица.Иное КАК Иное,
	|	КредитныеИсторииДанныеЮрЛица.ЛиквидацияЮЛ КАК ЛиквидацияЮЛ,
	|	КредитныеИсторииДанныеЮрЛица.ЭлПочта КАК ЭлПочта,
	|	КредитныеИсторииДанныеЮрЛица.НаличиеПравопредшественника КАК НаличиеПравопредшественника,
	|	КредитныеИсторииДанныеЮрЛица.ПравопредшественникИзРФ КАК ПравопредшественникИзРФ,
	|	КредитныеИсторииДанныеЮрЛица.ПолноеНаименованиеПравопредшественника КАК ПолноеНаименованиеПравопредшественника,
	|	КредитныеИсторииДанныеЮрЛица.ОГРНПравопредшественника КАК ОГРНПравопредшественника
	|ИЗ
	|	ДатаПоследнегоСобытия КАК ДатаПоследнегоСобытия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КредитныеИсторииДанныеЮрЛица КАК КредитныеИсторииДанныеЮрЛица
	|		ПО ДатаПоследнегоСобытия.Должник = КредитныеИсторииДанныеЮрЛица.Должник
	|			И ДатаПоследнегоСобытия.ДатаСобытия = КредитныеИсторииДанныеЮрЛица.ДатаСобытия";
	
	ЗапросДанныеСубъектаЮЛ.УстановитьПараметр("мДолжники", РезультатПоручитель);
	
	РезультатЗапроса = ЗапросДанныеСубъектаЮЛ.Выполнить();
	
	ВыборкаДанныеЮЛ = РезультатЗапроса.Выгрузить(); 
		
	Если ВыборкаДанныеЮЛ.Количество() > 0 Тогда
		МассивВыборок.Добавить(ВыборкаДанныеЮЛ);
	КонецЕсли;
	
	Возврат МассивВыборок; 
		
	
КонецФункции   

Функция СформироватьТитульныеЗаписиПоНаследникам(мСделки) Экспорт  
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Наследники.Наследник КАК Наследник
		|ИЗ
		|	РегистрСведений.Наследники КАК Наследники
		|ГДЕ
		|	Наследники.ДолговоеОбязательство В(&ДолговоеОбязательство)";
	
	Запрос.УстановитьПараметр("ДолговоеОбязательство", мСделки);
	
	РезультатНаследник = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Наследник");
	
	
	МассивВыборок = Новый Массив;
	
	ЗапросДанныеСубъектаФЛ = Новый Запрос;
	ЗапросДанныеСубъектаФЛ.Текст = 
	"ВЫБРАТЬ
	|	КредитныеИсторииДанныеФизЛица.Должник КАК Должник,
	|	МАКСИМУМ(КредитныеИсторииДанныеФизЛица.ДатаСобытия) КАК ДатаСобытия
	|ПОМЕСТИТЬ ДатаПоследнегоСобытия
	|ИЗ
	|	РегистрСведений.КредитныеИсторииДанныеФизЛица КАК КредитныеИсторииДанныеФизЛица
	|ГДЕ
	|	КредитныеИсторииДанныеФизЛица.Должник В(&мДолжники)
	|
	|СГРУППИРОВАТЬ ПО
	|	КредитныеИсторииДанныеФизЛица.Должник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Должник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатаПоследнегоСобытия.Должник КАК Должник,
	|	ДатаПоследнегоСобытия.ДатаСобытия КАК ДатаСобытия,
	|	КредитныеИсторииДанныеФизЛица.Событие КАК Событие,
	|	КредитныеИсторииДанныеФизЛица.ДокументСобытие КАК ДокументСобытие,
	|	КредитныеИсторииДанныеФизЛица.ДатаРождения КАК ДатаРождения,
	|	КредитныеИсторииДанныеФизЛица.МестоРождения КАК МестоРождения,
	|	КредитныеИсторииДанныеФизЛица.КодСтраны КАК КодСтраны,
	|	КредитныеИсторииДанныеФизЛица.ИНН КАК ИНН,
	|	КредитныеИсторииДанныеФизЛица.СНИЛС КАК СНИЛС,
	|	КредитныеИсторииДанныеФизЛица.ЭлПочта КАК ЭлПочта,
	|	КредитныеИсторииДанныеФизЛица.Дееспособность КАК Дееспособность,
	|	КредитныеИсторииДанныеФизЛица.Иное КАК Иное,
	|	КредитныеИсторииДанныеФизЛица.КодСтраныДокумента КАК КодСтраныДокумента,
	|	КредитныеИсторииДанныеФизЛица.НаименованиеИнойСтраныДокумента КАК НаименованиеИнойСтраныДокумента,
	|	КредитныеИсторииДанныеФизЛица.КодНБКИДокумента КАК КодНБКИДокумента,
	|	КредитныеИсторииДанныеФизЛица.НаименованиеИногоДокумента КАК НаименованиеИногоДокумента,
	|	КредитныеИсторииДанныеФизЛица.СерияДокумента КАК СерияДокумента,
	|	КредитныеИсторииДанныеФизЛица.НомерДокумента КАК НомерДокумента,
	|	КредитныеИсторииДанныеФизЛица.КемВыданДокумент КАК КемВыданДокумент,
	|	КредитныеИсторииДанныеФизЛица.ДатаВыдачиДокумента КАК ДатаВыдачиДокумента,
	|	КредитныеИсторииДанныеФизЛица.КодПодразделенияРФ КАК КодПодразделенияРФ,
	|	КредитныеИсторииДанныеФизЛица.ДатаОкончанияДействияДокумента КАК ДатаОкончанияДействияДокумента,
	|	КредитныеИсторииДанныеФизЛица.ОтметкаОСмерти КАК ОтметкаОСмерти,
	|	КредитныеИсторииДанныеФизЛица.ЭтоИП КАК ЭтоИП,
	|	КредитныеИсторииДанныеФизЛица.ДатаРегистрацииИП КАК ДатаРегистрацииИП,
	|	КредитныеИсторииДанныеФизЛица.ИНН_ИП КАК ИНН_ИП,
	|	КредитныеИсторииДанныеФизЛица.ДатаРегистрацииПоДокументу КАК ДатаРегистрацииПоДокументу,
	|	КредитныеИсторииДанныеФизЛица.НаименованиеРегистрирующегоОргана КАК НаименованиеРегистрирующегоОргана,
	|	КредитныеИсторииДанныеФизЛица.КодПодразделенияРегистрацииРФ КАК КодПодразделенияРегистрацииРФ,
	|	КредитныеИсторииДанныеФизЛица.СпециальныйНалоговыйРежим КАК СпециальныйНалоговыйРежим
	|ИЗ
	|	ДатаПоследнегоСобытия КАК ДатаПоследнегоСобытия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КредитныеИсторииДанныеФизЛица КАК КредитныеИсторииДанныеФизЛица
	|		ПО ДатаПоследнегоСобытия.Должник = КредитныеИсторииДанныеФизЛица.Должник
	|			И ДатаПоследнегоСобытия.ДатаСобытия = КредитныеИсторииДанныеФизЛица.ДатаСобытия";
	
	ЗапросДанныеСубъектаФЛ.УстановитьПараметр("мДолжники", РезультатНаследник);
	
	РезультатЗапроса = ЗапросДанныеСубъектаФЛ.Выполнить();
	
	ВыборкаДанныеФЛ = РезультатЗапроса.Выгрузить();  
	
	Если ВыборкаДанныеФЛ.Количество() > 0 Тогда
		МассивВыборок.Добавить(ВыборкаДанныеФЛ);
	КонецЕсли;		
	
	ЗапросДанныеСубъектаЮЛ = Новый Запрос;
	ЗапросДанныеСубъектаЮЛ.Текст = 
	"ВЫБРАТЬ
	|	КредитныеИсторииДанныеЮрЛица.Должник КАК Должник,
	|	МАКСИМУМ(КредитныеИсторииДанныеЮрЛица.ДатаСобытия) КАК ДатаСобытия
	|ПОМЕСТИТЬ ДатаПоследнегоСобытия
	|ИЗ
	|	РегистрСведений.КредитныеИсторииДанныеЮрЛица КАК КредитныеИсторииДанныеЮрЛица
	|ГДЕ
	|	КредитныеИсторииДанныеЮрЛица.Должник В(&мДолжники)
	|
	|СГРУППИРОВАТЬ ПО
	|	КредитныеИсторииДанныеЮрЛица.Должник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Должник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатаПоследнегоСобытия.Должник КАК Должник,
	|	ДатаПоследнегоСобытия.ДатаСобытия КАК ДатаСобытия,
	|	КредитныеИсторииДанныеЮрЛица.Событие КАК Событие,
	|	КредитныеИсторииДанныеЮрЛица.ДокументСобытие КАК ДокументСобытие,
	|	КредитныеИсторииДанныеЮрЛица.ПолноеНаименование КАК ПолноеНаименование,
	|	КредитныеИсторииДанныеЮрЛица.ИноеНаименование КАК ИноеНаименование,
	|	КредитныеИсторииДанныеЮрЛица.ОГРН КАК ОГРН,
	|	КредитныеИсторииДанныеЮрЛица.ИдентификаторLEI КАК ИдентификаторLEI,
	|	КредитныеИсторииДанныеЮрЛица.ИНН КАК ИНН,
	|	КредитныеИсторииДанныеЮрЛица.ДатаРеорганизации КАК ДатаРеорганизации,
	|	КредитныеИсторииДанныеЮрЛица.Иное КАК Иное,
	|	КредитныеИсторииДанныеЮрЛица.ЛиквидацияЮЛ КАК ЛиквидацияЮЛ,
	|	КредитныеИсторииДанныеЮрЛица.ЭлПочта КАК ЭлПочта,
	|	КредитныеИсторииДанныеЮрЛица.НаличиеПравопредшественника КАК НаличиеПравопредшественника,
	|	КредитныеИсторииДанныеЮрЛица.ПравопредшественникИзРФ КАК ПравопредшественникИзРФ,
	|	КредитныеИсторииДанныеЮрЛица.ПолноеНаименованиеПравопредшественника КАК ПолноеНаименованиеПравопредшественника,
	|	КредитныеИсторииДанныеЮрЛица.ОГРНПравопредшественника КАК ОГРНПравопредшественника
	|ИЗ
	|	ДатаПоследнегоСобытия КАК ДатаПоследнегоСобытия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КредитныеИсторииДанныеЮрЛица КАК КредитныеИсторииДанныеЮрЛица
	|		ПО ДатаПоследнегоСобытия.Должник = КредитныеИсторииДанныеЮрЛица.Должник
	|			И ДатаПоследнегоСобытия.ДатаСобытия = КредитныеИсторииДанныеЮрЛица.ДатаСобытия";
	
	ЗапросДанныеСубъектаЮЛ.УстановитьПараметр("мДолжники", РезультатНаследник);
	
	РезультатЗапроса = ЗапросДанныеСубъектаЮЛ.Выполнить();
	
	ВыборкаДанныеЮЛ = РезультатЗапроса.Выгрузить(); 
		
	Если ВыборкаДанныеЮЛ.Количество() > 0 Тогда
		МассивВыборок.Добавить(ВыборкаДанныеЮЛ);
	КонецЕсли;
	
	Возврат МассивВыборок; 
		
	
КонецФункции 


Процедура ДобавитьИзмененияСделки(КоличествоОбъектовУчета, КоличествоГруппБлоков, тТелоОтчета, ИзмененныеЗаписиСделки, ТитульныеЗаписиДолжника, ТитульныеЗаписиПоручителя, ТитульныеЗаписиНаследника, Настройка, Операция, ДатаОтчета, ДокументОтчет) Экспорт 
	
	ПараметрыФункций = Новый Структура;
	ПараметрыФункций.Вставить("Настройка", Настройка);
	ПараметрыФункций.Вставить("ПСК", 0); 
	ПараметрыФункций.Вставить("ЕстьЗадолженность", Истина);
	ПараметрыФункций.Вставить("ТекущаяЗадолженность", 0);
	ПараметрыФункций.Вставить("Поручитель", "1");
	ПараметрыФункций.Вставить("Наследник", "1"); 
	ПараметрыФункций.Вставить("строкаТекущаяЗадолженность", Неопределено);
	ПараметрыФункций.Вставить("строкиПлатежи", Неопределено); 
	ПараметрыФункций.Вставить("ЗаписьОГосПоддержке", Неопределено); 
	
	ТаблицаСостоянияЗадолженности = Новый ТаблицаЗначений;  
	
	ЗаписиОГосПоддержке = КредитныеИсторииИзменения.ПолучитьЗаписиОГосПоддержке(ИзмененныеЗаписиСделки);
	
	ИзмененныеЗаписиСделки.Колонки.Добавить("Счетчик");                    
		
	Для Каждого Запись из ИзмененныеЗаписиСделки Цикл
		СформироватьТекстГруппыGROUPHEADER(КоличествоГруппБлоков, тТелоОтчета, Операция, Запись.ДатаСобытия, Запись.Событие.КодНБКИ, "", "", "");	  
		ПоручительСобытия = ВычислитьПоручителяСобытия(Запись.ДокументСобытие);
		НаследникСобытия = ВычислитьНаследника(Запись.Сделка, Запись.ДокументСобытие);
		
		Если ЗначениеЗаполнено(НаследникСобытия) Тогда
			Если ТипЗнч(Запись.ДокументСобытие) = Тип("СправочникСсылка.Контрагенты") И Запись.Событие.КодНБКИ = "2.5" Тогда
				ТитульнаяЗапись = НайтиЗаписьДолжникаДляЗаголовка(ТитульныеЗаписиДолжника, Запись.Сделка.Должник);
		    Иначе
				ТитульнаяЗапись = НайтиЗаписьДолжникаДляЗаголовка(ТитульныеЗаписиНаследника, НаследникСобытия);
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ПоручительСобытия) Тогда
				ТитульнаяЗапись = НайтиЗаписьДолжникаДляЗаголовка(ТитульныеЗаписиПоручителя, ПоручительСобытия);	
			Иначе
				ТитульнаяЗапись = НайтиЗаписьДолжникаДляЗаголовка(ТитульныеЗаписиДолжника, Запись.Сделка.Должник);
			КонецЕсли;	
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(ТитульнаяЗапись) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Для договора " + Запись.Сделка + "не определен субъект события! Проверьте все связанные документы, Наследников и Поручителей.";
			Сообщение.Сообщить();
			Возврат;
        КонецЕсли;
		СформироватьБлокиТитульныхЗаписей(ТитульнаяЗапись, тТелоОтчета, Настройка); 
		Запись.Счетчик = 1;
		Попытка
			ДР = ТитульнаяЗапись.ДатаРождения;
			Префикс = "C";  
			ПараметрыФункций.Вставить("Дееспособность", ТитульнаяЗапись.Дееспособность); 
            ПараметрыФункций.Вставить("ЛицоНеСуществует", Неопределено);
		Исключение
			Префикс = "B";
			ПараметрыФункций.Вставить("Дееспособность", Неопределено); 
            ПараметрыФункций.Вставить("ЛицоНеСуществует", ТитульнаяЗапись.ЛиквидацияЮЛ);
		КонецПопытки; 
		
		Если Запись.Событие.КодНБКИ = "1.4" Или Запись.Событие.КодНБКИ = "2.11.2" Тогда 
			//блоки 8 -12
			БлокИнформацииОтДолжника = СформироватьИнфоДолжникСобытие1_4(ТитульнаяЗапись, Префикс, ПараметрыФункций);
			Для Каждого Элемент из БлокИнформацииОтДолжника Цикл
				ДобавитьКТелуОтчета(тТелоОтчета, Элемент);
			КонецЦикла;
		КонецЕсли;
		
		// СтрокаУИД = СформироватьБлок17_10(Запись, Префикс);
		// ДобавитьКТелуОтчета(тТелоОтчета, СтрокаУИД);
		
		НЗСоставОтчета = РегистрыСведений.КредитныеИстории_СобытияИГруппыБлоков.СоздатьНаборЗаписей();
		НЗСоставОтчета.Отбор.Событие.Установить(Запись.Событие);
		НЗСоставОтчета.Прочитать();  
		
		стрЗаписьОГосПоддержке =  ЗаписиОГосПоддержке.Найти(Запись.Сделка, "ОбъектУчета");
		
		Если ЗначениеЗаполнено(стрЗаписьОГосПоддержке) Тогда
			ПараметрыФункций.ЗаписьОГосПоддержке = стрЗаписьОГосПоддержке.ЗаписьОГосподдержке;
		Иначе   
			ПараметрыФункций.ЗаписьОГосПоддержке = "";
		КонецЕсли;	 
		
		//ПараметрыФункций.строкиПлатежей = ТаблицаСостоянияЗадолженности.НайтиСтроки(Новый Структура("ОбъектУчета", Запись.Сделка));
		Для Каждого ЗаписьСостава ИЗ НЗСоставОтчета Цикл
			
			РезультатФункции = Вычислить("КредитныеИстории." + ЗаписьСостава.ИмяПроцедурыУЗ + "(Запись, Префикс, ПараметрыФункций)");
			Если ТипЗнч(РезультатФункции) = Тип("Строка") Тогда
				Если ЗначениеЗаполнено(РезультатФункции) Тогда
					ДобавитьКТелуОтчета(тТелоОтчета, РезультатФункции); 
				КонецЕсли;
			ИначеЕсли ТипЗнч(РезультатФункции) = Тип("Массив") Тогда
				Для Каждого Значение Из РезультатФункции Цикл
					Если ЗначениеЗаполнено(Значение) Тогда
						ДобавитьКТелуОтчета(тТелоОтчета, Значение);
					КонецЕсли;
				КонецЦикла;	
			Иначе
				ДобавитьКТелуОтчета(тТелоОтчета, "Ошибка формирования группы блоков! " + Строка(Запись.Сделка));
			КонецЕсли;
		КонецЦикла;
		
		ЗанестиЗаписьВЖурналRUTDF(Запись, ДатаОтчета, Операция, ДокументОтчет, Запись.UID);
	КонецЦикла;
	
	Свертка = ИзмененныеЗаписиСделки.Скопировать();
	Свертка.Свернуть("Сделка", "Счетчик");  
	КоличествоОбъектовУчета = Свертка.Количество();

	
КонецПроцедуры  

Функция НайтиЗаписьДолжникаДляЗаголовка(МассивТаблиц, Должник) Экспорт
	Для Счетчик = 0 по МассивТаблиц.Количество() - 1 Цикл
		Таблица = МассивТаблиц[Счетчик];
		Если ЗначениеЗаполнено(Таблица) Тогда
			мНайдСтроки = Таблица.НайтиСтроки(Новый Структура("Должник", Должник));
			Для каждого найдСтрока Из мНайдСтроки Цикл
				СтрокаДолжник = найдСтрока;
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла;
	Возврат СтрокаДолжник;
КонецФункции 

Функция ВычислитьПоручителяСобытия(ДокументСобытие) Экспорт  
	Если ТипЗнч(ДокументСобытие) = Тип("ДокументСсылка.Обеспечительства") Тогда
		Поручитель = ?(ЗначениеЗаполнено(ДокументСобытие.Поручитель), ДокументСобытие.Поручитель, Неопределено);
	ИначеЕсли ТипЗнч(ДокументСобытие) = Тип("ДокументСсылка.ПоступлениеПлатежа") Тогда
		Поручитель = Неопределено;
		Если ДокументСобытие.ВидПлательщика = Перечисления.ВидыПлательщика.Поручитель и ЗначениеЗаполнено(ДокументСобытие.Плательщик) Тогда
			Поручитель = ДокументСобытие.Плательщик;
		КонецЕсли;
	Иначе
		Поручитель = Неопределено;
	КонецЕсли;	
	Возврат Поручитель;
КонецФункции

Функция ВычислитьНаследника(Сделка, ДокументСобытие) Экспорт
	
	Если ТипЗнч(ДокументСобытие) = Тип("СправочникСсылка.Контрагенты") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Наследники.ДолговоеОбязательство КАК ДолговоеОбязательство,
		|	Наследники.Наследник КАК Наследник
		|ИЗ
		|	РегистрСведений.Наследники КАК Наследники
		|ГДЕ
		|	Наследники.ДолговоеОбязательство = &ДолговоеОбязательство
		|	И Наследники.Наследник = &Наследник";
		
		Запрос.УстановитьПараметр("ДолговоеОбязательство", Сделка);
		Запрос.УстановитьПараметр("Наследник", ДокументСобытие);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Наследник = ДокументСобытие;
		Иначе
			Наследник = Неопределено;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДокументСобытие) = Тип("ДокументСсылка.ПоступлениеПлатежа") Тогда	
		Наследник = Неопределено;
		Если ДокументСобытие.ВидПлательщика = Перечисления.ВидыПлательщика.Наследник и ЗначениеЗаполнено(ДокументСобытие.Плательщик) Тогда
			Наследник = ДокументСобытие.Плательщик;
		КонецЕсли;	
	Иначе
		Наследник = Неопределено;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Наследники.Наследник КАК Наследник
		|ИЗ
		|	РегистрСведений.Наследники КАК Наследники
		|ГДЕ
		|	Наследники.ДолговоеОбязательство = &ДолговоеОбязательство";
		
		Запрос.УстановитьПараметр("ДолговоеОбязательство", Сделка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Наследник = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Наследник), ВыборкаДетальныеЗаписи.Наследник, Неопределено);
		КонецЦикла;
		
		Наследник = ?((Найти(Строка(Наследник),"<Объект не найден>") = 0), Наследник, Неопределено);
				
	КонецЕсли;                                                  
	
	Возврат Наследник;
КонецФункции 


Процедура ЗанестиЗаписьВЖурналRUTDF(Запись, ДатаОтчета, Операция, ДокументОтчет, Идентификатор) Экспорт
	ЗаписьЖурнала = РегистрыСведений.ЖурналВыгрузокНБКИRUTDF.СоздатьМенеджерЗаписи(); 
	Попытка 
		ОбъектУчета = Запись.Сделка;
	Исключение 
		ОбъектУчета = Запись.Должник;
	КонецПопытки;	
	
	Попытка 
		Комментарий = Запись.Комментарий;
		Причина = Запись.Причина;
	Исключение 
		Комментарий = "";
		Причина = "";
	КонецПопытки;	
	
	ЗаписьЖурнала.ОбъектУчета = ОбъектУчета;
	ЗаписьЖурнала.ДатаПоследнейВыгрузки = ДатаОтчета;
	ЗаписьЖурнала.Событие = Запись.Событие;
	ЗаписьЖурнала.ДатаСобытия = Запись.ДатаСобытия;
	ЗаписьЖурнала.ДокументОтчет = ДокументОтчет;
	
	ЗаписьЖурнала.ИмяФайла = ДокументОтчет.ИмяФайла;
	ЗаписьЖурнала.Операция = Перечисления.ВидыОперацийОтчетаRUTDF[Операция];
	ЗаписьЖурнала.Принято = Перечисления.СтатусыОтчетаНБКИ.ВОбработке;
	ЗаписьЖурнала.Идентификатор = Идентификатор;
	ЗаписьЖурнала.Комментарий = Комментарий;
	ЗаписьЖурнала.Причина = Причина;
	ЗаписьЖурнала.Записать();	
КонецПроцедуры  

Процедура СформироватьБлокиТитульныхЗаписей(Запись, тТелоОтчета, Настройка) Экспорт  
		
	Попытка
		ДР = Запись.ДатаРождения;
		Префикс = "C";
	Исключение
		Префикс = "B";
	КонецПопытки;	
	
	ЭтоПервичное = (Запись.Событие.КодНБКИ = "0.0");
	КоличествоФИО = Запись.Должник.ФИО.Количество();
	СменаФИОБезПаспорта = (ЭтоПервичное И КоличествоФИО > 1);
	
	СтрокаОтчета = "";
	Если Префикс = "C" Тогда
		ИмяСтрокиОтчета = "C1_NAME";
		ФИОТекущее = Запись.Должник.ФИО[Запись.Должник.ФИО.Количество() - 1];
		Если СменаФИОБезПаспорта И Настройка.ПередаватьСтароеИмя Тогда 
			//Если Клиенту известно о смене имени, оно занесено в тч, но события 1.7 не было зафиксировано клиентом
			//- не занесены новые паспортные данные
			//Передаем предпоследнее имя
			ФИОТекущее = Запись.Должник.ФИО[Запись.Должник.ФИО.Количество() - 2];
		КонецЕсли;
		СтрокаОтчета = ИмяСтрокиОтчета;
		ДобавитьКСтроке(СтрокаОтчета, ФИОТекущее.Фамилия);
		ДобавитьКСтроке(СтрокаОтчета, ФИОТекущее.Имя);
		ДобавитьКСтроке(СтрокаОтчета, ФИОТекущее.Отчество);
		ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета); 
		
		ИмяСтрокиОтчета = "C2_PREVNAME"; 	
		СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + "0" + Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб;
		ДобавитьКТелуОтчета(тТелоОтчета,СтрокаОтчета);
		
		ИмяСтрокиОтчета = "C3_BIRTH";
		СтрокаОтчета = ИмяСтрокиОтчета; 
		ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Запись.ДатаРождения));
		ДобавитьКСтроке(СтрокаОтчета, ?(Врег(Запись.КодСтраны) = "РОССИЯ", "643", Запись.КодСтраны));		
		ДобавитьКСтроке(СтрокаОтчета, Запись.МестоРождения);
		СтрокаОтчета = ОчисткаСтроки(СтрокаОтчета);
		ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета); 
		
		ИмяСтрокиОтчета = "C4_ID";
		СтрокаОтчета = ИмяСтрокиОтчета;    
		ДобавитьКСтроке(СтрокаОтчета, ?(Врег(Запись.КодСтраныДокумента) = "РОССИЯ", "643", Запись.КодСтраныДокумента));
		ДобавитьКСтроке(СтрокаОтчета, ?(СтрНайти(Запись.КодСтраныДокумента, "999") > 0, Запись.НаименованиеИнойСтраныДокумента, ""));
		ДобавитьКСтроке(СтрокаОтчета, Запись.КодНБКИДокумента);
		ДобавитьКСтроке(СтрокаОтчета, ?(СтрНайти(Запись.КодНБКИДокумента, "999") > 0, Запись.НаименованиеИногоДокумента, ""));
		ДобавитьКСтроке(СтрокаОтчета, Запись.СерияДокумента);
		ДобавитьКСтроке(СтрокаОтчета, Запись.НомерДокумента);
		ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Запись.ДатаВыдачиДокумента));
		ДобавитьКСтроке(СтрокаОтчета, Запись.КемВыданДокумент);
		КодПодразделения = ПроверкаФорматаКодаПодразделения(Запись.КодПодразделенияРФ);
		ДобавитьКСтроке(СтрокаОтчета, ?(Запись.КодНБКИДокумента = "21", КодПодразделения, ""));
		ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Запись.ДатаОкончанияДействияДокумента));
		СтрокаОтчета = ОчисткаСтроки(СтрокаОтчета);
		ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета); 

		
		ИмяСтрокиОтчета = "C5_PREVID";
		СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + "0" + Символы.Таб + Символы.Таб 
		+ Символы.Таб +  Символы.Таб + Символы.Таб + Символы.Таб 
		+ Символы.Таб + Символы.Таб +  Символы.Таб + Символы.Таб; 
		ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета);	
		
		
		ИмяСтрокиОтчета = "C6_REGNUM"; 
		КодИНН = ""; 
		Если ЗначениеЗаполнено(Запись.ИНН) Тогда
			КодИНН = ?(СтрДлина(Запись.ИНН) = 12, "1", "2");
		КонецЕсли;
		СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + КодИНН + Символы.Таб + Запись.ИНН 
		+ Символы.Таб + ?(ЗначениеЗаполнено(Запись.ИНН_ИП), Запись.ИНН_ИП, "");
		Если Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v3 И Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v4 Тогда 
			КредитныеИсторииИзменения.ДобавитьИзмененияТитульныхЗаписей(Настройка, Запись, ИмяСтрокиОтчета, СтрокаОтчета);
		КонецЕсли;
		ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета);
				
		ИмяСтрокиОтчета = "C7_SNILS";
		СНИЛС = СтрЗаменить(Запись.СНИЛС, "-", "");
		СНИЛС = СтрЗаменить(СНИЛС, " ", "");
		СНИЛС = СтрЗаменить(СНИЛС, Символы.НПП, "");
		СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + СНИЛС;
		ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета);
		
				
	Иначе
		ИмяСтрокиОтчета = "B1_NAME";  
		СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + Запись.ПолноеНаименование + Символы.Таб + Запись.Должник.Наименование + Символы.Таб + Запись.ИноеНаименование + Символы.Таб + "" + Символы.Таб;
		ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета); 	
		
		ИмяСтрокиОтчета = "B2_ADDR";  
		СтрокаОтчета = ЗаполнитьАдресаДолжникаЮЛ(Запись.Должник, Запись.ЭлПочта);
		ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета); 
		
		ИмяСтрокиОтчета = "B3_REGNUM";
		СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + Запись.ОГРН + Символы.Таб + Запись.ИдентификаторLEI;
		ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета); 
		
		ИмяСтрокиОтчета = "B4_TAXPAYERID";
		СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + ?(СтрДлина(Запись.ИНН) = 10, "1", "2") + Символы.Таб + Запись.ИНН;
		ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета);
		
		ИмяСтрокиОтчета = "B5_REORG";
		СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + "0" + Символы.Таб + "0" 
		+ Символы.Таб + "" + Символы.Таб + "" 
		+ Символы.Таб + "" + Символы.Таб + ""; 
		ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета);

	КонецЕсли;
	
КонецПроцедуры   

Функция СформироватьИнфоДолжникСобытие1_4(ЗаписьДолжник, Префикс, ДопПараметры = Неопределено) Экспорт 
	Настройка = ДопПараметры.Настройка; 
	МассивДляЗаполнения = Новый Массив;
	Если Префикс = "C" Тогда  
			ПараметрыРегистрации = Новый Структура;
			ПараметрыРегистрации.Вставить("ДатаРегистрацииПоДокументу", ЗаписьДолжник.ДатаРегистрацииПоДокументу);
			ПараметрыРегистрации.Вставить("НаименованиеРегистрирующегоОргана", ЗаписьДолжник.НаименованиеРегистрирующегоОргана);
			ПараметрыРегистрации.Вставить("КодПодразделенияРегистрацииРФ", ЗаписьДолжник.КодПодразделенияРегистрацииРФ);
			ПараметрыРегистрации.Вставить("ДатаВыдачиДокумента", ЗаписьДолжник.ДатаВыдачиДокумента);
			
			МассивСтрок = ЗаполнитьАдресаДолжникаФЛ(ЗаписьДолжник.Должник, ПараметрыРегистрации);
			Для каждого Строка из МассивСтрок Цикл 
				МассивДляЗаполнения.Добавить(Строка);
			КонецЦикла;	
			// 10 телефоны  
			Если ЗаписьДолжник.Должник.Телефоны.Количество() > 0 Тогда
				ИмяСтрокиОтчета = "C10_CONTACTINFO";  
				ТелНомер = СтрЗаменить(ЗаписьДолжник.Должник.Телефоны[0].Номер, " ", "");
				Комментарий = Строка(ЗаписьДолжник.Должник.Телефоны[0].ВидНомера) + " " + Строка(ЗаписьДолжник.Должник.Телефоны[0].Комментарий); 
				Комментарий = ?(ЗначениеЗаполнено(Комментарий), Нрег(Комментарий), "телефон должника"); 
				СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + ТелНомер + Символы.Таб + Комментарий + Символы.Таб + Нрег(ЗаписьДолжник.ЭлПочта);  
				МассивДляЗаполнения.Добавить(СтрокаОтчета);
			КонецЕсли;			
			// 11 ИП
			ИмяСтрокиОтчета = "C11_ENTREP";	
			СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + ?(ЗначениеЗаполнено(ЗаписьДолжник.ЭтоИП), ЗаписьДолжник.ЭтоИП, 0) + Символы.Таб + ЗаписьДолжник.ИНН_ИП + Символы.Таб + киФорматДаты(ЗаписьДолжник.ДатаРегистрацииИП);
			МассивДляЗаполнения.Добавить(СтрокаОтчета);
			
			ИмяСтрокиОтчета = "C12_CAPABILITY";
			ВозрастСек = ТекущаяДатаСеанса() - ЗаписьДолжник.ДатаРождения;
			СовершеннолетиеСек = 567993600;
			КодДееспособности = ?(ВозрастСек >= СовершеннолетиеСек, "1", "2");
			НеСудебнаяДееспособность = ИмяСтрокиОтчета + Символы.Таб + КодДееспособности + Символы.Таб 
			+ Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб;			
			Если ТипЗнч(ЗаписьДолжник.Дееспособность) = Тип("СправочникСсылка.ДелоОНедееспособностиСубъекта") Тогда 
				СтрокаОтчета = СформироватьБлокДееспособность(ЗаписьДолжник.Дееспособность);
				СтрокаОтчета = ИмяСтрокиОтчета + СтрокаОтчета;	
				МассивДляЗаполнения.Добавить(СтрокаОтчета);
			Иначе
				// По настройкам 
				СтрокаОтчета = СформироватьБлокПоНастройкам(ЗаписьДолжник.Должник, Настройка, ИмяСтрокиОтчета, "СубъектФизическоеЛицо");
				ЭтоСудебнаяДееспособность = ?(ЗначениеЗаполнено(СтрокаОтчета), Истина, Ложь);
				СтрокаОтчета = ?(ЭтоСудебнаяДееспособность, ИмяСтрокиОтчета + Символы.Таб + СтрокаОтчета, НеСудебнаяДееспособность);
				МассивДляЗаполнения.Добавить(СтрокаОтчета);			
			КонецЕсли;

		Иначе  
			ИмяСтрокиОтчета = "B8_PREVCRED";		
			СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + ЗаписьДолжник.НаличиеПравопредшественника + Символы.Таб + ЗаписьДолжник.ПравопредшественникИзРФ + Символы.Таб + ЗаписьДолжник.ПолноеНаименованиеПравопредшественника 
											+ Символы.Таб + ЗаписьДолжник.ОГРНПравопредшественника;
			МассивДляЗаполнения.Добавить(СтрокаОтчета);		
		КонецЕсли;

	Возврат МассивДляЗаполнения;
КонецФункции  

Функция СформироватьБлок17_10(Запись, Префикс, ДопПараметры = Неопределено) Экспорт
	ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "17_UID", "10_UID");
	СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб +  Запись.UID;  
	Если ДопПараметры.Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v3 И ДопПараметры.Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v4 Тогда
		КредитныеИсторииИзменения.ДобавитьИзмененияБлок17_10(ДопПараметры.Настройка, Запись, ИмяСтрокиОтчета, СтрокаОтчета);
	КонецЕсли;	
	Возврат СтрокаОтчета;								
КонецФункции   

Функция СформироватьБлок18_11(Запись, Префикс, ДопПараметры = Неопределено) Экспорт 
	ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "18_TRADE", "11_TRADE");
	Строка1811 = ИмяСтрокиОтчета; 
	
	ТипОтношенияКСчету = "1";
	Если ТипЗнч(Запись.ДокументСобытие) = Тип("ДокументСсылка.ПоступлениеПлатежа") Тогда 
		Если Запись.ДокументСобытие.ВидПлательщика = Перечисления.ВидыПлательщика.Поручитель Тогда
			ТипОтношенияКСчету = "2";
		ИначеЕсли Запись.ДокументСобытие.ВидПлательщика = Перечисления.ВидыПлательщика.Наследник Тогда
			ТипОтношенияКСчету = "99";
		Иначе
			ТипОтношенияКСчету = "1";
		КонецЕсли;
	КонецЕсли;
	
	ДопПараметры.Поручитель =  ТипОтношенияКСчету;
		
	ДобавитьКСтроке(Строка1811, ТипОтношенияКСчету);
	ДобавитьКСтроке(Строка1811, киФорматДаты(Запись.ДатаНачалаСделки));
	ДобавитьКСтроке(Строка1811, Запись.КодНБКИТипКредита);
	ДобавитьКСтроке(Строка1811, Запись.КодНБКИВидКредита);
	ДобавитьКСтроке(Строка1811, Запись.КодНБКИЦельКредита);
	
	Если Префикс = "C" Тогда
		ДобавитьКСтроке(Строка1811, Запись.ПризнакПотребительскогоКредита);
	КонецЕсли;
	
	ДобавитьКСтроке(Строка1811, Запись.ПризнакПлатежнойКарты);
	ДобавитьКСтроке(Строка1811, "0");
	ДобавитьКСтроке(Строка1811, ?(ЗначениеЗаполнено(Запись.НеденежноеОбязательство), "0", "1")); 
	ДобавитьКСтроке(Строка1811, ?(ЗначениеЗаполнено(Запись.НеденежноеОбязательство), "0", "1"));
	ДобавитьКСтроке(Строка1811, киФорматДаты(Запись.ДатаОкончанияСделки));    
	
	Если ДопПараметры.Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v3 И ДопПараметры.Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v4 Тогда
		КредитныеИсторииИзменения.ДобавитьИзмененияБлок18_11(ДопПараметры.Настройка, Запись, Префикс, Строка1811);
	КонецЕсли;
	
	
   	Возврат	Строка1811;
КонецФункции

Функция СформироватьБлок19_12(Запись, Префикс, ДопПараметры = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(Запись.СуммаСделки) Тогда
		Возврат "";
	КонецЕсли;
	ИмяСтрокиОтчета = Префикс + ?(Префикс = "C","19_ACCOUNTAMT","12_ACCOUNTAMT");
	Строка1912 = ИмяСтрокиОтчета; 
	ДобавитьКСтроке(Строка1912, киФорматЧисла(Запись.СуммаСделки));
	ДобавитьКСтроке(Строка1912, Запись.Сделка.ВалютаДоговора.Наименование);
	ДобавитьКСтроке(Строка1912, "");
	
	Если ДопПараметры.Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v3 И ДопПараметры.Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v4 Тогда
		КредитныеИсторииИзменения.ДобавитьИзмененияБлок19_12(ДопПараметры.Настройка, Запись, Префикс, Строка1912);
	КонецЕсли;
     	
	Возврат Строка1912;
КонецФункции

Функция СформироватьБлок20_13(Запись, Префикс, ДопПараметры = Неопределено) Экспорт 
	ИмяСтрокиОтчета = Префикс + ?(Префикс = "C","20_COBORROWER", "13_COBORROWER");
	Строка2013 = ИмяСтрокиОтчета; 
	ДобавитьКСтроке(Строка2013, ?(Запись.СолидарныйДоговор = "1", "0", "1"));
	ДобавитьКСтроке(Строка2013, ?(Запись.СолидарныйДоговор = "1", "", Число(Запись.СолидарныйДоговор) + 1));
	Возврат Строка2013;	
КонецФункции

Функция СформироватьБлок21_14(Запись, Префикс, ДопПараметры = Неопределено) Экспорт  
	Если НЕ ЗначениеЗаполнено(Запись.СуммаСделки) Тогда
		Возврат "";
	КонецЕсли;

	Настройка = ДопПараметры.Настройка;
	ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "21_PAYMTCONDITION", "14_PAYMTCONDITION");
	СтрокаОтчета = ИмяСтрокиОтчета; 
	Если ЗначениеЗаполнено(Запись.ДоговорМКЗ) ИЛИ ЗначениеЗаполнено(Запись.РеструктуризацияМКЗ) Тогда
		СтрокаОтчета = СтрокаОтчета + СформироватьБлок21_14МКЗ(?(ЗначениеЗаполнено(Запись.РеструктуризацияМКЗ), Запись.РеструктуризацияМКЗ, Запись.ДоговорМКЗ), Запись.ПризнакПлатежнойКарты, Запись.ДатаСобытия);	
	Иначе  
		СтрокаОтчета = СтрокаОтчета + СформироватьБлокПоНастройкам(Запись.Сделка, Настройка, ИмяСтрокиОтчета, "Сделка"); 
	КонецЕсли;	
	
	Возврат СтрокаОтчета; 	
КонецФункции 

Функция СформироватьБлок21_14МКЗ(Микрозайм, ЭтоКредитнаяКарта, зДатаСобытия) Экспорт 
	СтрокаОтчета = "";	
	ПлановыеПлатежи = Микрозайм.ГрафикПлатежей;
    НужноЗаполнятьОтчет = Ложь;
	Если ПлановыеПлатежи <> Неопределено Тогда
		Для каждого Платеж из ПлановыеПлатежи Цикл
			Если Платеж.Дата >= зДатаСобытия И Платеж.СуммаПлатежа <> 0 Тогда
				ДобавитьКСтроке(СтрокаОтчета, киФорматЧисла(Платеж.ОплатаОсновнойДолг));
				ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Платеж.Дата));
				ДобавитьКСтроке(СтрокаОтчета, киФорматЧисла(Платеж.ОплатаПроценты));
				ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Платеж.Дата));
				НужноЗаполнятьОтчет = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НужноЗаполнятьОтчет Тогда
			КодЧастотыПлатежей = ВернутьКодЧастотыПлатежейНБКИ(Микрозайм); 
			КодЧастотыПлатежей = ?(ЗначениеЗаполнено(КодЧастотыПлатежей), КодЧастотыПлатежей, "99");
			МинимальныйПлатеж = ?(ЭтоКредитнаяКарта = Истина, Строка(Платеж.СуммаПлатежа), 0);
			нДатаБеспроцентныйПериод = "";
			кДатаБеспроцентныйПериод = "";
			ЗаполнитьДатыБеспроцентонгоПериода(Микрозайм, нДатаБеспроцентныйПериод, кДатаБеспроцентныйПериод); 
			
			ДобавитьКСтроке(СтрокаОтчета, КодЧастотыПлатежей);
			ДобавитьКСтроке(СтрокаОтчета, киформатЧисла(МинимальныйПлатеж));
			ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(нДатаБеспроцентныйПериод));
			ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(кДатаБеспроцентныйПериод));
			ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Микрозайм.ДатаПогашения));  
			
		Иначе  
			ДобавитьКСтроке(СтрокаОтчета, киФорматЧисла(0));
			ДобавитьКСтроке(СтрокаОтчета, "");
			ДобавитьКСтроке(СтрокаОтчета, киформатЧисла(0));
			ДобавитьКСтроке(СтрокаОтчета, "");
			ДобавитьКСтроке(СтрокаОтчета, "");
			ДобавитьКСтроке(СтрокаОтчета, "");  
			ДобавитьКСтроке(СтрокаОтчета, "");
			ДобавитьКСтроке(СтрокаОтчета, "");
			ДобавитьКСтроке(СтрокаОтчета, ""); 
		КонецЕсли;	
	Иначе
		ДобавитьКСтроке(СтрокаОтчета, киФорматЧисла(0));
		ДобавитьКСтроке(СтрокаОтчета, "");
		ДобавитьКСтроке(СтрокаОтчета, киформатЧисла(0));
		ДобавитьКСтроке(СтрокаОтчета, "");
		ДобавитьКСтроке(СтрокаОтчета, "");
		ДобавитьКСтроке(СтрокаОтчета, "");  
		ДобавитьКСтроке(СтрокаОтчета, "");
		ДобавитьКСтроке(СтрокаОтчета, "");
		ДобавитьКСтроке(СтрокаОтчета, "");	
	КонецЕсли; 
	
	Возврат СтрокаОтчета;
		
КонецФункции 

Функция СформироватьБлок22_Х(Запись, Префикс, ДопПараметры = Неопределено) Экспорт   
	Если НЕ ЗначениеЗаполнено(Запись.СуммаСделки) Тогда
		Возврат "";
	КонецЕсли;
	
	Настройка = ДопПараметры.Настройка; 
	Если Префикс = "B" Тогда
		Строка22 = "";  
	Иначе	 
		ИмяСтрокиОтчета = "C22_OVERALLVAL";
		// Если ЗначениеЗаполнено(Запись.ДоговорМКЗ) ИЛИ ЗначениеЗаполнено(Запись.РеструктуризацияМКЗ) Тогда
		// СтрокаОтчета = СформироватьБлок22МКЗ(Запись.Микрозайм, );  
		// Иначе  
		Строка22 = ИмяСтрокиОтчета;
		Отчет = СформироватьБлокПоНастройкам(Запись.Сделка, Настройка, ИмяСтрокиОтчета, "Сделка");   
		мПодстроки = СтрРазделить(Отчет, Символы.Таб, Истина);
		
		ПСКПроцент = мПодстроки[1];
		ПСКСумма = мПодстроки[2];  
		ПСКДатаРасчета = мПодстроки[3];
		
		Если Не ЗначениеЗаполнено(ПСКПроцент) Тогда
			ПСКПроцент = ?((Запись.ДатаНачалаСделки >= Дата("20140701")), 0, "");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПСКСумма) Тогда
			ПСКСумма = ?((Запись.ДатаНачалаСделки >= Дата("20180624")), 0, "");
		КонецЕсли;
		
		Если ПСКПроцент = 0 Тогда  
			ПСКпроцент = "0.000";
			//ПСКПроцент = киФорматЧисла(ПСКПроцент);
		Иначе
			ПСКПроцент = СтрЗаменить(ПСКПроцент, Символы.НПП, "");
			ПСКПроцент = СтрЗаменить(ПСКПроцент, " ", "");
			Если Настройка.ВерсияRUTDF = Перечисления.ВерсияRUTDF.v3 ИЛИ Настройка.ВерсияRUTDF = Перечисления.ВерсияRUTDF.v4 Тогда 
				ПСКПроцент = стрЗаменить(ПСКПроцент, ",", ".");
			КонецЕсли;	
		КонецЕсли;
		Если ПСКСумма = 0 Тогда
			ПСКСумма = киФорматЧисла(ПСКСумма);
			ПСКСумма = стрЗаменить(ПСКСумма, ",", ".");
		Иначе
			ПСКСумма = стрЗаменить(ПСКСумма, " ", "");
			ПСКСумма = стрЗаменить(ПСКСумма, Символы.НПП, "");  
		КонецЕсли;	
		
		// Строка22 = Строка22 + Символы.Таб + ПСКПроцент + Символы.Таб + ПСКСумма + Символы.Таб + киФорматДаты(мПодстроки[3]);
		
		Если Не ЗначениеЗаполнено(ПСКДатаРасчета)  Тогда  
			Строка22 = Строка22 + Символы.Таб + Символы.Таб + Символы.Таб;
		Иначе  
			ПСКДатаРасчета = ?((Запись.ДатаНачалаСделки >= Дата("20140701")), ПСКДатаРасчета, "");
			ПСКПроцент = ?((Запись.ДатаНачалаСделки >= Дата("20140701")), ПСКПроцент, "");
			ПСКСумма = ?((Запись.ДатаНачалаСделки >= Дата("20180624")), ПСКСумма, "");
			Строка22 = Строка22 + Символы.Таб + ПСКПроцент + Символы.Таб + киФорматЧисла(ПСКСумма) + Символы.Таб + киФорматДаты(ПСКДатаРасчета);
		КонецЕсли; 
		
		//Для овердрафт 7 переданный параметр в 25.2 должен быть = пустой
		Если Запись.КодНБКИВидКредита = "7" Тогда
			ДопПараметры.ПСК = "";	
		Иначе
			ДопПараметры.ПСК = Запись.СуммаСделки;		
		КонецЕсли;
	КонецЕсли;
	Возврат Строка22;	
КонецФункции

Функция СформироватьБлок23_15(Запись, Префикс, ДопПараметры = Неопределено) Экспорт 
	Настройка = ДопПараметры.Настройка;
	ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "23_AMENDMENT", "15_AMENDMENT");
	Строка2315 = ИмяСтрокиОтчета; 
	Заполнено = Ложь;
	Если ЗначениеЗаполнено(Запись.РеструктуризацияМКЗ) Тогда
		Строка2315 = Строка2315 + СформироватьБлок23_15МКЗ(Запись.РеструктуризацияМКЗ);
		Заполнено = Истина;
	ИначеЕсли ТипЗнч(Запись.ДокументСобытие) = Тип("ДокументСсылка.СведенияОбИзмененииДоговора") И НЕ Заполнено Тогда 
		Строка2315 = Строка2315 + СформироватьБлок23_15Изм(Запись.ДокументСобытие); 
		Заполнено = Истина;
	ИначеЕсли ЗначениеЗаполнено(Запись.НеденежноеОбязательство) И НЕ Заполнено  Тогда 	 
		Строка2315 = Строка2315 + СформироватьБлок23_15НО(Запись.НеденежноеОбязательство);
	Иначе
		Строка2315 = Строка2315 + СформироватьБлокПоНастройкам(Запись.Сделка, Настройка, ИмяСтрокиОтчета, "Сделка"); 
	КонецЕсли;	 
	Возврат Строка2315;	
КонецФункции

Функция СформироватьБлок23_15МКЗ(Микрозайм) Экспорт  
	СтрокаОтчета = Символы.Таб + "1" + Символы.Таб + киФорматДаты(Микрозайм.ДатаРеструктуризации) + Символы.Таб + "3"
	+ Символы.Таб + "99" + Символы.Таб + "Реструктуризация" + Символы.Таб + киФорматДаты(Микрозайм.ДатаРеструктуризации) + Символы.Таб + киФорматДаты(Микрозайм.ДатаПогашения) 
	+ Символы.Таб + "" + Символы.Таб + "" + Символы.Таб + "";
	// ТребуетсяДоработка	
	Возврат СтрокаОтчета;
	
КонецФункции  

Функция СформироватьБлок23_15НО(НеденежноеОбязательство) Экспорт  
	
	// Дописать
	СтрокаОтчета = Символы.Таб + киФорматДаты(НеденежноеОбязательство.ДатаВыдачиЗайма) + Символы.Таб + "5";
	Возврат СтрокаОтчета;
		
КонецФункции  

Функция СформироватьБлок23_15Изм(Изменение) Экспорт
	СтрокаОтчета = "";
	КодСпециальногоИзмененияДоговора = ВернутьКодСпециальногоИзменения(Изменение.ВидИзменияДоговора); 
	Если Не ЗначениеЗаполнено(КодСпециальногоИзмененияДоговора) Тогда
		Возврат СтрокаОтчета;
	КонецЕсли;
	ДобавитьКСтроке(СтрокаОтчета, "1");
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Изменение.ДатаИзмененияДоговора));
	ДобавитьКСтроке(СтрокаОтчета, Строка(Изменение.ВидИзменияДоговора));
	ДобавитьКСтроке(СтрокаОтчета, Изменение[КодСпециальногоИзмененияДоговора]);
	ДобавитьКСтроке(СтрокаОтчета, Изменение.ОписаниеИныхИзменений);  
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Изменение.ДатаВступленияИзменения));
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Изменение.ДатаПлановогоПрекращенияИзменения));
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Изменение.ДатаФактическогоПрекращенияИзменения));
	ПричинаПрекращения = ?(Изменение.ПричиныПрекращенияДействийИзмененияДоговора = 0, "", Строка(Изменение.ПричиныПрекращенияДействийИзмененияДоговора)); 
	ДобавитьКСтроке(СтрокаОтчета, ПричинаПрекращения);
	ДобавитьКСтроке(СтрокаОтчета, ""); 

	Возврат СтрокаОтчета;
	
КонецФункции  

Функция ВернутьКодСпециальногоИзменения(КодВидаИзменения) Экспорт 
	Если КодВидаИзменения = 1 Тогда
		Возврат "ВидЛьготногоПериода";
	ИначеЕсли КодВидаИзменения = 2 Тогда
		Возврат "ПричиныУрегулированияПроблемнойЗадолженности";
	ИначеЕсли КодВидаИзменения = 3 Тогда
	    Возврат "ВидыПрочихИзмененийДоговора";
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции      

Функция СформироватьБлок24_16(Запись, Префикс, ДопПараметры = Неопределено) Экспорт 
	Если НЕ ЗначениеЗаполнено(Запись.СуммаСделки) Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "24_FUNDDATE", "16_FUNDDATE");
	Строка2416 = ИмяСтрокиОтчета;   
	Строка2416 = Строка2416 + Символы.Таб + киФорматДаты(Запись.ДатаПередачиФинансирования); 
	
	Если ДопПараметры.Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v3 И ДопПараметры.Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v4 Тогда
		КредитныеИсторииИзменения.ДобавитьИзмененияБлок24_16(ДопПараметры.Настройка, Запись, Префикс, Строка2416);
	КонецЕсли;
	
	
	Возврат Строка2416;		
	
КонецФункции 

Функция СформироватьБлок252627_171819(Запись, Префикс, ДопПараметры = Неопределено) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(Запись.СуммаСделки) Тогда
		Возврат "";
	КонецЕсли;
	// ЭтоПрекращение - событие 2.5
	Строка22 = ДопПараметры.ПСК;
	ЭтоПрекращение = (Запись.Событие.КодНБКИ = "2.5");
	МассивСтрок = новый Массив;
	ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "25_ARREAR", "17_ARREAR");
	Строка2517 = ИмяСтрокиОтчета; 
	Если ЭтоПрекращение тогда
		МассивСтрок = СформироватьБлок252627_171819Пустое(Префикс, киФорматДаты(Запись.ДатаСобытия)); 
		ДопПараметры.ТекущаяЗадолженность = 0;	
	Иначе	 
		ДатаРасчета = Запись.ДатаСобытия;
		ДатаРасчета = ?(ЗначениеЗаполнено(Запись.ДатаРасчетаПросроченнойЗадолженности), Запись.ДатаРасчетаПросроченнойЗадолженности, Запись.ДатаРасчетаСрочнойЗадолженности);
		ПризнакрасчетаПоПоследнемуПлатежу = ?((ТекущаяДатаСеанса() - ДатаРасчета > 30 * 86400), "0", "1");
		ДатаРасчета = ?(ПризнакрасчетаПоПоследнемуПлатежу = "0", Запись.ДатаСобытия, ДатаРасчета);
		тзЗадолженности = ВернутьЗадолженностьПоОбъекту(Запись.Сделка, ДатаРасчета);  
		ЕстьЗадолженность = Истина;
		Если тзЗадолженности <> Неопределено Тогда
			Для Каждого Стр из тзЗадолженности Цикл
				Строка2517 = СформироватьБлок25_17(Префикс, ИмяСтрокиОтчета, Строка22, ДатаРасчета, Стр, ПризнакрасчетаПоПоследнемуПлатежу, Запись.Событие.КодНБКИ); 	
				ДопПараметры.ТекущаяЗадолженность = Стр.СуммаДООстаток;
				ЕстьЗадолженность = ?(Стр.СуммаДООстаток <= 0, ЛОЖЬ, ИСТИНА);							
			КонецЦикла;
		Иначе  
			ДопПараметры.ТекущаяЗадолженность = 0;
			Строка2517 = ИмяСтрокиОтчета;
			ДобавитьКСтроке(Строка2517, "0");
			ДобавитьКСтроке(Строка2517, "");
			ДобавитьКСтроке(Строка2517, "");
			ДобавитьКСтроке(Строка2517, "");
			ДобавитьКСтроке(Строка2517, "");  
			ДобавитьКСтроке(Строка2517, "");
			ДобавитьКСтроке(Строка2517, "");
			ДобавитьКСтроке(Строка2517, "");
			Если Префикс = "C" Тогда
				ДобавитьКСтроке(Строка2517, "");
			КонецЕсли;
			ЕстьЗадолженность = Ложь;
		КонецЕсли; 
		
		МассивСтрок.Добавить(Строка2517);
		
		ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "26_DUEARREAR", "18_DUEARREAR");
		
		Строка2618 = ИмяСтрокиОтчета;
		ЕстьСрочнаяЗадолженность = ?(ЗначениеЗаполнено(Запись.ДатаРасчетаПросроченнойЗадолженности), Ложь, Истина);
		
		Если тзЗадолженности <> Неопределено И ЕстьСрочнаяЗадолженность Тогда  
			ДатаОбразованияСрочнойЗадолженности = ?(ЗначениеЗаполнено(Запись.ДатаРасчетаСрочнойЗадолженности), Запись.ДатаРасчетаСрочнойЗадолженности, Запись.ДатаОкончанияСделки);
			Для Каждого Стр из тзЗадолженности Цикл
				Строка2618 = СформироватьБлок26_18(ИмяСтрокиОтчета, ДатаОбразованияСрочнойЗадолженности, ДатаРасчета, Стр, ПризнакрасчетаПоПоследнемуПлатежу, Запись.Событие.КодНБКИ); 
			КонецЦикла;
		Иначе
			Строка2618 = ИмяСтрокиОтчета;
			ДобавитьКСтроке(Строка2618, "");
			ДобавитьКСтроке(Строка2618, "");
			ДобавитьКСтроке(Строка2618, "0,00");
			ДобавитьКСтроке(Строка2618, "");  
			ДобавитьКСтроке(Строка2618, "");
			ДобавитьКСтроке(Строка2618, "");
			ДобавитьКСтроке(Строка2618, "");
		КонецЕсли; 
		
		МассивСтрок.Добавить(Строка2618); 
		
		ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "27_PASTDUEARREAR", "B19_PASTDUEARREAR");
		
		Строка2719 = ИмяСтрокиОтчета;
		ЕстьСрочнаяЗадолженность = ?(ЗначениеЗаполнено(Запись.ДатаРасчетаПросроченнойЗадолженности), Ложь, Истина);
		// Дописать для периодических расчетов по графику две последние даты
		Если тзЗадолженности <> Неопределено И НЕ ЕстьСрочнаяЗадолженность Тогда  
			ДатаОбразованияПросроченнойЗадолженности = ?(ЗначениеЗаполнено(Запись.ДатаВыходаНаПросрочку), Запись.ДатаВыходаНаПросрочку, Запись.ДатаОкончанияСделки);
			ДатаОбразованияПросроченнойЗадолженности = ?(ЗначениеЗаполнено(ДатаОбразованияПросроченнойЗадолженности), ДатаОбразованияПросроченнойЗадолженности, Запись.ДатаОкончанияСделки);
			Для Каждого Стр из тзЗадолженности Цикл
				Строка2719 = СформироватьБлок27_19(Запись.Датасобытия, ИмяСтрокиОтчета, Запись.ДатаОкончанияСделки, ДатаОбразованияПросроченнойЗадолженности, ДатаРасчета, Стр, ПризнакрасчетаПоПоследнемуПлатежу, Запись.Событие.КодНБКИ);
			КонецЦикла;
		Иначе
			Строка2719 = ИмяСтрокиОтчета;
			ДобавитьКСтроке(Строка2719, киФорматДаты(ДатаРасчета));
			ДобавитьКСтроке(Строка2719, "");
			ДобавитьКСтроке(Строка2719, "0,00");
			ДобавитьКСтроке(Строка2719, "");  
			ДобавитьКСтроке(Строка2719, "");
			ДобавитьКСтроке(Строка2719, "");
			ДобавитьКСтроке(Строка2719, киФорматДаты(ДатаРасчета));
			ДобавитьКСтроке(Строка2719, "");
			ДобавитьКСтроке(Строка2719, "");
			
		КонецЕсли; 
		
		МассивСтрок.Добавить(Строка2719); 
		ДопПараметры.ЕстьЗадолженность = ЕстьЗадолженность;
	КонецЕсли;
	Возврат МассивСтрок;		
	
КонецФункции 

Функция СформироватьБлок25_17(Префикс, ИмяСтрокиОтчета, ИсходнаяСумма, ДатаРасчета, СтрокаЗадолженность, ПризнакрасчетаПоПоследнемуПлатежу, КодСобытия)
	Строка2517 = ИмяСтрокиОтчета; 
	
	Если СтрокаЗадолженность.СуммаДООстаток <=0 Тогда
		ДобавитьКСтроке(Строка2517, "0");
		ДобавитьКСтроке(Строка2517, "");
		ДобавитьКСтроке(Строка2517, "");
		ДобавитьКСтроке(Строка2517, "");
		ДобавитьКСтроке(Строка2517, "");  
		ДобавитьКСтроке(Строка2517, "");
		ДобавитьКСтроке(Строка2517, "");
		ДобавитьКСтроке(Строка2517, "");
		Если Префикс = "C" Тогда
			ДобавитьКСтроке(Строка2517, "");
		КонецЕсли;  	
	Иначе	
		ДобавитьКСтроке(Строка2517, "1");
		ДобавитьКСтроке(Строка2517, киФорматЧисла(ИсходнаяСумма));
		ДобавитьКСтроке(Строка2517, ПризнакрасчетаПоПоследнемуПлатежу);
		ДобавитьКСтроке(Строка2517, киФорматЧисла(СтрокаЗадолженность.СуммаДООстаток));
		ДобавитьКСтроке(Строка2517, киФорматЧисла(СтрокаЗадолженность.ОсновнойДолгДО));
		ДобавитьКСтроке(Строка2517, киФорматЧисла(СтрокаЗадолженность.ПроцентыДО));  
		ДобавитьКСтроке(Строка2517, киФорматЧисла(СтрокаЗадолженность.Иное));
		ДобавитьКСтроке(Строка2517, ?(КодСобытия = "2.3", киФорматДаты(ДатаРасчета), ""));
		Если Префикс = "C" Тогда
			ДобавитьКСтроке(Строка2517, "0");
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Строка2517;
КонецФункции

Функция СформироватьБлок26_18(ИмяСтрокиОтчета, ДатаОбразованияСрочнойЗадолженности, ДатаРасчета, СтрокаЗадолженность, ПризнакрасчетаПоПоследнемуПлатежу, КодСобытия)
	Строка2618 = ИмяСтрокиОтчета; 
	
	Если СтрокаЗадолженность.СуммаДООстаток <=0 Тогда
		ДобавитьКСтроке(Строка2618, "");
		ДобавитьКСтроке(Строка2618, "");
		ДобавитьКСтроке(Строка2618, "0,00");
		ДобавитьКСтроке(Строка2618, "");  
		ДобавитьКСтроке(Строка2618, "");
		ДобавитьКСтроке(Строка2618, "");
		ДобавитьКСтроке(Строка2618, "");	
	Иначе	
		ДобавитьКСтроке(Строка2618, киФорматДаты(ДатаОбразованияСрочнойЗадолженности));
		ДобавитьКСтроке(Строка2618, ПризнакрасчетаПоПоследнемуПлатежу);
		ДобавитьКСтроке(Строка2618, киФорматЧисла(СтрокаЗадолженность.СуммаДООстаток));
		ДобавитьКСтроке(Строка2618, киФорматЧисла(СтрокаЗадолженность.ОсновнойДолгДО));  
		ДобавитьКСтроке(Строка2618, киФорматЧисла(СтрокаЗадолженность.ПроцентыДО));
		ДобавитьКСтроке(Строка2618, киФорматЧисла(СтрокаЗадолженность.Иное));
		ДобавитьКСтроке(Строка2618, ?(КодСобытия = "2.3", киФорматДаты(ДатаРасчета), ""));
	КонецЕсли;
	
	Возврат Строка2618;
КонецФункции

Функция СформироватьБлок27_19(ДатаСобытия, ИмяСтрокиОтчета, ДатаОкончанияСделки, ДатаОбразованияПросроченнойЗадолженности, ДатаРасчета, СтрокаЗадолженность, ПризнакрасчетаПоПоследнемуПлатежу, КодСобытия)
	Строка2719 = ИмяСтрокиОтчета; 
	
	Если СтрокаЗадолженность.СуммаДООстаток <=0 Тогда
		ДобавитьКСтроке(Строка2719, киФорматДаты(ДатаСобытия));
		ДобавитьКСтроке(Строка2719, "");
		ДобавитьКСтроке(Строка2719, "0,00");
		ДобавитьКСтроке(Строка2719, "");  
		ДобавитьКСтроке(Строка2719, "");
		ДобавитьКСтроке(Строка2719, "");
		ДобавитьКСтроке(Строка2719, киФорматДаты(ДатаСобытия));
		ДобавитьКСтроке(Строка2719, "");
		ДобавитьКСтроке(Строка2719, "");	
	Иначе	
		ДобавитьКСтроке(Строка2719, киФорматДаты(ДатаОбразованияПросроченнойЗадолженности));
		ДобавитьКСтроке(Строка2719, ПризнакрасчетаПоПоследнемуПлатежу);
		ДобавитьКСтроке(Строка2719, киФорматЧисла(СтрокаЗадолженность.СуммаДООстаток));
		ДобавитьКСтроке(Строка2719, киФорматЧисла(СтрокаЗадолженность.ОсновнойДолгДО));  
		ДобавитьКСтроке(Строка2719, киФорматЧисла(СтрокаЗадолженность.ПроцентыДО));
		ДобавитьКСтроке(Строка2719, киФорматЧисла(СтрокаЗадолженность.Иное));
		ДобавитьКСтроке(Строка2719, ?(КодСобытия = "2.3", киФорматДаты(ДатаРасчета), ""));
		ДобавитьКСтроке(Строка2719, киФорматДаты(ДатаОкончанияСделки));
		ДобавитьКСтроке(Строка2719, киФорматДаты(ДатаОкончанияСделки));
	КонецЕсли;
	
	Возврат Строка2719;
КонецФункции


Функция СформироватьБлок252627_171819Пустое(Префикс, ДатаСобытия)
	
	МассивПустыхСтрок = Новый Массив;
	
	ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "25_ARREAR", "B17_ARREAR");
	Строка2517 = ИмяСтрокиОтчета;
	ДобавитьКСтроке(Строка2517, "0");
	ДобавитьКСтроке(Строка2517, "");
	ДобавитьКСтроке(Строка2517, "");
	ДобавитьКСтроке(Строка2517, "");
	ДобавитьКСтроке(Строка2517, "");  
	ДобавитьКСтроке(Строка2517, "");
	ДобавитьКСтроке(Строка2517, "");
	ДобавитьКСтроке(Строка2517, "");
	Если Префикс = "C" Тогда
		ДобавитьКСтроке(Строка2517, "");
	КонецЕсли;      
	МассивПустыхСтрок.Добавить(Строка2517);
	
	ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "26_DUEARREAR", "B18_DUEARREAR");
	Строка2618 = ИмяСтрокиОтчета;
	ДобавитьКСтроке(Строка2618, "");
	ДобавитьКСтроке(Строка2618, "");
	ДобавитьКСтроке(Строка2618, "0,00");
	ДобавитьКСтроке(Строка2618, "");  
	ДобавитьКСтроке(Строка2618, "");
	ДобавитьКСтроке(Строка2618, "");
	ДобавитьКСтроке(Строка2618, "");
	МассивПустыхСтрок.Добавить(Строка2618);
	
	ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "27_PASTDUEARREAR", "B19_PASTDUEARREAR");
	Строка2719 = ИмяСтрокиОтчета;
	ДобавитьКСтроке(Строка2719, ДатаСобытия);
	ДобавитьКСтроке(Строка2719, "");
	ДобавитьКСтроке(Строка2719, "0,00");
	ДобавитьКСтроке(Строка2719, "");  
	ДобавитьКСтроке(Строка2719, "");
	ДобавитьКСтроке(Строка2719, "");
	ДобавитьКСтроке(Строка2719, ДатаСобытия);
	ДобавитьКСтроке(Строка2719, "");
	ДобавитьКСтроке(Строка2719, "");
	МассивПустыхСтрок.Добавить(Строка2719);
	
	Возврат МассивПустыхСтрок;
КонецФункции

Функция СформироватьБлок28_20(Запись, Префикс, ДопПараметры = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(Запись.СуммаСделки) Тогда
		Возврат "";
	КонецЕсли;
	ЕстьЗадолженность = ДопПараметры.ЕстьЗадолженность; 
	ЭтоПлатежПоручителя = ДопПараметры.Поручитель;
	Настройка = ДопПараметры.Настройка;
	ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "28_PAYMT", "20_PAYMT");
	Строка2820 = ИмяСтрокиОтчета;
	ИсточникСобытия = Запись.ДокументСобытие;
	ФормироватьПринудительныйПлатеж = Ложь; 
	Формировать28 = ДопПараметры.Настройка.Формировать28ПриСудебномСписании;
	
	Если ТипЗнч(ИсточникСобытия) = Тип("ДокументСсылка.СведенияОбИзмененииДоговора") Тогда
		Если ИсточникСобытия.ПричиныПрекращенияОбязательства = 2 Тогда
			ФормироватьПринудительныйПлатеж = Формировать28;
		КонецЕсли;
	КонецЕсли;
	
	ЭтоФактическийПлатеж = Ложь;
	
	Если ТипЗнч(ИсточникСобытия) = Тип("ДокументСсылка.ПоступлениеПлатежа") ИЛИ ТипЗнч(ИсточникСобытия) = Тип("ДокументСсылка.ПоступлениеПлатежей") ИЛИ ТипЗнч(ИсточникСобытия) = Тип("ДокументСсылка.ЗагрузкаИсторииПлатежей") Тогда 
		ЭтоФактическийПлатеж = Истина;
	КонецЕсли; 
	
	Если ТипЗнч(ИсточникСобытия) = Тип("ДокументСсылка.СведенияОбИзмененииДоговора") И Запись.Событие.КодНБКИ = "2.3" Тогда
		ЭтоФактическийПлатеж = Истина;  
	КонецЕсли;

	 		
	мПлатежи = ВернутьПоследнийПлатежПоОбъекту(Запись.Сделка, Запись.ДатаСобытия, Настройка.РеквизитПризнакНаличияРанееОсуществленныхПлатежей, ФормироватьПринудительныйПлатеж, Настройка.ВерсияRUTDF); 
	ДниПросрочки = Окр((НачалоДня(Запись.ДатаСобытия) - НачалоДня(Запись.ДатаОкончанияСделки)) / 86400);
	ДниПросрочки = СтрЗаменить(Строка(ДниПросрочки), Символы.НПП, "");  
	ДниПросрочки = ?(ЕстьЗадолженность, ДниПросрочки, "0");
	Если мПлатежи <> Неопределено Тогда 
		Если НЕ ЭтоФактическийПлатеж Тогда
			//Это любое событие кроме оплаты. Платежей не было, но есть ранее зафиксированные оплаты, в т.ч. с начала истории договора (например, до цессии)
			//формируем отчет по рекомендации НБКИ с дефисами.
			Стр =  мПлатежи[0];
			СтрИтого = мПлатежи[1][0];
			Строка2820 = ИмяСтрокиОтчета; 
			
			Если Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v3 И Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v4 Тогда
				//Не принимает с - в 5.0 
				//в 5.0 снова можно передавать текущее состояние задолженности на момент события-НЕ оплаты
				ДобавитьКСтроке(Строка2820, киФорматДаты(Стр.ДатаПлатежа)); 
				ДобавитьКСтроке(Строка2820, киФорматЧисла(Стр.СуммаДО));
				ДобавитьКСтроке(Строка2820, киФорматЧисла(Стр.ОсновнойДолгДО));
				ДобавитьКСтроке(Строка2820, киФорматЧисла(Стр.ПроцентыДО));  
				ДобавитьКСтроке(Строка2820, киФорматЧисла(Стр.Иное)); 
				ДобавитьКСтроке(Строка2820, киФорматЧисла(СтрИтого.СуммаДО));
				ДобавитьКСтроке(Строка2820, киФорматЧисла(СтрИтого.ОсновнойДолгДО));
				ДобавитьКСтроке(Строка2820, киФорматЧисла(СтрИтого.ПроцентыДО));
				ДобавитьКСтроке(Строка2820, киФорматЧисла(СтрИтого.Иное));
				
			Иначе 
				ДобавитьКСтроке(Строка2820, "");
				ДобавитьКСтроке(Строка2820, "-");
				ДобавитьКСтроке(Строка2820, "");
				ДобавитьКСтроке(Строка2820, "");  
				ДобавитьКСтроке(Строка2820, ""); 
				ДобавитьКСтроке(Строка2820, "-");
				ДобавитьКСтроке(Строка2820, "-");  
				ДобавитьКСтроке(Строка2820, "-");
				ДобавитьКСтроке(Строка2820, "-");

			КонецЕсли;
			
			ДобавитьКСтроке(Строка2820, ?(ЕстьЗадолженность, "3", "1"));
			ДобавитьКСтроке(Строка2820, "3");
			ДобавитьКСтроке(Строка2820, ДниПросрочки);	
		Иначе	
			Стр =  мПлатежи[0];
			СтрИтого = мПлатежи[1][0];
			Строка2820 = ИмяСтрокиОтчета; 
			ДобавитьКСтроке(Строка2820, киФорматДаты(Стр.ДатаПлатежа));
			ДобавитьКСтроке(Строка2820, киФорматЧисла(Стр.СуммаДО));
			ДобавитьКСтроке(Строка2820, киФорматЧисла(Стр.ОсновнойДолгДО));
			ДобавитьКСтроке(Строка2820, киФорматЧисла(Стр.ПроцентыДО));  
			ДобавитьКСтроке(Строка2820, киФорматЧисла(Стр.Иное));
			ДобавитьКСтроке(Строка2820, киФорматЧисла(СтрИтого.СуммаДО));
			ДобавитьКСтроке(Строка2820, киФорматЧисла(СтрИтого.ОсновнойДолгДО));
			ДобавитьКСтроке(Строка2820, киФорматЧисла(СтрИтого.ПроцентыДО));
			ДобавитьКСтроке(Строка2820, киФорматЧисла(СтрИтого.Иное));
			ДобавитьКСтроке(Строка2820, ?(ЕстьЗадолженность, "2", "1"));
			ДобавитьКСтроке(Строка2820, "3");
			ДниПросрочки = ?(Запись.ДатаСобытия = Стр.ДатаПлатежа, ДниПросрочки, Окр((НачалоДня(Стр.ДатаПлатежа) - НачалоДня(Запись.ДатаОкончанияСделки)) / 86400));
			ДниПросрочки = СтрЗаменить(Строка(ДниПросрочки), Символы.НПП, "");  
			ДниПросрочки = ?(ЕстьЗадолженность, ДниПросрочки, "0");
			ДобавитьКСтроке(Строка2820, ДниПросрочки);	

		КонецЕсли;
	Иначе    
		Если  ЭтоПлатежПоручителя = "2" Тогда 
			Строка2820 = ИмяСтрокиОтчета; 
			ДобавитьКСтроке(Строка2820, "");
			ДобавитьКСтроке(Строка2820, киФорматЧисла(0));
			ДобавитьКСтроке(Строка2820, "");
			ДобавитьКСтроке(Строка2820, "");  
			ДобавитьКСтроке(Строка2820, "");
			ДобавитьКСтроке(Строка2820, "");
			ДобавитьКСтроке(Строка2820, "");
			ДобавитьКСтроке(Строка2820, "");
			ДобавитьКСтроке(Строка2820, "");
			ДобавитьКСтроке(Строка2820, "");
			ДобавитьКСтроке(Строка2820, "");
			ДобавитьКСтроке(Строка2820, "");	
		Иначе	
			// По договору не было ни одного платежа ЗА ВСЮ историю договора, в т.ч. до момента работы текущей организации (например, до цессии)
			Строка2820 = ИмяСтрокиОтчета; 
			ДобавитьКСтроке(Строка2820, "");
			ДобавитьКСтроке(Строка2820, киФорматЧисла(0));
			ДобавитьКСтроке(Строка2820, "");
			ДобавитьКСтроке(Строка2820, "");  
			ДобавитьКСтроке(Строка2820, "");
			Если Настройка.ВерсияRUTDF = Перечисления.ВерсияRUTDF.v5 Тогда
				//Не принимает с 0 в 5.0
				ДобавитьКСтроке(Строка2820, "");
				ДобавитьКСтроке(Строка2820, "");  
				ДобавитьКСтроке(Строка2820, "");
				ДобавитьКСтроке(Строка2820, "");
			Иначе 
				ДобавитьКСтроке(Строка2820, киФорматЧисла(0));
				ДобавитьКСтроке(Строка2820, киФорматЧисла(0));
				ДобавитьКСтроке(Строка2820, киФорматЧисла(0));
				ДобавитьКСтроке(Строка2820, киФорматЧисла(0));	
			КонецЕсли;

			ДобавитьКСтроке(Строка2820, ?(ЕстьЗадолженность, "3", "1"));
			ДобавитьКСтроке(Строка2820, "3");
			ДниПросрочки = ?(ЕстьЗадолженность, ДниПросрочки, "0");
			ДобавитьКСтроке(Строка2820, ДниПросрочки);	
		КонецЕсли;
	КонецЕсли;

    // Дописать дни просрочки ФИФО по МКЗ
    
	Возврат Строка2820;		
	
КонецФункции

Функция СформироватьБлок29(Запись, Префикс, ДопПараметры = Неопределено) Экспорт 
	ТекущаяЗадолженность = Окр(ДопПараметры.ТекущаяЗадолженность + 0.05, 0, 0);
	ТекущаяЗадолженность = Строка(ТекущаяЗадолженность);
	Если НЕ ЗначениеЗаполнено(Запись.СуммаСделки) Тогда
		Возврат "";
	КонецЕсли;
	Настройка = ДопПараметры.Настройка;
	Если Префикс = "C" Тогда	
		ИмяСтрокиОтчета = Префикс + "29_MONTHAVERPAYMT";
		Строка29 = ИмяСтрокиОтчета; 
		
		Строка29 = Строка29 + Символы.Таб + СтрЗаменить(ТекущаяЗадолженность, Символы.НПП, "") + Символы.Таб + киФорматДаты(Запись.ДатаСобытия);
		Возврат Строка29;
		
		// Если Запись.Просрочка90плюс <> "0" Тогда 
		//	 Строка29 = Строка29 + Символы.Таб + СтрЗаменить(ТекущаяЗадолженность, Символы.НПП, "") + Символы.Таб + киФорматДаты(Запись.ДатаСобытия);
		//	 Возврат Строка29;
		// Иначе
		//	 Строка29 = Строка29 + СформироватьБлокПоНастройкам(Запись.Сделка, Настройка, ИмяСтрокиОтчета, "Сделка");
		//	 Возврат Строка29; 
		// КонецЕсли;	
	Иначе
		Возврат Строка29 = "";
	КонецЕсли;
КонецФункции  

Функция СформироватьБлок30_21(Запись, Префикс, ДопПараметры = Неопределено) Экспорт 
	Если ЗначениеЗаполнено(Запись.СуммаСделки) Тогда 
		Если Запись.Событие.КодНБКИ = "2.11.2" Тогда
			ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "30_SOURCENONMONETOBLIG", "21_SOURCENONMONETOBLIG");
			Строка3021 = ИмяСтрокиОтчета + Символы.Таб + "-" + Символы.Таб + "-"+ Символы.Таб + "" + Символы.Таб + "-" + Символы.Таб +  "-";
			Возврат Строка3021;
		Иначе	
			Возврат "";   
		КонецЕсли;
	КонецЕсли;	
	Настройка = ДопПараметры.Настройка;
	ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "30_SOURCENONMONETOBLIG", "21_SOURCENONMONETOBLIG");
	Строка3021 = ИмяСтрокиОтчета; 
	Если ЗначениеЗаполнено(Запись.НеденежноеОбязательство)  Тогда 	 
		Строка3021 = Строка3021 + СформироватьБлок30_21НО(Запись.НеденежноеОбязательство);
		Если Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v3 И Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v4 Тогда
			КредитныеИсторииИзменения.ДобавитьИзмененияБлок30_21НО(Запись.НеденежноеОбязательство, Строка3021);
		КонецЕсли;   		
	Иначе
		Строка3021 = Строка3021 + СформироватьБлокПоНастройкам(Запись.Сделка, Настройка, ИмяСтрокиОтчета, "Сделка"); 
	КонецЕсли;
	
	КредитныеИсторииИзменения.ОчиститьНеиспользуемыеПоля(Строка3021, Настройка.ВерсияRUTDF); 
	
	Возврат Строка3021;	
КонецФункции 

Функция СформироватьБлок30_21НО(НеденежноеОбязательство) Экспорт
	СтрокаОтчета = "";
	
	ДобавитьКСтроке(СтрокаОтчета, НеденежноеОбязательство.ПредметОбязательства);
	ДобавитьКСтроке(СтрокаОтчета, НеденежноеОбязательство.ОбъектПредоставления.КодНБКИ);
	ДобавитьКСтроке(СтрокаОтчета, НеденежноеОбязательство.ОбъектПредоставления.Наименование);  
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(НеденежноеОбязательство.ДатаПередачиИмуществаСубъекту));  
	
	Возврат СтрокаОтчета;	
	
КонецФункции  

Функция СформироватьБлок31_22(Запись, Префикс, ДопПараметры = Неопределено) Экспорт 
	Если ЗначениеЗаполнено(Запись.СуммаСделки) Тогда
		Возврат "";
	КонецЕсли;
	Настройка = ДопПараметры.Настройка;
  	ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "31_SUBJECTNONMONETOBLIG", "22_SUBJECTNONMONETOBLIG");
	Строка3122 = ИмяСтрокиОтчета; 
	Если ЗначениеЗаполнено(Запись.НеденежноеОбязательство)  Тогда 	 
		Строка3122 = Строка3122 + СформироватьБлок31_22НО(Запись.НеденежноеОбязательство);
		Если Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v3 И Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v4 Тогда
			КредитныеИсторииИзменения.ДобавитьИзмененияБлок31_22НО(Запись.НеденежноеОбязательство, Строка3122);
		КонецЕсли;
	Иначе
		Строка3122 = Строка3122 + СформироватьБлокПоНастройкам(Запись.Сделка, Настройка, ИмяСтрокиОтчета, "Сделка"); 
	КонецЕсли;	
	
	КредитныеИсторииИзменения.ОчиститьНеиспользуемыеПоля(Строка3122, Настройка.ВерсияRUTDF);
	
	Возврат Строка3122;	
КонецФункции 

Функция СформироватьБлок31_22НО(НеденежноеОбязательство) Экспорт 
	СтрокаОтчета = "";
	
	ДобавитьКСтроке(СтрокаОтчета, НеденежноеОбязательство.ПредметОбязательства);
	ДобавитьКСтроке(СтрокаОтчета, НеденежноеОбязательство.ОбъектПредоставления.Наименование); 
	ДобавитьКСтроке(СтрокаОтчета, НеденежноеОбязательство.УсловияИсполненияОбязательства);
	ДобавитьКСтроке(СтрокаОтчета, ?(НеденежноеОбязательство.НенадлежащееИсполнениеОбязательства, "1", "0"));

	Возврат СтрокаОтчета;	
				
КонецФункции     

Функция СформироватьБлок32_35(Запись, Префикс,  ДопПараметры = Неопределено) Экспорт
	Настройка = ДопПараметры.Настройка;  
	СтрокаОтчета = ""; 
	МассивОбеспечений = Новый Массив;
	МассивОбеспечений.Вставить(0, "Залог");
	МассивОбеспечений.Вставить(1, "Поручительство");
    МассивОбеспечений.Вставить(2, "Гарантия");
	МассивОбеспечений.Вставить(3, "Страхование");
	
	Если ЗначениеЗаполнено(Запись.Обеспечительство)  Тогда
		Если  Запись.Обеспечительство.ВидОбеспечения = Перечисления.ВидыОбеспечения.Залог Тогда
			ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "32_COLLATERAL", "23_COLLATERAL");
			СтрокаОтчета = ИмяСтрокиОтчета;
			СтрокаОтчета = СтрокаОтчета + СформироватьБлокОбеспечительстваЗалог(Запись.Обеспечительство);
			
			Если Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v3 И Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v4 Тогда
				КредитныеИсторииИзменения.ДобавитьИзмененияБлокОбеспечительстваЗалог(Запись.Обеспечительство, СтрокаОтчета);
			КонецЕсли;  
			
			КредитныеИсторииИзменения.ОчиститьНеиспользуемыеПоля(СтрокаОтчета, Настройка.ВерсияRUTDF);
			
			МассивОбеспечений[0] = СтрокаОтчета;
		ИначеЕсли Запись.Обеспечительство.ВидОбеспечения = Перечисления.ВидыОбеспечения.Поручительство Тогда 
			ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "33_GUARANTOR", "24_GUARANTOR");
			СтрокаОтчета = ИмяСтрокиОтчета;
			СтрокаОтчета = СтрокаОтчета + СформироватьБлокОбеспечительстваПоручительство(Запись.Обеспечительство);
			МассивОбеспечений[1] = СтрокаОтчета;
		ИначеЕсли Запись.Обеспечительство.ВидОбеспечения = Перечисления.ВидыОбеспечения.НезависимаяГарантия ИЛИ
			Запись.Обеспечительство.ВидОбеспечения  = Перечисления.ВидыОбеспечения.ИнаяГарантия ИЛИ 
			Запись.Обеспечительство.ВидОбеспечения  = Перечисления.ВидыОбеспечения.ГарантийныйДепозит Тогда 
				ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "34_INDEPGUARANTOR", "25_INDEPGUARANTOR");
				СтрокаОтчета = ИмяСтрокиОтчета;
			    СтрокаОтчета = СтрокаОтчета + СформироватьБлокОбеспечительстваГарантия(Запись.Обеспечительство);
                МассивОбеспечений[2] = СтрокаОтчета;
		ИначеЕсли Запись.Обеспечительство.ВидОбеспечения = Перечисления.ВидыОбеспечения.Страхование Тогда
			ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "35_COLLATINSURED", "26_COLLATINSURED");
			СтрокаОтчета = ИмяСтрокиОтчета;	
			СтрокаОтчета = СтрокаОтчета + СформироватьБлокОбеспечительстваСтрахование(Запись.Обеспечительство);
			
			Если Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v3 И Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v4 Тогда
				КредитныеИсторииИзменения.ДобавитьИзмененияБлокОбеспечительстваСтрахование(Запись.Обеспечительство, СтрокаОтчета);
			КонецЕсли;

			
			МассивОбеспечений[3] = СтрокаОтчета;
		ИначеЕсли Запись.Обеспечительство.ВидОбеспечения = Перечисления.ВидыОбеспечения.ИноеОбеспечение Тогда 
			ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "32_COLLATERAL", "23_COLLATERAL");
			СтрокаОтчета = ИмяСтрокиОтчета;
			СтрокаОтчета = СтрокаОтчета + СформироватьБлокОбеспечительстваУниверсальное(Запись.Обеспечительство); 
			
			Если Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v3 И Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v4 Тогда
				СформироватьБлокОбеспечительстваПоручительство(Запись.Обеспечительство);
			КонецЕсли;
            КредитныеИсторииИзменения.ОчиститьНеиспользуемыеПоля(СтрокаОтчета, Настройка.ВерсияRUTDF);
		
			МассивОбеспечений[0] = СтрокаОтчета;
		Иначе
			СтрокаОтчета = "";
		КонецЕсли;
	Иначе  
		Сч = 1; 
		Пока Сч <> 4 Цикл
			ИмяСтрокиОтчета = ИмяСтрокиОтчетаОбеспечение(Префикс, сч);
			СтрокаОтчета = ИмяСтрокиОтчета; 
			Обеспечение = СформироватьБлокПоНастройкам(Запись.Сделка, Настройка, ИмяСтрокиОтчета, "Сделка");	
			Если ЗначениеЗаполнено(Обеспечение) Тогда  
				СтрокаОтчета = СтрокаОтчета + Обеспечение;
				МассивОбеспечений.Добавить(СтрокаОтчета); 
			КонецЕсли;  
			Сч = Сч + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	ОбработатьПустыеСтрокиОбеспечений(МассивОбеспечений, Префикс);
	
	Возврат  МассивОбеспечений;
    				
КонецФункции

Процедура ОбработатьПустыеСтрокиОбеспечений(Массив, Префикс)
	Если Массив[0] = "Залог" Тогда 
		ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "32_COLLATERAL", "23_COLLATERAL");
		СтрокаОтчета = ИмяСтрокиОтчета;
		ДобавитьКСтроке(СтрокаОтчета, "0");
		ДобавитьКСтроке(СтрокаОтчета, "");
		ДобавитьКСтроке(СтрокаОтчета, "");	
		ДобавитьКСтроке(СтрокаОтчета, "");	
		ДобавитьКСтроке(СтрокаОтчета, "");
		ДобавитьКСтроке(СтрокаОтчета, "");
		ДобавитьКСтроке(СтрокаОтчета, "");  
		ДобавитьКСтроке(СтрокаОтчета, "");
		ДобавитьКСтроке(СтрокаОтчета, "");
		ДобавитьКСтроке(СтрокаОтчета, ""); 
		ДобавитьКСтроке(СтрокаОтчета, ""); 
		Массив[0] = СтрокаОтчета;
	КонецЕсли;   
	
	Если Массив[1] = "Поручительство" Тогда
		ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "33_GUARANTOR", "24_GUARANTOR");
		СтрокаОтчета = ИмяСтрокиОтчета;	
		ДобавитьКСтроке(СтрокаОтчета, "0");
		ДобавитьКСтроке(СтрокаОтчета, "");
		ДобавитьКСтроке(СтрокаОтчета, "");
		ДобавитьКСтроке(СтрокаОтчета, "");    	
		ДобавитьКСтроке(СтрокаОтчета, "");	
		ДобавитьКСтроке(СтрокаОтчета, "");
		ДобавитьКСтроке(СтрокаОтчета, "");
		ДобавитьКСтроке(СтрокаОтчета, "");	
		Массив[1] = СтрокаОтчета;
	КонецЕсли; 
	
	Если Массив[2] = "Гарантия" Тогда
		ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "34_INDEPGUARANTOR", "25_INDEPGUARANTOR");
		СтрокаОтчета = ИмяСтрокиОтчета;
		ДобавитьКСтроке(СтрокаОтчета, "0");
		ДобавитьКСтроке(СтрокаОтчета, "");
		ДобавитьКСтроке(СтрокаОтчета, "");
		ДобавитьКСтроке(СтрокаОтчета, "");    	
		ДобавитьКСтроке(СтрокаОтчета, "");	
		ДобавитьКСтроке(СтрокаОтчета, "");
		ДобавитьКСтроке(СтрокаОтчета, "");
		ДобавитьКСтроке(СтрокаОтчета, ""); 
		Массив[2] = СтрокаОтчета;
	КонецЕсли;  
	
	Если Массив[3] = "Страхование" Тогда
		ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "35_COLLATINSURED", "26_COLLATINSURED");
		СтрокаОтчета = ИмяСтрокиОтчета;	
		ДобавитьКСтроке(СтрокаОтчета, "0");
		ДобавитьКСтроке(СтрокаОтчета, "");
		ДобавитьКСтроке(СтрокаОтчета, "");
		ДобавитьКСтроке(СтрокаОтчета, "");    	
		ДобавитьКСтроке(СтрокаОтчета, "");	
		ДобавитьКСтроке(СтрокаОтчета, "");
		ДобавитьКСтроке(СтрокаОтчета, "");
		ДобавитьКСтроке(СтрокаОтчета, "");
		Массив[3] = СтрокаОтчета;
	КонецЕсли;
	
		
КонецПроцедуры

Функция ИмяСтрокиОтчетаОбеспечение(Префикс, ПорядковыйНомер)
	Если ПорядковыйНомер = 1 Тогда
		ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "32_COLLATERAL", "23_COLLATERAL");
	ИначеЕсли ПорядковыйНомер = 2 Тогда 
		ИмяСтрокиОтчета = Префикс + ?(Префикс = "C","33_GUARANTOR","24_GUARANTOR");
	ИначеЕсли ПорядковыйНомер = 3 Тогда
		ИмяСтрокиОтчета = Префикс + ?(Префикс = "C","34_INDEPGUARANTOR","25_INDEPGUARANTOR");
	ИначеЕсли ПорядковыйНомер = 4 Тогда
		ИмяСтрокиОтчета = Префикс + ?(Префикс = "C","35_COLLATINSURED","26_COLLATINSURED");
	Иначе
		ИмяСтрокиОтчета = "Ошибка формирования Обеспечения!";
	КонецЕсли;   
	
	Возврат ИмяСтрокиОтчета; 
	
КонецФункции	

Функция СформироватьБлокОбеспечительстваЗалог(Обеспечение) Экспорт 	
	СтрокаОтчета = "";
	                                                                               
	ДобавитьКСтроке(СтрокаОтчета, "1");
	ДобавитьКСтроке(СтрокаОтчета, Обеспечение.ПредметЗалога.КодНБКИ);
	ДобавитьКСтроке(СтрокаОтчета, Обеспечение.ИдентификаторОбеспечительства);	
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Обеспечение.ДатаЗаключенияДоговора));	
	ДобавитьКСтроке(СтрокаОтчета, киФорматЧисла(Обеспечение.СтоимостьПредметаДоговора));
	ДобавитьКСтроке(СтрокаОтчета, Строка(Обеспечение.ВалютаСтоимостиПредметаДоговора.Наименование));
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Обеспечение.ДатаЗаключенияДоговора));  
	ДобавитьКСтроке(СтрокаОтчета, "0");
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Обеспечение.ДатаПрекращенияОбеспечительства));
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Обеспечение.ДатаФактическогоПрекращенияДоговора)); 
	ДобавитьКСтроке(СтрокаОтчета, ?(ЗначениеЗаполнено(Обеспечение.ПричинаПрекращенияОбеспечительства), Обеспечение.ПричинаПрекращенияОбеспечительства.КодНБКИ, ""));  
	
	Возврат СтрокаОтчета;
КонецФункции  

Функция СформироватьБлокОбеспечительстваПоручительство(Обеспечение) Экспорт 
	СтрокаОтчета = "";    
	
	ДобавитьКСтроке(СтрокаОтчета, "1");
	ДобавитьКСтроке(СтрокаОтчета, Обеспечение.ИдентификаторОбеспечительства);
	ДобавитьКСтроке(СтрокаОтчета, киФорматЧисла(Обеспечение.СтоимостьПредметаДоговора));
	ДобавитьКСтроке(СтрокаОтчета, Строка(Обеспечение.ВалютаСтоимостиПредметаДоговора.Наименование));    	
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Обеспечение.ДатаЗаключенияДоговора));	
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Обеспечение.ДатаПрекращенияОбеспечительства));
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Обеспечение.ДатаФактическогоПрекращенияДоговора));
	ДобавитьКСтроке(СтрокаОтчета, ?(ЗначениеЗаполнено(Обеспечение.ПричинаПрекращенияОбеспечительства), Обеспечение.ПричинаПрекращенияОбеспечительства.КодНБКИ, ""));  
	  
	Возврат СтрокаОтчета;
	
КонецФункции  

Функция СформироватьБлокОбеспечительстваГарантия(Обеспечение) Экспорт 
	СтрокаОтчета = "";    
	
	ДобавитьКСтроке(СтрокаОтчета, "1");
	ДобавитьКСтроке(СтрокаОтчета, Обеспечение.ИдентификаторОбеспечительства);
	ДобавитьКСтроке(СтрокаОтчета, киФорматЧисла(Обеспечение.СтоимостьПредметаДоговора));
	ДобавитьКСтроке(СтрокаОтчета, Строка(Обеспечение.ВалютаСтоимостиПредметаДоговора.Наименование));    	
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Обеспечение.ДатаЗаключенияДоговора));	
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Обеспечение.ДатаПрекращенияОбеспечительства));
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Обеспечение.ДатаФактическогоПрекращенияДоговора));
	ДобавитьКСтроке(СтрокаОтчета, ?(ЗначениеЗаполнено(Обеспечение.ПричинаПрекращенияОбеспечительства), Обеспечение.ПричинаПрекращенияОбеспечительства.КодНБКИ, "")); 
	
	Возврат СтрокаОтчета;
	
КонецФункции   

Функция СформироватьБлокОбеспечительстваСтрахование(Обеспечение) Экспорт 
	
	СтрокаОтчета = "";    
	
	ДобавитьКСтроке(СтрокаОтчета, "1"); 
	ДобавитьКСтроке(СтрокаОтчета, СтрЗаменить(Строка(Окр(Обеспечение.СтоимостьПредметаДоговора + 0.05, 0, 0)), Символы.НПП, "")); 
	ДобавитьКСтроке(СтрокаОтчета, Строка(Обеспечение.ВалютаСтоимостиПредметаДоговора.Наименование));
	ДобавитьКСтроке(СтрокаОтчета, ?(ЗначениеЗаполнено(Обеспечение.ПризнакНаличияФраншизы),"1", "0"));
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Обеспечение.ДатаЗаключенияДоговора));	
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Обеспечение.ДатаПрекращенияОбеспечительства));
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Обеспечение.ДатаФактическогоПрекращенияДоговора));
	ДобавитьКСтроке(СтрокаОтчета, ?(ЗначениеЗаполнено(Обеспечение.ПричинаПрекращенияОбеспечительства), Обеспечение.ПричинаПрекращенияОбеспечительства.КодНБКИ, "")); 

	Возврат СтрокаОтчета;	
КонецФункции 

Функция СформироватьБлокОбеспечительстваУниверсальное(Обеспечение) Экспорт  
	
	СтрокаОтчета = "";    
	
	ДобавитьКСтроке(СтрокаОтчета, "1"); 
	Если ЗначениеЗаполнено(Обеспечение.ПредметЗалога.КодНБКИ) Тогда
		ДобавитьКСтроке(СтрокаОтчета, Обеспечение.ПредметЗалога.КодНБКИ);
	КонецЕсли;	 
	ДобавитьКСтроке(СтрокаОтчета, Обеспечение.ИдентификаторОбеспечительства); 
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Обеспечение.ДатаЗаключенияДоговора));
	ДобавитьКСтроке(СтрокаОтчета, киФорматЧисла(Обеспечение.СтоимостьПредметаДоговора));
	ДобавитьКСтроке(СтрокаОтчета, Строка(Обеспечение.ВалютаСтоимостиПредметаДоговора));
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Обеспечение.ДатаЗаключенияДоговора));
	Если ЗначениеЗаполнено(Обеспечение.ПредметЗалога.КодНБКИ) Тогда
		ДобавитьКСтроке(СтрокаОтчета, "0");
	КонецЕсли;
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Обеспечение.ДатаПрекращенияОбеспечительства));
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Обеспечение.ДатаФактическогоПрекращенияДоговора));
	ДобавитьКСтроке(СтрокаОтчета, ?(ЗначениеЗаполнено(Обеспечение.ПричинаПрекращенияОбеспечительства), Обеспечение.ПричинаПрекращенияОбеспечительства.КодНБКИ, "")); 

	Возврат СтрокаОтчета;	    				
КонецФункции  

Функция СформироватьБлок36_27(Запись, Префикс, ДопПараметры = Неопределено) Экспорт
	Настройка = ДопПараметры.Настройка;
	ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "36_COLLATREPAY", "27_COLLATREPAY");
	Строка3627 = ИмяСтрокиОтчета; 
	Если ЗначениеЗаполнено(Запись.Обеспечительство) Тогда 
		Фиксирование = ПолучитьПогашениеОбеспесчением(Запись.Сделка, Запись.Обеспечительство);
		Строка3627 = Строка3627 + СформироватьБлок36_27Фиксирование(Фиксирование);
	Иначе
		Строка3627 = Строка3627 + СформироватьБлокПоНастройкам(Запись.Сделка, Настройка, ИмяСтрокиОтчета, "Сделка"); 
	КонецЕсли;	 
	
	Возврат Строка3627;	
КонецФункции  

Функция СформироватьБлок36_27Фиксирование(ВыборкаФиксирование) Экспорт  
	СтрокаОтчета = "";  
	Пока ВыборкаФиксирование.Следующий() Цикл
		ДобавитьКСтроке(СтрокаОтчета, "1"); 
		ДобавитьКСтроке(СтрокаОтчета, ВыборкаФиксирование.КодНБКИОбеспечения);
		ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(ВыборкаФиксирование.Период));
		ДобавитьКСтроке(СтрокаОтчета, киФорматЧисла(ВыборкаФиксирование.СуммаПогашеннаяОбеспечением));
	КонецЦикла;  
	Если Не ЗначениеЗаполнено(СтрокаОтчета) Тогда
		ДобавитьКСтроке(СтрокаОтчета, "0"); 
		ДобавитьКСтроке(СтрокаОтчета, "");
		ДобавитьКСтроке(СтрокаОтчета, "");
		ДобавитьКСтроке(СтрокаОтчета, "");    
	КонецЕсли;
	
	Возврат СтрокаОтчета;	
	
КонецФункции   

Функция ПолучитьПогашениеОбеспесчением(ОбъектУчета, Регистратор) Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФиксированиеПогашенийОбеспечительством.Период КАК Период,
		|	ФиксированиеПогашенийОбеспечительством.ВидОбеспечения КАК ВидОбеспечения,
		|	ФиксированиеПогашенийОбеспечительством.КодНБКИОбеспечения КАК КодНБКИОбеспечения,
		|	ФиксированиеПогашенийОбеспечительством.СуммаПогашеннаяОбеспечением КАК СуммаПогашеннаяОбеспечением
		|ИЗ
		|	РегистрСведений.ФиксированиеПогашенийОбеспечительством КАК ФиксированиеПогашенийОбеспечительством
		|ГДЕ
		|	ФиксированиеПогашенийОбеспечительством.Регистратор = &Регистратор
		|	И ФиксированиеПогашенийОбеспечительством.ОбъектОбеспечительства = &ОбъектОбеспечительства";
	
	Запрос.УстановитьПараметр("ОбъектОбеспечительства", ОбъектУчета);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи;
	
КонецФункции 

Функция СформироватьБлок37_28(Запись, Префикс, ДопПараметры = Неопределено) Экспорт
	Настройка = ДопПараметры.Настройка;
	ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "37_GUARANTEEREPAY", "28_GUARANTEEREPAY");
	Строка3728 = ИмяСтрокиОтчета; 
	Если ЗначениеЗаполнено(Запись.Обеспечительство) Тогда 
		Строка3728 = Строка3728 + СформироватьБлок37_28Обеспечение(Запись.Обеспечительство);
		
		Если Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v3 И Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v4 Тогда
			КредитныеИсторииИзменения.ДобавитьИзмененияБлок37_28Обеспечение(Запись, Строка3728);
		КонецЕсли;
		
		
	Иначе
		Строка3728 = Строка3728 + СформироватьБлокПоНастройкам(Запись.Сделка, Настройка, ИмяСтрокиОтчета, "Сделка"); 
	КонецЕсли;	 
	
	Возврат Строка3728;	
КонецФункции  

Функция СформироватьБлок37_28Обеспечение(Обеспечение) Экспорт  
	СтрокаОтчета = ""; 
	ЕстьВозмещение = ?(Обеспечение.ВозмещениеПринципалом, "1", "0");
	Если ЕстьВозмещение = "1" Тогда	
		ДобавитьКСтроке(СтрокаОтчета, ЕстьВозмещение); 
		ДобавитьКСтроке(СтрокаОтчета, киФорматЧисла(Обеспечение.СтоимостьПредметаДоговора));
		ДобавитьКСтроке(СтрокаОтчета, киФорматЧисла(Обеспечение.СтоимостьПредметаДоговора));
		ДобавитьКСтроке(СтрокаОтчета, ЕстьВозмещение); 
	Иначе 
		ДобавитьКСтроке(СтрокаОтчета, "0"); 
		ДобавитьКСтроке(СтрокаОтчета, "");
		ДобавитьКСтроке(СтрокаОтчета, "");
		ДобавитьКСтроке(СтрокаОтчета, ""); 
	КонецЕсли;
	
	Возврат СтрокаОтчета;	
	
КонецФункции  

Функция СформироватьБлок38_29(Запись, Префикс, ДопПараметры = Неопределено) Экспорт
	Настройка = ДопПараметры.Настройка; 
	Дееспособность = ДопПараметры.Дееспособность;
	ЛицоНеСуществует = ДопПараметры.ЛицоНеСуществует;
	
	ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "38_OBLIGTERMINATION", "29_OBLIGTERMINATION");
	Строка3829 = ИмяСтрокиОтчета;
	Заполнено = Ложь;
	Если ТипЗнч(Запись.ДокументСобытие) = Тип("ДокументСсылка.СведенияОбИзмененииДоговора") И НЕ Заполнено Тогда
		 Строка3829 = Строка3829 + СформироватьБлок38_29Изменение(Запись.ДокументСобытие, Запись.ДатаСобытия);
		 Заполнено = Истина;
	ИначеЕсли ТипЗнч(Запись.ДокументСобытие) = Тип("ДокументСсылка.Обеспечительства") И НЕ Заполнено Тогда 
		Строка3829 = Строка3829 + СформироватьБлок38_29Обеспечение(Запись.ДокументСобытие, Запись.ДатаСобытия);
		Заполнено = Истина;
	ИначеЕсли ЗначениеЗаполнено(Запись.РеструктуризацияМКЗ) И НЕ Заполнено Тогда 
		Строка3829 = Строка3829 + СформироватьБлок38_29Новация(Запись.РеструктуризацияМКЗ);
		Заполнено = Истина;
	ИначеЕсли (ЗначениеЗаполнено(Запись.Банкротство) ИЛИ ЗначениеЗаполнено(Дееспособность)) И НЕ Заполнено Тогда 
		Строка3829 = Строка3829 + СформироватьБлок38_29Акт(Запись.ДатаСобытия);
		Заполнено = Истина;
	ИначеЕсли ЛицоНеСуществует И НЕ Заполнено Тогда 
		Строка3829 = Строка3829 + СформироватьБлок38_29Ликвидировано(Префикс, Запись.ДатаСобытия);
		Заполнено = Истина; 
	ИначеЕсли НЕ Заполнено Тогда 
		Строка3829 = Строка3829 + СформироватьБлок38_29Прекращение(Запись);
		Заполнено = Истина; 
	Иначе
		Строка3829 = Строка3829 + СформироватьБлокПоНастройкам(Запись.Сделка, Настройка, ИмяСтрокиОтчета, "Сделка"); 
	КонецЕсли;	 
	
	Возврат Строка3829;	
КонецФункции

Функция СформироватьБлок38_29Изменение(Изменение, ДатаСобытия) Экспорт 
	СтрокаОтчета = ""; 		
	ДобавитьКСтроке(СтрокаОтчета, Строка(Изменение.ПричиныПрекращенияОбязательства)); 
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(ДатаСобытия));	
	Возврат СтрокаОтчета;	

КонецФункции 

Функция СформироватьБлок38_29Обеспечение(Обеспечение, ДатаСобытия) Экспорт 
	СтрокаОтчета = ""; 	
	ДобавитьКСтроке(СтрокаОтчета, "4"); 
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(ДатаСобытия));
	Возврат СтрокаОтчета;		
КонецФункции

Функция СформироватьБлок38_29Новация(РеструктуризацияМКЗ) Экспорт 
	СтрокаОтчета = ""; 		
	ДобавитьКСтроке(СтрокаОтчета, "10"); 
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(РеструктуризацияМКЗ.ДатаРеструктуризации));
	
	Возврат СтрокаОтчета;	
КонецФункции

Функция СформироватьБлок38_29Акт(ДатаСобытия) Экспорт 
	СтрокаОтчета = ""; 		
	ДобавитьКСтроке(СтрокаОтчета, "13");
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(ДатаСобытия));	
	Возврат СтрокаОтчета;	
КонецФункции

Функция СформироватьБлок38_29Ликвидировано(Префикс, ДатаСобытия) Экспорт 
	СтрокаОтчета = ""; 		
	ДобавитьКСтроке(СтрокаОтчета, ?(Префикс = "C", "14", "15"));
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(ДатаСобытия));
	Возврат СтрокаОтчета;	
КонецФункции

Функция СформироватьБлок38_29Прекращение(Запись) Экспорт  
	ДниПросрочки = Окр((НачалоДня(ТекущаяДатаСеанса()) - НачалоДня(Запись.ДатаОкончанияСделки)) / 86400);
	СтрокаОтчета = "";
	Если Запись.БезнадежныйДолг = "1" Тогда
		КодПрекращения = "12";
	ИначеЕсли ДниПросрочки <= 0 Тогда 
		КодПрекращения = "1";
	ИначеЕсли ДниПросрочки > 0  Тогда
		КодПрекращения = "2";
	ИначеЕсли ЗначениеЗаполнено(Запись.СудебноеДело) Тогда
		КодПрекращения = "2";
	Иначе
		КодПрекращения = "99";
	КонецЕсли;	
	ДобавитьКСтроке(СтрокаОтчета, КодПрекращения);
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Запись.ДатаСобытия));
	Возврат СтрокаОтчета;	
КонецФункции

Функция СформироватьБлок39_30(Запись, Префикс, ДопПараметры = Неопределено) Экспорт
	Настройка = ДопПараметры.Настройка;  
	ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "39_LEGALRECORD", "30_LEGALRECORD");
	Строка3930 = ИмяСтрокиОтчета; 
	Если ЗначениеЗаполнено(Запись.СудебноеДело) Тогда 	 
		Строка3930 = Строка3930 + СформироватьБлок39_30Суд(Запись.ДокументСобытие);
	Иначе
		Строка3930 = Строка3930 + СформироватьБлокПоНастройкам(Запись.Сделка, Настройка, ИмяСтрокиОтчета, "Сделка"); 
	КонецЕсли;	 
	Возврат Строка3930;	
КонецФункции 

Функция СформироватьБлок39_30Суд(ДокументСобытие) Экспорт 
	
	ЕстьИД = (ТипЗнч(ДокументСобытие) = Тип("СправочникСсылка.ИсполнительныеДокументы"));  
	ИД = ""; 
	СтрокаОтчета = "";
	Если ЕстьИД Тогда
		ИД = ДокументСобытие;
	КонецЕсли;
		
	Если ЕстьИД Тогда 
		ДатаДокумента = ИД.ДатаИД;
		РезолютивнаяЧасть = ?(ЗначениеЗаполнено(ИД.СодержаниеИД), ИД.СодержаниеИД, "Взыскание просроченной задолженности");
		РезолютивнаяЧасть = СтрЗаменить(РезолютивнаяЧасть, Символы.Таб, "");
		РезолютивнаяЧасть = ОчисткаСтроки(РезолютивнаяЧасть);
		РезолютивнаяЧасть = СтрЗаменить(РезолютивнаяЧасть, "..", ".");
		РезолютивнаяЧасть = СтрЗаменить(РезолютивнаяЧасть, ",,", ",");
		ДобавитьКСтроке(СтрокаОтчета, "1"); 
		ДобавитьКСтроке(СтрокаОтчета, "1");
		ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(ДатаДокумента));
		НомерДокумента = СтрЗаменить(ИД.НомерДела, " ", "");
		НомерДокумента = СтрЗаменить(НомерДокумента, "№", ""); 
		НомерДокумента = СтрЗаменить(НомерДокумента, ".", "");
		ДобавитьКСтроке(СтрокаОтчета, НомерДокумента);
		ДобавитьКСтроке(СтрокаОтчета, РезолютивнаяЧасть); 
		ДобавитьКСтроке(СтрокаОтчета, ?(ДатаДокумента > ТекущаяДатаСеанса(), "0", "1"));
		
	Иначе
		Если ДокументСобытие.Отменено и ЗначениеЗаполнено(ДокументСобытие.ДатаОтмены) Тогда
			РезолютивнаяЧасть = "Отменить судебный приказ " + СтрЗаменить(Строка(ДокументСобытие.НомерДела), ".", "");
			ДобавитьКСтроке(СтрокаОтчета, "1"); 
			ДобавитьКСтроке(СтрокаОтчета, "1");
			ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(ДокументСобытие.ДатаОтмены));
			ДобавитьКСтроке(СтрокаОтчета, ДокументСобытие.НомерДела);
			ДобавитьКСтроке(СтрокаОтчета, РезолютивнаяЧасть); 
			ДобавитьКСтроке(СтрокаОтчета, ("1"));
		Иначе
			ДобавитьКСтроке(СтрокаОтчета, "1"); 
			ДобавитьКСтроке(СтрокаОтчета, "0");
			ДобавитьКСтроке(СтрокаОтчета, "");
			ДобавитьКСтроке(СтрокаОтчета, "");
			ДобавитьКСтроке(СтрокаОтчета, ""); 
			ДобавитьКСтроке(СтрокаОтчета, "");
		КонецЕсли;
	КонецЕсли;	
								
	Возврат СтрокаОтчета;	
				
КонецФункции 


Функция СформироватьБлок45_35(Запись, Префикс, ДопПараметры = Неопределено) Экспорт
	Настройка = ДопПараметры.Настройка; 
	Если Запись.Продан = "1" И ТипЗнч(Запись.ДокументСобытие) = Тип("ДокументСсылка.ПродажаОбъектовУчета") Тогда
		СтрокаОтчета = СформироватьБлок45_35Продажа(Запись, Запись.ДокументСобытие, Префикс)
	ИначеЕсли Настройка.ДатаОкончанияДоговораНБКИ > ТекущаяДатаСеанса() ИЛИ Настройка.ДоговорРасторгнут Тогда 
		СтрокаОтчета = СформироватьБлок45_35Учетка(Настройка, Префикс);
	Иначе  
		ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "45_SUBMITHOLD", "35_SUBMITHOLD");
		СтрокаОтчета = ИмяСтрокиОтчета;
		СтрокаОтчета = СформироватьБлокПоНастройкам(Запись.Сделка, Настройка, ИмяСтрокиОтчета, "Сделка");
	КонецЕсли;
	
	Возврат СтрокаОтчета;
	
КонецФункции

Функция СформироватьБлок45_35Продажа(Запись, Продажа, Префикс) Экспорт 	
	ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "45_SUBMITHOLD", "35_SUBMITHOLD");
	Строка4535 = ИмяСтрокиОтчета;  
	
	ДобавитьКСтроке(Строка4535, "3"); 
	ДобавитьКСтроке(Строка4535, киФорматДаты(Продажа.Дата));
  
	Возврат Строка4535;		
				
КонецФункции  

Функция СформироватьБлок45_35Учетка(Настройка, Префикс) Экспорт 	
	ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "45_SUBMITHOLD", "35_SUBMITHOLD");
	Строка4535 = ИмяСтрокиОтчета; 
	КодПрекращенияПередачи = ?(Настройка.ДатаОкончанияДоговораНБКИ > ТекущаяДатаСеанса(), "2", "1");
	Если Настройка.ДоговорРасторгнут Тогда 
		КодПрекращенияПередачи = "2";
	КонецЕсли;   
	
	ДобавитьКСтроке(Строка4535, КодПрекращенияПередачи); 
	ДобавитьКСтроке(Строка4535, ?(КодПрекращенияПередачи = "2", киФорматДаты(ТекущаяДатаСеанса()), киФорматДаты(Настройка.ДатаОкончанияДоговораНБКИ)));
 
	Возврат Строка4535;		
				
КонецФункции 

Функция СформироватьБлок50СведенияОПродаже(Запись, Префикс, ДопПараметры = Неопределено) Экспорт
	Настройка = ДопПараметры.Настройка; 
	Если ТипЗнч(Запись.ДокументСобытие) = Тип("ДокументСсылка.ПродажаОбъектовУчета") Тогда
		СтрокаОтчета = СформироватьБлокСведенияОПродажеПродажа(Запись.Сделка, Настройка, Запись.ДокументСобытие, Префикс);
	Иначе  
		Сч = 1; 
		МассивПриобретателей = Новый Массив;
		Пока Сч <> 3 Цикл
			ИмяСтрокиОтчета = ИмяСтрокиОтчетаПриобретатель(Префикс, сч);
			СтрокаОтчета = ИмяСтрокиОтчета; 
			Приобретатель = СформироватьБлокПоНастройкам(Запись.Сделка, Настройка, ИмяСтрокиОтчета, "Сделка");	
			Если ЗначениеЗаполнено(Приобретатель) Тогда  
				СтрокаОтчета = СтрокаОтчета + Приобретатель;
				МассивПриобретателей.Добавить(СтрокаОтчета); 
			КонецЕсли;  
			Сч = Сч + 1;
		КонецЦикла;
	КонецЕсли;	
	
	Возврат ?(ЗначениеЗаполнено(МассивПриобретателей), МассивПриобретателей, СтрокаОтчета);
КонецФункции  


Функция СформироватьБлокСведенияОПродажеПродажа(Сделка, Настройка, ДокПродажа, Префикс) 
	СтрокаОтчета = "";
	Если ДокПродажа.ТипПреобретателя = Перечисления.НБКИ_ТипыПриобретателейПравТребований.ЮридическоеЛицо Тогда
		ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "51_ACQUIRERLEGAL", "41_ACQUIRERLEGAL");
		СтрокаОтчета = ИмяСтрокиОтчета;
		СтрокаОтчета = СформироватьБлок51_41(ИмяСтрокиОтчета, Сделка, Настройка, ДокПродажа);
	ИначеЕсли ДокПродажа.ТипПреобретателя = Перечисления.НБКИ_ТипыПриобретателейПравТребований.ФизическоеЛицо Тогда 
		ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "52_ACQUIRERINDIVID", "42_ACQUIRERINDIVID"); 
		СтрокаОтчета = ИмяСтрокиОтчета;
		СтрокаОтчета = СформироватьБлок52_42(ИмяСтрокиОтчета, Сделка, Настройка, ДокПродажа);
	ИначеЕсли ДокПродажа.ТипПреобретателя = Перечисления.НБКИ_ТипыПриобретателейПравТребований.Агент Тогда
		ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "53_SERVICECO", "43_SERVICECO");
		СтрокаОтчета = ИмяСтрокиОтчета;
		СтрокаОтчета = СформироватьБлок53_43(ИмяСтрокиОтчета, Сделка, Настройка, ДокПродажа);
	Иначе
		СтрокаОтчета = "Ошибка формирования Продажи!";
	КонецЕсли;   
	
	Возврат СтрокаОтчета; 
	
КонецФункции 

Функция СформироватьБлок51_41(ИмяСтрокиОтчета, Сделка, Настройка, ДокПродажа)
	СтрокаОтчета = ИмяСтрокиОтчета;
	СтрокаОтчета = СтрокаОтчета + СформироватьБлокПоНастройкам(ДокПродажа.ПриобретательПраваТребования, Настройка, ИмяСтрокиОтчета, "ПриобретательПраваТребования");
	СтрокаОтчета = СокрЛП(СтрокаОтчета);
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(ДокПродажа.Дата));	
	Возврат СтрокаОтчета; 
КонецФункции 

Функция СформироватьБлок52_42(ИмяСтрокиОтчета, Сделка, Настройка, ДокПродажа) 
	СтрокаОтчета = СформироватьБлокПоНастройкам(Сделка, Настройка, ИмяСтрокиОтчета, "Сделка");
	СтрокаОтчета = СокрЛП(СтрокаОтчета);
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(ДокПродажа.Дата));	
	Возврат СтрокаОтчета; 
КонецФункции    

Функция СформироватьБлок53_43(ИмяСтрокиОтчета, Сделка, Настройка, ДокПродажа) 
	СтрокаОтчета = ИмяСтрокиОтчета;
	СтрокаОтчета = СтрокаОтчета + СформироватьБлокПоНастройкам(ДокПродажа.ПриобретательПраваТребования, Настройка, ИмяСтрокиОтчета, "ПриобретательПраваТребования");
	СтрокаОтчета = СокрЛП(СтрокаОтчета);
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(ДокПродажа.АгентскаяСхемаДатаНачала)); 
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(ДокПродажа.АгентскаяСхемаДатаОкончания));
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(ДокПродажа.НаименованиеЭмитента)); 
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(ДокПродажа.РегистрационныйНомерЭмитента));	
	Возврат СтрокаОтчета; 
КонецФункции  

Функция ИмяСтрокиОтчетаПриобретатель(Префикс, ПорядковыйНомер)
	Если ПорядковыйНомер = 1 Тогда
		ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "51_ACQUIRERLEGAL", "41_ACQUIRERLEGAL");
	ИначеЕсли ПорядковыйНомер = 2 Тогда 
		ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "52_ACQUIRERINDIVID", "42_ACQUIRERINDIVID");
	ИначеЕсли ПорядковыйНомер = 3 Тогда
		ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "53_SERVICECO", "43_SERVICECO");
	Иначе
		ИмяСтрокиОтчета = "Ошибка формирования Продажи!";
	КонецЕсли;   
	
	Возврат ИмяСтрокиОтчета; 
	
КонецФункции

Функция СформироватьБлок54_44(Запись, Префикс, ДопПараметры = Неопределено) Экспорт 
		
	Настройка = ДопПараметры.Настройка; 
	ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "54_OBLIGACCOUNT", "44_OBLIGACCOUNT");
	СтрокаОтчета = ИмяСтрокиОтчета; 
	ПризнакУчета = "1";
	Если ТипЗнч(Запись.ДокументСобытие) = Тип("ДокументСсылка.ПродажаОбъектовУчета") Тогда 
		ПризнакУчета = ?(Запись.ДокументСобытие.Цессия, "0", "1");
	КонецЕсли;	   
	
	ДобавитьКСтроке(СтрокаОтчета, ПризнакУчета);   
	
		
	Если Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v3 И Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v4 Тогда
		КредитныеИсторииИзменения.ДобавитьИзмененияБлок54_44(Запись, ДопПараметры, СтрокаОтчета);
	КонецЕсли;
		
	Возврат СтрокаОтчета;
	
КонецФункции 

Функция СформироватьБлок55_45(Запись, Префикс, ДопПараметры = Неопределено) Экспорт
	Настройка = ДопПараметры.Настройка; 
	Заполнено = Ложь;
	ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "55_APPLICATION", "45_APPLICATION");
	СтрокаОтчета = ИмяСтрокиОтчета;
	Если ТипЗнч(Запись.ДокументСобытие) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если Настройка.НеФормироватьОбращения Тогда
			СтрокаОтчета = ""; 
			Заполнено = Истина;
		ИначеЕсли ЗначениеЗаполнено(Запись.Прощение) Тогда
			СтрокаОтчета = СтрокаОтчета + СформироватьБлок55_45Наследование(Запись);
		Иначе	
			СтрокаОтчета = СтрокаОтчета + СформироватьБлокПоНастройкам(Запись.Сделка, Настройка, ИмяСтрокиОтчета, "Сделка"); 
		КонецЕсли;
		Заполнено = Истина;
	ИначеЕсли ЗначениеЗаполнено(Запись.ДоговорМКЗ)  Тогда
		СтрокаОтчета = СтрокаОтчета + СформироватьБлок55_45МКЗ(Запись.ДоговорМКЗ);
		Заполнено = Истина;
	ИначеЕсли ЗначениеЗаполнено(Запись.РеструктуризацияМКЗ) Тогда
		СтрокаОтчета = СтрокаОтчета + СформироватьБлок55_45МКЗ(Запись.РеструктуризацияМКЗ);
		Заполнено = Истина;
	ИначеЕсли ЗначениеЗаполнено(Запись.НеденежноеОбязательство) И НЕ Заполнено  Тогда 	 
		СтрокаОтчета = СтрокаОтчета + СформироватьБлок55_45НО(Запись.НеденежноеОбязательство);
	Иначе
		СтрокаОтчета = СтрокаОтчета + СформироватьБлокПоНастройкам(Запись.Сделка, Настройка, ИмяСтрокиОтчета, "Сделка"); 
	КонецЕсли;	
	
	Если Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v3 И Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v4 Тогда
		КредитныеИсторииИзменения.ДобавитьИзмененияБлок55_45(Запись, ДопПараметры, СтрокаОтчета);
	КонецЕсли;

	
	Возврат СтрокаОтчета;
	
КонецФункции  

Функция СформироватьБлок55_45МКЗ(Микрозайм) Экспорт
	КодИсточника  = ?(Микрозайм.ПрограммаРасчета.БанковскаяПрограмма, "1", "2");
	СтрокаОтчета = "";
	ДобавитьКСтроке(СтрокаОтчета, "1");
	ДобавитьКСтроке(СтрокаОтчета, киФорматЧисла(Микрозайм.СуммаВыданногоЗайма));
	ДобавитьКСтроке(СтрокаОтчета, Строка(Микрозайм.Займ.ВалютаДоговора.Наименование)); 
	ДобавитьКСтроке(СтрокаОтчета, Микрозайм.UIDНБКИ);
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Микрозайм.Дата));
	ДобавитьКСтроке(СтрокаОтчета, КодИсточника);
	ДобавитьКСтроке(СтрокаОтчета, "3");
	ДобавитьКСтроке(СтрокаОтчета, "31.12.9999"); 
	
	Возврат СтрокаОтчета;	
КонецФункции   

Функция СформироватьБлок55_45Наследование(Запись) Экспорт
	СтрокаОтчета = "";
	ДобавитьКСтроке(СтрокаОтчета, "99");
	ДобавитьКСтроке(СтрокаОтчета, киФорматЧисла(Запись.СуммаСделки));
	ДобавитьКСтроке(СтрокаОтчета, Строка(Запись.Сделка.ВалютаДоговора.Наименование)); 
	ДобавитьКСтроке(СтрокаОтчета, Запись.UID);
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Запись.Прощение.ДатаИзмененияДоговора));
	ДобавитьКСтроке(СтрокаОтчета, "17");
	ДобавитьКСтроке(СтрокаОтчета, "99");
	ДобавитьКСтроке(СтрокаОтчета, ""); 
	
	Возврат СтрокаОтчета;	
КонецФункции 

Функция СформироватьБлок55_45НО(НеденежноеОбязательство) Экспорт 
	КодИсточника  = "15";     
	СтрокаОтчета = "";
	ДобавитьКСтроке(СтрокаОтчета, "1");
	ДобавитьКСтроке(СтрокаОтчета, киФорматЧисла(НеденежноеОбязательство.Стоимость));
	ДобавитьКСтроке(СтрокаОтчета, Строка(НеденежноеОбязательство.ОбъектОбязательства.ВалютаДоговора.Наименование)); 
	ДобавитьКСтроке(СтрокаОтчета, НеденежноеОбязательство.UIDНБКИ);
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(НеденежноеОбязательство.ДатаОбращенияСубъекта));
	ДобавитьКСтроке(СтрокаОтчета, КодИсточника);
	ДобавитьКСтроке(СтрокаОтчета, "5");
	ДобавитьКСтроке(СтрокаОтчета, "31.12.9999"); 
	
	Возврат СтрокаОтчета; 	
КонецФункции 

Функция СформироватьБлок56_46(Запись, Префикс, ДопПараметры = Неопределено) Экспорт
	Настройка = ДопПараметры.Настройка; 
	ЕстьБлокПрекращение = (Запись.Событие.КодНБКИ = "2.5");
	ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "56_OBLIGPARTTAKE", "46_OBLIGPARTTAKE");
	СтрокаОтчета = ИмяСтрокиОтчета;
  	ДобавитьКСтроке(СтрокаОтчета, "1");
	ДобавитьКСтроке(СтрокаОтчета, Запись.КодНБКИВидКредита);
	ДобавитьКСтроке(СтрокаОтчета, Запись.UID); 
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Запись.ДатаПередачиФинансирования));
	ДобавитьКСтроке(СтрокаОтчета, ?(ЕстьБлокПрекращение, "0", Запись.Просрочка90плюс));
	ДобавитьКСтроке(СтрокаОтчета, ?(ЕстьБлокПрекращение, "1", "0"));
		
	Возврат СтрокаОтчета; 	
КонецФункции  

Функция СформироватьБлок57_47(Запись, Префикс, ДопПараметры = Неопределено) Экспорт
	Настройка = ДопПараметры.Настройка; 
	ИмяСтрокиОтчета = Префикс + ?(Префикс = "C", "57_APPLREJECT", "47_APPLREJECT");
	СтрокаОтчета = ИмяСтрокиОтчета;
	Если ЗначениеЗаполнено(Запись.Банкротство) Тогда
		Если ТипЗнч(Запись.Банкротство) = Тип("СправочникСсылка.ДелоОБанкротстве") Тогда
			ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Запись.Банкротство.ДатаПоследнейПроверки));
		Иначе 
			ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Запись.ДатаСобытия));
		КонецЕсли;
		ДобавитьКСтроке(СтрокаОтчета, "6");
	ИначеЕсли ЗначениеЗаполнено(Запись.ДоговорМКЗ) ИЛИ ЗначениеЗаполнено(Запись.РеструктуризацияМКЗ) Тогда
		СтрокаОтчета = СтрокаОтчета + СформироватьБлок57_47МКЗ(Запись.ДокументСобытие); 
	ИначеЕсли ЗначениеЗаполнено(Запись.НеденежноеОбязательство) Тогда
		СтрокаОтчета = СтрокаОтчета + СформироватьБлок57_47НО(Запись.НеденежноеОбязательство); 
	Иначе
		СтрокаОтчета = СформироватьБлокПоНастройкам(Запись.Сделка, Настройка, ИмяСтрокиОтчета, "Сделка");
	КонецЕсли;	
	
	
	Возврат СтрокаОтчета; 	
КонецФункции  

Функция СформироватьБлок57_47МКЗ(Микрозайм) Экспорт
	СтрокаОтчета = "";
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(Микрозайм.ДатаВыдачиЗайма));
	ДобавитьКСтроке(СтрокаОтчета, "5");
	Возврат СтрокаОтчета;	
КонецФункции

Функция СформироватьБлок57_47НО(НеденежноеОбязательство) Экспорт  
	СтрокаОтчета = "";
	
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(НеденежноеОбязательство.ДатаОдобренияИсточником));
	ДобавитьКСтроке(СтрокаОтчета, "5");
	Возврат СтрокаОтчета;
КонецФункции

Функция ВернутьКодЧастотыПлатежейНБКИ(Микрозайм) Экспорт
	// 1	Более четырех раз в месяц
	// 2	От двух до четырех раз в месяц
	// 3	Один раз в месяц
	// 4	Один раз в квартал
	// 5	Один раз в полгода
	// 6	Один раз в год
	// 7	Единовременно, в том числе в день окончания срока действия договора
	// 8	До востребования
	// 9	Бессрочно
	// 99	Иное
	
	Периодичность = Микрозайм.ПериодичностьСрокаЗайма;
	КоличествоПериодичностей = Микрозайм.КоличествоПериодичностей; 
	
	Если Микрозайм.СпособПогашения = Перечисления.СпособыПогашенияЗаймов.Равномерно Тогда
		
		Если Периодичность = Перечисления.ПериодичностьСрокаЗайма.День И КоличествоПериодичностей > 4 Тогда
			Возврат "1";
		КонецЕсли;
		
		Если Периодичность = Перечисления.ПериодичностьСрокаЗайма.Неделя И КоличествоПериодичностей > 4 Тогда
			Возврат "1";
		КонецЕсли; 
		
		Если Периодичность = Перечисления.ПериодичностьСрокаЗайма.День И КоличествоПериодичностей <= 4 Тогда
			Возврат "2";
		КонецЕсли;
		
		Если Периодичность = Перечисления.ПериодичностьСрокаЗайма.Неделя И КоличествоПериодичностей <= 4 Тогда
			Возврат "2";
		КонецЕсли;  
		
		Если Периодичность = Перечисления.ПериодичностьСрокаЗайма.Месяц И КоличествоПериодичностей = 1 Тогда
			Возврат "3";
		КонецЕсли;
		
		Если Периодичность = Перечисления.ПериодичностьСрокаЗайма.Месяц И КоличествоПериодичностей = 3 Тогда
			Возврат "4";
		КонецЕсли;
		
		Если Периодичность = Перечисления.ПериодичностьСрокаЗайма.Месяц И КоличествоПериодичностей = 6 Тогда
			Возврат "5";
		КонецЕсли;
		
		Если Периодичность = Перечисления.ПериодичностьСрокаЗайма.Год И КоличествоПериодичностей = 1 Тогда
			Возврат "6";
		КонецЕсли; 
		
	КонецЕсли;
	
	Если Микрозайм.СпособПогашения = Перечисления.СпособыПогашенияЗаймов.НаДатуОкончанияДоговора Тогда 
		Возврат "7";
	КонецЕсли;	
	
	
КонецФункции

Процедура ЗаполнитьДатыБеспроцентонгоПериода(Микрозайм, Начало, Конец) Экспорт 
	Программа = Микрозайм.ПрограммаРасчета;
	Дни =  Программа.НачислятьПроценты_Количество;
	Если Дни > 0 Тогда
		Конец = Микрозайм.ДатаВыдачиЗайма + Дни * 86400; 
		Начало = Микрозайм.ДатаВыдачиЗайма;
	КонецЕсли;
КонецПроцедуры

Функция ВернутьПоследнийПлатежПоОбъекту(ОбъектУчета, ДатаРасчета, РеквизитПризнакНаличияРанееОсуществленныхПлатежей, ФормироватьПринудительныйПлатеж, ВерсияRUTDF) Экспорт 
	
	МассивДокументовСписания = Новый Массив ;
	 	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадолженностьПоОбъектам.Период КАК ДатаПлатежа,
	|	ЗадолженностьПоОбъектам.Объект КАК ОбъектВх,
	|	ЗадолженностьПоОбъектам.СуммаДО КАК СуммаДО,
	|	ЗадолженностьПоОбъектам.ОсновнойДолгДО КАК ОсновнойДолгДО,
	|	ЗадолженностьПоОбъектам.ПроцентыДО КАК ПроцентыДО,
	|	ЗадолженностьПоОбъектам.ШтрафыДО + ЗадолженностьПоОбъектам.ПениДО + ЗадолженностьПоОбъектам.Составляющая1ДО + ЗадолженностьПоОбъектам.Составляющая2ДО + ЗадолженностьПоОбъектам.Составляющая3ДО + ЗадолженностьПоОбъектам.Составляющая4ДО + ЗадолженностьПоОбъектам.Составляющая5ДО + ЗадолженностьПоОбъектам.Составляющая6ДО + ЗадолженностьПоОбъектам.Составляющая7ДО + ЗадолженностьПоОбъектам.Составляющая8ДО КАК Иное,
	|	""Внесудебная"" КАК ТипЗадолженности
	|ПОМЕСТИТЬ Платежи
	|ИЗ
	|	РегистрНакопления.ЗадолженностьПоОбъектам КАК ЗадолженностьПоОбъектам
	|ГДЕ
	|	ЗадолженностьПоОбъектам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ТИПЗНАЧЕНИЯ(ЗадолженностьПоОбъектам.Регистратор) В (ТИП(Документ.АктуализацияЗадолженности), ТИП(Документ.ПоступлениеПлатежей))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РасчетыПоДоговорам.Период,
	|	РасчетыПоДоговорам.Займ,
	|	РасчетыПоДоговорам.ОсновнойДолг + РасчетыПоДоговорам.Штрафы + РасчетыПоДоговорам.Пени + РасчетыПоДоговорам.Проценты + РасчетыПоДоговорам.ПроцентыНачисленныеВПериодПросрочки,
	|	РасчетыПоДоговорам.ОсновнойДолг,
	|	РасчетыПоДоговорам.Проценты + РасчетыПоДоговорам.ПроцентыНачисленныеВПериодПросрочки,
	|	РасчетыПоДоговорам.Штрафы + РасчетыПоДоговорам.Пени,
	|	""Внесудебная""
	|ИЗ
	|	РегистрНакопления.РасчетыПоДоговорам КАК РасчетыПоДоговорам
	|ГДЕ
	|	РасчетыПоДоговорам.ВидДвиженияЗадолженности = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПорасчетам.Оплата)
	|	И ТИПЗНАЧЕНИЯ(РасчетыПоДоговорам.Регистратор) В (ТИП(Документ.ДоговорМикрозайма), ТИП(Документ.РеструктуризацияМикрозайма))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗадолженностьПоОбъектамВнесудебная.Период,
	|	ЗадолженностьПоОбъектамВнесудебная.Объект,
	|	ЗадолженностьПоОбъектамВнесудебная.СуммаДО,
	|	ЗадолженностьПоОбъектамВнесудебная.ОсновнойДолгДО,
	|	ЗадолженностьПоОбъектамВнесудебная.ПроцентыДО,
	|	ЗадолженностьПоОбъектамВнесудебная.ШтрафыДО + ЗадолженностьПоОбъектамВнесудебная.ПениДО + ЗадолженностьПоОбъектамВнесудебная.Составляющая1ДО + ЗадолженностьПоОбъектамВнесудебная.Составляющая2ДО + ЗадолженностьПоОбъектамВнесудебная.Составляющая3ДО + ЗадолженностьПоОбъектамВнесудебная.Составляющая4ДО + ЗадолженностьПоОбъектамВнесудебная.Составляющая5ДО + ЗадолженностьПоОбъектамВнесудебная.Составляющая6ДО + ЗадолженностьПоОбъектамВнесудебная.Составляющая7ДО + ЗадолженностьПоОбъектамВнесудебная.Составляющая8ДО,
	|	""Внесудебная""
	|ИЗ
	|	РегистрНакопления.ЗадолженностьПоОбъектамВнесудебная КАК ЗадолженностьПоОбъектамВнесудебная
	|ГДЕ
	|	ЗадолженностьПоОбъектамВнесудебная.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ТИПЗНАЧЕНИЯ(ЗадолженностьПоОбъектамВнесудебная.Регистратор) В (ТИП(Документ.ПоступлениеПлатежа))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗадолженностьПоСудебнымРешениям.Период,
	|	ЗадолженностьПоСудебнымРешениям.Займ,
	|	ЗадолженностьПоСудебнымРешениям.Сумма,
	|	0,
	|	0,
	|	0,
	|	ЗадолженностьПоСудебнымРешениям.ТипЗадолженности
	|ИЗ
	|	РегистрНакопления.ЗадолженностьПоСудебнымРешениям КАК ЗадолженностьПоСудебнымРешениям
	|ГДЕ
	|	ЗадолженностьПоСудебнымРешениям.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ТИПЗНАЧЕНИЯ(ЗадолженностьПоСудебнымРешениям.Регистратор) В (ТИП(Документ.ПоступлениеПлатежа))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Платежи.ДатаПлатежа КАК ДатаПлатежа,
	|	Платежи.ОбъектВх КАК ОбъектВх,
	|	Платежи.СуммаДО КАК СуммаДО,
	|	Платежи.ОсновнойДолгДО КАК ОсновнойДолгДО,
	|	Платежи.ПроцентыДО КАК ПроцентыДО,
	|	Платежи.Иное КАК Иное,
	|	Платежи.ТипЗадолженности КАК ТипЗадолженности
	|ИЗ
	|	Платежи КАК Платежи
	|ГДЕ
	|	Платежи.ОбъектВх = &ОбъектВх
	|	И Платежи.ДатаПлатежа <= &ДатаПлатежа
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПлатежа УБЫВ";
	
	Если ФормироватьПринудительныйПлатеж Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".Регистратор) В (ТИП(", ".Регистратор) В (ТИП(Документ.КорректировкаРегистров), ТИП(Документ.СведенияОбИзмененииДоговора), ТИП(");
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ОбъектВх", ОбъектУчета);
	Запрос.УстановитьПараметр("ДатаПлатежа", ДатаРасчета);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() > 0 Тогда
		Для каждого СТР из РезультатЗапроса Цикл  
			Если Стр.ТипЗадолженности = "Внесудебная" тогда
				Продолжить;
			КонецЕсли;
			Если СТР.ТипЗадолженности = ПланыВидовХарактеристик.ТипыЗадолженностиПоРешению.ОсновнойДолг Тогда
				Стр.ОсновнойДолгДО = стр.СуммаДО;
				Продолжить;
			КонецЕсли;
			
			Если СТР.ТипЗадолженности = ПланыВидовХарактеристик.ТипыЗадолженностиПоРешению.Проценты Тогда
				Стр.ПроцентыДО = стр.СуммаДО;
				Продолжить;
			КонецЕсли;
			
			Если СТР.ТипЗадолженности <> ПланыВидовХарактеристик.ТипыЗадолженностиПоРешению.Проценты Тогда 
				Если СТР.ТипЗадолженности <> ПланыВидовХарактеристик.ТипыЗадолженностиПоРешению.ОсновнойДолг Тогда
					Стр.Иное = стр.СуммаДО;   
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		МассивРезультат = Новый Массив;
		РезультатЗапроса.Свернуть("ДатаПлатежа, ОбъектВх", "СуммаДО, ОсновнойДолгДО, ПроцентыДО, Иное");
		тзПлатеж = РезультатЗапроса.Скопировать();
		МассивРезультат.Добавить(тзПлатеж[0]); //стр
		РезультатЗапроса.Свернуть("ОбъектВх", "СуммаДО, ОсновнойДолгДО, ПроцентыДО, Иное");
		МассивРезультат.Добавить(РезультатЗапроса);  // тз 
		Возврат МассивРезультат;
	Иначе 
		Если ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v3 И ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v4 Тогда	
			Возврат Неопределено; 
		Иначе
			Запрос.Текст  = СтрЗаменить(Запрос.Текст, " = &ДатаПлатежа"," <= &ДатаПлатежа");
			ОтстутсвиеПлатежей = Запрос.Выполнить().Пустой();    
			НастроенПризнак = ЗначениеЗаполнено(РеквизитПризнакНаличияРанееОсуществленныхПлатежей);
			Если НастроенПризнак Тогда
				ЕстьРанееОсуществленныеПлатежи = объектыСервер.ПолучитьЗначениеСвойства(ОбъектУчета, РеквизитПризнакНаличияРанееОсуществленныхПлатежей.Код);
				Если ЗначениеЗаполнено(ЕстьРанееОсуществленныеПлатежи) ИЛИ НЕ ОтстутсвиеПлатежей Тогда
					МассивРезультат = Новый Массив;
					ЗаглушкаПлатеж = РезультатЗапроса.Скопировать();
					СтрокаПлатеж = Заглушкаплатеж.Добавить();
					СтрокаПлатеж.ДатаПлатежа = ДатаРасчета;
					СтрокаПлатеж.ОбъектВх = ОбъектУчета;
					СтрокаПлатеж.СуммаДО = 1;
					СтрокаПлатеж.ОсновнойДолгДО = 1;
					СтрокаПлатеж.ПроцентыДО = 0;
					СтрокаПлатеж.Иное = 0; 
					МассивРезультат.Добавить(ЗаглушкаПлатеж[0]);
					МассивРезультат.Добавить(ЗаглушкаПлатеж); 
					Возврат МассивРезультат;
				Иначе 
					Возврат Неопределено;
				КонецЕсли;
			Иначе	 
				Возврат Неопределено;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
КонецФункции      

Функция ВернутьЗадолженностьПоОбъекту(ОбъектУчета, ДатаРасчета) Экспорт 
	
	//ТЗЗадолженности = ОбъектыСервер.ВычислитьЗадолженностьНаДату(ОбъектУчета, ДатаРасчета);
	
		 	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадолженностьПоОбъектамОстатки.ОсновнойДолгДООстаток КАК ОсновнойДолгДО,
	|	ЗадолженностьПоОбъектамОстатки.ПроцентыДООстаток КАК ПроцентыДО,
	|	ЗадолженностьПоОбъектамОстатки.ШтрафыДООстаток + ЗадолженностьПоОбъектамОстатки.ПениДООстаток + ЗадолженностьПоОбъектамОстатки.Составляющая1ДООстаток + ЗадолженностьПоОбъектамОстатки.Составляющая2ДООстаток + ЗадолженностьПоОбъектамОстатки.Составляющая3ДООстаток + ЗадолженностьПоОбъектамОстатки.Составляющая4ДООстаток + ЗадолженностьПоОбъектамОстатки.Составляющая5ДООстаток + ЗадолженностьПоОбъектамОстатки.Составляющая6ДООстаток + ЗадолженностьПоОбъектамОстатки.Составляющая7ДООстаток + ЗадолженностьПоОбъектамОстатки.Составляющая8ДООстаток КАК Иное,
	|	""Внесудебная"" КАК ТипЗадолженности,
	|	ЗадолженностьПоОбъектамОстатки.Объект КАК Объект,
	|	ЗадолженностьПоОбъектамОстатки.СуммаДООстаток КАК СуммаДООстаток
	|ИЗ
	|	РегистрНакопления.ЗадолженностьПоОбъектам.Остатки(&ДатаРасчета, Объект = &ОбъектУчета) КАК ЗадолженностьПоОбъектамОстатки
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РасчетыПоДоговорамОстатки.ОсновнойДолгОстаток,
	|	РасчетыПоДоговорамОстатки.ПроцентыОстаток + РасчетыПоДоговорамОстатки.ПроцентыНачисленныеВПериодПросрочкиОстаток,
	|	РасчетыПоДоговорамОстатки.ШтрафыОстаток + РасчетыПоДоговорамОстатки.ПениОстаток,
	|	""Внесудебная"",
	|	РасчетыПоДоговорамОстатки.Займ,
	|	РасчетыПоДоговорамОстатки.ОсновнойДолгОстаток + РасчетыПоДоговорамОстатки.ШтрафыОстаток + РасчетыПоДоговорамОстатки.ПениОстаток + РасчетыПоДоговорамОстатки.ПроцентыОстаток + РасчетыПоДоговорамОстатки.ПроцентыНачисленныеВПериодПросрочкиОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыПоДоговорам.Остатки(&ДатаРасчета, Займ = &ОбъектУчета) КАК РасчетыПоДоговорамОстатки
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗадолженностьПоОбъектамВнесудебнаяОстатки.ОсновнойДолгДООстаток,
	|	ЗадолженностьПоОбъектамВнесудебнаяОстатки.ПроцентыДООстаток,
	|	ЗадолженностьПоОбъектамВнесудебнаяОстатки.ШтрафыДООстаток + ЗадолженностьПоОбъектамВнесудебнаяОстатки.ПениДООстаток + ЗадолженностьПоОбъектамВнесудебнаяОстатки.Составляющая1ДООстаток + ЗадолженностьПоОбъектамВнесудебнаяОстатки.Составляющая2ДООстаток + ЗадолженностьПоОбъектамВнесудебнаяОстатки.Составляющая3ДООстаток + ЗадолженностьПоОбъектамВнесудебнаяОстатки.Составляющая4ДООстаток + ЗадолженностьПоОбъектамВнесудебнаяОстатки.Составляющая5ДООстаток + ЗадолженностьПоОбъектамВнесудебнаяОстатки.Составляющая6ДООстаток + ЗадолженностьПоОбъектамВнесудебнаяОстатки.Составляющая7ДООстаток + ЗадолженностьПоОбъектамВнесудебнаяОстатки.Составляющая8ДООстаток,
	|	""Внесудебная"",
	|	ЗадолженностьПоОбъектамВнесудебнаяОстатки.Объект,
	|	ЗадолженностьПоОбъектамВнесудебнаяОстатки.СуммаДООстаток
	|ИЗ
	|	РегистрНакопления.ЗадолженностьПоОбъектамВнесудебная.Остатки(&ДатаРасчета, Объект = &ОбъектУчета) КАК ЗадолженностьПоОбъектамВнесудебнаяОстатки
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	0,
	|	ЗадолженностьПоСудебнымРешениямОстатки.ТипЗадолженности,
	|	ЗадолженностьПоСудебнымРешениямОстатки.Займ,
	|	ЗадолженностьПоСудебнымРешениямОстатки.СуммаОстаток
	|ИЗ
	|	РегистрНакопления.ЗадолженностьПоСудебнымРешениям.Остатки(&ДатаРасчета, Займ = &ОбъектУчета) КАК ЗадолженностьПоСудебнымРешениямОстатки";
	
	Запрос.УстановитьПараметр("ОбъектУчета", ОбъектУчета);
	Запрос.УстановитьПараметр("ДатаРасчета", ДатаРасчета + 1);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() > 0 Тогда
		Для каждого СТР из РезультатЗапроса Цикл  
			Если Стр.ТипЗадолженности = "Внесудебная" Тогда
				Если Стр.Иное < 0 Тогда
					Стр.Иное = 0;
				КонецЕсли;	
				Если Стр.ОсновнойДолгДО < 0 Тогда
					Стр.ОсновнойДолгДО = 0;	
				КонецЕсли;	
				Если Стр.ПроцентыДО < 0 Тогда
					Стр.ПроцентыДО = 0;
				КонецЕсли;	
				Если Стр.СуммаДООстаток <= 0 Тогда
					Стр.СуммаДООстаток = 0;
					Стр.Иное = 0;
					Стр.ПроцентыДО = 0;
				КонецЕсли;		
			КонецЕсли;
			Если СТР.ТипЗадолженности = ПланыВидовХарактеристик.ТипыЗадолженностиПоРешению.ОсновнойДолг Тогда
				Стр.ОсновнойДолгДО = стр.СуммаДООстаток;
				Продолжить;
			КонецЕсли;
			
			Если СТР.ТипЗадолженности = ПланыВидовХарактеристик.ТипыЗадолженностиПоРешению.Проценты Тогда
				Стр.ПроцентыДО = стр.СуммаДООстаток;
				Продолжить;
			КонецЕсли;
			
			Если СТР.ТипЗадолженности <> ПланыВидовХарактеристик.ТипыЗадолженностиПоРешению.Проценты Тогда 
				Если СТР.ТипЗадолженности <> ПланыВидовХарактеристик.ТипыЗадолженностиПоРешению.ОсновнойДолг Тогда
					Если Стр.ТипЗадолженности <> "Внесудебная" Тогда
						Стр.Иное = стр.СуммаДООстаток;   
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		РезультатЗапроса.Свернуть("Объект", "СуммаДООстаток, ОсновнойДолгДО, ПроцентыДО, Иное");
		Возврат РезультатЗапроса;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Процедура ДобавитьКСтроке(СтрокаВх, Значение) Экспорт
	зЗначение = СокрЛП(Значение);
	
	ЕстьЛатиница = ПроверкаЛатиницы(зЗначение);
	
	Если СтрНайти(зЗначение, "annul_reason") > 0 Тогда 
		СтрокаВх = СтрокаВх + Символы.Таб + Нрег(зЗначение);	
	ИначеЕсли СтрДлина(зЗначение) = 38 И ЕстьЛатиница И СтрНайти(зЗначение, "@") = 0  Тогда
		СтрокаВх = СтрокаВх + Символы.Таб + зЗначение;
	ИначеЕсли Не ЕстьЛатиница Тогда       
		СтрокаВх = СтрокаВх + Символы.Таб + Врег(зЗначение);
	ИначеЕсли ЕстьЛатиница И СтрНайти(зЗначение, "@") > 0 Тогда       
		СтрокаВх = СтрокаВх + Символы.Таб + Нрег(зЗначение);	 
	Иначе
		СтрокаВх = СтрокаВх + Символы.Таб + зЗначение;	
	КонецЕсли;		 
	
КонецПроцедуры   

Процедура ЗаписатьСобитиеИсточникПрекратилПередачу(Параметры, АдресРезультата) Экспорт  
	
	ИсточникСобытия = Параметры.ИсточникСобытия;
	ДатаСобытия = Параметры.ДатаСобытия;
	ПрогрессВыполнения = 1; 
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыВРаботеОстатки.Объект КАК Объект
		|ИЗ
		|	РегистрНакопления.ОбъектыВРаботе.Остатки КАК ОбъектыВРаботеОстатки";
	
		РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВсегоОбъектов = ВыборкаДетальныеЗаписи.Количество();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		КредитныеИстории.ЗаписатьСобытиеСделки(ВыборкаДетальныеЗаписи.Объект, ДатаСобытия, ИсточникСобытия, "2.10");		
		ПроцентВыполнения = (ПрогрессВыполнения / ВсегоОбъектов) * 100;
		ПроцентВыполнения = Окр(ПроцентВыполнения, 0);    
		
		ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, СокрЛП(ВыборкаДетальныеЗаписи.Обязательство));
		
		ПрогрессВыполнения = ПрогрессВыполнения + 1;
		ДатаСобытия = ДатаСобытия + 1;
	КонецЦикла;   
	
	
КонецПроцедуры	

Процедура СформироватьТекстГруппыGROUPHEADER(КоличествоГруппБлоков, тТелоОтчета, Операция, ДатаОтчета, КодНБКИ, Комментарий, Причина, Идентификатор) Экспорт 
	ИмяСтрокиОтчета = "0_GROUPHEADER";
	СтрокаОтчета =  ИмяСтрокиОтчета;
	стрКоличествоГруппБлоков = Строка(КоличествоГруппБлоков);
	стрКоличествоГруппБлоков = СтрЗаменить(стрКоличествоГруппБлоков, Символы.НПП, "");
	стрКоличествоГруппБлоков = СтрЗаменить(стрКоличествоГруппБлоков, " ", "");
	ДобавитьКСтроке(СтрокаОтчета, стрКоличествоГруппБлоков);
	ДобавитьКСтроке(СтрокаОтчета, КодНБКИ); 
	ДобавитьКСтроке(СтрокаОтчета, Строка(Операция)); 
	Если Операция = "C" ИЛИ Операция = "D" Тогда
		Коммент = СформироватьJSONКомментарии(Комментарий, Причина, Идентификатор);
		ДобавитьКСтроке(СтрокаОтчета, Коммент);
	Иначе	
		ДобавитьКСтроке(СтрокаОтчета, ""); 
	КонецЕсли;
	ДобавитьКСтроке(СтрокаОтчета, киФорматДаты(ДатаОтчета));
	ДобавитьКТелуОтчета(тТелоОтчета, СтрокаОтчета); 
	КоличествоГруппБлоков = КоличествоГруппБлоков + 1;
КонецПроцедуры	   

Функция ПолучитьНепринятыеЗаписиПоОбъектамУчета(ТаблицаОбъектов, НепринятыйДокумент) Экспорт  
	// ОбъектУчета
	// Должник
	
	МассивВыборок = Новый Массив;
			
	
	ЗапросДанныеСделки = Новый Запрос;
	ЗапросДанныеСделки.Текст = 	 
		"ВЫБРАТЬ
		|	ЖурналВыгрузокНБКИRUTDF.ОбъектУчета КАК ОбъектУчета,
		|	ЖурналВыгрузокНБКИRUTDF.Событие КАК Событие,
		|	ЖурналВыгрузокНБКИRUTDF.ДокументОтчет КАК ДокументОтчет,
		|	ЖурналВыгрузокНБКИRUTDF.ДатаСобытия КАК ДатаСобытия,
		|	ЖурналВыгрузокНБКИRUTDF.ДатаПоследнейВыгрузки КАК ДатаПоследнейВыгрузки
		|ПОМЕСТИТЬ НепринятыеЗаписи
		|ИЗ
		|	РегистрСведений.ЖурналВыгрузокНБКИRUTDF КАК ЖурналВыгрузокНБКИRUTDF
		|ГДЕ
		|	ЖурналВыгрузокНБКИRUTDF.Принято = &НеПринято
		|	И ЖурналВыгрузокНБКИRUTDF.ОбъектУчета В(&ОбъектУчета)
		|	И ЖурналВыгрузокНБКИRUTDF.ДокументОтчет = &ДокументОтчет
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектУчета,
		|	Событие,
		|	ДатаСобытия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КредитныеИсторииДанныеСделки.Сделка КАК Сделка,
		|	КредитныеИсторииДанныеСделки.ДатаСобытия КАК ДатаСобытия,
		|	КредитныеИсторииДанныеСделки.Событие КАК Событие,
		|	КредитныеИсторииДанныеСделки.ДокументСобытие КАК ДокументСобытие,
		|	КредитныеИсторииДанныеСделки.UID КАК UID,
		|	КредитныеИсторииДанныеСделки.ДатаНачалаСделки КАК ДатаНачалаСделки,
		|	КредитныеИсторииДанныеСделки.ДатаОкончанияСделки КАК ДатаОкончанияСделки,
		|	КредитныеИсторииДанныеСделки.ДатаПередачиФинансирования КАК ДатаПередачиФинансирования,
		|	КредитныеИсторииДанныеСделки.ДатаРасчетаСрочнойЗадолженности КАК ДатаРасчетаСрочнойЗадолженности,
		|	КредитныеИсторииДанныеСделки.ДатаРасчетаПросроченнойЗадолженности КАК ДатаРасчетаПросроченнойЗадолженности,
		|	КредитныеИсторииДанныеСделки.СуммаСделки КАК СуммаСделки,
		|	КредитныеИсторииДанныеСделки.СолидарныйДоговор КАК СолидарныйДоговор,
		|	КредитныеИсторииДанныеСделки.ДоговорМКЗ КАК ДоговорМКЗ,
		|	КредитныеИсторииДанныеСделки.РеструктуризацияМКЗ КАК РеструктуризацияМКЗ,
		|	КредитныеИсторииДанныеСделки.Обеспечительство КАК Обеспечительство,
		|	КредитныеИсторииДанныеСделки.СудебноеДело КАК СудебноеДело,
		|	КредитныеИсторииДанныеСделки.ПрекращениеОбязательства КАК ПрекращениеОбязательства,
		|	КредитныеИсторииДанныеСделки.НеденежноеОбязательство КАК НеденежноеОбязательство,
		|	КредитныеИсторииДанныеСделки.Продан КАК Продан,
		|	КредитныеИсторииДанныеСделки.Просрочка90плюс КАК Просрочка90плюс,
		|	КредитныеИсторииДанныеСделки.ПризнакПотребительскогоКредита КАК ПризнакПотребительскогоКредита,
		|	КредитныеИсторииДанныеСделки.ПризнакПлатежнойКарты КАК ПризнакПлатежнойКарты,
		|	КредитныеИсторииДанныеСделки.КодНБКИВидКредита КАК КодНБКИВидКредита,
		|	КредитныеИсторииДанныеСделки.КодНБКИТипКредита КАК КодНБКИТипКредита,
		|	КредитныеИсторииДанныеСделки.КодНБКИЦельКредита КАК КодНБКИЦельКредита,
		|	КредитныеИсторииДанныеСделки.Прощение КАК Прощение,
		|	КредитныеИсторииДанныеСделки.Банкротство КАК Банкротство,
		|	КредитныеИсторииДанныеСделки.БезнадежныйДолг КАК БезнадежныйДолг,
		|	НепринятыеЗаписи.ДатаПоследнейВыгрузки КАК ДатаПоследнейВыгрузки,
		|	КредитныеИсторииДанныеСделки.ДатаВыходаНаПросрочку КАК ДатаВыходаНаПросрочку,
		|	КредитныеИсторииДанныеСделки.ВидЗаимодавца КАК ВидЗаимодавца,
		|	КредитныеИсторииДанныеСделки.ЧастичноеПравопреемство КАК ЧастичноеПравопреемство,
		|	КредитныеИсторииДанныеСделки.ПризнакКредитнойЛинии КАК ПризнакКредитнойЛинии,
		|	КредитныеИсторииДанныеСделки.КодНБКИТипКредититнойЛинии КАК КодНБКИТипКредититнойЛинии,
		|	КредитныеИсторииДанныеСделки.ПризнакПлавающейПроцентнойСтавки КАК ПризнакПлавающейПроцентнойСтавки,
		|	КредитныеИсторииДанныеСделки.ДатаВозникновенияОбязательстваСубъекта КАК ДатаВозникновенияОбязательстваСубъекта,
		|	КредитныеИсторииДанныеСделки.ПорядковыйНомерТранша КАК ПорядковыйНомерТранша,
		|	КредитныеИсторииДанныеСделки.ПроцентнаяСтавкаПоУсловиям КАК ПроцентнаяСтавкаПоУсловиям,
		|	КредитныеИсторииДанныеСделки.ЧастичнаяПродажа КАК ЧастичнаяПродажа
		|ИЗ
		|	НепринятыеЗаписи КАК НепринятыеЗаписи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КредитныеИсторииДанныеСделки КАК КредитныеИсторииДанныеСделки
		|		ПО НепринятыеЗаписи.ОбъектУчета = КредитныеИсторииДанныеСделки.Сделка
		|			И НепринятыеЗаписи.Событие = КредитныеИсторииДанныеСделки.Событие
		|			И НепринятыеЗаписи.ДатаСобытия = КредитныеИсторииДанныеСделки.ДатаСобытия
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСобытия";
	
	ЗапросДанныеСделки.УстановитьПараметр("НеПринято", Перечисления.СтатусыОтчетаНБКИ.НеПринято);
	ЗапросДанныеСделки.УстановитьПараметр("ОбъектУчета", ТаблицаОбъектов.ВыгрузитьКолонку("ОбъектУчета")); 
	ЗапросДанныеСделки.УстановитьПараметр("ДокументОтчет", НепринятыйДокумент);

	
	РезультатЗапроса = ЗапросДанныеСделки.Выполнить();
	ВыборкаДанныеСделки = РезультатЗапроса.Выгрузить(); 
	
	Если ВыборкаДанныеСделки.Количество() > 0 Тогда
		МассивВыборок.Добавить(ВыборкаДанныеСделки);
	КонецЕсли;	
	
	ЗапросДанныеСубъектаФЛ = Новый Запрос;
	ЗапросДанныеСубъектаФЛ.Текст = 
		"ВЫБРАТЬ
		|	ЖурналВыгрузокНБКИRUTDF.ОбъектУчета КАК ОбъектУчета,
		|	ЖурналВыгрузокНБКИRUTDF.Событие КАК Событие,
		|	ЖурналВыгрузокНБКИRUTDF.ДатаСобытия КАК ДатаСобытия,
		|	ЖурналВыгрузокНБКИRUTDF.ДокументОтчет КАК ДокументОтчет,
		|	ЖурналВыгрузокНБКИRUTDF.ДатаПоследнейВыгрузки КАК ДатаПоследнейВыгрузки
		|ПОМЕСТИТЬ НепринятныеЗаписи
		|ИЗ
		|	РегистрСведений.ЖурналВыгрузокНБКИRUTDF КАК ЖурналВыгрузокНБКИRUTDF
		|ГДЕ
		|	ЖурналВыгрузокНБКИRUTDF.ОбъектУчета В(&СубъектУчета)
		|	И ЖурналВыгрузокНБКИRUTDF.Принято = &НеПринято
		|	И ЖурналВыгрузокНБКИRUTDF.ДокументОтчет = &ДокументОтчет
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектУчета,
		|	Событие,
		|	ДатаСобытия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КредитныеИсторииДанныеФизЛица.Должник КАК Должник,
		|	КредитныеИсторииДанныеФизЛица.ДатаСобытия КАК ДатаСобытия,
		|	КредитныеИсторииДанныеФизЛица.Событие КАК Событие,
		|	КредитныеИсторииДанныеФизЛица.ДокументСобытие КАК ДокументСобытие,
		|	КредитныеИсторииДанныеФизЛица.ДатаРождения КАК ДатаРождения,
		|	КредитныеИсторииДанныеФизЛица.МестоРождения КАК МестоРождения,
		|	КредитныеИсторииДанныеФизЛица.КодСтраны КАК КодСтраны,
		|	КредитныеИсторииДанныеФизЛица.ИНН КАК ИНН,
		|	КредитныеИсторииДанныеФизЛица.СНИЛС КАК СНИЛС,
		|	КредитныеИсторииДанныеФизЛица.ЭлПочта КАК ЭлПочта,
		|	КредитныеИсторииДанныеФизЛица.Дееспособность КАК Дееспособность,
		|	КредитныеИсторииДанныеФизЛица.Иное КАК Иное,
		|	КредитныеИсторииДанныеФизЛица.КодСтраныДокумента КАК КодСтраныДокумента,
		|	КредитныеИсторииДанныеФизЛица.НаименованиеИнойСтраныДокумента КАК НаименованиеИнойСтраныДокумента,
		|	КредитныеИсторииДанныеФизЛица.КодНБКИДокумента КАК КодНБКИДокумента,
		|	КредитныеИсторииДанныеФизЛица.НаименованиеИногоДокумента КАК НаименованиеИногоДокумента,
		|	КредитныеИсторииДанныеФизЛица.СерияДокумента КАК СерияДокумента,
		|	КредитныеИсторииДанныеФизЛица.НомерДокумента КАК НомерДокумента,
		|	КредитныеИсторииДанныеФизЛица.КемВыданДокумент КАК КемВыданДокумент,
		|	КредитныеИсторииДанныеФизЛица.ДатаВыдачиДокумента КАК ДатаВыдачиДокумента,
		|	КредитныеИсторииДанныеФизЛица.КодПодразделенияРФ КАК КодПодразделенияРФ,
		|	КредитныеИсторииДанныеФизЛица.ДатаОкончанияДействияДокумента КАК ДатаОкончанияДействияДокумента,
		|	КредитныеИсторииДанныеФизЛица.ОтметкаОСмерти КАК ОтметкаОСмерти,
		|	КредитныеИсторииДанныеФизЛица.ЭтоИП КАК ЭтоИП,
		|	КредитныеИсторииДанныеФизЛица.ДатаРегистрацииИП КАК ДатаРегистрацииИП,
		|	КредитныеИсторииДанныеФизЛица.ИНН_ИП КАК ИНН_ИП,
		|	КредитныеИсторииДанныеФизЛица.ДатаРегистрацииПоДокументу КАК ДатаРегистрацииПоДокументу,
		|	КредитныеИсторииДанныеФизЛица.НаименованиеРегистрирующегоОргана КАК НаименованиеРегистрирующегоОргана,
		|	КредитныеИсторииДанныеФизЛица.КодПодразделенияРегистрацииРФ КАК КодПодразделенияРегистрацииРФ,
		|	НепринятныеЗаписи.ДатаПоследнейВыгрузки КАК ДатаПоследнейВыгрузки,
		|	КредитныеИсторииДанныеФизЛица.СпециальныйНалоговыйРежим КАК СпециальныйНалоговыйРежим
		|ИЗ
		|	НепринятныеЗаписи КАК НепринятныеЗаписи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КредитныеИсторииДанныеФизЛица КАК КредитныеИсторииДанныеФизЛица
		|		ПО НепринятныеЗаписи.ОбъектУчета = КредитныеИсторииДанныеФизЛица.Должник
		|			И НепринятныеЗаписи.Событие = КредитныеИсторииДанныеФизЛица.Событие
		|			И НепринятныеЗаписи.ДатаСобытия = КредитныеИсторииДанныеФизЛица.ДатаСобытия
		|ГДЕ
		|	КредитныеИсторииДанныеФизЛица.Должник В(&СубъектУчета)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСобытия";
	
	ЗапросДанныеСубъектаФЛ.УстановитьПараметр("НеПринято", Перечисления.СтатусыОтчетаНБКИ.НеПринято);
	ЗапросДанныеСубъектаФЛ.УстановитьПараметр("СубъектУчета", ТаблицаОбъектов.ВыгрузитьКолонку("Должник")); 
	ЗапросДанныеСубъектаФЛ.УстановитьПараметр("ДокументОтчет", НепринятыйДокумент);
	
	РезультатЗапроса = ЗапросДанныеСубъектаФЛ.Выполнить();
	
	ВыборкаДанныеФЛ = РезультатЗапроса.Выгрузить();  
	
	Если ВыборкаДанныеФЛ.Количество() > 0 Тогда
		МассивВыборок.Добавить(ВыборкаДанныеФЛ);
	КонецЕсли;		
	
	ЗапросДанныеСубъектаЮЛ = Новый Запрос;
	ЗапросДанныеСубъектаЮЛ.Текст = 
		"ВЫБРАТЬ
		|	ЖурналВыгрузокНБКИRUTDF.ОбъектУчета КАК ОбъектУчета,
		|	ЖурналВыгрузокНБКИRUTDF.Событие КАК Событие,
		|	ЖурналВыгрузокНБКИRUTDF.ДатаСобытия КАК ДатаСобытия,
		|	ЖурналВыгрузокНБКИRUTDF.ДокументОтчет КАК ДокументОтчет,
		|	ЖурналВыгрузокНБКИRUTDF.ДатаПоследнейВыгрузки КАК ДатаПоследнейВыгрузки
		|ПОМЕСТИТЬ НепринятыеЗаписи
		|ИЗ
		|	РегистрСведений.ЖурналВыгрузокНБКИRUTDF КАК ЖурналВыгрузокНБКИRUTDF
		|ГДЕ
		|	ЖурналВыгрузокНБКИRUTDF.ОбъектУчета В(&СубъектУчета)
		|	И ЖурналВыгрузокНБКИRUTDF.Принято = &НеПринято
		|	И ЖурналВыгрузокНБКИRUTDF.ДокументОтчет = &ДокументОтчет
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектУчета,
		|	Событие,
		|	ДатаСобытия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КредитныеИсторииДанныеЮрЛица.Должник КАК Должник,
		|	КредитныеИсторииДанныеЮрЛица.ДатаСобытия КАК ДатаСобытия,
		|	КредитныеИсторииДанныеЮрЛица.Событие КАК Событие,
		|	КредитныеИсторииДанныеЮрЛица.ДокументСобытие КАК ДокументСобытие,
		|	КредитныеИсторииДанныеЮрЛица.ПолноеНаименование КАК ПолноеНаименование,
		|	КредитныеИсторииДанныеЮрЛица.ИноеНаименование КАК ИноеНаименование,
		|	КредитныеИсторииДанныеЮрЛица.ОГРН КАК ОГРН,
		|	КредитныеИсторииДанныеЮрЛица.ИдентификаторLEI КАК ИдентификаторLEI,
		|	КредитныеИсторииДанныеЮрЛица.ИНН КАК ИНН,
		|	КредитныеИсторииДанныеЮрЛица.ДатаРеорганизации КАК ДатаРеорганизации,
		|	КредитныеИсторииДанныеЮрЛица.Иное КАК Иное,
		|	КредитныеИсторииДанныеЮрЛица.ЛиквидацияЮЛ КАК ЛиквидацияЮЛ,
		|	КредитныеИсторииДанныеЮрЛица.ЭлПочта КАК ЭлПочта,
		|	КредитныеИсторииДанныеЮрЛица.НаличиеПравопредшественника КАК НаличиеПравопредшественника,
		|	КредитныеИсторииДанныеЮрЛица.ПравопредшественникИзРФ КАК ПравопредшественникИзРФ,
		|	КредитныеИсторииДанныеЮрЛица.ПолноеНаименованиеПравопредшественника КАК ПолноеНаименованиеПравопредшественника,
		|	КредитныеИсторииДанныеЮрЛица.ОГРНПравопредшественника КАК ОГРНПравопредшественника,
		|	НепринятыеЗаписи.ДатаПоследнейВыгрузки КАК ДатаПоследнейВыгрузки
		|ИЗ
		|	НепринятыеЗаписи КАК НепринятыеЗаписи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КредитныеИсторииДанныеЮрЛица КАК КредитныеИсторииДанныеЮрЛица
		|		ПО НепринятыеЗаписи.ОбъектУчета = КредитныеИсторииДанныеЮрЛица.Должник
		|			И НепринятыеЗаписи.Событие = КредитныеИсторииДанныеЮрЛица.Событие
		|			И НепринятыеЗаписи.ДатаСобытия = КредитныеИсторииДанныеЮрЛица.ДатаСобытия
		|ГДЕ
		|	КредитныеИсторииДанныеЮрЛица.Должник В(&СубъектУчета)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСобытия";
	
	ЗапросДанныеСубъектаЮЛ.УстановитьПараметр("НеПринято", Перечисления.СтатусыОтчетаНБКИ.НеПринято);
	ЗапросДанныеСубъектаЮЛ.УстановитьПараметр("СубъектУчета", ТаблицаОбъектов.ВыгрузитьКолонку("Должник"));
	ЗапросДанныеСубъектаЮЛ.УстановитьПараметр("ДокументОтчет", НепринятыйДокумент);

	РезультатЗапроса = ЗапросДанныеСубъектаЮЛ.Выполнить();
	                                                   
	ВыборкаДанныеЮЛ = РезультатЗапроса.Выгрузить(); 
		
	Если ВыборкаДанныеЮЛ.Количество() > 0 Тогда
		МассивВыборок.Добавить(ВыборкаДанныеЮЛ);
	КонецЕсли;
	
	Возврат МассивВыборок;
			
	
КонецФункции   

Функция СформироватьJSONКомментарии(Комментарий, Причина, Идентификатор) Экспорт  
	// { "comment" : "Это мой комментарий" , "annul_reason" : "0" , "acct_num" : "12345ASD/ФЫВ" }		
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);  
	ЗаписьJSON.УстановитьСтроку(ПараметрыJSON);
	Запрос = Новый Структура;
	Запрос.Вставить("comment", Комментарий);
	Запрос.Вставить("annul_reason", Причина);
	Запрос.Вставить("acct_num", Идентификатор);	
	ЗаписатьJSON(ЗаписьJSON, Запрос);
	strJSON = ЗаписьJSON.Закрыть();
	Возврат strJSON;
КонецФункции

Процедура НБКИ_ЗаписатьОбязательствоСубъектаПрекратилосьОбработчик(Объект, ДатаСобытия, ДокументРегистратор, ТекущаяСтадия) Экспорт 
	Если Не Константы.ИспользоватьНБКИRUTDF.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДокументРегистратор) = Тип("ДокументСсылка.СудебноеДело") Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(ДокументРегистратор) = Тип("ДокументСсылка.ДоговорМикрозайма") Тогда
		Возврат;  
	КонецЕсли;
	
	Если ТипЗнч(ДокументРегистратор) = Тип("ДокументСсылка.РеструктуризацияМикрозайма") Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ ОбъектыСервер.ТипПлатеж(ДокументРегистратор) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтадия = Неопределено ИЛИ ТекущаяСтадия = Перечисления.СтадииЗадолженности.ПустаяСсылка() ИЛИ ТекущаяСтадия = Перечисления.СтадииЗадолженности.Пустая Тогда
		
		Событие =  Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", "2.5");
		
		НаборЗаписей = РегистрыСведений.КредитныеИсторииДанныеСделки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сделка.Установить(Объект); 
		НаборЗаписей.Отбор.Событие.Установить(Событие); 
		
		Фиксировать2_3 = КредитныеИстории.Фиксировать2_3ПриПолномПогашении();
		
		НаборЗаписей.Прочитать();
		БылоНаследование = Ложь;
		Для Каждого КИЗапись ИЗ НаборЗаписей Цикл
			Если ТипЗнч(КИЗапись.ДокументСобытие) = Тип("СправочникСсылка.Контрагенты") Тогда
				БылоНаследование = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	 
		
		ЗаписейПрекращения = НаборЗаписей.Количество();
		Если ЗаписейПрекращения = 1 И БылоНаследование Тогда  
			КредитныеИстории.ЗаписатьСобытиеСделки(Объект, ДатаСобытия, ДокументРегистратор, "2.5");  	
		КонецЕсли;
		
		Если ЗаписейПрекращения < 1 Тогда  
			КредитныеИстории.ЗаписатьСобытиеСделки(Объект, ДатаСобытия, ДокументРегистратор, "2.5"); 
			Если НЕ Фиксировать2_3 Тогда 
				//Удалять все события 2.3 ЗА ЭТУ ДАТУ
				КредитныеИстории.УдалитьСобытияОплатВДатуЗавершенияДоговора(ДатаСобытия, Объект); 
			КонецЕсли;	
		КонецЕсли;
		
		Если ЗаписейПрекращения = 1 И Не БылоНаследование Тогда
			Если НЕ Фиксировать2_3 Тогда   
				//Удалять все события 2.3 ЗА ЭТУ ДАТУ
				КредитныеИстории.УдалитьСобытияОплатВДатуЗавершенияДоговора(ДатаСобытия, Объект); 
			КонецЕсли;
			Возврат; 	
		КонецЕсли;
		
		Если ЗаписейПрекращения > 1 Тогда
			Если НЕ Фиксировать2_3 Тогда 
				//Удалять все события 2.3 ЗА ЭТУ ДАТУ
				КредитныеИстории.УдалитьСобытияОплатВДатуЗавершенияДоговора(ДатаСобытия, Объект); 
			КонецЕсли;
			Возврат; 	
		КонецЕсли;  
				
	Иначе
		КредитныеИстории.УдалитьСобытиеСделки(Объект, ДокументРегистратор, "2.5");				
	КонецЕсли;
	
КонецПроцедуры  

Процедура ФиксированиеОбязательнойВыгрузки(ОбъектыОтчета, ДатаОтчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КредитныеИсторииДанныеСделки.Сделка КАК Сделка,
		|	МАКСИМУМ(КредитныеИсторииДанныеСделки.ДатаСобытия) КАК ДатаСобытия
		|ПОМЕСТИТЬ ПоследнееЗафиксированноеСобытие
		|ИЗ
		|	РегистрСведений.КредитныеИсторииДанныеСделки КАК КредитныеИсторииДанныеСделки
		|
		|СГРУППИРОВАТЬ ПО
		|	КредитныеИсторииДанныеСделки.Сделка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сделка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбъектыВРаботеОстатки.Объект КАК ОбъектУчета,
		|	ОбъектыВРаботеОстатки.Объект.Должник КАК Должник,
		|	РАЗНОСТЬДАТ(ЕСТЬNULL(НАЧАЛОПЕРИОДА(ПоследнееЗафиксированноеСобытие.ДатаСобытия, ДЕНЬ), ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)), &ТекущаяДата, ДЕНЬ) КАК СобытиеТридцатьПлюс,
		|	ЕСТЬNULL(НАЧАЛОПЕРИОДА(ПоследнееЗафиксированноеСобытие.ДатаСобытия, ДЕНЬ), ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаСобытия,
		|	КредитныеИсторииДанныеСделки.Событие.КодНБКИ КАК Событие
		|ИЗ
		|	РегистрНакопления.ОбъектыВРаботе.Остатки(, Сотрудник <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК ОбъектыВРаботеОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследнееЗафиксированноеСобытие КАК ПоследнееЗафиксированноеСобытие
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КредитныеИсторииДанныеСделки КАК КредитныеИсторииДанныеСделки
		|			ПО ПоследнееЗафиксированноеСобытие.Сделка = КредитныеИсторииДанныеСделки.Сделка
		|				И ПоследнееЗафиксированноеСобытие.ДатаСобытия = КредитныеИсторииДанныеСделки.ДатаСобытия
		|		ПО ОбъектыВРаботеОстатки.Объект = ПоследнееЗафиксированноеСобытие.Сделка
		|ГДЕ
		|	ОбъектыВРаботеОстатки.Объект В(&Объект)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СобытиеТридцатьПлюс УБЫВ,
		|	Событие УБЫВ";
	
	Период = 29;
	Секунды = 86400;
	
	ЗакрытыйДоговор = "";
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяУниверсальнаяДата()) - Секунды);
	Запрос.УстановитьПараметр("Объект", ОбъектыОтчета.ВыгрузитьКолонку("ОбъектУчета"));
	РезультатЗапроса = Запрос.Выполнить(); 
	Если НЕ РезультатЗапроса.Пустой() Тогда
		выбРез = РезультатЗапроса.Выбрать();
		Пока выбРез.Следующий() Цикл 
			Если выбРез.Событие = "2.5" Тогда
				ЗакрытыйДоговор = выбРез.ОбъектУчета; 
				Продолжить;
			Иначе		
				Если выбРез.СобытиеТридцатьПлюс > Период ИЛИ выбРез.Событие = "0.0" Тогда
					Если ВыбРез.ОбъектУчета = ЗакрытыйДоговор Тогда
						Продолжить;
					Иначе
						ДатаТридцатьПлюс = ?(выбРез.Событие = "0.0", выбРез.ДатаСобытия, выбРез.ДатаСобытия + ((Период + 1) * Секунды)); 
						СобытиеЗафиксировано = КредитныеИстории.Событие30ДнейЗафиксированоИсточником(выбРез.ОбъектУчета, выбРез.ОбъектУчета, "2.3", ДатаТридцатьПлюс);
						Если Не СобытиеЗафиксировано Тогда
							КредитныеИстории.ЗаписатьСобытиеСделки(выбРез.ОбъектУчета, ДатаТридцатьПлюс, выбРез.ОбъектУчета, "2.3");  
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	  
	КонецЕсли;	
	
КонецПроцедуры

Функция ОчисткаСтроки(СтрокаВх) Экспорт
	
	СтрокаВх = СтрЗаменить(СтрокаВх, Символы.НПП, " ");
	СтрокаВх = СтрЗаменить(СтрокаВх, Символы.ПС, " ");
	СтрокаВх = СтрЗаменить(СтрокаВх, Символы.ПФ, " ");

	
	Пока СтрНайти(СтрокаВх, "  ") > 0 Цикл
		СтрокаВх = СтрЗаменить(СтрокаВх, "  ", " ");
	КонецЦикла;
	
	СтрокаВх = СтрЗаменить(СтрокаВх, " - ", "-");
	СтрокаВх = СтрЗаменить(СтрокаВх, " -", "-");
	СтрокаВх = СтрЗаменить(СтрокаВх, "- ", "-");
	СтрокаВх = СтрЗаменить(СтрокаВх, "--", "-");
	Возврат СтрокаВх;
КонецФункции

Функция ПроверкаФорматаКодаПодразделения(СтрокаВх) Экспорт
	Если СтрНайти(СтрокаВх, "-") = 0 Тогда
		Пока СтрНайти(СтрокаВх, "  ") > 0 Цикл
			СтрокаВх = СтрЗаменить(СтрокаВх, "  ", " ");
		КонецЦикла;
		ПерваяТриада = Лев(СтрокаВх, 3);
		ВтораяТриада = Прав(СтрокаВх, 3);
		КодПодразделения = ПерваяТриада + "-" + ВтораяТриада;
		Возврат КодПодразделения;
	Иначе
		Возврат СтрокаВх;
	КонецЕсли;
КонецФункции

Процедура УдалитьСобытияСвязанныхИД(МассивИсполДокументов) Экспорт
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КредитныеИсторииДанныеСделки.Сделка КАК Сделка,
		|	КредитныеИсторииДанныеСделки.ДатаСобытия КАК ДатаСобытия,
		|	КредитныеИсторииДанныеСделки.Событие КАК Событие,
		|	КредитныеИсторииДанныеСделки.ДокументСобытие КАК ДокументСобытие
		|ПОМЕСТИТЬ КИ
		|ИЗ
		|	РегистрСведений.КредитныеИсторииДанныеСделки КАК КредитныеИсторииДанныеСделки
		|ГДЕ
		|	КредитныеИсторииДанныеСделки.ДокументСобытие В(&ДокументСобытиеИД)
		|	И КредитныеИсторииДанныеСделки.Событие.КодНБКИ = ""2.6""
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДатаСобытия,
		|	ДокументСобытие,
		|	Событие,
		|	Сделка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КИ.Сделка КАК Сделка,
		|	КИ.ДатаСобытия КАК ДатаСобытия,
		|	КИ.Событие КАК Событие,
		|	КИ.ДокументСобытие КАК ДокументСобытие,
		|	ЕСТЬNULL(ЖурналВыгрузокНБКИRUTDF.Принято, ""НеПередавалось"") КАК Принято
		|ИЗ
		|	КИ КАК КИ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналВыгрузокНБКИRUTDF КАК ЖурналВыгрузокНБКИRUTDF
		|		ПО КИ.Сделка = ЖурналВыгрузокНБКИRUTDF.ОбъектУчета
		|			И КИ.ДатаСобытия = ЖурналВыгрузокНБКИRUTDF.ДатаСобытия
		|			И КИ.Событие = ЖурналВыгрузокНБКИRUTDF.Событие
		|ГДЕ
		|	ЖурналВыгрузокНБКИRUTDF.Принято <> &Принято";
	
	Запрос.УстановитьПараметр("ДокументСобытиеИД", МассивИсполДокументов);
	Запрос.УстановитьПараметр("Принято", Перечисления.СтатусыОтчетаНБКИ.Принято);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.КредитныеИсторииДанныеСделки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сделка.Установить(ВыборкаДетальныеЗаписи.Сделка);
		НаборЗаписей.Отбор.ДатаСобытия.Установить(ВыборкаДетальныеЗаписи.ДатаСобытия);
		НаборЗаписей.Отбор.Событие.Установить(ВыборкаДетальныеЗаписи.Событие);
		НаборЗаписей.Отбор.ДокументСобытие.Установить(ВыборкаДетальныеЗаписи.ДокументСобытие);
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	
		
КонецПроцедуры 

Функция ВосстановитьКредитнуюИсторию(Сделка) Экспорт 
	РезультатЗаполнения = "Заполненено: Нажмите F5";
	ЗаписиКИ = РегистрыСведений.КредитныеИсторииДанныеСделки.СоздатьНаборЗаписей();
	ЗаписиКИ.Отбор.Сделка.Установить(Сделка);
	ЗаписиКИ.Прочитать();
	Если ЗаписиКИ.Количество() > 1 Тогда
		РезультатЗаполнения = "Не требует восстановления!";
		Возврат РезультатЗаполнения;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиВыгрузкиНБКИ_RUTDF.Ссылка КАК Настройка
	|ИЗ
	|	Справочник.НастройкиВыгрузкиНБКИ_RUTDF КАК НастройкиВыгрузкиНБКИ_RUTDF
	|ГДЕ
	|	НЕ НастройкиВыгрузкиНБКИ_RUTDF.ПометкаУдаления
	|	И НастройкиВыгрузкиНБКИ_RUTDF.Используется";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		РезультатЗаполнения = "Нет Настроек";
		Возврат РезультатЗаполнения;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Настройка = Выборка.Настройка;
		КонецЦикла;	 
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВРаботе.Ссылка КАК Обязательство,
	               |	ВРаботе.Должник КАК Должник,
	               |	НеденежныеОбязательства.Ссылка КАК НеденежноеОбязательство,
	               |	ДелоОНедееспособностиСубъекта.Ссылка КАК Дееспособность,
	               |	ДелоОБанкротстве.Ссылка КАК Банкротство,
	               |	ДоговорМикрозайма.Ссылка КАК ДоговорМКЗ,
	               |	РеструктуризацияМикрозайма.Ссылка КАК РеструктуризацияМКЗ,
	               |	СудебноеДело.Ссылка КАК СудебноеДело,
	               |	Обеспечительства.Ссылка КАК Обеспечительство,
	               |	СведенияОбИзмененииДоговора.Ссылка КАК СведенияОбИзмененииДоговора,
	               |	ИсполнительныеДокументы.Ссылка КАК ИсполДок
	               |ИЗ
	               |	Справочник.ДолговыеОбязательства КАК ВРаботе
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НеденежныеОбязательства КАК НеденежныеОбязательства
	               |		ПО ВРаботе.Ссылка = НеденежныеОбязательства.ОбъектОбязательства
	               |			И (НеденежныеОбязательства.ПометкаУдаления = ЛОЖЬ)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДелоОНедееспособностиСубъекта КАК ДелоОНедееспособностиСубъекта
	               |		ПО ВРаботе.Должник = ДелоОНедееспособностиСубъекта.Владелец
	               |			И (ДелоОНедееспособностиСубъекта.ПометкаУдаления = ЛОЖЬ)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДелоОБанкротстве КАК ДелоОБанкротстве
	               |		ПО ВРаботе.Должник = ДелоОБанкротстве.Контрагент
	               |			И (ДелоОБанкротстве.ПометкаУдаления = ЛОЖЬ)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорМикрозайма КАК ДоговорМикрозайма
	               |		ПО ВРаботе.Ссылка = ДоговорМикрозайма.Займ
	               |			И (ДоговорМикрозайма.ПометкаУдаления = ЛОЖЬ)
	               |			И (ДоговорМикрозайма.Проведен)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеструктуризацияМикрозайма КАК РеструктуризацияМикрозайма
	               |		ПО ВРаботе.Ссылка = РеструктуризацияМикрозайма.Займ
	               |			И (РеструктуризацияМикрозайма.ПометкаУдаления = ЛОЖЬ)
	               |			И (РеструктуризацияМикрозайма.Проведен)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СудебноеДело КАК СудебноеДело
	               |		ПО ВРаботе.Ссылка = СудебноеДело.Займ
	               |			И (СудебноеДело.ПометкаУдаления = ЛОЖЬ)
	               |			И (СудебноеДело.Проведен)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Обеспечительства КАК Обеспечительства
	               |		ПО ВРаботе.Ссылка = Обеспечительства.ОбъектОбеспечительства
	               |			И (Обеспечительства.ПометкаУдаления = ЛОЖЬ)
	               |			И (Обеспечительства.Проведен)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОбИзмененииДоговора КАК СведенияОбИзмененииДоговора
	               |		ПО ВРаботе.Ссылка = СведенияОбИзмененииДоговора.ОбъектУчета
	               |			И (СведенияОбИзмененииДоговора.ПометкаУдаления = ЛОЖЬ)
	               |			И (СведенияОбИзмененииДоговора.Проведен)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсполнительныеДокументы КАК ИсполнительныеДокументы
	               |		ПО (НЕ ИсполнительныеДокументы.ПометкаУдаления)
	               |			И ВРаботе.Ссылка = ИсполнительныеДокументы.Владелец
	               |ГДЕ
	               |	ВРаботе.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Сделка);
	ИсточникСобытия = Настройка;
	ДатаСобытия = Дата("19950126");
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл  
		ДатаИзРеквизита = "";
		НоваяЗапись = РегистрыСведений.КредитныеИсторииДанныеСделки.СоздатьМенеджерЗаписи();
		Если НачалоДня(ДатаСобытия) = Дата("19950126") Тогда
			ДатаИзРеквизита = ОбъектыСервер.ПолучитьЗначениеСвойства(ВыборкаДетальныеЗаписи.Обязательство, Настройка.РеквизитДатаПервичногоЗаполнения.Код);
			НоваяЗапись.ДатаСобытия = ?(ЗначениеЗаполнено(ДатаИзРеквизита), ДатаИзРеквизита, ТекущаяДатаСеанса());
		Иначе  
			НоваяЗапись.ДатаСобытия = ДатаСобытия;
		КонецЕсли;
		НоваяЗапись.Сделка = ВыборкаДетальныеЗаписи.Обязательство;
		НоваяЗапись.Событие = ВыбратьПервоеСобытиеСделки(ВыборкаДетальныеЗаписи.Обязательство, ИсточникСобытия);
		НоваяЗапись.ДокументСобытие = ИсточникСобытия;
		Настройка = ИсточникСобытия;
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
		ТЗ = Настройка.Сделка.Выгрузить();
		Строки = УдалитьОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗ); 
		Результат = Новый Массив();
		Для Каждого Элемент Из Строки Цикл
			Результат.Добавить(Новый Структура("ИмяТаблицы, Поле, НБКИФЛ, НБКИЮЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение, Функция, СтрокаДляПолученияЗначения, КодДопСвойства,
			| ОбъектДопСвойства, СтрокаХранилище","Сделка", Элемент.Поле, Элемент.НомерПоказателяНБКИФЛ, Элемент.НомерПоказателяНБКИЮЛ,  Элемент.НаименованиеПоляРегистраКИ, Элемент.ЗаполнятьПоУмолчанию, Элемент.Значение, Элемент.Функция,
			Элемент.СтрокаДляПолученияЗначения, Элемент.КодДопСвойства, Элемент.ОбъектДопСвойства, Элемент.СтрокаХранилище));	
		КонецЦикла;
		
		НоваяЗапись.Продан = "0";
        НоваяЗапись.ЧастичнаяПродажа = "0";
		мсЗначения = Новый Массив;
		Для Каждого ТекСтрокаПодстановки Из Результат Цикл 
			ТекНастройка = Новый Структура("Поле, НБКИФЛ, НБКИЮЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение",
			ТекСтрокаПодстановки.Поле, ТекСтрокаПодстановки.НБКИФЛ, ТекСтрокаПодстановки.НБКИЮЛ, ТекСтрокаПодстановки.НаименованиеПоляРегистраКИ, ТекСтрокаПодстановки.ЗаполнятьПоУмолчанию); 
			
			Значение = УЭДСервер.ГенерацияЗначениия(ТекСтрокаПодстановки, Ложь, НоваяЗапись.Сделка, НоваяЗапись.Сделка);
			ФункцияОпределена = УЭДСервер.ФункцияУспешноОпределена(ТекСтрокаПодстановки);
			Если ФункцияОпределена Тогда
				Значение = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(ТекСтрокаПодстановки.Функция, НоваяЗапись.Сделка, Значение);
				Если ТипЗнч(Значение) <> Тип("ТаблицаЗначений") Тогда
					Значение = СокрЛП(Значение);
				КонецЕсли;	
				ТекНастройка.Значение = Значение;
				мсЗначения.Добавить(ТекНастройка);
			Иначе 	
				Значение = СокрЛП(Значение);
				ТекНастройка.Значение = Значение;
				мсЗначения.Добавить(ТекНастройка);
			КонецЕсли; 
		КонецЦикла;	  
		
		Для Каждого структура Из мсЗначения Цикл
			
			Если ЗначениеЗаполнено(Структура.НаименованиеПоляРегистраКИ) Тогда
				НаименованиеПоляРегистраКИ = Структура.НаименованиеПоляРегистраКИ;
				ЗначениеВРегистр = Структура.Значение;
				Если Структура.ЗаполнятьПоУмолчанию И НЕ ЗначениеЗаполнено(Структура.Значение) Тогда
					ЗначениеВРегистр = ВычислитьПараметрПоУмолчанию(Структура.НБКИФЛ, ВыборкаДетальныеЗаписи, НоваяЗапись.Сделка);
				КонецЕсли;
				ЗначениеВРегистр = ОбработатьЗначенияПризнаков(ЗначениеВРегистр);  
				Если Структура.НБКИФЛ = "C25.8" Тогда 
					ДатаРасчета = ?(ЗначениеЗаполнено(Структура.Значение), Структура.Значение, ТекущаяДатаСеанса());
				Иначе
					НоваяЗапись[НаименованиеПоляРегистраКИ] = ЗначениеВРегистр;
				КонецЕсли; 
				
			Иначе
				Продолжить;
			КонецЕсли;
		
			
		КонецЦикла;	
		
		Если Не ЗначениеЗаполнено(НоваяЗапись.ДатаПередачиФинансирования) Тогда
			НоваяЗапись.ДатаПередачиФинансирования = НоваяЗапись.ДатаНачалаСделки;
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(НоваяЗапись.ДатаВыходаНаПросрочку) Тогда
			НоваяЗапись.ДатаВыходаНаПросрочку = НоваяЗапись.ДатаОкончанияСделки;
		КонецЕсли; 
		
				
		Если Не ЗначениеЗаполнено(НоваяЗапись.ДатаРасчетаСрочнойЗадолженности) Тогда
			НоваяЗапись.ДатаРасчетаСрочнойЗадолженности = ДатаРасчета;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НоваяЗапись.ДатаРасчетаПросроченнойЗадолженности) Тогда
			НоваяЗапись.ДатаРасчетаПросроченнойЗадолженности = ДатаРасчета;
		КонецЕсли;  
		
		Если Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v3 И Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v4 Тогда
			КредитныеИсторииИзменения.ЗаменитьНеиспользуемыеКодыВидаКредита(НоваяЗапись.КодНБКИВидКредита); 
			КредитныеИсторииИзменения.ЗаменитьНеиспользуемыеКодыТипаКредита(НоваяЗапись.КодНБКИТипКредита);
		КонецЕсли;
		
		
		Если НЕ КредитныеИстории.СобытиеСделкиЗафиксированоИсточником(НоваяЗапись.Сделка, ИсточникСобытия, НоваяЗапись.Событие.КодНБКИ) Тогда
			НоваяЗапись.Записать();
		КонецЕсли;
		НоваяЗапись = Неопределено; 
					
		
		ДатаСобытияСуд = ДатаСобытия;
		
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СудебноеДело) Тогда
			ДатаСобытияСуд = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СудебноеДело.ДатаИска), ВыборкаДетальныеЗаписи.СудебноеДело.ДатаИска, ВыборкаДетальныеЗаписи.СудебноеДело.ДатаРешения);
			КредитныеИстории.ЗаписатьСобытиеСделки(ВыборкаДетальныеЗаписи.Обязательство, ДатаСобытияСуд, ВыборкаДетальныеЗаписи.СудебноеДело, "2.6");
		КонецЕсли;   
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИсполДок) Тогда
			ДатаСобытияИД = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИсполДок.ДатаПринятияСудебногоАкта), ВыборкаДетальныеЗаписи.ИсполДок.ДатаПринятияСудебногоАкта, ВыборкаДетальныеЗаписи.ИсполДок.ДатаИД);
			Если ДатаСобытияИД = ДатаСобытияСуд Тогда
				ДатаСобытияИД = ДатаСобытияИД + 1; 
			КонецЕсли;	 
			КредитныеИстории.ЗаписатьСобытиеСделки(ВыборкаДетальныеЗаписи.Обязательство, ДатаСобытияИД, ВыборкаДетальныеЗаписи.ИсполДок, "2.6");
		КонецЕсли; 
		
		ЗаписатьПлатежиПослеНоября(ВыборкаДетальныеЗаписи.Обязательство);
		
		
		
		ЭтоФизЛицо = "";
		Если ВыборкаДетальныеЗаписи.Должник.ЮрФизЛицо = Справочники.ЮрФизЛицо.ФизЛицо Тогда
			ЭтоФизЛицо  = Истина;
		ИначеЕсли ВыборкаДетальныеЗаписи.Должник.ЮрФизЛицо = Справочники.ЮрФизЛицо.ЮрЛицо Тогда
			ЭтоФизЛицо  = Ложь;
		Иначе
			ТипДолжника = ВыборкаДетальныеЗаписи.Должник.ЮрФизЛицо;  
			НаборЗаписей = РегистрыСведений.ТипДолжникаПризнак.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ТипКонтрагента.Установить(ТипДолжника);
			НаборЗаписей.Прочитать();
			Для каждого Запись из НаборЗаписей Цикл
				Если Запись.ФизическоеЛицо Тогда 
					ЭтоФизЛицо = Истина;
				Конецесли;
				
				Если Запись.ЮридическоеЛицо Тогда 
					ЭтоФизЛицо = Ложь;
				Конецесли;
				
				Если Запись.ИндивидуальныйПредприниматель Тогда 
					ЭтоФизЛицо  = Истина;
				Конецесли;
				
			КонецЦикла;			
		КонецЕсли;	 
		
		
		Если ЭтоФизЛицо Тогда 		
			НоваяЗапись = РегистрыСведений.КредитныеИсторииДанныеФизЛица.СоздатьМенеджерЗаписи();
			НоваяЗапись.ДатаСобытия = ?(ЗначениеЗаполнено(ДатаИзРеквизита), ДатаИзРеквизита, ДатаСобытия); 
			НоваяЗапись.Должник = ВыборкаДетальныеЗаписи.Должник;
			НоваяЗапись.Событие = Справочники.КредитныеИсторииСобытияСубъекта.НайтиПоРеквизиту("КодНБКИ", "0.0"); 
			НоваяЗапись.ДокументСобытие = ИсточникСобытия;
			Настройка = ИсточникСобытия;
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
			ТЗ = Настройка.СубъектФизическоеЛицо.Выгрузить();
			Строки = УдалитьОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗ); 
			Результат = Новый Массив();
			Для Каждого Элемент Из Строки Цикл
				Результат.Добавить(Новый Структура("ИмяТаблицы, Поле, НБКИФЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение, Функция, СтрокаДляПолученияЗначения, КодДопСвойства,
				| ОбъектДопСвойства, СтрокаХранилище","СубъектФизическоеЛицо", Элемент.Поле, Элемент.НомерПоказателяНБКИФЛ, Элемент.НаименованиеПоляРегистраКИ, Элемент.ЗаполнятьПоУмолчанию, Элемент.Значение, Элемент.Функция,
				Элемент.СтрокаДляПолученияЗначения, Элемент.КодДопСвойства, Элемент.ОбъектДопСвойства, Элемент.СтрокаХранилище));	
			КонецЦикла;
			
			
			
			мсЗначения = Новый Массив;
			Для Каждого ТекСтрокаПодстановки Из Результат Цикл 
				ТекНастройка = Новый Структура("Поле, НБКИФЛ, НаименованиеПоляРегистраКИ ,ЗаполнятьПоУмолчанию, Значение",
				ТекСтрокаПодстановки.Поле, ТекСтрокаПодстановки.НБКИФЛ, ТекСтрокаПодстановки.НаименованиеПоляРегистраКИ, ТекСтрокаПодстановки.ЗаполнятьПоУмолчанию); 
				
				Значение = УЭДСервер.ГенерацияЗначениия(ТекСтрокаПодстановки, Ложь, ВыборкаДетальныеЗаписи.Обязательство, ВыборкаДетальныеЗаписи.Обязательство);
				ФункцияОпределена = УЭДСервер.ФункцияУспешноОпределена(ТекСтрокаПодстановки);
				Если ФункцияОпределена Тогда
					Значение = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(ТекСтрокаПодстановки.Функция, НоваяЗапись.Должник, Значение);
					Если ТипЗнч(Значение) <> Тип("ТаблицаЗначений") Тогда
						Значение = СокрЛП(Значение);
					КонецЕсли;	
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				Иначе 	
					Значение = СокрЛП(Значение);
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				КонецЕсли; 
			КонецЦикла;	  
			
			МассивАдрес = Новый Массив;
			Для Каждого структура Из мсЗначения Цикл   
				Если ЗначениеЗаполнено(Структура.НаименованиеПоляРегистраКИ) Тогда
					НаименованиеПоляРегистраКИ = Структура.НаименованиеПоляРегистраКИ;
					ЗначениеВРегистр = Структура.Значение;
					//Если Структура.ЗаполнятьПоУмолчанию Тогда
					//	ЗначениеВРегистр = ВычислитьПараметрПоУмолчанию(Структура.НБКИФЛ, ВыборкаДетальныеЗаписи, НоваяЗапись.Сделка);
					//КонецЕсли;
					ЗначениеВРегистр = ОбработатьЗначенияПризнаков(ЗначениеВРегистр); 
					
					Если Структура.НБКИФЛ = "C3.2" Тогда   
						Если Не ЗначениеЗаполнено(ЗначениеВРегистр) Тогда 
							ЗначениеВРегистр = Справочники.СтраныМира.Россия;
						Иначе
							ЗначениеВРегистр = ФЗ_230.ВычислитьЗначениеСтраныОКСМ(Структура.Значение).ОКСМ;   
						КонецЕсли;
					КонецЕсли; 
					
					Если Структура.НБКИФЛ = "C4.1.2" Тогда
						структСтрана = ФЗ_230.ВычислитьЗначениеСтраныОКСМ(Структура.Значение);
						НоваяЗапись.КодСтраныДокумента = структСтрана.ОКСМ;	
						НоваяЗапись.НаименованиеИнойСтраныДокумента = структСтрана.Наименование;  
					ИначеЕсли Структура.НБКИФЛ = "C4.3.4" Тогда
						НоваяЗапись.КодНБКИДокумента = Структура.Значение;  
						Если СтрНайти(Структура.Значение, "999") > 0 Тогда 
							НоваяЗапись.НаименованиеИногоДокумента = Структура.Значение;
						КонецЕсли;	
					Иначе
						НоваяЗапись[НаименованиеПоляРегистраКИ] = ЗначениеВРегистр;
					КонецЕсли; 
				ИначеЕсли СтрНайти(Структура.НБКИФЛ, "C8.") > 0 ИЛИ СтрНайти(Структура.НБКИФЛ, "C9.") > 0 Тогда
					МассивАдрес.Добавить(Структура); 
					Продолжить;
				Иначе
					Продолжить;
				КонецЕсли; 
				
			КонецЦикла;	 
			
			Если СтрНайти(НоваяЗапись.КодНБКИДокумента, "999") > 0 и НЕ ЗначениеЗаполнено(НоваяЗапись.НаименованиеИногоДокумента) Тогда 
				НоваяЗапись.НаименованиеИногоДокумента = НоваяЗапись.КодНБКИДокумента;
			КонецЕсли;	 
			
			Если Не ЗначениеЗаполнено(НоваяЗапись.Дееспособность)  Тогда 
				СовершеннолетиеСек = 567648000;
				НоваяЗапись.Дееспособность = ?(ТекущаяДатаСеанса() - НоваяЗапись.ДатаРождения >= СовершеннолетиеСек, "1", "2");
			КонецЕсли;
			НоваяЗапись.Записать();
			НоваяЗапись = Неопределено;
			ЗаписатьАдресОбъекта(МассивАдрес, ВыборкаДетальныеЗаписи.Должник, ЭтоФизЛицо, Настройка.СтроковыеАдреса);
		Иначе  
			НоваяЗапись = РегистрыСведений.КредитныеИсторииДанныеЮрЛица.СоздатьМенеджерЗаписи();
			НоваяЗапись.ДатаСобытия = ?(ЗначениеЗаполнено(ДатаИзРеквизита), ДатаИзРеквизита, ДатаСобытия);  
			НоваяЗапись.Должник = ВыборкаДетальныеЗаписи.Должник;
			НоваяЗапись.Событие = Справочники.КредитныеИсторииСобытияСубъекта.НайтиПоРеквизиту("КодНБКИ", "0.0");
			НоваяЗапись.ДокументСобытие = ИсточникСобытия;
			Настройка = ИсточникСобытия;
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
			ТЗ = Настройка.СубъектЮридическоеЛицо.Выгрузить();
			Строки = УдалитьОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗ); 
			Результат = Новый Массив();
			Для Каждого Элемент Из Строки Цикл
				Результат.Добавить(Новый Структура("ИмяТаблицы, Поле, НБКИЮЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение, Функция, СтрокаДляПолученияЗначения, КодДопСвойства,
				| ОбъектДопСвойства, СтрокаХранилище","СубъектЮридическоеЛицо", Элемент.Поле, Элемент.НомерПоказателяНБКИЮЛ, Элемент.НаименованиеПоляРегистраКИ, Элемент.ЗаполнятьПоУмолчанию, Элемент.Значение, Элемент.Функция,
				Элемент.СтрокаДляПолученияЗначения, Элемент.КодДопСвойства, Элемент.ОбъектДопСвойства, Элемент.СтрокаХранилище));	
			КонецЦикла;	
			
			мсЗначения = Новый Массив;
			Для Каждого ТекСтрокаПодстановки Из Результат Цикл 
				ТекНастройка = Новый Структура("Поле, НБКИЮЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение",
				ТекСтрокаПодстановки.Поле, ТекСтрокаПодстановки.НБКИЮЛ, ТекСтрокаПодстановки.НаименованиеПоляРегистраКИ, ТекСтрокаПодстановки.ЗаполнятьПоУмолчанию); 
				
				Значение = УЭДСервер.ГенерацияЗначениия(ТекСтрокаПодстановки, Ложь, ВыборкаДетальныеЗаписи.Обязательство, ВыборкаДетальныеЗаписи.Обязательство);
				ФункцияОпределена = УЭДСервер.ФункцияУспешноОпределена(ТекСтрокаПодстановки);
				Если ФункцияОпределена Тогда
					Значение = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(ТекСтрокаПодстановки.Функция, НоваяЗапись.Должник, Значение);
					Если ТипЗнч(Значение) <> Тип("ТаблицаЗначений") Тогда
						Значение = СокрЛП(Значение);
					КонецЕсли;	
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				Иначе 	
					Значение = СокрЛП(Значение);
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				КонецЕсли; 
			КонецЦикла;	  
			
			МассивАдрес = Новый Массив;
			Для Каждого структура Из мсЗначения Цикл
				
				Если ЗначениеЗаполнено(Структура.НаименованиеПоляРегистраКИ) Тогда
					НаименованиеПоляРегистраКИ = Структура.НаименованиеПоляРегистраКИ;
					ЗначениеВРегистр = Структура.Значение;
					//Если Структура.ЗаполнятьПоУмолчанию Тогда
					//	ЗначениеВРегистр = ВычислитьПараметрПоУмолчанию(Структура.НБКИФЛ, ВыборкаДетальныеЗаписи, НоваяЗапись.Сделка);
					//КонецЕсли;
					ЗначениеВРегистр = ОбработатьЗначенияПризнаков(ЗначениеВРегистр); 
					НоваяЗапись[НаименованиеПоляРегистраКИ] = ЗначениеВРегистр;				
				ИначеЕсли СтрНайти(Структура.НБКИЮЛ, "B2.") > 0 Тогда
					МассивАдрес.Добавить(Структура); 
					Продолжить;
				Иначе
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;	
			НоваяЗапись.Записать();
			НоваяЗапись = Неопределено;
			
            ЗаписатьАдресОбъекта(МассивАдрес, ВыборкаДетальныеЗаписи.Должник, ЭтоФизЛицо, Настройка.СтроковыеАдреса);
			
		КонецЕсли;
		
		ЗаписатьДелаПлатежи30Дней(Сделка);
		
	КонецЦикла;  
	
	Возврат РезультатЗаполнения;
	
КонецФункции

Процедура ЗаписатьДелаПлатежи30Дней(Сделка) Экспорт
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеПлатежейОбъекты.Ссылка КАК Ссылка,
		|	ПоступлениеПлатежейОбъекты.ДатаПлатежа КАК ДатаСобытия
		|ИЗ
		|	Документ.ПоступлениеПлатежей.Объекты КАК ПоступлениеПлатежейОбъекты
		|ГДЕ
		|	ПоступлениеПлатежейОбъекты.Объект = &Объект
		|	И НЕ ПоступлениеПлатежейОбъекты.Ссылка.ПометкаУдаления
		|	И ПоступлениеПлатежейОбъекты.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗагрузкаИсторииПлатежейОбъекты.Ссылка,
		|	ЗагрузкаИсторииПлатежейОбъекты.ДатаПлатежа
		|ИЗ
		|	Документ.ЗагрузкаИсторииПлатежей.Объекты КАК ЗагрузкаИсторииПлатежейОбъекты
		|ГДЕ
		|	ЗагрузкаИсторииПлатежейОбъекты.Объект = &Объект
		|	И ЗагрузкаИсторииПлатежейОбъекты.Ссылка.Проведен
		|	И НЕ ЗагрузкаИсторииПлатежейОбъекты.Ссылка.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеПлатежа.Ссылка,
		|	ПоступлениеПлатежа.ДатаПлатежа
		|ИЗ
		|	Документ.ПоступлениеПлатежа КАК ПоступлениеПлатежа
		|ГДЕ
		|	ПоступлениеПлатежа.Займ = &Объект
		|	И НЕ ПоступлениеПлатежа.ПометкаУдаления
		|	И ПоступлениеПлатежа.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИсполнительныеДокументы.Ссылка,
		|	ИсполнительныеДокументы.ДатаИД
		|ИЗ
		|	Справочник.ИсполнительныеДокументы КАК ИсполнительныеДокументы
		|ГДЕ
		|	ИсполнительныеДокументы.Владелец = &Объект
		|	И НЕ ИсполнительныеДокументы.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СудебноеДело.Ссылка,
		|	СудебноеДело.ДатаИска
		|ИЗ
		|	Документ.СудебноеДело КАК СудебноеДело
		|ГДЕ
		|	СудебноеДело.Займ = &Объект
		|	И СудебноеДело.Проведен
		|	И НЕ СудебноеДело.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КредитныеИсторииДанныеСделки.Событие,
		|	КредитныеИсторииДанныеСделки.ДатаСобытия
		|ИЗ
		|	РегистрСведений.КредитныеИсторииДанныеСделки КАК КредитныеИсторииДанныеСделки
		|ГДЕ
		|	КредитныеИсторииДанныеСделки.Сделка = &Объект
		|	И КредитныеИсторииДанныеСделки.Событие В(&Событие)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСобытия"; 
	
	мСобытия = Новый Массив;
	мСобытия.Добавить(Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", "0.0")); 
	мСобытия.Добавить(Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", "2.11.2"));	

	
	Запрос.УстановитьПараметр("Объект", Сделка);
	Запрос.УстановитьПараметр("Событие", мСобытия);
	РезультатЗапроса = Запрос.Выполнить();
	ДатаПредыдущегоСобытия = Неопределено;
	Период = 29;
	Секунды = 86400;
	ТридцатьДней = (Период + 1) * Секунды;
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		Если ТипЗнч(ВыборкаДетальныеЗаписи.Ссылка) = Тип("СправочникСсылка.ИсполнительныеДокументы") ИЛИ  ТипЗнч(ВыборкаДетальныеЗаписи.Ссылка) = Тип("ДокументСсылка.СудебноеДело") Тогда
			КодСобытия = "2.6";
		Иначе
			КодСобытия = "2.3";
		КонецЕсли;
		Если ТипЗнч(ВыборкаДетальныеЗаписи.Ссылка) = Тип("СправочникСсылка.НастройкиВыгрузкиНБКИ_RUTDF") Тогда
			 ДатаПредыдущегоСобытия = ВыборкаДетальныеЗаписи.ДатаСобытия;
			Продолжить;	
		КонецЕсли;
		
		КредитныеИстории.ЗаписатьСобытиеСделки(Сделка, ВыборкаДетальныеЗаписи.ДатаСобытия, ВыборкаДетальныеЗаписи.Ссылка, КодСобытия);
		Если ДатаПредыдущегоСобытия = Неопределено Тогда
			ДатаПредыдущегоСобытия = ВыборкаДетальныеЗаписи.ДатаСобытия;
			Продолжить;
		КонецЕсли;	
		Если ВыборкаДетальныеЗаписи.ДатаСобытия - ДатаПредыдущегоСобытия >= ТридцатьДней Тогда
			ДатаТридцатьДней = ВыборкаДетальныеЗаписи.ДатаСобытия + ТридцатьДней;
			КредитныеИстории.ЗаписатьСобытиеСделки(Сделка, ДатаТридцатьДней, Сделка, "2.3");
			ДатаПредыдущегоСобытия = ВыборкаДетальныеЗаписи.ДатаСобытия;
		КонецЕсли;
	КонецЦикла;
	
	ДатаЗаполнения = НачалоДня(ТекущаяДатаСеанса());
	СчетчикДат = ДатаПредыдущегоСобытия + ТридцатьДней;
	Пока ДатаЗаполнения >= СчетчикДат Цикл
		КредитныеИстории.ЗаписатьСобытиеСделки(Сделка, СчетчикДат, Сделка, "2.3");
		СчетчикДат = СчетчикДат + ТридцатьДней;
	КонецЦикла;
КонецПроцедуры	

Функция ФиксироватьИзмененияПриСписаниях() Экспорт
	Фиксировать = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиВыгрузкиНБКИ_RUTDF.Формировать28ПриСудебномСписании КАК Формировать28ПриСудебномСписании,
	|	НастройкиВыгрузкиНБКИ_RUTDF.Фиксировать2_3ПриПолномПогашении КАК Фиксировать2_3ПриПолномПогашении
	|ИЗ
	|	Справочник.НастройкиВыгрузкиНБКИ_RUTDF КАК НастройкиВыгрузкиНБКИ_RUTDF
	|ГДЕ
	|	НЕ НастройкиВыгрузкиНБКИ_RUTDF.ПометкаУдаления
	|	И НастройкиВыгрузкиНБКИ_RUTDF.Используется";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		Фиксировать = (РезультатЗапроса.Формировать28ПриСудебномСписании И РезультатЗапроса.Фиксировать2_3ПриПолномПогашении);	
	КонецЦикла;
	
	Возврат Фиксировать;
КонецФункции 

Функция Фиксировать2_3ПриПолномПогашении() Экспорт
	Фиксировать = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиВыгрузкиНБКИ_RUTDF.Фиксировать2_3ПриПолномПогашении КАК Фиксировать2_3ПриПолномПогашении
	|ИЗ
	|	Справочник.НастройкиВыгрузкиНБКИ_RUTDF КАК НастройкиВыгрузкиНБКИ_RUTDF
	|ГДЕ
	|	НЕ НастройкиВыгрузкиНБКИ_RUTDF.ПометкаУдаления
	|	И НастройкиВыгрузкиНБКИ_RUTDF.Используется";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		Фиксировать = РезультатЗапроса.Фиксировать2_3ПриПолномПогашении;	
	КонецЦикла;
	
	Возврат Фиксировать;
КонецФункции 

Процедура УдалитьСобытияОплатВДатуЗавершенияДоговора(ДатаСобытия, Сделка) Экспорт
	
	Событие =  Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", "2.3");
	
	НаборЗаписей = РегистрыСведений.КредитныеИсторииДанныеСделки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сделка.Установить(Сделка); 
	НаборЗаписей.Отбор.Событие.Установить(Событие);
	НаборЗаписей.Отбор.ДатаСобытия.Установить(ДатаСобытия);
	
	НаборЗаписей.Записать();

КонецПроцедуры 



Функция ПолучитьВерсиюRUTDF(ПеречислениеВерсия)
	Если Не ЗначениеЗаполнено(ПеречислениеВерсия) Тогда
		ПеречислениеВерсия = Перечисления.ВерсияRUTDF.v5;
	КонецЕсли;	
	МетаданныеВерсии = ПеречислениеВерсия.Метаданные();
	ВерсияСтрокой = МетаданныеВерсии.ЗначенияПеречисления.Получить(Перечисления.ВерсияRUTDF.Индекс(ПеречислениеВерсия)).Синоним;
		
	Возврат ВерсияСтрокой;	
КонецФункции

Функция ПроверкаЛатиницы(ДобавляемоеЗначение) Экспорт
	ЛатинскиеСимволы = "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz";
	Латиница = Ложь;
	Для НомерСимвола = 1 По СтрДлина(ДобавляемоеЗначение) Цикл
		
		ТекущийСимвол = Сред(ДобавляемоеЗначение, НомерСимвола, 1);
		
		Если СтрНайти(ЛатинскиеСимволы, ТекущийСимвол) <> 0 Тогда
			Латиница = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Латиница;
	
КонецФункции

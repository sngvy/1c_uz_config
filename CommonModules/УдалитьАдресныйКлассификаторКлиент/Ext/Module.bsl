////////////////////////////////////////////////////////////////////////////////
// СЕКЦИЯ ФУНКЦИЙ ДЛЯ ЗАГРУЗКИ ФАЙЛОВ АДРЕСНОГО КЛАССИФИКАТОРА С ВЕБ СЕРВЕРА,
// А ТАК ЖЕ ФУНКЦИИ ПОДДЕРЖКИ ОБНОВЛЕНИЯ АДРЕСНЫХ СВЕДЕНИЙ

// Вызывает форму загрузки классификатора. Может использоваться как интерфейс.
//
Функция ЗагрузитьАдресныйКлассификатор() Экспорт
	
	#Если ВебКлиент Тогда
		//Чуров
		ПоказатьПредупреждение(,НСтр("ru = 'В Веб-клиенте загрузка адресного классификатора не поддерживается'"));
		//Предупреждение(НСтр("ru = 'В Веб-клиенте загрузка адресного классификатора не поддерживается'"));
	#Иначе
		ОткрытьФорму("РегистрСведений.АдресныйКлассификатор.Форма.ФормаЗагрузкиАдресногоКлассификатора");
	#КонецЕсли
	
КонецФункции


// Проверяет наличие обновлений адресного классификатора на веб сервере
// для тех объектов, которые ранее уже загружались (для тех объектов
// для которых есть запись в регистре ВерсииОбъектовАдресногоКлассификатора).
//
// Возвращаемое значение
// Массив структур, в котором каждая структура имеет формат:
// ключ КодАдресногоОбъекта - строка - код адресного объекта
// ключ Наименование       - строка - наименование адресного объекта
// ключ Сокращение         - строка - сокращение адресного объекта
// ключ Индекс             - строка - индекс адресного объекта
// ключ ОбновлениеДоступно - Булево
//
Функция ПроверитьОбновлениеАдресныхОбъектов() Экспорт
	
#Если ВебКлиент Тогда
	Возврат УдалитьАдресныйКлассификатор.ПроверитьОбновлениеАдресныхОбъектов_Сервер();
#Иначе
	Возврат УдалитьАдресныйКлассификаторКлиентСервер.ПроверитьОбновлениеАдресныхОбъектов();
#КонецЕсли
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// СЕКЦИЯ ВСПОМОГАТЕЛЬНЫХ ФУНКЦИИ

// Содержит полный список файлов данных КЛАДР
//
Функция СписокФайловДанных() Экспорт
	
	Список = Новый Массив;
	
	Список.Добавить("SOCRBASE.DBF");
	Список.Добавить("ALTNAMES.DBF");
	Список.Добавить("DOMA.DBF");
	Список.Добавить("KLADR.DBF");
	Список.Добавить("STREET.DBF");
	
	Возврат Список;
	
КонецФункции

// Заменяет в имени файла расширение с ".DBF" на ".EXE"
//
Функция ЗаменитьРасширение_DBF_На_EXE(Строка)
	
	Возврат СтрЗаменить(Строка, ".DBF", ".EXE");
	
КонецФункции

// Заменяет в имени файла расширение на c ".DBF" на ".ZIP"
//
Функция ЗаменитьРасширение_DBF_На_ZIP(Строка) Экспорт
	
	Возврат СтрЗаменить(Строка, ".DBF", ".ZIP");
	
КонецФункции

// Заменяет в имени файла расширение на c ".EXE" на ".DBF"
//
Функция ЗаменитьРасширение_EXE_На_DBF(Строка) Экспорт
	
	Возврат СтрЗаменить(Строка, ".EXE", ".DBF");
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Блок функций проверки наличия файлов на диске (ИТС)

// Проверяет существование файлов адресного классификатора на диске ИТС.
//
// Параметры:
// ПутьКДискуИТС - строка - путь к корню диска ИТС
// 
// Возвращаемое значение:
// Булево - истина - файлы присутствуют
//          ложь   - файлы отсутствуют
//
Функция ПроверитьНаличиеФайловНаДискеИТС(знач ПутьКДискуИТС) Экспорт
	
	// если был выбран диск - то убираем последний символ "\"
	Если Прав(ПутьКДискуИТС, 1) = "\" Тогда
		ПутьКДискуИТС = Лев(ПутьКДискуИТС, СтрДлина(ПутьКДискуИТС) - 1);
	КонецЕсли;
	
	ПутьКДискуИТС = ПутьКДискуИТС + ПутьККаталогуСДаннымиКЛАДРНаДискеИТС(ПутьКДискуИТС);
	
	СписокФайловДанных = СписокФайловДанныхНаДискеИТС();
	
	Для Каждого ПутьКФайлу Из СписокФайловДанных Цикл
		ПолныйПутьКФайлу = ПутьКДискуИТС + ПутьКФайлу;
		Если ПутьКФайлу = "ALTNAMES.EXE" Тогда
			Продолжить;
		КонецЕсли;
		ФайлНаДиске = Новый Файл(ПолныйПутьКФайлу);
		Если Не ФайлНаДиске.Существует() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Функция возвращает относительный путь на диске ИТС по которому находятся файлы КЛАДР.
// 
// Параметры:
// ПутьКДискуИТС - путь к корневому каталогу диска ИТС.
// 
// Возвращаемое значение:
// строка - относительный путь на диске ИТС к файлам КЛАДР (самораспаковывающийся архив).
//          если файлы не найдены, возвращается пустая строка.
//
Функция ПутьККаталогуСДаннымиКЛАДРНаДискеИТС(знач ПутьКДискуИТС) Экспорт
	
	ВозможныеПути = Новый Массив;
	ВозможныеПути.Добавить("\1CIts\EXE\KLADR\");
	ВозможныеПути.Добавить("\1CitsFr\EXE\KLADR\");
	ВозможныеПути.Добавить("\1CItsB\EXE\KLADR");
	
	Если Прав(ПутьКДискуИТС, 1) = "\" Тогда
		ПутьКДискуИТС = Лев(ПутьКДискуИТС, СтрДлина(ПутьКДискуИТС) - 1);
	КонецЕсли;
	
	Для Каждого Путь Из ВозможныеПути Цикл
		ПолныйПутьКФайлу = ПутьКДискуИТС + Путь +"STREET.EXE" ;
		ФайлНаДиске = Новый Файл(ПолныйПутьКФайлу);
		Если ФайлНаДиске.Существует() Тогда
			Возврат Путь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

// Содержит полный список файлов данных КЛАДР (в формате самораспаковывающегося архива, EXE)
//
Функция СписокФайловДанныхНаДискеИТС() Экспорт
	
	Список = СписокФайловДанных();
	
	Для Каждого ИмяФайла Из Список Цикл
		НовоеИмя = ЗаменитьРасширение_DBF_На_EXE(ИмяФайла);
		Список.Установить(Список.Найти(ИмяФайла), НовоеИмя);
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

// Проверяет существование файлов данных в переданном каталоге
//
// Параметры:
// ПутьККаталогу - строка - путь к каталогу, который необходимо проверить на наличие файлов
// 
// Возвращаемое значение:
// Истина        - файлы существуют на диске
// Ложь          - хотя бы одного файла из необходимого набора файлов
//                 не существует на диске
//
Функция ПроверитьНаличиеФайловДанныхВКаталоге(знач ПутьККаталогу) Экспорт
	
	Если ПустаяСтрока(ПутьККаталогу) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Прав(ПутьККаталогу, 1) <> "\" Тогда
		ПутьККаталогу = ПутьККаталогу + "\";
	КонецЕсли;
	
	Для Каждого ПутьКФайлу Из СписокФайловДанных() Цикл
		ФайлНаДиске = Новый Файл(ПутьККаталогу+ПутьКФайлу);
		Если Не ФайлНаДиске.Существует() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#Если Не ВебКлиент Тогда

// Распаковывает файлы КЛАДР с диска ИТС и выполняет их архивацию в ZIP-архив.
// 
// Параметры
// ДискИТС - строка - путь к корневой папке диска ИТС
// 
// Возвращаемое значение
// строка - путь к временному каталогу с файлами архива кладр
//
Функция ПреобразоватьФайлыКЛАДРEXEВZIP(знач ДискИТС) Экспорт
	
	ВременныйКаталог = УдалитьОбщегоНазначенияКлиентСервер.ПолучитьИмяКаталога("kladr_files");
	
	СоздатьКаталог(ВременныйКаталог);
	
	Если Прав(ДискИТС, 1) = "\" Тогда
		ДискИТС = Лев(ДискИТС, СтрДлина(ДискИТС) - 1);
	КонецЕсли;
	
	ПутьКФайламНаДискеИТС = ДискИТС + ПутьККаталогуСДаннымиКЛАДРНаДискеИТС(ДискИТС);
	
	СписокФайловДанных = СписокФайловДанныхНаДискеИТС();
	
	Для Каждого ИмяФайла Из СписокФайловДанных Цикл
		Файл = Новый Файл(ПутьКФайламНаДискеИТС + ИмяФайла);
		Если Файл.Существует() Тогда
			КопироватьФайл(ПутьКФайламНаДискеИТС + ИмяФайла, ВременныйКаталог + ИмяФайла);
			Файл = Новый Файл(ВременныйКаталог + ИмяФайла);
			Файл.УстановитьТолькоЧтение(Ложь);
			КомандаСистемы(ИмяФайла, ВременныйКаталог);
		КонецЕсли;
		
		ФайлDBF = Новый Файл(ВременныйКаталог+ЗаменитьРасширение_EXE_На_DBF(ИмяФайла));
		
		Если Не ФайлDBF.Существует() Тогда
			УдалитьФайлы(ВременныйКаталог);
			Возврат Неопределено;
		КонецЕсли;
		
		СжатьФайл(ВременныйКаталог, ЗаменитьРасширение_EXE_На_DBF(ИмяФайла), ВременныйКаталог);
	КонецЦикла;
	
	Возврат ВременныйКаталог;
	
КонецФункции

// Сжимает файл из поставки КЛАДР в ZIP архив.
//
// Параметры
// ПутьКDBFФайлам - строка - путь к каталогу с файлами DBF
// ИмяФайла       - строка - имя файла, который требуется сжать
// КаталогВременныхФайлов - строка - каталог, в который требуется сохранить файл архива
//
Процедура СжатьФайл(Знач ПутьКDBFФайлам, ИмяФайла, КаталогВременныхФайлов) Экспорт
	
	Если Не ЗначениеЗаполнено(КаталогВременныхФайлов) Тогда
		КаталогВременныхФайлов = УдалитьОбщегоНазначенияКлиентСервер.ПолучитьИмяКаталога("kladr_files");
		СоздатьКаталог(КаталогВременныхФайлов);
	КонецЕсли;
	
	ФайлDBF = ПутьКDBFФайлам + ИмяФайла;
	Файл = Новый Файл(ФайлDBF);
	Если Файл.Существует() Тогда
		ПутьКФайлуАрхива = КаталогВременныхФайлов + ЗаменитьРасширение_DBF_На_ZIP(ИмяФайла);
		ZIPФайл = Новый ЗаписьZipФайла(ПутьКФайлуАрхива, , , 
		                               МетодСжатияZIP.Сжатие,
		                               УровеньСжатияZIP.Максимальный);
		ZIPФайл.Добавить(ФайлDBF);
		ZIPФайл.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Загружает файлы КЛАДР региона с Веб сервера
// Параметры
// АдресныйОбъект - массив - каждая строка идентификатор адресного объекта в формате NN
// ДанныеАутентификации - структура - параметры аутентификации на пользовательском сайте 1С
//                            ключ - КодПользователя - значение - пользователь (логин)
//                            ключ - Пароль - значение - пароль пользователя
// Возвращаемое значение: структура, ключ Статус - булево - истина или ложь
//                                   ключ значение - строка - если Статус ложь, содержит
//                                   пояснение об ошибке.
//
Функция ЗагрузитьКЛАДРСВебСервера(знач АдресныйОбъект, знач ДанныеАутентификации, ВремКаталог) Экспорт
	
	URLСтрока = "http://downloads.v8.1c.ru/tmplts/ITS/KLADR/";
	
	Если Не ЗначениеЗаполнено(ВремКаталог) Тогда
		ВремКаталог = КаталогВременныхФайлов() + "kladr_files";
		СоздатьКаталог(ВремКаталог);
	КонецЕсли;
	
	ПараметрыЗагрузкиФайла = Новый Структура;
	ПараметрыЗагрузкиФайла.Вставить("Пользователь", ДанныеАутентификации.КодПользователя);
	ПараметрыЗагрузкиФайла.Вставить("Пароль",  ДанныеАутентификации.Пароль);
	
	ИмяZIP = "base" + АдресныйОбъект + ".zip";
	ПараметрыЗагрузкиФайла.Вставить("ПутьДляСохранения", ВремКаталог + "\" + ИмяZIP);
	Результат = УдалитьПолучениеФайловИзИнтернетаКлиент.СкачатьФайлНаКлиенте(URLСтрока + ИмяZIP,
	                                                                 ПараметрыЗагрузкиФайла);
	Если Не Результат.Статус Тогда
		Возврат Результат;
	КонецЕсли;
	
	Файл = Новый Файл(ВремКаталог + "\altnames.zip");
	Если Не Файл.Существует() Тогда
		ПараметрыЗагрузкиФайла.Вставить("ПутьДляСохранения", ВремКаталог + "\altnames.zip");
		Результат = УдалитьПолучениеФайловИзИнтернетаКлиент.СкачатьФайлНаКлиенте(URLСтрока + "altnames.zip",
		                                                           ПараметрыЗагрузкиФайла);
		Если Не Результат.Статус Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Файл = Новый Файл(ВремКаталог + "\socrbase.zip");
	Если Не Файл.Существует() Тогда
		ПараметрыЗагрузкиФайла.Вставить("ПутьДляСохранения", ВремКаталог + "\socrbase.zip");
		Результат = УдалитьПолучениеФайловИзИнтернетаКлиент.СкачатьФайлНаКлиенте(URLСтрока + "socrbase.zip",
		                                                           ПараметрыЗагрузкиФайла);
		Если Не Результат.Статус Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("Статус", Истина);
	
КонецФункции

#КонецЕсли

// Передает сжатый файл КЛАДР на сервер. На стороне сервера файл распаковывается.
// 
// Параметры
// ПутьКФайламНаКлиенте - строка - путь к каталогу с файлом
// ИмяФайла - строка - имя файла архива, который нужно передать на сервер и распаковывать
//
// Возвращаемое значение
// Строка - путь к каталогу на сервере, в который был распакован файл
// 
//
Процедура ПередатьФайлНаСервер(знач ПутьКФайламНаКлиенте, знач ИмяФайла, ПутьККаталогуНаСервере) Экспорт
	
	ПутьКФайлуАрхива = ПутьКФайламНаКлиенте + ЗаменитьРасширение_DBF_На_ZIP(ИмяФайла);
	
	Файл = Новый Файл(ПутьКФайлуАрхива);
	
	Если Файл.Существует() Тогда
		УдалитьАдресныйКлассификатор.СохранитьФайлНаСервереИРаспаковать(Новый ДвоичныеДанные(ПутьКФайлуАрхива),
																ЗаменитьРасширение_DBF_На_ZIP(ИмяФайла),
																ПутьККаталогуНаСервере);
	Иначе
		ВызватьИсключение НСтр("ru = 'Невозможно передать файл данных на сервер. Файл не найден.'");
	КонецЕсли;
	
КонецПроцедуры

// Передает сжатый файлы КЛАДР на сервер. На стороне сервера файл распаковывается.
// 
// Параметры:
// ПутьКФайламНаКлиенте - строка - путь к каталогу с файлом на клиенте
// ПутьККаталогуНаСервере - строка - путь к каталогу, в который будет распаковываться файл на сервере
// АдресныйОбъект - строка - номер адресного объекта в формате NN.
// ПередаватьТолькоОсновныеФайлы - булево - если истина, то будут передаваться только основные zip файлы,
//                                          если ложь, так же будут передаваться файлы altnames.zip и socrbase.zip
//
Процедура ПередатьФайлыНаСерверПоАдреснымОбъектам(знач ПутьКФайламНаКлиенте, ПутьККаталогуНаСервере, АдресныйОбъект, 
		ПередаватьТолькоОсновныеФайлы) Экспорт
	
	ИмяФайла = "base" + АдресныйОбъект + ".zip";
	УдалитьАдресныйКлассификатор.СохранитьФайлНаСервереИРаспаковать(Новый ДвоичныеДанные(ПутьКФайламНаКлиенте + ИмяФайла),
	                                                         ИмяФайла,
	                                                         ПутьККаталогуНаСервере);
	
	Если Не ПередаватьТолькоОсновныеФайлы Тогда
		УдалитьАдресныйКлассификатор.СохранитьФайлНаСервереИРаспаковать(Новый ДвоичныеДанные(ПутьКФайламНаКлиенте + "altnames.zip"),
		                                                         "altnames.zip",
		                                                         ПутьККаталогуНаСервере);
		УдалитьАдресныйКлассификатор.СохранитьФайлНаСервереИРаспаковать(Новый ДвоичныеДанные(ПутьКФайламНаКлиенте + "socrbase.zip"),
		                                                         "socrbase.zip",
		                                                         ПутьККаталогуНаСервере);
	КонецЕсли;
	
КонецПроцедуры

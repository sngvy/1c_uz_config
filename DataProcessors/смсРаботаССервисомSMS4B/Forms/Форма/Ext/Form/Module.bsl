
//////////////////////////////////////////////////////////////
// ОСНОВНЫЕ МЕТОДЫ ЯДРА

&НаСервере
// Функция предназначена для подключению к серверу SMS4B. Вызывается перед первой 
// попыткой обращения к функциям сервера 
// либо после разрыва сервером SMS4B открытой ранее сессии.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Число	- НомерСессии > 0, если функция выполнена успешно,
//				или код ошибки < 0, если функция выполнена не успешно 
//				(см описание функции ОписаниеОшибокВебСервиса ()). 
//
Функция SMS4B_Подключиться()
	// Устанавливаем GMT=0, т.к. всегда будем работать по UTC (как сервер SMS4B)
	GMT = 0;
	// Собираем информацию о конфигурации (для статистики на сервере SMS4B)
	ИмяКонфигурации 	= СтрЗаменить(Метаданные.Имя, " ", "_");
	КраткаяИнформация 	= СтрЗаменить(Метаданные.КраткаяИнформация," ","_");
	ИмяКонфигурации = ИмяКонфигурации + "(" + КраткаяИнформация + ")";
	Если СтрДлина(ИмяКонфигурации) > 425 Тогда
		ИмяКонфигурации = Лев(ИмяКонфигурации, 425);
	КонецЕсли;	
	ИнформацияОСистеме = Новый СистемнаяИнформация;
	// Дополняем имя пользователя сведениями о конфигурации
	Пользователь = " S_" + смсНомерЯдра + "_" + Метаданные.Версия + "_" + ИмяКонфигурации + "_" + ИнформацияОСистеме.ВерсияПриложения + " " + Объект.смсИмяПользователя;
	Пароль 		 = Объект.смсПарольПользователя;
	ВебСервис = SMS4B_ПодключитьВебСервис();
	Если ВебСервис = Неопределено Тогда
		SMS4B_ПоменятьСервер();
		ВебСервис = SMS4B_ПодключитьВебСервис();
		Если ВебСервис = Неопределено Тогда
			КодОшибки = -9;
			Возврат КодОшибки;
		КонецЕсли;	
	КонецЕсли; 
	// Открываем сессию для работы с веб-сервисом
	Попытка
		РезультатПодключения = ВебСервис.StartSession(Пользователь, Пароль, GMT); 
	Исключение
		РезультатПодключения = Неопределено;
	КонецПопытки;
	// Запомним код ошибки
	КодОшибки = РезультатПодключения;
	// Проверяем результат подключения первый раз
	// Если нет связи, либо ошибки от -1 до -19, то подключаемся на резервный сервер
	Если (РезультатПодключения = Неопределено) ИЛИ ((РезультатПодключения <= -1) И (РезультатПодключения >= -19)) Тогда
		// Подключаемся к резервному серверу
		SMS4B_ПоменятьСервер();
		ВебСервис = SMS4B_ПодключитьВебСервис();
		Если ВебСервис = Неопределено Тогда
			SMS4B_ПоменятьСервер();
			ВебСервис = SMS4B_ПодключитьВебСервис();
			Если ВебСервис = Неопределено Тогда
				КодОшибки = -9;
				Возврат КодОшибки;
			КонецЕсли;	
		КонецЕсли; 
		Попытка
			РезультатПодключения = ВебСервис.StartSession(Пользователь, Пароль, GMT); 
		Исключение
			РезультатПодключения = Неопределено;
		КонецПопытки;
		// Запомним код ошибки
		КодОшибки = РезультатПодключения;
	КонецЕсли;
	// Проверяем результат подключения второй раз
	Если РезультатПодключения = Неопределено Тогда
		Если КодОшибки = Неопределено Тогда
			КодОшибки = -99999; // Проблема с интернетом (сервис не ответил)
		КонецЕсли; 
	Иначе
		// Проверяем РезультатПодключения на ошибки 
		КодОшибки = РезультатПодключения;
		Если КодОшибки > 0 Тогда
			смсНомерСессии = КодОшибки;
		ИначеЕсли КодОшибки < 0 Тогда
			SMS4B_ВывестиСообщение( SMS4B_ОписаниеОшибокВебСервиса(РезультатПодключения), СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли;	
	// Возвращаем результат работы функции
	Возврат КодОшибки;	
КонецФункции // SMS4B_Подключиться()

&НаСервере
// Функция предназначена для получения параметров пользователя. 
// Вызывается после подключения к серверу, и после отправки sms-сообщений,
// чтобы пользователь видел остаток sms-сообщений. 
//
// Параметры:
//	СтруктураПараметровСессии	- Структура	- Возвращаемый параметр. 
// 
// Возвращаемое значение:
//	Число	- Числовой код ошибки, 1 – если функция выполнена успешно, 
// 				и код ошибки < 0, если функция выполнена не успешно.
//
Функция SMS4B_ПолучитьПараметрыСессии(СтруктураПараметровСессии)
	КодОшибки = 1;
	// Подключаем веб-сервис
	ВебСервис = SMS4B_ПодключитьВебСервис();
	Если ВебСервис = Неопределено Тогда
		SMS4B_ПоменятьСервер();
		ВебСервис = SMS4B_ПодключитьВебСервис();
		Если ВебСервис = Неопределено Тогда
			КодОшибки = -9;
			Возврат КодОшибки;
		КонецЕсли;	
	КонецЕсли; 
	// Получаем фабрику XDTO
	Фабрика = ВебСервис.ФабрикаXDTO;		
	ТекущееВремяСеанса = SMS4B_ПолучитьТекущееВремя();
	Попытка
		// Получаем с веб-сервиса параметры сессии
		ПараметрыСессии = ВебСервис.ParamSMS(смсНомерСессии);
	Исключение
		ПараметрыСессии = Неопределено;
	КонецПопытки;
	// Проверяем результат выполнения
	Если ПараметрыСессии = Неопределено Тогда
		// Проблема с интернетом (сервис не ответил)
		КодОшибки = -99999;
	Иначе	
		// Код ошибки при неуспешном выполнении метода
		КодОшибки = Число(ПараметрыСессии.Result);
		Если (КодОшибки = -1) ИЛИ (КодОшибки = -2) Тогда
			// Если сессия устарела или её нет
			КодОшибки = SMS4B_Подключиться();
			// Если не удалось подключится
			Если КодОшибки > 0 Тогда
				// Пробуем получить ещё раз
				смсНомерСессии = КодОшибки;
				ТекущееВремяСеанса = SMS4B_ПолучитьТекущееВремя();
				Попытка
					// Получаем с веб сервиса параметры сессии
					ПараметрыСессии = ВебСервис.ParamSMS(смсНомерСессии);
				Исключение
					ПараметрыСессии = Неопределено;
				КонецПопытки;
				Если ПараметрыСессии = Неопределено Тогда
					// Проблема с интернетом (сервис не ответил)
					КодОшибки = -99999;
				Иначе	
					КодОшибки = Число(ПараметрыСессии.Result);
				КонецЕсли;							
			КонецЕсли;
		ИначеЕсли (КодОшибки > -20) И (КодОшибки < -2) Тогда
			// Возможно, что Основной сервер не доступен, пробуем переключится на резервный.
			SMS4B_ПоменятьСервер();				
			// Пробуем получить ещё раз
			ТекущееВремяСеанса = SMS4B_ПолучитьТекущееВремя();
			Попытка
				// Получаем с веб сервиса параметры сессии
				ПараметрыСессии = ВебСервис.ParamSMS(смсНомерСессии);
			Исключение
				ПараметрыСессии = Неопределено;
			КонецПопытки;
			Если ПараметрыСессии = Неопределено Тогда
				// Проблема с интернетом (сервис не ответил)
				КодОшибки = -99999;
			Иначе	
				КодОшибки = Число(ПараметрыСессии.Result);
			КонецЕсли;							
		КонецЕсли;		
		// Если ошибка, то возвращаем код ошибки
		Если КодОшибки > 0 Тогда 
			СтруктураПараметровСессии.Вставить("смсНомераОтправителя",	ПараметрыСессии.Addresses);
			СтруктураПараметровСессии.Вставить("смсОстатокСМС",			ПараметрыСессии.Rest);
			СтруктураПараметровСессии.Вставить("смсКоличествоНомеров",	ПараметрыСессии.AddrMask);
			СтрВремяСервера = Сред(ПараметрыСессии.UTC, 1, 19);
			ВремяСервера = SMS4B_СтрокаВДату(СтрЗаменить(СтрВремяСервера, "T", " "));
			СтруктураПараметровСессии.Вставить("смсКорректировкаUTC",			Окр((ТекущееВремяСеанса - ВремяСервера) / 3600) * 3600);
			СтруктураПараметровСессии.Вставить("смсМаксАктуальностьДоставки",	ПараметрыСессии.Limit);
			СтруктураПараметровСессии.Вставить("смсМаксДлительностьДоставки",	ПараметрыСессии.Duration);
		ИначеЕсли КодОшибки < 0 Тогда 	
			// Выводим текст с описанием ошибки
			SMS4B_ВывестиСообщение(SMS4B_ОписаниеОшибокВебСервиса(КодОшибки), СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли;
	Возврат КодОшибки;
КонецФункции // SMS4B_ПолучитьПараметрыСессии()

&НаСервере
// Функция предназначена для получения входящих sms-сообщений. Функция по возможности
// склеит части входящих сообщений в одно sms-сообщение. В случае, если в момент вызова
// какие то из частей сообщения еще не получены сервером SMS4B, в конец текста будет 
// вставлен специальный маркер. Формат маркера: «[…]». На основании маркера при получении 
// оставшихся частей сообщений можно будет «дособрать» его на стороне клиента.
//
// Параметры:
//
//  СписокСообщений (массив)- Возвращаемый параметр, содержит массив структур, содержащих 
//							  поля полученных sms-сообщений.
//							
//  ДатаПолученияСообщения (Дата и время) - Возвращаемый параметр. В метод передается дата, 
//											начиная с которой нужно получать сообщения, возвращается
//											дата последнего полученного сообщения. Если не передана
//											дата получения сообщений, то будут получены сообщения 
//											с начала дня текущей даты. В этом случае значение 
//											миллисекунд будет проигнорировано. 
//							
//  Миллисекунда (число(3)) - 	Возвращаемый параметр. В дополнение ко времени получения сообщений
//								передается миллисекунда, поскольку на сервере SMS4B время хранится
//								с точностью до миллисекунд. Возвращается миллисекунда времени 
//								последнего полученного сообщения.
//							
//  ПолучатьТолькоПолныеСМС (булево) - 	Необязательный параметр, по умолчанию Ложь. На сервере SMS4B
//										реализован механизм, позволяющий получать sms, состоящие из 
//										нескольких частей, только когда будут получены все ее части. 
//										Этот механизм будет использоваться,	если значение параметра 
//										равно Истина. Если значение равно Ложь, части sms будут 
//										возвращаться сразу по мере их прихода. Действия по склеиванию 
//										пришедших частей с полученными ранее необходимо выполнять на 
//										стороне клиента в предметной логике.
//										Следует понимать, что при использовании режима получения только
//										полных сообщений есть риск того, что некоторые сообщения никогда
//										не будут получены с сервера (если на сервер не дойдут какие то
//										части сообщений).
// 
// Возвращаемое значение (число):
// 
// Возвращает числовой код ошибки, 1 – если функция выполнена успешно,
// и код ошибки < 0, если функция выполнена не успешно.
//
Функция SMS4B_ПолучитьСообщения(СписокСообщений, ДатаПолученияСообщения, Миллисекунда = 0, ПолучатьТолькоПолныеСМС = Ложь)
	КодОшибки	= 1;
	Маркер		= "[…]";	// Признак частично полученного сообщения, добавляется в конец сообщения,
							// если оно не было получено полностью с сервера
	// Если дата не заполнена, то получаем сообщения с начала дня текущей даты
	Если НЕ ЗначениеЗаполнено(ДатаПолученияСообщения) Тогда
		ДатаПолученияСообщения = НачалоДня(ТекущаяДата());
	КонецЕсли;
	// Переводим дату получения сообщений к времени по UTC
	ДатаПолученияСообщенияUTC = SMS4B_ПривестиДатуКUTC(ДатаПолученияСообщения);
	// Создаем структуру даты, с которой необходимо получить входящие  сообщения
	СтруктураДаты = Новый Структура;
	СтруктураДаты.Вставить("Дата", ДатаПолученияСообщенияUTC);
	СтруктураДаты.Вставить("Миллисекунда", Миллисекунда);
	// Переводим дату в строку
	МоментВремени = SMS4B_ДатаВСтроку(СтруктураДаты);
	// Создаем таблицу значений для полученных сообщений
	ПолученныеСообщения = Новый ТаблицаЗначений;
	ПолученныеСообщения.Колонки.Добавить("GUID");
	ПолученныеСообщения.Колонки.Добавить("ДатаПолучения"); 
	ПолученныеСообщения.Колонки.Добавить("Миллисекунда");
	ПолученныеСообщения.Колонки.Добавить("Отправитель");
	ПолученныеСообщения.Колонки.Добавить("Получатель");
	ПолученныеСообщения.Колонки.Добавить("ТекстСообщения");
	ПолученныеСообщения.Колонки.Добавить("ВсегоЧастей");
	ПолученныеСообщения.Колонки.Добавить("ТекущаяЧасть");
	ВебСервис = SMS4B_ПодключитьВебСервис();
	Если ВебСервис = Неопределено Тогда
		SMS4B_ПоменятьСервер();
		ВебСервис = SMS4B_ПодключитьВебСервис();
		Если ВебСервис = Неопределено Тогда
			КодОшибки = -9;
			Возврат КодОшибки;
		КонецЕсли;	
	КонецЕсли; 
	// Получаем фабрику XDTO 
	Фабрика = ВебСервис.ФабрикаXDTO;
	ЕстьСообщения = Истина;
	Пока ЕстьСообщения Цикл
		КолПолученных = 0;
		// Получаем сообщения с сервера
		Попытка
			НовыеСообщения = ВебСервис.LoadSMS(ЭтаФорма.смсНомерСессии, МоментВремени, ?(ПолучатьТолькоПолныеСМС, 1, 0));
		Исключение
			НовыеСообщения = Неопределено;
		КонецПопытки;
		Если НовыеСообщения = Неопределено Тогда
			// Проблема с интернетом (сервис не ответил)
			КодОшибки = -99999;
		Иначе	
			КодОшибки = Число(НовыеСообщения.Result);
			Если (КодОшибки = -1) ИЛИ (КодОшибки = -2) Тогда
				// Если сессия устарела или её нет
				КодОшибки = SMS4B_Подключиться();
				Если КодОшибки > 0 Тогда
					// Пробуем получить ещё раз
					смсНомерСессии = КодОшибки;
					// Получаем сообщения с сервера
					Попытка
						НовыеСообщения = ВебСервис.LoadSMS(ЭтаФорма.смсНомерСессии, МоментВремени, ?(ПолучатьТолькоПолныеСМС, 1, 0));
					Исключение
						НовыеСообщения = Неопределено;
					КонецПопытки;
					Если НовыеСообщения = Неопределено Тогда
						// Проблема с интернетом (сервис не ответил)
						КодОшибки = -99999;
					Иначе	
						КодОшибки = Число(НовыеСообщения.Result);
					КонецЕсли;							
				КонецЕсли;							
			ИначеЕсли (КодОшибки > -20) И (КодОшибки < -2) Тогда
				// Возможно, что Основной сервер не доступен, пробуем переключится на резервный.
				SMS4B_ПоменятьСервер();				
				// Пробуем получить ещё раз
				Попытка
					НовыеСообщения = ВебСервис.LoadSMS(ЭтаФорма.смсНомерСессии, МоментВремени, ?(ПолучатьТолькоПолныеСМС, 1, 0));
				Исключение
					НовыеСообщения = Неопределено;
				КонецПопытки;
				Если НовыеСообщения = Неопределено Тогда
					КодОшибки = -199999;
					Возврат КодОшибки; // Проблема с интернетом
				Иначе	
					КодОшибки = Число(НовыеСообщения.Result); // Код ошибки
				КонецЕсли;							
			КонецЕсли; 
		КонецЕсли; 
		Если КодОшибки > 0 Тогда
			// Получаем список сообщений
			Попытка
				СписокВходящихСообщений = НовыеСообщения.List.SMSList;
			Исключение
			    СписокВходящихСообщений = Неопределено;
			КонецПопытки;
			// Обрабатываем полученные сообщения
			Если СписокВходящихСообщений = Неопределено Тогда
				ЕстьСообщения = Ложь;
			Иначе	
				Для Каждого Строка Из СписокВходящихСообщений Цикл
					// Пропускаем повторно полученные сообщения
					ИскомаяСтрока = ПолученныеСообщения.Найти(Строка.G);
					Если НЕ (ИскомаяСтрока = Неопределено) Тогда 
						Если (ИскомаяСтрока.ТекущаяЧасть >= Строка.P) И (ИскомаяСтрока.ВсегоЧастей = Строка.A) Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					КолПолученных = КолПолученных + 1; // Подсчет новых
					// Склеиваем сообщения только тогда, когда получаем их частями
					Если НЕ ПолучатьТолькоПолныеСМС Тогда
						Если НЕ (ИскомаяСтрока = Неопределено) Тогда
							// Склеиваем сообщение, если сообщение не полное, то добавляем маркер
							// (признак того, что сообщение получено не полностью)
							Если ИскомаяСтрока.ВсегоЧастей = Строка.A И ИскомаяСтрока.ТекущаяЧасть < Число(Строка.P) Тогда
								ИскомаяСтрока.ТекстСообщения = СтрЗаменить(ИскомаяСтрока.ТекстСообщения, Маркер, "") 
								+ SMS4B_СтрокуВОбычноеПредставление(Строка.B, Строка.E) + ?(Число(Строка.P) = Число(Строка.A), "", Маркер);
								ИскомаяСтрока.ТекущаяЧасть      = Строка.P;
								// Запишем дату получения последней части сообщения
								ДатаСтрокой = SMS4B_СтрокаВДату(Лев(Строка.M, 19));
								ДатаUTC = SMS4B_ПривестиДатуКUTC(ДатаСтрокой, Ложь);
								ИскомаяСтрока.ДатаПолучения  = ДатаUTC;
								ИскомаяСтрока.Миллисекунда   = Прав(МоментВремени, СтрДлина(МоментВремени) - Найти(МоментВремени,"."));
								Если Найти(ИскомаяСтрока.ТекстСообщения, Маркер) = 0 Тогда
									ИскомаяСтрока.Статус = "Получено";
								Иначе
									ИскомаяСтрока.Статус = "Получено частично";
								КонецЕсли;	
								МоментВремени = Строка.M;
								Продолжить;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					ТекСообщение = ПолученныеСообщения.Добавить();
					ТекСообщение.GUID 			= Строка.G;
					// Переводим время входящей смс из UTC в "наше"
					ДатаСтрокой = SMS4B_СтрокаВДату(Лев(Строка.M,19));
					ДатаUTC = SMS4B_ПривестиДатуКUTC(ДатаСтрокой, Ложь);
					ТекСообщение.ДатаПолучения  = ДатаUTC;
					ТекСообщение.Миллисекунда   = Прав(Строка.M, 3);
					ТекСообщение.Отправитель 	= Строка.S;
					ТекСообщение.Получатель 	= Строка.D;
					ТекстСообщения = SMS4B_СтрокуВОбычноеПредставление(Строка.B, Строка.E) + ?(Число(Строка.A) > 1 И Число(Строка.P) = 1, Маркер, "");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, Символ(0), "@");
					ТекСообщение.ТекстСообщения = СтрЗаменить(ТекстСообщения, Символ(2), "$");
					ТекСообщение.ВсегоЧастей 	= Строка.A;
					ТекСообщение.ТекущаяЧасть 	= Строка.P;
					МоментВремени = Строка.M;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли; 
		Если КолПолученных = 0 Тогда 
			ЕстьСообщения = Ложь;
		КонецЕсли;
	КонецЦикла;
	Если ПолученныеСообщения.Количество() > 0 Тогда
 		// Преобразуем таблицу значений в массив структур и записываем в возвращаемый параметр
		СписокСообщений = SMS4B_ТаблицаЗначенийВМассивСтруктур(ПолученныеСообщения);
	КонецЕсли; 
	Возврат КодОшибки;
КонецФункции // SMS4B_ПолучитьСообщения()

&НаСервере
// Функция предназначена для отправки группы sms-сообщений на сервер SMS4B. 
// Группу сообщений объединяют единые временные характеристики отправки 
// (дата отправки, актуальность и т.п.). В предметной реализации группой 
// можно считать отдельный документ рассылки либо, например, набор сообщений 
// с незаполненными временными характеристиками.
//							
// Параметры:
//							
//  СписокСообщений (массив) -	Обязательный параметр. Содержит массив структур, содержащих поля
//								sms-сообщений, предназначенных для отправки на сервер.
//							
// НомерОтправителя (строка) - 	Обязательный параметр. Номер, с которого отправляются сообщения.
//							
//  ТекстСообщенияПоУмолчанию (строка) - Необязательный параметр. Данный текст будет использоваться
//								для отправки тем получателям, для которых в списке сообщений не указан
//								текст сообщения. В случае групповой рассылки сообщений с одним общим
//								текстом достаточно заполнить данный параметр и в списке сообщений 
//								нигде не указывать текст сообщения. В случае если для получателя указан
//								персональный текст, текст по умолчанию не будет использоваться для
//								отправки сообщения данному получателю.
//							
//  ДатаОтправки (дата) - 		Необязательный параметр. Дата начала отправки sms-сообщения
//							
//  Актуальность (дата) - 		Необязательный параметр. Дата, до которой сообщение будет пытаться
//								отправиться сервером sms4b.
//							
//  НачалоПериодаЗапрета (дата) - Необязательный параметр. Указывает, с какого времени начинается период,
//								в который сообщения не должны отправляться (например, чтобы они не 
//								приходили получателям ночью). Актуальным является только временная часть
//								даты (ЧЧ:ММ:СС). Сама дата (ДД.ММ,ГГГГ) не анализируется и может быть 
//								передана любая (в том числе пустая).
//							
// - КонецПериодаЗапрета (дата) - Необязательный параметр. Указывает время окончания периода, в который
//								сообщения не должны отправляться (например, чтобы они не приходили 
//								получателям ночью). Актуальным является только временная часть даты 
//								(ЧЧ:ММ:СС). Сама дата (ДД.ММ,ГГГГ) не анализируется и может быть передана 
//								любая (в том числе пустая).
//							
// - РавномернаяРассылка(булево) - Необязательный параметр. Содержит признак равномерной рассылки. При 
//								использовании равномерной рассылки сообщения группы будут отправляться
//								через равные промежутки времени пропорционально периоду рассылки. 
//								Значение по умолчанию – ложь.
//
// 
// Возвращаемое значение (число):
// 
// Возвращает числовой код ошибки, 1 – если функция выполнена успешно, 
// и код ошибки < 0, если функция выполнена не успешно.
//
Функция SMS4B_ОтправитьСообщения(СписокСообщений, НомерОтправителя, ТекстСообщенияПоУмолчанию = "", _ДатаОтправки, _Актуальность = '00010101', НачалоПериодаЗапрета = '00010101', КонецПериодаЗапрета = '00010101', РавномернаяРассылка = Ложь)
	КодОшибки = 1;
	// Устанавливаем код группы равным 0
	КодГруппы = 0;
	// Количество отправляемых сообщений
	КолвоСообщений = СписокСообщений.Количество();
	// Размер пакета сообщений для отправки на сервер
	РазмерПакета = 100;
	// Все сообщения отправились успешно
	ЕстьНеОтправленныеСообщения = Ложь;
	// Создаем структуру с путой датой
	СтруктураДаты = Новый Структура();
	СтруктураДаты.Вставить("Дата", Дата('00010101'));
	СтруктураДаты.Вставить("Миллисекунда", 0);
	// Переводим дату отправки и дату актуальности к времени UTC
	ДатаОтправкиUTC = SMS4B_ПривестиДатуКUTC(_ДатаОтправки);
	АктуальностьUTC = SMS4B_ПривестиДатуКUTC(_Актуальность);
	// Переводим дату отправки и дату актуальности в строку
	СтруктураДаты.Дата = ДатаОтправкиUTC;
	ДатаОтправки       = SMS4B_ДатаВСтроку(СтруктураДаты); // Дата отправки СМС в формате "YYYYMMDD"
	СтруктураДаты.Дата = АктуальностьUTC;
	Актуальность	   = SMS4B_ДатаВСтроку(СтруктураДаты); // Дата жизни СМС в формате "YYYYMMDD"
	// Если указан период запрета отправки, то заполним его
	Если ЗначениеЗаполнено(НачалоПериодаЗапрета) И ЗначениеЗаполнено(КонецПериодаЗапрета) Тогда
		НачалоПериодаЗапретаUTC = SMS4B_ПривестиДатуКUTC(НачалоПериодаЗапрета);
		КонецПериодаЗапретаUTC  = SMS4B_ПривестиДатуКUTC(КонецПериодаЗапрета);
		Период = SMS4B_ПолучитьРазрешенныйПериодОтправки(НачалоПериодаЗапретаUTC, КонецПериодаЗапретаUTC);
	Иначе
		Период = "";	
	КонецЕсли;	
	// Обработка таблицы сообщений
	СчетчикПакетаСообщений = 0;
	// Подключаем веб-сервис
	ВебСервис = SMS4B_ПодключитьВебСервис();
	Если ВебСервис = Неопределено Тогда
		SMS4B_ПоменятьСервер();
		ВебСервис = SMS4B_ПодключитьВебСервис();
		Если ВебСервис = Неопределено Тогда
			КодОшибки = -9;
			Возврат КодОшибки;
		КонецЕсли;	
	КонецЕсли;
	// Получаем фабрику XDTO
	Фабрика  = ВебСервис.ФабрикаXDTO;
	МассивСообщений = Фабрика.Создать(Фабрика.Тип("SMS client", "ArrayOfGroupSMSList"));
	// Если какие то сообщения не удастся отправить с первого раза, отправим на второй итерации
	КолвоОтправок = 2;
	Для Индекс = 1 По КолвоОтправок Цикл
		ТекущийИндекс = -1;
		Для Каждого Сообщение Из СписокСообщений Цикл
			ТекущийИндекс = ТекущийИндекс + 1;
			// Уже отправленное сообщение
			Если Сообщение.КодОшибки = 1 Тогда Продолжить; КонецЕсли; 
			СчетчикПакетаСообщений = СчетчикПакетаСообщений + 1;
			// Получаем кодировку сообщения, если русский текст то 1, иначе 0
			Кодировка = SMS4B_Использовать7БитСообщение(Сообщение.ТекстСообщения);
			// Создаем и заполняем строку массива сообщений
			СтрокаМассива = Фабрика.Создать(Фабрика.Тип("SMS client", "GroupSMSList"));
			СтрокаМассива.Установить("B", ?(ЗначениеЗаполнено(Сообщение.ТекстСообщения), SMS4B_СтрокуВШестнадцатеричноеПредставление(Сообщение.ТекстСообщения, Кодировка), ""));
			СтрокаМассива.Установить("D", Сообщение.НомерПолучателя);
			СтрокаМассива.Установить("E", Кодировка);
			СтрокаМассива.Установить("G", Сообщение.GUID);
			МассивСообщений.GroupSMSList.Добавить(СтрокаМассива);
			// Отправка пакета сообщений или остатка сообщений
			Если (СчетчикПакетаСообщений = РазмерПакета) ИЛИ (СчетчикПакетаСообщений = КолвоСообщений) Тогда
				КолвоСообщений = КолвоСообщений - РазмерПакета;
				Если ЗначениеЗаполнено(ТекстСообщенияПоУмолчанию) Тогда
					КодировкаСообщенияШапки = SMS4B_Использовать7БитСообщение(ТекстСообщенияПоУмолчанию);
				Иначе
					КодировкаСообщенияШапки = 0;
				КонецЕсли; 
				Попытка
					// Если первая отправка, то код группы = -2 если требуется равномерная рассылка, или -1 если не требуется
					Cod = ?(КодГруппы = 0, ?(РавномернаяРассылка, -2, -1), КодГруппы); // КодГруппы
					// Переводим общий текст в шестнадцатеричное представление
					Bdy = ?(ЗначениеЗаполнено(ТекстСообщенияПоУмолчанию), SMS4B_СтрокуВШестнадцатеричноеПредставление(ТекстСообщенияПоУмолчанию, КодировкаСообщенияШапки), "");
					// Отправка сообщений на сервер
					РезультатОтправки = ВебСервис.GroupSMS(ЭтаФорма.смсНомерСессии, Cod, Строка(НомерОтправителя), КодировкаСообщенияШапки, Bdy, Актуальность, ДатаОтправки, Период, МассивСообщений);
				Исключение
					РезультатОтправки = Неопределено;
				КонецПопытки;
				// Проверяем результат отправки
				Если РезультатОтправки = Неопределено Тогда
					// Проблема с интернетом (сервис не ответил)
					КодОшибки = -99999;
				Иначе
					// Получаем код ошибки
					КодОшибки = РезультатОтправки.Result;
					Если (КодОшибки = -1) ИЛИ (КодОшибки = -2) Тогда
						// Если сессия устарела или её нет
						КодОшибки = SMS4B_Подключиться();
						Если КодОшибки > 0 Тогда
							// Пробуем получить ещё раз
							смсНомерСессии = КодОшибки;
							Попытка
								// Пробуем отправить ещё раз
								РезультатОтправки = ВебСервис.GroupSMS(ЭтаФорма.смсНомерСессии, Cod, Строка(НомерОтправителя), КодировкаСообщенияШапки, Bdy, Актуальность, ДатаОтправки, Период, МассивСообщений);
							Исключение
								РезультатОтправки = Неопределено;
							КонецПопытки;
							Если РезультатОтправки = Неопределено Тогда
								// Проблема с интернетом (сервис не ответил)
								КодОшибки = -99999;
							Иначе	
								// Получаем код ошибки
								КодОшибки = РезультатОтправки.Result;
							КонецЕсли;							
						КонецЕсли;							
					ИначеЕсли (КодОшибки > -20) И (КодОшибки < -2) Тогда
						// Возможно, что Основной сервер не доступен, пробудем переключится на резервный.
						SMS4B_ПоменятьСервер();						
						Попытка
							// Пробуем отправить ещё раз
							РезультатОтправки = ВебСервис.GroupSMS(ЭтаФорма.смсНомерСессии, Cod, Строка(НомерОтправителя), КодировкаСообщенияШапки, Bdy, Актуальность, ДатаОтправки, Период, МассивСообщений);
						Исключение
							РезультатОтправки = Неопределено;
						КонецПопытки;
						// Получим результат отправки
						Если РезультатОтправки = Неопределено Тогда
							// Проблема с интернетом (сервис не ответил)
							КодОшибки = -99999;
						Иначе	
							// Получаем код ошибки
							КодОшибки = РезультатОтправки.Result;
						КонецЕсли;							
					КонецЕсли;
					Если КодОшибки > 0 Тогда 
						// Запоминаем код созданной группы
						КодГруппы = РезультатОтправки.Group;
						// Записываем результат отправки каждого из сообщений
						КолвоОтправленных = РезультатОтправки.List.CheckSMSList.Количество();
						Для Счетчик = 1 По КолвоОтправленных Цикл
							ТекСообщение  = СписокСообщений.Получить((ТекущийИндекс - КолвоОтправленных) + Счетчик);
							ОтпрСообщение = РезультатОтправки.List.CheckSMSList.Получить(Счетчик - 1);
							Если ТекСообщение.GUID = ОтпрСообщение.G Тогда
								ТекСообщение.КодОшибки = ОтпрСообщение.R;
							КонецЕсли;
							// Есть ли неотправленные сообщения
							Если ТекСообщение.КодОшибки < 0 Тогда 
								ЕстьНеОтправленныеСообщения = Истина;
							КонецЕсли;
						КонецЦикла; 
						// Очищаем список отправленных сообщений
						СчетчикПакетаСообщений = 0;
						МассивСообщений.GroupSMSList.Очистить();
					Иначе	
						// Ошибка при отправке
						ЕстьНеОтправленныеСообщения = Ложь;
						Прервать;
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		// Если есть не отправленные, то повторяем отправку ещё один раз
		Если НЕ ЕстьНеОтправленныеСообщения Тогда Прервать; КонецЕсли; 
	КонецЦикла;
	Возврат КодОшибки;
КонецФункции // SMS4B_ОтправитьСообщения()

&НаСервере
// Функция предназначена для обновления статусов отправленных sms-сообщений. 
// Для получения статусов необходимо передать в метод массив структур, 
// содержащих GUID тех сообщений, которые необходимо проверить. При успешном 
// выполнении функции все переданные структуры в массиве будут дополнены 
// статусами соответствующих со-общений.
//
// Параметры:
//
//  СписокСообщений (массив) - 	В данный параметр при вызове метода помещается массив структур,
//								содержащих поля sms-сообщений, статус доставки которых необходимо
//								обновить. Статусы сообщений будут записываться при вызове метода 
// 								в поле структуры «СтатусСообщения» для каж-дого обрабатываемого
//								сообщения.
// 
// Возвращаемое значение (число):
// 
// Возвращает числовой код ошибки, 1 – если функция выполнена успешно, и 
// код ошибки < 0, если функция выполнена не успешно.
//
// Состояние сообщения с сервера возвращается в виде числа, представляющего собой бито-вую маску.
// Маска представляет собой сложение четырех наборов бит (всего 32 бита):
//
// Бит:	    31                            16 15 		   8 7             0
// Схема	|0|_|_|_|_|_|_|_|_|_|_|_|_|_|_|F|D|D|D|D|D|D|D|D|A|A|A|A|A|A|A|A| 
// Описание	        зарезервировано	      |   доставлено	|  всего частей
//
// Где,
// - один младший бит F в старшем слове - флаг завершения жизни sms (достижения конечно-го состояния);
// - один байт D - количество частей, доставленных, если требовалось уведомление о доставке, либо 
//   отправленных, если не требовалось;
// - один младший байт A - количество частей, принятых к отправке/доставке;
//
// Описание возвращаемых статусов сообщений:
//  1 - Доставка 
//  2 - В очереди
//  3 - Отправлено 
//  4 - Не отправлено
//  5 - Доставлено
//  6 - Не доставлено 
//  7 - Ошибка отправки 
//  8 - Получено 
//  9 - Частично получено
//
Функция SMS4B_ОбновитьСтатусы(СписокСообщений)
	КодОшибки = 1;
	// Количество сообщений у которых необходимо обновить статус
	КолвоСообщений = СписокСообщений.Количество();
	// Обработка сообщений
	СчетчикПакетаСообщений = 0;
	// Создаем WS-ссылку
	ВебСервис = SMS4B_ПодключитьВебСервис();
	Если ВебСервис = Неопределено Тогда
		SMS4B_ПоменятьСервер();
		ВебСервис = SMS4B_ПодключитьВебСервис();
		Если ВебСервис = Неопределено Тогда
			КодОшибки = -9;
			Возврат КодОшибки;
		КонецЕсли;	
	КонецЕсли;
	// Получаем фабрику XDTO
	Фабрика   = ВебСервис.ФабрикаXDTO;
	МассивСообщений = Фабрика.Создать(Фабрика.Тип("SMS client", "ArrayOfString"));
	// Размер пакета сообщений
	РазмерПакета = 200;
	// Обрабатываем список сообщений
	Для Каждого Сообщение Из СписокСообщений Цикл
		СчетчикПакетаСообщений = СчетчикПакетаСообщений + 1;
		// Добавляем GUID сообщения в массив
		МассивСообщений.string.Добавить(Сообщение.GUID);
		// Отправка пакета размером "РазмерПакета" (или 1 пакета с количеством меньше "РазмерПакета")
		// или остатка сообщений
		Если (СчетчикПакетаСообщений = РазмерПакета) ИЛИ (СчетчикПакетаСообщений = КолвоСообщений) Тогда
			КолвоСообщений = КолвоСообщений - РазмерПакета;
			Попытка	
				// Запрос статусов сообщений на сервере
				РезультатОтправки = ВебСервис.CheckSMS(ЭтаФорма.смсНомерСессии, МассивСообщений);
			Исключение
				РезультатОтправки = Неопределено;
			КонецПопытки; 
			Если РезультатОтправки = Неопределено Тогда
				// Проблема с интернетом (сервис не ответил)
				КодОшибки = -99999;
			Иначе	
				// Получаем код ошибки
				КодОшибки = РезультатОтправки.Result;
				Если (КодОшибки = -1) ИЛИ (КодОшибки = -2) Тогда
					// Если сессия устарела или её нет
					КодОшибки = SMS4B_Подключиться();
					Если КодОшибки > 0 Тогда
						// Пробуем получить ещё раз
						смсНомерСессии = КодОшибки;
						Попытка	
							// Запрос статусов сообщений на сервере
							РезультатОтправки = ВебСервис.CheckSMS(ЭтаФорма.смсНомерСессии, МассивСообщений);
						Исключение
							РезультатОтправки = Неопределено;
						КонецПопытки; 
						Если РезультатОтправки = Неопределено Тогда
							// Проблема с интернетом (сервис не ответил)
							КодОшибки = -99999;
						Иначе	
							// Получаем код ошибки
							КодОшибки = РезультатОтправки.Result;
						КонецЕсли;							
					КонецЕсли;							
				ИначеЕсли (КодОшибки > -20) И (КодОшибки < -2) Тогда
					// Возможно, что Основной сервер не доступен, пробудем переключится на резервный.
					SMS4B_ПоменятьСервер();						
					Попытка	
						// Запрос статусов сообщений на сервере
						РезультатОтправки = ВебСервис.CheckSMS(ЭтаФорма.смсНомерСессии, МассивСообщений);
					Исключение
						РезультатОтправки = Неопределено;
					КонецПопытки; 
					// Получим результат отправки
					Если РезультатОтправки = Неопределено Тогда
						// Проблема с интернетом (сервис не ответил)
						КодОшибки = -99999;
					Иначе	
						// Получаем код ошибки
						КодОшибки = РезультатОтправки.Result;
					КонецЕсли;							
				КонецЕсли;
				Если КодОшибки > 0 Тогда 
					// Получаем список со статусами
					СписокСтатусов = РезультатОтправки.List.CheckSMSList;
					Если Тип(СписокСтатусов) = ТипЗнч("ОбъектXDTO") Тогда
						НовыйСписок = Новый ТаблицаЗначений;
						НовыйСписок.Колонки.Добавить("G");
						НовыйСписок.Колонки.Добавить("R");
						НовСтрока = НовыйСписок.Добавить();
						НовСтрока.G = СписокСтатусов.G;
						НовСтрока.R = СписокСтатусов.R;
						СписокСтатусов = НовыйСписок;
					КонецЕсли;
					// Обрабатываем таблицу со статусами
					Для Каждого Строка Из СписокСтатусов Цикл
						// статус возвращается в виде числа представляющего из себя битовую маску
						КодСтатуса = Строка.R;
						ТекСтатус = "";
						ГУИДСообщения = Строка.G;
						ИскомаяСтрока = SMS4B_МассивСтруктурНайти(СписокСообщений, ГУИДСообщения);
						Если ИскомаяСтрока = Неопределено Тогда Продолжить; КонецЕсли; 
						// Ошибка 
						Если Число(КодСтатуса) < 0 Тогда
							ИскомаяСтрока.СтатусСообщения = КодСтатуса;
							Продолжить;
						КонецЕсли; 
						// Раскладываем битовую маску статуса
						к3 = Цел(КодСтатуса / 65536); // если нечетное то статус окончательный, 
													  // если четное - то ещё идет обработка сообщения
						к2 = Цел((КодСтатуса - (к3 * 65536)) / 256);       // количество доставленных частей
						к1 = Цел(КодСтатуса - (к3 * 65536) - (к2 * 256));  // количество частей всего
						// Вычисляем статус сообщения
						Если НЕ к3/2 = Цел(к3/2) Тогда // нечетное
							Если к1 = к2 Тогда
								Если к2 = 0 Тогда
									ТекСтатус = 7; // Ошибка
								Иначе 
									ТекСтатус = 5; // Доставлено
								КонецЕсли;
							Иначе
								Если ИскомаяСтрока.СтатусСообщения = 2 Тогда // статус "В очереди"
									ТекСтатус = 4; // Не отправлено
								ИначеЕсли ИскомаяСтрока.СтатусСообщения = 3 Тогда // статус "Отправлено"
									ТекСтатус = 6; // Не доставлено
								КонецЕсли;	
								Если к2 > 0 Тогда // Обработана часть(и) сообщения
									Если ИскомаяСтрока.СтатусСообщения = 2 Тогда // статус "В очереди"
										// "Отправлено частей " + Строка(к2) + " из " + Строка(к1));
									ИначеЕсли ИскомаяСтрока.СтатусСообщения = 3 Тогда // статус "Отправлено"
										// "Доставлено частей " + Строка(к2) + " из " + Строка(к1));
									КонецЕсли;	
								КонецЕсли;
							КонецЕсли;	
						Иначе // четное !!!
							Если к1 = к2 И ИскомаяСтрока.СтатусСообщения = 2 Тогда // статус "В очереди"
								ТекСтатус = 3; // Отправлено
							ИначеЕсли к2 = 0 ИЛИ (к3 = 0 И к2 < к1) Тогда
								ТекСтатус = 3; // Отправлено
							КонецЕсли;
						КонецЕсли;
						Если НЕ (ИскомаяСтрока = Неопределено) Тогда
							ИскомаяСтрока.СтатусСообщения = ТекСтатус;
						КонецЕсли;
					КонецЦикла; 
					СчетчикПакетаСообщений = 0;
					МассивСообщений.string.Очистить();
				Иначе
					Прервать;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	Возврат КодОшибки;
КонецФункции // SMS4B_ОбновитьСтатусы()

&НаСервере
// Процедура выполняет отключение от SMS4B
//
// Возвращаемое значение (число):
// 
// Возвращает числовой код ошибки, 1 – если функция выполнена успешно, 
// и код ошибки < 0, если функция выполнена не успешно.
//
Процедура SMS4B_Отключиться()
	ВебСервис = SMS4B_ПодключитьВебСервис();
	Если ВебСервис = Неопределено Тогда
		SMS4B_ПоменятьСервер();
		ВебСервис = SMS4B_ПодключитьВебСервис();
		Если ВебСервис = Неопределено Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	Попытка
		ВебСервис.CloseSession(ЭтаФорма.смсНомерСессии);
		ЭтаФорма.смсНомерСессии = 0;
	Исключение
	КонецПопытки;
КонецПроцедуры // SMS4B_Отключиться()

&НаКлиенте
// Функция выполняет транслитерацию переданного текста и возвращает результат
//этого преобразования.Для транслитерации используется последовательность GSM3.38.
// 
// Параметры:
//  Сообщение (строка) - Содержит текст для транслитерации
//
// Возвращаемое значение (строка):
//  Преобразованный в транслит текст.
Функция SMS4B_Транслитерация(Текст)
	// Заполняем список соответствий траслитерации
	СписокСоответствийТранслитерации = Новый СписокЗначений;
	СписокСоответствийТранслитерации.Добавить("а", "a");
	СписокСоответствийТранслитерации.Добавить("б", "b");
	СписокСоответствийТранслитерации.Добавить("в", "v");
	СписокСоответствийТранслитерации.Добавить("г", "g");
	СписокСоответствийТранслитерации.Добавить("д", "d");
	СписокСоответствийТранслитерации.Добавить("е", "e");
	СписокСоответствийТранслитерации.Добавить("ё", "yo");
	СписокСоответствийТранслитерации.Добавить("ж", "zh");
	СписокСоответствийТранслитерации.Добавить("з", "z");
	СписокСоответствийТранслитерации.Добавить("и", "i");
	СписокСоответствийТранслитерации.Добавить("й", "j");
	СписокСоответствийТранслитерации.Добавить("к", "k");
	СписокСоответствийТранслитерации.Добавить("л", "l");
	СписокСоответствийТранслитерации.Добавить("м", "m");
	СписокСоответствийТранслитерации.Добавить("н", "n");
	СписокСоответствийТранслитерации.Добавить("о", "o");
	СписокСоответствийТранслитерации.Добавить("п", "p");
	СписокСоответствийТранслитерации.Добавить("р", "r");
	СписокСоответствийТранслитерации.Добавить("с", "s");
	СписокСоответствийТранслитерации.Добавить("т", "t");
	СписокСоответствийТранслитерации.Добавить("у", "u");
	СписокСоответствийТранслитерации.Добавить("ф", "f");
	СписокСоответствийТранслитерации.Добавить("х", "x"); 
	СписокСоответствийТранслитерации.Добавить("ц", "c"); 
	СписокСоответствийТранслитерации.Добавить("ч", "ch");
	СписокСоответствийТранслитерации.Добавить("ш", "sh");
	СписокСоответствийТранслитерации.Добавить("щ", "shh"); 
	СписокСоответствийТранслитерации.Добавить("ъ", "''");
	СписокСоответствийТранслитерации.Добавить("Ъ", "''");
	СписокСоответствийТранслитерации.Добавить("ы", "y");
	СписокСоответствийТранслитерации.Добавить("Ы", "Y");
	СписокСоответствийТранслитерации.Добавить("ь", "'");
	СписокСоответствийТранслитерации.Добавить("Ь", "'");
	СписокСоответствийТранслитерации.Добавить("э", "e");
	СписокСоответствийТранслитерации.Добавить("ю", "yu");
	СписокСоответствийТранслитерации.Добавить("я", "ya");
	СписокСоответствийТранслитерации.Добавить("А", "A");
	СписокСоответствийТранслитерации.Добавить("Б", "B");
	СписокСоответствийТранслитерации.Добавить("В", "V");
	СписокСоответствийТранслитерации.Добавить("Г", "G");
	СписокСоответствийТранслитерации.Добавить("Д", "D");
	СписокСоответствийТранслитерации.Добавить("Е", "E");
	СписокСоответствийТранслитерации.Добавить("Ё", "Yo");
	СписокСоответствийТранслитерации.Добавить("Ж", "Zh");
	СписокСоответствийТранслитерации.Добавить("З", "Z");
	СписокСоответствийТранслитерации.Добавить("И", "I");
	СписокСоответствийТранслитерации.Добавить("Й", "J");
	СписокСоответствийТранслитерации.Добавить("К", "K");
	СписокСоответствийТранслитерации.Добавить("Л", "L");
	СписокСоответствийТранслитерации.Добавить("М", "M");
	СписокСоответствийТранслитерации.Добавить("Н", "N");
	СписокСоответствийТранслитерации.Добавить("О", "O");
	СписокСоответствийТранслитерации.Добавить("П", "P");
	СписокСоответствийТранслитерации.Добавить("Р", "R");
	СписокСоответствийТранслитерации.Добавить("С", "S");
	СписокСоответствийТранслитерации.Добавить("Т", "T");
	СписокСоответствийТранслитерации.Добавить("У", "U");
	СписокСоответствийТранслитерации.Добавить("Ф", "F");
	СписокСоответствийТранслитерации.Добавить("Х", "X");
	СписокСоответствийТранслитерации.Добавить("Ц", "C");
	СписокСоответствийТранслитерации.Добавить("Ч", "Ch");
	СписокСоответствийТранслитерации.Добавить("Ш", "Sh");
	СписокСоответствийТранслитерации.Добавить("Щ", "Shh");
	СписокСоответствийТранслитерации.Добавить("Э", "E");
	СписокСоответствийТранслитерации.Добавить("Ю", "Yu");
	СписокСоответствийТранслитерации.Добавить("Я", "Ya");
	СписокСоответствийТранслитерации.Добавить("«", "<");
	СписокСоответствийТранслитерации.Добавить("»", ">");
	СписокСоответствийТранслитерации.Добавить("№", "N");
	СписокСоответствийТранслитерации.Добавить("{", "(");
	СписокСоответствийТранслитерации.Добавить("[", "(");
	СписокСоответствийТранслитерации.Добавить("}", ")");
	СписокСоответствийТранслитерации.Добавить("]", ")");
	СписокСоответствийТранслитерации.Добавить("\", "/");
	СписокСоответствийТранслитерации.Добавить("|", "I");
	СписокСоответствийТранслитерации.Добавить("^", "'");
	СписокСоответствийТранслитерации.Добавить("_", "-");
	СписокСоответствийТранслитерации.Добавить("~", "-");
	СписокСоответствийТранслитерации.Добавить("`", "'");
	СписокСоответствийТранслитерации.Добавить(Символы.НПП, " ");
	// Заполняем список соответствий символов
	СписокСоответствийСимволов = Новый СписокЗначений;
	СписокСоответствийСимволов.Добавить(91,"(");
	СписокСоответствийСимволов.Добавить(92,"/");
	СписокСоответствийСимволов.Добавить(93,")");
	СписокСоответствийСимволов.Добавить(94,"'");
	СписокСоответствийСимволов.Добавить(95,"-");
	СписокСоответствийСимволов.Добавить(96,"'");
	СписокСоответствийСимволов.Добавить(123,"(");
	СписокСоответствийСимволов.Добавить(124,"!");
	СписокСоответствийСимволов.Добавить(125,")");
	СписокСоответствийСимволов.Добавить(126,"-");
	СписокСоответствийСимволов.Добавить(127," ");
	СписокСоответствийСимволов.Добавить(130,",");
	СписокСоответствийСимволов.Добавить(132,"""");
	СписокСоответствийСимволов.Добавить(133,"...");
	СписокСоответствийСимволов.Добавить(136,"'");
	СписокСоответствийСимволов.Добавить(137,"%");
	СписокСоответствийСимволов.Добавить(139,"<");
	СписокСоответствийСимволов.Добавить(145,"'");
	СписокСоответствийСимволов.Добавить(146,"'");
	СписокСоответствийСимволов.Добавить(147,"""");
	СписокСоответствийСимволов.Добавить(148,"""");
	СписокСоответствийСимволов.Добавить(149,"-");
	СписокСоответствийСимволов.Добавить(150,"-");
	СписокСоответствийСимволов.Добавить(151,"-");
	СписокСоответствийСимволов.Добавить(152,"-");
	СписокСоответствийСимволов.Добавить(155,">");
	СписокСоответствийСимволов.Добавить(160," ");
	СписокСоответствийСимволов.Добавить(161,"!");
	СписокСоответствийСимволов.Добавить(166,"!");
	СписокСоответствийСимволов.Добавить(168,"""");
	СписокСоответствийСимволов.Добавить(169,"(C)");
	СписокСоответствийСимволов.Добавить(171,"<");
	СписокСоответствийСимволов.Добавить(172,"");
	СписокСоответствийСимволов.Добавить(173,"-");
	СписокСоответствийСимволов.Добавить(174,"(R)");
	СписокСоответствийСимволов.Добавить(175,"-");
	СписокСоответствийСимволов.Добавить(176,"'");
	СписокСоответствийСимволов.Добавить(180,"'");
	СписокСоответствийСимволов.Добавить(183,"-");
	СписокСоответствийСимволов.Добавить(185,"N");
	СписокСоответствийСимволов.Добавить(187,">");
	СписокСоответствийСимволов.Добавить(8218,",");
	СписокСоответствийСимволов.Добавить(8222,"""");
	СписокСоответствийСимволов.Добавить(8230,"...");
	СписокСоответствийСимволов.Добавить(8265,"'");
	СписокСоответствийСимволов.Добавить(8240,"%");
	СписокСоответствийСимволов.Добавить(8249,"<");
	СписокСоответствийСимволов.Добавить(8216,"'");
	СписокСоответствийСимволов.Добавить(8217,"'");
	СписокСоответствийСимволов.Добавить(8220,"""");
	СписокСоответствийСимволов.Добавить(8221,"""");
	СписокСоответствийСимволов.Добавить(8208,"-");
	СписокСоответствийСимволов.Добавить(8209,"-");
	СписокСоответствийСимволов.Добавить(8210,"-");
	СписокСоответствийСимволов.Добавить(8211,"-");
	СписокСоответствийСимволов.Добавить(8212,"-");
	СписокСоответствийСимволов.Добавить(8213,"-");
	СписокСоответствийСимволов.Добавить(732,"-");
	СписокСоответствийСимволов.Добавить(8250,">");
	СписокСоответствийСимволов.Добавить(8232," ");
	СписокСоответствийСимволов.Добавить(8254,"-");
	СписокСоответствийСимволов.Добавить(8226,"-");
	СписокСоответствийСимволов.Добавить(8470,"N");
	СписокСоответствийСимволов.Добавить(8219,"'");
	СписокСоответствийСимволов.Добавить(8223,"""");
	СписокСоответствийСимволов.Добавить(8228,".");
	СписокСоответствийСимволов.Добавить(8231,"-");
	СписокСоответствийСимволов.Добавить(8263,"-");
	СписокСоответствийСимволов.Добавить(8259,"-");
	СписокСоответствийСимволов.Добавить(8260,"/");
	СписокСоответствийСимволов.Добавить(8962," ");
	// Формируем текст
	РезультирующийТекст = "";
	// Общая длина текста
	ДлинаТекста = СтрДлина(Текст);
	// Транслитерируем
	Для Сч = 1 По ДлинаТекста Цикл
		// Получаем код текущего символа
		КодСимвола = КодСимвола(Текст, Сч);
		// Проверяем что текущий символ заглавная буква
		РусскаяЗаглавная = Ложь;
		Если (КодСимвола > 1039 И КодСимвола < 1072) ИЛИ (КодСимвола = 1025) Тогда
			РусскаяЗаглавная = Истина;
		КонецЕсли;
		Символ = Сред(Текст, Сч, 1);
		// Ищем в таблице соответствие
		Соответствие = СписокСоответствийТранслитерации.НайтиПоЗначению(Символ);
		// Если нашли
		Если Соответствие = Неопределено Тогда
			Соответствие = СписокСоответствийСимволов.НайтиПоЗначению(КодСимвола);
			Если Соответствие = Неопределено Тогда
				// Остальные симоволы остаются без изменений 
				Если НЕ Найти(" !@#$%&'""()*+,-./0123456789:;<=>?ABCDEFGIKLMNJOPQRSTUVWXYZHabcdefgiklmnjopqrstuvwxyzh" + Символы.ПС + Символы.Таб + Символы.ВК, Символ) Тогда
					Символ = "?"; // Меняем неизвестный символ на "?"
				КонецЕсли;
			Иначе	
				Символ = Соответствие.Представление;
			КонецЕсли;
		Иначе	
			// Меняем символ
			Символ = Соответствие.Представление;
			Если РусскаяЗаглавная Тогда
				ПервыйСимвол = Сред(Символ, 1, 1);
				Символ = СтрЗаменить(Символ, ПервыйСимвол, ВРег(ПервыйСимвол));
			КонецЕсли;
		КонецЕсли;
		// Результат транслитерации
		РезультирующийТекст = РезультирующийТекст + Символ;
	КонецЦикла;
	Возврат РезультирующийТекст;
КонецФункции // SMS4B_Транслитерация()	

&НаСервереБезКонтекста
// Функция преобразует таблицу значений в массив структур 
Функция SMS4B_ТаблицаЗначенийВМассивСтруктур(ТаблицаЗначений)
	Результат = Новый Массив;
	// Обходим таблицу значений
	Для Каждого Строка Из ТаблицаЗначений Цикл
		// Создаем структуру
		Свойства = Новый Структура;
		// Заполняем структуру колонками таблицы значений
		Для каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			Свойства.Вставить(Колонка.Имя, Строка[Колонка.Имя]);
		КонецЦикла;
		// Добавляем созданную структуру в таблицу значений
		Результат.Добавить(Свойства);
	КонецЦикла;
	Возврат Результат;
КонецФункции // SMS4B_ТаблицаЗначенийВМассивСтруктур()

&НаСервереБезКонтекста
// Функция возвращает массив доступных номеров отправителя из строки
//
// Параметры:
//	НомерОтправителя - Строка	- Строка, содержащая список номеров
//
// Возвращаемое значение:
//	Массив	- Массив номеров отправителя
//
Функция  SMS4B_ПолучитьМассивНомеровИзСтроки(НомерОтправителя)
	// Создаем массив
	МассивВозврата = Новый Массив;
	// Берем строку с номерами
	ТекстКонстанты = СокрЛП(СтрЗаменить(НомерОтправителя, Символы.ВК, ""));
	Пока НЕ ПустаяСтрока(ТекстКонстанты) Цикл
		// Ищем позицию разделителя
		НомерРазделителя = Найти(ТекстКонстанты, Символы.ПС);
		Если НомерРазделителя = 0 Тогда // всего один номер
			МассивВозврата.Добавить(СокрЛП(ТекстКонстанты));
			ТекстКонстанты = "";	
		Иначе // если больше одного
			// Получаем номер
			ЛевСтрокаНомера = Лев(ТекстКонстанты, НомерРазделителя - 1);
			// Добавляем в список
			МассивВозврата.Добавить(СокрЛП(ЛевСтрокаНомера));
			Если НомерРазделителя = СтрДлина(ТекстКонстанты) Тогда
				ТекстКонстанты = "";	
			Иначе	
				ТекстКонстанты = Сред(ТекстКонстанты, НомерРазделителя + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат МассивВозврата;
КонецФункции //  SMS4B_ПолучитьМассивНомеровИзСтроки()

&НаСервереБезКонтекста
// Функция получает описание ошибки по ее коду
// 
// Параметры:
//	КодОшибки	- Число	- Код ошибки
//
// Возвращаемое значение:
//	Строка	- Текст сообщения об ошибке
//
Функция SMS4B_ОписаниеОшибокВебСервиса(КодОшибки)
	Если КодОшибки = 0 Тогда
		ТекстСообщить = "ru = ""Превышен предел открытых сессий!""";
	ИначеЕсли КодОшибки = -1 Тогда
		ТекстСообщить = "ru = ""Неверный логин или пароль (Необходимо использовать пароль для доступа к SMS сервису из внешних программ)!""";
	ИначеЕсли КодОшибки = -2 Тогда
		ТекстСообщить = "ru = ""Сессия закрыта!""";
	ИначеЕсли КодОшибки = -9 Тогда
		ТекстСообщить = "ru = ""Отказ сервера!""";
	ИначеЕсли КодОшибки = -10 Тогда
		ТекстСообщить = "ru = ""Неизвестная ошибка сервера!""";
	ИначеЕсли КодОшибки = -20 Тогда
		ТекстСообщить = "ru = ""Сбой сеанса связи!""";
	ИначеЕсли КодОшибки = -21 Тогда
		ТекстСообщить = "ru = ""Сообщение не идентифицировано!""";
	ИначеЕсли КодОшибки = -22 Тогда
		ТекстСообщить = "ru = ""Неверный идентификатор сообщения!""";
	ИначеЕсли КодОшибки = -23 Тогда
		ТекстСообщить = "ru = ""Неверный параметр - GMT""";
	ИначеЕсли КодОшибки = -30 Тогда
		ТекстСообщить = "ru = ""Неизвестная кодировка сообщения! (не заполнен текст сообщения)""";
	ИначеЕсли КодОшибки = -31 Тогда
		ТекстСообщить = "ru = ""Неразрешенная зона тарификации!""";
	ИначеЕсли КодОшибки = -32 Тогда
		ТекстСообщить = "ru = ""Неверный параметр - дата начала или окончания доставки сообщения!""";
	ИначеЕсли КодОшибки = -33 Тогда
		ТекстСообщить = "ru = ""Превышение длительности доставки!""";
	ИначеЕсли КодОшибки = -34 Тогда
		ТекстСообщить = "ru = ""Превышение срока актуальности доставки!""";
	ИначеЕсли КодОшибки = -35 Тогда
		ТекстСообщить = "ru = ""Неверный параметр - период доставки сообщения!""";
	ИначеЕсли КодОшибки = -36 Тогда
		ТекстСообщить = "ru = ""Неизвестный код группы!""";
	ИначеЕсли КодОшибки = -50 Тогда
		ТекстСообщить = "ru = ""Неверный отправитель!""";
	ИначеЕсли КодОшибки = -51 Тогда
		ТекстСообщить = "ru = ""Неразрешенный получатель!""";
	ИначеЕсли КодОшибки = -52 Тогда
		ТекстСообщить = "ru = ""Недостаточно средств на Вашем счете!""";
	ИначеЕсли КодОшибки = -53 Тогда
		ТекстСообщить = "ru = ""Незарегистрированный отправитель!""";
	ИначеЕсли (КодОшибки < -53) И (КодОшибки > -60) Тогда
		ТекстСообщить = "ru = ""Таймаут изменения счета!""";
	ИначеЕсли КодОшибки = -66 Тогда
		ТекстСообщить = "ru = ""Не задан отправитель!""";
	ИначеЕсли КодОшибки = -67 Тогда
		ТекстСообщить = "ru = ""Превышение сроков отправки""";
	ИначеЕсли КодОшибки = -68 Тогда
		ТекстСообщить = "ru = ""Пользователь заблокирован!""";
	ИначеЕсли КодОшибки = -99999 Тогда
		ТекстСообщить = "ru = ""Ошибка соединения (нет доступа к интернету или не указаны настройки прокси-сервера)!""";
	Иначе
		ТекстСообщить = "ru = ""Неизвестная ошибка... код ошибки: " + Строка(КодОшибки) + "!""";
	КонецЕсли;
	Возврат НСтр(ТекстСообщить);
КонецФункции // SMS4B_ОписаниеОшибокВебСервиса()

&НаСервере
// Функция приводит переданную дату к времени UTC  
//
// Параметры:
//  Дата		- ДатаВремя	- Дата которую корректируем
//  Вычитать	- Булево	- Признак знака корректировки, для входящих сообщений указывать Ложь, для Исходящих Истина
//
// Возвращаемое значение:
//	Дата	- Дата, приведенная к UTC
//
Функция SMS4B_ПривестиДатуКUTC(Дата, Вычитать = Истина)
	// Если сообщение входящее то время надо прибавить!
	Если Вычитать Тогда
		Возврат Дата - ЭтаФорма.смсКорректировкаUTC;
	Иначе 
		Возврат Дата + ЭтаФорма.смсКорректировкаUTC;
	КонецЕсли; 
КонецФункции // SMS4B_ПривестиДатуКUTC()

&НаСервереБезКонтекста
// Функция определяет какую кодировку необходимо пременять к тексту сообщения
//
// Параметры:
//	Сообщение	- Строка	- Текст сообщения
//
// Возвращаемое значение:
//	Число	- Вид кодировки	- 0 - латинский, 1 - другие алфавиты, в т.ч. русский
//
Функция SMS4B_Использовать7БитСообщение(Сообщение) Экспорт
	ДлинаСообщения = СтрДлина(Сообщение);
	Результат = 0;
	Для К = 1 По ДлинаСообщения Цикл
		ТекСимвол = Сред(Сообщение, К, 1);
		Если ТекСимвол = "@" Тогда
			Продолжить;
		ИначеЕсли ТекСимвол = "$" Тогда
			Продолжить;
		ИначеЕсли КодСимвола(ТекСимвол) > 122 Тогда
  			Результат = 1;
			Прервать;
		ИначеЕсли КодСимвола(ТекСимвол) > 96 Тогда
			Продолжить;
		ИначеЕсли  КодСимвола(ТекСимвол) > 91 Тогда
  			Результат = 1;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	Возврат Результат;
КонецФункции // SMS4B_Использовать7БитСообщение()

//////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ МЕТОДЫ ЯДРА

&НаСервере
// Функция осуществляет поиск значения в массиве структур
//
// Параметры:
//	Массив		- Массив	- Массив строк табличной части
//	Значение	- Строка	- Строка поиска
//
// Возвращаемое значение:
//	СтрокаТабличнойЧасти	- Найденная строка
//
Функция SMS4B_МассивСтруктурНайти(Массив, Значение)
	Для Каждого Строка Из Массив Цикл
		Если Строка.GUID = Значение Тогда
			Возврат Строка;
		КонецЕсли; 
	КонецЦикла;
	Возврат Неопределено;
КонецФункции // SMS4B_МассивСтруктурНайти()

&НаСервере
// Функция выполняет подключение к ВебСервису
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	WS-ссылка	- Ссылка на ВебСервис
//
Функция SMS4B_ПодключитьВебСервис()
	Попытка
		Если смсОсновнойСервер Тогда
			// Основной сервер
			Определения = Новый WSОпределения("https://sms4b.ru/webservices/sms.asmx?WSDL", Объект.смсИмяПользователя, Объект.смсПарольПользователя);
			ВебСервис = Новый WSПрокси(Определения, "SMS client", "WSSM", "WSSMSoap12");
		Иначе
			// Резервный сервер
			Определения = Новый WSОпределения("https://s.sms4b.ru/webservices/sms.asmx?WSDL", Объект.смсИмяПользователя, Объект.смсПарольПользователя);
			ВебСервис = Новый WSПрокси(Определения, "SMS client", "WSSM", "WSSMSoap12");
		КонецЕсли; 
	Исключение
		Возврат Неопределено;
	КонецПопытки; 
	Возврат ВебСервис;
КонецФункции // SMS4B_ПодключитьВебСервис()

&НаСервере
// Процедура меняет основной сервер
//
// Параметры:
//	Нет.
//
Процедура SMS4B_ПоменятьСервер()
	ЭтаФорма.смсОсновнойСервер = НЕ ЭтаФорма.смсОсновнойСервер;
КонецПроцедуры // SMS4B_ПоменятьСервер()

&НаСервереБезКонтекста
// Функция возвращает версию ядра
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Строка	- Номер версии ядра
//
Функция SMS4B_ВернутьВерсиюЯдра()
	Возврат "2.0.2.1";
КонецФункции // SMS4B_ВернутьВерсиюЯдра()

&НаСервереБезКонтекста
// Функция переводит дату из текстовый формат вида 'YYYYMMDD hh:mm:ss' в канонический формат
//
// Параметры:
//	СтрокаДаты	- Строка	- Строка даты
//
// Возвращаемое значение:
//	Дата	- Дата
//
Функция SMS4B_СтрокаВДату(СтрокаДаты)
	Стр = СтрЗаменить(СтрокаДаты, "-", "");
	Стр = СтрЗаменить(Стр, ":", "");
	Стр = СтрЗаменить(Стр, " ", "");
	Возврат Дата(Стр);
КонецФункции // SMS4B_СтрокаВДату()

&НаСервереБезКонтекста
// Функция переводит дату в формате 1С в международный текстовый формат 
// вида 'YYYYMMDD hh:mm:ss'
//
// Параметры:
//	СтруктураДаты - Структура - Структура, содержащая дату и количество миллисекунд
//	
// Возвращаемое значение:
//	Строка	- Дата в международном текстовом формате
//
Функция SMS4B_ДатаВСтроку(СтруктураДаты)
	Если ТипЗнч(СтруктураДаты) = Тип("Структура") Тогда 
		Дата1С			= СтруктураДаты.Дата;
		Миллисекунда1С	= СтруктураДаты.Миллисекунда;
	Иначе
		Дата1С			= СтруктураДаты;
		Миллисекунда1С	= 0;
	КонецЕсли;
	Если Дата1С = Дата('00010101') Тогда
		Результат = "";
	Иначе
		Результат = Формат(Год(Дата1С), "ЧГ=0") 
		+ ?(СтрДлина(Строка(Месяц(Дата1С))) < 2,"0" + Строка(Месяц(Дата1С)) , Строка(Месяц(Дата1С)))
		+ ?(СтрДлина(Строка(День(Дата1С))) < 2, "0" + Строка(День(Дата1С)), Строка(День(Дата1С))) + " "
		+ ?(СтрДлина(Строка(Час(Дата1С))) < 2, "0" + Строка(Час(Дата1С)), Строка(Час(Дата1С))) + ":" 
		+ ?(СтрДлина(Строка(Минута(Дата1С))) < 2, "0" + Строка(Минута(Дата1С)), Строка(Минута(Дата1С))) + ":"
		+ ?(СтрДлина(Строка(Секунда(Дата1С))) < 2, "0" + Строка(Секунда(Дата1С)), Строка(Секунда(Дата1С)))+ "."	
		+ Строка(Миллисекунда1С);
	КонецЕсли;	
	Возврат Результат;
КонецФункции // SMS4B_ДатаВСтроку()

&НаСервереБезКонтекста
// Процедура выводит переданное сообщение
//
// Параметры:
//	Сообщение	- Строка					- Текст сообщения
//	Статус		- СтатусСообщения			- Статус сообщения
//	Заголовок	- Строка					- Событие для журнала регистрации
//	Уровень		- УровеньЖурналаРегистрации	- Уровень для журнала регистрации
//
Процедура SMS4B_ВывестиСообщение(Сообщение, Статус)
	Сообщить(Сообщение, Статус);
КонецПроцедуры // SMS4B_ВывестиСообщение()

&НаСервереБезКонтекста
// Функция возвращает символьное представление разрешенного периода отправки
//
// Параметры:
//	НачалоПериода	- Дата	- Дата начала разрешенного периода
//	КонецПериода	- Дата	- Дата конца разрешенного периода
//
// Возвращаемое значение:
//	Строка	- Символьное представление разрешенного периода отправки
//
Функция SMS4B_ПолучитьРазрешенныйПериодОтправки(НачалоПериода, КонецПериода)
	СимволНачала	= Символ(65 + Час(КонецПериода));
	СимволКонца		= Символ(65 + Час(НачалоПериода-3600));
	СтрокаВозврата	= СимволНачала + СимволКонца;
	Если Найти("XWVUTSRQPONMLKJIHGFEDCBAX", СтрокаВозврата) > 0 Тогда
		СтрокаВозврата	= "";
	КонецЕсли;	
	Возврат СтрокаВозврата;
КонецФункции // SMS4B_ПолучитьРазрешенныйПериодОтправки()	

//////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СТРОКАМИ

&НаСервереБезКонтекста
// Функция дополняет строку до указанной длины определенным символов
//
// Параметры:
//	Стр		- Строка	- Строка
//	Длина	- Число		- Длина строки
//	Чем		- Строка	- Символ для добавления
//
// Возвращаемое значение:
//	Строка	- Строка, дополненная до указанной длины
//
Функция SMS4B_ДополнитьСтроку(Знач Стр, Длина, Чем = " ")  // Padl
	СимволовДополнить = Длина - СтрДлина(Стр);
	Добавок = "";
	Для Н = 1 По СимволовДополнить Цикл
		Добавок = Добавок + Чем;
	КонецЦикла;
	Возврат  Добавок + Стр;
КонецФункции // SMS4B_ДополнитьСтроку()

&НаСервереБезКонтекста
// Функция переводит десятичное число в шестнадцатеричное
//
// Параметры:
//	Число	- Число	- Десятичное число
//
// Возвращаемое значение:
//	Строка	- Шестнадцатеричное число
//
Функция SMS4B_ДесятичноеВШестнадцатеричное(Знач _Число) // DecToHex
	База = 16;
	Результат = "";
	Пока _Число <> 0 Цикл
		Поз =_Число % База;
		Результат = Сред("0123456789ABCDEF", Поз + 1, 1) + Результат;
		_Число = Цел(_Число / База);
	КонецЦикла;
	Возврат Результат;
КонецФункции // SMS4B_ДесятичноеВШестнадцатеричное()

&НаСервереБезКонтекста
// Функция переводит шестнадцатеричное число в десятичное
//
// Параметры:
//	_Hex	- Строка	- Шестнадцатеричное число
//
// Возвращаемое значение:
//	Число	- Десятичное число
//
Функция SMS4B_ШестнадцатеричноеЧислоВДесятичное(Знач _Hex) // HexToDec
	База = 16;
	_Hex = СокрЛП(_Hex);
	СтаршаяСтепень = СтрДлина(_Hex) - 1;
	Результат = 0;
	счСимволов = 1;
	Пока СтаршаяСтепень >=0 Цикл
		_HexСимвол = Сред(_Hex, счСимволов, 1);
		Представление = Найти("0123456789ABCDEF", _HexСимвол) - 1;
		Результат = Результат + Представление * Pow(База, СтаршаяСтепень);
		СтаршаяСтепень = СтаршаяСтепень - 1;
		СчСимволов = СчСимволов + 1;
	КонецЦикла;	
	Возврат Результат;
КонецФункции // SMS4B_ШестнадцатеричноеЧислоВДесятичное()

&НаСервереБезКонтекста
// Функция переводит обычную строку в шестнадцатеричное представление
//
// Параметры:
//	ТекстСообщения	- Строка	- Текст сообщения
//	ТипКодировки	- Число		- Тип кодировки (1 - каждый символ 
//								  представляется 2 байтами, 0 - 1 байтом)
//
// Возвращаемое значение:
//	Строка	- Строка после перекодировки
//
Функция SMS4B_СтрокуВШестнадцатеричноеПредставление(ТекстСообщения, ТипКодировки) // Str2Hex
	СтрокаЗнаков = "";
	Если ТипКодировки = 1 Тогда
		ДлинаКодаСимвола = 4;
	Иначе
		ДлинаКодаСимвола = 2;
	КонецЕсли;
	Для К = 1 По СтрДлина(ТекстСообщения) Цикл
		СтрокаЗнаков = СтрокаЗнаков + SMS4B_ДополнитьСтроку(SMS4B_ДесятичноеВШестнадцатеричное(КодСимвола(Сред(ТекстСообщения, К, 1))), ДлинаКодаСимвола, "0");
	КонецЦикла;
	Возврат СтрокаЗнаков;
КонецФункции // SMS4B_СтрокуВШестнадцатеричноеПредставление()

&НаСервереБезКонтекста
// Функция переводит cтроку из шестнадцатеричного представления в обычную строку
//
// Параметры:
//	СтрокаСимволов	- Строка	- Текст в шестнадцатеричном виде
//	ПризнакКода		- Строка	- Тип кодировки ("0" - каждый символ 
//								  представляется 1 байтами, "1" - 2 байтами)
//
// Возвращаемое значение:
//	Строка	- Строка после перекодировки
//
Функция SMS4B_СтрокуВОбычноеПредставление(СтрокаСимволов, ПризнакКода) // StrHexToStr
	Если Число(ПризнакКода) = 0 Тогда
		КоличествоСимволов = 2;
	Иначе
		КоличествоСимволов = 4;
	КонецЕсли;
	к = 1;
	Результат = "";
	Пока к < СтрДлина(СтрокаСимволов) Цикл
		Строка = Сред(СтрокаСимволов, к, КоличествоСимволов);
		Результат = Результат + Символ(SMS4B_ШестнадцатеричноеЧислоВДесятичное(Строка));
		к = к + КоличествоСимволов;
	КонецЦикла;
	Возврат Результат;
КонецФункции // SMS4B_СтрокуВОбычноеПредставление()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция предназначена для перевода числового кода статуса в перечисление 
//
// Параметры:
//	КодСтатуса	- Число	- Числовой код статуса.
// 
// Возвращаемое значение:
//	Строка	- Строковое представление статуса
//
Функция SMS4B_КодВСтатус(КодСтатуса)
	Если КодСтатуса = 1 Тогда
		Статус = "Доставка";
	ИначеЕсли КодСтатуса = 2 Тогда 
		Статус = "В очереди";
	ИначеЕсли КодСтатуса = 3 Тогда 
		Статус = "АдресныйКлассификаторОтправлено";
	ИначеЕсли КодСтатуса = 4 Тогда 
		Статус = "Не отправлено";
	ИначеЕсли КодСтатуса = 5 Тогда 
		Статус = "Доставлено";
	ИначеЕсли КодСтатуса = 6 Тогда 
		Статус = "Не доставлено";
	ИначеЕсли КодСтатуса = 7 Тогда 
		Статус = "Ошибка";
	ИначеЕсли КодСтатуса = 8 Тогда 
		Статус = "Получено";
	ИначеЕсли КодСтатуса = 9 Тогда 
		Статус = "Получено частично";
	Иначе	
		Статус = "";
	КонецЕсли; 
	Возврат Статус;
КонецФункции // SMS4B_КодВСтатус()

// Функция предназначена для перевода статуса в числовое представление  
//
// Параметры:
//	Статус	- Строка	- Строковое представление статуса
// 
// Возвращаемое значение:
// 	Число	- Числовое представление статуса
//
Функция SMS4B_СтатусВКод(Статус)
	Если Статус = "Доставка" Тогда
		КодСтатуса = 1;
	ИначеЕсли Статус = "В очереди" Тогда
		КодСтатуса = 2;
	ИначеЕсли Статус = "Отправлено" Тогда
		КодСтатуса = 3;
	ИначеЕсли Статус = "Не отправлено" Тогда
		КодСтатуса = 4;
	ИначеЕсли Статус = "Доставлено" Тогда
		КодСтатуса = 5;
	ИначеЕсли Статус = "Не доставлено" Тогда
		КодСтатуса = 6;
	ИначеЕсли Статус = "Ошибка" Тогда
		КодСтатуса = 7;
	ИначеЕсли Статус = "Получено" Тогда
		КодСтатуса = 8;
	ИначеЕсли Статус = "Получено частично" Тогда
		КодСтатуса = 9;
	Иначе	
		КодСтатуса = 0;
	КонецЕсли; 
	Возврат КодСтатуса;
КонецФункции // SMS4B_СтатусВКод()

 &НаКлиенте
 // Функция возвращает структуру настроек
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Структура	- Структура настроек
//
Функция SMS4B_ПолучитьСтруктуруНастроек()
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("смсДатаПолученияСМС",				Объект.смсДатаПолученияСМС);
	СтруктураНастроек.Вставить("смсИмяПользователя",				Объект.смсИмяПользователя);
	СтруктураНастроек.Вставить("смсИмяПользователяПоУмолчанию",		Объект.смсИмяПользователяПоУмолчанию);
	СтруктураНастроек.Вставить("смсИспользоватьПроксиСервер",		смсИспользоватьПроксиСервер);
	СтруктураНастроек.Вставить("смсКоличествоНомеров",				смсКоличествоНомеров);
	СтруктураНастроек.Вставить("смсКонецПериодаЗапрета",			Объект.смсКонецПериодаЗапрета);
	СтруктураНастроек.Вставить("смсМаксАктуальностьДоставки",		смсМаксАктуальностьДоставки);
	СтруктураНастроек.Вставить("смсМаксДлительностьДоставки",		смсМаксДлительностьДоставки);
	СтруктураНастроек.Вставить("смсНачалоПериодаЗапрета",			Объект.смсНачалоПериодаЗапрета);
	СтруктураНастроек.Вставить("смсНеОтправлятьSMS",				Объект.смсНеОтправлятьSMS);
	СтруктураНастроек.Вставить("смсНомераОтправителя",				смсНомераОтправителя);
	СтруктураНастроек.Вставить("смсНомерСессии",					смсНомерСессии);
	СтруктураНастроек.Вставить("смсНомерЯдра",						смсНомерЯдра);
	СтруктураНастроек.Вставить("смсОсновнойСервер",					смсОсновнойСервер);
	СтруктураНастроек.Вставить("смсОстатокСМС",						смсОстатокСМС);
	СтруктураНастроек.Вставить("смсПарольПользователя",				Объект.смсПарольПользователя);
	СтруктураНастроек.Вставить("смсПолучатьТолькоПолныеСообщения",	Объект.смсПолучатьТолькоПолныеСообщения);
	СтруктураНастроек.Вставить("смсПроксиПароль",					Объект.смсПроксиПароль);
	СтруктураНастроек.Вставить("смсПроксиПользователь",				Объект.смсПроксиПользователь);
	СтруктураНастроек.Вставить("смсПроксиПорт",						Объект.смсПроксиПорт);
	СтруктураНастроек.Вставить("смсПроксиСервер",					Объект.смсПроксиСервер);
	СтруктураНастроек.Вставить("смсСрокЖизниSMS",					Объект.смсСрокЖизниSMS);
	Возврат СтруктураНастроек;
КонецФункции // SMS4B_ПолучитьСтруктуруНастроек()

 &НаСервере
 // Процедура обновлет данные из структуры отчета
 //
 // Параметры:
 //	СтруктураНастроек	- Структура	- Структура настроек
 //
Процедура SMS4B_ЗаписатьСтруктуруНастроек(СтруктураНастроек)
	ЗначениеОбъекта = РеквизитФормыВЗначение("Объект");
	Если СтруктураНастроек.Свойство("смсИмяПользователя") Тогда
		ЗначениеОбъекта.смсИмяПользователя = СтруктураНастроек.смсИмяПользователя;
	КонецЕсли;	
	Если СтруктураНастроек.Свойство("смсИмяПользователяПоУмолчанию") Тогда
		ЗначениеОбъекта.смсИмяПользователяПоУмолчанию = СтруктураНастроек.смсИмяПользователяПоУмолчанию;
	КонецЕсли;	
	Если СтруктураНастроек.Свойство("смсКонецПериодаЗапрета") Тогда
		ЗначениеОбъекта.смсКонецПериодаЗапрета = СтруктураНастроек.смсКонецПериодаЗапрета;
	КонецЕсли;	
	Если СтруктураНастроек.Свойство("смсНачалоПериодаЗапрета") Тогда
		ЗначениеОбъекта.смсНачалоПериодаЗапрета = СтруктураНастроек.смсНачалоПериодаЗапрета;
	КонецЕсли;	
	Если СтруктураНастроек.Свойство("смсНомераОтправителя") Тогда
		ЭтаФорма.смсНомераОтправителя = СтруктураНастроек.смсНомераОтправителя;
	КонецЕсли;	
	Если СтруктураНастроек.Свойство("смсНеОтправлятьSMS") Тогда
		ЗначениеОбъекта.смсНеОтправлятьSMS = СтруктураНастроек.смсНеОтправлятьSMS;
	КонецЕсли;
	Если СтруктураНастроек.Свойство("смсНомерСессии	") Тогда
		ЭтаФорма.смсНомерСессии = СтруктураНастроек.смсНомерСессии;
	КонецЕсли;
	Если СтруктураНастроек.Свойство("смсОсновнойСервер") Тогда
		ЭтаФорма.смсОсновнойСервер = СтруктураНастроек.смсОсновнойСервер;
	КонецЕсли;	
	Если СтруктураНастроек.Свойство("смсПарольПользователя") Тогда
		ЗначениеОбъекта.смсПарольПользователя = СтруктураНастроек.смсПарольПользователя;
	КонецЕсли;	
	Если СтруктураНастроек.Свойство("смсПолучатьТолькоПолныеСообщения") Тогда
		ЗначениеОбъекта.смсПолучатьТолькоПолныеСообщения = СтруктураНастроек.смсПолучатьТолькоПолныеСообщения;
	КонецЕсли;	
	Если СтруктураНастроек.Свойство("смсПроксиПароль") Тогда
		ЗначениеОбъекта.смсПроксиПароль = СтруктураНастроек.смсПроксиПароль;
	КонецЕсли;	
	Если СтруктураНастроек.Свойство("смсПроксиПользователь") Тогда
		ЗначениеОбъекта.смсПроксиПользователь = СтруктураНастроек.смсПроксиПользователь;
	КонецЕсли;	
	Если СтруктураНастроек.Свойство("смсПроксиПорт") Тогда
		ЗначениеОбъекта.смсПроксиПорт = СтруктураНастроек.смсПроксиПорт;
	КонецЕсли;	
	Если СтруктураНастроек.Свойство("смсПроксиСервер") Тогда
		ЗначениеОбъекта.смсПроксиСервер = СтруктураНастроек.смсПроксиСервер;
	КонецЕсли;	
	Если СтруктураНастроек.Свойство("смсСрокЖизниSMS") Тогда
		ЗначениеОбъекта.смсСрокЖизниSMS = СтруктураНастроек.смсСрокЖизниSMS;
	КонецЕсли;	
	ЗначениеВРеквизитФормы(ЗначениеОбъекта, "Объект");
КонецПроцедуры	// SMS4B_ЗаписатьСтруктуруНастроек()

 &НаКлиенте
// Процедура заполняет список выбора номеров отправителя
//
// Параметры:
//	Нет.
//
Процедура SMS4B_ЗаполнитьСписокНомеровОтправителя()
	Элементы.смсИмяПользователяПоУмолчанию.СписокВыбора.Очистить();
	МассивНомеров = SMS4B_ПолучитьМассивНомеровИзСтроки(смсНомераОтправителя);
	Для Каждого Номер Из МассивНомеров Цикл
		Если НЕ ПустаяСтрока(Номер) Тогда
			Элементы.смсИмяПользователяПоУмолчанию.СписокВыбора.Добавить(Номер);
		КонецЕсли; 
	КонецЦикла; 
	Если Элементы.смсИмяПользователяПоУмолчанию.СписокВыбора.Количество() = 0 Тогда
		смсИмяПользователяПоУмолчанию = "";
	ИначеЕсли Элементы.смсИмяПользователяПоУмолчанию.СписокВыбора.НайтиПоЗначению(смсИмяПользователяПоУмолчанию) = Неопределено Тогда
		смсИмяПользователяПоУмолчанию = Элементы.смсИмяПользователяПоУмолчанию.СписокВыбора[0].Значение;
	КонецЕсли;
КонецПроцедуры // SMS4B_ЗаполнитьСписокНомеровОтправителя()

&НаСервере
// Процедура записывает параметры сессии
//
// Параметры:
//	ПараметрыСессии	- Структура	- Структура, которая содержит параметры сессии
//							
Процедура SMS4B_ЗаписатьПараметрыСессии(ПараметрыСессии) 
	Если ПараметрыСессии.Свойство("смсКоличествоНомеров") Тогда
		ЭтаФорма.смсКоличествоНомеров = ПараметрыСессии.смсКоличествоНомеров;
	Иначе
		ЭтаФорма.смсКоличествоНомеров = 0;
	КонецЕсли;	
	Если ПараметрыСессии.Свойство("смсКорректировкаUTC") Тогда
		ЭтаФорма.смсКорректировкаUTC	= ПараметрыСессии.смсКорректировкаUTC;
		ЭтаФорма.смсСмещениеUTC			= "" + ПараметрыСессии.смсКорректировкаUTC + " сек. (" + Окр(ПараметрыСессии.смсКорректировкаUTC / 3600) + " ч.)";
	Иначе
		ЭтаФорма.смсКорректировкаUTC	= 0;
		ЭтаФорма.смсСмещениеUTC			= " ";
	КонецЕсли;	
	Если ПараметрыСессии.Свойство("смсМаксАктуальностьДоставки") Тогда
		ЭтаФорма.смсМаксАктуальностьДоставки = ПараметрыСессии.смсМаксАктуальностьДоставки;
	Иначе	
		ЭтаФорма.смсМаксАктуальностьДоставки = 0;
	КонецЕсли;	
	Если ПараметрыСессии.Свойство("смсМаксДлительностьДоставки") Тогда
		ЭтаФорма.смсМаксДлительностьДоставки = ПараметрыСессии.смсМаксДлительностьДоставки;
	Иначе	
		ЭтаФорма.смсМаксДлительностьДоставки = 0;
	КонецЕсли;	
	Если ПараметрыСессии.Свойство("смсНомераОтправителя") Тогда
		ЭтаФорма.смсНомераОтправителя = ПараметрыСессии.смсНомераОтправителя;
	Иначе	
		ЭтаФорма.смсНомераОтправителя = "";
	КонецЕсли;	
	Если ПараметрыСессии.Свойство("смсОстатокСМС") Тогда
		ЭтаФорма.смсОстатокСМС = ПараметрыСессии.смсОстатокСМС;
	Иначе
		ЭтаФорма.смсОстатокСМС = 0;
	КонецЕсли;	
КонецПроцедуры // SMS4B_ЗаписатьПараметрыСессии()

 &НаКлиенте
 // Процедура очищает номер пользователя по умолчанию и список выбора
//
// Параметры:
//	Нет.
//
 Процедура SMS4B_ОчиститьИмяПользователяПоУмолчанию()
	смсИмяПользователяПоУмолчанию = ""; 
    Элементы.смсИмяПользователяПоУмолчанию.СписокВыбора.Очистить();
КонецПроцедуры // SMS4B_ОчиститьИмяПользователяПоУмолчанию()	

&НаСервереБезКонтекста
// Функция возвращает текущее время
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	ДатаВремя	- Текущая дата и время
//
Функция SMS4B_ПолучитьТекущееВремя()
	Возврат ТекущаяДата();
КонецФункции // SMS4B_ПолучитьТекущееВремя()

 &НаКлиенте
// Функция проверяет заполение имени и пароля пользователя
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Результат проверки
//
Функция SMS4B_ПроверитьЗаполнениеНастроекПодключения()
	ЕстьОшибки = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.смсИмяПользователя) Тогда 
		ЕстьОшибки = Истина;
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(Объект.смсПарольПользователя) Тогда 
		ЕстьОшибки = Истина;
	КонецЕсли;
	Возврат НЕ ЕстьОшибки;
КонецФункции // SMS4B_ПроверитьЗаполнениеНастроекПодключения()

 &НаКлиенте
// Процедура устанавливает доступность элементоа формы
//
// Параметры:
//	Нет.
//
Процедура SMS4B_УстановитьДоступностьЭлементовФормы()
	Если смсНомерСессии = 0 Тогда
		смсОсновнойСервер		= Истина;
		смсСмещениеUTC			= "";
		смсОстатокСМС			= 0;
		смсСтрокаСтатусСессии	= НСтр("ru = 'Отключено'");
		Если SMS4B_ПроверитьЗаполнениеНастроекПодключения() Тогда
			Элементы.смсПодключиться.Доступность		= Истина;
		Иначе	
			Элементы.смсПодключиться.Доступность 		= Ложь;
		КонецЕсли; 
		Элементы.смсНастройкиSMS4B.Доступность			= Истина;
		Элементы.смсПараметрыСессии.Доступность			= Ложь;
		Элементы.смсОтключиться.Доступность				= Ложь;
		Элементы.смсОтправитьСообщения.Доступность		= Ложь;
		Элементы.смсОбновитьСтатусы.Доступность			= Ложь;
		Элементы.смсПолучитьСообщения.Доступность		= Ложь;
	Иначе
		смсСтрокаСтатусСессии	= НСтр("ru = 'Подключено'");
		Элементы.смсПодключиться.Доступность			= Ложь;
		Элементы.смсНастройкиSMS4B.Доступность			= Ложь;
		Элементы.смсПараметрыСессии.Доступность			= Истина;
		Элементы.смсОтключиться.Доступность				= Истина;
		Элементы.смсОтправитьСообщения.Доступность		= Истина;
		Элементы.смсОбновитьСтатусы.Доступность			= Истина;
		Элементы.смсПолучитьСообщения.Доступность		= Истина;
	КонецЕсли;	
	смсНачалоОтправкиПриИзменении(Неопределено);
	смсИспользоватьОбщийТекстПриИзменении(Неопределено);
КонецПроцедуры // SMS4B_УстановитьДоступностьЭлементовФормы()

&НаСервереБезКонтекста
// Функция возвращает массив структур имен и сининимов справочников, имеющих табличную часть "КонтактнаяИнформация"
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Массив	- Массив имен справочников
//
Функция SMS4B_ПолучитьМассивСтруктурСправочников()
	МассивСтруктурСправочников = Новый Массив;
	УстановитьПривилегированныйРежим(Истина); 
	Для Каждого ТекущийСправочник Из Метаданные.Справочники Цикл
		Попытка
			Если НЕ ТекущийСправочник.ТабличныеЧасти.Найти("КонтактнаяИнформация") = Неопределено Тогда
				СтруктураСправочника = Новый Структура;
				СтруктураСправочника.Вставить("Имя",		ТекущийСправочник.Имя);
				СтруктураСправочника.Вставить("Синоним",	ТекущийСправочник.Синоним);
				МассивСтруктурСправочников.Добавить(СтруктураСправочника);	
			КонецЕсли;
		Исключение
		КонецПопытки;	
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь); 
	Возврат МассивСтруктурСправочников;
КонецФункции // SMS4B_ПолучитьМассивСтруктурСправочников()
	
&НаСервереБезКонтекста
// Функция возвращает имя типа справочника по его значению
//
// Параметры:
//	Получатель	- СправочникСсылка	- Получатель
//
// Возвращаемое значение:
//	Строка	- Имя типа справочника
//
Функция SMS4B_ПолучитьИмяТипаСправочника(Получатель)
	ИмяТипаСправочника = "";
	УстановитьПривилегированныйРежим(Истина); 
	ИмяТипаСправочника = Получатель.Метаданные().Имя;	
	УстановитьПривилегированныйРежим(Ложь); 
	Возврат ИмяТипаСправочника;
КонецФункции // SMS4B_ПолучитьИмяТипаСправочника()

&НаСервереБезКонтекста
// Функция возвращает номер телефона в котором убраны все символы, кроме цифр
//
// Параметры:
//	НомерТелефона	- Строка	- Номер телефона
//
// Возвращаемое значение:
//	Строка	- Очищенный номер телефона
//
Функция SMS4B_УбратьИзНомераЛишниеСимволы(НомерТелефона)
	СтрокаЦифр = "0123456789";
	ОчищенныйНомер = "";
	ДлинаНомера = СтрДлина(НомерТелефона);
	Для НомерСимвола = 1 По ДлинаНомера Цикл
		ТекущийСимвол = Сред(НомерТелефона, НомерСимвола, 1);
		Если Найти(СтрокаЦифр, ТекущийСимвол) > 0 Тогда
			ОчищенныйНомер = ОчищенныйНомер + ТекущийСимвол;
		КонецЕсли;
	КонецЦикла;
	Возврат ОчищенныйНомер;
КонецФункции // SMS4B_УбратьИзНомераЛишниеСимволы()
	
&НаСервереБезКонтекста
// Функция возвращает номер мобильного телефона получателя
//
// Параметры:
//	Получатель	- СправочникСсылка	- Получатель
//
// Возвращаемое значение:
//	Строка	- Номер мобильного телефона
//
Функция SMS4B_ПолучитьМобильныйТелефонПолучателя(Получатель)
	НомерМобильногоТелефона = "";
	Если ЗначениеЗаполнено(Получатель) Тогда
		ИмяТипаСправочника = SMS4B_ПолучитьИмяТипаСправочника(Получатель);
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Получатель);
	 	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	 	               |	КонтактнаяИнформация.Представление КАК НомерТелефона
	 	               |ИЗ
	 	               |	Справочник." + ИмяТипаСправочника + ".КонтактнаяИнформация КАК КонтактнаяИнформация
	 	               |ГДЕ
	 	               |	КонтактнаяИнформация.Ссылка = &Ссылка";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекущийНомер	= SMS4B_УбратьИзНомераЛишниеСимволы(Выборка.НомерТелефона);
			ЕстьПлюс		= (Лев(Выборка.НомерТелефона, 1) = "+");
			Если СтрДлина(ТекущийНомер) = 11 Тогда
				ПервыйСимвол	= Лев(ТекущийНомер, 1);
				ВторойСимвол	= Сред(ТекущийНомер, 2, 1);
				Если ВторойСимвол = "9" Тогда
					Если ПервыйСимвол = "8" Тогда
						Если ЕстьПлюс Тогда
							НомерМобильногоТелефона = ТекущийНомер;
						Иначе	
							// Меняем первый символ на "7"
							НомерМобильногоТелефона = "7" + Сред(ТекущийНомер, 2);
						КонецЕсли;
						Прервать;
					ИначеЕсли  ПервыйСимвол = "7" Тогда	
						НомерМобильногоТелефона = ТекущийНомер;
						Прервать;
					ИначеЕсли ЕстьПлюс Тогда
						НомерМобильногоТелефона = ТекущийНомер;
						Прервать;
					КонецЕсли;	
				ИначеЕсли ЕстьПлюс Тогда
					НомерМобильногоТелефона = ТекущийНомер;
					Прервать;
				КонецЕсли;	
			ИначеЕсли СтрДлина(ТекущийНомер) = 10 Тогда
				// Возможно не указан код страны
				ПервыйСимвол = Лев(ТекущийНомер, 1);
				Если ПервыйСимвол = "9" Тогда
					Если ЕстьПлюс Тогда
						НомерМобильногоТелефона = ТекущийНомер;
					Иначе	
						// Добавляем код страны "7"
						НомерМобильногоТелефона = "7" + ТекущийНомер;
					КонецЕсли;	
					Прервать;
				ИначеЕсли ЕстьПлюс Тогда
					НомерМобильногоТелефона = ТекущийНомер;
					Прервать;
				КонецЕсли;	
			ИначеЕсли ЕстьПлюс Тогда
				НомерМобильногоТелефона = ТекущийНомер;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	Возврат НомерМобильногоТелефона;
КонецФункции // SMS4B_ПолучитьМобильныйТелефонПолучателя()

&НаСервереБезКонтекста
// Функция возвращает имя владельца переданного справочника
//
// Параметры:
//	Справочник	- Строка	- Имя справочника в конфигурации
//
// Возвращаемое значение:
//	Строка	- Имя справочника-владельца в конфигурации
//
Функция SMS4B_ПолучитьИмяВладельца(Справочник)
	ВладелецСправочника = "";
	УстановитьПривилегированныйРежим(Истина); 
	Для Каждого ТекущийВладалец Из Метаданные.Справочники[Справочник].Владельцы Цикл
		ВладелецСправочника = ТекущийВладалец.Имя;
		Прервать;
	КонецЦикла;	
	УстановитьПривилегированныйРежим(Ложь); 
	Возврат ВладелецСправочника;
КонецФункции // SMS4B_ПолучитьИмяВладельца()	

&НаСервереБезКонтекста
// Функция возвращает ссылку владельца переданного получателя
//
// Параметры:
//	Получатель	- СправочникСслыка	- Получатель
//
// Возвращаемое значение:
//	СправочникСсылка	- Владелец получателя
//
Функция SMS4B_ПолучитьСсылкуВладельца(Получатель)
	Возврат Получатель.Владелец;
КонецФункции // SMS4B_ПолучитьСсылкуВладельца()

&НаКлиенте
// Процедура - обработчик оповещения выбора справочника
//
// Параметры:
//	РезультатВыбора			- ЭлементСпискаЗначений	- Выбранный элемент списка
//  ДополнительныеПараметры	- Структура				- Структура дополнительных параметров
//
Процедура SMS4B_СправочникОбработкаВыбора(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	ИмяТипаСправочника	= РезультатВыбора.Значение;
	ИмяВладельцаСправочника = SMS4B_ПолучитьИмяВладельца(ИмяТипаСправочника);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",			Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",	Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",	Ложь);
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);	
	ДополнительныеПараметры = Новый Структура;
	Если ЗначениеЗаполнено(ИмяВладельцаСправочника) Тогда
		// Получаем владельца
		ДополнительныеПараметры.Вставить("ИмяТипаСправочника", ИмяТипаСправочника);
		ОповещениеВыбора = Новый ОписаниеОповещения("SMS4B_ВладелецОбработкаВыбора", ЭтаФорма, ДополнительныеПараметры);
		ОткрытьФорму("Справочник." + ИмяВладельцаСправочника + ".ФормаВыбора", ПараметрыФормы, ЭтаФорма, , ВариантОткрытияОкна.ОтдельноеОкно, , ОповещениеВыбора);
	Иначе
		ДополнительныеПараметры.Вставить("ИмяТипаСправочника", ИмяТипаСправочника);
		ОповещениеВыбора = Новый ОписаниеОповещения("SMS4B_ПолучательОбработкаВыбора", ЭтаФорма, ДополнительныеПараметры);
		ОткрытьФорму("Справочник." + ИмяТипаСправочника + ".ФормаВыбора", ПараметрыФормы, Элементы.смсИсходящиеПолучатель, , ВариантОткрытияОкна.ОтдельноеОкно, , ОповещениеВыбора);
	КонецЕсли;
КонецПроцедуры // SMS4B_СправочникОбработкаВыбора()

&НаКлиенте
// Процедура - обработчик оповещения выбора владельца получателя
//
// Параметры:
//	РезультатВыбора			- СправочникСсылка	- Выбранный владелец
//  ДополнительныеПараметры	- Структура			- Структура дополнительных параметров
//
Процедура SMS4B_ВладелецОбработкаВыбора(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	ИмяТипаСправочника = ДополнительныеПараметры.ИмяТипаСправочника;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",			Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",	Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",	Ложь);
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Владелец",	РезультатВыбора);
		ПараметрыФормы.Вставить("Отбор",		СтруктураОтбора);
	КонецЕсли;	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТипаСправочника", ИмяТипаСправочника);
	ОповещениеВыбора = Новый ОписаниеОповещения("SMS4B_ПолучательОбработкаВыбора", ЭтаФорма, ДополнительныеПараметры);
	ОткрытьФорму("Справочник." + ИмяТипаСправочника + ".ФормаВыбора", ПараметрыФормы, Элементы.смсИсходящиеПолучатель, , ВариантОткрытияОкна.ОтдельноеОкно, , ОповещениеВыбора);
КонецПроцедуры // SMS4B_ВладелецОбработкаВыбора()

&НаКлиенте
// Процедура - обработчик оповещения выбора получателя
//
// Параметры:
//	РезультатВыбора			- СправочникСсылка	- Выбранный владелец
//  ДополнительныеПараметры	- Структура			- Структура дополнительных параметров
//
Процедура SMS4B_ПолучательОбработкаВыбора(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	// Проверяем наличие у выбранного получателя мобильного номера телефона
	МобильныйТелефонПолучателя = SMS4B_ПолучитьМобильныйТелефонПолучателя(РезультатВыбора);
	Если ПустаяСтрока(МобильныйТелефонПолучателя) Тогда
		SMS4B_ВывестиСообщение(НСтр("ru='У получателя '") + """" + Строка(РезультатВыбора) + """" + НСтр("ru=' отсутствует номер мобильного телефона'"), СтатусСообщения.Важное);
	Иначе
		ТД = Элементы.смсИсходящие.ТекущиеДанные;
		ТД.Получатель		= РезультатВыбора;
		ТД.НомерТелефона	= МобильныйТелефонПолучателя;
	КонецЕсли;	
КонецПроцедуры // SMS4B_ПолучательОбработкаВыбора()

&НаСервереБезКонтекста
// Функция возвращает владельца телефонного номера
//
// Параметры:
//	НомерТелефона			- Строка	- Номер телефона
//	МассивИменСправочников	- Массив	- Массив имен справочников, содержащих контактную информацию
//
// Возвращаемое значение:
//	СправочникСсылка	- Влаелец телефонного номера
//
Функция SMS4B_ПолучитьВладельцаТелефонногоНомера(НомерТелефона, МассивИменСправочников)
	ВладелецНомера = Неопределено;
	Если НЕ ПустаяСтрока(НомерТелефона) Тогда
		Запрос = Новый Запрос;
		Для Каждого ТекущееИмяСправочника Из МассивИменСправочников Цикл
		 	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	КонтактнаяИнформация.Ссылка,
		               |	КонтактнаяИнформация.Представление
		               |ИЗ
		               |	Справочник." + ТекущееИмяСправочника + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		               |ГДЕ
		               |	НЕ КонтактнаяИнформация.Ссылка.ПометкаУдаления";
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ОчищенныйНомерТелефона	= SMS4B_УбратьИзНомераЛишниеСимволы(Выборка.Представление);
				ЕстьПлюс				= (Лев(Выборка.Представление, 1) = "+");
				Если СтрДлина(ОчищенныйНомерТелефона) = 11 Тогда
					Если ОчищенныйНомерТелефона = НомерТелефона Тогда
						ВладелецНомера = Выборка.Ссылка;
						Прервать;
					КонецЕсли;	
				ИначеЕсли СтрДлина(ОчищенныйНомерТелефона) = 10 Тогда
					Если НЕ ЕстьПлюс Тогда
						ОчищенныйНомерТелефона = "7" + ОчищенныйНомерТелефона;
					КонецЕсли;	
					Если ОчищенныйНомерТелефона = НомерТелефона Тогда
						ВладелецНомера = Выборка.Ссылка;
						Прервать;
					КонецЕсли;
				ИначеЕсли ЕстьПлюс Тогда
					Если ОчищенныйНомерТелефона = НомерТелефона Тогда
						ВладелецНомера = Выборка.Ссылка;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(ВладелецНомера) Тогда Прервать; КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	Возврат ВладелецНомера;
КонецФункции // SMS4B_ПолучитьВладельцаТелефонногоНомера()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события "смсНачалоОтправки" элемента формы "смсИспользоватьОбщийТекст"
//
Процедура смсНачалоОтправкиПриИзменении(Элемент)
	смсАктуальность = смсНачалоОтправки + (Объект.смсСрокЖизниSMS * 3600);
КонецПроцедуры // смсНачалоОтправкиПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" таблицы формы "смсИсходящие"
//
Процедура смсИсходящиеПриАктивизацииСтроки(Элемент)
	ТД = Элементы.смсИсходящие.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	ИначеЕсли ТД.Статус = "" Тогда
		ТД.Статус	= "Доставка";
		ТД.GUID		= Новый УникальныйИдентификатор;
		ТД.ДатаЗавершения	= SMS4B_ПолучитьТекущееВремя();
	КонецЕсли;	
	Элементы.смсИсходящиеПолучатель.ТолькоПросмотр		= НЕ (ТД.Статус = "Доставка");
	Элементы.смсИсходящиеНомерТелефона.ТолькоПросмотр	= НЕ (ТД.Статус = "Доставка");
	Элементы.смсИсходящиеТекстСообщения.ТолькоПросмотр	= (НЕ (ТД.Статус = "Доставка") ИЛИ смсИспользоватьОбщийТекст);
КонецПроцедуры // смсИсходящиеПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Получатель" таблицы формы "смсИсходящие"
//
Процедура смсИсходящиеПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.смсИсходящие.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	Если ЗначениеЗаполнено(ТД.Получатель) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора",			Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",	Истина);
		ПараметрыФормы.Вставить("МножественныйВыбор",	Ложь);
		ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);	
		ПараметрыФормы.Вставить("ТекущаяСтрока",	ТД.Получатель);
		ИмяТипаСправочника = SMS4B_ПолучитьИмяТипаСправочника(ТД.Получатель);
		ИмяВладельцаСправочника = SMS4B_ПолучитьИмяВладельца(ИмяТипаСправочника);
		Если ЗначениеЗаполнено(ИмяВладельцаСправочника) Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Владелец",	SMS4B_ПолучитьСсылкуВладельца(ТД.Получатель));
			ПараметрыФормы.Вставить("Отбор",		СтруктураОтбора);
		КонецЕсли;	
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяТипаСправочника", ИмяТипаСправочника);
		ОповещениеВыбора = Новый ОписаниеОповещения("SMS4B_ПолучательОбработкаВыбора", ЭтаФорма, ДополнительныеПараметры);
		ОткрытьФорму("Справочник." + ИмяТипаСправочника + ".ФормаВыбора", ПараметрыФормы, Элемент, , ВариантОткрытияОкна.ОтдельноеОкно, , ОповещениеВыбора);
	Иначе	
		ДополнительныеПараметры	= Новый Структура;
		ОповещениеВыбора		= Новый ОписаниеОповещения("SMS4B_СправочникОбработкаВыбора", ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВыборИзСписка(ОповещениеВыбора, смсСписокИменСправочников, Элемент);
	КонецЕсли;
КонецПроцедуры // смсИсходящиеПолучательНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Получатель" таблицы формы "смсИсходящие"
//
Процедура смсИсходящиеПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры // смсИсходящиеПолучательОбработкаВыбора()

&НаКлиенте
// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода "НомерТелефона" таблицы формы "смсИсходящие"
//
Процедура смсИсходящиеНомерТелефонаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	НомерВведенПравильно = Истина;
	Если СтрДлина(Текст) = 11 Тогда
		ПервыйСимвол = Лев(Текст, 1);
		ВторойСимвол = Сред(Текст, 2, 1);
		Если ВторойСимвол = "9" Тогда
			Если ПервыйСимвол = "7" Тогда
				Элементы.смсИсходящие.ТекущиеДанные.НомерТелефона = Текст;
			ИначеЕсли ПервыйСимвол = "8" Тогда
				// Меняем первый символ на "7"
				Текст = "7" + Сред(Текст, 2);
				Элементы.смсИсходящие.ТекущиеДанные.НомерТелефона = Текст;
			Иначе
				НомерВведенПравильно = Ложь;
			КонецЕсли;	
		Иначе
			НомерВведенПравильно = Ложь;
		КонецЕсли;	
	ИначеЕсли СтрДлина(Текст) = 10 Тогда
		ПервыйСимвол = Лев(Текст, 1);
		Если ПервыйСимвол = "9" Тогда
			// Добавляем код страны "7"
			Текст = "7" + Текст;
			Элементы.смсИсходящие.ТекущиеДанные.НомерТелефона = Текст;
		Иначе
			НомерВведенПравильно = Ложь;
		КонецЕсли;	
	Иначе
		НомерВведенПравильно = Ложь;
	КонецЕсли;
	Если НЕ НомерВведенПравильно Тогда
		СтандартнаяОбработка = Ложь;
		SMS4B_ВывестиСообщение(НСтр("ru='Телефонный номер должен состоять из 11 цифр (79ххххххххх)'"), СтатусСообщения.Важное);
	КонецЕсли;	
КонецПроцедуры // смсИсходящиеНомерТелефонаОкончаниеВводаТекста()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "смсИспользоватьОбщийТекст"
//
Процедура смсИспользоватьОбщийТекстПриИзменении(Элемент)
	Элементы.смсОбщийТекст.Доступность		= смсИспользоватьОбщийТекст;
	Элементы.смсТранслитерация.Доступность	= смсИспользоватьОбщийТекст;
	ТД = Элементы.смсИсходящие.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	Элементы.смсИсходящиеТекстСообщения.ТолькоПросмотр	= (НЕ (ТД.Статус = "Доставка") ИЛИ смсИспользоватьОбщийТекст);
КонецПроцедуры // смсИспользоватьОбщийТекстПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы формы "Входящие"
//
Процедура смсВходящиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры // смсВходящиеПередНачаломДобавления()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии"
//
Процедура ПриОткрытии(Отказ)
	смсНомерСессии		= 0;
	смсНачалоОтправки	= SMS4B_ПолучитьТекущееВремя();
	Если НЕ ЗначениеЗаполнено(Объект.смсДатаПолученияСМС) Тогда
		Объект.смсДатаПолученияСМС = НачалоДня(смсНачалоОтправки);
	КонецЕсли;	
	смсНомерЯдра = SMS4B_ВернутьВерсиюЯдра();
	SMS4B_ЗаполнитьСписокНомеровОтправителя();
	SMS4B_УстановитьДоступностьЭлементовФормы();
	// Заполняем список справочников, имеющих ТЧ "Контактная информация"
	МассивСтруктурСправочников = SMS4B_ПолучитьМассивСтруктурСправочников();
	смсСписокИменСправочников.Очистить();
	Если МассивСтруктурСправочников.Количество() = 0 Тогда
		Элементы.смсИсходящиеПолучатель.Видимость			= Ложь;
		Элементы.смсИсходящиесмсПодборПолучателей.Видимость	= Ложь;
	Иначе
		Для Каждого ЭлементМассива Из МассивСтруктурСправочников Цикл
			смсСписокИменСправочников.Добавить(ЭлементМассива.Имя, ЭлементМассива.Синоним);
		КонецЦикла;	
		смсСписокИменСправочников.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	КонецЕсли;
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Процедура - обработчик события формы "ПриЗакрытии"
//
Процедура ПриЗакрытии()
    SMS4B_Отключиться();
КонецПроцедуры // ПриЗакрытии()

&НаКлиенте
// Процедура - обработчик события формы "ОбработкаОповещения"
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "SMS4B_СтруктураНастроек" Тогда
		SMS4B_ЗаписатьСтруктуруНастроек(Параметр);
		SMS4B_ЗаполнитьСписокНомеровОтправителя();
		SMS4B_УстановитьДоступностьЭлементовФормы();
	ИначеЕсли ИмяСобытия = "SMS4B_СтруктураПодбора" Тогда
		МассивНомеров = Параметр.Номера;
		Для Каждого ЭлементМассива Из МассивНомеров Цикл
			НоваяСтрока = Объект.Исходящие.Добавить();
			НоваяСтрока.Получатель		= Параметр.Получатель;
			НоваяСтрока.НомерТелефона	= ЭлементМассива;
			НоваяСтрока.Статус			= "Доставка";
			НоваяСтрока.GUID			= Новый УникальныйИдентификатор;
			НоваяСтрока.ДатаЗавершения	= SMS4B_ПолучитьТекущееВремя();
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры // ОбработкаОповещения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
// Процедура - обработчик команды формы "смсНастройкиSMS4B"
//
Процедура смсНастройкиSMS4B(Команда)
	СтруктураНастроек = SMS4B_ПолучитьСтруктуруНастроек();
	ОткрытьФорму(ЭтаФорма.ИмяФормы + "Настроек", СтруктураНастроек, ЭтаФорма, , ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры // смсНастройкиSMS4B()

&НаКлиенте
// Процедура - обработчик команды формы "смсОбновитьСтатусы"
//
Процедура смсОбновитьСтатусы(Команда)
    СписокСообщений = Новый Массив;
	Для Каждого Строка Из Объект.Исходящие Цикл
		Если Строка.Статус = "Доставка" Тогда
			Продолжить;
		ИначеЕсли Строка.Статус = "Доставлено" Тогда			
			Продолжить;
		ИначеЕсли Строка.Статус = "Не доставлено" Тогда			
			Продолжить;
		ИначеЕсли Строка.Статус = "Ошибка" Тогда			
			Продолжить;
		ИначеЕсли Строка.Статус = "Получено" Тогда			
			Продолжить;
		ИначеЕсли Строка.Статус = "Получено частично" Тогда			
			Продолжить;
		КонецЕсли;
		Структура = Новый Структура;
		Структура.Вставить("GUID",				Строка.GUID);
		Структура.Вставить("СтатусСообщения",	SMS4B_СтатусВКод(Строка.Статус));
		СписокСообщений.Добавить(Структура);
	КонецЦикла;
	Если СписокСообщений.Количество() = 0 Тогда Возврат; КонецЕсли;
	КодОшибки = SMS4B_ОбновитьСтатусы(СписокСообщений);
	Если КодОшибки > 0 Тогда
		Для Каждого Строка Из СписокСообщений Цикл
			Структура = Новый Структура();
			Структура.Вставить("GUID",Строка.GUID);
			Найдено = Объект.Исходящие.НайтиСтроки(Структура);
			Если Найдено.Количество() > 0 Тогда
				Если Число(?(ЗначениеЗаполнено(Строка.СтатусСообщения), Строка.СтатусСообщения, 0)) < 0 Тогда
					Найдено[0].Статус			= SMS4B_КодВСтатус(7); 
					Найдено[0].ОписаниеОшибки	= SMS4B_ОписаниеОшибокВебСервиса(Строка.СтатусСообщения);
					Найдено[0].ДатаЗавершения	= SMS4B_ПолучитьТекущееВремя();
				Иначе
					Найдено[0].Статус			= SMS4B_КодВСтатус(Строка.СтатусСообщения);
					Найдено[0].ОписаниеОшибки	= "";
					Найдено[0].ДатаЗавершения	= SMS4B_ПолучитьТекущееВремя();
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
		Элементы.Сообщения.ТекущаяСтраница	= Элементы.Сообщения.ПодчиненныеЭлементы.ИсходящиеСообщения;
		Элементы.смсИсходящие.Обновить();
	ИначеЕсли КодОшибки < 0 Тогда	
		SMS4B_ВывестиСообщение(SMS4B_ОписаниеОшибокВебСервиса(КодОшибки) + "(" + КодОшибки + ")'", СтатусСообщения.Важное);
	КонецЕсли; 
КонецПроцедуры // смсОбновитьСтатусы()

&НаКлиенте
// Процедура - обработчик команды формы "смсОтветитьНаСообщение"
//
Процедура смсОтветитьНаСообщение(Команда)
	ТД = Элементы.смсВходящие.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	НовСтрока = Объект.Исходящие.Добавить();
	НовСтрока.Получатель		= ТД.Отправитель;
	НовСтрока.НомерТелефона		= ТД.НомерТелефона;
	НовСтрока.Статус			= "Доставка";
	НовСтрока.GUID				= Новый УникальныйИдентификатор;
	НовСтрока.ДатаЗавершения	= SMS4B_ПолучитьТекущееВремя();
	Элементы.Сообщения.ТекущаяСтраница	= Элементы.Сообщения.ПодчиненныеЭлементы.ИсходящиеСообщения;
	ЭтаФорма.ТекущийЭлемент = Элементы.смсИсходящиеТекстСообщения;
КонецПроцедуры // смсОтветитьНаСообщение()

&НаКлиенте
// Процедура - обработчик команды формы "смсОтключиться"
//
Процедура смсОтключиться(Команда)
    SMS4B_Отключиться();
	SMS4B_УстановитьДоступностьЭлементовФормы();
КонецПроцедуры // смсОтключиться()

&НаКлиенте
// Процедура - обработчик команды формы "смсОтправитьСообщения"
//
Процедура смсОтправитьСообщения(Команда)
    Если смсИспользоватьОбщийТекст И ПустаяСтрока(смсОбщийТекст) Тогда
		SMS4B_ВывестиСообщение(НСтр("ru = 'Укажите общий текст сообщения!'"), СтатусСообщения.БезСтатуса); 
		Возврат;
	КонецЕсли; 	
	СписокСообщений = Новый Массив;
	Для Каждого Строка Из Объект.Исходящие Цикл
		Если НЕ (Строка.Статус = "Доставка") Тогда
			Продолжить;
		ИначеЕсли ПустаяСтрока(Строка.НомерТелефона) Тогда
			Продолжить;
		ИначеЕсли ПустаяСтрока(Строка.ТекстСообщения) И НЕ смсИспользоватьОбщийТекст Тогда
			Продолжить;
		КонецЕсли;
		Структура = Новый Структура;
		Структура.Вставить("GUID",				Строка.GUID);
		Структура.Вставить("НомерПолучателя",	Строка.НомерТелефона);
		Структура.Вставить("КодОшибки",			0);
		Структура.Вставить("ТекстСообщения",	Строка.ТекстСообщения);
		СписокСообщений.Добавить(Структура);
	КонецЦикла; 
	Если СписокСообщений.Количество() = 0 Тогда Возврат; КонецЕсли;
	КодОшибки = SMS4B_ОтправитьСообщения(СписокСообщений, Объект.смсИмяПользователяПоУмолчанию, ?(смсИспользоватьОбщийТекст, смсОбщийТекст, ""),
		смсНачалоОтправки, смсАктуальность, Объект.смсНачалоПериодаЗапрета, Объект.смсКонецПериодаЗапрета, смсРавномернаяОтправка);
	Если КодОшибки > 0 Тогда
		Для Каждого Строка Из СписокСообщений Цикл
			Если Строка.КодОшибки > 0 Тогда
				Структура = Новый Структура();
				Структура.Вставить("GUID", Строка.GUID);
				ИскомыеСтроки = Объект.Исходящие.НайтиСтроки(Структура);
				Если ИскомыеСтроки.Количество() > 0 Тогда
					ИскомыеСтроки[0].Статус			= "В очереди";
					ИскомыеСтроки[0].ДатаЗавершения	= SMS4B_ПолучитьТекущееВремя();
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		Элементы.Сообщения.ТекущаяСтраница	= Элементы.Сообщения.ПодчиненныеЭлементы.ИсходящиеСообщения;
		Элементы.смсИсходящие.Обновить();
	ИначеЕсли КодОшибки < 0 Тогда	
		SMS4B_ВывестиСообщение(SMS4B_ОписаниеОшибокВебСервиса(КодОшибки) + "(" + КодОшибки + ")'", СтатусСообщения.Важное);
	КонецЕсли; 
КонецПроцедуры // смсОтправитьСообщения()

&НаКлиенте
// Процедура - обработчик команды формы "смсПодборПолучателей"
//
Процедура смсПодборПолучателей(Команда)
	СтруктураНастроек = Новый Структура;
	ОткрытьФорму(ЭтаФорма.ИмяФормы + "ПодбораПолучателей", СтруктураНастроек, ЭтаФорма, , ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры // смсПодборПолучателей()

&НаКлиенте
// Процедура - обработчик команды формы "смсПараметрыСессии"
//
Процедура смсПараметрыСессии(Команда)
    SMS4B_ОчиститьИмяПользователяПоУмолчанию();
    ПараметрыСессии = Новый Структура;
	КодОшибки = SMS4B_ПолучитьПараметрыСессии(ПараметрыСессии);
	Если КодОшибки > 0 Тогда
		SMS4B_ЗаписатьПараметрыСессии(ПараметрыСессии);
		SMS4B_ЗаполнитьСписокНомеровОтправителя();
	ИначеЕсли КодОшибки < 0 Тогда	
		SMS4B_ВывестиСообщение(НСтр("ru = 'Действие не выполнено! " + SMS4B_ОписаниеОшибокВебСервиса(КодОшибки) + "(" + КодОшибки + ")'"), СтатусСообщения.Важное);
	КонецЕсли; 
КонецПроцедуры // смсПараметрыСессии()

&НаКлиенте
// Процедура - обработчик команды формы "смсПодключиться"
//
Процедура смсПодключиться(Команда)
	КодОшибки = SMS4B_Подключиться();
	Если КодОшибки > 0 Тогда
		смсСтрокаСтатусСессии = НСтр("ru = 'Подключено'");
		смсПараметрыСессии(Команда);
	ИначеЕсли КодОшибки < 0 Тогда
		SMS4B_ВывестиСообщение(SMS4B_ОписаниеОшибокВебСервиса(КодОшибки) + "(" + КодОшибки + ")'", СтатусСообщения.Важное);
	КонецЕсли; 
	SMS4B_УстановитьДоступностьЭлементовФормы();
КонецПроцедуры // смсПодключиться()

&НаКлиенте
// Процедура - обработчик команды формы "смсПолучитьСообщения"
//
Процедура смсПолучитьСообщения(Команда)
    СписокСообщений = Новый Массив;
	КодОшибки = SMS4B_ПолучитьСообщения(СписокСообщений, Объект.смсДатаПолученияСМС, , Объект.смсПолучатьТолькоПолныеСообщения);
	Если КодОшибки > 0 Тогда
		ОтборПоGUID				= Новый Структура("GUID", ""); 
		МассивИменСправочников	= смсСписокИменСправочников.ВыгрузитьЗначения();
		Для Каждого Строка Из СписокСообщений Цикл
			ОтборПоGUID.GUID = Строка.GUID;
			МассивСтрок = Объект.Входящие.НайтиСтроки(ОтборПоGUID);
			Если МассивСтрок.Количество() = 0 Тогда
				НовСтрока = Объект.Входящие.Добавить();
				НовСтрока.Получатель		= Строка.Получатель;
				НовСтрока.НомерТелефона		= Строка.Отправитель;
				Если МассивИменСправочников.Количество() > 0 Тогда
					НовСтрока.Отправитель	= SMS4B_ПолучитьВладельцаТелефонногоНомера(НовСтрока.НомерТелефона, МассивИменСправочников);
				КонецЕсли;
				НовСтрока.ТекстСообщения	= Строка.ТекстСообщения;
				НовСтрока.ДатаПолучения		= Строка.ДатаПолучения;
				НовСтрока.GUID				= Строка.GUID;
				Если Найти(НовСтрока.ТекстСообщения, "[…]") = 0 Тогда
					НовСтрока.Статус		= "Получено";
				Иначе
					НовСтрока.Статус		= "Получено частично";
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла; 
		Для Каждого Строка Из Объект.Входящие Цикл
			Если Строка.ДатаПолучения > Объект.смсДатаПолученияСМС Тогда
				Объект.смсДатаПолученияСМС = Строка.ДатаПолучения; 
			КонецЕсли;	
		КонецЦикла;	
		Элементы.Сообщения.ТекущаяСтраница	= Элементы.Сообщения.ПодчиненныеЭлементы.ВходящиеСообщения;
	ИначеЕсли КодОшибки < 0 Тогда	
		SMS4B_ВывестиСообщение(SMS4B_ОписаниеОшибокВебСервиса(КодОшибки) + "(" + КодОшибки + ")'", СтатусСообщения.Важное);
	КонецЕсли; 
КонецПроцедуры // смсПолучитьСообщения()

&НаКлиенте
// Процедура - обработчик команды формы "смсТранслитерация"
//
Процедура смсТранслитерация(Команда)
    смсОбщийТекст = SMS4B_Транслитерация(смсОбщийТекст);
КонецПроцедуры // смсТранслитерация()



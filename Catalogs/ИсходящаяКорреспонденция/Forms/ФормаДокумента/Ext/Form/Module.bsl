
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Наименование = "№";
		Объект.ПодобранныеФайлы.Очистить();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Автор) Тогда
		Пользователи.ЗаполнитьРеквизитыПоДаннымПользователя(Объект);	
		Если Параметры.ЗначенияЗаполнения.Свойство("Объект") Тогда
			Объект.Объект = Параметры.ЗначенияЗаполнения.Объект;
		КонецЕсли;
	КонецЕсли;	

	ДополнительныеРеквизиты.Загрузить(Объект.ДополнительныеРеквизиты.Выгрузить());
	УправлениеСвойствами.ДобавитьДополнительныеРеквизиты(ЭтаФорма);	
	
	ОграничитьРедактирование();
КонецПроцедуры


&НаСервере
Процедура ОграничитьРедактирование()
	Если ЗначениеЗаполнено(Объект.РегистрационныйНомер) Тогда
		Элементы.ТипПисьма.ТолькоПросмотр = Истина;
		Элементы.Объект.ТолькоПросмотр = Истина;
		Элементы.ГруппаДополнительныеРеквизиты.ТолькоПросмотр = Истина;
		Элементы.ПрикрепитьФайлы.Доступность = Ложь;
		Элементы.ПрикрепленныеФайлы1.Доступность = Ложь;
		Элементы.Организация.ТолькоПросмотр = Истина;
		Элементы.Подписант.ТолькоПросмотр = Истина;
		Элементы.Наименование.ТолькоПросмотр = Истина;
		Элементы.ГруппаПодборФайлов.ТолькоПросмотр = Истина;
		Элементы.ПодобранныеФайлы.ТолькоПросмотр = Истина;
		Элементы.ПодборФайлов.Доступность = Ложь;
		Элементы.ПоШаблону.Доступность = Ложь;
		Элементы.КатегорияРПО.Доступность = Ложь;
		Элементы.ВидРПО.Доступность = Ложь;
		Элементы.ТипКонверта.Доступность = Ложь;
		Элементы.ГруппаПараметры.Доступность = Ложь;
	Иначе
		Элементы.ТипПисьма.ТолькоПросмотр = Ложь;
		Элементы.Объект.ТолькоПросмотр = Ложь;
		Элементы.ГруппаДополнительныеРеквизиты.ТолькоПросмотр = Ложь;
		Элементы.ПрикрепитьФайлы.Доступность = Истина;
		Элементы.ПрикрепленныеФайлы1.Доступность = Истина;
		Элементы.Организация.ТолькоПросмотр = Ложь;
		Элементы.Подписант.ТолькоПросмотр = Ложь;
		Элементы.Наименование.ТолькоПросмотр = Ложь;
		Элементы.ЗакрепитьНомер.Доступность = Ложь;
		Элементы.ГруппаПодборФайлов.ТолькоПросмотр = Ложь;
		Элементы.ПодобранныеФайлы.ТолькоПросмотр = Ложь;
		Элементы.ПодборФайлов.Доступность = Истина;
		Элементы.ПоШаблону.Доступность = Истина;
		Элементы.КатегорияРПО.Доступность = Истина;
		Элементы.ВидРПО.Доступность = Истина;
		Элементы.ТипКонверта.Доступность = Истина;
		Элементы.ГруппаПараметры.Доступность = Истина;
	КонецЕсли;
	
	Если Объект.НомерЗакреплен Тогда
		Элементы.ЗакрепитьНомер.Доступность = Ложь;
	Иначе 
		Если ЗначениеЗаполнено(Объект.РегистрационныйНомер) Тогда
			Элементы.ЗакрепитьНомер.Доступность = Истина;
		Иначе
			Элементы.ЗакрепитьНомер.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.РегистрационныйНомер) Тогда
		Элементы.ПрисвоитьНомер.Доступность = Ложь;
	Иначе
		Элементы.ПрисвоитьНомер.Доступность = Истина;
	КонецЕсли;
	
	ЭтаФорма.Элементы.ПодобранныеФайлы.ВыделенныеСтроки.Очистить();
	
	//Если ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ДолговыеОбязательства") ИЛИ ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
	//	ПрикрепленныеФайлы.КомпоновщикНастроек.Настройки.Отбор.Элементы[0].ПравоеЗначение = Объект.Объект;
	//	ПрикрепленныеФайлы.КомпоновщикНастроек.Настройки.Отбор.Элементы[1].ПравоеЗначение = Объект.Ссылка;
	//	Если ЗначениеЗаполнено(Объект.РегистрационныйНомер) Тогда
	//		Элементы.ПрикрепленныеФайлы.Видимость = Истина;
	//		//Элементы.ПрикрепленныеФайлы1.Видимость = Ложь;
	//	Иначе                                                                                                                            
	//		Элементы.ПрикрепленныеФайлы.Видимость = Ложь;
	//		//Элементы.ПрикрепленныеФайлы1.Видимость = Истина;
	//	КонецЕсли;
	//ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.Пользователи") Тогда
	//	ПрикрепленныеФайлы.КомпоновщикНастроек.Настройки.Отбор.Элементы[0].ПравоеЗначение = Объект.Ссылка;
	//	ПрикрепленныеФайлы.КомпоновщикНастроек.Настройки.Отбор.Элементы[1].ПравоеЗначение = Объект.Ссылка;
	//	Элементы.ПрикрепленныеФайлы.Видимость = Истина;
	//	//Элементы.ПрикрепленныеФайлы1.Видимость = Ложь;
	//Иначе
	//	Элементы.ПрикрепленныеФайлы.Видимость = Ложь;
	//	//Элементы.ПрикрепленныеФайлы1.Видимость = Ложь;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьФайлы(Команда)
	ЭтаФорма.Записать();
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Объект", Объект.Ссылка);		
	ПараметрыЗаполнения.Вставить("РегистраторКорреспонденции", Объект.Ссылка);
	ПараметрыЗаполнения.Вставить("РегистраторКорреспонденции", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ПараметрыЗаполнения);
	Форма = ПолучитьФорму("Документ.ПрикрепитьФайлы.Форма.ФормаДокумента",ПараметрыФормы,ЭтаФорма);	
	//Чуров
	ОткрытьФорму(Форма);
	//Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлы(Команда)
//	Сообщить(СтрЗаменить(Команда.Имя, "ОткрытьФайлы_", ""));
	
	Эл = Элементы.ПрикрепленныеФайлы;
	
	Если Эл.ВыделенныеСтроки.Количество() = 0 Тогда 		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбрано ни одной строки, или список пуст!";
		Сообщение.Сообщить();	
		Возврат;
	КонецЕсли;
	
	
	Если Не РазыменоватьСсылку("Константы.ХранитьПрикрепляемыеФайлыНаСервере.Получить()") Тогда	
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	    Диалог.Заголовок = "Выберите каталог";
		Диалог.МножественныйВыбор = Ложь;
	    Если Диалог.Выбрать() Тогда
			Для Каждого ВыделСтрока Из Эл.ВыделенныеСтроки Цикл
			    Данные = СписокВыборНаСервере(ВыделСтрока);
		        ИмяФайла = Эл.ДанныеСтроки(ВыделСтрока).ИмяФайла;
			    Файл = Новый Файл(Диалог.Каталог + "\" + ИмяФайла);
			    Если Файл.Существует() Тогда 
				    КнопкиДиалога = Новый СписокЗначений;
				    КнопкиДиалога.Добавить(1, "Перезаписать");
				    КнопкиДиалога.Добавить(2, "Переименовать");
				    Ответ = Вопрос("Файл " + Файл.Имя + " уже существует", КнопкиДиалога,,, "Файл существует");
					Если Ответ = 1 Тогда
					  	Данные.Записать(Диалог.Каталог + "\" + Файл.Имя);
						ЗапуститьПриложение(Диалог.Каталог + "\" + Файл.Имя);
					Иначе
						НовоеИмяФайла = ОткрытьФормуМодально("РегистрСведений.ПрикрепляемыеФайлы.Форма.ФормаПереименования");
						Данные.Записать(Диалог.Каталог + "\" + НовоеИмяФайла + Файл.Расширение);
						ЗапуститьПриложение(Диалог.Каталог + "\" + НовоеИмяФайла + Файл.Расширение);
					КонецЕсли;
				Иначе
					Данные.Записать(Диалог.Каталог + "\" + Файл.Имя);
					ЗапуститьПриложение(Диалог.Каталог + "\" + Файл.Имя);
				КонецЕсли;
		    КонецЦикла;
		КонецЕсли;
		
	Иначе
		Для Каждого ВыделСтрока Из Эл.ВыделенныеСтроки Цикл
		    Данные = СписокВыборНаСервере(ВыделСтрока, Истина);		
			Файл = Новый Файл(Элементы.Список.ДанныеСтроки(ВыделСтрока).ИмяФайла);
			Каталог = РазыменоватьСсылку("Константы.КаталогХраненияПрикрепляемыхФайловНаСервере.Получить()");
			Если Прав(Каталог, 1) <> "\" Тогда
				Каталог = Каталог + "\";
			КонецЕсли;
		    ЗапуститьПриложение(Каталог + Данные + Файл.Расширение);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция РазыменоватьСсылку(Стр)
	Возврат Вычислить(Стр);
КонецФункции

&НаСервере
Функция СписокВыборНаСервере(ВыбраннаяСтрока, ПолучитьУИД = Ложь)
    Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
                          |	ПрикрепитьФайлыФайлы.Хранилище,
                          |	ПрикрепитьФайлыФайлы.УИД
                          |ИЗ
                          |	Документ.ПрикрепитьФайлы.Файлы КАК ПрикрепитьФайлыФайлы
                          |ГДЕ
                          |	ПрикрепитьФайлыФайлы.Ссылка = &Ссылка
                          |	И ПрикрепитьФайлыФайлы.НомерСтроки = &НомерСтроки");
	Запрос.УстановитьПараметр("Ссылка", ВыбраннаяСтрока.Регистратор);
	Запрос.УстановитьПараметр("НомерСтроки", ВыбраннаяСтрока.НомерСтроки_);
	Результат = Запрос.Выполнить().Выгрузить();
	Если ПолучитьУИД Тогда
		Возврат Результат[0].УИД;
	Иначе
		Возврат Результат[0].Хранилище.Получить();
	КонецЕсли;
КонецФункции


&НаКлиенте
Процедура ДополнительныеРеквизитыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Свойство = Неопределено;
	СвойствоВидСтроки = Неопределено;
	Код = Сред(Элемент.Имя, Найти(Элемент.Имя, "_") + 1);
	УправлениеСвойствами.ПолучитьСвойствоПоКоду(СтрЗаменить(Код, "_", " "), Свойство, СвойствоВидСтроки);
	
	Если СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Адрес") ИЛИ
			СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Телефон") Тогда
	    Строки = ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Свойство));
		ТекСтрокаПараметры = Строки[0].Параметры;
						
		СписокСтрок = СтрЗаменить(ТекСтрокаПараметры, ";", Символы.ПС);
		ЗначенияПолей = Новый СписокЗначений();
		Если СтрЧислоСтрок(СписокСтрок) > 1 Тогда
			Для Индекс = 1 По СтрЧислоСтрок(СписокСтрок) Цикл
				Стр = СтрПолучитьСтроку(СписокСтрок, Индекс);
				Если Стр <> "" Тогда 
					СписокПодстрок = СтрЗаменить(Стр, "=", Символы.ПС);
					ЗначенияПолей.Добавить(СтрПолучитьСтроку(СписокПодстрок, 2), СтрПолучитьСтроку(СписокПодстрок, 1));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;			
		Если СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Адрес") Тогда
			ИмяФормыРедактирования = "ОбщаяФорма.ВводАдреса";
		ИначеЕсли СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Телефон") Тогда
			ИмяФормыРедактирования = "ОбщаяФорма.ВводТелефона";
		КонецЕсли;
			
		Пар = Новый Структура;
		Пар.Вставить("ЗначенияПолей",                ЗначенияПолей);
		Пар.Вставить("Вид",                          ""); //"Адрес");
		Пар.Вставить("БылиВнесеныИзменения",         Ложь);
		Пар.Вставить("Представление",                Элемент.ТекстРедактирования);
		Пар.Вставить("РедактированиеТолькоВДиалоге", Не Элемент.РедактированиеТекста);
		Пар.Вставить("АдресТолькоРоссийский",        Ложь);
			
		Результат = ОткрытьФормуМодально(ИмяФормыРедактирования, Пар);	
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Строки[0].Значение = Результат.Представление;
			ЭтаФорма[Элемент.Имя] = Результат.Представление;
			ЗначенияПолей = Результат.ЗначенияПолей;
			Модифицированность = Истина;
			
			РезультатЗначение = "";
			Для Каждого Элемент Из ЗначенияПолей Цикл
				РезультатЗначение = РезультатЗначение + Элемент.Представление + "=" + Элемент.Значение + ";"; 
			КонецЦикла;
			
			Строки[0].Параметры = РезультатЗначение;
		КонецЕсли;
		
	ИначеЕсли СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.АдресФИАС") Тогда 
		
		Строки = ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Свойство)); 
		ТекСтрока = Строки[0]; 
		
		ИмяФормыРедактирования = "Обработка.РасширенныйВводКонтактнойИнформации.Форма.ВводАдреса"; 
		Если ТекСтрока.Параметры = "" Тогда 
			ЗнПолей = ""; 
		Иначе 
			ЗнПолей = бит_АдресныйКлассификатор.ПолучитьJSONИзXML(ТекСтрока.Параметры); 
		КонецЕсли; 
		Пар = Новый Структура; 
		Пар.Вставить("ЗначенияПолей", ЗнПолей); 
		Пар.Вставить("Вид", ""); //"Адрес"); 
		Пар.Вставить("БылиВнесеныИзменения", Ложь); 
		Пар.Вставить("Представление", Элемент.ТекстРедактирования); 
		Пар.Вставить("РедактированиеТолькоВДиалоге", Не Элемент.РедактированиеТекста); 
		Пар.Вставить("АдресТолькоРоссийский", Ложь); 
		
		Результат = ОткрытьФормуМодально(ИмяФормыРедактирования, Пар); 
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда 
			Строки[0].Значение = Результат.Представление; 
			ЭтаФорма[Элемент.Имя] = Результат.Представление; 
			Модифицированность = Истина; 
			СтрокаJSON = Результат.Значение; 
			
			Если СтрокаJSON = "" Тогда 
				СтрокаJSON = бит_АдресныйКлассификатор.ПолучитьJSONИзXML(СтрокаJSON); 
			КонецЕсли; 
			
			Строки[0].Параметры = бит_АдресныйКлассификатор.ПолучитьСтрокуXML(СтрокаJSON); 
		КонецЕсли;
		
	ИначеЕсли СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.ПутьКФайлу") Тогда	
		#Если Не ВебКлиент Тогда
			СтандартнаяОбработка = Ложь;
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			Диалог.Заголовок = "Выберите файл";
			Диалог.ПолноеИмяФайла = ЭтаФорма[Элемент.Имя];
			Диалог.МножественныйВыбор = Ложь;
			Если Диалог.Выбрать() Тогда
				ЭтаФорма[Элемент.Имя] = Диалог.ПолноеИмяФайла;
			КонецЕсли;	
		#Иначе
			СтандартнаяОбработка = Ложь;
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			Диалог.Заголовок = "Выберите файл";
			Диалог.ПолноеИмяФайла = ЭтаФорма[Элемент.Имя];
			//Фильтр = "EXE (*.exe)|*.exe"; 
			//Диалог.Фильтр = Фильтр; 
			Диалог.МножественныйВыбор = Ложь;
			//Диалог.Каталог = "F:\";
			Диалог.Показать(Новый ОписаниеОповещения("ДополнительныеРеквизитыНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("Диалог, Элемент", Диалог, Элемент)));
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	Элемент = ДополнительныеПараметры.Элемент;
	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ЭтаФорма[Элемент.Имя] = Диалог.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтрокаЗапуска = "";
	Попытка
		Стр = СтрЗаменить(Элемент.Имя, "Реквизит_", "РеквизитСвойство_");
		Строки = ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Вычислить(Стр)));	
	Исключение		
		Стр = СтрЗаменить(Элемент.Имя, "Реквизит_", "РеквизитСвойство_");
		Строки = ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ОбъектыСервер.ПолучитьДопРиСПоКоду(
				СтрЗаменить(Сред(Элемент.Имя, 10), "_", " "))));
	КонецПопытки;
	Если Строки.Количество() > 0 Тогда
		СтрокаЗапуска = Строки[0].Значение;
	КонецЕсли;
		
	Попытка
		ЗапуститьПриложение(СтрокаЗапуска);
	Исключение
		//Чуров
		//ПоказатьЗначение(,СтрокаЗапуска);
		ОткрытьЗначение(СтрокаЗапуска);
	КонецПопытки;
КонецПроцедуры


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	УправлениеСвойствами.ПередЗаписьюНаСервере2(ЭтаФорма, ТекущийОбъект, Отказ);
КонецПроцедуры


&НаКлиенте
Процедура ТипПисьмаПриИзменении(Элемент)
	ДобавитьДополнительныеРеквизиты(); 
	СформироватьНаименование();
КонецПроцедуры

&НаСервере
Процедура ДобавитьДополнительныеРеквизиты()
	УправлениеСвойствами.ДобавитьДополнительныеРеквизиты(ЭтаФорма);	
КонецПроцедуры

&НаСервере
Процедура ПрисвоитьНомерНаСервере()
	Объект.РегистрационныйНомер = РегистрацияКорреспонденции.ПолучитьНомер(Объект.ТипПисьма, Объект.Организация, Объект.Ссылка);
	Объект.ДатаРегистрации = ТекущаяДата();
	ОграничитьРедактирование();
КонецПроцедуры

&НаКлиенте
Процедура ПрисвоитьНомер(Команда) 
	Записано = ЗначениеЗаполнено(Объект.Наименование)  
		И ЗначениеЗаполнено(Объект.ТипПисьма) 
		И ЗначениеЗаполнено(Объект.Организация) 
		И ЗначениеЗаполнено(Объект.Объект);
		
		Если ОбъектыСервер.РазыменоватьСсылку(Объект.ТипПисьма, "КонтролироватьПрикрепление") Тогда
			Если ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ДолговыеОбязательства") ИЛИ ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
				Если Объект.ПрикрепленныеФайлы.Количество() = 0 Тогда
					Сообщить("Необходимо прикрепить файлы!");
					Записано = Ложь;
				КонецЕсли;
				Если ЕстьЗакрепленныеФайлы() Тогда
					Записано = Ложь;
				КонецЕсли;			
			ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.Пользователи") Тогда
				Если Не ЗапросСвязанныхДокументов() Тогда
					Записано = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ВыполнитьПрисвоение();
		
		Объект.ДополнительныеРеквизиты.Очистить();
		
		Для Каждого Элемент Из ЭтаФорма.ДополнительныеРеквизиты Цикл
			Если Не ЗначениеЗаполнено(Элемент.Значение) И Элемент.Обязательное Тогда
			Записано = Ложь;		
			Сообщить("Не заполнены обязательные реквизиты!");
		КонецЕсли;
	КонецЦикла;
		
	Если Записано Тогда
		ПрисвоитьНомерНаСервере();  
		СформироватьНаименование();
		ЭтаФорма.Записать();
		ЗаписатьРегистраторы();
		ОграничитьРедактирование();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПрисвоение()
	Для Каждого Элемент Из ЭтаФорма.ДополнительныеРеквизиты Цикл
		Выполнить("Элемент.Значение = ЭтаФорма.Реквизит_" + СтрЗаменить(Элемент.Свойство.Код, " ", "_") + ";");
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ЕстьЗакрепленныеФайлы()
	Если Объект.ТипПисьма.КонтролироватьПрикрепление Тогда
		Для Каждого Элемент Из Объект.ПрикрепленныеФайлы Цикл
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	РегистрацияКорреспонденцииПрикрепленныеФайлы.Ссылка
			|ИЗ
			|	Справочник.ВходящаяКорреспонденция.ПрикрепленныеФайлы КАК РегистрацияКорреспонденцииПрикрепленныеФайлы
			|ГДЕ
			|	РегистрацияКорреспонденцииПрикрепленныеФайлы.Ссылка <> &Ссылка
			|	И РегистрацияКорреспонденцииПрикрепленныеФайлы.ПрикрепленныйФайл = &ПрикрепленныйФайл");
			Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
			Запрос.УстановитьПараметр("ПрикрепленныйФайл", Элемент.ПрикрепленныйФайл);
			Результат = Запрос.Выполнить().Выбрать();
			Если Результат.Следующий() Тогда
				Сообщить("Прикрепленный файл в табличной части уже фигурирует в других регистраторах!");
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		Возврат Ложь;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ЗапросСвязанныхДокументов()
	Если Объект.Ссылка.Пустая() Тогда
		Сообщить("Необходимо прикрепить файлы!");
		Возврат Ложь;
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ПрикрепляемыеФайлы.Период,
		                      |	ПрикрепляемыеФайлы.Регистратор
		                      |ИЗ
		                      |	РегистрСведений.ПрикрепляемыеФайлы КАК ПрикрепляемыеФайлы
		                      |ГДЕ
		                      |	ПрикрепляемыеФайлы.Объект = &Объект");
		Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОграничитьРедактирование();
КонецПроцедуры


&НаКлиенте
Процедура ВидПисьмаПриИзменении(Элемент)
	ДобавитьДополнительныеРеквизиты();
КонецПроцедуры


&НаКлиенте
Процедура ОбъектПриИзменении(Элемент)
	ОграничитьРедактирование();
	Объект.ПрикрепленныеФайлы.Очистить();
	Объект.ПодобранныеФайлы.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ЗакрепитьНомер(Команда)
	Объект.НомерЗакреплен = Истина;
	ЭтаФорма.Записать();
	ОграничитьРедактирование();
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРегистраторы()
	Для Каждого Эл Из Объект.ПрикрепленныеФайлы Цикл
		ДокументОбъект = Эл.ПрикрепленныйФайл.ПолучитьОбъект();
		ДокументОбъект.РегистраторКорреспонденции = Объект.Ссылка;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СформироватьНаименование()
	Объект.Наименование = Объект.ТипПисьма.Наименование + " № " + Объект.РегистрационныйНомер + " от " + Формат(Объект.ДатаРегистрации, "ДЛФ='DD'");
КонецПроцедуры


&НаСервере
Функция СформироватьСписокЗначений(ТипПисьма)
	Если ЗначениеЗаполнено(ТипПисьма) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ТипыИсходящихПисемПечатныеФормы.ПечатнаяФорма КАК ПечатнаяФорма
		|ИЗ
		|	Справочник.ТипыИсходящихПисем.ПечатныеФормы КАК ТипыИсходящихПисемПечатныеФормы
		|ГДЕ
		|	ТипыИсходящихПисемПечатныеФормы.Ссылка = &Ссылка
		|	И ТипыИсходящихПисемПечатныеФормы.ПечатнаяФорма.ПометкаУдаления = ЛОЖЬ");
		
		Запрос.УстановитьПараметр("Ссылка",ТипПисьма);
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	тсВидыПечатныхДокументов.Ссылка КАК ПечатнаяФорма
		|ИЗ
		|	Справочник.тсВидыПечатныхДокументов КАК тсВидыПечатныхДокументов
		|ГДЕ
		|	тсВидыПечатныхДокументов.ПометкаУдаления = ЛОЖЬ");
	КонецЕсли;
	
	СписокПечФорм = Новый СписокЗначений; 
	СписокПечФорм = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПечатнаяФорма"); 
	Возврат СписокПечФорм; 

	//РезультатВыборка = Запрос.Выполнить().Выбрать();
	//Пока РезультатВыборка.Следующий() Цикл
	//	Список.Добавить(РезультатВыборка.ПечатнаяФорма);
	//КонецЦикла;
	
	
	
КонецФункции

&НаКлиенте
Процедура ПодборФайлов(Команда)
	ОбъектыКлиент.ПодборФайла(ЭтаФорма);
КонецПроцедуры 

&НаКлиенте
Процедура ПоШаблону(Команда)
	Письмо = Объект.ТипПисьма;
	Если не ЗначениеЗаполнено(Письмо) Тогда
		Сообщить("Необходимо выбрать тип письма!");
		Возврат;
	КонецЕсли;
	Если не ЗначениеЗаполнено(Объект.Объект) Тогда
		Сообщить("Необходимо выбрать объект исходящей корреспонденции!");
		Возврат;
	КонецЕсли;
	#Если ТолстыйКлиентУправляемоеПриложение Тогда	
		ПечатныеФормыПисьма = Письмо.ПечатныеФормы;
	#Иначе	
		ПечатныеФормыПисьма = ПолучитьПечФормыСервер(Письмо);
	#КонецЕсли 
 	
	Если ПечатныеФормыПисьма.Количество() = 1 Тогда
		#Если ТолстыйКлиентУправляемоеПриложение Тогда	
			ВыбраннаяПечФорма = ПечатныеФормыПисьма[0].ПечатнаяФорма;
		#Иначе	
			ВыбраннаяПечФорма = ПечатныеФормыПисьма[0];
		#КонецЕсли 

		ОБъектыКлиент.ПодборФайлаПоШаблону(ЭтаФорма,ВыбраннаяПечФорма);
		
	ИначеЕсли ПечатныеФормыПисьма.Количество() > 1 Тогда
		ВыбраннаяПечФорма = "";
		ДП = Новый Структура("ВыбраннаяПечФорма",ВыбраннаяПечФорма);
		//Открывать ФормуВыбора для печатных форм.		
		Форма = ОткрытьФорму("Справочник.тсВидыПечатныхДокументов.ФормаВыбора",,,,,,Новый ОписаниеОповещения("ОбработкаВыбора",ЭтотОбъект,ДП)); //Открываем форму 
		ОтборВладелец =Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); //Добавлям отбор 
		ОтборВладелец.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке; //Как будем сравнивать 
		ОтборВладелец.Использование = Истина; // Устанавливаем галку использованияНовый ПолеКомпоновкиДанных("Номенклатура") 
		ОтборВладелец.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка"); //По какому реквизиту будем делать отбор 
		Список = СформироватьСписокЗначений(Письмо); 
		ОтборВладелец.ПравоеЗначение = Список; // И само значение отбора  
	ИначеЕсли ПечатныеФормыПисьма.Количество()  = 0 Тогда
		ВыбраннаяПечФорма = "";
		ДП = Новый Структура("ВыбраннаяПечФорма",ВыбраннаяПечФорма);
		//Открывать ФормуВыбора для печатных форм.		
		Форма = ОткрытьФорму("Справочник.тсВидыПечатныхДокументов.ФормаВыбора",,,,,,Новый ОписаниеОповещения("ОбработкаВыбора",ЭтотОбъект,ДП)); //Открываем форму 
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработкаВыбора(Результат, ДП) Экспорт
	Если Результат = Неопределено Тогда
		Сообщить("Не выбрана ни одна печатная форма");
		Возврат;
	КонецЕсли;	
	ВыбраннаяПечФорма = ДП.ВыбраннаяПечФорма;
	ВыбраннаяПечФорма = Результат;
	ОбъектыКлиент.ПодборФайлаПоШаблону(ЭтаФорма,ВыбраннаяПечФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВесРПОПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ВидРПО) Тогда
		Если объект.ВесРПО >= 100 И (Объект.ВидРПО = "LETTER" Или Объект.ВидРПО = "LETTER_CLASS_1") Тогда
			Сообщить("Отправления весом более 100 граммов являются бандеролями!");
			Объект.ВидРПО = "BANDEROL";
		КонецЕсли;
		Если объект.ВесРПО < 100 И (Объект.ВидРПО = "BANDEROL" Или Объект.ВидРПО = "BANDEROL_CLASS_1") Тогда
			Сообщить("Отправления весом менее 100 граммов являются письмами!");
			Объект.ВидРПО = "LETTER";
		КонецЕсли;
	КонецЕсли;			
КонецПроцедуры

&НаКлиенте
Процедура ВидРПОПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ВесРПО) Тогда
		Если объект.ВесРПО >= 100 И (Объект.ВидРПО = "LETTER" Или Объект.ВидРПО = "LETTER_CLASS_1") Тогда
			Сообщить("Отправления весом более 100 граммов являются бандеролями!");
			Объект.ВидРПО = "BANDEROL";
		КонецЕсли;
		Если объект.ВесРПО < 100 И (Объект.ВидРПО = "BANDEROL" Или Объект.ВидРПО = "BANDEROL_CLASS_1") Тогда
			Сообщить("Отправления весом менее 100 граммов являются письмами!");
			Объект.ВидРПО = "LETTER";
		КонецЕсли;
	КонецЕсли;	
	ПроверкаВидКатегоряКонверт();
	
	//Метаданные.Перечисления.ВидыРПО.ЗначенияПеречисления.Получить(Перечисления.ВидыРПО.Индекс(Реквизит1))
КонецПроцедуры

&НаКлиенте
Процедура КатегорияРПОПриИзменении(Элемент)
	Если Объект.КатегорияРПО = "SIMPLE" тогда
		Сообщить("Внимание! Для простых отправлений нельзя получить ШПИ!");
	КонецЕсли;
	ПроверкаВидКатегоряКонверт();
КонецПроцедуры


&НаКлиенте
Процедура ПроверкаВидКатегоряКонверт();
	Вид = Объект.ВидРПО;
	Категория = объект.КатегорияРПО;
	Конверт = Объект.ТипКонверта;
	ТекстСообщения = "Несоответствующий тип конверта для данных категории и вида РПО!";
	//Письмо 1-класса заказное
	Если Вид = "LETTER_CLASS_1" и Категория = "ORDERED" И  (Конверт = "A6" Или Конверт = "A7") Тогда
		Сообщить(ТекстСообщения);
		Объект.ТипКонверта = "";
	КонецЕсли;
	//Бандероль заказная
	Если Вид = "BANDEROL" и Категория = "ORDERED" И  (Конверт = "A6" Или Конверт = "DL") Тогда
		Сообщить(ТекстСообщения);
		Объект.ТипКонверта = "";
	КонецЕсли;
	//Бандероль 1-класса заказная
	Если Вид = "BANDEROL_CLASS_1" и Категория = "ORDERED" И  (Конверт = "A6" Или Конверт = "DL" или Конверт = "A7") Тогда
		Сообщить(ТекстСообщения);
		Объект.ТипКонверта = "";
	КонецЕсли;	
КонецПроцедуры	

&НаСервере                    
Функция ПолучитьПечФормыСервер(Письмо)
	ПечатныеФормыМасс = Новый Массив;
	Для Каждого Стр из Письмо.ПечатныеФормы Цикл
		ПечатныеФормыМасс.Добавить(Стр.Печатнаяформа);
	КонецЦикла;	
	Возврат ПечатныеФормыМасс;	
КонецФункции

&НаКлиенте
Процедура ТипКонвертаПриИзменении(Элемент)
	ПроверкаВидКатегоряКонверт();
КонецПроцедуры

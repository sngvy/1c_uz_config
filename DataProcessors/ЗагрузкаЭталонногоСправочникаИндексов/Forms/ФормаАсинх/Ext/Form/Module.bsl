#Область Команды

&НаКлиенте
Асинх Процедура ЗагрузитьРегион(Команда)

	Чтец = УправлениеЧтениеФайловКлиент;
	Попытка
	
		ОписаниеФайла = Ждать Чтец.ВыбратьИПоместитьНаСерверТабличныйДокумент(ЭтаФорма.УникальныйИдентификатор);
	
	Исключение
		СообщениеПользователю("Операция не удалась: " + ОписаниеОшибки());
		ОчиститьРегион(Неопределено);
		Возврат;
	КонецПопытки;
	
	Если ОписаниеФайла = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
	
	АдресФайлаРегиона = ОписаниеФайла["Адрес"];
	ФайлРегиона = ОписаниеФайла["СсылкаНаФайл"]["Имя"];

	Результат = ЗаполнитьИзАрхива();
	СообщениеПользователю(Результат["Сообщение"]);
	Если Результат["Ошибка"] <> Неопределено Тогда
	
		Отображение(Истина, Ложь);
		Возврат;
	
	КонецЕсли;
	
	Отображение(Ложь, Истина);

КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗагрузитьСправочник(Команда)

	Чтец = УправлениеЧтениеФайловКлиент;
	Попытка
	
		ОписаниеФайла = Ждать Чтец.ВыбратьИПоместитьНаСерверФайлБазыДанных(ЭтаФорма.УникальныйИдентификатор);
	
	Исключение
		СообщениеПользователю("Операция не удалась: " + ОписаниеОшибки());
		ОчиститьСправочник(Неопределено);
		Возврат;
	КонецПопытки;
	
	Если ОписаниеФайла = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
	
	АдресФайлаСправочника = ОписаниеФайла["Адрес"];
	ФайлСправочника = ОписаниеФайла["СсылкаНаФайл"]["Имя"];
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСправочник(Команда)

	ФайлСправочника = Неопределено;
	АдресФайлаСправочника = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРегион(Команда)

	ФайлРегиона = Неопределено;
	АдресФайлаРегиона = Неопределено;
	
	Отображение(Ложь, Ложь);
	ОчиститьОтображение();

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаВФоне(Команда)

	Если Не ДоступностьЗагрузки() Тогда
	
		СообщениеПользователю("Не выбраны файлы!");
		Возврат;
	
	КонецЕсли;
	СообщениеПользователю("Начало загрузки");
	
	Контроллер = ПередатьНаСервер();
	Если Контроллер["Ошибка"] <> Неопределено Тогда
	
		СообщениеПользователю("Не корректный файл");
		СообщениеПользователю(Контроллер["Ошибка"]);
		СообщениеПользователю("Конец загрузки");
		Возврат;
	
	КонецЕсли;
	
	Ожидатор = УправлениеОжиданиемПотоков;
	Если Ожидатор.ВПотокеОшибки(Контроллер) Тогда
	
		СообщениеПользователю(
			"Произошла ошибка при загрузке: " + Ожидатор.ТекстОшибки(Контроллер)
		);
		Возврат;
	
	КонецЕсли;

	ПараметрыОтображения = Новый Структура;
	ПараметрыОтображения.Вставить("Сообщение", "Идет загрузка ...");

	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ВыполнитьПослеОкончания",
		ЭтаФорма,
		Контроллер
	);
	ПараметрыОтображения.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	
	Описание = Ожидатор.ОписаниеПользовательскогоОтображения(ЭтаФорма, ПараметрыОтображения);
	
	Ожидатор.ОжидатьЗавершение(Контроллер, Описание);

КонецПроцедуры

#КонецОбласти

#Область ВспомогательнаяКлиент

&НаКлиенте
Процедура СообщениеПользователю(ТекстСообщения)

	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();

КонецПроцедуры

&НаКлиенте
Процедура Отображение(Декорация, Таблица)

	Элементы.ДекорацияОтображение.Видимость = Декорация;
	Элементы.ПолеИсходнойТаблицы.Видимость = Таблица;

КонецПроцедуры

&НаКлиенте
Функция ЕстьПолныйПутьФайла(ОписаниеФайла)

	Если Не ЗначениеЗаполнено(ОписаниеФайла)
		И Не ЗначениеЗаполнено(ОписаниеФайла["СсылкаНаФайл"])
		И Не ЗначениеЗаполнено(ОписаниеФайла["СсылкаНаФайл"]["Файл"])Тогда
	
		Возврат Ложь;
	
	КонецЕсли;
	
	Файл = ОписаниеФайла["СсылкаНаФайл"]["Файл"];
	Если Не ЗначениеЗаполнено(Файл["ПолноеИмя"]) Тогда
	
		Возврат Ложь;
	
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ()

&НаСервере
Процедура ОчиститьОтображение()

	ПолеИсходнойТаблицы.Очистить();

КонецПроцедуры


&НаСервере
Функция ЗаполнитьИзАрхива()

	ДанныеТабличногоДокумента = Новый Структура;
	ЗаполнитьДанныеФайла(ДанныеТабличногоДокумента, ФайлРегиона, Истина);
	ДанныеТабличногоДокумента.Вставить("Адрес", АдресФайлаРегиона);
	Ответ = ПолучитьВременныйФайл(ДанныеТабличногоДокумента);
	Если Ответ["Ошибка"] <> Неопределено Тогда
	
		Ответ.Вставить("Сообщение", Ответ["Ошибка"]);
		Возврат Ответ;
	
	КонецЕсли;
	
	Попытка
	
		ПолеИсходнойТаблицы = УправлениеЗагрузкойСервер.ПолучитьТабличныйДокументИзФайлаХранилища(
			Ответ["ИмяФайла"]
		);
	
	Исключение
		ФайловаяСистема.УдалитьВременныйФайл(Ответ["ИмяФайла"]);
		Ответ.Вставить("Ошибка", ОписаниеОшибки());
		Ответ.Вставить("Сообщение", "Ошибка при востановлении файла: " + ОписаниеОшибки());
		Возврат Ответ;
	КонецПопытки;
	
	Ответ.Вставить("Сообщение", "Выведены регионы для предварительного просмотра");
	ФайловаяСистема.УдалитьВременныйФайл(Ответ["ИмяФайла"]);
	Возврат Ответ;

КонецФункции


#КонецОбласти

#Область Загрузка

&НаКлиенте
Функция ДоступностьЗагрузки()

	Возврат ЗначениеЗаполнено(АдресФайлаРегиона) И ЗначениеЗаполнено(АдресФайлаСправочника);

КонецФункции // ()

&НаСервере
Функция ПередатьНаСервер()

	Загрузчик = УправлениеЗагрузкойСервер;
	
	ДанныеТабличногоДокумента = Новый Структура;
	ЗаполнитьДанныеФайла(ДанныеТабличногоДокумента, ФайлРегиона, Истина);
	ДанныеТабличногоДокумента.Вставить("Адрес", АдресФайлаРегиона);
	Ответ = ПолучитьВременныйФайл(ДанныеТабличногоДокумента);
	Если Ответ["Ошибка"] <> Неопределено Тогда
	
		Возврат Ответ;
	
	КонецЕсли;
	ИмяТабличногоДокумента = Ответ["ИмяФайла"];
	ДанныеТабличногоДокумента.Вставить("Имя", ИмяТабличногоДокумента);
	
	ДанныеБазы = Новый Структура;
	ЗаполнитьДанныеФайла(ДанныеБазы, ФайлСправочника);
	ДанныеБазы.Вставить("Адрес", АдресФайлаСправочника);
	Ответ = ПолучитьВременныйФайл(ДанныеБазы);
	Если Ответ["Ошибка"] <> Неопределено Тогда
	
		ФайловаяСистема.УдалитьВременныйФайл(ИмяТабличногоДокумента);
		Возврат Ответ;
	
	КонецЕсли;
	ИмяДанныеБазы = Ответ["ИмяФайла"];
	ДанныеБазы.Вставить("Имя", ИмяДанныеБазы);
	
	Результат = ЗагрузитьНаСервере(ДанныеБазы, ДанныеТабличногоДокумента);
	Результат.Вставить("ИмяТабличногоДокумента", ИмяТабличногоДокумента);
	Результат.Вставить("ИмяДанныеБазы", ИмяДанныеБазы);
	
	Возврат Результат;

КонецФункции // ()

&НаСервере
Функция ЗаполнитьДанныеФайла(Данные, ПутьФайла, ТолькоРасширение = Ложь)

	Файл = Новый Файл(ПутьФайла);
	Если Не ТолькоРасширение Тогда
	
		Данные.Вставить("Имя", Файл.ИмяБезРасширения);
	
	КонецЕсли;
	Данные.Вставить("Расширение", Файл.Расширение);
	
	Возврат Истина;

КонецФункции // ()

&НаСервере
Функция ЗагрузитьНаСервере(ДанныеБазы, ДанныеТабличногоДокумента)

	Управлятор = УправлениеПотоками;
	
	Поток = Управлятор.Создать(
		"Обработки.ЗагрузкаЭталонногоСправочникаИндексов.ЗагрузитьИндексыВФоне",
		ЭтаФорма.УникальныйИдентификатор
	);
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ДанныеБазы", ДанныеБазы);
	ПараметрыПроцедуры.Вставить("ДанныеТабличногоДокумента", ДанныеТабличногоДокумента);
	
	Поток = Управлятор.УстановитьПараметры(Поток, ПараметрыПроцедуры);
	
	Контроллер = Управлятор.Запустить(Поток);
	
	Возврат Контроллер;

КонецФункции // ()

&НаКлиенте
Функция ВыполнитьПослеОкончания(Результат, Параметры) Экспорт

	УдалитьВременныеФайлы(Параметры);
	
	ТекстСообщения = "Готово";
	Если Результат["Статус"] = "Ошибка" Тогда
	
		ТекстСообщения = Результат["КраткоеПредставлениеОшибки"];
	
	КонецЕсли;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();

КонецФункции // ()

&НаСервере
Функция УдалитьВременныеФайлы(Параметры)

	ИмяТабличногоДокумента = Параметры["ИмяТабличногоДокумента"];
	ФайловаяСистема.УдалитьВременныйФайл(ИмяТабличногоДокумента);
	
	ИмяДанныеБазы = Параметры["ИмяДанныеБазы"];
	ФайловаяСистема.УдалитьВременныйФайл(ИмяДанныеБазы);

КонецФункции // ()

&НаСервере
Функция ПолучитьВременныйФайл(ДанныеФайла)

	Загрузчик = УправлениеЗагрузкойСервер;
	
	ИмяФайла = Загрузчик.ЗадатьИмяВременногоФайла(ДанныеФайла);
	
	Ответ = Новый Структура;
	Ответ.Вставить("Ошибка", Неопределено);
	Ответ.Вставить("ИмяФайла", Неопределено);
	
	Попытка
	
		ИмяФайла = Загрузчик.ЗаполнитьВременныйФайлПоАдресуВХранилище(
			ИмяФайла,
			ДанныеФайла["Адрес"]
		);
	
	Исключение
		ФайловаяСистема.УдалитьВременныйФайл(ИмяФайла);
		Ответ.Вставить("Ошибка", ОписаниеОшибки());
		Возврат Ответ;
	КонецПопытки;
	
	Ответ.Вставить("ИмяФайла", ИмяФайла);
	
	Возврат Ответ;

КонецФункции // ()


#КонецОбласти







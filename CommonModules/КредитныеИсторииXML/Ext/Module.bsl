

#Область ФормированиеXML

&НаСервере
Процедура СформироватьФайлВФорматеXML(ТекстДок, КоличествоСобытий, Настройка, Операция, ИзмененныеЗаписи = Неопределено, МассивТитульныхЗаписей, ДатаОтчета, ДокументОтчет) Экспорт
	//Дописать расчет операции
	ТитульныеЗаписиДолжника = МассивТитульныхЗаписей.ТитульныеЗаписиДолжника;
	ТитульныеЗаписиПоручителя = МассивТитульныхЗаписей.ТитульныеЗаписиПоручителя;
	ТитульныеЗаписиНаследника = МассивТитульныхЗаписей.ТитульныеЗаписиНаследника; 
		
	//НужноФормироватьАдресаФЛ = Ложь; 
	ТаблицаИзмененийФЛ = Неопределено;
	ТаблицаИзмененийЮЛ = Неопределено;
	ТаблицаИзмененийСделки = Неопределено;    
		
	Если ИзмененныеЗаписи = Неопределено Тогда 
		//Это место бывшей корректировки
	Иначе	
		//Переписать
		Если ИзмененныеЗаписи[1] <> 0 Тогда
			Если ИзмененныеЗаписи[1].Количество() > 0 Тогда 
				КоличествоСобытий = КоличествоСобытий + ИзмененныеЗаписи[1].Количество();
				ТаблицаИзмененийФЛ = ИзмененныеЗаписи[1]; 
				тзПредыдущихЗаписейФЛ = КредитныеИстории.ПолучитьПредыдущиеПоказателиФЛ(ИзмененныеЗаписи[1].ВыгрузитьКолонку("Должник"));
				//НужноФормироватьАдресаФЛ = Истина;
			КонецЕсли; 
			
		КонецЕсли;
		
		Если ИзмененныеЗаписи[2] <> 0 Тогда
			Если ИзмененныеЗаписи[2].Количество() > 0 Тогда 
				КоличествоСобытий = КоличествоСобытий + ИзмененныеЗаписи[2].Количество();
				ТаблицаИзмененийЮЛ = ИзмененныеЗаписи[2]; 
				тзПредыдущихЗаписейЮЛ = КредитныеИстории.ПолучитьПредыдущиеПоказателиЮЛ(ИзмененныеЗаписи[2].ВыгрузитьКолонку("Должник"));
			КонецЕсли; 
		КонецЕсли;
		
		Если ИзмененныеЗаписи[0] <> 0 Тогда
			Если ИзмененныеЗаписи[0].Количество() > 0 Тогда
				ТаблицаИзмененийСделки = ИзмененныеЗаписи[0]; 
				КоличествоСобытий = КоличествоСобытий + ИзмененныеЗаписи[0].Количество();
				//Если НЕ НужноФормироватьАдресаФЛ Тогда
				//	НужноФормироватьАдресаФЛ = ПроверкаНеобходимостиВыгружатьАдреса(ТаблицаИзмененийСделки.ВыгрузитьКолонку("Событие"));
				//КонецЕсли;	    
			КонецЕсли;
		КонецЕсли; 	
		
	КонецЕсли;
	
	ЗаписиОГосПоддержке = КредитныеИсторииИзменения.ПолучитьЗаписиОГосПоддержке(ТаблицаИзмененийСделки);     
	
	ПризнакиПринудительногоВзыскания = КредитныеИстории.ПолучитьПризнакиПринудительногоВзыскания(ТаблицаИзмененийСделки);  
	
	ПризнакиОбеспечиваемогоОбязательства = ПолучитьПризнакиОбеспечиваемогоОбязательства(ТаблицаИзмененийСделки);   
	
	ДокументыСведенияОДолговойНагрузке = ПолучитьСведенияОДолговойНагрузке(ТаблицаИзмененийСделки);
	
	МассивДолжниковФЛ = новый Массив;    
	МассивДолжниковЮЛ = новый Массив;
	МассивСубъектов = новый Массив;
	
	Если ЗначениеЗаполнено(ТаблицаИзмененийСделки) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСубъектов, ТаблицаИзмененийСделки.ВыгрузитьКолонку("Должник"), Истина); 
	КонецЕсли; 

	
	Если ТитульныеЗаписиДолжника.Количество() > 0 Тогда
		тТитульныеЗаписиДолжника = ТитульныеЗаписиДолжника[0]; 
		Если ЗначениеЗаполнено(тТитульныеЗаписиДолжника) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивДолжниковФЛ, тТитульныеЗаписиДолжника.ВыгрузитьКолонку("Должник"), Истина); 
		КонецЕсли;   
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТаблицаИзмененийФЛ) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивДолжниковФЛ, ТаблицаИзмененийФЛ.ВыгрузитьКолонку("Должник"), Истина); 
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСубъектов, ТаблицаИзмененийФЛ.ВыгрузитьКолонку("Должник"), Истина); 
	КонецЕсли; 
	
	Если ТитульныеЗаписиДолжника.Количество() > 1 Тогда
		тТитульныеЗаписиДолжника = ТитульныеЗаписиДолжника[1];
		Если ЗначениеЗаполнено(тТитульныеЗаписиДолжника) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивДолжниковЮЛ, тТитульныеЗаписиДолжника.ВыгрузитьКолонку("Должник"), Истина);   
		КонецЕсли;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТаблицаИзмененийЮЛ) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивДолжниковЮЛ, ТаблицаИзмененийЮЛ.ВыгрузитьКолонку("Должник"), Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСубъектов, ТаблицаИзмененийЮЛ.ВыгрузитьКолонку("Должник"), Истина);
	КонецЕсли;  
		
	ТаблицаОстаткиЗадолженности = РассчитатьОстаткиНаДатыСобытий(ТаблицаИзмененийСделки);   
	
	ТаблицаОплат = РассчитатьОплатыНаДатыСобытий(ТаблицаИзмененийСделки, Настройка.Формировать28ПриСудебномСписании);
	//АдресаФЛ = ВыгрузитьАдресаКИФЛ(тТитульныеЗаписиДолжника.ВыгрузитьКолонку("Должник"));
	
	КоличествоСубъектовУчета  = МассивСубъектов.Количество();
	
	ЗаписьXML = Новый ЗаписьXML();
	
	ПараметрыДок = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Истина, Ложь, "  ");
	
	ЗаписьXML.УстановитьСтроку(ПараметрыДок);
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Document"); 
		
	ЗаписатьАтрибутыXML(ЗаписьXML, Настройка,  ДокументОтчет, ДокументОтчет.НепринятыйДокумент, КоличествоСубъектовУчета, КоличествоСобытий);
	
	БлокSource(ЗаписьXML, Настройка, ДатаОтчета); //Запись блока Source (Информация об источнике КИ) 
	
	СчетчикБлоковВФайле = 1;
	
	ИмяИвента = "";
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Data"); 	
	
	
	Если ТаблицаИзмененийСделки <> Неопределено Тогда  
		
		ТаблицаИзмененийСделки.Колонки.Добавить("СубъектСобытия");  
		ТаблицаИзмененийСделки.Колонки.Добавить("ТипСубъекта");

		
		Для Каждого СтрОбъект Из ТаблицаИзмененийСделки Цикл
			
			ПоручительСобытия = КредитныеИстории.ВычислитьПоручителяСобытия(СтрОбъект.ДокументСобытие);
			НаследникСобытия = КредитныеИстории.ВычислитьНаследника(СтрОбъект.Сделка, СтрОбъект.ДокументСобытие); 
			
			
			Если ЗначениеЗаполнено(НаследникСобытия) Тогда
				Если ТипЗнч(СтрОбъект.ДокументСобытие) = Тип("СправочникСсылка.Контрагенты") И СтрОбъект.СобытиеКодНБКИ = "2.5" Тогда
					СтрОбъект.СубъектСобытия = СтрОбъект.Должник; 
					СтрОбъект.ТипСубъекта = "Должник";	
				ИначеЕсли ТипЗнч(СтрОбъект.ДокументСобытие) = Тип("ДокументСсылка.СведенияОбИзмененииДоговора") Тогда 
					Если ЗначениеЗаполнено(СтрОбъект.ДокументСобытие.Наследник) Тогда
						СтрОбъект.СубъектСобытия = СтрОбъект.Должник; 
						СтрОбъект.ТипСубъекта = "Должник";
					Иначе
						СтрОбъект.СубъектСобытия = НаследникСобытия;
						СтрОбъект.ТипСубъекта = "Наследник"; 
					КонецЕсли;
				Иначе	
					СтрОбъект.СубъектСобытия = НаследникСобытия;
					СтрОбъект.ТипСубъекта = "Наследник";
				КонецЕсли; 
			Иначе
				Если ЗначениеЗаполнено(ПоручительСобытия) Тогда
					СтрОбъект.СубъектСобытия = ПоручительСобытия; 
					СтрОбъект.ТипСубъекта = "Поручитель";
				Иначе
					СтрОбъект.СубъектСобытия = СтрОбъект.Должник;
					СтрОбъект.ТипСубъекта = "Должник";
				КонецЕсли;	
			КонецЕсли;  
			
			Если Не ЗначениеЗаполнено(СтрОбъект.СубъектСобытия) Тогда
				  СтрОбъект.СубъектСобытия = СтрОбъект.Должник;
				  СтрОбъект.ТипСубъекта = "Должник";
			КонецЕсли;
		КонецЦикла; 
		
		ТаблицаИзмененийСделки.Сортировать("ТипСубъекта, СубъектСобытия, ДатаСобытия Возр, Сделка"); 
	КонецЕсли; 
	
	
	Если ТаблицаИзмененийСделки <> Неопределено Тогда  
		
		ИтераторСобытий = 0;		
		Для Каждого СтрОбъект Из ТаблицаИзмененийСделки Цикл 	
						
			Если Не ЗначениеЗаполнено(СтрОбъект.Событие) Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыФункций = Новый Структура;
			ПараметрыФункций.Вставить("Настройка", Настройка);
			ПараметрыФункций.Вставить("ПСК", 0); 
			ПараметрыФункций.Вставить("ЕстьЗадолженность", Истина);
			ПараметрыФункций.Вставить("ТекущаяЗадолженность", 0);
			ПараметрыФункций.Вставить("Поручитель", "0");
			ПараметрыФункций.Вставить("Наследник", "0"); 
			ПараметрыФункций.Вставить("строкаТекущаяЗадолженность", Неопределено);
			ПараметрыФункций.Вставить("строкиПлатежи", Неопределено); 
			ПараметрыФункций.Вставить("ЗаписьОГосПоддержке", Неопределено);
			ПараметрыФункций.Вставить("ПризнакПринудительногоВзыскания", Ложь);
			ПараметрыФункций.Вставить("ПризнакОбеспечиваемогоОбязательства", Ложь); 
			ПараметрыФункций.Вставить("ДокументДолговаяНагрузка", Ложь);
			ПараметрыФункций.Вставить("ЗаписьПСК", Неопределено); 
			
			Если СтрОбъект.ТипСубъекта = "Наследник" Тогда
				ТитульнаяЗапись =  КредитныеИстории.НайтиЗаписьДолжникаДляЗаголовка(ТитульныеЗаписиНаследника, СтрОбъект.СубъектСобытия); 
			ИначеЕсли СтрОбъект.ТипСубъекта = "Поручитель" Тогда	
				ТитульнаяЗапись =  КредитныеИстории.НайтиЗаписьДолжникаДляЗаголовка(ТитульныеЗаписиПоручителя, СтрОбъект.СубъектСобытия);
			Иначе
				ТитульнаяЗапись =  КредитныеИстории.НайтиЗаписьДолжникаДляЗаголовка(ТитульныеЗаписиДолжника, СтрОбъект.СубъектСобытия);
			КонецЕсли;
			 
			Если Не ЗначениеЗаполнено(ТитульнаяЗапись) Тогда
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = "Для договора " + СтрОбъект.Сделка + "не определен субъект события! Проверьте все связанные документы, Наследников и Поручителей.";
				Сообщение.Сообщить();
				Возврат;
			КонецЕсли; 
			
			Попытка
				ДР = ТитульнаяЗапись.ДатаРождения;
				ЭтоФизЛицо = Истина;   
				ПараметрыФункций.Вставить("Дееспособность", ТитульнаяЗапись.Дееспособность); 
				ПараметрыФункций.Вставить("ЛицоНеСуществует", Ложь);
				
			Исключение
				ЭтоФизЛицо = Ложь;
				ПараметрыФункций.Вставить("Дееспособность", Ложь); 
				ПараметрыФункций.Вставить("ЛицоНеСуществует", ТитульнаяЗапись.ЛиквидацияЮЛ);
			КонецПопытки;	
			
			
			стрЗаписьОГосПоддержке =  ЗаписиОГосПоддержке.Найти(СтрОбъект.Сделка, "ОбъектУчета");
			
			Если ЗначениеЗаполнено(стрЗаписьОГосПоддержке) Тогда
				ПараметрыФункций.ЗаписьОГосПоддержке = стрЗаписьОГосПоддержке.ЗаписьОГосподдержке;
			Иначе   
				ПараметрыФункций.ЗаписьОГосПоддержке = "";
			КонецЕсли;
			
			стрПризнакПринудительногоВзыскания =  ПризнакиПринудительногоВзыскания.Найти(СтрОбъект.Сделка, "Сделка");
			
			Если ЗначениеЗаполнено(стрПризнакПринудительногоВзыскания) Тогда
				ПараметрыФункций.ПризнакПринудительногоВзыскания = стрПризнакПринудительногоВзыскания.ПризнакПринудительногоВзыскания;
			Иначе   
				ПараметрыФункций.ПризнакПринудительногоВзыскания = Ложь;
			КонецЕсли;	 
			
			стрПризнакОбеспечиваемогоОбязательства =  ПризнакиОбеспечиваемогоОбязательства.Найти(СтрОбъект.Сделка, "Сделка");
			
			Если ЗначениеЗаполнено(стрПризнакОбеспечиваемогоОбязательства) Тогда
				ПараметрыФункций.ПризнакОбеспечиваемогоОбязательства = стрПризнакОбеспечиваемогоОбязательства.ПризнакОбеспечиваемогоОбязательства;
			Иначе   
				ПараметрыФункций.ПризнакОбеспечиваемогоОбязательства = Ложь;
			КонецЕсли; 
			
			стрДокументДолговаяНагрузка =  ДокументыСведенияОДолговойНагрузке.Найти(СтрОбъект.Сделка, "ОбъектУчета");
			
			Если ЗначениеЗаполнено(стрДокументДолговаяНагрузка) Тогда
				ПараметрыФункций.ЗаписьОГосПоддержке = стрДокументДолговаяНагрузка.ДокументДолговаяНагрузка;
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.КредитныеИстории_ПолнаяСтоимостьКредита.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сделка.Установить(СтрОбъект.Сделка); 		
			НаборЗаписей.Прочитать();   
			Если НаборЗаписей.Количество() > 0 Тогда
				ПараметрыФункций.ЗаписьПСК = НаборЗаписей[0];
			КонецЕсли;  
			
		
			
			СтрокиОплат = ТаблицаОплат.НайтиСтроки(Новый Структура("ОбъектВх, ДатаСобытия, ЭтоФактическийПлатеж", СтрОбъект.Сделка, НачалоДня(СтрОбъект.ДатаСобытия), Истина));  
			
			Если Не ЗначениеЗаполнено(СтрокиОплат) Тогда	
				СтрокиОплат = ТаблицаОплат.Скопировать(Новый Структура("ОбъектВх, ЭтоФактическийПлатеж", СтрОбъект.Сделка, Истина));  
				СтрокиОплат.Сортировать("ДатаСобытия ВОЗР");
				СтрокиОплат = ОбщегоНазначения.ТаблицаЗначенийВМассив(СтрокиОплат);
			КонецЕсли;
			
			СтрокиЗадолженности = ТаблицаОстаткиЗадолженности.НайтиСтроки(Новый Структура("Объект, ДатаРасчета", СтрОбъект.Сделка, СтрОбъект.ДатаСобытия));	 
			
			Формировать3122 = Ложь;
			Если НЕ ЗначениеЗаполнено(СтрОбъект.СуммаСделки) И ЗначениеЗаполнено(СтрОбъект.НеденежноеОбязательство) Тогда
				Формировать3122 = Истина; 	
			КонецЕсли;
 
			
			//строкиФл = АдресаФЛ.Найтистроки(Новый Структура("Должник, ВидАдреса", ТитульнаяЗапись.Должник, Перечисления.КредитныеИсторииВидыАдресов.Регистрации)); 
		   			
			Если НЕ ЭтоФизЛицо Тогда 
				
				//ЗаписьАдресЮЛ = Неопределено;   
				//Юридический
				ЗаписьАдресЮЛ = РегистрыСведений.КредитныеИсторииСтруктураАдреса.СоздатьНаборЗаписей();
				ЗаписьАдресЮЛ.Отбор.Должник.Установить(ТитульнаяЗапись.Должник);
				ЗаписьАдресЮЛ.Отбор.ВидАдреса.Установить(Перечисления.КредитныеИсторииВидыАдресов.Юридический);
				ЗаписьАдресЮЛ.Прочитать();
				
				
				Если ЗаписьАдресЮЛ.Количество() > 0 Тогда
					АдресЮЛ = ЗаписьАдресЮЛ[0]; 
				Иначе
					АдресЮЛ = Неопределено;	
				КонецЕсли;	

				
				ТекСтрока = ТитульнаяЗапись.Должник;
				Если ИтераторСобытий = 0 Тогда  
					Если ЗначениеЗаполнено(тзПредыдущихЗаписейЮЛ) Тогда
						мПредыдущиеЗаписиДолжника = тзПредыдущихЗаписейЮЛ.НайтиСтроки(Новый Структура("Должник", ТитульнаяЗапись.Должник)); 
					Иначе    
						мПредыдущиеЗаписиДолжника = Неопределено;
					КонецЕсли;
					ЗаписьXML.ЗаписатьНачалоЭлемента("Subject_UL");
					БлокиТитульнойЧастиЮЛ(ЗаписьXML, ТитульнаяЗапись, АдресЮЛ, Настройка, мПредыдущиеЗаписиДолжника);
					ЗаписьXML.ЗаписатьНачалоЭлемента("Events");  
					
					Если ТаблицаИзмененийЮЛ <> Неопределено Тогда
						 мСобытияСубъекта = ТаблицаИзмененийЮЛ.НайтиСтроки(Новый Структура("Должник", ТитульнаяЗапись.Должник));
						 Если ЗначениеЗаполнено(мСобытияСубъекта) Тогда  
							 ДобавитьИзмененияЮЛ(ЗаписьXML, мСобытияСубъекта, Настройка, Операция, ДатаОтчета, ДокументОтчет, СчетчикБлоковВФайле);
							 //1.7, 1.12  
						КонецЕсли;
					КонецЕсли;
                    				
				Иначе
					ПредСтрока = ТаблицаИзмененийСделки[ИтераторСобытий - 1].СубъектСобытия;
					Если ТекСтрока <> ПредСтрока Тогда 
						Если ЗначениеЗаполнено(тзПредыдущихЗаписейЮЛ) Тогда
							мПредыдущиеЗаписиДолжника = тзПредыдущихЗаписейЮЛ.НайтиСтроки(Новый Структура("Должник", ТитульнаяЗапись.Должник)); 
						Иначе    
							мПредыдущиеЗаписиДолжника = Неопределено;
						КонецЕсли;
						ЗаписьXML.ЗаписатьНачалоЭлемента("Subject_UL");
						БлокиТитульнойЧастиЮЛ(ЗаписьXML, ТитульнаяЗапись, АдресЮЛ, Настройка, мПредыдущиеЗаписиДолжника);
						ЗаписьXML.ЗаписатьНачалоЭлемента("Events");  
						Если ТаблицаИзмененийЮЛ <> Неопределено Тогда
							ТаблицаИзмененийЮЛ = ТаблицаИзмененийЮЛ.НайтиСтроки(Новый Структура("Должник", ТитульнаяЗапись.Должник));
							Если ЗначениеЗаполнено(мСобытияСубъекта) Тогда  
								ДобавитьИзмененияЮЛ(ЗаписьXML, мСобытияСубъекта, Настройка, Операция, ДатаОтчета, ДокументОтчет, СчетчикБлоковВФайле);
								//1.7, 1.12  
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;

				
				#Область Собтытия_1_1_и_1_2 //Субъект обратился к источнику / Источник одобрил обращение	
				//События 1.1 и 1.2 (Субъект обратился к источнику / Источник одобрил обращение)	
				Если СтрОбъект.СобытиеКодНБКИ = "1.1" ИЛИ СтрОбъект.СобытиеКодНБКИ = "1.2" Тогда
					
					ИмяИвента = ?(СтрОбъект.СобытиеКодНБКИ = "1.1", "UL_Event_1_1", "UL_Event_1_2");
					
					ЗаписьXML.ЗаписатьНачалоЭлемента(?(СтрОбъект.СобытиеКодНБКИ = СтрОбъект.СобытиеКодНБКИ = "1.1", "UL_Event_1_1", "UL_Event_1_2"));
					
					ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
					ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(СтрОбъект.ДатаСобытия));
					ЗаписьXML.ЗаписатьАтрибут("operationCode", Строка(Операция));  
					ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0"));
					
					
					//UL_45_Application - Сведения об обращении
					UL_45_Application(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					ЗаписьXML.ЗаписатьКонецЭлемента(); // Конец элемента UL_event_1.1", "UL_event_1.2" 
					#КонецОбласти 
					
					#Область Событие_1_3 //Источник отказал субъекту в совершении сделки	
					//Событие 1.3 (Источник отказался от совершения сделки)	
				ИначеЕсли СтрОбъект.СобытиеКодНБКИ = "1.3" Тогда 
					
					ИмяИвента = "UL_Event_1_3";
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("UL_Event_1_3");
					ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
					ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(СтрОбъект.ДатаСобытия));
					ЗаписьXML.ЗаписатьАтрибут("operationCode", Строка(Операция));  
					ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0"));
					
					//UL_45_Application - Сведения об обращении
					UL_45_Application(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
					
					//UL_47_Reject - Сведения об отказе источника от предложения совершить сделку
					UL_47_Reject(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					ЗаписьXML.ЗаписатьКонецЭлемента(); 
					#КонецОбласти
					
					#Область Событие_1_4_ЗаключениеДоговора//Событие 1.4 (Заключение договора)	
				ИначеЕсли СтрОбъект.СобытиеКодНБКИ = "1.4" Тогда
					
					ИмяИвента = "UL_Event_1_4";
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("UL_Event_1_4");
					
					ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
					ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(СтрОбъект.ДатаСобытия));
					ЗаписьXML.ЗаписатьАтрибут("operationCode", Строка(Операция));  
					ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0"));
					
					
					//UL_10_DealUid - Идентификатор сделки
					UL_10_DealUid(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					//UL_11_Deal - Общие сведения о сделке
					UL_11_Deal(ЗаписьXML, СтрОбъект, ПараметрыФункций);  
					
					Если НЕ Формировать3122 Тогда 
						//UL_12_Amount - Сумма и валюта обязательств
						UL_12_Amount(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						//UL_12_1_AmountInfo - Сведения об обеспечиваемом обязательстве (Для поручителей)
						UL_12_1_AmountInfo(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						//UL_14_PaymentTerms - Сведения об условиях платежей 
						UL_14_PaymentTerms(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
						
					Иначе
						
						UL_22_NonMonetarySubject(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
						
					КонецЕсли;
					
					//UL_13_JointDebtors - Сведения о солидарных должниках 
					UL_13_JointDebtors(ЗаписьXML, СтрОбъект, ПараметрыФункций);    
					
					UL_21_NonMonetarySource(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					//UL_44_Accounting Сведения об учете обязательства
					UL_44_Accounting(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
					
					//UL_45_Application Сведения об обращении субъекта к источнику с предложением совершить сделку
					UL_45_Application(ЗаписьXML, СтрОбъект, ПараметрыФункций);	
					
					//UL_46_Participation - Сведения об участии в обязательстве, по которому формируется кредитная история
					UL_46_Participation(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					ЗаписьXML.ЗаписатьКонецЭлемента();
					#КонецОбласти

					#Область Событие_2_2_ВыдачаСуммы
					
				ИначеЕсли СтрОбъект.СобытиеКодНБКИ = "2.2" Тогда 
					
					ИмяИвента = "UL_Event_2_2";
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("UL_Event_2_2");
					
					ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
					ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(СтрОбъект.ДатаСобытия));
					ЗаписьXML.ЗаписатьАтрибут("operationCode", Строка(Операция));  
					ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0")); 
					
					//UL_10_DealUid - Идентификатор сделки
					UL_10_DealUid(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					//UL_11_Deal - Общие сведения о сделке
					UL_11_Deal(ЗаписьXML, СтрОбъект, ПараметрыФункций);  
					
					//UL_13_JointDebtors - Сведения о солидарных должниках 
					UL_13_JointDebtors(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					Если НЕ Формировать3122 Тогда 
						//UL_12_Amount - Сумма и валюта обязательств
						UL_12_Amount(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						//UL_12_1_AmountInfo - Сведения об обеспечиваемом обязательстве (Для поручителей)
						UL_12_1_AmountInfo(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						//UL_14_PaymentTerms - Сведения об условиях платежей 
						UL_14_PaymentTerms(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
						
						//UL_16_Fund - Дата передачи финансирования субъекту или возникновения обеспечения исполнения обязательства
						UL_16_Fund(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
						
						//UL_17_18_19_20_Group - Блок 17-20
						ЗаписьXML.ЗаписатьНачалоЭлемента("UL_17_18_19_20_Group");
						
						//Задолженность
						СформироватьБлокЮЛ171819(ЗаписьXML, СтрОбъект, СтрокиЗадолженности, ПараметрыФункций);
						
						//UL_20_Payment - Сведения о внесении платежей
						UL_20_Payment(ЗаписьXML, СтрОбъект, СтрокиОплат, ПараметрыФункций);
						
						ЗаписьXML.ЗаписатьКонецЭлемента();//КонецЭлемента UL_17_18_19_20_Group
					Иначе
						
						UL_22_NonMonetarySubject(ЗаписьXML, СтрОбъект, ПараметрыФункций);  
						
					КонецЕсли;
					
					UL_21_NonMonetarySource(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					//UL_44_Accounting Сведения об учете обязательства
					UL_44_Accounting(ЗаписьXML, СтрОбъект, ПараметрыФункций);  
					
					//UL_45_Application Сведения об обращении субъекта к источнику с предложением совершить сделку
					UL_45_Application(ЗаписьXML, СтрОбъект, ПараметрыФункций);	
					
					//UL_46_Participation - Сведения об участии в обязательстве, по которому формируется кредитная история
					UL_46_Participation(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					#КонецОбласти
					
					
					#Область Событие_2_4_Обеспечительства				
				ИначеЕсли СтрОбъект.СобытиеКодНБКИ = "2.4" Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("UL_Event_2_4");
					
					ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
					ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(СтрОбъект.ДатаСобытия));
					ЗаписьXML.ЗаписатьАтрибут("operationCode", Строка(Операция));  
					ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0"));
					
					//Дописать формируем блоки по типу обеспечительства
					
					//UL_10_DealUid - Идентификатор сделки
					UL_10_DealUid(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					//UL_23_26_Group - Блок 23,26
					UL_23_26_Group(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					//UL_24_Warranty - Сведения о поручительстве
					UL_24_Warranty(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					//UL_25_Guarantee - Сведения о независимой гарантии
					UL_25_Guarantee(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					//UL_27_ProvisionPayment - Сведения о погашении требований кредитора по обязательству за счет обеспечения	
					UL_27_ProvisionPayment(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
					
					ЗаписьXML.ЗаписатьКонецЭлемента(); //UL_Event_2_4	
					#КонецОбласти
					
					#Область Событие_2_1_Изменились_условия_сделки
					
				ИначеЕсли СтрОбъект.СобытиеКодНБКИ = "2.1" Тогда 
					ЗаписьXML.ЗаписатьНачалоЭлемента("UL_Event_2_1");
					
					ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
					ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(СтрОбъект.ДатаСобытия));
					ЗаписьXML.ЗаписатьАтрибут("operationCode", "B");  
					ЗаписьXML.ЗаписатьАтрибут("orderNum",Формат(СчетчикБлоковВФайле, "ЧГ=0"));

					
					//UL_10_DealUid - Идентификатор сделки
					UL_10_DealUid(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
					
					//UL_11_Deal - Общие сведения о сделке
					UL_11_Deal(ЗаписьXML, СтрОбъект, ПараметрыФункций);  
					
					Если НЕ Формировать3122 Тогда 
						//UL_12_Amount - Сумма и валюта обязательств
						UL_12_Amount(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						//UL_12_1_AmountInfo - Сведения об обеспечиваемом обязательстве (Для поручителей)
						UL_12_1_AmountInfo(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						//UL_14_PaymentTerms - Сведения об условиях платежей 
						UL_14_PaymentTerms(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
												
						//UL_17_18_19_20_Group - Блок 17-20
						ЗаписьXML.ЗаписатьНачалоЭлемента("UL_17_18_19_20_Group");
						
						//Задолженность
						СформироватьБлокЮЛ171819(ЗаписьXML, СтрОбъект, СтрокиЗадолженности, ПараметрыФункций);
						
						//UL_20_Payment - Сведения о внесении платежей
						UL_20_Payment(ЗаписьXML, СтрОбъект, СтрокиОплат, ПараметрыФункций);
						
						ЗаписьXML.ЗаписатьКонецЭлемента();//КонецЭлемента UL_17_18_19_20_Group
					Иначе
						
						UL_22_NonMonetarySubject(ЗаписьXML, СтрОбъект, ПараметрыФункций);  
						
					КонецЕсли;
					
					//UL_13_JointDebtors - Сведения о солидарных должниках 
					UL_13_JointDebtors(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					//15 15_1	
					СформироватьИзмененияСделокЮЛ(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					UL_21_NonMonetarySource(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					//UL_44_Accounting Сведения об учете обязательства
					UL_44_Accounting(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					 
										
					ЗаписьXML.ЗаписатьКонецЭлемента(); // Конец элемента UL_Event_2_1	
					#КонецОбласти 
					
					
					#Область Событие_2_2_1_СубъектСталПоручителемПоСделке
					
				ИначеЕсли СтрОбъект.СобытиеКодНБКИ = "2.2.1" Тогда	
					
					ИмяИвента = "UL_Event_2_2_1";
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("UL_Event_2_2_1");
					
					ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
					ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(СтрОбъект.ДатаСобытия));
					ЗаписьXML.ЗаписатьАтрибут("operationCode", Строка(Операция));  
					ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0"));
					
					//UL_10_DealUid - Идентификатор сделки
					UL_10_DealUid(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					//UL_11_Deal - Общие сведения о сделке 
					UL_11_Deal(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
					
					Если НЕ Формировать3122 Тогда
						
						//UL_12_Amount - Сумма и валюта обязательств
						UL_12_Amount(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						//UL_12_1_AmountInfo - Сведения об обеспечиваемом обязательстве (Для поручителей)
						UL_12_1_AmountInfo(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						//UL_14_PaymentTerms - Сведения об условиях платежей 
						UL_14_PaymentTerms(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
						
						//UL_16_Fund - Дата передачи финансирования субъекту или возникновения обеспечения исполнения обязательства
						UL_16_Fund(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
						
					Иначе
						UL_22_NonMonetarySubject(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					КонецЕсли;
					
					UL_21_NonMonetarySource(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					//UL_44_Accounting Сведения об учете обязательства
					UL_44_Accounting(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
					
					//UL_46_Participation - Сведения об участии в обязательстве, по которому формируется кредитная история
					UL_46_Participation(ЗаписьXML, СтрОбъект, ПараметрыФункций);    
					
					ЗаписьXML.ЗаписатьКонецЭлемента();//UL_Event_2_2_1	
					#КонецОбласти    
					
					#Область Событие_2_3_ПоступлениеПлатежа
				ИначеЕсли СтрОбъект.СобытиеКодНБКИ = "2.3" Тогда  
					
					ИмяИвента = "UL_Event_2_3";
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("UL_Event_2_3");
					
					ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
					ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(СтрОбъект.ДатаСобытия));
					ЗаписьXML.ЗаписатьАтрибут("operationCode", Строка(Операция));  
					ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0"));
					
					
					//UL_10_DealUid - Идентификатор сделки
					UL_10_DealUid(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					//UL_11_Deal - Общие сведения о сделке
					UL_11_Deal(ЗаписьXML, СтрОбъект, ПараметрыФункций);     
					
					Если НЕ Формировать3122 Тогда
						
						//UL_12_Amount - Сумма и валюта обязательств
						UL_12_Amount(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						//UL_12_1_AmountInfo - Сведения об обеспечиваемом обязательстве (Для поручителей)
						UL_12_1_AmountInfo(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						//UL_14_PaymentTerms - Сведения об условиях платежей 
						UL_14_PaymentTerms(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						//UL_17_18_19_20_Group - Блок 17-20
						ЗаписьXML.ЗаписатьНачалоЭлемента("UL_17_18_19_20_Group");
						
						//Задолженность
						СформироватьБлокЮЛ171819(ЗаписьXML, СтрОбъект, СтрокиЗадолженности, ПараметрыФункций);
						
						//UL_20_Payment - Сведения о внесении платежей
						UL_20_Payment(ЗаписьXML, СтрОбъект, СтрокиОплат, ПараметрыФункций);
						
						ЗаписьXML.ЗаписатьКонецЭлемента();//КонецЭлемента UL_17_18_19_20_Group 
						
					Иначе
						UL_22_NonMonetarySubject(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					КонецЕсли;
					
					//UL_13_JointDebtors - Сведения о солидарных должниках 
					UL_13_JointDebtors(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					UL_21_NonMonetarySource(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					UL_28_WarrantyReturn(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					//UL_44_Accounting Сведения об учете обязательства
					UL_44_Accounting(ЗаписьXML, СтрОбъект, ПараметрыФункций);    
						
					//UL_45_Application Сведения об обращении субъекта к источнику с предложением совершить сделку
					UL_45_Application(ЗаписьXML, СтрОбъект, ПараметрыФункций);	
					
					UL_46_Participation(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
					
					ЗаписьXML.ЗаписатьКонецЭлемента(); //UL_Event_2_3 
					
					#КонецОбласти
									
					#Область Событие_2_5_ОбязательствоСубъектаПрекратилось 
					
				ИначеЕсли СтрОбъект.СобытиеКодНБКИ = "2.5" Тогда   
					
					ИмяИвента = "UL_Event_2_5";
				
					ЗаписьXML.ЗаписатьНачалоЭлемента("UL_Event_2_5");
					
					ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
					ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(СтрОбъект.ДатаСобытия));
					ЗаписьXML.ЗаписатьАтрибут("operationCode", Строка(Операция));  
					ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0"));
					
					
					//UL_10_DealUid - Идентификатор сделки
					UL_10_DealUid(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					//UL_11_Deal - Общие сведения о сделке
					UL_11_Deal(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					Если НЕ Формировать3122 Тогда
						
						//UL_12_Amount - Сумма и валюта обязательств
						UL_12_Amount(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						//UL_12_1_AmountInfo - Сведения об обеспечиваемом обязательстве (Для поручителей)
						UL_12_1_AmountInfo(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						//UL_14_PaymentTerms - Сведения об условиях платежей 
						UL_14_PaymentTerms(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						//UL_17_18_19_20_Group - Блок 17-20
						ЗаписьXML.ЗаписатьНачалоЭлемента("UL_17_18_19_20_Group");
						
						//Задолженность
						СформироватьБлокЮЛ171819(ЗаписьXML, СтрОбъект, СтрокиЗадолженности, ПараметрыФункций);
						
						//UL_20_Payment - Сведения о внесении платежей
						UL_20_Payment(ЗаписьXML, СтрОбъект, СтрокиОплат, ПараметрыФункций);
						
						ЗаписьXML.ЗаписатьКонецЭлемента();//КонецЭлемента UL_17_18_19_20_Group 
						
					Иначе
						UL_22_NonMonetarySubject(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					КонецЕсли;
					
					UL_21_NonMonetarySource(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					UL_29_ContractEnd(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					UL_46_Participation(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					ЗаписьXML.ЗаписатьКонецЭлемента(); //UL_Event_2_5		
					#КонецОбласти
										
					#Область Событие_2_6_ИзменилисьСведенияОСудебномСпоре
					
				ИначеЕсли СтрОбъект.СобытиеКодНБКИ = "2.6" Тогда
					ИмяИвента = "UL_Event_2_6";
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("UL_Event_2_6");
					
					ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
					ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(СтрОбъект.ДатаСобытия));
					ЗаписьXML.ЗаписатьАтрибут("operationCode", Строка(Операция));  
					ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0"));
					
					
					//UL_10_DealUid - Идентификатор сделки
					UL_10_DealUid(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					//UL_30_Court - Сведения о судебном споре или требовании по обязательству
					UL_30_Court(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					ЗаписьXML.ЗаписатьКонецЭлемента();	
					#КонецОбласти
					
					#Область Событие_2_10_ИсточникПрекратилПередачуКИ
				ИначеЕсли СтрОбъект.СобытиеКодНБКИ = "2.10" Тогда   
					
					ИмяИвента = "UL_Event_2_10";
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("UL_Event_2_10");	
					
					ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
					ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(СтрОбъект.ДатаСобытия));
					ЗаписьXML.ЗаписатьАтрибут("operationCode", Строка(Операция));  
					ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0"));
					
					
					//UL_10_DealUid - Идентификатор сделки
					UL_10_DealUid(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					//UL_35_StopSend - Сведения о прекращении передачи информации по обязательству
					UL_35_StopSend(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					ЗаписьXML.ЗаписатьКонецЭлемента();      
					
					
					#Область Событие_2_11_2_Правопреемство
				ИначеЕсли СтрОбъект.СобытиеКодНБКИ = "2.11.2" Тогда 
					ИмяИвента = "UL_Event_2_11_2"; 
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("UL_Event_2_11_2");
					
					ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
					ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(СтрОбъект.ДатаСобытия));
					ЗаписьXML.ЗаписатьАтрибут("operationCode", "A");  
					ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0"));
					
					
					//UL_10_DealUid - Идентификатор сделки
					UL_10_DealUid(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					//UL_11_Deal - Общие сведения о сделке
					UL_11_Deal(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
					
					Если НЕ Формировать3122 Тогда
						
						//UL_12_Amount - Сумма и валюта обязательств
						UL_12_Amount(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						//UL_12_1_AmountInfo - Сведения об обеспечиваемом обязательстве (Для поручителей)
						UL_12_1_AmountInfo(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						//UL_14_PaymentTerms - Сведения об условиях платежей 
						UL_14_PaymentTerms(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						//UL_17_18_19_20_Group - Блок 17-20
						ЗаписьXML.ЗаписатьНачалоЭлемента("UL_17_18_19_20_Group");
						
						//Задолженность
						СформироватьБлокЮЛ171819(ЗаписьXML, СтрОбъект, СтрокиЗадолженности, ПараметрыФункций);
						
						//UL_20_Payment - Сведения о внесении платежей
						UL_20_Payment(ЗаписьXML, СтрОбъект, СтрокиОплат, ПараметрыФункций);
						
						ЗаписьXML.ЗаписатьКонецЭлемента();//КонецЭлемента UL_17_18_19_20_Group 
						
						//UL_44_Accounting Сведения об учете обязательства
						UL_44_Accounting(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
						
					Иначе
						UL_22_NonMonetarySubject(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					КонецЕсли;
					
					//UL_13_JointDebtors - Сведения о солидарных должниках 
					UL_13_JointDebtors(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					UL_21_NonMonetarySource(ЗаписьXML, СтрОбъект, ПараметрыФункций);					   
											
					UL_46_Participation(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
					
					ЗаписьXML.ЗаписатьКонецЭлемента(); //UL_Event_2_11_2
					
					#КонецОбласти
					#Область Событие_2_11_Полная_Продажа
				ИначеЕсли СтрОбъект.СобытиеКодНБКИ = "2.11" Тогда
					ИмяИвента = "UL_Event_2_11";
										
					ЗаписьXML.ЗаписатьНачалоЭлемента("UL_Event_2_11");
					
					ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
					ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(СтрОбъект.ДатаСобытия));
					ЗаписьXML.ЗаписатьАтрибут("operationCode", Строка(Операция));  
					ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0"));

					
					UL_10_DealUid(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					UL_35_StopSend(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					ЮЛСформироватьПриобретателяПравТребований(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					ЗаписьXML.ЗаписатьКонецЭлемента();	
					#КонецОбласти
					
				#Область Событие_2_11_1_частичная_продажа
				ИначеЕсли СтрОбъект.СобытиеКодНБКИ = "2.11.1" Тогда
					
					ИмяИвента = "FL_Event_2_11_1";
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("FL_Event_2_11_1");
					
					ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
					ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(СтрОбъект.ДатаСобытия));
					ЗаписьXML.ЗаписатьАтрибут("operationCode", Строка(Операция));  
					ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0"));
					
					UL_10_DealUid(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					UL_11_Deal(ЗаписьXML, СтрОбъект, ПараметрыФункций);   
					
					Если НЕ Формировать3122 Тогда
						
						//UL_12_Amount - Сумма и валюта обязательств
						UL_12_Amount(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						//UL_12_1_AmountInfo - Сведения об обеспечиваемом обязательстве (Для поручителей)
						UL_12_1_AmountInfo(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						//UL_14_PaymentTerms - Сведения об условиях платежей 
						UL_14_PaymentTerms(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						//UL_17_18_19_20_Group - Блок 17-20
						ЗаписьXML.ЗаписатьНачалоЭлемента("UL_17_18_19_20_Group");
						
						//Задолженность
						СформироватьБлокЮЛ171819(ЗаписьXML, СтрОбъект, СтрокиЗадолженности, ПараметрыФункций);
						
						//UL_20_Payment - Сведения о внесении платежей
						UL_20_Payment(ЗаписьXML, СтрОбъект, СтрокиОплат, ПараметрыФункций);
						
						ЗаписьXML.ЗаписатьКонецЭлемента();//КонецЭлемента UL_17_18_19_20_Group 
						
						//UL_44_Accounting Сведения об учете обязательства
						UL_44_Accounting(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
						
					Иначе
						UL_22_NonMonetarySubject(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					КонецЕсли;
					
					UL_13_JointDebtors(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					UL_21_NonMonetarySource(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					ЮЛСформироватьПриобретателяПравТребований(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					UL_46_Participation(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
					
					ЗаписьXML.ЗаписатьКонецЭлемента();	
					#КонецОбласти
					
				Иначе 
					
					Продолжить;
				КонецЕсли;
				#КонецОбласти
				
			Иначе  
				ТекСтрока = ТитульнаяЗапись.Должник;
				Если ИтераторСобытий = 0 Тогда
					СформированПредыдущийДУЛ = Ложь;
					Если ЗначениеЗаполнено(тзПредыдущихЗаписейФЛ) Тогда
						мПредыдущиеЗаписиДолжника = тзПредыдущихЗаписейФЛ.НайтиСтроки(Новый Структура("Должник", ТитульнаяЗапись.Должник));
					Иначе
						мПредыдущиеЗаписиДолжника = Неопределено;
					КонецЕсли;
					ЗаписьXML.ЗаписатьНачалоЭлемента("Subject_FL");
					БлокиТитульнойЧастиФЛ(ЗаписьXML, ТитульнаяЗапись, мПредыдущиеЗаписиДолжника, СформированПредыдущийДУЛ, Настройка);
					ЗаписьXML.ЗаписатьНачалоЭлемента("Events");  
					
					Если ТаблицаИзмененийФЛ <> Неопределено Тогда
						 мСобытияСубъекта = ТаблицаИзмененийФЛ.НайтиСтроки(Новый Структура("Должник", ТитульнаяЗапись.Должник));
						 Если ЗначениеЗаполнено(мСобытияСубъекта) Тогда  
							 ДобавитьИзмененияФЛ(ЗаписьXML, мСобытияСубъекта, СформированПредыдущийДУЛ, Настройка, Операция, ДатаОтчета, ДокументОтчет, СчетчикБлоковВФайле);
							 //1.7, 1.9, 1.10, 1.12  
						КонецЕсли;
					КонецЕсли;
                    				
				Иначе
					ПредСтрока = ТаблицаИзмененийСделки[ИтераторСобытий - 1].СубъектСобытия;
					Если ТекСтрока <> ПредСтрока Тогда 
						СформированПредыдущийДУЛ = Ложь;
						Если ЗначениеЗаполнено(тзПредыдущихЗаписейФЛ) Тогда
							мПредыдущиеЗаписиДолжника = тзПредыдущихЗаписейФЛ.НайтиСтроки(Новый Структура("Должник", ТитульнаяЗапись.Должник));
						Иначе
							мПредыдущиеЗаписиДолжника = Неопределено;
						КонецЕсли;
						ЗаписьXML.ЗаписатьНачалоЭлемента("Subject_FL");
						БлокиТитульнойЧастиФЛ(ЗаписьXML, ТитульнаяЗапись, мПредыдущиеЗаписиДолжника, СформированПредыдущийДУЛ, Настройка);
						ЗаписьXML.ЗаписатьНачалоЭлемента("Events");  
						Если ТаблицаИзмененийФЛ <> Неопределено Тогда
							мСобытияСубъекта = ТаблицаИзмененийФЛ.НайтиСтроки(Новый Структура("Должник", ТитульнаяЗапись.Должник));
							Если ЗначениеЗаполнено(мСобытияСубъекта) Тогда  
								ДобавитьИзмененияФЛ(ЗаписьXML, мСобытияСубъекта, СформированПредыдущийДУЛ, Настройка, Операция, ДатаОтчета, ДокументОтчет, СчетчикБлоковВФайле);
								//1.7, 1.9, 1.10, 1.12  
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
				
				
				#Область Событие_1_1_и_Событие_1_2 //Субъект обратился к источнику/Источник одобрил обращение     
				
				Если СтрОбъект.СобытиеКодНБКИ = "1.1" ИЛИ СтрОбъект.СобытиеКодНБКИ = "1.2" Тогда 
					
										
					ЗаписьXML.ЗаписатьНачалоЭлемента(?(СтрОбъект.СобытиеКодНБКИ = "1.1", "FL_Event_1_1", "FL_Event_1_2"));
					
					ИмяИвента = ?(СтрОбъект.СобытиеКодНБКИ = "1.1", "FL_Event_1_1", "FL_Event_1_2");
					
					ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
					ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(СтрОбъект.ДатаСобытия));
					ЗаписьXML.ЗаписатьАтрибут("operationCode", Строка(Операция));  
					ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0"));
  
					
					Если СтрОбъект.СобытиеКодНБКИ = "1.1" Тогда
						FL_29_1_DebtBurdenInfo(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
					КонецЕсли;
					
					FL_55_Application(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
					
					ЗаписьXML.ЗаписатьКонецЭлемента();	
					#КонецОбласти	
					
					#Область Событие_1_3_Источник_отказался_от_совершения_сделки
					
				ИначеЕсли СтрОбъект.СобытиеКодНБКИ = "1.3" Тогда
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("FL_Event_1_3");
					
					ИмяИвента = "FL_Event_1_3";
					
					ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
					ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(СтрОбъект.ДатаСобытия));
					ЗаписьXML.ЗаписатьАтрибут("operationCode", Строка(Операция));  
					ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0"));

					
					FL_29_1_DebtBurdenInfo(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					FL_55_Application(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					FL_57_Reject(ЗаписьXML, СтрОбъект, ПараметрыФункций);	
					
					ЗаписьXML.ЗаписатьКонецЭлемента();
					#КонецОбласти					
					
					#Область Событие_2_4_Сведения_Об_Обеспечительстве
					
				ИначеЕсли СтрОбъект.СобытиеКодНБКИ = "2.4" Тогда 
					//Дописать формирование по типу поручительства
					ЗаписьXML.ЗаписатьНачалоЭлемента("FL_Event_2_4"); 
					
					ИмяИвента = "FL_Event_2_4";
					
					ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
					ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(СтрОбъект.ДатаСобытия));
					ЗаписьXML.ЗаписатьАтрибут("operationCode", Строка(Операция));  
					ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0"));

					
					FL_17_DealUid(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					FL_32_35_Group(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					FL_33_Warranty(ЗаписьXML, СтрОбъект, ПараметрыФункций);	
					
					FL_34_Guarantee(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
					
					//Дописать
					FL_36_ProvisionPayment(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					ЗаписьXML.ЗаписатьКонецЭлемента();	
					
					#КонецОбласти										
					
					#Область Событие_1_4_Заключение_договора
					
				ИначеЕсли СтрОбъект.СобытиеКодНБКИ = "1.4" Тогда 
					
					ИмяИвента = "FL_Event_1_4";
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("FL_Event_1_4");
					
					ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
					ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(СтрОбъект.ДатаСобытия));
					ЗаписьXML.ЗаписатьАтрибут("operationCode", "A");  
					ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0"));
   
					
					ЗаписиАдресРег = РегистрыСведений.КредитныеИсторииСтруктураАдреса.СоздатьНаборЗаписей();
					ЗаписиАдресРег.Отбор.Должник.Установить(ТитульнаяЗапись.Должник);
					ЗаписиАдресРег.Отбор.ВидАдреса.Установить(Перечисления.КредитныеИсторииВидыАдресов.Регистрации);
					ЗаписиАдресРег.Прочитать();
					Если ЗаписиАдресРег.Количество() = 0 Тогда
						ЗаписиАдресРег.Отбор.ВидАдреса.Установить(Перечисления.КредитныеИсторииВидыАдресов.Пребывания);
						ЗаписиАдресРег.Прочитать(); 
					КонецЕсли;	
					
					Если ЗаписиАдресРег.Количество() > 0 Тогда
						АдресРегистрации = ЗаписиАдресРег[0]; 
					Иначе
						АдресРегистрации = Неопределено;	
					КонецЕсли;	
					
					ЗаписиАдресФакт = РегистрыСведений.КредитныеИсторииСтруктураАдреса.СоздатьНаборЗаписей();
					ЗаписиАдресФакт.Отбор.Должник.Установить(ТитульнаяЗапись.Должник);
					ЗаписиАдресФакт.Отбор.ВидАдреса.Установить(Перечисления.КредитныеИсторииВидыАдресов.Фактический);
					ЗаписиАдресФакт.Прочитать();		
					
					Если ЗаписиАдресФакт.Количество() > 0 Тогда
						АдресФактический = ЗаписиАдресФакт[0]; 
					Иначе
						АдресФактический = Неопределено;
					КонецЕсли; 
					                                                
					
					FL_8_AddrReg(ЗаписьXML, ТитульнаяЗапись, АдресРегистрации, ПараметрыФункций);
					
					ФактическийРавноРегистрации = СравнитьАдресаФЛ(АдресРегистрации, АдресФактический);
					
					FL_9_AddrFact(ЗаписьXML, ТитульнаяЗапись, АдресФактический, ФактическийРавноРегистрации, ПараметрыФункций);						
					
					FL_10_Contact(ЗаписьXML, ТитульнаяЗапись, ПараметрыФункций); 
					
					FL_11_IndividualEntrepreneur(ЗаписьXML, ТитульнаяЗапись, ПараметрыФункций);
					
					FL_12_Capacity(ЗаписьXML, ТитульнаяЗапись, ПараметрыФункций); 
					
					FL_17_DealUid(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					FL_18_Deal(ЗаписьXML, СтрОбъект, ПараметрыФункций);   
					
					Если НЕ Формировать3122 Тогда
						
						FL_19_Amount(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						FL_19_1_AmountInfo(ЗаписьXML, СтрОбъект, ПараметрыФункций);   
						
						FL_21_PaymentTerms(ЗаписьXML, СтрОбъект, ПараметрыФункций);   
						
					Иначе
						FL_31_NonMonetarySubject(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					КонецЕсли;
					
					FL_20_JointDebtors(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					FL_22_TotalCost(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					FL_29_1_DebtBurdenInfo(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					FL_30_NonMonetarySource(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
					
					FL_54_Accounting(ЗаписьXML, СтрОбъект, ПараметрыФункций);
									
					FL_56_Participation(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
					
					ЗаписьXML.ЗаписатьКонецЭлемента();
					#КонецОбласти      
					
					#Область Событие_2_2_ВыдачаСуммы
					
				ИначеЕсли СтрОбъект.СобытиеКодНБКИ = "2.2" Тогда 
					
					ИмяИвента = "FL_Event_2_2";
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("FL_Event_2_2");
					
					ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
					ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(СтрОбъект.ДатаСобытия));
					ЗаписьXML.ЗаписатьАтрибут("operationCode", Строка(Операция));  
					ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0")); 
															
					FL_17_DealUid(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					FL_18_Deal(ЗаписьXML, СтрОбъект, ПараметрыФункций);  
					
					Если Не Формировать3122 Тогда
						
						FL_19_Amount(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						FL_19_1_AmountInfo(ЗаписьXML, СтрОбъект, ПараметрыФункций);   
						
						FL_21_PaymentTerms(ЗаписьXML, СтрОбъект, ПараметрыФункций);  
						
						FL_22_TotalCost(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						FL_24_Fund(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("FL_25_26_27_28_Group"); 
						
						//Задолженность
						СформироватьБлокФЛ252627(ЗаписьXML, СтрОбъект, СтрокиЗадолженности, ПараметрыФункций);	
						
						FL_28_Payment(ЗаписьXML, СтрОбъект, СтрокиОплат, ПараметрыФункций); 
						
						ЗаписьXML.ЗаписатьКонецЭлемента();   
						
						FL_29_MonthlyPayment(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						FL_29_1_DebtBurdenInfo(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
					Иначе
						FL_31_NonMonetarySubject(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					КонецЕсли;
					
					FL_20_JointDebtors(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
					
					FL_30_NonMonetarySource(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					FL_54_Accounting(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
						
					FL_55_Application(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					FL_56_Participation(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
					
					ЗаписьXML.ЗаписатьКонецЭлемента();
					#КонецОбласти
					
					#Область Событие_2_2_1_Субъект_стал_поручителем_по_сделке
					
				ИначеЕсли СтрОбъект.СобытиеКодНБКИ = "2.2.1" Тогда  
					
					ИмяИвента = "FL_Event_2_2_1";
	
					ЗаписьXML.ЗаписатьНачалоЭлемента("FL_Event_2_2_1");	 
					
					ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
					ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(СтрОбъект.ДатаСобытия));
					ЗаписьXML.ЗаписатьАтрибут("operationCode", Строка(Операция));  
					ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0"));
										
					FL_17_DealUid(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					FL_18_Deal(ЗаписьXML, СтрОбъект, ПараметрыФункций);  
					
					Если НЕ Формировать3122 Тогда
						
						FL_19_Amount(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						FL_19_1_AmountInfo(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						FL_21_PaymentTerms(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						FL_24_Fund(ЗаписьXML, СтрОбъект, ПараметрыФункций);   
						
					Иначе
						FL_31_NonMonetarySubject(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					КонецЕсли;
 
					
					FL_30_NonMonetarySource(ЗаписьXML, СтрОбъект, ПараметрыФункций);
										
					FL_54_Accounting(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					FL_56_Participation(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					ЗаписьXML.ЗаписатьКонецЭлемента();		 
					#КонецОбласти
					
					#Область Событие_2_1_Изменились_условия_обязательства
				ИначеЕсли СтрОбъект.СобытиеКодНБКИ = "2.1" Тогда  
					
					ИмяИвента = "FL_Event_2_1";
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("FL_Event_2_1");
					
					ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
					ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(СтрОбъект.ДатаСобытия));
					ЗаписьXML.ЗаписатьАтрибут("operationCode", Строка(Операция));  
					ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0")); 
										
					FL_17_DealUid(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					FL_18_Deal(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
					
					Если НЕ Формировать3122 Тогда
						
						FL_19_Amount(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						FL_19_1_AmountInfo(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						FL_21_PaymentTerms(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						FL_22_TotalCost(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("FL_25_26_27_28_Group");	
						
						//Задолженность
						СформироватьБлокФЛ252627(ЗаписьXML, СтрОбъект, СтрокиЗадолженности, ПараметрыФункций); 
						
						FL_28_Payment(ЗаписьXML, СтрОбъект, СтрокиОплат, ПараметрыФункций);
						
						ЗаписьXML.ЗаписатьКонецЭлемента();  
						
						FL_29_MonthlyPayment(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						FL_29_1_DebtBurdenInfo(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
					Иначе
						FL_31_NonMonetarySubject(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					КонецЕсли;
					
					FL_20_JointDebtors(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					// 23 23(1)	
					СформироватьИзмененияСделокФЛ(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					FL_30_NonMonetarySource(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					FL_54_Accounting(ЗаписьXML, СтрОбъект, ПараметрыФункций);   
								
					ЗаписьXML.ЗаписатьКонецЭлемента();	
					
					#КонецОбласти 
					
					
					#Область Событие_2_3_платежи
					
				ИначеЕсли СтрОбъект.СобытиеКодНБКИ = "2.3" Тогда 
					
					ИмяИвента = "FL_Event_2_3";
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("FL_Event_2_3");
					
					ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
					ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(СтрОбъект.ДатаСобытия));
					ЗаписьXML.ЗаписатьАтрибут("operationCode", Строка(Операция));  
					ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0"));
					
					
					FL_17_DealUid(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					FL_18_Deal(ЗаписьXML, СтрОбъект, ПараметрыФункций);    
					
					Если Не Формировать3122 Тогда
						
						FL_19_Amount(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						FL_19_1_AmountInfo(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						FL_21_PaymentTerms(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						FL_22_TotalCost(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("FL_25_26_27_28_Group");	
						
						//Задолженность
						СформироватьБлокФЛ252627(ЗаписьXML, СтрОбъект, СтрокиЗадолженности, ПараметрыФункций);
						
						FL_28_Payment(ЗаписьXML, СтрОбъект, СтрокиОплат, ПараметрыФункций);
						
						ЗаписьXML.ЗаписатьКонецЭлемента();
						
						FL_29_MonthlyPayment(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						FL_29_1_DebtBurdenInfo(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
						
					Иначе
						FL_31_NonMonetarySubject(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					КонецЕсли;
					
					FL_20_JointDebtors(ЗаписьXML, СтрОбъект, ПараметрыФункций);
 	
					FL_30_NonMonetarySource(ЗаписьXML, СтрОбъект, ПараметрыФункций);      
					
					//37 блок от обеспечительства 
					FL_37_WarrantyReturn(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					FL_54_Accounting(ЗаписьXML, СтрОбъект, ПараметрыФункций); 	
					
					FL_55_Application(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					FL_56_Participation(ЗаписьXML, СтрОбъект, ПараметрыФункций);	
					
					ЗаписьXML.ЗаписатьКонецЭлемента();  
					
					#КонецОбласти
					
					
					#Область Событие_2_5_ОбязательствоСубъектаПрекратилось
					
				ИначеЕсли СтрОбъект.СобытиеКодНБКИ = "2.5" Тогда 
					
					ИмяИвента = "FL_Event_2_5";
                   			
					ЗаписьXML.ЗаписатьНачалоЭлемента("FL_Event_2_5");
					
					ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
					ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(СтрОбъект.ДатаСобытия));
					ЗаписьXML.ЗаписатьАтрибут("operationCode", Строка(Операция));  
					ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0"));
					
					
					FL_17_DealUid(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					FL_18_Deal(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					Если Не Формировать3122 Тогда
						
						FL_19_Amount(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						FL_19_1_AmountInfo(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						FL_21_PaymentTerms(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						FL_22_TotalCost(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("FL_25_26_27_28_Group");	
						
						//Задолженность
						СформироватьБлокФЛ252627(ЗаписьXML, СтрОбъект, СтрокиЗадолженности, ПараметрыФункций);
						
						FL_28_Payment(ЗаписьXML, СтрОбъект, СтрокиОплат, ПараметрыФункций);
						
						ЗаписьXML.ЗаписатьКонецЭлемента();
						
						FL_29_MonthlyPayment(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						FL_29_1_DebtBurdenInfo(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
						
					Иначе
						FL_31_NonMonetarySubject(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					КонецЕсли;
					
					FL_30_NonMonetarySource(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					FL_38_ContractEnd(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					FL_56_Participation(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					ЗаписьXML.ЗаписатьКонецЭлемента();		
					#КонецОбласти
					
					
					#Область Событие_2_6_ИзменилисьСведенияОСудебномСпоре
					
				ИначеЕсли СтрОбъект.СобытиеКодНБКИ = "2.6" Тогда  
					ИмяИвента = "FL_Event_2_6";

					ЗаписьXML.ЗаписатьНачалоЭлемента("FL_Event_2_6");
					
					ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
					ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(СтрОбъект.ДатаСобытия));
					ЗаписьXML.ЗаписатьАтрибут("operationCode", Строка(Операция));  
					ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0"));
					
					FL_17_DealUid(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					FL_39_Court(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					ЗаписьXML.ЗаписатьКонецЭлемента();		
					#КонецОбласти
					
					#Область Событие_2_10_ИсточникПрекратилПередачуКИ
					
				ИначеЕсли СтрОбъект.СобытиеКодНБКИ = "2.10" Тогда 
					ИмяИвента = "FL_Event_2_10";
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("FL_Event_2_10"); 
					
					ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
					ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(СтрОбъект.ДатаСобытия));
					ЗаписьXML.ЗаписатьАтрибут("operationCode", Строка(Операция));  
					ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0"));
					
					
					FL_17_DealUid(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					FL_45_StopSend(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					ЗаписьXML.ЗаписатьКонецЭлемента();	
					#КонецОбласти 
					
					#Область Событие_2_11_2_Правопреемство
				ИначеЕсли СтрОбъект.СобытиеКодНБКИ = "2.11.2" Тогда
					
					ИмяИвента = "FL_Event_2_11_2";

					
					//Если АдресаФЛ <> 0 Тогда
					//	
					//	АдресРегистрации = АдресаФЛ.НайтиСтроки(Новый Структура("Должник, ВидАдреса", ТитульнаяЗапись.Должник, Перечисления.КредитныеИсторииВидыАдресов.Регистрации));
					//	Если АдресРегистрации.Количество() = 0 Тогда
					//		АдресРегистрации = АдресаФЛ.НайтиСтроки(Новый Структура("Должник, ВидАдреса", ТитульнаяЗапись.Должник, Перечисления.КредитныеИсторииВидыАдресов.Пребывания));
					//	КонецЕсли;
					//	
					//	FL_8_AddrReg(ЗаписьXML, ТитульнаяЗапись, АдресРегистрации[0], ПараметрыФункций); 
					//	
					//	АдресФактический = АдресаФЛ.НайтиСтроки(Новый Структура("Должник, ВидАдреса", ТитульнаяЗапись.Должник, Перечисления.КредитныеИсторииВидыАдресов.Фактический));
					//	Если АдресФактический.Количество() > 0 Тогда
					//		ФактическийРавноРегистрации = СравнитьАдресаФЛ(АдресРегистрации[0], АдресФактический[0]); 
					//		FL_9_AddrFact(ЗаписьXML, ТитульнаяЗапись, АдресФактический[0], ФактическийРавноРегистрации, ПараметрыФункций);		
					//	КонецЕсли;  
					//	
					//КонецЕсли;   
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("FL_Event_2_11_2");
					
					ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
					ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(СтрОбъект.ДатаСобытия));
					ЗаписьXML.ЗаписатьАтрибут("operationCode", "A");  
					ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0"));


					
					ЗаписиАдресРег = РегистрыСведений.КредитныеИсторииСтруктураАдреса.СоздатьНаборЗаписей();
					ЗаписиАдресРег.Отбор.Должник.Установить(ТитульнаяЗапись.Должник);
					ЗаписиАдресРег.Отбор.ВидАдреса.Установить(Перечисления.КредитныеИсторииВидыАдресов.Регистрации);
					ЗаписиАдресРег.Прочитать();
					Если ЗаписиАдресРег.Количество() = 0 Тогда
						ЗаписиАдресРег.Отбор.ВидАдреса.Установить(Перечисления.КредитныеИсторииВидыАдресов.Пребывания);
						ЗаписиАдресРег.Прочитать(); 
					КонецЕсли;	
					
					Если ЗаписиАдресРег.Количество() > 0 Тогда
						АдресРегистрации = ЗаписиАдресРег[0]; 
					Иначе
						АдресРегистрации = Неопределено;	
					КонецЕсли;	
					
					ЗаписиАдресФакт = РегистрыСведений.КредитныеИсторииСтруктураАдреса.СоздатьНаборЗаписей();
					ЗаписиАдресФакт.Отбор.Должник.Установить(ТитульнаяЗапись.Должник);
					ЗаписиАдресФакт.Отбор.ВидАдреса.Установить(Перечисления.КредитныеИсторииВидыАдресов.Фактический);
					ЗаписиАдресФакт.Прочитать();		
					
					Если ЗаписиАдресФакт.Количество() > 0 Тогда
						АдресФактический = ЗаписиАдресФакт[0]; 
					Иначе
						АдресФактический = Неопределено;
					КонецЕсли; 
					                                                
					
					FL_8_AddrReg(ЗаписьXML, ТитульнаяЗапись, АдресРегистрации, ПараметрыФункций);
					
					ФактическийРавноРегистрации = СравнитьАдресаФЛ(АдресРегистрации, АдресФактический);  
					
					FL_9_AddrFact(ЗаписьXML, ТитульнаяЗапись, АдресФактический, ФактическийРавноРегистрации, ПараметрыФункций);		
								
					FL_10_Contact(ЗаписьXML, ТитульнаяЗапись, ПараметрыФункций); 
					
					FL_11_IndividualEntrepreneur(ЗаписьXML, ТитульнаяЗапись, ПараметрыФункций);
					
					FL_12_Capacity(ЗаписьXML, ТитульнаяЗапись, ПараметрыФункций); 
					
					FL_17_DealUid(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					FL_18_Deal(ЗаписьXML, СтрОбъект, ПараметрыФункций);   
					
					Если НЕ Формировать3122 Тогда
						
						FL_19_Amount(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						FL_19_1_AmountInfo(ЗаписьXML, СтрОбъект, ПараметрыФункций);   
						
						FL_21_PaymentTerms(ЗаписьXML, СтрОбъект, ПараметрыФункций);   
						
						FL_22_TotalCost(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("FL_25_26_27_28_Group"); 
						
						//Задолженность
						СформироватьБлокФЛ252627(ЗаписьXML, СтрОбъект, СтрокиЗадолженности, ПараметрыФункций);
						
						FL_28_Payment(ЗаписьXML, СтрОбъект, СтрокиОплат, ПараметрыФункций); 
						
						ЗаписьXML.ЗаписатьКонецЭлемента();
						
						FL_29_MonthlyPayment(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						FL_29_1_DebtBurdenInfo(ЗаписьXML, СтрОбъект, ПараметрыФункций);   
						
						FL_54_Accounting(ЗаписьXML, СтрОбъект, ПараметрыФункций);  
						
						
					Иначе
						FL_31_NonMonetarySubject(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					КонецЕсли;
					
					FL_20_JointDebtors(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
					
					FL_30_NonMonetarySource(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					FL_56_Participation(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
					
					ЗаписьXML.ЗаписатьКонецЭлемента();	
					#КонецОбласти
					#Область Событие_2_11_Полная_Продажа
				ИначеЕсли СтрОбъект.СобытиеКодНБКИ = "2.11" Тогда
					ИмяИвента = "FL_Event_2_11";
										
					ЗаписьXML.ЗаписатьНачалоЭлемента("FL_Event_2_11");
					
					ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
					ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(СтрОбъект.ДатаСобытия));
					ЗаписьXML.ЗаписатьАтрибут("operationCode", Строка(Операция));  
					ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0"));

					
					FL_17_DealUid(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					FL_45_StopSend(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					ФЛСформироватьПриобретателяПравТребований(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					ЗаписьXML.ЗаписатьКонецЭлемента();	
					#КонецОбласти
					
				#Область Событие_2_11_1_частичная_продажа
				ИначеЕсли СтрОбъект.СобытиеКодНБКИ = "2.11.1" Тогда
					
					ИмяИвента = "FL_Event_2_11_1";
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("FL_Event_2_11_1");
					
					ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
					ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(СтрОбъект.ДатаСобытия));
					ЗаписьXML.ЗаписатьАтрибут("operationCode", Строка(Операция));  
					ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0"));
					
					FL_17_DealUid(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					FL_18_Deal(ЗаписьXML, СтрОбъект, ПараметрыФункций);   
					
					Если НЕ Формировать3122 Тогда
						
						FL_19_Amount(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						FL_19_1_AmountInfo(ЗаписьXML, СтрОбъект, ПараметрыФункций);   
						
						FL_21_PaymentTerms(ЗаписьXML, СтрОбъект, ПараметрыФункций);   
						
						FL_22_TotalCost(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("FL_25_26_27_28_Group"); 
						
						//Задолженность
						СформироватьБлокФЛ252627(ЗаписьXML, СтрОбъект, СтрокиЗадолженности, ПараметрыФункций);
						
						FL_28_Payment(ЗаписьXML, СтрОбъект, СтрокиОплат, ПараметрыФункций); 
						
						ЗаписьXML.ЗаписатьКонецЭлемента();
						
						FL_29_MonthlyPayment(ЗаписьXML, СтрОбъект, ПараметрыФункций);
						
						FL_29_1_DebtBurdenInfo(ЗаписьXML, СтрОбъект, ПараметрыФункций);   
						
						FL_54_Accounting(ЗаписьXML, СтрОбъект, ПараметрыФункций);  
						
						
					Иначе
						FL_31_NonMonetarySubject(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					КонецЕсли;
					
					FL_20_JointDebtors(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
					
					FL_30_NonMonetarySource(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					ФЛСформироватьПриобретателяПравТребований(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					FL_56_Participation(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
					
					ЗаписьXML.ЗаписатьКонецЭлемента();	
					#КонецОбласти
	            #Область Событие_2_12_Агент
				ИначеЕсли СтрОбъект.СобытиеКодНБКИ = "2.12" Тогда
					
					ИмяИвента = "FL_Event_2_12";
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("FL_Event_2_12");
					
					ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
					ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(СтрОбъект.ДатаСобытия));
					ЗаписьXML.ЗаписатьАтрибут("operationCode", Строка(Операция));  
					ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0"));
					
					FL_17_DealUid(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					FL_53_ServiceOrg(ЗаписьXML, СтрОбъект, ПараметрыФункций);
					
					FL_54_Accounting(ЗаписьXML, СтрОбъект, ПараметрыФункций); 
					
					ЗаписьXML.ЗаписатьКонецЭлемента();	
					#КонецОбласти

					
				Иначе 
					//Продолжить;
					
				КонецЕсли; 
				
				
			КонецЕсли;
			
			Если ИтераторСобытий = ТаблицаИзмененийСделки.Количество() - 1 Тогда
				ЗаписьXML.ЗаписатьКонецЭлемента(); // Конец элемента Events 
				ЗаписьXML.ЗаписатьКонецЭлемента();	// конец элемента Subject_FL_UL						
				
			Иначе
				СледСтрока = ТаблицаИзмененийСделки[ИтераторСобытий + 1].СубъектСобытия;
				
				Если ТекСтрока <> СледСтрока Тогда  
					ЗаписьXML.ЗаписатьКонецЭлемента(); // Конец элемента Events 
					ЗаписьXML.ЗаписатьКонецЭлемента();	// конец элемента Subject_FL_UL							
				КонецЕсли;
			КонецЕсли;   
			
			//<orderNum>5</orderNum><eventName>FL_Event_2_5</eventName> 
			
			СтрИдентификатор = СтрШаблон("<orderNum>%1</orderNum><eventName>%2", Формат(СчетчикБлоковВФайле, "ЧГ=0"), ИмяИвента);
 
			ИтераторСобытий = ИтераторСобытий + 1;  
			КредитныеИстории.ЗанестиЗаписьВЖурналRUTDF(СтрОбъект, ДатаОтчета, Операция, ДокументОтчет, СтрОбъект.UID, СтрИдентификатор);
			СчетчикБлоковВФайле = СчетчикБлоковВФайле + 1;
			
		КонецЦикла;	  
		
	КонецЕсли;
	
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // Конец элемента Data					
	ЗаписьXML.ЗаписатьКонецЭлемента(); //Конец элемента Document
	
	Строка = ЗаписьXML.Закрыть();
	
	ТекстДок.УстановитьТекст(Строка);	
	
КонецПроцедуры  


Процедура СформироватьXMLКорректировок(ТекстДок, КоличествоОбъектовУчета, КоличествоГруппБлоков, НастройкаВыгрузки, ТаблицаОснование, МассивТитульныхЗаписей, ДатаОтчета, СсылкаНаДокумент) Экспорт  
	
	ДокументОтчет = СсылкаНаДокумент;
	
	ТитульныеЗаписиДолжника = МассивТитульныхЗаписей.ТитульныеЗаписиДолжника;
	ТитульныеЗаписиПоручителя = МассивТитульныхЗаписей.ТитульныеЗаписиПоручителя;
	ТитульныеЗаписиНаследника = МассивТитульныхЗаписей.ТитульныеЗаписиНаследника;	
	
	ПараметрыФункций = Новый Структура;
	ПараметрыФункций.Вставить("Настройка", НастройкаВыгрузки);
	ПараметрыФункций.Вставить("ПСК", 0); 
	ПараметрыФункций.Вставить("ЕстьЗадолженность", Истина);
	ПараметрыФункций.Вставить("ТекущаяЗадолженность", 0);
	ПараметрыФункций.Вставить("Поручитель", "0");
	ПараметрыФункций.Вставить("Наследник", "0"); 
	ПараметрыФункций.Вставить("строкаТекущаяЗадолженность", Неопределено);
	ПараметрыФункций.Вставить("строкиПлатежи", Неопределено); 
	ПараметрыФункций.Вставить("ЗаписьОГосПоддержке", Неопределено);
	ПараметрыФункций.Вставить("ПризнакПринудительногоВзыскания", Ложь);
	ПараметрыФункций.Вставить("ПризнакОбеспечиваемогоОбязательства", Ложь); 
	ПараметрыФункций.Вставить("ДокументДолговаяНагрузка", Ложь);
	ПараметрыФункций.Вставить("ЗаписьПСК", Неопределено); 
	
	КоличествоСубъектовУчета = ТаблицаОснование.Количество();
	КоличествоСобытий = ТаблицаОснование.Количество();
	
				
	ЗаписиКИСделок = КредитныеИсторииИзменения.СформироватьЗаписиДействующейКИ(ТаблицаОснование.ВыгрузитьКолонку("ОбъектУчета"));
	
	ЗаписьXML = Новый ЗаписьXML();
	
	ПараметрыДок = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Истина, Ложь, "  ");
	
	ЗаписьXML.УстановитьСтроку(ПараметрыДок);
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Document"); 
		
	ЗаписатьАтрибутыXML(ЗаписьXML, НастройкаВыгрузки,  ДокументОтчет, ДокументОтчет.НепринятыйДокумент, КоличествоСубъектовУчета, КоличествоСобытий);
	
	БлокSource(ЗаписьXML, НастройкаВыгрузки, ДатаОтчета); //Запись блока Source (Информация об источнике КИ) 
	
	СчетчикБлоковВФайле = 1;
		
	ЗаписьXML.ЗаписатьНачалоЭлемента("Data");    
	
	тЗаголовкиОтчета = Новый ТаблицаЗначений;
	тЗаголовкиОтчета.Колонки.Добавить("ОбъектУчета");
    тЗаголовкиОтчета.Колонки.Добавить("ЗаголовокGroupHeader");
	
	Для Каждого СтрокаОснование из ТаблицаОснование Цикл
		
		СтрокаОснование.НомерБлока = стрЗаменить(СтрокаОснование.НомерБлока, "С", "C");
		СтрокаОснование.НомерБлока = стрЗаменить(СтрокаОснование.НомерБлока, "В", "B");  	
		
		ТитульнаяЗапись = КредитныеИстории.НайтиЗаписьДолжникаДляЗаголовка(ТитульныеЗаписиДолжника, СтрокаОснование.Должник);
		
		Попытка
			ДР = ТитульнаяЗапись.ДатаРождения;
			Префикс = "C";  
			ПараметрыФункций.Вставить("Дееспособность", ТитульнаяЗапись.Дееспособность); 
			ПараметрыФункций.Вставить("ЛицоНеСуществует", Неопределено);
		Исключение
			Префикс = "B";
			ПараметрыФункций.Вставить("Дееспособность", Неопределено); 
			ПараметрыФункций.Вставить("ЛицоНеСуществует", ТитульнаяЗапись.ЛиквидацияЮЛ);
		КонецПопытки;  
		
		
		ОперацияВОтчет = КредитныеИсторииИзменения.ОбработатьЗначениеПеречисленияОперацийКорректировки(СтрокаОснование.Операция);	
		КодСобытия = СтрокаОснование.Событие.КодНБКИ;
		ИмяИвента = ""; 
		
		//Формирование титульника   
		Если Префикс = "C" Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Subject_FL");
			БлокиТитульнойЧастиФЛ(ЗаписьXML, ТитульнаяЗапись, Неопределено, Ложь, НастройкаВыгрузки);
			ЗаписьXML.ЗаписатьНачалоЭлемента("Events");
		Иначе 
			ЗаписьXML.ЗаписатьНачалоЭлемента("Subject_UL");
			БлокиТитульнойЧастиЮЛ(ЗаписьXML, ТитульнаяЗапись, Неопределено, НастройкаВыгрузки, Неопределено);
			ЗаписьXML.ЗаписатьНачалоЭлемента("Events");
		КонецЕсли;			 	 
		
		Если СтрокаОснование.ЧастьКИ = Перечисления.ЧастиКИДляКорректировкиRUTDF.БлокТитульнойЧастиСубъекта Тогда 
			СформироватьШапкуИвентаКорректировка(ЗаписьXML, Префикс, КодСобытия, ДатаОтчета, ОперацияВОтчет, СчетчикБлоковВФайле, ИмяИвента); 
			//3.1, 4.1 
			// с 1 с2 д 1234
			//титульник что удаляется
			//Поблочно, блоки для корректировки
			// 1 2 3 4 5 6 7
			//В каррент - то, что удаляется
			//в нью - то сейчас есть В КИ текущее
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		Если СтрокаОснование.ЧастьКИ = Перечисления.ЧастиКИДляКорректировкиRUTDF.БлокДополнительнойЧастиСубъекта Тогда 
			СформироватьШапкуИвентаКорректировка(ЗаписьXML, Префикс, КодСобытия, ДатаОтчета, ОперацияВОтчет, СчетчикБлоковВФайле, ИмяИвента); 
			//3.1, 4.1  
			// с 1 с2 д 1234
			//Поблочно, блоки для корректировки 
			//8 9 10 11 12 13 14 43 ??56
			//В каррент - то, что удаляется  
			//Титульник = Каррент, 
			//в нью - то сейчас есть В КИ

			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли; 
		
		Если СтрокаОснование.ЧастьКИ = Перечисления.ЧастиКИДляКорректировкиRUTDF.СделкаСубъекта Тогда
			//ГОТОВО
			СформироватьШапкуИвентаКорректировка(ЗаписьXML, Префикс, КодСобытия, ДатаОтчета, ОперацияВОтчет, СчетчикБлоковВФайле, ИмяИвента); 
			//3.3, 4.2 
			// с 1 д 1234
			// Только одна сделка, блок 17
			//Для 4.2 расчет блока DealUid_R			
			ЗаписьСделка = КредитныеИсторииИзменения.НайтиЗаписьСделкиКИ(ЗаписиКИСделок, СтрокаОснование.ОбъектУчета);
			Если Не ЗначениеЗаполнено(ЗаписьСделка) Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "ERRORUZ", "Произошла ошибка формирования информации о сделке Должника!");
			КонецЕсли;  
			
			Если КодСобытия = "4.2" Тогда
				ПараметрыФункций.Вставить("ЛитераR", Истина);
			КонецЕсли;	
			
			Если Префикс = "C" Тогда
				FL_17_DealUid(ЗаписьXML, ЗаписьСделка, ПараметрыФункций);
			Иначе
				UL_10_DealUid(ЗаписьXML, ЗаписьСделка, ПараметрыФункций);
			КонецЕсли;
							
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли; 
		
		Если СтрокаОснование.ЧастьКИ = Перечисления.ЧастиКИДляКорректировкиRUTDF.ВсеСделкиСубъекта Тогда
			//ГОТОВО
			СформироватьШапкуИвентаКорректировка(ЗаписьXML, Префикс, КодСобытия, ДатаОтчета, ОперацияВОтчет, СчетчикБлоковВФайле, ИмяИвента); 
			// только 3.5 или 4.3 
			// с 1 д 1234
			//Только титульник
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		
		Если СтрокаОснование.ЧастьКИ = Перечисления.ЧастиКИДляКорректировкиRUTDF.ИнформативныйБлокСделкиСубъекта Тогда
			СформироватьШапкуИвентаКорректировка(ЗаписьXML, Префикс, КодСобытия, ДатаОтчета, ОперацияВОтчет, СчетчикБлоковВФайле, ИмяИвента); 
			//3.1  с1 с2
			// 17 10 УИД    
			//Поблочно, блоки для корректировки  
			//32 33 34 35 36 37 39 41 42 45 51 52 53 54
			//В каррент - то, что удаляется
			//в нью - то сейчас есть В КИ

			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;   
		
		Если СтрокаОснование.ЧастьКИ = Перечисления.ЧастиКИДляКорректировкиRUTDF.ДинамическаяИнформацияСделкиСубъекта Тогда
			//3.2 с1
			СтартДата = СтрокаОснование.ПараметрStartDate;  
			
			Если КодСобытия = "3.2" И СтрокаОснование.Операция = Перечисления.ВидыОперацийИсправленияИУдаленияRUTDF.C_2 Тогда
				Если НЕ ЗначениеЗаполнено(СтартДата) Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "ERRORUZ", "Внимание! Совокупность операций 3.2 С.2 не применяется для корректировки массовых событий.");
				КонецЕсли; 
			КонецЕсли;			
			
			СформироватьШапкуИвентаКорректировка(ЗаписьXML, Префикс, КодСобытия, ДатаОтчета, ОперацияВОтчет, СчетчикБлоковВФайле, ИмяИвента, СтартДата); 
			//УИД  
			Если Префикс = "C" Тогда
				FL_17_DealUid(ЗаписьXML, ЗаписьСделка, ПараметрыФункций);
			Иначе
				UL_10_DealUid(ЗаписьXML, ЗаписьСделка, ПараметрыФункций);
			КонецЕсли;

			//Выгрузка всех событий по сделке
			
			ИсторическиеЗаписиСделки = КредитныеИсторииИзменения.ВернутьИсторическиеДанныеПоНомеруБлока(СтрокаОснование.ОбъектУчета, СтрокаОснование.НомерБлока, СтартДата);	
			Если ИсторическиеЗаписиСделки = Неопределено Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "ERRORUZ", "Произошла ошибка формирования Исторических принятых событий по сделке!");
			КонецЕсли; 
			
			
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		Если СтрокаОснование.ЧастьКИ = Перечисления.ЧастиКИДляКорректировкиRUTDF.ОбращениеСубъекта Тогда
			//ГОТОВО
			//3.1, 4.1  
			// с 1 с2 д 1234
            //3.4 с 2
			//55  57 
			СформироватьШапкуИвентаКорректировка(ЗаписьXML, Префикс, КодСобытия, ДатаОтчета, ОперацияВОтчет, СчетчикБлоковВФайле, ИмяИвента);
			
			ПараметрыФункций.Вставить("КодСобытияКорректировка", КодСобытия);
			ЗаписьСделка = КредитныеИсторииИзменения.НайтиЗаписьСделкиКИ(ЗаписиКИСделок, СтрокаОснование.ОбъектУчета);
			Если Префикс = "C" Тогда
				FL_55_57_Group_Корректировка(ЗаписьXML, ЗаписьСделка, ПараметрыФункций);
			Иначе
				UL_45_47_Group_Корректировка(ЗаписьXML, ЗаписьСделка, ПараметрыФункций);
			КонецЕсли;	
						
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;	
		
		Если СтрокаОснование.ЧастьКИ = Перечисления.ЧастиКИДляКорректировкиRUTDF.ПрисвоениеНовогоУникальногоЗначенияСделки Тогда  			
			
			СформироватьШапкуИвентаКорректировка(ЗаписьXML, Префикс, КодСобытия, ДатаОтчета, ОперацияВОтчет, СчетчикБлоковВФайле, ИмяИвента); 
			//????
			// 3.3. с2 
			
			ЗаписьСделка = КредитныеИсторииИзменения.НайтиЗаписьСделкиКИ(ЗаписиКИСделок, СтрокаОснование.ОбъектУчета);
			Если Не ЗначениеЗаполнено(ЗаписьСделка) Тогда  
				
				Продолжить;
			КонецЕсли;	
			
			
			//тЗаписьПоследнегопринятогоСобытия = КредитныеИсторииИзменения.ВернутьПоследниеСобытияПоСделкам(мСделка, Ложь);	
			//Если тЗаписьПоследнегопринятогоСобытия = Неопределено Тогда 
			//	Продолжить;
			//КонецЕсли;  
			//
			//Если тЗаписьПоследнегопринятогоСобытия.Количество() > 0 Тогда
			//	Запись = тЗаписьПоследнегопринятогоСобытия[0];
			//Иначе  
			//	Продолжить;
			//КонецЕсли;	
			
			
			
			 ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;  
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // Конец элемента Events 
		ЗаписьXML.ЗаписатьКонецЭлемента();	// конец элемента Subject_FL_UL	
		 	
		СтрИдентификатор = СтрШаблон("<orderNum>%1</orderNum><eventName>%2", Формат(СчетчикБлоковВФайле, "ЧГ=0"), ИмяИвента);   
		
		ЗаполнитьСтруктуруВыгрузкиДокументаКорректировка(СтрИдентификатор, СтрокаОснование.ОбъектУчета, тЗаголовкиОтчета);
		
		СчетчикБлоковВФайле = СчетчикБлоковВФайле + 1;
		
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // Конец элемента Data					
	ЗаписьXML.ЗаписатьКонецЭлемента(); //Конец элемента Document
	
	Строка = ЗаписьXML.Закрыть();
	
	ТекстДок.УстановитьТекст(Строка);     
	
	КоличествоГруппБлоков = СчетчикБлоковВФайле;
	
	ЗагрузитьСтруктуруВыгрузкиДокументаКорректировка(ДокументОтчет, тЗаголовкиОтчета);
	
КонецПроцедуры	



&НаСервере
Процедура ЗаписатьАтрибутыXML(ЗаписьXML, Настройка, Отчет, НепринятыйОтчет, КоличествоСубъектов, СчетчикГруппБлоков)  
	
	НомерДокумента = ?(Настройка.ВерсияФормата.БКИ = Перечисления.КредитныеИстории_БКИ.СкорингБюро, Прав(Отчет.ИмяФайла, 6), Отчет.ИмяФайла);
	
	НомерНепринятогоДокумента = ?(ЗначениеЗаполнено(НепринятыйОтчет), НепринятыйОтчет.ИмяФайла, Отчет.ИмяФайла);
	НомерНепринятогоДокумента = ?(Настройка.ВерсияФормата.БКИ = Перечисления.КредитныеИстории_БКИ.СкорингБюро, Прав(НомерНепринятогоДокумента, 6), НомерНепринятогоДокумента);
	
	ЗаписьXML.ЗаписатьАтрибут("dateDoc", киФорматДатыXML(Отчет.Дата));	
	ЗаписьXML.ЗаписатьАтрибут("groupBlocksCount", Формат(СчетчикГруппБлоков, "ЧГ=0"));
	ЗаписьXML.ЗаписатьАтрибут("inn", Настройка.ИННИсточника); 
	ЗаписьXML.ЗаписатьАтрибут("ogrn", Настройка.ОГРНИсточника); 
	ЗаписьXML.ЗаписатьАтрибут("regNumberDoc", НомерДокумента);  
	ЗаписьXML.ЗаписатьАтрибут("regNumberDocInaccept", НомерНепринятогоДокумента);  
	ЗаписьXML.ЗаписатьАтрибут("schemaVersion", "2.2");
	ЗаписьXML.ЗаписатьАтрибут("sourceID", Настройка.ИдентификаторИсточника);
	ЗаписьXML.ЗаписатьАтрибут("subjectsCount", Формат(КоличествоСубъектов, "ЧГ=0"));
	
КонецПроцедуры 

&НаСервере
Процедура БлокSource(ЗаписьXML, Настройка, ДатаОтчета) Экспорт
	ЗаписьXML.ЗаписатьНачалоЭлемента("Source");		
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_46_UL_36_OrgSource");
	
	ДобавитьЗаписьВФайл(ЗаписьXML, "sourceCode", ?(ЗначениеЗаполнено(Настройка.КодИсточника.КодНБКИ), Настройка.КодИсточника.КодНБКИ, "17")); //36.1 Код организации источника = "17"
	Если Настройка.ИсточникРФ Тогда 
		ДобавитьЗаписьВФайл(ЗаписьXML, "sourceRegistrationFact_1", Настройка.ИсточникРФ); //36.2 Признак регистрации Организации на территории РФ = "1" (РФ) 
	Иначе 
		ДобавитьЗаписьВФайл(ЗаписьXML, "sourceRegistrationFact_0", Настройка.ИсточникРФ);
	КонецЕсли;
	ДобавитьЗаписьВФайл(ЗаписьXML, "fullName", Настройка.ИсточникНаименованиеПолное, Истина); //36.3 Полное наименование Источника
	ДобавитьЗаписьВФайл(ЗаписьXML, "shortName", Настройка.ИсточникНаименованиеСокращенное, Истина); // 36.4 Сокращенное наименование Источника
	ДобавитьЗаписьВФайл(ЗаписьXML, "otherName", Настройка.ИсточникИноеНаименование); //36.5 Иное наименование Источника 
	ДобавитьЗаписьВФайл(ЗаписьXML, "sourceIdLei", Настройка.ИсточникИноеНаименование); //36.6 Идентификатор LEI Источника
	ДобавитьЗаписьВФайл(ЗаписьXML, "sourceDateStart", киФорматДатыXML(Настройка.ИсточникДатаРегистрации)); //36.7 Дата организации (создания) Источника
	ДобавитьЗаписьВФайл(ЗаписьXML, "regNum", Настройка.ОГРНИсточника); //36.8 Регистрационный номер Источника
	ЗаписьXML.ЗаписатьНачалоЭлемента("TaxNum_group_FL_46_UL_36_OrgSource");
	ДобавитьЗаписьВФайл(ЗаписьXML, "taxCode", ?(Настройка.ИсточникРФ, "1", "2")); //36.9 Код номера налогоплательщика. Присвоен на территории РФ = "1"   
	ДобавитьЗаписьВФайл(ЗаписьXML, "taxNum", Настройка.ИННИсточника); //36.10 Номер налогоплательщика (ИНН организации)
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ДобавитьЗаписьВФайл(ЗаписьXML, "beginDateSourceBankruptcy", Неопределено); //36.11 Дата признания источника банкротом
	ДобавитьЗаписьВФайл(ЗаписьXML, "endDateSourceBankruptcy", Неопределено); //36.12 Дата окончания конкурсного производства
	ДобавитьЗаписьВФайл(ЗаписьXML, "beginDateSourceLiquidation", Неопределено); //36.13 Дата начала ликвидации источника
	ДобавитьЗаписьВФайл(ЗаписьXML, "endDateSourceLiquidation", Неопределено); //36.14 Дата окончания ликвидации источника
	ДобавитьЗаписьВФайл(ЗаписьXML, "sourceCreditInfoDate",киФорматДатыXML(ДатаОтчета)); //36.15 Дата формирования кредитной информации
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); //КонецЭлемента FL_46_UL_36_OrgSource
	ЗаписьXML.ЗаписатьКонецЭлемента(); //КонецЭлемента Source 
КонецПроцедуры 

&НаСервере
Процедура БлокиТитульнойЧастиЮЛ(ЗаписьXML, Запись, ЗаписьАдрес, Настройка, ПредыдущиеЗаписи)
	
	ТелНомер = "";
	Комментарий = "";
	
	Если Запись.Должник.Телефоны.Количество() > 0 Тогда
		ТелНомер = Запись.Должник.Телефоны[0].Номер;
		Коммент = ?(ЗначениеЗаполнено(Запись.Должник.Телефоны[0].Комментарий), " " + Строка(Запись.Должник.Телефоны[0].Комментарий), "");
		ВидТелНомера = ?(ЗначениеЗаполнено(Запись.Должник.Телефоны[0].ВидТелефона), Запись.Должник.Телефоны[0].ВидТелефона, "");
		Комментарий = ВидТелНомера +  Коммент;	 
	КонецЕсли;
	
	ТелНомер = КредитныеИстории.НБКИОбработатьНомерТелефона(ТелНомер);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("UL_1_Name"); 
	ДобавитьЗаписьВФайл(ЗаписьXML, "fullName", Запись.ПолноеНаименование, ИСТИНА);
	ДобавитьЗаписьВФайл(ЗаписьXML, "shortName", Запись.Должник.Наименование, ИСТИНА);
	ДобавитьЗаписьВФайл(ЗаписьXML, "otherName", Запись.ИноеНаименование, ИСТИНА);
	
	//Если предыдущие записи истина Дописать
	
	ДобавитьЗаписьВФайл(ЗаписьXML, "change_0", ЛОЖЬ); 
	ДобавитьЗаписьВФайл(ЗаписьXML, "prevFull", Неопределено); // Дописать
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("UL_2_Address");

	ДобавитьЗаписьВФайл(ЗаписьXML, "countryCode", ЗаписьАдрес.КодСтраныПоОКСМ);
	ДобавитьЗаписьВФайл(ЗаписьXML, "countryOther", ?(СтрНайти(ЗаписьАдрес.КодСтраныОКСМ, "999") > 0, ЗаписьАдрес.НаименованиеИнойСтраны, ""), ИСТИНА);
	ДобавитьЗаписьВФайл(ЗаписьXML, "regStateNum", ЗаписьАдрес.НомерАдресаФИАС);
	ОКАТО = СтрЗаменить(ЗаписьАдрес.НаселенныйПунктОКАТО, Символы.НПП, "");
	Если СтрДлина(ОКАТО) = 10 Тогда
		ОКАТО = "0" + ОКАТО;
	КонецЕсли;	
	ДобавитьЗаписьВФайл(ЗаписьXML, "locationCode", ОКАТО);
	ДобавитьЗаписьВФайл(ЗаписьXML, "locationOther", ?(СтрНайти(ОКАТО, "99 999 999 999") > 0, ЗаписьАдрес.НаселенныйПунктНазвание, ""), ИСТИНА);
	ДобавитьЗаписьВФайл(ЗаписьXML, "street", ЗаписьАдрес.Улица, ИСТИНА); 
	ДобавитьЗаписьВФайл(ЗаписьXML, "house", ЗаписьАдрес.Дом, ИСТИНА);
	ДобавитьЗаписьВФайл(ЗаписьXML, "estate", ЗаписьАдрес.Владение, ИСТИНА);
	ДобавитьЗаписьВФайл(ЗаписьXML, "block", ЗаписьАдрес.Корпус, ИСТИНА);
	ДобавитьЗаписьВФайл(ЗаписьXML, "build", ЗаписьАдрес.Строение, ИСТИНА);
	ДобавитьЗаписьВФайл(ЗаписьXML, "apart",  ЗаписьАдрес.КвартираПомещениеОфис, ИСТИНА); 
	Если ТелНомер <> "" Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Phone_group_UL_2_Address");
		ДобавитьЗаписьВФайл(ЗаписьXML, "phone", ТелНомер); 
		ДобавитьЗаписьВФайл(ЗаписьXML, "phoneComment", Комментарий, Истина); 
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	ДобавитьЗаписьВФайл(ЗаписьXML, "email", Запись.ЭлПочта);
	ДобавитьЗаписьВФайл(ЗаписьXML, "foreignerFact_0", Ложь);
	ЗаписьXML.ЗаписатьКонецЭлемента(); 
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("UL_3_Reg");
	ДобавитьЗаписьВФайл(ЗаписьXML, "regNum", Запись.ОГРН);
	ДобавитьЗаписьВФайл(ЗаписьXML, "lei", Запись.ИдентификаторLEI);
	ЗаписьXML.ЗаписатьКонецЭлемента();          
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("UL_4_Tax");
	ЗаписьXML.ЗаписатьНачалоЭлемента("TaxNum_group_UL_4_Tax");		
	ДобавитьЗаписьВФайл(ЗаписьXML, "taxNum", Запись.ИНН);  
	ДобавитьЗаписьВФайл(ЗаписьXML, "taxCode", "1");
	ЗаписьXML.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьКонецЭлемента(); 
	
	Если ЗначениеЗаполнено(ПредыдущиеЗаписи) Тогда
		стрПредыдущаяЗапись = ПредыдущиеЗаписи[ПредыдущиеЗаписи.Количество() - 1];
		ЗаписьXML.ЗаписатьНачалоЭлемента("UL_5_Reorg");
		ДобавитьЗаписьВФайл(ЗаписьXML, "exist_1", Истина);
		ДобавитьЗаписьВФайл(ЗаписьXML, "fullName", стрПредыдущаяЗапись.ПолноеНаименование, ИСТИНА);
		ДобавитьЗаписьВФайл(ЗаписьXML, "shortName", стрПредыдущаяЗапись.Должник.Наименование, ИСТИНА);	
		ДобавитьЗаписьВФайл(ЗаписьXML, "regNum", стрПредыдущаяЗапись.ОГРН);
		ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(Запись.ДатаРеорганизации));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	Иначе 
		ЗаписьXML.ЗаписатьНачалоЭлемента("UL_5_Reorg");
		ДобавитьЗаписьВФайл(ЗаписьXML, "exist_0", Ложь);
		ЗаписьXML.ЗаписатьКонецЭлемента();	
	КонецЕсли;  
	
	
	//ЗаписьXML.ЗаписатьНачалоЭлемента("UL_5_Reorg");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "exist_0", Ложь);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "fullName", Неопределено);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "shortName", Неопределено);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "regNum", Неопределено);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "date", Неопределено);
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();// Конец блока Title	
	
КонецПроцедуры

&НаСервере
Процедура UL_1_Name_Корректировка(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	//ИмяБлока = ?(НовоеЗначение, "UL_1_Name_new", "UL_1_Name_current");
	//
	//Если Не НовоеЗначение Тогда
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("UL_1_Name");
	//КонецЕсли;
	//ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяБлока); 
	//ДобавитьЗаписьВФайл(ЗаписьXML, "fullName", НаименованиеПолное, Истина);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "shortName", Наименование, Истина);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "otherName", Неопределено);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "change_0", "0"); 
	//ДобавитьЗаписьВФайл(ЗаписьXML, "prevFull", Неопределено);
	//ЗаписьXML.ЗаписатьКонецЭлемента(); 
	//Если НовоеЗначение Тогда
	//	ЗаписьXML.ЗаписатьКонецЭлемента();
	//КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура UL_2_Address_Корректировка(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	//Если Не НовоеЗначение Тогда
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("UL_2_Address");
	//КонецЕсли;
	//ИмяБлока = ?(НовоеЗначение, "UL_2_Address_new", "UL_2_Address_current"); 
	//ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяБлока);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "countryCode",КодСтраныПоОКСМ);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "countryOther", Неопределено);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "regStateNum", Неопределено);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "locationCode", ОКАТО);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "locationOther", Неопределено);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "street", Улица, Истина); 
	//ДобавитьЗаписьВФайл(ЗаписьXML, "house", Дом);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "estate", Неопределено);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "block", Корпус);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "build", Строение);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "apart", Неопределено); 
	//Если Телефон <> "" Тогда
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("Phone_group_UL_2_Address");
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "phone", Телефон);
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "phoneComment", Неопределено); 
	//	ЗаписьXML.ЗаписатьКонецЭлемента();	
	//КонецЕсли;
	//ДобавитьЗаписьВФайл(ЗаписьXML, "email", Неопределено);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "foreignerFact_0", "0");
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	//Если НовоеЗначение Тогда
	//	ЗаписьXML.ЗаписатьКонецЭлемента();
	//КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура UL_3_Reg_Корректировка(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	//Если Не НовоеЗначение Тогда
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("UL_3_Reg");
	//КонецЕсли;
	//ИмяБлока = ?(НовоеЗначение, "UL_3_Reg_new", "UL_3_Reg_current");
	//ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяБлока);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "regNum", ОГРН);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "lei", Неопределено);
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	//Если НовоеЗначение Тогда
	//	ЗаписьXML.ЗаписатьКонецЭлемента();
	//КонецЕсли;	
	//
КонецПроцедуры

&НаСервере
Процедура UL_4_Tax_Корректировка(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	//
	//Если Не НовоеЗначение Тогда
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("UL_4_Tax");
	//КонецЕсли;
	//ИмяБлока = ?(НовоеЗначение, "TaxNum_group_UL_4_Tax_new", "TaxNum_group_UL_4_Tax_current");
	//ЗаписьXML.ЗаписатьНачалоЭлемента("TaxNum_group_UL_4_Tax_current");		
	//ДобавитьЗаписьВФайл(ЗаписьXML, "taxNum", ИНН);  
	//ДобавитьЗаписьВФайл(ЗаписьXML, "taxCode", "1");
	//ЗаписьXML.ЗаписатьКонецЭлемента();	
	//Если НовоеЗначение Тогда
	//	ЗаписьXML.ЗаписатьКонецЭлемента();
	//КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура UL_45_Application_Корректировка(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	//Если Не НовоеЗначение Тогда
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("UL_45_Application");
	//КонецЕсли;
	//
	//ИмяБлока = ?(НовоеЗначение, "UL_45_Application_new", "UL_45_Application_current");
	//ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяБлока);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "role", КодВидаУчастияВСделке(КодВидУчастияВСделке));
	//ДобавитьЗаписьВФайл(ЗаписьXML, "sum", "");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "currency", "");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "uid", УИДОбращения);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "applicationDate", Формат(ДатаОбращения, "ДФ=yyyy-MM-dd"));
	//ДобавитьЗаписьВФайл(ЗаписьXML, "sourceCode", "7");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "wayCode", КодСпособаОбращения(КодСпособаОбращения));
	//ДобавитьЗаписьВФайл(ЗаписьXML, "approvalEndDate", Формат(ДатаОкончанияДействияОдобрения, "ДФ=yyyy-MM-dd"));
	//ДобавитьЗаписьВФайл(ЗаписьXML, "stageEndDate", ?(ДатаОкончанияДействияОдобрения <> Дата(1,1,1), 
	//Формат(ДатаОкончанияДействияОдобрения, "ДФ=yyyy-MM-dd"), "3999-12-31"));
	//ДобавитьЗаписьВФайл(ЗаписьXML, "purposeCode", "");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "stageCode", СтадияОбращения(СтадияРассмотренияОбращения));
	//ДобавитьЗаписьВФайл(ЗаписьXML, "stageDate", Формат(ДатаСтадииРассмотренияОбращения, "ДФ=yyyy-MM-dd"));
	//ДобавитьЗаписьВФайл(ЗаписьXML, "applicationCode", "10"); 
	//ДобавитьЗаписьВФайл(ЗаписьXML, "num", "");	
	//ДобавитьЗаписьВФайл(ЗаписьXML, "loanSum", "");	
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	//
	//ЗаписьXML.ЗаписатьКонецЭлемента();	
	
КонецПроцедуры  

&НаСервере
Процедура UL_46_Participation_Корректировка(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	//Если Не НовоеЗначение Тогда
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("UL_46_Participation");
	//КонецЕсли;
	//ИмяБлока = ?(НовоеЗначение, "UL_46_Participation_new", "UL_46_Participation_current");
	//ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяБлока);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "role", КодВидаУчастияВСделке(КодВидаУчастияВСделке));
	//ДобавитьЗаписьВФайл(ЗаписьXML, "kindCode", КодВидаЗайма);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "uid", УидДоговора);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "fundDate", Формат(ДатаВозникновенияОбязательств, "ДФ=yyyy-MM-dd"));
	//Если ПризнакПросрочки = "1" Тогда
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "overdueExist_1", ПризнакПросрочки);	
	//Иначе	
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "overdueExist_0", ПризнакПросрочки);
	//КонецЕсли;
	//
	//Если ПризнакПрекращенияОбязательства = "1" Тогда
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "stopExist_1", ПризнакПрекращенияОбязательства);
	//Иначе	
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "stopExist_0", ПризнакПрекращенияОбязательства);
	//КонецЕсли;
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	//Если НовоеЗначение Тогда
	//	ЗаписьXML.ЗаписатьКонецЭлемента();
	//КонецЕсли;	
	//
КонецПроцедуры

&НаСервере
Процедура UL_45_47_Group_Корректировка(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	Если ДопПараметры.КодСобытияКорректировка <> "3.4" Тогда	
		ЗаписьXML.ЗаписатьНачалоЭлемента("UL_45_47_Group_R");	
		ЗаписьXML.ЗаписатьНачалоЭлемента("UL_45_47_Group_R_current");
	КонецЕсли;
	
	
	Настройка = ДопПараметры.Настройка;	
	Заполнено = Ложь; 
	
	Если ЗначениеЗаполнено(Запись.Прощение) Тогда 
		ЗаписьXML.ЗаписатьНачалоЭлемента("UL_45_Application_R");
		СформироватьБлок55_45Наследование(ЗаписьXML, Запись);
		Заполнено = Истина;
	ИначеЕсли ЗначениеЗаполнено(Запись.ДоговорМКЗ)  Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("UL_45_Application_R");
		СформироватьБлок55_45МКЗ(ЗаписьXML, Запись, Запись.ДоговорМКЗ);
		Заполнено = Истина;
	ИначеЕсли ЗначениеЗаполнено(Запись.РеструктуризацияМКЗ) Тогда 
		ЗаписьXML.ЗаписатьНачалоЭлемента("UL_45_Application_R");
		СформироватьБлок55_45МКЗ(ЗаписьXML, Запись, Запись.РеструктуризацияМКЗ);
		Заполнено = Истина;
	ИначеЕсли ЗначениеЗаполнено(Запись.НеденежноеОбязательство) И НЕ Заполнено  Тогда 
		ЗаписьXML.ЗаписатьНачалоЭлемента("UL_45_Application_R");
		СформироватьБлок55_45НО(ЗаписьXML, Запись, Запись.НеденежноеОбязательство); 
	ИначеЕсли Запись.СобытиеКодНБКИ = "2.3" И НЕ Заполнено Тогда 	 
		Возврат;
	Иначе
		ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, Настройка, "B45_APPLICATION", "Сделка"); 
		ЗаписьXML.ЗаписатьНачалоЭлемента("UL_45_Application_R");
		Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл				
			Если Значение.НомерПоказателя = "B45.1" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "role", Значение.Значение);					
			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "B45.2" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "sum", киФорматЧисла2(Значение.Значение));					
			КонецЕсли; 
			
			Если Значение.НомерПоказателя = "B45.3" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "currency", Значение.Значение, ИСТИНА);   
				Продолжить;
			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "B45.4" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "uid", Значение.Значение);   
				Продолжить;
			КонецЕсли; 
			
			Если Значение.НомерПоказателя = "B45.5" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "applicationDate", киФорматДатыXML(Значение.Значение));   
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "B45.6" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "sourceCode", Значение.Значение);   
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "B45.8" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "wayCode", Значение.Значение);   
				Продолжить;
			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "B45.9" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "approvalEndDate", киФорматДатыXML(Значение.Значение));   
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "B45.10" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "stageEndDate", киФорматДатыXML(Значение.Значение));   
				Продолжить;
			КонецЕсли; 
			
			Если Значение.НомерПоказателя = "B45.11" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "purposeCode", Значение.Значение);   
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "B45.12" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "stageCode", Значение.Значение);   
				Продолжить;
			КонецЕсли; 
			
			Если Значение.НомерПоказателя = "B45.13" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "stageDate", киФорматДатыXML(Значение.Значение));   
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "B45.14" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "applicationCode", Значение.Значение);   
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "B45.15" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "num", Значение.Значение);   
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "B45.16" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "loanSum", киФорматЧисла2(Значение.Значение));   
				Продолжить;
			КонецЕсли; 	
		КонецЦикла; 
		
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();  
	
	Если ДопПараметры.КодСобытияКорректировка <> "3.4" Тогда
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("UL_47_Reject");	
		Если ЗначениеЗаполнено(Запись.Банкротство) Тогда
			Если ТипЗнч(Запись.Банкротство) = Тип("СправочникСсылка.ДелоОБанкротстве") Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "rejectDate", киФорматДатыXML(Запись.Банкротство.ДатаПоследнейПроверки));
			Иначе 
				ДобавитьЗаписьВФайл(ЗаписьXML, "rejectDate", киФорматДатыXML(Запись.ДатаСобытия));
			КонецЕсли;
			ДобавитьЗаписьВФайл(ЗаписьXML, "rejectCode", "6");
		ИначеЕсли ЗначениеЗаполнено(Запись.ДоговорМКЗ) ИЛИ ЗначениеЗаполнено(Запись.РеструктуризацияМКЗ) Тогда
			ДобавитьЗаписьВФайл(ЗаписьXML, "rejectDate", киФорматДатыXML(Запись.ДатаСобытия));
			ДобавитьЗаписьВФайл(ЗаписьXML, "rejectCode", "5");
		ИначеЕсли ЗначениеЗаполнено(Запись.НеденежноеОбязательство) Тогда
			ДобавитьЗаписьВФайл(ЗаписьXML, "rejectDate", киФорматДатыXML(Запись.ДатаСобытия));
			ДобавитьЗаписьВФайл(ЗаписьXML, "rejectCode", "5");
		Иначе
			ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, ДопПараметры.Настройка, "B47_APPLREJECT", "Сделка"); 	
			Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл
				Если Значение.НомерПоказателя = "B47.1" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "rejectDate", киФорматДатыXML(Значение.Значение));
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "B47.2" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "rejectCode", Значение.Значение); 
					Продолжить;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;	
		
		ЗаписьXML.ЗаписатьКонецЭлемента();   
		
	КонецЕсли;
	
	Если ДопПараметры.КодСобытияКорректировка <> "3.4" Тогда	
		ЗаписьXML.ЗаписатьКонецЭлемента();//Group_R";	
		ЗаписьXML.ЗаписатьКонецЭлемента(); //"Group_R_current";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура FL_1_4_Group_Корректировка(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	//Если Не НовыеСведения Тогда
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_1_4_Group");
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_1_4_Group_current"); 
	//Иначе
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_1_4_Group_new");
	//КонецЕсли;
	//ЗаписьXML.ЗаписатьНачалоЭлемента("FL_1_Name");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "lastName", Фамилия, Истина);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "firstName", Имя, Истина);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "middleName", Отчество, Истина);
	//ЗаписьXML.ЗаписатьКонецЭлемента(); 
	//
	//ЗаписьXML.ЗаписатьНачалоЭлемента("FL_4_Doc");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "countryCode", КодСтраныПоОКСМ);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "countryOther", "");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "docCode", "21");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "docOtherName", "");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "docSeries", ПаспортСерия);  
	//ДобавитьЗаписьВФайл(ЗаписьXML, "docNum", ПаспортНомер);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "issueDate", Формат(ПаспортДатаВыдачи, "ДФ=yyyy-MM-dd"));
	//ДобавитьЗаписьВФайл(ЗаписьXML, "docIssuer", ПаспортКемВыдан);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "deptCode", ПаспортКодПодразделения);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "endDate", ""); 
	//ДобавитьЗаписьВФайл(ЗаписьXML, "foreignerCode", "3");
	//ЗаписьXML.ЗаписатьКонецЭлемента(); 
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	//Если НовыеСведения Тогда
	//	ЗаписьXML.ЗаписатьКонецЭлемента(); // Закрытие блока FL_1_4_Group
	//КонецЕсли;	
	
	
КонецПроцедуры

&НаСервере
Процедура FL_3_Birth_Корректировка(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	//Если Не НовоеЗначение Тогда
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_3_Birth");
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_3_Birth_current");
	//Иначе
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_3_Birth_new");
	//КонецЕсли;
	//ДобавитьЗаписьВФайл(ЗаписьXML, "birthDate", Формат(ДатаРождения, "ДФ=yyyy-MM-dd"));
	//ДобавитьЗаписьВФайл(ЗаписьXML, "countryCode", КодСтраныПоОКСМ);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "birthPlace", МестоРождения);
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	//Если НовоеЗначение Тогда
	//	ЗаписьXML.ЗаписатьКонецЭлемента();
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура FL_6_Tax_Корректировка(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	//Если Не НовоеЗначение Тогда
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_6_Tax");	
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_6_Tax_current");
	//Иначе
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_6_Tax_new");
	//КонецЕсли;
	//ЗаписьXML.ЗаписатьНачалоЭлемента("TaxNum_group_FL_6_Tax");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "taxNum", ИНН);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "taxCode", "1");
	//ЗаписьXML.ЗаписатьКонецЭлемента();	
	//ДобавитьЗаписьВФайл(ЗаписьXML, "regNum", ОГРН);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "specialMode_0", "0");
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	//Если НовоеЗначение Тогда
	//	ЗаписьXML.ЗаписатьКонецЭлемента();	
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура FL_7_Social_Корректировка(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	//
	//Если Не НовоеЗначение Тогда
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_7_Social");
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_7_Social_current");
	//Иначе	
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_7_Social_new");
	//КонецЕсли;
	//ДобавитьЗаписьВФайл(ЗаписьXML, "socialNum", Снилс);
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	//Если НовоеЗначение Тогда
	//	ЗаписьXML.ЗаписатьКонецЭлемента();	
	//КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура FL_8_AddrReg_Корректировка(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	//Если Не НовоеСобытие Тогда
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_8_AddrReg");
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_8_AddrReg_current");
	//Иначе
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_8_AddrReg_new");	
	//КонецЕсли;
	//
	//ДобавитьЗаписьВФайл(ЗаписьXML, "code", КодАдресаРегистрации);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "postCode", АдресИндекс);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "countryCode", КодСтраныПоОКСМ);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "countryOther", НаименованиеИнойСтраны);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "regStateNum", АдресФИАС);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "locationCode", ОКАТО);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "locationOther", НаселенныйПункт);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "street", Улица);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "house", Дом);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "estate", Владение);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "block", Корпус);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "build", Строение);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "apart", Квартира);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "date", Формат(ДатаРегистрации, "ДФ=yyyy-MM-dd"));
	//ДобавитьЗаписьВФайл(ЗаписьXML, "dept", РегистрирующийОрган);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "deptCode", КодПодразделения);
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	//Если НовоеСобытие Тогда
	//	ЗаписьXML.ЗаписатьКонецЭлемента();
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура FL_9_AddrFact_Корректировка(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	//Если Не НовоеЗначение Тогда
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_9_AddrFact");
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_9_AddrFact_current");
	//Иначе	
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_9_AddrFact_new");
	//КонецЕсли;				
	//Если ПризнакОтличияФактическогоМестаЖительства = "0" Тогда
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "exist_0", ПризнакОтличияФактическогоМестаЖительства);	
	//Иначе
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "exist_1", ПризнакОтличияФактическогоМестаЖительства);
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "postCode", ПочтовыйИндекс);
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "countryCode", КодОКСМ);
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "countryOther", НаименованиеИнойСтраны);
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "regStateNum", АдресФИАС);
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "locationCode", КодОКАТО);
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "locationOther", ИнойНаселенныйПункт);
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "street", Улица);
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "house", Дом);
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "estate", Владение);
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "block", Корпус);
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "build", Строение);
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "apart", Квартира);
	//КонецЕсли;
	//ЗаписьXML.ЗаписатьКонецЭлемента(); 
	//
КонецПроцедуры

&НаСервере
Процедура FL_10_Contact_Корректировка(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	//Если Не НовоеЗначение Тогда
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_10_Contact");
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_10_Contact_current");
	//Иначе	
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_10_Contact_new");
	//КонецЕсли;
	//ДобавитьЗаписьВФайл(ЗаписьXML, "phone", Телефон);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "phoneComment", Комментарий);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "email", АдресЭлПочты);
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	//
	//Если НовоеЗначение Тогда
	//	ЗаписьXML.ЗаписатьКонецЭлемента();
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура FL_11_IndividualEntrepreneur_Корректировка(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	//Если Не НовоеЗначение Тогда
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_11_IndividualEntrepreneur");
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_11_IndividualEntrepreneur_current");
	//Иначе	
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_11_IndividualEntrepreneur_new");
	//КонецЕсли;
	//ЗаписьXML.ЗаписатьНачалоЭлемента("FL_11_IndividualEntrepreneur");
	//Если ПризнакИП = "0" Тогда
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "regFact_0", ПризнакИП);
	//Иначе	
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "regFact_1", ПризнакИП);
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "regNum", ОГРН);
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "date", Формат(ДатаРегистрацииИндивидуальногоПредпринимателя, "ДФ=yyyy-MM-dd"));
	//КонецЕсли;	
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	//Если НовоеЗначение Тогда
	//	ЗаписьXML.ЗаписатьКонецЭлемента();	
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура FL_55_57_Group_Корректировка(ЗаписьXML, Запись, ДопПараметры = Неопределено) 
	
	Если ДопПараметры.КодСобытияКорректировка <> "3.4" Тогда	
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_55_57_Group_R");	
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_55_57_Group_R_current");
	КонецЕсли;
	
	
	Настройка = ДопПараметры.Настройка;	
	Заполнено = Ложь; 
	
	Если ЗначениеЗаполнено(Запись.Прощение) Тогда 
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_55_Application_R");
		СформироватьБлок55_45Наследование(ЗаписьXML, Запись);
		Заполнено = Истина;
	ИначеЕсли ЗначениеЗаполнено(Запись.ДоговорМКЗ)  Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_55_Application_R");
		СформироватьБлок55_45МКЗ(ЗаписьXML, Запись, Запись.ДоговорМКЗ);
		Заполнено = Истина;
	ИначеЕсли ЗначениеЗаполнено(Запись.РеструктуризацияМКЗ) Тогда 
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_55_Application_R");
		СформироватьБлок55_45МКЗ(ЗаписьXML, Запись, Запись.РеструктуризацияМКЗ);
		Заполнено = Истина;
	ИначеЕсли ЗначениеЗаполнено(Запись.НеденежноеОбязательство) И НЕ Заполнено  Тогда 
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_55_Application_R");
		СформироватьБлок55_45НО(ЗаписьXML, Запись, Запись.НеденежноеОбязательство); 
	ИначеЕсли Запись.СобытиеКодНБКИ = "2.3" И НЕ Заполнено Тогда 	 
		Возврат;
	Иначе
		ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, Настройка, "C55_APPLICATION", "Сделка"); 
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_55_Application_R");
		Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл				
			Если Значение.НомерПоказателя = "C55.1" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "role", Значение.Значение);					
			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "C55.2" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "sum", киФорматЧисла2(Значение.Значение));					
			КонецЕсли; 
			
			Если Значение.НомерПоказателя = "C55.3" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "currency", Значение.Значение, ИСТИНА);   
				Продолжить;
			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "C55.4" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "uid", Значение.Значение);   
				Продолжить;
			КонецЕсли; 
			
			Если Значение.НомерПоказателя = "C55.5" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "applicationDate", киФорматДатыXML(Значение.Значение));   
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "C55.6" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "sourceCode", Значение.Значение);   
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "C55.8" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "wayCode", Значение.Значение);   
				Продолжить;
			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "C55.9" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "approvalEndDate", киФорматДатыXML(Значение.Значение));   
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "C55.10" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "stageEndDate", киФорматДатыXML(Значение.Значение));   
				Продолжить;
			КонецЕсли; 
			
			Если Значение.НомерПоказателя = "C55.11" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "purposeCode", Значение.Значение);   
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "C55.12" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "stageCode", Значение.Значение);   
				Продолжить;
			КонецЕсли; 
			
			Если Значение.НомерПоказателя = "C55.13" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "stageDate", киФорматДатыXML(Значение.Значение));   
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "C55.14" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "applicationCode", Значение.Значение);   
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "C55.15" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "num", Значение.Значение);   
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "C55.16" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "loanSum", киФорматЧисла2(Значение.Значение));   
				Продолжить;
			КонецЕсли; 	
		КонецЦикла; 
		
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();  
	
	Если ДопПараметры.КодСобытияКорректировка <> "3.4" Тогда
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_57_Reject");	
		Если ЗначениеЗаполнено(Запись.Банкротство) Тогда
			Если ТипЗнч(Запись.Банкротство) = Тип("СправочникСсылка.ДелоОБанкротстве") Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "rejectDate", киФорматДатыXML(Запись.Банкротство.ДатаПоследнейПроверки));
			Иначе 
				ДобавитьЗаписьВФайл(ЗаписьXML, "rejectDate", киФорматДатыXML(Запись.ДатаСобытия));
			КонецЕсли;
			ДобавитьЗаписьВФайл(ЗаписьXML, "rejectCode", "6");
		ИначеЕсли ЗначениеЗаполнено(Запись.ДоговорМКЗ) ИЛИ ЗначениеЗаполнено(Запись.РеструктуризацияМКЗ) Тогда
			ДобавитьЗаписьВФайл(ЗаписьXML, "rejectDate", киФорматДатыXML(Запись.ДатаСобытия));
			ДобавитьЗаписьВФайл(ЗаписьXML, "rejectCode", "5");
		ИначеЕсли ЗначениеЗаполнено(Запись.НеденежноеОбязательство) Тогда
			ДобавитьЗаписьВФайл(ЗаписьXML, "rejectDate", киФорматДатыXML(Запись.ДатаСобытия));
			ДобавитьЗаписьВФайл(ЗаписьXML, "rejectCode", "5");
		Иначе
			ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, ДопПараметры.Настройка, "C57_APPLREJECT", "Сделка"); 	
			Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл
				Если Значение.НомерПоказателя = "C57.1" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "rejectDate", киФорматДатыXML(Значение.Значение));
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "C57.2" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "rejectCode", Значение.Значение); 
					Продолжить;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;	
		
		ЗаписьXML.ЗаписатьКонецЭлемента();   
		
	КонецЕсли;
	
	Если ДопПараметры.КодСобытияКорректировка <> "3.4" Тогда	
		ЗаписьXML.ЗаписатьКонецЭлемента();//"FL_55_57_Group_R";	
		ЗаписьXML.ЗаписатьКонецЭлемента(); //"FL_55_57_Group_R_current";
	КонецЕсли;

	
КонецПроцедуры

&НаСервере
Процедура FL_56_Participation_Корректировка(ЗаписьXML, Запись, ДопПараметры = Неопределено)   
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_56_Participation");		
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_56_Participation_current");
	//Иначе
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_56_Participation_new");	
	//КонецЕсли;
	
	Настройка = ДопПараметры.Настройка; 
	
	ОснованиеНаУдаление = ДопПараметры.СтрокаОснование;
	
	ЕстьБлокПрекращение = (Запись.СобытиеКодНБКИ = "2.5");
	
	ТипОтношенияКСчету = "1";
	Если ДопПараметры.Поручитель <> "0" Тогда
		ТипОтношенияКСчету  =  ДопПараметры.Поручитель;
	КонецЕсли;	
	
	Если ДопПараметры.Наследник <> "0" Тогда
		ТипОтношенияКСчету  =  ДопПараметры.Наследник;
	КонецЕсли;	  
	
	Просрочка90плюс = Запись.Просрочка90плюс;
	ПризнакПрекращения = "0"; 
	
		
	ПризнакПросрочки = ?(ЕстьБлокПрекращение, "0", Просрочка90плюс); 
	ПризнакПрекращенияОбязательства = ?(ЕстьБлокПрекращение, "1", ПризнакПрекращения);
	
		
	МассивПолейИЗначений = КредитныеИсторииИзменения.ВернутьСтруктуруНаКорректировку(ОснованиеНаУдаление.ПолеБлока, ОснованиеНаУдаление.СтрокаНаКорректировку);  
	
	Если МассивПолейИЗначений = Неопределено Тогда 
		ДобавитьЗаписьВФайл(ЗаписьXML, "ERRORUZ", "ВНИМАНИЕ! Ошибка Формирования корректировки множества полей: Значений передано больше, чем полей. Проверьте правильность данных на корректировку и переформируйте отчет!"); 		
	КонецЕсли;	
			
	
	ДобавитьЗаписьВФайл(ЗаписьXML, "role", ТипОтношенияКСчету);
	ДобавитьЗаписьВФайл(ЗаписьXML, "kindCode", Запись.КодНБКИВидКредита);
	ДобавитьЗаписьВФайл(ЗаписьXML, "uid", Запись.UID);
	ДобавитьЗаписьВФайл(ЗаписьXML, "fundDate", киФорматДатыXML(Запись.ДатаПередачиФинансирования)); 
	
	
	Если ПризнакПросрочки = "1" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "overdueExist_1", Истина);	
	Иначе	
		ДобавитьЗаписьВФайл(ЗаписьXML, "overdueExist_0", Ложь);
	КонецЕсли;
	
	Если ПризнакПрекращенияОбязательства = "1" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "stopExist_1", Истина);
	Иначе	
		ДобавитьЗаписьВФайл(ЗаписьXML, "stopExist_0", Ложь);
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_56_Participation_new");
	ДобавитьЗаписьВФайл(ЗаписьXML, "role", ТипОтношенияКСчету);
	ДобавитьЗаписьВФайл(ЗаписьXML, "kindCode", Запись.КодНБКИВидКредита);
	ДобавитьЗаписьВФайл(ЗаписьXML, "uid", Запись.UID);
	ДобавитьЗаписьВФайл(ЗаписьXML, "fundDate", киФорматДатыXML(Запись.ДатаПередачиФинансирования)); 
	
	
	Если ПризнакПросрочки = "1" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "overdueExist_1", Истина);	
	Иначе	
		ДобавитьЗаписьВФайл(ЗаписьXML, "overdueExist_0", Ложь);
	КонецЕсли;
	
	Если ПризнакПрекращенияОбязательства = "1" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "stopExist_1", Истина);
	Иначе	
		ДобавитьЗаписьВФайл(ЗаписьXML, "stopExist_0", Ложь);
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	
КонецПроцедуры

&НаСервере
Процедура БлокиТитульнойЧастиФЛ(ЗаписьXML, Запись, ПредыдущиеЗаписи, СформированБлокПредыдущийДУЛ, Настройка)
	
	ЭтоПервичное = (Запись.Событие.КодНБКИ = "0.0");
	КоличествоФИО = Запись.Должник.ФИО.Количество();
	СменаФИОБезПаспорта = (ЭтоПервичное И КоличествоФИО > 1);
		
	ФИОТекущее = Запись.Должник.ФИО[Запись.Должник.ФИО.Количество() - 1];
	Если СменаФИОБезПаспорта И Настройка.ПередаватьСтароеИмя Тогда 
		//Если Клиенту известно о смене имени, оно занесено в тч, но события 1.7 не было зафиксировано клиентом
		//- не занесены новые паспортные данные
		//Передаем предпоследнее имя
		ФИОТекущее = Запись.Должник.ФИО[Запись.Должник.ФИО.Количество() - 2];
	КонецЕсли; 
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Title");
	
	// Паспорт и ФИО  
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_1_4_Group");
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_1_Name");
	//ФИОТекущее = Запись.Должник.ФИО[Запись.Должник.ФИО.Количество() - 1];  
	Отчество = ?(ЗначениеЗаполнено(ФИОТекущее.Отчество), ФИОТекущее.Отчество, " ");
	ДобавитьЗаписьВФайл(ЗаписьXML, "lastName", ФИОТекущее.Фамилия, Истина);
	ДобавитьЗаписьВФайл(ЗаписьXML, "firstName", ФИОТекущее.Имя, Истина);
	ДобавитьЗаписьВФайл(ЗаписьXML, "middleName", Отчество, Истина);
	ЗаписьXML.ЗаписатьКонецЭлемента();
		
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_4_Doc");
	ДобавитьЗаписьВФайл(ЗаписьXML, "countryCode", ?(Врег(Запись.КодСтраныДокумента) = "РОССИЯ", "643", Запись.КодСтраныДокумента));
	ДобавитьЗаписьВФайл(ЗаписьXML, "countryOther", ?(СтрНайти(Запись.КодСтраныДокумента, "999") > 0, Запись.НаименованиеИнойСтраныДокумента, ""));
	ДобавитьЗаписьВФайл(ЗаписьXML, "docCode", Запись.КодНБКИДокумента);
	ДобавитьЗаписьВФайл(ЗаписьXML, "docOtherName", ?(СтрНайти(Запись.КодНБКИДокумента, "999") > 0, Запись.НаименованиеИногоДокумента, ""));
	ДобавитьЗаписьВФайл(ЗаписьXML, "docSeries", Запись.СерияДокумента);  
	ДобавитьЗаписьВФайл(ЗаписьXML, "docNum", Запись.НомерДокумента);
	ДобавитьЗаписьВФайл(ЗаписьXML, "issueDate", киФорматДатыXML(Запись.ДатаВыдачиДокумента));
	ДобавитьЗаписьВФайл(ЗаписьXML, "docIssuer", Запись.КемВыданДокумент, ИСТИНА);
	
	КодПодразделения = КредитныеИстории.ПроверкаФорматаКодаПодразделения(Запись.КодПодразделенияРФ);
	
	ДобавитьЗаписьВФайл(ЗаписьXML, "deptCode", ?(Запись.КодНБКИДокумента = "21", КодПодразделения, ""));
	ДобавитьЗаписьВФайл(ЗаписьXML, "endDate", киФорматДатыXML(Запись.ДатаОкончанияДействияДокумента)); 
	ДобавитьЗаписьВФайл(ЗаписьXML, "foreignerCode", Запись.СведенияОГражданствеФЛ); // РФ = 3
	ЗаписьXML.ЗаписатьКонецЭлемента(); 
	ЗаписьXML.ЗаписатьКонецЭлемента(); 
	
	Попытка
		ФИОПредыдущее = Запись.Должник.ФИО[Запись.Должник.ФИО.Количество() - 2];
	Исключение
		ФИОПредыдущее = Неопределено;
	КонецПопытки; 
	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_2_5_Group"); 
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_2_PrevName");
	
	Если ЗначениеЗаполнено(ФИОПредыдущее) Тогда
		ДатаВыдачиДокумента = ?(ЗначениеЗаполнено(Запись.ДатаВыдачиДокумента), Запись.ДатаВыдачиДокумента, "-"); 
		ДатаВыдачиДокумента = киФорматДатыXML(ДатаВыдачиДокумента);  
		Отчество = ?(ЗначениеЗаполнено(ФИОПредыдущее.Отчество), ФИОПредыдущее.Отчество, " ");
		ДобавитьЗаписьВФайл(ЗаписьXML, "prevNameFlag_1", Истина);
		ДобавитьЗаписьВФайл(ЗаписьXML, "lastName", ФИОПредыдущее.Фамилия, Истина);
		ДобавитьЗаписьВФайл(ЗаписьXML, "firstName", ФИОПредыдущее.Имя, Истина);
		ДобавитьЗаписьВФайл(ЗаписьXML, "middleName", Отчество, Истина);
		ДобавитьЗаписьВФайл(ЗаписьXML, "date", ДатаВыдачиДокумента);
	Иначе
		ДобавитьЗаписьВФайл(ЗаписьXML, "prevNameFlag_0", Ложь);
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); 
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_5_PrevDoc");
	
	Если ЗначениеЗаполнено(ПредыдущиеЗаписи) Тогда
		стрПредыдущаяЗапись = ПредыдущиеЗаписи[ПредыдущиеЗаписи.Количество() - 1];
		Если ЗначениеЗаполнено(стрПредыдущаяЗапись.ДатаОкончанияДействияДокумента) Тогда 	
			ДобавитьЗаписьВФайл(ЗаписьXML, "prevDocFact_1", Истина);
			ДобавитьЗаписьВФайл(ЗаписьXML, "countryCode", стрПредыдущаяЗапись.КодСтраныДокумента);
			ДобавитьЗаписьВФайл(ЗаписьXML, "countryOther", ?(СтрНайти(стрПредыдущаяЗапись.КодСтраныДокумента, "999") > 0, стрПредыдущаяЗапись.НаименованиеИнойСтраныДокумента, ""), Истина);
			ДобавитьЗаписьВФайл(ЗаписьXML, "docCode", стрПредыдущаяЗапись.КодНБКИДокумента);
			ДобавитьЗаписьВФайл(ЗаписьXML, "docSeries", стрПредыдущаяЗапись.СерияДокумента);  
			ДобавитьЗаписьВФайл(ЗаписьXML, "docNum", стрПредыдущаяЗапись.НомерДокумента);
			ДобавитьЗаписьВФайл(ЗаписьXML, "issueDate", киФорматДатыXML(стрПредыдущаяЗапись.ДатаВыдачиДокумента));
			ДобавитьЗаписьВФайл(ЗаписьXML, "docIssuer", стрПредыдущаяЗапись.КемВыданДокумент, Истина);  
			КодПодразделения = КредитныеИстории.ПроверкаФорматаКодаПодразделения(стрПредыдущаяЗапись.КодПодразделенияРФ);
			ДобавитьЗаписьВФайл(ЗаписьXML, "deptCode", ?(Запись.КодНБКИДокумента = "21", КодПодразделения, ""));
			ДобавитьЗаписьВФайл(ЗаписьXML, "endDate", киФорматДатыXML(стрПредыдущаяЗапись.ДатаОкончанияДействияДокумента)); 
			//ДобавитьЗаписьВФайл(ЗаписьXML, "foreignerCode", стрПредыдущаяЗапись.СведенияОГражданствеФЛ);
			ЗаписьXML.ЗаписатьКонецЭлемента();					
			
			СформированБлокПредыдущийДУЛ = Истина;
		Иначе
			ДобавитьЗаписьВФайл(ЗаписьXML, "prevDocFact_0", Ложь);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЕсли;  
	Иначе 
		ДобавитьЗаписьВФайл(ЗаписьXML, "prevDocFact_0", Ложь);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;  
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_3_Birth");
	ДобавитьЗаписьВФайл(ЗаписьXML, "birthDate", киФорматДатыXML(Запись.ДатаРождения));
	ДобавитьЗаписьВФайл(ЗаписьXML, "countryCode", ?(Врег(Запись.КодСтраны) = "РОССИЯ", "643", Запись.КодСтраны));
	ДобавитьЗаписьВФайл(ЗаписьXML, "birthPlace", Запись.МестоРождения, ИСТИНА);
	ЗаписьXML.ЗаписатьКонецЭлемента(); 
		
	КодИНН = "";   
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_6_Tax");
	
	Если ЗначениеЗаполнено(Запись.ИНН) Тогда 
		ЗаписьXML.ЗаписатьНачалоЭлемента("TaxNum_group_FL_6_Tax");
		КодИНН = ?(СтрДлина(Запись.ИНН) = 12, "1", "2"); 
		ДобавитьЗаписьВФайл(ЗаписьXML, "taxCode", КодИНН);
		ДобавитьЗаписьВФайл(ЗаписьXML, "taxNum", Запись.ИНН);   
		ЗаписьXML.ЗаписатьКонецЭлемента(); 
	КонецЕсли;
	
	
	Если Запись.ЭтоИП = "1" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "regNum", Запись.ИНН_ИП);
	Иначе  
		ДобавитьЗаписьВФайл(ЗаписьXML, "regNum", "");
	КонецЕсли;	  
	
	Если Запись.СпециальныйНалоговыйРежим = "1" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "specialMode_1", Истина);
	Иначе 
		ДобавитьЗаписьВФайл(ЗаписьXML, "specialMode_0", Ложь);
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента(); 
	
	
	СНИЛС = СтрЗаменить(Запись.СНИЛС, "-", "");
	СНИЛС = СтрЗаменить(СНИЛС, " ", "");
	СНИЛС = СтрЗаменить(СНИЛС, Символы.НПП, "");
	
	Если ЗначениеЗаполнено(СНИЛС) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_7_Social");
		ДобавитьЗаписьВФайл(ЗаписьXML, "socialNum", СНИЛС);
		ЗаписьXML.ЗаписатьКонецЭлемента(); 
	КонецЕсли;   
	
	//ЗаписьXML.ЗаписатьНачалоЭлемента("Title"); 
	//ЗаписьXML.ЗаписатьНачалоЭлемента("FL_1_4_Group");
	//ЗаписьXML.ЗаписатьНачалоЭлемента("FL_1_Name");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "lastName", ФИОТекущее.Фамилия, Истина);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "firstName", ФИОТекущее.Имя, Истина);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "middleName", ФИОТекущее.Отчество, Истина);
	//ЗаписьXML.ЗаписатьКонецЭлемента(); 
	//
	//ЗаписьXML.ЗаписатьНачалоЭлемента("FL_4_Doc");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "countryCode", ?(Врег(Запись.КодСтраныДокумента) = "РОССИЯ", "643", Запись.КодСтраныДокумента));
	//ДобавитьЗаписьВФайл(ЗаписьXML, "countryOther", ?(СтрНайти(Запись.КодСтраныДокумента, "999") > 0, Запись.НаименованиеИнойСтраныДокумента, ""));
	//ДобавитьЗаписьВФайл(ЗаписьXML, "docCode", Запись.КодНБКИДокумента);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "docOtherName", ?(СтрНайти(Запись.КодНБКИДокумента, "999") > 0, Запись.НаименованиеИногоДокумента, ""));
	//ДобавитьЗаписьВФайл(ЗаписьXML, "docSeries",Запись.СерияДокумента);  
	//ДобавитьЗаписьВФайл(ЗаписьXML, "docNum", Запись.НомерДокумента);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "issueDate", киФорматДатыXML(Запись.ДатаВыдачиДокумента));
	//ДобавитьЗаписьВФайл(ЗаписьXML, "docIssuer", Запись.КемВыданДокумент, ИСТИНА);
	//
	//КодПодразделения = КредитныеИстории.ПроверкаФорматаКодаПодразделения(Запись.КодПодразделенияРФ);
	//
	//ДобавитьЗаписьВФайл(ЗаписьXML, "deptCode", ?(Запись.КодНБКИДокумента = "21", КодПодразделения, ""));
	//ДобавитьЗаписьВФайл(ЗаписьXML, "endDate", киФорматДатыXML(Запись.ДатаОкончанияДействияДокумента)); 
	//ДобавитьЗаписьВФайл(ЗаписьXML, "foreignerCode", Запись.СведенияОГражданствеФЛ); // РФ = 3
	//ЗаписьXML.ЗаписатьКонецЭлемента(); 
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	//
	//ЗаписьXML.ЗаписатьНачалоЭлемента("FL_2_5_Group"); 
	//ЗаписьXML.ЗаписатьНачалоЭлемента("FL_2_PrevName");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "prevNameFlag_0", Ложь);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "lastName", "");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "firstName", "");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "middleName", "");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "date", "");
	//ЗаписьXML.ЗаписатьКонецЭлемента(); 
	//
	//ЗаписьXML.ЗаписатьНачалоЭлемента("FL_5_PrevDoc");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "prevDocFact_0", Ложь);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "countryCode", "");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "countryOther", "");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "docCode", "");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "docSeries", "");  
	//ДобавитьЗаписьВФайл(ЗаписьXML, "docNum", "");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "issueDate", "");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "docIssuer", "");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "deptCode", "");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "endDate", ""); 
	//ДобавитьЗаписьВФайл(ЗаписьXML, "foreignerCode", "");
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	//
	//ЗаписьXML.ЗаписатьНачалоЭлемента("FL_3_Birth");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "birthDate", киФорматДатыXML(Запись.ДатаРождения));
	//ДобавитьЗаписьВФайл(ЗаписьXML, "countryCode", ?(Врег(Запись.КодСтраны) = "РОССИЯ", "643", Запись.КодСтраны));
	//ДобавитьЗаписьВФайл(ЗаписьXML, "birthPlace", Запись.МестоРождения, ИСТИНА);
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	//ЗаписьXML.ЗаписатьНачалоЭлемента("FL_6_Tax");	

	//Если ЗначениеЗаполнено(Запись.ИНН) Тогда
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("TaxNum_group_FL_6_Tax");
	//	КодИНН = ?(СтрДлина(Запись.ИНН) = 12, "1", "2"); 
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "taxCode", КодИНН);
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "taxNum", Запись.ИНН);
	//	ЗаписьXML.ЗаписатьКонецЭлемента();
	//КонецЕсли;
	// 	
	//Если Запись.ЭтоИП = "1" Тогда
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "regNum", Запись.ИНН_ИП);
	//Иначе  
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "regNum", "");
	//КонецЕсли;	
	//
	//Если Запись.СпециальныйНалоговыйРежим = 1 Тогда
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "specialMode_1", Истина);
	//Иначе 
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "specialMode_0", Ложь);
	//КонецЕсли;
	//ЗаписьXML.ЗаписатьКонецЭлемента(); 
	//
	//СНИЛС = СтрЗаменить(Запись.СНИЛС, "-", "");
	//СНИЛС = СтрЗаменить(СНИЛС, " ", "");
	//СНИЛС = СтрЗаменить(СНИЛС, Символы.НПП, "");
	//
	//Если ЗначениеЗаполнено(СНИЛС) Тогда
	//	
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_7_Social");
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "socialNum", СНИЛС);
	//	ЗаписьXML.ЗаписатьКонецЭлемента(); 
	//КонецЕсли;
			
 
	ЗаписьXML.ЗаписатьКонецЭлемента();// Конец блока Title
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаписьВФайл(ЗаписьXML, ИмяБлока, Знач Значение, ФлагВРег = Ложь)
		
	Если Значение = Неопределено ИЛИ Значение = "" тогда
		Возврат;
	КонецЕсли;  
	
	Если (Значение = ИСТИНА ИЛИ Значение = ЛОЖЬ) И ТипЗнч(Значение) = Тип("Булево")Тогда
		Значение = "";	
	КонецЕсли;
	
	Если ФлагВРег Тогда
		Значение = ВРег(Значение);
	Иначе
		Значение = НРег(Значение);
	КонецЕсли;
	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяБлока);
	ЗаписьXML.ЗаписатьТекст(Строка(Значение));
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

#Область Блоки_По_Юридическим_Лицам

&НаСервере
Процедура UL_10_DealUid(ЗаписьXML, Запись, ДопПараметры = Неопределено) 
	
	ЕстьСвойствоЛитеры = ДопПараметры.Свойство("ЛитераR");
	ИмяБлока = ?(ЕстьСвойствоЛитеры, "UL_10_DealUid_R", "UL_10_DealUid");
	
	Если Не ЗначениеЗаполнено(Запись.UID) Тогда
		ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, ДопПараметры.Настройка, "C17_UID", "Сделка"); 
		ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяБлока);	
		Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл
			Если Значение.НомерПоказателя = "B10.1" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "uid", Значение.Значение);
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "B10.2" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "num", Значение.Значение); 
				Продолжить;
			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "B10.3" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "refUid", Значение.Значение);
				Продолжить;
			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "B10.4" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "openDate", киФорматДатыXML(Значение.Значение)); 
				Продолжить;
			КонецЕсли; 
		КонецЦикла;	
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяБлока);	
		ДобавитьЗаписьВФайл(ЗаписьXML, "uid", Запись.UID);
		ДобавитьЗаписьВФайл(ЗаписьXML, "num", ?(ЗначениеЗаполнено(Запись.UID), "", Запись.Сделка.Наименование));
		ДобавитьЗаписьВФайл(ЗаписьXML, "refUid", Запись.UIDРефинансированнойсделки);
		ДобавитьЗаписьВФайл(ЗаписьXML, "openDate", киФорматДатыXML(Запись.ДатаНачалаСделки));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура UL_11_Deal(ЗаписьXML, Запись, ДопПараметры = Неопределено)  
	
	
	ТипОтношенияКСчету = "1";
	Если ТипЗнч(Запись.ДокументСобытие) = Тип("ДокументСсылка.ПоступлениеПлатежа") Тогда 
		Если Запись.ДокументСобытие.ВидПлательщика = Перечисления.ВидыПлательщика.Поручитель Тогда
			ТипОтношенияКСчету = "2";
			ДопПараметры.Поручитель =  ТипОтношенияКСчету; 
		ИначеЕсли Запись.ДокументСобытие.ВидПлательщика = Перечисления.ВидыПлательщика.Наследник Тогда
			ТипОтношенияКСчету = "99";  
			ДопПараметры.Наследник =  ТипОтношенияКСчету;
		Иначе
			ТипОтношенияКСчету = "1";
		КонецЕсли;
	КонецЕсли;
	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("UL_11_Deal");
	ДобавитьЗаписьВФайл(ЗаписьXML, "role", ТипОтношенияКСчету); //1
	ДобавитьЗаписьВФайл(ЗаписьXML, "code", Запись.КодНБКИТипКредита);//3
	ДобавитьЗаписьВФайл(ЗаписьXML, "kindCode", Запись.КодНБКИВидКредита); //4
	ДобавитьЗаписьВФайл(ЗаписьXML, "purposeCode", Запись.КодНБКИЦельКредита); //5 
	
	Если Запись.ПризнакПлатежнойКарты = "0" ИЛИ НЕ ЗначениеЗаполнено(Запись.ПризнакПлатежнойКарты) Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "cardExist_0", Ложь); //6
	КонецЕсли;	
	Если Запись.ПризнакПлатежнойКарты = "1" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "cardExist_1", Истина);
	КонецЕсли;
	
	ДобавитьЗаписьВФайл(ЗаписьXML, "novationExist_0", Ложь); //7
	
	Если НЕ ЗначениеЗаполнено(Запись.НеденежноеОбязательство) Тогда //8 9
		ДобавитьЗаписьВФайл(ЗаписьXML, "monetarySourceExist_1", Истина);
		ДобавитьЗаписьВФайл(ЗаписьXML, "monetarySubjectExist_1", Истина);	
	Иначе 
		ДобавитьЗаписьВФайл(ЗаписьXML, "monetarySourceExist_0", Ложь);
		ДобавитьЗаписьВФайл(ЗаписьXML, "monetarySubjectExist_0", Ложь);
	КонецЕсли;
	
	ДобавитьЗаписьВФайл(ЗаписьXML, "endDate", киФорматДатыXML(Запись.ДатаОкончанияСделки)); //10 
	
	Если Запись.ЧастичноеПравопреемство = "0" ИЛИ НЕ ЗначениеЗаполнено(Запись.ЧастичноеПравопреемство) Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "partialExist_0", Ложь); //11
	КонецЕсли;	
	Если Запись.ЧастичноеПравопреемство = "1" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "partialExist_1", Истина);	
	КонецЕсли;
	//Если Запись.ЧастичнаяПродажа = "1" Тогда
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "partialExist_1", Запись.transferUid);	
	//КонецЕсли; 
	
	Если Запись.ПризнакКредитнойЛинии = "0" ИЛИ НЕ ЗначениеЗаполнено(Запись.ПризнакКредитнойЛинии) Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "creditLineExist_0", Ложь);//12
	КонецЕсли;	
	Если Запись.ПризнакКредитнойЛинии = "1" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "creditLineExist_1", Истина);
		ДобавитьЗаписьВФайл(ЗаписьXML, "creditLineCode", Запись.КодНБКИТипКредититнойЛинии); //13
	КонецЕсли; 
	
	Если Запись.ПризнакПлавающейПроцентнойСтавки = "0" ИЛИ НЕ ЗначениеЗаполнено(Запись.ПризнакПлавающейПроцентнойСтавки) Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "floatRateExist_0", Ложь);//14
	КонецЕсли;	
	Если Запись.ПризнакПлавающейПроцентнойСтавки = "1" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "floatRateExist_1", Истина);
	КонецЕсли;
	
	Если Запись.ЧастичнаяПродажа = "1" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "partialTransferExist_1", Истина);//15
		ДобавитьЗаписьВФайл(ЗаписьXML, "transferUid", Запись.UID); //16	
	КонецЕсли;
	Если Запись.ЧастичнаяПродажа = "0" ИЛИ НЕ ЗначениеЗаполнено(Запись.ЧастичнаяПродажа) Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "partialTransferExist_0", Ложь);//15
	КонецЕсли; 
	
	ДобавитьЗаписьВФайл(ЗаписьXML, "startDate", киФорматДатыXML(Запись.ДатаВозникновенияОбязательстваСубъекта));  //17
	
	
	Если ТипЗнч(ДопПараметры.Наследник) = Тип("СправочникСсылка.Контрагенты") Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "transferFact_1", Истина);//18
	Иначе
		ДобавитьЗаписьВФайл(ЗаписьXML, "transferFact_0", Ложь);//18
	КонецЕсли;  
	ДобавитьЗаписьВФайл(ЗаписьXML, "partnerFinancingFact_0", Ложь);//19
	ЗаписьXML.ЗаписатьКонецЭлемента();	
КонецПроцедуры

&НаСервере
Процедура UL_12_Amount(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	Если НЕ ЗначениеЗаполнено(Запись.СуммаСделки) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("UL_12_Amount");
	ДобавитьЗаписьВФайл(ЗаписьXML, "sum", киФорматЧисла2(Запись.СуммаСделки));
	ДобавитьЗаписьВФайл(ЗаписьXML, "currency", Запись.Сделка.ВалютаДоговора.Наименование, ИСТИНА);
	ДобавитьЗаписьВФайл(ЗаписьXML, "calcDate", киФорматДатыXML(Запись.ДатаСобытия));
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

&НаСервере
Процедура UL_12_1_AmountInfo(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("UL_12_1_AmountInfo"); 
	Если ДопПараметры.ПризнакОбеспечиваемогоОбязательства = Ложь Тогда 
		Если ДопПараметры.Настройка.ПоУмолчаниюОбеспечение Тогда
			ДобавитьЗаписьВФайл(ЗаписьXML, "securityFact_0", Ложь);
		Иначе
			Записи12Блока = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, ДопПараметры.Настройка, "C19.1.", "Сделка");
			Для Каждого Значение ИЗ Записи12Блока Цикл
				Если Значение.НомерПоказателя = "B12.1.1" Тогда 
					Если КредитныеИстории.ОбработатьЗначенияПризнаков(Значение.Значение) = "0" Тогда
						ДобавитьЗаписьВФайл(ЗаписьXML, "securityFact_0", Ложь);
						Прервать;
					ИначеЕсли КредитныеИстории.ОбработатьЗначенияПризнаков(Значение.Значение) = "1" Тогда
						ДобавитьЗаписьВФайл(ЗаписьXML, "securityFact_1", Истина);
						Продолжить; 
					КонецЕсли;          
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "B12.1.2" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "securitySum", киФорматЧисла2(Значение.Значение)); 
					Продолжить;
				КонецЕсли;  
				
				Если Значение.НомерПоказателя = "B12.1.3" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "securityCurrency", Значение.Значение, ИСТИНА);
					Продолжить;
				КонецЕсли;  
				
				Если Значение.НомерПоказателя = "B12.1.4" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "securityTypeCode", Значение.Значение); 
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "B12.1.5" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "calcDate", киФорматДатыXML(Значение.Значение)); 
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "B12.1.6" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "securityUid", Значение.Значение); 
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "B12.1.7" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "liabilityLimit", киФорматЧисла2(Значение.Значение)); 
					Продолжить;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДопПараметры.ПризнакОбеспечиваемогоОбязательства) = Тип("ДокументСсылка.ПризнакОбеспечиваемогоОбязательства") Тогда
		
		ДокументПризнак = ДопПараметры.ПризнакОбеспечиваемогоОбязательства; 		
		ДобавитьЗаписьВФайл(ЗаписьXML, "securityFact_1", "1");
		ДобавитьЗаписьВФайл(ЗаписьXML, "securitySum", киФорматЧисла2(ДокументПризнак.СуммаОбеспечиваемогоОбязательства));
		ДобавитьЗаписьВФайл(ЗаписьXML, "securityCurrency", ДокументПризнак.ВалютаОбеспечиваемогоОбязательства.Наименование, ИСТИНА);
		ДобавитьЗаписьВФайл(ЗаписьXML, "securityTypeCode", ДокументПризнак.КодТипаОбеспечиваемогоОбязательства);
		ДобавитьЗаписьВФайл(ЗаписьXML, "calcDate", киФорматДатыXML(ДокументПризнак.ДатаРасчета));
		ДобавитьЗаписьВФайл(ЗаписьXML, "securityUid", ДокументПризнак.УИДОсновнойСделки);
		ДобавитьЗаписьВФайл(ЗаписьXML, "liabilityLimit", Формат(ДокументПризнак.ЛимитОтветственности, "ЧЦ=12; ЧН=; ЧГ="));
	Иначе
		ДобавитьЗаписьВФайл(ЗаписьXML, "securityFact_0", Ложь);
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();	
КонецПроцедуры

&НаСервере
Процедура UL_13_JointDebtors(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("UL_13_JointDebtors");
	
	Если Запись.СолидарныйДоговор = "1" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "exist_0", Ложь);
	ИначеЕсли Запись.СолидарныйДоговор = "0" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "exist_0", Ложь);
	Иначе
		ДобавитьЗаписьВФайл(ЗаписьXML, "exist_1", Истина); 
		ДобавитьЗаписьВФайл(ЗаписьXML, "num", Запись.СолидарныйДоговор);
	КонецЕсли;		
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервере
Процедура UL_14_PaymentTerms(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	ЗаписьXML.ЗаписатьНачалоЭлемента("UL_14_PaymentTerms"); 
	Если ЗначениеЗаполнено(Запись.ДоговорМКЗ) ИЛИ ЗначениеЗаполнено(Запись.РеструктуризацияМКЗ) Тогда
		СформироватьСведенияоГрафикеПлатежейXML(ЗаписьXML, ?(ЗначениеЗаполнено(Запись.РеструктуризацияМКЗ), Запись.РеструктуризацияМКЗ, Запись.ДоговорМКЗ), Запись.ПризнакПлатежнойКарты, Запись.ДатаСобытия); 
		
	Иначе
		Если ДопПараметры.Настройка.ДействующиеДоговоры Тогда

			ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, ДопПараметры.Настройка, "B14_PAYMTCONDITION", "Сделка"); 	
			Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл
				Если Значение.НомерПоказателя = "B14.1" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "mainPaySum", киФорматЧисла2(Значение.Значение));
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "B14.2" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "mainPayDate", киФорматДатыXML(Значение.Значение)); 
					Продолжить;
				КонецЕсли;  
				
				Если Значение.НомерПоказателя = "B14.3" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "percentPaySum", киФорматЧисла2(Значение.Значение));
					Продолжить;
				КонецЕсли;  
				
				Если Значение.НомерПоказателя = "B14.4" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "percentPayDate", киФорматДатыXML(Значение.Значение)); 
					Продолжить;
				КонецЕсли;  
				
				Если Значение.НомерПоказателя = "B14.5" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "freqCode", Значение.Значение); 
					Продолжить;
				КонецЕсли;  
				
				Если Значение.НомерПоказателя = "B14.6" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "minCardPay", киФорматЧисла2(Значение.Значение)); 
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "B14.7" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "graceDate", киФорматДатыXML(Значение.Значение)); 
					Продолжить;
				КонецЕсли;   
				
				Если Значение.НомерПоказателя = "B14.8" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "graceEndDate", киФорматДатыXML(Значение.Значение)); 
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "B14.9" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "percentEndDate", киФорматДатыXML(Значение.Значение)); 
					Продолжить;
				КонецЕсли;
				
			КонецЦикла; 
		Иначе
			ДобавитьЗаписьВФайл(ЗаписьXML, "mainPaySum", киФорматЧисла2(0));
			ДобавитьЗаписьВФайл(ЗаписьXML, "percentPaySum", киФорматЧисла2(0));
			
		КонецЕсли;
	КонецЕсли;	
	ЗаписьXML.ЗаписатьКонецЭлемента();  
КонецПроцедуры

&НаСервере
Процедура СформироватьИзмененияСделокЮЛ(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	Если ТипЗнч(Запись.ДокументСобытие) = Тип("ДокументСсылка.СведенияОбИзмененииДоговора") Тогда  
		Если Запись.ДокументСобытие.ТипИзменения = Перечисления.НБКИ_ТипыИзмененияДоговора.ПредусмотреныИсходнымиУсловиями Тогда
			UL_15_1_ContractTermsChanges(ЗаписьXML, Запись, ДопПараметры);
		Иначе 
			UL_15_ContractChanges(ЗаписьXML, Запись, ДопПараметры);
		КонецЕсли;
	Иначе 
		UL_15_ContractChanges(ЗаписьXML, Запись, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура UL_15_ContractChanges(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("UL_15_ContractChanges");
	ДобавитьЗаписьВФайл(ЗаписьXML, "exist_1", "1");	
	
	Настройка = ДопПараметры.Настройка;
	Заполнено = Ложь;
	Если ЗначениеЗаполнено(Запись.РеструктуризацияМКЗ) Тогда
		СформироватьБлок23_15МКЗ(ЗаписьXML, Запись.РеструктуризацияМКЗ);
		Заполнено = Истина;
	ИначеЕсли ТипЗнч(Запись.ДокументСобытие) = Тип("ДокументСсылка.СведенияОбИзмененииДоговора") И НЕ Заполнено Тогда 
		СформироватьБлок23_15Изм(ЗаписьXML, Запись.ДокументСобытие); 
		Заполнено = Истина;
	ИначеЕсли ЗначениеЗаполнено(Запись.НеденежноеОбязательство) И НЕ Заполнено Тогда 	 
		СформироватьБлок23_15НО(ЗаписьXML, Запись.НеденежноеОбязательство);
	Иначе
		ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, ДопПараметры.Настройка, "B_15_AMENDMENT", "Сделка"); 	
		Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл
			Если Значение.НомерПоказателя = "В15.2" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "changeDate", киФорматДатыXML(Значение.Значение));
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "В15.3" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "code", Значение.Значение); 
				Продолжить;
			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "В15.4" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "specialCode", Значение.Значение);
				Продолжить;
			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "В15.5" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "otherDesc", Значение.Значение); 
				Продолжить;
			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "В15.6" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "startDate", киФорматДатыXML(Значение.Значение)); 
				Продолжить;
			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "В15.7" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "endDate", киФорматДатыXML(Значение.Значение)); 
				Продолжить;
			КонецЕсли;   
			
			Если Значение.НомерПоказателя = "В15.8" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "actualEndDate", киФорматДатыXML(Значение.Значение)); 
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "В15.9" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "endCode", Значение.Значение); 
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "В15.10" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "currencyRate", Значение.Значение); 
				Продолжить;
			КонецЕсли;  
		КонецЦикла;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервере
Процедура UL_15_1_ContractTermsChanges(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("UL_15_1_ContractTermsChanges");	
	ДобавитьЗаписьВФайл(ЗаписьXML, "changeFact_1", Истина);
	
	Настройка = ДопПараметры.Настройка;
	Если ТипЗнч(Запись.ДокументСобытие) = Тип("ДокументСсылка.СведенияОбИзмененииДоговора") Тогда 
		СформироватьБлок23_1_15_1Изм(ЗаписьXML, Запись.ДокументСобытие); 
	Иначе
		ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, ДопПараметры.Настройка, "B15.1_", "Сделка"); 	
		Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл
			Если Значение.НомерПоказателя = "B15.1.2" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "termsChangeCode", Значение.Значение);
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "B15.1.3" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "termsChangeDesc", Значение.Значение); 
				Продолжить;
			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "B15.1.4" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "changingDate", киФорматДатыXML(Значение.Значение));
				Продолжить;
			КонецЕсли;  
			
		КонецЦикла;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	
КонецПроцедуры   

&НаСервере
Процедура UL_16_Fund(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	стартСум  = ?(ДопПараметры.ПСК = 0, Запись.СуммаСделки, ДопПараметры.ПСК);	
	ЗаписьXML.ЗаписатьНачалоЭлемента("UL_16_Fund");
	ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(Запись.ДатаПередачиФинансирования));
	ДобавитьЗаписьВФайл(ЗаписьXML, "num", Запись.ПорядковыйНомерТранша);
	ДобавитьЗаписьВФайл(ЗаписьXML, "startSum", киФорматЧисла2(стартСум));
	ЗаписьXML.ЗаписатьКонецЭлемента(); 
	
КонецПроцедуры

&НаСервере
Процедура UL_17_Debt(ЗаписьXML, Запись, ЗаписьСостояниеЗадолженности, ДопПараметры = Неопределено)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("UL_17_Debt");
	Если НЕ ДопПараметры.ЕстьЗадолженность Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "exist_0", Ложь);
	Иначе
		ДобавитьЗаписьВФайл(ЗаписьXML, "exist_1", Истина);
		ДобавитьЗаписьВФайл(ЗаписьXML, "debtSum", киФорматЧисла2(ЗаписьСостояниеЗадолженности.СуммаДООстаток));
		ДобавитьЗаписьВФайл(ЗаписьXML, "debtMainSum", киФорматЧисла2(ЗаписьСостояниеЗадолженности.ОсновнойДолгДО));
		ДобавитьЗаписьВФайл(ЗаписьXML, "debtPercentSum", киФорматЧисла2(ЗаписьСостояниеЗадолженности.ПроцентыДО));
		ДобавитьЗаписьВФайл(ЗаписьXML, "debtOtherSum", киФорматЧисла2(ЗаписьСостояниеЗадолженности.Иное));
	КонецЕсли;	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	
КонецПроцедуры

&НаСервере
Процедура UL_18_DebtDue(ЗаписьXML, Запись, ЗаписьСостояниеЗадолженности, ДопПараметры = Неопределено)
	
	ЕстьСрочнаяЗадолженность = ДопПараметры.ЕстьЗадолженность; 
	
	//Проверка на просрочку 
	ЕстьСрочнаяЗадолженность = НЕ ЗначениеЗаполнено(Запись.ДатаВыходаНаПросрочку); 
	
	ДатаОбразованияСрочнойЗадолженности = ?(ЗначениеЗаполнено(Запись.ДатаРасчетаСрочнойЗадолженности), Запись.ДатаРасчетаСрочнойЗадолженности, Запись.ДатаОкончанияСделки);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("UL_18_DebtDue");
	
	Если НЕ ЕстьСрочнаяЗадолженность Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML,  "debtDueSum", киФорматЧисла2(0));
	Иначе
		ДобавитьЗаписьВФайл(ЗаписьXML, "debtDueSum", киФорматЧисла2(ЗаписьСостояниеЗадолженности.СуммаДООстаток));
		ДобавитьЗаписьВФайл(ЗаписьXML, "debtDueMainSum", киФорматЧисла2(ЗаписьСостояниеЗадолженности.ОсновнойДолгДО));
		ДобавитьЗаписьВФайл(ЗаписьXML, "debtDuePercentSum", киФорматЧисла2(ЗаписьСостояниеЗадолженности.ПроцентыДО));
		ДобавитьЗаписьВФайл(ЗаписьXML, "debtDueOtherSum", киФорматЧисла2(ЗаписьСостояниеЗадолженности.Иное));
		ДобавитьЗаписьВФайл(ЗаписьXML, "debtDueStartDate", киФорматДатыXML(ДатаОбразованияСрочнойЗадолженности));
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();	
	
КонецПроцедуры

&НаСервере
Процедура UL_19_DebtOverdue(ЗаписьXML, Запись, ЗаписьСостояниеЗадолженности, ДопПараметры = Неопределено)
	
	//Проверка на просрочку  
	ЕстьПросроченнаяЗадолженность = ЗначениеЗаполнено(Запись.ДатаВыходаНаПросрочку) И (Запись.ДатаВыходаНаПросрочку < Запись.ДатаСобытия);
	//Если ДопПараметры.ЕстьЗадолженность Тогда
	//	 
	//Иначе	
	//	ЕстьПросроченнаяЗадолженность = Ложь; 
	//КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("UL_19_DebtOverdue");
	
	Если ЗначениеЗаполнено(Запись.ДатаВыходаНаПросрочку) Тогда
		ДниПросрочки = Окр((НачалоДня(Запись.ДатаСобытия) - НачалоДня(Запись.ДатаВыходаНаПросрочку)) / 86400); 
	Иначе
		ДниПросрочки = "0";
	КонецЕсли;	
	//ДниПросрочки = ?(ДопПараметры.ЕстьЗадолженность, ДниПросрочки, 0);
	ПродолжительностьПоследнейПросрочки = ?(ЗаписьСостояниеЗадолженности = 0, "0", ДниПросрочки);
	ДниПросрочки = ?(ЗаписьСостояниеЗадолженности = 0, ДниПросрочки, "0");
	
	ДатаВозникновенияПросроченнойЗадолженности = Запись.ДатаВыходаНаПросрочку;
	Если Запись.ДатаВыходаНаПросрочку > Запись.ДатаСобытия ИЛИ НЕ ЗначениеЗаполнено(Запись.ДатаВыходаНаПросрочку) Тогда
		ДатаВозникновенияПросроченнойЗадолженности = Дата(1,1,1);  
	КонецЕсли;	
	
	ДатаПросроченногоПлатежа = ?(Запись.ДатаОкончанияСделки > Запись.ДатаСобытия, ДатаВозникновенияПросроченнойЗадолженности, Запись.ДатаОкончанияСделки); 
	
	// Обнулить просроченную задолженность
	Если ЕстьПросроченнаяЗадолженность Тогда
		Если НБКИСлужебный.ПолучитьОстатокПСЗ(Запись.Сделка) = 0 И Запись.СобытиеКодНБКИ = "2.5" Тогда
			ДобавитьЗаписьВФайл(ЗаписьXML, "missFact_1", Истина);
			ДобавитьЗаписьВФайл(ЗаписьXML, "debtOverdueSum", ?(ЗаписьСостояниеЗадолженности = 0, киФорматЧисла2(ЗаписьСостояниеЗадолженности), киФорматЧисла2(0)));
			ДобавитьЗаписьВФайл(ЗаписьXML, "debtOverdueMainSum", ?(ЗаписьСостояниеЗадолженности = 0, киФорматЧисла2(ЗаписьСостояниеЗадолженности), киФорматЧисла2(0)));
			ДобавитьЗаписьВФайл(ЗаписьXML, "debtOverduePercentSum", ?(ЗаписьСостояниеЗадолженности = 0, киФорматЧисла2(ЗаписьСостояниеЗадолженности), киФорматЧисла2(0)));
			ДобавитьЗаписьВФайл(ЗаписьXML, "debtOverdueOtherSum", ?(ЗаписьСостояниеЗадолженности = 0, киФорматЧисла2(ЗаписьСостояниеЗадолженности), киФорматЧисла2(0)));
			ДобавитьЗаписьВФайл(ЗаписьXML, "debtOverdueStartDate", киФорматДатыXML(ДатаВозникновенияПросроченнойЗадолженности));
			ДобавитьЗаписьВФайл(ЗаписьXML, "mainMissDate", киФорматДатыXML(ДатаПросроченногоПлатежа));
			ДобавитьЗаписьВФайл(ЗаписьXML, "percentMissDate", киФорматДатыXML(ДатаПросроченногоПлатежа));
			ДобавитьЗаписьВФайл(ЗаписьXML, "missDuration", Формат(ДниПросрочки, "ЧГ=0"));
			ДобавитьЗаписьВФайл(ЗаписьXML, "repaidMissDuration", Формат(ПродолжительностьПоследнейПросрочки, "ЧГ=0"));
		Иначе
			ДобавитьЗаписьВФайл(ЗаписьXML, "missFact_1", Истина);
			ДобавитьЗаписьВФайл(ЗаписьXML, "debtOverdueSum", ?(ЗаписьСостояниеЗадолженности = 0, киФорматЧисла2(ЗаписьСостояниеЗадолженности), киФорматЧисла2(ЗаписьСостояниеЗадолженности.СуммаДООстаток)));
			ДобавитьЗаписьВФайл(ЗаписьXML, "debtOverdueMainSum", ?(ЗаписьСостояниеЗадолженности = 0, киФорматЧисла2(ЗаписьСостояниеЗадолженности), киФорматЧисла2(ЗаписьСостояниеЗадолженности.ОсновнойДолгДО)));
			ДобавитьЗаписьВФайл(ЗаписьXML, "debtOverduePercentSum", ?(ЗаписьСостояниеЗадолженности = 0, киФорматЧисла2(ЗаписьСостояниеЗадолженности), киФорматЧисла2(ЗаписьСостояниеЗадолженности.ПроцентыДО)));
			ДобавитьЗаписьВФайл(ЗаписьXML, "debtOverdueOtherSum", ?(ЗаписьСостояниеЗадолженности = 0, киФорматЧисла2(ЗаписьСостояниеЗадолженности), киФорматЧисла2(ЗаписьСостояниеЗадолженности.Иное)));
			ДобавитьЗаписьВФайл(ЗаписьXML, "debtOverdueStartDate", киФорматДатыXML(ДатаВозникновенияПросроченнойЗадолженности));
			ДобавитьЗаписьВФайл(ЗаписьXML, "mainMissDate", киФорматДатыXML(ДатаПросроченногоПлатежа));
			ДобавитьЗаписьВФайл(ЗаписьXML, "percentMissDate", киФорматДатыXML(ДатаПросроченногоПлатежа));
			ДобавитьЗаписьВФайл(ЗаписьXML, "missDuration", Формат(ДниПросрочки, "ЧГ=0"));
			ДобавитьЗаписьВФайл(ЗаписьXML, "repaidMissDuration", Формат(ПродолжительностьПоследнейПросрочки, "ЧГ=0"));
		КонецЕсли;
	Иначе
		ДобавитьЗаписьВФайл(ЗаписьXML, "missFact_0", Ложь);
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	
КонецПроцедуры

&НаСервере
Процедура UL_20_Payment(ЗаписьXML, Запись, ЗаписьСтрокиОплат,  ДопПараметры = Неопределено) 
	Если НЕ ЗначениеЗаполнено(Запись.СуммаСделки) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьЗадолженность = ДопПараметры.ЕстьЗадолженность; 
	ЭтоПлатежПоручителя = ДопПараметры.Поручитель;
	
	
	КодСобытия = Запись.СобытиеКодНБКИ; 
		
	ЗаписьXML.ЗаписатьНачалоЭлемента("UL_20_Payment"); 
	
	КодСоблюденияРазмераПлатежей = ?(ЕстьЗадолженность, "3", "1");
	КодСоблюденияСрокаПлатежей = ?(ЕстьЗадолженность, "3", "2");    
	
	ФормироватьНакопительныеПлатежи = Ложь;
	
	Если Запись.КодНБКИТипКредита = "1" ИЛИ  Запись.КодНБКИТипКредита = "5" Тогда
		ФормироватьНакопительныеПлатежи = Истина;
	КонецЕсли; 
	
	
	Если ЗаписьСтрокиОплат.Количество() = 0 ИЛИ КодСобытия = "2.5" Тогда		
		ДобавитьЗаписьВФайл(ЗаписьXML, "paymentSum", киФорматЧисла2(0));
		ДобавитьЗаписьВФайл(ЗаписьXML, "sizeCode", КодСоблюденияРазмераПлатежей);
		ДобавитьЗаписьВФайл(ЗаписьXML, "scheduleCode", КодСоблюденияСрокаПлатежей);
		Если ФормироватьНакопительныеПлатежи Тогда
			ДобавитьЗаписьВФайл(ЗаписьXML, "lastMissPaySum", киФорматЧисла2(0));
			ДобавитьЗаписьВФайл(ЗаписьXML, "paySum24", киФорматЧисла2(0)); 
		КонецЕсли;
	ИначеЕсли ЗаписьСтрокиОплат.Количество() = 1 Тогда  
		стрОплата = ЗаписьСтрокиОплат[0];
		
		Если Не ЗначениеЗаполнено(стрОплата.СуммаПоследнегоПлатежа) ИЛИ стрОплата.ДатаПлатежа > Запись.ДатаСобытия Тогда
			ДобавитьЗаписьВФайл(ЗаписьXML, "paymentSum", киФорматЧисла2(стрОплата.СуммаПоследнегоПлатежа));
			ДобавитьЗаписьВФайл(ЗаписьXML, "sizeCode", КодСоблюденияРазмераПлатежей);
			ДобавитьЗаписьВФайл(ЗаписьXML, "scheduleCode", КодСоблюденияСрокаПлатежей);  
			Если ФормироватьНакопительныеПлатежи Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "lastMissPaySum", киФорматЧисла2(стрОплата.СуммаПоследнегоПлатежа30дн));
				ДобавитьЗаписьВФайл(ЗаписьXML, "paySum24", киФорматЧисла2(стрОплата.СуммаОплат24мес));   
			КонецЕсли;
		Иначе
			ДобавитьЗаписьВФайл(ЗаписьXML, "paymentSum", киФорматЧисла2(стрОплата.СуммаПоследнегоПлатежа));
			ДобавитьЗаписьВФайл(ЗаписьXML, "paymentMainSum", киФорматЧисла2(стрОплата.ОДПоследнегоПлатежа));
			ДобавитьЗаписьВФайл(ЗаписьXML, "paymentPercentSum", киФорматЧисла2(стрОплата.ПроцентыПоследнегоПлатежа));
			ДобавитьЗаписьВФайл(ЗаписьXML, "paymentOtherSum", киФорматЧисла2(стрОплата.ИноеПоследнегоПлатежа));
			ДобавитьЗаписьВФайл(ЗаписьXML, "totalSum", киФорматЧисла2(стрОплата.СуммаВсехОплат));
			ДобавитьЗаписьВФайл(ЗаписьXML, "totalMainSum", киФорматЧисла2(стрОплата.ОДВсехОплат));
			ДобавитьЗаписьВФайл(ЗаписьXML, "totalPercentSum", киФорматЧисла2(стрОплата.ПроцентыВсехОплат));
			ДобавитьЗаписьВФайл(ЗаписьXML, "totalOtherSum", киФорматЧисла2(стрОплата.ИноеВсехОплат));
			ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(стрОплата.ДатаПлатежа));
			ДобавитьЗаписьВФайл(ЗаписьXML, "sizeCode", КодСоблюденияРазмераПлатежей);
			ДобавитьЗаписьВФайл(ЗаписьXML, "scheduleCode", КодСоблюденияСрокаПлатежей); 
			Если ФормироватьНакопительныеПлатежи Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "lastMissPaySum", киФорматЧисла2(стрОплата.СуммаПоследнегоПлатежа30дн));
				ДобавитьЗаписьВФайл(ЗаписьXML, "paySum24", киФорматЧисла2(стрОплата.СуммаОплат24мес));   
			КонецЕсли;
		КонецЕсли;
	Иначе  	
		Инверс = ЗаписьСтрокиОплат.Количество() - 1;  
		Заполнено = Ложь;
		Пока Инверс >= 0 Цикл
			стрОплата  = ЗаписьСтрокиОплат[Инверс]; 
			Если стрОплата.ДатаПлатежа <= Запись.ДатаСобытия Тогда 
				Если Не ЗначениеЗаполнено(стрОплата.СуммаПоследнегоПлатежа) Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "paymentSum", киФорматЧисла2(стрОплата.СуммаПоследнегоПлатежа));
					ДобавитьЗаписьВФайл(ЗаписьXML, "sizeCode", КодСоблюденияРазмераПлатежей);
					ДобавитьЗаписьВФайл(ЗаписьXML, "scheduleCode", КодСоблюденияСрокаПлатежей);  
					Если ФормироватьНакопительныеПлатежи Тогда
						ДобавитьЗаписьВФайл(ЗаписьXML, "lastMissPaySum", киФорматЧисла2(стрОплата.СуммаПоследнегоПлатежа30дн));
						ДобавитьЗаписьВФайл(ЗаписьXML, "paySum24", киФорматЧисла2(стрОплата.СуммаОплат24мес));   
					КонецЕсли;
				Иначе
					ДобавитьЗаписьВФайл(ЗаписьXML, "paymentSum", киФорматЧисла2(стрОплата.СуммаПоследнегоПлатежа));
					ДобавитьЗаписьВФайл(ЗаписьXML, "paymentMainSum", киФорматЧисла2(стрОплата.ОДПоследнегоПлатежа));
					ДобавитьЗаписьВФайл(ЗаписьXML, "paymentPercentSum", киФорматЧисла2(стрОплата.ПроцентыПоследнегоПлатежа));
					ДобавитьЗаписьВФайл(ЗаписьXML, "paymentOtherSum", киФорматЧисла2(стрОплата.ИноеПоследнегоПлатежа));
					ДобавитьЗаписьВФайл(ЗаписьXML, "totalSum", киФорматЧисла2(стрОплата.СуммаВсехОплат));
					ДобавитьЗаписьВФайл(ЗаписьXML, "totalMainSum", киФорматЧисла2(стрОплата.ОДВсехОплат));
					ДобавитьЗаписьВФайл(ЗаписьXML, "totalPercentSum", киФорматЧисла2(стрОплата.ПроцентыВсехОплат));
					ДобавитьЗаписьВФайл(ЗаписьXML, "totalOtherSum", киФорматЧисла2(стрОплата.ИноеВсехОплат));
					ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(стрОплата.ДатаПлатежа));
					ДобавитьЗаписьВФайл(ЗаписьXML, "sizeCode", КодСоблюденияРазмераПлатежей);
					ДобавитьЗаписьВФайл(ЗаписьXML, "scheduleCode", КодСоблюденияСрокаПлатежей); 
					Если ФормироватьНакопительныеПлатежи Тогда
						ДобавитьЗаписьВФайл(ЗаписьXML, "lastMissPaySum", киФорматЧисла2(стрОплата.СуммаПоследнегоПлатежа30дн));
						ДобавитьЗаписьВФайл(ЗаписьXML, "paySum24", киФорматЧисла2(стрОплата.СуммаОплат24мес));   
					КонецЕсли;
				КонецЕсли;
				Заполнено = Истина;
				Прервать;
			Иначе 
				Инверс = Инверс - 1;
				Продолжить; 
			КонецЕсли;
			Инверс = Инверс - 1;	
		КонецЦикла; 
		
		Если Не Заполнено Тогда
			ДобавитьЗаписьВФайл(ЗаписьXML, "paymentSum", киФорматЧисла2(0));
			ДобавитьЗаписьВФайл(ЗаписьXML, "sizeCode", КодСоблюденияРазмераПлатежей);
			ДобавитьЗаписьВФайл(ЗаписьXML, "scheduleCode", КодСоблюденияСрокаПлатежей);
			Если ФормироватьНакопительныеПлатежи Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "lastMissPaySum", киФорматЧисла2(0));
				ДобавитьЗаписьВФайл(ЗаписьXML, "paySum24", киФорматЧисла2(0)); 
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();	
	
КонецПроцедуры

&НаСервере
Процедура UL_21_NonMonetarySource(ЗаписьXML, Запись, ДопПараметры = Неопределено)   
		
	Если ЗначениеЗаполнено(Запись.СуммаСделки) И НЕ ЗначениеЗаполнено(Запись.НеденежноеОбязательство) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСтрокиОтчета = "21_SOURCENONMONETOBLIG"; 
	
	Если ЗначениеЗаполнено(Запись.СуммаСделки) Тогда 
		Если Запись.Событие.КодНБКИ = "2.11.2" Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("UL_21_NonMonetarySource");
			ДобавитьЗаписьВФайл(ЗаписьXML, "item", "-");
			ДобавитьЗаписьВФайл(ЗаписьXML, "code", "-");
			ДобавитьЗаписьВФайл(ЗаписьXML, "date", "-");
			ДобавитьЗаписьВФайл(ЗаписьXML, "propertyId", "-"); 	
			ЗаписьXML.ЗаписатьКонецЭлемента(); 
		Иначе
			Возврат;	
		КонецЕсли; 
	ИначеЕсли ЗначениеЗаполнено(Запись.НеденежноеОбязательство)  Тогда 	 
		ЗаписьXML.ЗаписатьНачалоЭлемента("UL_21_NonMonetarySource");
		СформироватьБлок30_21НО(ЗаписьXML, Запись.НеденежноеОбязательство);
		ЗаписьXML.ЗаписатьКонецЭлемента(); 		
	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента("UL_21_NonMonetarySource");
		ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, ДопПараметры.Настройка, ИмяСтрокиОтчета, "Сделка"); 	
		Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл 			
			Если Значение.НомерПоказателя = "C30.1" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "item", Значение.Значение); 
				Продолжить;
			КонецЕсли;  
				
			Если Значение.НомерПоказателя = "C30.2" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "code", Значение.Значение); 
				Продолжить;
			КонецЕсли;      
			
			Если Значение.НомерПоказателя = "C30.4" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(Значение.Значение));
				Продолжить;
			КонецЕсли;

			
			Если Значение.НомерПоказателя = "C30.5" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "propertyId", Значение.Значение); 
				Продолжить;
			КонецЕсли;
	
		КонецЦикла; 
		ЗаписьXML.ЗаписатьКонецЭлемента();		
	КонецЕсли;
  
КонецПроцедуры    

&НаСервере
Процедура UL_22_NonMonetarySubject(ЗаписьXML, Запись, ДопПараметры = Неопределено)   
			
	ИмяСтрокиОтчета = "22_SUBJECTNONMONETOBLIG"; 
	
	Если ЗначениеЗаполнено(Запись.СуммаСделки) Тогда 
		Если Запись.Событие.КодНБКИ = "2.11.2" Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("UL_22_NonMonetarySubject");
			ДобавитьЗаписьВФайл(ЗаписьXML, "item", "-");
			ДобавитьЗаписьВФайл(ЗаписьXML, "fulfillment", "-"); 
			ДобавитьЗаписьВФайл(ЗаписьXML, "code", "-");
			ЗаписьXML.ЗаписатьКонецЭлемента(); 
		Иначе
			Возврат;	
		КонецЕсли; 
	ИначеЕсли ЗначениеЗаполнено(Запись.НеденежноеОбязательство)  Тогда 	 
		ЗаписьXML.ЗаписатьНачалоЭлемента("UL_22_NonMonetarySubject");
		СформироватьБлок31_22НО(ЗаписьXML, Запись.НеденежноеОбязательство);
		ЗаписьXML.ЗаписатьКонецЭлемента(); 		
	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента("UL_22_NonMonetarySubject");
		ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, ДопПараметры.Настройка, ИмяСтрокиОтчета, "Сделка"); 	
		Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл 			
			Если Значение.НомерПоказателя = "B22.1" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "item", Значение.Значение); 
				Продолжить;
			КонецЕсли;   
			
			Если Значение.НомерПоказателя = "B22.3" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "fulfillment", киФорматДатыXML(Значение.Значение));
				Продолжить;
			КонецЕсли;

			
			Если Значение.НомерПоказателя = "B22.4" Тогда
				
				ПризнакНенадлежащегоИсполнения = КредитныеИстории.ОбработатьЗначенияПризнаков(Значение.Значение);
				Если ПризнакНенадлежащегоИсполнения = "0" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "fulfillmentFailExist_0", Ложь);
					Прервать;
				Иначе
					ДобавитьЗаписьВФайл(ЗаписьXML, "fulfillmentFailExist_1", Истина);
					Продолжить;
				КонецЕсли;   
				
			КонецЕсли;
			
			
			Если Значение.НомерПоказателя = "B22.5" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "code", Значение.Значение); 
				Продолжить;
			КонецЕсли;
	
		КонецЦикла; 
		ЗаписьXML.ЗаписатьКонецЭлемента();		
	КонецЕсли;
  
			
КонецПроцедуры  


&НаСервере
Процедура UL_23_26_Group(ЗаписьXML, Запись, ДопПараметры = Неопределено)  
	//Дописать
	
	//ЗаписьXML.ЗаписатьНачалоЭлемента("UL_23_26_Group");
	//Если ПризнакЗалога = "0" Тогда
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "assetKind_0", ПризнакЗалога);
	//Иначе
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "assetKind_1", ПризнакЗалога);
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "propertyId", ИдентификационныйКодПредметаЗалога);
	//	UL_23_Collateral(ЗаписьXML, Запись, ДопПараметры);
	//	UL_26_Insurance(ЗаписьXML, Запись, ДопПараметры); 	
	//КонецЕсли;	
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервере
Процедура UL_23_Collateral(ЗаписьXML, Запись, ДопПараметры = Неопределено); 
	//Дописать
	ЗаписьXML.ЗаписатьНачалоЭлемента("UL_23_Collateral");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "code", КодПредметаЗалога(КодПредметаЗалога));
	//ДобавитьЗаписьВФайл(ЗаписьXML, "date", Формат(ДатаДоговора, "ДФ=yyyy-MM-dd"));
	//ЗаписьXML.ЗаписатьНачалоЭлемента("Sum_group_UL_23_26_Group");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "sum", Формат(СтоимостьЗалога, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ="));
	//ДобавитьЗаписьВФайл(ЗаписьXML, "currency", ВалютаЗалога);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "assessDate", Формат(ДатаОценкиЗалога, "ДФ=yyyy-MM-dd"));
	//ДобавитьЗаписьВФайл(ЗаписьXML, "priceCode", ВидСтоимостиЗалога); 
	//ЗаписьXML.ЗаписатьКонецЭлемента();	
	//ДобавитьЗаписьВФайл(ЗаписьXML, "collateralEndDate", Формат(ДатаПрекращенияПлан, "ДФ=yyyy-MM-dd"));
	//ДобавитьЗаписьВФайл(ЗаписьXML, "contractTotalSum", Формат(СуммаОбязательств, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=")); 
	//ДобавитьЗаписьВФайл(ЗаписьXML, "contractCount", КоличествоДоговоров);
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

&НаСервере
Процедура UL_26_Insurance(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	//ЗаписьXML.ЗаписатьНачалоЭлемента("UL_26_Insurance");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "exist_0", ПризнакСтрахования);
	//ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

&НаСервере
Процедура UL_24_Warranty(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	//ЗаписьXML.ЗаписатьНачалоЭлемента("UL_24_Warranty");			
	//Если ПризнакПоручительства = "0" Тогда
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "warrantyFact_0", ПризнакПоручительства); 
	//Иначе	
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "warrantyFact_1", ПризнакПоручительства);
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "uid", УИДПоручительства);
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "sum", Формат(РазмерПоручительства, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ="));
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "currency", ВалПоручительства);
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "openDate", Формат(ДатаЗаключенияДП, "ДФ=yyyy-MM-dd"));
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "endDate", Формат(ДатаПлановогоПрекращенияДП, "ДФ=yyyy-MM-dd"));
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "factEndDate", Формат(ДатаФактПрекращенияДП, "ДФ=yyyy-MM-dd"));
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "endCode", КодПрекращенияДП);
	//КонецЕсли;
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервере
Процедура UL_25_Guarantee(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	//ЗаписьXML.ЗаписатьНачалоЭлемента("UL_25_Guarantee");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "exist_0", ПризнакНезависимойГарантии);	
	//ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

&НаСервере
Процедура UL_27_ProvisionPayment(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	//ЗаписьXML.ЗаписатьНачалоЭлемента("UL_27_ProvisionPayment");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "exist_0", ПризнакПогашенияЗаСчетОбеспечения);
	//ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

&НаСервере
Процедура UL_28_WarrantyReturn(ЗаписьXML, Запись, ДопПараметры = Неопределено)  
	Настройка = ДопПараметры.Настройка;
	ИмяСтрокиОтчета = "28_GUARANTEEREPAY"; 
	
	Если Настройка.ПоУмолчаниюОбеспечение Тогда
			
		Если ЗначениеЗаполнено(Запись.Обеспечительство) Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("UL_28_WarrantyReturn");
			СформироватьБлок37_28Обеспечение(ЗаписьXML, Запись.Обеспечительство, Запись.ДатаСобытия);	
			ЗаписьXML.ЗаписатьКонецЭлемента();
		Иначе   
			ЗаписьXML.ЗаписатьНачалоЭлемента("UL_28_WarrantyReturn");
			ДобавитьЗаписьВФайл(ЗаписьXML, "exist_0", Ложь);
			ЗаписьXML.ЗаписатьКонецЭлемента();	
		КонецЕсли;
	Иначе         
		ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, ДопПараметры.Настройка, ИмяСтрокиОтчета, "Сделка"); 	
		ЗаписьXML.ЗаписатьНачалоЭлемента("UL_28_WarrantyReturn");
		Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл 
			
			Если Значение.НомерПоказателя = "B28.1" Тогда 
				ЕстьВозмещение = КредитныеИстории.ОбработатьЗначенияПризнаков(Значение.Значение);
				Если ЕстьВозмещение = "0" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "exist_0", Ложь);
					Прервать;
				Иначе
					ДобавитьЗаписьВФайл(ЗаписьXML, "exist_1", Истина);
					Продолжить;
				КонецЕсли;  
			КонецЕсли;

			
			Если Значение.НомерПоказателя = "B28.2" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "sum", киФорматЧисла2(Значение.Значение));
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "B28.3" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "paidSum", киФорматЧисла2(Значение.Значение));
				Продолжить;
			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "B28.4" Тогда 
				ЕстьВозмещение = КредитныеИстории.ОбработатьЗначенияПризнаков(Значение.Значение);
				Если ЕстьВозмещение = "0" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "compliance_0", Ложь);
					Продолжить;
				Иначе
					ДобавитьЗаписьВФайл(ЗаписьXML, "compliance_1", Истина);
					Продолжить;
				КонецЕсли;  
			КонецЕсли;

			Если Значение.НомерПоказателя = "B28.5" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "calcDate", киФорматДатыXML(Значение.Значение)); 
				Продолжить;
			КонецЕсли;    
		КонецЦикла; 
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;	 
КонецПроцедуры

&НаСервере
Процедура UL_29_ContractEnd(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	Настройка = ДопПараметры.Настройка; 
	Дееспособность = ДопПараметры.Дееспособность; 
	ПринудительноеВзыскание = ДопПараметры.ПризнакПринудительногоВзыскания;
	ЛицоНеСуществует = ?(ЗначениеЗаполнено(ДопПараметры.ЛицоНеСуществует), ДопПараметры.ЛицоНеСуществует, Ложь); 

	ИмяСтрокиОтчета = "B29_OBLIGTERMINATION";
	Заполнено = Ложь;
	Если ТипЗнч(Запись.ДокументСобытие) = Тип("ДокументСсылка.СведенияОбИзмененииДоговора") И НЕ Заполнено Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("UL_29_ContractEnd");
		СформироватьБлок38_29Изменение(ЗаписьXML, Запись.ДокументСобытие, Запись.ДатаСобытия);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		Заполнено = Истина;
	ИначеЕсли ТипЗнч(Запись.ДокументСобытие) = Тип("ДокументСсылка.Обеспечительства") И НЕ Заполнено Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("UL_29_ContractEnd");
		СформироватьБлок38_29Обеспечение(ЗаписьXML, Запись.ДокументСобытие, Запись.ДатаСобытия);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		Заполнено = Истина;
	ИначеЕсли ЗначениеЗаполнено(Запись.РеструктуризацияМКЗ) И НЕ Заполнено Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("UL_29_ContractEnd");
		СформироватьБлок38_29Новация(ЗаписьXML, Запись.РеструктуризацияМКЗ);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		Заполнено = Истина; 
	ИначеЕсли Запись.Банкротство <> "0" ИЛИ ТипЗнч(Запись.ДокументСобытие) = Тип("СправочникСсылка.ДелоОБанкротстве") И НЕ Заполнено Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("UL_29_ContractEnd");
		Если ЗначениеЗаполнено(Запись.Банкротство) Тогда
			СформироватьБлок38_29Банкротство(ЗаписьXML, Запись.ДатаСобытия); 
		Иначе        
			СформироватьБлок38_29Прекращение(ЗаписьXML, Запись, ПринудительноеВзыскание);
		КонецЕсли; 
		ЗаписьXML.ЗаписатьКонецЭлемента();
		Заполнено = Истина;
	ИначеЕсли ТипЗнч(Дееспособность) = Тип("СправочникСсылка.ДелоОНедееспособностиСубъекта") И НЕ Заполнено Тогда  
		ЗаписьXML.ЗаписатьНачалоЭлемента("UL_29_ContractEnd");
		СформироватьБлок38_29Акт(ЗаписьXML, Запись.ДатаСобытия);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		Заполнено = Истина;
	ИначеЕсли ЛицоНеСуществует И НЕ Заполнено Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("UL_29_ContractEnd");
		СформироватьБлок38_29Ликвидировано(ЗаписьXML, "15", Запись.ДатаСобытия);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		Заполнено = Истина; 
	ИначеЕсли НЕ Заполнено Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("UL_29_ContractEnd");
		СформироватьБлок38_29Прекращение(ЗаписьXML, Запись, ПринудительноеВзыскание);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		Заполнено = Истина; 
	Иначе
		ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, ДопПараметры.Настройка, ИмяСтрокиОтчета, "Сделка"); 	
		ЗаписьXML.ЗаписатьНачалоЭлемента("UL_29_ContractEnd");
		Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл
			Если Значение.НомерПоказателя = "C38.1" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(Значение.Значение));
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "C38.2" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "code", Значение.Значение); 
				Продолжить;
			КонецЕсли;    
		КонецЦикла;
        ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;    
	
КонецПроцедуры

&НаСервере
Процедура UL_30_Court(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	Настройка = ДопПараметры.Настройка;  
	
	Если ЗначениеЗаполнено(Запись.СудебноеДело) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("UL_30_Court");
		СформироватьБлок39_30Суд(ЗаписьXML, Запись.ДокументСобытие);
		ЗаписьXML.ЗаписатьКонецЭлемента();
	ИначеЕсли Настройка.ПоУмолчаниюСудебныйБлок Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("UL_30_Court");
		ДобавитьЗаписьВФайл(ЗаписьXML, "exist_0", Ложь);
		ЗаписьXML.ЗаписатьКонецЭлемента();
	Иначе
		ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, Настройка, "B30_LEGALRECORD", "Сделка");
		ЗаписьXML.ЗаписатьНачалоЭлемента("UL_30_Court");
		Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл
			Если Значение.НомерПоказателя = "B30.1" Тогда 
				ПризнакСудебногоСпора = КредитныеИстории.ОбработатьЗначенияПризнаков(Значение.Значение);
				Если ПризнакСудебногоСпора = "0" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "exist_0", Ложь);
					Прервать;
				Иначе
					ДобавитьЗаписьВФайл(ЗаписьXML, "exist_1", Истина);
					Продолжить;
				КонецЕсли;  
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "B30.2" Тогда 
				ПризнакСудебногоАкта = КредитныеИстории.ОбработатьЗначенияПризнаков(Значение.Значение);
				Если ПризнакСудебногоАкта = "0" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "actExist_0", Ложь);
					Прервать;
				Иначе
					ДобавитьЗаписьВФайл(ЗаписьXML, "actExist_1", Истина);
					Продолжить;
				КонецЕсли;  
				
			КонецЕсли;  
			Если Значение.НомерПоказателя = "B30.3" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(Значение.Значение));   
				Продолжить;
			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "B30.4" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "num", Значение.Значение);   
				Продолжить;
			КонецЕсли; 
			
			Если Значение.НомерПоказателя = "B30.5" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "actResolution", Значение.Значение);   
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "B30.6" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "actResolution", Значение.Значение);   
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;	 
		
		
		ЗаписьXML.ЗаписатьКонецЭлемента();	
	КонецЕсли;	 
	
КонецПроцедуры

&НаСервере
Процедура UL_35_StopSend(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	ЗаписьXML.ЗаписатьНачалоЭлемента("UL_35_StopSend");
	Настройка = ДопПараметры.Настройка; 
	Если Запись.Продан = "1" И ТипЗнч(Запись.ДокументСобытие) = Тип("ДокументСсылка.ПродажаОбъектовУчета") Тогда 
		ДобавитьЗаписьВФайл(ЗаписьXML, "code", "3");
		ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(Запись.ДокументСобытие.Дата));
	ИначеЕсли Запись.ДатаСобытия >= Настройка.ДатаОкончанияДоговораСБКИ ИЛИ Настройка.ДоговорРасторгнут Тогда
		КодПрекращенияПередачи = ?(Настройка.ДоговорРасторгнут, "2", "1");
		Если Настройка.ДоговорРасторгнут Тогда 
			КодПрекращенияПередачи = "2";
		КонецЕсли;    
		
		ДатаПрекращения  = ?(КодПрекращенияПередачи = "2", киФорматДатыXML(Запись.ДатаСобытия), киФорматДатыXML(Настройка.ДатаОкончанияДоговораСБКИ));
		
		ДобавитьЗаписьВФайл(ЗаписьXML, "code", КодПрекращенияПередачи);
		ДобавитьЗаписьВФайл(ЗаписьXML, "date", ДатаПрекращения);
		
	Иначе  
		ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, Настройка, "B35_SUBMITHOLD", "Сделка");	
		Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл
			Если Значение.НомерПоказателя = "B35.1" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "code", Значение.Значение);
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "B35.2" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(Значение.Значение)); 
				Продолжить;
			КонецЕсли;  
		КонецЦикла;	
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); 
КонецПроцедуры

&НаСервере
Процедура UL_44_Accounting(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	ПризнакУчета = "1";
	Если ТипЗнч(Запись.ДокументСобытие) = Тип("ДокументСсылка.ПродажаОбъектовУчета") Тогда 
		ПризнакУчета = ?(Запись.ДокументСобытие.Цессия, "0", "1");
	КонецЕсли;	   
	
	
	МинПроцентнаяСтавка = ?(ЗначениеЗаполнено(Запись.ПроцентнаяСтавкаПоУсловиям), киФорматЧисла2(Запись.ПроцентнаяСтавкаПоУсловиям), "");   
	МаксПроцентнаяСтавка = ?(ЗначениеЗаполнено(Запись.МаксимальнаяПроцентнаяСтавкаПоУсловиям), киФорматЧисла2(Запись.МаксимальнаяПроцентнаяСтавкаПоУсловиям), "");
	
	
	Если ТипЗнч(Запись.ДокументСобытие) = Тип("ДокументСсылка.ПродажаОбъектовУчета") Тогда
		Если Запись.ДокументСобытие.Цессия Тогда  
			СуммаПередачи = киФорматЧисла2(ДопПараметры.ТекущаяЗадолженность); 
		КонецЕсли;	
		
	КонецЕсли;
	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("UL_44_Accounting");
	
	Если ПризнакУчета = "1" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "exist_1", Истина);
	Иначе 
		ДобавитьЗаписьВФайл(ЗаписьXML, "exist_0", Ложь);
		ДобавитьЗаписьВФайл(ЗаписьXML, "sum", СуммаПередачи);
		
	КонецЕсли;	
	
	ДобавитьЗаписьВФайл(ЗаписьXML, "minInterest", МинПроцентнаяСтавка);  
	ДобавитьЗаписьВФайл(ЗаписьXML, "maxInterest", ?(ЗначениеЗаполнено(МаксПроцентнаяСтавка), МаксПроцентнаяСтавка, МинПроцентнаяСтавка));  
	
	Если ЗначениеЗаполнено(ДопПараметры.ЗаписьОГосПоддержке) Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "supportExist_1", Истина); 
		ДобавитьЗаписьВФайл(ЗаписьXML, "supportInfo", ДопПараметры.ЗаписьОГосПоддержке);
	Иначе 
		ДобавитьЗаписьВФайл(ЗаписьXML, "supportExist_0", Ложь); 
	КонецЕсли;	
	
	
	//Уточнить!!!
	ДобавитьЗаписьВФайл(ЗаписьXML, "calcDate", киФорматДатыXML(Запись.ДатаСобытия));
	ЗаписьXML.ЗаписатьКонецЭлемента();	
	
КонецПроцедуры

&НаСервере
Процедура UL_45_Application(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	Настройка = ДопПараметры.Настройка; 
	Заполнено = Ложь; 
		
	Если ТипЗнч(Запись.ДокументСобытие) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если Настройка.НеФормироватьОбращения Тогда
			Возврат;
		ИначеЕсли ЗначениеЗаполнено(Запись.Прощение) Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("UL_45_Application");
			СформироватьБлок55_45Наследование(ЗаписьXML, Запись);
		Иначе     
			ЗаписьXML.ЗаписатьНачалоЭлемента("UL_45_Application");
			ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, Настройка, "B45_APPLICATION", "Сделка");
			Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл				
				
				Если Значение.НомерПоказателя = "B45.1" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "role", Значение.Значение);
					Продолжить;
				КонецЕсли;  
				
				Если Значение.НомерПоказателя = "B45.2" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "sum", киФорматЧисла2(Значение.Значение));
					Продолжить;
				КонецЕсли; 
				
				Если Значение.НомерПоказателя = "B45.3" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "currency", Значение.Значение, ИСТИНА);   
					Продолжить;
				КонецЕсли;  
				
				Если Значение.НомерПоказателя = "B45.4" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "uid", Значение.Значение);   
					Продолжить;
				КонецЕсли; 
				
				Если Значение.НомерПоказателя = "B45.5" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "applicationDate", киФорматДатыXML(Значение.Значение));   
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "B45.6" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "sourceCode", Значение.Значение);   
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "B45.8" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "wayCode", Значение.Значение);   
					Продолжить;
				КонецЕсли;  
				
				Если Значение.НомерПоказателя = "B45.9" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "approvalEndDate", киФорматДатыXML(Значение.Значение));   
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "B45.10" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "stageEndDate", киФорматДатыXML(Значение.Значение));   
					Продолжить;
				КонецЕсли; 
				
				Если Значение.НомерПоказателя = "B45.11" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "purposeCode", Значение.Значение);   
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "B45.12" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "stageCode", Значение.Значение);   
					Продолжить;
				КонецЕсли; 
				
				Если Значение.НомерПоказателя = "B45.13" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "stageDate", киФорматДатыXML(Значение.Значение));   
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "B45.14" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "applicationCode", Значение.Значение);   
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "B45.15" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "num", Значение.Значение);   
					Продолжить;
				КонецЕсли;
				                          
				Если Значение.НомерПоказателя = "B45.16" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "loanSum", киФорматЧисла2(Значение.Значение));   
					Продолжить;
				КонецЕсли;
				
			КонецЦикла; 
		КонецЕсли;
		Заполнено = Истина;
	ИначеЕсли ЗначениеЗаполнено(Запись.ДоговорМКЗ)  Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("UL_45_Application");
		СформироватьБлок55_45МКЗ(ЗаписьXML, Запись, Запись.ДоговорМКЗ);
		Заполнено = Истина;
	ИначеЕсли ЗначениеЗаполнено(Запись.РеструктуризацияМКЗ) Тогда  
		ЗаписьXML.ЗаписатьНачалоЭлемента("UL_45_Application");
		СформироватьБлок55_45МКЗ(ЗаписьXML, Запись, Запись.РеструктуризацияМКЗ);
		Заполнено = Истина;
	ИначеЕсли ЗначениеЗаполнено(Запись.НеденежноеОбязательство) И НЕ Заполнено  Тогда 
		ЗаписьXML.ЗаписатьНачалоЭлемента("UL_45_Application");
		СформироватьБлок55_45НО(ЗаписьXML, Запись, Запись.НеденежноеОбязательство);   
	ИначеЕсли ЗначениеЗаполнено(Запись.СобытиеКодНБКИ = "2.3") И НЕ Заполнено  Тогда 
		Возврат;	
	Иначе 
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("UL_45_Application");
		ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, Настройка, "B45_APPLICATION", "Сделка");
			Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл				
				
				Если Значение.НомерПоказателя = "B45.1" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "role", Значение.Значение);
					Продолжить;
				КонецЕсли;  
				
				Если Значение.НомерПоказателя = "B45.2" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "sum", киФорматЧисла2(Значение.Значение));
					Продолжить;
				КонецЕсли; 
				
				Если Значение.НомерПоказателя = "B45.3" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "currency", Значение.Значение, ИСТИНА);   
					Продолжить;
				КонецЕсли;  
				
				Если Значение.НомерПоказателя = "B45.4" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "uid", Значение.Значение);   
					Продолжить;
				КонецЕсли; 
				
				Если Значение.НомерПоказателя = "B45.5" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "applicationDate", киФорматДатыXML(Значение.Значение));   
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "B45.6" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "sourceCode", Значение.Значение);   
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "B45.8" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "wayCode", Значение.Значение);   
					Продолжить;
				КонецЕсли;  
				
				Если Значение.НомерПоказателя = "B45.9" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "approvalEndDate", киФорматДатыXML(Значение.Значение));   
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "B45.10" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "stageEndDate", киФорматДатыXML(Значение.Значение));   
					Продолжить;
				КонецЕсли; 
				
				Если Значение.НомерПоказателя = "B45.11" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "purposeCode", Значение.Значение);   
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "B45.12" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "stageCode", Значение.Значение);   
					Продолжить;
				КонецЕсли; 
				
				Если Значение.НомерПоказателя = "B45.13" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "stageDate", киФорматДатыXML(Значение.Значение));   
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "B45.14" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "applicationCode", Значение.Значение);   
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "B45.15" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "num", Значение.Значение);   
					Продолжить;
				КонецЕсли;
				                          
				Если Значение.НомерПоказателя = "B45.16" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "loanSum", киФорматЧисла2(Значение.Значение));   
					Продолжить;
				КонецЕсли;
				
			КонецЦикла; 
 
		
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

&НаСервере
Процедура UL_46_Participation(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	Настройка = ДопПараметры.Настройка; 
	ЕстьЗадолженность = ДопПараметры.ЕстьЗадолженность;
	ЕстьБлокПрекращение = (Запись.СобытиеКодНБКИ = "2.5");
	
	ТипОтношенияКСчету = "1";
	Если ДопПараметры.Поручитель <> "0" Тогда
		ТипОтношенияКСчету  =  ДопПараметры.Поручитель;
	КонецЕсли;	
	
	Если ДопПараметры.Наследник <> "0" Тогда
		ТипОтношенияКСчету  =  ДопПараметры.Наследник;
	КонецЕсли;	  
	
	Просрочка90плюс = Запись.Просрочка90плюс;
	ПризнакПрекращения = "0"; 
	
	Если НЕ ЕстьЗадолженность Тогда
		Просрочка90плюс = "0";
		ПризнакПрекращения = "1";
	КонецЕсли;	
	ПризнакПросрочки = ?(ЕстьБлокПрекращение, "0", Просрочка90плюс); 
	ПризнакПрекращенияОбязательства = ?(ЕстьБлокПрекращение, "1", ПризнакПрекращения);
	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("UL_46_Participation");
	ДобавитьЗаписьВФайл(ЗаписьXML, "role", ТипОтношенияКСчету);
	ДобавитьЗаписьВФайл(ЗаписьXML, "kindCode", Запись.КодНБКИВидКредита);
	ДобавитьЗаписьВФайл(ЗаписьXML, "uid", Запись.UID);
	ДобавитьЗаписьВФайл(ЗаписьXML, "fundDate", киФорматДатыXML(Запись.ДатаПередачиФинансирования)); 
	
	
	Если ПризнакПросрочки = "1" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "overdueExist_1", Истина);	
	Иначе	
		ДобавитьЗаписьВФайл(ЗаписьXML, "overdueExist_0", Ложь);
	КонецЕсли;
	
	Если ПризнакПрекращенияОбязательства = "1" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "stopExist_1", Истина);
	Иначе	
		ДобавитьЗаписьВФайл(ЗаписьXML, "stopExist_0", Ложь);
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();		
КонецПроцедуры

&НаСервере
Процедура UL_47_Reject(ЗаписьXML, Запись, ДопПараметры = Неопределено)
		
	Настройка = ДопПараметры.Настройка;
	ЗаписьXML.ЗаписатьНачалоЭлемента("UL_47_Reject");	
	Если ЗначениеЗаполнено(Запись.Банкротство) Тогда
		Если ТипЗнч(Запись.Банкротство) = Тип("СправочникСсылка.ДелоОБанкротстве") Тогда
			ДобавитьЗаписьВФайл(ЗаписьXML, "rejectDate", киФорматДатыXML(Запись.Банкротство.ДатаПоследнейПроверки));
		Иначе 
			ДобавитьЗаписьВФайл(ЗаписьXML, "rejectDate", киФорматДатыXML(Запись.ДатаСобытия));
		КонецЕсли;
		ДобавитьЗаписьВФайл(ЗаписьXML, "rejectCode", "6");
	ИначеЕсли ЗначениеЗаполнено(Запись.ДоговорМКЗ) ИЛИ ЗначениеЗаполнено(Запись.РеструктуризацияМКЗ) Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "rejectDate", киФорматДатыXML(Запись.ДатаСобытия));
		ДобавитьЗаписьВФайл(ЗаписьXML, "rejectCode", "5");
	ИначеЕсли ЗначениеЗаполнено(Запись.НеденежноеОбязательство) Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "rejectDate", киФорматДатыXML(Запись.ДатаСобытия));
		ДобавитьЗаписьВФайл(ЗаписьXML, "rejectCode", "5");
	Иначе
		ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, ДопПараметры.Настройка, "B47_APPLREJECT", "Сделка"); 	
		Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл
			Если Значение.НомерПоказателя = "B47.1" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "rejectDate", киФорматДатыXML(Значение.Значение));
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "B47.2" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "rejectCode", Значение.Значение); 
				Продолжить;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;	
        	
	ЗаписьXML.ЗаписатьКонецЭлемента();

	
КонецПроцедуры 


&НаСервере
Процедура UL_41_OrgAcquirer(ЗаписьXML, Запись, ДокументПродажа, ДопПараметры = Неопределено)
	
	ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(ДокументПродажа.ПриобретательПраваТребования, ДопПараметры.Настройка, "B41_ACQUIRERLEGAL", "ПриобретательПраваТребования"); 
	КодНомераИНН = "";
	ЗаписьXML.ЗаписатьНачалоЭлемента("UL_41_OrgAcquirer");	
		Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл
			Если Значение.НомерПоказателя = "B41.1" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "code", Значение.Значение);
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "B41.2" Тогда 
				ПризнакРФ = КредитныеИстории.ОбработатьЗначенияПризнаков(Значение.Значение);
				Если ПризнакРФ = "0" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "regRusExist_0", Ложь);
					Прервать;
				Иначе
					ДобавитьЗаписьВФайл(ЗаписьXML, "regRusExist_1", Истина);
					Продолжить;
				КонецЕсли;  

			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "B41.3" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "fullName", Значение.Значение, Истина);
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "B41.4" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "shortName", Значение.Значение, Истина);
				Продолжить;
			КонецЕсли; 
			
			Если Значение.НомерПоказателя = "B41.5" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "otherName", Значение.Значение, Истина);
				Продолжить;
			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "B41.6" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "lei", Значение.Значение);
				Продолжить;
			КонецЕсли; 
			
			Если Значение.НомерПоказателя = "B41.7" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "regNum", Значение.Значение);
				Продолжить;
			КонецЕсли; 
			
			Если Значение.НомерПоказателя = "B41.8" Тогда 
				КодНомераИНН = Значение.Значение;
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "B41.9" Тогда 
				Если ЗначениеЗаполнено(Значение.Значение) Тогда 
					ЗаписьXML.ЗаписатьНачалоЭлемента("TaxNum_group_UL_41_OrgAcquirer");
					Если НЕ ЗначениеЗаполнено(КодНомераИНН) Тогда 
						КодНомераИНН = ?(СтрДлина(Значение.Значение) = 12, "1", "2");
					КонецЕсли;	
					ДобавитьЗаписьВФайл(ЗаписьXML, "taxCode", КодНомераИНН);
					ДобавитьЗаписьВФайл(ЗаписьXML, "taxNum", Значение.Значение); 
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
				Продолжить;
			КонецЕсли;   
			
			Если Значение.НомерПоказателя = "B41.10" Тогда
				Если  ТипЗнч(ДокументПродажа) = Тип("ДокументСсылка.ПродажаОбъектовУчета") Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(ДокументПродажа.Дата));
					Продолжить;
				Иначе	
					Если ЗначениеЗаполнено(Значение.Значение) Тогда 
						ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(Значение.Значение));
					Иначе
						ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(Запись.ДатаСобытия));
					КонецЕсли;
					Продолжить;
				КонецЕсли;
			КонецЕсли;	
			
		КонецЦикла;	
			
		ЗаписьXML.ЗаписатьКонецЭлемента();

	
		
КонецПроцедуры   

&НаСервере
Процедура UL_42_PersonAcquirer(ЗаписьXML, Запись, ДокументПродажа, ДопПараметры = Неопределено)
	
	Если ТипЗнч(ДокументПродажа) = Тип("ДокументСсылка.ПродажаОбъектовУчета") Тогда
		ПравоприемникФЛ = ДокументПродажа.ПриобретательПраваТребования;   
		Если ТипЗнч(ДокументПродажа)  =  Тип("СправочникСсылка.Организации") Тогда
			Возврат;
		КонецЕсли;	
	ИначеЕсли ТипЗнч(Запись.ДокументСобытие) = Тип("СправочникСсылка.Контрагенты") Тогда 
		ПравоприемникФЛ = Запись.ДокументСобытие;	
	Иначе
		ПравоприемникФЛ = ""; 
		ФИОТекущее = "";
	КонецЕсли;	
		
	Если ТипЗнч(ПравоприемникФЛ) = Тип("СправочникСсылка.Контрагенты") Тогда	
		
		ФИОТекущее = ПравоприемникФЛ.ФИО[ПравоприемникФЛ.ФИО.Количество() - 1];			
	КонецЕсли;
		
	ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(?(ЗначениеЗаполнено(ПравоприемникФЛ), ПравоприемникФЛ, Запись.Сделка), ДопПараметры.Настройка, "B42_ACQUIRERINDIVID", "ПриобретательПраваТребования"); 
	
	КодНомераИНН = "";
	ЗаписьXML.ЗаписатьНачалоЭлемента("UL_42_PersonAcquirer");
	
	Если ЗначениеЗаполнено(ФИОТекущее) Тогда   
		Отчество = ?(ЗначениеЗаполнено(ФИОТекущее.Отчество), ФИОТекущее.Отчество, " ");
		ДобавитьЗаписьВФайл(ЗаписьXML, "lastName", ФИОТекущее.Фамилия, Истина);
		ДобавитьЗаписьВФайл(ЗаписьXML, "firstName", ФИОТекущее.Имя, Истина);
		ДобавитьЗаписьВФайл(ЗаписьXML, "middleName", Отчество, Истина);	
	КонецЕсли;	
		
	Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл  
			
		Если Значение.НомерПоказателя = "B42.1" Тогда 
			Если ЗначениеЗаполнено(ФИОТекущее) Тогда 
				Продолжить;
			Иначе
				ДобавитьЗаписьВФайл(ЗаписьXML, "lastName", Значение.Значение, Истина);
				Продолжить; 
			КонецЕсли;
		КонецЕсли; 
		
		Если Значение.НомерПоказателя = "B42.2" Тогда 
			Если ЗначениеЗаполнено(ФИОТекущее) Тогда 
				Продолжить;
			Иначе
				ДобавитьЗаписьВФайл(ЗаписьXML, "firstName", Значение.Значение, Истина);
				Продолжить; 
			КонецЕсли;
		КонецЕсли;
		
		Если Значение.НомерПоказателя = "B42.3" Тогда 
			Если ЗначениеЗаполнено(ФИОТекущее) Тогда 
				Продолжить;
			Иначе  
				Отчество = ?(ЗначениеЗаполнено(Значение.Значение), Значение.Значение, " ");
				ДобавитьЗаписьВФайл(ЗаписьXML, "middleName", Отчество, Истина);
				Продолжить; 
			КонецЕсли;
		КонецЕсли;
		
		Если Значение.НомерПоказателя = "B42.4" Тогда 
			ДобавитьЗаписьВФайл(ЗаписьXML, "birthDate", киФорматДатыXML(Значение.Значение));
			Продолжить;	
		КонецЕсли;  
		
		Если Значение.НомерПоказателя = "B42.5" Тогда 
			ДобавитьЗаписьВФайл(ЗаписьXML, "birthPlace", Значение.Значение, Истина);
			Продолжить;
		КонецЕсли;   
		
		Если Значение.НомерПоказателя = "B42.6" Тогда 
			КодНомераИНН = Значение.Значение;
			Продолжить;
		КонецЕсли;
		
		Если Значение.НомерПоказателя = "B42.7" Тогда 
			Если ЗначениеЗаполнено(Значение.Значение) Тогда 
				ЗаписьXML.ЗаписатьНачалоЭлемента("TaxNum_group_UL_42_PersonAcquirer");
				Если НЕ ЗначениеЗаполнено(КодНомераИНН) Тогда 
					КодНомераИНН = ?(СтрДлина(Значение.Значение) = 12, "1", "2");
				КонецЕсли;	
				ДобавитьЗаписьВФайл(ЗаписьXML, "taxCode", КодНомераИНН);
				ДобавитьЗаписьВФайл(ЗаписьXML, "taxNum", Значение.Значение); 
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
			Продолжить;
		КонецЕсли;   

		
		Если Значение.НомерПоказателя = "B42.8" Тогда 
			ДобавитьЗаписьВФайл(ЗаписьXML, "socialNum", Значение.Значение);
			Продолжить;
		КонецЕсли; 
		
		Если Значение.НомерПоказателя = "B42.9" Тогда 
			ДобавитьЗаписьВФайл(ЗаписьXML, "docCode", Значение.Значение);
			Продолжить;
		КонецЕсли;  
		
		Если Значение.НомерПоказателя = "B42.10" Тогда 
			ДобавитьЗаписьВФайл(ЗаписьXML, "docOtherName", Значение.Значение, Истина);
			Продолжить;
		КонецЕсли;
		
		Если Значение.НомерПоказателя = "B42.11" Тогда 
			ДобавитьЗаписьВФайл(ЗаписьXML, "docSeries", Значение.Значение);
			Продолжить;
		КонецЕсли; 
		
		Если Значение.НомерПоказателя = "B42.12" Тогда 
			ДобавитьЗаписьВФайл(ЗаписьXML, "docNum", Значение.Значение);
			Продолжить;
		КонецЕсли; 
		
		Если Значение.НомерПоказателя = "B42.13" Тогда 
			ДобавитьЗаписьВФайл(ЗаписьXML, "issueDate", киФорматДатыXML(Значение.Значение));
			Продолжить;	
		КонецЕсли;

		
		Если Значение.НомерПоказателя = "B42.14" Тогда 
			ДобавитьЗаписьВФайл(ЗаписьXML, "docIssuer", Значение.Значение, Истина);
			Продолжить;
		КонецЕсли; 
		
		Если Значение.НомерПоказателя = "B42.15" Тогда 
			ДобавитьЗаписьВФайл(ЗаписьXML, "deptCode", Значение.Значение);
			Продолжить;
		КонецЕсли;
		
				
		Если Значение.НомерПоказателя = "B42.16" Тогда
			Если  ТипЗнч(ДокументПродажа) = Тип("ДокументСсылка.ПродажаОбъектовУчета") Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(ДокументПродажа.Дата));
				Продолжить;
			Иначе	
				Если ЗначениеЗаполнено(Значение.Значение) Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(Значение.Значение));
				Иначе
					ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(Запись.ДатаСобытия));
				КонецЕсли;
				Продолжить;
			КонецЕсли;
		КонецЕсли;	
		
	КонецЦикла;	
	
	ЗаписьXML.ЗаписатьКонецЭлемента();

	
		
КонецПроцедуры  



&НаСервере
Процедура БлокПризнакРасчетаДатаРасчета(ЗаписьXML, ПризнакРасчета, ДатаРасчета)   
	
	//уточнить формирование блока при событиях 2.5 и 2.11.2 
	
	CalcDate = киФорматДатыXML(ДатаРасчета);
	
	Если ПризнакРасчета = "0" или ПризнакРасчета = "" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "lastPayExist_0", Ложь);	
		ДобавитьЗаписьВФайл(ЗаписьXML, "calcDate", CalcDate);
	КонецЕсли;   
	
	Если  ПризнакРасчета = "1" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "lastPayExist_1", Истина);	
		ДобавитьЗаписьВФайл(ЗаписьXML, "calcDate", CalcDate);
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область Блоки_По_Физическим_Лицам 

&НаСервере
Процедура FL_8_AddrReg(ЗаписьXML, ЗаписьДолжник, ЗаписьАдрес, ДопПараметры = Неопределено)
	
	Если ЗаписьАдрес = Неопределено Тогда 
		Если ЗаписьДолжник.СведенияОГражданствеФЛ = "3" Тогда 
			КодАдресаРегистрации = "-";
		Иначе	
			КодАдресаРегистрации = "3";
		КонецЕсли;
	ИначеЕсли ЗаписьАдрес.ВидАдреса = Перечисления.КредитныеИсторииВидыАдресов.Регистрации Тогда
		КодАдресаРегистрации = "1";
	ИначеЕсли ЗаписьАдрес.ВидАдреса = Перечисления.КредитныеИсторииВидыАдресов.Пребывания Тогда
		КодАдресаРегистрации = "2"; 
	Иначе
		КодАдресаРегистрации = "1";
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_8_AddrReg");	
	ДобавитьЗаписьВФайл(ЗаписьXML, "code", КодАдресаРегистрации);
	Если ЗаписьАдрес <> Неопределено Тогда
		
		ДобавитьЗаписьВФайл(ЗаписьXML, "postCode", ЗаписьАдрес.Индекс);
		ДобавитьЗаписьВФайл(ЗаписьXML, "countryCode", ЗаписьАдрес.КодСтраныОКСМ);
		ДобавитьЗаписьВФайл(ЗаписьXML, "countryOther", ?(СтрНайти(ЗаписьАдрес.КодСтраныОКСМ, "999") > 0, ЗаписьАдрес.НаименованиеИнойСтраны, ""), ИСТИНА);
		ДобавитьЗаписьВФайл(ЗаписьXML, "regStateNum", ЗаписьАдрес.НомерАдресаФИАС);
		ОКАТО = СтрЗаменить(ЗаписьАдрес.НаселенныйПунктОКАТО, Символы.НПП, "");
		Если СтрДлина(ОКАТО) = 10 Тогда
			ОКАТО = "0" + ОКАТО;
		КонецЕсли;
		ДобавитьЗаписьВФайл(ЗаписьXML, "locationCode", ОКАТО);
		ДобавитьЗаписьВФайл(ЗаписьXML, "locationOther", ?(СтрНайти(ОКАТО, "99 999 999 999") > 0, ЗаписьАдрес.НаселенныйПунктНазвание, ""), ИСТИНА);
		ДобавитьЗаписьВФайл(ЗаписьXML, "street", ЗаписьАдрес.Улица, ИСТИНА);
		ДобавитьЗаписьВФайл(ЗаписьXML, "house", ЗаписьАдрес.Дом, ИСТИНА);
		ДобавитьЗаписьВФайл(ЗаписьXML, "estate", ЗаписьАдрес.Владение, ИСТИНА);
		ДобавитьЗаписьВФайл(ЗаписьXML, "block", ЗаписьАдрес.Корпус, ИСТИНА);
		ДобавитьЗаписьВФайл(ЗаписьXML, "build", ЗаписьАдрес.Строение, ИСТИНА);
		ДобавитьЗаписьВФайл(ЗаписьXML, "apart", ЗаписьАдрес.КвартираПомещениеОфис, ИСТИНА);
		ДобавитьЗаписьВФайл(ЗаписьXML, "date", ?(ЗначениеЗаполнено(ЗаписьДолжник.ДатаРегистрацииПоДокументу), киФорматДатыXML(ЗаписьДолжник.ДатаРегистрацииПоДокументу), "-"));
		ДобавитьЗаписьВФайл(ЗаписьXML, "dept", ЗаписьДолжник.НаименованиеРегистрирующегоОргана, ИСТИНА);
		ДобавитьЗаписьВФайл(ЗаписьXML, "deptCode", ЗаписьДолжник.КодПодразделенияРегистрацииРФ);  
	Иначе 
		ДобавитьЗаписьВФайл(ЗаписьXML, "countryCode", ?(Врег(ЗаписьДолжник.КодСтраныДокумента) = "РОССИЯ", "643", ЗаписьДолжник.КодСтраныДокумента)); 
		Если СтрНайти(ЗаписьДолжник.КодСтраныДокумента, "999") > 0 Тогда
			ДобавитьЗаписьВФайл(ЗаписьXML, "countryOther", ЗаписьДолжник.НаименованиеИнойСтраныДокумента, ИСТИНА); 
		КонецЕсли;	

		ДобавитьЗаписьВФайл(ЗаписьXML, "date", "-");	
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();   
	
КонецПроцедуры

&НаСервере
Процедура FL_9_AddrFact(ЗаписьXML, ЗаписьДолжник, ЗаписьАдрес, ПризнакОтличияФактическогоМестаЖительства, ДопПараметры = Неопределено)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_9_AddrFact");
	//Если ПризнакОтличияФактическогоМестаЖительства = "0" ИЛИ ЗаписьАдрес = Неопределено Тогда
	// Не проверять адрес
	Если ПризнакОтличияФактическогоМестаЖительства = "1" Тогда 
		ДобавитьЗаписьВФайл(ЗаписьXML, "exist_0", Ложь);	
	Иначе 
		ДобавитьЗаписьВФайл(ЗаписьXML, "exist_1", ИСТИНА);
		ДобавитьЗаписьВФайл(ЗаписьXML, "postCode", ЗаписьАдрес.Индекс);
		ДобавитьЗаписьВФайл(ЗаписьXML, "countryCode", ЗаписьАдрес.КодСтраныОКСМ);
		ДобавитьЗаписьВФайл(ЗаписьXML, "countryOther", ?(СтрНайти(ЗаписьАдрес.КодСтраныОКСМ, "999") > 0, ЗаписьАдрес.НаименованиеИнойСтраны, ""), ИСТИНА);
		ДобавитьЗаписьВФайл(ЗаписьXML, "regStateNum", ЗаписьАдрес.НомерАдресаФИАС); 
		ОКАТО = СтрЗаменить(ЗаписьАдрес.НаселенныйПунктОКАТО, Символы.НПП, "");
		Если СтрДлина(ОКАТО) = 10 Тогда
			ОКАТО = "0" + ОКАТО;
		КонецЕсли;
		ДобавитьЗаписьВФайл(ЗаписьXML, "locationCode", ОКАТО);
		ДобавитьЗаписьВФайл(ЗаписьXML, "locationOther", ?(СтрНайти(ОКАТО, "99 999 999 999") > 0, ЗаписьАдрес.НаселенныйПунктНазвание, ""), ИСТИНА);
		ДобавитьЗаписьВФайл(ЗаписьXML, "street", ЗаписьАдрес.Улица, ИСТИНА);
		ДобавитьЗаписьВФайл(ЗаписьXML, "house", ЗаписьАдрес.Дом, ИСТИНА);
		ДобавитьЗаписьВФайл(ЗаписьXML, "estate", ЗаписьАдрес.Владение, ИСТИНА);
		ДобавитьЗаписьВФайл(ЗаписьXML, "block", ЗаписьАдрес.Корпус, ИСТИНА);
		ДобавитьЗаписьВФайл(ЗаписьXML, "build", ЗаписьАдрес.Строение, ИСТИНА);
		ДобавитьЗаписьВФайл(ЗаписьXML, "apart", ЗаписьАдрес.КвартираПомещениеОфис, ИСТИНА);	
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента(); 
	
КонецПроцедуры

&НаСервере
Процедура FL_10_Contact(ЗаписьXML, Запись, ДопПараметры = Неопределено) Экспорт
	
	//Phone_group_FL_10_Contact
	
	ТелНомер = "";
	Комментарий = "";
	
	Если Запись.Должник.Телефоны.Количество() > 0 Тогда
		ТелНомер = Запись.Должник.Телефоны[0].Номер;
		Коммент = ?(ЗначениеЗаполнено(Запись.Должник.Телефоны[0].Комментарий), " " + Строка(Запись.Должник.Телефоны[0].Комментарий), "");
		ВидТелНомера = ?(ЗначениеЗаполнено(Запись.Должник.Телефоны[0].ВидТелефона), Строка(Запись.Должник.Телефоны[0].ВидТелефона), "");
		Комментарий = ВидТелНомера +  Коммент;	 
	КонецЕсли;	
	
	ТелНомер = КредитныеИстории.НБКИОбработатьНомерТелефона(ТелНомер);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_10_Contact");
	Если ЗначениеЗаполнено(ТелНомер) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Phone_group_FL_10_Contact");
		ДобавитьЗаписьВФайл(ЗаписьXML, "phone", ТелНомер);
		ДобавитьЗаписьВФайл(ЗаписьXML, "phoneComment", Комментарий, ИСТИНА);
		ЗаписьXML.ЗаписатьКонецЭлемента(); 
	КонецЕсли;
	ДобавитьЗаписьВФайл(ЗаписьXML, "email", Запись.ЭлПочта);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервере
Процедура FL_11_IndividualEntrepreneur(ЗаписьXML, Запись, ДопПараметры = Неопределено) Экспорт
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_11_IndividualEntrepreneur");
	Если Запись.ЭтоИП <> "1" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "regFact_0", Ложь);
	Иначе	
		ДобавитьЗаписьВФайл(ЗаписьXML, "regFact_1", Истина);
		ДобавитьЗаписьВФайл(ЗаписьXML, "regNum", Запись.ИНН_ИП);
		ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(Запись.ДатаРегистрацииИП));
	КонецЕсли;	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервере 
Процедура FL_12_Capacity(ЗаписьXML, Запись, ДопПараметры = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Запись.Дееспособность) Тогда	
		ВозрастСек = ТекущаяДатаСеанса() - Запись.ДатаРождения;
		СовершеннолетиеСек = 567993600;
		КодДееспособности = ?(ВозрастСек >= СовершеннолетиеСек, "1", "2"); 
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_12_Capacity");	
		ДобавитьЗаписьВФайл(ЗаписьXML, "code", КодДееспособности);	
		ЗаписьXML.ЗаписатьКонецЭлемента();	
	Иначе		
		Если ТипЗнч(Запись.Дееспособность) = Тип("СправочникСсылка.ДелоОНедееспособностиСубъекта") Тогда
			СформироватьБлокДееспособностьXML(ЗаписьXML, Запись.Дееспособность);   
		ИначеЕсли ТипЗнч(Запись.Дееспособность) = Тип("Строка") Тогда
			КодДееспособности = Запись.Дееспособность; 
			ЗаписьXML.ЗаписатьНачалоЭлемента("FL_12_Capacity");	
			ДобавитьЗаписьВФайл(ЗаписьXML, "code", КодДееспособности);	
			ЗаписьXML.ЗаписатьКонецЭлемента();
		Иначе	
			КодДееспособности = 0;
			ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Должник, ДопПараметры.Настройка, "C12_CAPABILITY", "СубъектФизическоеЛицо");
			ЗаписьXML.ЗаписатьНачалоЭлемента("FL_12_Capacity");	
			Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл
				Если Значение.НомерПоказателя = "C12.1" Тогда
					КодДееспособности = Значение.Значение;
					ДобавитьЗаписьВФайл(ЗаписьXML, "code", Значение.Значение);
					Если Число(КодДееспособности) < 2 Тогда
						ЗаписьXML.ЗаписатьКонецЭлемента();
						Прервать;
					Иначе  
						Если Число(КодДееспособности) = 5 Тогда
							ЗаписьXML.ЗаписатьНачалоЭлемента("LegalCapacity_group_FL_12_Capacity");			
						Иначе    
							ЗаписьXML.ЗаписатьНачалоЭлемента("Incapacity_group_FL_12_Capacity");
						КонецЕсли;
						Продолжить;
					КонецЕсли; 
				КонецЕсли; 	
				
				Если Значение.НомерПоказателя = "C12.2" И Число(КодДееспособности) <> 5 Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "incapacityDate", киФорматДатыXML(Значение.Значение)); 
					Продолжить;
				КонецЕсли;  
				
				Если Значение.НомерПоказателя = "C12.3" И Число(КодДееспособности) <> 5 Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "incapacityDecisionNum", Значение.Значение);
					Продолжить;
				КонецЕсли;  
				
				Если Значение.НомерПоказателя = "C12.4" И Число(КодДееспособности) <> 5 Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "incapacityCourtName", Значение.Значение, Истина);  
					Продолжить;
				КонецЕсли; 
				
				Если Значение.НомерПоказателя = "C12.5" И Число(КодДееспособности) = 5 Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "legalCapacityDate", киФорматДатыXML(Значение.Значение));  
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "C12.6" И Число(КодДееспособности) = 5 Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "legalCapacityDecisionNum", Значение.Значение);  
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "C12.7" И Число(КодДееспособности) = 5 Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "legalCapacityCourtName", Значение.Значение, Истина);  
					Продолжить;
				КонецЕсли;
			КонецЦикла;	
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьБлокДееспособностьXML(ЗаписьXML, Дееспособность) Экспорт
	
	КодДееспособности = КредитныеИстории.ВернутьКодСудебнойДееспособности(Дееспособность.РешениеСудаДееспособность);
	Если Число(КодДееспособности) < 2 Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_12_Capacity");	
		ДобавитьЗаписьВФайл(ЗаписьXML, "code", КодДееспособности);	
		ЗаписьXML.ЗаписатьКонецЭлемента();	 
	Иначе  
		Если Число(КодДееспособности) = 5 Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("FL_12_Capacity");	
			ДобавитьЗаписьВФайл(ЗаписьXML, "code", КодДееспособности); 
			ЗаписьXML.ЗаписатьНачалоЭлемента("LegalCapacity_group_FL_12_Capacity");
			ДобавитьЗаписьВФайл(ЗаписьXML, "legalCapacityDate", киФорматДатыxML(Дееспособность.ДатаРешенияСуда));
			ДобавитьЗаписьВФайл(ЗаписьXML, "legalCapacityDecisionNum", Дееспособность.НомерРешенияСуда);
			ДобавитьЗаписьВФайл(ЗаписьXML, "legalCapacityCourtName", Дееспособность.Суд.Наименование, Истина);	
			ЗаписьXML.ЗаписатьКонецЭлемента();	
			ЗаписьXML.ЗаписатьКонецЭлемента();	
		Иначе    
			ЗаписьXML.ЗаписатьНачалоЭлемента("FL_12_Capacity");
			ДобавитьЗаписьВФайл(ЗаписьXML, "code", КодДееспособности);  
			ЗаписьXML.ЗаписатьНачалоЭлемента("Incapacity_group_FL_12_Capacity");
			ДобавитьЗаписьВФайл(ЗаписьXML, "incapacityDate", киФорматДатыxML(Дееспособность.ДатаРешенияСуда));
			ДобавитьЗаписьВФайл(ЗаписьXML, "incapacityDecisionNum", Дееспособность.НомерРешенияСуда);
			ДобавитьЗаписьВФайл(ЗаписьXML, "incapacityCourtName", Дееспособность.Суд.Наименование, Истина);
			ЗаписьXML.ЗаписатьКонецЭлемента();	
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры    

&НаСервере 
Процедура FL_13_Bankruptcy(ЗаписьXML, Запись, ДопПараметры = Неопределено) Экспорт  
	
	Если Не ЗначениеЗаполнено(Запись.ВнесудебноеБанкротство) Тогда	
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_13_Bankruptcy");	
		ДобавитьЗаписьВФайл(ЗаписьXML, "bankruptcyFact_0", ЛОЖЬ);	
		ЗаписьXML.ЗаписатьКонецЭлемента();	
	Иначе		
		СформироватьВнесудебноеБанкротствоДолжника(ЗаписьXML, Запись);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура FL_14_BankruptcyEnd(ЗаписьXML, Запись, ДопПараметры = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Запись.ВнесудебноеБанкротство) Тогда	
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_14_BankruptcyEnd");	
		ДобавитьЗаписьВФайл(ЗаписьXML, "bankruptcyEndFact_0", ЛОЖЬ);	
		ЗаписьXML.ЗаписатьКонецЭлемента();	
	Иначе		
		СформироватьОкончаниеВнесудебноеБанкротствоДолжника(ЗаписьXML, Запись); 
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура FL_17_DealUid(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	ЕстьСвойствоЛитеры = ДопПараметры.Свойство("ЛитераR");
	ИмяБлока = ?(ЕстьСвойствоЛитеры, "FL_17_DealUid_R", "FL_17_DealUid");  
	
	Если Не ЗначениеЗаполнено(Запись.UID) Тогда
		ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, ДопПараметры.Настройка, "C17_UID", "Сделка"); 
		ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяБлока);	
		Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл
			Если Значение.НомерПоказателя = "C17.1" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "uid", Значение.Значение);
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "C17.2" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "num", Значение.Значение); 
				Продолжить;
			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "C17.3" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "refUid", Значение.Значение);
				Продолжить;
			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "C17.4" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "openDate", киФорматДатыXML(Значение.Значение)); 
				Продолжить;
			КонецЕсли; 
		КонецЦикла;	
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяБлока);	
		ДобавитьЗаписьВФайл(ЗаписьXML, "uid", Запись.UID);
		ДобавитьЗаписьВФайл(ЗаписьXML, "num", ?(ЗначениеЗаполнено(Запись.UID), "", Запись.Сделка.Наименование));
		ДобавитьЗаписьВФайл(ЗаписьXML, "refUid", Запись.UIDРефинансированнойсделки);
		ДобавитьЗаписьВФайл(ЗаписьXML, "openDate", киФорматДатыXML(Запись.ДатаНачалаСделки));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура FL_18_Deal(ЗаписьXML, Запись, ДопПараметры = Неопределено) 
	
	ТипОтношенияКСчету = "1";
	Если ТипЗнч(Запись.ДокументСобытие) = Тип("ДокументСсылка.ПоступлениеПлатежа") Тогда 
		Если Запись.ДокументСобытие.ВидПлательщика = Перечисления.ВидыПлательщика.Поручитель Тогда
			ТипОтношенияКСчету = "2";
			ДопПараметры.Поручитель =  ТипОтношенияКСчету; 
		ИначеЕсли Запись.ДокументСобытие.ВидПлательщика = Перечисления.ВидыПлательщика.Наследник Тогда
			ТипОтношенияКСчету = "99";  
			ДопПараметры.Наследник =  ТипОтношенияКСчету;
		Иначе
			ТипОтношенияКСчету = "1";
		КонецЕсли;
	КонецЕсли;
	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_18_Deal");
	ДобавитьЗаписьВФайл(ЗаписьXML, "role", ТипОтношенияКСчету); //1
	ДобавитьЗаписьВФайл(ЗаписьXML, "code", Запись.КодНБКИТипКредита);//3
	ДобавитьЗаписьВФайл(ЗаписьXML, "kindCode", Запись.КодНБКИВидКредита); //4
	ДобавитьЗаписьВФайл(ЗаписьXML, "purposeCode", Запись.КодНБКИЦельКредита); //5 
	

	Если Запись.ПризнакПотребительскогоКредита = "0" ИЛИ НЕ ЗначениеЗаполнено(Запись.ПризнакПотребительскогоКредита) Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "consumerExist_0", Ложь); //6
	КонецЕсли;	
	Если Запись.ПризнакПотребительскогоКредита = "1" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "consumerExist_1", Истина);
	КонецЕсли;
	
	Если Запись.ПризнакПлатежнойКарты = "0" ИЛИ НЕ ЗначениеЗаполнено(Запись.ПризнакПлатежнойКарты) Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "cardExist_0", Ложь); //7
	КонецЕсли;	
	Если Запись.ПризнакПлатежнойКарты = "1" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "cardExist_1", Истина);
	КонецЕсли;
	
	ДобавитьЗаписьВФайл(ЗаписьXML, "novationExist_0", Ложь); //8
	
	Если НЕ ЗначениеЗаполнено(Запись.НеденежноеОбязательство) Тогда //9 10
		ДобавитьЗаписьВФайл(ЗаписьXML, "monetarySourceExist_1", Истина);
		ДобавитьЗаписьВФайл(ЗаписьXML, "monetarySubjectExist_1", Истина);	
	Иначе 
		ДобавитьЗаписьВФайл(ЗаписьXML, "monetarySourceExist_0", Ложь);
		ДобавитьЗаписьВФайл(ЗаписьXML, "monetarySubjectExist_0", Ложь);
	КонецЕсли;
	
	ЗначениеИсточникКод = ?(ЗначениеЗаполнено(ДопПараметры.Настройка.КодИсточника.КодНБКИ), ДопПараметры.Настройка.КодИсточника.КодНБКИ, "17");
	ЗначениеИсточникКод = Число(ЗначениеИсточникКод);
	
	ДобавитьЗаписьВФайл(ЗаписьXML, "endDate", киФорматДатыXML(Запись.ДатаОкончанияСделки)); //11  
	Если ЗначениеИсточникКод < 7 Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "creditorCode", Строка(Запись.ВидЗаимодавца)); //12  
	КонецЕсли;
	
	Если Запись.ЧастичноеПравопреемство = "0"  ИЛИ НЕ ЗначениеЗаполнено(Запись.ЧастичноеПравопреемство) Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "partialExist_0", Ложь); //13
	КонецЕсли;	
	Если Запись.ЧастичноеПравопреемство = "1" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "partialExist_1", Ложь);	
	КонецЕсли;
	//Если Запись.ЧастичнаяПродажа = "1" Тогда
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "partialExist_1", Запись.transferUid); //18	
	//КонецЕсли; 
	
	Если Запись.ПризнакКредитнойЛинии = "0" ИЛИ НЕ ЗначениеЗаполнено(Запись.ПризнакКредитнойЛинии) Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "creditLineExist_0", Ложь);//14
	КонецЕсли;	
	Если Запись.ПризнакКредитнойЛинии = "1" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "creditLineExist_1", Истина);
		ДобавитьЗаписьВФайл(ЗаписьXML, "creditLineCode", Запись.КодНБКИТипКредититнойЛинии); //15
	КонецЕсли; 
	
	Если Запись.ПризнакПлавающейПроцентнойСтавки = "0" ИЛИ НЕ ЗначениеЗаполнено(Запись.ПризнакПлавающейПроцентнойСтавки) Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "floatRateExist_0", Ложь);//16
	КонецЕсли;	
	Если Запись.ПризнакПлавающейПроцентнойСтавки = "1" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "floatRateExist_1", Истина);
	КонецЕсли;
	
	Если Запись.ЧастичнаяПродажа = "1" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "partialTransferExist_1", Истина);//17
		ДобавитьЗаписьВФайл(ЗаписьXML, "transferUid", Запись.UID); //18	
	КонецЕсли;
	Если Запись.ЧастичнаяПродажа = "0" ИЛИ НЕ ЗначениеЗаполнено(Запись.ЧастичнаяПродажа) Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "partialTransferExist_0", Ложь);//17
	КонецЕсли; 
	
	ДобавитьЗаписьВФайл(ЗаписьXML, "startDate", киФорматДатыXML(Запись.ДатаВозникновенияОбязательстваСубъекта));  //19
	
	Если Запись.ПризнакПредусмотренногоГрафика = "0" ИЛИ НЕ ЗначениеЗаполнено(Запись.ПризнакПредусмотренногоГрафика) Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "repaymentFact_0", Ложь);//20
	КонецЕсли;   
	
	Если Запись.ПризнакПредусмотренногоГрафика = "1" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "repaymentFact_1", Истина);//
	КонецЕсли;  
	
	Если ТипЗнч(ДопПараметры.Наследник) = Тип("СправочникСсылка.Контрагенты") Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "transferFact_1", Истина);//21
	Иначе
		ДобавитьЗаписьВФайл(ЗаписьXML, "transferFact_0", Ложь);//21
	КонецЕсли;  
	ДобавитьЗаписьВФайл(ЗаписьXML, "partnerFinancingFact_0", Ложь);
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

&НаСервере
Процедура FL_19_Amount(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Запись.СуммаСделки) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_19_Amount");
	ДобавитьЗаписьВФайл(ЗаписьXML, "sum", киФорматЧисла2(Запись.СуммаСделки));
	ДобавитьЗаписьВФайл(ЗаписьXML, "currency", Запись.Сделка.ВалютаДоговора.Наименование, ИСТИНА);
	ДобавитьЗаписьВФайл(ЗаписьXML, "calcDate", киФорматДатыXML(Запись.ДатаСобытия));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервере
Процедура FL_19_1_AmountInfo(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_19_1_AmountInfo");
	
	Если ДопПараметры.ПризнакОбеспечиваемогоОбязательства = Ложь Тогда
		Если ДопПараметры.Настройка.ПоУмолчаниюОбеспечение Тогда
			 ДобавитьЗаписьВФайл(ЗаписьXML, "securityFact_0", Ложь);
		Иначе	
			Записи19блока = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, ДопПараметры.Настройка, "C19.1.", "Сделка");
			Для Каждого Значение ИЗ Записи19блока Цикл
				Если Значение.НомерПоказателя = "C19.1.1" Тогда 
					Если КредитныеИстории.ОбработатьЗначенияПризнаков(Значение.Значение) = "0" Тогда
						ДобавитьЗаписьВФайл(ЗаписьXML, "securityFact_0", Ложь);
						Прервать;
					ИначеЕсли КредитныеИстории.ОбработатьЗначенияПризнаков(Значение.Значение) = "1" Тогда
						ДобавитьЗаписьВФайл(ЗаписьXML, "securityFact_1", Истина);
						Продолжить; 
					КонецЕсли;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "C19.1.2" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "securitySum", киФорматЧисла2(Значение.Значение)); 
					Продолжить;
				КонецЕсли;  
				
				Если Значение.НомерПоказателя = "C19.1.3" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "securityCurrency", Значение.Значение, ИСТИНА);
					Продолжить;
				КонецЕсли;  
				
				Если Значение.НомерПоказателя = "C19.1.4" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "securityTypeCode", Значение.Значение); 
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "C19.1.5" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "calcDate", киФорматДатыXML(Значение.Значение)); 
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "C19.1.6" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "securityUid", Значение.Значение); 
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "C19.1.7" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "liabilityLimit", киФорматЧисла2(Значение.Значение)); 
					Продолжить;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДопПараметры.ПризнакОбеспечиваемогоОбязательства) = Тип("ДокументСсылка.ПризнакОбеспечиваемогоОбязательства") Тогда
		
		ДокументПризнак = ДопПараметры.ПризнакОбеспечиваемогоОбязательства; 		
		ДобавитьЗаписьВФайл(ЗаписьXML, "securityFact_1", Истина);
		ДобавитьЗаписьВФайл(ЗаписьXML, "securitySum", киФорматЧисла2(ДокументПризнак.СуммаОбеспечиваемогоОбязательства));
		ДобавитьЗаписьВФайл(ЗаписьXML, "securityCurrency", ДокументПризнак.ВалютаОбеспечиваемогоОбязательства.Наименование, ИСТИНА);
		ДобавитьЗаписьВФайл(ЗаписьXML, "securityTypeCode", ДокументПризнак.КодТипаОбеспечиваемогоОбязательства);
		ДобавитьЗаписьВФайл(ЗаписьXML, "calcDate", киФорматДатыXML(ДокументПризнак.ДатаРасчета));
		ДобавитьЗаписьВФайл(ЗаписьXML, "securityUid", ДокументПризнак.УИДОсновнойСделки);
		ДобавитьЗаписьВФайл(ЗаписьXML, "liabilityLimit", Формат(ДокументПризнак.ЛимитОтветственности, "ЧЦ=12; ЧН=; ЧГ="));
	Иначе
		ДобавитьЗаписьВФайл(ЗаписьXML, "securityFact_0", Ложь);
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервере
Процедура FL_20_JointDebtors(ЗаписьXML, Запись, ДопПараметры = Неопределено) 
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_20_JointDebtors");
	
	Если Запись.СолидарныйДоговор = "1" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "exist_0", Ложь);  
	ИначеЕсли Запись.СолидарныйДоговор = "0" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "exist_0", Ложь);
	Иначе
		ДобавитьЗаписьВФайл(ЗаписьXML, "exist_1", Истина); 
		ДобавитьЗаписьВФайл(ЗаписьXML, "num", Запись.СолидарныйДоговор);
	КонецЕсли;		
	ЗаписьXML.ЗаписатьКонецЭлемента();	
	
КонецПроцедуры

&НаСервере
Процедура FL_21_PaymentTerms(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_21_PaymentTerms");
	Если ЗначениеЗаполнено(Запись.ДоговорМКЗ) ИЛИ ЗначениеЗаполнено(Запись.РеструктуризацияМКЗ) Тогда
		СформироватьСведенияоГрафикеПлатежейXML(ЗаписьXML, ?(ЗначениеЗаполнено(Запись.РеструктуризацияМКЗ), Запись.РеструктуризацияМКЗ, Запись.ДоговорМКЗ), Запись.ПризнакПлатежнойКарты, Запись.ДатаСобытия); 		
	Иначе
		Если ДопПараметры.Настройка.ДействующиеДоговоры Тогда
			ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, ДопПараметры.Настройка, "C21_PAYMTCONDITION", "Сделка"); 	
			Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл
				Если Значение.НомерПоказателя = "C21.1" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "mainPaySum", киФорматЧисла2(Значение.Значение));
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "C21.2" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "mainPayDate", киФорматДатыXML(Значение.Значение)); 
					Продолжить;
				КонецЕсли;  
				
				Если Значение.НомерПоказателя = "C21.3" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "percentPaySum", киФорматЧисла2(Значение.Значение));
					Продолжить;
				КонецЕсли;  
				
				Если Значение.НомерПоказателя = "C21.4" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "percentPayDate", киФорматДатыXML(Значение.Значение)); 
					Продолжить;
				КонецЕсли;  
				
				Если Значение.НомерПоказателя = "C21.5" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "freqCode", Значение.Значение); 
					Продолжить;
				КонецЕсли;  
				
				Если Значение.НомерПоказателя = "C21.6" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "minCardPay", киФорматЧисла2(Значение.Значение)); 
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "C21.7" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "graceDate", киФорматДатыXML(Значение.Значение)); 
					Продолжить;
				КонецЕсли;   
				
				Если Значение.НомерПоказателя = "C21.8" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "graceEndDate", киФорматДатыXML(Значение.Значение)); 
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "C21.9" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "percentEndDate", киФорматДатыXML(Значение.Значение)); 
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			 ДобавитьЗаписьВФайл(ЗаписьXML, "mainPaySum", киФорматЧисла2(0));
			 ДобавитьЗаписьВФайл(ЗаписьXML, "percentPaySum", киФорматЧисла2(0));

		КонецЕсли;
	КонецЕсли;	
	ЗаписьXML.ЗаписатьКонецЭлемента();  
	
КонецПроцедуры  

&НаСервере
Процедура СформироватьСведенияоГрафикеПлатежейXML(ЗаписьXML, ДокМКЗ, ЭтоКредитнаяКарта, зДатаСобытия) Экспорт
	
	ПлановыеПлатежи = ДокМКЗ.ГрафикПлатежей;
	НужноЗаполнятьОтчет = Ложь;
	Если ПлановыеПлатежи <> Неопределено Тогда
		Для каждого Платеж из ПлановыеПлатежи Цикл
			Если Платеж.Дата >= зДатаСобытия И Платеж.СуммаПлатежа <> 0 Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "mainPaySum", киФорматЧисла2(Платеж.ОплатаОсновнойДолг));
				ДобавитьЗаписьВФайл(ЗаписьXML, "mainPayDate", киФорматДатыXML(Платеж.Дата));
				ДобавитьЗаписьВФайл(ЗаписьXML, "percentPaySum", киФорматЧисла2(Платеж.ОплатаПроценты));
				ДобавитьЗаписьВФайл(ЗаписьXML, "percentPayDate", киФорматДатыXML(Платеж.Дата));
				КодЧастотыПлатежей = КредитныеИстории.ВернутьКодЧастотыПлатежейНБКИ(ДокМКЗ);
				КодЧастотыПлатежей = ?(ЗначениеЗаполнено(КодЧастотыПлатежей), КодЧастотыПлатежей, "99");
				ДобавитьЗаписьВФайл(ЗаписьXML, "freqCode", КодЧастотыПлатежей);	
				НужноЗаполнятьОтчет = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НужноЗаполнятьОтчет Тогда
			МинимальныйПлатеж = ?(ЭтоКредитнаяКарта = Истина, Строка(Платеж.СуммаПлатежа), 0);
			нДатаБеспроцентныйПериод = "";
			кДатаБеспроцентныйПериод = "";
			КредитныеИстории.ЗаполнитьДатыБеспроцентонгоПериода(ДокМКЗ, нДатаБеспроцентныйПериод, кДатаБеспроцентныйПериод); 
			
			ДобавитьЗаписьВФайл(ЗаписьXML, "minCardPay", киФорматЧисла2(МинимальныйПлатеж));
			ДобавитьЗаписьВФайл(ЗаписьXML, "graceDate", киФорматДатыXML(нДатаБеспроцентныйПериод));
			ДобавитьЗаписьВФайл(ЗаписьXML, "graceEndDate", киФорматДатыXML(кДатаБеспроцентныйПериод));
			ДобавитьЗаписьВФайл(ЗаписьXML, "percentEndDate", киФорматДатыXML(ДокМКЗ.ДатаПогашения));  
			
		Иначе  
			ДобавитьЗаписьВФайл(ЗаписьXML, "mainPaySum", киФорматЧисла2(0));
			ДобавитьЗаписьВФайл(ЗаписьXML, "percentPaySum", киФорматЧисла2(0));	
		КонецЕсли;	
	Иначе
		ДобавитьЗаписьВФайл(ЗаписьXML, "mainPaySum", киФорматЧисла2(0));
		ДобавитьЗаписьВФайл(ЗаписьXML, "percentPaySum", киФорматЧисла2(0));	
	КонецЕсли; 
	
КонецПроцедуры    

&НаСервере
Процедура FL_22_TotalCost(ЗаписьXML, Запись, ДопПараметры = Неопределено)   
		
	Если ДопПараметры.ЗаписьПСК = Неопределено Тогда
		ДопПараметры.ПСК = Запись.СуммаСделки;
		Возврат;
	КонецЕсли;
	
	Если Запись.ПризнакПотребительскогоКредита = "1" Тогда 
		ДопПараметры.ПСК = Запись.СуммаСделки;
	КонецЕсли;
	
	Если Запись.КодНБКИВидКредита = "7" Тогда
		ДопПараметры.ПСК = 0;	
	Иначе
		ДопПараметры.ПСК = Запись.СуммаСделки;		
	КонецЕсли;

		
	ЗаписьПСК = ДопПараметры.ЗаписьПСК;
	
	Если Не ЗначениеЗаполнено(ЗаписьПСК.ДатаРасчетаПСК) Тогда 
		Возврат;
	КонецЕсли;	         
	
	ПСКВПроцентахМИН = ?(НЕ ЗначениеЗаполнено(ЗаписьПСК.ПСКВПроцентахМИН), "-", ЗаписьПСК.ПСКВПроцентахМИН); 
	ПСКВДенежномВыраженииМИН = ?(НЕ ЗначениеЗаполнено(ЗаписьПСК.ПСКВДенежномВыраженииМИН), "-", ЗаписьПСК.ПСКВДенежномВыраженииМИН); 
	
	Если Не ЗначениеЗаполнено(ПСКВПроцентахМИН) Тогда
		ПСКВПроцентахМИН = ?((Запись.ДатаНачалаСделки >= Дата("20140701")), 0, ЛОЖЬ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПСКВДенежномВыраженииМИН) Тогда
		ПСКВДенежномВыраженииМИН = ?((Запись.ДатаНачалаСделки >= Дата("20180624")), 0, ЛОЖЬ);
	КонецЕсли;

	
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_22_TotalCost");
	ДобавитьЗаписьВФайл(ЗаписьXML, "minPercentCost", киФорматЧисла3(ПСКВПроцентахМИН));
	ДобавитьЗаписьВФайл(ЗаписьXML, "minCost", киФорматЧисла2(ПСКВДенежномВыраженииМИН));
	ДобавитьЗаписьВФайл(ЗаписьXML, "calcDate", киФорматДатыXML(ЗаписьПСК.ДатаРасчетаПСК));
	ДобавитьЗаписьВФайл(ЗаписьXML, "maxPercentCost", ?(ПСКВПроцентахМИН = "-", "-", киФорматЧисла3(ЗаписьПСК.ПСКВПроцентахМАКС))); 
	ДобавитьЗаписьВФайл(ЗаписьXML, "maxCost", ?(ПСКВДенежномВыраженииМИН = "-", "-", киФорматЧисла2(ЗаписьПСК.ПСКВДенежномВыраженииМАКС)));
	
	Если ПСКВПроцентахМИН <> "-" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "maxPercentCash", киФорматЧисла3(ЗаписьПСК.ПСКВПроцентахМАКСНал));
		ДобавитьЗаписьВФайл(ЗаписьXML, "maxPercentCashless", киФорматЧисла3(ЗаписьПСК.ПСКВПроцентахМАКСБезнал));
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();  
	
КонецПроцедуры

&НаСервере
Процедура СформироватьИзмененияСделокФЛ(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	Если ТипЗнч(Запись.ДокументСобытие) = Тип("ДокументСсылка.СведенияОбИзмененииДоговора") Тогда  
		Если Запись.ДокументСобытие.ТипИзменения = Перечисления.НБКИ_ТипыИзмененияДоговора.ПредусмотреныИсходнымиУсловиями Тогда 
			ЗаписьXML.ЗаписатьНачалоЭлемента("FL_23_ContractChanges");
			
			ДобавитьЗаписьВФайл(ЗаписьXML, "exist_0", ЛОЖЬ);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			FL_23_1_ContractTermsChanges(ЗаписьXML, Запись, ДопПараметры);  
		Иначе 
			FL_23_ContractChanges(ЗаписьXML, Запись, ДопПараметры); 
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("FL_23_1_ContractTermsChanges");	
			ДобавитьЗаписьВФайл(ЗаписьXML, "changeFact_0", ЛОЖЬ);	
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	Иначе 
		FL_23_ContractChanges(ЗаписьXML, Запись, ДопПараметры); 
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_23_1_ContractTermsChanges");	
		ДобавитьЗаписьВФайл(ЗаписьXML, "changeFact_0", ЛОЖЬ);	
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
КонецПроцедуры 


&НаСервере
Процедура FL_23_ContractChanges(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_23_ContractChanges");
	ДобавитьЗаписьВФайл(ЗаписьXML, "exist_1", Истина);	
	
	Настройка = ДопПараметры.Настройка;
	Заполнено = Ложь;
	Если ЗначениеЗаполнено(Запись.РеструктуризацияМКЗ) Тогда
		СформироватьБлок23_15МКЗ(ЗаписьXML, Запись.РеструктуризацияМКЗ);
		Заполнено = Истина;
	ИначеЕсли ТипЗнч(Запись.ДокументСобытие) = Тип("ДокументСсылка.СведенияОбИзмененииДоговора") И НЕ Заполнено Тогда 
		СформироватьБлок23_15Изм(ЗаписьXML, Запись.ДокументСобытие); 
		Заполнено = Истина;
	ИначеЕсли ЗначениеЗаполнено(Запись.НеденежноеОбязательство) И НЕ Заполнено Тогда 	 
		СформироватьБлок23_15НО(ЗаписьXML, Запись.НеденежноеОбязательство);
	Иначе
		ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, ДопПараметры.Настройка, "C23_AMENDMENT", "Сделка"); 	
		Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл
			Если Значение.НомерПоказателя = "C23.2" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "changeDate", киФорматДатыXML(Значение.Значение));
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "C23.3" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "code", Значение.Значение); 
				Продолжить;
			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "C23.4" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "specialCode", Значение.Значение);
				Продолжить;
			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "C23.5" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "otherDesc", Значение.Значение); 
				Продолжить;
			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "C23.6" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "startDate", киФорматДатыXML(Значение.Значение)); 
				Продолжить;
			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "C23.7" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "endDate", киФорматДатыXML(Значение.Значение)); 
				Продолжить;
			КонецЕсли;   
			
			Если Значение.НомерПоказателя = "C23.8" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "actualEndDate", киФорматДатыXML(Значение.Значение)); 
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "C23.9" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "endCode", Значение.Значение); 
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "C23.10" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "currencyRate", Значение.Значение); 
				Продолжить;
			КонецЕсли;  
		КонецЦикла;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры 

&НаСервере
Процедура СформироватьБлок23_15МКЗ(ЗаписьXML, Микрозайм)
	
	ДобавитьЗаписьВФайл(ЗаписьXML, "changeDate", киФорматДатыXML(Микрозайм.ДатаРеструктуризации));
	ДобавитьЗаписьВФайл(ЗаписьXML, "code", "3");
	ДобавитьЗаписьВФайл(ЗаписьXML, "specialCode", "99");
	ДобавитьЗаписьВФайл(ЗаписьXML, "otherDesc", "Реструктуризация");
	ДобавитьЗаписьВФайл(ЗаписьXML, "startDate", киФорматДатыXML(Микрозайм.ДатаРеструктуризации));
	ДобавитьЗаписьВФайл(ЗаписьXML, "endDate", киФорматДатыXML(Микрозайм.ДатаПогашения));
	ДобавитьЗаписьВФайл(ЗаписьXML, "actualEndDate", "");
	ДобавитьЗаписьВФайл(ЗаписьXML, "endCode", "");
	ДобавитьЗаписьВФайл(ЗаписьXML, "currencyRate", "");
	
	
КонецПроцедуры   


&НаСервере
Процедура СформироватьБлок23_15Изм(ЗаписьXML, Изменение)  
		
	КодСпециальногоИзмененияДоговора = КредитныеИстории.ВернутьКодСпециальногоИзменения(Изменение.ВидИзменияДоговора);	
	ДатаПлановогоПрекращенияИзменения = ?(ЗначениеЗаполнено(Изменение.ДатаПлановогоПрекращенияИзменения), Изменение.ДатаПлановогоПрекращенияИзменения, Изменение.ДатаФактическогоПрекращенияИзменения);
	
	ДобавитьЗаписьВФайл(ЗаписьXML, "changeDate", киФорматДатыXML(Изменение.ДатаИзмененияДоговора));
	ДобавитьЗаписьВФайл(ЗаписьXML, "code", Строка(Изменение.ВидИзменияДоговора));
	ДобавитьЗаписьВФайл(ЗаписьXML, "specialCode", ?(ЗначениеЗаполнено(КодСпециальногоИзмененияДоговора), Изменение[КодСпециальногоИзмененияДоговора], "99"));
	ДобавитьЗаписьВФайл(ЗаписьXML, "otherDesc", Изменение.ОписаниеИныхИзменений, ИСТИНА);
	ДобавитьЗаписьВФайл(ЗаписьXML, "startDate", киФорматДатыXML(Изменение.ДатаВступленияИзменения));
	ДобавитьЗаписьВФайл(ЗаписьXML, "endDate", киФорматДатыXML(ДатаПлановогоПрекращенияИзменения));
	ДобавитьЗаписьВФайл(ЗаписьXML, "actualEndDate", киФорматДатыXML(Изменение.ДатаФактическогоПрекращенияИзменения)); 
	ПричинаПрекращения = ?(Изменение.ПричиныПрекращенияДействийИзмененияДоговора = 0, "", Строка(Изменение.ПричиныПрекращенияДействийИзмененияДоговора));
	ДобавитьЗаписьВФайл(ЗаписьXML, "endCode", ПричинаПрекращения);
	ДобавитьЗаписьВФайл(ЗаписьXML, "currencyRate", "");
	
КонецПроцедуры  

&НаСервере
Процедура СформироватьБлок23_15НО(ЗаписьXML, НеденежноеОбязательство)
	
	//Дописать позже для неденежного 
	
	Заглушка = "";
	
	ДобавитьЗаписьВФайл(ЗаписьXML, "changeDate", киФорматДатыXML(НеденежноеОбязательство.ДатаВыдачиЗайма));
	ДобавитьЗаписьВФайл(ЗаписьXML, "code", "5");
	ДобавитьЗаписьВФайл(ЗаписьXML, "specialCode", Заглушка);
	ДобавитьЗаписьВФайл(ЗаписьXML, "otherDesc", Заглушка);
	ДобавитьЗаписьВФайл(ЗаписьXML, "startDate", Заглушка);
	ДобавитьЗаписьВФайл(ЗаписьXML, "endDate", Заглушка);
	ДобавитьЗаписьВФайл(ЗаписьXML, "actualEndDate", Заглушка); 
	ДобавитьЗаписьВФайл(ЗаписьXML, "endCode", Заглушка);
	ДобавитьЗаписьВФайл(ЗаписьXML, "currencyRate", Заглушка);
	
КонецПроцедуры 


&НаСервере
Процедура FL_23_1_ContractTermsChanges(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_23_1_ContractTermsChanges");	
	ДобавитьЗаписьВФайл(ЗаписьXML, "changeFact_1", Истина);
	
	Настройка = ДопПараметры.Настройка;
	Если ТипЗнч(Запись.ДокументСобытие) = Тип("ДокументСсылка.СведенияОбИзмененииДоговора") Тогда 
		СформироватьБлок23_1_15_1Изм(ЗаписьXML, Запись.ДокументСобытие); 
	Иначе
		ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, ДопПараметры.Настройка, "C23.1_", "Сделка"); 	
		Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл
			Если Значение.НомерПоказателя = "C23.1.2" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "termsChangeCode", Значение.Значение);
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "C23.1.3" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "termsChangeDesc", Значение.Значение); 
				Продолжить;
			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "C23.1.4" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML,"changingDate", киФорматДатыXML(Значение.Значение));
				Продолжить;
			КонецЕсли;  
			
		КонецЦикла;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	
КонецПроцедуры   

&НаСервере
Процедура СформироватьБлок23_1_15_1Изм(ЗаписьXML, Изменение)   
	
	КодСпециальногоИзмененияДоговора = КредитныеИстории.ВернутьКодСпециальногоИзменения(Изменение.ВидИзменияДоговора);
	КодСпециальногоИзмененияДоговора = ?(ЗначениеЗаполнено(КодСпециальногоИзмененияДоговора), КодСпециальногоИзмененияДоговора, "99");
	
	ДобавитьЗаписьВФайл(ЗаписьXML, "termsChangeCode", Изменение[КодСпециальногоИзмененияДоговора]);
	ДобавитьЗаписьВФайл(ЗаписьXML, "termsChangeDesc", Изменение.ОписаниеИныхИзменений);
	ДобавитьЗаписьВФайл(ЗаписьXML, "changingDate", киФорматДатыXML(Изменение.ДатаВступленияИзменения));
	ДобавитьЗаписьВФайл(ЗаписьXML, "endDate", киФорматДатыXML(Изменение.ДатаПлановогоПрекращенияИзменения));		
КонецПроцедуры 

&НаСервере
Процедура FL_24_Fund(ЗаписьXML, Запись, ДопПараметры = Неопределено) 
	
	стартСум  = ?(ДопПараметры.ПСК = 0, Запись.СуммаСделки, ДопПараметры.ПСК);
	
	Если Запись.КодНБКИВидКредита = "7" Тогда
		стартСум = 0;	
	КонецЕсли; 
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_24_Fund");	
	ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(Запись.ДатаПередачиФинансирования));
	ДобавитьЗаписьВФайл(ЗаписьXML, "num", Запись.ПорядковыйНомерТранша);
	ДобавитьЗаписьВФайл(ЗаписьXML, "startSum", киФорматЧисла2(стартСум));
	ЗаписьXML.ЗаписатьКонецЭлемента(); 
	
КонецПроцедуры

&НаСервере
Процедура FL_25_Debt(ЗаписьXML, Запись, ЗаписьСостояниеЗадолженности, ДопПараметры = Неопределено)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_25_Debt");
	Если НЕ ДопПараметры.ЕстьЗадолженность Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "exist_0", Ложь);
	Иначе
		ДобавитьЗаписьВФайл(ЗаписьXML, "exist_1", Истина);
		ДобавитьЗаписьВФайл(ЗаписьXML, "debtSum", киФорматЧисла2(ЗаписьСостояниеЗадолженности.СуммаДООстаток));
		ДобавитьЗаписьВФайл(ЗаписьXML, "debtMainSum", киФорматЧисла2(ЗаписьСостояниеЗадолженности.ОсновнойДолгДО));
		ДобавитьЗаписьВФайл(ЗаписьXML, "debtPercentSum", киФорматЧисла2(ЗаписьСостояниеЗадолженности.ПроцентыДО));
		ДобавитьЗаписьВФайл(ЗаписьXML, "debtOtherSum", киФорматЧисла2(ЗаписьСостояниеЗадолженности.Иное));
	КонецЕсли;	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервере
Процедура FL_26_DebtDue(ЗаписьXML, Запись, ЗаписьСостояниеЗадолженности, ДопПараметры = Неопределено) 
	
	
	Если ДопПараметры.ЕстьЗадолженность Тогда 
		//Проверка на просрочку 
		Если ЗначениеЗаполнено(Запись.ДатаВыходаНаПросрочку) Тогда
			ЕстьСрочнаяЗадолженность = (Запись.ДатаВыходаНаПросрочку > Запись.ДатаСобытия); 
		Иначе
			ЕстьСрочнаяЗадолженность = Ложь;
		КонецЕсли;	
	Иначе
		ЕстьСрочнаяЗадолженность = Ложь;
	КонецЕсли;
	
	ДатаОбразованияСрочнойЗадолженности = ?(ЗначениеЗаполнено(Запись.ДатаРасчетаСрочнойЗадолженности), Запись.ДатаРасчетаСрочнойЗадолженности, Запись.ДатаОкончанияСделки);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_26_DebtDue");
	Если НЕ ЕстьСрочнаяЗадолженность Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML,  "debtDueSum", киФорматЧисла2(0));
	Иначе
		ДобавитьЗаписьВФайл(ЗаписьXML, "debtDueSum", киФорматЧисла2(ЗаписьСостояниеЗадолженности.СуммаДООстаток));
		ДобавитьЗаписьВФайл(ЗаписьXML, "debtDueMainSum", киФорматЧисла2(ЗаписьСостояниеЗадолженности.ОсновнойДолгДО));
		ДобавитьЗаписьВФайл(ЗаписьXML, "debtDuePercentSum", киФорматЧисла2(ЗаписьСостояниеЗадолженности.ПроцентыДО));
		ДобавитьЗаписьВФайл(ЗаписьXML, "debtDueOtherSum", киФорматЧисла2(ЗаписьСостояниеЗадолженности.Иное));
		ДобавитьЗаписьВФайл(ЗаписьXML, "debtDueStartDate", киФорматДатыXML(ДатаОбразованияСрочнойЗадолженности));
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();	
	
КонецПроцедуры

&НаСервере                                                              
Процедура FL_27_DebtOverdue(ЗаписьXML, Запись, ЗаписьСостояниеЗадолженности, ДопПараметры = Неопределено) 
	 
	
	//Проверка на просрочку  
	ЕстьПросроченнаяЗадолженность = ЗначениеЗаполнено(Запись.ДатаВыходаНаПросрочку) И (Запись.ДатаВыходаНаПросрочку < Запись.ДатаСобытия);
	//Если ДопПараметры.ЕстьЗадолженность Тогда
	//	 
	//Иначе	
	//	ЕстьПросроченнаяЗадолженность = Ложь; 
	//КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_27_DebtOverdue"); 
	
	Если ЗначениеЗаполнено(Запись.ДатаВыходаНаПросрочку) Тогда
		ДниПросрочки = Окр((НачалоДня(Запись.ДатаСобытия) - НачалоДня(Запись.ДатаВыходаНаПросрочку)) / 86400); 
	Иначе
		ДниПросрочки = "0";
	КонецЕсли;
	
	ПродолжительностьПоследнейПросрочки = ?(ЗаписьСостояниеЗадолженности = 0, ДниПросрочки, "0");

	//ДниПросрочки = ?(Запись.СобытиеКодНБКИ <> "2.5", ДниПросрочки, "0"); 
	ДниПросрочки = ?(ЗаписьСостояниеЗадолженности = 0, "0", ДниПросрочки);
	
	ДатаВозникновенияПросроченнойЗадолженности = Запись.ДатаВыходаНаПросрочку;
	Если Запись.ДатаВыходаНаПросрочку > Запись.ДатаСобытия ИЛИ НЕ ЗначениеЗаполнено(Запись.ДатаВыходаНаПросрочку) Тогда
		ДатаВозникновенияПросроченнойЗадолженности = Дата(1,1,1);  
	КонецЕсли;	
	
	ДатаПросроченногоПлатежа = ?(Запись.ДатаОкончанияСделки > Запись.ДатаСобытия, ДатаВозникновенияПросроченнойЗадолженности, Запись.ДатаОкончанияСделки); 
		
	Если ЕстьПросроченнаяЗадолженность Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "missFact_1", Истина);
		ДобавитьЗаписьВФайл(ЗаписьXML, "debtOverdueSum", ?(ЗаписьСостояниеЗадолженности = 0, киФорматЧисла2(ЗаписьСостояниеЗадолженности), киФорматЧисла2(ЗаписьСостояниеЗадолженности.СуммаДООстаток)));
		ДобавитьЗаписьВФайл(ЗаписьXML, "debtOverdueMainSum", ?(ЗаписьСостояниеЗадолженности = 0, киФорматЧисла2(ЗаписьСостояниеЗадолженности), киФорматЧисла2(ЗаписьСостояниеЗадолженности.ОсновнойДолгДО)));
		ДобавитьЗаписьВФайл(ЗаписьXML, "debtOverduePercentSum", ?(ЗаписьСостояниеЗадолженности = 0, киФорматЧисла2(ЗаписьСостояниеЗадолженности), киФорматЧисла2(ЗаписьСостояниеЗадолженности.ПроцентыДО)));
		ДобавитьЗаписьВФайл(ЗаписьXML, "debtOverdueOtherSum", ?(ЗаписьСостояниеЗадолженности = 0, киФорматЧисла2(ЗаписьСостояниеЗадолженности), киФорматЧисла2(ЗаписьСостояниеЗадолженности.Иное)));
		ДобавитьЗаписьВФайл(ЗаписьXML, "debtOverdueStartDate", киФорматДатыXML(ДатаВозникновенияПросроченнойЗадолженности));
		ДобавитьЗаписьВФайл(ЗаписьXML, "mainMissDate", киФорматДатыXML(ДатаПросроченногоПлатежа));
		ДобавитьЗаписьВФайл(ЗаписьXML, "percentMissDate", киФорматДатыXML(ДатаПросроченногоПлатежа));
		ДобавитьЗаписьВФайл(ЗаписьXML, "missDuration", Формат(ДниПросрочки, "ЧГ=0"));
		ДобавитьЗаписьВФайл(ЗаписьXML, "repaidMissDuration", Формат(ПродолжительностьПоследнейПросрочки, "ЧГ=0"));
	Иначе
		ДобавитьЗаписьВФайл(ЗаписьXML, "missFact_0", Ложь);
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервере
Процедура FL_28_Payment(ЗаписьXML, Запись, ЗаписьСтрокиОплат, ДопПараметры = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Запись.СуммаСделки) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьЗадолженность = ДопПараметры.ЕстьЗадолженность; 
	ЭтоПлатежПоручителя = ДопПараметры.Поручитель;
	
	
	КодСобытия = Запись.СобытиеКодНБКИ; 
		
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_28_Payment"); 
	
	КодСоблюденияРазмераПлатежей = ?(ЕстьЗадолженность, "3", "1");
	КодСоблюденияСрокаПлатежей = ?(ЕстьЗадолженность, "3", "2");    
	
	ФормироватьНакопительныеПлатежи = Ложь;
	
	Если Запись.КодНБКИТипКредита = "1" ИЛИ  Запись.КодНБКИТипКредита = "5" Тогда
		ФормироватьНакопительныеПлатежи = Истина;
	КонецЕсли; 
	
	Заполнено = Истина;
	
	Если ЗаписьСтрокиОплат.Количество() = 0 ИЛИ КодСобытия = "2.5" Тогда		
		ДобавитьЗаписьВФайл(ЗаписьXML, "paymentSum", киФорматЧисла2(0));
		ДобавитьЗаписьВФайл(ЗаписьXML, "sizeCode", КодСоблюденияРазмераПлатежей);
		ДобавитьЗаписьВФайл(ЗаписьXML, "scheduleCode", КодСоблюденияСрокаПлатежей);
		Если ФормироватьНакопительныеПлатежи Тогда
			ДобавитьЗаписьВФайл(ЗаписьXML, "lastMissPaySum", киФорматЧисла2(0));
			ДобавитьЗаписьВФайл(ЗаписьXML, "paySum24", киФорматЧисла2(0)); 
		КонецЕсли;
	ИначеЕсли ЗаписьСтрокиОплат.Количество() = 1 Тогда  
		стрОплата = ЗаписьСтрокиОплат[0];
		
		Если стрОплата.ДатаПлатежа <= Запись.ДатаСобытия Тогда 
			Если Не ЗначениеЗаполнено(стрОплата.СуммаПоследнегоПлатежа) Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "paymentSum", киФорматЧисла2(стрОплата.СуммаПоследнегоПлатежа));
				ДобавитьЗаписьВФайл(ЗаписьXML, "sizeCode", КодСоблюденияРазмераПлатежей);
				ДобавитьЗаписьВФайл(ЗаписьXML, "scheduleCode", КодСоблюденияСрокаПлатежей);  
				Если ФормироватьНакопительныеПлатежи Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "lastMissPaySum", киФорматЧисла2(стрОплата.СуммаПоследнегоПлатежа30дн));
					ДобавитьЗаписьВФайл(ЗаписьXML, "paySum24", киФорматЧисла2(стрОплата.СуммаОплат24мес));   
				КонецЕсли;
			Иначе
				ДобавитьЗаписьВФайл(ЗаписьXML, "paymentSum", киФорматЧисла2(стрОплата.СуммаПоследнегоПлатежа));
				ДобавитьЗаписьВФайл(ЗаписьXML, "paymentMainSum", киФорматЧисла2(стрОплата.ОДПоследнегоПлатежа));
				ДобавитьЗаписьВФайл(ЗаписьXML, "paymentPercentSum", киФорматЧисла2(стрОплата.ПроцентыПоследнегоПлатежа));
				ДобавитьЗаписьВФайл(ЗаписьXML, "paymentOtherSum", киФорматЧисла2(стрОплата.ИноеПоследнегоПлатежа));
				ДобавитьЗаписьВФайл(ЗаписьXML, "totalSum", киФорматЧисла2(стрОплата.СуммаВсехОплат));
				ДобавитьЗаписьВФайл(ЗаписьXML, "totalMainSum", киФорматЧисла2(стрОплата.ОДВсехОплат));
				ДобавитьЗаписьВФайл(ЗаписьXML, "totalPercentSum", киФорматЧисла2(стрОплата.ПроцентыВсехОплат));
				ДобавитьЗаписьВФайл(ЗаписьXML, "totalOtherSum", киФорматЧисла2(стрОплата.ИноеВсехОплат));
				ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(стрОплата.ДатаПлатежа));
				ДобавитьЗаписьВФайл(ЗаписьXML, "sizeCode", КодСоблюденияРазмераПлатежей);
				ДобавитьЗаписьВФайл(ЗаписьXML, "scheduleCode", КодСоблюденияСрокаПлатежей); 
				Если ФормироватьНакопительныеПлатежи Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "lastMissPaySum", киФорматЧисла2(стрОплата.СуммаПоследнегоПлатежа30дн));
					ДобавитьЗаписьВФайл(ЗаписьXML, "paySum24", киФорматЧисла2(стрОплата.СуммаОплат24мес));   
				КонецЕсли;
			КонецЕсли;
			Заполнено = Истина;
		Иначе 
			Заполнено = Ложь; 
		КонецЕсли;
		
		Если Не Заполнено Тогда
			ДобавитьЗаписьВФайл(ЗаписьXML, "paymentSum", киФорматЧисла2(0));
			ДобавитьЗаписьВФайл(ЗаписьXML, "sizeCode", КодСоблюденияРазмераПлатежей);
			ДобавитьЗаписьВФайл(ЗаписьXML, "scheduleCode", КодСоблюденияСрокаПлатежей);
			Если ФормироватьНакопительныеПлатежи Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "lastMissPaySum", киФорматЧисла2(0));
				ДобавитьЗаписьВФайл(ЗаписьXML, "paySum24", киФорматЧисла2(0)); 
			КонецЕсли;
		КонецЕсли;
		
	Иначе  	
		Инверс = ЗаписьСтрокиОплат.Количество() - 1;  
		Заполнено = Ложь;
		Пока Инверс >= 0 Цикл
			стрОплата  = ЗаписьСтрокиОплат[Инверс]; 
			Если стрОплата.ДатаПлатежа <= Запись.ДатаСобытия Тогда 
				Если Не ЗначениеЗаполнено(стрОплата.СуммаПоследнегоПлатежа) Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "paymentSum", киФорматЧисла2(стрОплата.СуммаПоследнегоПлатежа));
					ДобавитьЗаписьВФайл(ЗаписьXML, "sizeCode", КодСоблюденияРазмераПлатежей);
					ДобавитьЗаписьВФайл(ЗаписьXML, "scheduleCode", КодСоблюденияСрокаПлатежей);  
					Если ФормироватьНакопительныеПлатежи Тогда
						ДобавитьЗаписьВФайл(ЗаписьXML, "lastMissPaySum", киФорматЧисла2(стрОплата.СуммаПоследнегоПлатежа30дн));
						ДобавитьЗаписьВФайл(ЗаписьXML, "paySum24", киФорматЧисла2(стрОплата.СуммаОплат24мес));   
					КонецЕсли;
				Иначе
					ДобавитьЗаписьВФайл(ЗаписьXML, "paymentSum", киФорматЧисла2(стрОплата.СуммаПоследнегоПлатежа));
					ДобавитьЗаписьВФайл(ЗаписьXML, "paymentMainSum", киФорматЧисла2(стрОплата.ОДПоследнегоПлатежа));
					ДобавитьЗаписьВФайл(ЗаписьXML, "paymentPercentSum", киФорматЧисла2(стрОплата.ПроцентыПоследнегоПлатежа));
					ДобавитьЗаписьВФайл(ЗаписьXML, "paymentOtherSum", киФорматЧисла2(стрОплата.ИноеПоследнегоПлатежа));
					ДобавитьЗаписьВФайл(ЗаписьXML, "totalSum", киФорматЧисла2(стрОплата.СуммаВсехОплат));
					ДобавитьЗаписьВФайл(ЗаписьXML, "totalMainSum", киФорматЧисла2(стрОплата.ОДВсехОплат));
					ДобавитьЗаписьВФайл(ЗаписьXML, "totalPercentSum", киФорматЧисла2(стрОплата.ПроцентыВсехОплат));
					ДобавитьЗаписьВФайл(ЗаписьXML, "totalOtherSum", киФорматЧисла2(стрОплата.ИноеВсехОплат));
					ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(стрОплата.ДатаПлатежа));
					ДобавитьЗаписьВФайл(ЗаписьXML, "sizeCode", КодСоблюденияРазмераПлатежей);
					ДобавитьЗаписьВФайл(ЗаписьXML, "scheduleCode", КодСоблюденияСрокаПлатежей); 
					Если ФормироватьНакопительныеПлатежи Тогда
						ДобавитьЗаписьВФайл(ЗаписьXML, "lastMissPaySum", киФорматЧисла2(стрОплата.СуммаПоследнегоПлатежа30дн));
						ДобавитьЗаписьВФайл(ЗаписьXML, "paySum24", киФорматЧисла2(стрОплата.СуммаОплат24мес));   
					КонецЕсли;
				КонецЕсли;
				Заполнено = Истина;
				Прервать;
			Иначе 
				Инверс = Инверс - 1;
				Продолжить; 
			КонецЕсли;
			Инверс = Инверс - 1;	
		КонецЦикла; 
		
		Если Не Заполнено Тогда
			ДобавитьЗаписьВФайл(ЗаписьXML, "paymentSum", киФорматЧисла2(0));
			ДобавитьЗаписьВФайл(ЗаписьXML, "sizeCode", КодСоблюденияРазмераПлатежей);
			ДобавитьЗаписьВФайл(ЗаписьXML, "scheduleCode", КодСоблюденияСрокаПлатежей);
			Если ФормироватьНакопительныеПлатежи Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "lastMissPaySum", киФорматЧисла2(0));
				ДобавитьЗаписьВФайл(ЗаписьXML, "paySum24", киФорматЧисла2(0)); 
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры    

&НаСервере
Процедура FL_29_MonthlyPayment(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Запись.СуммаСделки) Тогда
		Возврат;
	КонецЕсли; 
		
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_29_MonthlyPayment");  
	
	Если ДопПараметры.Настройка.КодИсточника.КодНБКИ <> "1" И ДопПараметры.Настройка.КодИсточника.КодНБКИ <> "2" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "sum", "-");
		ДобавитьЗаписьВФайл(ЗаписьXML, "calcDate", "-");
		ДобавитьЗаписьВФайл(ЗаписьXML, "sumTotal", киФорматЧисла2(0));
			
	Иначе
		
		ТекущаяЗадолженность = Окр(ДопПараметры.ТекущаяЗадолженность + 0.05, 0, 0);
		
		Если ТекущаяЗадолженность > 0 Тогда 
			фТекущаяЗадолженность = СтрЗаменить(формат(ТекущаяЗадолженность, "ЧЦ=15; ЧДЦ=0"),  Символы.НПП, "");  
		Иначе
			фТекущаяЗадолженность = "0";
		КонецЕсли;	
		
		
		Если Запись.СобытиеКодНБКИ <> "2.5" Тогда
			
			//Проверка на просрочку 
			Если ЗначениеЗаполнено(Запись.ДатаВыходаНаПросрочку) Тогда
				ЕстьСрочнаяЗадолженность = (Запись.ДатаВыходаНаПросрочку > Запись.ДатаСобытия); 
			Иначе
				ЕстьСрочнаяЗадолженность = Ложь;
			КонецЕсли;
			
			Если ЕстьСрочнаяЗадолженность И (ЗначениеЗаполнено(Запись.ДоговорМКЗ) ИЛИ ЗначениеЗаполнено(Запись.ДоговорМКЗ)) Тогда
				//ДОПИСАТЬ ФОРМИРОВАТЬ ПО МКЗ 
				//Тут должен быть плановый график, без учета просрочки	
			Иначе 
				ДобавитьЗаписьВФайл(ЗаписьXML, "sum", фТекущаяЗадолженность);
				ДобавитьЗаписьВФайл(ЗаписьXML, "calcDate", киФорматДатыXML(Запись.ДатаСобытия));
				ДобавитьЗаписьВФайл(ЗаписьXML, "sumTotal", киФорматЧисла2(ТекущаяЗадолженность));
				
				
			КонецЕсли;
		Иначе 
			ДобавитьЗаписьВФайл(ЗаписьXML, "sum", "0");
			ДобавитьЗаписьВФайл(ЗаписьXML, "calcDate", киФорматДатыXML(Запись.ДатаСобытия));
			ДобавитьЗаписьВФайл(ЗаписьXML, "sumTotal", киФорматЧисла2(0));
			
		КонецЕсли;
		
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();	
	
КонецПроцедуры   

&НаСервере
Процедура FL_29_1_DebtBurdenInfo(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	Если Запись.ПризнакПотребительскогоКредита = "0" Тогда
		Возврат;
	КонецЕсли;
	
	Если ДопПараметры.Настройка.КодИсточника.КодНБКИ <> "1" И ДопПараметры.Настройка.КодИсточника.КодНБКИ <> "2" Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ ДопПараметры.Настройка.ПоУмолчаниюДолговаяНагрузка Тогда 
		//по настройкам  
		ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, ДопПараметры.Настройка, "C29.1.", "Сделка"); 
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_29_1_DebtBurdenInfo");	
		Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл
			Если Значение.НомерПоказателя = "C29.1.1" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "loadRange", Значение.Значение);
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "C29.1.2"  Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "loadCalcDate", киФорматДатыXML(Значение.Значение)); 
				Продолжить;
			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "C29.1.3" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "incomeInfo", Значение.Значение);
				Продолжить;
			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "C29.1.4" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "incomeInfoSource", Значение.Значение); 
				Продолжить;
			КонецЕсли;  
						
			Если Значение.НомерПоказателя = "C29.1.5" Тогда
				Если КредитныеИстории.ОбработатьЗначенияПризнаков(Значение.Значение) = "1" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "loadFact_1", Истина);
				Иначе  
					ДобавитьЗаписьВФайл(ЗаписьXML, "loadFact_0", Ложь);
				КонецЕсли;		 
				Продолжить;
			КонецЕсли;      
			
			Если Значение.НомерПоказателя = "C29.1.6" Тогда
				Если КредитныеИстории.ОбработатьЗначенияПризнаков(Значение.Значение) = "1" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "loadCalculationFact_1", Истина);
				Иначе  
					ДобавитьЗаписьВФайл(ЗаписьXML, "loadCalculationFact_0", Ложь);
				КонецЕсли;		 
				Продолжить;
			КонецЕсли;   
			
			Если Значение.НомерПоказателя = "C29.1.7" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "dealUid", Значение.Значение); 
				Продолжить;
			КонецЕсли;			

		КонецЦикла;	
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); 
		
	ИначеЕсли ЗначениеЗаполнено(ДопПараметры.ДокументДолговаяНагрузка) Тогда   
		ДокументДолговаяНагрузка = ДопПараметры.ДокументДолговаяНагрузка;
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_29_1_DebtBurdenInfo");
		ДобавитьЗаписьВФайл(ЗаписьXML, "loadRange", ДокументДолговаяНагрузка.ДиапазонПоказателяДолговойНагрузкиЗаемщика);
		ДобавитьЗаписьВФайл(ЗаписьXML, "loadCalcDate", киФорматДатыXML(ДокументДолговаяНагрузка.ДатаРасчетаПоказателяДолговойНагрузки));
		ДобавитьЗаписьВФайл(ЗаписьXML, "incomeInfo", Формат(ДокументДолговаяНагрузка.СпособОпределенияВеличиныСреднемесячногоДоходаЗаемщика, "ЧЦ=15; ЧДЦ=0; ЧРД=.; ЧН=; ЧГ="));
		ДобавитьЗаписьВФайл(ЗаписьXML, "incomeInfoSource", Формат(ДокументДолговаяНагрузка.ИсточникСведенийОВеличинеСреднемесячногоДоходаЗаемщика, "ЧЦ=15; ЧДЦ=0; ЧРД=.; ЧН=; ЧГ="));
		
		Если ДокументДолговаяНагрузка.ПризнакУчетаДолговойНагрузкиСозаемщиков Тогда
			ДобавитьЗаписьВФайл(ЗаписьXML, "loadFact_1", ДокументДолговаяНагрузка.ПризнакУчетаДолговойНагрузкиСозаемщиков);  
		Иначе   
			ДобавитьЗаписьВФайл(ЗаписьXML, "loadFact_0",  ДокументДолговаяНагрузка.ПризнакУчетаДолговойНагрузкиСозаемщиков); 
		КонецЕсли; 
		
			
		Если ДокументДолговаяНагрузка.РасчитаноПоПотребительскомуЗайму Тогда
			ДобавитьЗаписьВФайл(ЗаписьXML, "loadCalculationFact_1", ДокументДолговаяНагрузка.РасчитаноПоПотребительскомуЗайму);  
		Иначе   
			ДобавитьЗаписьВФайл(ЗаписьXML, "loadCalculationFact_0", ДокументДолговаяНагрузка.РасчитаноПоПотребительскомуЗайму); 
		КонецЕсли;
			
		ДобавитьЗаписьВФайл(ЗаписьXML, "dealUid", ДокументДолговаяНагрузка.УИДСделкиИлиОбращения); 	
		ЗаписьXML.ЗаписатьКонецЭлемента();  
	Иначе
		Возврат;
	КонецЕсли;
	//
КонецПроцедуры


&НаСервере
Процедура FL_30_NonMonetarySource(ЗаписьXML, Запись, ДопПараметры = Неопределено)   
		
	Если ЗначениеЗаполнено(Запись.СуммаСделки) И НЕ ЗначениеЗаполнено(Запись.НеденежноеОбязательство) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСтрокиОтчета = "30_SOURCENONMONETOBLIG"; 
	
	Если ЗначениеЗаполнено(Запись.СуммаСделки) Тогда 
		Если Запись.Событие.КодНБКИ = "2.11.2" Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("FL_30_NonMonetarySource");
			ДобавитьЗаписьВФайл(ЗаписьXML, "item", "-");
			ДобавитьЗаписьВФайл(ЗаписьXML, "code", "-");
			ДобавитьЗаписьВФайл(ЗаписьXML, "date", "-");
			ДобавитьЗаписьВФайл(ЗаписьXML, "propertyId", "-"); 	
			ЗаписьXML.ЗаписатьКонецЭлемента(); 
		Иначе
			Возврат;	
		КонецЕсли; 
	ИначеЕсли ЗначениеЗаполнено(Запись.НеденежноеОбязательство)  Тогда 	 
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_30_NonMonetarySource");
		СформироватьБлок30_21НО(ЗаписьXML, Запись.НеденежноеОбязательство);
		ЗаписьXML.ЗаписатьКонецЭлемента(); 		
	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_30_NonMonetarySource");
		ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, ДопПараметры.Настройка, ИмяСтрокиОтчета, "Сделка"); 	
		Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл 			
			Если Значение.НомерПоказателя = "C30.1" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "item", Значение.Значение); 
				Продолжить;
			КонецЕсли;  
				
			Если Значение.НомерПоказателя = "C30.2" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "code", Значение.Значение); 
				Продолжить;
			КонецЕсли;      
			
			Если Значение.НомерПоказателя = "C30.4" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(Значение.Значение));
				Продолжить;
			КонецЕсли;

			
			Если Значение.НомерПоказателя = "C30.5" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "propertyId", Значение.Значение); 
				Продолжить;
			КонецЕсли;
	
		КонецЦикла; 
		ЗаписьXML.ЗаписатьКонецЭлемента();		
	КонецЕсли;
  
			
КонецПроцедуры    

Процедура СформироватьБлок30_21НО(ЗаписьXML, НеденежноеОбязательство) Экспорт 
	
	ДобавитьЗаписьВФайл(ЗаписьXML, "item", НеденежноеОбязательство.ПредметОбязательства);
	ДобавитьЗаписьВФайл(ЗаписьXML, "code", НеденежноеОбязательство.ОбъектПредоставления.КодНБКИ);
	ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(НеденежноеОбязательство.ДатаПередачиИмуществаСубъекту));
	ДобавитьЗаписьВФайл(ЗаписьXML, "propertyId", НеденежноеОбязательство.UIDНБКИ); 	
	
КонецПроцедуры 


&НаСервере
Процедура FL_31_NonMonetarySubject(ЗаписьXML, Запись, ДопПараметры = Неопределено)   
			
	ИмяСтрокиОтчета = "31_SUBJECTNONMONETOBLIG"; 
	
	Если ЗначениеЗаполнено(Запись.СуммаСделки) Тогда 
		Если Запись.Событие.КодНБКИ = "2.11.2" Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("FL_31_NonMonetarySubject");
			ДобавитьЗаписьВФайл(ЗаписьXML, "item", "-");
			ДобавитьЗаписьВФайл(ЗаписьXML, "fulfillment", "-"); 
			ДобавитьЗаписьВФайл(ЗаписьXML, "code", "-");
			ЗаписьXML.ЗаписатьКонецЭлемента(); 
		Иначе
			Возврат;	
		КонецЕсли; 
	ИначеЕсли ЗначениеЗаполнено(Запись.НеденежноеОбязательство)  Тогда 	 
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_31_NonMonetarySubject");
		СформироватьБлок31_22НО(ЗаписьXML, Запись.НеденежноеОбязательство);
		ЗаписьXML.ЗаписатьКонецЭлемента(); 		
	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_31_NonMonetarySubject");
		ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, ДопПараметры.Настройка, ИмяСтрокиОтчета, "Сделка"); 	
		Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл 			
			Если Значение.НомерПоказателя = "C31.1" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "item", Значение.Значение); 
				Продолжить;
			КонецЕсли;   
			
			Если Значение.НомерПоказателя = "C31.3" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "fulfillment", киФорматДатыXML(Значение.Значение));
				Продолжить;
			КонецЕсли;

			
			Если Значение.НомерПоказателя = "C31.4" Тогда
				
				ПризнакНенадлежащегоИсполнения = КредитныеИстории.ОбработатьЗначенияПризнаков(Значение.Значение);
				Если ПризнакНенадлежащегоИсполнения = "0" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "fulfillmentFailExist_0", Ложь);
					Прервать;
				Иначе
					ДобавитьЗаписьВФайл(ЗаписьXML, "fulfillmentFailExist_1", Истина);
					Продолжить;
				КонецЕсли;   
				
			КонецЕсли;
			
			
			Если Значение.НомерПоказателя = "C31.5" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "code", Значение.Значение); 
				Продолжить;
			КонецЕсли;
	
		КонецЦикла; 
		ЗаписьXML.ЗаписатьКонецЭлемента();		
	КонецЕсли;
  
			
КонецПроцедуры  

Процедура СформироватьБлок31_22НО(ЗаписьXML, НеденежноеОбязательство) Экспорт 
	
	ДобавитьЗаписьВФайл(ЗаписьXML, "item", НеденежноеОбязательство.ПредметОбязательства);
	ДобавитьЗаписьВФайл(ЗаписьXML, "fulfillment", НеденежноеОбязательство.УсловияИсполненияОбязательства); 
	
	Если НеденежноеОбязательство.НенадлежащееИсполнениеОбязательства Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "fulfillmentFailExist_1", ИСТИНА);
	Иначе 
		ДобавитьЗаписьВФайл(ЗаписьXML, "fulfillmentFailExist_0", Ложь);
	КонецЕсли;

	ДобавитьЗаписьВФайл(ЗаписьXML, "code", НеденежноеОбязательство.ОбъектПредоставления.КодНБКИ); 	 
	
КонецПроцедуры 

&НаСервере
Процедура FL_32_Collateral(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	//ЗаписьXML.ЗаписатьНачалоЭлемента("FL_32_Collateral");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "code", КодПредметаЗалога(КодПредметаЗалога));
	//ДобавитьЗаписьВФайл(ЗаписьXML, "date", Формат(ДатаДоговора, "ДФ=yyyy-MM-dd"));
	//ЗаписьXML.ЗаписатьНачалоЭлемента("Sum_group_FL_32_35_Group");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "sum", Формат(СтоимостьЗалога, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ="));
	//ДобавитьЗаписьВФайл(ЗаписьXML, "currency", ВалютаЗалога);
	//ДобавитьЗаписьВФайл(ЗаписьXML, "assessDate", Формат(ДатаОценкиЗалога, "ДФ=yyyy-MM-dd"));
	//ДобавитьЗаписьВФайл(ЗаписьXML, "priceCode", ВидСтоимостиЗалога); 
	//ЗаписьXML.ЗаписатьКонецЭлемента();	
	//ДобавитьЗаписьВФайл(ЗаписьXML, "collateralEndDate", Формат(ДатаПрекращенияПлан, "ДФ=yyyy-MM-dd"));
	//ДобавитьЗаписьВФайл(ЗаписьXML, "contractTotalSum", Формат(СуммаОбязательств, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=")); 
	//ДобавитьЗаписьВФайл(ЗаписьXML, "contractCount", КоличествоДоговоров);
	//ЗаписьXML.ЗаписатьКонецЭлемента();	
	//
КонецПроцедуры

&НаСервере
Процедура FL_33_Warranty(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	//ЗаписьXML.ЗаписатьНачалоЭлемента("FL_33_Warranty");			
	//Если ПризнакПоручительства = "0" Тогда
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "warrantyFact_0", ПризнакПоручительства); 
	//Иначе	
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "warrantyFact_1", ПризнакПоручительства);
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "uid", УИДПоручительства);
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "sum", Формат(РазмерПоручительства, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ="));
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "currency", ВалПоручительства);
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "openDate", Формат(ДатаЗаключенияДП, "ДФ=yyyy-MM-dd"));
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "endDate", Формат(ДатаПлановогоПрекращенияДП, "ДФ=yyyy-MM-dd"));
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "factEndDate", Формат(ДатаФактПрекращенияДП, "ДФ=yyyy-MM-dd"));
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "endCode", КодПрекращенияДП);
	//КонецЕсли;
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервере
Процедура FL_34_Guarantee(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	//ЗаписьXML.ЗаписатьНачалоЭлемента("FL_34_Guarantee");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "exist_0", ПризнакНезависимойГарантии);	
	//ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

&НаСервере
Процедура FL_35_Insurance(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	//ЗаписьXML.ЗаписатьНачалоЭлемента("FL_35_Insurance");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "exist_0", ПризнакСтрахования);
	//ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

&НаСервере
Процедура FL_32_35_Group(ЗаписьXML, Запись, ДопПараметры = Неопределено)  
	
	//Дописать
	
	//ЗаписьXML.ЗаписатьНачалоЭлемента("FL_23_26_Group");
	//Если ПризнакЗалога = "0" Тогда
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "assetKind_0", ПризнакЗалога);
	//Иначе
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "assetKind_1", ПризнакЗалога);
	//	ДобавитьЗаписьВФайл(ЗаписьXML, "propertyId", ИдентификационныйКодПредметаЗалога);
	//	FL_32_Collateral(ЗаписьXML, КодПредметаЗалога, ДатаДоговора, СтоимостьЗалога, ВалютаЗалога, ДатаОценкиЗалога, 
	//	ВидСтоимостиЗалога, ДатаПрекращенияПлан, СуммаОбязательств, КоличествоДоговоров);
	//	FL_35_Insurance(ЗаписьXML, ПризнакСтрахования); 	
	//КонецЕсли;	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервере
Процедура FL_36_ProvisionPayment(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	//ЗаписьXML.ЗаписатьНачалоЭлемента("FL_36_ProvisionPayment");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "exist_0", ПризнакПогашенияЗаСчетОбеспечения);
	//ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

&НаСервере
Процедура FL_37_WarrantyReturn(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	Настройка = ДопПараметры.Настройка;
	ИмяСтрокиОтчета = "37_GUARANTEEREPAY"; 
	
	Если Настройка.ПоУмолчаниюОбеспечение Тогда
			
		Если ЗначениеЗаполнено(Запись.Обеспечительство) Тогда  
			ЗаписьXML.ЗаписатьНачалоЭлемента("FL_37_WarrantyReturn");
			СформироватьБлок37_28Обеспечение(ЗаписьXML, Запись.Обеспечительство, Запись.ДатаСобытия);	
			ЗаписьXML.ЗаписатьКонецЭлемента();
		Иначе   
			ЗаписьXML.ЗаписатьНачалоЭлемента("FL_37_WarrantyReturn");
			ДобавитьЗаписьВФайл(ЗаписьXML, "exist_0", Ложь);
			ЗаписьXML.ЗаписатьКонецЭлемента();	
		КонецЕсли;
	Иначе         
		
		ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, ДопПараметры.Настройка, ИмяСтрокиОтчета, "Сделка"); 	
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_37_WarrantyReturn");
		Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл 
			
			Если Значение.НомерПоказателя = "C37.1" Тогда 
				ЕстьВозмещение = КредитныеИстории.ОбработатьЗначенияПризнаков(Значение.Значение);
				Если ЕстьВозмещение = "0" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "exist_0", Ложь);
					Прервать;
				Иначе
					ДобавитьЗаписьВФайл(ЗаписьXML, "exist_1", Истина);
					Продолжить;
				КонецЕсли;  
			КонецЕсли;

			
			Если Значение.НомерПоказателя = "C37.2" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "sum", киФорматЧисла2(Значение.Значение));
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "C37.3" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "paidSum", киФорматЧисла2(Значение.Значение));
				Продолжить;
			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "C37.4" Тогда 
				ЕстьВозмещение = КредитныеИстории.ОбработатьЗначенияПризнаков(Значение.Значение);
				Если ЕстьВозмещение = "0" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "compliance_0", Ложь);
					Продолжить;
				Иначе
					ДобавитьЗаписьВФайл(ЗаписьXML, "compliance_1", Истина);
					Продолжить;
				КонецЕсли;  
			КонецЕсли;

			Если Значение.НомерПоказателя = "C37.5" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "calcDate", киФорматДатыXML(Значение.Значение)); 
				Продолжить;
			КонецЕсли;    
		КонецЦикла; 
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;	 
	
	
	
КонецПроцедуры   

&НаСервере
Процедура FL_38_ContractEnd(ЗаписьXML, Запись, ДопПараметры = Неопределено)  
	
	Настройка = ДопПараметры.Настройка; 
	Дееспособность = ДопПараметры.Дееспособность; 
	ПринудительноеВзыскание = ДопПараметры.ПризнакПринудительногоВзыскания;
	ЛицоНеСуществует = Ложь;

	ИмяСтрокиОтчета = "C38_OBLIGTERMINATION";
	Заполнено = Ложь;
	Если ТипЗнч(Запись.ДокументСобытие) = Тип("ДокументСсылка.СведенияОбИзмененииДоговора") И НЕ Заполнено Тогда  
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_38_ContractEnd");
		СформироватьБлок38_29Изменение(ЗаписьXML, Запись.ДокументСобытие, Запись.ДатаСобытия); 
		ЗаписьXML.ЗаписатьКонецЭлемента();
		Заполнено = Истина;
	ИначеЕсли ТипЗнч(Запись.ДокументСобытие) = Тип("ДокументСсылка.Обеспечительства") И НЕ Заполнено Тогда 
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_38_ContractEnd");
		СформироватьБлок38_29Обеспечение(ЗаписьXML, Запись.ДокументСобытие, Запись.ДатаСобытия); 
		ЗаписьXML.ЗаписатьКонецЭлемента();
		Заполнено = Истина;
	ИначеЕсли ЗначениеЗаполнено(Запись.РеструктуризацияМКЗ) И НЕ Заполнено Тогда 
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_38_ContractEnd");
		СформироватьБлок38_29Новация(ЗаписьXML, Запись.РеструктуризацияМКЗ); 
		ЗаписьXML.ЗаписатьКонецЭлемента();
		Заполнено = Истина; 
	ИначеЕсли Запись.Банкротство <> "0" ИЛИ ТипЗнч(Запись.ДокументСобытие) = Тип("СправочникСсылка.ДелоОБанкротстве") И НЕ Заполнено Тогда  
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_38_ContractEnd");
		Если ЗначениеЗаполнено(Запись.Банкротство) Тогда
			СформироватьБлок38_29Банкротство(ЗаписьXML, Запись.ДатаСобытия); 
		Иначе        
			СформироватьБлок38_29Прекращение(ЗаписьXML, Запись, ПринудительноеВзыскание);
		КонецЕсли;  
		ЗаписьXML.ЗаписатьКонецЭлемента();
		Заполнено = Истина;
	ИначеЕсли ТипЗнч(Дееспособность) = Тип("СправочникСсылка.ДелоОНедееспособностиСубъекта") И НЕ Заполнено Тогда 
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_38_ContractEnd");
		СформироватьБлок38_29Акт(ЗаписьXML, Запись.ДатаСобытия);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		Заполнено = Истина;
	ИначеЕсли ЛицоНеСуществует И НЕ Заполнено Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_38_ContractEnd");
		СформироватьБлок38_29Ликвидировано(ЗаписьXML, "14", Запись.ДатаСобытия);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		Заполнено = Истина; 
	ИначеЕсли НЕ Заполнено Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_38_ContractEnd");
		СформироватьБлок38_29Прекращение(ЗаписьXML, Запись, ПринудительноеВзыскание);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		Заполнено = Истина; 
	Иначе
		ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, ДопПараметры.Настройка, ИмяСтрокиОтчета, "Сделка"); 	
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_38_ContractEnd");
		Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл
			Если Значение.НомерПоказателя = "C38.1" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(Значение.Значение));
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "C38.2" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "code", Значение.Значение); 
				Продолжить;
			КонецЕсли;    
		КонецЦикла; 
		ЗаписьXML.ЗаписатьКонецЭлемента();

	КонецЕсли;    
	
	//ЗаписьXML.ЗаписатьНачалоЭлемента("FL_38_ContractEnd");
	//ДобавитьЗаписьВФайл(ЗаписьXML, "date", Формат(ДатаПрекращенияОбязательства, "ДФ=yyyy-MM-dd"));
	//ДобавитьЗаписьВФайл(ЗаписьXML, "code", КодПрекращенияОбязательства(КодПричиныПрекращенияОбязательства)); 
	//ЗаписьXML.ЗаписатьКонецЭлемента();	
	
КонецПроцедуры  

Процедура СформироватьБлок38_29Изменение(ЗаписьXML, Изменение, ДатаСобытия) Экспорт 
	
	ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(ДатаСобытия));
	ДобавитьЗаписьВФайл(ЗаписьXML, "code", Строка(Изменение.ПричиныПрекращенияОбязательства)); 		

КонецПроцедуры

Процедура СформироватьБлок38_29Обеспечение(ЗаписьXML, Обеспечение, ДатаСобытия) Экспорт 

	ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(ДатаСобытия));
	ДобавитьЗаписьВФайл(ЗаписьXML, "code", "4"); 	
		
КонецПроцедуры

Процедура СформироватьБлок38_29Новация(ЗаписьXML, РеструктуризацияМКЗ) Экспорт 

	ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(РеструктуризацияМКЗ.ДатаРеструктуризации));
	ДобавитьЗаписьВФайл(ЗаписьXML, "code", "10"); 
	
КонецПроцедуры

Процедура СформироватьБлок38_29Акт(ЗаписьXML, ДатаСобытия) Экспорт 
		
	ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(ДатаСобытия));
	ДобавитьЗаписьВФайл(ЗаписьXML, "code", "13"); 
	
КонецПроцедуры

Процедура СформироватьБлок38_29Ликвидировано(ЗаписьXML, КодПрекращенияЛиквидация, ДатаСобытия) Экспорт 
	ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(ДатаСобытия));
	ДобавитьЗаписьВФайл(ЗаписьXML, "code", КодПрекращенияЛиквидация); // для юл 15 для фл 14 
	
КонецПроцедуры

Процедура СформироватьБлок38_29Банкротство(ЗаписьXML, ДатаСобытия) Экспорт 
	
	ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(ДатаСобытия));
	ДобавитьЗаписьВФайл(ЗаписьXML, "code", "16"); 

КонецПроцедуры

Процедура СформироватьБлок38_29Прекращение(ЗаписьXML, Запись, ПринудительноеВзыскание) Экспорт  
		
	Если ТипЗнч(Запись.ДокументСобытие) = Тип("ДокументСсылка.ПоступлениеПлатежа") Тогда
		//Установка 1 и 2
		КодПрекращения = КредитныеИстории.ПолучитьКодПрекращенияПоВидуПлательщика(Запись.ДокументСобытие, ПринудительноеВзыскание);
	ИначеЕсли Запись.БезнадежныйДолг = "1" Тогда
		КодПрекращения = "12"; 
	Иначе
		КодПрекращения = "99";
	КонецЕсли;	
		
	ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(Запись.ДатаСобытия));
	ДобавитьЗаписьВФайл(ЗаписьXML, "code", КодПрекращения); 	
КонецПроцедуры 

&НаСервере
Процедура FL_39_Court(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	Настройка = ДопПараметры.Настройка;  
	
	Если ЗначениеЗаполнено(Запись.СудебноеДело) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_39_Court");
		СформироватьБлок39_30Суд(ЗаписьXML, Запись.ДокументСобытие);
		ЗаписьXML.ЗаписатьКонецЭлемента();
	ИначеЕсли Настройка.ПоУмолчаниюСудебныйБлок Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_39_Court");
		ДобавитьЗаписьВФайл(ЗаписьXML, "exist_0", Ложь);
		ЗаписьXML.ЗаписатьКонецЭлемента();
	Иначе
		ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, Настройка, "C39_LEGALRECORD", "Сделка");
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_39_Court");
		Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл
			Если Значение.НомерПоказателя = "C39.1" Тогда 
				ПризнакСудебногоСпора = КредитныеИстории.ОбработатьЗначенияПризнаков(Значение.Значение);
				Если ПризнакСудебногоСпора = "0" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "exist_0", Ложь);
					Прервать;
				Иначе
					ДобавитьЗаписьВФайл(ЗаписьXML, "exist_1", Истина);
					Продолжить;
				КонецЕсли;  
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "C39.2" Тогда 
				ПризнакСудебногоАкта = КредитныеИстории.ОбработатьЗначенияПризнаков(Значение.Значение);
				Если ПризнакСудебногоАкта = "0" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "actExist_0", Ложь);
					Прервать;
				Иначе
					ДобавитьЗаписьВФайл(ЗаписьXML, "actExist_1", Истина);
					Продолжить;
				КонецЕсли;  
				
			КонецЕсли;  
			Если Значение.НомерПоказателя = "C39.3" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(Значение.Значение));   
				Продолжить;
			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "C39.4" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "num", Значение.Значение);   
				Продолжить;
			КонецЕсли; 
			
			Если Значение.НомерПоказателя = "C39.5" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "actResolution", Значение.Значение);   
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "C39.6" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "actResolution", Значение.Значение);   
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;	 
		
		
		ЗаписьXML.ЗаписатьКонецЭлемента();	
	КонецЕсли;	 
	
КонецПроцедуры       

Процедура СформироватьБлок39_30Суд(ЗаписьXML, ДокументСобытие) Экспорт  
	
	
	ДобавитьЗаписьВФайл(ЗаписьXML, "exist_1", Истина);
	
	
	КодТребования = "1";
	
	ЕстьИД = (ТипЗнч(ДокументСобытие) = Тип("СправочникСсылка.ИсполнительныеДокументы"));  
	ИД = ""; 
	Если ЕстьИД Тогда
		ИД = ДокументСобытие;
		СудебноеДело = ИД.СудебноеРешение;
	Иначе
		СудебноеДело = ДокументСобытие;		
	КонецЕсли; 
	
	Если ЕстьИД Тогда 
		ДатаДокумента = ИД.ДатаИД;
		ДопСведения = "";
		//РезолютивнаяЧасть = ?(ЗначениеЗаполнено(ИД.СодержаниеИД), ИД.СодержаниеИД, "Взыскание просроченной задолженности");
		//РезолютивнаяЧасть = СтрЗаменить(РезолютивнаяЧасть, Символы.Таб, "");
		//РезолютивнаяЧасть = ОчисткаСтроки(РезолютивнаяЧасть);
		//РезолютивнаяЧасть = СтрЗаменить(РезолютивнаяЧасть, "  ", " ");
		//РезолютивнаяЧасть = СтрЗаменить(РезолютивнаяЧасть, "..", ".");
		//РезолютивнаяЧасть = СтрЗаменить(РезолютивнаяЧасть, ",,", ",");
		
		НомерДокумента = СтрЗаменить(ИД.НомерДела, " ", "");
		НомерДокумента = СтрЗаменить(НомерДокумента, "№", ""); 
		НомерДокумента = СтрЗаменить(НомерДокумента, ".", "");  
		
		Если ЗначениеЗаполнено(СудебноеДело.РешениеКодРешенияДляКИ) Тогда
			РезулятивнаяЧастьСудАкта = Строка(СудебноеДело.РешениеКодРешенияДляКИ);
		Иначе	
			Если СудебноеДело.Решение = Перечисления.СтатусыСудебногоДела.Отказ Тогда
				РезулятивнаяЧастьСудАкта = "1";
			ИначеЕсли СудебноеДело.Решение = Перечисления.СтатусыСудебногоДела.Удовлетворено Тогда
				РезулятивнаяЧастьСудАкта = "2"; 
			ИначеЕсли СудебноеДело.Решение = Перечисления.СтатусыСудебногоДела.УдовлетвореноЧастично Тогда
				РезулятивнаяЧастьСудАкта = "3";
			Иначе 
				РезулятивнаяЧастьСудАкта = "99";
			КонецЕсли;  
			
		КонецЕсли;
		
		ДобавитьЗаписьВФайл(ЗаписьXML, "actExist_1", Истина);
		ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(ДатаДокумента));
		ДобавитьЗаписьВФайл(ЗаписьXML, "num", НомерДокумента);
		ДобавитьЗаписьВФайл(ЗаписьXML, "actResolution", РезулятивнаяЧастьСудАкта);  
		ПризнакВступленияВСилу = (ДатаДокумента < ТекущаяДатаСеанса());
		Если Не ПризнакВступленияВСилу Тогда
			ДобавитьЗаписьВФайл(ЗаписьXML, "actStartExist_0", ПризнакВступленияВСилу);	
		Иначе
			ДобавитьЗаписьВФайл(ЗаписьXML, "actStartExist_1", ПризнакВступленияВСилу);
		КонецЕсли;   
		
		ДобавитьЗаписьВФайл(ЗаписьXML, "lawsuitCode", КодТребования);
		Если РезулятивнаяЧастьСудАкта = "2" ИЛИ РезулятивнаяЧастьСудАкта = "3" Тогда 
			ДобавитьЗаписьВФайл(ЗаписьXML, "sumTotal", киФорматЧисла2(СудебноеДело.СуммаРешения));  
		Иначе
			ДобавитьЗаписьВФайл(ЗаписьXML, "sumTotal", киФорматЧисла2(0));  
		КонецЕсли;
		ДобавитьЗаписьВФайл(ЗаписьXML, "info", ДопСведения);		
		
	Иначе
		Если СудебноеДело.Отменено И ЗначениеЗаполнено(СудебноеДело.ДатаОтмены) Тогда
			//РезолютивнаяЧасть = "Отменить судебный приказ " + СтрЗаменить(Строка(СудебноеДело.НомерДела), ".", "");
			РезулятивнаяЧастьСудАкта = "1"; 
			ДобавитьЗаписьВФайл(ЗаписьXML, "actExist_1", Истина);
			ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(СудебноеДело.ДатаОтмены));
			ДобавитьЗаписьВФайл(ЗаписьXML, "num", СудебноеДело.НомерДела);
			ДобавитьЗаписьВФайл(ЗаписьXML, "actResolution", РезулятивнаяЧастьСудАкта); 
			ДобавитьЗаписьВФайл(ЗаписьXML, "actStartExist_1", Истина);
			ДобавитьЗаписьВФайл(ЗаписьXML, "lawsuitCode", КодТребования);
			ДобавитьЗаписьВФайл(ЗаписьXML, "sumTotal", киФорматЧисла2(0)); 
			ДобавитьЗаписьВФайл(ЗаписьXML, "info", "");
		Иначе
			ДобавитьЗаписьВФайл(ЗаписьXML, "actExist_0", Ложь);
		КонецЕсли;
	КонецЕсли;		
	
КонецПроцедуры 

&НаСервере
Процедура FL_45_StopSend(ЗаписьXML, Запись, ДопПараметры = Неопределено) 
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_45_StopSend");
	Настройка = ДопПараметры.Настройка; 
	Если Запись.Продан = "1" И ТипЗнч(Запись.ДокументСобытие) = Тип("ДокументСсылка.ПродажаОбъектовУчета") Тогда 
		ДобавитьЗаписьВФайл(ЗаписьXML, "code", "3");
		ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(Запись.ДокументСобытие.Дата));
		
		
	ИначеЕсли Запись.ДатаСобытия >= Настройка.ДатаОкончанияДоговораСБКИ ИЛИ Настройка.ДоговорРасторгнут Тогда
		КодПрекращенияПередачи = ?(Настройка.ДоговорРасторгнут, "2", "1");
		Если Настройка.ДоговорРасторгнут Тогда 
			КодПрекращенияПередачи = "2";
		КонецЕсли;    
		
		ДатаПрекращения  = ?(КодПрекращенияПередачи = "2", киФорматДатыXML(Запись.ДатаСобытия), киФорматДатыXML(Настройка.ДатаОкончанияДоговораСБКИ));
		
		ДобавитьЗаписьВФайл(ЗаписьXML, "code", КодПрекращенияПередачи);
		ДобавитьЗаписьВФайл(ЗаписьXML, "date", ДатаПрекращения);
		
	Иначе  
		ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, Настройка, "C45_SUBMITHOLD", "Сделка");	
		Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл
			Если Значение.НомерПоказателя = "C45.1" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "code", Значение.Значение);
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "C45.2" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(Значение.Значение)); 
				Продолжить;
			КонецЕсли;  
		КонецЦикла;	
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); 
	
	
КонецПроцедуры

&НаСервере
Процедура FL_54_Accounting(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	ПризнакУчета = "1";
	Если ТипЗнч(Запись.ДокументСобытие) = Тип("ДокументСсылка.ПродажаОбъектовУчета") Тогда 
		ПризнакУчета = ?(Запись.ДокументСобытие.Цессия, "0", "1");
	КонецЕсли;	   
	
	
	МинПроцентнаяСтавка = ?(ЗначениеЗаполнено(Запись.ПроцентнаяСтавкаПоУсловиям), киФорматЧисла2(Запись.ПроцентнаяСтавкаПоУсловиям), "");   
	МаксПроцентнаяСтавка = ?(ЗначениеЗаполнено(Запись.МаксимальнаяПроцентнаяСтавкаПоУсловиям), киФорматЧисла2(Запись.МаксимальнаяПроцентнаяСтавкаПоУсловиям), "");
	
	
	Если ТипЗнч(Запись.ДокументСобытие) = Тип("ДокументСсылка.ПродажаОбъектовУчета") Тогда
		Если Запись.ДокументСобытие.Цессия Тогда  
			СуммаПередачи = киФорматЧисла2(ДопПараметры.ТекущаяЗадолженность); 
		КонецЕсли;	
		
	КонецЕсли;
	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_54_Accounting");
	
	Если ПризнакУчета = "1" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "exist_1", Истина);
	Иначе 
		ДобавитьЗаписьВФайл(ЗаписьXML, "exist_0", Ложь);
		ДобавитьЗаписьВФайл(ЗаписьXML, "sum", СуммаПередачи);
		
	КонецЕсли;	
	
	ДобавитьЗаписьВФайл(ЗаписьXML, "minInterest", МинПроцентнаяСтавка);  
	ДобавитьЗаписьВФайл(ЗаписьXML, "maxInterest", ?(ЗначениеЗаполнено(МаксПроцентнаяСтавка), МаксПроцентнаяСтавка, МинПроцентнаяСтавка));  
	
	Если ЗначениеЗаполнено(ДопПараметры.ЗаписьОГосПоддержке) Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "supportExist_1", Истина); 
		ДобавитьЗаписьВФайл(ЗаписьXML, "supportInfo", ДопПараметры.ЗаписьОГосПоддержке);
	Иначе 
		ДобавитьЗаписьВФайл(ЗаписьXML, "supportExist_0", Ложь); 
	КонецЕсли;	
	
	
	//Уточнить!!!
	ДобавитьЗаписьВФайл(ЗаписьXML, "calcDate", киФорматДатыXML(Запись.ДатаСобытия));
	ЗаписьXML.ЗаписатьКонецЭлемента();	
	
КонецПроцедуры

&НаСервере
Процедура FL_55_Application(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	Настройка = ДопПараметры.Настройка;	
	Заполнено = Ложь; 
		
	Если ТипЗнч(Запись.ДокументСобытие) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если Настройка.НеФормироватьОбращения Тогда
			Возврат;
		ИначеЕсли ЗначениеЗаполнено(Запись.Прощение) Тогда 
			ЗаписьXML.ЗаписатьНачалоЭлемента("FL_55_Application");
			СформироватьБлок55_45Наследование(ЗаписьXML, Запись);
		Иначе 
			ЗаписьXML.ЗаписатьНачалоЭлемента("FL_55_Application");
			ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, Настройка, "C55_APPLICATION", "Сделка");
			Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл				
				
				Если Значение.НомерПоказателя = "C55.1" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "role", Значение.Значение);
					Продолжить;
				КонецЕсли;  
				
				Если Значение.НомерПоказателя = "C55.2" Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "sum", киФорматЧисла2(Значение.Значение));
					Продолжить;
				КонецЕсли; 
				
				Если Значение.НомерПоказателя = "C55.3" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "currency", Значение.Значение, ИСТИНА);   
					Продолжить;
				КонецЕсли;  
				
				Если Значение.НомерПоказателя = "C55.4" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "uid", Значение.Значение);   
					Продолжить;
				КонецЕсли; 
				
				Если Значение.НомерПоказателя = "C55.5" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "applicationDate", киФорматДатыXML(Значение.Значение));   
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "C55.6" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "sourceCode", Значение.Значение);   
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "C55.8" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "wayCode", Значение.Значение);   
					Продолжить;
				КонецЕсли;  
				
				Если Значение.НомерПоказателя = "C55.9" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "approvalEndDate", киФорматДатыXML(Значение.Значение));   
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "C55.10" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "stageEndDate", киФорматДатыXML(Значение.Значение));   
					Продолжить;
				КонецЕсли; 
				
				Если Значение.НомерПоказателя = "C55.11" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "purposeCode", Значение.Значение);   
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "C55.12" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "stageCode", Значение.Значение);   
					Продолжить;
				КонецЕсли; 
				
				Если Значение.НомерПоказателя = "C55.13" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "stageDate", киФорматДатыXML(Значение.Значение));   
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "C55.14" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "applicationCode", Значение.Значение);   
					Продолжить;
				КонецЕсли;
				
				Если Значение.НомерПоказателя = "C55.15" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "num", Значение.Значение);   
					Продолжить;
				КонецЕсли;
				                          
				Если Значение.НомерПоказателя = "C55.16" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "loanSum", киФорматЧисла2(Значение.Значение));   
					Продолжить;
				КонецЕсли;
				
			КонецЦикла; 
		КонецЕсли;
		Заполнено = Истина;
	ИначеЕсли ЗначениеЗаполнено(Запись.ДоговорМКЗ)  Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_55_Application");
		СформироватьБлок55_45МКЗ(ЗаписьXML, Запись, Запись.ДоговорМКЗ);
		Заполнено = Истина;
	ИначеЕсли ЗначениеЗаполнено(Запись.РеструктуризацияМКЗ) Тогда 
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_55_Application");
		СформироватьБлок55_45МКЗ(ЗаписьXML, Запись, Запись.РеструктуризацияМКЗ);
		Заполнено = Истина;
	ИначеЕсли ЗначениеЗаполнено(Запись.НеденежноеОбязательство) И НЕ Заполнено  Тогда 
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_55_Application");
		СформироватьБлок55_45НО(ЗаписьXML, Запись, Запись.НеденежноеОбязательство); 
	ИначеЕсли Запись.СобытиеКодНБКИ = "2.3" И НЕ Заполнено Тогда 	 
		Возврат;
	Иначе
		ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, Настройка, "C55_APPLICATION", "Сделка"); 
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_55_Application");
			Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл				
			Если Значение.НомерПоказателя = "C55.1" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "role", Значение.Значение);					
			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "C55.2" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "sum", киФорматЧисла2(Значение.Значение));					
			КонецЕсли; 
			
			Если Значение.НомерПоказателя = "C55.3" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "currency", Значение.Значение, ИСТИНА);   
				Продолжить;
			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "C55.4" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "uid", Значение.Значение);   
				Продолжить;
			КонецЕсли; 
			
			Если Значение.НомерПоказателя = "C55.5" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "applicationDate", киФорматДатыXML(Значение.Значение));   
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "C55.6" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "sourceCode", Значение.Значение);   
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "C55.8" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "wayCode", Значение.Значение);   
				Продолжить;
			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "C55.9" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "approvalEndDate", киФорматДатыXML(Значение.Значение));   
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "C55.10" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "stageEndDate", киФорматДатыXML(Значение.Значение));   
				Продолжить;
			КонецЕсли; 
			
			Если Значение.НомерПоказателя = "C55.11" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "purposeCode", Значение.Значение);   
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "C55.12" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "stageCode", Значение.Значение);   
				Продолжить;
			КонецЕсли; 
			
			Если Значение.НомерПоказателя = "C55.13" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "stageDate", киФорматДатыXML(Значение.Значение));   
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "C55.14" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "applicationCode", Значение.Значение);   
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "C55.15" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "num", Значение.Значение);   
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "C55.16" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "loanSum", киФорматЧисла2(Значение.Значение));   
				Продолжить;
			КонецЕсли; 	
		КонецЦикла; 
		
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры     

Процедура СформироватьБлок55_45МКЗ(ЗаписьXML, Запись, Микрозайм) Экспорт 
	//уточнить код источника
	КодИсточника  = ?(Микрозайм.ПрограммаРасчета.БанковскаяПрограмма, "1", "2");	
		
	//ЗаписьXML.ЗаписатьНачалоЭлемента("FL_55_Application");
	
	ДобавитьЗаписьВФайл(ЗаписьXML, "role", "1");
	ДобавитьЗаписьВФайл(ЗаписьXML, "sum", киФорматЧисла2(Микрозайм.СуммаВыданногоЗайма));
	ДобавитьЗаписьВФайл(ЗаписьXML, "currency", Строка(Микрозайм.Займ.ВалютаДоговора.Наименование), ИСТИНА); 
	ДобавитьЗаписьВФайл(ЗаписьXML, "uid", Микрозайм.UIDНБКИ);
	ДобавитьЗаписьВФайл(ЗаписьXML, "applicationDate", киФорматДатыXML(Микрозайм.Дата));
	ДобавитьЗаписьВФайл(ЗаписьXML, "sourceCode", КодИсточника);
	ДобавитьЗаписьВФайл(ЗаписьXML, "wayCode", "3");
	ДобавитьЗаписьВФайл(ЗаписьXML, "approvalEndDate", "9999-12-31");
	ЕстьРеструктуризация = ЗначениеЗаполнено(Запись.РеструктуризацияМКЗ); 
	ДатаОкончанияСрокаРассмотренияОбращения = ?(ЗначениеЗаполнено(Микрозайм.ДатаОкончанияСрокаРассмотренияОбращения), киФорматДатыXML(Микрозайм.ДатаОкончанияСрокаРассмотренияОбращения), "-"); 
	ДобавитьЗаписьВФайл(ЗаписьXML, "stageEndDate", ДатаОкончанияСрокаРассмотренияОбращения);
	ДобавитьЗаписьВФайл(ЗаписьXML, "purposeCode", ?(ЕстьРеструктуризация, Микрозайм.ТекущийДоговор.ЦельКредита.КодНБКИ, Микрозайм.ЦельКредита.КодНБКИ));
	ДобавитьЗаписьВФайл(ЗаписьXML, "stageCode", КредитныеИсторииИзменения.ВернутьСтадиюРассмотренияОбязательстваПоСобытию(Запись.Событие.КодНБКИ));
	ДобавитьЗаписьВФайл(ЗаписьXML, "stageDate", киФорматДатыXML(Запись.ДатаСобытия)); 
	ДобавитьЗаписьВФайл(ЗаписьXML, "applicationCode", "98");
	ДобавитьЗаписьВФайл(ЗаписьXML, "num", Строка(Микрозайм.НомерДоговора)); 
	ДобавитьЗаписьВФайл(ЗаписьXML, "loanSum", киФорматЧисла2(Микрозайм.СуммаВыданногоЗайма));
	//ЗаписьXML.ЗаписатьКонецЭлемента(); 
	
  КонецПроцедуры    

Процедура СформироватьБлок55_45Наследование(ЗаписьXML, Запись) Экспорт
	//ЗаписьXML.ЗаписатьНачалоЭлемента("FL_55_Application");	
	ДобавитьЗаписьВФайл(ЗаписьXML, "role", "99");
	ДобавитьЗаписьВФайл(ЗаписьXML, "sum", киФорматЧисла2(Запись.СуммаСделки));
	ДобавитьЗаписьВФайл(ЗаписьXML, "currency", Строка(Запись.Сделка.ВалютаДоговора.Наименование), ИСТИНА); 
	ДобавитьЗаписьВФайл(ЗаписьXML, "uid", Запись.UID);
	ДобавитьЗаписьВФайл(ЗаписьXML, "applicationDate", киФорматДатыXML(Запись.Прощение.ДатаИзмененияДоговора));
	ДобавитьЗаписьВФайл(ЗаписьXML, "sourceCode", "17");
	ДобавитьЗаписьВФайл(ЗаписьXML, "wayCode", "99");
	ДобавитьЗаписьВФайл(ЗаписьXML, "approvalEndDate", "9999-12-31");
	ДобавитьЗаписьВФайл(ЗаписьXML, "stageEndDate", ?(ЗначениеЗаполнено(Запись.Прощение.ДатаВступленияИзменения), киФорматДатыXML(Запись.Прощение.ДатаВступленияИзменения), "-"));
	ДобавитьЗаписьВФайл(ЗаписьXML, "purposeCode", Запись.КодНБКИЦельКредита);
	ДобавитьЗаписьВФайл(ЗаписьXML, "stageCode", КредитныеИсторииИзменения.ВернутьСтадиюРассмотренияОбязательстваПоСобытию(Запись.Событие.КодНБКИ));
	ДобавитьЗаписьВФайл(ЗаписьXML, "stageDate", киФорматДатыXML(Запись.ДатаСобытия)); 
	ДобавитьЗаписьВФайл(ЗаписьXML, "applicationCode", "98");
	ДобавитьЗаписьВФайл(ЗаписьXML, "num", Строка(Запись.Сделка.Наименование)); 
	ДобавитьЗаписьВФайл(ЗаписьXML, "loanSum", киФорматЧисла2(Запись.СуммаСделки));
	//ЗаписьXML.ЗаписатьКонецЭлемента(); 
	
КонецПроцедуры    

Процедура СформироватьБлок55_45НО(ЗаписьXML, Запись, НеденежноеОбязательство) Экспорт
	КодИсточника  = "15";  
	//ЗаписьXML.ЗаписатьНачалоЭлемента("FL_55_Application");	
	ДобавитьЗаписьВФайл(ЗаписьXML, "role", "1");
	ДобавитьЗаписьВФайл(ЗаписьXML, "sum", киФорматЧисла2(НеденежноеОбязательство.Стоимость));
	ДобавитьЗаписьВФайл(ЗаписьXML, "currency", Строка(НеденежноеОбязательство.ОбъектОбязательства.ВалютаДоговора.Наименование), ИСТИНА); 
	ДобавитьЗаписьВФайл(ЗаписьXML, "uid", НеденежноеОбязательство.UIDНБКИ);
	ДобавитьЗаписьВФайл(ЗаписьXML, "applicationDate", киФорматДатыXML(НеденежноеОбязательство.ДатаОбращенияСубъекта));
	ДобавитьЗаписьВФайл(ЗаписьXML, "sourceCode", КодИсточника);
	ДобавитьЗаписьВФайл(ЗаписьXML, "wayCode", "5");
	ДобавитьЗаписьВФайл(ЗаписьXML, "approvalEndDate", "9999-12-31");
	ДобавитьЗаписьВФайл(ЗаписьXML, "stageEndDate", ?(ЗначениеЗаполнено(НеденежноеОбязательство.ДатаОкончанияСрокаРассмотренияОбращения), киФорматДатыXML(НеденежноеОбязательство.ДатаОкончанияСрокаРассмотренияОбращения), "-"));
	ДобавитьЗаписьВФайл(ЗаписьXML, "purposeCode", Запись.КодНБКИЦельКредита);
	ДобавитьЗаписьВФайл(ЗаписьXML, "stageCode", КредитныеИсторииИзменения.ВернутьСтадиюРассмотренияОбязательстваПоСобытию(Запись.Событие.КодНБКИ));
	ДобавитьЗаписьВФайл(ЗаписьXML, "stageDate", киФорматДатыXML(Запись.ДатаСобытия)); 
	ДобавитьЗаписьВФайл(ЗаписьXML, "applicationCode", "98");
	ДобавитьЗаписьВФайл(ЗаписьXML, "num", Строка(Запись.Сделка.Наименование)); 
	ДобавитьЗаписьВФайл(ЗаписьXML, "loanSum", киФорматЧисла2(НеденежноеОбязательство.Стоимость));
	//ЗаписьXML.ЗаписатьКонецЭлемента(); 
	
КонецПроцедуры 

 &НаСервере
Процедура FL_56_Participation(ЗаписьXML, Запись, ДопПараметры = Неопределено)    
	
	Настройка = ДопПараметры.Настройка; 
	ЕстьЗадолженность = ДопПараметры.ЕстьЗадолженность;
	ЕстьБлокПрекращение = (Запись.СобытиеКодНБКИ = "2.5");
	
	ТипОтношенияКСчету = "1";
	Если ДопПараметры.Поручитель <> "0" Тогда
		ТипОтношенияКСчету  =  ДопПараметры.Поручитель;
	КонецЕсли;	
	
	Если ДопПараметры.Наследник <> "0" Тогда
		ТипОтношенияКСчету  =  ДопПараметры.Наследник;
	КонецЕсли;	  
	
	Просрочка90плюс = Запись.Просрочка90плюс;
	ПризнакПрекращения = "0"; 
	
	Если НЕ ЕстьЗадолженность Тогда
		Просрочка90плюс = "0";
		ПризнакПрекращения = "1";
	КонецЕсли;	
	ПризнакПросрочки = ?(ЕстьБлокПрекращение, "0", Просрочка90плюс); 
	ПризнакПрекращенияОбязательства = ?(ЕстьБлокПрекращение, "1", ПризнакПрекращения);
	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_56_Participation");
	ДобавитьЗаписьВФайл(ЗаписьXML, "role", ТипОтношенияКСчету);
	ДобавитьЗаписьВФайл(ЗаписьXML, "kindCode", Запись.КодНБКИВидКредита);
	ДобавитьЗаписьВФайл(ЗаписьXML, "uid", Запись.UID);
	ДобавитьЗаписьВФайл(ЗаписьXML, "fundDate", киФорматДатыXML(Запись.ДатаПередачиФинансирования)); 
	
	
	Если ПризнакПросрочки = "1" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "overdueExist_1", Истина);	
	Иначе	
		ДобавитьЗаписьВФайл(ЗаписьXML, "overdueExist_0", Ложь);
	КонецЕсли;
	
	Если ПризнакПрекращенияОбязательства = "1" Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "stopExist_1", Истина);
	Иначе	
		ДобавитьЗаписьВФайл(ЗаписьXML, "stopExist_0", Ложь);
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();	
	
КонецПроцедуры

&НаСервере
Процедура FL_57_Reject(ЗаписьXML, Запись, ДопПараметры = Неопределено) 
	
	Настройка = ДопПараметры.Настройка;
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_57_Reject");	
	Если ЗначениеЗаполнено(Запись.Банкротство) Тогда
		Если ТипЗнч(Запись.Банкротство) = Тип("СправочникСсылка.ДелоОБанкротстве") Тогда
			ДобавитьЗаписьВФайл(ЗаписьXML, "rejectDate", киФорматДатыXML(Запись.Банкротство.ДатаПоследнейПроверки));
		Иначе 
			ДобавитьЗаписьВФайл(ЗаписьXML, "rejectDate", киФорматДатыXML(Запись.ДатаСобытия));
		КонецЕсли;
		ДобавитьЗаписьВФайл(ЗаписьXML, "rejectCode", "6");
	ИначеЕсли ЗначениеЗаполнено(Запись.ДоговорМКЗ) ИЛИ ЗначениеЗаполнено(Запись.РеструктуризацияМКЗ) Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "rejectDate", киФорматДатыXML(Запись.ДатаСобытия));
		ДобавитьЗаписьВФайл(ЗаписьXML, "rejectCode", "5");
	ИначеЕсли ЗначениеЗаполнено(Запись.НеденежноеОбязательство) Тогда
		ДобавитьЗаписьВФайл(ЗаписьXML, "rejectDate", киФорматДатыXML(Запись.ДатаСобытия));
		ДобавитьЗаписьВФайл(ЗаписьXML, "rejectCode", "5");
	Иначе
		ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, ДопПараметры.Настройка, "C57_APPLREJECT", "Сделка"); 	
		Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл
			Если Значение.НомерПоказателя = "C57.1" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "rejectDate", киФорматДатыXML(Значение.Значение));
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "C57.2" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "rejectCode", Значение.Значение); 
				Продолжить;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;	
        	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры      

&НаСервере
Процедура FL_51_OrgAcquirer(ЗаписьXML, Запись, ДокументПродажа, ДопПараметры = Неопределено)
	
	ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(ДокументПродажа.ПриобретательПраваТребования, ДопПараметры.Настройка, "C51_ACQUIRERLEGAL", "ПриобретательПраваТребования"); 
	КодНомераИНН = "";
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_51_OrgAcquirer");	
		Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл
			Если Значение.НомерПоказателя = "C51.1" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "code", Значение.Значение);
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "C51.2" Тогда 
				ПризнакРФ = КредитныеИстории.ОбработатьЗначенияПризнаков(Значение.Значение);
				Если ПризнакРФ = "0" Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "regRusExist_0", Ложь);
					Прервать;
				Иначе
					ДобавитьЗаписьВФайл(ЗаписьXML, "regRusExist_1", Истина);
					Продолжить;
				КонецЕсли;  

			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "C51.3" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "fullName", Значение.Значение, Истина);
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "C51.4" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "shortName", Значение.Значение, Истина);
				Продолжить;
			КонецЕсли; 
			
			Если Значение.НомерПоказателя = "C51.5" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "otherName", Значение.Значение, Истина);
				Продолжить;
			КонецЕсли;  
			
			Если Значение.НомерПоказателя = "C51.6" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "lei", Значение.Значение);
				Продолжить;
			КонецЕсли; 
			
			Если Значение.НомерПоказателя = "C51.7" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "regNum", Значение.Значение);
				Продолжить;
			КонецЕсли; 
			
			Если Значение.НомерПоказателя = "C51.8" Тогда 
				КодНомераИНН = Значение.Значение;
				Продолжить;
			КонецЕсли;
			
			Если Значение.НомерПоказателя = "C51.9" Тогда 
				Если ЗначениеЗаполнено(Значение.Значение) Тогда 
					ЗаписьXML.ЗаписатьНачалоЭлемента("TaxNum_group_FL_51_OrgAcquirer");
					Если НЕ ЗначениеЗаполнено(КодНомераИНН) Тогда 
						КодНомераИНН = ?(СтрДлина(Значение.Значение) = 12, "1", "2");
					КонецЕсли;	
					ДобавитьЗаписьВФайл(ЗаписьXML, "taxCode", КодНомераИНН);
					ДобавитьЗаписьВФайл(ЗаписьXML, "taxNum", Значение.Значение); 
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
				Продолжить;
			КонецЕсли;   
			
			Если Значение.НомерПоказателя = "C51.10" Тогда
				Если  ТипЗнч(ДокументПродажа) = Тип("ДокументСсылка.ПродажаОбъектовУчета") Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(ДокументПродажа.Дата));
					Продолжить;
				Иначе	
					Если ЗначениеЗаполнено(Значение.Значение) Тогда 
						ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(Значение.Значение));
					Иначе
						ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(Запись.ДатаСобытия));
					КонецЕсли;
					Продолжить;
				КонецЕсли;
			КонецЕсли;	
			
		КонецЦикла;	
			
		ЗаписьXML.ЗаписатьКонецЭлемента();		
КонецПроцедуры   

&НаСервере
Процедура FL_52_PersonAcquirer(ЗаписьXML, Запись, ДокументПродажа, ДопПараметры = Неопределено)
	
	Если ТипЗнч(ДокументПродажа) = Тип("ДокументСсылка.ПродажаОбъектовУчета") Тогда
		ПравоприемникФЛ = ДокументПродажа.ПриобретательПраваТребования;   
		Если ТипЗнч(ДокументПродажа)  =  Тип("СправочникСсылка.Организации") Тогда
			Возврат;
		КонецЕсли;	
	ИначеЕсли ТипЗнч(Запись.ДокументСобытие) = Тип("СправочникСсылка.Контрагенты") Тогда 
		ПравоприемникФЛ = Запись.ДокументСобытие;	
	Иначе
		ПравоприемникФЛ = ""; 
		ФИОТекущее = "";
	КонецЕсли;	
		
	Если ТипЗнч(ПравоприемникФЛ) = Тип("СправочникСсылка.Контрагенты") Тогда	
		
		ФИОТекущее = ПравоприемникФЛ.ФИО[ПравоприемникФЛ.ФИО.Количество() - 1];			
	КонецЕсли;
		
	ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(?(ЗначениеЗаполнено(ПравоприемникФЛ), ПравоприемникФЛ, Запись.Сделка), ДопПараметры.Настройка, "C52_ACQUIRERINDIVID", "ПриобретательПраваТребования"); 
	
	КодНомераИНН = "";
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_52_PersonAcquirer");
	
	Если ЗначениеЗаполнено(ФИОТекущее) Тогда   
		Отчество = ?(ЗначениеЗаполнено(ФИОТекущее.Отчество), ФИОТекущее.Отчество, " ");
		ДобавитьЗаписьВФайл(ЗаписьXML, "lastName", ФИОТекущее.Фамилия, Истина);
		ДобавитьЗаписьВФайл(ЗаписьXML, "firstName", ФИОТекущее.Имя, Истина);
		ДобавитьЗаписьВФайл(ЗаписьXML, "middleName", Отчество, Истина);	
	КонецЕсли;	
		
	Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл  
			
		Если Значение.НомерПоказателя = "C52.1" Тогда 
			Если ЗначениеЗаполнено(ФИОТекущее) Тогда 
				Продолжить;
			Иначе
				ДобавитьЗаписьВФайл(ЗаписьXML, "lastName", Значение.Значение, Истина);
				Продолжить; 
			КонецЕсли;
		КонецЕсли; 
		
		Если Значение.НомерПоказателя = "C52.2" Тогда 
			Если ЗначениеЗаполнено(ФИОТекущее) Тогда 
				Продолжить;
			Иначе
				ДобавитьЗаписьВФайл(ЗаписьXML, "firstName", Значение.Значение, Истина);
				Продолжить; 
			КонецЕсли;
		КонецЕсли;
		
		Если Значение.НомерПоказателя = "C52.3" Тогда 
			Если ЗначениеЗаполнено(ФИОТекущее) Тогда 
				Продолжить;
			Иначе 
				Отчество = ?(ЗначениеЗаполнено(Значение.Значение), Значение.Значение, " ");
				ДобавитьЗаписьВФайл(ЗаписьXML, "middleName", Отчество, Истина);
				Продолжить; 
			КонецЕсли;
		КонецЕсли;
		
		Если Значение.НомерПоказателя = "C52.4" Тогда 
			ДобавитьЗаписьВФайл(ЗаписьXML, "birthDate", киФорматДатыXML(Значение.Значение));
			Продолжить;	
		КонецЕсли;  
		
		Если Значение.НомерПоказателя = "C52.5" Тогда 
			ДобавитьЗаписьВФайл(ЗаписьXML, "birthPlace", Значение.Значение);
			Продолжить;
		КонецЕсли;   
		
		Если Значение.НомерПоказателя = "C52.6" Тогда 
			КодНомераИНН = Значение.Значение;
			Продолжить;
		КонецЕсли;
		
		Если Значение.НомерПоказателя = "C52.7" Тогда 
			Если ЗначениеЗаполнено(Значение.Значение) Тогда 
				ЗаписьXML.ЗаписатьНачалоЭлемента("TaxNum_group_FL_52_PersonAcquirer");
				Если НЕ ЗначениеЗаполнено(КодНомераИНН) Тогда 
					КодНомераИНН = ?(СтрДлина(Значение.Значение) = 12, "1", "2");
				КонецЕсли;	
				ДобавитьЗаписьВФайл(ЗаписьXML, "taxCode", КодНомераИНН);
				ДобавитьЗаписьВФайл(ЗаписьXML, "taxNum", Значение.Значение);  
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
			Продолжить;
		КонецЕсли;   

		
		Если Значение.НомерПоказателя = "C52.8" Тогда 
			ДобавитьЗаписьВФайл(ЗаписьXML, "socialNum", Значение.Значение);
			Продолжить;
		КонецЕсли; 
		
		Если Значение.НомерПоказателя = "C52.9" Тогда 
			ДобавитьЗаписьВФайл(ЗаписьXML, "docCode", Значение.Значение);
			Продолжить;
		КонецЕсли;  
		
		Если Значение.НомерПоказателя = "C52.10" Тогда 
			ДобавитьЗаписьВФайл(ЗаписьXML, "docOtherName", Значение.Значение, Истина);
			Продолжить;
		КонецЕсли;
		
		Если Значение.НомерПоказателя = "C52.11" Тогда 
			ДобавитьЗаписьВФайл(ЗаписьXML, "docSeries", Значение.Значение);
			Продолжить;
		КонецЕсли; 
		
		Если Значение.НомерПоказателя = "C52.12" Тогда 
			ДобавитьЗаписьВФайл(ЗаписьXML, "docNum", Значение.Значение);
			Продолжить;
		КонецЕсли; 
		
		Если Значение.НомерПоказателя = "C52.13" Тогда 
			ДобавитьЗаписьВФайл(ЗаписьXML, "issueDate", киФорматДатыXML(Значение.Значение));
			Продолжить;	
		КонецЕсли;

		
		Если Значение.НомерПоказателя = "C52.14" Тогда 
			ДобавитьЗаписьВФайл(ЗаписьXML, "docIssuer", Значение.Значение);
			Продолжить;
		КонецЕсли; 
		
		Если Значение.НомерПоказателя = "C52.15" Тогда 
			ДобавитьЗаписьВФайл(ЗаписьXML, "deptCode", Значение.Значение);
			Продолжить;
		КонецЕсли;
		
				
		Если Значение.НомерПоказателя = "C51.16" Тогда
			Если  ТипЗнч(ДокументПродажа) = Тип("ДокументСсылка.ПродажаОбъектовУчета") Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(ДокументПродажа.Дата));
				Продолжить;
			Иначе	
				Если ЗначениеЗаполнено(Значение.Значение) Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(Значение.Значение));
				Иначе
					ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(Запись.ДатаСобытия));
				КонецЕсли;
				Продолжить;
			КонецЕсли;
		КонецЕсли;	
		
	КонецЦикла;	
	
	ЗаписьXML.ЗаписатьКонецЭлемента();

	
		
КонецПроцедуры  

&НаСервере
Процедура FL_53_ServiceOrg(ЗаписьXML, Запись, ДопПараметры = Неопределено)
	
	КодНомераИНН = "";  
	ДокументПродажа = Запись.ДокументСобытие; 
	Если ТипЗнч(ДокументПродажа) = Тип("ДокументСсылка.ПродажаОбъектовУчета") Тогда
		ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(ДокументПродажа.ПриобретательПраваТребования, ДопПараметры.Настройка, "53_SERVICECO", "ПриобретательПраваТребования"); 
	Иначе  
		ЗначенияПоНастройкам = ВернутьСтруктуруБлокаПоНастройкам(Запись.Сделка, ДопПараметры.Настройка, "53_SERVICECO", "ПриобретательПраваТребования");
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("FL_53_ServiceOrg");	
	Для Каждого Значение ИЗ ЗначенияПоНастройкам Цикл
		Если Значение.НомерПоказателя = "C53.1" Тогда 
			ПризнакРФ = КредитныеИстории.ОбработатьЗначенияПризнаков(Значение.Значение);
			Если ПризнакРФ = "0" Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "regRusExist_0", Ложь);
				Прервать;
			Иначе
				ДобавитьЗаписьВФайл(ЗаписьXML, "regRusExist_1", Истина);
				Продолжить;
			КонецЕсли;  
		КонецЕсли;
		
		Если Значение.НомерПоказателя = "C53.2" Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "fullName", Значение.Значение, Истина);
			Продолжить;						
		КонецЕсли;  
		
		Если Значение.НомерПоказателя = "C53.3" Тогда 
			ДобавитьЗаписьВФайл(ЗаписьXML, "shortName", Значение.Значение, Истина);
			Продолжить;

		КонецЕсли;
		
		Если Значение.НомерПоказателя = "C53.4" Тогда
			ДобавитьЗаписьВФайл(ЗаписьXML, "otherName", Значение.Значение, Истина);
			Продолжить;			
		КонецЕсли; 
		
		Если Значение.НомерПоказателя = "C53.5" Тогда 
			ДобавитьЗаписьВФайл(ЗаписьXML, "regNum", Значение.Значение);
			Продолжить;
		КонецЕсли;  
		
		Если Значение.НомерПоказателя = "C53.6" Тогда
			КодНомераИНН = Значение.Значение;
			Продолжить;
		КонецЕсли; 
		
		Если Значение.НомерПоказателя = "C53.7" Тогда
			Если ЗначениеЗаполнено(Значение.Значение) Тогда 
				ЗаписьXML.ЗаписатьНачалоЭлемента("TaxNum_group_FL_53_ServiceOrg");
				Если НЕ ЗначениеЗаполнено(КодНомераИНН) Тогда 
					КодНомераИНН = ?(СтрДлина(Значение.Значение) = 12, "1", "2");
				КонецЕсли;	
				ДобавитьЗаписьВФайл(ЗаписьXML, "taxCode", КодНомераИНН);
				ДобавитьЗаписьВФайл(ЗаписьXML, "taxNum", Значение.Значение); 
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
			Продолжить;
		КонецЕсли; 
		
		Если Значение.НомерПоказателя = "C53.8" Тогда 
			Если  ТипЗнч(ДокументПродажа) = Тип("ДокументСсылка.ПродажаОбъектовУчета") Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(ДокументПродажа.АгентскаяСхемаДатаНачала));
				Продолжить;
			Иначе	
				Если ЗначениеЗаполнено(Значение.Значение) Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(Значение.Значение));
				Иначе
					ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(Запись.ДатаСобытия));
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Значение.НомерПоказателя = "C53.9" Тогда
			Если  ТипЗнч(ДокументПродажа) = Тип("ДокументСсылка.ПродажаОбъектовУчета") Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "endDate", киФорматДатыXML(ДокументПродажа.АгентскаяСхемаДатаОкончания));
				Продолжить;
			Иначе	
				Если ЗначениеЗаполнено(Значение.Значение) Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "endDate", киФорматДатыXML(Значение.Значение));
				Иначе
					ДобавитьЗаписьВФайл(ЗаписьXML, "endDate", киФорматДатыXML(Запись.ДатаСобытия));
				КонецЕсли;
				Продолжить;
			КонецЕсли;

		КонецЕсли;   
		
		Если Значение.НомерПоказателя = "C53.10" Тогда
			Если  ТипЗнч(ДокументПродажа) = Тип("ДокументСсылка.ПродажаОбъектовУчета") Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "issuerName", ДокументПродажа.НаименованиеЭмитента, ИСТИНА);
				Продолжить;
			Иначе	
				Если ЗначениеЗаполнено(Значение.Значение) Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "issuerName", Значение.Значение, ИСТИНА);
				Иначе
					ДобавитьЗаписьВФайл(ЗаписьXML, "issuerName", ЛОЖЬ);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если Значение.НомерПоказателя = "C53.11" Тогда
			Если  ТипЗнч(ДокументПродажа) = Тип("ДокументСсылка.ПродажаОбъектовУчета") Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "issuerRegNum", ДокументПродажа.РегистрационныйНомерЭмитента, ИСТИНА);
				Продолжить;
			Иначе	
				Если ЗначениеЗаполнено(Значение.Значение) Тогда 
					ДобавитьЗаписьВФайл(ЗаписьXML, "issuerRegNum", Значение.Значение, ИСТИНА);
				Иначе
					ДобавитьЗаписьВФайл(ЗаписьXML, "issuerRegNum", ЛОЖЬ);
				КонецЕсли;
				Продолжить;
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;	
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	
	
КонецПроцедуры

Процедура СформироватьБлок37_28Обеспечение(ЗаписьXML, Обеспечение, ДатаСобытия) Экспорт 
	 
	ЕстьВозмещение = ?(Обеспечение.ВозмещениеПринципалом, "1", "0");
	Если ЕстьВозмещение = "1" Тогда	
		ДобавитьЗаписьВФайл(ЗаписьXML, "exist_1", ИСТИНА); 
		ДобавитьЗаписьВФайл(ЗаписьXML, "sum", киФорматЧисла2(Обеспечение.СтоимостьПредметаДоговора));
		ДобавитьЗаписьВФайл(ЗаписьXML, "paidSum", киФорматЧисла2(Обеспечение.СтоимостьПредметаДоговора));
		ДобавитьЗаписьВФайл(ЗаписьXML, "compliance_1", ИСТИНА);
		ДобавитьЗаписьВФайл(ЗаписьXML, "calcDate", киФорматДатыXML(ДатаСобытия));
	Иначе 
		ДобавитьЗаписьВФайл(ЗаписьXML, "exist_0", Ложь);		
	КонецЕсли;
	
		
КонецПроцедуры

Процедура СформироватьШапкуИвентаКорректировка(ЗаписьXML, Префикс, КодСобытия, ДатаСобытия, Операция, СчетчикБлоковВФайле, ИмяИвента, СтартДата = Неопределено) Экспорт 
	
	ИмяИвента = ?(Префикс = "C", "FL_Event_", "UL_Event_");
	ИмяИвента = ИмяИвента + СтрЗаменить(Кодсобытия, ".", "_");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяИвента);
	
	ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
	ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(ДатаСобытия));
	ЗаписьXML.ЗаписатьАтрибут("operationCode", Строка(Операция));  
	ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0")); 
	Если ЗначениеЗаполнено(СтартДата) Тогда
		ЗаписьXML.ЗаписатьАтрибут("startDate", киФорматДатыXML(СтартДата));
	КонецЕсли;
	
КонецПроцедуры




#КонецОбласти



#КонецОбласти      


#Область ВспомогательныеДанные  

Функция ПроверкаНеобходимостиВыгружатьАдреса(КолонкаСобытий) Экспорт 
	ЕстьНеобходимость = Ложь;
	МассивСобытий = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСобытий, КолонкаСобытий, Истина); 
	Для Каждого мСобытие ИЗ МассивСобытий Цикл
		Если мСобытие.КодНБКИ = "2.11.2" ИЛИ мСобытие.КодНБКИ = "1.4" Тогда
			ЕстьНеобходимость = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат ЕстьНеобходимость;
КонецФункции 

&НаСервере
Функция ВыгрузитьАдресаКИФЛ(мДолжники) Экспорт 
	
	//ТаблицаАдресов = Новый ТаблицаЗначений();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КредитныеИсторииСтруктураАдреса.Должник КАК Должник,
	|	КредитныеИсторииСтруктураАдреса.ВидАдреса КАК ВидАдреса,
	|	КредитныеИсторииСтруктураАдреса.Индекс КАК Индекс,
	|	КредитныеИсторииСтруктураАдреса.КодСтраныОКСМ КАК КодСтраныОКСМ,
	|	КредитныеИсторииСтруктураАдреса.НаселенныйПунктОКАТО КАК НаселенныйПунктОКАТО,
	|	ВРЕГ(КредитныеИсторииСтруктураАдреса.НаименованиеИнойСтраны) КАК НаименованиеИнойСтраны,
	|	КредитныеИсторииСтруктураАдреса.НомерАдресаФИАС КАК НомерАдресаФИАС,
	|	ВРЕГ(КредитныеИсторииСтруктураАдреса.НаселенныйПунктНазвание) КАК НаселенныйПунктНазвание,
	|	ВРЕГ(КредитныеИсторииСтруктураАдреса.Улица) КАК Улица,
	|	ВРЕГ(КредитныеИсторииСтруктураАдреса.Дом) КАК Дом,
	|	ВРЕГ(КредитныеИсторииСтруктураАдреса.Владение) КАК Владение,
	|	ВРЕГ(КредитныеИсторииСтруктураАдреса.Корпус) КАК Корпус,
	|	ВРЕГ(КредитныеИсторииСтруктураАдреса.Строение) КАК Строение,
	|	КредитныеИсторииСтруктураАдреса.КвартираПомещениеОфис КАК КвартираПомещениеОфис
	|ИЗ
	|	РегистрСведений.КредитныеИсторииСтруктураАдреса КАК КредитныеИсторииСтруктураАдреса
	|ГДЕ
	|	КредитныеИсторииСтруктураАдреса.Должник В(&Должник)";
	
	Запрос.УстановитьПараметр("Должник", мДолжники);
	
	Возврат Запрос.Выполнить().Выгрузить();
	//
	//НаборЗаписей = РегистрыСведений.КредитныеИсторииСтруктураАдреса.СоздатьНаборЗаписей();   
	//НаборЗаписей.Отбор.Должник.Установить(мДолжники); 		
	//НаборЗаписей.Прочитать(); 
	//Для Каждого  стр из НаборЗаписей Цикл
	//	Запись =  стр;
	//КонецЦикла;	
КонецФункции 

&НаСервере
Функция ВыгрузитьАдресаКИЮЛ(мДолжники) Экспорт 
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	КредитныеИсторииСтруктураАдреса.Должник КАК Должник,
	//	|	КредитныеИсторииСтруктураАдреса.ВидАдреса КАК ВидАдреса,
	//	|	КредитныеИсторииСтруктураАдреса.Индекс КАК Индекс,
	//	|	КредитныеИсторииСтруктураАдреса.КодСтраныОКСМ КАК КодСтраныОКСМ,
	//	|	ВРЕГ(КредитныеИсторииСтруктураАдреса.НаименованиеИнойСтраны) КАК НаименованиеИнойСтраны,
	//	|	КредитныеИсторииСтруктураАдреса.НомерАдресаФИАС КАК НомерАдресаФИАС,
	//	|	КредитныеИсторииСтруктураАдреса.НаселенныйПунктОКАТО КАК НаселенныйПунктОКАТО,
	//	|	ВРЕГ(КредитныеИсторииСтруктураАдреса.НаселенныйПунктНазвание) КАК НаселенныйПунктНазвание,
	//	|	ВРЕГ(КредитныеИсторииСтруктураАдреса.Улица) КАК Улица,
	//	|	ВРЕГ(КредитныеИсторииСтруктураАдреса.Дом) КАК Дом,
	//	|	ВРЕГ(КредитныеИсторииСтруктураАдреса.Владение) КАК Владение,
	//	|	ВРЕГ(КредитныеИсторииСтруктураАдреса.Корпус) КАК Корпус,
	//	|	ВРЕГ(КредитныеИсторииСтруктураАдреса.Строение) КАК Строение,
	//	|	КредитныеИсторииСтруктураАдреса.КвартираПомещениеОфис КАК КвартираПомещениеОфис
	//	|ИЗ
	//	|	РегистрСведений.КредитныеИсторииСтруктураАдреса КАК КредитныеИсторииСтруктураАдреса
	//	|ГДЕ
	//	|	КредитныеИсторииСтруктураАдреса.Должник В(&Должник)
	//	|	И КредитныеИсторииСтруктураАдреса.ВидАдреса = &ВидАдреса";
	//
	//Запрос.УстановитьПараметр("Должник", мДолжники);
	//Запрос.УстановитьПараметр("ВидАдреса", Перечисления.КредитныеИсторииВидыАдресов.Юридический);
	//
	//Возврат Запрос.Выполнить().Выгрузить();  
	
	//НаборЗаписей = РегистрыСведений.КредитныеИсторииСтруктураАдреса.СоздатьНаборЗаписей();   
	//НаборЗаписей.Отбор.Сделка.Установить(мДолжники); 		
	//НаборЗаписей.Прочитать();   
	
	
	
КонецФункции 

Функция ВернутьСтруктуруБлокаПоНастройкам(ОбъектВх, Настройка, ИмяБлока, ИмяТаблицы) Экспорт 
	
	ИмяБлока = Лев(ИмяБлока, стрНайти(ИмяБлока, "_") - 1);
	СтрокаОтчета = ""; 
	ТЗ = Настройка[ИмяТаблицы].Выгрузить();
	Строки = УдалитьОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗ); 
	Результат = Новый Массив();
	Для Каждого Элемент Из Строки Цикл
		Результат.Добавить(Новый Структура("ИмяТаблицы, Поле, НомерПоказателя, ЗаполнятьПоУмолчанию, Значение, Функция, СтрокаДляПолученияЗначения, КодДопСвойства,
		//| ОбъектДопСвойства, СтрокаХранилище",ИмяТаблицы, Элемент.Поле, ?(Стрнайти(ИмяБлока, "C") > 0, Элемент.НомерПоказателяНБКИФЛ, Элемент.НомерПоказателяНБКИЮЛ), Элемент.ЗаполнятьПоУмолчанию, Элемент.Значение, Элемент.Функция,
		// При возврате показателей ЮЛ не формируются некоторые блоки 
		| ОбъектДопСвойства, СтрокаХранилище",ИмяТаблицы, Элемент.Поле, ?(Стрнайти(ИмяБлока, "C") > 0, Элемент.НомерПоказателяНБКИФЛ, Элемент.НомерПоказателяНБКИФЛ), Элемент.ЗаполнятьПоУмолчанию, Элемент.Значение, Элемент.Функция,
		Элемент.СтрокаДляПолученияЗначения, Элемент.КодДопСвойства, Элемент.ОбъектДопСвойства, Элемент.СтрокаХранилище));	
	КонецЦикла; 
	
	НастройкаНаПримереДокумента = Настройка.НаПримереДокумента;
	
	Если ТипЗнч(НастройкаНаПримереДокумента) = ТипЗнч(ОбъектВх) Тогда
		НаПримереДокумента = ОбъектВх;
	Иначе
		НаПримереДокумента = КредитныеИстории.ВернутьСвязанныйДокументТипа(ОбъектВх, ТипЗнч(НастройкаНаПримереДокумента));
	КонецЕсли;	 
	
	
	
	мсЗначения = Новый Массив;
	Для Каждого ТекСтрокаПодстановки Из Результат Цикл 
		Если СтрНайти(ТекСтрокаПодстановки.НомерПоказателя, ИмяБлока) = 0 Тогда
			Продолжить;
		КонецЕсли;	
		ТекНастройка = Новый Структура("Поле, НомерПоказателя, ЗаполнятьПоУмолчанию, Значение",
		ТекСтрокаПодстановки.Поле, ТекСтрокаПодстановки.НомерПоказателя, ТекСтрокаПодстановки.ЗаполнятьПоУмолчанию,); 
		
		Если ИмяТаблицы = "ПриобретательПраваТребования" Тогда
			ТекСтрокаПодстановки.СтрокаХранилище = стрЗаменить(ТекСтрокаПодстановки.СтрокаХранилище, "[Кредитор][Ссылка]", "[Ссылка]");
			ТекСтрокаПодстановки.СтрокаХранилище = стрЗаменить(ТекСтрокаПодстановки.СтрокаХранилище, "[Организация][Ссылка]", "[Ссылка]");
			ТекСтрокаПодстановки.СтрокаХранилище = стрЗаменить(ТекСтрокаПодстановки.СтрокаХранилище, "[Контрагент][Ссылка]", "[Ссылка]");
		КонецЕсли;	 
		
		
		Значение = УЭДСервер.ГенерацияЗначениия(ТекСтрокаПодстановки, Ложь, НаПримереДокумента, НаПримереДокумента);
		ФункцияОпределена = УЭДСервер.ФункцияУспешноОпределена(ТекСтрокаПодстановки);
		Если ФункцияОпределена Тогда
			Значение = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(ТекСтрокаПодстановки.Функция, НаПримереДокумента, Значение);
			Если ТипЗнч(Значение) <> Тип("ТаблицаЗначений") Тогда
				Значение = СокрЛП(Значение);
			КонецЕсли;	
			ТекНастройка.Значение = Значение;
			мсЗначения.Добавить(ТекНастройка);
		Иначе 	
			Значение = СокрЛП(Значение);
			ТекНастройка.Значение = Значение;
			мсЗначения.Добавить(ТекНастройка);
		КонецЕсли; 
	КонецЦикла;	  
	
	
	Возврат мсЗначения;
	
КонецФункции 

Функция киФорматДатыXML(дДата) Экспорт 	
	Возврат Формат(дДата, "ДФ=yyyy-MM-dd");
	
КонецФункции  

Функция киФорматЧисла3(чЧисло) Экспорт 	
	Возврат Формат(чЧисло, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧН=; ЧГ=");
	
КонецФункции

Функция киФорматЧисла2(чЧисло) Экспорт 	
	Возврат Формат(чЧисло, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=");
	
КонецФункции


Функция ПолучитьПризнакиОбеспечиваемогоОбязательства(ЗаписиСделки) Экспорт 
	ЗаписиОбеспечиваемоеОбязательство = Новый ТаблицаЗначений; 
	
	Если ЗначениеЗаполнено(ЗаписиСделки) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПризнакОбеспечиваемогоОбязательства.Ссылка КАК ПризнакОбеспечиваемогоОбязательства,
		|	ПризнакОбеспечиваемогоОбязательства.СделкаОбеспечиваемоеОбязательство КАК Сделка
		|ИЗ
		|	Документ.ПризнакОбеспечиваемогоОбязательства КАК ПризнакОбеспечиваемогоОбязательства
		|ГДЕ
		|	НЕ ПризнакОбеспечиваемогоОбязательства.ПометкаУдаления
		|	И ПризнакОбеспечиваемогоОбязательства.Проведен
		|	И ПризнакОбеспечиваемогоОбязательства.СделкаОбеспечиваемоеОбязательство В (&ОбъектУчета)";
		
		Запрос.УстановитьПараметр("ОбъектУчета", ЗаписиСделки.ВыгрузитьКолонку("Сделка"));
		
		ЗаписиОбеспечиваемоеОбязательство = Запрос.Выполнить().Выгрузить(); 
	КонецЕсли;
	
	Возврат ЗаписиОбеспечиваемоеОбязательство;
	
КонецФункции

Процедура СформироватьБлокФЛ252627(ЗаписьXML, Запись, мЗаписьСостояниеЗадолженности, ДопПараметры = Неопределено) Экспорт 
	Если мЗаписьСостояниеЗадолженности.Количество() > 0 Тогда 
		ЗаписьСостояниеЗадолженности = мЗаписьСостояниеЗадолженности[0];
	Иначе 
		ЗаписьСостояниеЗадолженности = 0;
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(Запись.СуммаСделки) Тогда
		Возврат;
	КонецЕсли;
	// ЭтоПрекращение - событие 2.5
	Строка22 = ДопПараметры.ПСК;
	Если НЕ ЗначениеЗаполнено(Строка22) Тогда
		Строка22 = Запись.СуммаСделки;
	КонецЕсли;	
	ЭтоПрекращение = (Запись.СобытиеКодНБКИ = "2.5");
	МассивСтрок = новый Массив;
	ДатаВозникновенияПросроченнойЗадолженности = Запись.ДатаВыходаНаПросрочку;
	Если Запись.ДатаВыходаНаПросрочку > Запись.ДатаСобытия ИЛИ НЕ ЗначениеЗаполнено(Запись.ДатаВыходаНаПросрочку) Тогда
		ДатаВозникновенияПросроченнойЗадолженности = Дата(1,1,1);  
	КонецЕсли;	
	
	ДатаРасчета = Запись.ДатаСобытия;
	Если Запись.СобытиеКодНБКИ = "2.11.2" Тогда
		ДатаРасчета = ?(ЗначениеЗаполнено(Запись.ДатаРасчетаПросроченнойЗадолженности), Запись.ДатаРасчетаПросроченнойЗадолженности, Запись.ДатаРасчетаСрочнойЗадолженности);
		ДатаРасчета = ?(ЗначениеЗаполнено(ДатаРасчета), ДатаРасчета, Запись.ДатаСобытия);
	КонецЕсли;
	
	ПризнакрасчетаПоПоследнемуПлатежу = ?((ТекущаяДатаСеанса() - ДатаРасчета > 30 * 86400), "0", "1");
	ДатаРасчета = ?(ПризнакрасчетаПоПоследнемуПлатежу = "0", Запись.ДатаСобытия, ДатаРасчета);  
	
	ПризнакПоПоследнемуПлатежуВОтчет = ?(Запись.СобытиеКодНБКИ  = "2.3" ИЛИ Запись.СобытиеКодНБКИ  = "2.11.2", ПризнакрасчетаПоПоследнемуПлатежу, ""); 
	//ДатаРасчетаВОтчет = ?(Запись.СобытиеКодНБКИ  = "2.3" ИЛИ Запись.СобытиеКодНБКИ  = "2.11.2", ДатаРасчета, "");
	
	БлокПризнакРасчетаДатаРасчета(ЗаписьXML, ПризнакПоПоследнемуПлатежуВОтчет, ДатаРасчета);
	
	
	Если ЭтоПрекращение Тогда
		ДопПараметры.ТекущаяЗадолженность = 0;	
		ДопПараметры.ЕстьЗадолженность = Ложь;
		FL_25_Debt(ЗаписьXML, Запись, ЗаписьСостояниеЗадолженности, ДопПараметры); 
		FL_26_DebtDue(ЗаписьXML, Запись, ЗаписьСостояниеЗадолженности, ДопПараметры);
		FL_27_DebtOverdue(ЗаписьXML, Запись, ЗаписьСостояниеЗадолженности, ДопПараметры); 
	ИначеЕсли ЗаписьСостояниеЗадолженности = 0 Тогда
		ДопПараметры.ТекущаяЗадолженность = 0;	
		ДопПараметры.ЕстьЗадолженность = Ложь;
		FL_25_Debt(ЗаписьXML, Запись, ЗаписьСостояниеЗадолженности, ДопПараметры); 
		FL_26_DebtDue(ЗаписьXML, Запись, ЗаписьСостояниеЗадолженности, ДопПараметры);
		FL_27_DebtOverdue(ЗаписьXML, Запись, ЗаписьСостояниеЗадолженности, ДопПараметры);
	
	Иначе	 		
		Если ЗначениеЗаполнено(ЗаписьСостояниеЗадолженности.СуммаДООстаток) Тогда 
			ЕстьЗадолженность = Истина;
			ДопПараметры.ТекущаяЗадолженность = ЗаписьСостояниеЗадолженности.СуммаДООстаток;
			ЕстьЗадолженность = ?(ЗаписьСостояниеЗадолженности.СуммаДООстаток <= 0, ЛОЖЬ, ИСТИНА);
			ДопПараметры.ЕстьЗадолженность = ЕстьЗадолженность;
			FL_25_Debt(ЗаписьXML, Запись, ЗаписьСостояниеЗадолженности, ДопПараметры);
		Иначе  
			ДопПараметры.ТекущаяЗадолженность = 0;
			ЕстьЗадолженность = Ложь;   
			ДопПараметры.ЕстьЗадолженность = ЕстьЗадолженность;
			FL_25_Debt(ЗаписьXML, Запись, ЗаписьСостояниеЗадолженности, ДопПараметры);
			
		КонецЕсли;  
		
		FL_26_DebtDue(ЗаписьXML, Запись, ЗаписьСостояниеЗадолженности, ДопПараметры);
		FL_27_DebtOverdue(ЗаписьXML, Запись, ЗаписьСостояниеЗадолженности, ДопПараметры);
		
		
		ДопПараметры.ЕстьЗадолженность = ЕстьЗадолженность;
	КонецЕсли;
КонецПроцедуры  

Процедура СформироватьБлокЮЛ171819(ЗаписьXML, Запись, ЗаписьСостояниеЗадолженности, ДопПараметры = Неопределено) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(Запись.СуммаСделки) Тогда
		Возврат;
	КонецЕсли;
	// ЭтоПрекращение - событие 2.5
	ЭтоПрекращение = (Запись.СобытиеКодНБКИ = "2.5");
	МассивСтрок = новый Массив;
	ДатаВозникновенияПросроченнойЗадолженности = Запись.ДатаВыходаНаПросрочку;
	Если Запись.ДатаВыходаНаПросрочку > Запись.ДатаСобытия ИЛИ НЕ ЗначениеЗаполнено(Запись.ДатаВыходаНаПросрочку) Тогда
		ДатаВозникновенияПросроченнойЗадолженности = Дата(1,1,1);  
	КонецЕсли;	
	
	ДатаРасчета = Запись.ДатаСобытия;
	Если Запись.СобытиеКодНБКИ = "2.11.2" Тогда
		ДатаРасчета = ?(ЗначениеЗаполнено(Запись.ДатаРасчетаПросроченнойЗадолженности), Запись.ДатаРасчетаПросроченнойЗадолженности, Запись.ДатаРасчетаСрочнойЗадолженности);
		ДатаРасчета = ?(ЗначениеЗаполнено(ДатаРасчета), ДатаРасчета, Запись.ДатаСобытия);
	КонецЕсли;
	
	ПризнакрасчетаПоПоследнемуПлатежу = ?((ТекущаяДатаСеанса() - ДатаРасчета > 30 * 86400), "0", "1");
	ДатаРасчета = ?(ПризнакрасчетаПоПоследнемуПлатежу = "0", Запись.ДатаСобытия, ДатаРасчета);  
	
	ПризнакПоПоследнемуПлатежуВОтчет = ?(Запись.СобытиеКодНБКИ  = "2.3" ИЛИ Запись.СобытиеКодНБКИ  = "2.11.2", ПризнакрасчетаПоПоследнемуПлатежу, ""); 
	ДатаРасчетаВОтчет = ?(Запись.СобытиеКодНБКИ  = "2.3" ИЛИ Запись.СобытиеКодНБКИ  = "2.11.2", ДатаРасчета, "");
	
	БлокПризнакРасчетаДатаРасчета(ЗаписьXML, ПризнакПоПоследнемуПлатежуВОтчет, ДатаРасчетаВОтчет);
	
	
	Если ЭтоПрекращение Тогда
		ДопПараметры.ТекущаяЗадолженность = 0;	
		ДопПараметры.ЕстьЗадолженность = Ложь;
		UL_17_Debt(ЗаписьXML, Запись, ЗаписьСостояниеЗадолженности, ДопПараметры); 
		UL_18_DebtDue(ЗаписьXML, Запись, ЗаписьСостояниеЗадолженности, ДопПараметры);
		UL_19_DebtOverdue(ЗаписьXML, Запись, ЗаписьСостояниеЗадолженности, ДопПараметры);
	Иначе	 		
		Если ЗначениеЗаполнено(Запись.СуммаДООстаток) Тогда 
			ЕстьЗадолженность = Истина;
			ДопПараметры.ТекущаяЗадолженность = Запись.СуммаДООстаток;
			ЕстьЗадолженность = ?(Запись.СуммаДООстаток <= 0, ЛОЖЬ, ИСТИНА);
			ДопПараметры.ЕстьЗадолженность = ЕстьЗадолженность;
			UL_17_Debt(ЗаписьXML, Запись, ЗаписьСостояниеЗадолженности, ДопПараметры);
		Иначе  
			ДопПараметры.ТекущаяЗадолженность = 0;
			ЕстьЗадолженность = Ложь;   
			ДопПараметры.ЕстьЗадолженность = ЕстьЗадолженность;
			UL_17_Debt(ЗаписьXML, Запись, ЗаписьСостояниеЗадолженности, ДопПараметры);
			
		КонецЕсли;  
		
		UL_18_DebtDue(ЗаписьXML, Запись, ЗаписьСостояниеЗадолженности, ДопПараметры);
		UL_19_DebtOverdue(ЗаписьXML, Запись, ЗаписьСостояниеЗадолженности, ДопПараметры);
		
		ДопПараметры.ЕстьЗадолженность = ЕстьЗадолженность;
	КонецЕсли;
КонецПроцедуры    

Функция РассчитатьОстаткиНаДатыСобытий(ТаблицаИзмененийСделки) Экспорт 
	
	ТаблицаОстатковЗадолженности = Новый ТаблицаЗначений;   
	
	ТаблицаОстатковЗадолженности.Колонки.Добавить("Объект");
	ТаблицаОстатковЗадолженности.Колонки.Добавить("СуммаДООстаток");
	ТаблицаОстатковЗадолженности.Колонки.Добавить("ОсновнойДолгДО");
	ТаблицаОстатковЗадолженности.Колонки.Добавить("ПроцентыДО"); 
	ТаблицаОстатковЗадолженности.Колонки.Добавить("Иное");
	ТаблицаОстатковЗадолженности.Колонки.Добавить("ДатаРасчета");

	Если Не ЗначениеЗаполнено(ТаблицаИзмененийСделки) Тогда
		возврат ТаблицаОстатковЗадолженности;
	КонецЕсли;			
	
	мОбъекУчета = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(мОбъекУчета, ТаблицаИзмененийСделки.ВыгрузитьКолонку("Сделка"), Истина);
	мДатыРасчета = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(мДатыРасчета, ТаблицаИзмененийСделки.ВыгрузитьКолонку("ДатаСобытия"), Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ЗадолженностьПоОбъектамОстатки.ОсновнойДолгДООстаток КАК ОсновнойДолгДО,
	//|	ЗадолженностьПоОбъектамОстатки.ПроцентыДООстаток КАК ПроцентыДО,
	//|	ЗадолженностьПоОбъектамОстатки.ШтрафыДООстаток + ЗадолженностьПоОбъектамОстатки.ПениДООстаток + ЗадолженностьПоОбъектамОстатки.Составляющая1ДООстаток + ЗадолженностьПоОбъектамОстатки.Составляющая2ДООстаток + ЗадолженностьПоОбъектамОстатки.Составляющая3ДООстаток + ЗадолженностьПоОбъектамОстатки.Составляющая4ДООстаток + ЗадолженностьПоОбъектамОстатки.Составляющая5ДООстаток + ЗадолженностьПоОбъектамОстатки.Составляющая6ДООстаток + ЗадолженностьПоОбъектамОстатки.Составляющая7ДООстаток + ЗадолженностьПоОбъектамОстатки.Составляющая8ДООстаток КАК Иное,
	//|	""Внесудебная"" КАК ТипЗадолженности,
	//|	ЗадолженностьПоОбъектамОстатки.Объект КАК Объект,
	//|	ЗадолженностьПоОбъектамОстатки.СуммаДООстаток КАК СуммаДООстаток
	//|ИЗ
	//|	РегистрНакопления.ЗадолженностьПоОбъектам.Остатки(&ДатаРасчета, Объект В (&ОбъектУчета)) КАК ЗадолженностьПоОбъектамОстатки";
	//|
	//|ОБЪЕДИНИТЬ
	//|
	//|ВЫБРАТЬ
	//|	РасчетыПоДоговорамОстатки.ОсновнойДолгОстаток,
	//|	РасчетыПоДоговорамОстатки.ПроцентыОстаток + РасчетыПоДоговорамОстатки.ПроцентыНачисленныеВПериодПросрочкиОстаток,
	//|	РасчетыПоДоговорамОстатки.ШтрафыОстаток + РасчетыПоДоговорамОстатки.ПениОстаток,
	//|	""Внесудебная"",
	//|	РасчетыПоДоговорамОстатки.Займ,
	//|	РасчетыПоДоговорамОстатки.ОсновнойДолгОстаток + РасчетыПоДоговорамОстатки.ШтрафыОстаток + РасчетыПоДоговорамОстатки.ПениОстаток + РасчетыПоДоговорамОстатки.ПроцентыОстаток + РасчетыПоДоговорамОстатки.ПроцентыНачисленныеВПериодПросрочкиОстаток
	//|ИЗ
	//|	РегистрНакопления.РасчетыПоДоговорам.Остатки(&ДатаРасчета, Займ В (&ОбъектУчета)) КАК РасчетыПоДоговорамОстатки
	//|
	//|ОБЪЕДИНИТЬ
	//|
	//|ВЫБРАТЬ
	//|	ЗадолженностьПоОбъектамВнесудебнаяОстатки.ОсновнойДолгДООстаток,
	//|	ЗадолженностьПоОбъектамВнесудебнаяОстатки.ПроцентыДООстаток,
	//|	ЗадолженностьПоОбъектамВнесудебнаяОстатки.ШтрафыДООстаток + ЗадолженностьПоОбъектамВнесудебнаяОстатки.ПениДООстаток + ЗадолженностьПоОбъектамВнесудебнаяОстатки.Составляющая1ДООстаток + ЗадолженностьПоОбъектамВнесудебнаяОстатки.Составляющая2ДООстаток + ЗадолженностьПоОбъектамВнесудебнаяОстатки.Составляющая3ДООстаток + ЗадолженностьПоОбъектамВнесудебнаяОстатки.Составляющая4ДООстаток + ЗадолженностьПоОбъектамВнесудебнаяОстатки.Составляющая5ДООстаток + ЗадолженностьПоОбъектамВнесудебнаяОстатки.Составляющая6ДООстаток + ЗадолженностьПоОбъектамВнесудебнаяОстатки.Составляющая7ДООстаток + ЗадолженностьПоОбъектамВнесудебнаяОстатки.Составляющая8ДООстаток,
	//|	""Внесудебная"",
	//|	ЗадолженностьПоОбъектамВнесудебнаяОстатки.Объект,
	//|	ЗадолженностьПоОбъектамВнесудебнаяОстатки.СуммаДООстаток
	//|ИЗ
	//|	РегистрНакопления.ЗадолженностьПоОбъектамВнесудебная.Остатки(&ДатаРасчета, Объект В (&ОбъектУчета)) КАК ЗадолженностьПоОбъектамВнесудебнаяОстатки
	//|
	//|ОБЪЕДИНИТЬ
	//|
	//|ВЫБРАТЬ
	//|	0,
	//|	0,
	//|	0,
	//|	ЗадолженностьПоСудебнымРешениямОстатки.ТипЗадолженности,
	//|	ЗадолженностьПоСудебнымРешениямОстатки.Займ,
	//|	ЗадолженностьПоСудебнымРешениямОстатки.СуммаОстаток
	//|ИЗ
	//|	РегистрНакопления.ЗадолженностьПоСудебнымРешениям.Остатки(&ДатаРасчета, Займ В (&ОбъектУчета)) КАК ЗадолженностьПоСудебнымРешениямОстатки";  
	// Проводить расчеты на основании остатков
	"ВЫБРАТЬ
	|	ЗадолженностьПоОбъектамОстатки.ОсновнойДолгДООстаток КАК ОсновнойДолгДО,
	|	ЗадолженностьПоОбъектамОстатки.ПроцентыДООстаток КАК ПроцентыДО,
	|	ЗадолженностьПоОбъектамОстатки.ШтрафыДООстаток + ЗадолженностьПоОбъектамОстатки.ПениДООстаток + ЗадолженностьПоОбъектамОстатки.Составляющая1ДООстаток + ЗадолженностьПоОбъектамОстатки.Составляющая2ДООстаток + ЗадолженностьПоОбъектамОстатки.Составляющая3ДООстаток + ЗадолженностьПоОбъектамОстатки.Составляющая4ДООстаток + ЗадолженностьПоОбъектамОстатки.Составляющая5ДООстаток + ЗадолженностьПоОбъектамОстатки.Составляющая6ДООстаток + ЗадолженностьПоОбъектамОстатки.Составляющая7ДООстаток + ЗадолженностьПоОбъектамОстатки.Составляющая8ДООстаток КАК Иное,
	|	""Внесудебная"" КАК ТипЗадолженности,
	|	ЗадолженностьПоОбъектамОстатки.Объект КАК Объект,
	|	ЗадолженностьПоОбъектамОстатки.СуммаДООстаток КАК СуммаДООстаток
	|ИЗ
	|	РегистрНакопления.ЗадолженностьПоОбъектам.Остатки(&ДатаРасчета, Объект В (&ОбъектУчета)) КАК ЗадолженностьПоОбъектамОстатки";
		
	Для Каждого дДата из мДатыРасчета Цикл
		
		Запрос.УстановитьПараметр("ОбъектУчета", мОбъекУчета);
		Запрос.УстановитьПараметр("ДатаРасчета", дДата + 1);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Если РезультатЗапроса.Количество() > 0 Тогда
			Для каждого СТР из РезультатЗапроса Цикл  
				Если Стр.ТипЗадолженности = "Внесудебная" Тогда
					Если Стр.Иное < 0 Тогда
						Стр.Иное = 0;
					КонецЕсли;	
					Если Стр.ОсновнойДолгДО < 0 Тогда
						Стр.ОсновнойДолгДО = 0;	
					КонецЕсли;	
					//Если Стр.ПроцентыДО < 0 Тогда
					// Проверка погашения процентов
					Если Стр.ПроцентыДО < 0 ИЛИ (Стр.ОсновнойДолгДО + Стр.ПроцентыДО) < 0 Тогда
						Стр.ПроцентыДО = 0;
					ИначеЕсли (Стр.ОсновнойДолгДО + Стр.ПроцентыДО) > 0 Тогда
						Стр.СуммаДООстаток = (Стр.ОсновнойДолгДО + Стр.ПроцентыДО) + Стр.Иное;
					КонецЕсли;	
					//Если Стр.СуммаДООстаток <= 0 Тогда
					// Списание ГП
					Если Стр.СуммаДООстаток < 0 ИЛИ Стр.СуммаДООстаток = 2000.00 Тогда
						Стр.СуммаДООстаток = 0;
						Стр.Иное = 0;
						Стр.ПроцентыДО = 0;  
					КонецЕсли;		
				КонецЕсли;
				Если СТР.ТипЗадолженности = ПланыВидовХарактеристик.ТипыЗадолженностиПоРешению.ОсновнойДолг Тогда
					Стр.ОсновнойДолгДО = стр.СуммаДООстаток;
					Продолжить;
				КонецЕсли;
				
				Если СТР.ТипЗадолженности = ПланыВидовХарактеристик.ТипыЗадолженностиПоРешению.Проценты Тогда
					Стр.ПроцентыДО = стр.СуммаДООстаток;
					Продолжить;
				КонецЕсли;
				
				Если СТР.ТипЗадолженности <> ПланыВидовХарактеристик.ТипыЗадолженностиПоРешению.Проценты Тогда 
					Если СТР.ТипЗадолженности <> ПланыВидовХарактеристик.ТипыЗадолженностиПоРешению.ОсновнойДолг Тогда
						Если Стр.ТипЗадолженности <> "Внесудебная" Тогда
							Стр.Иное = стр.СуммаДООстаток;   
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			РезультатЗапроса.Свернуть("Объект", "СуммаДООстаток, ОсновнойДолгДО, ПроцентыДО, Иное"); 
			РезультатЗапроса.Колонки.Добавить("ДатаРасчета");
			Для каждого Стр из РезультатЗапроса Цикл
				стр.ДатаРасчета =  дДата;
			КонецЦикла;
			
			Если ТаблицаОстатковЗадолженности.Количество() = 0 Тогда 
				ТаблицаОстатковЗадолженности = РезультатЗапроса;
			Иначе				
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса, ТаблицаОстатковЗадолженности);
			КонецЕсли;
		Иначе  
			Продолжить;	
		КонецЕсли; 
	КонецЦикла; 
	
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//"ВЫБРАТЬ * ПОМЕСТИТЬ втТ1 ИЗ &Т1 КАК Т1;
	//|ВЫБРАТЬ * ПОМЕСТИТЬ втТ2 ИЗ &Т2 КАК Т2;
	//|ВЫБРАТЬ 
	//|	* 
	//|ИЗ втТ1 Левое СОЕДИНЕНИЕ втТ2 ПО втТ1.Сделка = втТ2.Объект И втТ1.ДатаСобытия = втТ2.ДатаРасчета";
	//
	//Запрос.УстановитьПараметр("Т1", ТаблицаИзмененийСделки);
	//Запрос.УстановитьПараметр("Т2", ТаблицаОстатковЗадолженности);
	//
	//РезультирующаяТаблица = Запрос.Выполнить().Выгрузить();
	
	
	Возврат ТаблицаОстатковЗадолженности;
КонецФункции  

Функция СравнитьАдресаФЛ(стрРегистрация, стрФактический) Экспорт 
	Если стрРегистрация = Неопределено ИЛИ  стрФактический = Неопределено Тогда
		Возврат "1";
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(стрРегистрация.НомерАдресаФИАС) И  ЗначениеЗаполнено(стрФактический.НомерАдресаФИАС) Тогда
		Если стрРегистрация.НомерАдресаФИАС =  стрФактический.НомерАдресаФИАС Тогда
			Возврат "0";
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(стрРегистрация.Индекс) И ЗначениеЗаполнено(стрФактический.Индекс) Тогда
		Если стрРегистрация.Индекс =  стрФактический.Индекс Тогда
			Возврат "0";
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат "1";
	
КонецФункции  

Функция РассчитатьОплатыНаДатыСобытий(ТаблицаИзмененийСделки, ФормироватьПринудительныйПлатеж) Экспорт  
	ТаблицаОплат = Новый ТаблицаЗначений; 
	 
	ТаблицаОплат.Колонки.Добавить("ОбъектВх");
	ТаблицаОплат.Колонки.Добавить("ДатаПлатежа");  
	ТаблицаОплат.Колонки.Добавить("ДатаСобытия");
	ТаблицаОплат.Колонки.Добавить("ЭтоФактическийПлатеж");
	ТаблицаОплат.Колонки.Добавить("СуммаПоследнегоПлатежа"); 
	ТаблицаОплат.Колонки.Добавить("ОДПоследнегоПлатежа");
	ТаблицаОплат.Колонки.Добавить("ПроцентыПоследнегоПлатежа");
	ТаблицаОплат.Колонки.Добавить("ИноеПоследнегоПлатежа");
	ТаблицаОплат.Колонки.Добавить("СуммаВсехОплат");
	ТаблицаОплат.Колонки.Добавить("ОДВсехОплат"); 
	ТаблицаОплат.Колонки.Добавить("ПроцентыВсехОплат"); 
	ТаблицаОплат.Колонки.Добавить("ИноеВсехОплат");
	ТаблицаОплат.Колонки.Добавить("СуммаПоследнегоПлатежа30дн");
	ТаблицаОплат.Колонки.Добавить("СуммаОплат24мес");

	
	Если Не ЗначениеЗаполнено(ТаблицаИзмененийСделки) Тогда
		Возврат ТаблицаОплат;
	КонецЕсли;	
	
	мОбъекУчета = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(мОбъекУчета, ТаблицаИзмененийСделки.ВыгрузитьКолонку("Сделка"), Истина);
	мДатыРасчета = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(мДатыРасчета, ТаблицаИзмененийСделки.ВыгрузитьКолонку("ДатаСобытия"), Истина);
	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗадолженностьПоСудебнымРешениям.Период КАК Период,
	|	ЗадолженностьПоСудебнымРешениям.Займ КАК Займ,
	|	ЕСТЬNULL(ЗадолженностьПоСудебнымРешениям1.Сумма, 0) + ЕСТЬNULL(ЗадолженностьПоСудебнымРешениям2.Сумма, 0) + ЕСТЬNULL(ЗадолженностьПоСудебнымРешениям3.Сумма, 0) КАК СуммаДО,
	|	ЗадолженностьПоСудебнымРешениям1.Сумма КАК ОсновнойДолгДО,
	|	ЗадолженностьПоСудебнымРешениям2.Сумма КАК ПроцентыДО,
	|	ЗадолженностьПоСудебнымРешениям3.Сумма КАК Иное
	|ПОМЕСТИТЬ СудебныеПлатежи
	|ИЗ
	|	РегистрНакопления.ЗадолженностьПоСудебнымРешениям КАК ЗадолженностьПоСудебнымРешениям
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗадолженностьПоСудебнымРешениям КАК ЗадолженностьПоСудебнымРешениям1
	|		ПО ЗадолженностьПоСудебнымРешениям.Период = ЗадолженностьПоСудебнымРешениям1.Период
	|			И ЗадолженностьПоСудебнымРешениям.Займ = ЗадолженностьПоСудебнымРешениям1.Займ
	|			И (ТИПЗНАЧЕНИЯ(ЗадолженностьПоСудебнымРешениям.Регистратор) = ТИП(Документ.ПоступлениеПлатежа))
	|			И (ЗадолженностьПоСудебнымРешениям1.ТипЗадолженности = &ТипОД)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗадолженностьПоСудебнымРешениям КАК ЗадолженностьПоСудебнымРешениям2
	|		ПО ЗадолженностьПоСудебнымРешениям.Период = ЗадолженностьПоСудебнымРешениям2.Период
	|			И ЗадолженностьПоСудебнымРешениям.Займ = ЗадолженностьПоСудебнымРешениям2.Займ
	|			И (ТИПЗНАЧЕНИЯ(ЗадолженностьПоСудебнымРешениям.Регистратор) = ТИП(Документ.ПоступлениеПлатежа))
	|			И (ЗадолженностьПоСудебнымРешениям2.ТипЗадолженности = &ТипПроценты)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗадолженностьПоСудебнымРешениям КАК ЗадолженностьПоСудебнымРешениям3
	|		ПО ЗадолженностьПоСудебнымРешениям.Период = ЗадолженностьПоСудебнымРешениям3.Период
	|			И ЗадолженностьПоСудебнымРешениям.Займ = ЗадолженностьПоСудебнымРешениям3.Займ
	|			И (НЕ ЗадолженностьПоСудебнымРешениям3.ТипЗадолженности В (&ТипыОсновное))
	|			И (ТИПЗНАЧЕНИЯ(ЗадолженностьПоСудебнымРешениям.Регистратор) = ТИП(Документ.ПоступлениеПлатежа))
	|ГДЕ
	|	ЗадолженностьПоСудебнымРешениям.Период <= &ДатаПлатежа
	|	И ЗадолженностьПоСудебнымРешениям.Займ В(&ОбъектВх)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Займ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадолженностьПоОбъектам.Период КАК ДатаПлатежа,
	|	ЗадолженностьПоОбъектам.Объект КАК ОбъектВх,
	|	ЗадолженностьПоОбъектам.СуммаДО КАК СуммаДО,
	|	ЗадолженностьПоОбъектам.ОсновнойДолгДО КАК ОсновнойДолгДО,
	|	ЗадолженностьПоОбъектам.ПроцентыДО КАК ПроцентыДО,
	|	ЗадолженностьПоОбъектам.ШтрафыДО + ЗадолженностьПоОбъектам.ПениДО + ЗадолженностьПоОбъектам.Составляющая1ДО + ЗадолженностьПоОбъектам.Составляющая2ДО + ЗадолженностьПоОбъектам.Составляющая3ДО + ЗадолженностьПоОбъектам.Составляющая4ДО + ЗадолженностьПоОбъектам.Составляющая5ДО + ЗадолженностьПоОбъектам.Составляющая6ДО + ЗадолженностьПоОбъектам.Составляющая7ДО + ЗадолженностьПоОбъектам.Составляющая8ДО КАК Иное
	|ПОМЕСТИТЬ Платежи
	|ИЗ
	|	РегистрНакопления.ЗадолженностьПоОбъектам КАК ЗадолженностьПоОбъектам
	|ГДЕ
	|	ЗадолженностьПоОбъектам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ЗадолженностьПоОбъектам.Объект В(&ОбъектВх)
	|	И ЗадолженностьПоОбъектам.Период <= &ДатаПлатежа
	|	И ТИПЗНАЧЕНИЯ(ЗадолженностьПоОбъектам.Регистратор) В (ТИП(Документ.АктуализацияЗадолженности), ТИП(Документ.ПоступлениеПлатежей))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РасчетыПоДоговорам.Период,
	|	РасчетыПоДоговорам.Займ,
	|	РасчетыПоДоговорам.ОсновнойДолг + РасчетыПоДоговорам.Штрафы + РасчетыПоДоговорам.Пени + РасчетыПоДоговорам.Проценты + РасчетыПоДоговорам.ПроцентыНачисленныеВПериодПросрочки,
	|	РасчетыПоДоговорам.ОсновнойДолг,
	|	РасчетыПоДоговорам.Проценты + РасчетыПоДоговорам.ПроцентыНачисленныеВПериодПросрочки,
	|	РасчетыПоДоговорам.Штрафы + РасчетыПоДоговорам.Пени
	|ИЗ
	|	РегистрНакопления.РасчетыПоДоговорам КАК РасчетыПоДоговорам
	|ГДЕ
	|	РасчетыПоДоговорам.ВидДвиженияЗадолженности = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПорасчетам.Оплата)
	|	И РасчетыПоДоговорам.Займ В(&ОбъектВх)
	|	И РасчетыПоДоговорам.Период <= &ДатаПлатежа
	|	И ТИПЗНАЧЕНИЯ(РасчетыПоДоговорам.Регистратор) В (ТИП(Документ.ДоговорМикрозайма), ТИП(Документ.РеструктуризацияМикрозайма))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗадолженностьПоОбъектамВнесудебная.Период,
	|	ЗадолженностьПоОбъектамВнесудебная.Объект,
	|	ЗадолженностьПоОбъектамВнесудебная.СуммаДО,
	|	ЗадолженностьПоОбъектамВнесудебная.ОсновнойДолгДО,
	|	ЗадолженностьПоОбъектамВнесудебная.ПроцентыДО,
	|	ЗадолженностьПоОбъектамВнесудебная.ШтрафыДО + ЗадолженностьПоОбъектамВнесудебная.ПениДО + ЗадолженностьПоОбъектамВнесудебная.Составляющая1ДО + ЗадолженностьПоОбъектамВнесудебная.Составляющая2ДО + ЗадолженностьПоОбъектамВнесудебная.Составляющая3ДО + ЗадолженностьПоОбъектамВнесудебная.Составляющая4ДО + ЗадолженностьПоОбъектамВнесудебная.Составляющая5ДО + ЗадолженностьПоОбъектамВнесудебная.Составляющая6ДО + ЗадолженностьПоОбъектамВнесудебная.Составляющая7ДО + ЗадолженностьПоОбъектамВнесудебная.Составляющая8ДО
	|ИЗ
	|	РегистрНакопления.ЗадолженностьПоОбъектамВнесудебная КАК ЗадолженностьПоОбъектамВнесудебная
	|ГДЕ
	|	ЗадолженностьПоОбъектамВнесудебная.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ЗадолженностьПоОбъектамВнесудебная.Объект В(&ОбъектВх)
	|	И ЗадолженностьПоОбъектамВнесудебная.Период <= &ДатаПлатежа
	|	И ТИПЗНАЧЕНИЯ(ЗадолженностьПоОбъектамВнесудебная.Регистратор) В (ТИП(Документ.ПоступлениеПлатежа))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СудебныеПлатежи.Период,
	|	СудебныеПлатежи.Займ,
	|	СудебныеПлатежи.СуммаДО,
	|	СудебныеПлатежи.ОсновнойДолгДО,
	|	СудебныеПлатежи.ПроцентыДО,
	|	СудебныеПлатежи.Иное
	|ИЗ
	|	СудебныеПлатежи КАК СудебныеПлатежи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Платежи.ДатаПлатежа КАК ДатаПлатежа,
	|	Платежи.ОбъектВх КАК ОбъектВх,
	|	СУММА(Платежи.СуммаДО) КАК СуммаДО,
	|	СУММА(Платежи.ОсновнойДолгДО) КАК ОсновнойДолгДО,
	|	СУММА(Платежи.ПроцентыДО) КАК ПроцентыДО,
	|	СУММА(Платежи.Иное) КАК Иное
	|ПОМЕСТИТЬ ПлатежиСгруппированныеПоДате
	|ИЗ
	|	Платежи КАК Платежи
	|
	|СГРУППИРОВАТЬ ПО
	|	Платежи.ДатаПлатежа,
	|	Платежи.ОбъектВх
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектВх,
	|	ДатаПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КредитныеИсторииДанныеСделки.Сделка КАК Сделка,
	|	МАКСИМУМ(КредитныеИсторииДанныеСделки.ДатаВыходаНаПросрочку) КАК ДатаВыходаНаПросрочку
	|ПОМЕСТИТЬ РасчетДатыВыходаНапросрочку
	|ИЗ
	|	РегистрСведений.КредитныеИсторииДанныеСделки КАК КредитныеИсторииДанныеСделки
	|ГДЕ
	|	КредитныеИсторииДанныеСделки.Сделка В(&ОбъектВх)
	|
	|СГРУППИРОВАТЬ ПО
	|	КредитныеИсторииДанныеСделки.Сделка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сделка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлатежиСгруппированныеПоДате.ОбъектВх КАК ОбъектВх,
	|	ВЫБОР
	|		КОГДА ПлатежиСгруппированныеПоДате.ДатаПлатежа <= ДОБАВИТЬКДАТЕ(РасчетДатыВыходаНапросрочку.ДатаВыходаНаПросрочку, ДЕНЬ, 30)
	|				И РАЗНОСТЬДАТ(ПлатежиСгруппированныеПоДате.ДатаПлатежа, ДОБАВИТЬКДАТЕ(&ДатаПлатежа, ДЕНЬ, -30), МЕСЯЦ) <= 24
	|			ТОГДА ""ДА""
	|		ИНАЧЕ ""НЕТ""
	|	КОНЕЦ КАК Двагода,
	|	ПлатежиСгруппированныеПоДате.ДатаПлатежа КАК ДатаПлатежа,
	|	ЕСТЬNULL(ПлатежиСгруппированныеПоДате.СуммаДО, 0) КАК СуммаДО,
	|	ЕСТЬNULL(ПлатежиСгруппированныеПоДате.ОсновнойДолгДО, 0) КАК ОсновнойДолгДО,
	|	ЕСТЬNULL(ПлатежиСгруппированныеПоДате.ПроцентыДО, 0) КАК ПроцентыДО,
	|	ЕСТЬNULL(ПлатежиСгруппированныеПоДате.Иное, 0) КАК Иное,
	|	РасчетДатыВыходаНапросрочку.ДатаВыходаНаПросрочку КАК ДатаВыходаНаПросрочку,
	|	ВЫБОР
	|		КОГДА ПлатежиСгруппированныеПоДате.ДатаПлатежа > ДОБАВИТЬКДАТЕ(РасчетДатыВыходаНапросрочку.ДатаВыходаНаПросрочку, ДЕНЬ, 30)
	|			ТОГДА ЕСТЬNULL(ПлатежиСгруппированныеПоДате.СуммаДО, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПоследнийПлатеж30,
	|	&ДатаПлатежа КАК ДатаРасчета2813
	|ИЗ
	|	ПлатежиСгруппированныеПоДате КАК ПлатежиСгруппированныеПоДате
	|		ЛЕВОЕ СОЕДИНЕНИЕ РасчетДатыВыходаНапросрочку КАК РасчетДатыВыходаНапросрочку
	|		ПО ПлатежиСгруппированныеПоДате.ОбъектВх = РасчетДатыВыходаНапросрочку.Сделка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПлатежа УБЫВ
	|ИТОГИ
	|	СУММА(СуммаДО),
	|	СУММА(ОсновнойДолгДО),
	|	СУММА(ПроцентыДО),
	|	СУММА(Иное)
	|ПО
	|	ОбъектВх,
	|	Двагода";
	
	Если ФормироватьПринудительныйПлатеж Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".Регистратор) В (ТИП(", ".Регистратор) В (ТИП(Документ.КорректировкаРегистров), ТИП(Документ.СведенияОбИзмененииДоговора), ТИП(");
	КонецЕсли;
	
	МассивОсновное = Новый Массив;
	МассивОсновное.Добавить(ПланыВидовХарактеристик.ТипыЗадолженностиПоРешению.ОсновнойДолг);
	МассивОсновное.Добавить(ПланыВидовХарактеристик.ТипыЗадолженностиПоРешению.Проценты);
	
	Запрос.УстановитьПараметр("ТипОД", ПланыВидовХарактеристик.ТипыЗадолженностиПоРешению.ОсновнойДолг);
	Запрос.УстановитьПараметр("ТипПроценты", ПланыВидовХарактеристик.ТипыЗадолженностиПоРешению.Проценты);
	Запрос.УстановитьПараметр("ТипыОсновное", МассивОсновное); 
	
	
	Для Каждого ДатаРасчета из мДатыРасчета Цикл
		
		//ДатаРасчета = НачалоДня(ДатаРасчета);
		
		Запрос.УстановитьПараметр("ОбъектВх", мОбъекУчета);
		Запрос.УстановитьПараметр("ДатаПлатежа", НачалоДня(ДатаРасчета)); 
		
		ВыборкаОбъект = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);  
		
		Пока ВыборкаОбъект.Следующий() Цикл 
			СтрокаОплаты = ТаблицаОплат.Добавить();
			СтрокаОплаты.ДатаСобытия = ДатаРасчета;  
			СтрокаОплаты.ОбъектВх = ВыборкаОбъект.ОбъектВх;
			СтрокаОплаты.СуммаВсехОплат = ВыборкаОбъект.СуммаДО;
			СтрокаОплаты.ОДВсехОплат = ВыборкаОбъект.ОсновнойДолгДО;
			СтрокаОплаты.ПроцентыВсехОплат = ВыборкаОбъект.ПроцентыДО;
			СтрокаОплаты.ИноеВсехОплат = ВыборкаОбъект.Иное;
			ВыборкаДваГода = ВыборкаОбъект.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
			Пока ВыборкаДваГода.Следующий() Цикл 
				Если ВыборкаДваГода.Двагода = "ДА" Тогда
					СтрокаОплаты.СуммаОплат24мес = ВыборкаДваГода.СуммаДО; 
				Иначе
					 СтрокаОплаты.СуммаОплат24мес = 0;
				КонецЕсли;	
				ВыборкаДетальныеЗаписи = ВыборкаДваГода.Выбрать(); 
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ВыборкаДетальныеЗаписи.ДатаПлатежа = ДатаРасчета Тогда
						СтрокаОплаты.ДатаПлатежа = ВыборкаДетальныеЗаписи.ДатаПлатежа; 
						СтрокаОплаты.СуммаПоследнегоПлатежа = ВыборкаДетальныеЗаписи.СуммаДО;
						СтрокаОплаты.ОДПоследнегоПлатежа = ВыборкаДетальныеЗаписи.ОсновнойДолгДО;
						СтрокаОплаты.ПроцентыПоследнегоПлатежа = ВыборкаДетальныеЗаписи.ПроцентыДО; 
						СтрокаОплаты.ИноеПоследнегоПлатежа = ВыборкаДетальныеЗаписи.Иное;   
						СтрокаОплаты.СуммаПоследнегоПлатежа30дн = ВыборкаДетальныеЗаписи.ПоследнийПлатеж30;  
						СтрокаОплаты.ЭтоФактическийПлатеж = ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СуммаДО);
						Прервать;
					Иначе 
						СтрокаОплаты.СуммаПоследнегоПлатежа = 0;
						СтрокаОплаты.ОДПоследнегоПлатежа = 0;
						СтрокаОплаты.ПроцентыПоследнегоПлатежа = 0; 
						СтрокаОплаты.ИноеПоследнегоПлатежа = 0;   
						//СтрокаОплаты.СуммаПоследнегоПлатежа30дн = ВыборкаДетальныеЗаписи.ПоследнийПлатеж30;
						//Была Ос, что пришел режет
						//because should be 0.00 or empty if paymtAmt == 0.00
						СтрокаОплаты.СуммаПоследнегоПлатежа30дн = 0;
						СтрокаОплаты.ЭтоФактическийПлатеж = Ложь;
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
			КонецЦикла;			
		КонецЦикла;	
	КонецЦикла;
	//
	//РезультатЗапроса.
	//Если ТаблицаОплат.Количество() = 0 Тогда
	//	ТаблицаОплат = РезультатЗапроса;
	//Иначе  
	//	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса, ТаблицаОплат);
	//КонецЕсли;		
	
	Возврат ТаблицаОплат;
	
КонецФункции      

Функция ПолучитьСведенияОДолговойНагрузке(ЗаписиСделки) Экспорт 
	ЗаписиДолговаяНагрузка = Новый ТаблицаЗначений; 
	
	Если ЗначениеЗаполнено(ЗаписиСделки) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОДолговойНагрузкеЗаемщика.Ссылка КАК ДокументДолговаяНагрузка,
		|	СведенияОДолговойНагрузкеЗаемщика.ОбъектУчета КАК ОбъектУчета
		|ИЗ
		|	Документ.СведенияОДолговойНагрузкеЗаемщика КАК СведенияОДолговойНагрузкеЗаемщика
		|ГДЕ
		|	НЕ СведенияОДолговойНагрузкеЗаемщика.ПометкаУдаления
		|	И СведенияОДолговойНагрузкеЗаемщика.Проведен
		|	И СведенияОДолговойНагрузкеЗаемщика.ОбъектУчета В(&ОбъектУчета)";
		
		Запрос.УстановитьПараметр("ОбъектУчета", ЗаписиСделки.ВыгрузитьКолонку("Сделка"));
		
		ЗаписиДолговаяНагрузка = Запрос.Выполнить().Выгрузить(); 
	КонецЕсли;
	
	Возврат ЗаписиДолговаяНагрузка;
	
КонецФункции    

Процедура ДобавитьИзмененияФЛ(ЗаписьXML, ИзмененныеЗаписиФЛ, СформированБлокПредыдущийДУЛ, Настройка, Операция, ДатаОтчета, ДокументОтчет, СчетчикБлоковВФайле) Экспорт  
	// Смена ФИО – Код НБКИ 1.7
	// Смена ДУЛ – Код НБКИ 1.7
	// Недееспособность Субъекта – Код НБКИ 1.10
	// Смена контактной информации, ИП, Адреса – Код НБКИ 1.9  
	// Банкротство 1.12    
	ИмяИвента = "0.0";
	
	Для каждого Запись из ИзмененныеЗаписиФЛ Цикл
		
		ЭтоПервичное = (Запись.Событие.КодНБКИ = "0.0");
		КоличествоФИО = Запись.Должник.ФИО.Количество();
		СменаФИОБезПаспорта = (ЭтоПервичное И КоличествоФИО > 1);
		
		Если Запись.СобытиеКодНБКИ = "0.0" Тогда 
			Продолжить;
		ИначеЕсли Запись.СобытиеКодНБКИ = "1.9" Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("FL_Event_1_9");
			ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
			ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(Запись.ДатаСобытия));
			ЗаписьXML.ЗаписатьАтрибут("operationCode", Строка(Операция));  
			ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0"));
			ИмяИвента = "FL_Event_1_9"; 
		ИначеЕсли  Запись.СобытиеКодНБКИ = "1.10" Тогда  
			ЗаписьXML.ЗаписатьНачалоЭлемента("FL_Event_1_10");
			ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
			ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(Запись.ДатаСобытия));
			ЗаписьXML.ЗаписатьАтрибут("operationCode", Строка(Операция));  
			ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0"));
			ИмяИвента = "FL_Event_1_10";
		ИначеЕсли  Запись.СобытиеКодНБКИ = "1.12" Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("FL_Event_1_12");  
			ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
			ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(Запись.ДатаСобытия));
			ЗаписьXML.ЗаписатьАтрибут("operationCode", Строка(Операция));  
			ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0"));
			ИмяИвента = "FL_Event_1_12";
		Иначе
			ЗаписьXML.ЗаписатьНачалоЭлемента("FL_Event_1_7");
			ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
			ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(Запись.ДатаСобытия));
			ЗаписьXML.ЗаписатьАтрибут("operationCode", Строка(Операция));  
			ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0"));
			ИмяИвента = "FL_Event_1_7";
		КонецЕсли;	 
		
		АЙДИ = "";
		
		ФИОТекущее = Запись.Должник.ФИО[Запись.Должник.ФИО.Количество() - 1];
		Если СменаФИОБезПаспорта И Настройка.ПередаватьСтароеИмя Тогда 
			//Если Клиенту известно о смене имени, оно занесено в тч, но события 1.7 не было зафиксировано клиентом
			//- не занесены новые паспортные данные
			//Передаем предпоследнее имя
			ФИОТекущее = Запись.Должник.ФИО[Запись.Должник.ФИО.Количество() - 2];
		КонецЕсли;  
		
		Попытка
			ФИОПредыдущее = Запись.Должник.ФИО[Запись.Должник.ФИО.Количество() - 2];
		Исключение
			ФИОПредыдущее = Неопределено;
		КонецПопытки; 
		
		АЙДИ = ФИОТекущее.ФИО + Запись.СерияДокумента + Запись.НомерДокумента + Запись.ДатаРождения;
		
		
		Если Запись.СобытиеКодНБКИ = "1.7" Тогда
			ЗаписьXML.ЗаписатьКонецЭлемента();  
		КонецЕсли;	 
		
		Если Запись.СобытиеКодНБКИ = "1.9" Тогда 
			
			ЗаписиАдресРег = РегистрыСведений.КредитныеИсторииСтруктураАдреса.СоздатьНаборЗаписей();
			ЗаписиАдресРег.Отбор.Должник.Установить(Запись.Должник);
			ЗаписиАдресРег.Отбор.ВидАдреса.Установить(Перечисления.КредитныеИсторииВидыАдресов.Регистрации);
			ЗаписиАдресРег.Прочитать();
			Если ЗаписиАдресРег.Количество() = 0 Тогда
				ЗаписиАдресРег.Отбор.ВидАдреса.Установить(Перечисления.КредитныеИсторииВидыАдресов.Пребывания);
				ЗаписиАдресРег.Прочитать(); 
			КонецЕсли;	
			
			Если ЗаписиАдресРег.Количество() > 0 Тогда
				АдресРегистрации = ЗаписиАдресРег[0]; 
			Иначе
				АдресРегистрации = Неопределено;	
			КонецЕсли;	
			
			ЗаписиАдресФакт = РегистрыСведений.КредитныеИсторииСтруктураАдреса.СоздатьНаборЗаписей();
			ЗаписиАдресФакт.Отбор.Должник.Установить(Запись.Должник);
			ЗаписиАдресФакт.Отбор.ВидАдреса.Установить(Перечисления.КредитныеИсторииВидыАдресов.Фактический);
			ЗаписиАдресФакт.Прочитать();		
			
			Если ЗаписиАдресФакт.Количество() > 0 Тогда
				АдресФактический = ЗаписиАдресФакт[0]; 
			Иначе
				АдресФактический = Неопределено;
			КонецЕсли; 
			
			
			FL_8_AddrReg(ЗаписьXML, Запись, АдресРегистрации, Неопределено);
			
			ФактическийРавноРегистрации = СравнитьАдресаФЛ(АдресРегистрации, АдресФактический);  
			
			FL_9_AddrFact(ЗаписьXML, Запись, АдресФактический, ФактическийРавноРегистрации, Неопределено);	
			
			//Контакты
			FL_10_Contact(ЗаписьXML, Запись, Неопределено);		
			
			//ип
			FL_11_IndividualEntrepreneur(ЗаписьXML, Запись, Неопределено);   
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); 
						
		КонецЕсли;		
		
		Если Запись.СобытиеКодНБКИ = "1.10" Тогда
			ДопПараметры = новый Структура();
			ДопПараметры.Вставить("Настройка", Настройка); 	
			FL_12_Capacity(ЗаписьXML, Запись, ДопПараметры);
			ЗаписьXML.ЗаписатьКонецЭлемента(); 
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(ФИОПредыдущее) И НЕ СформированБлокПредыдущийДУЛ Тогда
			// Если был занесено ФИО, но не занесен ДУЛ - формируется запись склейки - 3.1 С.2  
			//ДОПИСАТЬ
			//КредитныеИсторииИзменения.ДобавитьКТелуОтчетаОбъединениеКИ(тТелоОтчета, ФИОПредыдущее, ФИОТекущее, КоличествоГруппБлоков, Запись, ДатаОтчета, Настройка);
			//СчетчикБлоковВФайле = СчетчикБлоковВФайле + 1;

		КонецЕсли;
		
		Если Запись.СобытиеКодНБКИ = "1.12" Тогда 
			ДопПараметры = новый Структура();
			ДопПараметры.Вставить("Настройка", Настройка); 	
			FL_13_Bankruptcy(ЗаписьXML, Запись, ДопПараметры); 
			FL_14_BankruptcyEnd(ЗаписьXML, Запись, ДопПараметры);
			ЗаписьXML.ЗаписатьКонецЭлемента(); 	
			   
		КонецЕсли;   
		
		СтрИдентификатор = СтрШаблон("<orderNum>%1</orderNum><eventName>%2", Формат(СчетчикБлоковВФайле, "ЧГ=0"), ИмяИвента); 
		СчетчикБлоковВФайле = СчетчикБлоковВФайле + 1;		
		КредитныеИстории.ЗанестиЗаписьВЖурналRUTDF(Запись, ДатаОтчета, Операция, ДокументОтчет, АЙДИ, СтрИдентификатор);  
	КонецЦикла;	    
	
КонецПроцедуры     


Процедура ДобавитьИзмененияЮЛ(ЗаписьXML, ИзмененныеЗаписиЮЛ, Настройка, Операция, ДатаОтчета, ДокументОтчет, СчетчикБлоковВФайле) Экспорт  
	// Смена 1-5 – Код НБКИ 1.7
	// Банкротство 1.12    
	ИмяИвента = "0.0";
	
	Для каждого Запись из ИзмененныеЗаписиЮЛ Цикл
		
			
		Если Запись.СобытиеКодНБКИ = "0.0" Тогда 
			Продолжить;
		ИначеЕсли  Запись.СобытиеКодНБКИ = "1.12" Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("UL_Event_1_12");
			ИмяИвента = "UL_Event_1_12";
		Иначе
			ЗаписьXML.ЗаписатьНачалоЭлемента("UL_Event_1_7");
			ЗаписьXML.ЗаписатьАтрибут("eventComment", ""); 
			ЗаписьXML.ЗаписатьАтрибут("eventDate", киФорматДатыXML(Запись.ДатаСобытия));
			ЗаписьXML.ЗаписатьАтрибут("operationCode", Строка(Операция));  
			ЗаписьXML.ЗаписатьАтрибут("orderNum", Формат(СчетчикБлоковВФайле, "ЧГ=0"));
			ИмяИвента = "UL_Event_1_7";
		КонецЕсли;	 
		
				
		АЙДИ = Запись.ИНН;	
		
		Если Запись.СобытиеКодНБКИ = "1.7" Тогда
			ЗаписьXML.ЗаписатьКонецЭлемента();  
		КонецЕсли;	 
		
			
		Если Запись.СобытиеКодНБКИ = "1.12" Тогда
			//ДОПИСАТЬ
			//Сформировать новое банкротство    
		КонецЕсли;   
		
		СтрИдентификатор = СтрШаблон("<orderNum>%1</orderNum><eventName>%2", Формат(СчетчикБлоковВФайле, "ЧГ=0"), ИмяИвента); 
		СчетчикБлоковВФайле = СчетчикБлоковВФайле + 1;		
		КредитныеИстории.ЗанестиЗаписьВЖурналRUTDF(Запись, ДатаОтчета, Операция, ДокументОтчет, АЙДИ, СтрИдентификатор);  
	КонецЦикла;	    
	
КонецПроцедуры  



Процедура ФЛСформироватьПриобретателяПравТребований(ЗаписьXML, Запись, ДопПараметры = Неопределено) 
	Настройка = ДопПараметры.Настройка;  	
	Если ТипЗнч(Запись.ДокументСобытие) = Тип("ДокументСсылка.ПродажаОбъектовУчета") Тогда	
		ДокПродажа = Запись.ДокументСобытие;
		Если ДокПродажа.ТипПреобретателя = Перечисления.НБКИ_ТипыПриобретателейПравТребований.ЮридическоеЛицо Тогда
			FL_51_OrgAcquirer(ЗаписьXML, Запись, ДокПродажа, ДопПараметры);
			
		ИначеЕсли ДокПродажа.ТипПреобретателя = Перечисления.НБКИ_ТипыПриобретателейПравТребований.ФизическоеЛицо Тогда 
			FL_52_PersonAcquirer(ЗаписьXML, Запись, ДокПродажа, ДопПараметры);
		Иначе
			Возврат;
		КонецЕсли;
	//Иначе
		//Дописать по контрагенту
	КонецЕсли;
	
КонецПроцедуры 

Процедура ЮЛСформироватьПриобретателяПравТребований(ЗаписьXML, Запись, ДопПараметры = Неопределено) 
	Настройка = ДопПараметры.Настройка;  	
	Если ТипЗнч(Запись.ДокументСобытие) = Тип("ДокументСсылка.ПродажаОбъектовУчета") Тогда	
		ДокПродажа = Запись.ДокументСобытие;
		Если ДокПродажа.ТипПреобретателя = Перечисления.НБКИ_ТипыПриобретателейПравТребований.ЮридическоеЛицо Тогда
			UL_41_OrgAcquirer(ЗаписьXML, Запись, ДокПродажа, ДопПараметры);
			
		ИначеЕсли ДокПродажа.ТипПреобретателя = Перечисления.НБКИ_ТипыПриобретателейПравТребований.ФизическоеЛицо Тогда 
			UL_42_PersonAcquirer(ЗаписьXML, Запись, ДокПродажа, ДопПараметры);
		Иначе
			Возврат;
		КонецЕсли;
	//Иначе
		//Дописать по контрагенту
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьВнесудебноеБанкротствоДолжника(ЗаписьXML, Запись)
	Если ТипЗнч(Запись.ВнесудебноеБанкротство) = Тип("ДокументСсылка.ВнесудебноеБанкротствоДолжника") Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_13_Bankruptcy"); 
		ДокВБ = Запись.ВнесудебноеБанкротство;
		стрТекущаяИнформация = ДокВБ.Публикации.Найти(Запись.ДатаСобытия, "ДатаСобытия");
		Если ЗначениеЗаполнено(стрТекущаяИнформация) Тогда  
			ДобавитьЗаписьВФайл(ЗаписьXML, "bankruptcyFact_1", Истина); 
			ЗаписьXML.ЗаписатьНачалоЭлемента("Date_group_FL_13_Bankruptcy");
			ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(стрТекущаяИнформация.ДатаСобытия));
			ДобавитьЗаписьВФайл(ЗаписьXML, "stage", Строка(стрТекущаяИнформация.СтадияПроцедуры));
			ДобавитьЗаписьВФайл(ЗаписьXML, "link", стрТекущаяИнформация.URLПубликацииОбновленияСтадииПроцедуры);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			Если ЗначениеЗаполнено(стрТекущаяИнформация.ДатаПубликацииПризнакаНеправомерныхДействий) Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "illegalActExist_1", Истина);
				ДобавитьЗаписьВФайл(ЗаписьXML, "illegalActDate", киФорматДатыXML(стрТекущаяИнформация.ДатаПубликацииПризнакаНеправомерныхДействий));
			Иначе
				ДобавитьЗаписьВФайл(ЗаписьXML, "illegalActExist_0", Ложь);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(стрТекущаяИнформация.ДатаПубликацииПризнакаПреднамеренногоИлиФиктивногоБанкротства) Тогда 
				ДобавитьЗаписьВФайл(ЗаписьXML, "fakeActExist_1", Истина);
				ДобавитьЗаписьВФайл(ЗаписьXML, "fakeActDate", киФорматДатыXML(стрТекущаяИнформация.ДатаПубликацииПризнакаПреднамеренногоИлиФиктивногоБанкротства));
			Иначе 
				ДобавитьЗаписьВФайл(ЗаписьXML, "fakeActExist_0", Ложь);
			КонецЕсли;
			
			ДобавитьЗаписьВФайл(ЗаписьXML, "info", ?(ЗначениеЗаполнено(стрТекущаяИнформация.ДополнительныеСведения), стрТекущаяИнформация.ДополнительныеСведения, "НЕТ"), ИСТИНА);
		Иначе
			ДобавитьЗаписьВФайл(ЗаписьXML, "bankruptcyFact_0", ЛОЖЬ);	
		КонецЕсли;	
		
		ЗаписьXML.ЗаписатьКонецЭлемента();		
	ИначеЕсли ТипЗнч(Запись.ВнесудебноеБанкротство) = Тип("ДокументСсылка.СообщениеБанкротства")Тогда  
		Сообщение = Запись.ВнесудебноеБанкротство;
		
		ТипСообщения = Сообщение.ТипСообщения;
		ДатаПубликации = Сообщение.Дата;
			
		ДанныеСообщения = РегистрыСведений.ДанныеСообщенийОБанкротстве.ВыбратьПоРегистратору(Сообщение);
		ПризнакФиктивногоИлиПреднамеренногоБанкротства = Ложь;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_13_Bankruptcy"); 
		ДобавитьЗаписьВФайл(ЗаписьXML, "bankruptcyFact_1", Истина);
		
		Пока ДанныеСообщения.Следующий() Цикл  
			Если ДанныеСообщения.СвойствоСообщения.ИсходноеНаименование = "MessageGUID" Тогда
				//https://fedresurs.ru/bankruptmessage/4F8718823E654C9BAB5774FA43EED1AB
				URLПубликации = "https://fedresurs.ru/bankruptmessage/" + ДанныеСообщения.ЗначениеСообщения; 
			КонецЕсли;
			
			Если ДанныеСообщения.СвойствоСообщения.ИсходноеНаименование = "FakeBankruptcySigns" Тогда
				Если ДанныеСообщения.ЗначениеСообщения.ИсходноеНаименование = "Found" Тогда 
					ПризнакФиктивногоИлиПреднамеренногоБанкротства = Истина; 
				Иначе
					ПризнакФиктивногоИлиПреднамеренногоБанкротства = Ложь; 
				КонецЕсли;  
			КонецЕсли;	
			
			Если ДанныеСообщения.СвойствоСообщения.ИсходноеНаименование = "DeliberateBankruptcySigns" Тогда
				Если ДанныеСообщения.ЗначениеСообщения.ИсходноеНаименование = "Found" Тогда 
					ПризнакФиктивногоИлиПреднамеренногоБанкротства = Истина; 
				Иначе
					ПризнакФиктивногоИлиПреднамеренногоБанкротства = Ложь; 
				КонецЕсли;  
			КонецЕсли;

						
		КонецЦикла;
		
		Если ТипСообщения.ИсходноеНаименование = "StartOfExtrajudicialBankruptcy"  Тогда
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Date_group_FL_13_Bankruptcy");
			ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(ДатаПубликации));
			ДобавитьЗаписьВФайл(ЗаписьXML, "stage", "6");
			ДобавитьЗаписьВФайл(ЗаписьXML, "link", URLПубликации);
			ЗаписьXML.ЗаписатьКонецЭлемента();  
			
		КонецЕсли; 
		
		Если ТипСообщения.ИсходноеНаименование = "CompletionOfExtrajudicialBankruptcy"  Тогда
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Date_group_FL_13_Bankruptcy");
			ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(ДатаПубликации));
			ДобавитьЗаписьВФайл(ЗаписьXML, "stage", "7");
			ДобавитьЗаписьВФайл(ЗаписьXML, "link", URLПубликации);
			ЗаписьXML.ЗаписатьКонецЭлемента();  
			
		КонецЕсли;  
		
		Если ТипСообщения.ИсходноеНаименование = "TerminationOfExtrajudicialBankruptcy"  Тогда
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Date_group_FL_13_Bankruptcy");
			ДобавитьЗаписьВФайл(ЗаписьXML, "date", киФорматДатыXML(ДатаПубликации));
			ДобавитьЗаписьВФайл(ЗаписьXML, "stage", "8");
			ДобавитьЗаписьВФайл(ЗаписьXML, "link", URLПубликации);
			ЗаписьXML.ЗаписатьКонецЭлемента();  
			
		КонецЕсли;

		ДобавитьЗаписьВФайл(ЗаписьXML, "illegalActExist_0", Ложь);
		
		
		Если СтрНайти(ТипСообщения.ИсходноеНаименование, "Deliberate") > 0 Тогда
			Если ПризнакФиктивногоИлиПреднамеренногоБанкротства Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "fakeActExist_1", Истина);
				ДобавитьЗаписьВФайл(ЗаписьXML, "fakeActDate", киФорматДатыXML(ДатаПубликации));
			Иначе 
				ДобавитьЗаписьВФайл(ЗаписьXML, "fakeActExist_0", Ложь); 
				//ДобавитьЗаписьВФайл(ЗаписьXML, "fakeActDate", киФорматДатыXML(ДатаПубликации));
			КонецЕсли; 
		Иначе 
			ДобавитьЗаписьВФайл(ЗаписьXML, "fakeActExist_0", Ложь); 
			//ДобавитьЗаписьВФайл(ЗаписьXML, "fakeActDate", киФорматДатыXML(ДатаПубликации));
			
		КонецЕсли;
		
		ДобавитьЗаписьВФайл(ЗаписьXML, "info", "НЕТ", Истина);	
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	Иначе	
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_13_Bankruptcy");	
		ДобавитьЗаписьВФайл(ЗаписьXML, "bankruptcyFact_0", ЛОЖЬ);	
		ЗаписьXML.ЗаписатьКонецЭлемента();		
	КонецЕсли;	
	
	
КонецПроцедуры   

Процедура СформироватьОкончаниеВнесудебноеБанкротствоДолжника(ЗаписьXML, Запись)  
	
	Если ТипЗнч(Запись.ВнесудебноеБанкротство) = Тип("ДокументСсылка.ВнесудебноеБанкротствоДолжника") Тогда  
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_14_BankruptcyEnd"); 
		ДокВБ = Запись.ВнесудебноеБанкротство;
		стрТекущаяИнформация = ДокВБ.Публикации.Найти(Запись.ДатаСобытия, "ДатаСобытия");
		Если ЗначениеЗаполнено(стрТекущаяИнформация) Тогда
			Если ЗначениеЗаполнено(стрТекущаяИнформация.ДатаЗавершенияРасчетовСКредиторами) Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "bankruptcyEndFact_1", Истина); 
				ДобавитьЗаписьВФайл(ЗаписьXML, "completionDate", киФорматДатыXML(стрТекущаяИнформация.ДатаЗавершенияРасчетовСКредиторами)); 
				Если ЗначениеЗаполнено(стрТекущаяИнформация.ДатаОсвобожденияОтИсполненияТребованийКредиторов) Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "settlementExist_1", Истина);
					ДобавитьЗаписьВФайл(ЗаписьXML, "settlementDate", киФорматДатыXML(стрТекущаяИнформация.ДатаОсвобожденияОтИсполненияТребованийКредиторов));
				КонецЕсли;		
			ИначеЕсли ЗначениеЗаполнено(стрТекущаяИнформация.ДатаВосстановленияОбязательства) Тогда
				ДобавитьЗаписьВФайл(ЗаписьXML, "bankruptcyEndFact_0", ЛОЖЬ);
				ДобавитьЗаписьВФайл(ЗаписьXML, "resumeDate", киФорматДатыXML(стрТекущаяИнформация.ДатаВосстановленияОбязательства));  
				Если ЗначениеЗаполнено(стрТекущаяИнформация.ДатаОсвобожденияОтИсполненияТребованийКредиторов) Тогда
					ДобавитьЗаписьВФайл(ЗаписьXML, "settlementExist_1", Истина);
					ДобавитьЗаписьВФайл(ЗаписьXML, "settlementDate", киФорматДатыXML(стрТекущаяИнформация.ДатаОсвобожденияОтИсполненияТребованийКредиторов));
				Иначе
					ДобавитьЗаписьВФайл(ЗаписьXML, "settlementExist_0", Ложь);  
				КонецЕсли;	
			Иначе
				ДобавитьЗаписьВФайл(ЗаписьXML, "bankruptcyEndFact_0", ЛОЖЬ);
			КонецЕсли;	 
			
		Иначе
			ДобавитьЗаписьВФайл(ЗаписьXML, "bankruptcyEndFact_0", ЛОЖЬ);	
		КонецЕсли;	
		
		ЗаписьXML.ЗаписатьКонецЭлемента();	
				
	ИначеЕсли ТипЗнч(Запись.ВнесудебноеБанкротство) = Тип("ДокументСсылка.СообщениеБанкротства")Тогда 
		Сообщение = Запись.ВнесудебноеБанкротство;
		
		ТипСообщения = Сообщение.ТипСообщения;
		ДатаПубликации = Сообщение.Дата;   
		
		Если ТипСообщения.ИсходноеНаименование = "CompletionOfExtrajudicialBankruptcy"  Тогда
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("FL_14_BankruptcyEnd"); 
			ДобавитьЗаписьВФайл(ЗаписьXML, "bankruptcyEndFact_1", Истина); 
			ДобавитьЗаписьВФайл(ЗаписьXML, "completionDate", киФорматДатыXML(ДатаПубликации)); 
			ДобавитьЗаписьВФайл(ЗаписьXML, "settlementExist_0", Ложь); 
			ЗаписьXML.ЗаписатьКонецЭлемента();  
			
		Иначе	
			ЗаписьXML.ЗаписатьНачалоЭлемента("FL_14_BankruptcyEnd");	
			ДобавитьЗаписьВФайл(ЗаписьXML, "bankruptcyEndFact_0", ЛОЖЬ);	
			ЗаписьXML.ЗаписатьКонецЭлемента();		
		КонецЕсли;	
				
	Иначе	
		ЗаписьXML.ЗаписатьНачалоЭлемента("FL_14_BankruptcyEnd");	
		ДобавитьЗаписьВФайл(ЗаписьXML, "bankruptcyEndFact_0", ЛОЖЬ);	
		ЗаписьXML.ЗаписатьКонецЭлемента();		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруВыгрузкиДокументаКорректировка(ЗаголовокОрдерНам, Объект, ТаблицаЗаголовков) Экспорт
	НСтр = ТаблицаЗаголовков.Добавить();
	НСтр.ОбъектУчета = Объект;
	Нстр.ЗаголовокGroupHeader = ЗаголовокОрдерНам; 
	
КонецПроцедуры

Процедура ЗагрузитьСтруктуруВыгрузкиДокументаКорректировка(ДокСсылка, ТаблицаЗаголовков) Экспорт
	ДокОбъект = ДокСсылка.ПолучитьОбъект();
	ДокОбъект.СтруктураВыгрузки.Загрузить(ТаблицаЗаголовков);
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры 


#КонецОбласти




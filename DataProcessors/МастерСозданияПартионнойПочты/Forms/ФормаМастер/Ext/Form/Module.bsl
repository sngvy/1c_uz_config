#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Элементы.СписокИсходящейКорреспонденцииПартииПечатьШПИ.Доступность = Ложь;
	ЗавершитьРаботуМастера = Ложь;
	Элементы.ДокументыПартииЗавершениеРаботы.Доступность = Ложь;
	Элементы.СписокИсходящейКорреспонденцииПартииПеренестиЗаказВПартию.Доступность = Ложь;
	Элементы.СписокИсходящейКорреспонденцииПартииСохранитьНаДиск.Доступность = Ложь;
	Попытка
		Объект.СписокИсходящейКорреспонденции.Загрузить(ПолучитьИзВременногоХранилища(Этотобъект.Параметры.Адрес));
		//Если Объект.СписокИсходящейКорреспонденции.Количество() <> 0 тогда
		//	Для каждого стр из Объект.СписокИсходящейКорреспонденции Цикл
		//		стр.Адресат = стр.ИсходящаяКорреспонденция.Объект;
		//		//Если ТипЗнч(адресат) = тип("СправочникСсылка.ДолговыеОбязательства") Тогда
		//		//	Адресат = стр.ИсходящаяКорреспонденция.Объект.Должник;
		//		//КонецЕсли;	
		//		//стр.Адресат = Адресат;
		//	КонецЦикла;
		//КонецЕсли;
		
	Исключение
		
	КонецПопытки;
	
	МассивОПСДляОбслуживания = ЗаполнитьОПСнастроекУчетнойЗаписи(ПараметрыСеанса.ТекущийПользователь);
	
	Если ЗначениеЗаполнено(МассивОПСДляОбслуживания) Тогда 
		
		Для Каждого ИндексОПС из МассивОПСДляОбслуживания Цикл
			
			
			Элементы.ИндексОПСОбслуживания.СписокВыбора.Добавить(ИндексОПС,ИндексОПС);
			
			
		КонецЦикла; 
		
	КонецЕсли;
	
	//ЗаполнитьКорреспонденциюСервер();
	//Если Объект.СписокИсходящейКорреспонденции.Количество() <> 0 тогда
	//	Для каждого стр из Объект.СписокИсходящейКорреспонденции Цикл
	//		адресат = стр.ИсходящаяКорреспонденция.Объект;
	//		Если ТипЗнч(адресат) = тип("СправочникСсылка.ДолговыеОбязательства") Тогда
	//			Адресат = стр.ИсходящаяКорреспонденция.Объект.Должник;
	//		КонецЕсли;	
	//		стр.Адресат = Адресат;
	//	КонецЦикла;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьИзмененияВИнтерфейсе();
КонецПроцедуры

#КонецОбласти


&НаСервере
Функция ЗаполнитьОПСнастроекУчетнойЗаписи(Пользователь)
	МассивИндексов = Неопределено;
	УчеткиРС = РегистрыСведений.УчетныеЗаписиПочтыРФДляПользователя;
	НаборЗаписей = УчеткиРС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() <> 0 Тогда
		
		Учетка = НаборЗаписей[0].ПрофильПочтаРФ;
		
		МассивИндексов = Учетка.ОПСОбслуживания.ВыгрузитьКолонку("Индекс");
		
	КонецЕсли;
	
	Возврат МассивИндексов; 
	
КонецФункции

&НаСервере
Процедура ДобавитьКорреспонденциюНаСервере()
	ЗаполнитьКорреспонденциюСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКорреспонденцию(Команда)
	Объект.СписокИсходящейКорреспонденции.Очистить();
	ДобавитьКорреспонденциюНаСервере();
КонецПроцедуры



//0. Общее
&НаСервере
Функция ПолучитьДолжникаИзКорреспонденции(Об,ТипОбъектаКорреспонденции)
	Если ТипОбъектаКорреспонденции = "ДО" Тогда
		Адресат = об.Должник;
	ИначеЕсли ТипОбъектаКорреспонденции = "КА" Тогда
		Адресат = об;
	ИначеЕсли ТипОбъектаКорреспонденции = "Пользователь" Тогда
		Адресат = об;
	КонецЕсли;
	Возврат Адресат; 
КонецФункции

&НаСервере
Функция ЗаполнитьПараметрыПисем(массивКорр)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсходящаяКорреспонденция.Ссылка КАК Ссылка,
	               |	ИсходящаяКорреспонденция.ВидРПО КАК ВидРПО,
	               |	ИсходящаяКорреспонденция.КатегорияРПО КАК КатегорияРПО,
	               |	ИсходящаяКорреспонденция.ТипКонверта КАК ТипКонверта,
	               |	ИсходящаяКорреспонденция.ОЦ КАК ОЦ,
	               |	ИсходящаяКорреспонденция.ВесРПО КАК ВесРПО
	               |ИЗ
	               |	Справочник.ИсходящаяКорреспонденция КАК ИсходящаяКорреспонденция
	               |ГДЕ
	               |	ИсходящаяКорреспонденция.Ссылка В(&МассивСсылок)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ГруппаИсходящейКорреспонденции.Ссылка,
	               |	ГруппаИсходящейКорреспонденции.ВидРПО,
	               |	ГруппаИсходящейКорреспонденции.КатегорияРПО,
	               |	ГруппаИсходящейКорреспонденции.ТипКонверта,
	               |	ГруппаИсходящейКорреспонденции.ОЦ,
	               |	ГруппаИсходящейКорреспонденции.ВесРПО
	               |ИЗ
	               |	Справочник.ГруппаИсходящейКорреспонденции КАК ГруппаИсходящейКорреспонденции
	               |ГДЕ
	               |	ГруппаИсходящейКорреспонденции.Ссылка В(&МассивСсылок)";
	Запрос.УстановитьПараметр("МассивСсылок", массивКорр);
	РезультатТЗ = Запрос.Выполнить().Выгрузить();
	Возврат РезультатТЗ; 	
КонецФункции	

&НаСервере
Процедура ЗаполнитьКорреспонденциюСервер()
	Запрос = новый Запрос;

	Запрос.Текст = "ВЫБРАТЬ
	               |	ГруппаИсходящейКорреспонденцииСписокИсходящейКорреспонденции.ИсходящаяКорреспонденция КАК ИсходящаяКорреспонденция,
	               |	ГруппаИсходящейКорреспонденцииСписокИсходящейКорреспонденции.Ссылка КАК ГруппаСсылка
	               |ПОМЕСТИТЬ ГруппаИсхКорр
	               |ИЗ
	               |	Справочник.ГруппаИсходящейКорреспонденции.СписокИсходящейКорреспонденции КАК ГруппаИсходящейКорреспонденцииСписокИсходящейКорреспонденции
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ИсходящаяКорреспонденция
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтатусыШПИРегистрацияСрезПоследних.ШПИ КАК ШПИ,
	               |	ВЫБОР
	               |		КОГДА СтатусыШПИРегистрацияСрезПоследних.ШПИ.Владелец ССЫЛКА Справочник.ГруппаИсходящейКорреспонденции
	               |			ТОГДА ГруппаИсхКорр.ИсходящаяКорреспонденция
	               |		ИНАЧЕ СтатусыШПИРегистрацияСрезПоследних.ШПИ.Владелец
	               |	КОНЕЦ КАК ШПИВладелец,
	               |	СтатусыШПИРегистрацияСрезПоследних.Статус КАК Статус
	               |ПОМЕСТИТЬ ПоследнийСтатусШПИРегистрация
	               |ИЗ
	               |	РегистрСведений.СтатусыШПИРегистрация.СрезПоследних(, Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыШПИРегистрация.ПолученаФорма103)) КАК СтатусыШПИРегистрацияСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ГруппаИсхКорр КАК ГруппаИсхКорр
	               |		ПО СтатусыШПИРегистрацияСрезПоследних.Корреспонденция = ГруппаИсхКорр.ГруппаСсылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ШПИВладелец
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИсходящаяКорреспонденция.Ссылка КАК Ссылка,
	               |	ПоследнийСтатусШПИРегистрация.Статус КАК Статус
	               |ИЗ
	               |	Справочник.ИсходящаяКорреспонденция КАК ИсходящаяКорреспонденция
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПоследнийСтатусШПИРегистрация КАК ПоследнийСтатусШПИРегистрация
	               |		ПО ИсходящаяКорреспонденция.Ссылка = ПоследнийСтатусШПИРегистрация.ШПИВладелец
	               |ГДЕ
	               |	НЕ ИсходящаяКорреспонденция.ПометкаУдаления
	               |	И ИсходящаяКорреспонденция.НомерЗакреплен
	               |	И ИсходящаяКорреспонденция.ВидРПО <> """"
	               |	И ИсходящаяКорреспонденция.КатегорияРПО <> """"
	               |	И ИсходящаяКорреспонденция.ТипКонверта <> """"
	               |	И ИсходящаяКорреспонденция.ВесРПО <> """"
	               |	И ПоследнийСтатусШПИРегистрация.Статус ЕСТЬ NULL";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	Пока Выборка.Следующий() цикл
		строка = объект.СписокИсходящейКорреспонденции.Добавить();
		строка.Исходящаякорреспонденция = Выборка.Ссылка;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция НайтиКорреспонденциюСтатусЗакреплен()
	Запрос = новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	МАКСИМУМ(СтатусыШПИРегистрацияСрезПоследних.Период) КАК Период,
	                |	ИсходящаяКорреспонденция.Ссылка КАК Ссылка
	                |ПОМЕСТИТЬ ТекущийМаксимальныйПериод
	                |ИЗ
	                |	Справочник.ИсходящаяКорреспонденция КАК ИсходящаяКорреспонденция
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыШПИРегистрация.СрезПоследних КАК СтатусыШПИРегистрацияСрезПоследних
	                |		ПО ИсходящаяКорреспонденция.Ссылка = СтатусыШПИРегистрацияСрезПоследних.Корреспонденция
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ИсходящаяКорреспонденция.Ссылка
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	МАКСИМУМ(СтатусыШПИРегистрацияСрезПоследних.Период),
	                |	ГруппаИсходящейКорреспонденции.Ссылка
	                |ИЗ
	                |	Справочник.ГруппаИсходящейКорреспонденции КАК ГруппаИсходящейКорреспонденции
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыШПИРегистрация.СрезПоследних КАК СтатусыШПИРегистрацияСрезПоследних
	                |		ПО ГруппаИсходящейКорреспонденции.Ссылка = СтатусыШПИРегистрацияСрезПоследних.Корреспонденция
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ГруппаИсходящейКорреспонденции.Ссылка
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ТекущиймаксимальныйПериод.Ссылка КАК Ссылка,
	                |	ЕСТЬNULL(СтатусыШПИРегистрацияСрезПоследних.ШПИ, 0) КАК ШПИ,
	                |	ЕСТЬNULL(СтатусыШПИРегистрацияСрезПоследних.Статус, 0) КАК Статус
	                |ИЗ
	                |	ТекущийМаксимальныйПериод КАК ТекущиймаксимальныйПериод
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыШПИРегистрация.СрезПоследних КАК СтатусыШПИРегистрацияСрезПоследних
	                |		ПО ТекущиймаксимальныйПериод.Период = СтатусыШПИРегистрацияСрезПоследних.Период
	                |			И ТекущиймаксимальныйПериод.Ссылка = СтатусыШПИРегистрацияСрезПоследних.Корреспонденция
	                |ГДЕ
	                |	СтатусыШПИРегистрацияСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыШПИРегистрация.Закреплен)";
					
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	МассивКорреспонденции  = Результат.Выгрузить();
	
	Возврат МассивКорреспонденции; 
КонецФункции

&НаСервере
Функция НайтиКорреспонденциюСтатусНанесенНаКонверт()
	Запрос = новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	МАКСИМУМ(СтатусыШПИРегистрацияСрезПоследних.Период) КАК Период,
	                |	ИсходящаяКорреспонденция.Ссылка КАК Ссылка
	                |ПОМЕСТИТЬ ТекущийМаксимальныйПериод
	                |ИЗ
	                |	Справочник.ИсходящаяКорреспонденция КАК ИсходящаяКорреспонденция
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыШПИРегистрация.СрезПоследних КАК СтатусыШПИРегистрацияСрезПоследних
	                |		ПО ИсходящаяКорреспонденция.Ссылка = СтатусыШПИРегистрацияСрезПоследних.Корреспонденция
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ИсходящаяКорреспонденция.Ссылка
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	МАКСИМУМ(СтатусыШПИРегистрацияСрезПоследних.Период),
	                |	ГруппаИсходящейКорреспонденции.Ссылка
	                |ИЗ
	                |	Справочник.ГруппаИсходящейКорреспонденции КАК ГруппаИсходящейКорреспонденции
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыШПИРегистрация.СрезПоследних КАК СтатусыШПИРегистрацияСрезПоследних
	                |		ПО ГруппаИсходящейКорреспонденции.Ссылка = СтатусыШПИРегистрацияСрезПоследних.Корреспонденция
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ГруппаИсходящейКорреспонденции.Ссылка
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ТекущиймаксимальныйПериод.Ссылка КАК Ссылка,
	                |	ЕСТЬNULL(СтатусыШПИРегистрацияСрезПоследних.ШПИ, 0) КАК ШПИ,
	                |	ЕСТЬNULL(СтатусыШПИРегистрацияСрезПоследних.Статус, 0) КАК Статус
	                |ИЗ
	                |	ТекущиймаксимальныйПериод КАК ТекущиймаксимальныйПериод
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыШПИРегистрация.СрезПоследних КАК СтатусыШПИРегистрацияСрезПоследних
	                |		ПО ТекущиймаксимальныйПериод.Период = СтатусыШПИРегистрацияСрезПоследних.Период
	                |			И ТекущиймаксимальныйПериод.Ссылка = СтатусыШПИРегистрацияСрезПоследних.Корреспонденция
	                |ГДЕ
	                |	СтатусыШПИРегистрацияСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыШПИРегистрация.НанесенНаКонверт)";
					
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	МассивКорреспонденции = Результат.Выгрузить();
	Возврат МассивКорреспонденции; 
КонецФункции

&НаСервере
Процедура ИзменитьСтатусШПИ(ДокументПартия, СтрокаСтатус)

	ДокИзменениеСтатуса = Документы.ИзменениеСтатусаШПИРегистрация.СоздатьПредзаполненыйДокумент();
	
	Для Каждого Корр из ДокументПартия.СписокИсходящейКорреспонденции Цикл
		Нстрока = ДокИзменениеСтатуса.ШПИ.Добавить();
		Нстрока.ШПИ = Корр.ШПИ;
		НСтрока.Корреспонденция = Корр.ИсходящаяКорреспонденция;
		НСтрока.ИдентификаторПочты = Корр.ИдентификаторПочты;
		Если СтрокаСтатус = "Форма103" Тогда
			НСтрока.Статус = Перечисления.СтатусыШПИРегистрация.ПолученаФорма103;
		ИначеЕсли СтрокаСтатус = "Конверт" Тогда
			НСтрока.Статус = Перечисления.СтатусыШПИРегистрация.НанесенНаКонверт;
		КонецЕсли;
	КонецЦикла;
	ДокИзменениеСтатуса.Записать(РежимЗаписиДокумента.Проведение);	
КонецПроцедуры	

&НаСервере
Процедура УдалитьПартии(Доки)
	Для Каждого Док из Доки Цикл
		ДокОбъект = Док.Ссылка.ПолучитьОбъект();
		ДокОбъект.Удалить();
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ИзменитьСтатусШПИУдаление(МассивШПИ)
	
	ДокИзменениеСтатуса = Документы.ИзменениеСтатусаШПИРегистрация.СоздатьПредзаполненыйДокумент();
	
	Для Каждого Корр из МассивШПИ Цикл
		Нстрока = ДокИзменениеСтатуса.ШПИ.Добавить();
		Нстрока.ШПИ = Корр.ШПИССылка;
		НСтрока.Корреспонденция = Корр.ШПИССылка.Владелец;
		НСтрока.ИдентификаторПочты = Корр.IDпочты;
		НСтрока.Статус = Перечисления.СтатусыШПИРегистрация.Удален;
	КонецЦикла;
	ДокИзменениеСтатуса.Записать(РежимЗаписиДокумента.Проведение);	
КонецПроцедуры	

&НаСервере
Функция ОкруглитьРазмерФайла(СтрРазмер)
	Размер = Число(СтрРазмер);
	Если Размер > 1024 Тогда
		Размер = Окр(Размер/1024, 0);
		Стр = Строка(Размер) + " Кб";
	КонецЕсли;
	Если Размер > 1024 Тогда
		Размер = Окр(Размер/1024, 1);
		Стр = Строка(Размер) + " Мб";
	КонецЕсли;	
	Возврат Стр;		
КонецФункции

&НаСервере
Функция ПолучитьТаблицуЗначений()
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ШПИСсылка");
	ТЗ.Колонки.Добавить("IDПочты");
	Возврат ТЗ;
КонецФункции

&НаСервере
Функция ПреобразоватьСтроку(СтрокаОтвет)
	СтрокаОтвет = СтрЗаменить(СтрокаОтвет,"[","");
	СтрокаОтвет = СтрЗаменить(СтрокаОтвет,"]","");
	СтрокаОтвет = СтрЗаменить(СтрокаОтвет,"{","");
	СтрокаОтвет = СтрЗаменить(СтрокаОтвет,"}","");
	СтрокаОтвет = СтрЗаменить(СтрокаОтвет,"result-ids","Идентификаторы успешно обработанных исходящих");
	Возврат СтрокаОтвет;
КонецФункции
//Обработка Навигации
&НаКлиенте
Процедура КомандаДалее(Команда)
	Если Элементы.ГруппаВкладки.ТекущаяСтраница = Элементы.ГруппаПроверкаАдреса Тогда
		Элементы.ГруппаВкладки.ТекущаяСтраница = Элементы.ГруппаСозданиеЗаказов;
	ИначеЕсли Элементы.ГруппаВкладки.ТекущаяСтраница = Элементы.ГруппаСозданиеЗаказов Тогда
		Элементы.ГруппаВкладки.ТекущаяСтраница = Элементы.ГруппаСозданиеПартий;
	ИначеЕсли Элементы.ГруппаВкладки.ТекущаяСтраница = Элементы.ГруппаСозданиеПартий Тогда
		Элементы.ГруппаВкладки.ТекущаяСтраница = Элементы.ГруппаРаботаСПартиями;	
	КонецЕсли;
	УстановитьИзмененияВИнтерфейсе();
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	Если Элементы.ГруппаВкладки.ТекущаяСтраница = Элементы.ГруппаСозданиеЗаказов Тогда
		Элементы.ГруппаВкладки.ТекущаяСтраница = Элементы.ГруппаПроверкаАдреса;
	ИначеЕсли Элементы.ГруппаВкладки.ТекущаяСтраница = Элементы.ГруппаСозданиеПартий Тогда
		Элементы.ГруппаВкладки.ТекущаяСтраница = Элементы.ГруппаСозданиеЗаказов;
	ИначеЕсли Элементы.ГруппаВкладки.ТекущаяСтраница = Элементы.ГруппаРаботаСПартиями Тогда
		Элементы.ГруппаВкладки.ТекущаяСтраница = Элементы.ГруппаСозданиеПартий;	
	КонецЕсли;
	УстановитьИзмененияВИнтерфейсе();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИзмененияВИнтерфейсе()
	Если Элементы.ГруппаВкладки.ТекущаяСтраница = Элементы.ГруппаПроверкаАдреса Тогда
		Элементы.ФормаКомандаНазад.Доступность = Ложь;
		Элементы.КомандаДалее.Доступность = Ложь;
		Для Каждого стр из объект.СписокИсходящейКорреспонденции Цикл
			Если стр.КорректностьАдреса = Истина Тогда
				Элементы.КомандаДалее.Доступность = Истина;
			Конецесли;
		КонецЦикла;	
		Элементы.ГруппаСозданиеЗаказов.Видимость = Ложь;
		Элементы.ГруппаСозданиеПартий.Видимость = Ложь;
		Элементы.ГруппаРаботаСПартиями.Видимость = Ложь;
		Элементы.ГруппаПроверкаАдреса.Видимость = Истина;
	ИначеЕсли  Элементы.ГруппаВкладки.ТекущаяСтраница = Элементы.ГруппаСозданиеЗаказов Тогда
		Элементы.ФормаКомандаНазад.Доступность = Истина;
		Элементы.КомандаДалее.Доступность = Ложь;
		Для Каждого стр из  Объект.СписокИсходящейКорреспонденции Цикл
			Если ЗначениеЗаполнено(Стр.ИдентификаторПочты) Тогда
				Элементы.КомандаДалее.Доступность = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;	
		Элементы.ГруппаПроверкаАдреса.Видимость = Ложь;
		Элементы.ГруппаСозданиеПартий.Видимость = Ложь;
		Элементы.ГруппаРаботаСПартиями.Видимость = Ложь;
		Элементы.ГруппаСозданиеЗаказов.Видимость = Истина;
	ИначеЕсли  Элементы.ГруппаВкладки.ТекущаяСтраница = Элементы.ГруппаСозданиеПартий Тогда
		Элементы.ФормаКомандаНазад.Доступность = Истина;
		Элементы.КомандаДалее.Доступность = Ложь;
		Если Объект.ДокументыПартии.Количество() <> 0 Тогда
			 Элементы.КомандаДалее.Доступность = Истина;
		КонецЕсли;	 	
		Элементы.ГруппаПроверкаАдреса.Видимость = Ложь;
		Элементы.ГруппаСозданиеЗаказов.Видимость = Ложь;
		Элементы.ГруппаРаботаСПартиями.Видимость = Ложь;
		Элементы.ГруппаСозданиеПартий.Видимость = Истина;
	ИначеЕсли  Элементы.ГруппаВкладки.ТекущаяСтраница = Элементы.ГруппаРаботаСПартиями Тогда
		Элементы.ФормаКомандаНазад.Доступность = Истина;
		Элементы.КомандаДалее.Доступность = Ложь;
		Элементы.ГруппаПроверкаАдреса.Видимость = Ложь;
		Элементы.ГруппаСозданиеЗаказов.Видимость = Ложь;
		Элементы.ГруппаСозданиеПартий.Видимость = Ложь;
		Элементы.ГруппаРаботаСПартиями.Видимость = Истина;	
	КонецЕсли;
	
КонецПроцедуры


//Шаг 1. проверка Адреса получателя
&НаКлиенте
Процедура ПроверкаАдресаПолучателя(Команда)
	Если Объект.СписокИсходящейКорреспонденции.Количество() = 0 Тогда
		Сообщить("Список исходящей корреспонденции пустой!");
		возврат;
	КонецЕсли;
	
	Успешно = Истина;
	ПроверитьАдресПолучателяСервер(Успешно);
	Если Успешно Тогда
		Элементы.СписокИсходящейКорреспонденцииПроверкаАдреса.ТекущаяСтрока = Объект.СписокИсходящейКорреспонденции[0];
		Для Каждого Стр из объект.СписокИсходящейКорреспонденции Цикл
			Если Стр.КорректностьАдреса = Ложь Тогда
				Сообщить("Адрес из строки № "+ стр.номерСтроки + " не прошел проверку на корректность. Проверьте данные адресата!");
			КонецЕсли;
		КонецЦикла;
		УстановитьИзмененияВИнтерфейсе();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьАдресПолучателяСервер(Успешно)
	token = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("токен");
	Logkey = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("ключ");
	ДопСведениеАдреса = Константы.УдалитьАдресПочтыРФ.Получить();
	
	тЗаписьJSON = Новый ЗаписьJSON;
	тПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);  
	тЗаписьJSON.УстановитьСтроку(тПараметрыJSON);
	тЗапрос = Новый Массив;
	
	Для Каждого Стр Из Объект.СписокИсходящейКорреспонденции Цикл
		//об = Стр.ИсходящаяКорреспонденция.Объект;
		//ТипОбъектаКорреспонденции = бит_ИнтеграцияПочтаРФ.ПолучитьТипОбъектаКорреспонденции(об);
		//Адресат = Стр.ИсходящаяКорреспонденция.Объект;	
		тДанные = Новый Структура;
		строкаID = строка(Стр.ИсходящаяКорреспонденция);
		стрАдрес = бит_ИнтеграцияПочтаРФ.ПолучитьАдресНастройкиТиповКорреспонденции(Стр.ИсходящаяКорреспонденция,Ложь);
		стр.ФИАС =?(стрАдрес = Неопределено, Ложь, стрАдрес.ЭтоФИАС);
		стр.Адресат = ?(стрАдрес = Неопределено, Неопределено, стрАдрес.Адресат);
		тДанные.Вставить("id", строкаID);
		тДанные.Вставить("originaladdress", ?(стрАдрес = Неопределено, "" ,стрАдрес.Адрес));
		ПеременнаяСтруктура = тДанные;
		тЗапрос.Добавить(ПеременнаяСтруктура);
	КонецЦикла;
	
	
	ЗаписатьJSON(тЗаписьJSON, тЗапрос);
	strJSON = тЗаписьJSON.Закрыть();
	strJSON = Стрзаменить(strJSON, "originaladdress", "original-address");
	Сервер = "otpravka-api.pochta.ru";      
	Ресурс = "/1.0/clean/address";
	
	HTTPЗапрос = Новый HTTPЗапрос;
	
	HTTPЗапрос.УстановитьТелоИзСтроки(strJSON);
	
	HTTPЗапрос.АдресРесурса = Ресурс;
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL;
	
	HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);   
	
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
	
	HTTPЗапрос.Заголовки.Вставить("Authorization","AccessToken " + token);
	
	HTTPЗапрос.Заголовки.Вставить("X-User-Authorization","Basic " + Logkey);
	
	Попытка
		СчетчикПопыток = 1;
		Пока СчетчикПопыток < 20 Цикл
			Попытка
				ОтветHTTP = HTTP.ОтправитьДляОбработки(HTTPЗапрос, ИмяВыходногоФайла);
				Прервать;
			Исключение
				Сообщить("Попытка получения ответа: " + СчетчикПопыток);
				СчетчикПопыток  = СчетчикПопыток + 1;
			КонецПопытки;	
		КонецЦикла;		
	Исключение
		СтрокаСообщения = ОписаниеОшибки();
		Сообщить(СтрокаСообщения, СтатусСообщения.Важное);
		УдалитьФайлы(имяВыходногоФайла);
		Успешно = Ложь;
		Возврат;
	КонецПопытки;
	
	Отвечено = ОбработатьОтветHTTP(ОтветHTTP,Истина);
	Если Не Отвечено Тогда
		  УдалитьФайлы(имяВыходногоФайла);
		  Успешно = Ложь;
		Возврат;
	КонецЕсли;	

	ЧтениеJSON = Новый ЧтениеJSON;
	
	ЧтениеJSON.ОткрытьФайл(имяВыходногоФайла);
	
	СтруктураJSON = ПрочитатьJSON(ЧтениеJSON,Истина);

	Если СтруктураJSON.количество() > 0 Тогда
		
		ТЗКорректности = Новый ТаблицаЗначений;
		ТЗКорректности.Колонки.Добавить("ID");
		ТЗКорректности.Колонки.Добавить("Качество");
		ТЗКорректности.Колонки.Добавить("Валидация");
		ТЗКорректности.Колонки.Добавить("СтруктураАдреса");
		
		Для каждого элемент из СтруктураJSON цикл
			строкаАдреса = "";
			Если ТипЗнч(элемент) = Тип("КлючИЗначение") Тогда
				Если элемент.Ключ = "code" тогда
					Сообщить("Во время запроса произошла ошибка по причине: " + элемент.Значение);
				КонецЕсли;
				Если элемент.Ключ = "desc" тогда
					Сообщить("Подробнее: " + элемент.Значение);
					ЧтениеJSON.Закрыть();
					УдалитьФайлы(имяВыходногоФайла);
					Возврат;
				КонецЕсли;	
			Иначе	
				НСтрока = ТЗКорректности.Добавить();		
				Для каждого строка из элемент цикл
					Если Строка.Ключ = "validation-code" Тогда
						НСтрока.Валидация = Строка.Значение;
					КонецЕсли;
					Если Строка.Ключ = "quality-code" Тогда
						НСтрока.Качество = Строка.Значение;
					КонецЕсли;
					Если Строка.Ключ = "id" Тогда
						НСтрока.ID = Строка.Значение;
					КонецЕсли;
					строкаАдреса = Строка(строкаАдреса) + Строка.Ключ + " "+Строка.Значение+Символы.ПС;
					Нстрока.СтруктураАдреса = строкаАдреса;

					//Если ДопСведениеАдреса.ВидСтроки = Перечисления.ВидыТипаСтрока.Строка Тогда
					//	строкаАдреса = Строка(строкаАдреса) + Строка.Ключ + " "+Строка.Значение+Символы.ПС;
					//	Нстрока.СтруктураАдреса = строкаАдреса;
					//КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
			
	ЧтениеJSON.Закрыть();
	//   
	// удаляем файл после использования
	УдалитьФайлы(имяВыходногоФайла);
	
	Для каждого строка из объект.СписокИсходящейКорреспонденции Цикл
		Корр = Строка(Строка.ИсходящаяКорреспонденция);
		Для Каждого стр из ТЗКорректности Цикл
			
			Если стр.ID = Корр Тогда
				Если Не Строка.ФИАС Тогда
					Строка.СтруктураАдреса = Стр.СтруктураАдреса;
				КонецЕсли;	
				Если ПолучитьВалидацию(стр.Валидация) и ПолучитьКачество(стр.Качество) Тогда
					Корректность = Истина;
				Иначе
					Корректность = Ложь;
				КонецЕсли;		
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		Строка.КорректностьАдреса = Корректность;
			
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьВалидацию(Валидация)
	СтрокаКодов = "VALIDATED" + "OVERRIDDEN" + "CONFIRMED_MANUALLY";
	Возврат СтрНайти(СтрокаКодов, Валидация) <> 0;	
КонецФункции

&НаСервере
Функция ПолучитьКачество(Качество)
	СтрокаКодов = "GOOD" + "POSTAL_BOX" + "ON_DEMAND" + "UNDEF_05";
	Возврат СтрНайти(СтрокаКодов, Качество) <> 0;
КонецФункции

//Шаг 2. Работа с заказами

//2.1. Параметры пересылки
&НаКлиенте
Процедура ХрупкоеПриИзменении(Элемент)
	Для Каждого Эл из объект.СписокИсходящейКорреспонденции Цикл
		Эл.Хрупкое = Хрупкое;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура КурьерПриИзменении(Элемент)
	Для Каждого Эл из объект.СписокИсходящейКорреспонденции Цикл
		Эл.Курьер = Курьер;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказноеУведомлениеПриИзменении(Элемент)
	Для Каждого Эл из объект.СписокИсходящейКорреспонденции Цикл
		Эл.ЗаказноеУведомление = ЗаказноеУведомление;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ПростоеУведомлениеПриИзменении(Элемент)
	Для Каждого Эл из объект.СписокИсходящейКорреспонденции Цикл
		Эл.ПростоеУведомление = ПростоеУведомление;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратуНеПодлежитПриИзменении(Элемент)
	Для Каждого Эл из объект.СписокИсходящейКорреспонденции Цикл
		Эл.ВозвратуНеПодлежит = ВозвратуНеПодлежит;
	КонецЦикла;		
КонецПроцедуры

//2.2 Создание заказов
&НаКлиенте
Процедура СоздатьЗаказы(Команда)
	СоздатьЗаказНаСервере();
	УстановитьИзмененияВИнтерфейсе();
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаказНаСервере()
	Если объект.СписокИсходящейКорреспонденции.Количество() = 0 тогда
		Возврат;
	КонецЕсли;
	тЗаписьJSON = Новый ЗаписьJSON;
	тПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);
	тЗаписьJSON.УстановитьСтроку(тПараметрыJSON);
	
	token = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("токен");
	Logkey = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("ключ");
	
	мПисьма = Новый массив;
	Для каждого Стр из Объект.СписокИсходящейКорреспонденции Цикл
		Если Стр.КорректностьАдреса = Истина Тогда
			мПисьма.Добавить(Стр.ИсходящаяКорреспонденция);
		КонецЕсли;
	КонецЦикла;
	ТЗПараметрыПисем = ЗаполнитьПараметрыПисем(мПисьма);
	
	тЗаказы = СоздатьМассивЗаказов(ТЗПараметрыПисем);

		
	Если тЗаказы.Количество() = 0 Тогда
		Сообщить("Нет подходящих исходящих для создания нового заказа!");
		Возврат;
	КонецЕсли;	

	ЗаписатьJSON(тЗаписьJSON, тЗаказы);
	
	strJSON = тЗаписьJSON.Закрыть();
	Сервер = "otpravka-api.pochta.ru";      
	Ресурс = "/1.0/user/backlog";
	
	HTTPЗапрос = Новый HTTPЗапрос;
	
	HTTPЗапрос.УстановитьТелоИзСтроки(strJSON);
	
	HTTPЗапрос.АдресРесурса = Ресурс;
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL;
	
	HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);   
		
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
		
	HTTPЗапрос.Заголовки.Вставить("Authorization","AccessToken " + token);
	
	HTTPЗапрос.Заголовки.Вставить("X-User-Authorization","Basic " + Logkey);
	
	СчетчикПопыток = 1;
	Пока СчетчикПопыток < 20 Цикл
		Попытка
			ОтветHTTP = HTTP.Записать(HTTPЗапрос); 
			Прервать;
		Исключение
			Сообщить("Попытка получения ответа: " + СчетчикПопыток);
			СчетчикПопыток  = СчетчикПопыток + 1;
		КонецПопытки;	
	КонецЦикла;	
	
	СтрокаОтвет = ОтветHTTP.ПолучитьТелоКакСтроку();
	СтрокаОтвет = Строка(СтрокаОтвет);
	СтрокаОтвет = ПреобразоватьСтроку(СтрокаОтвет);
	Сообщить(СтрокаОтвет);
	
	ОбновитьинформациюОЗаказах("backlog", Неопределено);
	//ЗаглушкаЗаказа()
КонецПроцедуры

&НаСервере
Функция СоздатьМассивЗаказов(ТЗПараметрыПисем)
	тЗаказы = Новый Массив;
	Для каждого Стр из Объект.СписокИсходящейКорреспонденции Цикл
		Если Стр.КорректностьАдреса = Ложь или ЗначениеЗаполнено(Стр.ИдентификаторПочты) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыПисьма = ТЗПараметрыПисем.Найти(Стр.ИсходящаяКорреспонденция, "Ссылка");
		
		Конверт = ПараметрыПисьма.ТипКонверта;
		КатегорияРПО = ПараметрыПисьма.КатегорияРПО;
		ВидРПО = ПараметрыПисьма.ВидРПО;
		ВесРПО = ПараметрыПисьма.ВесРПО;
		ОЦ = ПараметрыПисьма.ОЦ;
		ИД_Магазина = ?(ТипЗнч(Стр.ИсходящаяКорреспонденция) = Тип("СправочникСсылка.ИсходящаяКорреспонденция"), (Строка(Стр.ИсходящаяКорреспонденция.РегистрационныйНомер) + " от " + Строка(Формат(Стр.ИсходящаяКорреспонденция.ДатаРегистрации,"ДЛФ=Д"))),(Строка(Стр.ИсходящаяКорреспонденция.Код) + " от " + Строка(Формат(ТекущаяДатаСеанса(),"ДЛФ=Д")))); 
		//ВидАдреса = ПолучитьВидАдреса(Стр);
		СтруктураДанныеАдресата = ?(стр.ФИАС = Истина, бит_ИнтеграцияПочтаРФ.СоздатьСтруктуру(Стр.Адресат, Стр.ИсходящаяКорреспонденция), бит_ИнтеграцияПочтаРФ.СоздатьСтруктуруИзСтроки(Стр.Адресат,Стр.СтруктураАдреса));
		//СтруктураДанныеАдресата = СоздатьСтруктуру(Стр.ИсходящаяКорреспонденция.Объект);
		тЗапрос = Новый Соответствие;
		тЗапрос.Вставить("address-type-to", "DEFAULT");
		тЗапрос.Вставить("area-to", бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(стр.ФИАС = Истина,"Район","area")));
		тЗапрос.Вставить("building-to", бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(стр.ФИАС = Истина,"Строение","building")));
		тЗапрос.Вставить("comment", Строка(Стр.ИсходящаяКорреспонденция));
		тЗапрос.Вставить("corpus-to", бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(стр.ФИАС = Истина,"Корпус","corpus")));
		тЗапрос.Вставить("courier", Стр.Курьер);              
		
		тДекларация = Новый Соответствие;
		тДекларация.Вставить("currency",);
		тВложения = Новый Массив;
		тВложение = Новый Соответствие;
		тВложение.Вставить("amount",);
		тВложение.Вставить("country-code",);
		тВложение.Вставить("description",);
		тВложение.Вставить("tnved-code",);
		тВложение.Вставить("value",);
		тВложение.Вставить("weight",);
		тВложения.Добавить(тВложение);
		тДекларация.Вставить("customs-entries", тВложения);
		тДекларация.Вставить("entries-type",);
		//тЗапрос.Вставить("customs-declaration",тДекларация);
		
		тИзмерения = новый Соответствие;
		тИзмерения.Вставить("height", 0);
		тИзмерения.Вставить("length", 0);
		тИзмерения.Вставить("width", 0);
		
		тЗапрос.Вставить("dimension", тИзмерения);
		тЗапрос.Вставить("envelope-type", Конверт);
		тЗапрос.Вставить("fragile", Стр.Хрупкое);
		тЗапрос.Вставить("given-name", бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(стр.ФИАС = Истина,"Имя","firstname")));
		тЗапрос.Вставить("hotel-to", бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(стр.ФИАС = Истина,"Отель","hotel")));
		тЗапрос.Вставить("house-to", бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(стр.ФИАС = Истина,"Дом","house")));
		тЗапрос.Вставить("index-to", бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(стр.ФИАС = Истина,"Индекс","index")));
		тЗапрос.Вставить("insr-value", ОЦ);
		тЗапрос.Вставить("letter-to", бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(стр.ФИАС = Истина,"Литера","letter")));
		тЗапрос.Вставить("location-to", бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(стр.ФИАС = Истина,"Микрорайон","location")));
		тЗапрос.Вставить("mail-category", КатегорияРПО);
		тЗапрос.Вставить("mail-direct", бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(стр.ФИАС = Истина,"Страна","rus"))); //Страна
		тЗапрос.Вставить("mail-type", ВидРПО);
		тЗапрос.Вставить("manual-address-input",);
		тЗапрос.Вставить("mass", ВесРПО);
		тЗапрос.Вставить("middle-name", бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(стр.ФИАС = Истина,"Отчество","fathername")));
		тЗапрос.Вставить("no-return", Стр.ВозвратуНеПодлежит);
		тЗапрос.Вставить("num-address-type-to",);
		тЗапрос.Вставить("order-num", ИД_Магазина);
		тЗапрос.Вставить("payment",);
		тЗапрос.Вставить("payment-method",);
		тЗапрос.Вставить("place-to", бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(стр.ФИАС = Истина,"Город","place")));
		тЗапрос.Вставить("postoffice-code", стр.ИндексОПСОбслуживания);
		тЗапрос.Вставить("recipient-name", бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(стр.ФИАС = Истина,"ФИО","fullname")));
		тЗапрос.Вставить("region-to", бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(стр.ФИАС = Истина,"Регион","region")));
		тЗапрос.Вставить("room-to", бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(стр.ФИАС = Истина,"Квартира","room")));
		тЗапрос.Вставить("slash-to", бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(стр.ФИАС = Истина,"Дробь","slash")));
		тЗапрос.Вставить("sms-notice-recipient",);
		тЗапрос.Вставить("str-index-to",);
		тЗапрос.Вставить("street-to", бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(стр.ФИАС = Истина,"Улица","street")));
		тЗапрос.Вставить("surname", бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(стр.ФИАС = Истина,"Фамилия","lastname")));
		тЗапрос.Вставить("tel-address",);
		тЗапрос.Вставить("with-order-of-notice", стр.ЗаказноеУведомление);
		тЗапрос.Вставить("with-simple-notice", стр.ПростоеУведомление);
		тЗапрос.Вставить("wo-mail-rank",);
		тЗапрос.Вставить("transport-type","SURFACE");
		тЗапрос.Вставить("completeness-checking",);
		тЗаказы.Добавить(тЗапрос);
		
	КонецЦикла;
	
	Возврат тЗаказы;
	
КонецФункции


&НаСервере
Функция ПолучитьВидАдреса()
	//Тип = ?(АдресКонст.ВидСтроки = Перечисления.ВидыТипаСтрока.АдресФИАС,"ФИАС","СТР");
	//Возврат Тип;
КонецФункции		


//Шаг 3. Создание партий
&НаКлиенте
Процедура СоздатьПартии(Команда)
	СоздатьПартиюНаСервере(ДатаПартии);
	УстановитьИзмененияВИнтерфейсе();
	Элементы.СписокИсходящейКорреспонденцииПартииПечатьШПИ.Доступность = Истина;
КонецПроцедуры

&НаСервере
Процедура СоздатьПартиюНаСервере(ДатаПартии)
	//Создание партии из заказов с присвоенным почтой АйДи
	тЗаписьJSON = Новый ЗаписьJSON;
	тПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);  
	тЗаписьJSON.УстановитьСтроку(тПараметрыJSON);   
	token = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("токен");
	Logkey = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("ключ");
	
	тЗапрос = Новый Массив;
	Для Каждого стр из Объект.СписокИсходящейКорреспонденции Цикл
		Если ЗначениеЗаполнено(Стр.ИдентификаторПочты) Тогда
			тЗапрос.Добавить(Стр.ИдентификаторПочты);
		КонецЕсли;
	КонецЦикла;	
	
	ЗаписатьJSON(тЗаписьJSON, тЗапрос);
	
	strJSON = тЗаписьJSON.Закрыть();
	Сервер = "otpravka-api.pochta.ru";      
	Ресурс = "/1.0/user/shipment"; 
	
	ПрефиксПараметр = "?";
	ПрефиксДополнительныйПараметр  = "&";
	
	Если Константы.ПочтаРФОнлайнБаланс.Получить() Тогда
		Ресурс = Ресурс + "?use-online-balance=true";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаПартии) Тогда
		ТекущийПрефикс = ?(СтрНайти(Ресурс, ПрефиксПараметр) > 0, ПрефиксДополнительныйПараметр, ПрефиксПараметр);
		сендингДата = Формат(ДатаПартии, "ДФ='yyyy-MM-dd'");
		Ресурс = Ресурс + ТекущийПрефикс + "sending-date=" + сендингДата;
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос;
	
	HTTPЗапрос.УстановитьТелоИзСтроки(strJSON);
	
	HTTPЗапрос.АдресРесурса = Ресурс;
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL;
	
	HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);   
	
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
	
	HTTPЗапрос.Заголовки.Вставить("Authorization","AccessToken " + token);
	
	HTTPЗапрос.Заголовки.Вставить("X-User-Authorization","Basic " + Logkey);
	
	Попытка
		СчетчикПопыток = 1;
		Пока СчетчикПопыток < 20 Цикл
			Попытка
				ОтветHTTP = HTTP.ОтправитьДляОбработки(HTTPЗапрос,ИмяВыходногоФайла);
				Прервать;
			Исключение
				Сообщить("Попытка получения ответа: " + СчетчикПопыток);
				СчетчикПопыток  = СчетчикПопыток + 1;
			КонецПопытки;	
		КонецЦикла;		
	Исключение
		СтрокаСообщения = ОписаниеОшибки();
		Сообщить(СтрокаСообщения, СтатусСообщения.Важное);
		УдалитьФайлы(имяВыходногоФайла);
		Возврат;
	КонецПопытки;
	
	Отвечено = ОбработатьОтветHTTP(ОтветHTTP, Истина);
	Если Не Отвечено Тогда
		  УдалитьФайлы(имяВыходногоФайла);
		Возврат;
	КонецЕсли;		
	
	ЧтениеJSON = Новый ЧтениеJSON;
	
	ЧтениеJSON.ОткрытьФайл(имяВыходногоФайла);
	
	СтруктураJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
	
	ОбновитьИнформациюОЗаказах("shipment", Истина);	
	
	Для каждого элемент из СтруктураJSON цикл
		Если элемент.Ключ = "batches" Тогда
			МассивПартий = элемент.Значение;				
		Иначе
			Продолжить;
		КонецЕсли;			
	КонецЦикла;
	
	Если МассивПартий = Неопределено Тогда
		Сообщить("Нет заказов для создания партии!");
		Возврат;
	КонецЕсли;	
		
	Для Каждого партия из МассивПартий Цикл
		Для каждого эл из партия Цикл 
			Если эл.Ключ = "batch-name" Тогда
				ИмяПартии = эл.Значение;
			КонецЕсли;
			Если эл.Ключ = "mail-category-text" Тогда
				КатегорияРПО = эл.Значение;
			КонецЕсли;
			Если эл.Ключ = "mail-type-text" Тогда
				ВидРПО = эл.Значение;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ИмяПартии) И ЗначениеЗаполнено(КатегорияРПО) И ЗначениеЗаполнено(ВидРПО) Тогда 
			МассивСтрок = Новый Массив; 
			Для Каждого Корр из объект.СписокИсходящейКорреспонденции Цикл
				Если Не ЗначениеЗаполнено(Корр.ИдентификаторПочты) Тогда
					Продолжить;
				КонецЕсли;
				Если Корр.ИмяПартии = ИмяПартии Тогда
					МассивСтрок.Добавить(Корр); 
				КонецЕсли;
			КонецЦикла; 
			СоздатьДокументПартии(ИмяПартии, КатегорияРПО, ВидРПО, МассивСтрок);
		КонецЕсли;
	КонецЦикла;
	
	
	ЧтениеJSON.Закрыть();
	
	//удаляем файл после использования
	УдалитьФайлы(имяВыходногоФайла);
	
	Сообщить("Партии успешно созданы!");
	Для Каждого Корр из объект.СписокИсходящейКорреспонденции Цикл
		ЗаполнитьДокументПартию(Корр, Корр.ИсходящаяКорреспонденция);
	КонецЦикла;	
		
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументПартии(ИмяПартии, Категория ,Вид, МассивСтрок)
	ДокПартия = Документы.ПартионнаяПочта.СоздатьДокумент();
	ДокПартия.Дата = ТекущаяДатаСеанса();
	ДокПартия.Автор = параметрыСеанса.ТекущийПользователь;
	ДокПартия.Организация = ПараметрыСеанса.ТекущийПользователь.Организация;
	ДокПартия.Комментарий = "Создание партионной почты";
	ДокПартия.КатегорияРПО = Категория;
	ДокПартия.ВидРПО = Вид;
	ДокПартия.ИмяПартии = ИмяПартии;
	ДокПартия.Записать(РежимЗаписиДокумента.Запись);
	//Заполнить ТЧ Заказов из партий:
	ДокПартия.СписокИсходящейКорреспонденции.Загрузить(Объект.СписокИсходящейКорреспонденции.Выгрузить(МассивСтрок,));
	// Заполнить РС для документа
	ТЗ_СписокИсхКорр = Объект.СписокИсходящейКорреспонденции.Выгрузить(МассивСтрок,);
	
	Для каждого корр из ТЗ_СписокИсхКорр Цикл
		МенеджерЗаписи = РегистрыСведений.ПартииИсходящейКорреспонденции.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ИсходящаяКорреспонденция = Корр.ИсходящаяКорреспонденция;
		МенеджерЗаписи.Партия = ДокПартия.Ссылка;
		МенеджерЗаписи.Курьер = Корр.Курьер;
		МенеджерЗаписи.ЗаказноеУведомление = Корр.ЗаказноеУведомление;
		МенеджерЗаписи.ПростоеУведомление = Корр.ПростоеУведомление;
		МенеджерЗаписи.Хрупкое = Корр.Хрупкое;
		МенеджерЗаписи.ВозвратуНеПодлежит = Корр.ВозвратуНеПодлежит;
		Для Каждого корресп из объект.СписокИсходящейКорреспонденции Цикл
			Если Корр.ИсходящаяКорреспонденция = корресп.ИсходящаяКорреспонденция тогда
				МенеджерЗаписи.Тариф = корресп.Тариф;
			КонецЕсли;		 
		КонецЦикла;
		МенеджерЗаписи.Записать();
	КонецЦикла; 
	
	ДокПартия.Записать(РежимЗаписиДокумента.Проведение);
	
	Нстрока = Объект.ДокументыПартии.Добавить();	 
	Нстрока.ДокументПартия = ДокПартия.Ссылка;	  
	Нстрока.ИмяПартии = ДокПартия.ИмяПартии; 
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументПартию(СтрокаКорр, Корр)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПартииИсходящейКорреспонденции.Партия КАК Партия,
	               |	ПартииИсходящейКорреспонденции.Партия.ИмяПартии КАК ПартияИмяПартии,
	               |	ПартииИсходящейКорреспонденции.Партия.ВидРПО КАК ПартияВидРПО,
	               |	ПартииИсходящейКорреспонденции.Партия.КатегорияРПО КАК ПартияКатегорияРПО
	               |ИЗ
	               |	РегистрСведений.ПартииИсходящейКорреспонденции КАК ПартииИсходящейКорреспонденции
	               |ГДЕ
	               |	ПартииИсходящейКорреспонденции.ИсходящаяКорреспонденция = &ИсходящаяКорреспонденция";
	Запрос.УстановитьПараметр("ИсходящаяКорреспонденция", Корр);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока выборка.Следующий() Цикл
		СтрокаКорр.ДокументПартия = Выборка.Партия;
		СтрокаКорр.ИмяПартии  = Выборка.ПартияИмяПартии;
		СтрокаКорр.ВидРПО = Выборка.ПартияВидРПО; 
		СтрокаКорр.КатегорияРПО = Выборка.ПартияКатегорияРПО;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПеренестиЗаказВПартиюНаСервере(ИмяПартии, Успешно, Исходящая)
	тЗаписьJSON = Новый ЗаписьJSON;
	тПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);  
	тЗаписьJSON.УстановитьСтроку(тПараметрыJSON);   
	
	token = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("токен");
	Logkey = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("ключ");
	ВидАдреса = ПолучитьВидАдреса();
	мПисьма = Новый массив;
	Для каждого Стр из Объект.СписокИсходящейКорреспонденции Цикл
		Если Стр.КорректностьАдреса = Истина Тогда
			мПисьма.Добавить(Стр.ИсходящаяКорреспонденция);
		КонецЕсли;
	КонецЦикла;
	ТЗПараметрыПисем = ЗаполнитьПараметрыПисем(мПисьма);
	тЗаказы = Новый Массив;
	Отбор = Новый Структура("ИсходящаяКорреспонденция",Исходящая);
	
	СтрокаЗаказ = Объект.СписокИсходящейКорреспонденции.НайтиСтроки(Отбор);

	Для каждого Стр из СтрокаЗаказ Цикл
		Если Стр.КорректностьАдреса = Ложь или ЗначениеЗаполнено(Стр.ИдентификаторПочты) Тогда
			Продолжить;
		Иначе	
			ПараметрыПисьма  = ТЗПараметрыПисем.Найти(Стр.ИсходящаяКорреспонденция,"Ссылка");
			Конверт = ПараметрыПисьма.ТипКонверта;
			КатегорияРПО = ПараметрыПисьма.КатегорияРПО;
			ВидРПО = ПараметрыПисьма.ВидРПО;
			ВесРПО = ПараметрыПисьма.ВесРПО;
			ОЦ = ПараметрыПисьма.ОЦ;
			ИД_Магазина =?(ТипЗнч(Стр.ИсходящаяКорреспонденция) = Тип("СправочникСсылка.ИсходящаяКорреспонденция"), (Строка(Стр.ИсходящаяКорреспонденция.РегистрационныйНомер) + " от " + Строка(Формат(Стр.ИсходящаяКорреспонденция.ДатаРегистрации,"ДЛФ=Д"))),(Строка(Стр.ИсходящаяКорреспонденция.Код) + " от " + Строка(Формат(ТекущаяДатаСеанса(), "ДЛФ=Д"))));  
			
			
			СтруктураДанныеАдресата = ?(ВидАдреса ="ФИАС",бит_ИнтеграцияПочтаРФ.СоздатьСтруктуру(Стр.ИсходящаяКорреспонденция),бит_ИнтеграцияПочтаРФ.СоздатьСтруктуруИзСтроки(Стр.Адресат,Стр.СтруктураАдреса));
			//СтруктураДанныеАдресата = СоздатьСтруктуру(Стр.ИсходящаяКорреспонденция.Объект);
			тЗапрос = Новый Соответствие;
			тЗапрос.Вставить("address-type-to","DEFAULT");
			тЗапрос.Вставить("area-to",бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(ВидАдреса ="ФИАС","Район","area")));
			тЗапрос.Вставить("building-to",бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(ВидАдреса ="ФИАС","Строение","building")));
			тЗапрос.Вставить("comment",Строка(Стр.ИсходящаяКорреспонденция));
			тЗапрос.Вставить("corpus-to",бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(ВидАдреса ="ФИАС","Корпус","corpus")));
			тЗапрос.Вставить("courier",Стр.Курьер);              
			
			тДекларация = Новый Соответствие;
			тДекларация.Вставить("currency",);
			тВложения = Новый Массив;
			тВложение = Новый Соответствие;
			тВложение.Вставить("amount",);
			тВложение.Вставить("country-code",);
			тВложение.Вставить("description",);
			тВложение.Вставить("tnved-code",);
			тВложение.Вставить("value",);
			тВложение.Вставить("weight",);
			тВложения.Добавить(тВложение);
			тДекларация.Вставить("customs-entries",тВложения);
			тДекларация.Вставить("entries-type",);
			//тЗапрос.Вставить("customs-declaration",тДекларация);
			
			тИзмерения = новый Соответствие;
			тИзмерения.Вставить("height",0);
			тИзмерения.Вставить("length",0);
			тИзмерения.Вставить("width",0);
			
			тЗапрос.Вставить("dimension",тИзмерения);
			тЗапрос.Вставить("envelope-type",Конверт);
			тЗапрос.Вставить("fragile",Стр.Хрупкое);
			тЗапрос.Вставить("given-name",бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(ВидАдреса ="ФИАС","Имя","firstname")));
			тЗапрос.Вставить("hotel-to",бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(ВидАдреса ="ФИАС","Отель","hotel")));
			тЗапрос.Вставить("house-to",бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(ВидАдреса ="ФИАС","Дом","house")));
			тЗапрос.Вставить("index-to",бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(ВидАдреса ="ФИАС","Индекс","index")));
			тЗапрос.Вставить("insr-value",ОЦ);
			тЗапрос.Вставить("letter-to",бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(ВидАдреса ="ФИАС","Литера","letter")));
			тЗапрос.Вставить("location-to",бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(ВидАдреса ="ФИАС","Микрорайон","location")));
			тЗапрос.Вставить("mail-category",КатегорияРПО);
			тЗапрос.Вставить("mail-direct",бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(ВидАдреса ="ФИАС","Страна","rus"))); //Страна
			тЗапрос.Вставить("mail-type",ВидРПО);
			тЗапрос.Вставить("manual-address-input",);
			тЗапрос.Вставить("mass",ВесРПО);
			тЗапрос.Вставить("middle-name",бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(ВидАдреса ="ФИАС","Отчество","fathername")));
			тЗапрос.Вставить("no-return",Стр.ВозвратуНеПодлежит);
			тЗапрос.Вставить("num-address-type-to",);
			тЗапрос.Вставить("order-num",ИД_Магазина);
			тЗапрос.Вставить("payment",);
			тЗапрос.Вставить("payment-method",);
			тЗапрос.Вставить("place-to",бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(ВидАдреса ="ФИАС","Город","place")));
			тЗапрос.Вставить("postoffice-code",стр.ИндексОПСОбслуживания);
			тЗапрос.Вставить("recipient-name",бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(ВидАдреса ="ФИАС","ФИО","fullname")));
			тЗапрос.Вставить("region-to",бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(ВидАдреса ="ФИАС","Регион","region")));
			тЗапрос.Вставить("room-to",бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(ВидАдреса ="ФИАС","Квартира","room")));
			тЗапрос.Вставить("slash-to",бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(ВидАдреса ="ФИАС","Дробь","slash")));
			тЗапрос.Вставить("sms-notice-recipient",);
			тЗапрос.Вставить("str-index-to",);
			тЗапрос.Вставить("street-to",бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(ВидАдреса ="ФИАС","Улица","street")));
			тЗапрос.Вставить("surname",бит_ИнтеграцияПочтаРФ.ВернутьЗначениеСтруктуры(СтруктураДанныеАдресата,?(ВидАдреса ="ФИАС","Фамилия","lastname")));
			тЗапрос.Вставить("tel-address",);
			тЗапрос.Вставить("with-order-of-notice",стр.ЗаказноеУведомление);
			тЗапрос.Вставить("with-simple-notice",стр.ПростоеУведомление);
			тЗапрос.Вставить("wo-mail-rank",);
			тЗапрос.Вставить("transport-type","SURFACE");
			тЗапрос.Вставить("completeness-checking",);
			тЗаказы.Добавить(тЗапрос);
		КонецЕсли;
	КонецЦикла;


	ЗаписатьJSON(тЗаписьJSON, тЗаказы);
	
	strJSON = тЗаписьJSON.Закрыть();
	Сервер = "otpravka-api.pochta.ru";
	///1.0/batch/{name}/shipment
	Ресурс = "/1.0/batch/";
	
	HTTPЗапрос = Новый HTTPЗапрос;
	
	HTTPЗапрос.УстановитьТелоИзСтроки(strJSON);
	
	HTTPЗапрос.АдресРесурса = Ресурс + ИмяПартии + "/shipment";
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL;
	
	HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);   
		
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
	
	HTTPЗапрос.Заголовки.Вставить("Authorization","AccessToken " + token);
	
	HTTPЗапрос.Заголовки.Вставить("X-User-Authorization","Basic " + Logkey );
	
	ОтветHTTP = HTTP.Записать(HTTPЗапрос);
	
	Отвечено = ОбработатьОтветHTTP(ОтветHTTP,Истина);
	Если Не Отвечено Тогда
		Успешно = Ложь;
	КонецЕсли;	
	 
	СтрокаОтвет = ОтветHTTP.ПолучитьТелоКакСтроку();
	СтрокаОтвет = Строка(СтрокаОтвет);
	СтрокаОтвет = ПреобразоватьСтроку(СтрокаОтвет);
	Если СтрНайти(СтрокаОтвет,"error",,,) <> 0 Или СтрНайти ( СтрокаОтвет,"INTERNAL_ERROR",,,)<>0 Тогда
		Сообщить(СтрокаОтвет);
		Успешно = Ложь;
	Иначе
		ОбновитьинформациюОЗаказах("shipment",Ложь);
		Для Каждого Корр из объект.СписокИсходящейКорреспонденции Цикл
			
			Если ЗначениеЗаполнено(Корр.ДокументПартия) тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Корр.ИмяПартии) тогда
				Продолжить;
			КонецЕсли;
			
			ПерепровестиДокументПартия(Корр);
			ЗаписатьРСПартииИсходящейКорреспонденции(Корр);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЗаказВПартию(Команда)
	СписокПартий = новый СписокЗначений();
	Для Каждого Стр из объект.ДокументыПартии Цикл
		Если ЗначениеЗаполнено(Стр.ИмяПартии) Тогда
			СписокПартий.Добавить(Стр.ИмяПартии);
		КонецЕсли;
	КонецЦикла;
	ВыбранноеЗначение = СписокПартий.ВыбратьЭлемент("Выберите партию, в которую надо перенести заказы: ");
	Если ВыбранноеЗначение = Неопределено Тогда
		Сообщить("Не выбрана партия!");
	Иначе
		ТекДанные = Элементы.СписокИсходящейКорреспонденцииПартии.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекДанные.ИдентификаторПочты) Тогда
			Сообщить("Данное отправление уже заегистрировано на сервисе Отправка.");
			Возврат;
		КонецЕсли;
		
		Успешно = истина;
		ПеренестиЗаказВПартиюНаСервере(ВыбранноеЗначение.Значение, Успешно, ТекДанные.ИсходящаяКорреспонденция);
		Если НЕ Успешно Тогда
			Сообщить("Произошла ошибка при выполнении запроса!");
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ЗаписатьРСПартииИсходящейКорреспонденции(Корр)
	МенеджерЗаписи = РегистрыСведений.ПартииИсходящейКорреспонденции.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИсходящаяКорреспонденция = Корр.ИсходящаяКорреспонденция;			
	МенеджерЗаписи.Партия = Корр.ДокументПартия;
	МенеджерЗаписи.Курьер = Корр.Курьер;
	МенеджерЗаписи.ЗаказноеУведомление = Корр.ЗаказноеУведомление;
	МенеджерЗаписи.ПростоеУведомление = Корр.ПростоеУведомление;
	МенеджерЗаписи.Хрупкое = Корр.Хрупкое;
	МенеджерЗаписи.ВозвратуНеПодлежит = Корр.ВозвратуНеПодлежит;       
	МенеджерЗаписи.Тариф = Корр.Тариф;
	МенеджерЗаписи.Записать();
	Корр.имяПартии = Корр.ИмяПартии;
	Корр.ДокументПартия = Корр.ДокументПартия;
КонецПроцедуры

&НаСервере
Процедура ПерепровестиДокументПартия(СтрокаКорр)
	Отбор = новый структура("ИмяПартии",СтрокаКорр.ИмяПартии);
	СтрокаДокумент = Объект.ДокументыПартии.НайтиСтроки(Отбор);	
	ДокОбъект = СтрокаДокумент[0].ДокументПартия.ПолучитьОбъект();
	НСтрока = ДокОбъект.СписокИсходящейКорреспонденции.Добавить();
	НСтрока.ИсходящаяКорреспонденция = СтрокаКорр.ИсходящаяКорреспонденция;
	Нстрока.ШПИ = СтрокаКорр.ШПИ;
	НСтрока.ИдентификаторПочты = СтрокаКорр.ИдентификаторПочты;
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	СтрокаКорр.ДокументПартия = СтрокаДокумент[0].ДокументПартия;
Конецпроцедуры
//Шаг 4. документы для партии
&НаКлиенте
Процедура ЗарегистрироватьВОПС(Команда)
	Для каждого Стр из Объект.ДокументыПартии Цикл
		Зарегистрировано = ЗарегистрироватьВОПСНаСервере(Стр.ИмяПартии);
		Стр.Зарегистрирована = Зарегистрировано;
		Если Стр.Зарегистрирована = Истина Тогда
			Сообщить("Партия № " + Стр.ИмяПартии + " успешно зарегистрирована в ОПС!");
		Иначе
			Сообщить("Партия № " + Стр.ИмяПартии + " не зарегистрирована в ОПС!");
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры


&НаСервере
Функция ЗарегистрироватьВОПСНаСервере(ИмяПартии)
	тЗаписьJSON = Новый ЗаписьJSON;
	тПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);  
	тЗаписьJSON.УстановитьСтроку(тПараметрыJSON);   
	token = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("токен");
	Logkey = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("ключ");
	
	тЗапрос = имяПартии;
	
	ЗаписатьJSON(тЗаписьJSON, тЗапрос);
	Год = СтрЗаменить(Строка(Год(ТекущаяДатаСеанса())), Символы.НПП, "");
	Месяц = Строка(Месяц(ТекущаяДатаСеанса()));
	День = Строка(День(ТекущаяДатаСеанса()));
	strJSON = тЗаписьJSON.Закрыть();
	Сервер = "otpravka-api.pochta.ru";      
	Ресурс = "/1.0/batch/";
	
	HTTPЗапрос = Новый HTTPЗапрос;
	
	HTTPЗапрос.АдресРесурса = Ресурс + тЗапрос + "/checkin";  
	
	Если Константы.ПочтаРФОнлайнБаланс.Получить() Тогда 
		HTTPЗапрос.АдресРесурса = HTTPЗапрос.АдресРесурса +"?useOnlineBalance=true";
	КонецЕсли;
	
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL;
	
	HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);   
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
	
	HTTPЗапрос.Заголовки.Вставить("Authorization","AccessToken " + token);
	
	HTTPЗапрос.Заголовки.Вставить("X-User-Authorization","Basic " + Logkey);
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();
	
	Попытка
		СчетчикПопыток = 1;
		Пока СчетчикПопыток < 20 Цикл
			Попытка
				ОтветHTTP = HTTP.ОтправитьДляОбработки(HTTPЗапрос, ИмяВыходногоФайла);
				Прервать;
			Исключение
				Сообщить("Попытка получения ответа: " + СчетчикПопыток);
				СчетчикПопыток  = СчетчикПопыток + 1;
			КонецПопытки;	
		КонецЦикла;		
	Исключение
		СтрокаСообщения = ОписаниеОшибки();
		Сообщить(СтрокаСообщения, СтатусСообщения.Важное);
		УдалитьФайлы(имяВыходногоФайла);
		Зарегистрировано = Ложь;
		Возврат Зарегистрировано;
	КонецПопытки;
	
	Отвечено = ОбработатьОтветHTTP(ОтветHTTP,Истина);
	Если Не Отвечено Тогда
		УдалитьФайлы(имяВыходногоФайла);
		Зарегистрировано = Ложь;
		Возврат Зарегистрировано;
	КонецЕсли;	

	
	ЧтениеJSON = Новый ЧтениеJSON;
	
	ЧтениеJSON.ОткрытьФайл(имяВыходногоФайла);
	
	СтруктураJSON = ПрочитатьJSON(ЧтениеJSON,Истина);
	Для каждого элемент из СтруктураJSON цикл
		Если элемент.Ключ = "error-code" Тогда
			Если Элемент.Значение = "PAST_DUE_DATE" Тогда
				Сообщить("Партия № " + имяПартии + " устарела. Поробнее: " + элемент.Значение);
				Зарегистрировано = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если элемент.Ключ = "f103-sent" Тогда
			Если Элемент.Значение = Ложь Тогда
				РегистрироватьВОПС = ОбъектыСервер.ПолучитьЗначениеКонстанты("РегистрироватьПартииВОПС");
				Если РегистрироватьВОПС Тогда
					Сообщить("Ошибка регистрации партии № " + имяПартии + " по причине: " + элемент.Значение);
					Зарегистрировано = Ложь;
				Иначе
					Зарегистрировано = Истина;
				КонецЕсли;
			Иначе
				Зарегистрировано = Элемент.Значение;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	ЧтениеJSON.Закрыть();
	
	//удаляем файл после использования
	УдалитьФайлы(имяВыходногоФайла);
	
	Возврат Зарегистрировано;
КонецФункции	


&НаКлиенте
Процедура Получитьформу103(Команда)
	Для Каждого Стр из Объект.ДокументыПартии Цикл
		Если Стр.Зарегистрирована = Истина Тогда
			Если Стр.получена103 = Истина Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Для партии " + Строка(Стр.ИмяПартии) + "уже получена форма 103 в комплекте!";
				Сообщение.Сообщить();
				Продолжить;
			КонецЕсли;	
			Стр.получена103 = Ложь;
			ДД_Файла = "";
			ПолучитьФорму103Сервер(Стр.ИмяПартии, Стр.ДокументПартия, Стр.получена103, ДД_Файла);
			Если Стр.получена103 Тогда
				Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
				Если Диалог.Выбрать() Тогда
					ИмяКаталога = Диалог.Каталог;
				Иначе
					Возврат;
				КонецЕсли;
				ИмяФайла = "\Форма103Партия_" + Стр.ИмяПартии;
				Форма103ПДФ = Новый Файл(ИмяКаталога + ИмяФайла + ".pdf");
				ДД_Файла.Записать(Форма103ПДФ.ПолноеИмя);
				ПрикрепитьФорму103(Стр.ДокументПартия, Форма103ПДФ.ПолноеИмя, ДД_Файла);
				ИзменитьСтатусШПИ(Стр.ДокументПартия, "Форма103");
				Сообщить("Для партии № " + Стр.ИмяПартии + " получен файл формы 103");
			иначе
				Сообщить ("Произошла ошибка получения файла формы 103 для партии № " + стр.ИмяПартии)
			КонецЕсли;
		Иначе 
			Сообщить ("Невозможно получить форму 103 для партии № "+ стр.ИмяПартии);
		КонецЕсли;
	КонецЦикла;
	Элементы.ДокументыПартииЗавершениеРаботы.Доступность = Истина;
КонецПроцедуры			

&НаСервере
Процедура ПолучитьФорму103Сервер(ИмяПартии, ДокПартия, Получено, ДД_Ответ)
	тЗаписьJSON = Новый ЗаписьJSON;
	тПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);  
	тЗаписьJSON.УстановитьСтроку(тПараметрыJSON);
	
	token = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("токен");
	Logkey = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("ключ");
	
	тЗапрос = имяПартии;
	
	ЗаписатьJSON(тЗаписьJSON, тЗапрос);
	
	strJSON = тЗаписьJSON.Закрыть();
	Сервер = "otpravka-api.pochta.ru";      
	Ресурс = "/1.0/forms/";
	
	HTTPЗапрос = Новый HTTPЗапрос;
	
	HTTPЗапрос.АдресРесурса = Ресурс + тЗапрос + "/f103pdf";
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL;
	
	HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);   
	
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
	
	HTTPЗапрос.Заголовки.Вставить("Authorization","AccessToken " + token);
	
	HTTPЗапрос.Заголовки.Вставить("X-User-Authorization","Basic " + Logkey);
	
	ИмяФайла = "Форма103Партия_" + тЗапрос;
	
	Попытка
		СчетчикПопыток = 1;
		Пока СчетчикПопыток < 20 Цикл
			Попытка
				ОтветHTTP = HTTP.Получить(HTTPЗапрос);
				Прервать;
			Исключение
				Сообщить("Попытка получения ответа: " + СчетчикПопыток);
				СчетчикПопыток = СчетчикПопыток + 1;
			КонецПопытки;	
		КонецЦикла;		
	Исключение
		СтрокаСообщения = ОписаниеОшибки();
		Сообщить(СтрокаСообщения, СтатусСообщения.Важное);
		УдалитьФайлы(имяВыходногоФайла);
		Возврат;
	КонецПопытки;
	
	Отвечено = ОбработатьОтветHTTP(ОтветHTTP,Истина);
	Если Не Отвечено Тогда
		УдалитьФайлы(имяВыходногоФайла);
	КонецЕсли;
	
	Если ОтветHTTP.КодСостояния <> 200 Тогда
		СтрокаОтвет =  ОтветHTTP.ПолучитьТелоКакСтроку();
		СтрокаОтвет = ПреобразоватьСтроку(СтрокаОтвет);
		Сообщить(СтрокаОтвет);
		Получено = Ложь;
	Иначе
		ДД_Ответ = ОтветHTTP.ПолучитьТелоКакДвоичныеДанные();
		Получено = Истина;
	КонецЕсли;
	Если Получено = Ложь Тогда
		Возврат;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПрикрепитьФорму103(ДокПартия, Файл103Путь, ДД)
	
	Файл103 = Новый Файл(Файл103Путь);
	Если НЕ Файл103.Существует() тогда
		Возврат;
	КонецЕсли;
	
	Документ = Документы.ПрикрепитьФайлы.СоздатьДокумент();
	Документ.Организация = ПараметрыСеанса.ТекущийПользователь.Организация;
	Документ.Автор = ПараметрыСеанса.ТекущийПользователь;
	Документ.Объект = ДокПартия;
	Документ.Дата = ТекущаяДатаСеанса();
	Документ.Комментарий = "Автоматическое прикрепление формы 103";
	Стр = Документ.Файлы.Добавить();
	Стр.Загружен = Ложь;
	Стр.Путь = Файл103.ПолноеИмя;
	Стр.УИД = Новый УникальныйИдентификатор();
	Стр.ТипФайла = Справочники.ТипыПрикрепляемыхФайлов.Форма103;
	Стр.Размер = ОкруглитьРазмерФайла(Строка(Файл103.Размер()));
	МассивДанных = Новый Массив;
	МассивДанных.Добавить(ДД);
	Документ.ПоместитьВХранилище(МассивДанных);
	Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);

КонецПроцедуры

&НаСервере
Процедура ПолучитьВсеДокументыПартииАПИ(ИмяПартии, ДокПартия, Получено, ДД_Ответ)
	тЗаписьJSON = Новый ЗаписьJSON;
	тПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);  
	тЗаписьJSON.УстановитьСтроку(тПараметрыJSON);
	
	token = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("токен");
	Logkey = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("ключ");
	
	тЗапрос = имяПартии;
	
	ЗаписатьJSON(тЗаписьJSON, тЗапрос);
	
	strJSON = тЗаписьJSON.Закрыть();
	Сервер = "otpravka-api.pochta.ru";      
	Ресурс = "/1.0/forms/";
	
	HTTPЗапрос = Новый HTTPЗапрос;
	
	HTTPЗапрос.АдресРесурса = Ресурс + тЗапрос + "/zip-all";
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL;
	
	HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);   
	
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
	
	HTTPЗапрос.Заголовки.Вставить("Authorization","AccessToken " + token);
	
	HTTPЗапрос.Заголовки.Вставить("X-User-Authorization","Basic " + Logkey);
	
	ИмяФайла = "АрхивПартия_" + тЗапрос;
	
	Попытка
		СчетчикПопыток = 1;
		Пока СчетчикПопыток < 20 Цикл
			Попытка
				ОтветHTTP = HTTP.Получить(HTTPЗапрос);
				Прервать;
			Исключение
				Сообщить("Попытка получения ответа: " + СчетчикПопыток);
				СчетчикПопыток = СчетчикПопыток + 1;
			КонецПопытки;	
		КонецЦикла;		
	Исключение
		СтрокаСообщения = ОписаниеОшибки();
		Сообщить(СтрокаСообщения, СтатусСообщения.Важное);
		УдалитьФайлы(имяВыходногоФайла);
		Возврат;
	КонецПопытки;
	
	Отвечено = ОбработатьОтветHTTP(ОтветHTTP, Истина);
	Если Не Отвечено Тогда
		УдалитьФайлы(имяВыходногоФайла);
	КонецЕсли;
	
	Если ОтветHTTP.КодСостояния <> 200 Тогда
		СтрокаОтвет =  ОтветHTTP.ПолучитьТелоКакСтроку();
		СтрокаОтвет = ПреобразоватьСтроку(СтрокаОтвет);
		Сообщить(СтрокаОтвет);
		Получено = Ложь;
	Иначе
		ДД_Ответ = ОтветHTTP.ПолучитьТелоКакДвоичныеДанные();
		Получено = Истина;
	КонецЕсли;
	Если Получено = Ложь Тогда
		Возврат;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВсеДокументыПартии(Команда)
	Для Каждого Стр из Объект.ДокументыПартии Цикл
		Если Стр.Зарегистрирована = Истина Тогда
			Если Стр.получена103 = Истина Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Для партии " + Строка(Стр.ИмяПартии) + "уже получена форма 103!";
				Сообщение.Сообщить();
				Продолжить;
			КонецЕсли;	
			Стр.получена103 = Ложь;
			ДД_Файла = "";
			ПолучитьВсеДокументыПартииАПИ(Стр.ИмяПартии, Стр.ДокументПартия, Стр.получена103, ДД_Файла);
			Если Стр.получена103 Тогда
				Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
				Если Диалог.Выбрать() Тогда
					ИмяКаталога = Диалог.Каталог;
				Иначе
					Возврат;
				КонецЕсли;
				ИмяФайла = "\АрхивПартия_"+ Стр.ИмяПартии;
				ЗИПАрхив = Новый Файл(ИмяКаталога + ИмяФайла + ".zip");
				ДД_Файла.Записать(ЗИПАрхив.ПолноеИмя);
				ИзвлечьИзАрхиваИПрикрепитьФайлы(Стр.ДокументПартия, ЗИПАрхив.ПолноеИмя);
				ИзменитьСтатусШПИ(Стр.ДокументПартия, "Форма103");
				Сообщить("Для партии № " + Стр.ИмяПартии + " получен файл формы 103 и Архив докуменов.");
			иначе
				Сообщить ("Произошла ошибка получения файла Архива для партии № " + стр.ИмяПартии)
			КонецЕсли;
		Иначе 
			Сообщить ("Невозможно получить файл Архива для партии № " + стр.ИмяПартии);
		КонецЕсли;
	КонецЦикла;
	Элементы.ДокументыПартииЗавершениеРаботы.Доступность = Истина;

	
КонецПроцедуры

&НаСервере
Процедура ИзвлечьИзАрхиваИПрикрепитьФайлы(ДокПартия, ФайлАрхивПуть)
	
	ФайлАрхив = Новый Файл(ФайлАрхивПуть);
	Если НЕ ФайлАрхив.Существует() тогда
		Возврат;
	КонецЕсли;
	
	// Откроем файл для чтения
	ЧтениеZIP = Новый ЧтениеZipФайла(ФайлАрхив.ПолноеИмя);
	
	
	// Распакуем все файлы из архива
	ПапкаРаспаковка = ФайлАрхив.Путь + ФайлАрхив.ИмяБезРасширения;
	ЧтениеZIP.ИзвлечьВсе(ПапкаРаспаковка, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	
	ЧтениеZIP.Закрыть();	
	
	Документ = Документы.ПрикрепитьФайлы.СоздатьДокумент();
	Документ.Организация = ПараметрыСеанса.ТекущийПользователь.Организация;
	Документ.Автор = ПараметрыСеанса.ТекущийПользователь;
	Документ.Объект = ДокПартия;
	Документ.Дата = ТекущаяДатаСеанса();
	Документ.Комментарий = "Автоматическое прикрепление Архива документов";
	
	МассивФайловАрхива = НайтиФайлы(ПапкаРаспаковка, "*.*");
	МассивДанных = Новый Массив;
	
	Для Каждого ФайлАрхива Из МассивФайловАрхива Цикл
		Стр = Документ.Файлы.Добавить();
		Стр.Загружен = Истина;
		Стр.Путь = ФайлАрхива.ПолноеИмя;
		Стр.УИД = Новый УникальныйИдентификатор();
		Если СтрНайти(ФайлАрхива.Имя, "F103") > 0 Тогда
			ТипПрикрепляемогоФайла = Справочники.ТипыПрикрепляемыхФайлов.Форма103;
		Иначе
			ТипПрикрепляемогоФайла = "";
		КонецЕсли;	
		Стр.ТипФайла = ТипПрикрепляемогоФайла;
		Стр.Размер = ОкруглитьРазмерФайла(Строка(ФайлАрхива.Размер()));
		ДД = Новый ДвоичныеДанные(ФайлАрхива.ПолноеИмя);
		МассивДанных.Добавить(ДД);
		Документ.ПоместитьВХранилище(МассивДанных);
	КонецЦикла;
	Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);

КонецПроцедуры


//4. Печать ШПИ

&НаСервере
Процедура ПечатьШПИНаСервере(СписокИсходящейКорреспонденцииНаПечать)
	
	Для каждого Корр из СписокИсходящейКорреспонденцииНаПечать Цикл
		
		ВидыКорреспонденций = Корр.Ссылка;
		НаборКорреспонденций = Новый Массив;
		РегистрационныйНомер = Неопределено;
		Если ТипЗнч(ВидыКорреспонденций)  = Тип("СправочникСсылка.ГруппаИсходящейКорреспонденции") Тогда
			
			Для каждого Группа из ВидыКорреспонденций.СписокИсходящейКорреспонденции Цикл
				
				НаборКорреспонденций.Добавить(Группа.ИсходящаяКорреспонденция);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ТипЗнч(ВидыКорреспонденций) = Тип("СправочникСсылка.ИсходящаяКорреспонденция") Тогда
			
			НаборКорреспонденций.Добавить(ВидыКорреспонденций);
			
		КонецЕсли;
		
		СвойстваКорреспонденции = Новый Структура;
		СвойстваКорреспонденции.Вставить("ШПИ", Корр.ШПИ);
		Для каждого Корреспонденция Из НаборКорреспонденций Цикл
		
			ОбработатьКорреспонденцию(Корреспонденция, СвойстваКорреспонденции);
		
		КонецЦикла;
		
	КонецЦикла;
	
	//КаталогСервер = Константы.КаталогХраненияПрикрепляемыхФайловНаСервере.Получить();
	//Для каждого Корр из СписокИсходящейКорреспонденцииНаПечать Цикл
	//	Если ТипЗнч(Корр.Ссылка)  = Тип("СправочникСсылка.ГруппаИсходящейКорреспонденции") Тогда
	//		Для каждого Исх из Корр.Ссылка.СписокИсходящейКорреспонденции Цикл
	//			Для Каждого Эл из Исх.ИсходящаяКорреспонденция.ПодобранныеФайлы Цикл
	//				ТипФайла = Эл.ТипФайла; 
	//				Если ТипФайла.Конверт = Истина тогда
	//					Отбор = Новый структура("ТипФайла",ТипФайла);
	//					строкиКонверт = Эл.Регистратор.Файлы.НайтиСтроки(Отбор);
	//					Для Каждого Конверт из строкиКонверт Цикл
	//						Данные = ПолучитьДвоичныеДанныеКонверта(Конверт, КаталогСервер);
	//						Если Данные = Неопределено Тогда
	//							Сообщить("Программе не удалось получить Конверты для "+ Строка(Исх.ИсходящаяКорреспонденция.РегистрационныйНомер) +", печать не произошла!"); 
	//							Продолжить;
	//						КонецЕсли;	
	//						ИмяВремФайлаКонверта = ПолучитьимяВременногоФайла("doc");
	//						ФайлКонверт = Новый Файл(ИмяВремФайлаКонверта);
	//						Данные.Записать(ФайлКонверт.ПолноеИмя);
	//						//ФайлКонверт = новый Файл(Строка(ШаблонКонверт));
	//						ОбъектWord = Новый COMОбъект("Word.Application");
	//						ОбъектWord.Documents.add(ФайлКонверт.ПолноеИмя,0,0);
	//						ActiveDoc = ОбъектWord.ActiveDocument;
	//						Content = ActiveDoc.Content;				
	//						Замена = Content.Find;
	//						ШПИстр = строка(Корр.ШПИ); 
	//						ШПИСпец = ФормированиеСтрокиСпецСимволов(ШПИстр);
	//						Замена.Execute("{number}",,,,,,,,,ШПИСпец, 2); 
	//						
	//						// Лебедева 05122022
	//						// Кавычки елочки не заменяются на прямые кавычки, делаем принудительную замену
	//						
	//						слова = Content.Words;
	//						Для Каждого слово из слова Цикл 
	//							Если Слово.Text = ШПИСпец Тогда
	//								Если СтрНайти(Слово.Text, Символ(187))> 0 ИЛИ СтрНайти(Слово.Text, Символ(146))> 0 Тогда  
	//									Слово.Text = СтрЗаменить(Слово.Text, Символ(187), символ(34));
	//									Слово.Text = СтрЗаменить(Слово.Text, Символ(146), Символ(39));
	//								КонецЕсли;
	//							КонецЕсли;	
	//						КонецЦикла;								
	//						
	//						
	//						Замена.Font.Name = "IntP36DlTt";
	//						
	//						ШПИСтрока = Лев(ШПИстр,6);
	//						ШПИСтрока = ШПИСтрока + "     " + Сред(ШПИстр,7,2);
	//						ШПИСтрока = ШПИСтрока + "      " + Сред(ШПИстр,9,5);
	//						ШПИСтрока = ШПИСтрока + "     " + Сред(ШПИстр,14,1);
	//						
	//						Замена = Content.Find;
	//						Замена.Execute("{Номер ШПИ номер}",,,,,,,,,строка(ШПИСтрока), 2);
	//						
	//						ИмяВремФайла = ПолучитьИмяВременногоФайла("doc");
	//						ActiveDoc.SaveAs(ИмяВремФайла);
	//						ОбъектWord.Quit();
	//						
	//						НачВремя = ТекущаяДатаСеанса();
	//						
	//						Пока ТекущаяДатаСеанса() <= НачВремя + 3 Цикл
	//							Попытка
	//								ПереприкрепитьКонверт(Эл.Регистратор,Конверт.НомерСтроки, Новый ДвоичныеДанные(ИмяВремФайла));
	//								УдалитьФайлы(ИмяВремФайлаКонверта);
	//								Прервать;
	//							Исключение
	//							КонецПопытки;		
	//						КонецЦикла;
	//						
	//						НачВремя = ТекущаяДатаСеанса();
	//						Пока ТекущаяДатаСеанса() <= НачВремя + 3 Цикл
	//							Попытка
	//								УдалитьФайлы(ИмяВремФайла);
	//								Прервать;
	//							Исключение
	//							КонецПопытки;		
	//						КонецЦикла;
	//						Прервать;
	//					КонецЦикла;
	//				КонецЕсли;
	//			КонецЦикла;	
	//		КонецЦикла;
	//	ИначеЕсли ТипЗнч(Корр.Ссылка)  = Тип("СправочникСсылка.ИсходящаяКорреспонденция") Тогда
	//		Для Каждого Эл из Корр.Ссылка.ПодобранныеФайлы Цикл       
	//			ТипФайла = Эл.ТипФайла; 
	//			Если ТипФайла.Конверт = Истина тогда
	//				Отбор = Новый структура("ТипФайла",ТипФайла);
	//				строкиКонверт = Эл.Регистратор.Файлы.НайтиСтроки(Отбор);
	//				Для Каждого Конверт из строкиКонверт Цикл
	//					Данные = ПолучитьДвоичныеДанныеКонверта(Конверт, КаталогСервер);
	//					Если Данные = Неопределено Тогда
	//						Сообщить("Программе не удалось получить Конверты для "+ Строка(Корр.Ссылка.РегистрационныйНомер) +", печать не произошла!"); 
	//						Продолжить;
	//					КонецЕсли;	
	//					ИмяВремФайлаКонверта = ПолучитьимяВременногоФайла("doc");
	//					ФайлКонверт = Новый Файл(ИмяВремФайлаКонверта);
	//					Данные.Записать(ФайлКонверт.ПолноеИмя);
	//					//ФайлКонверт = новый Файл(Строка(ШаблонКонверт));
	//					ОбъектWord = Новый COMОбъект("Word.Application");
	//					ОбъектWord.Documents.add(ФайлКонверт.ПолноеИмя,0,0);
	//					ActiveDoc = ОбъектWord.ActiveDocument;
	//					Content = ActiveDoc.Content;				
	//					Замена = Content.Find;
	//					ШПИстр = строка(Корр.ШПИ);
	//					ШПИСпец = ФормированиеСтрокиСпецСимволов(ШПИстр);
	//					Замена.Execute("{number}",,,,,,,,,ШПИСпец, 2);
	//					
	//					// Лебедева 05122022
	//					// Кавычки елочки не заменяются на прямые кавычки, делаем принудительную замену
	//					
	//					слова = Content.Words;
	//					Для Каждого слово из слова Цикл 
	//						Если Слово.Text = ШПИСпец Тогда
	//							Если СтрНайти(Слово.Text, Символ(187))> 0 ИЛИ СтрНайти(Слово.Text, Символ(146))> 0 Тогда  
	//								Слово.Text = СтрЗаменить(Слово.Text, Символ(187), символ(34));
	//								Слово.Text = СтрЗаменить(Слово.Text, Символ(146), Символ(39));
	//							КонецЕсли;
	//						КонецЕсли;	
	//					КонецЦикла;								
	//					
	//					
	//					Замена.Font.Name = "IntP36DlTt";
	//					
	//					
	//					ШПИСтрока = Лев(ШПИстр,6);
	//					ШПИСтрока = ШПИСтрока + "     " + Сред(ШПИстр,7,2);
	//					ШПИСтрока = ШПИСтрока + "      " + Сред(ШПИстр,9,5);
	//					ШПИСтрока = ШПИСтрока + "     " + Сред(ШПИстр,14,1);
	//					
	//					Замена = Content.Find;
	//					Замена.Execute("{Номер ШПИ номер}",,,,,,,,,строка(ШПИСтрока), 2);
	//					
	//					ИмяВремФайла = ПолучитьИмяВременногоФайла("doc");
	//					ActiveDoc.SaveAs(ИмяВремФайла);
	//					ОбъектWord.Quit();
	//					
	//					НачВремя = ТекущаяДатаСеанса();
	//					
	//					Пока ТекущаяДатаСеанса() <= НачВремя + 3 Цикл
	//						Попытка
	//							ПереприкрепитьКонверт(Эл.Регистратор,Конверт.НомерСтроки, Новый ДвоичныеДанные(ИмяВремФайла));
	//							УдалитьФайлы(ИмяВремФайлаКонверта);
	//							Прервать;
	//						Исключение
	//						КонецПопытки;		
	//					КонецЦикла;
	//					
	//					НачВремя = ТекущаяДатаСеанса();
	//					Пока ТекущаяДатаСеанса() <= НачВремя + 3 Цикл
	//						Попытка
	//							УдалитьФайлы(ИмяВремФайла);
	//							Прервать;
	//						Исключение
	//						КонецПопытки;		
	//					КонецЦикла;
	//					Прервать;
	//				КонецЦикла;
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЕсли;	
	//КонецЦикла;		
КонецПроцедуры 

&НаСервере
Процедура ОбработатьКорреспонденцию(Корреспонденция, СвойстваКорреспонденции)

	СвойстваКорреспонденции.Вставить("РегистрационныйНомер", Корреспонденция.РегистрационныйНомер);
	
	ШаблонОдин = Истина;
	Попытка
	
		ШаблонКонверта = Справочники.ТипыИсходящихПисем.НайтиШаблонКонверта(Корреспонденция.ТипПисьма);
		Если ШаблонКонверта.Пустая() Тогда
		
			ШаблонОдин = Ложь;
			Текст = "Нет конвертов";
		
		КонецЕсли;
	
	Исключение
		ШаблонОдин = Ложь;
		Текст = ОписаниеОшибки();
	КонецПопытки;
	
	Если НЕ ШаблонОдин Тогда
	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Корреспонденция: " + Корреспонденция.РегистрационныйНомер + Символы.ПС + Текст;
		Сообщение.Сообщить();
		Возврат;
	
	КонецЕсли;
	
	СвойстваКорреспонденции.Вставить("ШаблонКонверта", ШаблонКонверта);
	
	Для Каждого ДанныеФайла из Корреспонденция.ПодобранныеФайлы Цикл
		
		СформироватьШПИ(ДанныеФайла, СвойстваКорреспонденции);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СформироватьШПИ(ДанныеФайла, СвойстваКорреспонденции)

	ТипФайла = ДанныеФайла.ТипФайла;
	Если НЕ ТипФайла.Конверт Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ТипКонверта = СвойстваКорреспонденции["ШаблонКонверта"].ТипПрикрепляемогоФайла;
	ТипПечатиКонверта = СвойстваКорреспонденции["ШаблонКонверта"].ТипДокумента;
	Если ТипПечатиКонверта = Перечисления.ТипыЭлДок.Универсальный
		И ТипФайла <> ТипКонверта Тогда
	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Корреспонденция: " + СвойстваКорреспонденции["РегистрационныйНомер"] + Символы.ПС
						+ "Тип файла указанный в типе письма и прикрепленного конверта отличаются";
		Сообщение.Сообщить();
		Возврат;
	
	КонецЕсли;
	
	Отбор = Новый Структура("ТипФайла", ТипФайла);
	Конверты = ДанныеФайла.Регистратор.Файлы.НайтиСтроки(Отбор);
	Если Конверты.Количество() = 0 Тогда
	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Корреспонденция: " + СвойстваКорреспонденции["РегистрационныйНомер"] + Символы.ПС
						+ "Не удалось найти прикрепленный конверт";
		Сообщение.Сообщить();
		Возврат;
	
	КонецЕсли;
	
	Конверт = Конверты[0];
	СвойстваКорреспонденции.Вставить("Конверт", Конверт);
	КаталогСервер = "";
	Если Константы.ХранитьПрикрепляемыеФайлыНаСервере.Получить() Тогда
	
		КаталогСервер = Константы.КаталогХраненияПрикрепляемыхФайловНаСервере.Получить();
	
	КонецЕсли;
	
	Данные = ПолучитьДвоичныеДанныеКонверта(Конверт, КаталогСервер);
	Если Данные = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Программе не удалось получить Конверты для " + Строка(СвойстваКорреспонденции["РегистрационныйНомер"]) + ", печать не произошла!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ХаррактеристикиФайла = Новый Файл(ДанныеФайла.Файл);
	
	Расширение = ХаррактеристикиФайла.Расширение;
	СвойстваКорреспонденции.Вставить("Расширение", Расширение);
	
	ИмяВремФайлаКонверта = ПолучитьИмяВременногоФайла(Расширение);
	ФайлКонверт = Новый Файл(ИмяВремФайлаКонверта);
	Данные.Записать(ФайлКонверт.ПолноеИмя);
	СвойстваКорреспонденции.Вставить("ИмяВременногоФайла", ФайлКонверт.ПолноеИмя);
	
	ШПИстр = Строка(СвойстваКорреспонденции["ШПИ"]);
	ШПИСпец = ФормированиеСтрокиСпецСимволов(ШПИстр);
	СвойстваКорреспонденции.Вставить("ШПИСпец", ШПИСпец);
	
	ШПИСтрока = Лев(ШПИстр, 6);
	ШПИСтрока = ШПИСтрока + "     " + Сред(ШПИстр, 7, 2);
	ШПИСтрока = ШПИСтрока + "      " + Сред(ШПИстр, 9, 5);
	ШПИСтрока = ШПИСтрока + "     " + Сред(ШПИстр, 14, 1);
	СвойстваКорреспонденции.Вставить("ШПИСтрока", ШПИСтрока);
	
	СвойстваКорреспонденции.Вставить("Регистратор", ДанныеФайла.Регистратор);
	
	Если ТипПечатиКонверта = Перечисления.ТипыЭлДок.Универсальный Тогда
	
		НанестиНаКонвертШПИ_Универсальный(СвойстваКорреспонденции);
	
	Иначе
	
		СформироватьШПИ_СОМ(Данные, СвойстваКорреспонденции);
	
	КонецЕсли;
	
	Попытка
	
		ФайловаяСистема.УдалитьВременныйФайл(ИмяВремФайлаКонверта);
	
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
	КонецПопытки;

КонецПроцедуры

#Область ТипыФормирования

&НаСервере
Процедура СформироватьШПИ_СОМ(ДвоичныеДанныеКонверта, СвойстваКорреспонденции)

	ОбъектWord = Новый COMОбъект("Word.Application");
	ОбъектWord.Documents.add(СвойстваКорреспонденции["ИмяВременногоФайла"], 0, 0);
	ActiveDoc = ОбъектWord.ActiveDocument;
	
	ActiveDoc.Select();
	НачальныеДанные = ОбъектWord.Selection;
	НачальныеДанные.Find.Execute("{number}");
	РазмерТекста = НачальныеДанные.Font.Size;
	ФонТекста = НачальныеДанные.Font.Name;
	
	Content = ActiveDoc.Content;
	Контент = Content.Text;
	
	ШПИСпец = СвойстваКорреспонденции["ШПИСпец"];
	Контент = СтрЗаменить(Контент, "{number}", ШПИСпец);
	
	ШПИСтрока = СвойстваКорреспонденции["ШПИСтрока"];
	Контент = СтрЗаменить(Контент, "{Номер ШПИ номер}", ШПИСтрока);
	
	Content.Text = Контент;
	
	ActiveDoc.Select();
	Тест = ОбъектWord.Selection;
	Тест.Find.Execute(ШПИСпец);
	
	Слова = Тест.Words;
	Для каждого Слово Из Слова Цикл
	
		Слово.Font.Name = ФонТекста;//"IntP36DlTt";
		Слово.Font.Size = РазмерТекста;
	
	КонецЦикла;
	
	ИмяВремФайла = ПолучитьИмяВременногоФайла(СвойстваКорреспонденции["Расширение"]);
	ActiveDoc.SaveAs(ИмяВремФайла);
	ОбъектWord.Quit();

	НачВремя = ТекущаяДатаСеанса();
	Пока ТекущаяДатаСеанса() <= НачВремя + 3 Цикл
		Попытка
			ПереприкрепитьКонверт(
				СвойстваКорреспонденции["Регистратор"],
				СвойстваКорреспонденции["Конверт"].НомерСтроки,
				Новый ДвоичныеДанные(ИмяВремФайла));
			Прервать;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Попытка
	
		ФайловаяСистема.УдалитьВременныйФайл(ИмяВремФайла);
	
	Исключение
	
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура НанестиНаКонвертШПИ_Универсальный(СвойстваКорреспонденции)

	Шаблон = СвойстваКорреспонденции["ШаблонКонверта"];

	ВставляемыеЗначения = Новый Структура;
	
	Теги = Обработки.МастерСозданияПартионнойПочты;
	ВставляемыеЗначения.Вставить(Теги.ТегШтрихкода(), СвойстваКорреспонденции["ШПИСпец"]);
	ВставляемыеЗначения.Вставить(Теги.ТегОтображения(), СвойстваКорреспонденции["ШПИСтрока"]);
	ОписаниеМакета = Справочники.тсВидыПечатныхДокументов.ЗаполнитьКонверт(Шаблон, ВставляемыеЗначения);
	
	// Файл крепится к объекту по которому формиорвался, поэтому передаем основание именно так
	АдресХранилищаПечатнойФормы = Справочники.тсВидыПечатныхДокументов.СформироватьКонверт(СвойстваКорреспонденции.Регистратор.Объект, ОписаниеМакета);
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилищаПечатнойФормы);
	Если ДвоичныеДанные = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось получить данные по переданному адресу!";
		Сообщение.Сообщить();
		Возврат;
	
	КонецЕсли;
	
	НачВремя = ТекущаяДатаСеанса();
	Пока ТекущаяДатаСеанса() <= НачВремя + 3 Цикл
		Попытка
			ПереприкрепитьКонверт(
				СвойстваКорреспонденции["Регистратор"],
				СвойстваКорреспонденции["Конверт"].НомерСтроки,
				ДвоичныеДанные);
			Прервать;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПолучитьДвоичныеДанныеКонверта(ЭлКонверт, КаталогХранения)  
	//Лебедева 19012023 - адаптация под разные хранения файлов
	Данные = Неопределено;
	Если Не ЗначениеЗаполнено(КаталогХранения) Тогда
		Данные = ЭлКонверт.Хранилище.Получить();
	Иначе
		Если Прав(КаталогХранения, 1) <> "\" Тогда
			КаталогХранения = КаталогХранения + "\";
		КонецЕсли;
		УИДстр = Строка(ЭлКонверт.УИД);
		ПозицияТочки = СтрНайти(Строка(ЭлКонверт.Путь), ".", НаправлениеПоиска.СКонца);
		Расширение = Прав(Строка(ЭлКонверт.Путь), СтрДлина(Строка(ЭлКонверт.Путь)) - ПозицияТочки + 1);
		ПутьКФайлуСрв = Строка(КаталогХранения + УИДстр + Расширение);
		Данные = Новый ДвоичныеДанные(ПутьКФайлуСрв);
	КонецЕсли;	
	Возврат Данные;

КонецФункции

&НаКлиенте
Процедура ПечатьШПИ(Команда)
	Режим = РежимДиалогаВопрос.ДаНет;
	ДП = Новый Структура();
	Оповещение = Новый ОписаниеОповещения("ПослеОтветаПечатать", ЭтаФорма, ДП);
	ТекстВопроса = "Внимание! После выполнения этой операции удалять и редактировать текущие заказы и партии будет невозможно. Продолжить выполнение печати штрих-кодов?";
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим);	
	
	//КонстантаПечататьШПИ = ПолучитьКонстантуПечататьШПИ();
	//Если КонстантаПечататьШПИ = Истина Тогда
	//	Режим = РежимДиалогаВопрос.ДаНет;
	//	ДП = Новый Структура();
	//	Оповещение = Новый ОписаниеОповещения("ПослеОтветаПечатать", ЭтаФорма, ДП);
	//	ТекстВопроса = "Внимание! После выполнения этой операции удалять и редактировать текущие заказы и партии будет невозможно. Продолжить выполнение печати штрих-кодов?";
	//	ПоказатьВопрос(Оповещение,ТекстВопроса, Режим);	
	//Иначе
	//	Сообщить ("Конверты с напечатанными ШПИ можно скачать из личного кабинета.");
	//	Для Каждого партия из Объект.ДокументыПартии Цикл 
	//		ИзменитьСтатусШПИ(партия.ДокументПартия,"Конверт");
	//	КонецЦикла;
	//	Элементы.СписокИсходящейКорреспонденцииПартииУдалитьЗаказShipment.Доступность = Ложь;
	//	Элементы.СписокИсходящейкорреспонденцииЗаказыУдалитьЗаказBacklog.Доступность = Ложь;
	//	Элементы.СписокИсходящейКорреспонденцииПартииСохранитьНаДиск.Доступность = истина;
	//КонецЕсли;
	//
КонецПроцедуры

&НаСервере
Функция ПолучитьКонстантуПечататьШПИ()
	Возврат Константы.ПечататьШПИ.Получить();	
КонецФункции

&НаКлиенте
Процедура ПослеОтветаПечатать(Результат,Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КонстантаПечататьШПИ = ПолучитьКонстантуПечататьШПИ();
	Если КонстантаПечататьШПИ = Истина Тогда
		Напечатано = Истина;
		Сообщить("Осуществляется печать...");
		ПроверкаКорреспонденцииНаПечать(Напечатано);
		Если Напечатано Тогда
			Сообщить("ШПИ нанесены на конверты!");
		КонецЕсли;	
		
	Иначе
		Напечатано = Истина;
		ПроверкаКорреспонденцииНаПечать(Напечатано);
		Сообщить ("Конверты с напечатанными ШПИ можно скачать из личного кабинета.");
	КонецЕсли;
	
	Если Напечатано Тогда
		Для Каждого партия из Объект.ДокументыПартии Цикл
			ИзменитьСтатусШПИ(партия.ДокументПартия, "Конверт");
		КонецЦикла;
		Элементы.СписокИсходящейКорреспонденцииПартииУдалитьЗаказShipment.Доступность = Ложь;
		Элементы.СписокИсходящейкорреспонденцииЗаказыУдалитьЗаказBacklog.Доступность = Ложь;
		Элементы.СписокИсходящейКорреспонденцииПартииСохранитьНаДиск.Доступность = истина;
		//Сообщить("ШПИ нанесены на конверты!");	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверкаКорреспонденцииНаПечать(Напечатано)
	
	КорреспонденцияНаПечать = НайтиКорреспонденциюСтатусЗакреплен();
	Если КорреспонденцияНаПечать = Неопределено Тогда
		Сообщить("Нет коррепспонденции, на которую необходимо нанести ШПИ!");
		Напечатано = Ложь;
		Возврат;
	КонецЕсли;	
	Если КорреспонденцияНаПечать.Количество() = 0 Тогда
		Сообщить("Нет коррепспонденции, на которую необходимо нанести ШПИ!");
	КонецЕсли;
	ПечатьШПИНаСервере(КорреспонденцияНаПечать);
КонецПроцедуры

&НаСервере
Функция ФормированиеСтрокиСпецСимволов(ВхСтрока)
	лВхСтрока = ВхСтрока;
	лСимволы = Новый Соответствие;
	лСимволы.Вставить("00","#");
	лСимволы.Вставить("01","$");
	лСимволы.Вставить("02","%");
	лСимволы.Вставить("03","&");
	лСимволы.Вставить("04","'");
	лСимволы.Вставить("05","(");
	лСимволы.Вставить("06",")");
	лСимволы.Вставить("07","*");
	лСимволы.Вставить("08","+");
	лСимволы.Вставить("09",",");
	лСимволы.Вставить("10","-");
	лСимволы.Вставить("11",".");
	лСимволы.Вставить("12","/");
	лСимволы.Вставить("13","0");
	лСимволы.Вставить("14","1");
	лСимволы.Вставить("15","2");
	лСимволы.Вставить("16","3");
	лСимволы.Вставить("17","4");
	лСимволы.Вставить("18","5");
	лСимволы.Вставить("19","6");
	лСимволы.Вставить("20","7");
	лСимволы.Вставить("21","8");
	лСимволы.Вставить("22","9");
	лСимволы.Вставить("23",":");
	лСимволы.Вставить("24",";");
	лСимволы.Вставить("25","<");
	лСимволы.Вставить("26","=");
	лСимволы.Вставить("27",">");
	лСимволы.Вставить("28","?");
	лСимволы.Вставить("29","@");
	лСимволы.Вставить("30","A");
	лСимволы.Вставить("31","B");
	лСимволы.Вставить("32","C");
	лСимволы.Вставить("33","D");
	лСимволы.Вставить("34","E");
	лСимволы.Вставить("35","F");
	лСимволы.Вставить("36","G");
	лСимволы.Вставить("37","H");
	лСимволы.Вставить("38","I");
	лСимволы.Вставить("39","J");
	лСимволы.Вставить("40","K");
	лСимволы.Вставить("41","L");
	лСимволы.Вставить("42","M");
	лСимволы.Вставить("43","N");
	лСимволы.Вставить("44","O");
	лСимволы.Вставить("45","P");
	лСимволы.Вставить("46","Q");
	лСимволы.Вставить("47","R");
	лСимволы.Вставить("48","S");
	лСимволы.Вставить("49","T");
	лСимволы.Вставить("50","U");
	лСимволы.Вставить("51","V");
	лСимволы.Вставить("52","W");
	лСимволы.Вставить("53","X");
	лСимволы.Вставить("54","Y");
	лСимволы.Вставить("55","Z");
	лСимволы.Вставить("56","[");
	лСимволы.Вставить("57","\");
	лСимволы.Вставить("58","]");
	лСимволы.Вставить("59","^^");
	лСимволы.Вставить("60","_");
	лСимволы.Вставить("61","`");
	лСимволы.Вставить("62","a");
	лСимволы.Вставить("63","b");
	лСимволы.Вставить("64","c");
	лСимволы.Вставить("65","d");
	лСимволы.Вставить("66","e");
	лСимволы.Вставить("67","f");
	лСимволы.Вставить("68","g");
	лСимволы.Вставить("69","h");
	лСимволы.Вставить("70","i");
	лСимволы.Вставить("71","j");
	лСимволы.Вставить("72","k");
	лСимволы.Вставить("73","l");
	лСимволы.Вставить("74","m");
	лСимволы.Вставить("75","n");
	лСимволы.Вставить("76","o");
	лСимволы.Вставить("77","p");
	лСимволы.Вставить("78","q");
	лСимволы.Вставить("79","r");
	лСимволы.Вставить("80","s");
	лСимволы.Вставить("81","t");
	лСимволы.Вставить("82","u");
	лСимволы.Вставить("83","v");
	лСимволы.Вставить("84","w");
	лСимволы.Вставить("85","x");
	лСимволы.Вставить("86","y");
	лСимволы.Вставить("87","z");
	лСимволы.Вставить("88","{");
	лСимволы.Вставить("89","|");
	лСимволы.Вставить("90","}");
	лСимволы.Вставить("91","~");
	лСимволы.Вставить("92","Ä");
	лСимволы.Вставить("93","Å");
	лСимволы.Вставить("94","Ç");
	лСимволы.Вставить("95","É");
	лСимволы.Вставить("96","Ñ");
	лСимволы.Вставить("97","Ö");
	лСимволы.Вставить("98","Ü");
	лСимволы.Вставить("99","á");
	
	НовСтр = "";                        
	Пока СтрДлина(лВхСтрока) > 0 Цикл
		Пара = лев(лВхСтрока,2);
		лВхСтрока = прав(лВхСтрока,СтрДлина(лВхСтрока)-2);
		НовСтр = НовСтр+лСимволы[Пара]
	КонецЦикла;
	Возврат "!" + НовСтр + """";
Конецфункции	

&НаСервере
Процедура ПереприкрепитьКонверт(Документ,НомерСтроки,ДДКонверта);
	ДокОбъект = Документ.ПолучитьОбъект();
	МассивДанных = Новый Массив;
	МассивДанных.Добавить(ДДКонверта);
	ДокОбъект.Файлы[НомерСтроки-1].Хранилище = Новый ХранилищеЗначения(МассивДанных[0], Новый СжатиеДанных(9));	
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
КонецПроцедуры

//5. Удаление Заказов

//5 а Из бэклога

&НаСервере
Процедура УдалитьЗаказBackLogНаСервере(Успешно,тЗапрос)
	token = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("токен");
	Logkey = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("ключ");

	тЗаписьJSON = Новый ЗаписьJSON;
	тПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);  
	тЗаписьJSON.УстановитьСтроку(тПараметрыJSON);   
	Сервер = "otpravka-api.pochta.ru";
	Ресурс = "/1.0/backlog";
	ЗаписатьJSON(тЗаписьJSON, тЗапрос);
	strJSON = тЗаписьJSON.Закрыть();
	strJSON = СтрЗаменить(strJSON,"""","");
	HTTPЗапрос = Новый HTTPЗапрос;
	
	HTTPЗапрос.УстановитьТелоИзСтроки(strJSON);
	
	HTTPЗапрос.АдресРесурса = Ресурс;	
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL;
	
	HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);   
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
	
	HTTPЗапрос.Заголовки.Вставить("Authorization","AccessToken " + token);
	
	HTTPЗапрос.Заголовки.Вставить("X-User-Authorization","Basic " + Logkey);
	
	Попытка
		СчетчикПопыток = 1;
		Пока СчетчикПопыток<20 Цикл
			Попытка
				ОтветHTTP = HTTP.Удалить(HTTPЗапрос);
				Прервать;
			Исключение
				Сообщить("Попытка получения ответа: "+СчетчикПопыток);
				СчетчикПопыток = СчетчикПопыток+1;
			КонецПопытки;	
		КонецЦикла;		
	Исключение
		СтрокаСообщения = ОписаниеОшибки();
		Сообщить(СтрокаСообщения, СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;
	Отвечено = ОбработатьОтветHTTP(ОтветHTTP,Истина);
	Если не Отвечено Тогда
		Успешно = Ложь;
	КонецЕсли;	
	
	СтрокаОтвет = ОтветHTTP.ПолучитьТелоКакСтроку();
	СтрокаОтвет = ПреобразоватьСтроку(СтрокаОтвет);
	Сообщить(СтрокаОтвет);
	Если СтрНайти(СтрокаОтвет,"error",,,) <> 0 Или СтрНайти ( СтрокаОтвет,"INTERNAL_ERROR",,,)<>0 Тогда
		Успешно = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаказBackLog(Команда)
	ТекДанные = Элементы.СписокИсходящейКорреспонденцииЗаказы.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекДанные.ИдентификаторПочты) Тогда
		Сообщить("Заказ отсутствует на сервисе Почты РФ!");
		Возврат;
	КонецЕсли;
	
	тЗапрос = Новый Массив;
	тЗапрос.Добавить(Число(ТекДанные.ИдентификаторПочты));
	Режим = РежимДиалогаВопрос.ДаНет;
	ДП = Новый Структура("Запрос",тЗапрос);
	ДП.Вставить("ИдентификаторПочты",ТекДанные.ИдентификаторПочты);
	ДП.Вставить("ШПИ",ТекДанные.ШПИ);
	Оповещение = Новый ОписаниеОповещения("ПослеОтветаУдалить", ЭтаФорма, ДП);
	ТекстВопроса = "Подтвердить удаление заказа для исходящей " + ТекДанные.ИсходящаяКорреспонденция + " ?";
	ПоказатьВопрос(Оповещение,ТекстВопроса, Режим);

КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаУдалить(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	тЗапрос  = Параметры.Запрос;
	Успешно = Истина;
	УдалитьЗаказBackLogНаСервере(Успешно, тЗапрос);
	Если НЕ Успешно Тогда
		Сообщить ("Произошла ошибка во время выполнения запроса!");
		Возврат;
	КонецЕсли;
	
	ШПИНаУдаление = Новый Массив;
	СтруктураМассива = новый структура;
	СтруктураМассива.Вставить("ШПИСсылка",Параметры.ШПИ);
	СтруктураМассива.Вставить("IDПочты",Параметры.ИдентификаторПочты);
	ШПИНаУдаление.Добавить(СтруктураМассива);
	ИзменитьСтатусШПИУдаление(ШПИНаУдаление);
	ТекДанные = Элементы.СписокИсходящейКорреспонденцииЗаказы.ТекущиеДанные;
	ИсхКорр = ТекДанные.ИсходящаяКорреспонденция;
	Вид = ТекДанные.ВидРПО;
	Категория = ТекДанные.КатегорияРПО;
	ПеремХрупкое = ТекДанные.Хрупкое;
	ПеремКурьер = ТекДанные.Курьер;
	ПеремЗУ = ТекДанные.ЗаказноеУведомление;
	ПеремПУ = Текданные.ПростоеУведомление;
	ПеремВНП = ТекДанные.ВозвратуНеПодлежит;
	Корректность = ТекДанные.КорректностьАдреса;
	Адрес = ТекДанные.Адресат;
	АдресСтр = ТекДанные.СтруктураАдреса;
	СтруктураДляПоиска = Новый Структура("ИсходящаяКорреспонденция",ИсхКорр);
	МассивПустыхСтрок = Объект.СписокИсходящейКорреспонденции.НайтиСтроки(СтруктураДляПоиска); 
	Для каждого Строка Из МассивПустыхСтрок Цикл
		Объект.СписокИсходящейКорреспонденции.Удалить(Строка);
		СтрокаЗамена = Объект.СписокИсходящейКорреспонденции.Добавить();
		СтрокаЗамена.ИсходящаяКорреспонденция = ИсхКорр;
		СтрокаЗамена.КатегорияРПО = Категория;
		СтрокаЗамена.ВидРПО = Вид;
		СтрокаЗамена.Хрупкое = ПеремХрупкое;
		СтрокаЗамена.Курьер = ПеремКурьер;
		СтрокаЗамена.ЗаказноеУведомление = ПеремЗУ;
		СтрокаЗамена.ПростоеУведомление = ПеремПУ;
		СтрокаЗамена.КорректностьАдреса = Корректность;
		СтрокаЗамена.ВозвратуНеПодлежит = ПеремВНП;
		СтрокаЗамена.Адресат = Адрес;
		СтрокаЗамена.СтруктураАдреса = АдресСтр;
	КонецЦикла;

КонецПроцедуры



//5 б Из шипмента

&НаСервере
Процедура УдалитьЗаказShipmentНаСервере(Успешно,тЗапрос)
	token = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("токен");
	Logkey = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("ключ");

	тЗаписьJSON = Новый ЗаписьJSON;
	тПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);  
	тЗаписьJSON.УстановитьСтроку(тПараметрыJSON);   
	Сервер = "otpravka-api.pochta.ru";
	Ресурс = "/1.0/shipment";
	ЗаписатьJSON(тЗаписьJSON, тЗапрос);
	strJSON = тЗаписьJSON.Закрыть();
	strJSON = СтрЗаменить(strJSON, """", "");
	HTTPЗапрос = Новый HTTPЗапрос;
	
	HTTPЗапрос.УстановитьТелоИзСтроки(strJSON);
	
	HTTPЗапрос.АдресРесурса = Ресурс;	
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL;
	
	HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);   
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
	
	HTTPЗапрос.Заголовки.Вставить("Authorization","AccessToken " + token);
	
	HTTPЗапрос.Заголовки.Вставить("X-User-Authorization","Basic " + Logkey);
	
	Попытка
		СчетчикПопыток = 1;
		Пока СчетчикПопыток < 20 Цикл
			Попытка
				ОтветHTTP = HTTP.Удалить(HTTPЗапрос);
				Прервать;
			Исключение
				Сообщить("Попытка получения ответа: " + СчетчикПопыток);
				СчетчикПопыток = СчетчикПопыток +1 ;
			КонецПопытки;	
		КонецЦикла;		
	Исключение
		СтрокаСообщения = ОписаниеОшибки();
		Сообщить(СтрокаСообщения, СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;
	
	Отвечено = ОбработатьОтветHTTP(ОтветHTTP, Истина);
	Если не Отвечено Тогда
		Успешно = Ложь;
	КонецЕсли;	
	
	СтрокаОтвет = ОтветHTTP.ПолучитьТелоКакСтроку();
	СтрокаОтвет = ПреобразоватьСтроку(СтрокаОтвет);
	Сообщить(СтрокаОтвет);
	
	Если СтрНайти(СтрокаОтвет,"error") <> 0 Или СтрНайти ( СтрокаОтвет,"INTERNAL_ERROR") <> 0 Тогда
		Успешно = Ложь;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаказShipment(Команда)
	ТекДанные = Элементы.СписокИсходящейКорреспонденцииПартии.ТекущиеДанные;
	ЗаполненыЗначенияПочты = ЗначениеЗаполнено(ТекДанные.ИдентификаторПочты) И ЗначениеЗаполнено(ТекДанные.ИмяПартии);
	Если НЕ ЗаполненыЗначенияПочты Тогда
		Сообщить("Заказ отсутствует в какой-либо партии на сервисе Почты РФ!");
		Возврат;
	КонецЕсли;
	
	тЗапрос = Новый Массив;
	тЗапрос.Добавить(ТекДанные.ИдентификаторПочты);
	Режим = РежимДиалогаВопрос.ДаНет;
	ДП = Новый Структура("Запрос",тЗапрос);
	ДП.Вставить("ИдентификаторПочты",ТекДанные.ИдентификаторПочты);
	ДП.Вставить("ШПИ",ТекДанные.ШПИ);
	ДП.Вставить("ИмяПартии",ТекДанные.ИмяПартии);
	Оповещение = Новый ОписаниеОповещения("ПослеОтветаУдалитьИзПартии", ЭтаФорма, ДП);
	ТекстВопроса = "Подтвердить удаление заказа из партии для исходящей " + ТекДанные.ИсходящаяКорреспонденция + " ?";
	ПоказатьВопрос(Оповещение,ТекстВопроса, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаУдалитьИзПартии(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	тЗапрос  = Параметры.Запрос;
	Успешно = Истина;
	УдалитьЗаказShipmentНаСервере(Успешно,тЗапрос);
	Если Успешно Тогда
		ШПИНаУдаление = Новый Массив;
		СтруктураМассива = новый структура;
		СтруктураМассива.Вставить("ШПИСсылка",Параметры.ШПИ);
		СтруктураМассива.Вставить("IDПочты",Параметры.ИдентификаторПочты);
		ШПИНаУдаление.Добавить(СтруктураМассива);
		ИзменитьСтатусШПИУдаление(ШПИНаУдаление);
		ТекДанные = Элементы.СписокИсходящейКорреспонденцииПартии.ТекущиеДанные;
		ОчиститьРСПартииИсходящейКорреспонденции(ТекДанные.ИсходящаяКорреспонденция);
		ОчиститьТЧДокументаПартии(ТекДанные.ДокументПартия,ТекДанные.ИсходящаяКорреспонденция);
		ИсхКорр = ТекДанные.ИсходящаяКорреспонденция;
		Вид = ТекДанные.ВидРПО;
		Категория = ТекДанные.КатегорияРПО;
		ПеремХрупкое = ТекДанные.Хрупкое;
		ПеремКурьер = ТекДанные.Курьер;
		ПеремЗУ = ТекДанные.ЗаказноеУведомление;
		ПеремПУ = Текданные.ПростоеУведомление;
		ПеремВНП = ТекДанные.ВозвратуНеПодлежит;
		Корректность = ТекДанные.КорректностьАдреса;
		Адрес = ТекДанные.Адресат;
		АдресСтр = ТекДанные.СтруктураАдреса;
		СтруктураДляПоиска = Новый Структура("ИсходящаяКорреспонденция",ИсхКорр);
		МассивПустыхСтрок = Объект.СписокИсходящейКорреспонденции.НайтиСтроки(СтруктураДляПоиска); 
		Для каждого Строка Из МассивПустыхСтрок Цикл
			Объект.СписокИсходящейКорреспонденции.Удалить(Строка);
			СтрокаЗамена = Объект.СписокИсходящейКорреспонденции.Добавить();
			СтрокаЗамена.ИсходящаяКорреспонденция = ИсхКорр;
			СтрокаЗамена.КатегорияРПО = Категория;
			СтрокаЗамена.ВидРПО = Вид;
			СтрокаЗамена.Хрупкое = ПеремХрупкое;
			СтрокаЗамена.ВозвратуНеПодлежит = ПеремВНП; 
			СтрокаЗамена.Курьер = ПеремКурьер;
			СтрокаЗамена.ЗаказноеУведомление = ПеремЗУ;
			СтрокаЗамена.ПростоеУведомление = ПеремПУ;
			СтрокаЗамена.КорректностьАдреса = Корректность;
			СтрокаЗамена.Адресат=Адрес;
			СтрокаЗамена.СтруктураАдреса=АдресСтр;
		КонецЦикла; 
		
			
		//ТекДанные.ШПИ = "";
		//ТекДанные.ИдентификаторПочты = "";
		//ТекДанные.Тариф = "";
		//ТекДанные.ДокументПартия = "";
		//ТекДанные.Имяпартии = "";
		Сообщить(Параметры.ИмяПартии);
	Иначе
		Сообщить ("Произошла ошибка во время выполнения запроса!");
	КонецЕсли;
	
	ЕстьПартия = НайтиПартиюПоИмени(Параметры.ИмяПартии);
	
	Если Не ЕстьПартия Тогда
		ПартииНаУдаление = Новый Массив;
				
		Для Каждого стр из Объект.ДокументыПартии Цикл
			Если (Стр.ИмяПартии) = Параметры.ИмяПартии Тогда
				ПартииНаУдаление.Добавить(Стр.ДокументПартия);
			КонецЕсли;
		КонецЦикла;
		УдалитьПартии(ПартииНаУдаление);
		
		СтрокиНаУдаление = Объект.ДокументыПартии.НайтиСтроки(Новый Структура("ИмяПартии",Параметры.ИмяПартии));
		Для каждого СтрокаТаблицы Из СтрокиНаУдаление Цикл
			Объект.ДокументыПартии.Удалить(СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли; 
	
	Элементы.СписокИсходящейКорреспонденцииПартииПеренестиЗаказВПартию.Доступность = Истина;
КонецПроцедуры

&НаСервере
Процедура ОчиститьТЧДокументаПартии(ДокументПартия,ИсходящаяКорреспонденция)	
	ДокОбъект = ДокументПартия.ПолучитьОбъект();
	Отбор = Новый Структура("ИсходящаяКорреспонденция",ИсходящаяКорреспонденция);
	НайденнаяСтрока =  ДокОбъект.СписокИсходящейКорреспонденции.НайтиСтроки(Отбор);
	
	Для каждого Строка Из НайденнаяСтрока Цикл 
		ДокОбъект.СписокИсходящейКорреспонденции.Удалить(Строка); 
	КонецЦикла; 
	ДокОбъект.Записать();
КонецПроцедуры

//6 Сохранение файлов корреспонденции на диск
&НаСервере
Процедура СохранитьНаДискНаСервере(ИмяКаталога)
	ТЗ_корреспонденции = НайтиКорреспонденциюСтатусНанесенНаКонверт();
	Для каждого корр из  ТЗ_корреспонденции Цикл
		Если ТипЗнч(Корр.Ссылка)  = Тип("СправочникСсылка.ГруппаИсходящейКорреспонденции") Тогда
			Для каждого Исх из Корр.Ссылка.СписокИсходящейКорреспонденции Цикл
				ТаблицаДоковПрикрепитьФайлы = Исх.ИсходящаяКорреспонденция.ПрикрепленныеФайлы;
				РегНомерБезСимволов = стрЗаменить(строка(Исх.ИсходящаяКорреспонденция.РегистрационныйНомер),"\","");
				РегНомерБезСимволов = стрЗаменить(строка(Исх.ИсходящаяКорреспонденция.РегистрационныйНомер),"/","");
				Для каждого Док из ТаблицаДоковПрикрепитьФайлы Цикл
					ТЧФайлы = Док.ПрикрепленныйФайл.Файлы;
					Для каждого ф из ТЧФайлы Цикл
						ДД = Ф.Хранилище.Получить();
						КаталогСохранения = ИмяКаталога+"\"+ строка(Корр.ШПИ) +"\"+РегНомерБезСимволов;
						СоздатьКаталог(КаталогСохранения);
						ПозицияПоследнегоСлеша = СтрНайти(Ф.Путь,"\",НаправлениеПоиска.СКонца,,);  
						ИмяФайла = Прав(Ф.Путь,СтрДлина(Ф.Путь)-ПозицияПоследнегоСлеша);
						ДД.Записать(КаталогСохранения + "\"+ИмяФайла);
					КонецЦикла;
				КонецЦикла;		
			КонецЦикла;			
		ИначеЕсли ТипЗнч(Корр.Ссылка)  = Тип("СправочникСсылка.ИсходящаяКорреспонденция") Тогда
			ТаблицаДоковПрикрепитьФайлы = корр.ссылка.ПрикрепленныеФайлы;
			Для каждого Док из ТаблицаДоковПрикрепитьФайлы Цикл
				ТЧФайлы = Док.ПрикрепленныйФайл.Файлы;
				Для каждого ф из ТЧФайлы Цикл
					ДД = Ф.Хранилище.Получить();
					КаталогСохранения = ИмяКаталога+"\"+ строка(Корр.ШПИ);
					СоздатьКаталог(КаталогСохранения);
					ПозицияПоследнегоСлеша = СтрНайти(Ф.Путь,"\",НаправлениеПоиска.СКонца,,);  
					ИмяФайла = Прав(Ф.Путь,СтрДлина(Ф.Путь)-ПозицияПоследнегоСлеша);
					ДД.Записать(КаталогСохранения + "\"+ИмяФайла);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;			
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаДиск(Команда)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Если Диалог.Выбрать() Тогда
		ИмяКаталога = Диалог.Каталог;
	КонецЕсли;
	СохранитьНаДискНаСервере(ИмяКаталога);
	Сообщить("Файлы успешно сохранены на диск!");
КонецПроцедуры

//Обработка закрытия и удаления
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если не ЗавершениеРаботы и ЗавершитьРаботуМастера = Ложь Тогда
		СтандартнаяОбработка = Ложь;	
		ШПИНаУдаление = Новый Массив;
		ПартииНаУдаление = Новый Массив;
		Отказ = Ложь;
		Для Каждого стр из Объект.СписокИсходящейКорреспонденции Цикл
			Если ЗначениеЗаполнено(Стр.ШПИ) Тогда
				СтруктураМассива = новый Структура;
				СтруктураМассива.Вставить("ШПИСсылка",Стр.ШПИ);
				СтруктураМассива.Вставить("IDПочты",Стр.ИдентификаторПочты);
				СтруктураМассива.Вставить("ИсхКорр",Стр.ИсходящаяКорреспонденция);
				ШПИНаУдаление.Добавить(СтруктураМассива);	
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого стр из Объект.ДокументыПартии Цикл
			Если ЗначениеЗаполнено(Стр.ДокументПартия) Тогда
				ПартииНаУдаление.Добавить(Стр.ДокументПартия);
			КонецЕсли;
		КонецЦикла;
		
		
		Если ШПИНаУдаление.Количество() <> 0 Или ПартииНаУдаление.Количество() <> 0 Тогда
			Отказ = Истина;
			//Для Каждого эл из ШПИНаУдаление Цикл
			//	Сообщить("На удаление:" + эл.ШПИСсылка.Наименование);
			//	
			//КонецЦикла;
			//
			//Для Каждого эл из ПартииНаУдаление Цикл 
			//	Сообщить("На удаление:" + эл.Ссылка);
			//КонецЦикла;
			
			ДП = Новый Структура;
			ДП.Вставить("МассивШПИ",ШПИНаУдаление);
			ДП.Вставить("МассивДоков",ПартииНаУдаление);
			ОповещениеУдалитьОбъекты = Новый ОписаниеОповещения("ПослеВопросаУдалитьОбъекты", ЭтотОбъект,ДП);
			
			Текст = НСтр("ru = 'Внимание! При закрытии будут удалены указанные выше объекты! Продолжить закрытие?'");
			ПоказатьВопрос(ОповещениеУдалитьОбъекты, Текст, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаУдалитьОбъекты(Результат, Параметры) Экспорт
	УдалитьШПИ = Параметры.МассивШПИ;
	УдалитьДоки = Параметры.МассивДоков;
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ИзменитьСтатусШПИУдаление(УдалитьШПИ);
	УдалитьПартии(УдалитьДоки);
	тЗапрос = Новый Массив;
	Для Каждого эл из УдалитьШПИ Цикл
		тЗапрос.Добавить(эл.IDПочты);
	КонецЦикла;	
	
	Попытка
		УдалитьЗаказBacklogНаСервере(Истина,тЗапрос);
	Исключение
	КонецПопытки;
	
	Попытка
		УдалитьЗаказShipmentНаСервере(Истина,тЗапрос);
	Исключение
	КонецПопытки;
	Для Каждого эл из УдалитьШПИ Цикл
		ОчиститьРСПартииИсходящейКорреспонденции(Эл.ИсхКорр);
	КонецЦикла;	
	
	Объект.СписокИсходящейКорреспонденции.Очистить();
	Объект.ДокументыПартии.Очистить();
	ЭтаФорма.Закрыть();
КонецПроцедуры

&НаСервере
Процедура ОчиститьРСПартииИсходящейКорреспонденции(Исходящая)
	НаборЗаписей = РегистрыСведений.ПартииИсходящейКорреспонденции.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИсходящаяКорреспонденция.Установить(Исходящая);
	НаборЗаписей.Записать();
Конецпроцедуры

&НаКлиенте
Процедура ЗавершениеРаботы(Команда)
	ЗавершитьРаботуМастера = Истина;
	ЭтаФорма.Закрыть();
КонецПроцедуры

//Запросы-Обновления
&НаСервере
Процедура ОбновитьинформациюОЗаказах(Место, Партия)
	Если Место = "backlog" и Партия = Неопределено Тогда
		ОбновитьИнформациюБэкЛог();
	ИначеЕсли Место = "shipment" и Партия <> Неопределено  Тогда
		ОбновитьИнформациюШипМент(Партия);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюБэкЛог()

	token = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("токен");
	Logkey = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("ключ");
	
	Для Каждого стр из Объект.СписокИсходящейКорреспонденции Цикл
		тЗаписьJSON = Новый ЗаписьJSON;
		тПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);  
		тЗаписьJSON.УстановитьСтроку(тПараметрыJSON);   
		ИД_Магазина =
			?(ТипЗнч(Стр.ИсходящаяКорреспонденция) = Тип("СправочникСсылка.ИсходящаяКорреспонденция"),
			(Строка(Стр.ИсходящаяКорреспонденция.РегистрационныйНомер) + " от " + Строка(Формат(Стр.ИсходящаяКорреспонденция.ДатаРегистрации, "ДЛФ=Д"))),
			(Строка(Стр.ИсходящаяКорреспонденция.Код) + " от " + Строка(Формат(ТекущаяДатаСеанса(), "ДЛФ=Д"))));
		тЗапрос = ИД_Магазина;
		СтрокаЗапроса = "?query="+тЗапрос;
		ЗаписатьJSON(тЗаписьJSON, тЗапрос);
		strJSON = тЗаписьJSON.Закрыть();
		Сервер = "otpravka-api.pochta.ru";      
		Ресурс = "/1.0/backlog/search";
		HTTPЗапрос = Новый HTTPЗапрос;
		HTTPЗапрос.АдресРесурса = Ресурс + СтрокаЗапроса;
		ssl = Новый ЗащищенноеСоединениеOpenSSL;
		HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);   
		ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();
		HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
		HTTPЗапрос.Заголовки.Вставить("Authorization","AccessToken " + token);
		HTTPЗапрос.Заголовки.Вставить("X-User-Authorization","Basic " + Logkey);
		Попытка
			СчетчикПопыток = 1;
			Пока СчетчикПопыток<20 Цикл
				Попытка
					ОтветHTTP = HTTP.Получить(HTTPЗапрос,ИмяВыходногоФайла);
					Прервать;
				Исключение
					Сообщить("Попытка получения ответа: "+СчетчикПопыток);
					СчетчикПопыток  = СчетчикПопыток+1;
				КонецПопытки;	
			КонецЦикла;		
		Исключение
			СтрокаСообщения = ОписаниеОшибки();
			Сообщить(СтрокаСообщения, СтатусСообщения.Важное);
			УдалитьФайлы(имяВыходногоФайла);
			Возврат;
		КонецПопытки;
		
		Отвечено = ОбработатьОтветHTTP(ОтветHTTP,Истина);
		Если Не Отвечено Тогда
			УдалитьФайлы(имяВыходногоФайла);
			Возврат;
		КонецЕсли;
		
		ЧтениеJSON = Новый ЧтениеJSON;	
		ЧтениеJSON.ОткрытьФайл(имяВыходногоФайла);
		
		СтруктураJSON = ПрочитатьJSON(ЧтениеJSON,Истина);
		
		Для каждого элемент из СтруктураJSON цикл
			Для Каждого соотв из элемент Цикл
				Если соотв.Ключ = "barcode" Тогда
					ПеремШПИ = соотв.Значение;
					ЕстьШПИ = Справочники.ШПИ.НайтиПоНаименованию(СтрЗаменить(Строка(ПеремШПИ),Символы.НПП,""),Истина);
					Если ЕстьШПИ = Справочники.ШПИ.ПустаяСсылка() Тогда
						ШПИ_Объект = Справочники.ШПИ.СоздатьЭлемент();
						ШПИ_объект.Наименование = СтрЗаменить(Строка(ПеремШПИ),Символы.НПП,"");
						ШПИ_Объект.Владелец = Стр.ИсходящаяКорреспонденция;
						ШПИ_объект.Записать();
						стр.ШПИ = ШПИ_объект.Ссылка;
					Иначе
						Стр.ШПИ = ЕстьШПИ;
					КонецЕсли;
				КонецЕсли;
				Если соотв.Ключ = "id" Тогда
					Стр.ИдентификаторПочты = СтрЗаменить(Строка(соотв.Значение),Символы.НПП,"");			
				КонецЕсли;
				Если соотв.Ключ = "total-vat" Тогда
					НДС = соотв.Значение;			
				КонецЕсли;
				Если соотв.Ключ = "total-rate-wo-vat" Тогда
					БезНДС = соотв.Значение;			
				КонецЕсли;				
			КонецЦикла;
			Если ЗначениеЗаполнено(НДС) И  ЗначениеЗаполнено(БезНДС) Тогда
				Стр.Тариф = (НДС + БезНДС)/100;
			Иначе
				Сообщить("Ошибка получения тарифа по исходящей " + Строка(Стр.ИсходящаяКорреспонденция) );
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюШипМент(Партия)
	
	token = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("токен");
	Logkey = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("ключ");
	
	Для Каждого стр из Объект.СписокИсходящейКорреспонденции Цикл
		
		тЗаписьJSON = Новый ЗаписьJSON;
		тПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);  
		тЗаписьJSON.УстановитьСтроку(тПараметрыJSON);
		Если Партия тогда
			тЗапрос = Строка(Стр.ШПИ.Наименование);
		Иначе
			ИД_Магазина = 
			?(ТипЗнч(Стр.ИсходящаяКорреспонденция) = Тип("СправочникСсылка.ИсходящаяКорреспонденция"),
			(Строка(Стр.ИсходящаяКорреспонденция.РегистрационныйНомер) + " от " + Строка(Формат(Стр.ИсходящаяКорреспонденция.ДатаРегистрации, "ДЛФ=Д"))),
			(Строка(Стр.ИсходящаяКорреспонденция.Код) + " от " + Строка(Формат(ТекущаяДатаСеанса(), "ДЛФ=Д"))));	
			тЗапрос = ИД_Магазина;
		Конецесли;
		СтрокаЗапроса = "?query=" + тЗапрос;
		
		ЗаписатьJSON(тЗаписьJSON, тЗапрос);
		
		strJSON = тЗаписьJSON.Закрыть();
		Сервер = "otpravka-api.pochta.ru";      
		Ресурс = "/1.0/shipment/search";
		
		HTTPЗапрос = Новый HTTPЗапрос;
		
		HTTPЗапрос.АдресРесурса = Ресурс + СтрокаЗапроса;
		
		ssl = Новый ЗащищенноеСоединениеOpenSSL;
		
		HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);   
		
		ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();
		
		HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
		
		HTTPЗапрос.Заголовки.Вставить("Authorization","AccessToken " + token);
		
		HTTPЗапрос.Заголовки.Вставить("X-User-Authorization","Basic " + Logkey);
		
		Попытка
			СчетчикПопыток = 1;
			Пока СчетчикПопыток<20 Цикл
				Попытка
					ОтветHTTP = HTTP.Получить(HTTPЗапрос,ИмяВыходногоФайла);
					Прервать;
				Исключение
					Сообщить("Попытка получения ответа: "+СчетчикПопыток);
					СчетчикПопыток  = СчетчикПопыток+1;
				КонецПопытки;	
			КонецЦикла;		
		Исключение
			СтрокаСообщения = ОписаниеОшибки();
			Сообщить(СтрокаСообщения, СтатусСообщения.Важное);
			УдалитьФайлы(имяВыходногоФайла);
			Возврат;
		КонецПопытки;
		
		Отвечено = ОбработатьОтветHTTP(ОтветHTTP,Истина);
		Если Не Отвечено Тогда
			УдалитьФайлы(имяВыходногоФайла);
			Возврат;
		КонецЕсли;

		   		
		ЧтениеJSON = Новый ЧтениеJSON;
		
		ЧтениеJSON.ОткрытьФайл(имяВыходногоФайла);
		
		
		СтруктураJSON = ПрочитатьJSON(ЧтениеJSON,Истина);
		//НоваяСтрока = Объект.Заказы.Добавить();
		Если Партия Тогда
			Попытка
				Для каждого элемент из СтруктураJSON цикл
					Для Каждого соотв из элемент Цикл
						Если соотв.Ключ = "batch-name" Тогда
							Стр.Имяпартии = соотв.Значение;			
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			Исключение
				Сообщить("Произошла ошибка при выполнении запроса обновления данных!");
			КонецПопытки;
			
		Иначе
			попытка
				Для каждого элемент из СтруктураJSON цикл
					Для Каждого соотв из элемент Цикл
						Если соотв.Ключ = "batch-name" Тогда
							Стр.Имяпартии = соотв.Значение;			
						КонецЕсли;
						Если соотв.Ключ = "barcode" Тогда
							ПеремШПИ = соотв.Значение;
							ЕстьШПИ = Справочники.ШПИ.НайтиПоНаименованию(СтрЗаменить(Строка(ПеремШПИ),Символы.НПП,""),Истина);
							Если ЕстьШПИ = Справочники.ШПИ.ПустаяСсылка() Тогда
								ШПИ_Объект = Справочники.ШПИ.СоздатьЭлемент();
								ШПИ_объект.Наименование = СтрЗаменить(Строка(ПеремШПИ),Символы.НПП,"");
								ШПИ_Объект.Владелец = Стр.ИсходящаяКорреспонденция;
								ШПИ_объект.Записать();
								стр.ШПИ = ШПИ_объект.Ссылка;
							Иначе
								Стр.ШПИ = ЕстьШПИ;
							КонецЕсли;
						КонецЕсли;
						Если соотв.Ключ = "id" Тогда
							Стр.ИдентификаторПочты = СтрЗаменить(Строка(соотв.Значение),Символы.НПП,"");			
						КонецЕсли;
						Если соотв.Ключ = "total-vat" Тогда
							НДС = соотв.Значение;			
						КонецЕсли;
						Если соотв.Ключ = "total-rate-wo-vat" Тогда
							БезНДС = соотв.Значение;			
						КонецЕсли;				
					КонецЦикла;
					Если ЗначениеЗаполнено(НДС) И  ЗначениеЗаполнено(БезНДС) Тогда
						Стр.Тариф = (НДС + БезНДС)/100;
					Иначе
						Сообщить("Ошибка получения тарифа по исходящей " + Строка(Стр.ИсходящаяКорреспонденция) );
					КонецЕсли;
					
				КонецЦикла;
			Исключение
				Сообщить("Произошла ошибка при выполнении запроса обновления данных!");
			КонецПопытки;
	Конецесли;
	
	
	
	ЧтениеJSON.Закрыть();
	
	//удаляем файл после использования
	УдалитьФайлы(имяВыходногоФайла); 
	
КонецЦикла;

КонецПроцедуры	

&НаСервере
Функция НайтиПартиюПоИмени(ИмяПартии)
	тЗаписьJSON = Новый ЗаписьJSON;
	тПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);  
	тЗаписьJSON.УстановитьСтроку(тПараметрыJSON);   
	token = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("токен");
	Logkey = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("ключ");

	
	тЗапрос = имяПартии;
	//СтрокаЗапроса = "?query="+тЗапрос;
	
	ЗаписатьJSON(тЗаписьJSON, тЗапрос);
	
	strJSON = тЗаписьJSON.Закрыть();
	Сервер = "otpravka-api.pochta.ru";      
	Ресурс = "/1.0/batch/";
	
	HTTPЗапрос = Новый HTTPЗапрос;
	
	HTTPЗапрос.АдресРесурса = Ресурс + тЗапрос;
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL;
	
	HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);   
	
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
	
	HTTPЗапрос.Заголовки.Вставить("Authorization","AccessToken " + token);
	
	HTTPЗапрос.Заголовки.Вставить("X-User-Authorization","Basic " + Logkey);
	
	Попытка
		СчетчикПопыток = 1;
		Пока СчетчикПопыток<20 Цикл
			Попытка
				ОтветHTTP = HTTP.Получить(HTTPЗапрос,ИмяВыходногоФайла);
				Прервать;
			Исключение
				Сообщить("Попытка получения ответа: "+СчетчикПопыток);
				СчетчикПопыток = СчетчикПопыток+1;
			КонецПопытки;	
		КонецЦикла;		
	Исключение
		СтрокаСообщения = ОписаниеОшибки();
		Сообщить(СтрокаСообщения, СтатусСообщения.Важное);
		УдалитьФайлы(имяВыходногоФайла);
		Возврат Ложь;
	КонецПопытки;
	
	Отвечено = ОбработатьОтветHTTP(ОтветHTTP,Истина);
	Если Не Отвечено Тогда
		УдалитьФайлы(имяВыходногоФайла);
		Возврат Ложь;
	КонецЕсли;

	
	ЧтениеJSON = Новый ЧтениеJSON;
	
	ЧтениеJSON.ОткрытьФайл(имяВыходногоФайла);
	
	
	СтруктураJSON = ПрочитатьJSON(ЧтениеJSON,Истина);
	Для каждого элемент из СтруктураJSON цикл
		Если элемент.Ключ = "batch-name" Тогда
			ПартияНаОтправке = элемент.Значение;			
		КонецЕсли;
	КонецЦикла;	
	ЧтениеJSON.Закрыть();	
	//удаляем файл после использования
	УдалитьФайлы(имяВыходногоФайла);
	
	Если ЗначениеЗаполнено (ПартияНаОтправке) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции	

//Проверка соединения - запрос на получение баланса
//Изм 28082020 - проверка тестового адреса
&НаСервере
Процедура ПроверитьСоединениеНаСервере()
	token = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("токен");
	Logkey = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("ключ");
	
	тЗаписьJSON = Новый ЗаписьJSON;
	тПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);  
	тЗаписьJSON.УстановитьСтроку(тПараметрыJSON);
	тЗапрос = Новый Массив;
	
	ТДанные = Новый структура;
	строкаID = строка("стр1");
	Адрес = "Старопетровский пр-д, 7А строение 25, Москва, 125130";
	тДанные.Вставить("id",строкаID);
	тДанные.Вставить("originaladdress", Адрес);
	ПеременнаяСтруктура = тДанные;
	тЗапрос.Добавить(ПеременнаяСтруктура);
	
	ЗаписатьJSON(тЗаписьJSON, тЗапрос);
	strJSON = тЗаписьJSON.Закрыть();
	strJSON = Стрзаменить(strJSON,"originaladdress","original-address");
	Сервер = "otpravka-api.pochta.ru";      
	Ресурс = "/1.0/clean/address";
	
	HTTPЗапрос = Новый HTTPЗапрос;
	
	HTTPЗапрос.УстановитьТелоИзСтроки(strJSON);
	
	HTTPЗапрос.АдресРесурса = Ресурс;
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL;
	
	HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);   
	
		
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
	
	HTTPЗапрос.Заголовки.Вставить("Authorization","AccessToken " + token);
	
	HTTPЗапрос.Заголовки.Вставить("X-User-Authorization","Basic " + Logkey);
	//ОтветHTTP = HTTP.ОтправитьДляОбработки(HTTPЗапрос,ИмяВыходногоФайла);  

	
	Попытка
		СчетчикПопыток = 1;
		Пока СчетчикПопыток<20 Цикл
			Попытка
				ОтветHTTP = HTTP.ОтправитьДляОбработки(HTTPЗапрос);
				Прервать;
			Исключение
				Сообщить("Попытка получения ответа: "+СчетчикПопыток);
				СчетчикПопыток  = СчетчикПопыток+1;
			КонецПопытки;	
		КонецЦикла;		
	Исключение
		СтрокаСообщения = ОписаниеОшибки();
		Сообщить(СтрокаСообщения, СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;


		
	//token = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("токен");
	//Logkey = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("ключ");
	//
	//Сервер = "otpravka-api.pochta.ru";      
	//Ресурс = "/1.0/counterpart/balance";
	//
	//HTTPЗапрос = Новый HTTPЗапрос;
	//
	//HTTPЗапрос.АдресРесурса = Ресурс;
	//
	//ssl = Новый ЗащищенноеСоединениеOpenSSL;
	//
	//HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);   
	//
	//
	//HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
	//
	//HTTPЗапрос.Заголовки.Вставить("Authorization","AccessToken "+ token);
	//
	//HTTPЗапрос.Заголовки.Вставить("X-User-Authorization","Basic "+ Logkey );
	
	//
	//Попытка
	//	СчетчикПопыток = 1;
	//	Пока СчетчикПопыток<20 Цикл
	//		Попытка
	//			ОтветHTTP = HTTP.Получить(HTTPЗапрос);
	//			Прервать;
	//		Исключение
	//			Сообщить("Попытка получения ответа: "+СчетчикПопыток);
	//			СчетчикПопыток = СчетчикПопыток+1;
	//		КонецПопытки;	
	//	КонецЦикла;		
	//Исключение
	//	СтрокаСообщения = ОписаниеОшибки();
	//	Сообщить(СтрокаСообщения, СтатусСообщения.Важное);
	//	Возврат;
	//КонецПопытки;
	
	Отвечено = ОбработатьОтветHTTP(ОтветHTTP,Ложь);	

КонецПроцедуры


&НаСервере
Функция ОбработатьОтветHTTP(ОтветHTTP, ИзКнопки)
	Если ИзКнопки Тогда     
		Если ОтветHTTP = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;	
		Если ОтветHTTP.КодСостояния = 200 Тогда
			Возврат Истина;
		Иначе 
			СтрокаОтвет =  ОтветHTTP.ПолучитьТелоКакСтроку();
			Сообщить("Код ответа:" + ОтветHTTP.КодСостояния);
			СтрокаОтвет = ПреобразоватьСтроку(СтрокаОтвет);
			Сообщить(СтрокаОтвет);
			Сообщить("Произошла ошибка при установлении соединения с сервисом Отправка.");
			Возврат Ложь;
		КонецЕсли;	
	Иначе
		Если ОтветHTTP = Неопределено Тогда
			Сообщить("Проверьте свое подключение к Интернету!");
			Возврат Ложь;
		КонецЕсли;	
		
		Если ОтветHTTP.КодСостояния = 200 Тогда
			Сообщить("Сервис Отправка принял тестовый запрос.");
			Возврат Истина;
		Иначе 
			СтрокаОтвет =  ОтветHTTP.ПолучитьТелоКакСтроку();
			СтрокаОтвет = ПреобразоватьСтроку(СтрокаОтвет);
			Сообщить(СтрокаОтвет);
			Сообщить("Произошла ошибка при установлении соединения с сервисом Отправка.");
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьСоединение(Команда)
	ПроверитьСоединениеНаСервере();
КонецПроцедуры

//Группировка по Адресату

&НаСервере
Процедура ГруппироватьПоАдресатуНаСервере()
	бит_ИнтеграцияПочтаРФ.СоздатьМассивЗаказовСГруппировкой(Объект.СписокИсходящейКорреспонденции);
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьПоАдресату(Команда)
	Если Объект.СписокИсходящейКорреспонденции.Количество() = 0 Тогда
		Сообщить("Список исходящей корреспонденции пустой!");
		Возврат;
	КонецЕсли;	
	ГруппироватьПоАдресатуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтменаГруппировкиПоАдресатуНаСервере()
	бит_ИнтеграцияПочтаРФ.РазгруппироватьОтправления(Объект.СписокИсходящейКорреспонденции);
КонецПроцедуры

&НаКлиенте
Процедура ОтменаГруппировкиПоАдресату(Команда)
	Если Объект.СписокИсходящейКорреспонденции.Количество() = 0 Тогда
		Сообщить("Список исходящей корреспонденции пустой!");
		Возврат;
	КонецЕсли;	
	ОтменаГруппировкиПоАдресатуНаСервере();
КонецПроцедуры

//Обновления
&НаКлиенте
Процедура ИндексОПСОбслуживанияПриИзменении(Элемент)
	Для Каждого Эл из объект.СписокИсходящейКорреспонденции Цикл
		Эл.ИндексОПСОбслуживания = ИндексОПСОбслуживания;
	КонецЦикла;	
КонецПроцедуры             

&НаКлиенте
Процедура ДатаПартииПриИзменении(Элемент)
	Если ДатаПартии < НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Нельзя задавать партию задним числом! Дата может быть текущаяя или будущая!";
		ДатаПартии =  НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
	КонецЕсли;	
КонецПроцедуры


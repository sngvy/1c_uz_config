
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	Если Пользователь.Пустая() Тогда
		Пользователь = ПараметрыСеанса.ТекущийПользователь;	
	КонецЕсли;
	РезультатЗаполнить = Планировщик.ПолучитьСписокМероприятий(Пользователь);
	ЗаполнитьЗапрос = ПоместитьВоВременноеХранилище(РезультатЗаполнить, Этаформа.УникальныйИдентификатор);	
	// Заполняем "ТипыМероприятий"	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВТ.ТипМероприятия
	                      |ПОМЕСТИТЬ ВТ1
	                      |ИЗ
	                      |	&ВТ1 КАК ВТ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ1.ТипМероприятия КАК ТипМероприятия
	                      |ИЗ
	                      |	ВТ1 КАК ВТ1
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТ1.ТипМероприятия");
    Запрос.УстановитьПараметр("ВТ1", РезультатЗаполнить);
	Результат = Запрос.Выполнить().Выбрать();	
	Если Результат.Количество() = 0 Тогда
		ВыдаватьСообщение = Истина;
		Возврат;
	КонецЕсли;	
	Пока Результат.Следующий() Цикл
	    Эл = ТипМероприятия.Добавить();
		Эл.ТипМероприятия = Результат.ТипМероприятия;
	КонецЦикла;	
	ТипМероприятия.Сортировать("ТипМероприятия");
	Если ВыбранныйТипМероприятия.Пустая() Тогда 
		Если ТипМероприятия.Количество() > 0 Тогда
			Элементы.ТипыМероприятия.ТекущаяСтрока = ТипМероприятия[0].ПолучитьИдентификатор(); 	
		КонецЕсли;
	Иначе                   
		НайденныеСтроки = ТипМероприятия.НайтиСтроки(Новый Структура("ТипМероприятия", ВыбранныйТипМероприятия));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Элементы.ТипыМероприятия.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ТипыМероприятияПриАктивизацииСтроки(Элемент)
	Попытка 	
		ВыбранныйТипМероприятия = Элемент.ТекущиеДанные.ТипМероприятия;	
	Исключение
		Возврат;
	КонецПопытки;	
	ЗаполнитьТипМероприятия(ВыбранныйТипМероприятия);		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипМероприятия(ВыбранныйТипМероприятия)
	ТЗ = ПолучитьИзВременногоХранилища(ЗаполнитьЗапрос);			
	Запрос = Новый Запрос( "ВЫБРАТЬ
	                       |	ВТ.Должник
	                       |ПОМЕСТИТЬ ВТ1
	                       |ИЗ
	                       |	&ВТ1 КАК ВТ
	                       |ГДЕ
	                       |	ВТ.ТипМероприятия = &ТипМероприятия
	                       |;
	                       |
	                       |////////////////////////////////////////////////////////////////////////////////
	                       |ВЫБРАТЬ
	                       |	ВТ1.Должник КАК Контрагент,
	                       |	ВТ1.Должник КАК КонтрагентСсылка,
	                       |	ЕСТЬNULL(КонтрагентыДополнительныеРеквизиты.Значение, """") КАК Адрес
	                       |ИЗ
	                       |	ВТ1 КАК ВТ1
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
	                       |		ПО ВТ1.Должник = КонтрагентыДополнительныеРеквизиты.Ссылка
	                       |			И (КонтрагентыДополнительныеРеквизиты.Свойство = &Свойство)
	                       |
	                       |СГРУППИРОВАТЬ ПО
	                       |	ВТ1.Должник,
	                       |	КонтрагентыДополнительныеРеквизиты.Значение,
	                       |	ВТ1.Должник");
	Запрос.УстановитьПараметр("ВТ1", ТЗ);
	Запрос.УстановитьПараметр("ТипМероприятия", ВыбранныйТипМероприятия);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоКоду("0000     "));
	СтрокиТипМероприятия = Запрос.Выполнить();	
	Если СтрокиТипМероприятия.Пустой() Тогда
		Объект.Контрагент.Очистить();
		Возврат;
	Иначе
		Объект.Контрагент.Загрузить(СтрокиТипМероприятия.Выгрузить());
		Объект.Контрагент.Сортировать("Контрагент");
		Если ВыбранныйКонтрагент.Пустая() Тогда 
			Элементы.Контрагенты.ТекущаяСтрока = Объект.Контрагент[0].ПолучитьИдентификатор(); 	
		Иначе                   
			Если Объект.Контрагент.НайтиСтроки(Новый Структура("Контрагент", ВыбранныйКонтрагент)).Количество() = 0 Тогда
				Элементы.Контрагенты.ТекущаяСтрока = Объект.Контрагент[0].ПолучитьИдентификатор(); 	
			Иначе	
				Элементы.Контрагенты.ТекущаяСтрока = 
						Объект.Контрагент.НайтиСтроки(Новый Структура("Контрагент", ВыбранныйКонтрагент))[0].ПолучитьИдентификатор();
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;			
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыПриАктивизацииСтроки(Элемент)
	Попытка 
		ВыбранныйКонтрагент = Элемент.ТекущиеДанные.КонтрагентСсылка;	
	Исключение	
		Возврат;	
	КонецПопытки;	
	КонтрагентыПриАктивизацииСтрокиНаСервере(ВыбранныйКонтрагент);		
КонецПроцедуры

&НаСервере
Процедура КонтрагентыПриАктивизацииСтрокиНаСервере(ВыбранныйКонтрагент)
	Мероприятия.Очистить();	
	ТЗ = ПолучитьИзВременногоХранилища(ЗаполнитьЗапрос);
	СтрокиМероприятия = ТЗ.НайтиСтроки(Новый Структура("ТипМероприятия, Должник", ВыбранныйТипМероприятия, ВыбранныйКонтрагент));
	Если СтрокиМероприятия.Количество() > 0 Тогда
		Для Каждого Эл Из СтрокиМероприятия Цикл
			Стр = Мероприятия.Добавить();
			Стр.Мероприятия = Эл.Мероприятие;
		КонецЦикла;	
		Мероприятия.Сортировать("Мероприятия");
		Элементы.Мероприятия1.ТекущаяСтрока = Мероприятия[0].ПолучитьИдентификатор();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Мероприятия1Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;	
	ОткрытьЗначение(Элемент.ТекущиеДанные.Мероприятия);
КонецПроцедуры

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	ОчиститьСообщения();
	ТипМероприятия.Очистить();
	Объект.Контрагент.Очистить();
	Мероприятия.Очистить();
	ПриСозданииНаСервере(Ложь, Ложь);
    ВыдаватьСообщение();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьПланировщик" И Параметр = Истина Тогда 
		Попытка 
			УдалитьМероприятие(Источник);
		Исключение
		КонецПопытки;
	ИначеЕсли  ИмяСобытия = "ОбновитьПланировщик" И Параметр = Ложь Тогда
		// Для механизма когда по ошибке выполнили мероприятие, а затем
		// нажали отмену выполнения.
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УдалитьМероприятие(Ссылка);
	Мероприятия.Удалить(Мероприятия.НайтиПоИдентификатору(Элементы.Мероприятия1.ТекущаяСтрока));
	ТЗ = ПолучитьИзВременногоХранилища(ЗаполнитьЗапрос);	
	СтрТЧ = ТЗ.Найти(Ссылка, "Мероприятие");	
	ТЗ.Удалить(СтрТЧ);
	Если Мероприятия.Количество() = 0 Тогда		
		Объект.Контрагент.Удалить(Объект.Контрагент.НайтиПоИдентификатору(Элементы.Контрагенты.ТекущаяСтрока));	
	КонецЕсли;
	Если Объект.Контрагент.Количество() = 0 Тогда
		ТипМероприятия.Удалить(ТипМероприятия.НайтиПоИдентификатору(Элементы.ТипыМероприятия.ТекущаяСтрока));		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ОчиститьСообщения();
	Если Элементы.ТипыМероприятия.ТекущаяСтрока = Неопределено Тогда
		ВыдаватьСообщение = Истина;
		ВыдаватьСообщение();
		Возврат;	
	КонецЕсли;
	ВыбранныйТипМероприятия = Элементы.ТипыМероприятия.ТекущиеДанные.ТипМероприятия;
	ВыбранныйКонтрагент     = Элементы.Контрагенты.ТекущиеДанные.Контрагент;
	ТипМероприятия.Очистить();
	Объект.Контрагент.Очистить();
	Мероприятия.Очистить();
	ПриСозданииНаСервере(Ложь, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ВыдаватьСообщение();	
КонецПроцедуры

&НаКлиенте
Процедура ВыдаватьСообщение()
	Если ВыдаватьСообщение Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Нет не выполненных мероприятий.";
		Сообщение.ИдентификаторНазначения = Этаформа.УникальныйИдентификатор;
		Сообщение.Сообщить();
	КонецЕсли;
	ВыдаватьСообщение = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьЗначение(Элемент.ТекущиеДанные.КонтрагентСсылка);
КонецПроцедуры

&НаКлиенте
Процедура ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПометкаУдаления(Команда)
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Пометить на удаление все мероприятия с данным типом !!!", Режим, 40, 
			КодВозвратаДиалога.Нет, , КодВозвратаДиалога.Нет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ПометкаУдаленияСервер();
КонецПроцедуры

Процедура ПометкаУдаленияСервер()
	ТЗ_ПометкаУдаления = ПолучитьИзВременногоХранилища(ЗаполнитьЗапрос);			
	Запрос = Новый Запрос( "ВЫБРАТЬ
	                       |	ВТ.ТипМероприятия,
	                       |	ВТ.Должник,
	                       |	ВТ.Мероприятие
	                       |ПОМЕСТИТЬ ВТ1
	                       |ИЗ
	                       |	&ВТ1 КАК ВТ
	                       |;
	                       |
	                       |////////////////////////////////////////////////////////////////////////////////
	                       |ВЫБРАТЬ
	                       |	ВТ1.Должник КАК Должник,
	                       |	ВТ1.Мероприятие
	                       |ИЗ
	                       |	ВТ1 КАК ВТ1
	                       |ГДЕ
	                       |	ВТ1.ТипМероприятия = &ТипМероприятия");
	Запрос.УстановитьПараметр("ВТ1", ТЗ_ПометкаУдаления);
	Запрос.УстановитьПараметр("ТипМероприятия", ВыбранныйТипМероприятия);	
	Результат_ПометкаУдаления = Запрос.Выполнить().Выбрать();
	УдалятьТипМероприятия = Истина;
	Пока Результат_ПометкаУдаления.Следующий() Цикл
		Попытка
			Результат_ПометкаУдаления.Мероприятие.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			СтрТЧ = ТЗ_ПометкаУдаления.Найти(Результат_ПометкаУдаления.Мероприятие, "Мероприятие");	
			ТЗ_ПометкаУдаления.Удалить(СтрТЧ);
		Исключение
			Сообщить("Невозможно удалить " + Результат_ПометкаУдаления.Мероприятие);
			УдалятьТипМероприятия = Ложь;
		Конецпопытки
	КонецЦикла;
	Если УдалятьТипМероприятия Тогда
		ТипМероприятия.Удалить(ТипМероприятия.НайтиПоИдентификатору(Элементы.ТипыМероприятия.ТекущаяСтрока));
	Иначе
		Попытка 
			ЗаполнитьТипМероприятия(ВыбранныйТипМероприятия);		
		Исключение	
			Возврат;	
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

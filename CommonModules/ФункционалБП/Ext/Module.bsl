
//GetUSBKeyComponentLocation
Функция GetUSBKeyComponentLocation()
    СистемнаяИнформация = Новый СистемнаяИнформация;
    
    Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 тогда
        Возврат "ОбщийМакет.КомпонентаЗащиты_Win32";
    ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 тогда
        Возврат "ОбщийМакет.КомпонентаЗащиты_Win64";
	КонецЕсли;
	
	ВызватьИсключение("Макет с образом компоненты защиты не найден!");	
КонецФункции

Процедура ВыполнитьМероприятиеКакНеАктуальноеМ(Отказ, ЭтотОбъект) Экспорт
	НачатьТранзакцию();
	Попытка		
		ЭтотОбъект.Выполнена = Истина;
		ЭтотОбъект.ВыполненоКакНеАктуальное = Истина;
		ЭтотОбъект.ДополнительныеРеквизиты.Очистить();
		ЭтотОбъект.ВыполненныеСтрелки.Загрузить(ЭтотОбъект.БизнесПроцесс.ВыполненныеСтрелки.Выгрузить());
		ЭтотОбъект.ЗапущенныеСтадии.Загрузить(ЭтотОбъект.БизнесПроцесс.ЗапущенныеСтадии.Выгрузить());	
		ЭтотОбъект.ДатаВыполнения = ТекущаяДата();
		ЭтотОбъект.ФактическаяДата = ЭтотОбъект.ДатаВыполнения;
		ЭтотОбъект.МоментВремени = Задачи.Мероприятие.ПолучитьМоментВремени(ЭтотОбъект.ДатаВыполнения);
		Если Не ЗначениеЗаполнено(ЭтотОбъект.Результат) Тогда
			ЭтотОбъект.Результат = Справочники.РезультатыМероприятий.НайтиПоНаименованию("",Ложь,,ЭтотОбъект.ТипМероприятия);
		КонецЕсли;		
		ЭтотОбъект.Записать();
		  
		Если ЭтотОбъект.БизнесПроцесс <> Неопределено И Не ЭтотОбъект.БизнесПроцесс.Пустая() Тогда
			ЭтотОбъект.БизнесПроцесс.ПолучитьОбъект().ПродолжитьВыполнениеБП(Отказ, ЭтотОбъект.Ссылка);
			Если Отказ Тогда
				ВызватьИсключение "!!!";
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Отказ = Истина;
	КонецПопытки;
КонецПроцедуры

Процедура ВыполнитьМероприятиеМ(Отказ, ЭтотОбъект) Экспорт
	НачатьТранзакцию();
	Попытка
		ЭтотОбъект.Выполнена = Истина;
		ЭтотОбъект.ВыполненоКакНеАктуальное = Ложь;
		//ЭтотОбъект.ДополнительныеРеквизиты.Очистить();
		ЭтотОбъект.ВыполненныеСтрелки.Загрузить(ЭтотОбъект.БизнесПроцесс.ВыполненныеСтрелки.Выгрузить());
		ЭтотОбъект.ЗапущенныеСтадии.Загрузить(ЭтотОбъект.БизнесПроцесс.ЗапущенныеСтадии.Выгрузить());	
		ЭтотОбъект.ДатаВыполнения = ТекущаяДата();
		ЭтотОбъект.ФактическаяДата = ЭтотОбъект.ДатаВыполнения;
		ЭтотОбъект.МоментВремени = Задачи.Мероприятие.ПолучитьМоментВремени(ЭтотОбъект.ДатаВыполнения);
		Если Не ЗначениеЗаполнено(ЭтотОбъект.Результат) Тогда
			ЭтотОбъект.Результат = Справочники.РезультатыМероприятий.НайтиПоНаименованию("",Ложь,,ЭтотОбъект.ТипМероприятия);
		КонецЕсли;
		ЭтотОбъект.Записать();
		  
		Если ЭтотОбъект.БизнесПроцесс <> Неопределено И Не ЭтотОбъект.БизнесПроцесс.Пустая() Тогда
			ЭтотОбъект.БизнесПроцесс.ПолучитьОбъект().ПродолжитьВыполнениеБП(Отказ, ЭтотОбъект.Ссылка);
			Если Отказ Тогда
				ВызватьИсключение "!!!";
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();	
	Исключение
		ОтменитьТранзакцию();
		Отказ = Истина;
	КонецПопытки;
КонецПроцедуры

Процедура УбратьИзРаботыМ(Отказ, Пользователь, ЭтотОбъект) Экспорт
	Если Константы.БлокироватьСозданиеДокументовИзБП.Получить() ИЛИ
			ТипЗнч(Пользователь) <> Тип("СправочникСсылка.Пользователи") Тогда
		Возврат;
	КонецЕсли;
	
	Массив = Новый Массив();
	Если ЗначениеЗаполнено(ЭтотОбъект.Объект) Тогда
		Массив.Добавить(ЭтотОбъект.Объект);
	КонецЕсли;
	Если Не ЭтотОбъект.ЭтоНовый() И ЭтотОбъект.Объект <> ЭтотОбъект.Ссылка.Объект И
			ЗначениеЗаполнено(ЭтотОбъект.Ссылка.Объект) Тогда
		Массив.Добавить(ЭтотОбъект.Ссылка.Объект);	
	КонецЕсли;
		
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОбъектыВРаботеОстатки.Объект
	                      |ИЗ
	                      |	РегистрНакопления.ОбъектыВРаботе.Остатки(
	                      |			,
	                      |			Объект В (&Объект)
	                      |				И Сотрудник = &Ответственный) КАК ОбъектыВРаботеОстатки
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеСотрудники КАК ОтветственныеСотрудники
	                      |		ПО ОбъектыВРаботеОстатки.Объект = ОтветственныеСотрудники.Объект
	                      |			И (ОтветственныеСотрудники.Пользователь = &Ответственный)
	                      |ГДЕ
	                      |	ОтветственныеСотрудники.Объект ЕСТЬ NULL ");
	Запрос.УстановитьПараметр("Объект", Массив);
	Запрос.УстановитьПараметр("Ответственный", Пользователь);
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() > 0 Тогда
		ОбъектД = Документы.АктПередачи.СоздатьДокумент();
		ОбъектД.Дата = ТекущаяДата();
		ОбъектД.Организация = Пользователь.Организация;
		ОбъектД.СотрудникПередающий = Пользователь;
		ОбъектД.ПодразделениеПередающее = Пользователь.Подразделение;
		ОбъектД.Автор = ОбщегоНазначения.ТекущийПользователь();
		ОбъектД.НеНазначатьСотрудников = Истина;
		ОбъектД.Объекты.Загрузить(Таблица);
		Попытка
			ОбъектД.Записать(РежимЗаписиДокумента.Проведение);
		Исключение	
			Отказ = Истина;
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

Процедура ПринятьВРаботуМ(Отказ, Пользователь, ЭтотОбъект) Экспорт
	Если Константы.БлокироватьСозданиеДокументовИзБП.Получить() ИЛИ
			ТипЗнч(Пользователь) <> Тип("СправочникСсылка.Пользователи") ИЛИ (Не ЗначениеЗаполнено(ЭтотОбъект.Объект)) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтотОбъект.ЭтоНовый() И ЭтотОбъект.Объект <> ЭтотОбъект.Ссылка.Объект И
			ЗначениеЗаполнено(ЭтотОбъект.Ссылка.Объект) Тогда
		УбратьИзРаботыМ(Отказ, Пользователь, ЭтотОбъект);	
	КонецЕсли;
		
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОбъектыВРаботеОстатки.Объект
	                      |ИЗ
	                      |	РегистрНакопления.ОбъектыВРаботе.Остатки(
	                      |			,
	                      |			Объект = &Объект
	                      |				И Сотрудник = &Ответственный) КАК ОбъектыВРаботеОстатки");
	Запрос.УстановитьПараметр("Объект", ЭтотОбъект.Объект);
	Запрос.УстановитьПараметр("Ответственный", Пользователь);
	Если Запрос.Выполнить().Пустой() Тогда
		ОбъектД = Документы.АктПередачи.СоздатьДокумент();
		ОбъектД.Дата = ТекущаяДата();
		ОбъектД.Организация = Пользователь.Организация;
		ОбъектД.СотрудникПринимающий = Пользователь;
		ОбъектД.ПодразделениеПринимающее = Пользователь.Подразделение;
		ОбъектД.Автор = ОбщегоНазначения.ТекущийПользователь();
		ОбъектД.НеНазначатьСотрудников = Истина;
		ОбъектД.Объекты.Добавить().Объект = ЭтотОбъект.Объект;
		Попытка
			ОбъектД.Записать(РежимЗаписиДокумента.Проведение);
		Исключение		
			Отказ = Истина;
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////

Процедура ЗапуститьБизнесПроцессБП(Отказ, ЭтотОбъект) Экспорт // ЗАЩИЩЕНА!
	Если НЕ бит_сл_тс.ПолучитьЛицензию(Истина) Тогда
		Возврат;
	Иначе		
		Версия = Константы.ВерсияПрограммы.Получить();
		Если (Версия = Перечисления.ВерсииПрограммы.Проф) ИЛИ
			(Версия = Перечисления.ВерсииПрограммы.ПрофПлюс) Тогда
		Иначе
			ВызватьИсключение "Функционал не доступен в данной версии программы!";
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Константы.БлокироватьСозданиеДокументовИзБП.Получить() Тогда
		//Проверка на ДО в работе организации и подразделения
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	СУММА(ОбъектыВРаботеОстатки.КоличествоОстаток) КАК КоличествоОстаток
		                      |ИЗ
		                      |	РегистрНакопления.ОбъектыВРаботе.Остатки(
		                      |			,
		                      |			Организация = &Организация
		                      |				И (Подразделение = &Подразделение
		                      |					ИЛИ Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
		                      |				И Объект = &Объект
		                      |				И Сотрудник = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК ОбъектыВРаботеОстатки");
		Запрос.УстановитьПараметр("Организация", ЭтотОбъект.Организация);
		Запрос.УстановитьПараметр("Подразделение", ЭтотОбъект.Подразделение);
		Запрос.УстановитьПараметр("Объект", ЭтотОбъект.Объект);
		Результат = Запрос.Выполнить().Выбрать();				  
		Результат.Следующий();
		Если Результат.КоличествоОстаток = 0 И
			    ТипЗнч(ЭтотОбъект.Объект) <> Тип("СправочникСсылка.ИсполнительныеДокументы") //заплатка
				Тогда
	        //Принимаем в работу организации и подразделения
			ДокументОбъект = Документы.ПринятиеВРаботуОрганизации.СоздатьДокумент();
			ДокументОбъект.Дата = ТекущаяДата() - 1;
			ДокументОбъект.Организация = ЭтотОбъект.Организация;
			ДокументОбъект.Автор = ЭтотОбъект.Ссылка;
			ДокументОбъект.Комментарий = "Бизнес - процесс";
			ДокументОбъект.Объекты.Добавить().Объект = ЭтотОбъект.Объект;
			Попытка
	        	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Отказ = Истина;
				Возврат;
			КонецПопытки;
		ИначеЕсли Результат.КоличествоОстаток = 1 И Не ЭтотОбъект.Подразделение.Пустая() И
			    ТипЗнч(ЭтотОбъект.Объект) <> Тип("СправочникСсылка.ИсполнительныеДокументы") //заплатка
				Тогда
			//Принимаем в работу подразделения
			ДокументОбъект = Документы.АктПередачи.СоздатьДокумент();
			ДокументОбъект.Дата = ТекущаяДата() - 1;
			ДокументОбъект.Организация = ЭтотОбъект.Организация;
			ДокументОбъект.ПодразделениеПринимающее = ЭтотОбъект.Подразделение;
			ДокументОбъект.Автор = ЭтотОбъект.Ссылка;
			ДокументОбъект.Комментарий = "Бизнес - процесс";
			ДокументОбъект.НеНазначатьСотрудников = Истина;
			ДокументОбъект.Объекты.Добавить().Объект = ЭтотОбъект.Объект;
			Попытка
	        	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Отказ = Истина;
				Возврат;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	//Запуск БП
	ЭтотОбъект.Стартован = Истина;
	ЭтотОбъект.Завершен = Ложь;	
	//ЭтотОбъект.Дата = ТекущаяДата();
	ЭтотОбъект.ВыполненныеСтрелки.Очистить();
	ЭтотОбъект.ЗапущенныеСтадии.Очистить();
	
	ЗаполнитьТаблицуВыполненныеСтрелки(Отказ, "Старт--1",, ЭтотОбъект.Схема,, ЭтотОбъект);
	Пока ПроверитьСумматоры(ЭтотОбъект) Цикл
	КонецЦикла;        
	ЗапуститьВозможныеСтадии(Отказ,, ЭтотОбъект);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		ЭтотОбъект.Записать();
	Исключение
		Отказ = Истина;
		Возврат;
	КонецПопытки;
КонецПроцедуры

Процедура ЗапуститьБизнесПроцессСТочкиБП(Отказ, ТСТочка, ТСОбъектРодитель, ТССхема, ТСТипМероприятия, // ЗАЩИЩЕНА!
		ТСМассив, ТСИсполнитель, ЭтотОбъект) Экспорт 	
	Если НЕ бит_сл_тс.ПолучитьЛицензию(Истина) Тогда
		Возврат;
	Иначе		
		Версия = Константы.ВерсияПрограммы.Получить();
		Если (Версия = Перечисления.ВерсииПрограммы.Проф) ИЛИ
			(Версия = Перечисления.ВерсииПрограммы.ПрофПлюс) Тогда
		Иначе
			ВызватьИсключение "Функционал не доступен в данной версии программы!";
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Константы.БлокироватьСозданиеДокументовИзБП.Получить() Тогда
		//Проверка на ДО в работе организации и подразделения
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	СУММА(ОбъектыВРаботеОстатки.КоличествоОстаток) КАК КоличествоОстаток
		                      |ИЗ
		                      |	РегистрНакопления.ОбъектыВРаботе.Остатки(
		                      |			,
		                      |			Организация = &Организация
		                      |				И (Подразделение = &Подразделение
		                      |					ИЛИ Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
		                      |				И Объект = &Объект
		                      |				И Сотрудник = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК ОбъектыВРаботеОстатки");
		Запрос.УстановитьПараметр("Организация", ЭтотОбъект.Организация);
		Запрос.УстановитьПараметр("Подразделение", ЭтотОбъект.Подразделение);
		Запрос.УстановитьПараметр("Объект", ЭтотОбъект.Объект);
		Результат = Запрос.Выполнить().Выбрать();				  
		Результат.Следующий();
		Если Результат.КоличествоОстаток = 0 И
			    ТипЗнч(ЭтотОбъект.Объект) <> Тип("СправочникСсылка.ИсполнительныеДокументы") //заплатка
				Тогда
	        //Принимаем в работу организации и подразделения
			ДокументОбъект = Документы.ПринятиеВРаботуОрганизации.СоздатьДокумент();
			ДокументОбъект.Дата = ТекущаяДата() - 1;
			ДокументОбъект.Организация = ЭтотОбъект.Организация;
			ДокументОбъект.Автор = ЭтотОбъект.Ссылка;
			ДокументОбъект.Комментарий = "Бизнес - процесс";
			ДокументОбъект.Объекты.Добавить().Объект = ЭтотОбъект.Объект;
			Попытка
	        	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Отказ = Истина;
				Возврат;
			КонецПопытки;
		ИначеЕсли Результат.КоличествоОстаток = 1 И Не ЭтотОбъект.Подразделение.Пустая() И
			    ТипЗнч(ЭтотОбъект.Объект) <> Тип("СправочникСсылка.ИсполнительныеДокументы") //заплатка
				Тогда
			//Принимаем в работу подразделения
			ДокументОбъект = Документы.АктПередачи.СоздатьДокумент();
			ДокументОбъект.Дата = ТекущаяДата() - 1;
			ДокументОбъект.Организация = ЭтотОбъект.Организация;
			ДокументОбъект.ПодразделениеПринимающее = ЭтотОбъект.Подразделение;
			ДокументОбъект.Автор = ЭтотОбъект.Ссылка;
			ДокументОбъект.Комментарий = "Бизнес - процесс";
			ДокументОбъект.НеНазначатьСотрудников = Истина;
			ДокументОбъект.Объекты.Добавить().Объект = ЭтотОбъект.Объект;
			Попытка
	        	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Отказ = Истина;
				Возврат;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	//Запуск БП
	ЭтотОбъект.Стартован = Истина;
	ЭтотОбъект.Завершен = Ложь;
	//ЭтотОбъект.Дата = ТекущаяДата();
	ЭтотОбъект.ВыполненныеСтрелки.Очистить();
	ЭтотОбъект.ЗапущенныеСтадии.Очистить();
	Для Каждого Элемент Из ТСМассив Цикл
		НоваяСтрока = ЭтотОбъект.ЗапущенныеСтадии.Добавить();
		НоваяСтрока.Идентификатор = Элемент.Идентификатор;
		НоваяСтрока.ОбъектРодитель = Элемент.ОбъектРодитель;
		НоваяСтрока.Схема = Элемент.Схема;
	КонецЦикла;	
	
	Элемент = ЭтотОбъект.ЗапущенныеСтадии[0];
	ТекДата = ТекущаяДата();

		НовоеМероприятие = Задачи.Мероприятие.СоздатьЗадачу();
		НовоеМероприятие.Объект = ЭтотОбъект.Объект;
		НовоеМероприятие.ТипМероприятия = ТСТипМероприятия;		
		НовоеМероприятие.Организация = ЭтотОбъект.Организация;
		НовоеМероприятие.Подразделение = ЭтотОбъект.Подразделение;
		
		НовоеМероприятие.Автор = ЭтотОбъект.Ссылка;			
		НовоеМероприятие.ПланируемаяДата = ТекДата;
		НовоеМероприятие.ПланируемоеВремя = ТекДата;		
		НовоеМероприятие.Дата = ТекДата;
		//++КазанцевЯА-БП
		Если Константы.КонтрольСроковМероприятий.Получить() Тогда 
			мСрокВыполнения = Элемент.Схема.Стадии.НайтиСтроки(Новый Структура("Идентификатор", Элемент.Идентификатор));
			НовоеМероприятие.СрокВыполнения =  ТекДата + мСрокВыполнения[0].СрокВыполнения * 60;
			ОсновнойКалендарьПредприятия = Константы.ОсновнойКалендарьПредприятия.Получить();
			Если Константы.ПереноситьВыходныеИПраздникиМероприятий.Получить() И ЗначениеЗаполнено(ОсновнойКалендарьПредприятия) Тогда
				УстановитьПривилегированныйРежим(Истина);
				ПроизводственныйКалендарь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнойКалендарьПредприятия, "ПроизводственныйКалендарь");
				ПараметрыПолучения = КалендарныеГрафики.ПараметрыПолученияБлижайшихРабочихДат();
				ПараметрыПолучения.ПолучатьПредшествующие = Ложь;
				ПараметрыПолучения.ВызыватьИсключение = Ложь;
				свДата = НачалоДня(НовоеМероприятие.СрокВыполнения);
				свВремя =  НовоеМероприятие.СрокВыполнения - свДата;
				мСрокВыполнения = Новый Массив;
				мСрокВыполнения.Добавить(свДата);
				ДниКалендаря = КалендарныеГрафики.БлижайшиеРабочиеДаты(ПроизводственныйКалендарь, мСрокВыполнения, ПараметрыПолучения);
				НовоеМероприятие.СрокВыполнения = ДниКалендаря.Получить(свДата) + свВремя;
				УстановитьПривилегированныйРежим(Ложь);	
			КонецЕсли;
		КонецЕсли;
		//--КазанцевЯА-БП
	НовоеМероприятие.БизнесПроцесс = ЭтотОбъект.Ссылка;
	НовоеМероприятие.Схема = Элемент.Схема;
	НовоеМероприятие.Точка = ТСТочка;
	НовоеМероприятие.ОбъектРодитель = Элемент.ОбъектРодитель;		
		
	УстановитьПривилегированныйРежим(Истина);
	Если Не ТСИсполнитель.Пустая() Тогда
		НовоеМероприятие.Ответственный = ТСИсполнитель;
	ИначеЕсли Не НовоеМероприятие.ТипМероприятия.ТипСотрудника.Пустая() Тогда
		НовоеМероприятие.Ответственный = НовоеМероприятие.ТипМероприятия.ТипСотрудника;
	Иначе
		НовоеМероприятие.Ответственный = ПланыВидовХарактеристик.ТипыСотрудников.РуководительПодразделения;
	КонецЕсли;		
	УстановитьПривилегированныйРежим(Ложь);
	//НовоеМероприятие.Исполнитель = НовоеМероприятие.Ответственный;
	
	Если Не Константы.БлокироватьСозданиеДокументовИзБП.Получить() И 
			ДООтсутствуетВРаботе(НовоеМероприятие.Организация, НовоеМероприятие.Подразделение, 
			НовоеМероприятие.Ответственный, ЭтотОбъект) И
		    ТипЗнч(ЭтотОбъект.Объект) <> Тип("СправочникСсылка.ИсполнительныеДокументы") //заплатка
			Тогда
		ДокументОбъект = Документы.АктПередачи.СоздатьДокумент();
		ДокументОбъект.Организация = НовоеМероприятие.Организация;
		ДокументОбъект.ПодразделениеПринимающее = НовоеМероприятие.Подразделение;
		ДокументОбъект.СотрудникПринимающий = НовоеМероприятие.Ответственный;
		ДокументОбъект.Объекты.Добавить().Объект = ЭтотОбъект.Объект;
		ДокументОбъект.Дата = ТекДата;
		ДокументОбъект.Автор = ЭтотОбъект.Ссылка;
		ДокументОбъект.НеНазначатьСотрудников = Истина;
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Отказ = Истина;
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Если Не НовоеМероприятие.ТипМероприятия.ФункцияПередСозданиемИзБП.Пустая() Тогда
		Справочники.ФункцииДополнительныхРеквизитов.ВычислитьФункцию(
			НовоеМероприятие.ТипМероприятия.ФункцияПередСозданиемИзБП.Функция,
			НовоеМероприятие, НовоеМероприятие);
	КонецЕсли;
	Попытка	
		НовоеМероприятие.Записать();
		Автоинформирование.СформироватьЗаданиеИзБизнесПроцесса(НовоеМероприятие);
	Исключение
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	//			
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		ЭтотОбъект.Записать();
	Исключение
		Отказ = Истина;
		Возврат;
	КонецПопытки;
КонецПроцедуры

Процедура ЗаполнитьТаблицуВыполненныеСтрелки(Отказ, ОбъектНачало, ВариантНачало = "", Схема, // ЗАЩИЩЕНА!!!!!!!
		ОбъектРодитель = "", ЭтотОбъект, ТекДата = Неопределено)
		
	Если НЕ бит_сл_тс.ПолучитьЛицензию(Истина) Тогда
		Возврат;
	Иначе		
		Версия = Константы.ВерсияПрограммы.Получить();
		Если (Версия = Перечисления.ВерсииПрограммы.Проф) ИЛИ
			(Версия = Перечисления.ВерсииПрограммы.ПрофПлюс) Тогда
		Иначе
			ВызватьИсключение "Функционал не доступен в данной версии программы!";
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Номер_ = Найти(ОбъектНачало, "*");
	Если Номер_ > 0 Тогда
		ОбъектНачало = Лев(ОбъектНачало, Номер_ - 1);
	КонецЕсли;
	
	// Без защиты
	Если Не ЗначениеЗаполнено(ВариантНачало) ИЛИ ТипЗнч(ВариантНачало) = Тип("СправочникСсылка.Организации") Тогда
		Строки = Схема.Задержки.НайтиСтроки(Новый Структура("ОбъектНачало", ОбъектНачало));
	Иначе
		Вариант = Схема.Варианты.НайтиСтроки(Новый Структура("Родитель, Результат", ОбъектНачало, ВариантНачало))[0];	
		Строки = Схема.Задержки.НайтиСтроки(Новый Структура("ОбъектНачало, ВариантНачало", ОбъектНачало, 
				Вариант.Идентификатор));
		Если Строки.Количество() = 0 Тогда
			Строки = Схема.Задержки.НайтиСтроки(Новый Структура("ОбъектНачало, ВариантНачало", ОбъектНачало, ""));
		КонецЕсли;		
	КонецЕсли;
	
	Для Каждого Элемент Из Строки Цикл
		НоваяСтрелка = ЭтотОбъект.ВыполненныеСтрелки.Добавить();
		// Пьянзин. Добавил условие. До этого была просто ТекущаяДата() ↓
		Если ТекДата = Неопределено Тогда
			НоваяСтрелка.ДатаВыполнения = ТекущаяДата() + Элемент.СуммаЗадержки * 60;
		Иначе
			НоваяСтрелка.ДатаВыполнения = ТекДата + Элемент.СуммаЗадержки * 60;
		КонецЕсли;
		НоваяСтрелка.Идентификатор = Элемент.Идентификатор;	
		НоваяСтрелка.ОбъектКонец = Элемент.ОбъектКонец;
		НоваяСтрелка.Схема = Схема;
		НоваяСтрелка.ОбъектРодитель = ОбъектРодитель;
	КонецЦикла;
	Возврат;
	
	//С защитой
	СтрЗадержки = "";
	Для Каждого Элемент Из Схема.Задержки Цикл
		СтрЗадержки = СтрЗадержки + Элемент.Идентификатор + "~" + Формат(Цел(Элемент.СуммаЗадержки / 1440), "ЧН=; ЧГ=") + "~" + 
				Формат(Цел(Элемент.СуммаЗадержки / 60) % 24, "ЧН=; ЧГ=") + "~" + Формат(Элемент.СуммаЗадержки % 60, "ЧН=; ЧГ=") + "~" + 
				Элемент.ОбъектНачало + "~" + Элемент.ВариантНачало + "~" + Элемент.ОбъектКонец + "~" + 
				Формат(Элемент.СуммаЗадержки, "ЧН=; ЧГ=") + "^";
	КонецЦикла;
	СтрВарианты = "";
	Для Каждого Элемент Из Схема.Варианты Цикл
		СтрВарианты = СтрВарианты + Элемент.Родитель + "~" + Элемент.Идентификатор + "~" + Элемент.Наименование + "~" + 
				Строка(Элемент.Результат) + "^";
	КонецЦикла;		
	
	Попытка
		ДрайверКомпоненты = ПолучитьИзВременногоХранилища(ПараметрыСеанса.АдресОбъектаУЭД);
		СтрРезультат = ДрайверКомпоненты.ОбработатьСтрелки(ОбъектНачало, Строка(ВариантНачало), ОбъектРодитель, 
				Строка(ТипЗнч(ВариантНачало)), СтрЗадержки, СтрВарианты);
	Исключение
		Попытка
			РаботаСЦКТСервер.ПодключитьКомпоненту();
			ДрайверКомпоненты = ПолучитьИзВременногоХранилища(ПараметрыСеанса.АдресОбъектаУЭД);
			СтрРезультат = ДрайверКомпоненты.ОбработатьСтрелки(ОбъектНачало, Строка(ВариантНачало), ОбъектРодитель, 
					Строка(ТипЗнч(ВариантНачало)), СтрЗадержки, СтрВарианты);
		Исключение
			Сообщить("Компонента AddInEDCNative не была загружена. Работа приложения невозможна!");
			Отказ = Истина;
			Возврат;
		КонецПопытки;
	КонецПопытки;
	
	Если СокрЛП(СтрРезультат) <> "" Тогда
		СтрРезультат = СтрЗаменить(СтрРезультат, "^", Символы.ПС);		
		Для НомСтр = 1 По СтрЧислоСтрок(СтрРезультат) Цикл
			Стр = СтрПолучитьСтроку(СтрРезультат, НомСтр);
			Стр = СтрЗаменить(Стр, "~", Символы.ПС);
							
			НоваяСтрелка = ЭтотОбъект.ВыполненныеСтрелки.Добавить();
			НоваяСтрелка.ДатаВыполнения = ТекущаяДата() + Число(СтрПолучитьСтроку(Стр, 1)) * 60;
			НоваяСтрелка.Идентификатор = СтрПолучитьСтроку(Стр, 2);	
			НоваяСтрелка.ОбъектКонец = СтрПолучитьСтроку(Стр, 3);
			НоваяСтрелка.Схема = Схема;
			НоваяСтрелка.ОбъектРодитель = СтрПолучитьСтроку(Стр, 4);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры 

Функция ПроверитьСумматоры(ЭтотОбъект)
	СписокНаУдаление = Новый СписокЗначений();
	БылВыполненСумматор = Истина;
	Пока БылВыполненСумматор Цикл
		БылВыполненСумматор = Ложь;
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		                      |	Таблица.Схема,
		                      |	Таблица.ОбъектРодитель
		                      |ПОМЕСТИТЬ Таблица
		                      |ИЗ
		                      |	&Таблица КАК Таблица
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	Таблица.Схема,
		                      |	Таблица.ОбъектРодитель
		                      |ИЗ
		                      |	Таблица КАК Таблица");
        Запрос.УстановитьПараметр("Таблица", ЭтотОбъект.ВыполненныеСтрелки.Выгрузить());
		Результат = Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			Для Каждого ЭлементСумматор Из Результат.Схема.Сумматоры Цикл
				КоличествоВходящих = Результат.Схема.Задержки.НайтиСтроки(Новый Структура("ОбъектКонец", 
						ЭлементСумматор.Идентификатор)).Количество();
				Строки = ЭтотОбъект.ВыполненныеСтрелки.НайтиСтроки(Новый Структура("ОбъектКонец, ОбъектРодитель", 
						ЭлементСумматор.Идентификатор, Результат.ОбъектРодитель));		
				КоличествоВыполненных = Строки.Количество();
				
				Если КоличествоВходящих = КоличествоВыполненных Тогда
					Отказ = Ложь;
					Для Каждого ЭлементСтрелка Из Строки Цикл
						Если ЭлементСтрелка.ДатаВыполнения > ТекущаяДата() Тогда
							Отказ = Истина;
							Прервать;
						КонецЕсли; 
					КонецЦикла;
					
					Если Не Отказ Тогда
						БылВыполненСумматор = Истина;
						СписокНаУдаление.Добавить(ЭлементСумматор.Идентификатор);				
						ЗаполнитьТаблицуВыполненныеСтрелки(Отказ, ЭлементСумматор.Идентификатор,, Результат.Схема, 
								Результат.ОбъектРодитель, ЭтотОбъект);	//ОбъектРодитель должен совпадать с ЭлементСтрелка.ОбъектРодитель
								
						//Удаляем стрелки приходящие в сумматоры
						Индекс = 0;
						Пока Индекс < ЭтотОбъект.ВыполненныеСтрелки.Количество() Цикл
							Элемент = ЭтотОбъект.ВыполненныеСтрелки[Индекс];
							Если СписокНаУдаление.НайтиПоЗначению(Элемент.ОбъектКонец) <> Неопределено Тогда
								ЭтотОбъект.ВыполненныеСтрелки.Удалить(Индекс);
							Иначе
								Индекс = Индекс + 1;
							КонецЕсли;
						КонецЦикла;		
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;		
	КонецЦикла;
		
	Возврат БылВыполненСумматор;
КонецФункции

Процедура ЗапуститьВозможныеСтадии(Отказ, ТекДата = Неопределено, ЭтотОбъект)
	Если ТекДата = Неопределено Тогда
		ТекДата = ТекущаяДата();
	КонецЕсли;
	
	ЗапустилиВложенныйБП = Ложь;
	//В цикле пробегаем все активные стрелки, и если стрелка идет к мероприятию, запускаем его, стрелку удаляем
	Индекс = 0;
	Пока Индекс < ЭтотОбъект.ВыполненныеСтрелки.Количество() Цикл
		Элемент = ЭтотОбъект.ВыполненныеСтрелки[Индекс];
		Если Элемент.ДатаВыполнения > ТекущаяДата() Тогда
			Стр = ЭтотОбъект.Схема.Задержки.НайтиСтроки(Новый Структура("Идентификатор", Элемент.Идентификатор));
			//++Казанцев-Заплатка на вложенный БП
			//Если Стр.Количество() > 0 И Стр[0].ОжидатьВФоне Тогда
			ВложенныйБПСтр = Элемент.Схема.Задержки.НайтиСтроки(Новый Структура("Идентификатор", Элемент.Идентификатор));					
			Если Стр.Количество() > 0 И Стр[0].ОжидатьВФоне ИЛИ ВложенныйБПСтр.Количество() > 0 И ВложенныйБПСтр[0].ОжидатьВФоне Тогда	
			//--Казанцев-Заплатка на вложенный БП
				Индекс = Индекс + 1;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СтрокиСтадии = Элемент.Схема.Стадии.НайтиСтроки(Новый Структура("Идентификатор", Элемент.ОбъектКонец));
		СтрокиВыходы = Элемент.Схема.Выходы.НайтиСтроки(Новый Структура("Идентификатор", Элемент.ОбъектКонец));
		Если СтрокиСтадии.Количество() = 1 Тогда	
			ДатаВыполнения = Элемент.ДатаВыполнения;			
			НоваяСтадия = ЭтотОбъект.ЗапущенныеСтадии.Добавить();
			НоваяСтадия.Идентификатор = СтрокиСтадии[0].Идентификатор;	
			НоваяСтадия.Схема = Элемент.Схема;
			НоваяСтадия.ОбъектРодитель = Элемент.ОбъектРодитель;
			
			Если СтрокиСтадии[0].ВидСтадии = Перечисления.ВидыСтадийБП.Мероприятие Тогда
				НовоеМероприятие = Задачи.Мероприятие.СоздатьЗадачу();
				НовоеМероприятие.БизнесПроцесс = ЭтотОбъект.Ссылка;
				НовоеМероприятие.Схема = Элемент.Схема;
				НовоеМероприятие.Точка = СтрокиСтадии[0].Идентификатор;
				НовоеМероприятие.ОбъектРодитель = Элемент.ОбъектРодитель;		
				НовоеМероприятие.Объект = ЭтотОбъект.Объект;
				НовоеМероприятие.ТипМероприятия = СтрокиСтадии[0].Стадия;		
				НовоеМероприятие.Организация = ЭтотОбъект.Организация;
				НовоеМероприятие.Подразделение = ЭтотОбъект.Подразделение;
				
				УстановитьПривилегированныйРежим(Истина);
				Если Не СтрокиСтадии[0].Исполнитель.Пустая() Тогда
					НовоеМероприятие.Ответственный = СтрокиСтадии[0].Исполнитель;
				ИначеЕсли Не НовоеМероприятие.ТипМероприятия.ТипСотрудника.Пустая() Тогда
					НовоеМероприятие.Ответственный = НовоеМероприятие.ТипМероприятия.ТипСотрудника;
				Иначе
					НовоеМероприятие.Ответственный = ПланыВидовХарактеристик.ТипыСотрудников.РуководительПодразделения;
				КонецЕсли;
				УстановитьПривилегированныйРежим(Ложь);
				//НовоеМероприятие.Исполнитель = НовоеМероприятие.Ответственный;
				
				Если Не Константы.БлокироватьСозданиеДокументовИзБП.Получить() И
						ДООтсутствуетВРаботе(НовоеМероприятие.Организация, НовоеМероприятие.Подразделение, 
						НовоеМероприятие.Ответственный, ЭтотОбъект)
		    			И ТипЗнч(ЭтотОбъект.Объект) <> Тип("СправочникСсылка.ИсполнительныеДокументы") //заплатка
						И ТипЗнч(НовоеМероприятие.Ответственный) = Тип("СправочникСсылка.Пользователи") //заплатка
						Тогда
					ДокументОбъект = Документы.АктПередачи.СоздатьДокумент();
					ДокументОбъект.Организация = НовоеМероприятие.Организация;
					ДокументОбъект.ПодразделениеПринимающее = НовоеМероприятие.Подразделение;
					ДокументОбъект.СотрудникПринимающий = НовоеМероприятие.Ответственный;
					ДокументОбъект.Объекты.Добавить().Объект = ЭтотОбъект.Объект;
					ДокументОбъект.Дата = ТекДата;
					ДокументОбъект.Автор = ЭтотОбъект.Ссылка;
					ДокументОбъект.НеНазначатьСотрудников = Истина;
					Попытка
						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						Отказ = Истина;
						Возврат;
					КонецПопытки;
				КонецЕсли;
				
//{{MRG[ <-> ]
				НовоеМероприятие.Автор = ЭтотОбъект.Ссылка;	
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				НовоеМероприятие.Автор = ЭтотОбъект.Ссылка;			
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				НовоеМероприятие.ПланируемаяДата = ДатаВыполнения;
//}}MRG[ <-> ]
				СтароеМероприятие = ПолучитьПоследнееВыполненноеМероприятие(ЭтотОбъект);
				Если СтароеМероприятие <> Задачи.Мероприятие.ПустаяСсылка() И ЗначениеЗаполнено(СтароеМероприятие.ДатаСледующегоМероприятия) Тогда
					НовоеМероприятие.ПланируемаяДата = СтароеМероприятие.ДатаСледующегоМероприятия;
					НовоеМероприятие.ПланируемоеВремя = СтароеМероприятие.ВремяСледующегоМероприятия;
				Иначе
					
					НовоеМероприятие.ПланируемаяДата = ДатаВыполнения;
					НовоеМероприятие.ПланируемоеВремя = ДатаВыполнения;		
					
				КонецЕсли;
				НовоеМероприятие.Дата = ТекДата;
				//++КазанцевЯА-БП
				Если Константы.КонтрольСроковМероприятий.Получить() И СтрокиСтадии[0].СрокВыполнения > 0 Тогда 
					НовоеМероприятие.СрокВыполнения =  ДатаВыполнения + СтрокиСтадии[0].СрокВыполнения * 60;
					ОсновнойКалендарьПредприятия = Константы.ОсновнойКалендарьПредприятия.Получить();
					Если Константы.ПереноситьВыходныеИПраздникиМероприятий.Получить() И ЗначениеЗаполнено(ОсновнойКалендарьПредприятия) Тогда
						УстановитьПривилегированныйРежим(Истина);
						ПроизводственныйКалендарь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнойКалендарьПредприятия, "ПроизводственныйКалендарь");
						ПараметрыПолучения = КалендарныеГрафики.ПараметрыПолученияБлижайшихРабочихДат();
						ПараметрыПолучения.ПолучатьПредшествующие = Ложь;
						ПараметрыПолучения.ВызыватьИсключение = Ложь;
						свДата = НачалоДня(НовоеМероприятие.СрокВыполнения);
						свВремя =  НовоеМероприятие.СрокВыполнения - свДата;
						мСрокВыполнения = Новый Массив;
						мСрокВыполнения.Добавить(свДата);
						ДниКалендаря = КалендарныеГрафики.БлижайшиеРабочиеДаты(ПроизводственныйКалендарь, мСрокВыполнения, ПараметрыПолучения);
						НовоеМероприятие.СрокВыполнения = ДниКалендаря.Получить(свДата) + свВремя;
						УстановитьПривилегированныйРежим(Ложь);	
					КонецЕсли;
				КонецЕсли;
				//--КазанцевЯА-БП
				Если Не НовоеМероприятие.ТипМероприятия.ФункцияПередСозданиемИзБП.Пустая() Тогда
					Справочники.ФункцииДополнительныхРеквизитов.ВычислитьФункцию(
//{{MRG[ <-> ]
					НовоеМероприятие.ТипМероприятия.ФункцияПередСозданиемИзБП.Функция,
					НовоеМероприятие, НовоеМероприятие);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				НовоеМероприятие.ПланируемоеВремя = ДатаВыполнения;		
//							НовоеМероприятие.ТипМероприятия.ФункцияПередСозданиемИзБП.Функция,
//							НовоеМероприятие, НовоеМероприятие);
//}}MRG[ <-> ]
				КонецЕсли;
				Попытка		
					НовоеМероприятие.Записать();
//{{MRG[ <-> ]
//					Автоинформирование.СформироватьЗаданиеИзБизнесПроцесса(НовоеМероприятие);
//}}MRG[ <-> ]
				Исключение
					Отказ = Истина;
					Возврат;
				КонецПопытки;
								
			ИначеЕсли СтрокиСтадии[0].ВидСтадии = Перечисления.ВидыСтадийБП.БизнесПроцесс Тогда
				Запрос = Новый Запрос();
				Запрос.УстановитьПараметр("Операция", СтрокиСтадии[0].Операция);
				Запрос.УстановитьПараметр("ТекущееПодразделение", ЭтотОбъект.Подразделение);
				
				Если СтрокиСтадии[0].Операция.Пустая() ИЛИ СтрокиСтадии[0].Операция = Справочники.ОперацииБП.Произвольная Тогда
					НазначеннаяОрганизация = ЭтотОбъект.Организация;
					НазначенноеПодразделение = ЭтотОбъект.Подразделение;
					НазначеннаяСхема = СтрокиСтадии[0].Стадия;
					
				ИначеЕсли СтрокиСтадии[0].Стадия.Пустая() Тогда
					НазначеннаяОрганизация = ЭтотОбъект.Организация;
					//НазначенноеПодразделение = ЭтотОбъект.Подразделение; //определить по запросу
					//НазначеннаяСхема = СтрокиСтадии[0].Стадия;           //определить по запросу

					//НазначенноеПодразделение
					Запрос.Текст = "ВЫБРАТЬ
					               |	НастройкиБП.Организация,
					               |	НастройкиБП.Подразделение,
					               |	НастройкиБП.Операция,
					               |	НастройкиБП.Схема,
					               |	ВЫБОР
					               |		КОГДА НастройкиБП.Подразделение = &ТекущееПодразделение
					               |			ТОГДА 1
					               |		ИНАЧЕ 0
					               |	КОНЕЦ КАК ТекущееПодразделение
					               |ИЗ
					               |	РегистрСведений.НастройкиБП КАК НастройкиБП
					               |ГДЕ
					               |	НастройкиБП.Организация = &Организация
					               |	И НастройкиБП.Операция = &Операция
					               |
					               |УПОРЯДОЧИТЬ ПО
					               |	ТекущееПодразделение УБЫВ,
					               |	Подразделение УБЫВ";
					Запрос.УстановитьПараметр("Организация", НазначеннаяОрганизация);;
					Результат = Запрос.Выполнить().Выбрать();
					Если Результат.Следующий() Тогда
						НазначенноеПодразделение = Результат.Подразделение;
						НазначеннаяСхема = Результат.Схема;
					Иначе
						Сообщить("Ошибка в РС Настройки БП");
						//НазначенноеПодразделение = ЭтотОбъект.Подразделение;
						//НазначеннаяСхема = СтрокиСтадии[0].Стадия;
					КонецЕсли;

				Иначе
					//НазначеннаяОрганизация = ЭтотОбъект.Организация;     //опр по запросу
					//НазначенноеПодразделение = ЭтотОбъект.Подразделение; //определить по запросу
					//НазначеннаяСхема = СтрокиСтадии[0].Стадия;           //определить по запросу
					
					//Получить организацию
				    Запрос.Текст = "ВЫБРАТЬ
				                   |	Мероприятие.Результат
				                   |ИЗ
				                   |	Задача.Мероприятие КАК Мероприятие
				                   |ГДЕ
				                   |	Мероприятие.БизнесПроцесс = &БизнесПроцесс
				                   |	И Мероприятие.Схема = &Схема
				                   |	И Мероприятие.ОбъектРодитель = &ОбъектРодитель
				                   |	И Мероприятие.ТипМероприятия = &ТипМероприятия
				                   |
				                   |УПОРЯДОЧИТЬ ПО
				                   |	Мероприятие.ФактическаяДата УБЫВ";
					Запрос.УстановитьПараметр("БизнесПроцесс", ЭтотОбъект.Ссылка);
					Запрос.УстановитьПараметр("Схема", Элемент.Схема);
					Запрос.УстановитьПараметр("ОбъектРодитель", Элемент.ОбъектРодитель);
					Запрос.УстановитьПараметр("ТипМероприятия", СтрокиСтадии[0].Стадия);
					Результат = Запрос.Выполнить().Выбрать();
					Если Результат.Следующий() Тогда
						НазначеннаяОрганизация = Результат.Результат;
					Иначе
						Сообщить("Ошибка в отсутствии мероприятия с организацией!");
					КонецЕсли;
					
					//НазначенноеПодразделение
					Запрос.Текст = "ВЫБРАТЬ
					               |	НастройкиБП.Организация,
					               |	НастройкиБП.Подразделение,
					               |	НастройкиБП.Операция,
					               |	НастройкиБП.Схема,
					               |	ВЫБОР
					               |		КОГДА НастройкиБП.Подразделение = &ТекущееПодразделение
					               |			ТОГДА 1
					               |		ИНАЧЕ 0
					               |	КОНЕЦ КАК ТекущееПодразделение
					               |ИЗ
					               |	РегистрСведений.НастройкиБП КАК НастройкиБП
					               |ГДЕ
					               |	НастройкиБП.Организация = &Организация
					               |	И НастройкиБП.Операция = &Операция
					               |
					               |УПОРЯДОЧИТЬ ПО
					               |	ТекущееПодразделение УБЫВ,
					               |	Подразделение УБЫВ";
					Запрос.УстановитьПараметр("Организация", НазначеннаяОрганизация);
					Результат = Запрос.Выполнить().Выбрать();
					Если Результат.Следующий() Тогда
						НазначенноеПодразделение = Результат.Подразделение;
						НазначеннаяСхема = Результат.Схема;
					Иначе
						Сообщить("Ошибка в РС Настройки БП");
						//НазначенноеПодразделение = ЭтотОбъект.Подразделение;
						//НазначеннаяСхема = СтрокиСтадии[0].Стадия;
					КонецЕсли;
					
				КонецЕсли;
									
				//Запуск нового БП
				Если НазначеннаяОрганизация = ЭтотОбъект.Организация И НазначенноеПодразделение = ЭтотОбъект.Подразделение Тогда
					СтрНомер = ПолучитьСледующийНомер(НоваяСтадия.Идентификатор, Элемент.ОбъектРодитель, ЭтотОбъект);
                    НоваяСтадия.Идентификатор = НоваяСтадия.Идентификатор + "*" + СтрНомер;
					ЗапустилиВложенныйБП = Истина;
                    ЗаполнитьТаблицуВыполненныеСтрелки(Отказ, "Старт--1",, НазначеннаяСхема, 
//{{MRG[ <-> ]
							Элемент.ОбъектРодитель + "_" + СтрокиСтадии[0].Идентификатор + "*" + СтрНомер, ЭтотОбъект);	
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//							Элемент.ОбъектРодитель + "_" + СтрокиСтадии[0].Идентификатор + "*" + СтрНомер, ЭтотОбъект, Элемент.ДатаВыполнения);	
//}}MRG[ <-> ]
			    Иначе
					НовыйБП = БизнесПроцессы.БизнесПроцессы.СоздатьБизнесПроцесс();
					НовыйБП.Объект = ЭтотОбъект.Объект;
					НовыйБП.Схема = НазначеннаяСхема;
					НовыйБП.Операция = СтрокиСтадии[0].Операция;
					НовыйБП.Организация = НазначеннаяОрганизация;
					НовыйБП.Подразделение = НазначенноеПодразделение;
					НовыйБП.ОбъектРодитель = Элемент.ОбъектРодитель;// + "_" + СтрокиСтадии[0].Идентификатор;
					НовыйБП.Точка = СтрокиСтадии[0].Идентификатор;
					НовыйБП.СхемаРодитель = Элемент.Схема;
					НовыйБП.БПРодитель = ЭтотОбъект.Ссылка;
					НовыйБП.Автор = ЭтотОбъект.Ссылка;
                    НовыйБП.Комментарий = "Бизнес - процесс";
 					НовыйБП.Дата = ТекДата;
					УстановитьПривилегированныйРежим(Истина);
					Попытка
						НовыйБП.Записать();
					Исключение
						Отказ = Истина;
						Возврат;
					КонецПопытки;
					НовыйБП.ЗапуститьБизнесПроцесс(Отказ);
					Если Отказ Тогда
						Возврат;
					КонецЕсли;
					УстановитьПривилегированныйРежим(Ложь);
				КонецЕсли;
				
			ИначеЕсли СтрокиСтадии[0].ВидСтадии = Перечисления.ВидыСтадийБП.Функция Тогда
	            ПолученноеЗначение = ОбъектыСервер.ВычислитьФункцию(СтрокиСтадии[0].Стадия.Функция, ЭтотОбъект.Объект, ЭтотОбъект.Ссылка, 
						Элемент.ОбъектРодитель);
				ИсточникСобытия = Новый Структура("Результат, Точка, ОбъектРодитель", ПолученноеЗначение, 
						СтрокиСтадии[0].Идентификатор, Элемент.ОбъектРодитель);	
				
				//ПродолжитьВыполнениеБП(Отказ, ИсточникСобытия);
				Элемент = ЭтотОбъект.ЗапущенныеСтадии.НайтиСтроки(Новый Структура("ОбъектРодитель, Идентификатор", 
						ИсточникСобытия.ОбъектРодитель, ИсточникСобытия.Точка))[0];
				ЗаполнитьТаблицуВыполненныеСтрелки(Отказ, Элемент.Идентификатор, ИсточникСобытия.Результат, Элемент.Схема, 
						Элемент.ОбъектРодитель, ЭтотОбъект);
				ЭтотОбъект.ЗапущенныеСтадии.Удалить(Элемент.НомерСтроки - 1);
				
				ЗапустилиВложенныйБП = Истина;
			КонецЕсли;
			ЭтотОбъект.ВыполненныеСтрелки.Удалить(Индекс);
			
		ИначеЕсли СтрокиВыходы.Количество() = 1 Тогда
			Если Элемент.ОбъектРодитель = "" Тогда	
				ЗавершитьБизнесПроцессБП(Отказ, СтрокиВыходы[0], ЭтотОбъект);
				
				Если Не Отказ И ЗначениеЗаполнено(ЭтотОбъект.БПРодитель) И 
						ТипЗнч(ЭтотОбъект.БПРодитель) = Тип("БизнесПроцессСсылка.БизнесПроцессы") Тогда
					ИсточникСобытия = Новый Структура("ОбъектРодитель, Точка, Результат", ЭтотОбъект.ОбъектРодитель, 
							ЭтотОбъект.Точка, ЭтотОбъект.РезультатБП);
		            ЭтотОбъект.БПРодитель.ПолучитьОбъект().ПродолжитьВыполнениеБП(Отказ, ИсточникСобытия);		
				КонецЕсли;
				
				Если Отказ Тогда
					Возврат;
				КонецЕсли;
				
				ЭтотОбъект.ВыполненныеСтрелки.Удалить(Индекс);
			Иначе			
				Стр = СтрЗаменить(Элемент.ОбъектРодитель, "_", Символы.ПС);
				СтрТочка = СтрПолучитьСтроку(Стр, СтрЧислоСтрок(Стр));
				СтрОбъектРодитель = Лев(Элемент.ОбъектРодитель, СтрДлина(Элемент.ОбъектРодитель) - СтрДлина(СтрТочка) - 1);
									
				ИсточникСобытия = Новый Структура("ОбъектРодитель, Точка, Результат", СтрОбъектРодитель, СтрТочка, 
						СтрокиВыходы[0].Идентификатор);	
				ЭтотОбъект.ВыполненныеСтрелки.Удалить(Индекс);		
				ПродолжитьВыполнениеБПБП(Отказ, ИсточникСобытия, ЭтотОбъект);
				Если Отказ Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		Иначе	
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;	
	
	Если ЗапустилиВложенныйБП Тогда
		Пока ПроверитьСумматоры(ЭтотОбъект) Цикл
		КонецЦикла;       
		ЗапуститьВозможныеСтадии(Отказ, ТекДата, ЭтотОбъект);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтотОбъект.ЗапущенныеСтадии.Количество() = 0 И ЭтотОбъект.ВыполненныеСтрелки.Количество() = 0 Тогда
		ЭтотОбъект.Завершен = Истина; //!!
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьПоследнееВыполненноеМероприятие(БизнесПроцесс)
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	Мероприятие.Ссылка
	                      |ИЗ
	                      |	Задача.Мероприятие КАК Мероприятие
	                      |ГДЕ
	                      |	Мероприятие.Выполнена = ИСТИНА
	                      |	И Мероприятие.ПометкаУдаления = ЛОЖЬ
	                      |	И Мероприятие.БизнесПроцесс = &БизнесПроцесс
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Мероприятие.ДатаВыполнения УБЫВ");
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс.Ссылка);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда 
		Возврат Результат.Ссылка;
	Иначе
		Возврат Задачи.Мероприятие.ПустаяСсылка();
	КонецЕсли;
КонецФункции

Функция ПолучитьСледующийНомер(Знач Идентификатор, Знач ОбъектРод, ЭтотОбъект)
	////Номер1 = 1;
	////Для Каждого Элемент Из ЭтотОбъект.ЗапущенныеСтадии Цикл
	////	Если Найти(Элемент.Идентификатор, Идентификатор + "*") = 1 Тогда
	////		Стр = Сред(Элемент.Идентификатор, СтрДлина(Идентификатор) + 2);
	////		Номер2 = Найти(Стр, "_");
	////		Если Номер2 > 0 Тогда
	////			Стр = Лев(Стр, Номер - 1);
	////		КонецЕсли;
	////		Номер2 = Число(Стр) + 1;
	////		Если Номер2 > Номер1 Тогда
	////			Номер1 = Номер2;
	////		КонецЕсли;
	////	КонецЕсли;
	////КонецЦикла;
	////Возврат Строка(Номер1);
	                                           
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	Мероприятие.Ссылка
	                      |ИЗ
	                      |	Задача.Мероприятие КАК Мероприятие
	                      |ГДЕ
	                      |	Мероприятие.БизнесПроцесс = &БизнесПроцесс
	                      |	И Мероприятие.ОбъектРодитель = &ОбъектРодитель");
	Запрос.УстановитьПараметр("БизнесПроцесс", ЭтотОбъект.Ссылка);
	Номер1 = 1;
	Запрос.УстановитьПараметр("ОбъектРодитель", ОбъектРод + "_" + Идентификатор + "*" + Строка(Номер1));
	Пока Не Запрос.Выполнить().Пустой() Цикл
		Номер1 = Номер1 + 1;
		Запрос.УстановитьПараметр("ОбъектРодитель", ОбъектРод + "_" + Идентификатор + "*" + Строка(Номер1));
	КонецЦикла;
	Возврат Строка(Номер1);
КонецФункции

Функция ДООтсутствуетВРаботе(ОрганизацияСсылка, ПодразделениеСсылка, ОтветственныйСсылка, ЭтотОбъект)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОбъектыВРаботеОстатки.КоличествоОстаток
	                      |ИЗ
	                      |	РегистрНакопления.ОбъектыВРаботе.Остатки(
	                      |			,
	                      |			Объект = &Объект
	                      |				И Организация = &Организация
	                      |				И Подразделение = &Подразделение
	                      |				И Сотрудник = &Сотрудник) КАК ОбъектыВРаботеОстатки
	                      |ГДЕ
	                      |	ОбъектыВРаботеОстатки.КоличествоОстаток > 0");
	Запрос.УстановитьПараметр("Объект", ЭтотОбъект.Объект);
	Запрос.УстановитьПараметр("Организация", ОрганизацияСсылка);
	Запрос.УстановитьПараметр("Подразделение", ПодразделениеСсылка);
	Запрос.УстановитьПараметр("Сотрудник", ОтветственныйСсылка);
	Возврат Запрос.Выполнить().Пустой();
КонецФункции

Процедура ЗавершитьБизнесПроцессБП(Отказ, ЭлементВыход, ЭтотОбъект) Экспорт
	Если ЭлементВыход.Результат.Пустая() Тогда
		ЭтотОбъект.РезультатБП = ЭлементВыход.Идентификатор;
		ЭтотОбъект.РезультатБПНаименование = ЭлементВыход.Наименование;
	Иначе
		ЭтотОбъект.РезультатБП = ЭлементВыход.Результат;
		ЭтотОбъект.РезультатБПНаименование = ЭлементВыход.Результат;
	КонецЕсли;
	//ЭтотОбъект.Завершен = Истина;
	//ЭтотОбъект.ВыполненныеСтрелки.Очистить();
	//ЭтотОбъект.ЗапущенныеСтадии.Очистить();
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		ЭтотОбъект.Записать();
	Исключение
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	//Если ЗначениеЗаполнено(ЭтотОбъект.БПРодитель) И 
	//		ТипЗнч(ЭтотОбъект.БПРодитель) = Тип("ДокументСсылка.ПередачаНаВыполнение") Тогда
	//	ДокументОбъект = ЭтотОбъект.БПРодитель.ПолучитьОбъект();
	//	ДокументОбъект.ДатаВыполнения = ТекущаяДата();
	//	ДокументОбъект.РезультатПередачи = ЭтотОбъект.РезультатБПНаименование;
	//  Попытка
	//		ДокументОбъект.Записать();
	//	Исключение
	//		Отказ = Истина;
	//		Возврат;
	//	КонецПопытки;
	//КонецЕсли;
КонецПроцедуры

Процедура ПродолжитьВыполнениеБПБП(Отказ, ИсточникСобытия, ЭтотОбъект) Экспорт // ЗАЩИЩЕНА!
	Если Не бит_сл_тс.ПолучитьЛицензию() Тогда	
		Отказ = Истина;
		Сообщить("Продукт не активирован, объект не доступен!");	
		Возврат;
	КонецЕсли;
		
	//ИсточникСобытия.ОбъектРодитель;
	//ИсточникСобытия.Точка;
	//ИсточникСобытия.Результат;	
	
	Если ИсточникСобытия <> Неопределено Тогда
		Попытка
			Элемент = ЭтотОбъект.ЗапущенныеСтадии.НайтиСтроки(Новый Структура("ОбъектРодитель, Идентификатор", 
					ИсточникСобытия.ОбъектРодитель, ИсточникСобытия.Точка))[0];
		Исключение
			Возврат;		
		КонецПопытки;			
		ЗаполнитьТаблицуВыполненныеСтрелки(Отказ, Элемент.Идентификатор, ИсточникСобытия.Результат, Элемент.Схема, 
				Элемент.ОбъектРодитель, ЭтотОбъект);
		ЭтотОбъект.ЗапущенныеСтадии.Удалить(Элемент.НомерСтроки - 1);
	КонецЕсли;
	
	//
	Пока ПроверитьСумматоры(ЭтотОбъект) Цикл
	КонецЦикла;
	ЗапуститьВозможныеСтадии(Отказ,, ЭтотОбъект);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		ЭтотОбъект.Записать();
	Исключение
		Отказ = Истина;
		Возврат;
	КонецПопытки;
КонецПроцедуры

Функция ПолучитьОтветственного(ЭтотОбъект)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОбъектыВРаботеОстатки.Сотрудник
	                      |ИЗ
	                      |	РегистрНакопления.ОбъектыВРаботе.Остатки(
	                      |			,
	                      |			Подразделение = &Подразделение
	                      |				И Объект = &Объект
	                      |				И Сотрудник <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК ОбъектыВРаботеОстатки");
	Запрос.УстановитьПараметр("Подразделение", ЭтотОбъект.Подразделение);
	Если ТипЗнч(ЭтотОбъект.Объект) = Тип("СправочникСсылка.ИсполнительныеДокументы") Тогда
		Запрос.УстановитьПараметр("Объект", ЭтотОбъект.Объект.Владелец);
	Иначе
		Запрос.УстановитьПараметр("Объект", ЭтотОбъект.Объект);
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Сотрудник;
	Иначе
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
КонецФункции

Процедура ПередУдалениемБП(Отказ, ЭтотОбъект) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Мероприятие.Ссылка
	                      |ИЗ
	                      |	Задача.Мероприятие КАК Мероприятие
	                      |ГДЕ
	                      |	Мероприятие.БизнесПроцесс = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		Попытка
			ЗадачаОбъект = Результат.Ссылка.ПолучитьОбъект();
			ЗадачаОбъект.Удалить();
		Исключение
			Сообщить(ОписаниеОшибки());
			Отказ = Истина;
			Возврат;
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////

Процедура ПродолжитьВыполнениеБПБП2(Отказ, ЭтотОбъект) Экспорт // ЗАЩИЩЕНА!
	Пока ПроверитьСумматоры(ЭтотОбъект) Цикл
	КонецЦикла;
	ЗапуститьВозможныеСтадии(Отказ,, ЭтотОбъект);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		ЭтотОбъект.Записать();
	Исключение
		Отказ = Истина;
		Возврат;
	КонецПопытки;
КонецПроцедуры

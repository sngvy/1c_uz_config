//-----------------------------------------------------------------------------
// Структура модуля формы:
//
// Глобальные переменные
//
// Общие сервисные функции:
// - сервисные функции сервер,
// - сервисные функции клиент,
// - сервисные функции клиент-сервер.
//
// Обработка внешних событий
//
// Работа с историей звонков
//
// Работа с кэшем контрагентов
//
// Управление подключением
//
// Управление разговором:
// - начало разговора,
// - прием/отклонение входящего звонка,
// - завершение разговора,
// - переадресация, удержание,
// - запись,
// - DTMF.
//
// Управление микрофоном/динамиками
//
// Отправка SMS
//
// Взаимодействие с пользовательским интерфейсом:
// - общие функции интерфейса,
// - события формы,
// - командная панель,
// - панель линий,
// - основная панель,
// - панель истории,
// - панель Избранного,
// - обработка статусов.
//
// Обработка оповещений
//-----------------------------------------------------------------------------

// Глобальные переменные

&НаКлиенте
Перем СофтФон;

&НаКлиенте
Перем фрмОбработкаВызова;

// Тип - Соответствие (Map)
//  ключ - строка-номер телефона,
//  значение - структура из двух полей (КонтрагентСсылка, КонтрагентНаименование).
&НаКлиенте
Перем кэшКонтактов;

// Массив структур
&НаКлиенте
Перем ИнформацияЛиний;

&НаКлиенте
Перем основнойКанал;

&НаКлиенте
Перем каналУсловнойПереадресации;

&НаКлиенте
Перем НомерУсловнойПереадресацииИсх;

&НаКлиенте
Перем условныйПереводУспешен;

&НаКлиенте
Перем МассивИдентификаторовПолученияСтатуса;

&НаКлиенте
Перем АсинхронноеИзменениеСтатусаНеБеспокоить;


//-----------------------------------------------------------------------------
// Общие сервисные функции

// - сервисные функции сервер
&НаСервере
Функция НайтиКонтрагентаПоНомеруВИзбранном(Знач КороткийНомер, КонтрагентСсылка)
	Если НЕ ЗначениеЗаполнено(КороткийНомер) Тогда
		КонтрагентСсылка = "";
		Возврат Ложь;
	КонецЕсли;
	
	длинаНомера = СтрДлина(КороткийНомер);
	// поиск в избранном
	запросИзбр = Новый Запрос;
	длинаВнешнегоНомера = бит_ТелефонияКлиентСервер.ПолучитьДлинуВнешнегоНомера();
	Если длинаНомера >= длинаВнешнегоНомера Тогда
		// внешний вызов
		внешНомер = Прав(КороткийНомер, длинаВнешнегоНомера);
		запросИзбр.Текст = "ВЫБРАТЬ
		|	бит_БитфонИзбранное.Наименование
		|ИЗ
		|	Справочник.бит_БитфонИзбранное КАК бит_БитфонИзбранное
		|ГДЕ
		|	(бит_БитфонИзбранное.Пользователь = &Пользователь
		|			ИЛИ бит_БитфонИзбранное.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|	И бит_БитфонИзбранное.Номер ПОДОБНО &Номер";
		запросИзбр.УстановитьПараметр("Номер", "%" + внешНомер + "%");
	Иначе
		запросИзбр.Текст = "ВЫБРАТЬ
		|	бит_БитфонИзбранное.Наименование
		|ИЗ
		|	Справочник.бит_БитфонИзбранное КАК бит_БитфонИзбранное
		|ГДЕ
		|	(бит_БитфонИзбранное.Пользователь = &Пользователь
		|			ИЛИ бит_БитфонИзбранное.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|	И бит_БитфонИзбранное.Номер = &Номер";
		запросИзбр.УстановитьПараметр("Номер", КороткийНомер);
	КонецЕсли;
	
	запросИзбр.УстановитьПараметр("Пользователь", бит_ТелефонияСервер.ПолучитьТекущегоПользователя());
	
	Результат = запросИзбр.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		КонтрагентСсылка = ВыборкаДетальныеЗаписи.Наименование + " (избранное)";
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Функция НайтиКонтрагентаПоНомеру(Знач НомерДляПоиска, КонтрагентСсылка, КонтактноеЛицоСсылка)
	найден = НайтиКонтрагентаПоНомеруВИзбранном(НомерДляПоиска, КонтрагентСсылка);
	Если найден <> Истина Тогда
		флагНеИскатьКонтрагента = бит_БитфонСервер.ПолучитьФлагНеИскатьКонтрагента();
		найден = бит_БитфонСервер.НайтиКонтрагентаИКонтактноеЛицоПоНомеру(НомерДляПоиска, КонтрагентСсылка, КонтактноеЛицоСсылка, флагНеИскатьКонтрагента);
	КонецЕсли;
	возврат найден;
КонецФункции

// - сервисные функции клиент

// Поиск значения тэга в строке XML
&НаКлиенте
Функция НайтиТэг(стрХмл, стрТэг)
	
	Если (НЕ ЗначениеЗаполнено(стрХмл)) ИЛИ (НЕ ЗначениеЗаполнено(стрТэг)) Тогда
		Возврат "";
	КонецЕсли;
	
	стрТэгОткр = "<" + стрТэг + ">";
	длинаТэгаОткр = СтрДлина(стрТэгОткр);
	
	индексНач = Найти(стрХмл, стрТэгОткр);
	Если индексНач <= 0 Тогда
		Возврат "";
	КонецЕсли;
	
	индексЗнач = индексНач+длинаТэгаОткр;
	
	стрТэгЗакр = "</" + стрТэг + ">";
	индексКон = Найти(стрХмл, стрТэгЗакр);
	Если (индексКон <= 0) ИЛИ (индексЗнач>=индексКон) Тогда
		Возврат "";
	КонецЕсли;
	
	стрТэгЗнач = Сред(стрХмл, индексЗнач, индексКон - индексЗнач);
	
	Возврат стрТэгЗнач;
КонецФункции

// Проверяет, что номер является командой АТС для включения/выключения статуса 'Не беспокоить'.
//
// Параметры:
//  стрНомер - Строка - номер телефона.
//
// Возвращаемое значение:
//   Булево - Истина, если номер - команда изменения статуса.
//
&НаКлиенте
Функция ПроверитьКомандуИзмененияСтатусаНеБеспокоить(стрНомер)
	РежимНеБеспокоитьНаАТС = бит_БитфонСервер.ПолучитьФлагИспользоватьКомандуНеБеспокоитьНаАТС();
	Если НЕ РежимНеБеспокоитьНаАТС Тогда
		Возврат Ложь;
	КонецЕсли;
	стрКомандаНеБеспокоить = бит_БитфонСервер.ПолучитьКомандуНеБеспокоить();
	стрКомандаОтменитьНеБеспокоить = бит_БитфонСервер.ПолучитьКомандуОтменаНеБеспокоить();
	флагКомандаИзмененияСтатуса = Ложь;
	Если (стрНомер = стрКомандаНеБеспокоить) ИЛИ (стрНомер = стрКомандаОтменитьНеБеспокоить) Тогда
		флагКомандаИзмененияСтатуса = Истина;
	КонецЕсли;
	Возврат флагКомандаИзмененияСтатуса;
КонецФункции

// - сервисные функции клиент-сервер
&НаКлиентеНаСервереБезКонтекста
Функция ФорматироватьДлительностьЗвонка(Длительность)
	Если НЕ ЗначениеЗаполнено(Длительность) Тогда
		Возврат "";
	КонецЕсли;
	//
	длитМин = Цел(Длительность / 60);
	длитСек = Длительность % 60;
	длитЧас = Цел(длитМин / 60);
	длитМин = длитМин % 60;
	стрФорматаБезЛидНуля = "ЧЦ=1; ЧН=; ЧВН=";
	стрФорматаСЛидНулем = "ЧЦ=2; ЧН=; ЧВН=";
	Если длитМин > 0 ИЛИ длитЧас > 0 ИЛИ длитСек > 9 Тогда
		стрДлительность = Формат(длитСек, стрФорматаСЛидНулем);
	Иначе
		стрДлительность = Формат(длитСек, стрФорматаБезЛидНуля);
	КонецЕсли;
	Если длитМин > 0 ИЛИ длитЧас > 0 Тогда
		стрДлительность = Формат(длитМин, ?((длитЧас > 0 ИЛИ длитМин > 9), стрФорматаСЛидНулем, стрФорматаБезЛидНуля) ) + ":" + стрДлительность;
	КонецЕсли;
	Если длитЧас > 0 Тогда
		стрДлительность = Строка(длитЧас) + ":" + стрДлительность;
	КонецЕсли;
	Возврат стрДлительность;
КонецФункции

//-----------------------------------------------------------------------------
// Обработка внешних событий
&НаКлиенте                                                                
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Если Источник = "1С_Софтфон" Тогда	
		Если 		Событие = "Регистрация" Тогда  			//---Регистрация(при попытке подключения к серверу)
			ОбработчикСобытияРегистрация(Данные);
		ИначеЕсли 	Событие = "ВходящийЗвонок" Тогда		//---Входящий вызов
			ОбработчикСобытияВходящийЗвонок(Данные);
		ИначеЕсли 	Событие = "СостояниеЗвонка" Тогда
			ОбработчикСобытияСостояниеЗвонка(Неопределено, Данные);
		ИначеЕсли Событие = "ОбновлениеЗвонка" Тогда
			ОбработчикСобытияОбновлениеЗвонка(Данные);
		ИначеЕсли Событие = "СостояниеПодписки" Тогда      //--Отслеживание статусов абонентов по SIP
			ОбработчикСобытияСостояниеПодписки(Данные);
		ИначеЕсли	Событие = "Софтфон_Ошибка" Тогда        //---Оповещение об ошибке
			ОбработчикСобытияОшибка(Данные);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСобытияРегистрация(Данные)
	Если Данные = "Успешно" Тогда
		//
		ПодключитьОбработчикОжидания("ОбновитьДлительностьРазговора", 1, Ложь);
		ИзбранноеОбновитьКлиент();	// Статусы
		//
		СтатусПодключен = Истина;
		СтатусНеБеспокоить = бит_БитфонСервер.ПолучитьФлагРежимНеБеспокоить();
		Если АсинхронноеИзменениеСтатусаНеБеспокоить Тогда
			АсинхронноеИзменениеСтатусаНеБеспокоить = Ложь;
			Если СтатусНеБеспокоить Тогда
				ОтменитьСтатусНеБеспокоить();
			Иначе
				УстановитьСтатусНеБеспокоить();
			КонецЕсли;
		КонецЕсли;
		ОбновитьСтатусыПодключения();
	Иначе
		СтатусПодключен = Ложь;
		ОбновитьСтатусыПодключения();
		бит_ТелефонияКлиент.ВывестиСообщение("Ошибка регистрации: " + Данные);
		ПоказатьОповещениеПользователя("Ошибка регистрации: ", , Данные);
		бит_БитфонСервер.ЗаписатьОшибкуВЖурналРегистрации("Ошибка регистрации", Данные);
	КонецЕсли;
	//
	Если ЗначениеЗаполнено(ПриПодключенииДействие) Тогда
		Оповестить(ПриПодключенииДействие, ПриПодключенииПараметр);
		ПриПодключенииДействие = "";
		ПриПодключенииПараметр = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСобытияОшибка(Данные)
	// Скрыть сообщения от Битфона
	//бит_ТелефонияКлиент.ВывестиСообщение("Ошибка Софтфон: " + Данные);
	бит_БитфонСервер.ЗаписатьОшибкуВЖурналРегистрации("Софтфон_Ошибка", Данные);
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	// Если ошибка произошла во время инициализации софтфона, то при обновлении панели будет вызвано исключение.
	// Обрабатывать это исключение не нужно.
	Попытка
		ОбновитьПанель(каналАктивнойЛинии);
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСобытияВходящийЗвонок(Данные)
	
	Если бит_БитфонСервер.ПолучитьФлагРазворачиватьОкноПриВходящемЗвонке() Тогда
		Активизировать();
	КонецЕсли;
	
	Канал = Число(Данные);
	НомерВходящий = СофтФон.GetChannelName(Канал);
	ИмяВходящий = СофтФон.GetChannelSIPName(Канал);
	
	ЗаголовкиВх = СофтФон.GetInviteHeaders(Канал);
	НомерНабранный = НайтиТэг(ЗаголовкиВх, "X-BITPBX-DialNumber");
	НомерНабранный = бит_ТелефонияСервер.ПолучитьНаименованиеНабранногоНомера(НомерНабранный);
	ИнформацияЛиний[Канал].НабранныйНомер = НомерНабранный;
	
	контактВходящий		= Неопределено;
	номерНеОпределен	= Ложь;
	контактноеЛицо = Неопределено;
	номер_найден = НайтиКонтрагентаПоНомеру(НомерВходящий, контактВходящий, контактноеЛицо);
	Если номер_найден <> Истина Тогда 
		номерНеОпределен = Истина;
		контактВходящий = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(НомерВходящий);
	КонецЕсли;
	ДобавитьКонтрагентаВКэш(НомерВходящий, контактВходящий, контактноеЛицо);
	
	Если СтатусНеБеспокоить Тогда
		ОтклонитьВходящийВызовНаКанале(Канал);
		Возврат;
	КонецЕсли;
	
	// Проверка, что идет воспроизведение записи на стационарном телефоне, стационарный телефон уже занят.
	Если ИдетВоспроизведение Тогда
		ОтклонитьВходящийВызовНаКанале(Канал);
		Возврат;
	КонецЕсли;
	
	ТекстЗаголовка = "БИТ.Phone";
	Текст = Строка(контактВходящий);
	Если ЗначениеЗаполнено(контактноеЛицо) Тогда
		Текст = Текст + " (" + Строка(контактноеЛицо) + ")";
	КонецЕсли;
	ПоказатьОповещениеПользователя("Вас вызывает номер " + НомерВходящий, , Текст,БиблиотекаКартинок.NC_ВходящийЗвонок);
	
	Если бит_БитфонСервер.ПолучитьФлагОткрыватьКартуЯндексПриВходящемЗвонке() И
	  СтрДлина(НомерВходящий) >= бит_ТелефонияКлиентСервер.ПолучитьДлинуВнешнегоНомера() Тогда
		ПараметрыЯндекс = Новый Структура("Номер", НомерВходящий);
		фрмКартаЯндекс = ПолучитьФорму("Обработка.бит_Битфон.Форма.ФормаКартаЯндекс", ПараметрыЯндекс);
		фрмКартаЯндекс.Открыть();
	КонецЕсли;
	
	режимНесколькихВход	= бит_БитфонСервер.ПолучитьФлагПриниматьНесколькоВходящих();
	типПриемаЗвонка = бит_БитфонСервер.ПолучитьТипПриемаЗвонка();
	
	Если ИспользуетсяСтационарныйТелефон Тогда
		Если УсловнаяПереадресация Тогда
			// При идущей переадресации на стационарный телефон условный перевод невозможен,
			// так как стационарный телефон уже занят.
			ОтклонитьВходящийВызовНаКанале(Канал);
			Возврат;
		КонецЕсли;
		//
		Если типПриемаЗвонка = ПредопределенноеЗначение("Перечисление.бит_ТипПриемаЗвонка.ПриниматьВручную") ИЛИ НЕ ЗначениеЗаполнено(типПриемаЗвонка) Тогда
			ОбработатьВходящийВызовВМодальномДиалоге(ТекстЗаголовка, НомерВходящий, НЕ номерНеОпределен, контактВходящий, контактноеЛицо, НомерНабранный, Канал);
		ИначеЕсли типПриемаЗвонка = ПредопределенноеЗначение("Перечисление.бит_ТипПриемаЗвонка.ПринятьИПеревести") Тогда
			ПринятьВходящийВызовНаКанале(Канал);
			ОткрытьФормуОбработкиНеизвестногоНомера(номерНеОпределен, НомерВходящий);
		ИначеЕсли типПриемаЗвонка = ПредопределенноеЗначение("Перечисление.бит_ТипПриемаЗвонка.ПеревестиДоПринятия") Тогда
			ОбновитьПанель(Канал);
			НачатьПереводНаСтационарныйТелефон(Канал, НомерВходящий);
		КонецЕсли;
	Иначе
		Если режимНесколькихВход Тогда
			Элементы.ГруппаЛинии.ТекущаяСтраница = Элементы["ГруппаЛиния" + Строка(Канал+1)];
			ОбновитьПанель(Канал);
			ОткрытьФормуОбработкиНеизвестногоНомера(номерНеОпределен, НомерВходящий);
			Активизировать();
		Иначе
			ОбработатьВходящийВызовВМодальномДиалоге(ТекстЗаголовка, НомерВходящий, НЕ номерНеОпределен, контактВходящий, контактноеЛицо, НомерНабранный, Канал);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСобытияСостояниеЗвонка(Знач Оповещение, Данные)
	
	Если фрмОбработкаВызова <> Неопределено Тогда
		Если фрмОбработкаВызова.Открыта() Тогда
			фрмОбработкаВызова.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
	параметрыЗвонка = бит_ТелефонияКлиентСервер.СтрРазбить(Данные, "#");
	Состояние = параметрыЗвонка[0].Значение;

	Канал = Число(параметрыЗвонка[1].Значение);
	длительностьЗвонкаСек = Число(параметрыЗвонка[2].Значение);
	
	ВходящийВызов	= СофтФон.IsIncomingCall(Канал);
	НомерЗвонка		= СофтФон.GetChannelName(Канал);
	
	НомерНабранный = ИнформацияЛиний[Канал].НабранныйНомер;
	
	контактВходящий		= Неопределено;
	контактноеЛицо		= Неопределено;
	ПолучитьКонтрагентаИзКэша(НомерЗвонка, контактВходящий, контактноеЛицо);
	
	флагИзменениеСтатуса	= ПроверитьКомандуИзмененияСтатусаНеБеспокоить(НомерЗвонка);
	
	Если флагИзменениеСтатуса Тогда
		
		ОбработкаСостоянияКомандыИзмененияСтатусаНеБеспокоить(НомерЗвонка, Состояние);
		
	Иначе
		
		стрНомерДляИстории = НомерЗвонка;
		
		прямойНабор = бит_БитфонСервер.ПолучитьФлагИспользоватьПрямойНабор();
		Если НЕ прямойНабор Тогда
			стрНомерДляИстории = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(стрНомерДляИстории);
		КонецЕсли;
		
		Если Канал = каналУсловнойПереадресации Тогда
			ОбработкаСостоянияКаналаУсловнойПереадресации(Состояние, стрНомерДляИстории,
				контактВходящий, контактноеЛицо, длительностьЗвонкаСек);
		Иначе
			// остальные каналы
			ОбработкаСостоянияОбычногоКанала(Канал, Состояние, ВходящийВызов, НомерЗвонка, стрНомерДляИстории,
				контактВходящий, контактноеЛицо, длительностьЗвонкаСек, НомерНабранный);
		КонецЕсли;

	КонецЕсли;
	
	Если Состояние = "ЗвонокОтклонён" ИЛИ Состояние = "ЗвонокПрерван" Тогда
		ИдетВоспроизведение = Ложь;
		УдалитьКонтрагентаИзКэша(НомерЗвонка);
		ИнформацияЛиний[Канал].НабранныйНомер = "";
		СофтФон.HandleDisconnected(Канал);
	КонецЕсли;
	
	УстановитьНомерЛинии(Канал+1, "");
	ОбновитьЗаголовокПанели(Канал);
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	Если каналАктивнойЛинии = Канал Тогда
		ОбновитьПанель(Канал);
	КонецЕсли;
	
	// Обработчик состояния звонка
	Если Состояние = "ЗвонокОтклонён" Тогда
		ЭтаФорма.СостояниеЗвонка = "ЗвонокОтклонён";
		Оповестить("ОбработатьСостояниеЗвонка");
	ИначеЕсли Состояние = "ЗвонокПрерван" Тогда
		ЭтаФорма.СостояниеЗвонка = "ЗвонокПрерван";
		Оповестить("ОбработатьСостояниеЗвонка");
	КонецЕсли;
	//
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСостоянияКомандыИзмененияСтатусаНеБеспокоить(НомерЗвонка, Состояние)
	
	стрКомандаНеБеспокоить = бит_БитфонСервер.ПолучитьКомандуНеБеспокоить();
	стрКомандаОтменитьНеБеспокоить = бит_БитфонСервер.ПолучитьКомандуОтменаНеБеспокоить();
	
	УстНеБеспокоить = Ложь;
	
	Если стрКомандаНеБеспокоить = стрКомандаОтменитьНеБеспокоить Тогда
		УстНеБеспокоить = НЕ СтатусНеБеспокоить;
	Иначе
		УстНеБеспокоить = (НомерЗвонка = стрКомандаНеБеспокоить);
	КонецЕсли;
	
	Если Состояние = "ЗвонокОтклонён" Тогда
		
		Элементы.ГруппаБИТфонПанели.Доступность = Истина;
		
		стрОшибкаИзмененияСтатусаНеБеспокоить = "Не удалось изменить статус 'Не беспокоить'";
		
		Если УстНеБеспокоить Тогда
			стрОшибкаИзмененияСтатусаНеБеспокоить = "Не удалось установить статус 'Не беспокоить' на АТС";
		Иначе
			стрОшибкаИзмененияСтатусаНеБеспокоить = "Не удалось отменить статус 'Не беспокоить' на АТС";
		КонецЕсли;
		
		бит_ТелефонияКлиент.ВывестиСообщение("Ошибка изменения статуса: " + стрОшибкаИзмененияСтатусаНеБеспокоить);
		
	ИначеЕсли Состояние = "ЗвонокПрерван" Тогда
		
		Элементы.ГруппаБИТфонПанели.Доступность = Истина;
		
		СтатусНеБеспокоить = УстНеБеспокоить;
		
		бит_БитфонСервер.УстановитьФлагРежимНеБеспокоить(СтатусНеБеспокоить);
		
	КонецЕсли;
	
	ОбновитьСтатусыПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСостоянияКаналаУсловнойПереадресации(Состояние, стрНомерДляИстории,
														контактВходящий, контактноеЛицо, длительностьЗвонкаСек)
	Элементы.ГруппаБИТфонПанели.Доступность = Истина;
	Если Состояние = "ЗвонокУспешен" Тогда
		условныйПереводУспешен = Истина;
		основнойКаналВходящий = СофтФон.IsIncomingCall(основнойКанал);
		//
		основнойКаналИдетРазговор = СофтФон.IsInCall(основнойКанал);
		Если основнойКаналВходящий И НЕ основнойКаналИдетРазговор Тогда
			ПринятьВходящийВызовНаКанале(основнойКанал);
		КонецЕсли;
		//
		Если ОсновнойКаналВходящий Тогда
			создаватьСобытие = бит_БитфонСервер.ПолучитьФлагСоздаватьСобытиеВходящийЗвонок();
			Если создаватьСобытие Тогда
				стрИмяФайлаЗаписи = СофтФон.GetRecordFilename(основнойКанал);
				ОсновнойКаналНомерЗвонка	= СофтФон.GetChannelName(основнойКанал);
				ОсновнойКаналКонтактВходящий	= Неопределено;
				ОсновнойКаналКонтактноеЛицо		= Неопределено;
				ПолучитьКонтрагентаИзКэша(ОсновнойКаналНомерЗвонка, ОсновнойКаналКонтактВходящий, ОсновнойКаналКонтактноеЛицо);
				ссылкаСобытие = бит_БитфонСервер.СоздатьСобытие(Истина, ОсновнойКаналКонтактВходящий,
					ОсновнойКаналНомерЗвонка, ОсновнойКаналКонтактноеЛицо, стрИмяФайлаЗаписи);
				бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуДокументаСобытие(ссылкаСобытие);
			КонецЕсли;
		Иначе
			стрИмяФайлаЗаписи = "";
			записьОбязательна = бит_БитфонСервер.ПолучитьФлагВсегдаЗаписыватьРазговор();
			Если записьОбязательна Тогда
				стрИмяФайлаЗаписи = НачатьЗапись(каналУсловнойПереадресации);
			КонецЕсли;
			//
			создаватьСобытие = бит_БитфонСервер.ПолучитьФлагСоздаватьСобытиеИсходящийЗвонок();
			Если создаватьСобытие Тогда
				// Боевкин
				
				//Если ЭтаФорма.ВладелецФормы <> Неопределено И ЭтаФорма.ВладелецФормы.ИмяФормы <> "Справочник.ДолговыеОбязательства.Форма.ФормаЭлемента" И ЭтаФорма.ВладелецФормы.ИмяФормы <> "Справочник.Контрагенты.Форма.ФормаЭлемента" Тогда
				Если ЭтаФорма.ФормаМероприятие <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
					бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуМероприятия(ФормаМероприятие, стрИмяФайлаЗаписи);
				Иначе
					ссылкаСобытие = бит_БитфонСервер.СоздатьСобытие(Ложь, контактВходящий,
					стрНомерДляИстории, контактноеЛицо, стрИмяФайлаЗаписи);
					бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуДокументаСобытие(ссылкаСобытие);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Состояние = "ЗвонокПрерван" Тогда
		Если ЗначениеЗаполнено(НомерУсловнойПереадресацииИсх) Тогда
			стрИмяФайлаЗаписи = СофтФон.GetRecordFilename(каналУсловнойПереадресации);
			ДобавитьВИсториюИсходящие(стрНомерДляИстории, контактВходящий, контактноеЛицо, длительностьЗвонкаСек, стрИмяФайлаЗаписи);
		КонецЕсли;
		НомерУсловнойПереадресацииИсх = "";
		каналУсловнойПереадресации = -1;
		УсловнаяПереадресация = Ложь;
		ЗавершитьРазговор(основнойКанал);
		ВосстановитьЗвукИМикрофонПослеУсловногоПеревода();
	ИначеЕсли Состояние = "ЗвонокОтклонён" Тогда
		бит_ТелефонияКлиент.ВывестиСообщение("Условный перевод выполнить не удалось");
		Если ЗначениеЗаполнено(НомерУсловнойПереадресацииИсх) Тогда
			ДобавитьВИсториюИсходящие(стрНомерДляИстории, контактВходящий, контактноеЛицо, длительностьЗвонкаСек, "");
		КонецЕсли;
		НомерУсловнойПереадресацииИсх = "";
		каналУсловнойПереадресации = -1;
		УсловнаяПереадресация = Ложь;
		ЗавершитьРазговор(основнойКанал);
		ВосстановитьЗвукИМикрофонПослеУсловногоПеревода();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСостоянияОбычногоКанала(Канал, Состояние, ВходящийВызов, НомерЗвонка, стрНомерДляИстории,
										контактВходящий, контактноеЛицо, длительностьЗвонкаСек, НабранныйНомер)
	Если Состояние = "ЗвонокУспешен" Тогда			//Обработчик установки связи
		Если ВходящийВызов Тогда				//Обработка входящего звонка
			Если ИспользуетсяСтационарныйТелефон Тогда
				Если НЕ УсловнаяПереадресация Тогда
					НачатьПереводНаСтационарныйТелефон(Канал, НомерЗвонка);
				КонецЕсли;
			Иначе
				ПроверитьДоступностьМикрофонаИДинамиков();
			КонецЕсли;
		Иначе									//Обработка исходящего звонка
			стрИмяФайлаЗаписи = "";
			записьОбязательна = бит_БитфонСервер.ПолучитьФлагВсегдаЗаписыватьРазговор();
			Если записьОбязательна И НЕ ИдетВоспроизведение И НЕ ИспользуетсяСтационарныйТелефон Тогда
				стрИмяФайлаЗаписи = НачатьЗапись(Канал);
			КонецЕсли;
			//
			создаватьСобытие = бит_БитфонСервер.ПолучитьФлагСоздаватьСобытиеИсходящийЗвонок();
			Если создаватьСобытие И НЕ ИдетВоспроизведение И НЕ ИспользуетсяСтационарныйТелефон Тогда
				// Боевкин
				
				//Если ЭтаФорма.ВладелецФормы <> Неопределено И ЭтаФорма.ВладелецФормы.ИмяФормы <> "Справочник.ДолговыеОбязательства.Форма.ФормаЭлемента" И ЭтаФорма.ВладелецФормы.ИмяФормы <> "Справочник.Контрагенты.Форма.ФормаЭлемента" Тогда
				Если ЭтаФорма.ФормаМероприятие <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
					бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуМероприятия(ЭтаФорма.ФормаМероприятие, стрИмяФайлаЗаписи);
				Иначе
					ссылкаСобытие = бит_БитфонСервер.СоздатьСобытие(Ложь, контактВходящий,
					стрНомерДляИстории, контактноеЛицо, стрИмяФайлаЗаписи);
					бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуДокументаСобытие(ссылкаСобытие);
				КонецЕсли;
			КонецЕсли;
			//
			Если ИспользуетсяСтационарныйТелефон Тогда
				Если ИдетВоспроизведение Тогда
					СофтФон.PlayStart(Канал, Истина);
				Иначе
					СофтФон.AddToConference(Канал);
					НачатьУсловныйПеревод(НомерУсловнойПереадресацииИсх, "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Состояние = "ЗвонокПрерван" Тогда 	//Обработчик завершения разговора
		
		стрИмяФайлаЗаписи = СофтФон.GetRecordFilename(Канал);
		Если ВходящийВызов Тогда
			Если УсловнаяПереадресация Тогда
				ДобавитьВИсториюВходящие(стрНомерДляИстории, контактВходящий, контактноеЛицо,
					условныйПереводУспешен, длительностьЗвонкаСек, НабранныйНомер, стрИмяФайлаЗаписи);
			Иначе
				ДобавитьВИсториюВходящие(стрНомерДляИстории, контактВходящий, контактноеЛицо,
					(длительностьЗвонкаСек > 0), длительностьЗвонкаСек, НабранныйНомер, стрИмяФайлаЗаписи);
			КонецЕсли;
		Иначе
			Если НЕ ИспользуетсяСтационарныйТелефон Тогда
				ДобавитьВИсториюИсходящие(стрНомерДляИстории, контактВходящий, контактноеЛицо, длительностьЗвонкаСек, стрИмяФайлаЗаписи);
			КонецЕсли;
		КонецЕсли;
		Сигнал();
		// ПоказатьОповещениеПользователя("БИТ.Phone",,"Разговор завершен",БиблиотекаКартинок.NC_Подсистема_бтБИТАТС);
		
	ИначеЕсли Состояние = "ЗвонокОтклонён" Тогда 	//На удаленной стороне сбросили вызов не поднимая трубку.
		
		Если ВходящийВызов Тогда
			ЗавершенВДругомМесте = СофтФон.IsCompletedElsewhere(Канал);
			Если НЕ ЗавершенВДругомМесте Тогда
				ДобавитьВИсториюВходящие(стрНомерДляИстории, контактВходящий, контактноеЛицо, Ложь,
					длительностьЗвонкаСек, НабранныйНомер, "");
			КонецЕсли;
		Иначе
			Если НЕ ИдетВоспроизведение Тогда
				Если ИспользуетсяСтационарныйТелефон Тогда
					Если каналУсловнойПереадресации = -1 И ЗначениеЗаполнено(НомерУсловнойПереадресацииИсх) Тогда
						// Проверка, что вызов был сброшен нами еще до поднятия трубки стационарного телефона,
						// и соответственно до начала условного перевода.
						ДобавитьВИсториюИсходящие(НомерУсловнойПереадресацииИсх, НомерУсловнойПереадресацииИсх, Неопределено, длительностьЗвонкаСек, "");
					КонецЕсли;
				Иначе
					ДобавитьВИсториюИсходящие(стрНомерДляИстории, контактВходящий, контактноеЛицо, длительностьЗвонкаСек, "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Сигнал();
		// ПоказатьОповещениеПользователя("БИТ.Phone",,"Не удалось дозвониться",БиблиотекаКартинок.NC_Подсистема_бтБИТАТС);		
		Если каналУсловнойПереадресации <> -1 Тогда
			ЗавершитьУсловныйПеревод();
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСобытияОбновлениеЗвонка(Данные)
	параметрыЗвонка = бит_ТелефонияКлиентСервер.СтрРазбить(Данные, "#");
	Канал			= Число(параметрыЗвонка[0].Значение);
	СтарыйНомер		= параметрыЗвонка[1].Значение;
	НовыйНомер		= СофтФон.GetChannelName(Канал);
	ВходящийВызов	= СофтФон.IsIncomingCall(Канал);
	//
	УдалитьКонтрагентаИзКэша(СтарыйНомер);
	//
	контактВходящий		= Неопределено;
	контактноеЛицо = Неопределено;
	номер_найден = НайтиКонтрагентаПоНомеру(НовыйНомер, контактВходящий, контактноеЛицо);
	Если НЕ номер_найден Тогда 
		контактВходящий = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(НовыйНомер);
	КонецЕсли;
	ДобавитьКонтрагентаВКэш(НовыйНомер, контактВходящий, контактноеЛицо);
	//
	ОбновитьЗаголовокПанели(Канал);
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	Если каналАктивнойЛинии = Канал Тогда
		ОбновитьПанель(Канал);
	КонецЕсли;
	//
	создаватьСобытие = бит_БитфонСервер.ПолучитьФлагСоздаватьСобытиеВходящийЗвонок();
	Если создаватьСобытие Тогда
		стрИмяФайлаЗаписи = СофтФон.GetRecordFilename(Канал);
		ссылкаСобытие = бит_БитфонСервер.СоздатьСобытие(ВходящийВызов, контактВходящий,
			НовыйНомер, контактноеЛицо, стрИмяФайлаЗаписи);
		бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуДокументаСобытие(ссылкаСобытие);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСобытияСостояниеПодписки(Данные)
	Ид = Число(Данные);
	ОбновитьСтатусАбонентаSIP(Ид);
КонецПроцедуры

//-----------------------------------------------------------------------------
// Работа с историей звонков
&НаСервере
Процедура ДобавитьВИсториюВходящие(НомерВходящий, Абонент, КонтактноеЛицо, Успешность, Длительность, НабранныйНомер, ЗаписьРазговора)
	бит_ТелефонияСервер.ДобавитьВИсториюЗвонков(СвойНомер, Истина, НомерВходящий, Абонент, КонтактноеЛицо,
		Успешность, Длительность, НабранныйНомер, ЗаписьРазговора);
	ЗаполнитьИсторию();
КонецПроцедуры

&НаСервере
Процедура ДобавитьВИсториюИсходящие(НомерИсходящий, Абонент, КонтактноеЛицо, Длительность, ЗаписьРазговора)
	бит_ТелефонияСервер.ДобавитьВИсториюЗвонков(СвойНомер, Ложь, НомерИсходящий, Абонент, КонтактноеЛицо,
		Истина, Длительность, "", ЗаписьРазговора);
	ЗаполнитьИсторию();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсторию()
	глубинаИстории = бит_БитфонСервер.ПолучитьГлубинуИсторииЗвонков();
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ " + Строка(глубинаИстории) + "
	|	бит_ИсторияЗвонков.Номер,
	|	бит_ИсторияЗвонков.Абонент,
	|	бит_ИсторияЗвонков.КонтактноеЛицо,
	|	бит_ИсторияЗвонков.Дата КАК Дата,
	|	бит_ИсторияЗвонков.ТипЗвонка,
	|	бит_ИсторияЗвонков.Успешность,
	|	бит_ИсторияЗвонков.ДлительностьЗвонка,
	|	бит_ИсторияЗвонков.ЗаписьРазговора
	|ИЗ
	|	РегистрСведений.бит_ИсторияЗвонков КАК бит_ИсторияЗвонков
	|ГДЕ
	|	бит_ИсторияЗвонков.ТипЗвонка = ЗНАЧЕНИЕ(Перечисление.бит_ТипЗвонка.Исходящий)
	|	И бит_ИсторияЗвонков.Пользователь = &Пользователь
	|	И бит_ИсторияЗвонков.СвойНомер = &СвойНомер
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ " + Строка(глубинаИстории) + "
	|	бит_ИсторияЗвонков.Номер,
	|	бит_ИсторияЗвонков.Абонент,
	|	бит_ИсторияЗвонков.КонтактноеЛицо,
	|	бит_ИсторияЗвонков.Дата КАК Дата,
	|	бит_ИсторияЗвонков.ТипЗвонка,
	|	бит_ИсторияЗвонков.Успешность,
	|	бит_ИсторияЗвонков.ДлительностьЗвонка,
	|	бит_ИсторияЗвонков.ЗаписьРазговора
	|ИЗ
	|	РегистрСведений.бит_ИсторияЗвонков КАК бит_ИсторияЗвонков
	|ГДЕ
	|	бит_ИсторияЗвонков.ТипЗвонка = ЗНАЧЕНИЕ(Перечисление.бит_ТипЗвонка.Входящий)
	|	И бит_ИсторияЗвонков.Пользователь = &Пользователь
	|	И бит_ИсторияЗвонков.СвойНомер = &СвойНомер
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";

	Запрос.УстановитьПараметр("Пользователь", бит_ТелефонияСервер.ПолучитьТекущегоПользователя());
	Запрос.УстановитьПараметр("СвойНомер", СвойНомер);
	Результат = Запрос.ВыполнитьПакет();
	
	ИсходящиеЗвонки = Результат.Получить(0).Выгрузить();
	ВходящиеЗвонки = Результат.Получить(1).Выгрузить();
	
	Объект.ИсторияЗвонковИсходящие.Очистить();
	Для каждого исход Из ИсходящиеЗвонки Цикл
		строкаИсход = Объект.ИсторияЗвонковИсходящие.Добавить();
		ЗаполнитьЗначенияСвойств(строкаИсход, исход);
		строкаИсход.ДлительностьЗвонка = ФорматироватьДлительностьЗвонка(исход.ДлительностьЗвонка);
	КонецЦикла;
	
	Объект.ИсторияЗвонковВходящие.Очистить();
	Для каждого вход Из ВходящиеЗвонки Цикл
		строкаВход = Объект.ИсторияЗвонковВходящие.Добавить();
		ЗаполнитьЗначенияСвойств(строкаВход, вход);
		строкаВход.ДлительностьЗвонка = ФорматироватьДлительностьЗвонка(вход.ДлительностьЗвонка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверкаЕстьИсторияЗвонковСтарыхРелизов()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_ИсторияЗвонков.Дата
	               |ИЗ
	               |	РегистрСведений.бит_ИсторияЗвонков КАК бит_ИсторияЗвонков
	               |ГДЕ
	               |	бит_ИсторияЗвонков.Пользователь = &Пользователь
	               |	И бит_ИсторияЗвонков.СвойНомер = """"";
	Запрос.УстановитьПараметр("Пользователь", бит_ТелефонияСервер.ПолучитьТекущегоПользователя());
	Возврат НЕ (Запрос.Выполнить().Пустой());
КонецФункции

&НаСервере
Процедура ПереносИсторииЗвонковСтарыхРелизов()
	Если ЗначениеЗаполнено(СвойНомер) Тогда
		наборЗаписей = РегистрыСведений.бит_ИсторияЗвонков.СоздатьНаборЗаписей();
		наборЗаписей.Отбор.Пользователь.Установить(бит_ТелефонияСервер.ПолучитьТекущегоПользователя());
		наборЗаписей.Прочитать();
		Для Каждого записьИстории Из наборЗаписей Цикл
			Если ПустаяСтрока(записьИстории.СвойНомер) Тогда
				записьИстории.СвойНомер = СвойНомер;
			КонецЕсли;
		КонецЦикла;
		наборЗаписей.Записать();
	КонецЕсли;
КонецПроцедуры

//-----------------------------------------------------------------------------
// Работа с кэшем контрагентов
&НаКлиенте
Процедура ДобавитьКонтрагентаВКэш(НомерКлюч, КонтрагентСсылка, КонтактноеЛицоСсылка)
	НайденныйКонтакт = Новый Структура;
	НайденныйКонтакт.Вставить("КонтрагентСсылка", КонтрагентСсылка);
	НайденныйКонтакт.Вставить("КонтрагентНаименование", Строка(КонтрагентСсылка));
	НайденныйКонтакт.Вставить("КонтактноеЛицоСсылка", КонтактноеЛицоСсылка);
	кэшКонтактов.Вставить(НомерКлюч, НайденныйКонтакт);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКонтрагентаИзКэша(НомерКлюч, КонтрагентСсылка, КонтактноеЛицоСсылка)
	СтруктураКонтакт = кэшКонтактов.Получить(НомерКлюч);
	Если СтруктураКонтакт <> Неопределено Тогда
		КонтрагентСсылка = СтруктураКонтакт.КонтрагентСсылка;
		КонтактноеЛицоСсылка = СтруктураКонтакт.КонтактноеЛицоСсылка;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКонтрагентаИзКэша(НомерКлюч)
	кэшКонтактов.Удалить(НомерКлюч);
КонецПроцедуры

//-----------------------------------------------------------------------------
// Управление подключением
&НаКлиенте
Процедура Подключение()
	
	ОбновитьСвойНомерИЗаголовокФормы();
	
	ЗаполнитьИсторию();
	
	Если СофтФон <> Неопределено Тогда
		// обработка ситуации, когда объект был создан, но подключиться не удалось
		СофтФон = Неопределено;
	КонецЕсли;
	бит_БИТфонКлиент.ПодключитьСофтфон("БитФон_СофтфонПодключен");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьСофтФон()
	ОтключениеСтатусов();
	СофтФон = Неопределено;
	СтатусПодключен = Ложь;
	СтатусНеБеспокоить = Ложь;
	ОбновитьСтатусыПодключения();
	ОбновитьВсеПанели();
	Для й=0 По 3 Цикл
		УстановитьНомерЛинии(й+1, "");
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПодключениеСтатусов()
	получениеСтатусов = бит_БитфонСервер.ПолучитьФлагПолучениеСтатусовАбонентов();
	Если получениеСтатусов И (СофтФон <> Неопределено) Тогда
		МассивНомеровПолученияСтатуса = Новый Массив;
		ПолучитьСписокНомеровПроверкиСтатусаСервер(МассивНомеровПолученияСтатуса);
		Для Каждого номерПолучСтатуса Из МассивНомеровПолученияСтатуса Цикл
			Идент = СофтФон.BuddyAdd(номерПолучСтатуса);
			МассивИдентификаторовПолученияСтатуса.Добавить(Идент);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтключениеСтатусов()
	Если СофтФон <> Неопределено Тогда
		Для Каждого идентПолучСтатуса Из МассивИдентификаторовПолученияСтатуса Цикл
			СофтФон.BuddyDel(идентПолучСтатуса);
		КонецЦикла;
	КонецЕсли;
	//
	МассивИдентификаторовПолученияСтатуса.Очистить();
КонецПроцедуры

//-----------------------------------------------------------------------------
// Управление разговором
// - начало разговора
&НаКлиенте
Процедура НачатьРазговорНаКанале(НомерКанала, ВызываемыйНомер)
	КомандаИзменениеСтатуса = ПроверитьКомандуИзмененияСтатусаНеБеспокоить(ВызываемыйНомер);
	Если НЕ КомандаИзменениеСтатуса Тогда
		Если ИспользуетсяСтационарныйТелефон Тогда
			НомерУсловнойПереадресацииИсх = ВызываемыйНомер;
			ВызываемыйНомер = бит_БитфонСервер.ПолучитьСтационарныйТелефон();
			Если ЗначениеЗаполнено(ВызываемыйНомер) Тогда
				основнойКанал = НомерКанала;
			Иначе
				бит_ТелефонияКлиент.ВывестиСообщение("Ошибка перевода исходящего звонка - не задан номер стационарного телефона");
				Возврат;
			КонецЕсли;
		Иначе
			// проверка микрофона и динамиков
			Если НЕ ПроверитьДоступностьМикрофонаИДинамиков() Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	НачатьИсходящийВызовНаКанале(НомерКанала, ВызываемыйНомер);
КонецПроцедуры

&НаКлиенте
Функция НачатьИсходящийВызовНаКанале(НомерКанала, ВызываемыйНомер)
	Возврат НачатьИсходящийВызовНаКаналеСAssertedID(НомерКанала, ВызываемыйНомер, "");
КонецФункции

&НаКлиенте
Функция НачатьИсходящийВызовНаКаналеСAssertedID(НомерКанала, ВызываемыйНомер, стрНомерAssertedID)
	Если НЕ СтатусПодключен ИЛИ СофтФон = Неопределено Тогда
		бит_ТелефонияКлиентПереопределяемый.ПоказПредупреждение("БИТ.Phone не подключен к АТС", , "Ошибка начала разговора");
		Возврат Ложь;
	КонецЕсли;
	//
	Если СофтФон.IsChannelActive(НомерКанала) Тогда
		бит_ТелефонияКлиентПереопределяемый.ПоказПредупреждение("На канале уже идет разговор", , "Ошибка начала разговора");
		Возврат Ложь;
	КонецЕсли;
	//
	Номер = бит_БИТфонКлиент.СформироватьНомерСПрефиксами(ВызываемыйНомер);
	//
	УстановитьНомерЛинии(НомерКанала+1, Номер);
	началоВызоваУспешно = Ложь;
	Если ЗначениеЗаполнено(Номер) Тогда
		// данные нужны при создании события исходящего звонка
		вызывКонтрагент = Неопределено;
		вызывКонтактноеЛицо = Неопределено;
		контрагент_найден = НайтиКонтрагентаПоНомеру(Номер, вызывКонтрагент, вызывКонтактноеЛицо);
		Если НЕ контрагент_найден Тогда
			вызывКонтрагент = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(Номер);
		КонецЕсли;
		ДобавитьКонтрагентаВКэш(Номер, вызывКонтрагент, вызывКонтактноеЛицо);
		
		Если ЗначениеЗаполнено(стрНомерAssertedID) Тогда
			началоВызоваУспешно = СофтФон.CallWithAssertedID(НомерКанала, Номер, стрНомерAssertedID);
		Иначе
			началоВызоваУспешно = СофтФон.Call(НомерКанала, Номер);
		КонецЕсли;
	Иначе
		ПоказатьОповещениеПользователя("Не задан номер");
	КонецЕсли;
	ОбновитьПанель(НомерКанала);
	//
	Возврат началоВызоваУспешно;
КонецФункции

&НаКлиенте
Процедура НачатьУсловныйПеревод(стрНомерУсловногоПеревода, стрНомерAssertedID)
	// начать исходящий вызов на другом канале
	каналУсловнойПереадресации = -1;
	Если НЕ НайтиСвободнуюЛинию(каналУсловнойПереадресации) Тогда
		бит_ТелефонияКлиент.ВывестиСообщение("Не найден свободный канал");
	Иначе
		условныйПереводУспешен = Ложь;
		УсловнаяПереадресация = НачатьИсходящийВызовНаКаналеСAssertedID(каналУсловнойПереадресации, стрНомерУсловногоПеревода, стрНомерAssertedID);
		Если УсловнаяПереадресация Тогда
			СофтФон.AddToConference(каналУсловнойПереадресации);
			ТекущийЭлемент = Элементы.ГруппаПанельОсновная;
			Если СофтФон.IsIncomingCall(основнойКанал) Тогда
				Элементы.ГруппаЛинии.ТекущаяСтраница = Элементы["ГруппаЛиния" + Строка(основнойКанал+1)];
				ОбновитьПанель(основнойКанал);
			КонецЕсли;
			Элементы.ГруппаБИТфонПанели.Доступность = Ложь;
			ОтключитьМикрофон();
			ОтключитьГромкость();
		Иначе
			бит_ТелефонияКлиент.ВывестиСообщение("Ошибка условной переадресации");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачатьПереводНаСтационарныйТелефон(Канал, НомерAssertedID)
	стационарныйНомер = бит_БитфонСервер.ПолучитьСтационарныйТелефон();
	Если ЗначениеЗаполнено(стационарныйНомер) Тогда
		СофтФон.AddToConference(Канал);
		основнойКанал = Канал;
		НачатьУсловныйПеревод(стационарныйНомер, НомерAssertedID);
	Иначе
		бит_ТелефонияКлиент.ВывестиСообщение("Ошибка перевода входящего звонка - не задан номер стационарного телефона");
	КонецЕсли;
КонецПроцедуры

// - прием/отклонение входящего звонка
&НаКлиенте
Процедура ПринятьВходящийВызовНаКанале(НомерКанала)
	Если СофтФон = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	входящийВызов = СофтФон.IsIncomingCall(НомерКанала);
	Если входящийВызов Тогда
		входящийВызовПринят = СофтФон.acceptCall(НомерКанала);
		Если НЕ входящийВызовПринят Тогда
			Возврат;	// вызов может быть не принят, если во время обработки входящего звонка АТС уже прислало CANCEL событие завершения разговора
		КонецЕсли;
	КонецЕсли;
	//
	стрИмяФайлаЗаписи = "";
	записьОбязательна = бит_БитфонСервер.ПолучитьФлагВсегдаЗаписыватьРазговор();
	Если записьОбязательна = Истина Тогда
		стрИмяФайлаЗаписи = НачатьЗапись(НомерКанала);
	КонецЕсли;
	//
	создаватьСобытие = бит_БитфонСервер.ПолучитьФлагСоздаватьСобытиеВходящийЗвонок();
	Если создаватьСобытие И НЕ ИспользуетсяСтационарныйТелефон Тогда
		НомерВходящий = СофтФон.GetChannelName(НомерКанала);
		КонтактВходящий	= Неопределено;
		КонтактноеЛицо		= Неопределено;
		ПолучитьКонтрагентаИзКэша(НомерВходящий, КонтактВходящий, КонтактноеЛицо);
		ссылкаСобытие = бит_БитфонСервер.СоздатьСобытие(Истина, контактВходящий,
			НомерВходящий, контактноеЛицо, стрИмяФайлаЗаписи);
		бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуДокументаСобытие(ссылкаСобытие);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьВходящийВызовНаКанале(НомерКанала)
	Если СофтФон <> Неопределено Тогда
		входящийВызов = СофтФон.IsIncomingCall(НомерКанала);
		Если входящийВызов Тогда
			СофтФон.declineCall(НомерКанала);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВходящийВызовВМодальномДиалоге(стрЗаголовок, НомерВходящий, контрагентНайден, контрагентСсылка, контактноеЛицоСсылка, набранныйНомер, НомерКанала);
	фрмОбработкаВызова = ПолучитьФорму("Обработка.бит_Битфон.Форма.ОбработкаВызова");
	фрмОбработкаВызова.Заголовок		= стрЗаголовок;
	фрмОбработкаВызова.КонтрагентНайден	= контрагентНайден;
	фрмОбработкаВызова.Абонент			= контрагентСсылка;
	фрмОбработкаВызова.КонтактноеЛицо	= контактноеЛицоСсылка;
	фрмОбработкаВызова.НабранныйНомер	= набранныйНомер;
	параметрыОповещ = Новый Структура;
	параметрыОповещ.Вставить("НомерКанала", НомерКанала);
	параметрыОповещ.Вставить("НомерВходящий", НомерВходящий);
	параметрыОповещ.Вставить("НомерНеОпределен", НЕ контрагентНайден);
	бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуСБлокировкойВладельца(фрмОбработкаВызова, "БитФон_ОбработкаВходящегоЗвонка", параметрыОповещ);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОбработкиНеизвестногоНомера(НомерНеОпределен, НомерВходящий)
	Если НомерНеОпределен Тогда
		НеизвестныйНомер = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(НомерВходящий);
		обработкаНеизвНомераПарам = Новый Структура("НеизвестныйНомер", НеизвестныйНомер);
		фрмОбработкаНеизвНомера = ПолучитьФорму("Обработка.бит_Битфон.Форма.ОбработкаНомерНеопределен", обработкаНеизвНомераПарам);
		фрмОбработкаНеизвНомера.Открыть();
	КонецЕсли;
КонецПроцедуры

// - завершение разговора
&НаКлиенте
Процедура ЗавершитьРазговор(НомерКанала)
	Если СтатусПодключен = Истина Тогда
		ОстановитьЗапись(НомерКанала);
		СофтФон.Hangup(НомерКанала);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВсеРазговоры()
	Если СофтФон <> Неопределено Тогда
		Для й=0 По 3 Цикл
			Если СофтФон.IsChannelActive(й) Тогда
				ОстановитьЗапись(й);
				СофтФон.Hangup(й);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьУсловныйПеревод()
	Если УсловнаяПереадресация Тогда
		СофтФон.Hangup(каналУсловнойПереадресации);
		УсловнаяПереадресация = Ложь;
	КонецЕсли;
КонецПроцедуры

// - переадресация, удержание

// Общая функция, при использовании стационарного телефона возвращает номер основного
// канала - при входящем звонке, иначе номер канала условной переадресации.
// Если стационарный телефон не используется, то функция ничего не делает.
// Смысл функции - при использовании стационарного телефона нужно выдавать команды именно абоненту, а не стационарному.
&НаКлиенте
Функция ПолучитьНомерКаналаСУчетомСтационарного(НомерКанала)
	номКан = НомерКанала;
	Если ИспользуетсяСтационарныйТелефон Тогда
		ВходящийВызов = СофтФон.IsIncomingCall(основнойКанал);
		Если ВходящийВызов Тогда
			номКан = основнойКанал;
		Иначе
			Если каналУсловнойПереадресации <> -1 Тогда
				номКан = каналУсловнойПереадресации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат номКан;
КонецФункции

&НаКлиенте
Процедура БезусловныйПеревод(ЗНАЧ НомерКанала, ЗНАЧ стрНомерБезусловногоПеревода)
	стрНомерБезусловногоПеревода = бит_БИТфонКлиент.СформироватьНомерСПрефиксами(стрНомерБезусловногоПеревода);
	Если НЕ ЗначениеЗаполнено(стрНомерБезусловногоПеревода) Тогда
		Возврат;
	КонецЕсли;
	Если стрНомерБезусловногоПеревода = СвойНомер Тогда
		бит_ТелефонияКлиент.ВывестиСообщение("Безусловный перевод - невозможно перевести на собственный номер");
		Возврат;
	КонецЕсли;
	НомерКанала = ПолучитьНомерКаналаСУчетомСтационарного(НомерКанала);
	СофтФон.HoldAndRedirect(НомерКанала, стрНомерБезусловногоПеревода);
КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьКаналы(НомерКанала1, НомерКанала2)
	СофтФон.JoinChannels(НомерКанала1, НомерКанала2);
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиЗвонокНаКанале(Канал, стрНомерПеревода) Экспорт
	типПеревода = бит_БитфонСервер.ПолучитьТипПереводаЗвонка();
	Если типПеревода = ПредопределенноеЗначение("Перечисление.бит_ТипПереводаЗвонка.Условный") Тогда
		Если НЕ НабратьКомандуПереадресацииНаКанале(Канал) Тогда
			Возврат;
		КонецЕсли;
		УстановитьНомерЛинии(Канал+1, "");
		ДТМФВызовНаКанале(Канал, стрНомерПеревода);
		ДлинаНомераПеревода = СтрДлина(стрНомерПеревода);
		бит_ТелефонияКлиентПереопределяемый.ПоказПредупреждение("БИТ.Phone", ДлинаНомераПеревода, "Перевод звонка на " + стрНомерПеревода + "...");
	Иначе
		БезусловныйПеревод(Канал, стрНомерПеревода);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция НабратьКомандуПереадресацииНаКанале(Канал)
	стрКомПереадрес = бит_БитфонСервер.ПолучитьКомандуПереадресации();
	Если НЕ ЗначениеЗаполнено(стрКомПереадрес) Тогда
		бит_ТелефонияКлиент.ВывестиСообщение("Не задано значение DTMF-команды переадресации в настройках");
		Возврат Ложь;
	КонецЕсли;
	ДТМФВызовНаКанале(Канал, стрКомПереадрес);
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура УдержатьВызов(НомерКанала, УдержатьВызов)
	Если УдержатьВызов Тогда
		СофтФон.HoldOn(НомерКанала);
	Иначе
		СофтФон.HoldOff(НомерКанала);
	КонецЕсли;
КонецПроцедуры

// - запись
&НаКлиенте
Функция НачатьЗапись(НомерКанала)
	стрИмяФайла = "";
	Если СофтФон <> Неопределено Тогда
		Если НЕ СофтФон.IsRecording(НомерКанала) Тогда
			стрИмяФайла = бит_БИТфонКлиент.ПолучитьИмяФайлаДляЗаписи();
			Если ЗначениеЗаполнено(стрИмяФайла) Тогда
				стрФорматФайлаЗаписи = Строка(бит_БитфонСервер.ПолучитьФорматЗаписи());
				СофтФон.RecordStart(НомерКанала, стрИмяФайла, стрФорматФайлаЗаписи);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат стрИмяФайла;
КонецФункции

&НаКлиенте
Процедура ОстановитьЗапись(НомерКанала)
	Если СофтФон <> Неопределено Тогда
		Если СофтФон.IsRecording(НомерКанала) Тогда
			СофтФон.RecordStop(НомерКанала);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// - DTMF
&НаКлиенте
Процедура ДТМФВызовНаАктивнойЛинии(Код)
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	ДТМФВызовНаКанале(каналАктивнойЛинии, Код);
КонецПроцедуры

&НаКлиенте
Процедура ДТМФВызовНаКанале(ЗНАЧ Канал, Код)
	Если СтатусПодключен = Истина Тогда
		//
		Канал = ПолучитьНомерКаналаСУчетомСтационарного(Канал);
		//
		стрНомерКаналаВызова = ПолучитьНомерЛинии(Канал+1);
		стрНомерКаналаВызова = стрНомерКаналаВызова + Код;
		УстановитьНомерЛинии(Канал+1, стрНомерКаналаВызова);
		//
		Если СофтФон.IsInCall(Канал) Тогда
			СофтФон.DialDTMF(Канал, Код);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//-----------------------------------------------------------------------------
// Управление микрофоном/динамиками
&НаКлиенте
Процедура УстановитьМикрофон(Микрофон)
	СофтФон.SetMicLevel(Микрофон); 
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьМикрофон()
	УстановитьМикрофон(0);
	МикрофонВключен = Ложь;
	Элементы.РегуляторМикрофон.Доступность = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВключитьМикрофон()
	УстановитьМикрофон(УровеньМикрофона);
	МикрофонВключен = Истина;
	Элементы.РегуляторМикрофон.Доступность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РегуляторМикрофонПриИзменении(Элемент)
	УровеньМикрофона=-1*(Микрофон-255);
	Если МикрофонВключен Тогда
		УстановитьМикрофон(УровеньМикрофона);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьГромкость(Громкость)
	СофтФон.SetSpeakerLevel(Громкость);
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьГромкость()
	УстановитьГромкость(0);
	ГромкостьВключена = Ложь;
	Элементы.РегуляторГромкость.Доступность = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВключитьГромкость()
	УстановитьГромкость(УровеньГромкости);
	ГромкостьВключена = Истина;
	Элементы.РегуляторГромкость.Доступность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РегуляторГромкостьПриИзменении(Элемент)
	УровеньГромкости=-1*(Громкость-255);
	Если ГромкостьВключена Тогда
		УстановитьГромкость(УровеньГромкости);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПроверитьДоступностьМикрофонаИДинамиков()
	Если СофтФон = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	//
	Если ИспользуетсяСтационарныйТелефон Тогда
		Возврат Истина;
	КонецЕсли;
	//
	микр_динам_дост = Истина;
	//
	Если НЕ (СофтФон.GetRecordDevicesCount() > 0) Тогда
		бит_ТелефонияКлиент.ВывестиСообщение("БИТ.Phone - Ошибка! Не найден микрофон.");
		микр_динам_дост = Ложь;
	КонецЕсли;
	//
	Если НЕ (СофтФон.GetPlaybackDevicesCount() > 0) Тогда
		бит_ТелефонияКлиент.ВывестиСообщение("БИТ.Phone - Ошибка! Не найдено устройство вывода звука.");
		микр_динам_дост = Ложь;
	КонецЕсли;
	//
	Возврат микр_динам_дост;
КонецФункции

&НаКлиенте
Процедура ВосстановитьЗвукИМикрофонПослеУсловногоПеревода()
	Если НЕ МикрофонОтключенВручную Тогда
		ВключитьМикрофон();
	КонецЕсли;
	Если НЕ ГромкостьОтключенаВручную Тогда
		ВключитьГромкость();
	КонецЕсли;
КонецПроцедуры

//-----------------------------------------------------------------------------
// Отправка SMS
&НаКлиенте
Процедура ОткрытьФормуОтправкиSMS(стрНомерПолучателя)
	ФормаСМС = ПолучитьФорму("Обработка.бит_Битфон.Форма.ОтправкаСМС");
	ФормаСМС.ВладелецФормы = ЭтаФорма;
	стрСМСЛогин = "";
	стрСМСПароль = "";
	бит_БитфонСервер.ПолучитьПараметрыОтправкиСМС(стрСМСЛогин, стрСМСПароль);
	ФормаСМС.СМСЛогин = стрСМСЛогин;
	ФормаСМС.СМСПароль = стрСМСПароль;
	стрОтправитель = бит_БитфонСервер.ПолучитьОтправителяСМСПоУмолчанию();
	Если ЗначениеЗаполнено(стрОтправитель) Тогда
		ФормаСМС.Элементы.Отправитель.СписокВыбора.Добавить(стрОтправитель);
		ФормаСМС.Отправитель = стрОтправитель;
	КонецЕсли;
	НомерПолучателяСМС = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(
							бит_ТелефонияКлиентСервер.ОчиститьНомерТолькоЦифры(стрНомерПолучателя)
							);
	Если ЗначениеЗаполнено(НомерПолучателяСМС) Тогда
		ФормаСМС.НомерПолучателя = НомерПолучателяСМС;
	КонецЕсли;
	ФормаСМС.Открыть();
КонецПроцедуры

//-----------------------------------------------------------------------------
// Взаимодействие с пользовательским интерфейсом
// - общие функции интерфейса.
&НаКлиенте
Функция ПолучитьКаналТекущейЛинии() Экспорт
	текущСтр = Элементы.ГруппаЛинии.ТекущаяСтраница;
	группаКанал = Число( Сред(текущСтр.Имя, 12) ) - 1;
	Возврат группаКанал;
КонецФункции

// Ищет свободный канал
// Возвращает признак успешности поиска.
&НаКлиенте

Функция НайтиСвободнуюЛинию(НомерСвободногоКанала)
	свободныйКаналНайден = Ложь;
	Если СофтФон <> Неопределено Тогда
		свобканал = СофтФон.GetFreeChannel();
		Если свобканал>=0 И свобканал<=3 Тогда
			НомерСвободногоКанала = свобканал;
			свободныйКаналНайден = Истина;
			Элементы.ГруппаЛинии.ТекущаяСтраница = Элементы.Найти("ГруппаЛиния"+Строка(НомерСвободногоКанала+1));
		КонецЕсли;
	КонецЕсли;
	Возврат свободныйКаналНайден;
КонецФункции

&НаКлиенте
Процедура ОбновитьСтатусыПодключения()
	Если СтатусПодключен = Истина Тогда
		Если СтатусНеБеспокоить = Истина Тогда
			Элементы.ГруппаБИТфонКоманды.Картинка = БиблиотекаКартинок.ОформлениеКругКрасный;
			Элементы.ГруппаБИТфонКоманды.Заголовок = "Не Беспокоить ";
			Элементы.кнПодключить.Доступность = Истина;
			Элементы.кнНеБеспокоить.Доступность = Ложь;
		Иначе
			Элементы.ГруппаБИТфонКоманды.Картинка = БиблиотекаКартинок.ОформлениеКругЗеленый;
			Элементы.ГруппаБИТфонКоманды.Заголовок = "Подключен ";
			Элементы.кнПодключить.Доступность = Ложь;
			Элементы.кнНеБеспокоить.Доступность = Истина;
		КонецЕсли;
		//
		Элементы.ГруппаБитфонОбщ.Доступность = Истина;
		Элементы.кнОтключить.Доступность = Истина;
		Элементы.кнПереподключить.Доступность = Истина;
	Иначе
		Элементы.ГруппаБИТфонКоманды.Картинка = БиблиотекаКартинок.ОформлениеКругЧерный;
		Элементы.ГруппаБИТфонКоманды.Заголовок = "Отключен";
		Элементы.ГруппаБитфонОбщ.Доступность = Ложь;
		//
		Элементы.кнПодключить.Доступность = Истина;
		Элементы.кнНеБеспокоить.Доступность = Истина;
		Элементы.кнОтключить.Доступность = Ложь;
		Элементы.кнПереподключить.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// - события формы
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СофтФон 			= Неопределено;
	ИдетРазговор 		= Ложь;
	ИдетЗапись			= Ложь;
	ИдетВоспроизведение	= Ложь;
	ВызовУдержан		= Ложь;
	УровеньГромкости 	= 255;
	УровеньМикрофона 	= 255;
	ГромкостьВключена 	= Истина;
	МикрофонВключен 	= Истина;
	фрмОбработкаВызова 	= Неопределено;
	основнойКанал		= 0;
	СтатусПодключен		= Ложь;
	СтатусНеБеспокоить	= Ложь;
	каналУсловнойПереадресации	= -1;
	НомерУсловнойПереадресацииИсх	= "";
	УсловнаяПереадресация		= Ложь;
	МикрофонОтключенВручную		= Ложь;
	ГромкостьОтключенаВручную	= Ложь;
	
	АсинхронноеИзменениеСтатусаНеБеспокоить	= Ложь;
	
	кэшКонтактов		= Новый Соответствие;
	МассивИдентификаторовПолученияСтатуса	= Новый Массив;
	
	ИнформацияЛиний = Новый Массив;
	Для й=0 По 3 Цикл
		инфЛиния = Новый Структура;
		инфЛиния.Вставить("НабранныйНомер", "");
		ИнформацияЛиний.Добавить(инфЛиния);
	КонецЦикла;
	
	//
	Если НЕ бит_БитфонСервер.ПроверитьНастройкиТекущегоПользователя() Тогда
		ПарамНастр = бит_БитфонСервер.ПолучитьПараметрыОткрытияФормыНастроек();
		фрмМастерНастроек = ПолучитьФорму("РегистрСведений.бит_БитфонНастройки.Форма.ФормаЗаписиСтартовая", ПарамНастр);
		Если НЕ фрмМастерНастроек.БольшеНеПоказывать Тогда
			бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуСБлокировкойВладельца(фрмМастерНастроек, "БитФон_ПриОткрытииЗавершение", , Истина);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если бит_ТелефонияСерверПереопределяемый.ПолучитьФлагБлокироватьВводНомераБитФон() Тогда
		Элементы.НомерЛиния1.Доступность = Ложь;
		Элементы.НомерЛиния2.Доступность = Ложь;
		Элементы.НомерЛиния3.Доступность = Ложь;
		Элементы.НомерЛиния4.Доступность = Ложь;
	КонецЕсли;	
		
	ПриОткрытииЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение()
	
	//
	// + помощник перехода со старых релизов +
	//
	// история звонков
	Если ПроверкаЕстьИсторияЗвонковСтарыхРелизов() Тогда
		// бит_ТелефонияКлиент.ВывестиСообщение("Выполняется обновление истории звонков, пожалуйста подождите...");
		ПереносИсторииЗвонковСтарыхРелизов();
		// бит_ТелефонияКлиент.ВывестиСообщение("Обновление истории звонков завершено.");
	КонецЕсли;
	//
	// заполнение профиля настроек значением по умолчанию
	бит_БитфонСервер.ПроверитьПрофильНастроек();
	//
	// - помощник перехода со старых релизов -
	//
	
	ИспользуетсяСтационарныйТелефон = бит_БитфонСервер.ПолучитьФлагИспользоватьСтационарныйТелефон();
	
	Подключение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОтключитьСофтФон()
КонецПроцедуры

// - командная панель
&НаКлиенте
Процедура кнПодключить(Команда) Экспорт
	Если СтатусПодключен Тогда
		ОтменитьСтатусНеБеспокоить();
	Иначе
		текущРежимНеБеспокоить = бит_БитфонСервер.ПолучитьФлагРежимНеБеспокоить();
		Если текущРежимНеБеспокоить Тогда
			АсинхронноеИзменениеСтатусаНеБеспокоить = Истина;
		КонецЕсли;
		Подключение();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнОтключить(Команда) Экспорт
	ОтключитьСофтФон();
КонецПроцедуры

&НаКлиенте
Процедура кнПереподключить(Команда) Экспорт
	кнОтключить(Команда);
	текущРежимНеБеспокоить = бит_БитфонСервер.ПолучитьФлагРежимНеБеспокоить();
	Если текущРежимНеБеспокоить Тогда
		кнНеБеспокоить(Команда);
	Иначе
		кнПодключить(Команда);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнНеБеспокоить(Команда) Экспорт
	Если СтатусПодключен Тогда
		УстановитьСтатусНеБеспокоить();
	Иначе
		текущРежимНеБеспокоить = бит_БитфонСервер.ПолучитьФлагРежимНеБеспокоить();
		Если НЕ текущРежимНеБеспокоить Тогда
			АсинхронноеИзменениеСтатусаНеБеспокоить = Истина;
		КонецЕсли;
		Подключение();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнНастройки(Команда)
	стрСписокУстройствВыводаЗвука = "";
	Если СофтФон <> Неопределено Тогда
		стрСписокУстройствВыводаЗвука = СофтФон.GetPlaybackDevicesList();
	КонецЕсли;
	//
	бит_БИТфонКлиент.ОткрытьФормуНастроек(стрСписокУстройствВыводаЗвука);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНастройки(СтарыеНастройки)
	собственныйНомерНов			= бит_БитфонСервер.ПолучитьСвойНомер();
	глубинаИсторииЗвонковНов	= бит_БитфонСервер.ПолучитьГлубинуИсторииЗвонков();
	уровеньЛоггированияНов		= бит_БитфонСервер.ПолучитьУровеньЛоггирования();
	получениеСтатусовНов		= бит_БитфонСервер.ПолучитьФлагПолучениеСтатусовАбонентов();
	режимНесколькихВходНов		= бит_БитфонСервер.ПолучитьФлагПриниматьНесколькоВходящих();
	разворачПриВхЗвонкеНов		= бит_БитфонСервер.ПолучитьФлагРазворачиватьОкноПриВходящемЗвонке();
	устройствоЗвукаВхЗвонкаНов	= бит_БитфонСервер.ПолучитьУстройствоВыводаЗвукаВходящегоЗвонка();
	//
	Если собственныйНомерНов <> СтарыеНастройки.СобственныйНомер Тогда
		ОбновитьСвойНомерИЗаголовокФормы();
		ЗаполнитьИсторию();
	КонецЕсли;
	Если глубинаИсторииЗвонковНов <> СтарыеНастройки.ГлубинаИсторииЗвонков Тогда
		ЗаполнитьИсторию();
	КонецЕсли;
	Если (уровеньЛоггированияНов <> СтарыеНастройки.УровеньЛоггирования) И (СофтФон <> Неопределено) Тогда
		СофтФон.SetLogLevel(уровеньЛоггированияНов, бит_БитфонСервер.ПолучитьПараметрыСоединения().Логин);
	КонецЕсли;
	Если получениеСтатусовНов <> СтарыеНастройки.ПолучениеСтатусов Тогда
		ИзбранноеОбновитьКлиент();
	КонецЕсли;
	Если режимНесколькихВходНов <> СтарыеНастройки.РежимНесколькихВход Тогда
		СофтФон.SetMultichannelMode(режимНесколькихВходНов);
	КонецЕсли;
	Если разворачПриВхЗвонкеНов <> СтарыеНастройки.РазворачПриВхЗвонке Тогда
		СофтФон.SetActivateOnIncomingCall(разворачПриВхЗвонкеНов);
	КонецЕсли;
	Если устройствоЗвукаВхЗвонкаНов <> СтарыеНастройки.УстройствоЗвукаВхЗвонка Тогда
		СофтФон.SetRingPlaybackDevice(устройствоЗвукаВхЗвонкаНов);
	КонецЕсли;
	ИспользуетсяСтационарныйТелефон = бит_БитфонСервер.ПолучитьФлагИспользоватьСтационарныйТелефон();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусНеБеспокоить()
	РежимНеБеспокоитьНаАТС = бит_БитфонСервер.ПолучитьФлагИспользоватьКомандуНеБеспокоитьНаАТС();
	Если РежимНеБеспокоитьНаАТС Тогда
		стрКомандаНеБеспокоить = бит_БитфонСервер.ПолучитьКомандуНеБеспокоить();
		Если НЕ ЗначениеЗаполнено(стрКомандаНеБеспокоить) Тогда
			бит_ТелефонияКлиент.ВывестиСообщение("Не задан номер для установки статуса 'Не беспокоить'");
		Иначе
			
			//	свободныйКанал = 0;
			//	Если НайтиСвободнуюЛинию(свободныйКанал) Тогда
			//		вызовУстСтатусаУспешен = НачатьИсходящийВызовНаКанале(свободныйКанал, стрКомандаНеБеспокоить);
			//		Если вызовУстСтатусаУспешен Тогда
			//			Элементы.ГруппаБИТфонПанели.Доступность = Ложь;
			//		КонецЕсли;
			//	Иначе
			//		бит_ТелефонияКлиент.ВывестиСообщение("Не найдена свободная линия для установки статуса 'Не беспокоить'");
			//	КонецЕсли;
			//КонецЕсли;
			
			// Обойти все каналы и выбрать свободную линию
			Успех = Ложь;
			Пока НЕ Успех Цикл
				Для Канал = 0 По 3 Цикл
					свободныйКанал = Канал;
					Если НайтиСвободнуюЛинию(свободныйКанал) Тогда
						вызовУстСтатусаУспешен = НачатьИсходящийВызовНаКанале(свободныйКанал, стрКомандаНеБеспокоить);
						Если вызовУстСтатусаУспешен Тогда
							Успех = Истина;
							Элементы.ГруппаБИТфонПанели.Доступность = Ложь;
						КонецЕсли;
					Иначе
						// Скрыть сообщения от Битфона
						//бит_ТелефонияКлиент.ВывестиСообщение("Не найдена свободная линия для установки статуса 'Не беспокоить'");
						//
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			//
		КонецЕсли;
	Иначе
		СтатусНеБеспокоить = Истина;
		бит_БитфонСервер.УстановитьФлагРежимНеБеспокоить(СтатусНеБеспокоить);
		ОбновитьСтатусыПодключения();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСтатусНеБеспокоить()
	РежимНеБеспокоитьНаАТС = бит_БитфонСервер.ПолучитьФлагИспользоватьКомандуНеБеспокоитьНаАТС();
	Если РежимНеБеспокоитьНаАТС Тогда
		стрКомандаОтменитьНеБеспокоить = бит_БитфонСервер.ПолучитьКомандуОтменаНеБеспокоить();
		Если НЕ ЗначениеЗаполнено(стрКомандаОтменитьНеБеспокоить) Тогда
			бит_ТелефонияКлиент.ВывестиСообщение("Не задан номер для отмены статуса 'Не беспокоить'");
		Иначе
			свободныйКанал = 0;
			Если НайтиСвободнуюЛинию(свободныйКанал) Тогда
				вызовОтмСтатусаУспешен = НачатьИсходящийВызовНаКанале(свободныйКанал, стрКомандаОтменитьНеБеспокоить);
				Если вызовОтмСтатусаУспешен Тогда
					Элементы.ГруппаБИТфонПанели.Доступность = Ложь;
				КонецЕсли;
			Иначе
				бит_ТелефонияКлиент.ВывестиСообщение("Не найдена свободная линия для отмены статуса 'Не беспокоить'");
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтатусНеБеспокоить = Ложь;
		бит_БитфонСервер.УстановитьФлагРежимНеБеспокоить(СтатусНеБеспокоить);
		ОбновитьСтатусыПодключения();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСвойНомерИЗаголовокФормы()
	Заголовок = "БИТ.Phone";
	СвойНомер = бит_БитфонСервер.ПолучитьСвойНомер();
	Если ЗначениеЗаполнено(СвойНомер) Тогда
		Заголовок = Заголовок + " - " + СвойНомер;
	КонецЕсли;
КонецПроцедуры

// - панель линий
&НаКлиенте
Функция ПолучитьНомерЛинии(Линия)
	Возврат ЭтаФорма["НомерЛиния"+Строка(Линия)];
КонецФункции

&НаКлиенте
Процедура УстановитьНомерЛинии(Линия, Номер)
	ЭтаФорма["НомерЛиния"+Строка(Линия)] = Номер;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокПанели(номерКаналаЛинии)
	ЭтаФорма["Линия"+(номерКаналаЛинии+1)+"Заголовок"]	= "";
	Если СофтФон <> Неопределено Тогда
		активн		= Софтфон.IsChannelActive(номерКаналаЛинии);
		входящ 		= Софтфон.IsIncomingCall(номерКаналаЛинии);
		каналВКонф	= Софтфон.IsChannelInConference(номерКаналаЛинии);
		Если активн Тогда
			стрСуффиксВх = ?(входящ, Символ(8595), Символ(8593)); // стрелка вниз или вверх
			стрСуффиксКонф = ?(каналВКонф, "+", "");
			стрСуффиксЗаголовка = стрСуффиксВх + стрСуффиксКонф;
			ЭтаФорма["Линия"+(номерКаналаЛинии+1)+"Заголовок"]	= стрСуффиксЗаголовка;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПанель(номерКаналаЛинии)
	//
	ОбновитьЗаголовокПанели(номерКаналаЛинии);
	//
	ИдетРазговор	= Ложь;
	ИдетЗапись		= Ложь;
	ВызовУдержан	= Ложь;
	ЛинияАбонент						= "";
	ЛинияКонтактноеЛицо					= "";
	ЛинияВКонференции					= Ложь;
	ВидимостьГруппыОбработкиВходящегоЗвонка = Ложь;
	ВидимостьГруппыНабранногоНомера			= Ложь;
	Если СофтФон <> Неопределено Тогда
		активн			= Софтфон.IsChannelActive(номерКаналаЛинии);
		ИдетЗапись		= Софтфон.IsRecording(номерКаналаЛинии);
		ВызовУдержан	= СофтФон.IsHold(номерКаналаЛинии);
		каналВКонф		= Софтфон.IsChannelInConference(номерКаналаЛинии);
		входящ 			= Софтфон.IsIncomingCall(номерКаналаЛинии);
		вразговоре		= Софтфон.IsInCall(номерКаналаЛинии);
		//
		Если входящ Тогда
			ИдетРазговор = активн И вразговоре;
		Иначе
			ИдетРазговор = активн;
		КонецЕсли;
		//
		Если активн Тогда
			назв = Софтфон.GetChannelName(номерКаналаЛинии);
			//
			линКонтакт		= Неопределено;
			линКонтактЛицо	= Неопределено;
			ПолучитьКонтрагентаИзКэша(назв, линКонтакт, линКонтактЛицо);
			ЛинияАбонент						= линКонтакт;
			ЛинияКонтактноеЛицо					= линКонтактЛицо;
			//
			ЛинияВКонференции					= каналВКонф;
			//
			ВидимостьГруппыОбработкиВходящегоЗвонка = (входящ И НЕ вразговоре);
			//
			НомерНабранный = ИнформацияЛиний[номерКаналаЛинии].НабранныйНомер;
			ЛинияНабранныйНомер = НомерНабранный;
			ВидимостьГруппыНабранногоНомера = ЗначениеЗаполнено(НомерНабранный);
		КонецЕсли;
	КонецЕсли;
	//
	Элементы.кнЗаписьРазговора.Доступность = ИдетРазговор;
	Элементы.кнФакс.Доступность = ИдетРазговор;
	Элементы.КнПереводЗвонка.Доступность = ИдетРазговор;
	Элементы.КнУдержатьВызов.Доступность = ИдетРазговор;
	Элементы.кнКонтакты.Доступность = НЕ ИдетРазговор;
	//
	Элементы["ГруппаОбработкиВходящегоЗвонка"+Строка(номерКаналаЛинии+1)].Видимость = ВидимостьГруппыОбработкиВходящегоЗвонка;
	Элементы["ГруппаНабранныйНомер"+Строка(номерКаналаЛинии+1)].Видимость = ВидимостьГруппыНабранногоНомера;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсеПанели()
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	Для й=0 По 3 Цикл
		Если й <> каналАктивнойЛинии Тогда
			ОбновитьПанель(й);
		КонецЕсли;
	КонецЦикла;
	ОбновитьПанель(каналАктивнойЛинии);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДлительностьРазговора()
	длительностьРазговораТекКаналСек = 0;
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	Если СофтФон <> Неопределено Тогда
		Если СофтФон.IsChannelActive(каналАктивнойЛинии) Тогда
			длительностьРазговораТекКаналСек = СофтФон.GetCallDuration(каналАктивнойЛинии);
		КонецЕсли;
	КонецЕсли;
	ДлительностьРазговора = бит_ТелефонияКлиентСервер.ФорматироватьДлительностьЗвонкаСЛидНулями(длительностьРазговораТекКаналСек);
	Элементы["ДлительностьРазговораЛиния"+Строка(каналАктивнойЛинии+1)].Видимость = (длительностьРазговораТекКаналСек > 0);
	// Разорвать соединение с АТС, если текущий разговор длится 1 час
	Если ЭтаФорма.ДлительностьРазговора = "1:00:00" Тогда
		кнОтключить(Неопределено);
		Сигнал();
		Ответ = Вопрос("Для экономии ресурсов подключение к АТС было разорвано. Восстановить?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да,"БИТ.Phone");
		Если Ответ = КодВозвратаДиалога.Да Тогда
			кнПодключить(Неопределено);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппаЛинииПриСменеСтраницы(Элемент, ТекущаяСтраница)
	группаКанал = ПолучитьКаналТекущейЛинии();
	ОбновитьПанель(группаКанал);
КонецПроцедуры

&НаКлиенте
Процедура ЛинияВКонференцииПриИзменении(Элемент)
	конфКанал = ПолучитьКаналТекущейЛинии();
	Если СофтФон <> Неопределено Тогда
		активн = Софтфон.IsChannelActive(конфКанал);
		Если активн Тогда
			каналВКонф = Софтфон.IsChannelInConference(конфКанал);
			Если каналВКонф Тогда
				СофтФон.RemoveFromConference(конфКанал);
			Иначе
				СофтФон.AddToConference(конфКанал);
			КонецЕсли;
		Иначе
			ПоказатьОповещениеПользователя("На канале нет разговора");
		КонецЕсли;
	КонецЕсли;
	ОбновитьПанель(конфКанал);
КонецПроцедуры

&НаКлиенте
Процедура КнПринятьВходящий(Команда)
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	ПринятьВходящийВызовНаКанале(каналАктивнойЛинии);
КонецПроцедуры

&НаКлиенте
Процедура КнОтклонитьВходящий(Команда)
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	ОтклонитьВходящийВызовНаКанале(каналАктивнойЛинии);
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияОЗвонке(Команда)
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	Если СофтФон <> Неопределено Тогда
		стрИнф = СофтФон.GetInviteHeaders(каналАктивнойЛинии);
		Если ЗначениеЗаполнено(стрИнф) Тогда
			чтХмл = Новый ЧтениеXML();
			чтХмл.УстановитьСтроку(стрИнф);
			постр = Новый ПостроительDOM();
			докХмл = постр.Прочитать(чтХмл);
			корнУзел = докХмл.ПервыйДочерний;
			Для Каждого узел ИЗ корнУзел.ДочерниеУзлы Цикл
				бит_ТелефонияКлиент.ВывестиСообщение(узел.ИмяУзла + ": " + узел.ТекстовоеСодержимое);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// - основная панель
&НаКлиенте
Процедура КнОГр(Команда)
	Если ГромкостьВключена Тогда
		ОтключитьГромкость();
		ГромкостьОтключенаВручную = Истина;
	Иначе
		ВключитьГромкость();
		ГромкостьОтключенаВручную = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КнОМик(Команда) Экспорт
	Если МикрофонВключен Тогда
		ОтключитьМикрофон();
		МикрофонОтключенВручную = Истина;
	Иначе
		ВключитьМикрофон();
		МикрофонОтключенВручную = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачатьРазговорКл(Команда) Экспорт
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	Если СофтФон <> Неопределено И СофтФон.IsIncomingCall(каналАктивнойЛинии) И НЕ Софтфон.IsInCall(каналАктивнойЛинии) Тогда
		ПринятьВходящийВызовНаКанале(каналАктивнойЛинии);
	Иначе
		Номер = ПолучитьНомерЛинии(каналАктивнойЛинии+1);
		НачатьРазговорНаКанале(каналАктивнойЛинии, Номер);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КнОтбой(Команда) Экспорт
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	Если СофтФон <> Неопределено И СофтФон.IsIncomingCall(каналАктивнойЛинии) И НЕ Софтфон.IsInCall(каналАктивнойЛинии) Тогда
		ОтклонитьВходящийВызовНаКанале(каналАктивнойЛинии);
	Иначе
		ЗавершитьРазговор(каналАктивнойЛинии);
	КонецЕсли;
	ОбновитьПанель(каналАктивнойЛинии);
КонецПроцедуры

&НаКлиенте
Процедура КнУдержатьВызов(Команда) Экспорт
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	ОбновитьПанель(каналАктивнойЛинии);
	Если ИдетРазговор Тогда 
		НовоеСостояниеУдержания = Не ВызовУдержан;
		УдержатьВызов(каналАктивнойЛинии, НовоеСостояниеУдержания);
		ОбновитьПанель(каналАктивнойЛинии);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КнПереводЗвонка(Команда)
	Если НЕ ИдетРазговор Тогда
		Возврат;
	КонецЕсли;
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	типПеревода = бит_БитфонСервер.ПолучитьТипПереводаЗвонка();
	Если типПеревода = ПредопределенноеЗначение("Перечисление.бит_ТипПереводаЗвонка.Условный") Тогда
		Если НабратьКомандуПереадресацииНаКанале(каналАктивнойЛинии) Тогда
			УстановитьНомерЛинии(каналАктивнойЛинии+1, "");
			ПоказатьОповещениеПользователя("Введите номер переадресации");
		КонецЕсли;
	ИначеЕсли типПеревода = ПредопределенноеЗначение("Перечисление.бит_ТипПереводаЗвонка.Безусловный") Тогда
		формаВводаНомераПеревода = ПолучитьФорму("Обработка.бит_Битфон.Форма.ФормаВводаНомераПеревода");
		бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуСБлокировкойВладельца(формаВводаНомераПеревода, "БитФон_ПереводЗвонкаБезусловный", каналАктивнойЛинии);
	ИначеЕсли типПеревода = ПредопределенноеЗначение("Перечисление.бит_ТипПереводаЗвонка.ОбъединениеЛиний") Тогда
		Если УсловнаяПереадресация Тогда
			бит_ТелефонияКлиент.ВывестиСообщение("При использовании стационарного телефона объединение линий невозможно.");
			Возврат;
		КонецЕсли;
		списокЛиний = Новый СписокЗначений;
		Для й=0 По 3 Цикл
			// каналам от 0 до 3 соответствуют линии от 1 до 4
			списокЛиний.Добавить(й, "Линия " + Строка(й+1));
		КонецЦикла;
		списокЛиний.Добавить(Неопределено, "Отмена");
		бит_ТелефонияКлиентПереопределяемый.ПоказВопрос("Выберите линию для объединения", списокЛиний, , , , "БитФон_ПереводЗвонкаОбъединениеЛиний", каналАктивнойЛинии);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПереводЗвонкаПослеВыбораЛиний(ОбъединениеЛинийРезультатВыбораЛинии, ОбъединениеЛинийТекущийКанал)
	Если ОбъединениеЛинийРезультатВыбораЛинии <> Неопределено Тогда
		каналПеревода = ОбъединениеЛинийРезультатВыбораЛинии;
		Если каналПеревода = ОбъединениеЛинийТекущийКанал Тогда
			бит_ТелефонияКлиент.ВывестиСообщение("Нельзя объединить канал сам с собой");
			Возврат;
		КонецЕсли;
		Если НЕ СофтФон.IsInCall(каналПеревода) Тогда
			бит_ТелефонияКлиент.ВывестиСообщение("На линии " + Строка(каналПеревода+1) + " не идет разговор");
			Возврат;
		КонецЕсли;
		ОбъединитьКаналы(ОбъединениеЛинийТекущийКанал, каналПеревода);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КН1(Команда)
	КодКнопки = Прав(Команда.Имя, 1);
	ДТМФВызовНаАктивнойЛинии(КодКнопки);
	СофтФон.PlayDTMF(КодКнопки);
КонецПроцедуры

&НаКлиенте
Процедура КНЗВ(Команда)
	стрКомЗв = "*";
	ДТМФВызовНаАктивнойЛинии(стрКомЗв);
	СофтФон.PlayDTMF(стрКомЗв);
КонецПроцедуры

&НаКлиенте
Процедура КНРеш(Команда)
	стрКомРеш = "#";
	ДТМФВызовНаАктивнойЛинии(стрКомРеш);
	СофтФон.PlayDTMF(стрКомРеш);
КонецПроцедуры

&НаКлиенте
Процедура КнУдалитьПоследнийСимволНомера(Команда)
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	Номер = ПолучитьНомерЛинии(каналАктивнойЛинии+1);
	Номер = Лев(Номер,СтрДлина(Номер)-1);
	УстановитьНомерЛинии(каналАктивнойЛинии+1,Номер);
КонецПроцедуры

&НаКлиенте
Процедура кнКонтакты(Команда)
	формаВыбораТелефона = ПолучитьФорму("Обработка.бит_Битфон.Форма.ФормаВыбораНомера", , ЭтаФорма);
	бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуСБлокировкойВладельца(формаВыбораТелефона);
КонецПроцедуры

&НаКлиенте
Процедура кнSMS(Команда)
	ОткрытьФормуОтправкиSMS("");
КонецПроцедуры

&НаКлиенте
Процедура кнФакс(Команда)
	номерФакса = бит_БитфонСервер.ПолучитьНомерФакса();
	Если ИдетРазговор Тогда
		Если ЗначениеЗаполнено(номерФакса) Тогда
			каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
			ПеревестиЗвонокНаКанале(каналАктивнойЛинии, номерФакса);
		Иначе
			бит_ТелефонияКлиент.ВывестиСообщение("Не задан номер факса в настройках");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнЗаписьРазговора(Команда)
	записьОбязательна = бит_БитфонСервер.ПолучитьФлагВсегдаЗаписыватьРазговор();
	Если записьОбязательна = Истина Тогда
		ПоказатьОповещениеПользователя("Разговор записывается автоматически",
			, "см. пункт 'Всегда записывать разговор' в настройках");
		Возврат;
	КонецЕсли;
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	ОбновитьПанель(каналАктивнойЛинии);
	Если ИдетЗапись Тогда
		ОстановитьЗапись(каналАктивнойЛинии);
	Иначе
		НачатьЗапись(каналАктивнойЛинии);
	КонецЕсли;
	ОбновитьПанель(каналАктивнойЛинии);
КонецПроцедуры

&НаКлиенте
Процедура КнСтационарныйТелефон(Команда)
	Если ИдетРазговор Тогда
		бит_ТелефонияКлиентПереопределяемый.ПоказПредупреждение("Изменение режима использования стационарного телефона во время разговора невозможно!");
	Иначе
		ИспользуетсяСтационарныйТелефон = бит_БитфонСервер.ПолучитьФлагИспользоватьСтационарныйТелефон();
		ИспользуетсяСтационарныйТелефон = НЕ ИспользуетсяСтационарныйТелефон;
		бит_БитфонСервер.УстановитьФлагИспользоватьСтационарныйТелефон(ИспользуетсяСтационарныйТелефон);
		ИспользуетсяСтационарныйТелефон = бит_БитфонСервер.ПолучитьФлагИспользоватьСтационарныйТелефон();
	КонецЕсли;
КонецПроцедуры

// - панель истории
&НаКлиенте
Процедура ПоказатьВсюИсторию(Команда)
	формаОтчетПоИсторииЗвонков = ПолучитьФорму("Отчет.бит_ИсторияЗвонков.Форма.ФормаОтчета", , ЭтаФорма, Ложь);
	ПараметрПользователь = формаОтчетПоИсторииЗвонков.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Пользователь");
	Если ПараметрПользователь <> Неопределено Тогда
		ПараметрПользователь.Значение = бит_ТелефонияСервер.ПолучитьТекущегоПользователя();
		ПараметрПользователь.Использование = Истина;
		формаОтчетПоИсторииЗвонков.ВариантМодифицирован = Ложь;
	КонецЕсли;
	формаОтчетПоИсторииЗвонков.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ИсторияЗвонковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущийЭлемент = Элементы.ГруппаПанельОсновная;
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	НачатьРазговорНаКанале(каналАктивнойЛинии, Элемент.ТекущиеДанные.Номер);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыТекущейЗаписиВИстории(стрТекущНомер, текущАбонент, стрТекущАбонент, стрТекущЗапись)
	ТекущиеДанные = Неопределено;
	Если Элементы.ГруппаВидыИстории.ТекущаяСтраница.Имя = "ГруппаИсторияВходящие" Тогда
		ТекущиеДанные = Элементы.ИсторияЗвонковВходящие.ТекущиеДанные;
	Иначе
		ТекущиеДанные = Элементы.ИсторияЗвонковИсходящие.ТекущиеДанные;
	КонецЕсли;
	Если ТекущиеДанные <> Неопределено Тогда
		стрТекущНомер = ТекущиеДанные.Номер;
		текущАбонент = ТекущиеДанные.Абонент;
		стрТекущАбонент = Строка(текущАбонент);
		стрТекущЗапись = ТекущиеДанные.ЗаписьРазговора;
		Возврат Истина;
	Иначе
		ПоказатьОповещениеПользователя("Не выбрана запись в истории");
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура Информация(Команда)
	стрТекущНомер = "";
	текущАбонент = Неопределено;
	стрТекущАбонент = Неопределено;
	стрТекущЗапись = "";
	Если НЕ ПолучитьПараметрыТекущейЗаписиВИстории(стрТекущНомер, текущАбонент, стрТекущАбонент, стрТекущЗапись) Тогда
		Возврат;
	КонецЕсли;
	текущКонтрагент = Неопределено;
	текущКонтактноеЛицо = Неопределено;
	контраг_найден = НайтиКонтрагентаПоНомеру(стрТекущНомер, текущКонтрагент, текущКонтактноеЛицо);
	Если НЕ контраг_найден = Истина Тогда
		текущКонтрагент = текущАбонент;
	КонецЕсли;
	
	ФормаК = ПолучитьФорму("Обработка.бит_Битфон.Форма.ФормаКонтрагента");
	ФормаК.ВладелецФормы = ЭтаФорма;
	ФормаК.Контрагент = текущКонтрагент;
	ФормаК.КонтактноеЛицо = текущКонтактноеЛицо;
	ФормаК.ИсторияЗвонковИсходящие.Очистить();
	ФормаК.ИсторияЗвонковВходящие.Очистить();
	
	Для каждого ТЧСтрока из Объект.ИсторияЗвонковИсходящие цикл
		Если ТЧСтрока.Номер = стрТекущНомер ИЛИ ТЧСтрока.Абонент = стрТекущАбонент
			ИЛИ ТЧСтрока.Абонент = текущКонтрагент Тогда
				Тстрока = ФормаК.ИсторияЗвонковИсходящие.Добавить();
				ЗаполнитьЗначенияСвойств(Тстрока, ТЧСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТЧСтрока из Объект.ИсторияЗвонковВходящие цикл
		Если ТЧСтрока.Номер = стрТекущНомер ИЛИ ТЧСтрока.Абонент = стрТекущАбонент
			ИЛИ ТЧСтрока.Абонент = текущКонтрагент Тогда
				Тстрока = ФормаК.ИсторияЗвонковВходящие.Добавить();
				ЗаполнитьЗначенияСвойств(Тстрока, ТЧСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ФормаК.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтрагента(Команда)
	стрТекущНомер = "";
	текущАбонент = Неопределено;
	стрТекущАбонент = Неопределено;
	стрТекущЗапись = "";
	Если НЕ ПолучитьПараметрыТекущейЗаписиВИстории(стрТекущНомер, текущАбонент, стрТекущАбонент, стрТекущЗапись) Тогда
		Возврат;
	КонецЕсли;
	текущКонтрагент = Неопределено;
	текущКонтактноеЛицо = Неопределено;
	контраг_найден = НайтиКонтрагентаПоНомеру(стрТекущНомер, текущКонтрагент, текущКонтактноеЛицо);
	//
	Если контраг_найден = Истина Тогда
		ПоказатьОповещениеПользователя("Контрагент '" + Строка(текущКонтрагент) + "' уже существует");
		Возврат;
	КонецЕсли;
	бит_ТелефонияКлиентПереопределяемый.СоздатьНовогоКонтрагента(стрТекущНомер);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНомер(Команда)
	стрТекущНомер = "";
	текущАбонент = Неопределено;
	стрТекущАбонент = Неопределено;
	стрТекущЗапись = "";
	Если НЕ ПолучитьПараметрыТекущейЗаписиВИстории(стрТекущНомер, текущАбонент, стрТекущАбонент, стрТекущЗапись) Тогда
		Возврат;
	КонецЕсли;
	//
	бит_ТелефонияКлиентПереопределяемый.ВыбратьКонтрагентаЗадатьНомер(стрТекущНомер);
КонецПроцедуры

&НаКлиенте
Процедура ПрослушатьЗапись(Команда)
	стрТекущНомер = "";
	текущАбонент = Неопределено;
	стрТекущАбонент = Неопределено;
	стрТекущЗапись = "";
	Если НЕ ПолучитьПараметрыТекущейЗаписиВИстории(стрТекущНомер, текущАбонент, стрТекущАбонент, стрТекущЗапись) Тогда
		Возврат;
	КонецЕсли;
	//
	бит_БИТфонКлиент.ВоспроизвестиЗаписьРазговора(стрТекущЗапись);
КонецПроцедуры

// - панель Избранного
&НаКлиенте
Процедура ИзбранноеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	СтатусыИспользуются = бит_БитфонСервер.ПолучитьФлагПолучениеСтатусовАбонентов();
		
	Номер = Элементы.Избранное.ТекущиеДанные.Номер;
	КодСтатуса = Элементы.Избранное.ТекущиеДанные.ИндексКартинкиСтатуса;
	ОтслеживатьСтатус = Элементы.Избранное.ТекущиеДанные.ОтслеживатьСтатус;
	
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	ОбновитьПанель(каналАктивнойЛинии);
	ТекущийЭлемент = Элементы.ГруппаПанельОсновная;
	
	Если ИдетРазговор Тогда
		Если СтатусыИспользуются И ОтслеживатьСтатус И КодСтатуса <> 1 Тогда // статус 1 - свободен
			бит_ТелефонияКлиент.ВывестиСообщение("Абонент не доступен для перевода звонка.");
		Иначе
			ПеревестиЗвонокНаКанале(каналАктивнойЛинии, Номер);
		КонецЕсли;
	Иначе
		Если СтатусыИспользуются И ОтслеживатьСтатус И КодСтатуса <> 1 Тогда // статус 1 - свободен
			бит_ТелефонияКлиент.ВывестиСообщение("Абонент не доступен для звонка."); 
		Иначе
			НачатьРазговорНаКанале(каналАктивнойЛинии, Номер);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзбранноеСоздать(Команда)
	фрмНовИзбранное = ПолучитьФорму("Справочник.бит_БитфонИзбранное.Форма.ФормаЭлементаБезПользователя");
	фрмНовИзбранное.ИмяСобытияОповещенияПриИзменении = "БитФон_ОбновитьИзбранное";
	бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуСБлокировкойВладельца(фрмНовИзбранное);
КонецПроцедуры

&НаКлиенте
Процедура ИзбранноеСкопировать(Команда)
	текущСтрокаИзбр =  Элементы.Избранное.ТекущиеДанные;
	Если текущСтрокаИзбр <> Неопределено Тогда
		текущ = текущСтрокаИзбр.Ссылка;
		ПарамИзбр = Новый Структура("ЗначениеКопирования", текущ);
		нф = ПолучитьФорму("Справочник.бит_БитфонИзбранное.Форма.ФормаЭлементаБезПользователя", ПарамИзбр);
		нф.ИмяСобытияОповещенияПриИзменении = "БитФон_ОбновитьИзбранное";
		бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуСБлокировкойВладельца(нф);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзбранноеИзменить(Команда)
	текущСтрокаИзбр =  Элементы.Избранное.ТекущиеДанные;
	Если текущСтрокаИзбр <> Неопределено Тогда
		текущ = текущСтрокаИзбр.Ссылка;
		ПарамИзбр = Новый Структура("Ключ", текущ);
		формаТекущ = ПолучитьФорму("Справочник.бит_БитфонИзбранное.Форма.ФормаЭлементаБезПользователя", ПарамИзбр); 
		формаТекущ.ИмяСобытияОповещенияПриИзменении = "БитФон_ОбновитьИзбранное";
		бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуСБлокировкойВладельца(формаТекущ);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИзбранноеУдалитьСервер(ИзбранноеСсылка)
	избрОбъект = ИзбранноеСсылка.ПолучитьОбъект();
	избрОбъект.Удалить();
КонецПроцедуры

&НаКлиенте
Процедура ИзбранноеУдалить(Команда)
	текущСтрокаИзбр =  Элементы.Избранное.ТекущиеДанные;
	Если текущСтрокаИзбр <> Неопределено Тогда
		текущ =  текущСтрокаИзбр.Ссылка;
		бит_ТелефонияКлиентПереопределяемый.ПоказВопрос("Удалить элемент избранного " + Строка(текущ) + " ?",
			РежимДиалогаВопрос.ДаНет, , , , "БитФон_УдалитьИзбранное", текущ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзбранноеУдалитьЗавершение(Результат, ИзбранноеСсылка)
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИзбранноеУдалитьСервер(ИзбранноеСсылка);
		ИзбранноеОбновитьКлиент();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИзбранноеОбновитьСервер()
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	СправочникбтБитФонИзбранное.Ссылка,
	               |	СправочникбтБитФонИзбранное.Наименование КАК Наименование,
	               |	СправочникбтБитФонИзбранное.Номер,
	               |	СправочникбтБитФонИзбранное.ОтслеживатьСтатус,
	               |	0 КАК ИндексКартинкиСтатуса
	               |ИЗ
	               |	Справочник.бит_БитфонИзбранное КАК СправочникбтБитФонИзбранное
	               |ГДЕ
	               |	(СправочникбтБитФонИзбранное.Пользователь = &Пользователь
	               |			ИЛИ СправочникбтБитФонИзбранное.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование";
	
	Пользователь = бит_ТелефонияСервер.ПолучитьТекущегоПользователя();
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	таблИзбр = Запрос.Выполнить().Выгрузить();
	ЗначениеВРеквизитФормы(таблИзбр, "Избранное");
КонецПроцедуры

&НаКлиенте
Процедура ИзбранноеОбновитьКлиент()
	ОтключениеСтатусов();
	ИзбранноеОбновитьСервер();
	ПодключениеСтатусов();
КонецПроцедуры

&НаКлиенте
Процедура ИзбранноеОбновить(Команда)
	ИзбранноеОбновитьКлиент();
КонецПроцедуры

// - обработка статусов

// Коды статусов:
// 0 - не найден
// 1 - свободен
// 2 - разговаривает
// 3 - не доступен
// 4 - ожидание

&НаКлиенте
Процедура УстановитьСтатусНомера(стрНомерУстановкиСтатуса, кодНовогоСтатуса)
	Отбор = Новый Структура("Номер", стрНомерУстановкиСтатуса);
	массСтрок = Избранное.НайтиСтроки(Отбор);
	Для Каждого НайденнаяСтрока Из массСтрок Цикл
		НайденнаяСтрока.ИндексКартинкиСтатуса = кодНовогоСтатуса;	// индекс картинки равен коду статуса
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусАбонентаSIP(ИдентификаторАбонента)
	// Заглушка	для исключения ошибки, когда не удается обновить статусы
	Попытка Инф = СофтФон.BuddyGetInfo(ИдентификаторАбонента);
	Исключение
		Возврат;
	КонецПопытки;
	//
	
	параметрыПодписки = бит_ТелефонияКлиентСервер.СтрРазбить(Инф, "#");	
	//
	Если параметрыПодписки.Количество() <> 3 Тогда
		Возврат;
	КонецЕсли;
	//
	НомерПодп = параметрыПодписки[0].Значение;
	СтрСтатус = параметрыПодписки[1].Значение;
	ОписаниеСтатуса = параметрыПодписки[2].Значение;
	Если (СтрСтатус) = "" Тогда
		Возврат;			
	КонецЕсли;
	ЧСтатус = Число(СтрСтатус);
	Если ЧСтатус = 0 Тогда
		УстановитьСтатусНомера(НомерПодп, 0);
	ИначеЕсли ЧСтатус = 2 Тогда
		УстановитьСтатусНомера(НомерПодп, 3);
	ИначеЕсли ЧСтатус = 1 Тогда	   
		Если ОписаниеСтатуса = "On hold" Тогда
			УстановитьСтатусНомера(НомерПодп, 4);
		ИначеЕсли ОписаниеСтатуса = "On the phone" Тогда
			УстановитьСтатусНомера(НомерПодп, 2);
		ИначеЕсли ОписаниеСтатуса = "Ready" Тогда
			УстановитьСтатусНомера(НомерПодп, 1);
		КонецЕсли;		
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокНомеровПроверкиСтатусаСервер(СписокНомеров)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_БитфонИзбранное.Наименование КАК Абонент,
	               |	бит_БитфонИзбранное.Номер
	               |ИЗ
	               |	Справочник.бит_БитфонИзбранное КАК бит_БитфонИзбранное
	               |ГДЕ
	               |	бит_БитфонИзбранное.ПометкаУдаления = ЛОЖЬ
	               |	И бит_БитфонИзбранное.ОтслеживатьСтатус = ИСТИНА
	               |	И бит_БитфонИзбранное.Номер <> """"
	               |	И (бит_БитфонИзбранное.Пользователь = &Пользователь
	               |			ИЛИ бит_БитфонИзбранное.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Абонент";
	Запрос.УстановитьПараметр("Пользователь",бит_ТелефонияСервер.ПолучитьТекущегоПользователя());
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	Иначе
		КолАбонентов = Выборка.Количество();
	КонецЕсли;	
	
	Для Счетчик = 0 По КолАбонентов-1 Цикл
		ТекЗнчНомер = Формат(Выборка[Счетчик].Номер,"ЧГ=");
		СписокНомеров.Добавить(ТекЗнчНомер);
	КонецЦикла;
КонецПроцедуры

//-----------------------------------------------------------------------------
// Обработка оповещений

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
		УстановитьНомерЛинии(каналАктивнойЛинии+1, ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачатьРазговор(ВызываемыйНомер)
	свободныйКанал = 0;
	Если НайтиСвободнуюЛинию(свободныйКанал) Тогда
		НачатьРазговорНаКанале(свободныйКанал, ВызываемыйНомер);
	Иначе
		бит_ТелефонияКлиент.ВывестиСообщение("Не найдена свободная линия для исходящего звонка");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВоспроизвестиЗаписьНаСтационарномТелефоне(стрПутьКЗаписи)
	Если СофтФон <> Неопределено Тогда
		Если УсловнаяПереадресация Тогда
			бит_ТелефонияКлиент.ВывестиСообщение("Воспроизведение записи на стационарном телефоне во время идущей условной переадресации невозможно");
			Возврат;
		КонецЕсли;
		//
		свободныйКанал = 0;
		Если Не НайтиСвободнуюЛинию(свободныйКанал) Тогда
			бит_ТелефонияКлиент.ВывестиСообщение("Не найден свободный канал для воспроизведения разговора");
			Возврат;
		КонецЕсли;
		стационарныйНомер = бит_БитфонСервер.ПолучитьСтационарныйТелефон();
		ИдетВоспроизведение = НачатьИсходящийВызовНаКанале(свободныйКанал, стационарныйНомер);
		Если ИдетВоспроизведение Тогда
			СофтФон.SetPlayFilename(свободныйКанал, стрПутьКЗаписи);
			ОбновитьПанель(свободныйКанал);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "БитФон_ПриОткрытииЗавершение" Тогда
		резВводаНастроек = Параметр.Результат;
		Если (резВводаНастроек = Ложь) ИЛИ (резВводаНастроек = Неопределено) Тогда
			Закрыть();
			Возврат;
		Иначе
			ПриОткрытииЗавершение();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "БитФон_СофтфонПодключен" Тогда
		СофтФон = Параметр.Результат;
		Если СофтФон <> Неопределено Тогда
			бит_БИТфонКлиент.ИнициализироватьСофтфонРегистрацияНаАТС(СофтФон);
			ОбновитьВсеПанели();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "БитФон_ОбработкаВходящегоЗвонка" Тогда
		резОбработки		= Параметр.Результат;
		НомерКанала			= Параметр.ПараметрОповещения.НомерКанала;
		НомерНеОпределен	= Параметр.ПараметрОповещения.НомерНеОпределен;
		НомерВходящий		= Параметр.ПараметрОповещения.НомерВходящий;
		Если резОбработки = "принять" Тогда
			ПринятьВходящийВызовНаКанале(НомерКанала);
		Иначе
			ОтклонитьВходящийВызовНаКанале(НомерКанала);
		КонецЕсли;
		Если Не бит_БитфонСервер.ПолучитьФлагСоздаватьСобытиеВходящийЗвонок() Тогда
			ОткрытьФормуОбработкиНеизвестногоНомера(НомерНеОпределен, НомерВходящий);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "БитФон_НачатьРазговор" Тогда
		НачатьРазговор(Параметр);
	ИначеЕсли ИмяСобытия = "БитФон_ВоспроизвестиЗаписьНаСтационарномТелефоне" Тогда
		ВоспроизвестиЗаписьНаСтационарномТелефоне(Параметр);
	ИначеЕсли ИмяСобытия = "БитФон_ЗавершитьРазговор" Тогда
		ЗавершитьВсеРазговоры();
	ИначеЕсли ИмяСобытия = "БитФон_ПеревестиРазговор" Тогда
		каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
		Номер = Параметр;
		ПеревестиЗвонокНаКанале(каналАктивнойЛинии, Номер);
	ИначеЕсли ИмяСобытия = "БитФон_ПереводЗвонкаБезусловный" Тогда
		Если ЗначениеЗаполнено(Параметр.Результат) Тогда
			стрНомерБезуслПеревода = Параметр.Результат;
			каналАктивнойЛинии = Параметр.ПараметрОповещения;
			БезусловныйПеревод(каналАктивнойЛинии, стрНомерБезуслПеревода);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "БитФон_ПереводЗвонкаОбъединениеЛиний" Тогда
		ПереводЗвонкаПослеВыбораЛиний(Параметр.Результат, Параметр.ПараметрОповещения);
	ИначеЕсли ИмяСобытия = "БитФон_ОтправитьSMS" Тогда
		ОткрытьФормуОтправкиSMS(Параметр);
	ИначеЕсли ИмяСобытия = "БитФон_ОбновлениеНастроек" Тогда
		СтарыеНастройки = Параметр.ПараметрОповещения;
		ОбновитьНастройки(СтарыеНастройки);
	ИначеЕсли ИмяСобытия = "БитФон_ОбновитьИзбранное" Тогда
		ИзбранноеОбновитьКлиент();
		Если Параметр <> Неопределено Тогда
			массСтрок = Избранное.НайтиСтроки(Параметр);
			Если массСтрок.Количество() > 0 Тогда
				Элементы.Избранное.ТекущаяСтрока = массСтрок[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "БитФон_УдалитьИзбранное" Тогда
		ИзбранноеУдалитьЗавершение(Параметр.Результат, Параметр.ПараметрОповещения);
	КонецЕсли;
	
	// Обработчик состояния звонка
	Если ИмяСобытия = "ОбработатьСостояниеЗвонка" Тогда
		Если ЭтаФорма.СостояниеЗвонка = "ЗвонокОтклонён" Тогда
			ПоказатьОповещениеПользователя("БИТ.Phone",,"Нет ответа",БиблиотекаКартинок.NC_ОшибкаЗвонка);
			Оповестить("ОбновитьВремяРаботы");			
			Оповестить("НеудачныйЗвонок");
			ЭтаФорма.СостояниеЗвонка = "";
		ИначеЕсли ЭтаФорма.СостояниеЗвонка = "ЗвонокПрерван" Тогда
			Если ЭтаФорма.ДлительностьРазговора = "0:00:00" Тогда
				ПоказатьОповещениеПользователя("БИТ.Phone",,"Вызов сброшен",БиблиотекаКартинок.NC_ЗвонокСброшен);
				Оповестить("ОбновитьВремяРаботы");
				Оповестить("СброшенныйЗвонок");
				ЭтаФорма.СостояниеЗвонка = "";
			ИначеЕсли ЭтаФорма.ДлительностьРазговора = "0:00:01"
				ИЛИ ЭтаФорма.ДлительностьРазговора = "0:00:02"
				ИЛИ ЭтаФорма.ДлительностьРазговора = "0:00:03"
				ИЛИ ЭтаФорма.ДлительностьРазговора = "0:00:04"
				ИЛИ ЭтаФорма.ДлительностьРазговора = "0:00:05" Тогда
				ПоказатьОповещениеПользователя("БИТ.Phone",,"Нет ответа",БиблиотекаКартинок.NC_ОшибкаЗвонка);
				Оповестить("ОбновитьВремяРаботы");
				Оповестить("НеудачныйЗвонок");
				ЭтаФорма.СостояниеЗвонка = "";
			ИначеЕсли ЭтаФорма.ДлительностьРазговора <> "0:00:00"
				ИЛИ ЭтаФорма.ДлительностьРазговора <> "0:00:01"
				ИЛИ ЭтаФорма.ДлительностьРазговора <> "0:00:02"
				ИЛИ ЭтаФорма.ДлительностьРазговора <> "0:00:03"
				ИЛИ ЭтаФорма.ДлительностьРазговора <> "0:00:04"
				ИЛИ ЭтаФорма.ДлительностьРазговора <> "0:00:05" Тогда
				ПоказатьОповещениеПользователя("БИТ.Phone",,"Разговор завершен. Длительность разговора: "+ЭтаФорма.ДлительностьРазговора,БиблиотекаКартинок.NC_РазговорЗавершен);
				Оповестить("ОбновитьВремяРаботы");
				Оповестить("ОбновитьДлительностьРазговора");
				ЭтаФорма.КнОтключить(Неопределено);
				ЭтаФорма.СостояниеЗвонка = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
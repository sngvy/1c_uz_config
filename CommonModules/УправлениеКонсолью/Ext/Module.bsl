
#Область ПрограммныйИнтерфейс

Процедура ИсполнитьПрограмму(ДанныеИсполнения) Экспорт

	КодВозврата = Неопределено;

	Попытка

		ТекстИсполнения = СтрШаблон(
			"%1 %2",
			ДанныеИсполнения["Исполнитель"],
			ДанныеИсполнения["Текст"]
		);

		ЗапуститьПриложение(ТекстИсполнения, , Истина, КодВозврата);
		Если КодВозврата <> 0 Тогда
		
			ВызватьИсключение "Не удалось выполнить команду в консоли";
		
		КонецЕсли;

	Исключение
		ВызватьИсключение УправленияСообщениямиКлиентСервер.ИнструкцияКОшибке(
			"Ошибка при выполнении команды в консоли",
			СтрШаблон(
				"Текст исполнения - %1
				|Подробности ошибки:
				|%2",
				ТекстИсполнения,
				ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			)
		);
	КонецПопытки;

КонецПроцедуры

#Область ИнтерфейсИсполнения

Функция Каталог(ДанныеИсполнения) Экспорт

	Файл = ДанныеИсполнения["ТекущийКаталог"];

	Если Не (Файл.Существует()
		И Файл.ЭтоКаталог()) Тогда
	
		ВызватьИсключение "Каталога не существует: " + Файл.ПолноеИмя;
	
	КонецЕсли;
	
	Возврат Файл;

КонецФункции // ()

Функция Кодировка(ДанныеИсполнения) Экспорт

	Возврат ДанныеИсполнения["Кодировка"];

КонецФункции // ()

Функция ТекстИсполнения(ДанныеИсполнения) Экспорт

	Возврат ДанныеИсполнения["Текст"];

КонецФункции // ()

#КонецОбласти

#Область ИнтерфейсНабораКоманд

// Инициализация Нового набора команд для командной строки
//
// Возвращаемое значение:
//   Структура   - Загатовка для формирования пакета команд
//
Функция НоваяПрограмма() Экспорт

	Данные = Новый Структура;
	Данные.Вставить("Инструкции", Новый Массив);
	Данные.Вставить("Кодировка", КодировкаТекста.UTF8);
	Данные.Вставить("ТекущийКаталог", ПолучитьИмяВременногоФайла());
	
	Команды = Новый Структура;
	Команды.Вставить("ВыводНаКонсоль", Ложь);
	Команды.Вставить("ИзменитьКодировку", Ложь);
	Данные.Вставить("ГотовыеКоманды", Команды);
	
	Возврат Данные;

КонецФункции // ()

// Возвращает значение кодировки которая будет использоваться для исполнения
//   и везде где потребуется
//   по умолчанию у программы установлена - UTF-8
//
// Параметры:
//  Программа  - Структура - Набор команд для выполнения
//
// Возвращаемое значение:
//   Кодировка  - Строка, КодировкаТекста - Кодировка текста
//
Функция ПолучитьКодировку(Программа) Экспорт

	Ошибка = Неопределено;
	Если Не КорректнаяПрограмма(Программа, Ошибка) Тогда
	
		ВызватьИсключение ОшибкаПередачиПрограммы(Ошибка);
	
	КонецЕсли;
	
	Возврат Программа["Кодировка"];

КонецФункции // ()

// Изменить кодировку которая будет использоваться для исполнения
//   и везде где потребуется
//   по умолчанию у программы установлена - UTF-8
//
// Параметры:
//  Программа  - Структура - Набор команд для выполнения
//
//  Кодировка  - Строка, КодировкаТекста - Кодировка текста
//
// Возвращаемое значение:
//   ОбщийМодуль   - Для цепочного вызова
//
Функция УстановитьКодировку(Программа, Кодировка) Экспорт

	Ошибка = Неопределено;
	Если Не КорректнаяПрограмма(Программа, Ошибка) Тогда
	
		ВызватьИсключение ОшибкаПередачиПрограммы(Ошибка);
	
	КонецЕсли;
	
	Если Не ДопустимаяКодировка(Кодировка) Тогда
	
		ВызватьИсключение ОшибкаПередачиКодировки(Кодировка);
	
	КонецЕсли;
	
	УстановитьКодировкуДляПрограммы(Программа, Кодировка);
	
	Возврат УправлениеКонсолью;

КонецФункции // ()

// Возвращает каталог в котором будет создаваться исполнимый файл
//
// Параметры:
//  Программа  - Структура - Набор команд для выполнения
//
// Возвращаемое значение:
//  Каталог  - Строка - Каталог где сохраняется Исполняемый файл
//
Функция ПолучитьТекущийКаталог(Программа) Экспорт

	Ошибка = Неопределено;
	Если Не КорректнаяПрограмма(Программа, Ошибка) Тогда
	
		ВызватьИсключение ОшибкаПередачиПрограммы(Ошибка);
	
	КонецЕсли;
	
	Возврат Программа["ТекущийКаталог"];

КонецФункции // ()

// Изменить каталог в котором будет создаваться исполнимый файл
//
// Параметры:
//  Программа  - Структура - Набор команд для выполнения
//
//  Каталог  - Строка - Каталог где сохраняется Исполняемый файл
//
// Возвращаемое значение:
//   ОбщийМодуль   - Для цепочного вызова
//
Функция УстановитьТекущийКаталог(Программа, Каталог) Экспорт

	Ошибка = Неопределено;
	Если Не КорректнаяПрограмма(Программа, Ошибка) Тогда
	
		ВызватьИсключение ОшибкаПередачиПрограммы(Ошибка);
	
	КонецЕсли;
	
	Программа["ТекущийКаталог"] = Каталог;
	
	Возврат УправлениеКонсолью;

КонецФункции // ()

// Добавляет Инструкцию к пакету
//
// Параметры:
//  Программа  - Структура - Набор команд для выполнения
//
//  Инструкция  - Структура - Описание команды для выполнения
//
// Возвращаемое значение:
//   ОбщийМодуль   - Для цепочного вызова
//
Функция ДобавитьИнструкцию(Программа, Инструкция) Экспорт

	Ошибка = Неопределено;
	Если Не КорректнаяПрограмма(Программа, Ошибка) Тогда
	
		ВызватьИсключение ОшибкаПередачиПрограммы(Ошибка);
	
	КонецЕсли;
	Если Не КорректнаяИнструкция(Инструкция, Ошибка) Тогда
	
		ВызватьИсключение ОшибкаПередачиИнструкции(Ошибка);
	
	КонецЕсли;
	
	Инструкции = ПолучитьЭлементыПрограммы(Программа);

	Инструкции.Добавить(Инструкция);
	
	Возврат УправлениеКонсолью;

КонецФункции // ()

// По описанию команд собирает в строку
//
// Параметры:
//  Значение  - Структура - Описание пакета команд
//
// Возвращаемое значение:
//   Структура   - Данные для запуска команд (Текст команд и Кодировка)
//
Функция СобратьПрограмму(Значение) Экспорт

	Ошибка = Неопределено;
	Если Не КорректнаяПрограмма(Значение, Ошибка) Тогда
	
		ВызватьИсключение ОшибкаПередачиПрограммы(Ошибка);
	
	КонецЕсли;

	Данные = Новый Структура;
	
	Текст = СобратьТекстПрограммы(Значение);
	Данные.Вставить("Текст", Текст);
	Данные.Вставить("Кодировка", Значение["Кодировка"]);
	Данные.Вставить("ТекущийКаталог", Значение["ТекущийКаталог"]);
	
	ИсполнительСкрипта = ОпределитьИсполнителя();
	Данные.Вставить("Исполнитель", ИсполнительСкрипта);
	
	Возврат Данные;

КонецФункции // ()

#Область ГотовыеКоманды

// Устанавливает флаг создания команды отключения вывода консоли
//
// Параметры:
//  Программа  - Структура - Набор команд для выполнения
//
// Возвращаемое значение:
//   ОбщийМодуль   - Для цепочного вызова
//
Функция ДобавитьОтключениеВыводаПрограммы(Программа) Экспорт

	Ошибка = Неопределено;
	Если Не КорректнаяПрограмма(Программа, Ошибка) Тогда
	
		ВызватьИсключение ОшибкаПередачиПрограммы(Ошибка);
	
	КонецЕсли;

	Если ПарсингДокументовОбщийКлиентСервер.ЭтоWindows() Тогда
	
		СоздаватьКоманду(Программа, "ВыводНаКонсоль");
	
	КонецЕсли;
	
	Возврат УправлениеКонсолью;

КонецФункции // ()

// Устанавливает флаг создания команды изменения кодировки консоли
//
// Параметры:
//  Программа  - Структура - Набор команд для выполнения
//
// Возвращаемое значение:
//   ОбщийМодуль   - Для цепочного вызова
//
Функция ДобавитьИзменениеКодировкиКонсоли(Программа) Экспорт

	Ошибка = Неопределено;
	Если Не КорректнаяПрограмма(Программа, Ошибка) Тогда
	
		ВызватьИсключение ОшибкаПередачиПрограммы(Ошибка);
	
	КонецЕсли;
	
	Если ПарсингДокументовОбщийКлиентСервер.ЭтоWindows() Тогда
	
		СоздаватьКоманду(Программа, "ИзменитьКодировку");
	
	КонецЕсли;
	
	Возврат УправлениеКонсолью;

КонецФункции // ()

#КонецОбласти

#КонецОбласти

#Область ИнтерфейсИнструкции

// Инициализация Новой команды командной строки
//
// Возвращаемое значение:
//   Структура   - Загатовка для формирования команды
//
Функция НоваяИнструкция() Экспорт

	Данные = Новый Структура;
	Данные.Вставить("Элементы", Новый Массив);
	
	Возврат Данные;

КонецФункции // ()

// Добавляет параметр к описанию инструкции
//
// Параметры:
//  Инструкция  - Структура - Описание команды для выполнения
//
//  Элемент  - Строка - Любой параметр команды командной строки
//                 Допускается Числовое значение
//
// Возвращаемое значение:
//   ОбщийМодуль   - Для цепочного вызова
//
Функция ДобавитьПараметр(Инструкция, Значение) Экспорт

	Возврат Добавить(Инструкция, Значение);

КонецФункции // ()

// Добавляет Флаг к описанию инструкции
//
// Параметры:
//  Инструкция  - Структура - Описание команды для выполнения
//
//  Значение  - Строка - Имя параметра команды
//                     Добавляется '-' к Имени
//
// Возвращаемое значение:
//   ОбщийМодуль   - Для цепочного вызова
//
Функция ДобавитьОпцию(Инструкция, Значение) Экспорт

	Возврат Добавить(Инструкция, "-" + Значение);

КонецФункции // ()

// Добавляет Имя команды к описанию инструкции
//
// Параметры:
//  Инструкция  - Структура - Описание команды для выполнения
//
//  Значение  - Строка - Имя выполняемой команды
//
// Возвращаемое значение:
//   ОбщийМодуль   - Для цепочного вызова
//
Функция ДобавитьКоманду(Инструкция, Значение) Экспорт

	Возврат Добавить(Инструкция, Значение, 0);

КонецФункции // ()

// По описанию команды собирает в строку
//
// Параметры:
//  Значение  - Структура - Описание команды
//
// Возвращаемое значение:
//   Строка   - Текст команды
//
Функция СобратьИнструкцию(Значение) Экспорт

	Ошибка = Неопределено;
	Если Не КорректнаяИнструкция(Значение, Ошибка) Тогда
	
		ВызватьИсключение ОшибкаПередачиИнструкции(Ошибка);
	
	КонецЕсли;
	
	Элементы = ПолучитьЭлементыИнструкции(Значение);
	
	Возврат СтрСоединить(Элементы, " ");

КонецФункции // ()

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Добавляет Элемент к описанию инструкции
//
// Параметры:
//  Инструкция  - Структура - Описание команды для выполнения
//
//  Элемент  - Строка - Любой параметр команды командной строки
//                 Допускается Числовое значение
//  Номер  - Число - Индекс вставки элемента
//                 Проверяется только на отрицательное значение
//
// Возвращаемое значение:
//   ОбщийМодуль   - Для цепочного вызова
//
Функция Добавить(Инструкция, Элемент, Номер = Неопределено) Экспорт

	Ошибка = Неопределено;
	Если Не КорректнаяИнструкция(Инструкция, Ошибка) Тогда
	
		ВызватьИсключение ОшибкаПередачиИнструкции(Ошибка);
	
	КонецЕсли;
	
	Если Не КорректныйЭлемент(Элемент, Ошибка) Тогда
	
		ВызватьИсключение ОшибкаПередачиЭлемента(Ошибка);
	
	КонецЕсли;
	
	Если Номер <> Неопределено Тогда
	
		ДобавитьЭлементПоИндексу(Инструкция, Элемент, Номер);
		
	Иначе
		
		ДобавитьЭлемент(Инструкция, Элемент);
		
	КонецЕсли;
	
	Возврат УправлениеКонсолью;

КонецФункции // ()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СобратьТекстПрограммы(Программа)

	ПакетКомманд = Новый Массив;
	
	Инструкции = Программа["Инструкции"];
	Для каждого Инструкция Из Инструкции Цикл
	
		Ошибка = Неопределено;
		Если Не КорректнаяИнструкция(Инструкция, Ошибка) Тогда
		
			ВызватьИсключение ОшибкаПередачиИнструкции(Ошибка);
		
		КонецЕсли;
		
		Если ПакетКомманд.Количество() <> 0 Тогда
		
			ПакетКомманд.Добавить("&");
			ПакетКомманд.Добавить(Символы.ПС);
		
		КонецЕсли;
		ЗаполнитьПакетПоИнструкции(ПакетКомманд, Инструкция);
	
	КонецЦикла;
	
	Возврат СтрСоединить(ПакетКомманд, " ");

КонецФункции // ()

Процедура ДобавитьЭлемент(Инструкция, Элемент)

	Элементы = ПолучитьЭлементыИнструкции(Инструкция);
	Элементы.Добавить(Элемент);

КонецПроцедуры

Процедура ДобавитьЭлементПоИндексу(Инструкция, Элемент, Номер)

	Элементы = ПолучитьЭлементыИнструкции(Инструкция);
	Если Номер < 0 Тогда
	
		ВызватьИсключение ОшибкаПередачиНомера(Номер);
	
	КонецЕсли;

	Элементы.Вставить(Номер, Элемент);

КонецПроцедуры

Процедура УстановитьКодировкуДляПрограммы(Программа, Кодировка)

	Программа["Кодировка"] = Кодировка;

КонецПроцедуры

Функция ПолучитьЭлементыПрограммы(Программа)

	Возврат Программа["Инструкции"];

КонецФункции // ()

Функция ПолучитьЭлементыИнструкции(Инструкция)

	Возврат Инструкция["Элементы"];

КонецФункции // ()

Процедура ЗаполнитьПакетПоИнструкции(ПакетКомманд, Инструкция)

	Элементы = ПолучитьЭлементыИнструкции(Инструкция);
	Для каждого Элемент Из Элементы Цикл
	
		ПакетКомманд.Добавить(Элемент);
	
	КонецЦикла;

КонецПроцедуры

Функция КодКодировки(Знач Кодировка)

	Коды = КодыКодировкиWindows();
	Если ТипЗнч(Кодировка) = Тип("Строка") Тогда
	
		Кодировка = ВРег(Кодировка);
	
	КонецЕсли;
	Код = Коды.Получить(Кодировка);
	
	Возврат Код;

КонецФункции // ()

Функция КодыКодировкиWindows()

	Данные = Новый Соответствие;
	Данные.Вставить("cp866", "866");
	Данные.Вставить(КодировкаТекста.OEM, "866");
	Данные.Вставить("windows-1251", "1251");
	Данные.Вставить("UTF-8", "65001");
	Данные.Вставить(КодировкаТекста.UTF8, "65001");
	
	Возврат Данные;

КонецФункции // ()

Функция ОпределитьИсполнителя()

	Исполнитель = "";
	
	Если ПарсингДокументовОбщийКлиентСервер.ЭтоLinux() Тогда
	
		Исполнитель = "bash";
		Проверяльщик = "bash";
		
	
	ИначеЕсли ПарсингДокументовОбщийКлиентСервер.ЭтоWindows() Тогда
	
		Исполнитель = "powershell.exe -WindowStyle hidden -executionpolicy bypass -File";
		Проверяльщик = "powershell.exe pwd";
	
	Иначе
	
		ВызватьИсключение "Под текущей платформой операции не определены";
	
	КонецЕсли;
	
	КодВозврата = Неопределено;
	Ошибка = "";
	
	Попытка
	
		ЗапуститьПриложение(Проверяльщик, , Истина, КодВозврата);
	
	Исключение
		Ошибка = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если КодВозврата <> Неопределено
		И КодВозврата <> 0 Тогда
	
		Ошибка = "Код ошибки полученной из командной строки: " + Строка(КодВозврата);
	
	КонецЕсли;
	
	Если Не ПустаяСтрока(Ошибка) Тогда
	
		ВызватьИсключение  УправленияСообщениямиКлиентСервер.ИнструкцияКОшибке(
			"Обращение к " + Проверяльщик + " вызвало ошибку",
			СтрШаблон(
				"Не хватает прав на исполнение
				|
				|Описание ошибки:
				|%1",
				Ошибка
			)
		);
	
	КонецЕсли;
	
	Возврат Исполнитель;

КонецФункции // ()

#Область СозданиеКоманд

Функция СформироватьФайлИсполнения(ДанныеИсполнения)

	ИсполняемыйФайл = Новый ТекстовыйДокумент;
	ТекстИсполнения = ТекстИсполнения(ДанныеИсполнения);
	ИсполняемыйФайл.ДобавитьСтроку(ТекстИсполнения);
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
	
		ВызватьИсключение "Не реализовано";
	
	КонецЕсли;
	
	Расширение = ?(
		ПарсингДокументовОбщийКлиентСервер.ЭтоWindows(),
		".cmd",
		".sh"
	);
	Файл = Новый Файл(ДанныеИсполнения["ТекущийКаталог"].ПолноеИмя + ПолучитьРазделительПути() + "temp" + Расширение);
	Поток = Новый ФайловыйПоток(
		Файл.ПолноеИмя,
		РежимОткрытияФайла.ОткрытьИлиСоздать,
		ДоступКФайлу.Запись
	);
	Попытка
	
		ИсполняемыйФайл.Записать(Поток, Кодировка(ДанныеИсполнения), , Ложь);
	
	Исключение
		УправленияСообщениямиКлиентСервер.ИнструкцияКОшибке(
			"Не удалось записать временный файл",
			"Возможно нет прав на запись для USR1CV8"
		);
	КонецПопытки;
	Поток.Закрыть();
	
	Возврат Файл.ПолноеИмя;

КонецФункции // ()

Функция НадоСоздатьКоманду(Программа, Ключ)

	Команды = Программа["ГотовыеКоманды"];
	Возврат Команды[Ключ];

КонецФункции // ()

Функция НадоСоздатьКомандуКодировки(Программа)

	Возврат НадоСоздатьКоманду(Программа, "ИзменитьКодировку");

КонецФункции // ()

Функция НадоСоздатьКомандуОтключенияВвода(Программа)

	Возврат НадоСоздатьКоманду(Программа, "ВыводНаКонсоль");

КонецФункции // ()

Функция КомандаОтключенияВыводаПрограммы()

	Инструкция = НоваяИнструкция();
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент() Тогда
	
		Добавить(Инструкция, "@ECHO OFF");
	
	КонецЕсли;
	// "Линукс"
	//Если Ложь Тогда
	//
	//	"> /dev/null";// В Конец
	//
	//КонецЕсли;
	
	Возврат Инструкция;

КонецФункции // ()

Функция КомандаКодировки(Кодировка = "UTF-8")

	Инструкция = НоваяИнструкция();
	Если ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент() Тогда
	
		ДобавитьКоманду(Инструкция, "@chcp");
		ДобавитьПараметр(Инструкция, КодКодировки(Кодировка));
	
	КонецЕсли;
	
	Возврат Инструкция;

КонецФункции // ()

Процедура СоздаватьКоманду(Программа, Ключ)

	Команды = Программа["ГотовыеКоманды"];
	Команды[Ключ] = Истина;

КонецПроцедуры

#КонецОбласти

#Область ПроверкиДанных

Функция ДопустимаяКодировка(Кодировка)

	Машина = ОбщегоНазначенияКлиентСервер;
	Если Машина.ЭтоWindowsКлиент() Тогда
	
		Если КодКодировки(Кодировка) = Неопределено Тогда
		
			Возврат Ложь;
		
		КонецЕсли;
	
	КонецЕсли;
	Если Машина.ЭтоLinuxКлиент() Тогда
	
		// Сами знают что делают))
		// Пока не реализовано
		Возврат Истина;
	
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ()

Функция КорректнаяПрограмма(Программа, Ошибка)

	Если ТипЗнч(Программа) <> Тип("Структура") Тогда
	
		Ошибка = "Передан не верный тип данных: " + ТипЗнч(Программа);
		Возврат Ложь;
	
	КонецЕсли;
	
	ПустаяПрограмма = НоваяПрограмма();
	Для каждого ПолеПрограммы Из ПустаяПрограмма Цикл
	
		Если Не Программа.Свойство(ПолеПрограммы.Ключ) Тогда
		
			Ошибка = "В структуре Программы нет необходимых полей: "
				+ ПолеПрограммы.Ключ;
			Возврат Ложь;
		
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Истина;

КонецФункции // ()

Функция КорректнаяИнструкция(Инструкция, Ошибка)

	Если ТипЗнч(Инструкция) <> Тип("Структура") Тогда
	
		Ошибка = "Передан не верный тип данных: " + ТипЗнч(Инструкция);
		Возврат Ложь;
	
	КонецЕсли;
	
	ПустаяИнструкция = НоваяИнструкция();
	Для каждого ПолеИнструкции Из ПустаяИнструкция Цикл
	
		Если Не Инструкция.Свойство(ПолеИнструкции.Ключ) Тогда
		
			Ошибка = "В структуре Инструкции нет необходимых полей: "
				+ ПолеИнструкции.Ключ;
			Возврат Ложь;
		
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Истина;

КонецФункции // ()

Функция КорректныйЭлемент(Элемент, Ошибка)

	ТипЭлемента = ТипЗнч(Элемент);
	Если Не (ТипЭлемента = Тип("Строка")
		ИЛИ ТипЭлемента = Тип("Число")) Тогда
	
		Ошибка = "Передан не верный тип данных: " + ТипЭлемента;
		Возврат Ложь;
	
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ()

#КонецОбласти

#Область ОшибкиПриРаботеСМодулем

Функция ОшибкаПараметраФункции()

	Возврат "Не корректный параметр функции";

КонецФункции

Функция ОшибкаПередачиПрограммы(Ошибка)

	Возврат СтрШаблон(
		ШаблонОшибкиПередачиПараметра(),
		ОшибкаПараметраФункции(),
		"Программа",
		Ошибка
	);

КонецФункции // ()

Функция ОшибкаПередачиИнструкции(Ошибка)

	Возврат СтрШаблон(
		ШаблонОшибкиПередачиПараметра(),
		ОшибкаПараметраФункции(),
		"Инструкция",
		Ошибка
	);

КонецФункции // ()

Функция ОшибкаПередачиЭлемента(Ошибка)

	Возврат СтрШаблон(
		ШаблонОшибкиПередачиПараметра(),
		ОшибкаПараметраФункции(),
		"Элемент",
		Ошибка
	);

КонецФункции // ()

Функция ОшибкаПередачиНомера(Номер)

	Возврат СтрШаблон(
		ШаблонОшибкиПередачиПараметра(),
		ОшибкаПараметраФункции(),
		"Номер",
		Номер
	);

КонецФункции // ()

Функция ШаблонОшибкиПередачиПараметра()

	Возврат "%1:
			|Ошибка в параметре - %2:
			|%3";

КонецФункции // ()

Функция ОшибкаПередачиКодировки(Кодировка)

	Возврат СтрШаблон(
		ШаблонОшибкиПередачиПараметра(),
		ОшибкаПараметраФункции(),
		"Кодировка",
		Кодировка
	);

КонецФункции // ()

#КонецОбласти

#КонецОбласти
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Обработчик команды "Переместить вверх" формы списка
Процедура ПереместитьЭлементВверхВыполнить(СписокРеквизит, СписокЭлемент) Экспорт
	
	ПереместитьЭлементВыполнить(СписокРеквизит, СписокЭлемент, Истина);
	
КонецПроцедуры

// Обработчик команды "Переместить вниз" формы списка
Процедура ПереместитьЭлементВнизВыполнить(СписокРеквизит, СписокЭлемент) Экспорт
	
	ПереместитьЭлементВыполнить(СписокРеквизит, СписокЭлемент, Ложь);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполнить операцию перемещения или восстановления порядка
Процедура ПереместитьЭлементВыполнить(СписокРеквизит, СписокЭлемент, Вверх)
	
	УстановленныеОтборы = Новый Структура;
	
	Если Не ПроверитьСписокПередОперацией(СписокРеквизит, СписокЭлемент, УстановленныеОтборы) Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = СписокЭлемент.ТекущаяСтрока;
	ОтображениеСписком = (СписокЭлемент.Отображение = ОтображениеТаблицы.Список);
	
	СтрОшибка = УдалитьНастройкаПорядкаЭлементов.ИзменитьПорядокЭлементов(Ссылка, УстановленныеОтборы, ОтображениеСписком, Вверх);
		
	Если СтрОшибка = "" Тогда
		СписокЭлемент.Обновить();
	Иначе
		//Чуров
		ПоказатьПредупреждение(,СтрОшибка);
		//Предупреждение(СтрОшибка);
	КонецЕсли;
	
КонецПроцедуры

// Проверить настройки списка перед выполнением операции
Функция ПроверитьСписокПередОперацией(СписокРеквизит, СписокЭлемент, УстановленныеОтборы)
	
	// Проверим, установлена ли текущая строка
	Если СписокЭлемент.ТекущаяСтрока = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверим установленную сортировку
	Если Не СортировкаВСпискеУстановленаПравильно(СписокРеквизит) Тогда
		//Чуров
		ПоказатьПредупреждение(,НСтр("ru = 'Перед изменением порядка элементов необходимо установить сортировку по реквизиту доп. упорядочивания по возрастанию!'"));
		//Предупреждение(НСтр("ru = 'Перед изменением порядка элементов необходимо установить сортировку по реквизиту доп. упорядочивания по возрастанию!'"));
		Возврат Ложь;
	КонецЕсли;
	
	// Проверим установленные отборы
	Если Не ПроверитьУстановленныеОтборыВСписке(СписокРеквизит, УстановленныеОтборы) Тогда
		//Чуров
		ПоказатьПредупреждение(,НСтр("ru = 'В списке неверно установлен отбор!'"));
		//Предупреждение(НСтр("ru = 'В списке неверно установлен отбор!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ЭлементГруппировки Из СписокРеквизит.Группировка.Элементы Цикл
		Если ЭлементГруппировки.Использование Тогда
			//Чуров
			ПоказатьПредупреждение(,НСтр("ru = 'Изменение порядка элементов невозможно при установленной группировке!'"));
			//Предупреждение(НСтр("ru = 'Изменение порядка элементов невозможно при установленной группировке!'"));
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Проверить, правильно ли  в списке установлена сортировка
Функция СортировкаВСпискеУстановленаПравильно(СписокРеквизит)
	
	ЭлементыПорядка = СписокРеквизит.Порядок.Элементы;
	
	// Найдем первый используемый элемент порядка
	Элемент = Неопределено;
	Для Каждого ЭлементПорядка Из ЭлементыПорядка Цикл
		Если ЭлементПорядка.Использование Тогда
			Элемент = ЭлементПорядка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Элемент = Неопределено Тогда
		// Не установлена никакая сортировка
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Элемент) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
		Если Элемент.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр Тогда
			ПолеРеквизита = Новый ПолеКомпоновкиДанных("РеквизитДопУпорядочивания");
			Если Элемент.Поле = ПолеРеквизита Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Получить информацию об установленных отборах и частично проверить их
Функция ПроверитьУстановленныеОтборыВСписке(СписокРеквизит, УстановленныеОтборы)
	
	УстановленныеОтборы.Вставить("ЕстьОтборПоРодителю",  Ложь);
	УстановленныеОтборы.Вставить("ЕстьОтборПоВладельцу", Ложь);
	
	ПолеРодитель1 = Новый ПолеКомпоновкиДанных("Родитель");
	ПолеРодитель2 = Новый ПолеКомпоновкиДанных("Parent");
	ПолеВладелец1 = Новый ПолеКомпоновкиДанных("Владелец");
	ПолеВладелец2 = Новый ПолеКомпоновкиДанных("Owner");
	
	Для Каждого Отбор Из СписокРеквизит.Отбор.Элементы Цикл
		
		Если Не Отбор.Использование Тогда
			// Отбор не используется
			Продолжить;
		ИначеЕсли ТипЗнч(Отбор) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			// Группа элементов отбора не допустима
			Возврат Ложь;
		ИначеЕсли Отбор.ВидСравнения <> ВидСравненияКомпоновкиДанных.Равно Тогда
			// Допустимо только сравнение на равенство
			Возврат Ложь;
		КонецЕсли;
		
		Если (Отбор.ЛевоеЗначение = ПолеРодитель1) ИЛИ (Отбор.ЛевоеЗначение = ПолеРодитель2) Тогда
			// Установлен отбор по родителю
			УстановленныеОтборы.ЕстьОтборПоРодителю = Истина;
		ИначеЕсли (Отбор.ЛевоеЗначение = ПолеВладелец1) ИЛИ (Отбор.ЛевоеЗначение = ПолеВладелец2) Тогда
			// Установлен отбор по владельцу
			УстановленныеОтборы.ЕстьОтборПоВладельцу = Истина;
		Иначе
			// Установлен отбор по реквизиту, по которому нельзя устанавливать отбор
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

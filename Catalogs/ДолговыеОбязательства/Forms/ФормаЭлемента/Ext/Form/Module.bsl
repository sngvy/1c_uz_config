
&НаСервере
Процедура ПриОткрытииНаСервере(Отказ)
	// Получим непредопределенное значение с сервера
	ЭтаФорма.РольРКЦ = РольДоступна("РКЦ");
	ЭтаФорма.РольАБД = РольДоступна("АБД");
	ДО = ЭтаФорма.Объект;
	Архив = Справочники.тсЗначенияСвойствОбъектов.НайтиПоНаименованию("Архив");
	Категория = ОбъектыСервер.ПолучитьЗначениеСвойства(ДО, "0181");
	Если Категория = Архив Тогда
		ЭтаФорма.ПредупреждениеАрхив = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПриОткрытииНаСервере(Отказ);
	// Отобрать документы
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтаФорма.Документы, "Договор", ЭтаФорма.Объект.Ссылка, ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный, );
	// Отобрать условия
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтаФорма.ДисконтИРестрктуризация, "Договор", ЭтаФорма.Объект.Ссылка, ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный, );
	// Проверка на архив
	Если ЭтаФорма.ПредупреждениеАрхив = Истина Тогда
		Предупреждение("Договор находится в архиве",,"Предупреждение");
		Если ЭтаФорма.РольРКЦ = Ложь И ЭтаФорма.РольАБД = Ложь Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

//ГруппаСтадии = ЭтаФорма.Элементы.Добавить("Стадиипроизводства", Тип("ГруппаФормы"), ЭтаФорма.Элементы.ГруппаСтадииПроизводства);


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЭтоНовыйОбъект = Объект.Ссылка.Пустая();
	
	Если Объект.Ссылка.Пустая() Тогда
		Пользователи.ЗаполнитьРеквизитыПоДаннымПользователя(Объект);
	КонецЕсли;
	//Объект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоКоду("0064     "));
	ДополнительныеРеквизиты.Загрузить(Объект.ДополнительныеРеквизиты.Выгрузить());
	Если Не Константы.УчетПоСтадиям.Получить() Тогда
		УправлениеСвойствами.ДобавитьДополнительныеРеквизиты(ЭтаФорма);
	Иначе
		СтадииПроизводства.ДобавитьСтадииПроизводства(ЭтаФорма);
		СтадииПроизводства.ДобавитьДополнительныеРеквизиты(ЭтаФорма);
	КонецЕсли;
	
	КолВо = Объект.Контрагенты.НайтиСтроки(
			Новый Структура("ВидКонтрагента", Перечисления.ВидыКонтрагентов.Должник)).Количество();
	Должник = ?(КолВо > 1, Объект.ВладелецДолжник, Объект.Должник);
	Элементы.Должник.РедактированиеТекста = (КолВо <= 1);
	
	КолВо = Объект.Контрагенты.НайтиСтроки(
			Новый Структура("ВидКонтрагента", Перечисления.ВидыКонтрагентов.Контрагент)).Количество();
	Контрагент = ?(КолВо > 1, Объект.ВладелецКонтрагент, Объект.Контрагент);
	Элементы.Контрагент.РедактированиеТекста = (КолВо <= 1);
	
	КолВо = Объект.Контрагенты.НайтиСтроки(
			Новый Структура("ВидКонтрагента", Перечисления.ВидыКонтрагентов.Кредитор)).Количество();	
	Кредитор = ?(КолВо > 1, Объект.ВладелецКредитор, Объект.Кредитор);
	Элементы.Кредитор.РедактированиеТекста = (КолВо <= 1);
	
	Услуга = ?(Объект.Услуги.Количество() > 1, Объект.ВладелецУслуга, Объект.Услуга);	
    Элементы.Услуга.РедактированиеТекста = (Объект.Услуги.Количество() <= 1);
	Элементы.Услуга.Видимость = Константы.УчетПоУслугам.Получить();	
	
	Элементы.События.Видимость = Не Константы.УчетПоСтадиям.Получить();
	
	//////ЗаполнитьТекущуюЗадолженность();
	
	УстановитьОтбор("Объект", Объект.Ссылка);
	
	//////Если ЭтоНовыйОбъект Тогда
	//////	ВладелецПриИзмененииНаСервере();
	//////КонецЕсли;
	
	ЗаполнитьТабличныйДокумент();
	ДолжникТелефоны.Параметры.УстановитьЗначениеПараметра("Ссылка", Объект.Должник);
	
	Если Не Объект.Ссылка.Пустая() И Не КонтрольСобытий.ДоступностьДанных(Объект.Ссылка) Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
		Элементы.ДолжникТелефоныИсходящийЗвонокТЧ.Доступность = Ложь;
		Элементы.ДолжникТелефоныОтправитьСМС.Доступность = Ложь;
	КонецЕсли;
		
	ДС_ИсполнительныеПроизводства.Параметры.УстановитьЗначениеПараметра("ДолговоеОбязательствоИП",Объект.Ссылка);
	
	ИспользоватьФССП = Константы.ИспользоватьИнтеграциюФССП.Получить();
	Если НЕ ИспользоватьФССП Тогда
		Элементы.ГруппаИсполПроизводство.Видимость = Ложь;
		Элементы.ФормаЗапросВФССП.Видимость = Ложь;
	КонецЕсли;
	
	КонстантаРН = Константы.РасчетНачислений.Получить();
	ПоказыватьРасчетныеДанные = РасчетЗадолженностиМФО_Переопределяемый.ПроизводитьРасчетыПоДанномуДолговомуОбязательству(Объект.Ссылка);
	Если Не КонстантаРН ИЛИ Не ПоказыватьРасчетныеДанные Тогда
		Элементы.ГруппаРасчетныеДанные.Видимость = Ложь;
	КонецЕсли;	
	
	Если КонстантаРН И ПоказыватьРасчетныеДанные Тогда
		РасчетЗадолженностиМФО.ЗаполнитьДекорацииОбъекта(ЭтаФорма);
	КонецЕсли;	
	//Заполнение ТЧ Исполнительные производства 25.01.2019
	//ВыборкаИП = ПолучитьИПпоДО(Объект.Ссылка);
	//Для Каждого стр из	ВыборкаИП Цикл
	//	НСтрока=Объект.ИсполПроизводства.Добавить();
	//	ЗаполнитьЗначенияСвойств(НСтрока,стр);
	//КонецЦикла;
	
	ИспользоватьБанкротство = Константы.ИспользоватьИнтеграциюФедРесурсБанкротство.Получить();
	Если НЕ ИспользоватьБанкротство Тогда
		Элементы.ФормаЗапросНаБанкротство.Видимость = Ложь;
	КонецЕсли;
	Если НЕ Объект.Должник.ЕстьДанныеОБанкротстве Тогда
		Элементы.ГруппаДанныеОБанкротстве.Видимость = Ложь;
	Иначе
		ДС_ДанныеОБанкротстве.Параметры.УстановитьЗначениеПараметра("Контрагент",Объект.Должник);
	КонецЕсли;
	
	//Cчитает количество дней в агенстве и общее количество дней по задолженности
	ДатаПередачиВАгентство = ОбъектыСервер.ПолучитьЗначениеСвойства(Объект,"0138     ");
	Если ДатаПередачиВАгентство <> Неопределено И ДатаПередачиВАгентство <> Дата("00010101") Тогда
	
		Значение = (НачалоДня(ТекущаяДата()) - НачалоДня(ДатаПередачиВАгентство))/(3600 * 24);
		ОбъектыСервер.ЗаписатьЗначениеСвойства(Объект.Ссылка,"0140     ", Значение);
	    ДнейПросрочки = ОбъектыСервер.ПолучитьЗначениеСвойства(Объект, "0139     ");
		Если ДнейПросрочки <> Неопределено Тогда
			ВсегоДней = ДнейПросрочки + Значение;
			ОбъектыСервер.ЗаписатьЗначениеСвойства(Объект.Ссылка,"0141     ", ВсегоДней);
		КонецЕсли;
	Иначе
		ОбъектыСервер.ЗаписатьЗначениеСвойства(Объект.Ссылка,"0141     ", 0);
		ОбъектыСервер.ЗаписатьЗначениеСвойства(Объект.Ссылка,"0140     ", 0);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция ПолучитьИПпоДО(Долговое)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ФССП_ИсполнительноеПроизводство.Ссылка КАК НомерИП,
	                      |	ФССП_СостояниеИПСрезПоследних.ДатаВозбуждения КАК ДатаВозбуждения,
	                      |	ФССП_СостояниеИПСрезПоследних.СтатусИП КАК СтатусИП,
	                      |	ФССП_СостояниеИПСрезПоследних.ОтделСудебныхПриставов КАК ОтделСудебныхПриставов,
	                      |	ФССП_СостояниеИПСрезПоследних.СудебныйПриставИсполнитель КАК СудебныйПриставИсполнитель
	                      |ИЗ
	                      |	Справочник.ФССП_ИсполнительноеПроизводство КАК ФССП_ИсполнительноеПроизводство
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФССП_СостояниеИП.СрезПоследних КАК ФССП_СостояниеИПСрезПоследних
	                      |		ПО ФССП_СостояниеИПСрезПоследних.ИП = ФССП_ИсполнительноеПроизводство.Ссылка
	                      |ГДЕ
	                      |	ФССП_ИсполнительноеПроизводство.ПометкаУдаления = ЛОЖЬ
	                      |	И ФССП_ИсполнительноеПроизводство.УдалитьДолговоеОбязательствоИП = &ДолговоеОбязательствоИП");
	Запрос.УстановитьПараметр("ДолговоеОбязательствоИП",Долговое);
	Выборка = Запрос.Выполнить().Выгрузить();
	Возврат Выборка;
		
КонецФункции


&НаСервере
Процедура ЗаполнитьТабличныйДокумент()
	ОбъектыСервер.ЗаполнитьОтчетОбъекта(Объект.Ссылка, ТабличныйДокумент, Константы.ОтчетДляДО);	
КонецПроцедуры

//////&НаСервере
//////Процедура УстановитьПараметрОтбора(Параметр, Значение, Использование = Истина)
//////	ПараметрДанных = События.Параметры.Элементы.Найти(Параметр);
//////	ПараметрДанных.Значение = Значение;
//////	ПараметрДанных.Использование = Использование;	
//////КонецПроцедуры

&НаСервере
Процедура УстановитьОтбор(Поле, Значение, Использование = Истина)
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(Поле);
	Для Каждого ЭлементОтбораСобытий Из События.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбораСобытий.ЛевоеЗначение = ПолеКомпоновки Тогда
			Если ЭлементОтбораСобытий.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				Запрос = Новый Запрос("ВЫБРАТЬ
				                      |	ИсполнительныеДокументы.Ссылка
				                      |ИЗ
				                      |	Справочник.ИсполнительныеДокументы КАК ИсполнительныеДокументы
				                      |ГДЕ
				                      |	ИсполнительныеДокументы.Владелец = &ДО");
				Запрос.УстановитьПараметр("ДО", Значение);
				Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
				Массив.Добавить(Значение);
				
				ЭлементОтбораСобытий.ПравоеЗначение = Массив;
			Иначе
				ЭлементОтбораСобытий.ПравоеЗначение = Значение;
			КонецЕсли;
			
			Если Использование <> Неопределено Тогда
				ЭлементОтбораСобытий.Использование = Использование;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекущуюЗадолженность()
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.НадписьТекущийОстаток.Видимость = Ложь;
	Иначе
		Элементы.НадписьТекущийОстаток.Видимость = Истина;
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ЗадолженностьПоДолговомуОбязательствуОстатки.СуммаРеглОстаток,
		                      |	ЗадолженностьПоДолговомуОбязательствуОстатки.СуммаДООстаток
		                      |ИЗ
		                      |	РегистрНакопления.ЗадолженностьПоДолговомуОбязательству.Остатки(&ТекущаяДата, ДолговоеОбязательство = &ДолговоеОбязательство) КАК ЗадолженностьПоДолговомуОбязательствуОстатки");
		Запрос.УстановитьПараметр("ДолговоеОбязательство", Объект.Ссылка);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			СуммаРеглОстаток = Результат.СуммаРеглОстаток;
			СуммаДООстаток = Результат.СуммаДООстаток;
		Иначе
			СуммаРеглОстаток = 0;
			СуммаДООстаток = 0;
		КонецЕсли;
		
		Элементы.НадписьТекущийОстаток.Заголовок = "Текущая задолженность: " + СуммаРеглОстаток + " " + 
				Константы.ВалютаРегламентированногоУчета.Получить().Наименование;
		Если Объект.ВалютаДоговора <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			Элементы.НадписьТекущийОстаток.Заголовок = Элементы.НадписьТекущийОстаток.Заголовок + "  (" + 
					СуммаДООстаток + " " + Объект.ВалютаДоговора.Наименование + ")";
		КонецЕсли;
		Элементы.НадписьТекущийОстаток.Заголовок = Элементы.НадписьТекущийОстаток.Заголовок + ";";		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	УправлениеСвойствами.ПередЗаписьюНаСервере2(ЭтаФорма, ТекущийОбъект, Отказ);
	УправлениеСвойствами.КонтрольУникальности(Справочники.ДолговыеОбязательства, ТекущийОбъект, "Наименование", ТекущийОбъект.Наименование, Отказ);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА СВОЙСТВ

&НаСервере
Функция ПолучитьТекущегоПользователя()
	Возврат ПараметрыСеанса.ТекущийПользователь;
КонецФункции

&НаКлиенте
Процедура ТипДолговогоОбязательстваПриИзменении(Элемент)
	ДобавитьДополнительныеРеквизиты();
КонецПроцедуры

&НаСервере
Процедура ДобавитьДополнительныеРеквизиты()
	//УправлениеСвойствами.ДобавитьДополнительныеРеквизиты(ЭтаФорма);	
	СтадииПроизводства.ДобавитьДополнительныеРеквизиты(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СобытияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	//ОткрытьЗначение(Элемент.ТекущиеДанные[Поле.Имя]);
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//ОбъектыКлиент.ОбщаяДополнительныеРеквизитыНачалоВыбора(Элемент,ДанныеВыбора,СтандартнаяОбработка,ДополнительныеРеквизиты,ЭтаФорма);
	Свойство = Неопределено;
	СвойствоВидСтроки = Неопределено;
	Код = Сред(Элемент.Имя, Найти(Элемент.Имя, "_") + 1);
	УправлениеСвойствами.ПолучитьСвойствоПоКоду(СтрЗаменить(Код, "_", " "), Свойство, СвойствоВидСтроки);
	
	Если СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Адрес") ИЛИ
			СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Телефон") Тогда
	    Строки = ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Свойство));
		ТекСтрокаПараметры = Строки[0].Параметры;
						
		СписокСтрок = СтрЗаменить(ТекСтрокаПараметры, ";", Символы.ПС);
		ЗначенияПолей = Новый СписокЗначений();
		Если СтрЧислоСтрок(СписокСтрок) > 1 Тогда
			Для Индекс = 1 По СтрЧислоСтрок(СписокСтрок) Цикл
				Стр = СтрПолучитьСтроку(СписокСтрок, Индекс);
				Если Стр <> "" Тогда 
					СписокПодстрок = СтрЗаменить(Стр, "=", Символы.ПС);
					ЗначенияПолей.Добавить(СтрПолучитьСтроку(СписокПодстрок, 2), СтрПолучитьСтроку(СписокПодстрок, 1));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;			
		Если СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Адрес") Тогда
			ИмяФормыРедактирования = "ОбщаяФорма.ВводАдреса";
		ИначеЕсли СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Телефон") Тогда
			ИмяФормыРедактирования = "ОбщаяФорма.ВводТелефона";
		КонецЕсли;
			
		Пар = Новый Структура;
		Пар.Вставить("ЗначенияПолей",                ЗначенияПолей);
		Пар.Вставить("Вид",                          ""); //"Адрес");
		Пар.Вставить("БылиВнесеныИзменения",         Ложь);
		Пар.Вставить("Представление",                Элемент.ТекстРедактирования);
		Пар.Вставить("РедактированиеТолькоВДиалоге", Не Элемент.РедактированиеТекста);
		Пар.Вставить("АдресТолькоРоссийский",        Ложь);
			
		//Чуров
		Результат = ОткрытьФорму(ИмяФормыРедактирования, Пар);	
		//Результат = ОткрытьФормуМодально(ИмяФормыРедактирования, Пар);	
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Строки[0].Значение = Результат.Представление;
			ЭтаФорма[Элемент.Имя] = Результат.Представление;
			ЗначенияПолей = Результат.ЗначенияПолей;
			Модифицированность = Истина;
			
			РезультатЗначение = "";
			Для Каждого Элемент Из ЗначенияПолей Цикл
				РезультатЗначение = РезультатЗначение + Элемент.Представление + "=" + Элемент.Значение + ";"; 
			КонецЦикла;
			
			Строки[0].Параметры = РезультатЗначение;
		КонецЕсли;
	ИначеЕсли СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.АдресФИАС") Тогда 
		
		Строки = ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Свойство)); 
		ТекСтрока = Строки[0]; 
		
		ИмяФормыРедактирования = "Обработка.РасширенныйВводКонтактнойИнформации.Форма.ВводАдреса"; 
		Если ТекСтрока.Параметры = "" Тогда 
			ЗнПолей = ""; 
		Иначе 
			ЗнПолей = бит_АдресныйКлассификатор.ПолучитьJSONИзXML(ТекСтрока.Параметры); 
		КонецЕсли; 
		Пар = Новый Структура; 
		Пар.Вставить("ЗначенияПолей", ЗнПолей); 
		Пар.Вставить("Вид", ""); //"Адрес"); 
		Пар.Вставить("БылиВнесеныИзменения", Ложь); 
		Пар.Вставить("Представление", Элемент.ТекстРедактирования); 
		Пар.Вставить("РедактированиеТолькоВДиалоге", Не Элемент.РедактированиеТекста); 
		Пар.Вставить("АдресТолькоРоссийский", Ложь); 
		
		Результат = ОткрытьФормуМодально(ИмяФормыРедактирования, Пар); 
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда 
			Строки[0].Значение = Результат.Представление; 
			ЭтаФорма[Элемент.Имя] = Результат.Представление; 
			Модифицированность = Истина; 
			СтрокаJSON = Результат.Значение; 
			
			Если СтрокаJSON = "" Тогда 
				СтрокаJSON = бит_АдресныйКлассификатор.ПолучитьJSONИзXML(СтрокаJSON); 
			КонецЕсли; 
			
			Строки[0].Параметры = бит_АдресныйКлассификатор.ПолучитьСтрокуXML(СтрокаJSON); 
		КонецЕсли;
		
	ИначеЕсли СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.ПутьКФайлу") Тогда	
		#Если Не ВебКлиент Тогда
			СтандартнаяОбработка = Ложь;
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			Диалог.Заголовок = "Выберите файл";
			Диалог.ПолноеИмяФайла = ЭтаФорма[Элемент.Имя];
			Диалог.МножественныйВыбор = Ложь;
			Если Диалог.Выбрать() Тогда
				ЭтаФорма[Элемент.Имя] = Диалог.ПолноеИмяФайла;
			КонецЕсли;	
		#Иначе	
			СтандартнаяОбработка = Ложь;
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			Диалог.Заголовок = "Выберите файл";
			Диалог.ПолноеИмяФайла = ЭтаФорма[Элемент.Имя];
			//Фильтр = "EXE (*.exe)|*.exe"; 
			//Диалог.Фильтр = Фильтр; 
			Диалог.МножественныйВыбор = Ложь;
			//Диалог.Каталог = "F:\";
			Диалог.Показать(Новый ОписаниеОповещения("ДополнительныеРеквизитыНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("Диалог, Элемент", Диалог, Элемент)));
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	Элемент = ДополнительныеПараметры.Элемент;
	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ЭтаФорма[Элемент.Имя] = Диалог.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтрокаЗапуска = "";
	Попытка
		Стр = СтрЗаменить(Элемент.Имя, "Реквизит_", "РеквизитСвойство_");
		Строки = ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Вычислить(Стр)));	
	Исключение		
		Стр = СтрЗаменить(Элемент.Имя, "Реквизит_", "РеквизитСвойство_");
		Строки = ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ОбъектыСервер.ПолучитьДопРиСПоКоду(
				СтрЗаменить(Сред(Элемент.Имя, 10), "_", " "))));
	КонецПопытки;
	Если Строки.Количество() > 0 Тогда
		СтрокаЗапуска = Строки[0].Значение;
	КонецЕсли;
		
	Попытка
		ЗапуститьПриложение(СтрокаЗапуска);
	Исключение
		#Если ВебКлиент Тогда
			ПоказатьЗначение(,СтрокаЗапуска);
		#КонецЕсли
		//Чуров
		//ПоказатьЗначение(,СтрокаЗапуска);
		ОткрытьЗначение(СтрокаЗапуска);
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	ВладелецПриИзмененииНаСервере();	
КонецПроцедуры

&НаСервере
Процедура ВладелецПриИзмененииНаСервере()
	Объект.Организация = Объект.Владелец.Организация;
	Объект.Контрагент = Объект.Владелец.Контрагент;
	Если Объект.Владелец.ЮрФизЛицо = Справочники.ЮрФизЛицо.ЮрЛицо Тогда
		Объект.ТипДолговогоОбязательства = Справочники.ТипыДолговыхОбязательств.СЮрЛицом;
	ИначеЕсли
		Объект.Владелец.ЮрФизЛицо = Справочники.ЮрФизЛицо.ФизЛицо Тогда
		Объект.ТипДолговогоОбязательства = Справочники.ТипыДолговыхОбязательств.СФизЛицом;
	КонецЕсли;
	
	ДополнительныеРеквизиты.Загрузить(Объект.ДополнительныеРеквизиты.Выгрузить());	
	УправлениеСвойствами.ДобавитьДополнительныеРеквизиты(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПечатьУЭД(Команда)
	#Если Вебклиент Тогда
		Сообщить("Данные функционал недоступен на Веб-Клиенте!");
	#Иначе	
		Форма = ПолучитьФорму("Обработка.ПечатьУЭД.Форма.Форма", , ЭтаФорма, Объект.Ссылка);
		Форма.Объект.Объект = Объект.Ссылка;
		//Чуров
		ОткрытьФорму(Форма);
		//Форма.Открыть();
	#КонецЕсли
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//////ЗаполнитьТекущуюЗадолженность();
	
	Если ЭтоНовыйОбъект И Константы.ДетализацияПоДО.Получить() Тогда
		//Принятие в работу Организации
		ДокОбъект = Документы.ПринятиеВРаботуОрганизации.СоздатьДокумент();	
		ДокОбъект.Дата = ТекущаяДата();
		ДокОбъект.Автор = УдалитьОбщегоНазначения.ТекущийПользователь();		
		ДокОбъект.Организация = ДокОбъект.Автор.Организация;

		ДокОбъект.Объекты.Добавить().Объект = ТекущийОбъект.Ссылка;
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
			Отказ = Истина;
			Возврат;
		КонецПопытки;
				
		ЭтоНовыйОбъект = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВыгрузитьТаблицу(ИмяТаблицы)
	Результат = Неопределено;
	Выполнить("Результат = Объект." + ИмяТаблицы + ".Выгрузить();");
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ЗагрузитьТаблицу(ИмяТаблицы, ТаблицаЗначений)
	Выполнить("Объект." + ИмяТаблицы + ".Загрузить(ТаблицаЗначений);");
	Модифицированность = Истина;
КонецПроцедуры

/////////////
&НаКлиенте
Функция ПроверитьТаблицу(Имя)
	МнЧисло = ПолучитьМножественноеЧисло(Имя);	
	Стр = Неопределено;
	Если Имя <> "Услуга" Тогда
		Выполнить("Стр = Новый Структура(""ВидКонтрагента"", ПредопределенноеЗначение(""Перечисление.ВидыКонтрагентов." +
				Имя + """));"); 
		ТЗ = Объект.Контрагенты.НайтиСтроки(Стр);
	Иначе
		ТЗ = Объект.Услуги;
	КонецЕсли;
	
			
	Если ТЗ.Количество() > 1 Тогда
		Выполнить("Элементы." + Имя + ".РедактированиеТекста = Ложь;");
		Стр = "";	
		Для Каждого Элемент Из ТЗ Цикл
			Стр = Стр + "; " + Строка(Элемент.Значение); //По хорошему надо разъименовать до Наименования, 
					                                     // но на сервер не охото ходить, поидее так сойдет
		КонецЦикла; 
		Выполнить("Объект." + Имя + " = ТЗ[0].Значение;");
		Возврат Сред(Стр, 3);
		
	ИначеЕсли ТЗ.Количество() = 1 Тогда
		Выполнить("Элементы." + Имя + ".РедактированиеТекста = Истина;");
		Выполнить("Объект." + Имя + " = ТЗ[0].Значение;");
        Возврат ТЗ[0].Значение;
		
	Иначе 
		Выполнить("Элементы." + Имя + ".РедактированиеТекста = Истина;");
		ИмяСправочника = ПолучитьИмяСтравочника(Имя);  
		Выполнить("Объект." + Имя + " = ПредопределенноеЗначение(""Справочник." + ИмяСправочника + ".ПустаяСсылка"");");
		Возврат ПредопределенноеЗначение("Справочник." + ИмяСправочника + ".ПустаяСсылка");
	КонецЕсли;	
КонецФункции

/////////////
&НаКлиенте
Процедура ПолеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;	
	МнЧисло = ПолучитьМножественноеЧисло(Элемент.Имя);
	ИмяСправочника = ПолучитьИмяСтравочника(Элемент.Имя);
	
	Если ИмяСправочника <> "УслугиПоДоговору" Тогда	
		Стр = Неопределено;                                 
		Выполнить("Стр = Новый Структура(""ВидКонтрагента"", ПредопределенноеЗначение(""Перечисление.ВидыКонтрагентов." + 
				Элемент.Имя + """));");
		Строки = Объект.Контрагенты.НайтиСтроки(Стр);
		Массив = Новый Массив();
		Для Каждого Элем Из Строки Цикл
			Массив.Добавить(Элем.Значение);
		КонецЦикла;	
		
		ПараметрыФормы = Новый Структура("Таблица, Имя, ИмяТипа", Массив, Элемент.Имя, 
				"СправочникСсылка." + ИмяСправочника);
		
		Форма = ПолучитьФорму("Справочник.ДолговыеОбязательства.Форма.ФормаНабора", ПараметрыФормы);
		//Чуров
		Результат = ОткрытьФорму(Форма);
		//Результат = Форма.ОткрытьМодально();

		Если Результат <> Неопределено Тогда
			МнЧисло = ПолучитьМножественноеЧисло(Элемент.Имя);
			
			Для Каждого Элем Из Строки Цикл
				Объект.Контрагенты.Удалить(Элем);
			КонецЦикла;
			
			Для Каждого Элем Из Результат Цикл
				Нов = Объект.Контрагенты.Добавить();
				Нов.Значение = Элем;
				Выполнить("Нов.ВидКонтрагента = ПредопределенноеЗначение(""Перечисление.ВидыКонтрагентов." + Элемент.Имя + """);");
			КонецЦикла;
			
			Выполнить(Элемент.Имя + " = ПроверитьТаблицу(Элемент.Имя);");
			Модифицированность = Истина;
		КонецЕсли;
		
	Иначе
		Массив = Новый Массив();
		Для Каждого Элем Из Объект.Услуги Цикл
			Массив.Добавить(Элем.Значение);
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура("Таблица, Имя, ИмяТипа", Массив, Элемент.Имя, 
				"СправочникСсылка." + ИмяСправочника);
		
		Форма = ПолучитьФорму("Справочник.ДолговыеОбязательства.Форма.ФормаНабора", ПараметрыФормы);
		//Чуров
		Результат = ОткрытьФорму(Форма);
		//Результат = Форма.ОткрытьМодально();
		Если Результат <> Неопределено Тогда
			МнЧисло = ПолучитьМножественноеЧисло(Элемент.Имя);
			Объект.Услуги.Очистить();
						
			Для Каждого Элем Из Результат Цикл
				Объект.Услуги.Добавить().Значение = Элем;
			КонецЦикла;
			
			Выполнить(Элемент.Имя + " = ПроверитьТаблицу(Элемент.Имя);");
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ПолеПриИзменении(Элемент)
	МнЧисло = ПолучитьМножественноеЧисло(Элемент.Имя);	
	Флаг = Неопределено;
	
	Если Элемент.Имя <> "Услуга" Тогда
		Стр = Неопределено;  
		Выполнить("Стр = Новый Структура(""ВидКонтрагента"", ПредопределенноеЗначение(""Перечисление.ВидыКонтрагентов." + 
				Элемент.Имя + """));");
		
		Для Каждого Элем Из Объект.Контрагенты.НайтиСтроки(Стр) Цикл
			Объект.Контрагенты.Удалить(Элем);
		КонецЦикла;
		
		//Выполнить("Объект." + МнЧисло + ".Очистить();");
		Выполнить("Флаг = " + Элемент.Имя + ".Пустая();");
		Выполнить("Объект." + Элемент.Имя + " = " + Элемент.Имя + ";");
		Если Не Флаг Тогда
			//Выполнить("Объект." + МнЧисло + ".Добавить().Значение = " + Элемент.Имя + ";");
			Нов = Объект.Контрагенты.Добавить();
			//Выполнить("Нов.Значение = " + Элемент.Имя + ";");
			Нов.Значение = ЭтаФорма[Элемент.Имя];
			//Выполнить("Нов.ВидКонтрагента = ПредопределенноеЗначение(""Перечисление.ВидыКонтрагентов." + Элемент.Имя + """);");
			Нов.ВидКонтрагента = ПредопределенноеЗНачение("Перечисление.ВидыКонтрагентов." + Элемент.Имя);
		КонецЕсли;
		
	Иначе
		Объект.Услуги.Очистить();
		Флаг = Услуга.Пустая();
		Объект.Услуга = Услуга;
		Если Не Флаг Тогда
			Объект.Услуги.Добавить().Значение = Услуга;		
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолеОткрытие(Элемент, СтандартнаяОбработка)
	Строки = Объект.Контрагенты.НайтиСтроки(Новый Структура("ВидКонтрагента", 
			ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов." + Элемент.Имя)));
		
	Если Строки.Количество() > 1 Тогда
		СтандартнаяОбработка = Ложь;
		//Чуров
		//ПоказатьЗначение(,Строки[0].Значение);
		ОткрытьЗначение(Строки[0].Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	МнЧисло = ПолучитьМножественноеЧисло(Элемент.Имя);
	
	Выполнить(Элемент.Имя + " = ПредопределенноеЗначение(""Справочник." + МнЧисло + ".ПустаяСсылка"");");
	Выполнить("Объект." + МнЧисло + ".Очистить();");
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМножественноеЧисло(Имя)
	Если Имя = "Услуга" Тогда
		Возврат "Услуги";
	ИначеЕсли Имя = "Должник" Тогда
		Возврат "Должники";
	ИначеЕсли Имя = "Контрагент" Тогда
		Возврат "Контрагенты";
	ИначеЕсли Имя = "Кредитор" Тогда
		Возврат "Кредиторы";
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПолучитьИмяСтравочника(Имя)
	Если Имя = "Услуга" Тогда
		Возврат "УслугиПоДоговору";
	ИначеЕсли Имя = "Должник" Тогда
		Возврат "Контрагенты";
	ИначеЕсли Имя = "Контрагент" Тогда
		Возврат "Контрагенты";
	ИначеЕсли Имя = "Кредитор" Тогда
		Возврат "Контрагенты";
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	////Если ЭтоНовыйОбъект Тогда
	////	Результат = Вопрос("Принять в работу текущего сотрудника?", РежимДиалогаВопрос.ДаНетОтмена);
	////	Если Результат = КодВозвратаДиалога.Отмена Тогда
	////		Отказ = Истина;
	////	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
	////		ЭтоНовыйОбъект = Ложь;
	////	КонецЕсли;
	////КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	//ОбъектыСервер.УдалитьПометкуОбИзменении(Отказ, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлы(Команда)
//	Сообщить(СтрЗаменить(Команда.Имя, "ОткрытьФайлы_", ""));
	
	Эл = Элементы["ДокументСтадия" + СтрЗаменить(Команда.Имя, "ОткрытьФайлы_", "")];
	
	Если Эл.ВыделенныеСтроки.Количество() = 0 Тогда 		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбрано ни одной строки, или список пуст!";
		Сообщение.Сообщить();	
		Возврат;
	КонецЕсли;
	
	
	Если Не РазыменоватьСсылку("Константы.ХранитьПрикрепляемыеФайлыНаСервере.Получить()") Тогда	
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	    Диалог.Заголовок = "Выберите каталог";
		Диалог.МножественныйВыбор = Ложь;
	    Если Диалог.Выбрать() Тогда
			Для Каждого ВыделСтрока Из Эл.ВыделенныеСтроки Цикл
			    Данные = СписокВыборНаСервере(ВыделСтрока);
		        ИмяФайла = Эл.ДанныеСтроки(ВыделСтрока).ИмяФайла;
			    Файл = Новый Файл(Диалог.Каталог + "\" + ИмяФайла);
			    Если Файл.Существует() Тогда 
				    КнопкиДиалога = Новый СписокЗначений;
				    КнопкиДиалога.Добавить(1, "Перезаписать");
				    КнопкиДиалога.Добавить(2, "Переименовать");
				    Ответ = Вопрос("Файл " + Файл.Имя + " уже существует", КнопкиДиалога,,, "Файл существует");
					Если Ответ = 1 Тогда
					  	Данные.Записать(Диалог.Каталог + "\" + Файл.Имя);
						ЗапуститьПриложение(Диалог.Каталог + "\" + Файл.Имя);
					Иначе
						НовоеИмяФайла = ОткрытьФормуМодально("РегистрСведений.ПрикрепляемыеФайлы.Форма.ФормаПереименования");
						Данные.Записать(Диалог.Каталог + "\" + НовоеИмяФайла + Файл.Расширение);
						ЗапуститьПриложение(Диалог.Каталог + "\" + НовоеИмяФайла + Файл.Расширение);
					КонецЕсли;
				Иначе
					Данные.Записать(Диалог.Каталог + "\" + Файл.Имя);
					ЗапуститьПриложение(Диалог.Каталог + "\" + Файл.Имя);
				КонецЕсли;
		    КонецЦикла;
		КонецЕсли;
		
	Иначе
		Для Каждого ВыделСтрока Из Эл.ВыделенныеСтроки Цикл
		    Данные = СписокВыборНаСервере(ВыделСтрока, Истина);		
			Файл = Новый Файл(Элементы.Список.ДанныеСтроки(ВыделСтрока).ИмяФайла);
			Каталог = РазыменоватьСсылку("Константы.КаталогХраненияПрикрепляемыхФайловНаСервере.Получить()");
			Если Прав(Каталог, 1) <> "\" Тогда
				Каталог = Каталог + "\";
			КонецЕсли;
		    ЗапуститьПриложение(Каталог + Данные + Файл.Расширение);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция РазыменоватьСсылку(Стр)
	Возврат Вычислить(Стр);
КонецФункции

&НаСервере
Функция СписокВыборНаСервере(ВыбраннаяСтрока, ПолучитьУИД = Ложь)
    Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
                          |	ПрикрепитьФайлыФайлы.Хранилище,
                          |	ПрикрепитьФайлыФайлы.УИД
                          |ИЗ
                          |	Документ.ПрикрепитьФайлы.Файлы КАК ПрикрепитьФайлыФайлы
                          |ГДЕ
                          |	ПрикрепитьФайлыФайлы.Ссылка = &Ссылка
                          |	И ПрикрепитьФайлыФайлы.НомерСтроки = &НомерСтроки");
	Запрос.УстановитьПараметр("Ссылка", ВыбраннаяСтрока.Регистратор);
	Запрос.УстановитьПараметр("НомерСтроки", ВыбраннаяСтрока.НомерСтроки_);
	Результат = Запрос.Выполнить().Выгрузить();
	Если ПолучитьУИД Тогда
		Возврат Результат[0].УИД;
	Иначе
		Возврат Результат[0].Хранилище.Получить();
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПрикрепитьФайлы(Команда)
	Форма = ПолучитьФорму("Документ.ПрикрепитьФайлы.Форма.ФормаДокумента",,ЭтаФорма);
	      
	//Если Список.Отбор.Элементы.Количество() > 0 Тогда
	Форма.Объект.Объект = Объект.Ссылка;
	//КонецЕсли;	
	//Чуров
	ОткрытьФорму(Форма);
	//Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ИсходящийЗвонокТЧ(Команда)
	Если Объект.Ссылка.Пустая() Тогда	
		Предупреждение("Сначала запишите объект!");		
		Возврат;
	КонецЕсли; 
	
	Если Элементы.ДолжникТелефоны.ТекущиеДанные = Неопределено Тогда
		Предупреждение("Сначала выберите телефонный номер!");		
		Возврат;		
	КонецЕсли;
	
	// Проверка на нарушение 230-ФЗ
	
	Если КонтрольСобытий.РезультативныеЗвонки(Объект.Должник) Тогда
		Ответ = Вопрос("Данное действие приведет к нарушению 230-ФЗ! Вы уверены?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да,"Контроль звонков");
		Если Ответ = КодВозвратаДиалога.Да Тогда
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Если ОбъектыСервер.ПолучитьЗначениеКонстанты("ЗапретТелефонныхНомеров") И КонтрольСобытий.ЗапретЗвонка(Элементы.ДолжникТелефоны.ТекущиеДанные.ЗапретЗвонка, Элементы.ДолжникТелефоны.ТекущиеДанные.НачалоЗапретаЗвонка, Элементы.ДолжникТелефоны.ТекущиеДанные.КонецЗапретаЗвонка) Тогда
	//	Предупреждение("Внимание! Для данного номера установлен запрет исходящих звонков");
	//	Возврат;
	// КонецЕсли;
	
	Если ОбъектыСервер.ПолучитьЗначениеКонстанты("ОтзывПерсональныхДанных") И ОбъектыСервер.РазыменоватьСсылку(Объект.Должник, "ОтзывПерсональныхДанных") Тогда
		Предупреждение("У данного должника отозваны персональные данные!",,"Отзыв персональных данных");
		Возврат;
	КонецЕсли;	
	
	Если КонтрольСобытий.КонтрольЧасовогоПояса(Объект.Должник) Тогда
		Предупреждение("Данное действие приведет к нарушению 230-ФЗ!",,"Контроль часового пояса");
		Возврат;
	КонецЕсли;
	
	НоваяЗадача = ПолучитьФорму("Задача.Мероприятие.Форма.ФормаМероприятия", Новый Структура("Объект", Объект.Ссылка),,Новый УникальныйИдентификатор());
	НоваяЗадача.Объект.Объект = ЭтаФорма.Объект.Ссылка;
	НоваяЗадача.Объект.ТипМероприятия = ПредопределенноеЗначение("Справочник.ТипыМероприятий.ТелефонныйЗвонокИсходящий");
	// НоваяЗадача.Объект.Контакт = РезультатНомер;
	НоваяЗадача.КонтрагентКЛ = ЭтаФорма.Должник;
	НоваяЗадача.Открыть();
	ВидТелефонии = Бит_ТелефонияСерверПереопределяемый.ПолучитьВидТелефонии();
	НоваяЗадача.КлючУникальности = Новый УникальныйИдентификатор;
	Если ВидТелефонии = ПредопределенноеЗначение("Перечисление.ВидыТелефонии.БИТФон") Тогда
		Ф = ПолучитьФорму("Обработка.бит_Битфон.Форма.ОсновнаяФорма");
		Ф.ФормаМероприятие = НоваяЗадача.КлючУникальности;
		// Проверить статус оператора
		Если Ф.Открыта() = Истина И Ф.СтатусПодключен = Истина И Ф.ИдетРазговор = Истина Тогда
			Предупреждение("На канале уже идет разговор!",,"БИТ.Phone");
		ИначеЕсли Ф.Открыта() = Ложь Тогда
			Ф.Открыть();
			НоваяЗадача.Активизировать();
			Ф.НомерЛиния1 = ЭтаФорма.Элементы.ДолжникТелефоны.ТекущиеДанные.Номер;			
			ПоказатьОповещениеПользователя("Исходящий звонок",,"Начат набор выбранного номера...",БиблиотекаКартинок.NC_ИсходящийЗвонок);
			Ф.НачатьРазговорКл(Неопределено);
			Возврат;
		ИначеЕсли Ф.Открыта() = Истина И Ф.СтатусПодключен = Истина Тогда
			Ф.НомерЛиния1 = ЭтаФорма.Элементы.ДолжникТелефоны.ТекущиеДанные.Номер;
			ПоказатьОповещениеПользователя("Исходящий звонок",,"Начат набор выбранного номера...",БиблиотекаКартинок.NC_ИсходящийЗвонок);
			Ф.НачатьРазговорКл(Неопределено);
		ИначеЕсли Ф.Открыта() = Истина И Ф.СтатусПодключен = Ложь Тогда
			Ф.кнПодключить(Неопределено);
			Ф.КнОтбой(Неопределено);
			Ф.НомерЛиния1 = ЭтаФорма.Элементы.ДолжникТелефоны.ТекущиеДанные.Номер;			
			Ф.ОбработчикСобытияРегистрация("Успешно");
			ПоказатьОповещениеПользователя("Исходящий звонок",,"Начат набор выбранного номера...",БиблиотекаКартинок.NC_ИсходящийЗвонок);
			Ф.НачатьРазговорКл(Неопределено);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
//{{MRG[ <-> ]
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)  
	Если ИмяСобытия = "ЗаписьДолжника" Тогда 
		ЭтаФорма.Элементы.ДолжникТелефоны.Обновить(); 
		ЭтаФорма.ОбновитьОтображениеДанных(Элементы.ДолжникТелефоны);
		ЭтаФорма.ОбновитьОтображениеДанных();
	КонецЕсли; 
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник) 
//	  Если ИмяСобытия = "ЗаписьДолжника" Тогда 
//	      ЭтаФорма.Элементы.ДолжникТелефоны.Обновить(); 
//	      ЭтаФорма.ОбновитьОтображениеДанных(Элементы.ДолжникТелефоны);
//	      ЭтаФорма.ОбновитьОтображениеДанных();
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	  КонецЕсли; 
//}}MRG[ <-> ]
	Если ИмяСобытия = "ГрафикНачисленийПерерасчитан" Тогда
//{{MRG[ <-> ]
		ОбновитьДекорацииСервер();
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//  КонецПроцедуры
//}}MRG[ <-> ]
	КонецЕсли; 
КонецПроцедуры

&НаСервере 
Процедура ОбновитьДекорацииСервер()
	РасчетЗадолженностиМФО.ЗаполнитьДекорацииОбъекта(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ОтправитьСМСНаСервере()
	// Получим непредопределенное значение с сервера
	ЭтаФорма.РезультатОтправлено = Справочники.РезультатыМероприятий.НайтиПоНаименованию("Отправлено");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСМС(Команда)
	// Проверка на нарушение 230-ФЗ
	Если КонтрольСобытий.КонтрольЧасовогоПояса(Объект.Должник) Тогда
		Предупреждение("Данное действие приведет к нарушению 230-ФЗ!",,"Контроль часового пояса");
		Возврат;
	КонецЕсли;
	
	Если КонтрольСобытий.КонтрольСМС(Объект.Должник) Тогда
		Предупреждение("Данное действие приведет к нарушению 230-ФЗ!",,"Контроль СМС");
	Структура = КонтрольСобытий.КонтрольСМСПоКоличеству(Должник,ТекущаяДата(),Новый Структура);
		Возврат;
	КонецЕсли;
	
	ФормаСМС = ПолучитьФорму("Обработка.бит_Битфон.Форма.ОтправкаСМС");
	// ФормаСМС.ВладелецФормы = ЭтаФорма;
	стрСМСЛогин = "";
	стрСМСПароль = "";
	стрОтправитель = "";
	Автоинформирование.ПолучитьПараметрыОтправкиСМС(стрСМСЛогин, стрСМСПароль, стрОтправитель);
	ФормаСМС.СМСЛогин = стрСМСЛогин;
	ФормаСМС.СМСПароль = стрСМСПароль;
	Если ЗначениеЗаполнено(стрОтправитель) Тогда
		ФормаСМС.Элементы.Отправитель.СписокВыбора.Добавить(стрОтправитель);
		ФормаСМС.Отправитель = стрОтправитель;
	КонецЕсли;
	
	ФормаСМС.НомерПолучателя = Элементы.ДолжникТелефоны.ТекущиеДанные.Номер;
	ФормаСМС.Договор = ЭтаФорма.Объект.Ссылка; 
	ФормаСМС.ТекстСМС = Автоинформирование.ПолучитьПодсказку(Объект.Ссылка, ОбъектыСервер.РазыменоватьСсылку(ПредопределенноеЗначение("Справочник.ТипыМероприятий.ОтправкаСМС"), "ШаблонСМС"));
	ОтправитьСМСНаСервере();	

	НоваяЗадача = ПолучитьФорму("Задача.Мероприятие.Форма.ФормаМероприятия", Новый Структура("Объект", Объект.Ссылка),,Новый УникальныйИдентификатор());
    НоваяЗадача.Объект.Объект = ЭтаФорма.Объект.Ссылка;
	НоваяЗадача.Объект.ТипМероприятия = ПредопределенноеЗначение("Справочник.ТипыМероприятий.ОтправкаСМС");
	НоваяЗадача.Объект.Результат = РезультатОтправлено;
	// НоваяЗадача.Объект.Контакт = РезультатНомер;
	НоваяЗадача.КонтрагентКЛ = ЭтаФорма.Должник;
    НоваяЗадача.Открыть();
	// Проверить состояние разговора
	ФормаНабора = ПолучитьФорму("Обработка.бит_Битфон.Форма.ОсновнаяФорма");
	Если ФормаНабора.Открыта() = Истина И ФормаНабора.ИдетРазговор = Ложь Тогда
		ФормаНабора.кнОтключить(Неопределено);
	КонецЕсли;
	ФормаСМС.ОткрытьМодально();
КонецПроцедуры

&НаКлиенте
Процедура ЗапросВФССП(Команда)
	Форма = ПолучитьФорму("Обработка.ФССП_ЗапросВФССП.Форма.ФормаЗапроса",,ЭтаФорма);
	Форма.Объект.Должник = Объект.Должник;
	ЗапросФССПСервер(Объект.Должник,Форма.Объект.Фамилия,Форма.Объект.Имя,Форма.Объект.Отчество,Форма.Объект.ДатаРождения,Форма.Объект.КодРегиона);
	ОткрытьФорму(Форма);
КонецПроцедуры

&НаСервере
Процедура ЗапросФССПСервер(Должник,Фамилия,Имя,Отчество,ДР,Регион)	
	бит_ФССП_Переопределяемый.ЗаполнитьЗапрос(Должник,Фамилия,Имя,Отчество,ДР,Регион);
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	Объект.КодДО = Объект.Наименование;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьEmail(Команда)
	ФормаМаил = ПолучитьФорму("ОбщаяФорма.ФормаОтправкиEmailизКарточки");
	ФормаМаил.ВладелецФормы = ЭтаФорма;
	ФормаМаил.Открыть();	
КонецПроцедуры

&НаСервере
Процедура КалькуляторНаСервере(Калькулятор)
	
КонецПроцедуры

&НаКлиенте
Процедура Калькулятор(Команда)
	Форма = ПолучитьФорму("Обработка.РасчетГрафикаПлатежейИНачислений.Форма.Форма");
	Форма.Объект.Займ = Объект.Ссылка;
	ОткрытьФорму(Форма);	
КонецПроцедуры

&НаСервере
Функция ПолучитьОперативнуюИнфо(ИП)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ФССП_СостояниеИПСрезПоследних.Период КАК ДатаПоследнегоОбновления,
	                      |	ФССП_СостояниеИПСрезПоследних.ДатаВозбуждения КАК ДатаВозбуждения,
	                      |	ФССП_СостояниеИПСрезПоследних.СтатусИП КАК СтатусИсполнительногоПроизводства,
	                      |	ФССП_СостояниеИПСрезПоследних.НомерИД КАК НомерИсполнительногоДокумента,
	                      |	ФССП_СостояниеИПСрезПоследних.ОтделСудебныхПриставов КАК ОтделСудебныхПриставов,
	                      |	ФССП_СостояниеИПСрезПоследних.СудебныйПриставИсполнитель КАК СудебныйПриставИсполнитель
	                      |ИЗ
	                      |	Справочник.ФССП_ИсполнительноеПроизводство КАК ФССП_ИсполнительноеПроизводство
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФССП_СостояниеИП.СрезПоследних КАК ФССП_СостояниеИПСрезПоследних
	                      |		ПО (ФССП_СостояниеИПСрезПоследних.ИП = ФССП_ИсполнительноеПроизводство.Ссылка)
	                      |ГДЕ
	                      |	ФССП_ИсполнительноеПроизводство.ПометкаУдаления = ЛОЖЬ
	                      |	И ФССП_ИсполнительноеПроизводство.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка",ИП);
	Выборка = Запрос.Выполнить().Выгрузить();
	Возврат Выборка;
КонецФункции


&НаКлиенте
Процедура ДС_ИсполнительныеПроизводстваПриАктивизацииСтроки(Элемент)
	//ПодключитьОбработчикОжидания("ВывестиДанныеТекущегоЭлемента", 0.1, Истина);
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Попытка
			НомерИП = ТекДанные.НомерИП;
		Исключение
			НомерИП = Неопределено;
		КонецПопытки;	
	Иначе
		НомерИП = Неопределено;
	КонецЕсли;
	Отбор_ИП(НомерИП);	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиДанныеТекущегоЭлемента()
	ТекДанные = ЭтотОбъект.ТекущийЭлемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Попытка
			НомерИП = ТекДанные.НомерИП;
		Исключение
			НомерИП = Неопределено;
		КонецПопытки;	
	Иначе
		НомерИП = Неопределено;
	КонецЕсли;

	Отбор_ИП(НомерИП);
	ОтключитьОбработчикОжидания("ВывестиДанныеТекущегоЭлемента")
КонецПроцедуры


&НаСервере
Процедура Отбор_ИП(НомерИП)
	
	ТекИП = НомерИП;	
		
	Выборка = ПолучитьОперативнуюИнфо(ТекИП);
	ТаблицаОпераций = ПоследняяОперацияПоПредметам(ТекИП);
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	ДС_ОперативнаяИнформацияИП.Очистить();
	Для Каждого стр из Выборка Цикл
		Для Каждого Колонка из Выборка.Колонки Цикл
				НСтрока = ДС_ОперативнаяИнформацияИП.Добавить();
				ПреобразованноеИмяКолонки = ИменаКолонок(Колонка.Имя); 
				НСтрока.Параметр = ПреобразованноеИмяКолонки;
				Нстрока.ЗначениеПараметра =?(Колонка.Имя = "ДатаВозбуждения",Формат(Стр[Колонка.Имя],"ДФ=dd.MM.yyyy; ДЛФ=D"),Стр[Колонка.Имя]);
		КонецЦикла;
		Если ТаблицаОпераций.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого строкаОперация из ТаблицаОпераций Цикл 
			НСтрока = ДС_ОперативнаяИнформацияИП.Добавить();
			НСтрока.Параметр = "Тек." + Строка(строкаОперация.Предмет);
			Нстрока.ЗначениеПараметра = Формат(строкаОперация.СуммаОстаток,"ЧЦ=10; ЧДЦ=2");
			НСтрока = ДС_ОперативнаяИнформацияИП.Добавить();
			НСтрока.Параметр = Строка(строкаОперация.Предмет)+Строка(строкаОперация.Операция);
			Нстрока.ЗначениеПараметра = Формат(строкаОперация.Сумма,"ЧЦ=10; ЧДЦ=2");
			
		КонецЦикла;	
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция ИменаКолонок(Исходная)
	//Исходная="ВесИОбъемToBeOrNotToBe";
	Конечная=Лев(Исходная,1);
	Для Индекс=2 по СтрДлина(Исходная) цикл
		Символ=Сред(Исходная,Индекс,1);
		Конечная=Конечная+?(ВРег(Символ)=Символ," "+НРег(Символ),Символ);
	КонецЦикла;
	Возврат Конечная;
КонецФункции


&НаСервере
Функция ПоследняяОперацияПоПредметам(ИП)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	МАКСИМУМ(ФССП_ЗадолженностьПоПредметамИП.Период) КАК Период,
	                      |	ФССП_ЗадолженностьПоПредметамИП.ИсполнительноеПроизводство КАК ИсполнительноеПроизводство,
	                      |	ФССП_ЗадолженностьПоПредметамИП.Предмет КАК Предмет
	                      |ПОМЕСТИТЬ ВТ
	                      |ИЗ
	                      |	РегистрНакопления.ФССП_ЗадолженностьПоПредметамИП КАК ФССП_ЗадолженностьПоПредметамИП
	                      |ГДЕ
	                      |	ФССП_ЗадолженностьПоПредметамИП.ИсполнительноеПроизводство = &ИсполнительноеПроизводство
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ФССП_ЗадолженностьПоПредметамИП.ИсполнительноеПроизводство,
	                      |	ФССП_ЗадолженностьПоПредметамИП.Предмет
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	Период,
	                      |	ИсполнительноеПроизводство,
	                      |	Предмет
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ФССП_ЗадолженностьПоПредметамИП.Предмет КАК Предмет,
	                      |	ФССП_ЗадолженностьПоПредметамИП.Сумма КАК Сумма,
	                      |	ВЫБОР
	                      |		КОГДА ФССП_ЗадолженностьПоПредметамИП.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	                      |			ТОГДА "", начисление""
	                      |		ИНАЧЕ "", оплата""
	                      |	КОНЕЦ КАК Операция,
	                      |	ФССП_ЗадолженностьПоПредметамИПОстатки.СуммаОстаток КАК СуммаОстаток
	                      |ИЗ
	                      |	ВТ КАК ВТ
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ФССП_ЗадолженностьПоПредметамИП КАК ФССП_ЗадолженностьПоПредметамИП
	                      |		ПО ВТ.Период = ФССП_ЗадолженностьПоПредметамИП.Период
	                      |			И ВТ.ИсполнительноеПроизводство = ФССП_ЗадолженностьПоПредметамИП.ИсполнительноеПроизводство
	                      |			И ВТ.Предмет = ФССП_ЗадолженностьПоПредметамИП.Предмет
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ФССП_ЗадолженностьПоПредметамИП.Остатки КАК ФССП_ЗадолженностьПоПредметамИПОстатки
	                      |		ПО ВТ.ИсполнительноеПроизводство = ФССП_ЗадолженностьПоПредметамИПОстатки.ИсполнительноеПроизводство
	                      |			И ВТ.Предмет = ФССП_ЗадолженностьПоПредметамИПОстатки.Предмет");
	Запрос.УстановитьПараметр("ИсполнительноеПроизводство",ИП);
	Выборка = Запрос.Выполнить().Выгрузить();
	Возврат Выборка;
КонецФункции

&НаКлиенте
Процедура ДС_ОперативнаяИнформацияИПВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ДС_ОперативнаяИнформацияИПВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	#Если ВебКлиент Тогда
		СтандартнаяОбработка = Ложь;      
		Попытка
			ЭтоСправочник = ПроверкаТипа(Элемент.ТекущиеДанные[Сред(Поле.Имя, 27)]);
			Если ЭтоСправочник Тогда
				ПоказатьЗначение(,Элемент.ТекущиеДанные[Сред(Поле.Имя, 27)]);
			КонецЕсли;
		Исключение
			
		КонецПопытки;
	#Иначе		
		СтандартнаяОбработка = Ложь;      
		Попытка
			ЭтоСправочник = ПроверкаТипа(Элемент.ТекущиеДанные[Сред(Поле.Имя, 27)]);
			Если ЭтоСправочник Тогда
				ОткрытьЗначение(Элемент.ТекущиеДанные[Сред(Поле.Имя, 27)]);
			КонецЕсли
		Исключение
		КонецПопытки;
	#КонецЕсли
КонецПроцедуры 

&НаСервере
Функция ПроверкаТипа(Эл)
	 возврат Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Эл));
КонецФункции

&НаСервере
Процедура ОбновитьИсковоеПроизводствоСервер()
	Если Справочники.СтадииПроизводства.ИсковоеПроизводство.Используется Тогда
		СтадииПроизводства.ЗаполнитьИсковоеПроизводство(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПлатежныхСистем(Команда)
	
	псМандарин = объектыСервер.ПолучитьЗначениеКонстанты("ИспользоватьMandarin");
	
	Если псМандарин Тогда
		Форма = ПолучитьФорму("Обработка.MandarinОперации.Форма.Форма",,ЭтаФорма);
		Форма.Объект.ОбъектУчета = Объект.Ссылка;		
		ОткрытьФорму(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДС_ДанныеОБанкротствеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПараметрыФормы = Новый Структура("Ключ", Элемент.ТекущиеДанные.ДоБ);
	ОткрытьФорму("Справочник.ДелоОБанкротстве.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

&НаСервере
Процедура ЗапросНаБанкротствоНаСервере()
	БанкротствоСервер.СоздатьДоБ(Объект.Должник);
КонецПроцедуры

&НаКлиенте
Процедура ЗапросНаБанкротство(Команда)
	ЗапросНаБанкротствоНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтчетЗадолженностиНаСервере()
	ЗаполнитьТабличныйДокумент();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтчетЗадолженности(Команда)
	ОбновитьОтчетЗадолженностиНаСервере();
КонецПроцедуры

&НаСервере
Процедура НаписатьВВЦНаСервере()
	// Получим непредопределенное значение с сервера
	ЭтаФорма.ТипВЦ = Справочники.ТипыМероприятий.НайтиПоНаименованию("WhatsApp");
	ЭтаФорма.РезультатОтправлено = Справочники.РезультатыМероприятий.НайтиПоНаименованию("Отправлено");
КонецПроцедуры

&НаКлиенте
Процедура НаписатьВВЦ(Команда)
	// Проверка на нарушение 230-ФЗ
	Если КонтрольСобытий.КонтрольВЦ(Объект.Должник) Тогда
		Ответ = Вопрос("Данное действие приведет к нарушению 230-ФЗ! Вы уверены?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да,"Контроль WhatsApp");
		Если Ответ = КодВозвратаДиалога.Да Тогда
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если КонтрольСобытий.КонтрольЧасовогоПояса(Объект.Должник) Тогда
		Предупреждение("Данное действие приведет к нарушению 230-ФЗ!",,"Контроль часового пояса");
		Возврат;
	КонецЕсли;

	ФормаВЦ = ПолучитьФорму("ОбщаяФорма.ОтправкаНаWhatsApp");
	ФормаВЦ.Номер = СтрСоединить(СтрРазделить(Элементы.ДолжникТелефоны.ТекущиеДанные.Номер, "+( )"), "");
	ФормаВЦ.Договор = ЭтаФорма.Объект.Ссылка;
	НаписатьВВЦНаСервере();
	
	НоваяЗадача = ПолучитьФорму("Задача.Мероприятие.Форма.ФормаМероприятия", Новый Структура("Объект", Объект.Ссылка),,Новый УникальныйИдентификатор());
	НоваяЗадача.Объект.Объект = ЭтаФорма.Объект.Ссылка;
	НоваяЗадача.Объект.ТипМероприятия = ТипВЦ;
	НоваяЗадача.Объект.Результат = РезультатОтправлено;
	// НоваяЗадача.Объект.Контакт = РезультатНомер;
	НоваяЗадача.КонтрагентКЛ = ЭтаФорма.Должник;
	НоваяЗадача.Открыть();
	// Проверить состояние разговора
	ФормаНабора = ПолучитьФорму("Обработка.бит_Битфон.Форма.ОсновнаяФорма");
	Если ФормаНабора.Открыта() = Истина И ФормаНабора.ИдетРазговор = Ложь Тогда
		ФормаНабора.кнОтключить(Неопределено);
	КонецЕсли;
	ФормаВЦ.ОткрытьМодально();
КонецПроцедуры

&НаКлиенте
Процедура НайтиВВЦ(Команда)
	// Найти контакт через API
	ПоказатьОповещениеПользователя("Интеграция с WhatsApp",,"Поиск номера...",БиблиотекаКартинок.NC_ПодсистемаИнтеграцияСWhatsApp);
	ФормаВЦ = ПолучитьФорму("ОбщаяФорма.ОтправкаНаWhatsApp",,,Новый УникальныйИдентификатор());
	ФормаВЦ.Номер = СтрСоединить(СтрРазделить(Элементы.ДолжникТелефоны.ТекущиеДанные.Номер, "+( )"), "");
	ФормаВЦ.Договор = ЭтаФорма.Объект.Ссылка;
	ФормаВЦ.ПоискДолжника(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПоКАД(Команда)
	КомандаПроверкаПоКАД = "https://kad.arbitr.ru";
	ЗапуститьПриложение(КомандаПроверкаПоКАД);
КонецПроцедуры

&НаКлиенте
Процедура РозыскДолжника(Команда)
	ПоказатьОповещениеПользователя("Розыск должника",,"Поиск номера...",БиблиотекаКартинок.NC_РозыскДолжника);
	НомерДляПоиска = СтрСоединить(СтрРазделить(ЭтаФорма.Элементы.ДолжникТелефоны.ТекущиеДанные.Номер, "+( )"), "");
	КомандаРозыск = "https://data.intelx.io/saverudata/#/?n="+НомерДляПоиска;
    ЗапуститьПриложение(КомандаРозыск);
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьДокумент(Команда)
	ФормаДок = ПолучитьФорму("Документ.ЗапросДокументов.Форма.ФормаДокумента",,,Новый УникальныйИдентификатор());
	ФормаДок.Объект.Договор = ЭтаФорма.Объект.Ссылка;
	ФормаДок.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПоФССП(Команда)
	ПроверкаПоФССП = "https://fssp.gov.ru";
	ЗапуститьПриложение(ПроверкаПоФССП);
КонецПроцедуры

&НаСервере
Процедура ПолучитьОстатокНаСервере()
	// Получим непредопределенное значение с сервера
	НаборЗаписей = РегистрыСведений.ЗадолженностьПоОбъектамОстатки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ЭтаФорма.Объект.Ссылка);
	НаборЗаписей.Отбор.ТипЗадолженности.Установить(ПланыВидовХарактеристик.ТипыЗадолженности.НайтиПоНаименованию("Сумма"));
	НаборЗаписей.Прочитать(); 
	Для каждого ЗаписьНабора из НаборЗаписей Цикл
		ЭтаФорма.ДолговоеОбязательствоСуммаОстатка = ЗаписьНабора.СуммаДО;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РасчетУсловий(Команда)
    РасчетУсловий = ПолучитьФорму("ОбщаяФорма.РасчетУсловий",,,Новый УникальныйИдентификатор());
	// Получить сумму ДО
	ПолучитьОстатокНаСервере();
	РасчетУсловий.СуммаОстатка = ЭтаФорма.ДолговоеОбязательствоСуммаОстатка;
	// Получить номер ДО
	РасчетУсловий.СкрытоеПолеНомерДО = ЭтаФорма.Объект.Ссылка;
	РасчетУсловий.Открыть();
КонецПроцедуры

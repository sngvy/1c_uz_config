///////////////////////////////////////////////////////////////////////////////
// Общий серверный модуль подсистемы БИТ.Phone
// Содержит функции, реализация которых зависит от конфигурации
///////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
// === УТ 10.3 ===

// Возвращает строку, имя справочника контрагентов
Функция ПолучитьИмяСправочникаКонтрагентов() ЭКСПОРТ
	Возврат "Контрагенты";
КонецФункции

// Возвращает строку, имя справочника контактных лиц
Функция ПолучитьИмяСправочникаКонтактныхЛиц() ЭКСПОРТ
	Возврат "КонтактныеЛицаПоДолжнику";
КонецФункции

// Возвращает Булево - признак успешности поиска контрагента по номеру
// Параметр КороткийНомер должен быть не больше длины внешнего номера
// В случае успешного поиска ссылки на контрагента и/или контакное лицо возвращаются через параметры

&НаСервере
Функция НайтиКонтрагентаПоНомеруВКонтактах(Знач КороткийНомер, КонтрагентСсылка, КонтактноеЛицоСсылка) ЭКСПОРТ
	Если НЕ ЗначениеЗаполнено(КороткийНомер) ИЛИ бит_БИТфонСервер.ПолучитьФлагНеИскатьКонтрагента() Тогда
		КонтрагентСсылка = Справочники.Контрагенты.ПустаяСсылка();
		КонтактноеЛицоСсылка = Справочники.КонтактныеЛицаПоДолжнику.ПустаяСсылка();
		Возврат Ложь;
	КонецЕсли;
	
	НомерДляПоиска = КороткийНомер;
	длинаНомера = СтрДлина(КороткийНомер);
	длинаВнешнегоНомера = 10;//БИТфонСервер.ПолучитьДлинуВнешнегоНомера();
	Если длинаНомера >= длинаВнешнегоНомера Тогда
		НомерДляПоиска = Прав(КороткийНомер, длинаВнешнегоНомера);
	КонецЕсли;
	//
	стрПодобия = "%" + НомерДляПоиска + "%";
	//
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ДополнительныеРеквизитыИСведения.Ссылка
	                      |ПОМЕСТИТЬ Таб
	                      |ИЗ
	                      |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	                      |ГДЕ
	                      |	ДополнительныеРеквизитыИСведения.ВидКИ = &ВидКИ
	                      |	И НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	КонтрагентыДополнительныеРеквизиты.Ссылка,
	                      |	КонтрагентыДополнительныеРеквизиты.Значение КАК НомерТелефона
	                      |ИЗ
	                      |	Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Таб КАК Таб
	                      |		ПО КонтрагентыДополнительныеРеквизиты.Свойство = Таб.Ссылка
	                      |ГДЕ
	                      |	ВЫРАЗИТЬ(КонтрагентыДополнительныеРеквизиты.Значение КАК СТРОКА) ПОДОБНО &НомерТелефона
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	ДополнительныеСведения.Объект,
	                      |	ДополнительныеСведения.Значение
	                      |ИЗ
	                      |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Таб КАК Таб
	                      |		ПО ДополнительныеСведения.Свойство = Таб.Ссылка
	                      |ГДЕ
	                      |	ВЫРАЗИТЬ(ДополнительныеСведения.Значение КАК СТРОКА) ПОДОБНО &НомерТелефона
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	КонтрагентыТелефоны.Ссылка,
	                      |	КонтрагентыТелефоны.НомерДляПоиска
	                      |ИЗ
	                      |	Справочник.Контрагенты.Телефоны КАК КонтрагентыТелефоны
	                      |ГДЕ
	                      |	ВЫРАЗИТЬ(КонтрагентыТелефоны.НомерДляПоиска КАК СТРОКА) ПОДОБНО &НомерТелефона");
	Запрос.УстановитьПараметр("ВидКИ", Справочники.ВидыКИ.Телефон);
	Запрос.УстановитьПараметр("НомерТелефона", стрПодобия);


	Результат = Запрос.Выполнить();
	
	найден = Ложь;
	Если Результат.Пустой() Тогда
		КонтрагентСсылка = Справочники.Контрагенты.ПустаяСсылка();
		КонтактноеЛицоСсылка = Справочники.КонтактныеЛицаПоДолжнику.ПустаяСсылка();
	Иначе
		табл = Результат.Выгрузить();
		Для Каждого строкаТ Из табл Цикл
			НомерЦифр = строкаТ.НомерТелефона;
			длинаНомераЦифр = СтрДлина(НомерЦифр);
			Если длинаНомераЦифр > длинаВнешнегоНомера Тогда
				НомерЦифр = Прав(НомерЦифр, длинаВнешнегоНомера);
			КонецЕсли;
			// поиск полного соответствия
			Если НомерЦифр = НомерДляПоиска Тогда
				КонтрагентСсылка = строкаТ.Ссылка;
				найден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат найден;
КонецФункции

// Возвращает массив строк номеров контрагента
Функция НайтиНомераКонтрагента(КонтрагентСсылка) ЭКСПОРТ
	Возврат НайтиКонтактнуюИнформацию(КонтрагентСсылка, Неопределено);
КонецФункции

// Возвращает строку - номер контрагента по виду контактной информации
Функция НайтиНомерКонтрагента(КонтрагентСсылка, допСвойство) ЭКСПОРТ
	номер = "";
	массивНомеров = НайтиКонтактнуюИнформацию(КонтрагентСсылка, допСвойство);
	Если массивНомеров.Количество() > 0 Тогда
		номер = массивНомеров[0];
	КонецЕсли;
	Возврат номер;
КонецФункции

// Возвращает СписокЗначений - список видов телефонов
&НаСервере
Функция ПолучитьВидыКонтактнойИнформацииКонтрагента() ЭКСПОРТ
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//		|	ВидыКИ.Ссылка КАК Вид
	//		|ИЗ
	//		|	Справочник.ВидыКИ КАК ВидыКИ");
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВидыТелефонов.Ссылка КАК Вид
	                      |ИЗ
	                      |	Справочник.ВидыТелефонов КАК ВидыТелефонов");
	списокВидовКонтактнойИнформации = Новый СписокЗначений();
	списокВидовКонтактнойИнформации.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Вид"));
	Возврат списокВидовКонтактнойИнформации;
КонецФункции


&НаСервере
Функция ПолучитьСписокРеквизитовКонтрагента(типКонтрагента) ЭКСПОРТ
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЮрФизЛицоДополнительныеРеквизиты.Свойство КАК Вид
	                      |ИЗ
	                      |	Справочник.ЮрФизЛицо.ДополнительныеРеквизиты КАК ЮрФизЛицоДополнительныеРеквизиты
	                      |ГДЕ
	                      |	ЮрФизЛицоДополнительныеРеквизиты.Ссылка = &типКонтрагента
	                      |	И ЮрФизЛицоДополнительныеРеквизиты.Свойство.ВидКИ = &ВидКИ");
	Запрос.УстановитьПараметр("типКонтрагента", типКонтрагента);
	Запрос.УстановитьПараметр("ВидКИ", Справочники.ВидыКИ.Телефон);
	списокВидовКонтактнойИнформации = Новый СписокЗначений();
	списокВидовКонтактнойИнформации.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Вид"));
	Возврат списокВидовКонтактнойИнформации;
КонецФункции


&НаСервере
Функция ПолучитьВидыКонтрагентов() ЭКСПОРТ
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЮрФизЛицо.Ссылка КАК Вид
	                      |ИЗ
	                      |	Справочник.ЮрФизЛицо КАК ЮрФизЛицо");
	списокВидовКонтрагентов = Новый СписокЗначений();
	списокВидовКонтрагентов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Вид"));
	Возврат списокВидовКонтрагентов;
КонецФункции

&НаСервере
Функция ПолучитьВидыТелефонныхНомеров() ЭКСПОРТ
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВидыТелефонов.Ссылка КАК Вид
	                      |ИЗ
	                      |	Справочник.ВидыТелефонов КАК ВидыТелефонов
	                      |ГДЕ
	                      |	ВидыТелефонов.ПометкаУдаления = ЛОЖЬ");
	списокВидовТелефонов = Новый СписокЗначений();
	списокВидовТелефонов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Вид"));
	Возврат списокВидовТелефонов;
КонецФункции


// Возвращает массив строк номеров контрактного лица
Функция НайтиНомераКонтактногоЛица(КонтактноеЛицоСсылка) ЭКСПОРТ
	Возврат НайтиКонтактнуюИнформацию(КонтактноеЛицоСсылка, Неопределено);
КонецФункции

&НаСервере
Функция НайтиКонтактнуюИнформацию(СсылкаНаОбъект, допСвойство)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КонтрагентыТелефоны.Ссылка,
	                      |	КонтрагентыТелефоны.Номер КАК НомерТелефона
	                      |ИЗ
	                      |	Справочник.Контрагенты.Телефоны КАК КонтрагентыТелефоны
	                      |ГДЕ
	                      |	КонтрагентыТелефоны.Ссылка = &Ссылка
	                      |	И КонтрагентыТелефоны.ВидТелефона = &ДопСвойство");
	
	Если ДопСвойство = Неопределено Тогда
		Запрос.Текст = ("ВЫБРАТЬ
		                |	КонтрагентыДополнительныеРеквизиты.Значение КАК НомерТелефона
		                |ПОМЕСТИТЬ Таб
		                |ИЗ
		                |	Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
		                |ГДЕ
		                |	КонтрагентыДополнительныеРеквизиты.Ссылка = &Ссылка
		                |	И КонтрагентыДополнительныеРеквизиты.Свойство.ВидКИ = &Тип
		                |
		                |ОБЪЕДИНИТЬ ВСЕ
		                |
		                |ВЫБРАТЬ
		                |	ДополнительныеСведения.Значение
		                |ИЗ
		                |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		                |ГДЕ
		                |	ДополнительныеСведения.Объект = &Ссылка
		                |	И ДополнительныеСведения.Свойство.ВидКИ = &Тип
		                |
		                |ОБЪЕДИНИТЬ ВСЕ
		                |
		                |ВЫБРАТЬ
		                |	КонтрагентыТелефоны.Номер
		                |ИЗ
		                |	Справочник.Контрагенты.Телефоны КАК КонтрагентыТелефоны
		                |ГДЕ
		                |	КонтрагентыТелефоны.Ссылка = &Ссылка
		                |;
		                |
		                |////////////////////////////////////////////////////////////////////////////////
		                |ВЫБРАТЬ
		                |	Таб.НомерТелефона
		                |ИЗ
		                |	Таб КАК Таб
		                |ГДЕ
		                |	Таб.НомерТелефона <> """"");

			
	КонецЕсли;
	
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//                      |	КонтрагентыДополнительныеРеквизиты.Значение КАК НомерТелефона
	//                      |ИЗ
	//                      |	Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
	//                      |ГДЕ
	//                      |	КонтрагентыДополнительныеРеквизиты.Ссылка = &Ссылка
	//                      |	И КонтрагентыДополнительныеРеквизиты.Свойство = &допСвойство
	//                      |
	//                      |ОБЪЕДИНИТЬ ВСЕ
	//                      |
	//                      |ВЫБРАТЬ
	//                      |	ДополнительныеСведения.Значение
	//                      |ИЗ
	//                      |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	//                      |ГДЕ
	//                      |	ДополнительныеСведения.Объект = &Ссылка
	//                      |	И ДополнительныеСведения.Свойство = &допСвойство
	//                      |
	//                      |ОБЪЕДИНИТЬ ВСЕ
	//                      |
	//                      |ВЫБРАТЬ
	//                      |	КонтрагентыТелефоны.Номер
	//                      |ИЗ
	//                      |	Справочник.Контрагенты.Телефоны КАК КонтрагентыТелефоны
	//                      |ГДЕ
	//                      |	КонтрагентыТелефоны.Ссылка = &Ссылка");	
	//					  
	//Если допСвойство = Неопределено Тогда 
	//						  
	//	Запрос.Текст = ("ВЫБРАТЬ
	//	                |	КонтрагентыДополнительныеРеквизиты.Значение КАК НомерТелефона
	//	                |ИЗ
	//	                |	Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
	//	                |ГДЕ
	//	                |	КонтрагентыДополнительныеРеквизиты.Ссылка = &Ссылка
	//	                |	И КонтрагентыДополнительныеРеквизиты.Свойство.ВидКИ = &Тип
	//	                |
	//	                |ОБЪЕДИНИТЬ ВСЕ
	//	                |
	//	                |ВЫБРАТЬ
	//	                |	ДополнительныеСведения.Значение
	//	                |ИЗ
	//	                |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	//	                |ГДЕ
	//	                |	ДополнительныеСведения.Объект = &Ссылка
	//	                |	И ДополнительныеСведения.Свойство.ВидКИ = &Тип
	//	                |
	//	                |ОБЪЕДИНИТЬ ВСЕ
	//	                |
	//	                |ВЫБРАТЬ
	//	                |	КонтрагентыТелефоны.Номер
	//	                |ИЗ
	//	                |	Справочник.Контрагенты.Телефоны КАК КонтрагентыТелефоны
	//	                |ГДЕ
	//	                |	КонтрагентыТелефоны.Ссылка = &Ссылка");
	//КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("допСвойство", допСвойство);
	Запрос.УстановитьПараметр("Тип", Справочники.ВидыКИ.Телефон);
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НомерТелефона");
КонецФункции

// Возвращает ссылку на элемент справочника Пользователи
&НаСервере
Функция ПолучитьОсновногоМенеджераКонтрагента(контрагентСсылка) ЭКСПОРТ
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ОтветственныеСотрудники.Пользователь КАК Пользователь
	                      |ИЗ
	                      |	РегистрСведений.ОтветственныеСотрудники КАК ОтветственныеСотрудники
	                      |ГДЕ
	                      |	ОтветственныеСотрудники.Объект = &Объект
	                      |	И ОтветственныеСотрудники.ТипСотрудника = &ТипСотрудника");
	Запрос.УстановитьПараметр("ТипСотрудника", Константы.ТипСотрудникаКлиентМенеджер.Получить());
	Запрос.УстановитьПараметр("Объект", Справочники.ДолговыеОбязательства.НайтиПоРеквизиту("Должник", контрагентСсылка));
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Пользователь;
	Иначе
		Возврат ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
КонецФункции

Процедура ЗаписатьНомерТелефонаКонтрагента(контрагентСсылка, допСвойствоСсылка, стрНомер) ЭКСПОРТ	
	//строкаКонтакт = Неопределено;
	//обКонтрагент = КонтрагентСсылка.ПолучитьОбъект();
	//Для Каждого строкаИнф Из обКонтрагент.ДополнительныеРеквизиты Цикл
	//	Если строкаИнф.Свойство = допСвойствоСсылка Тогда 
	//		строкаКонтакт = строкаИнф;
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;
	//Если строкаКонтакт <> Неопределено Тогда
	//	строкаКонтакт.Значение = стрНомер;
	//Иначе
	//	строкаКонтакт = обКонтрагент.ДополнительныеРеквизиты.Добавить();
	//	строкаКонтакт.Свойство = допСвойствоСсылка;
	//	строкаКонтакт.Значение = стрНомер;
	//КонецЕсли;
	//обКонтрагент.Записать();
	
	Если НЕ ЗначениеЗаполнено(контрагентСсылка) Тогда
		Возврат;
	КонецЕсли;

	обКонтрагент = контрагентСсылка.ПолучитьОбъект();
	строка = обКонтрагент.Телефоны.Добавить();
	строка.ВидТелефона = допСвойствоСсылка;
	строка.Номер = стрНомер;
	УдалитьУправлениеКонтактнойИнформацией.РазбитьНомерТелефонаНаСоставляющие(строка, стрНомер);
	обКонтрагент.Записать();
	
КонецПроцедуры

Процедура ЗаписатьНомерТелефонаКонтрагентаЗамена(контрагентСсылка, допСвойствоСсылка, стрНомер) ЭКСПОРТ	
	// Боевкин
	// Здесь будет перезапись телефона, если понадобится
	
	//Если НЕ ЗначениеЗаполнено(контрагентСсылка) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//текущийНомерТелефона = бит_ТелефонияСерверПереопределяемый.НайтиНомерКонтрагента(КонтрагентСсылка, допСвойствоСсылка);

	//обКонтрагент = контрагентСсылка.ПолучитьОбъект();
	//строка = обКонтрагент.Телефоны.Добавить();
	//строка.ВидТелефона = допСвойствоСсылка;
	//строка.Номер = стрНомер;
	//обКонтрагент.Записать();
	//
КонецПроцедуры


// Возвращает ссылку на новый созданный документ события взаимодействия
&НаСервере
Функция СоздатьСобытие(флагВходящее, Контрагент, Номер, КонтактноеЛицо, стрЗаписьРазговора) ЭКСПОРТ
	ДокументСобытие = Задачи.Мероприятие.СоздатьЗадачу();	
	//	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ДолговыеОбязательства.Ссылка КАК Ссылка
	//	|ИЗ
	//	|	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	//	|ГДЕ
	//	|	ДолговыеОбязательства.Должник = &Должник";
	
	// Создавать мероприятие только по ДО в работе	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДолговыеОбязательства.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	|ГДЕ
	|	ДолговыеОбязательства.ДополнительныеРеквизиты.Значение.Наименование = ""В работе""
	|	И ДолговыеОбязательства.Должник = &Должник";
	//
	
	Запрос.УстановитьПараметр("Должник", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ДокументСобытие.Объект = ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		ДокументСобытие.Объект = Контрагент;
	КонецЕсли;
	//
	

	//ДокументСобытие.Объект = Контрагент;
	
	Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		ДокументСобытие.КонтактноеЛицо = КонтактноеЛицо;
	КонецЕсли;
			
	ДокументСобытие.Дата = ТекущаяДата();
	ДокументСобытие.ПланируемаяДата = ТекущаяДата();
	ДокументСобытие.ПланируемоеВремя = ТекущаяДата();
	ДокументСобытие.Контакт = Номер;
	
	ДокументСобытие.Комментарий = "";
	Если флагВходящее Тогда //ДокументСобытие.Входящий Тогда
		ДокументСобытие.ТипМероприятия = Справочники.ТипыМероприятий.ТелефонныйЗвонокВходящий;
		// ДокументСобытие.Комментарий = "Входящий звонок с " + Номер;
	Иначе
		ДокументСобытие.ТипМероприятия = Справочники.ТипыМероприятий.ТелефонныйЗвонокИсходящий;
		// ДокументСобытие.Комментарий = "Исходящий звонок на " + Номер;
	КонецЕсли;
	//++КазанцевЯА-БП
	Если Константы.КонтрольСроковМероприятий.Получить() И ДокументСобытие.ТипМероприятия.СрокВыполнения > 0 Тогда 
		ДокументСобытие.СрокВыполнения =  ТекущаяДата() + ДокументСобытие.ТипМероприятия.СрокВыполнения * 60;
		ОсновнойКалендарьПредприятия = Константы.ОсновнойКалендарьПредприятия.Получить();
		Если Константы.ПереноситьВыходныеИПраздникиМероприятий.Получить() И ЗначениеЗаполнено(ОсновнойКалендарьПредприятия) Тогда
			УстановитьПривилегированныйРежим(Истина);
			ПроизводственныйКалендарь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнойКалендарьПредприятия, "ПроизводственныйКалендарь");
			ПараметрыПолучения = КалендарныеГрафики.ПараметрыПолученияБлижайшихРабочихДат();
			ПараметрыПолучения.ПолучатьПредшествующие = Ложь;
			ПараметрыПолучения.ВызыватьИсключение = Ложь;
			свДата = НачалоДня(ДокументСобытие.СрокВыполнения);
			свВремя =  ДокументСобытие.СрокВыполнения - свДата;
			мСрокВыполнения = Новый Массив;
			мСрокВыполнения.Добавить(свДата);
			ДниКалендаря = КалендарныеГрафики.БлижайшиеРабочиеДаты(ПроизводственныйКалендарь, мСрокВыполнения, ПараметрыПолучения);
			ДокументСобытие.СрокВыполнения = ДниКалендаря.Получить(свДата) + свВремя;
			УстановитьПривилегированныйРежим(Ложь);	
		КонецЕсли;
	КонецЕсли;
	//--КазанцевЯА-БП
	ДокументСобытие.бтЗаписьРазговора = стрЗаписьРазговора;

	ДокументСобытие.Записать();

	Возврат ДокументСобытие.Ссылка;
КонецФункции


// Проверяет возможность автозапуска при начале работы системы
Функция ЕстьВозможностьАвтозапуска() ЭКСПОРТ
	Возврат Истина;
КонецФункции

// проверяет что заданный контрагент является покупателем
Функция ПроверкаКонтрагентПокупатель(контрагентСсылка) ЭКСПОРТ
	покупатель = Ложь;
	Если ТипЗнч(контрагентСсылка) = Тип("СправочникСсылка." + ПолучитьИмяСправочникаКонтрагентов()) Тогда
		покупатель = контрагентСсылка.Покупатель;
	КонецЕсли;
	Возврат покупатель;
КонецФункции

// проверяет что заданный контрагент является поставщиком
Функция ПроверкаКонтрагентПоставщик(контрагентСсылка) ЭКСПОРТ
	поставщик = Ложь;
	Если ТипЗнч(контрагентСсылка) = Тип("СправочникСсылка." + ПолучитьИмяСправочникаКонтрагентов()) Тогда
		поставщик = контрагентСсылка.Поставщик;
	КонецЕсли;
	Возврат поставщик;
КонецФункции

// Возвращает строку, имя документа - события взаимодействия.
Функция ПолучитьИмяДокументаСобытие() ЭКСПОРТ
	Возврат "ТелефонныйЗвонок";
КонецФункции

Функция ПолучитьКонтактСобытия(ссылкаСобытие, стрСообщениеОбОшибкеВозвращ) ЭКСПОРТ
	стрСообщениеОбОшибкеВозвращ = "";
	контакт = "";
	Если ссылкаСобытие <> Неопределено Тогда
		контакт = ссылкаСобытие.АбонентКонтакт;
	КонецЕсли;
	Возврат контакт;
КонецФункции

// Возвращает ссылку на новый созданный документ события взаимодействия
Функция СоздатьСобытиеЗвонка(флагВходящее, Контрагент, Номер, КонтактноеЛицо, стрЗаписьРазговора) ЭКСПОРТ
	// Боевкин
	ДокументСобытие = Задачи.Мероприятие.СоздатьЗадачу();	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			//	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДолговыеОбязательства.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
			|ГДЕ
			|	ДолговыеОбязательства.Должник = &Должник";
		
		Запрос.УстановитьПараметр("Должник", Контрагент);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ДокументСобытие.Объект = ВыборкаДетальныеЗаписи.Ссылка;
		Иначе
			ДокументСобытие.Объект = Контрагент;
		КонецЕсли;
		//
		//ДокументСобытие.Объект = Контрагент;
	Иначе
		ДокументСобытие.Объект = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		ДокументСобытие.КонтактноеЛицо = КонтактноеЛицо;
	КонецЕсли;
			
	ДокументСобытие.Дата = ТекущаяДата();
	ДокументСобытие.ПланируемаяДата = ТекущаяДата();
	ДокументСобытие.ПланируемоеВремя = ТекущаяДата();
	ДокументСобытие.Контакт = Номер;
	
	ДокументСобытие.Комментарий = "";
	Если флагВходящее Тогда //ДокументСобытие.Входящий Тогда
		ДокументСобытие.ТипМероприятия = Справочники.ТипыМероприятий.ТелефонныйЗвонокВходящий;
		ДокументСобытие.Комментарий = Номер;
	Иначе
		ДокументСобытие.ТипМероприятия = Справочники.ТипыМероприятий.ТелефонныйЗвонокИсходящий;
		//ДокументСобытие.Комментарий = Номер;
	КонецЕсли;
	ДокументСобытие.бтЗаписьРазговора = стрЗаписьРазговора;
	//++КазанцевЯА-БП
	Если Константы.КонтрольСроковМероприятий.Получить() И ДокументСобытие.ТипМероприятия.СрокВыполнения > 0 Тогда 
		ДокументСобытие.СрокВыполнения =  ТекущаяДата() + ДокументСобытие.ТипМероприятия.СрокВыполнения * 60;
		ОсновнойКалендарьПредприятия = Константы.ОсновнойКалендарьПредприятия.Получить();
		Если Константы.ПереноситьВыходныеИПраздникиМероприятий.Получить() И ЗначениеЗаполнено(ОсновнойКалендарьПредприятия) Тогда
			УстановитьПривилегированныйРежим(Истина);
			ПроизводственныйКалендарь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнойКалендарьПредприятия, "ПроизводственныйКалендарь");
			ПараметрыПолучения = КалендарныеГрафики.ПараметрыПолученияБлижайшихРабочихДат();
			ПараметрыПолучения.ПолучатьПредшествующие = Ложь;
			ПараметрыПолучения.ВызыватьИсключение = Ложь;
			свДата = НачалоДня(ДокументСобытие.СрокВыполнения);
			свВремя =  ДокументСобытие.СрокВыполнения - свДата;
			мСрокВыполнения = Новый Массив;
			мСрокВыполнения.Добавить(свДата);
			ДниКалендаря = КалендарныеГрафики.БлижайшиеРабочиеДаты(ПроизводственныйКалендарь, мСрокВыполнения, ПараметрыПолучения);
			ДокументСобытие.СрокВыполнения = ДниКалендаря.Получить(свДата) + свВремя;
			УстановитьПривилегированныйРежим(Ложь);	
		КонецЕсли;
	КонецЕсли;
	//--КазанцевЯА-БП

	//Лебедева
	ДокументСобытие.Ответственный = ПараметрыСеанса.ТекущийПользователь;

	ДокументСобытие.Записать();

	Возврат ДокументСобытие.Ссылка;
	
	//стрСокрНомер = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(Номер);
	//
	//ДокументСобытие = Документы[ПолучитьИмяДокументаСобытие()].СоздатьДокумент();
	//
	//Взаимодействия.ЗаполнитьРеквизитыПоУмолчанию(ДокументСобытие, Неопределено);
	//
	//ДокументСобытие.АбонентКонтакт = Контрагент;
	//
	//Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
	//	ДокументСобытие.АбонентКонтакт = КонтактноеЛицо;
	//КонецЕсли;
	//
	//Если ТипЗнч(Контрагент) = Тип("Строка") Тогда
	//	ДокументСобытие.АбонентПредставление = Контрагент;
	//	ДокументСобытие.АбонентКакСвязаться = стрСокрНомер;
	//Иначе
	//	ВзаимодействияВызовСервера.ПолучитьПредставлениеИВсюКонтактнуюИнформациюКонтакта(
	//		ДокументСобытие.АбонентКонтакт, ДокументСобытие.АбонентПредставление, ДокументСобытие.АбонентКакСвязаться);
	//КонецЕсли;
	//
	//ДокументСобытие.Входящий = флагВходящее;
	//
	//ДокументСобытие.Дата = ТекущаяДата();
	//
	//стрСобытие = "";
	//Если ДокументСобытие.Входящий Тогда
	//	стрСобытие = "Входящий звонок с " + стрСокрНомер;
	//Иначе
	//	стрСобытие = "Исходящий звонок на " + стрСокрНомер;
	//КонецЕсли;
	//ДокументСобытие.Тема = стрСобытие;
	//ДокументСобытие.Описание = стрСобытие;
	//
	//ДокументСобытие.Важность = Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	//
	//Если ДокументСобытие.Метаданные().Реквизиты.Найти("бит_ЗаписьРазговора") <> Неопределено Тогда
	//	ДокументСобытие.бит_ЗаписьРазговора = стрЗаписьРазговора;
	//КонецЕсли;
	//
	//Если ДокументСобытие.ПроверитьЗаполнение() Тогда
	//	ДокументСобытие.Записать();
	//КонецЕсли;
	//
	//// для отображения в журнале взаимодействий
	//Взаимодействие = ДокументСобытие.Ссылка;
	//СтруктураДляЗаписи = ВзаимодействияКлиентСервер.СтруктураРеквизитовВзаимодействияДляЗаписи(, Взаимодействие, Ложь);
	//ВзаимодействияВызовСервера.ЗаписьРегистрРеквизитыВзаимодействия(Взаимодействие, СтруктураДляЗаписи);
	//
	//Возврат ДокументСобытие.Ссылка;
КонецФункции

Процедура ЗадатьНомерТелефонаКонтрагентаМер(контрагент, НомерТел, ВидТел) ЭКСПОРТ
	Если НЕ ЗначениеЗаполнено(контрагент) Тогда
		Возврат;
	КонецЕсли;

	обКонтрагент = контрагент.ПолучитьОбъект();
	строка = обКонтрагент.Телефоны.Добавить();
	строка.ВидТелефона = ВидТел;
	строка.Номер = НомерТел;
	УдалитьУправлениеКонтактнойИнформацией.РазбитьНомерТелефонаНаСоставляющие(строка, НомерТел);
	обКонтрагент.Записать();
КонецПроцедуры

Функция ПолучитьФлагБлокироватьВводНомераБитФон() ЭКСПОРТ
	Пользователь = бит_ТелефонияСервер.ПолучитьТекущегоПользователя();
	СтруктураОтбора = Новый Структура("Пользователь", Пользователь);
	Возврат РегистрыСведений.бит_БитТелефонияНастройкиУЗ.Получить(СтруктураОтбора).БлокироватьВводНомераБитФон;
КонецФункции

Функция ПолучитьФлагБлокироватьВводНомераБитМонитор() ЭКСПОРТ
	Пользователь = бит_ТелефонияСервер.ПолучитьТекущегоПользователя();
	СтруктураОтбора = Новый Структура("Пользователь", Пользователь);
	Возврат РегистрыСведений.бит_БитТелефонияНастройкиУЗ.Получить(СтруктураОтбора).БлокироватьВводНомераБитМонитор;
КонецФункции

Функция ПолучитьВидТелефонии() ЭКСПОРТ
	Пользователь = бит_ТелефонияСервер.ПолучитьТекущегоПользователя();
	СтруктураОтбора = Новый Структура("Пользователь", Пользователь);
	Возврат РегистрыСведений.бит_БитТелефонияНастройкиУЗ.Получить(СтруктураОтбора).ЗвонокИзКарточкиМероприятия;	
КонецФункции
//-----------------------------------------------------------------------------
// === УТ 11 ===

//// Возвращает строку, имя справочника контрагентов
//Функция ПолучитьИмяСправочникаКонтрагентов() ЭКСПОРТ
//	Возврат "Партнеры";
//КонецФункции

//// Возвращает строку, имя справочника контактных лиц
//Функция ПолучитьИмяСправочникаКонтактныхЛиц() ЭКСПОРТ
//	Возврат "КонтактныеЛицаПартнеров";
//КонецФункции

//// Возвращает Булево - признак успешности поиска контрагента по номеру
//// Параметр КороткийНомер должен быть не больше длины внешнего номера
//// В случае успешного поиска ссылки на контрагента и/или контакное лицо возвращаются через параметры
//Функция НайтиКонтрагентаПоНомеруВКонтактах(Знач НомерДляПоиска, КонтрагентСсылка, КонтактноеЛицоСсылка) ЭКСПОРТ
//	НомерДляПоиска = битТелефонияКлиентСервер.СократитьНомерДляПоиска(НомерДляПоиска);
//	Если НЕ ЗначениеЗаполнено(НомерДляПоиска) ИЛИ БитфонСервер.ПолучитьФлагНеИскатьКонтрагента() Тогда
//		КонтрагентСсылка = Справочники.Партнеры.ПустаяСсылка();
//		КонтактноеЛицоСсылка = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
//		Возврат Ложь;
//	КонецЕсли;
//	
//	стрПодобия = "%" + НомерДляПоиска + "%";

//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		|	ПартнерыКонтактнаяИнформация.Ссылка,
//		|	ПартнерыКонтактнаяИнформация.НомерТелефона
//		|ИЗ
//		|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
//		|ГДЕ
//		|	ПартнерыКонтактнаяИнформация.Тип = &Тип
//		|	И ПартнерыКонтактнаяИнформация.НомерТелефона ПОДОБНО &НомерТелефона
//		|	И ПартнерыКонтактнаяИнформация.Ссылка.ПометкаУдаления = ЛОЖЬ";

//	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
//	Запрос.УстановитьПараметр("НомерТелефона", стрПодобия);

//	Результат = Запрос.Выполнить();
//	
//	найден = Ложь;
//	Если Результат.Пустой() Тогда
//		КонтрагентСсылка = Справочники.Партнеры.ПустаяСсылка();
//		КонтактноеЛицоСсылка = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
//	Иначе
//		табл = Результат.Выгрузить();
//		Для Каждого строкаТ Из табл Цикл
//			НомерЦифр = битТелефонияКлиентСервер.СократитьНомерДляПоиска(строкаТ.НомерТелефона);
//			// поиск полного соответствия
//			Если НомерЦифр = НомерДляПоиска Тогда
//				КонтрагентСсылка = строкаТ.Ссылка;
//				найден = Истина;
//				Прервать;
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//	
//	Если НЕ найден Тогда
//		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
//					   |	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка,
//					   |	КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона
//					   |ИЗ
//					   |	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
//					   |ГДЕ
//					   |	КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = &Тип
//					   |	И КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона ПОДОБНО &НомерТелефона
//					   |	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.ПометкаУдаления = ЛОЖЬ";
//		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
//		Запрос.УстановитьПараметр("НомерТелефона", стрПодобия);
//		Результат = Запрос.Выполнить();
//		Если НЕ Результат.Пустой() Тогда
//			табл = Результат.Выгрузить();
//			Для Каждого строкаТ Из табл Цикл
//				НомерЦифр = битТелефонияКлиентСервер.СократитьНомерДляПоиска(строкаТ.НомерТелефона);
//				// поиск полного соответствия
//				Если НомерЦифр = НомерДляПоиска Тогда
//					КонтактноеЛицоСсылка = строкаТ.Ссылка;
//					КонтрагентСсылка = КонтактноеЛицоСсылка.Владелец;
//					найден = Истина;
//					Прервать;
//				КонецЕсли;
//			КонецЦикла;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Возврат найден;
//КонецФункции

//// Возвращает массив строк номеров контрагента
//Функция НайтиНомераКонтрагента(КонтрагентСсылка) ЭКСПОРТ
//	Возврат НайтиКонтактнуюИнформацию(КонтрагентСсылка, "Партнеры", Неопределено);
//КонецФункции

//// Возвращает строку - номер контрагента по виду контактной информации
//Функция НайтиНомерКонтрагента(КонтрагентСсылка, ВидКонтактнойИнформации) ЭКСПОРТ
//	номер = "";
//	массивНомеров = НайтиКонтактнуюИнформацию(КонтрагентСсылка, "Партнеры", ВидКонтактнойИнформации);
//	Если массивНомеров.Количество() > 0 Тогда
//		номер = массивНомеров[0];
//	КонецЕсли;
//	Возврат номер;
//КонецФункции

//// Возвращает массив видов телефонов
//Функция ПолучитьВидыКонтактнойИнформацииКонтрагента() ЭКСПОРТ
//	Запрос = Новый Запрос();
//	Запрос.Текст = "ВЫБРАТЬ
//				   |	ВидыКонтактнойИнформации.Ссылка КАК Вид
//				   |ИЗ
//				   |	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
//				   |ГДЕ
//				   |	ВидыКонтактнойИнформации.Тип = &Тип
//				   |	И ВидыКонтактнойИнформации.Родитель = &Родитель";
//	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
//	Запрос.УстановитьПараметр("Родитель", Справочники.ВидыКонтактнойИнформации.СправочникПартнеры);
//	табл = Запрос.Выполнить().Выгрузить();
//	Возврат табл.ВыгрузитьКолонку("Вид");
//КонецФункции

//// Возвращает массив строк номеров контрактного лица
//Функция НайтиНомераКонтактногоЛица(КонтактноеЛицоСсылка) ЭКСПОРТ
//	Возврат НайтиКонтактнуюИнформацию(КонтактноеЛицоСсылка, "КонтактныеЛицаПартнеров", Неопределено);
//КонецФункции

//Функция НайтиКонтактнуюИнформацию(СсылкаНаОбъект, стрТипОбъекта, ВидКонтактнойИнформации)
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
//				   |	КонтактнаяИнформация.НомерТелефона
//				   |ИЗ
//				   |	Справочник." + стрТипОбъекта + ".КонтактнаяИнформация КАК КонтактнаяИнформация
//				   |ГДЕ
//				   |	КонтактнаяИнформация.Ссылка = &Ссылка
//				   |	И КонтактнаяИнформация.Тип = &Тип";
//				   
//	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
//	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
//	
//	Если ЗначениеЗаполнено(ВидКонтактнойИнформации) Тогда
//		Запрос.Текст = Запрос.Текст + " И КонтактнаяИнформация.Вид = &Вид";
//		Запрос.УстановитьПараметр("Вид", ВидКонтактнойИнформации);
//	КонецЕсли;
//	
//	Результат = Запрос.Выполнить();
//	Возврат Результат.Выгрузить().ВыгрузитьКолонку("НомерТелефона");
//КонецФункции

//// Возвращает ссылку на элемент справочника Пользователи
//Функция ПолучитьОсновногоМенеджераКонтрагента(контрагентСсылка) ЭКСПОРТ
//	менеджерСсылка = Неопределено;
//	Если контрагентСсылка <> Неопределено Тогда
//		менеджерСсылка = контрагентСсылка.ОсновнойМенеджер;
//	КонецЕсли;
//	Возврат менеджерСсылка;
//КонецФункции

//Процедура ЗаписатьНомерТелефонаКонтрагента(контрагентСсылка, видКонтактнойИнформацииСсылка, стрНомер) ЭКСПОРТ
//	стрСокрНомер = битТелефонияКлиентСервер.СократитьНомерДляПоиска(стрНомер);
//	строкаКонтакт = Неопределено;
//	обКонтрагент = КонтрагентСсылка.ПолучитьОбъект();
//	Для Каждого строкаИнф Из обКонтрагент.КонтактнаяИнформация Цикл
//		Если строкаИнф.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
//		  	И строкаИнф.Вид = видКонтактнойИнформацииСсылка Тогда
//				строкаКонтакт = строкаИнф;
//				Прервать;
//		КонецЕсли;
//	КонецЦикла;
//	Если строкаКонтакт = Неопределено Тогда
//		строкаКонтакт = обКонтрагент.КонтактнаяИнформация.Добавить();
//	КонецЕсли;
//	строкаКонтакт.НомерТелефона = стрСокрНомер;
//	строкаКонтакт.НомерТелефонаБезКодов = стрСокрНомер;
//	строкаКонтакт.Представление = стрСокрНомер;
//	строкаКонтакт.ЗначенияПолей = "НомерТелефона=" + стрСокрНомер;
//	строкаКонтакт.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
//	строкаКонтакт.Вид = видКонтактнойИнформацииСсылка;
//	обКонтрагент.Записать();
//КонецПроцедуры

//// Возвращает ссылку на новый созданный документ события взаимодействия
//Функция СоздатьСобытие(флагВходящее, Контрагент, Номер, КонтактноеЛицо, стрЗаписьРазговора) ЭКСПОРТ
//	длинаНомера = СтрДлина(Номер);
//	длинаВнешнегоНомера = битТелефонияКлиентСервер.ПолучитьДлинуВнешнегоНомера();
//	создаватьСобытияПриВнутреннихЗвонках = БитфонСервер.ПолучитьФлагСоздаватьСобытияПриВнутреннихЗвонках();
//	Если НЕ создаватьСобытияПриВнутреннихЗвонках И длинаНомера < длинаВнешнегоНомера Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	
//	стрСокрНомер = битТелефонияКлиентСервер.СократитьНомерДляПоиска(Номер);
//	
//	ДокументСобытие = Документы.ТелефонныйЗвонок.СоздатьДокумент();
//	
//	Взаимодействия.ЗаполнитьРеквизитыПоУмолчанию(ДокументСобытие, Неопределено);
//	
//	ДокументСобытие.АбонентКонтакт = Контрагент;
//	
//	Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
//		ДокументСобытие.АбонентКонтакт = КонтактноеЛицо;
//	КонецЕсли;
//	
//	Если ТипЗнч(Контрагент) = Тип("Строка") Тогда
//		ДокументСобытие.АбонентПредставление = Контрагент;
//		ДокументСобытие.АбонентКакСвязаться = стрСокрНомер;
//	Иначе
//		ВзаимодействияВызовСервера.ПолучитьПредставлениеИВсюКонтактнуюИнформациюКонтакта(
//			ДокументСобытие.АбонентКонтакт, ДокументСобытие.АбонентПредставление, ДокументСобытие.АбонентКакСвязаться);
//	КонецЕсли;
//	
//	ДокументСобытие.Входящий = флагВходящее;
//	
//	ДокументСобытие.Дата = ТекущаяДата();
//	
//	стрСобытие = "";
//	Если ДокументСобытие.Входящий Тогда
//		стрСобытие = "Входящий звонок с " + стрСокрНомер;
//	Иначе
//		стрСобытие = "Исходящий звонок на " + стрСокрНомер;
//	КонецЕсли;
//	ДокументСобытие.Тема = стрСобытие;
//	ДокументСобытие.Описание = стрСобытие;
//	
//	Если ДокументСобытие.Метаданные().Реквизиты.Найти("бтЗаписьРазговора") <> Неопределено Тогда
//		ДокументСобытие.бтЗаписьРазговора = стрЗаписьРазговора;
//	КонецЕсли;
//	
//	Если ДокументСобытие.ПроверитьЗаполнение() Тогда
//		ДокументСобытие.Записать();
//	КонецЕсли;
//	Возврат ДокументСобытие.Ссылка;
//КонецФункции

//// Проверяет возможность автозапуска при начале работы системы
//Функция ЕстьВозможностьАвтозапуска() ЭКСПОРТ
//	Возврат НЕ ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы();
//КонецФункции

//// проверяет что заданный контрагент является покупателем
//Функция ПроверкаКонтрагентПокупатель(контрагентСсылка) ЭКСПОРТ
//	покупатель = Ложь;
//	Если ТипЗнч(контрагентСсылка) = Тип("СправочникСсылка." + ПолучитьИмяСправочникаКонтрагентов()) Тогда
//		покупатель = контрагентСсылка.Клиент;
//	КонецЕсли;
//	Возврат покупатель;
//КонецФункции

//// проверяет что заданный контрагент является поставщиком
//Функция ПроверкаКонтрагентПоставщик(контрагентСсылка) ЭКСПОРТ
//	поставщик = Ложь;
//	Если ТипЗнч(контрагентСсылка) = Тип("СправочникСсылка." + ПолучитьИмяСправочникаКонтрагентов()) Тогда
//		поставщик = контрагентСсылка.Поставщик;
//	КонецЕсли;
//	Возврат поставщик;
//КонецФункции

#Область ПрограммныйИнтерфейс

Функция ПолучитьНеопознаных(Каталог, Мессенджер) Экспорт

	Маска = ЭтоНеопознаный() + "_*";
	Файлы = НайтиФайлы(
		Каталог + ПолучитьРазделительПути() + ПутьВХранилищеККлиентам(Мессенджер),
		Маска);

	Если Файлы.Количество() = 0 Тогда
	
		Возврат Новый Структура;
	
	КонецЕсли;
	
	Данные = Новый Массив;
	Для каждого Файл Из Файлы Цикл
	
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(
			Файл.ПолноеИмя + ПолучитьРазделительПути() + ИмяФайлаДляСведенийОЧате(),
			КодировкаТекста.UTF8);
		
		Текст = ТекстовыйДокумент.ПолучитьТекст();
		Части = СтрРазделить(Текст, ";");
		
		Описание = Новый Структура;
		Описание.Вставить("Ник", Части[0]);
		Описание.Вставить("Имя", Части[1]);
		Описание.Вставить("Фамилия", Части[2]);
		Описание.Вставить("ИД", Части[3]);
		Описание.Вставить("Документ", Части[4]);
		
		Данные.Добавить(Описание);
	
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции // ()

///// Запись данных
Процедура ЗаписатьТекст(КаталогСообщения, Отправитель, ОписаниеОтправителя, ДатаСообщения, Текст) Экспорт

	Файл = Новый ТекстовыйДокумент;
	
	Файл.ДобавитьСтроку(Текст);

	ФайлСообщения = ФормированиеИмениФайла(ДатаСообщения, Отправитель, ОписаниеОтправителя);
	
	Файл.Записать(
		КаталогСообщения.ПолноеИмя + ПолучитьРазделительПути() + ФайлСообщения,
		КодировкаТекста.UTF8);

КонецПроцедуры

Процедура ЗаписатьДанныеАкаунта(КаталогСообщения, ХранительИстории, ОписаниеОтправителя) Экспорт

	Если Не ЗначениеЗаполнено(ОписаниеОтправителя) Тогда
	
		Возврат;
	
	КонецЕсли;
	
	Файл = Новый ТекстовыйДокумент;
	
	Файл.ДобавитьСтроку(ОбщиеСведения(ОписаниеОтправителя, ХранительИстории));

	ФайлСообщения = ИмяФайлаДляСведенийОЧате();
	
	Файл.Записать(
		КаталогСообщения.ПолноеИмя + ПолучитьРазделительПути() + ФайлСообщения,
		КодировкаТекста.UTF8);

КонецПроцедуры

Процедура ЗаписатьФайлы(КаталогСообщения, ИдентификаторыФайлов) Экспорт

	Если Не ЗначениеЗаполнено(ИдентификаторыФайлов) Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ИмяФайла = КаталогСообщения.ПолноеИмя + ПолучитьРазделительПути() + ИмяФайлаДляДанныеФайловВЧате();
	Темп = Новый Файл(ИмяФайла);
	Если Не Темп.Существует() Тогда
	
		Файл = Новый ТекстовыйДокумент;
		Файл.Записать(ИмяФайла, КодировкаТекста.UTF8, Символы.ПС);
	
	КонецЕсли;
	
	Файл = Новый ТекстовыйДокумент;
	Файл.Прочитать(ИмяФайла, КодировкаТекста.UTF8, Символы.ПС);
	
	Для каждого Данные Из ИдентификаторыФайлов Цикл
	
		Текст = СтрШаблон(
			УправлениеСтроками.Шаблон("{};{};{}"),
			Данные["ИД"],
			Данные["Имя"],
			Данные["Тип"]);
		
		Файл.ДобавитьСтроку(Текст);
	
	КонецЦикла;
	
	Файл.Записать(ИмяФайла, КодировкаТекста.UTF8, Символы.ПС);

КонецПроцедуры

///// Получение данных
Функция ПолучитьДанныеСообщения(КаталогСообщения, ДатаСообщения) Экспорт

	Маска = Формат(ДатаСообщения, ФорматДатыВремяСообщения()) + "*";
	Файлы = НайтиФайлы(КаталогСообщения.ПолноеИмя, Маска);
	Если Файлы.Количество() = 0 Тогда
	
		Возврат Новый Структура;
	
	КонецЕсли;
	
	Текст = Новый Массив;
	Для каждого Файл Из Файлы Цикл
	
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(Файл.ПолноеИмя, КодировкаТекста.UTF8);
		
		Текст.Добавить(ТекстовыйДокумент.ПолучитьТекст());
	
	КонецЦикла;

	Отправитель = ПолучитьОтправителяИзИмениФайла(Файлы[0].ИмяБезРасширения);
	
	Текст = СтрСоединить(Текст, Символы.ПС);
	
	ДанныеСообщения = Новый Структура;
	ДанныеСообщения.Вставить("Текст", Текст);
	ДанныеСообщения.Вставить("Отправитель", Отправитель);
	
	Возврат ДанныеСообщения;

КонецФункции // ()

Функция ПолучитьФайлы(КаталогСообщения) Экспорт

	Маска = ИмяФайлаДляДанныеФайловВЧате();
	Файлы = НайтиФайлы(
		КаталогСообщения.ПолноеИмя,
		Маска);

	Если Файлы.Количество() = 0 Тогда
	
		Возврат Новый Массив;
	
	КонецЕсли;
	
	Файл = Файлы[0];

	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(Файл.ПолноеИмя, КодировкаТекста.UTF8, Символы.ПС);
	
	Возврат ПрочитатьДанныеФайлов(ТекстовыйДокумент);

КонецФункции // ()


#КонецОбласти

#Область ОбработчикиСобытий



#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ЭтоНеопознаный() Экспорт

	Возврат "Новый";

КонецФункции // ()

Функция ФорматДатыВремяСообщения() Экспорт

	Возврат "ДФ=yyyyMMddHHmmss";

КонецФункции // ()

Функция КаталогПоУмолчанию() Экспорт

	Возврат КонфигурацияИсторияЧатов.КаталогПоУмолчанию();

КонецФункции // ()

Функция ИмяФайлаДляСведенийОЧате() Экспорт

	Возврат "ОбщиеСведения";

КонецФункции // ()

Функция ИмяФайлаДляДанныеФайловВЧате() Экспорт

	Возврат "ФайлыВЧате";

КонецФункции // ()

Функция ПутьВХранилище(Мессенджер, Клиент, ОписаниеОтправителя = Неопределено) Экспорт

	ИмяМессенджера = Мессенджер.ИмяКаталога;
	
	Данные = УправлениеМетаданными.МенеджерОбъектаПоСсылке(Мессенджер)
		.ДанныеАкаунта(Клиент, ОписаниеОтправителя);
	
	Если Не ЗначениеЗаполнено(Данные) Тогда
	
		Возврат "";
	
	КонецЕсли;
	Данные.Вставить("ИД", Данные["Идентификатор"]);
	
	Если Не ЗначениеЗаполнено(Клиент) Тогда
	
		ЭтоНеопознаный = ЭтоНеопознаный() + "_";
	
	КонецЕсли;
		
	Возврат СтрШаблон(
		УправлениеСтроками.Шаблон("{}{5}{}{5}{6}{}{7}{}"),
		КонфигурацияИсторияЧатов.ИмяКаталогаИсторииЧатов(),
		ИмяМессенджера,
		Данные["ИмяАкаунта"],
		Формат(Данные["ИД"], "ЧГ=0"),
		ПолучитьРазделительПути(),
		ЭтоНеопознаный,
		РазделительИмениФайла());

КонецФункции // ()

Функция ПутьВХранилищеККлиентам(Мессенджер) Экспорт

	ИмяМессенджера = Мессенджер.ИмяКаталога;
	
	Возврат СтрШаблон(
		УправлениеСтроками.Шаблон("{}{}{}"),
		КонфигурацияИсторияЧатов.ИмяКаталогаИсторииЧатов(),
		ПолучитьРазделительПути(),
		ИмяМессенджера);

КонецФункции // ()

Функция ИмяАкаунтаОтправителя(ОписаниеОтправителя) Экспорт

	Возврат ОписаниеОтправителя["ИмяАкаунта"];

КонецФункции // ()

#Область ПравилаСохраненияТекста

#Область УправлениеИменемФайла

Функция ФормированиеИмениФайла(ДатаСообщения, Отправитель, ОписаниеОтправителя = Неопределено) 
	
	ТипыОтправителей = Метаданные.ОпределяемыеТипы
		.Отправители.Тип;
	
	Данные = ОписаниеОтправителя;
	Если ЗначениеЗаполнено(Отправитель)
		И ТипыОтправителей.СодержитТип(ТипЗнч(Отправитель)) Тогда
	
		Данные = РегистрыСведений.ИдентификаторыЧатовТелеграм
			.ДанныеАкаунта(Отправитель);
	
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Данные) Тогда
	
		ВызватьИсключение
			"Нет данных отправителя сообщения
			|Если ошибка возникла при отправке сообщения клиенту
			|привяжите акаунт сотрудника к телеграму";
	
	КонецЕсли;
	
	Возврат СтрШаблон(
		УправлениеСтроками.Шаблон("{}{4}{}{4}{}"),
		Формат(ДатаСообщения, ФорматДатыВремяСообщения()),
		Данные["ИмяАкаунта"],
		Формат(Данные["Идентификатор"], "ЧГ=0"),
		РазделительИмениФайла());

КонецФункции // ()

Функция ОбщиеСведения(ОписаниеОтправителя, ХранительИстории)

	Возврат СтрШаблон(
		УправлениеСтроками.Шаблон("{};{};{};{};{}"),
		ОписаниеОтправителя["ИмяАкаунта"],
		ОписаниеОтправителя["Имя"],
		ОписаниеОтправителя["Фамилия"],
		Формат(ОписаниеОтправителя["ИД"], "ЧГ=0"),
		ХранительИстории.УникальныйИдентификатор());

КонецФункции // ()

Функция ПолучитьОтправителяИзИмениФайла(ИмяФайла)

	ЧастиИмени = СтрРазделить(
		ИмяФайла,
		РазделительИмениФайла());
	ИДОтправителя = ЧастиИмени[1];
	
	ТипыОтправителей = Метаданные.ОпределяемыеТипы.Отправители.Тип.Типы();
	
	ОтправительНайден = Ложь;
	Отправитель = Неопределено;
	Для каждого ТипОтправителя Из ТипыОтправителей Цикл
	
		Менеджер = УправлениеМетаданными.МенеджерОбъектаПоТипу(ТипОтправителя);
		
		Отправитель = Менеджер.ПолучитьЭлементПоИдентификатору(ИДОтправителя);
		Если Отправитель <> Неопределено
			И ОбщегоНазначения.СсылкаСуществует(Отправитель) Тогда
		
			ОтправительНайден = Истина;
			Прервать;
		
		КонецЕсли;
	
	КонецЦикла;
	
	Если Не ОтправительНайден Тогда
	
		Отправитель = Неопределено;
	
	КонецЕсли;
	
	Возврат Отправитель;

КонецФункции // ()

Функция РазделительИмениФайла()

	Возврат "~";

КонецФункции // ()

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПрочитатьДанныеФайлов(ТекстовыйДокумент)

	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
	КоличествоЧастейСтроки = 3;
	
	Набор = Новый Массив;
	
	Номер = 1;
	Пока Номер <= КоличествоСтрок Цикл

		Текст = ТекстовыйДокумент.ПолучитьСтроку(Номер);
		Если ПустаяСтрока(Текст) Тогда
		
			Номер = Номер + 1;
			Продолжить;
		
		КонецЕсли;
		
		Части = СтрРазделить(Текст, ";", Истина);
		Если Части.Количество() <> КоличествоЧастейСтроки Тогда
		
			Номер = Номер + 1;
			Продолжить;
		
		КонецЕсли;
		
		Описание = Новый Структура;
		Описание.Вставить("ИД", Части[0]);
		Описание.Вставить("Имя", Части[1]);
		Описание.Вставить("Тип", Части[2]);
		
		Набор.Добавить(Описание);
		
		Номер = Номер + 1;
	
	КонецЦикла;
	
	Возврат Набор;

КонецФункции // ()


#КонецОбласти


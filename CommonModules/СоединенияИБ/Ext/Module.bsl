////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ БЛОКИРОВКИ И ЗАВЕРШЕНИЯ СОЕДИНЕНИЙ С ИБ

// Устанавливает блокировку соединений ИБ.
//
// Параметры
//  ТекстСообщения  – Строка – текст, который будет частью сообщения об ошибке
//                             при попытке установки соединения с заблокированной
//                             информационной базой.
// 
//  КодРазрешения - Строка -   строка, которая должна быть добавлена к параметру
//                             командной строки "/uc" или к параметру строки
//                             соединения "uc", чтобы установить соединение с
//                             информационной базой несмотря на блокировку.
//
// Возвращаемое значение:
//   Булево   – Истина, если блокировка установлена успешно.
//              Ложь, если для выполнения блокировки недостаточно прав.
//
Функция УстановитьБлокировкуСоединений(Знач ТекстСообщения = "",
                                       Знач КодРазрешения = "КодРазрешения") Экспорт
	
	Если НЕ ПравоДоступа("Администрирование", Метаданные) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаСеансов;
	Блокировка.Установлена = Истина;
	Блокировка.Начало = ТекущаяДата();
	Блокировка.КодРазрешения = КодРазрешения;
	Блокировка.Сообщение = СформироватьСообщениеБлокировки(ТекстСообщения, КодРазрешения);
	УстановитьБлокировкуСеансов(Блокировка);
	Возврат Истина;
	
КонецФункции

// Определяет, установлена ли блокировка соединений при пакетном 
// обновлении конфигурации информационной базы
//
Функция УстановленаБлокировкаСоединений() Экспорт
	
	ТекущийРежим = ПолучитьБлокировкуСеансов();
	Возврат ТекущийРежим.Установлена;
	
КонецФункции

// Определяет, установлена ли блокировка соединений при пакетном 
// обновлении конфигурации информационной базы
//
Функция ПараметрыБлокировкиСеансов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийРежим = ПолучитьБлокировкуСеансов();
	
	Возврат Новый Структура(
		"Установлена,Начало,Конец,Сообщение,ИнтервалОжиданияЗавершенияРаботыПользователей,КоличествоСеансов,ТекущаяДатаСеанса",
		ТекущийРежим.Установлена,
		ТекущийРежим.Начало,
		ТекущийРежим.Конец,
		ТекущийРежим.Сообщение,
		5 * 60, // 5 минут; интервал ожидания завершения пользователей после установки
		        // блокировки информационной базы (в секундах).
		ПолучитьСоединенияИнформационнойБазы().Количество(),
		ТекущаяДатаСеанса()
	);

КонецФункции

// Снять блокировку информационной базы.
//
// Возвращаемое значение:
//   Булево   – Истина, если операция выполнена успешно.
//              Ложь, если для выполнения операции недостаточно прав.
//
Функция РазрешитьРаботуПользователей() Экспорт
	
	Если НЕ ПравоДоступа("Администрирование", Метаданные) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекущийРежим = ПолучитьБлокировкуСеансов();
	Если ТекущийРежим.Установлена Тогда
		НовыйРежим = Новый БлокировкаСеансов;
		НовыйРежим.Установлена = Ложь;
		УстановитьБлокировкуСеансов(НовыйРежим);
	КонецЕсли;
	Возврат Истина;
	
КонецФункции	

// Отключить все активные соединения ИБ (кроме текущего сеанса).
//
// Параметры
//  ПараметрыАдминистрированияИБ  – Структура – параметры администрирования ИБ.  
//
// Возвращаемое значение:
//   Булево   – результат отключения соединений.
//
Функция ОтключитьСоединениеИБ(ПараметрыАдминистрированияИБ, НомерСоединения, Сообщение) Экспорт
	
	Если ПолучитьСоединенияИнформационнойБазы().Количество() <= 1 Тогда
		Возврат Истина;	// Отключены все пользователи, кроме текущего сеанса
	КонецЕсли;
	
	Если УдалитьОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Сообщение = ПолучитьНазванияСоединенийИБ(ТекстНеУдалосьЗавершитьРаботуПользователей());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Предупреждение, , , Сообщение);
		Возврат Ложь; // Невозможно принудительно отсоединить подключения в файловом режиме работы
	КонецЕсли;
	
	Попытка
		Возврат РазорватьСоединение(ПараметрыАдминистрированияИБ, НомерСоединения);
	Исключение
		Сообщение = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , Сообщение);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Осуществляет попытку подключиться к кластеру серверов и получить список 
// активных соединений к ИБ и использованием указанных параметров администрирования.
//
// Параметры
//  ПараметрыАдминистрированияИБ  – Структура – параметры администрирования ИБ
//  ВыдаватьСообщения             – Булево    – разрешить вывод интерактивных сообщений.
//
// Возвращаемое значение:
//   Булево   – Истина, если проверка завершена успешно.
//
Процедура ПроверитьПараметрыАдминистрированияИБ(ПараметрыАдминистрированияИБ,
												Знач ПодробноеСообщениеОбОшибке = Ложь) Экспорт
	
	Попытка
		Соединения = ПолучитьАктивныеСоединенияИБ(ПараметрыАдминистрированияИБ);
	Исключение
		Сообщение = НСтр("ru = 'Не удалось подключиться к кластеру серверов.'");
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,,
			Сообщение + Символы.ПС + ОписаниеОшибки());
		Если ПодробноеСообщениеОбОшибке Тогда
			Сообщение = Сообщение + " " + ИнформацияОбОшибке().Описание;
		КонецЕсли;
		ВызватьИсключение Сообщение;
	КонецПопытки;
	
КонецПроцедуры

// Выполнить завершение активных сеансов.
//
// Возвращаемое значение:
//   Булево   - строковый код ошибки; пустая строка - в случае успешного завершения.
//
Функция ОтключитьСоединенияИБПоПараметрамЗапуска(Знач ПараметрЗапуска) Экспорт

	ПараметрыАдминистрированияИБ = СоединенияИБ.ПолучитьПараметрыАдминистрированияИБ();
	ПараметрыЗапуска = УдалитьСтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска,";");
	
	Если ПараметрыЗапуска.Количество() > 1 Тогда
		ПараметрыАдминистрированияИБ.ИмяАдминистратораИБ = Врег(ПараметрыЗапуска[1]);
	КонецЕсли;
	
	Если ПараметрыЗапуска.Количество() > 2 Тогда
		ПараметрыАдминистрированияИБ.ПарольАдминистратораИБ = Врег(ПараметрыЗапуска[2]);
	КонецЕсли;
	
	Результат = ОтключитьСоединенияИБ(ПараметрыАдминистрированияИБ);
	
	Возврат Результат;
	
КонецФункции

// Отключить все активные соединения ИБ (кроме текущего сеанса).
//
// Параметры
//  ПараметрыАдминистрированияИБ  – Структура – параметры администрирования ИБ.  
//
// Возвращаемое значение:
//   Булево   – результат отключения соединений.
//
Функция ОтключитьСоединенияИБ(ПараметрыАдминистрированияИБ) Экспорт
	
	Если ПолучитьСоединенияИнформационнойБазы().Количество() <= 1 Тогда
		Возврат Истина;	// Отключены все пользователи, кроме текущего сеанса
	КонецЕсли;
	
	Если УдалитьОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Сообщение = ПолучитьНазванияСоединенийИБ(ТекстНеУдалосьЗавершитьРаботуПользователей());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Предупреждение, , , Сообщение);
		Возврат Ложь; // Невозможно принудительно отсоединить подключения в файловом режиме работы
	КонецЕсли;
	
	Попытка
		Соединения = ПолучитьАктивныеСоединенияИБ(ПараметрыАдминистрированияИБ);
		Для каждого Соединение Из Соединения.Соединения Цикл
			// Разрываем Connections с ИБ
			СтрСообщения =
			УдалитьСтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			    НСтр("ru = 'Разрывается соединение: Пользователь %1, компьютер %2, установлено %3, режим %4'"),
			    Соединение.UserName,
			    Соединение.HostName,
			    Соединение.ConnectedAt,
			    Соединение.AppID );
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Информация, , , СтрСообщения);
			Соединения.СоединениеСРабочимПроцессом.Disconnect(Соединение);
		КонецЦикла;
		
		Возврат ПолучитьСоединенияИнформационнойБазы().Количество() <= 1;
	Исключение
		ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЕРВИСНЫЕ ФУНКЦИИ 
//

// Возвращает текст сообщения блокировки сеансов.
//
Функция СформироватьСообщениеБлокировки(Знач Сообщение, Знач КодРазрешения) Экспорт

	ПараметрыАдминистрированияИБ = ПолучитьПараметрыАдминистрированияИБ();
	ПризнакФайловогоРежима = Ложь;
	ПутьКИБ = ПутьКИнформационнойБазе(ПризнакФайловогоРежима, ПараметрыАдминистрированияИБ.ПортКластераСерверов);
	СтрокаПутиКИнформационнойБазе = ?(ПризнакФайловогоРежима = Истина, "/F", "/S") + ПутьКИБ; 
	ТекстСообщения = "";                                 
	Если НЕ ПустаяСтрока(Сообщение) Тогда
		ТекстСообщения = Сообщение + Символы.ПС + Символы.ПС;
	КонецЕсли;
	
	ТекстСообщения = ТекстСообщения +
	    НСтр("ru = '%1
	               |Чтобы принудительно разблокировать информационную базу, воспользуйтесь консолью кластера серверов или запустите ""1С:Предприятие"" с параметрами:
	               |ENTERPRISE %2 /CРазрешитьРаботуПользователей /UC%3'");
	
	ТекстСообщения =
	          УдалитьСтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	                   ТекстСообщения,
	                   СоединенияИБКлиентСервер.ТекстДляАдминистратора(),
	                   СтрокаПутиКИнформационнойБазе,
	                   НСтр("ru = '<код разрешения>'"));
	
	Возврат ТекстСообщения;
	
КонецФункции

// Возвращает текстовую константу для формирования сообщений.
// Используется в целях локализации.
//
Функция ТекстНеУдалосьЗавершитьРаботуПользователей() Экспорт
	
	Возврат НСтр("ru = 'Не удалось завершить работу пользователей:'");
	
КонецФункции

// Возвращает текстовую константу для формирования сообщений.
//
Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Завершение работы пользователей'");
	
КонецФункции

Функция НовыеПараметрыАдминистрированияИБ(Знач ИмяАдминистратораИБ = "",
                                          Знач ПарольАдминистратораИБ = "",
                                          Знач ИмяАдминистратораКластера = "",
                                          Знач ПарольАдминистратораКластера = "",
                                          Знач ПортКластераСерверов = 0, 
                                          Знач ПортАгентаСервера = 0) Экспорт
	
	Возврат Новый Структура("ИмяАдминистратораИБ,
	                        |ПарольАдминистратораИБ,
	                        |ИмяАдминистратораКластера,
	                        |ПарольАдминистратораКластера,
	                        |ПортКластераСерверов,
	                        |ПортАгентаСервера",
	                        ИмяАдминистратораИБ,
	                        ПарольАдминистратораИБ,
	                        ИмяАдминистратораКластера,
	                        ПарольАдминистратораКластера,
	                        ПортКластераСерверов,
	                        ПортАгентаСервера);
	
КонецФункции

Функция ПолучитьНазванияСоединенийИБ(Знач Сообщение) Экспорт
	
	Результат = Сообщение;
	Для каждого Соединение Из ПолучитьСоединенияИнформационнойБазы() Цикл
		Если Соединение.НомерСоединения <> НомерСоединенияИнформационнойБазы() Тогда
			Результат = Результат + Символы.ПС + " - " + Соединение;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

// Получить сохраненные параметры администрирования кластера серверов.
//
Функция ПолучитьПараметрыАдминистрированияИБ() Экспорт

	СтруктураНастроек = Константы.ПараметрыАдминистрированияИБ.Получить().Получить();
	Если ТипЗнч(СтруктураНастроек) <> Тип("Структура") Тогда
		Возврат НовыеПараметрыАдминистрированияИБ();
	Иначе
		Возврат СтруктураНастроек;
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьПараметрыАдминистрированияИБ(Параметры) Экспорт
	
	Константы.ПараметрыАдминистрированияИБ.Установить(Новый ХранилищеЗначения(Параметры));
	
КонецПроцедуры

Функция ПолучитьАктивныеСоединенияИБ(НастройкаБлокировки,
										Знач ВсеКромеТекущего = Истина)
	
	Результат = Новый Структура("СоединениеСРабочимПроцессом, Соединения", Неопределено, Новый Массив);
	
	Если УдалитьОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ВызватьИсключение НСтр("ru = 'Невозможно получить список активных соединения в Файловом варианте системы'");
	КонецЕсли;
	
	ПодстрокиСтрокиСоединения = УдалитьСтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрокаСоединенияИнформационнойБазы(), ";");
	
	ИмяСервера = УдалитьСтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(Сред(ПодстрокиСтрокиСоединения[0], 7));
	ИмяИБ      = УдалитьСтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(Сред(ПодстрокиСтрокиСоединения[1], 6));
	
	COMСоединитель = Новый COMОбъект(УдалитьОбщегоНазначения.ИмяCOMСоединителя());
	
	РазделительПорта = Найти(ИмяСервера, ":");
	Если РазделительПорта > 0 Тогда
		ИмяИПортСервера = ИмяСервера;
		ИмяСервера = Сред(ИмяИПортСервера, 1, РазделительПорта - 1);
		НомерПортаКластера = Число(Сред(ИмяИПортСервера, РазделительПорта + 1));
	ИначеЕсли НастройкаБлокировки.ПортКластераСерверов <> 0 Тогда
		НомерПортаКластера = НастройкаБлокировки.ПортКластераСерверов;
	Иначе
		НомерПортаКластера = COMСоединитель.RMngrPortDefault;
	КонецЕсли;
	
	ИдентификаторАгентаСервера = ИмяСервера;
	Если НастройкаБлокировки.ПортАгентаСервера <> 0 Тогда
	      ИдентификаторАгентаСервера = ИдентификаторАгентаСервера + ":" + 
		  	Формат(НастройкаБлокировки.ПортАгентаСервера, "ЧГ=0");
	КонецЕсли;
	
	// Подключение к агенту сервера
	АгентСервера = COMСоединитель.ConnectAgent(ИдентификаторАгентаСервера);
	
	// Найдем необходимый нам кластер
	Для каждого Кластер Из АгентСервера.GetClusters() Цикл
		
		Если Кластер.MainPort <> НомерПортаКластера Тогда
			Продолжить;
		КонецЕсли;
		
		АгентСервера.Authenticate(Кластер, НастройкаБлокировки.ИмяАдминистратораКластера, 
			НастройкаБлокировки.ПарольАдминистратораКластера);
		
		// Получаем список рабочих процессов
		WorkingProcesses = АгентСервера.GetWorkingProcesses(Кластер);
		Для каждого WorkingProcess Из WorkingProcesses Цикл
			
			Если WorkingProcess.Running <> 1 Тогда
				Продолжить;
			КонецЕсли;
			
			// Для каждого рабочего процесса создаем соединение с рабочим процессом
			ConnectToWorkProcess = COMСоединитель.ConnectWorkingProcess("tcp://" + WorkingProcess.HostName + 
				":" + Формат(WorkingProcess.MainPort, "ЧГ=0"));
			ConnectToWorkProcess.AddAuthentication(НастройкаБлокировки.ИмяАдминистратораИБ, 
				НастройкаБлокировки.ПарольАдминистратораИБ);
			Результат.СоединениеСРабочимПроцессом = ConnectToWorkProcess;
			// Получаем список ИБ рабочего процесса
			InfoBases = ConnectToWorkProcess.GetInfoBases();
			Для каждого InfoBase Из InfoBases Цикл
				// Ищем нужную базу
				Если ВРег(InfoBase.Name) <> ВРег(ИмяИБ) Тогда
					Продолжить;
				КонецЕсли;
					
				// Получаем массив соединений с ИБ
				Connections = ConnectToWorkProcess.GetInfoBaseConnections(InfoBase);
				Для каждого Connection Из Connections Цикл
					Если НЕ ВсеКромеТекущего ИЛИ (НомерСоединенияИнформационнойБазы() <> connection.ConnID) Тогда
							Результат.Соединения.Добавить(Connection);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция РазорватьСоединение(ПараметрыСоединенияССервером1СПредприятие,
							знач НомерСоединениеДляРазрыва)
	
	Результат = Новый Структура("СоединениеСРабочимПроцессом, Соединения", Неопределено, Новый Массив);
	
	Если УдалитьОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ВызватьИсключение НСтр("ru = 'Невозможно получить список активных соединения в Файловом варианте системы'");
	КонецЕсли;
	
	ПодстрокиСтрокиСоединения = УдалитьСтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрокаСоединенияИнформационнойБазы(), ";");
	
	ИмяСервера = УдалитьСтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(Сред(ПодстрокиСтрокиСоединения[0], 7));
	ИмяИБ      = УдалитьСтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(Сред(ПодстрокиСтрокиСоединения[1], 6));
	
	COMСоединитель = Новый COMОбъект(УдалитьОбщегоНазначения.ИмяCOMСоединителя());
	
	РазделительПорта = Найти(ИмяСервера, ":");
	Если РазделительПорта > 0 Тогда
		ИмяИПортСервера = ИмяСервера;
		ИмяСервера = Сред(ИмяИПортСервера, 1, РазделительПорта - 1);
		НомерПортаКластера = Число(Сред(ИмяИПортСервера, РазделительПорта + 1));
	ИначеЕсли ПараметрыСоединенияССервером1СПредприятие.ПортКластераСерверов <> 0 Тогда
		НомерПортаКластера = ПараметрыСоединенияССервером1СПредприятие.ПортКластераСерверов;
	Иначе
		НомерПортаКластера = COMСоединитель.RMngrPortDefault;
	КонецЕсли;
	
	ИдентификаторАгентаСервера = ИмяСервера;
	Если ПараметрыСоединенияССервером1СПредприятие.ПортАгентаСервера <> 0 Тогда
	      ИдентификаторАгентаСервера = ИдентификаторАгентаСервера + ":" + 
		  	Формат(ПараметрыСоединенияССервером1СПредприятие.ПортАгентаСервера, "ЧГ=0");
	КонецЕсли;
	
	// Подключение к агенту сервера
	АгентСервера = COMСоединитель.ConnectAgent(ИдентификаторАгентаСервера);
	
	// Найдем необходимый нам кластер
	Для каждого Кластер Из АгентСервера.GetClusters() Цикл
		
		Если Кластер.MainPort <> НомерПортаКластера Тогда
			Продолжить;
		КонецЕсли;
		
		АгентСервера.Authenticate(Кластер, ПараметрыСоединенияССервером1СПредприятие.ИмяАдминистратораКластера, 
			ПараметрыСоединенияССервером1СПредприятие.ПарольАдминистратораКластера);
		
		// Получаем список рабочих процессов
		WorkingProcesses = АгентСервера.GetWorkingProcesses(Кластер);
		Для каждого WorkingProcess Из WorkingProcesses Цикл
			
			Если WorkingProcess.Running <> 1 Тогда
				Продолжить;
			КонецЕсли;
			
			// Для каждого рабочего процесса создаем соединение с рабочим процессом
			ConnectToWorkProcess = COMСоединитель.ConnectWorkingProcess("tcp://" + WorkingProcess.HostName + 
				":" + Формат(WorkingProcess.MainPort, "ЧГ=0"));
			ConnectToWorkProcess.AddAuthentication(ПараметрыСоединенияССервером1СПредприятие.ИмяАдминистратораИБ, 
				ПараметрыСоединенияССервером1СПредприятие.ПарольАдминистратораИБ);
			// Получаем список ИБ рабочего процесса
			InfoBases = ConnectToWorkProcess.GetInfoBases();
			
			Для каждого InfoBase Из InfoBases Цикл
				// Ищем нужную базу
				Если ВРег(InfoBase.Name) <> ВРег(ИмяИБ) Тогда
					Продолжить;
				КонецЕсли;
				
				// Получаем массив соединений с ИБ
				Connections = ConnectToWorkProcess.GetInfoBaseConnections(InfoBase);
				Для каждого Connection Из Connections Цикл
					Если НомерСоединениеДляРазрыва = Connection.ConnID Тогда
						ConnectToWorkProcess.Disconnect(Connection);
						СтрСообщение =
						УдалитьСтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Разорвано соединение: Пользователь %1, компьютер %2, установлено %3, режим %4'"),
							Connection.UserName,
							Connection.HostName,
							Connection.ConnectedAt,
							Connection.AppID);
						ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация, , , СтрСообщение);
						Возврат Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Получить строку соединения ИБ, если задан нестандартный порт кластера серверов.
//
// Параметры
//  ПортКластераСерверов  - Число - нестандартный порт кластера серверов
//
// Возвращаемое значение:
//   Строка   - строка соединения ИБ
//
Функция ПолучитьСтрокуСоединенияИнформационнойБазы(Знач ПортКластераСерверов = 0) Экспорт

	Результат = СтрокаСоединенияИнформационнойБазы();
	Если УдалитьОбщегоНазначения.ИнформационнаяБазаФайловая() ИЛИ (ПортКластераСерверов = 0) Тогда
		Возврат Результат;
	КонецЕсли; 
	
	ПодстрокиСтрокиСоединения  = УдалитьСтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Результат, ";");
	ИмяСервера = УдалитьСтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(Сред(ПодстрокиСтрокиСоединения[0], 7));
	ИмяИБ      = УдалитьСтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(Сред(ПодстрокиСтрокиСоединения[1], 6));
	Результат  = "Srvr=" + """" + ИмяСервера + ":" + 
		Формат(ПортКластераСерверов, "ЧГ=0") + """;" + 
		"Ref=" + """" + ИмяИБ + """;";
	Возврат Результат;

КонецФункции

// Определение пути к информационной базе
//
Функция ПутьКИнформационнойБазе(ПризнакФайловогоРежима = Неопределено, Знач ПортКластераСерверов = 0) Экспорт
	
	СтрокаСоединения = ПолучитьСтрокуСоединенияИнформационнойБазы(ПортКластераСерверов);
	
	ПозицияПоиска = Найти(Врег(СтрокаСоединения), "FILE=");
	
	Если ПозицияПоиска = 1 Тогда // файловая ИБ
		
		ПутьКИБ = Сред(СтрокаСоединения, 6, СтрДлина(СтрокаСоединения) - 6);
		ПризнакФайловогоРежима = Истина;
		
	Иначе
		ПризнакФайловогоРежима = Ложь;
		
		ПозицияПоиска = Найти(Врег(СтрокаСоединения), "SRVR=");
		
		Если НЕ (ПозицияПоиска = 1) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПозицияТочкиСЗапятой = Найти(СтрокаСоединения, ";");
		НачальнаяПозицияКопирования = 6 + 1;
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
		
		ИмяСервера = Сред(СтрокаСоединения, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
		
		СтрокаСоединения = Сред(СтрокаСоединения, ПозицияТочкиСЗапятой + 1);
		
		// позиция имени сервера
		ПозицияПоиска = Найти(Врег(СтрокаСоединения), "REF=");
		
		Если НЕ (ПозицияПоиска = 1) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		НачальнаяПозицияКопирования = 6;
		ПозицияТочкиСЗапятой = Найти(СтрокаСоединения, ";");
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2;
		
		ИмяИБНаСервере = Сред(СтрокаСоединения, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
		
		ПутьКИБ = """" + ИмяСервера + "\" + ИмяИБНаСервере + """";
	КонецЕсли;
	
	Возврат ПутьКИБ;
	
КонецФункции

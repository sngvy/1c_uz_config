
#Область ТехническийИнтерфейс

Функция Создать() Экспорт

	Возврат НачальныйЛогер();

КонецФункции // ()

Функция Установить(Логер, Знач Текст, СтатусТекста) Экспорт

	ЗаменитьСообщение(Логер);
	Добавить(Логер, Текст, СтатусТекста);
	
	Возврат Логер;

КонецФункции // ()

Функция Добавить(Логер, Знач Текст, СтатусТекста) Экспорт

	Сообщатель = Логер["Логер"];
	Запись = СтруктураЗаписи();
	Запись["Статус"] = СтатусТекста;
	Запись["Дата"] = ТекущаяДатаСеанса();
	Запись["Текст"] = Текст;
	Сообщатель.Записать(Запись);
	
	ДобавитьСообщение(Логер, Текст, СтатусТекста);

КонецФункции // ()

Функция Вывести(Логер, ДатаСообщения = Неопределено) Экспорт

	Запись = ПолучитьЗаписьДляПользователя(Логер, ДатаСообщения);
	
	Сообщатель = Логер["Логер"];
	Сообщатель.Вывести(Запись);

КонецФункции // ()

Функция Сообщение(Логер, ДатаСообщения = Неопределено) Экспорт

	Запись = ПолучитьЗаписьДляПользователя(Логер, ДатаСообщения);
	
	Возврат Запись["Текст"];

КонецФункции // ()


#КонецОбласти

#Область Конфигурация

Функция Модуль()

	Возврат БЛогер_ЛогерПоУмолчанию;

КонецФункции

Функция ТекущийСтатус()

	ЗначениеСтатуса = Константы.БЛогер_ТекущийУровень.Получить();
	Если ЗначениеСтатуса.Пустая() Тогда
	
		Константы.БЛогер_ТекущийУровень.Установить(
			Перечисления.БЛогер_Уровни.Выключен
		);
	
	КонецЕсли;
	
	Возврат НомерСтатуса(
		Константы.БЛогер_ТекущийУровень.Получить()
	);

КонецФункции // ()

Функция НомерСтатуса(Статус)

	Возврат Перечисления.БЛогер_Уровни.УровеньСтатуса(
		Статус
	);

КонецФункции // ()

Функция СтруктураЗаписи()

	Запись = Новый Структура;
	Запись.Вставить("Статус", Неопределено);
	Запись.Вставить("Номер",  Неопределено);
	Запись.Вставить("Дата",   Неопределено);
	Запись.Вставить("Текст",  Неопределено);
	
	Возврат Запись;

КонецФункции // ()

Функция СтруктураЛогера()

	Логер = Новый Структура;
	Логер.Вставить("Логер",     Неопределено);
	Логер.Вставить("Запись",    Неопределено);
	Логер.Вставить("Статус",    Неопределено);
	
	Возврат Логер;

КонецФункции // ()


#КонецОбласти

#Область Настройка

Функция НачальныйЛогер()

	Логер = СтруктураЛогера();
	Логер["Логер"] = Логер();
	Логер["Статус"] = Статус();
	Логер["Запись"] = Новый Массив;
	
	Возврат Логер;

КонецФункции // ()

Функция Логер()

	Возврат Модуль();

КонецФункции

Функция Статус()

	Возврат ТекущийСтатус();

КонецФункции

#КонецОбласти

#Область Техническая

Функция ПолучитьЗаписьДляПользователя(Логер, ДатаСообщения)

	Если ДатаСообщения = Неопределено Тогда
	
		ДатаСообщения = ТекущаяДатаСеанса();
	
	КонецЕсли;
	
	Запись = СформироватьСообщения(Логер, ДатаСообщения);
	
	Возврат Запись;

КонецФункции // ()


Процедура ЗаменитьСообщение(Логер)

	Логер["Запись"] = Новый Массив;

КонецПроцедуры

Процедура ДобавитьСообщение(Логер, Текст, СтатусТекста)

	Записи = Логер["Запись"];
	
	Запись = СтруктураЗаписи();
	Запись["Статус"] = СтатусТекста;
	Запись["Номер"] = НомерСтатуса(СтатусТекста);
	Запись["Текст"] = Текст;
	
	Записи.Добавить(Запись);

КонецПроцедуры

Функция СформироватьСообщения(Логер, ДатаСообщения)

	Сообщения = Новый Структура;
	Сообщения.Вставить("Экран", Неопределено);
	
	Сообщения = СоставитьТекстСообщений(Логер, Сообщения);
	
	Если ПустаяСтрока(Сообщения["Экран"]) Тогда
	
		Возврат Неопределено;
	
	КонецЕсли;
	
	Запись = Новый Структура;
	Запись.Вставить("Дата", ДатаСообщения);
	Запись.Вставить("Статус", Логер["Статус"]);
	Запись.Вставить("Текст", Сообщения["Экран"]);
	
	Возврат Запись;

КонецФункции

Функция СоставитьТекстСообщений(Логер, Сообщения)

	Записи = Логер["Запись"];
	ТекущийСтатус = Логер["Статус"];
	
	СообщенияПользователю = Новый Массив;
	
	Для каждого Запись Из Записи Цикл
	
		Текст = СобратьТекстЗаписи(Запись);
		Если Запись["Номер"] <= ТекущийСтатус Тогда
		
			СообщенияПользователю.Добавить(Текст);
		
		КонецЕсли;
	
	КонецЦикла;
	
	Сообщения["Экран"] = СтрСоединить(СообщенияПользователю, Символы.ПС);
	
	Возврат Новый ФиксированнаяСтруктура(Сообщения);

КонецФункции // ()

Функция СобратьТекстЗаписи(Запись)

	Возврат СтрШаблон(
		"[%1] - %2",
		Запись["Статус"],
		Запись["Текст"]
	);

КонецФункции // ()


#КонецОбласти



////////////////////////////////////////////////////////////////////////////////
// Не следует хранить пароли в реквизитах формы, их следует извлекать только на
// стороне сервера и непосредственно перед их использованием. В противном случае,
// при открытии формы с маскированным вводом (или просмотром) пароля, пароль передается
// с сервера на клиент в открытом виде, что делает возможным его перехват.
//
// https://its.1c.ru/db/v8std/content/740/hdoc


#Область Интерфейс

// Записать пароль по владельцу в безопасное хранилище
//
// Параметры:
//  Владелец - ПланОбменаСсылка, СправочникСсылка, Строка - ссылка на объект информационной базы,
//             представляющий объект-владелец сохраняемого пароля или строка до 128 символов.
//             Для объектов других типов в качестве Владельца рекомендуется использовать ссылку на
//             элемент метаданных этого типа в справочнике ИдентификаторыОбъектовМетаданных
//             или ключ в виде строки с учетом имен подсистем.
//
//  Пароль  - Строка - Данные помещаемые в безопасное хранилище. Пустая строка - удаляет данные пароля.
Процедура ЗаписатьПароль(Владелец, Пароль = "") Экспорт

	Если Пароль = "" Тогда
	
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Владелец, "Пароль");
		УстановитьПривилегированныйРежим(Ложь);
		
		Возврат;
	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, Пароль);
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры // ()

// Получить пароль по владельцу из безопасного хранилища
//
// Параметры:
//  Владелец    - ПланОбменаСсылка, СправочникСсылка, Строка - ссылка на объект информационной базы,
//                  представляющий объект-владелец сохраняемого пароля или строка до 128 символов.
//
// Возвращаемое значение:
//  Строка - Данные из безопасного хранилища. Если данные отсутствуют - Пустая строка.
Функция ПолучитьПароль(Владелец) Экспорт

	Если Не ЗначениеЗаполнено(Владелец) Тогда
	
		Возврат "";
	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Пароль = Неопределено Тогда
	
		Пароль = "";
	
	КонецЕсли;
	
	Возврат Пароль;

КонецФункции // ()

// Получить данные по владельцу и ключам из безопасного хранилища
//
// Параметры:
//  Владелец    - ПланОбменаСсылка, СправочникСсылка, Строка - ссылка на объект информационной базы,
//                  представляющий объект-владелец сохраняемого пароля или строка до 128 символов.
//  Ключи       - Массив - Содержит массив строк имен сохраненных данных.
//
// Возвращаемое значение:
//  Структура - Данные из безопасного хранилища. Если данные отсутствуют - Пустая структура.
Функция Получить(Владелец, Ключи) Экспорт

	Если Не ЗначениеЗаполнено(Владелец) Тогда
	
		Возврат Новый Структура;
	
	КонецЕсли;
	
	Если ТипЗнч(Ключи) <> Тип("Массив") Тогда
	
		ВызватьИсключение "Ключи не являются массивом";
	
	КонецЕсли;
	
	ПредставлениеКлючей = ПреобразоватьКлючиВСтроку(Ключи);
	
	УстановитьПривилегированныйРежим(Истина);
	Данные = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, ПредставлениеКлючей);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Данные = Неопределено Тогда
	
		Данные = Новый Структура;
	
	КонецЕсли;
	
	Возврат Данные;

КонецФункции // ()

// Получить данные по владельцу из безопасного хранилища
//
// Параметры:
//  Владелец    - ПланОбменаСсылка, СправочникСсылка, Строка - ссылка на объект информационной базы,
//                  представляющий объект-владелец сохраняемого пароля или строка до 128 символов.
//  Ключи       - Массив - Содержит массив строк имен сохраненных данных.
//
// Возвращаемое значение:
//  Структура - Данные из безопасного хранилища. Если данные отсутствуют - Пустая структура.
Функция ПолучитьВсеЗначения(Владелец) Экспорт

	Ключи = Неопределено;
	
	ИмяВладельца = Владелец;
	Попытка
	
		Если ТипЗнч(Владелец) <> Тип("Строка") Тогда
		
			ИмяВладельца = Владелец.Метаданные().Имя;
		
		КонецЕсли;
		Выполнить("Ключи = Ключи" + ИмяВладельца + "()");
	
	Исключение
		ВызватьИсключение "Ключи для данного типа Владельца не определены";
	КонецПопытки;
	
	ПредставлениеКлючей = ПреобразоватьКлючиВСтроку(Ключи);
	
	УстановитьПривилегированныйРежим(Истина);
	Данные = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, ПредставлениеКлючей);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Данные = Неопределено Тогда
	
		Данные = Новый Структура;
	
	КонецЕсли;  
	
	Для Каждого Атрибут из Данные Цикл  
		Если Не ЗначениеЗаполнено(Атрибут.Значение) Тогда
			Данные[Атрибут.Ключ] = "";
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Данные;

КонецФункции // ()

// Записать данные по владельцу и ключу в безопасное хранилище
//
// Параметры:
//  Владелец - ПланОбменаСсылка, СправочникСсылка, Строка - ссылка на объект информационной базы,
//             представляющий объект-владелец сохраняемого пароля или строка до 128 символов.
//             Для объектов других типов в качестве Владельца рекомендуется использовать ссылку на
//             элемент метаданных этого типа в справочнике ИдентификаторыОбъектовМетаданных
//             или ключ в виде строки с учетом имен подсистем.
//
//  Ключ    - Строка       - Ключ сохраняемых настроек, по умолчанию "Пароль".
//                           Ключ должен соответствовать правилам, установленным для идентификаторов:
//                           * Первым символом ключа должна быть буква или символ подчеркивания (_).
//                           * Каждый из последующих символов может быть буквой, цифрой или символом подчеркивания (_).
//
//  Данные  - Произвольный - Данные помещаемые в безопасное хранилище. Неопределенно - удаляет все данные.
Процедура Записать(Владелец, Ключ, Данные = Неопределено) Экспорт

	Если Данные = Неопределено Тогда
	
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Владелец, Ключ);
		УстановитьПривилегированныйРежим(Ложь);
		
		Возврат;
	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, Данные, Ключ);
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры // ()

// Функции получения всех Ключей по сервисам
#Область Ключи

Функция КлючиПочтаРФ() Экспорт

	Ключи = Новый Массив;
	Ключи.Добавить("Пароль");
	Ключи.Добавить("Логин");
	
	Возврат Ключи;

КонецФункции // ()

Функция КлючиУчетныеЗаписиПочтыРФ() Экспорт

	Ключи = Новый Массив;
	Ключи.Добавить("Пароль");
	Ключи.Добавить("Логин");
	
	Возврат Ключи;

КонецФункции // ()

Функция КлючиАвтообзвон() Экспорт

	Ключи = Новый Массив;
	Ключи.Добавить("Пароль");
	Ключи.Добавить("Пользователь");
	
	Возврат Ключи;

КонецФункции // ()

Функция КлючиНастройкиПодключенияКСерверу() Экспорт

	Возврат КлючиАвтообзвон();

КонецФункции // ()

Функция КлючиБанкротство() Экспорт

	Ключи = Новый Массив;
	Ключи.Добавить("Пароль");
	Ключи.Добавить("Логин");
	Ключи.Добавить("Сервис");
	
	Возврат Ключи;

КонецФункции // ()

Функция КлючиНБКИ() Экспорт

	Ключи = Новый Массив;
	Ключи.Добавить("Пароль");
	Ключи.Добавить("Пользователь");
	
	Возврат Ключи;

КонецФункции // ()

Функция КлючиЗСУ() Экспорт

	Ключи = Новый Массив;
	Ключи.Добавить("Пароль");
	Ключи.Добавить("Логин");
	Ключи.Добавить("Адрес");
	
	Возврат Ключи;

КонецФункции // ()

Функция КлючиМандарин() Экспорт

	Ключи = Новый Массив;
	Ключи.Добавить("Пароль");
	Ключи.Добавить("Логин");
	
	Возврат Ключи;

КонецФункции // ()


#КонецОбласти

Процедура ПроверкаПереноса(Владелец)

	Данные = ПолучитьВсеЗначения(Владелец);
	Если НЕ ЗначениеЗаполнено(Данные) Тогда
	
		Сообщить("Нет данных " + Владелец);
		Возврат;
	
	КонецЕсли;
	Сообщить(Владелец);
	Для каждого Запись Из Данные Цикл
	
		Сообщить(Запись.Значение);
	
	КонецЦикла;

КонецПроцедуры


// Используется для переноса данных, при переходе на новый релиз с 3.7.3.18
Процедура ПереносВБезопасноеХранилище(Тестовый = Ложь) Экспорт

	// Банкротство
	Данные = ПолучитьДанные_Банкротство(); 
	Если ЗначениеЗаполнено(Данные) Тогда
		Ключи = КлючиБанкротство();
		Для каждого Ключ Из Ключи Цикл
			
			Записать("Банкротство", Ключ, Данные[Ключ]);
			
		КонецЦикла;  
		
	КонецЕсли;
	
	// Автообзвон
	Данные = ПолучитьДанные_Автообзвон(); 
	Если ЗначениеЗаполнено(Данные) Тогда
		
		Ключи = КлючиАвтообзвон();
		Пока Данные.Следующий() Цикл
			
			Для каждого Ключ Из Ключи Цикл
				
				Записать(Данные.Ссылка, Ключ, Данные[Ключ]);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// ПочтаРФ
	Данные = ПолучитьДанные_ПочтаРФ();
	Если ЗначениеЗаполнено(Данные) Тогда
		
		Ключи = КлючиПочтаРФ();
		Пока Данные.Следующий() Цикл
		
			Для каждого Ключ Из Ключи Цикл
				
				Записать(Данные.Ссылка, Ключ, Данные[Ключ]);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// НБКИ
	Данные = ПолучитьДанные_НБКИ(); 
	Если ЗначениеЗаполнено(Данные) Тогда
		Ключи = КлючиНБКИ();
		Пока Данные.Следующий() Цикл
			
			Для каждого Ключ Из Ключи Цикл
				
				Записать(Данные.Ссылка, Ключ, Данные[Ключ]);
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	Данные = ПолучитьДанные_НБКИ_РУТ(); 
	Если ЗначениеЗаполнено(Данные) Тогда
		Ключи = КлючиНБКИ();
		Пока Данные.Следующий() Цикл
			
			Для каждого Ключ Из Ключи Цикл
				
				Записать(Данные.Ссылка, Ключ, Данные[Ключ]);
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	// ЗСУ
	Данные = ПолучитьДанные_ЗСУ();
	Если ЗначениеЗаполнено(Данные) Тогда
		Ключи = КлючиЗСУ();
		Для каждого Ключ Из Ключи Цикл
			
			Записать("ЗСУ", Ключ, Данные[Ключ]);
			
		КонецЦикла;
	КонецЕсли;
	
	// Мандарин
	Данные = ПолучитьДанные_Мандарин();
	Если ЗначениеЗаполнено(Данные) Тогда
	
		Ключи = КлючиМандарин();
		Пока Данные.Следующий() Цикл
			
			Для каждого Ключ Из Ключи Цикл
				
				Записать(Данные.Ссылка, Ключ, Данные[Ключ]);
				
			КонецЦикла;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Если Тестовый Тогда
	
		ПроверкаПереноса("Банкротство");
		ПроверкаПереноса("Автообзвон");
		ПроверкаПереноса("ПочтаРФ");
		ПроверкаПереноса("ЗСУ");
		ПроверкаПереноса("Мандарин");
	
	КонецЕсли;

КонецПроцедуры


#КонецОбласти

#Область ПереносДанных

Функция ПолучитьДанные_Банкротство()

	Доступ = Новый Структура();
	
	Логин = Константы.БанкротствоЛогин.Получить();
	Если НЕ ЗначениеЗаполнено(Логин) Тогда
	
		Возврат Новый Структура;
	
	КонецЕсли;
	
	Доступ.Вставить("Логин", СокрЛП(Константы.БанкротствоЛогин.Получить()));
	Доступ.Вставить("Пароль", СокрЛП(Константы.БанкротствоПароль.Получить()));
	Доступ.Вставить("Сервис", СокрЛП(Константы.БанкротствоАдресСервиса.Получить()));
	Возврат Доступ;

КонецФункции // ()

Функция ПолучитьДанные_Автообзвон()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПодключенияКСерверу.Ссылка КАК Ссылка,
		|	НастройкиПодключенияКСерверу.Пользователь КАК Пользователь,
		|	НастройкиПодключенияКСерверу.Пароль КАК Пароль
		|ИЗ
		|	Справочник.НастройкиПодключенияКСерверу КАК НастройкиПодключенияКСерверу";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи;

//	
//	Доступ = Новый Структура();
//	Учетка = Константы.ПрофильПодключенияКАТС.Получить();
//	
//	Логин = Учетка.Пользователь;
//	Если НЕ ЗначениеЗаполнено(Логин) Тогда
//	
//		Возврат Новый Структура;
//	
//	КонецЕсли;
//	
//	Доступ.Вставить("Пользователь", Учетка.Пользователь);
//	Доступ.Вставить("Пароль", Учетка.Пароль);
//	Возврат Доступ;

КонецФункции // ()

Функция ПолучитьДанные_ПочтаРФ()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетныеЗаписиПочтыРФ.Ссылка КАК Ссылка,
		|	УчетныеЗаписиПочтыРФ.Логин КАК Логин,
		|	УчетныеЗаписиПочтыРФ.Пароль КАК Пароль
		|ИЗ
		|	Справочник.УчетныеЗаписиПочтыРФ КАК УчетныеЗаписиПочтыРФ
		|ГДЕ
		|	УчетныеЗаписиПочтыРФ.ПометкаУдаления = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи;
	
	//Доступ = Новый Структура();
	//Учетка = Константы.УчеткаПочтыРФ.Получить();
	//
	//Логин = Учетка.Логин;
	//Если НЕ ЗначениеЗаполнено(Логин) Тогда
	//
	//	Возврат Новый Структура;
	//
	//КонецЕсли;
	//
	//Доступ.Вставить("Логин", Учетка.Логин);
	//Доступ.Вставить("Пароль", Учетка.Пароль);
	//Возврат Доступ;

КонецФункции // ()

Функция ПолучитьДанные_НБКИ()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиВыгрузкиНБКИ.Ссылка КАК Ссылка,
		|	НастройкиВыгрузкиНБКИ.ИмяПользователяНБКИ КАК Пользователь,
		|	НастройкиВыгрузкиНБКИ.ПарольПользователяНБКИ КАК Пароль
		|ИЗ
		|	Справочник.НастройкиВыгрузкиНБКИ КАК НастройкиВыгрузкиНБКИ
		|ГДЕ
		|	НастройкиВыгрузкиНБКИ.ПометкаУдаления = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Данные = РезультатЗапроса.Выбрать();
	Возврат Данные;

КонецФункции // ()

Функция ПолучитьДанные_НБКИ_РУТ()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиВыгрузкиНБКИ_RUTDF.Ссылка КАК Ссылка,
		|	НастройкиВыгрузкиНБКИ_RUTDF.ИмяПользователяНБКИ КАК Пользователь,
		|	НастройкиВыгрузкиНБКИ_RUTDF.ПарольПользователяНБКИ КАК Пароль
		|ИЗ
		|	Справочник.НастройкиВыгрузкиНБКИ_RUTDF КАК НастройкиВыгрузкиНБКИ_RUTDF
		|ГДЕ
		|	НастройкиВыгрузкиНБКИ_RUTDF.ПометкаУдаления = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Данные = РезультатЗапроса.Выбрать();
	Возврат Данные;

КонецФункции // (

Функция ПолучитьДанные_ЗСУ()

	Доступ = Новый Структура();
	
	Логин = Константы.СервисСУЛогин.Получить();
	Если НЕ ЗначениеЗаполнено(Логин) Тогда
	
		Возврат Новый Структура;
	
	КонецЕсли;
	
	Доступ.Вставить("Адрес", Константы.СервисСУАдрес.Получить());
	Доступ.Вставить("Логин", Константы.СервисСУЛогин.Получить());
	Доступ.Вставить("Пароль", Константы.СервисСУПароль.Получить());
	Возврат Доступ;

КонецФункции // ()

Функция ПолучитьДанные_Мандарин()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетныеЗаписиМандарин.Ссылка КАК Ссылка,
		|	УчетныеЗаписиМандарин.merchantId КАК Логин,
		|	УчетныеЗаписиМандарин.secret КАК Пароль
		|ИЗ
		|	Справочник.УчетныеЗаписиМандарин КАК УчетныеЗаписиМандарин";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи;
	
	//Доступ = Новый Структура();
	//
	//Учетка = Константы.ТекущаяУчетнаяЗаписьМандарин.Получить();
	//Если НЕ ЗначениеЗаполнено(Учетка) Тогда
	//
	//	Возврат Неопределено;
	//
	//КонецЕсли;
	//
	//Доступ.Вставить("Логин", Учетка.merchantId);
	//Доступ.Вставить("Пароль", Учетка.secret);
	//Возврат Доступ;

КонецФункции // ()


#КонецОбласти

Функция ПреобразоватьКлючиВСтроку(Ключи)

	Если НЕ ЗначениеЗаполнено(Ключи) Тогда
	
		Возврат "";
	
	КонецЕсли;
	Возврат СтрСоединить(Ключи, ", ");

КонецФункции // ()


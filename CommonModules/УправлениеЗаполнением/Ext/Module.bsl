////////////////////////////////////////////////////////////////////////////////
// Общиее функции для обработки заполнения форм, в том числе правила и 
//   ограничения заполнения полей.
//

#Область ТехническийИнтерфейс

// Добавление дополнительных реквизитов на форму
//
// Параметры:
//  ЭтаФорма  - Форма - Форма на которую выводятся реквизиты
//                 <продолжение описания параметра>
//
Процедура ДобавитьДополнительныеРеквизиты(ЭтаФорма) Экспорт

	Требуется = ВозможнаОбработка(ЭтаФорма);
	Если Не Требуется Тогда
	
		Возврат;
	
	КонецЕсли;
	
	УправлениеСвойствами.ДобавитьДополнительныеРеквизиты(ЭтаФорма);

КонецПроцедуры

// Получает ПредставлениеОбъекта, если представление не заполнено
//   возвращает синоним
//
// Параметры:
//  Объект  - Справочник, Документ - Ссылка или Объект
//
// Возвращаемое значение:
//   Строка   - 
//
Функция ПолучитьПредставлениеОбъекта(Объект) Экспорт

	МетаданныеОбъекта = Объект.Метаданные();

	Представление = МетаданныеОбъекта.ПредставлениеОбъекта;
	Если ЗначениеЗаполнено(Представление) Тогда
	
		Возврат Представление
	
	КонецЕсли;

	Возврат МетаданныеОбъекта.Синоним;

КонецФункции // ()

#Область ОграничениеВыбораЗначений

// Определение возможных правил ограничений
//
// Возвращаемое значение:
//   Соответствие   - Значения правил по умолчанию
//
Функция ИнициализацияПравилОграничений() Экспорт

	Правила = Новый Соответствие;
	Правила.Вставить("Примитив", Неопределено);
	Правила.Вставить("ЗначениеСвойств", Неопределено);
	Правила.Вставить("Ссылка", Неопределено);
	
	Возврат Правила;

КонецФункции // ()

// Устанавливает ЗначениеСвойств или бросает исключение
//   Если передан не корректный тип
//
// Параметры:
//  Правила  - Соответствие - Настраиваемые правила ограничений
//
//  Значение  - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - 
//                 Проверяемая характеристика
//
// Возвращаемое значение:
//   ОбщийМодуль   - Для цепочного вызова
//
Функция СвязьДляЗначенийСвойств(Правила, Значение) Экспорт

	Если ТипЗнч(Значение) <> Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
	
		ВызватьИсключение ТекстИсключениеНеКорректныйТип();
	
	КонецЕсли;
	
	Правила["ЗначениеСвойств"] = Значение;
	
	Возврат УправлениеЗаполнением;

КонецФункции // ()

// Устанавливает Ссылка или бросает исключение
//   Если передан не корректный тип
//
// Параметры:
//  Правила  - Соответствие - Настраиваемые правила ограничений
//
//  Значение  - ЛюбаяСсылка - Проверяемая ссылка
//
// Возвращаемое значение:
//   ОбщийМодуль   - Для цепочного вызова
//
Функция СвязьДляСсылочногоТипа(Правила, Значение) Экспорт

	Если Не УправлениеМетаданными.ЭтоСсылочныйТип(ТипЗнч(Значение)) Тогда
	
		ВызватьИсключение ТекстИсключениеНеКорректныйТип();
	
	КонецЕсли;
	Правила["Ссылка"] = Значение;
	
	Возврат УправлениеЗаполнением;

КонецФункции // ()

// По переданным правилам и типу значения Свойства (Дополнительный реквизит)
//   Определяет владельца
//
// Параметры:
//  Правила  - Соответствие - Настроеные правила ограничений
//
//  ТипЗначения  - ЛюбаяСсылка - Тип для которого тербуется определить правило
//
// Возвращаемое значение:
//   ПроизвольноеЗначение   - Зависит от настроеных Правил
//
Функция ПолучитьСвязьПоТипуЗначенияСвойства(Правила, ТипЗначения) Экспорт

	Возврат Правила.Получить(
		ОпределитьПравилоОграничения(ТипЗначения)
	);

КонецФункции // ()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВозможнаОбработка(ЭтаФорма)

	СоставПути = СтрРазделить(ЭтаФорма.ИмяФормы, ".", Истина);
	Если СоставПути.Количество() < 2 Тогда
	
		Возврат Ложь;
	
	КонецЕсли;
	ИмяМенеджера = СоставПути[1]; 
	
	//Лебедева 02072024 По имени справочника для корреспонденции нельзя вычислить корень РегистрацияКорреспонденции
	Если СтрНайти(ИмяМенеджера, "Корреспонденция") > 0 Тогда
		ИмяМенеджера = "РегистрацияКорреспонденции";
	КонецЕсли;

	Попытка
	
		Результат = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения["ДополнительныеРеквизиты_" + ИмяМенеджера];
	
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции // ()

Функция ТекстИсключениеНеКорректныйТип()

	Возврат "Не корректный тип значения";

КонецФункции // ()

Функция ОпределитьПравилоОграничения(ТипЗначения)

	Если УправлениеМетаданными.ЭтоПримитивныйТип(ТипЗначения) Тогда
	
		Возврат "Примитив";
	
	КонецЕсли;
	
	Если ТипЗначения = Тип("СправочникСсылка.тсЗначенияСвойствОбъектов") Тогда
	
		Возврат "ЗначениеСвойств";
	
	КонецЕсли;
	
	Возврат "Ссылка";

КонецФункции // ()

#КонецОбласти


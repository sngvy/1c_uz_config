 
&НаКлиенте
Перем ТекущийУИДАбонента;
&НаКлиенте
Перем КомпонентаОбъект;
&НаКлиенте
Перем ТекущийIPАдрес;
 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбъектыСервер.ОграничитьТипОбъекта(Элементы.Объект);
		
	//Заплатка
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ПланируемаяДата = ТекущаяДата();
	КонецЕсли;
	//
	//Заплатка
	Если Не Объект.Ссылка.Пустая() И Объект.Подразделение <> УдалитьОбщегоНазначения.ТекущийПользователь().Подразделение
			И РольДоступна("СотрудникВРегионе") Тогда
		//ЭтаФорма.ТолькоПросмотр = Истина;
		Элементы.Организация.ТолькоПросмотр = Истина;
		Элементы.Подразделение.ТолькоПросмотр = Истина;
		Элементы.ТипМероприятия.ТолькоПросмотр = Истина;
		Элементы.ТипСотрудника.ТолькоПросмотр = Истина;
		Элементы.Ответственный.ТолькоПросмотр = Истина;	
		
		Элементы.ОбъектУчета_Пусто.ТолькоПросмотр = Истина;
		Элементы.ОбъектУчета_Контрагенты.ТолькоПросмотр = Истина;
		Элементы.ОбъектУчета_ДоговорыКонтрагентов.ТолькоПросмотр = Истина;
		Элементы.ОбъектУчета_УслугиПоДоговорам.ТолькоПросмотр = Истина;
		Элементы.ОбъектУчета_ДолговыеОбязательства.ТолькоПросмотр = Истина;
		Элементы.ОбъектУчета_ИсполнительныеДокументы.ТолькоПросмотр = Истина;
		Элементы.ОбъектУчета_Залоги.ТолькоПросмотр = Истина;
	КонецЕсли;	
	//
	
	ДополнительныеРеквизиты.Загрузить(Объект.ДополнительныеРеквизиты.Выгрузить());
	
	Если Не ЗначениеЗаполнено(Объект.Автор) Тогда
		Пользователи.ЗаполнитьРеквизитыПоДаннымПользователя(Объект);	
		Если Параметры.ЗначенияЗаполнения.Свойство("Объект") Тогда
			Если ТипЗнч(Параметры.ЗначенияЗаполнения.Объект) = Тип("Массив") Тогда
				КолВо = Параметры.ЗначенияЗаполнения.Объект.Количество();
				Объект.Объект = Параметры.ЗначенияЗаполнения.Объект[КолВо - 1];
			Иначе
				Объект.Объект = Параметры.ЗначенияЗаполнения.Объект;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Параметры.Объект) Тогда
			Объект.Объект = Параметры.Объект;
		КонецЕсли;
		Если Параметры.ЗначенияЗаполнения.Свойство("Ответственный") И
				Не Параметры.ЗначенияЗаполнения.Ответственный.Пустая() Тогда
			Объект.Организация = Параметры.ЗначенияЗаполнения.Ответственный.Организация;
			Объект.Подразделение = Параметры.ЗначенияЗаполнения.Ответственный.Подразделение;
			Объект.Ответственный = Параметры.ЗначенияЗаполнения.Ответственный;
		КонецЕсли;
		Если Параметры.ЗначенияЗаполнения.Свойство("ТипМероприятия") Тогда
			Объект.ТипМероприятия = Параметры.ЗначенияЗаполнения.ТипМероприятия;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Объект) Тогда
		Элементы.ОбъектУчета_Контрагенты.Видимость = Ложь;
		Элементы.ОбъектУчета_ДоговорыКонтрагентов.Видимость = Ложь;
		Элементы.ОбъектУчета_УслугиПоДоговорам.Видимость = Ложь;
		Элементы.ОбъектУчета_ДолговыеОбязательства.Видимость = Ложь;
		Элементы.ОбъектУчета_ИсполнительныеДокументы.Видимость = Ложь;
		Элементы.ОбъектУчета_Залоги.Видимость = Ложь;
	Иначе
		Элементы.ОбъектУчета_Пусто.Доступность = Ложь;
		Элементы.ОбъектУчета_Контрагенты.Видимость = Ложь;
		Элементы.ОбъектУчета_ДоговорыКонтрагентов.Видимость = Ложь;
		Элементы.ОбъектУчета_УслугиПоДоговорам.Видимость = Ложь;
		Элементы.ОбъектУчета_ДолговыеОбязательства.Видимость = Ложь;
		Элементы.ОбъектУчета_ИсполнительныеДокументы.Видимость = Ложь;
		Элементы.ОбъектУчета_Залоги.Видимость = Ложь;
		
		Если Объект.Объект = Неопределено Тогда	
			Элементы.ОбъектУчета_Пусто.Доступность = Истина;
			ТекущийЭлемент = Элементы.Объект;
			Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_Пусто;		
		ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Элементы.ОбъектУчета_Контрагенты.Видимость = Истина;
			ТекущийЭлемент = Элементы.Контрагент;
			Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_Контрагенты;		
		ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Элементы.ОбъектУчета_ДоговорыКонтрагентов.Видимость = Истина;
			ТекущийЭлемент = Элементы.ДоговорКонтрагента;
			Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_ДоговорыКонтрагентов;		
		ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.УслугиПоДоговору") Тогда	
			Элементы.ОбъектУчета_УслугиПоДоговорам.Видимость = Истина;
			ТекущийЭлемент = Элементы.УслугаПоДоговору;
			Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_УслугиПоДоговорам;
		ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда
			Элементы.ОбъектУчета_ДолговыеОбязательства.Видимость = Истина;
			ТекущийЭлемент = Элементы.ДолговоеОбязательство;
			Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_ДолговыеОбязательства;
		ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ИсполнительныеДокументы") Тогда	
			Элементы.ОбъектУчета_ИсполнительныеДокументы.Видимость = Истина;
			ТекущийЭлемент = Элементы.ИсполнительныйДокумент;
			Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_ИсполнительныеДокументы;
		ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.Залоги") Тогда	
			Элементы.ОбъектУчета_Залоги.Видимость = Истина;
			ТекущийЭлемент = Элементы.Залог;
			Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_Залоги;
		КонецЕсли;
		
		Контрагент = Объект.Объект;
		ДоговорКонтрагента = Объект.Объект;
		УслугаПоДоговору = Объект.Объект;
		ДолговоеОбязательство = Объект.Объект;
		ИсполнительныйДокумент = Объект.Объект;
		Залог = Объект.Объект;
		
		//
		Попытка
			КонтрагентКЛ = Объект.Объект.Должник;
		Исключение
			Попытка
				КонтрагентКЛ = Объект.Объект.Контрагент;
			Исключение
				Попытка
					КонтрагентКЛ = Объект.Объект.Владелец.Должник;
				Исключение
					КонтрагентКЛ = Объект.Объект;
				КонецПопытки;
			КонецПопытки;
		КонецПопытки;
	КонецЕсли;
		
	Элементы.ФормаОтменитьВыполнение.Доступность = Объект.Выполнена;
	Элементы.ДекорацияВыполнено.Видимость = Объект.Выполнена;
	Элементы.ГруппаШапка.ТолькоПросмотр = ?(РольДоступна("тсАдминистрирование"), Ложь, Объект.Выполнена);
	Элементы.ГруппаПланирование.ТолькоПросмотр = Объект.Выполнена;
	Если Объект.БизнесПроцесс <> Неопределено И Не Объект.БизнесПроцесс.Пустая() 
			И Не РольДоступна("тсАдминистрирование") Тогда
		Элементы.ТипМероприятия.ТолькоПросмотр = Истина;		
	КонецЕсли;
	
	//	
	Если ТипЗнч(Объект.Ответственный) = Тип("ПланВидовХарактеристикСсылка.ТипыСотрудников") Тогда
		ТипСотрудника = Объект.Ответственный;		
		Если Константы.ЗапретитьУчетПоСотрудникам.Получить() Тогда
			Элементы.Ответственный.Видимость = Ложь;
		Иначе
			Элементы.Ответственный.ТолькоПросмотр = Истина;	
			ЗаполнитьОтветственный();
		КонецЕсли;
	Иначе
		//Элементы.ТипСотрудника.Видимость = Константы.УчетПоТипамСотрудников.Получить();
		ТипСотрудника = ПланыВидовХарактеристик.ТипыСотрудников.ПустаяСсылка();
		
		Если Константы.ЗапретитьУчетПоСотрудникам.Получить() Тогда		
			Если Объект.Ссылка.Пустая() Тогда
				Объект.Ответственный = ПланыВидовХарактеристик.ТипыСотрудников.ПустаяСсылка();
				Элементы.Ответственный.Видимость = Ложь;				
			КонецЕсли;
			Ответственный = Объект.Ответственный;
			Элементы.ТипСотрудника.АвтоОтметкаНезаполненного = Истина;
		Иначе
			Ответственный = ?(Объект.Ответственный = Неопределено, ПараметрыСеанса.ТекущийПользователь, Объект.Ответственный);
		КонецЕсли;		
	КонецЕсли;
	
	//ЦКТ
	//Чуров А.И
	//СтатусОператора = Перечисления.СтатусыОператора.Выключен;
	//СостояниеОператора = Перечисления.СостоянияОператора.ИсходящийЗвонок;
	//УстановитьСтатусОператора();
	//КЦАдресIPЦКТ = Константы.АдресIPЦКТ.Получить();
	//

КонецПроцедуры

&НаКлиенте
Процедура ПередВыполнением(Отказ)
	Если ПередВыполнениемСервер(Отказ) = Истина И Отказ = Ложь Тогда		
		//СоздатьСлед	
		Если Не Объект.СледующееМероприятие.Пустая() Тогда
			////Если Вопрос("Хотите создать следующее мероприятие?", 
			////		РежимДиалогаВопрос.ДаНет,,, "Создать следующее мероприятие?") = КодВозвратаДиалога.Да Тогда	
				Закрыть();
				СоздатьСледующееМероприятие(Отказ);
			////КонецЕсли;
		КонецЕсли;
		
		ОповеститьОбИзменении(Объект.Ссылка);
		Оповестить("ОбновитьТД");
		// Оповестить("ОбновитьТД") используется И при записи,
		// а необходимо только, когда выполнено Мероприятие.  
		Оповестить("ОбновитьПланировщик", Истина, Объект.Ссылка);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ПередВыполнениемСервер(Отказ)
	НачатьТранзакцию();
	Попытка
		//Сами делаем запись и отказ
		//Если Записать() Тогда	
		Если Не Объект.Выполнена Тогда
			ТекстСообщения = "";
			ПроверкаЗаполненияПолейПередВыполнением(Отказ, ТекстСообщения);	
			Если Отказ ИЛИ ТекстСообщения <> "" Тогда		
				Сообщить(ТекстСообщения);
				ВызватьИсключение "!!!";
			Иначе
				ПеренестиТЧДопРеквизиты(Отказ, ТекстСообщения);
				Если Отказ Тогда
					Сообщить(ТекстСообщения);
					ВызватьИсключение "!!!";
				КонецЕсли;
																	
				СохранитьСостояниеБП();
				Объект.Выполнена = Истина;
				Объект.ВыполненоКакНеАктуальное = Ложь;
				Объект.ДатаВыполнения = ТекущаяДата(); //+1 для того, чтобы отмена нормально работала, 
						//если идет параллельное выбивание другого мероприятия, которое в свою очередь, 
						//создает новое мероприятие, НО это не пашет в других случаях...
				Объект.ФактическаяДата = Объект.ДатаВыполнения; //НИКА!!!
				Объект.МоментВремени = ПолучитьМоментВремени(Объект.ДатаВыполнения);
				Объект.Исполнитель = УдалитьОбщегоНазначения.ТекущийПользователь();			
				Записать();
						    
				Если ВыполнитьФункциюДопРеквизитов(Отказ) ИЛИ Отказ Тогда
					ВызватьИсключение "!!!";
				КонецЕсли;
							
				ПродолжитьВыполнениеБП(Отказ);
				Если Отказ Тогда
					ВызватьИсключение "!!!";
				КонецЕсли;
				Элементы.ДекорацияВыполнено.Видимость = Истина;
				Элементы.ФормаОтменитьВыполнение.Доступность = Истина;
				
				//СоздатьСлед	
				ЗафиксироватьТранзакцию();
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;			
		ЗафиксироватьТранзакцию();
		Возврат Ложь;
	Исключение
		ОтменитьТранзакцию();
		Отказ = Истина;
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

&НаСервере
Функция ПолучитьМоментВремени(ДатаВыполнения)
	Возврат Задачи.Мероприятие.ПолучитьМоментВремени(ДатаВыполнения);
КонецФункции

&НаСервере
Процедура СохранитьСостояниеБП()
	Если Не Объект.БизнесПроцесс.Пустая() Тогда
		Объект.ВыполненныеСтрелки.Загрузить(Объект.БизнесПроцесс.ВыполненныеСтрелки.Выгрузить());
		Объект.ЗапущенныеСтадии.Загрузить(Объект.БизнесПроцесс.ЗапущенныеСтадии.Выгрузить());
	КонецЕсли;
КонецПроцедуры
              
&НаСервере
Функция ВыполнитьФункциюДопРеквизитов(Отказ)
	Попытка
		Если Не Объект.Результат.ФункцияДопРеквизитов.Пустая() Тогда
			МероприятиеТекущее = РеквизитФормыВЗначение("Объект");
			Справочники.ФункцииДополнительныхРеквизитов.ВычислитьФункцию(Объект.Результат.ФункцияДопРеквизитов.Функция,
					МероприятиеТекущее, Неопределено, Отказ);
			ЗначениеВРеквизитФормы(МероприятиеТекущее, "Объект");
		КонецЕсли;
		Возврат Ложь;
	Исключение
		Сообщить(ОписаниеОшибки());
		Отказ = Истина;
		Возврат Истина;
	КонецПопытки;
КонецФункции

&НаСервере
Процедура ПродолжитьВыполнениеБП(Отказ)
	Если Объект.БизнесПроцесс <> Неопределено И Не Объект.БизнесПроцесс.Пустая() Тогда
		Объект.БизнесПроцесс.ПолучитьОбъект().ПродолжитьВыполнениеБП(Отказ, Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СоздатьСледующееМероприятие(Отказ)
	НовоеМероприятие = Задачи.Мероприятие.СоздатьЗадачу();
	НовоеМероприятие.Дата = ТекущаяДата();
	
	НовоеМероприятие.Объект = Объект.Объект; 
    НовоеМероприятие.ТипМероприятия = Объект.Результат.ТипСледующегоМероприятия;
	
	НовоеМероприятие.Организация = Объект.Организация;
	НовоеМероприятие.Подразделение = Объект.Подразделение;
	НовоеМероприятие.Ответственный = ?(Объект.Результат.ТипСотрудника.Пустая(), 
			ПланыВидовХарактеристик.ТипыСотрудников.РуководительПодразделения, Объект.Результат.ТипСотрудника);
		
	НовоеМероприятие.ПланируемаяДата = ТекущаяДата();
	НовоеМероприятие.Автор = Объект.Ссылка;
	
	Если Не НовоеМероприятие.ТипМероприятия.ФункцияПередСозданиемИзБП.Пустая() Тогда
		Справочники.ФункцииДополнительныхРеквизитов.ВычислитьФункцию(
				НовоеМероприятие.ТипМероприятия.ФункцияПередСозданиемИзБП.Функция, НовоеМероприятие, НовоеМероприятие);
	КонецЕсли;
	
	//++КазанцевЯА-БП
	Если Константы.КонтрольСроковМероприятий.Получить() И НовоеМероприятие.ТипМероприятия.СрокВыполнения > 0 Тогда 
		НовоеМероприятие.СрокВыполнения = ТекущаяДата() + НовоеМероприятие.ТипМероприятия.СрокВыполнения * 60;
		ОсновнойКалендарьПредприятия = Константы.ОсновнойКалендарьПредприятия.Получить();
		Если Константы.ПереноситьВыходныеИПраздникиМероприятий.Получить() И ЗначениеЗаполнено(ОсновнойКалендарьПредприятия) Тогда
			УстановитьПривилегированныйРежим(Истина);
			ПроизводственныйКалендарь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнойКалендарьПредприятия, "ПроизводственныйКалендарь");
			ПараметрыПолучения = КалендарныеГрафики.ПараметрыПолученияБлижайшихРабочихДат();
			ПараметрыПолучения.ПолучатьПредшествующие = Ложь;
			ПараметрыПолучения.ВызыватьИсключение = Ложь;
			свДата = НачалоДня(НовоеМероприятие.СрокВыполнения);
			свВремя =  НовоеМероприятие.СрокВыполнения - свДата;
			мСрокВыполнения = Новый Массив;
			мСрокВыполнения.Добавить(свДата);
			ДниКалендаря = КалендарныеГрафики.БлижайшиеРабочиеДаты(ПроизводственныйКалендарь, мСрокВыполнения, ПараметрыПолучения);
			НовоеМероприятие.СрокВыполнения = ДниКалендаря.Получить(свДата) + свВремя;
			УстановитьПривилегированныйРежим(Ложь);	
		КонецЕсли;
	КонецЕсли;
	//--КазанцевЯА-БП
	
	Попытка
		НовоеМероприятие.Записать();
		Автоинформирование.СформироватьЗаданиеИзБизнесПроцесса(НовоеМероприятие);
	Исключение
		Отказ = Истина;
		Возврат;
	КонецПопытки;
КонецПроцедуры

&НаСервере
Функция ПолучитьОтветственного(ОбъектСсылка, ОбъектПодразделение)
	Набор = РегистрыСведений.ОтветственныеСотрудники.СоздатьМенеджерЗаписи();
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ИсполнительныеДокументы") Тогда
		Набор.Объект = ОбъектСсылка.Владелец;
	Иначе
		Набор.Объект = ОбъектСсылка;
	КонецЕсли;
	Набор.ТипСотрудника = ПланыВидовХарактеристик.ТипыСотрудников.РуководительПодразделения;
	Набор.Прочитать();
	Если Не Набор.Пользователь.Пустая() Тогда
		Возврат Набор.Пользователь;
	КонецЕсли;
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОбъектыВРаботеОстатки.Сотрудник
	                      |ИЗ
	                      |	РегистрНакопления.ОбъектыВРаботе.Остатки(
	                      |			,
	                      |			Подразделение = &Подразделение
	                      |				И Объект = &Объект
	                      |				И Сотрудник <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК ОбъектыВРаботеОстатки");
	Запрос.УстановитьПараметр("Подразделение", ОбъектПодразделение);
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ИсполнительныеДокументы") Тогда
		Запрос.УстановитьПараметр("Объект", ОбъектСсылка.Владелец);
	Иначе
		Запрос.УстановитьПараметр("Объект", ОбъектСсылка);
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Сотрудник;
	Иначе
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоДереву(Команда)
	Если Объект.ТипМероприятия.Пустая() Тогда
		Сообщить("Тип мероприятия должен быть заполнен!");
	    Возврат;
	Иначе                       
		//Объект.Исполнитель = ПараметрыСеанса.ТекущийПользователь;
		Если Не ЗначениеЗаполнено(Объект.ФактическаяДата) Тогда
			Объект.ФактическаяДата = ТекущаяДата();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.ПланируемаяДата) Тогда
			Объект.ПланируемаяДата = ТекущаяДата();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.ПланируемоеВремя) Тогда
            Объект.ПланируемоеВремя = ТекущаяДата();
		КонецЕсли;
		Сценарий = ПолучитьСценарийДиалогаПоТипуМероприятия(Объект.ТипМероприятия);
		Если Сценарий.Пустая() Тогда
			Сообщить("Для данного типа мероприятия сценарий диалога не определен!");
		Иначе
			Форма = ПолучитьФорму("Обработка.СценарийДиалога.Форма.ФормаОбработки",,ЭтаФорма);
		    Форма.Макет = Сценарий;
			//Чуров А.И.
			Если ОткрытьФорму(Форма) = Истина Тогда
			//Если Форма.ОткрытьМодально() = Истина Тогда
				РезультатПриИзменении(Элементы.Результат);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСценарийДиалогаПоТипуМероприятия(ТипМероприятия)
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСкоринга.ПустаяСсылка) КАК Скоринг,
	                      |	ЗНАЧЕНИЕ(Справочник.Категории.ПустаяСсылка) КАК Категория
	                      |ПОМЕСТИТЬ Таблица
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	СостоянияПоКатегориямОстатки.Скоринг,
	                      |	СостоянияПоКатегориямОстатки.Категория
	                      |ИЗ
	                      |	РегистрНакопления.СостоянияПоКатегориям.Остатки(, Объект = &Объект) КАК СостоянияПоКатегориямОстатки
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	НастройкаСценариев.Сценарий
	                      |ИЗ
	                      |	Таблица КАК Таблица,
	                      |	РегистрСведений.НастройкаСценариев КАК НастройкаСценариев
	                      |ГДЕ
	                      |	(Таблица.Скоринг = НастройкаСценариев.Скоринг
	                      |			ИЛИ НастройкаСценариев.Скоринг = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСкоринга.ПустаяСсылка))
	                      |	И (Таблица.Категория = НастройкаСценариев.Категория
	                      |			ИЛИ НастройкаСценариев.Категория = ЗНАЧЕНИЕ(Справочник.Категории.ПустаяСсылка))
	                      |	И НастройкаСценариев.Используется = ИСТИНА
	                      |	И НастройкаСценариев.ТипМероприятия = &ТипМероприятия
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	НастройкаСценариев.Приоритет УБЫВ");
	Запрос.УстановитьПараметр("Объект", Объект.Объект);
	Запрос.УстановитьПараметр("ТипМероприятия", ТипМероприятия);	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Сценарий;
	Иначе
		Возврат ПредопределенноеЗначение("Справочник.ДеревоРешений.ПустаяСсылка");	
	КонецЕсли;	
КонецФункции

&НаКлиенте
Процедура РезультатПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(Объект.ФактическаяДата) Тогда
		Объект.ФактическаяДата = ТекущаяДата();
	КонецЕсли;
	
	ДобавитьДополнительныеРеквизиты();
	
	СвязанныйДокумент = ЗаполнитьДанныеПоРезультату();
	Если СвязанныйДокумент = ПредопределенноеЗначение("Перечисление.ВидыСвязанныхДокументов.ОбещанныйПлатеж") Тогда
		Элементы.СвязанныйДокумент.Доступность = Истина;
		Если Элемент <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(Объект.СвязанныйДокумент) ИЛИ 
					ТипЗнч(Объект.СвязанныйДокумент) <> Тип("ДокументСсылка.ОбещанныеПлатежи") Тогда
				Форма = ПолучитьФорму("Документ.ОбещанныеПлатежи.Форма.ФормаДокумента",, ЭтаФорма);	
				Форма.Объект.Объект = Объект.Объект;	
				//Чуров А.И.
				ОткрытьФорму(Форма);
				//Форма.ОткрытьМодально();
				Если Не Форма.Объект.Ссылка.Пустая() Тогда
					Объект.СвязанныйДокумент = Форма.Объект.Ссылка;
				Иначе
					Объект.СвязанныйДокумент = ПредопределенноеЗначение("Документ.ОбещанныеПлатежи.ПустаяСсылка");
				КонецЕсли;
			Иначе
				//Чуров
				//ПоказатьЗначение(,Объект.СвязанныйДокумент);
				ОткрытьЗначение(Объект.СвязанныйДокумент);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СвязанныйДокумент = ПредопределенноеЗначение("Перечисление.ВидыСвязанныхДокументов.НеподтвержденныйПлатеж") 
			Тогда
		Элементы.СвязанныйДокумент.Доступность = Истина;
		Если Элемент <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(Объект.СвязанныйДокумент) ИЛИ 
					ТипЗнч(Объект.СвязанныйДокумент) <> Тип("ДокументСсылка.НеподтвержденныеПлатежи") Тогда
				Форма = ПолучитьФорму("Документ.НеподтвержденныеПлатежи.Форма.ФормаДокумента",, ЭтаФорма);	
				Форма.Объект.Объект = Объект.Объект;	
				//Чуров А.И.
				ОткрытьФорму(Форма);
				//Форма.ОткрытьМодально();
				Если Не Форма.Объект.Ссылка.Пустая() Тогда
					Объект.СвязанныйДокумент = Форма.Объект.Ссылка;
				Иначе
					Объект.СвязанныйДокумент = ПредопределенноеЗначение("Документ.НеподтвержденныеПлатежи.ПустаяСсылка");
				КонецЕсли;	
			Иначе
				//ПоказатьЗначение(,Объект.СвязанныйДокумент);
				ОткрытьЗначение(Объект.СвязанныйДокумент);
			КонецЕсли;      
		КонецЕсли;	
		
	ИначеЕсли СвязанныйДокумент = ПредопределенноеЗначение("Перечисление.ВидыСвязанныхДокументов.ПрикрепитьФайлы") Тогда
		Элементы.СвязанныйДокумент.Доступность = Истина;
		Если ТипЗнч(Объект.СвязанныйДокумент) <> Тип("ДокументСсылка.ПрикрепитьФайлы") Тогда
			Объект.СвязанныйДокумент = ПредопределенноеЗначение("Документ.ПрикрепитьФайлы.ПустаяСсылка");
		КонецЕсли;
			
	ИначеЕсли СвязанныйДокумент = ПредопределенноеЗначение("Перечисление.ВидыСвязанныхДокументов.УдалитьРеструктуризацияДолга") Тогда	
		Элементы.СвязанныйДокумент.Доступность = Истина;
		Если ТипЗнч(Объект.СвязанныйДокумент) <> Тип("ДокументСсылка.УдалитьРеструктуризацияДолга") Тогда
			Объект.СвязанныйДокумент = ПредопределенноеЗначение("Документ.УдалитьРеструктуризацияДолга.ПустаяСсылка");
		КонецЕсли;
		
	ИначеЕсли СвязанныйДокумент = ПредопределенноеЗначение("Перечисление.ВидыСвязанныхДокументов.ЗагрузкаЗадолженности") Тогда	
		Элементы.СвязанныйДокумент.Доступность = Истина;
		Если ТипЗнч(Объект.СвязанныйДокумент) <> Тип("ДокументСсылка.ЗагрузкаЗадолженности") Тогда
			Объект.СвязанныйДокумент = ПредопределенноеЗначение("Документ.ЗагрузкаЗадолженности.ПустаяСсылка");
		КонецЕсли;
		
	ИначеЕсли СвязанныйДокумент = ПредопределенноеЗначение("Перечисление.ВидыСвязанныхДокументов.ПоступлениеПлатежей") Тогда	
		Элементы.СвязанныйДокумент.Доступность = Истина;
		Если ТипЗнч(Объект.СвязанныйДокумент) <> Тип("ДокументСсылка.ПоступлениеПлатежей") Тогда
			Объект.СвязанныйДокумент = ПредопределенноеЗначение("Документ.ПоступлениеПлатежей.ПустаяСсылка");
		КонецЕсли;
		
	ИначеЕсли СвязанныйДокумент = ПредопределенноеЗначение("Перечисление.ВидыСвязанныхДокументов.АктуализацияЗадолженности") Тогда	
		Элементы.СвязанныйДокумент.Доступность = Истина;
		Если ТипЗнч(Объект.СвязанныйДокумент) <> Тип("ДокументСсылка.АктуализацияЗадолженности") Тогда
			Объект.СвязанныйДокумент = ПредопределенноеЗначение("Документ.АктуализацияЗадолженности.ПустаяСсылка");
		КонецЕсли;
		
	ИначеЕсли СвязанныйДокумент = ПредопределенноеЗначение("Перечисление.ВидыСвязанныхДокументов.ВходящаяКорреспонденция") Тогда	
		Элементы.СвязанныйДокумент.Доступность = Истина;
		Если ТипЗнч(Объект.СвязанныйДокумент) <> Тип("СправочникСсылка.ВходящаяКорреспонденция") Тогда
			Объект.СвязанныйДокумент = ПредопределенноеЗначение("Справочник.ВходящаяКорреспонденция.ПустаяСсылка");
		КонецЕсли;
	ИначеЕсли СвязанныйДокумент = ПредопределенноеЗначение("Перечисление.ВидыСвязанныхДокументов.ИсходящаяКорреспонденция") Тогда	
		Элементы.СвязанныйДокумент.Доступность = Истина;
		Если ТипЗнч(Объект.СвязанныйДокумент) <> Тип("СправочникСсылка.ИсходящаяКорреспонденция") Тогда
			Объект.СвязанныйДокумент = ПредопределенноеЗначение("Справочник.ИсходящаяКорреспонденция.ПустаяСсылка");
		КонецЕсли;
		
	Иначе
		Объект.СвязанныйДокумент = Неопределено;
		Элементы.СвязанныйДокумент.Доступность = Ложь;
	КонецЕсли;
	
	//
	Если Не Объект.Результат.Пустая() И Не ОбъектыСервер.РазыменоватьСсылку(Объект.Результат, "СвязанныйДокумент.Пустая()") И
			ОбъектыСервер.РазыменоватьСсылку(Объект.Результат, "ПрикрепитьФайл") Тогда
		Элементы.СвязанныйДокумент.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Элементы.СвязанныйДокумент.АвтоОтметкаНезаполненного = Неопределено;
	КонецЕсли;
	
	//
	Элементы.Комментарий.АвтоОтметкаНезаполненного = ?(ОбъектыСервер.РазыменоватьСсылку(Объект.Результат, 
			"ЗаполнитьКомментарий"), Истина, Неопределено);
	
	Если Элемент <> Неопределено Тогда
		ЗаполнитьКомментарий();
	КонецЕсли;
КонецПроцедуры

//Заполнение комментария по  шаблону
&НаКлиенте
Функция ЗаполнитьКомментарий()
	Если ЗначениеЗаполнено(Объект.Результат) Тогда
		Результат = ВыполнитьФункциюКомментария();
		ДлинаБезТочки = СтрДлина(Результат) - 1;
		Если Объект.КомментарийИзменен ИЛИ Объект.Выполнена Тогда
			//Если Лев(Результат, ДлинаБезТочки) <> Лев(Объект.Комментарий, ДлинаБезТочки) Тогда
			//	Объект.Комментарий = Результат + Символы.ПС + Объект.Комментарий;
			//КонецЕсли;
		Иначе
			Объект.Комментарий = Результат;
		КонецЕсли;
	КонецЕсли;	
КонецФункции 

&НаСервере
Функция ВыполнитьФункциюКомментария()
	Значение = "";	
	ПеренестиТЧДопРеквизиты();
	Реквизит = РеквизитФормыВЗначение("Объект");	
 	Возврат Справочники.ФункцииКомментариев.ВычислитьФункцию(Объект.Результат.ШаблонКомментария.Функция, Реквизит,
			Значение);	
КонецФункции

&НаСервере
Функция ЗаполнитьДанныеПоРезультату()
	Если Объект.Результат.Пустая() Тогда
		Объект.СледующееМероприятие = Неопределено;
		Возврат "";
	Иначе
		Объект.СледующееМероприятие = Объект.Результат.ТипСледующегоМероприятия;
		Возврат Объект.Результат.СвязанныйДокумент;
	КонецЕсли;
	
	//Элементы.КонтактноеЛицо.АвтоОтметкаНезаполненного = Объект.Результат.УказатьКонтактноеЛицо;
	//Элементы.ПрикрепитьФайл.АвтоОтметкаНезаполненного = Объект.Результат.ПрикрепитьФайл;
КонецФункции

&НаСервере
Процедура ПроверкаЗаполненияПолейПередВыполнением(Отказ, ТекстСообщения)
	ТекстСообщения = "";
	ОтказПроверкиЗаполнения = Ложь;
	Если Объект.Результат.Пустая() И Не МероприятиеБезРезультатов() Тогда
		ОтказПроверкиЗаполнения = Истина;
		ТекстСообщения = "Результат мероприятия должен быть определен!";
		//Возврат;
	КонецЕсли;
	Если Не ОтказПроверкиЗаполнения И Объект.Результат.УказатьКонтактноеЛицо И 
			Объект.КонтактноеЛицо.Пустая() Тогда
		ОтказПроверкиЗаполнения = Истина;
		ТекстСообщения = "Поле ""Контактное лицо"" должно быть заполнено!";
		//Возврат;
	КонецЕсли;
	Если Не ОтказПроверкиЗаполнения И Объект.Результат.ПрикрепитьФайл И 
				Не ЗначениеЗаполнено(Объект.СвязанныйДокумент) Тогда
		ОтказПроверкиЗаполнения = Истина;
		ТекстСообщения = "Связанный документ должен быть указан!";
		//Возврат;
	КонецЕсли;
	Если Не ОтказПроверкиЗаполнения И Объект.Результат.ЗаполнитьКомментарий И 
			Не ЗначениеЗаполнено(Объект.Комментарий) Тогда
		ОтказПроверкиЗаполнения = Истина;
		ТекстСообщения = "Комментарий должен быть заполнен!";
		//Возврат;
	КонецЕсли;
	Отказ = ОтказПроверкиЗаполнения;
КонецПроцедуры

&НаСервере
Функция МероприятиеБезРезультатов()
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	РезультатыМероприятий.Ссылка
	                      |ИЗ
	                      |	Справочник.РезультатыМероприятий КАК РезультатыМероприятий
	                      |ГДЕ
	                      |	РезультатыМероприятий.Владелец = &Владелец");
	Запрос.УстановитьПараметр("Владелец", Объект.ТипМероприятия);
	Возврат Запрос.Выполнить().Пустой();
КонецФункции

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	//Чуров
	//Дублирует стандартную обработку 
	
	//СтандартнаяОбработка = Ложь;
	//Если Модифицированность Тогда
	//	
		//Ответ = Вопрос("Данные были изменены! Сохранить изменения?", 
		//		РежимДиалогаВопрос.ДаНетОтмена,,, "Сохранить изменения?");
		//Если Ответ = КодВозвратаДиалога.Да Тогда
		//	Записать();
		//ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
		//	Отказ = Истина;
		//Иначе
		//	Модифицированность = Ложь;
		//КонецЕсли;
	//КонецЕсли;
	
	
	
	//
	//ОбъектыСервер.УдалитьПометкуОбИзменении(Отказ, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// Обновить родителя формы
	Если ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("ТаблицаФормы") Тогда
		ЭтаФорма.ВладелецФормы.Обновить();
	КонецЕсли;
	Оповестить("ОбновитьТД");
КонецПроцедуры

&НаСервере
функция ПроверкаТелефонныйЗвонокИсходящий()
	Возврат Справочники.ТипыМероприятий.ТелефонныйЗвонокИсходящий;	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ТипМероприятияПриИзменении(Неопределено);
	
	ДобавитьДополнительныеРеквизиты();
	Если НЕ Объект.КомментарийИзменен И Не Объект.Выполнена Тогда 
		ЗаполнитьКомментарий();
	КонецЕсли;	
	Если Объект.Ссылка.Пустая() И Объект.ТипМероприятия = ПроверкаТелефонныйЗвонокИсходящий() Тогда
		//Форма = ПолучитьФорму("Обработка.СценарийДиалога.Форма.ФормаОбработки",,ЭтаФорма);
		//Форма.Макет = ПолучитьСценарийДиалогаПоТипуМероприятия(Объект.ТипМероприятия);
		//Если НЕ Форма.Макет.Пустая() Тогда
		//	Если Не ЗначениеЗаполнено(Объект.ФактическаяДата) Тогда
		//		Объект.ФактическаяДата = ТекущаяДата();
		//	КонецЕсли;
		//	Если Не ЗначениеЗаполнено(Объект.ПланируемаяДата) Тогда
		//		Объект.ПланируемаяДата = ТекущаяДата();
		//	КонецЕсли;
		//	Если Не ЗначениеЗаполнено(Объект.ПланируемоеВремя) Тогда
		//		Объект.ПланируемоеВремя = ТекущаяДата();
		//	КонецЕсли;
		//	
		//	Если Форма.ОткрытьМодально() = Истина Тогда
		//		РезультатПриИзменении(Неопределено);                    
		//	КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
	
	//ЦКТ получение IP адреса
	//Чуров А.И.
	//Если РаботаСЦКТСервер.ТекущийIPАдрес() = "" Тогда
	//	//РаботаСЦКТСервер.ТекущийIPАдрес(РаботаСЦКТКлиент.ПолучитьIpАдрес());
	//КонецЕсли;
	
	//Если РаботаСЦКТСервер.АдресОбъектаЦКТ() = "" Тогда
	//	РаботаСЦКТСервер.АдресОбъектаЦКТ(РаботаСЦКТКлиент.СоздатьОбъектЦКТ());	
	//КонецЕсли;	
	
	//Чуров А.И.
	//ТекущийIPАдрес = РаботаСЦКТСервер.ТекущийIPАдрес();
	//
	
	// Попытки необходимы, чтобы при создании мероприятия из Рабочего стола заполнялся "объект".
	// Первая попытка заполняет объект, если выбран пользователь на Рабочем Столе (при нажатии кнопки "Создать").
	// Вторая попытка заполняет объект, если выбрано ДолговоеОбязательство на Рабочем столе (при нажатии кнопки "Создать")
	Попытка
		Объект.Объект = ЭтаФорма.ВладелецФормы.Родитель.Родитель.Родитель.Элементы.СписокДО.ТекущиеДанные.Объект;
	Исключение
	КонецПопытки;
	Попытка
		Объект.Объект = ЭтаФорма.ВладелецФормы.Родитель.Родитель.Родитель.ТекущийЭлемент.ТекущиеДанные.ДолговыеОбязательства;
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ДобавитьДополнительныеРеквизиты()
	Элементы.КонтактноеЛицо.Видимость = (Не Объект.ТипМероприятия.Пустая() И 
			Не Объект.ТипМероприятия.ВидКИДляИсходящегоЗвонка.Пустая());
	Элементы.Контакт.Видимость = Элементы.КонтактноеЛицо.Видимость;	
	
	УправлениеСвойствами.ДобавитьДополнительныеРеквизиты(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТипМероприятияПриИзменении(Элемент)
	Если Объект.ТипМероприятия.Пустая() Тогда
		Объект.Результат = ПредопределенноеЗначение("Справочник.РезультатыМероприятий.ПустаяСсылка");
		Элементы.ФормаПечатьУЭД.Доступность = Ложь;    
		Объект.Контакт = "";
		Элементы.Контакт.Видимость = Ложь;
		Объект.КонтактноеЛицо = Неопределено;
		Элементы.КонтактноеЛицо.Видимость = Ложь;
		Попытка
			Элементы.ФормаПозвонитьДолжнику.Доступность = Истина;
		Исключение
		КонецПопытки;
	Иначе
		Если ТипСотрудника.Пустая() И Не ЗначениеЗаполнено(Ответственный) Тогда
			ТипСотрудника = ОбъектыСервер.РазыменоватьСсылку(Объект.ТипМероприятия, "ТипСотрудника");
			ТипСотрудникаПриИзменении(Неопределено);
		КонецЕсли;
		
		Если Объект.Результат = ПредопределенноеЗначение("Справочник.РезультатыМероприятий.ПустаяСсылка") Тогда
			Объект.Результат = ПолучитьРезультатМероприятия(Объект.ТипМероприятия);
		КонецЕсли; 
		РезультатПриИзменении(Неопределено);
		
		Элементы.ФормаПечатьУЭД.Доступность = ОбъектыСервер.РазыменоватьСсылку(Объект.ТипМероприятия, 
				"КнопкаПечатиШаблона");
		Если ОбъектыСервер.РазыменоватьСсылку(Объект.ТипМероприятия, "ВидКИДляИсходящегоЗвонка.Пустая()") Тогда
			Элементы.Контакт.Видимость = Ложь;
			Попытка
				Элементы.ФормаПозвонитьДолжнику.Доступность = Ложь;
			Исключение
			КонецПопытки;
		Иначе
			Элементы.Контакт.Видимость = Истина;
			Попытка
				Элементы.ФормаПозвонитьДолжнику.Доступность = Истина;
			Исключение
			КонецПопытки;
			ЗаполнитьСписокКонтактов(Элемент = Неопределено);
		КонецЕсли;
		
		Попытка
			Если 
				//Объект.ТипМероприятия = ПредопределенноеЗначение("Справочник.ТипыМероприятий.ТелефонныйЗвонокИсходящий")
				//И НЕ 
				НЕ ОбъектыСервер.РазыменоватьСсылку(Объект.ТипМероприятия, "ВидКИДляИсходящегоЗвонка.Пустая()") Тогда
				Элементы.ФормаПозвонитьДолжнику.Доступность = Истина;
			Иначе
				Элементы.ФормаПозвонитьДолжнику.Доступность = Ложь;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	ДобавитьДополнительныеДанные();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокКонтактов(ЭлементНеопределено)
	Элементы.Контакт.СписокВыбора.Очистить();
	Если Не ЭлементНеопределено Тогда
		Объект.Контакт = "";
	КонецЕсли;
	
	Если Не Объект.ТипМероприятия.ВидКИДляИсходящегоЗвонка.Пустая() Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ДополнительныеРеквизитыИСведения.Ссылка,
		                      |	ДополнительныеРеквизитыИСведения.ВидСтроки
		                      |ПОМЕСТИТЬ Табл
		                      |ИЗ
		                      |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		                      |ГДЕ
		                      |	ДополнительныеРеквизитыИСведения.ВидКИ = &ВидКИ
		                      |	И ДополнительныеРеквизитыИСведения.СправочникВладелец = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.Справочник_Контрагенты)
		                      |	И НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	ВложенныйЗапрос.Свойство КАК Свойство,
		                      |	ВложенныйЗапрос.Значение,
		                      |	Табл.ВидСтроки
		                      |ИЗ
		                      |	Табл КАК Табл
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                      |			ДополнительныеСведения.Свойство КАК Свойство,
		                      |			ДополнительныеСведения.Значение КАК Значение
		                      |		ИЗ
		                      |			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		                      |		ГДЕ
		                      |			ДополнительныеСведения.Объект = &Объект
		                      |		
		                      |		ОБЪЕДИНИТЬ ВСЕ
		                      |		
		                      |		ВЫБРАТЬ
		                      |			КонтрагентыДополнительныеРеквизиты.Свойство,
		                      |			КонтрагентыДополнительныеРеквизиты.Значение
		                      |		ИЗ
		                      |			Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
		                      |		ГДЕ
		                      |			КонтрагентыДополнительныеРеквизиты.Ссылка = &Объект) КАК ВложенныйЗапрос
		                      |		ПО Табл.Ссылка = ВложенныйЗапрос.Свойство
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	Свойство");
		Запрос.УстановитьПараметр("ВидКИ", Объект.ТипМероприятия.ВидКИДляИсходящегоЗвонка);
		Запрос.УстановитьПараметр("Объект", КонтрагентКЛ);
		Результат = Запрос.Выполнить().Выбрать();
		Элементы.Контакт.СписокВыбора.Очистить();
		Пока Результат.Следующий() Цикл 
			Если Результат.ВидСтроки = Перечисления.ВидыТипаСтрока.Телефон Тогда
				Ном = Найти(Результат.Значение, ";");	
				Стр = Лев(Результат.Значение, Ном - 1);	
				
				Ном = Найти(Стр, ",");
				Если Ном > 0 Тогда
					Элементы.Контакт.СписокВыбора.Добавить(Лев(Стр, Ном - 1), Результат.Свойство.Наименование + ": " + Стр);	
				Иначе
					Элементы.Контакт.СписокВыбора.Добавить(Стр, Результат.Свойство.Наименование + ": " + Стр);
				КонецЕсли;
				
			ИначеЕсли Результат.ВидСтроки = Перечисления.ВидыТипаСтрока.Адрес Тогда
				Ном = Найти(Результат.Значение, ";");	
				Стр = Лев(Результат.Значение, Ном - 1);		
				Элементы.Контакт.СписокВыбора.Добавить(Стр, Результат.Свойство.Наименование + ": " + Стр);
			Иначе
				Стр = Результат.Значение;
				Ном = Найти(Стр, ";");
				Пока Ном > 0 Цикл
					Элементы.Контакт.СписокВыбора.Добавить(Стр, Результат.Свойство.Наименование + ": " + Лев(Стр, Ном - 1));
					Стр = Сред(Стр, Ном + 1);
				КонецЦикла;
				Если Стр <> "" Тогда
					Элементы.Контакт.СписокВыбора.Добавить(Стр, Результат.Свойство.Наименование + ": " + Стр);
				КонецЕсли;
			КонецЕсли;		
		КонецЦикла;
		
		Если Объект.Контакт = "" И Элементы.Контакт.СписокВыбора.Количество() > 0 Тогда
			Объект.Контакт = Элементы.Контакт.СписокВыбора[0].Значение;
		КонецЕсли;
		
		// То же для долгового обязательства
		//////////////////////////////////
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ДополнительныеРеквизитыИСведения.Ссылка,
		                      |	ДополнительныеРеквизитыИСведения.ВидСтроки
		                      |ПОМЕСТИТЬ Табл
		                      |ИЗ
		                      |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		                      |ГДЕ
		                      |	ДополнительныеРеквизитыИСведения.ВидКИ = &ВидКИ
		                      |	И ДополнительныеРеквизитыИСведения.СправочникВладелец = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.Справочник_ДолговыеОбязательства)
		                      |	И НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	ВложенныйЗапрос.Свойство КАК Свойство,
		                      |	ВложенныйЗапрос.Значение,
		                      |	Табл.ВидСтроки
		                      |ИЗ
		                      |	Табл КАК Табл
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                      |			ДополнительныеСведения.Свойство КАК Свойство,
		                      |			ДополнительныеСведения.Значение КАК Значение
		                      |		ИЗ
		                      |			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		                      |		ГДЕ
		                      |			ДополнительныеСведения.Объект = &Объект
		                      |		
		                      |		ОБЪЕДИНИТЬ ВСЕ
		                      |		
		                      |		ВЫБРАТЬ
		                      |			КонтрагентыДополнительныеРеквизиты.Свойство,
		                      |			КонтрагентыДополнительныеРеквизиты.Значение
		                      |		ИЗ
		                      |			Справочник.ДолговыеОбязательства.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
		                      |		ГДЕ
		                      |			КонтрагентыДополнительныеРеквизиты.Ссылка = &Объект) КАК ВложенныйЗапрос
		                      |		ПО Табл.Ссылка = ВложенныйЗапрос.Свойство
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	Свойство");
		Запрос.УстановитьПараметр("ВидКИ", Объект.ТипМероприятия.ВидКИДляИсходящегоЗвонка);
		Запрос.УстановитьПараметр("Объект", Объект.Объект);
		Результат = Запрос.Выполнить().Выбрать();
		//Элементы.Контакт.СписокВыбора.Очистить();
		Пока Результат.Следующий() Цикл
			Если ТипЗнч(Результат.Значение) = Тип("СправочникСсылка.СудебныеПриставы") ИЛИ ТипЗнч(Результат.Значение) = Тип("СправочникСсылка.Судьи") Тогда
				Для Каждого Эл из Результат.Значение.Телефоны Цикл
					Стр = Эл.Номер;
					Ном = Найти(Стр, ";");
					Пока Ном > 0 Цикл
						Элементы.Контакт.СписокВыбора.Добавить(Стр, Результат.Свойство.Наименование + ": " + Результат.Значение.Наименование + ": " + Строка(Эл.ВидТелефона) + ": " + Лев(Стр, Ном - 1));
						Стр = Сред(Стр, Ном + 1);
					КонецЦикла;
					Если Стр <> "" Тогда
						Элементы.Контакт.СписокВыбора.Добавить(Стр, Результат.Свойство.Наименование + ": " + Результат.Значение.Наименование + ": " + Строка(Эл.ВидТелефона) + ": " + Стр);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если Результат.ВидСтроки = Перечисления.ВидыТипаСтрока.Телефон Тогда
					Ном = Найти(Результат.Значение, ";");	
					Стр = Лев(Результат.Значение, Ном - 1);	
					
					Ном = Найти(Стр, ",");
					Если Ном > 0 Тогда
						Элементы.Контакт.СписокВыбора.Добавить(Лев(Стр, Ном - 1), Результат.Свойство.Наименование + ": " + Стр);	
					Иначе
						Элементы.Контакт.СписокВыбора.Добавить(Стр, Результат.Свойство.Наименование + ": " + Стр);
					КонецЕсли;
					
				ИначеЕсли Результат.ВидСтроки = Перечисления.ВидыТипаСтрока.Адрес Тогда
					Ном = Найти(Результат.Значение, ";");	
					Стр = Лев(Результат.Значение, Ном - 1);		
					Элементы.Контакт.СписокВыбора.Добавить(Стр, Результат.Свойство.Наименование + ": " + Стр);
				Иначе
					Стр = Результат.Значение;
					Ном = Найти(Стр, ";");
					Пока Ном > 0 Цикл
						Элементы.Контакт.СписокВыбора.Добавить(Стр, Результат.Свойство.Наименование + ": " + Лев(Стр, Ном - 1));
						Стр = Сред(Стр, Ном + 1);
					КонецЦикла;
					Если Стр <> "" Тогда
						Элементы.Контакт.СписокВыбора.Добавить(Стр, Результат.Свойство.Наименование + ": " + Стр);
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		
		Если Объект.Контакт = "" И Элементы.Контакт.СписокВыбора.Количество() > 0 Тогда
			Объект.Контакт = Элементы.Контакт.СписокВыбора[0].Значение;
		КонецЕсли;

	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура ДобавитьДополнительныеДанные()
	//Удалить текущие
	МассивРеквизитов = Новый Массив();
	Для Каждого Элемент Из ДополнительныеДанные.НайтиСтроки(Новый Структура()) Цикл
		МассивРеквизитов.Добавить("РеквизитДанные_" + СтрЗаменить(Элемент.Свойство.Код, " ", "_"));
		Элементы.Удалить(Элементы.Найти("РеквизитДанные_" + СтрЗаменить(Элемент.Свойство.Код, " ", "_")));
		ДополнительныеДанные.Удалить(Элемент);
	КонецЦикла;
	ЭтаФорма.ИзменитьРеквизиты(, МассивРеквизитов);
	
	//Добавить новые	
	Если Не Объект.ТипМероприятия.Пустая() И Не Объект.ТипМероприятия.ФункцияДопДанных.Пустая() И
			ЗначениеЗаполнено(Объект.Объект) Тогда
		ФункцияДопДанных = Объект.ТипМероприятия.ФункцияДопДанных;
		ДополнительныеДанные.Загрузить(ФункцияДопДанных.ВозвращаемыеКолонки.Выгрузить());
		ПолученноеЗначение = Справочники.ФункцииДополнительныхДанных.ВычислитьФункцию(
				ФункцияДопДанных.Функция, РеквизитФормыВЗначение("Объект"), ДополнительныеДанные.Выгрузить());
		ДополнительныеДанные.Загрузить(ПолученноеЗначение);
			
		Для Каждого Элемент Из ДополнительныеДанные Цикл 
			МассивРеквизитов.Очистить();
			Реквизит = Новый РеквизитФормы("РеквизитДанные_" + СтрЗаменить(Элемент.Свойство.Код, " ", "_"), Элемент.Свойство.ТипЗначения,, 
					Элемент.Свойство.Наименование);
			МассивРеквизитов.Добавить(Реквизит);		
			ЭтаФорма.ИзменитьРеквизиты(МассивРеквизитов);
			Выполнить("ЭтаФорма.РеквизитДанные_" + СтрЗаменить(Элемент.Свойство.Код, " ", "_") + " = Элемент.Значение;");
			
			ПолеФормы = Элементы.Добавить("РеквизитДанные_" + СтрЗаменить(Элемент.Свойство.Код, " ", "_"), Тип("ПолеФормы"), 
					Элементы.ГруппаДопДанные);
			ПолеФормы.Вид = ВидПоляФормы.ПолеВвода;
			ПолеФормы.ПутьКДанным = "РеквизитДанные_" + СтрЗаменить(Элемент.Свойство.Код, " ", "_");
			ПолеФормы.ВыбиратьТип = Ложь;
			ПолеФормы.ТолькоПросмотр = Истина;
			ПолеФормы.УстановитьДействие("Открытие", "ДополнительныеДанныеОткрытие");
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьРезультатМероприятия(ТипМероприятия)
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 2
	                      |	РезультатыМероприятий.Ссылка
	                      |ИЗ
	                      |	Справочник.РезультатыМероприятий КАК РезультатыМероприятий
	                      |ГДЕ
	                      |	РезультатыМероприятий.Владелец = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ТипМероприятия);
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() = 1 Тогда
	    Возврат Таблица[0].Ссылка;
	Иначе
		Возврат Справочники.РезультатыМероприятий.ПустаяСсылка();
	КонецЕсли;
КонецФункции


&НаКлиенте
Процедура ПозвонитьДолжнику(Команда)
	////////ЦКТ при входе на вкладку
	//////Если КомпонентаОбъект = Неопределено Тогда
	//////   	КомпонентаОбъект = РаботаСЦКТКлиент.ЗагрузитьОбъектКомпоненты();		
	//////КонецЕсли;
	//////Если КомпонентаОбъект <> Неопределено И Не ЗапуститьSocketServer Тогда
	//////	КомпонентаОбъект.ЗапуститьSocketServer(5090);
	//////	ЗапуститьSocketServer = Истина;
	//////КонецЕсли;
	//////
	////////ЦКТ включить оператора
	//////Если КомпонентаОбъект <> Неопределено Тогда
	//////	КомпонентаОбъект.ПослатьУдаленноеСообщение(КЦАдресIPЦКТ, 5090, 5091, "ВключитьОператора" + ":" + 
	//////			ПолучитьНомерОператора() + "_" + ТекущийIPАдрес + "~1");
	//////КонецЕсли;
	//////
	//////
	////////
	////////ОбъектЦКТ = ПолучитьИзВременногоХранилища(РаботаСЦКТСервер.АдресОбъектаЦКТ());
	
	Если Не ЗначениеЗаполнено(Объект.ТипМероприятия) 
			И НЕ ОбъектыСервер.РазыменоватьСсылку(Объект.ТипМероприятия, "ВидКИДляИсходящегоЗвонка.Пустая()") Тогда
		Объект.ТипМероприятия = ПредопределенноеЗначение("Справочник.ТипыМероприятий.ТелефонныйЗвонокИсходящий");	
	КонецЕсли;
 	
	Ф = ПолучитьФорму("Обработка.бтБИТфон.форма",, ЭтаФорма);
	Ф.НомерЛиния1 = Объект.Контакт;
	//Чуров
	ОткрытьФорму(Ф);
	//Ф.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Номер = Найти(Событие, ":");
	Если Номер > 0 Тогда
		Данные = Сред(Событие, Номер + 1);
		Событие = Лев(Событие, Номер - 1);
	Иначе
		Данные = "";
	КонецЕсли;
	
	
	Если Событие = "ТекущаяЗадача" Тогда
		////Элементы.Должник.ТолькоПросмотр = Истина;
		////
		////Должник = Неопределено;
		////ДО = Неопределено;
		////Кампания = Неопределено;
		////ПолучитьДолжникаИДОПоУИДТекущейЗадачи(Должник, ДО, Кампания, Данные);
		////
		////НовоеМероприятие();
		////Если Должник <> Неопределено Тогда
		////	//Создать форму
		////	ФормаМероприятия.Организация = ПолучитьТекущегоПользователя("Организация");
		////	ФормаМероприятия.Подразделение = ПолучитьТекущегоПользователя("Подразделение");
		////	ФормаМероприятия.ТипМероприятия = ПредопределенноеЗначение("Справочник.ТипыМероприятий.ТелефонныйЗвонокИсходящий");
		////	ФормаМероприятия.Автор = Кампания;
		////	//ФормаМероприятия.Ответственный = ФормаМероприятия.Автор;
		////	//ФормаМероприятия.Исполнитель = ФормаМероприятия.Автор;
		////	ФормаМероприятия.Должник = Должник; 		
		////	ФормаМероприятия.ДолговоеОбязательство = ДО;
		////	ФормаМероприятия.ПланируемаяДата = ТекущаяДата();
		////	ФормаМероприятия.ПланируемоеВремя = ТекущаяДата();
		////	ФормаМероприятия.БизнесПроцесс = Кампания;
		////	
		////	ТипМероприятияПриИзменении(ФормаМероприятия);
		////	
		////	ЗаполнитьФормуМероприятием();
		////КонецЕсли;
		
	ИначеЕсли Событие = "Коммутация" Тогда
		//////СвязьПоВладельцуД_ДО(Истина);
		
		СтатусОператора = ПредопределенноеЗначение("Перечисление.СтатусыОператора.Занят");
		УстановитьСтатусОператора();
		Попытка
			КомпонентаОбъект.ПослатьУдаленноеСообщение(КЦАдресIPЦКТ, 5090, 5091, "СменилСтатус" + ":" + 
					ПолучитьНомерОператора());
		Исключение
		КонецПопытки;	
		
		Объект.бтЗаписьРазговора = Данные;
		////////Открыть форму
		////////Если Не ФормаМероприятия.Ссылка.Пустая() Тогда
		//////	//ОбъектМероприятие = ФормаМероприятия;
		//////	ЗаполнитьФормуМероприятием();
		//////	УстановитьОтбор(События1, "Должник", ОбъектМероприятие.Должник, Истина);
		//////	УстановитьОтбор(События1, "ДолговоеОбязательство", ОбъектМероприятие.ДолговоеОбязательство, 
		//////			Не ОбъектМероприятие.ДолговоеОбязательство.Пустая());
		//////	УстановитьОтбор(События2, "Должник", ОбъектМероприятие.Должник, Истина);
		//////	УстановитьОтбор(События2, "ДолговоеОбязательство", ОбъектМероприятие.ДолговоеОбязательство, 
		//////			Не ОбъектМероприятие.ДолговоеОбязательство.Пустая());
		//////	УстановитьОтбор(События3, "Должник", ОбъектМероприятие.Должник, Истина);
		//////	УстановитьОтбор(События3, "ДолговоеОбязательство", ОбъектМероприятие.ДолговоеОбязательство, 
		//////			Не ОбъектМероприятие.ДолговоеОбязательство.Пустая());
		//////	ПолучитьМакет(ФормаМероприятия);		
		//////	МакетПриИзменении(ФормаМероприятия);			
		//////	//НовоеМероприятие();
		////////КонецЕсли;
		
	ИначеЕсли Событие = "КоммутацияВходящийВызов" Тогда	
		////Элементы.Должник.ТолькоПросмотр = Ложь;
		////СвязьПоВладельцуД_ДО(Ложь);
		////		
		////СтатусОператора = ПредопределенноеЗначение("Перечисление.СтатусыОператора.Занят");
		////УстановитьСтатусОператора();
		////Попытка
		////	КомпонентаОбъект.ПослатьУдаленноеСообщение(КЦАдресIPЦКТ, 5090, 5091, "СменилСтатус" + ":" + 
		////			ПолучитьНомерОператора());
		////Исключение
		////КонецПопытки;
		////НовоеМероприятие();	
		////
		////ФормаМероприятия.Организация = ПолучитьТекущегоПользователя("Организация");
		////ФормаМероприятия.Подразделение = ПолучитьТекущегоПользователя("Подразделение");
		////ФормаМероприятия.ТипМероприятия = ПредопределенноеЗначение("Справочник.ТипыМероприятий.ТелефонныйЗвонокВходящий");
		////ФормаМероприятия.Автор = ОбщегоНазначения.ТекущийПользователь();
		//////ФормаМероприятия.Ответственный = ФормаМероприятия.Автор;
		//////ФормаМероприятия.Исполнитель = ФормаМероприятия.Автор;
		////ФормаМероприятия.ПланируемаяДата = ТекущаяДата();
		////ФормаМероприятия.ПланируемоеВремя = ТекущаяДата();
		////ФормаМероприятия.бтЗаписьРазговора = Данные;
		////
		////ТипМероприятияПриИзменении(ФормаМероприятия);	
		////ЗаполнитьФормуМероприятием();
		////ПолучитьМакет(ФормаМероприятия);
		////МакетПриИзменении(ФормаМероприятия);
		
	ИначеЕсли Событие = "КоммутацияПереадресация"	Тогда
		////СтатусОператора = ПредопределенноеЗначение("Перечисление.СтатусыОператора.Занят");
		////УстановитьСтатусОператора();
		////Попытка
		////	КомпонентаОбъект.ПослатьУдаленноеСообщение(КЦАдресIPЦКТ, 5090, 5091, "СменилСтатус" + ":" + 
		////			ПолучитьНомерОператора());
		////Исключение
		////КонецПопытки;
		////
		////НовоеМероприятие(Данные);
		////
		////ЗаполнитьФормуМероприятием();
		////ПолучитьМакет(ФормаМероприятия);
		////МакетПриИзменении(ФормаМероприятия);
		
	ИначеЕсли Событие = "ОператорВключен" Тогда
		СтатусОператора = ПредопределенноеЗначение("Перечисление.СтатусыОператора.Включен");
		Элементы.ФормаКЦГотовПринятьЗвонок.Картинка = БиблиотекаКартинок.Пауза;
		Элементы.ФормаКЦГотовПринятьЗвонок.Заголовок = "Пауза";
		УстановитьСтатусОператора();
		КомпонентаОбъект.ПослатьУдаленноеСообщение(КЦАдресIPЦКТ, 5090, 5091, "СменилСтатус" + ":" + 
				ПолучитьНомерОператора());
		
	ИначеЕсли Событие = "ОператорНаПаузе" Тогда
		СтатусОператора = ПредопределенноеЗначение("Перечисление.СтатусыОператора.Пауза");	
		Элементы.ФормаКЦГотовПринятьЗвонок.Картинка = БиблиотекаКартинок.Продолжение;
		Элементы.ФормаКЦГотовПринятьЗвонок.Заголовок = "Продолжить";
		УстановитьСтатусОператора();
		КомпонентаОбъект.ПослатьУдаленноеСообщение(КЦАдресIPЦКТ, 5090, 5091, "СменилСтатус" + ":" + 
				ПолучитьНомерОператора());
		
	ИначеЕсли Событие = "ОператорВыключен" Тогда
		СтатусОператора = ПредопределенноеЗначение("Перечисление.СтатусыОператора.Выключен");
		СостояниеОператора = Неопределено;
		ТекущийУИДАбонента = Неопределено;
		Элементы.ФормаКЦГотовПринятьЗвонок.Картинка = БиблиотекаКартинок.СоздатьЭлементСписка;		
		Элементы.ФормаКЦГотовПринятьЗвонок.Заголовок = "Включен";
		УстановитьСтатусОператора();
		КомпонентаОбъект.ПослатьУдаленноеСообщение(КЦАдресIPЦКТ, 5090, 5091, "СменилСтатус" + ":" + 
				ПолучитьНомерОператора());
		//Кусок из ОБНОВИТЬ ОПЕРАТОРОВ
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОператоры Тогда
			//////КЦОбновитьОператоров(Неопределено);
		КонецЕсли;
		//
				
	ИначеЕсли Событие = "ГотовПринятьЗвонок" Тогда			
		СтатусОператора = ПредопределенноеЗначение("Перечисление.СтатусыОператора.Включен");
		УстановитьСтатусОператора();
		КомпонентаОбъект.ПослатьУдаленноеСообщение(КЦАдресIPЦКТ, 5090, 5091, "СменилСтатус" + ":" + 
				ПолучитьНомерОператора());
		
	ИначеЕсли Событие = "ОператорСвободен" Тогда
		СтатусОператора = ПредопределенноеЗначение("Перечисление.СтатусыОператора.Включен");
		УстановитьСтатусОператора();
		КомпонентаОбъект.ПослатьУдаленноеСообщение(КЦАдресIPЦКТ, 5090, 5091, "СменилСтатус" + ":" + 
				ПолучитьНомерОператора());
		
	ИначеЕсли Событие = "ОбновитьОператоров" Тогда
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОператоры Тогда
			//////КЦОбновитьОператоров(Неопределено);
		КонецЕсли;
		
	ИначеЕсли Событие = "ТестЗапрос" Тогда
		Если КомпонентаОбъект <> Неопределено Тогда
			КомпонентаОбъект.ПослатьУдаленноеСообщение(КЦАдресIPЦКТ, 5090, 5091, "ТестОтвет" + ":" + 
					ПолучитьНомерОператора());
		КонецЕсли;	
				
	ИначеЕсли Событие = "СообщениеПользователю" Тогда
		Сообщить(Данные);
	КонецЕсли;
		
	//Сообщить("ВнешнееСобытие - ФормаРабСтол " + Строка(Событие) + " " + Строка(Данные));
КонецПроцедуры

&НаСервере
Функция ПолучитьНомерОператора()
    Возврат Формат(ПараметрыСеанса.ТекущийПользователь.НомерОператора, "ЧГ=");	
КонецФункции

&НаСервере
Процедура ПолучитьДолжникаИДОПоУИДТекущейЗадачи(Должник, ДО, Кампания, УИД)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КампанииОбзвонаДолговыеОбязательства.Должник,
	                      |	КампанииОбзвонаДолговыеОбязательства.ДолговоеОбязательство,
	                      |	КампанииОбзвонаДолговыеОбязательства.Ссылка
	                      |ИЗ
	                      |	БизнесПроцесс.КампанииОбзвона.ДолговыеОбязательства КАК КампанииОбзвонаДолговыеОбязательства
	                      |ГДЕ
	                      |	КампанииОбзвонаДолговыеОбязательства.УИД = &УИД");
	Попытка
		Запрос.УстановитьПараметр("УИД", Новый УникальныйИдентификатор(УИД));
	Исключение
		Должник = Неопределено;
		ДО = Неопределено;
		Кампания = Неопределено;
		Возврат;
	КонецПопытки;
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Должник = Результат.Должник;
		ДО = Результат.ДолговоеОбязательство;
		Кампания = Результат.Ссылка;
	Иначе
		Должник = Неопределено;
		ДО = Неопределено;
		Кампания = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусОператора()
	УстановитьПривилегированныйРежим(Истина);
	Набор = РегистрыСведений.СостоянияОператоров.СоздатьМенеджерЗаписи();
	Набор.Оператор = ПараметрыСеанса.ТекущийПользователь;
	Набор.СтатусОператора = СтатусОператора;
	Набор.СостояниеОператора = СостояниеОператора;
	Набор.Записать();
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьИЗакрыть(Команда)
	Отказ = Ложь;
	ПередВыполнением(Отказ);
	Если Не Отказ Тогда
		Попытка
			Закрыть();
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.Ответственный = ?(ТипСотрудника.Пустая(), Ответственный, ТипСотрудника); //!!!!!
	
	УправлениеСвойствами.ПередЗаписьюНаСервере2(ЭтаФорма, ТекущийОбъект, Отказ, ТекущийОбъект.Выполнена);
		
	Если РольДоступна("тсАдминистрирование") Тогда
		Отказ = Ложь;
	КонецЕсли;
	//ТекущийОбъект.ДополнительныеРеквизиты.Загрузить(ДополнительныеРеквизиты.Выгрузить());
КонецПроцедуры

&НаСервере
Процедура ПеренестиТЧДопРеквизиты(Отказ = Ложь, ТекстСообщения = "")
	Для Каждого Элемент Из ДополнительныеРеквизиты Цикл
		Попытка
			Выполнить("Элемент.Значение = ЭтаФорма.Реквизит_" + СтрЗаменить(Элемент.Свойство.Код, " ", "_") + ";");
		Исключение
			Отказ = Истина;
			Возврат;
		КонецПопытки;
	КонецЦикла;
	
	Объект.ДополнительныеРеквизиты.Очистить();
	Для Каждого Элемент Из ДополнительныеРеквизиты Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
	        НоваяСтрока = Объект.ДополнительныеРеквизиты.Добавить();
			НоваяСтрока.Свойство = Элемент.Свойство;
			НоваяСтрока.Значение = Элемент.Значение;
		ИначеЕсли Элемент.Обязательное Тогда
			Отказ = Истина;	
			ТекстСообщения = "Не заполнены обязательные реквизиты!";
		КонецЕсли;
	КонецЦикла;
	//Объект.ДополнительныеРеквизиты.Загрузить(ДополнительныеРеквизиты.Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеДанныеОткрытие(Элемент, СтандартнаяОбработка)
	Значение = Неопределено;
	Выполнить("Значение = " + Элемент.Имя + ";");
	
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.ТипыПрикрепляемыхФайлов") Тогда
		СтандартнаяОбработка = Ложь;
		Путь = "";
        Данные = СписокВыборНаСервере(Значение, Путь);
		Если Данные = Неопределено Тогда
			Сообщить("Файл не найден!");
			Возврат;
		КонецЕсли;
		Файл = Новый Файл(Путь);	
		
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Диалог.Заголовок = "Выберите файл";
		Диалог.ПолноеИмяФайла = Файл.Имя; 
		Диалог.Фильтр = "*" + Файл.Расширение + "|*" + Файл.Расширение;  
		Диалог.МножественныйВыбор = Ложь;
		//Диалог.Каталог = ТекущиеДанные.Путь;
		Если Диалог.Выбрать() Тогда
			Данные.Записать(Диалог.ПолноеИмяФайла);
			ЗапуститьПриложение(Диалог.ПолноеИмяФайла);
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыОткрытие(Элемент, СтандартнаяОбработка)
	Значение = Неопределено;
	Выполнить("Значение = " + Элемент.Имя + ";");
	
	Если Значение = ПредопределенноеЗначение("Документ.ПрикрепитьФайлы.ПустаяСсылка") Тогда
		СтандартнаяОбработка = Ложь;
		
   		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.Заголовок = "Выберите файл";
		//Диалог.ПолноеИмяФайла = НаборКонстант.ПутьКПапкеКомпоненты; 
		Диалог.Фильтр = "Все|*.*";  
		Диалог.МножественныйВыбор = Ложь;
		//Диалог.Каталог = ТекущиеДанные.Путь;
		Если Диалог.Выбрать() Тогда
			Форма = ПолучитьФорму("Документ.ПрикрепитьФайлы.Форма.ФормаДокумента",, ЭтаФорма);
			Форма.Объект.Объект = Объект.Объект;
			Форма.Записать();
			Выполнить(Элемент.Имя + " = Форма.Объект.Ссылка;");
			Форма.Объект.Файлы.Добавить().Путь = Диалог.ПолноеИмяФайла;
			Форма.Модифицированность = Истина;
			Форма.Открыть(); 					
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыПриИзменении(Элемент)
	Модифицированность = Истина;
	ЗаполнитьКомментарий();
КонецПроцедуры

&НаСервере
Функция СписокВыборНаСервере(ТипФайла, Путь)
    Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
                          |	ПрикрепитьФайлыФайлы.Хранилище,
                          |	ПрикрепитьФайлыФайлы.Путь
                          |ИЗ
                          |	Документ.ПрикрепитьФайлы.Файлы КАК ПрикрепитьФайлыФайлы
                          |ГДЕ
                          |	ПрикрепитьФайлыФайлы.Ссылка.Объект = &Объект
                          |	И ПрикрепитьФайлыФайлы.ТипФайла = &ТипФайла
                          |
                          |УПОРЯДОЧИТЬ ПО
                          |	ПрикрепитьФайлыФайлы.Ссылка.Дата УБЫВ");
	Запрос.УстановитьПараметр("Объект", Объект.Объект);
	Запрос.УстановитьПараметр("ТипФайла", ТипФайла);
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 0 Тогда
		Путь = Результат[0].Путь;
		Возврат Результат[0].Хранилище.Получить();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура СвязанныйДокументОткрытие(Элемент, СтандартнаяОбработка)
	Если Объект.СвязанныйДокумент = ПредопределенноеЗначение("Документ.ПрикрепитьФайлы.ПустаяСсылка") Тогда
		СтандартнаяОбработка = Ложь;
		
   		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.Заголовок = "Выберите файл";
		//Диалог.ПолноеИмяФайла = НаборКонстант.ПутьКПапкеКомпоненты; 
		Диалог.Фильтр = "Все|*.*";  
		Диалог.МножественныйВыбор = Ложь;
		//Диалог.Каталог = ТекущиеДанные.Путь;
		Если Диалог.Выбрать() Тогда
			ЗначЗаполнения = Новый Структура("ЗначенияЗаполнения", Новый Структура("Объект", Объект.Объект));			
			Форма = ПолучитьФорму("Документ.ПрикрепитьФайлы.Форма.ФормаДокумента", ЗначЗаполнения, ЭтаФорма);
			Форма.Записать();
			
			Объект.СвязанныйДокумент = Форма.Объект.Ссылка;
			Файл = Новый Файл(Диалог.ПолноеИмяФайла);
			СтрокаФайл = Форма.Объект.Файлы.Добавить();
			СтрокаФайл.Путь = Диалог.ПолноеИмяФайла;
			СтрокаФайл.Размер = Форма.ОкруглитьРазмерФайла(Файл.Размер());
			Форма.Модифицированность = Истина;
			Форма.Открыть(); 					
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыполнение(Команда) Экспорт
	Если ОтменитьВыполнениеЗадачи() Тогда
		Элементы.ДекорацияВыполнено.Видимость = Ложь;
		Элементы.ФормаОтменитьВыполнение.Доступность = Ложь;
		
		ОповеститьОбИзменении(Объект.Ссылка);
		Оповестить("ОбновитьТД");
		Оповестить("ОбновитьПланировщик", Ложь, Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОтменитьВыполнениеЗадачи()
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Объект.БизнесПроцесс.Пустая() Тогда
		//1) Проверяем есть ли выполненные мероприятия с более поздней датой
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                      |	Мероприятие.Номер,
		                      |	Мероприятие.Дата
		                      |ИЗ
		                      |	Задача.Мероприятие КАК Мероприятие
		                      |ГДЕ
		                      |	(Мероприятие.ДатаВыполнения > &ДатаВыполнения
		                      |			ИЛИ Мероприятие.ДатаВыполнения = &ДатаВыполнения
		                      |				И Мероприятие.МоментВремени > &МоментВремени)
		                      |	И Мероприятие.БизнесПроцесс = &БизнесПроцесс
		                      |	И Мероприятие.Выполнена
		                      |	И (НЕ Мероприятие.ПометкаУдаления)
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	Мероприятие.ДатаВыполнения УБЫВ,
		                      |	Мероприятие.МоментВремени УБЫВ");
		Запрос.УстановитьПараметр("БизнесПроцесс", Объект.БизнесПроцесс);
		Запрос.УстановитьПараметр("ДатаВыполнения", Объект.ДатаВыполнения);
		Запрос.УстановитьПараметр("МоментВремени", Объект.МоментВремени);
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Сначала необходимо отменить мероприятие с номером " + Результат.Номер;
			Сообщение.Сообщить();
			Возврат Ложь;	
		КонецЕсли;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Если Не Объект.БизнесПроцесс.Пустая() Тогда	
			//2.1) помечаем мероприятия на удаление у которых дата >= текущеемероприятие.датавыполнения
			Запрос.Текст = "ВЫБРАТЬ
			               |	Мероприятие.Ссылка
			               |ИЗ
			               |	Задача.Мероприятие КАК Мероприятие
			               |ГДЕ
			               |	Мероприятие.Дата >= &ДатаВыполнения
			               |	И Мероприятие.БизнесПроцесс = &БизнесПроцесс
			               |	И (НЕ Мероприятие.Выполнена)
			               |	И (НЕ Мероприятие.ПометкаУдаления)";
			Результат = Запрос.Выполнить().Выбрать();
			Пока Результат.Следующий() Цикл
				ОбъектМероприятия = Результат.Ссылка.ПолучитьОбъект();
				ОбъектМероприятия.УстановитьПометкуУдаления(Истина);
			КонецЦикла;
			
			//4) восстанавливаем состояние БП
			БПОбъект = Объект.БизнесПроцесс.ПолучитьОбъект();
			БПОбъект.ВыполненныеСтрелки.Загрузить(Объект.ВыполненныеСтрелки.Выгрузить());
			БПОбъект.ЗапущенныеСтадии.Загрузить(Объект.ЗапущенныеСтадии.Выгрузить());
			БПОбъект.Завершен = Ложь;
			БПОбъект.Записать();
	    КонецЕсли;
	
		//3) Текущее мероприятие помечаем как не выполненное
		Объект.Выполнена = Ложь;
		Объект.ВыполненоКакНеАктуальное = Ложь;
		Объект.Исполнитель = Неопределено;
		Объект.ДатаВыполнения = Дата(1,1,1);
		Объект.МоментВремени = 0;
		Записать();	
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Сообщить("Ошибка блокировки!");
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Если Объект.Комментарий = "" Тогда 
		//Объект.КомментарийИзменен = Ложь;
	Иначе 
		Объект.КомментарийИзменен = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФактическаяДатаПриИзменении(Элемент)
	Если Объект.ФактическаяДата = Дата(1,1,1) Тогда
		Объект.ФактическаяДата = ТекущаяДата();
	КонецЕсли;
	ЗаполнитьКомментарий();
КонецПроцедуры

&НаКлиенте
Процедура ПланируемаяДатаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ПланируемаяДата) И Объект.ПланируемаяДата < НачалоДня(ТекущаяДата()) Тогда
		Объект.ПланируемаяДата = Дата(1,1,1);
		//Чуров
		ПоказатьПредупреждение(, "Указана дата меньше текущей!");
		//Вопрос("Указана дата меньше текущей!", РежимДиалогаВопрос.ОК);
	КонецЕсли;
	ЗаполнитьКомментарий();
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если Не Элементы.КонтактноеЛицо.Видимость Тогда
		Объект.КонтактноеЛицо = Неопределено;
		Объект.Контакт = "";
	КонецЕсли;
		
	//
	Если ТипЗнч(ТекущийОбъект.Ответственный) = Тип("СправочникСсылка.Пользователи") Тогда
		//заплатка +
		ТекОбъект = ТекущийОбъект.Объект;
		Если ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Если Не Константы.ДетализацияПоКА.Получить() Тогда
				Возврат;			
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Если Не Константы.ДетализацияПоДоговорам.Получить() Тогда
				Если Константы.ДетализацияПоКА.Получить() Тогда
					ТекОбъект = ТекущийОбъект.Объект.Контрагент;
				Иначе
					Возврат;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.УслугиПоДоговору") Тогда
			Если Не Константы.ДетализацияПоУслугам.Получить() Тогда
				Если Константы.ДетализацияПоДоговорам.Получить() Тогда
					ТекОбъект = ТекущийОбъект.Объект.Владелец;
				ИначеЕсли Константы.ДетализацияПоКА.Получить() Тогда
					ТекОбъект = ТекущийОбъект.Объект.Контрагент;
				Иначе
					Возврат;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда
			Если Не Константы.ДетализацияПоДО.Получить() Тогда
				Если Константы.ДетализацияПоКА.Получить() Тогда
					ТекОбъект = ТекущийОбъект.Объект.Должник;
				Иначе
					Возврат;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.ИсполнительныеДокументы") Тогда
			Если Не Константы.ДетализацияПоИД.Получить() Тогда
				Если Константы.ДетализацияПоДО.Получить() Тогда
					ТекОбъект = ТекущийОбъект.Объект.Владелец;
				ИначеЕсли Константы.ДетализацияПоКА.Получить() Тогда
					ТекОбъект = ТекущийОбъект.Объект.Должник;
				Иначе
					Возврат;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.Залоги") Тогда
			Если Не Константы.ДетализацияПоЗ.Получить() Тогда
				Если Константы.ДетализацияПоДО.Получить() Тогда
					ТекОбъект = ТекущийОбъект.Объект.Владелец;
				ИначеЕсли Константы.ДетализацияПоКА.Получить() Тогда
					ТекОбъект = ТекущийОбъект.Объект.Владелец.Должник;
				Иначе
					Возврат;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
		
		//
		Если ТекущийОбъект.Выполнена Тогда			
			ЗапросОтв = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			                         |	ОтветственныеСотрудники.Объект
			                         |ИЗ
			                         |	РегистрСведений.ОтветственныеСотрудники КАК ОтветственныеСотрудники
			                         |ГДЕ
			                         |	ОтветственныеСотрудники.Объект = &Объект
			                         |	И ОтветственныеСотрудники.Пользователь = &Сотрудник");
			ЗапросПом = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			                         |	СотрудникиВПомощь.Объект
			                         |ИЗ
			                         |	РегистрСведений.СотрудникиВПомощь КАК СотрудникиВПомощь
			                         |ГДЕ
			                         |	СотрудникиВПомощь.Объект = &Объект
			                         |	И СотрудникиВПомощь.Пользователь = &Сотрудник");
			ЗапросМ = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			                       |	Мероприятие.Объект
			                       |ИЗ
			                       |	Задача.Мероприятие КАК Мероприятие
			                       |ГДЕ
			                       |	Мероприятие.Объект = &Объект
			                       |	И Мероприятие.Ответственный = &Сотрудник
			                       |	И НЕ Мероприятие.Выполнена
			                       |	И НЕ Мероприятие.ПометкаУдаления
			                       |	И НЕ Мероприятие.БизнесПроцесс.ПометкаУдаления");					  
			ЗапросРН = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			                        |	ОбъектыВРаботеОстатки.Объект
			                        |ИЗ
			                        |	РегистрНакопления.ОбъектыВРаботе.Остатки(
			                        |			,
			                        |			Сотрудник = &Сотрудник
			                        |				И Объект = &Объект) КАК ОбъектыВРаботеОстатки");					  
								  						  
			ЗапросОтв.УстановитьПараметр("Сотрудник", ТекущийОбъект.Ответственный);
			ЗапросОтв.УстановитьПараметр("Объект", ТекОбъект);
			ЗапросПом.УстановитьПараметр("Сотрудник", ТекущийОбъект.Ответственный);
			ЗапросПом.УстановитьПараметр("Объект", ТекОбъект);
			ЗапросМ.УстановитьПараметр("Сотрудник", ТекущийОбъект.Ответственный);
			ЗапросМ.УстановитьПараметр("Объект", ТекОбъект);
			ЗапросРН.УстановитьПараметр("Сотрудник", ТекущийОбъект.Ответственный);
			ЗапросРН.УстановитьПараметр("Объект", ТекОбъект);
			
			Если ЗапросОтв.Выполнить().Пустой() И ЗапросПом.Выполнить().Пустой() И ЗапросМ.Выполнить().Пустой() И 
					Не ЗапросРН.Выполнить().Пустой() Тогда
				//Убираем из работы
				ДокОбъект = Документы.АктПередачи.СоздатьДокумент();
				ДокОбъект.Дата = ТекущаяДата();
				ДокОбъект.СотрудникПередающий = ТекущийОбъект.Ответственный;
				ДокОбъект.Автор = ТекущийОбъект.Ссылка;
				ДокОбъект.ПодразделениеПередающее = ДокОбъект.СотрудникПередающий.Подразделение;
				ДокОбъект.Организация = ДокОбъект.СотрудникПередающий.Организация;
				ДокОбъект.Объекты.Добавить().Объект = ТекОбъект;
				ДокОбъект.НеНазначатьСотрудников = Истина;
				Попытка
					ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					Сообщить(ОписаниеОшибки());
					Отказ = Истина;
				КонецПопытки;
			КонецЕсли;
			
		Иначе
			Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			                      |	ОбъектыВРаботеОстатки.Объект
			                      |ИЗ
			                      |	РегистрНакопления.ОбъектыВРаботе.Остатки(
			                      |			,
			                      |			Сотрудник = &Сотрудник
			                      |				И Объект = &Объект) КАК ОбъектыВРаботеОстатки");
			Запрос.УстановитьПараметр("Сотрудник", ТекущийОбъект.Ответственный);
			Запрос.УстановитьПараметр("Объект", ТекОбъект);
			Если Запрос.Выполнить().Пустой() Тогда
				ДокОбъект = Документы.АктПередачи.СоздатьДокумент();
				ДокОбъект.Дата = ТекущаяДата();
				ДокОбъект.СотрудникПринимающий = ТекущийОбъект.Ответственный;
				ДокОбъект.Автор = ТекущийОбъект.Ссылка;
				ДокОбъект.ПодразделениеПринимающее = ДокОбъект.СотрудникПринимающий.Подразделение;
				ДокОбъект.Организация = ДокОбъект.СотрудникПринимающий.Организация;
				ДокОбъект.Объекты.Добавить().Объект = ТекОбъект;
				ДокОбъект.НеНазначатьСотрудников = Истина;
				Попытка
					ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					Сообщить(ОписаниеОшибки());
					Отказ = Истина;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//
	ПредОтв = ТекущийОбъект.Ссылка.Ответственный;
	Если ПредОтв <> ТекущийОбъект.Ответственный И 
			ТипЗнч(ПредОтв) = Тип("СправочникСсылка.Пользователи") Тогда
		ЗапросОтв = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                         |	ОтветственныеСотрудники.Объект
		                         |ИЗ
		                         |	РегистрСведений.ОтветственныеСотрудники КАК ОтветственныеСотрудники
		                         |ГДЕ
		                         |	ОтветственныеСотрудники.Объект = &Объект
		                         |	И ОтветственныеСотрудники.Пользователь = &Сотрудник");
		ЗапросПом = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                         |	СотрудникиВПомощь.Объект
		                         |ИЗ
		                         |	РегистрСведений.СотрудникиВПомощь КАК СотрудникиВПомощь
		                         |ГДЕ
		                         |	СотрудникиВПомощь.Объект = &Объект
		                         |	И СотрудникиВПомощь.Пользователь = &Сотрудник");
		ЗапросМ = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                       |	Мероприятие.Объект
		                       |ИЗ
		                       |	Задача.Мероприятие КАК Мероприятие
		                       |ГДЕ
		                       |	Мероприятие.Объект = &Объект
		                       |	И Мероприятие.Ответственный = &Сотрудник
		                       |	И НЕ Мероприятие.Выполнена
		                       |	И НЕ Мероприятие.ПометкаУдаления
		                       |	И НЕ Мероприятие.БизнесПроцесс.ПометкаУдаления");					  
		ЗапросРН = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                        |	ОбъектыВРаботеОстатки.Объект
		                        |ИЗ
		                        |	РегистрНакопления.ОбъектыВРаботе.Остатки(
		                        |			,
		                        |			Сотрудник = &Сотрудник
		                        |				И Объект = &Объект) КАК ОбъектыВРаботеОстатки");					  
							  						  
		ЗапросОтв.УстановитьПараметр("Сотрудник", ПредОтв);
		ЗапросОтв.УстановитьПараметр("Объект", ТекОбъект);
		ЗапросПом.УстановитьПараметр("Сотрудник", ПредОтв);
		ЗапросПом.УстановитьПараметр("Объект", ТекОбъект);
		ЗапросМ.УстановитьПараметр("Сотрудник", ПредОтв);
		ЗапросМ.УстановитьПараметр("Объект", ТекОбъект);
		ЗапросРН.УстановитьПараметр("Сотрудник", ПредОтв);
		ЗапросРН.УстановитьПараметр("Объект", ТекОбъект);
			
		Если ЗапросОтв.Выполнить().Пустой() И ЗапросПом.Выполнить().Пустой() И ЗапросМ.Выполнить().Пустой() И 
				Не ЗапросРН.Выполнить().Пустой() Тогда
			//Убираем из работы
			ДокОбъект = Документы.АктПередачи.СоздатьДокумент();
			ДокОбъект.Дата = ТекущаяДата();
			ДокОбъект.СотрудникПередающий = ПредОтв;
			ДокОбъект.Автор = ТекущийОбъект.Ссылка;
			ДокОбъект.ПодразделениеПередающее = ДокОбъект.СотрудникПередающий.Подразделение;
			ДокОбъект.Организация = ДокОбъект.СотрудникПередающий.Организация;
			ДокОбъект.Объекты.Добавить().Объект = ТекОбъект;
			ДокОбъект.НеНазначатьСотрудников = Истина;
			Попытка
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщить(ОписаниеОшибки());
				Отказ = Истина;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьУЭД(Команда)
	Форма = ПолучитьФорму("Обработка.ПечатьУЭД.Форма.Форма",, ЭтаФорма, Объект.Объект);
	Форма.Объект.Объект = Объект.Объект;
	//Чуров
	ОткрытьФорму(Форма);
	Форма.Открыть();
КонецПроцедуры


&НаКлиенте
Процедура ОбъектПриИзменении(Элемент)
	Контрагент = Объект.Объект;
	ДоговорКонтрагента = Объект.Объект;
	УслугаПоДоговору = Объект.Объект;
	ДолговоеОбязательство = Объект.Объект;
	ИсполнительныйДокумент = Объект.Объект;
	
	Элементы.ОбъектУчета_Пусто.Доступность = Ложь;
	Если Объект.Объект = Неопределено Тогда	
		Элементы.ОбъектУчета_Пусто.Доступность = Истина;
		ТекущийЭлемент = Элементы.Объект;
		Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_Пусто;		
	ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		Элементы.ОбъектУчета_Контрагенты.Видимость = Истина;
		ТекущийЭлемент = Элементы.Контрагент;
		Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_Контрагенты;		
	ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Элементы.ОбъектУчета_ДоговорыКонтрагентов.Видимость = Истина;
		ТекущийЭлемент = Элементы.ДоговорКонтрагента;
		Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_ДоговорыКонтрагентов;		
	ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.УслугиПоДоговору") Тогда	
		Элементы.ОбъектУчета_УслугиПоДоговорам.Видимость = Истина;
		ТекущийЭлемент = Элементы.УслугаПоДоговору;
		Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_УслугиПоДоговорам;
	ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда
		Элементы.ОбъектУчета_ДолговыеОбязательства.Видимость = Истина;
		ТекущийЭлемент = Элементы.ДолговоеОбязательство;
		Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_ДолговыеОбязательства;
	ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ИсполнительныеДокументы") Тогда	
		Элементы.ОбъектУчета_ИсполнительныеДокументы.Видимость = Истина;
		ТекущийЭлемент = Элементы.ИсполнительныйДокумент;
		Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_ИсполнительныеДокументы;
	ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.Залоги") Тогда
		Элементы.ОбъектУчета_Залоги.Видимость = Истина;
		ТекущийЭлемент = Элементы.Залог;
		Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_Залоги;
	КонецЕсли;
	
	//
	Попытка
		КонтрагентКЛ = ОбъектыСервер.РазыменоватьСсылку(Объект.Объект, "Должник");
	Исключение
		Попытка
			КонтрагентКЛ = ОбъектыСервер.РазыменоватьСсылку(Объект.Объект, "Контрагент");
		Исключение
			КонтрагентКЛ = Объект.Объект;
		КонецПопытки;
	КонецПопытки;
	ЗаполнитьСписокКонтактов(Элемент = Неопределено);
	
	//
	Модифицированность = Истина; //!!!!! - добавлено из конфы "аааа"
	
	//
	Если Не ТипСотрудника.Пустая() Тогда //!!!!!
		ЗаполнитьОтветственный();        //!!!!!
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектПростойПриИзменении(Элемент)
	Если Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_Контрагенты Тогда
		Объект.Объект = Контрагент;
		КонтрагентКЛ = Объект.Объект;
	ИначеЕсли Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_ДоговорыКонтрагентов Тогда	
		Объект.Объект = ДоговорКонтрагента;
		КонтрагентКЛ = ОбъектыСервер.РазыменоватьСсылку(Объект.Объект, "Контрагент");
	ИначеЕсли Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_УслугиПоДоговорам Тогда	
		Объект.Объект = УслугаПоДоговору;	
		КонтрагентКЛ = ОбъектыСервер.РазыменоватьСсылку(Объект.Объект, "Контрагент");
	ИначеЕсли Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_ДолговыеОбязательства Тогда
		Объект.Объект = ДолговоеОбязательство;
		КонтрагентКЛ = ОбъектыСервер.РазыменоватьСсылку(Объект.Объект, "Должник");
	ИначеЕсли Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_ИсполнительныеДокументы Тогда	
		Объект.Объект = ИсполнительныйДокумент;
		КонтрагентКЛ = ОбъектыСервер.РазыменоватьСсылку(Объект.Объект, "Должник");
	ИначеЕсли Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_Залоги Тогда
		Объект.Объект = Залог;
		КонтрагентКЛ = ОбъектыСервер.РазыменоватьСсылку(Объект.Объект.Владелец, "Должник");
	КонецЕсли;
	ЗаполнитьСписокКонтактов(Элемент = Неопределено);
		
	Модифицированность = Истина; //!!!!!
	
	//
	Если Не ТипСотрудника.Пустая() Тогда //!!!!!
		ЗаполнитьОтветственный();        //!!!!!
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолеОчистка(Элемент, СтандартнаяОбработка)
	Объект.Объект = Неопределено;
	Элементы.ОбъектУчета_Пусто.Доступность = Истина;
	Элемент.Родитель.Видимость = Ложь;
				
	Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_Пусто;
	ТекущийЭлемент = Элементы.Объект;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеГруппы(Команда)
	Элементы.ОбъектУчета_Пусто.Видимость = Истина;
	Элементы.ОбъектУчета_Контрагенты.Видимость = Истина;
	Элементы.ОбъектУчета_ДоговорыКонтрагентов.Видимость = Истина;
	Элементы.ОбъектУчета_УслугиПоДоговорам.Видимость = Истина;
	Элементы.ОбъектУчета_ДолговыеОбязательства.Видимость = Истина;
	Элементы.ОбъектУчета_ИсполнительныеДокументы.Видимость = Истина;
	Элементы.ОбъектУчета_Залоги.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТипСотрудникаПриИзменении(Элемент)
	Если ТипСотрудника.Пустая() Тогда
		Элементы.Ответственный.ТолькоПросмотр = Ложь;
		Ответственный = УдалитьОбщегоНазначения.ТекущийПользователь();
	Иначе
		Элементы.Ответственный.ТолькоПросмотр = Истина;
		ЗаполнитьОтветственный();
	КонецЕсли;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтветственный()
	Если Объект.Выполнена Тогда
		Ответственный = Объект.Исполнитель; //заплатка
		Возврат;
	КонецЕсли;
	
	Ответственный = "";
	Если ЗначениеЗаполнено(Объект.Объект) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ОтветственныеСотрудники.Пользователь,
		                      |	ОтветственныеСотрудники.Пользователь.Наименование КАК Наименование,
		                      |	ВЫБОР
		                      |		КОГДА ОтветственныеСотрудники.Объект = &Объект
		                      |			ТОГДА 1
		                      |		ИНАЧЕ 2
		                      |	КОНЕЦ КАК Приоритет1,
		                      |	1 КАК Приоритет2,
		                      |	ОтветственныеСотрудники.ТипСотрудника
		                      |ПОМЕСТИТЬ ТипыС
		                      |ИЗ
		                      |	РегистрСведений.ОтветственныеСотрудники КАК ОтветственныеСотрудники
		                      |ГДЕ
		                      |	ОтветственныеСотрудники.Объект = &Объект
		                      |
		                      |ОБЪЕДИНИТЬ ВСЕ
		                      |
		                      |ВЫБРАТЬ
		                      |	СотрудникиВПомощь.Пользователь,
		                      |	СотрудникиВПомощь.Пользователь.Наименование,
		                      |	ВЫБОР
		                      |		КОГДА СотрудникиВПомощь.Объект = &Объект
		                      |			ТОГДА 1
		                      |		ИНАЧЕ 2
		                      |	КОНЕЦ,
		                      |	2,
		                      |	СотрудникиВПомощь.ТипСотрудника
		                      |ИЗ
		                      |	РегистрСведений.СотрудникиВПомощь КАК СотрудникиВПомощь
		                      |ГДЕ
		                      |	СотрудникиВПомощь.Объект = &Объект
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	ТипыС.Пользователь КАК Ссылка,
		                      |	ТипыС.Пользователь.Наименование КАК Наименование,
		                      |	ТипыС.ТипСотрудника.Глубина
		                      |ИЗ
		                      |	(ВЫБРАТЬ
		                      |		МАКСИМУМ(ТипыСотрудников.Глубина) КАК Глубина
		                      |	ИЗ
		                      |		ТипыС КАК ТипыС
		                      |			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ТипыСотрудников КАК ТипыСотрудников
		                      |			ПО ТипыС.ТипСотрудника = ТипыСотрудников.Ссылка
		                      |	ГДЕ
		                      |		ВЫРАЗИТЬ(&ТипСотрудника КАК ПланВидовХарактеристик.ТипыСотрудников).Родители ПОДОБНО ТипыСотрудников.РодителиШаблон) КАК ОтвМакс
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТипыС КАК ТипыС
		                      |		ПО (ТипыС.ТипСотрудника.Глубина = ОтвМакс.Глубина)
		                      |			И (ВЫРАЗИТЬ(&ТипСотрудника КАК ПланВидовХарактеристик.ТипыСотрудников).Родители ПОДОБНО ТипыС.ТипСотрудника.РодителиШаблон)
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	ТипыС.Приоритет1,
		                      |	ТипыС.Приоритет2");
		Запрос.УстановитьПараметр("ТипСотрудника", ТипСотрудника);
		//заплатка +
		Если ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Запрос.УстановитьПараметр("Объект", Объект.Объект);
		ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Если Константы.ДетализацияПоДоговорам.Получить() Тогда
				Запрос.УстановитьПараметр("Объект", Объект.Объект);
			ИначеЕсли Константы.ДетализацияПоКА.Получить() Тогда
				Запрос.УстановитьПараметр("Объект", Объект.Объект.Контрагент);
			Иначе
				Запрос.УстановитьПараметр("Объект", Объект.Объект);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.УслугиПоДоговору") Тогда
			Если Константы.ДетализацияПоУслугам.Получить() Тогда
				Запрос.УстановитьПараметр("Объект", Объект.Объект);	
			ИначеЕсли Константы.ДетализацияПоДоговорам.Получить() Тогда
				Запрос.УстановитьПараметр("Объект", Объект.Объект.Владелец);
			ИначеЕсли Константы.ДетализацияПоКА.Получить() Тогда
				Запрос.УстановитьПараметр("Объект", Объект.Объект.Контрагент);
			Иначе
				Запрос.УстановитьПараметр("Объект", Объект.Объект);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда
			Если Константы.ДетализацияПоДО.Получить() Тогда
				Запрос.УстановитьПараметр("Объект", Объект.Объект);	
			ИначеЕсли Константы.ДетализацияПоКА.Получить() Тогда
				Запрос.УстановитьПараметр("Объект", Объект.Объект.Должник);
			Иначе
				Запрос.УстановитьПараметр("Объект", Объект.Объект);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ИсполнительныеДокументы") Тогда	
			Если Константы.ДетализацияПоИД.Получить() Тогда
				Запрос.УстановитьПараметр("Объект", Объект.Объект);				
			ИначеЕсли Константы.ДетализацияПоДО.Получить() Тогда
				Запрос.УстановитьПараметр("Объект", Объект.Объект.Владелец);
			ИначеЕсли Константы.ДетализацияПоКА.Получить() Тогда
				Запрос.УстановитьПараметр("Объект", Объект.Объект.Должник);
			Иначе
				Запрос.УстановитьПараметр("Объект", Объект.Объект);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.Залоги") Тогда	
			Если Константы.ДетализацияПоЗ.Получить() Тогда
				Запрос.УстановитьПараметр("Объект", Объект.Объект);				
			ИначеЕсли Константы.ДетализацияПоДО.Получить() Тогда
				Запрос.УстановитьПараметр("Объект", Объект.Объект.Владелец);
			ИначеЕсли Константы.ДетализацияПоКА.Получить() Тогда
				Запрос.УстановитьПараметр("Объект", Объект.Объект.Владелец.Должник);
			Иначе
				Запрос.УстановитьПараметр("Объект", Объект.Объект);
			КонецЕсли;
			
		КонецЕсли;	
						
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() = 1 Тогда
			Ответственный = Результат[0].Ссылка;	
		ИначеЕсли Результат.Количество() > 1 Тогда
			Для Каждого Элемент Из Результат Цикл
				Ответственный = Ответственный + "; " + Элемент.Наименование;
			КонецЦикла;
			Ответственный = Сред(Ответственный, 3);
		КонецЕсли;
	КонецЕсли;
	
	Если Ответственный = "" Тогда
		Ответственный = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РезультатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
  	СписокФункцийДляОтбора = СформироватьСписокРезультатов();
	
	Форма = ПолучитьФорму("Справочник.РезультатыМероприятий.ФормаВыбора");
	Отбор = Форма.Список.Отбор.Элементы;
	
	НовыйЭлемент = Отбор.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец");
	НовыйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйЭлемент.ПравоеЗначение = Объект.ТипМероприятия;
	НовыйЭлемент.Использование = Истина;
		
	НовыйЭлемент = Отбор.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФункцияВидимости");
	НовыйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;	
	НовыйЭлемент.ПравоеЗначение = СписокФункцийДляОтбора;
	НовыйЭлемент.Использование = Истина;
		
	//Чуров А.И.
	ОткрытьФорму(Форма);
	//Результат = ОткрытьФормуМодально("Справочник.РезультатыМероприятий.ФормаВыбора");
	//Если Результат <> Неопределено Тогда
	//	Объект.Результат = Результат;
	//	РезультатПриИзменении("");
	//КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "МероприятиеРезультатНачалоВыбора" Тогда	
		Если Параметр <> Неопределено Тогда
			Объект.Результат = Параметр;
			РезультатПриИзменении("");
			Модифицированность = истина;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры


&НаСервере
Функция СформироватьСписокРезультатов()
	СписокРезультатов = Новый СписокЗначений();	
	Запрос = Новый Запрос("ВЫБРАТЬ
						|	РезультатыМероприятий.ФункцияВидимости
						|ИЗ
						|	Справочник.РезультатыМероприятий КАК РезультатыМероприятий
						|ГДЕ
						|	РезультатыМероприятий.Владелец = &Владелец
						|
						|СГРУППИРОВАТЬ ПО
						|	РезультатыМероприятий.ФункцияВидимости");
	Запрос.УстановитьПараметр("Владелец", Объект.ТипМероприятия);
	Результат = Запрос.Выполнить().Выбрать();	
	Пока Результат.Следующий() Цикл
		//строгая проверка, повышает отказоустойчивость!!!
		Если УправлениеСвойствами.ВычислитьФункциюВидимости(Результат.ФункцияВидимости.Функция, Объект.Объект) = Ложь Тогда 
			СписокРезультатов.Добавить(Результат.ФункцияВидимости);			
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокРезультатов;	
КонецФункции


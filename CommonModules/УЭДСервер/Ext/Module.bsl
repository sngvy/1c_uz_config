
//GetUSBKeyComponentLocation
Функция GetUSBKeyComponentLocation()
    СистемнаяИнформация = Новый СистемнаяИнформация;
    
    Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 тогда
        Возврат "ОбщийМакет.КомпонентаЗащиты_Win32";
    ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 тогда
        Возврат "ОбщийМакет.КомпонентаЗащиты_Win64";
	КонецЕсли;
	
	ВызватьИсключение("Макет с образом компоненты защиты не найден!");	
КонецФункции

///////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ДОБАВЛЕНИЯ КНОПКИ ПЕЧАТЬ В ДОКУМЕНТ 
	//hr = ДрайверКомпоненты.ОткрытьWord(Истина);
	//hr = ДрайверКомпоненты.ПрочитатьШаблон("D:\d6.dot");
	//НомерТ = 0;
	//ПараметрыТ = ДрайверКомпоненты.ПолучитьПараметрыТаблицы("<ГрафикНачислений>", НомерТ);
	//hr = ДрайверКомпоненты.ЗаполнитьТаблицу(НомерТ, "1`2`3`4`5`6`11`22`33`44`55`66`111`222`333`444`555`666`1111`2222`3333`");
	//hr = ДрайверКомпоненты.СохранитьДокумент("D:\12345.docx");
	//hr = ДрайверКомпоненты.ЗакрытьДокумент();
	//hr = ДрайверКомпоненты.ЗакрытьWord();

&НаСервере
Процедура ДобавитьКнопки(ЭтаФорма, Объект) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
			               |	тсВидыПечатныхДокументов.Ссылка
			               |ИЗ
			               |	Справочник.тсВидыПечатныхДокументов КАК тсВидыПечатныхДокументов
			               |ГДЕ
			               |	тсВидыПечатныхДокументов.Назначение = &Документ");
	Запрос.УстановитьПараметр("Документ", Строка(ТипЗнч(Объект)));  
	Результат = Запрос.Выполнить().Выбрать();
	Н = 1;
	Пока Результат.Следующий() Цикл	
		//Добавляем новую команду
		Кмд = ЭтаФорма.Команды.Добавить("Шаблон" + Н);
		Кмд.Действие = "Печать";
		Кмд.Заголовок = Строка(Результат.Ссылка);
		
		//Добавляем новую кнопку
		Элемент2 = ЭтаФорма.Элементы.Добавить("Кнопка" + Н, Тип("КнопкаФормы"), 
				ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.Печать);
		Элемент2.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		Элемент2.ИмяКоманды = "Шаблон" + Н;
		Н = Н + 1;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция ПолучитьШаблон(Документ, Наименование) Экспорт

	Таблица = Новый Структура;

	НШаблона = Число(Сред(Наименование, 7));

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	тсВидыПечатныхДокументов.Ссылка
	               |ИЗ
	               |	Справочник.тсВидыПечатныхДокументов КАК тсВидыПечатныхДокументов
	               |ГДЕ
	               |	тсВидыПечатныхДокументов.Назначение = &Документ";
	Запрос.УстановитьПараметр("Документ", Строка(ТипЗнч(Документ)));
	Результат = Запрос.Выполнить().Выбрать();
	Н = 1;
	Пока Результат.Следующий() Цикл
		Если Н = НШаблона Тогда
			Таблица.Вставить("ВидПечатногоДокумента", Результат.Ссылка);
			Таблица.Вставить("Объект", Документ);
		КонецЕсли;
		Н = Н + 1;
	КонецЦикла;
	Возврат Таблица;

КонецФункции // ПолучитьШаблон("Новый шаблон УВДЗ")()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Функция ПереводТаблицыВМассив(тзТаблицаДляВставки, НаборШаблоныПечатиТаблЗнач, ИспользоватьИтоги) Экспорт

	Строка = "";
	
	Таблица2 = Новый ТаблицаЗначений;
	Таблица = тзТаблицаДляВставки.ВыгрузитьЗначения();
	//Считаем максимальное количество строк
	КоличествоСтрок = 0;
	Для Каждого Массив Из Таблица Цикл
		Если Не Массив = Неопределено Тогда
			КоличествоСтрок = ?(КоличествоСтрок < Массив.ВГраница() + 1, Массив.ВГраница() + 1, КоличествоСтрок);
		КонецЕсли;
	КонецЦикла;
	
	Н = 1;
	//Добавляем колонки
	Для Каждого Стр Из Таблица Цикл
		Таблица2.Колонки.Добавить("Колонка" + Н);
		Н = Н + 1;
	КонецЦикла;
	//Добавляем строки
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		Таблица2.Добавить();
	КонецЦикла;
	
	Н = 1;
	Для Каждого Массив Из Таблица Цикл
		Если Не Массив = Неопределено Тогда
			Таблица2.ЗагрузитьКолонку(Массив, "Колонка" + Н);
		Иначе 
			Таблица2.ЗагрузитьКолонку(Новый Массив, "Колонка" + Н);
		КонецЕсли;
		Н = Н + 1;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Таблица2 Цикл
		Для Каждого Колонка Из СтрокаТаблицы Цикл
			Строка = Строка + Строка(Колонка) + "`";
		КонецЦикла;
	КонецЦикла;
	
	Возврат Строка;

КонецФункции

&НаСервере
Функция ПолучитьМассивИзСтроки(Знач СтрокаХранилище) Экспорт
	
	МассивИзСтроки = Новый Массив;
	признак = 1;
	Пока признак > 0 Цикл
		Начало = Найти(СтрокаХранилище, "["); 
		Конец = Найти(СтрокаХранилище, "]");
		Подстрока = Сред(СтрокаХранилище, Начало+1, Конец-2);
		МассивИзСтроки.Добавить(Подстрока);
		
		Если Конец = СтрДлина(СтрокаХранилище) Тогда
			Признак = 0;
		Иначе
			СтрокаХранилище = Сред(СтрокаХранилище, Конец+1);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивИзСтроки;
	
КонецФункции


&НаСервере
// Генерирует значение подстановки на основе строки регистра "тсПодстановкиШаблоны"     // ЗАЩИЩЕНА!
//
// Параметры:
//  ТекСтрокаПодстановки	- СтрокаНабораЗаписей	- строка регистра,
//  ВыборкаСвойства 		- Булево 				- признак необходимости создания новой выборки,
//	ВыборкаБаза				- выборка свойств и значений из регистра "тсЗначенияСвойствОбъектов",				
//  ВызывающийДокумент  	- СправочникСслыка, ДокументСсылка - текущий документ,
//	Отказ					- Булево				- признак отказа от использования значения.
//
// Возвращаемое значение:
//   Строка   - значение готовое для помещения в документ Word.
//
Функция ГенерацияЗначениия(ТекСтрокаПодстановки, ВыборкаСвойств, ВызывающийДокумент, ИсходныйДокумент = Неопределено, 
		ДополнительныйОтбор = Неопределено, ЗначениеСвязиПоПолю = Неопределено) Экспорт
	
	
	Если ЗначениеЗаполнено(ТекСтрокаПодстановки.Поле) Тогда		
		СчетчикМассива = 0;		
		Значение = ТекСтрокаПодстановки.Значение;
			
		// Значение из дерева реквизитов.   		
		///--СтруктураДерева = ТекСтрокаПодстановки.Хранилище.Получить();
		СтруктураДерева = ПолучитьМассивИзСтроки(ТекСтрокаПодстановки.СтрокаХранилище);
		
		ДокументВложенный = ВызывающийДокумент;
				
		// Формируем путь.
		ДальшеДопСвойство = Ложь;
		
		ГраницаМассива = СтруктураДерева.ВГраница();
		Счет = 0;
		Для Счет = 0 По ГраницаМассива Цикл
			НомерСКонца = ГраницаМассива - Счет;
			СтрокаМассива = СтруктураДерева[НомерСКонца];
			Если Строка(СтрокаМассива) = "<ДР>" ИЛИ Строка(СтрокаМассива) = "<ДС>" Тогда
				ДальшеДопСвойство = Истина;
				Продолжить;
			КонецЕсли;
			
			Если ДальшеДопСвойство Тогда
				Попытка
					ДокументВложенный = ОбъектыСервер.ПолучитьЗначениеСвойства(ДокументВложенный, Строка(СтрокаМассива));
					ДальшеДопСвойство = Ложь;
					Продолжить;
				Исключение
					ДокументВложенный = Неопределено;
					Прервать;
				КонецПопытки;
			КонецЕсли;
						
			Если Не Строка(СтрокаМассива) = "Ссылка" Тогда
				Попытка
					ДокументВложенный = ДокументВложенный[Строка(СтрокаМассива)];
				Исключение	
					ДокументВложенный = Неопределено;
					Прервать;					
				КонецПопытки;
			КонецЕсли;			
		КонецЦикла;	
		Если ДокументВложенный = Неопределено Тогда
			Значение = " ";
		Иначе
			Значение = ДокументВложенный;
		КонецЕсли; 
					
	КонецЕсли; 		
	
	Возврат Значение;
КонецФункции

&НаСервере
// Формирет массивы значений на основе переданных полей и дозаполняет
// ими таблицу значений.
//
// Параметры
//  НаборЗаписей			- Набор записей регистра сведений "тсПодстановкиШаблонов".
//  тзТаблиц				- ТаблицаЗначений, которая дозаполняется массивами значений.
//  ВызывающийДокумент 		- СправочникСсылка или ДокументСсылка
//							- объект для которого создается документ.
//	КоличествоСтрокТЧ		- количество строк табличной части.
//	ИспользоватьИтоги		- Булево	- Необходимость формирования итогов для данной
//							- табличной части,
//  КомпонентаСклонения     - ВнешняяКомпонента - склоняет ФИО в указанном падеже.
//
// Возвращаемое значение:
//   ТаблицаЗначений	- Дозаполненная таблица значений.
//
Функция ДозаполнитьЗначенияТаблиц(ОсновнаяСтрокаТаблицы, НаборЗаписей, тзТаблиц, ВызывающийДокумент, КоличествоСтрокТЧ, 
		КомпонентаСклонения, ВыборкаСвойств) Экспорт 
		
	ИспользоватьИтоги = ОсновнаяСтрокаТаблицы.ИспользоватьИтоги;	
	мсКолонки = Новый Массив();
	
	НазваниеТЧ =  Неопределено;
	СобственноТЧ = Неопределено;
	КоличествоСтрокТЧ = Неопределено;
	СтруктураДерева = Неопределено;
		
	СобственноТЧ = СформироватьНазваниеТЧ(ВызывающийДокумент, ОсновнаяСтрокаТаблицы.Хранилище);	
	ЭтоХранилище = (Тип(СобственноТЧ) = Тип("ХранилищеЗначения"));
	тзТЧ = ?(ЭтоХранилище, СобственноТЧ.Получить(), СобственноТЧ.Выгрузить());
	КоличествоСтрокТЧ = тзТЧ.Количество();
	
	Для Каждого Запись Из НаборЗаписей Цикл			
		РеквизитТЧ = Запись.РеквизитТЧ;
		СтруктураДерева = Запись.Хранилище.получить(); 
		Если СтруктураДерева <> Неопределено И СтруктураДерева.Количество() = 1 Тогда
			СтруктураДерева = Неопределено;
		КонецЕсли;
		мсКолонкиЦК = тзТЧ.ВыгрузитьКолонку(РеквизитТЧ);		
		ПрименяемаяФункция = Запись.Функция.Функция;
		ФункцияОпределена = ФункцияУспешноОпределена(Запись);
		
		СтрокаТЗ = Неопределено;
		Для Каждого Эл Из тзТаблиц Цикл
			Если Эл.Представление = Запись.Поле Тогда
				СтрокаТЗ = Эл;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		
		Если СтрокаТЗ <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		// Источник присутствует.
		Если Не СтруктураДерева = Неопределено Тогда		
			ГраницаМС = мсКолонкиЦК.вГраница();
			СвязьСоСтрокойПоПолю = Запись.СвязьСоСтрокойПоПолю;
			мсКолонки = Новый Массив;
			ХранилищеДополнительногоОтбора = Запись.ХранилищеДополнительногоОтбора.получить();
			
			Для ТекСтр = 0 По ГраницаМС Цикл
				Значение = мсКолонкиЦК[ТекСтр]; 						
				ДокументВложенный = Значение; 
				
				Если  Не ПустаяСтрока(СвязьСоСтрокойПоПолю) Тогда
					ЗначениеПоляСвязиСоСтрокой = тзТЧ[ТекСтр][СвязьСоСтрокойПоПолю]; 
				Иначе
					ЗначениеПоляСвязиСоСтрокой = Неопределено;
				КонецЕсли;
				
				Если Не  ХранилищеДополнительногоОтбора = Неопределено Тогда
					СтДопОтбора = СоздатьСтруктуруДляГенерацииЗначенияДопОтбора (Запись);						
					ОбъектДополнительногоОтбора = ГенерацияЗначениия(стДопОтбора, ВыборкаСвойств, ВызывающийДокумент, );	
				Иначе
					ОбъектДополнительногоОтбора=Неопределено;
				КонецЕсли;
				
				Значение = ГенерацияЗначениия(Запись, ВыборкаСвойств, ДокументВложенный, ВызывающийДокумент, 
						ОбъектДополнительногоОтбора, ЗначениеПоляСвязиСоСтрокой);//);							
				мсКолонки.Добавить(Значение);			
			КонецЦикла;	
		Иначе
			мсКолонки = мсКолонкиЦК;
		КонецЕсли;
			
		Если ФункцияОпределена Тогда
			Значение = ПолучитьРезультатФункции(мсКолонки, КоличествоСтрокТЧ, ПрименяемаяФункция, ВызывающийДокумент, 
					КомпонентаСклонения, Запись.Функция.Наименование);		
			Если Не Значение = Неопределено Тогда
				мсКолонки = Значение;
			КонецЕсли; 	
		КонецЕсли;  		 	
		СтрокаТЗ.Значение = мсКолонки;       		
	КонецЦикла;
	
	// Устранение смещения из-за пустых колонок.
	Строки = Новый Массив();
	Для Каждого Эл Из тзТаблиц Цикл
		Если Эл.Значение = Неопределено Тогда
			Строки.Добавить(Эл);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекПС Из Строки Цикл
		//Сообщить("Для поля: "+ТекПС.Поле+" не найдено соответствие в 1С.", СтатусСообщения.Информация);
		Если Не Строки = Неопределено Тогда
			мсПустой = Новый Массив;
			Для ПС = 1 По КоличествоСтрокТЧ Цикл
				мсПустой.Добавить(ТекПС.Поле);		
			КонецЦикла;  
			
			Если ИспользоватьИтоги Тогда         
				мсПустой.Добавить(" ");		
			КонецЕсли;			
		КонецЕсли;
		
		ТекПС.Значение = мсПустой;
	КонецЦикла; 
	
	Возврат тзТаблиц;   			
КонецФункции // ДозополнитьЗначенияТаблиц()

&НаСервере
// Оценивает тип значения для вставки в Word на пригодность
//
// Параметры
//  Значение  - <Произвольный> - Проверяемое значение.
//
// Возвращаемое значение:
//   <Булево>   - Если истина, то тип пригоден для вставки.
//
Функция ПроверитьПригодныйДляВставкиТип(Значение)

	Если ТипЗнч (Значение) = Тип("Строка") 
		Или ТипЗнч (Значение) = Тип("Число") 
		Или ТипЗнч (Значение) = Тип("Дата") Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;       	

КонецФункции // ПроверитьПригодныйДляВставкиТип (Значение)

&НаСервере
// Формирует каталог по умолчанию.
	//
	// Возвращаемое значение:
	//   <Строка>   - Путь;
	//
Функция СформироватьКаталог()
	ОбщийКаталог = Константы.тсПутьККаталогуПоУмолчанию.Получить();
	РаскладыватьПоПользователям = Константы.тсРаскладыватьДокументыПоПользователям.Получить();
	ИспользоватьЛичныйКаталог = Константы.тсИспользоватьЛичныйКаталогПользователя.Получить();
	
	ПутьДляВывода = "";
	
	Если ИспользоватьЛичныйКаталог Тогда
	
		ТекущийПользователь = Справочники.Пользователи.НайтиПоКоду(ПользователиИнформационнойБазы.ТекущийПользователь().имя);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	тсСоответствиеПользователейИИхПрофилей.Профиль.ЛичныйКаталогПользователя Как ЛичныйКаталог
		               |ИЗ
		               |	РегистрСведений.тсСоответствиеПользователейИИхПрофилей КАК тсСоответствиеПользователейИИхПрофилей
		               |ГДЕ
		               |	(НЕ тсСоответствиеПользователейИИхПрофилей.Профиль ЕСТЬ NULL )
		               |	И тсСоответствиеПользователейИИхПрофилей.Пользователь = &Пользователь";
		
		Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Сообщить("Для текущего пользователя отсутствует профиль настроек", СтатусСообщения.Внимание); 
			ПутьДляВывода = Неопределено;			
		КонецЕсли;
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ИмяФайл = Новый Файл (Выборка.ЛичныйКаталог);
			Если ИмяФайл.Существует() Тогда
				ПутьДляВывода = ИмяФайл.ПолноеИмя;
			Иначе
				Сообщить("Для данного пользователя в профиле не задан или задан неверно Личный каталог", СтатусСообщения.Внимание); 						
			КонецЕсли; 
			  		
		КонецЦикла;      		
	
	ИначеЕсли  РаскладыватьПоПользователям Тогда
		Пользователь = СокрЛП(ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
		ИмяФайл = Новый Файл (Пользователь);
		
		СоздатьКаталог(ОбщийКаталог+"\"+ИмяФайл.Имя);
		ПутьДляВывода = ОбщийКаталог+"\"+ИмяФайл.Имя;
	Иначе
		ПутьДляВывода = ОбщийКаталог;	
	КонецЕсли;

	Возврат ПутьДляВывода;

КонецФункции // СформироватьКаталог()

&НаСервере
// Переводит полученную таблицу в массив COMSafeArray для вставки в
// документ.
Функция ПереводТаблицыЗначенийВCOMSafeArray(тзТаблицаДляВставки, КоличествоНовыхСтрок, ПроизвольнаяТаблица=Ложь)
	мсТаблицыДляCSA = Новый Массив;
		
	// Идет обработка дозаполняемой таблицы.
	//Если ПроизвольнаяТаблица=Ложь Тогда

	//	Для каждого ТекСтрТДВ Из тзТаблицаДляВставки Цикл
	//		мсКолонки = ТекСтрТДВ.Значение;	
	//		мсТаблицыДляCSA = ОбработкаКолонки(мсКолонки, мсТаблицыДляCSA, КоличествоНовыхСтрок);			
	//	КонецЦикла; 
	//Иначе
		КоличествоКолонок =  тзТаблицаДляВставки.Колонки.Количество();
		
		Для  каждого ТекКолонкаТДВ Из тзТаблицаДляВставки.Колонки Цикл
			мсКолонки = тзТаблицаДляВставки.ВыгрузитьКолонку(ТекКолонкаТДВ);
			мсТаблицыДляCSA = ОбработкаКолонки(мсКолонки, мсТаблицыДляCSA, КоличествоНовыхСтрок);
		КонецЦикла;   
	//КонецЕсли;
	
		
	мсCSAТаблицаДляВставки = Новый COMSafeArray (мсТаблицыДляCSA, "VT_BSTR");

	Возврат мсCSAТаблицаДляВставки;	
КонецФункции

&НаСервере
// Обработывает колонку таблицы и помещает ее в  массив для COMSafeArray
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ОбработкаКолонки(мсКолонки, мсТаблицыДляCSA, КоличествоНовыхСтрок)
	КолСтрМсКолонки = мсКолонки.Количество();
	
	Если мсКолонки = Неопределено Или ТипЗнч(мсКолонки) = Тип("Строка") Или (КолСтрМсКолонки = 1 И (мсКолонки[0] = Неопределено Или мсКолонки[0] = "00000"))  Тогда
		Для ТекСтрТДВ=1  По  КоличествоНовыхСтрок  Цикл
			мсТаблицыДляCSA.Добавить("00000"); 											
		КонецЦикла; 
		ПризнакПродолжения = Ложь;
	Иначе
		ПризнакПродолжения = Истина;
	КонецЕсли;    						
	
	Если ПризнакПродолжения = Истина И Не мсКолонки = Неопределено И КолСтрМсКолонки > 0  Тогда
		Для каждого ТСмсКолонки Из мсКолонки Цикл
			мсТаблицыДляCSA.Добавить(Строка(ТСмсКолонки));				
		КонецЦикла;			
	КонецЕсли;
	
	Если ПризнакПродолжения = Истина И КолСтрМсКолонки < КоличествоНовыхСтрок Тогда
		РазницаВСтроках = КоличествоНовыхСтрок - КолСтрМсКолонки;	
		
		Для ТекСтрТДВ=1  По  РазницаВСтроках Цикл
			мсТаблицыДляCSA.Добавить("");					
		КонецЦикла; 				
	КонецЕсли;      
	               	
	Возврат мсТаблицыДляCSA;
КонецФункции // ОбработкаКолонки()

&НаСервере
// Формирует назавание табличной части.
//
// Параметры:
//	ВызывающийДокумент	- ДокументСсылка, СправочникСсылка,
//	Хранилище 			- Содержит структуру дерева где хранится
//						название ТЧ.
//
// Возвращаемое значение:
//	Строка	- Название табличной части.
//
Функция СформироватьНазваниеТЧ(ВызывающийДокумент, Хранилище, ДокументОснование = Неопределено)	Экспорт
	СтруктураДерева = Хранилище.Получить();
	ДокументВложенный = ВызывающийДокумент;				
	
	// Формируем путь
	ГраницаМассива = СтруктураДерева.ВГраница();
	Счет = 0;
	Для Счет = 0 По ГраницаМассива Цикл
		НомерСКонца = ГраницаМассива - Счет;	
		Если ГраницаМассива = Счет Тогда
			ДокументОснование = Неопределено;
			ДокументОснование = ДокументВложенный; 		
		КонецЕсли;      	
		
		СтрокаМассива = СтруктураДерева[НомерСКонца];
		ДокументВложенный = ДокументВложенный[СтрокаМассива];		
	КонецЦикла;
		
	Возврат ДокументВложенный;	
КонецФункции // СформироватьНазваниеТЧ()

&НаСервере
// Выполняет применение "Функции" и контролирует адекватность полученного значения.
//
// Параметры
//  Значение			- Массив	- Массив обрабатываемых значений,
//	КоличествоСтрокТЧ	- Число		- Количество строк табличной части,
//	ПрименяемаяФункция	- Строка	- Текст функции.
//
// Возвращаемое значение:
//   Массив обработанных значений.
//
Функция ПолучитьРезультатФункции(Значение, КоличествоСтрокТЧ, ПрименяемаяФункция, ВызывающийДокумент, 
		КомпонентаСклонения, Наименование, НомерСтроки = Неопределено, СтрокаТаблициПлатежиЛП = Неопределено)
		
	СЗ = Новый СписокЗначений();
	СЗ.ЗагрузитьЗначения(Значение);
	ЗначениеВходящее = СЗ.ВыгрузитьЗначения();	
	
 	//ЗначениеВходящее = Значение;
	ИсходноеЗначениеМассив = ?(ТипЗНЧ(Значение) = Тип("Массив"), Истина, Ложь);
	
	ВернутьИсходное = Ложь;
	
	Попытка			
		////Выполнить(ПрименяемаяФункция); //!!!
	Исключение
		Если ИсходноеЗначениеМассив = Ложь Тогда
			Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное); 
		КонецЕсли;   										
		
		ВернутьИсходное = Истина;						
	КонецПопытки;
	
	//Если ТипЗНЧ (Значение) = Тип("Массив") Или ТипЗНЧ (Значение) = Тип("Список значений") Тогда
	Если ТипЗНЧ(Значение) = Тип("Массив") Тогда
		РезультирующееЗначениеМассив = Истина;
	Иначе
		РезультирующееЗначениеМассив = Ложь;	
	КонецЕсли;
	
	// Контроль совпадения типов и количества строк.
	Если ИсходноеЗначениеМассив И РезультирующееЗначениеМассив Тогда
		//Лапшин
		КоличествоСтрокТЧ = Значение.Количество();
		//Если Значение.Количество() <> КоличествоСтрокТЧ Тогда
			//ВернутьИсходное=Истина;		
		//КонецЕсли;
		//Лапшин
	ИначеЕсли ИсходноеЗначениеМассив И РезультирующееЗначениеМассив = Ложь Тогда
		ВернутьИсходное = Истина;		
	ИначеЕсли ИсходноеЗначениеМассив = Ложь И РезультирующееЗначениеМассив Тогда
		ВернутьИсходное = Истина;		
	КонецЕсли;
	
	Если  ВернутьИсходное Тогда
		Сообщить("Функция: " + Наименование + " отработала не корректно. В документ помещены исходные значения", СтатусСообщения.Внимание); 
		Возврат ЗначениеВходящее;			
	Иначе		
		Возврат Значение; 
	КонецЕсли;		
КонецФункции

&НаСервере
// Создает структуру дополнительного отбора,
// пригодную использования функции "ГенерацияЗначения".
//
// Параметры
//  Запись			- строка выборки.
//
// Возвращаемое значение:
//   Подготовленная структура.
//
Функция СоздатьСтруктуруДляГенерацииЗначенияДопОтбора(Запись)
	стДопОтбора = Новый Структура;
	стДопОтбора.Вставить("Хранилище", Запись.ХранилищеДополнительногоОтбора); 
	стДопОтбора.Вставить("Поле", "СлужебноеПолеДопОтбора"); 
	стДопОтбора.Вставить("Значение", ""); 
	стДопОтбора.Вставить("ЕстьИсточник", Истина); 
	
	Возврат СтДопОтбора;	
КонецФункции // ()

&НаСервере
// Добавляет строку с итогами в массив.
//
// Параметры
//  Массив		- Массив	- массив куда будет добавлен итог,
//  Сумма		- Число		- сумма записываемая в итог,
//  Запись		- строка выборки.
//
// Возвращаемое значение:
//   Массив с итоговой строкой.
//
Функция ДобавитьСтрокуИтого(Сумма, Запись, Массив)
	
	Если Запись.ВидИтогов = 4 Тогда    					
		Массив.Добавить(Сумма);  		
	ИначеЕсли Запись.ВидИтогов = 0 Тогда
		Массив.Добавить();
	Иначе
		Если Запись.ВидИтогов = 3 Тогда
			Массив.Добавить("Всего:");
		ИначеЕсли Запись.ВидИтогов = 1 Тогда
			Массив.Добавить("Итого:");
		ИначеЕсли Запись.ВидИтогов = 2 Тогда
			Массив.Добавить("Сумма:");
		КонецЕсли;		
	КонецЕсли;    					

	Возврат Массив;
КонецФункции // ДобавитьКолонкиИтого()

&НаСервере
// Определяет нужно ли использовать "функции" и пригодна ли она для этого.
//
// Параметры
//  Запись				- строка выборки	
//
// Возвращаемое значение:
//   Булево	- Признак возможности использования функции.
//
Функция ФункцияУспешноОпределена(Запись) Экспорт
	Возврат ((Не Запись.Функция.Пустая()) И (Не ПустаяСтрока(Запись.Функция.Функция)));
КонецФункции

&НаСервере
// Получает выборку свойств.
//
// Параметры
//  СправочникШаблон  - СправочникСсылка - шаблон печатного документа
//
// Возвращаемое значение:
//   Выборка свойств.
//
Функция ПолучитьВыборкуСвойствПоШаблону(СправочникШаблон)

	// Получаем выборку значение свойств.
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(ЗначенияСвойствОбъектов.Значение) КАК Значение,
		|	ЗначенияСвойствОбъектов.Объект,
		|	ЗначенияСвойствОбъектов.Свойство,
		|	ЗначенияСвойствОбъектов.Документ,
		|	ЗначенияСвойствОбъектов.Индекс
		|ИЗ
		|	РегистрСведений.тсЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство В
		|			(ВЫБРАТЬ
		|				тсШаблоныПечатныхДокументовРеквизитыИСвойства.Свойство
		|			ИЗ
		|				Справочник.тсШаблоныПечатныхДокументов.РеквизитыИСвойства КАК тсШаблоныПечатныхДокументовРеквизитыИСвойства
		|			ГДЕ
		|				тсШаблоныПечатныхДокументовРеквизитыИСвойства.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.тсВидыСтрокШаблонов.Свойство)
		|				И тсШаблоныПечатныхДокументовРеквизитыИСвойства.Ссылка = &СправочникШаблон
		|		
		|			ОБЪЕДИНИТЬ
		|		
		|			ВЫБРАТЬ
		|				тсШаблоныПечатныхДокументовТаблицаТаблиц.Свойство
		|			ИЗ
		|				Справочник.тсШаблоныПечатныхДокументов.ТаблицаТаблиц КАК тсШаблоныПечатныхДокументовТаблицаТаблиц
		|			ГДЕ
		|				тсШаблоныПечатныхДокументовТаблицаТаблиц.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.тсВидыСтрокШаблонов.Свойство))");	
	Запрос.УстановитьПараметр("СправочникШаблон",СправочникШаблон);
	Результат = Запрос.Выполнить();
	ВыборкаСвойств = Результат.Выбрать();

	Возврат ВыборкаСвойств;

КонецФункции // ПолучитьВыборкуСвойствПоШаблону()

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ДАННЫЕ ПРОЦЕДУРЫ ВЫЗЫВАЮТСЯ ПРИ РАБОТЕ С ТАБЛИЧНЫМ ПОЛЕМ РегистрСведенийНаборЗаписей ИЗ ЛЮБОГО ОБЪЕКТА

&НаСервере
Функция ПроверкаЭтоЧисло(Значение)
	Попытка
		Результат = Число(значение);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции    //ПроверкаЭтоЧисло()

&НаСервере
Функция ПолучитьТипОбъекта(Объект) Экспорт
	Стр = Метаданные.НайтиПоТипу(ТипЗнч(Объект)).ПолноеИмя();
	Возврат Лев(Стр, Найти(Стр, ".") - 1);	
КонецФункции

&НаСервере
// проверяет сущестования файла / каталога по имеющимуся пути.
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПроверитьСуществованияФайлаИлиКаталога(Путь, ПроверкаКаталога = Ложь) Экспорт
	
	Файл = Новый Файл (Путь);
	Если Не Файл.Существует() Тогда
		Сообщить("По указанному пути ("+Путь+") каталог ли файл не обнаружен", СтатусСообщения.Внимание); 
		Возврат Ложь;
	КонецЕсли;
	
	Если ПроверкаКаталога Тогда
		Если Не Файл.ЭтоКаталог() Тогда
			Сообщить("По указанному пути ("+Путь+") указан файл, а должне быть каталог", СтатусСообщения.Внимание); 
			Возврат Ложь;	 
		КонецЕсли;
	Иначе
		Если Файл.ЭтоКаталог() Тогда
			Сообщить("По указанному пути ("+Путь+") указан каталог, а должен быть файл", СтатусСообщения.Внимание); 
			Возврат Ложь;	 
		КонецЕсли;     		
	КонецЕсли;

	Возврат Истина;

КонецФункции // ()

&НаСервере
Функция ПолучитьТипИзСтроки(Назначение) Экспорт  
	//Испправление ошибки
	Если Назначение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ПодходящиеТипы = Новый Соответствие;
		
	Для Каждого ТС Из Метаданные.Справочники Цикл
		Если СтрНайти(ТС.Представление(), Назначение) Тогда
			ПодходящиеТипы.Вставить(ТС.Представление(), (ТипЗнч(Справочники[ТС.Имя].ПустаяСсылка())));
		КонецЕсли;
	КонецЦикла;

	
	Для Каждого ТС Из Метаданные.Документы Цикл
		Если СтрНайти(ТС.Представление(), Назначение) Тогда 
			ПодходящиеТипы.Вставить(ТС.Представление(), (ТипЗнч(Документы[ТС.Имя].ПустаяСсылка())));
		КонецЕсли;
	КонецЦикла;  
	
	ТочноеСоответствие = ПодходящиеТипы.Получить(Назначение);	
		
	Возврат ТочноеСоответствие;	
	
КонецФункции // ПолучитьТипИзСтроки(Объект.Назначение)()

&НаСервере
Функция ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(ФункцияСсылкаСпр, ВызывающийДокумент,
		Значение = Неопределено) Экспорт
	Возврат Справочники.ШаблоныТекстаДляАвтоинформирования.ВычислитьФункцию(ФункцияСсылкаСпр.Функция, ВызывающийДокумент, 
			Значение);
КонецФункции

&НаСервере
Функция Таблица_ТаблицаВыбораТаблиц(СправочникШаблон) Экспорт
	Строки = СправочникШаблон.ТаблицаВыбораТаблиц.НайтиСтроки(Новый Структура("Используется", Истина));
	Результат = Новый Массив();
	Для Каждого Элемент Из Строки Цикл
		Результат.Добавить(Новый Структура("ПолеТаблицы, UID, Функция", Элемент.ПолеТаблицы, Элемент.UID, Элемент.Функция));
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервере
Функция Таблица_ТаблицаТаблиц(СправочникШаблон, UID) Экспорт
	Строки = СправочникШаблон.ТаблицаТаблиц.НайтиСтроки(Новый Структура("Используется, UID", Истина, UID));
	Результат = Новый Массив();
	Для Каждого Элемент Из Строки Цикл
		Результат.Добавить(Новый Структура("Поле, Значение, Функция", Элемент.Поле, Элемент.Значение, Элемент.Функция));
	КонецЦикла;
	Возврат Результат;			
КонецФункции

&НаСервере
Функция Таблица_РеквизитыИСвойства(СправочникШаблон) Экспорт
	Строки = СправочникШаблон.РеквизитыИСвойства.НайтиСтроки(Новый Структура("Используется", Истина));
	Результат = Новый Массив();
	Для Каждого Элемент Из Строки Цикл
		//Результат.Добавить(Новый Структура("Поле, Значение, Функция, Хранилище, СтрокаДляПолученияЗначения, КодДопСвойства,
		//		| ОбъектДопСвойства, ТипПоля, ПустоеЗначениеНеПробел, СтрокаХранилище", Элемент.Поле, Элемент.Значение, Элемент.Функция,
		//		Элемент.Хранилище, Элемент.СтрокаДляПолученияЗначения, Элемент.КодДопСвойства, Элемент.ОбъектДопСвойства, 
		//		Элемент.ТипПоля, Элемент.ПустоеЗначениеНеПробел, Элемент.СтрокаХранилище));
				Результат.Добавить(Новый Структура("Поле, Значение, Функция, СтрокаДляПолученияЗначения, КодДопСвойства,
				| ОбъектДопСвойства, ТипПоля, ПустоеЗначениеНеПробел, СтрокаХранилище", Элемент.Поле, Элемент.Значение, Элемент.Функция,
				Элемент.СтрокаДляПолученияЗначения, Элемент.КодДопСвойства, Элемент.ОбъектДопСвойства, 
				Элемент.ТипПоля, Элемент.ПустоеЗначениеНеПробел, Элемент.СтрокаХранилище));

	КонецЦикла;
	Возврат Результат;			
КонецФункции

&НаСервере
Функция ШаблонПечатнойФормыУЭДСервер(ВидПечатногоДокумента, ОбъектВх = Неопределено, 
		МассивКоличествоКопий = Неопределено, МассивПрикреплятьДокумент = Неопределено, ТипСсылки = Неопределено) Экспорт	
	СписокШаблонов = Новый Массив;
	Если ТипСсылки = Неопределено Тогда
		Возврат СписокШаблонов;
	КонецЕсли;
	Если ТипСсылки = "Справочник.тсШаблоныПечатныхДокументов" Тогда
		ДопСтрока = " И тсВидыПечатныхДокументовШаблоныПечатныхФорм.ШаблонПечатнойФормы ССЫЛКА Справочник.тсШаблоныПечатныхДокументов ";
	ИначеЕсли ТипСсылки = "Справочник.КомплектыФайловДляПечати" Тогда
		ДопСтрока = " И тсВидыПечатныхДокументовШаблоныПечатныхФорм.ШаблонПечатнойФормы ССЫЛКА Справочник.КомплектыФайловДляПечати ";
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	тсВидыПечатныхДокументовШаблоныПечатныхФорм.ШаблонПечатнойФормы КАК ШаблонСправочник,
	                      |	тсВидыПечатныхДокументовШаблоныПечатныхФорм.ФункцияСвойств,
						  |	тсВидыПечатныхДокументовШаблоныПечатныхФорм.Прикреплять,
	                      |	тсВидыПечатныхДокументовШаблоныПечатныхФорм.ФункцияКоличество
	                      |ИЗ
	                      |	Справочник.тсВидыПечатныхДокументов.ШаблоныПечатныхФорм КАК тсВидыПечатныхДокументовШаблоныПечатныхФорм
	                      |ГДЕ
	                      |	тсВидыПечатныхДокументовШаблоныПечатныхФорм.Ссылка = &Ссылка
	                      |	И НЕ тсВидыПечатныхДокументовШаблоныПечатныхФорм.ШаблонПечатнойФормы.ПометкаУдаления " 
						  + ДопСтрока + 
 						  "
	                      |УПОРЯДОЧИТЬ ПО
	                      |	тсВидыПечатныхДокументовШаблоныПечатныхФорм.НомерСтроки");
						  
	                      //|	И тсВидыПечатныхДокументовШаблоныПечатныхФорм.ШаблонПечатнойФормы ССЫЛКА Справочник.тсШаблоныПечатныхДокументов
	Запрос.УстановитьПараметр("Ссылка", ВидПечатногоДокумента);		
	
	Если ОбъектВх = Неопределено Тогда
		Результат = Запрос.Выполнить().Выгрузить();
		Возврат Результат.ВыгрузитьКолонку("ШаблонСправочник");		
	Иначе
		
		Результат = Запрос.Выполнить().Выбрать();	
		Пока Результат.Следующий() Цикл
			//строгая проверка! повышает отказоустойчивость!!!
			Если УправлениеСвойствами.ВычислитьФункциюВидимости(Результат.ФункцияСвойств.Функция, ОбъектВх) <> Ложь Тогда 
				СписокШаблонов.Добавить(Результат.ШаблонСправочник);
				МассивПрикреплятьДокумент.Добавить(Результат.Прикреплять);
				Если МассивКоличествоКопий <> Неопределено Тогда
					Если Не ЗначениеЗаполнено(Результат.ФункцияКоличество) Тогда
						Количество = 1;
					Иначе
						Количество = УправлениеСвойствами.ВычислитьФункциюВидимости(Результат.ФункцияКоличество.Функция, ОбъектВх);
					КонецЕсли;
					МассивКоличествоКопий.Добавить(Количество);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Возврат СписокШаблонов;	
	КонецЕсли;
КонецФункции
	
&НаСервере
Функция ПолучитьДанныеПрикрепляемыхФайлов(Объект, Комплект) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РегистрСведенийПрикрепляемыеФайлы.Регистратор,
	                      |	РегистрСведенийПрикрепляемыеФайлы.НомерСтроки
	                      |ИЗ
	                      |	РегистрСведений.ПрикрепляемыеФайлы КАК РегистрСведенийПрикрепляемыеФайлы
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                      |			МАКСИМУМ(ПрикрепляемыеФайлы.Период) КАК Период,
	                      |			ПрикрепляемыеФайлы.ТипФайла КАК ТипФайла
	                      |		ИЗ
	                      |			Справочник.КомплектыФайловДляПечати.ТипыФайлов КАК КомплектыФайловДляПечатиТипыФайлов
	                      |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепляемыеФайлы КАК ПрикрепляемыеФайлы
	                      |				ПО КомплектыФайловДляПечатиТипыФайлов.ТипФайла = ПрикрепляемыеФайлы.ТипФайла
	                      |					И (КомплектыФайловДляПечатиТипыФайлов.Ссылка = &Комплект)
	                      |					И (ПрикрепляемыеФайлы.Объект = &Объект)
	                      |					И (ПрикрепляемыеФайлы.ТипФайла.АктуаленПоследний)
	                      |		
	                      |		СГРУППИРОВАТЬ ПО
	                      |			ПрикрепляемыеФайлы.ТипФайла) КАК ВложенныйЗапрос
	                      |		ПО (РегистрСведенийПрикрепляемыеФайлы.ТипФайла.АктуаленПоследний)
	                      |			И РегистрСведенийПрикрепляемыеФайлы.ТипФайла = ВложенныйЗапрос.ТипФайла
	                      |			И РегистрСведенийПрикрепляемыеФайлы.Период = ВложенныйЗапрос.Период
	                      |			И (РегистрСведенийПрикрепляемыеФайлы.Объект = &Объект)
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КомплектыФайловДляПечати.ТипыФайлов КАК КомплектыФайловДляПечатиТипыФайлов
	                      |		ПО РегистрСведенийПрикрепляемыеФайлы.ТипФайла = КомплектыФайловДляПечатиТипыФайлов.ТипФайла
	                      |			И (КомплектыФайловДляПечатиТипыФайлов.Ссылка = &Комплект)
	                      |ГДЕ
	                      |	РегистрСведенийПрикрепляемыеФайлы.Объект = &Объект
	                      |	И (НЕ РегистрСведенийПрикрепляемыеФайлы.ТипФайла.АктуаленПоследний
	                      |			ИЛИ НЕ ВложенныйЗапрос.ТипФайла ЕСТЬ NULL 
	                      |			ИЛИ РегистрСведенийПрикрепляемыеФайлы.ТипФайла = ЗНАЧЕНИЕ(Справочник.ТипыПрикрепляемыхФайлов.ПустаяСсылка))
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	КомплектыФайловДляПечатиТипыФайлов.НомерСтроки");
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Комплект", Комплект);
	Результат = Запрос.Выполнить().Выбрать();
	Массив = Новый Массив();
	Пока Результат.Следующий() Цикл
		Стр = Результат.Регистратор.Файлы[Результат.НомерСтроки-1];
		Файл = Новый Файл(Стр.Путь);	
		Массив.Добавить(Новый Структура("Данные, Расширение", Стр.Хранилище.Получить(), Файл.Расширение));
	КонецЦикла;
	Возврат Массив;
КонецФункции


&НаСервере
Функция ПолучитьФайлИзДвоичныхДанных(СтрокаФайл,СтрокаРасширение) Экспорт
	
	ДвоичныйАдрес = ЗначениеИзСтрокиВнутр(СтрокаФайл);	
	//ИмяВремФайла = ПолучитьИмяВременногоФайла(СтрокаРасширение);
	//ДвоичныйАдрес.Записать(ИмяВремФайла);
	//Возврат ИмяВремФайла;
	Возврат ДвоичныйАдрес;
	
КонецФункции
&НаКлиенте
Перем МассивИдентифицирующийСегмент Экспорт;
&НаКлиенте
Перем МассивСегментИмени Экспорт;
&НаКлиенте
Перем МассивСегментПредприятия Экспорт;
&НаКлиенте
Перем МассивСегментАдреса Экспорт;
&НаКлиенте
Перем МассивСегментТелефона Экспорт;
&НаКлиенте
Перем МассивСегментФактическоеИсполнениеОбязательств Экспорт;
&НаКлиенте
Перем МассивСегментДополнительныеЗалоги Экспорт;
&НаКлиенте
Перем МассивСегментДополнительныеПоручители Экспорт;
&НаКлиенте
Перем МассивСегментДополнительныеБанковскиеГарантии Экспорт;
&НаКлиенте
Перем МассивСегментСделка Экспорт;
&НаКлиенте
Перем МассивСегментЮридическийСтатус Экспорт;
&НаКлиенте
Перем МассивСегментБанкротствоЮрлица Экспорт;
&НаКлиенте
Перем МассивСегментБанкротствоФизлица Экспорт;
&НаКлиенте
Перем МассивСегментИнформационнаяЧасть Экспорт;

&НаКлиенте
Перем МассивОбязательных Экспорт;
&НаКлиенте
Перем МассивУсловных Экспорт;
&НаКлиенте
Перем МассивНеОбязательных Экспорт;



&НаКлиенте
Процедура ОткрытьФормуВыбораРеквизитов(Элемент, ДанныеВыбора, СтандартнаяОбработка,ПараметрВыбранноеЗначение)
	СтандартнаяОбработка = Ложь;
	ВызывающийДокумент = Объект.НаПримереДокумента;
	ОтфильтрТипов = Неопределено;

	Если ВызывающийДокумент = Неопределено или Не ЗначениеЗаполнено(ВызывающийДокумент) Тогда
		Сообщить("Поле ""На примере документа"" должно быть заполнено!", СтатусСообщения.Внимание); 
		Возврат;	
	КонецЕсли; 
			
	Форма = ПолучитьФорму("Справочник.НастройкиВыгрузкиНБКИ.Форма.ФормаВыбораРеквизитов",ПараметрВыбранноеЗначение);
	Форма.ВладелецФормы = ЭтаФорма;
	Если ЗначениеЗаполнено(ОтФильтрТипов) Тогда	
		ЗаголовогПлюс = " по типу """ + Строка(ОтФильтрТипов) + """";	
	КонецЕсли; 
	форма.Заголовок = "Выбор реквизитов" + ЗаголовогПлюс;
	Форма.ЗакрыватьПриЗакрытииВладельца = Истина;
	Форма.Документ = ВызывающийДокумент;
	Форма.ОтФильтрТипов = ОтФильтрТипов;
	Форма.Элементы.ТабМетаданныеДерево.ПодчиненныеЭлементы.тзМетаданныеЗначение.Видимость = Истина;
	
	ОткрытьФорму(Форма);
КонецПроцедуры

&НаКлиенте
Процедура ИдентифицирующийСегментЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрВыбранноеЗначение = Новый Структура("ВыбранноеЗначение", Этаформа.Элементы.ИдентифицирующийСегмент.ТекущиеДанные.Значение);
	ОткрытьФормуВыбораРеквизитов(Элемент, ДанныеВыбора, СтандартнаяОбработка,ПараметрВыбранноеЗначение)
КонецПроцедуры

&НаКлиенте
Процедура СегментИмениЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрВыбранноеЗначение = Новый Структура("ВыбранноеЗначение", Этаформа.Элементы.СегментИмени.ТекущиеДанные.Значение);
	ОткрытьФормуВыбораРеквизитов(Элемент, ДанныеВыбора, СтандартнаяОбработка,ПараметрВыбранноеЗначение)
КонецПроцедуры

&НаКлиенте
Процедура СегментПредприятияЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрВыбранноеЗначение = Новый Структура("ВыбранноеЗначение", Этаформа.Элементы.СегментПредприятия.ТекущиеДанные.Значение);
	ОткрытьФормуВыбораРеквизитов(Элемент, ДанныеВыбора, СтандартнаяОбработка,ПараметрВыбранноеЗначение)
КонецПроцедуры

&НаКлиенте
Процедура СегментАдресаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрВыбранноеЗначение = Новый Структура("ВыбранноеЗначение", Этаформа.Элементы.СегментАдреса.ТекущиеДанные.Значение);
	ОткрытьФормуВыбораРеквизитов(Элемент, ДанныеВыбора, СтандартнаяОбработка,ПараметрВыбранноеЗначение)
КонецПроцедуры

&НаКлиенте
Процедура СегментТелефонаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрВыбранноеЗначение = Новый Структура("ВыбранноеЗначение", Этаформа.Элементы.СегментТелефона.ТекущиеДанные.Значение);
	ОткрытьФормуВыбораРеквизитов(Элемент, ДанныеВыбора, СтандартнаяОбработка,ПараметрВыбранноеЗначение)
КонецПроцедуры

&НаКлиенте
Процедура СегментФактическоеИсполнениеОбязательствЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрВыбранноеЗначение = Новый Структура("ВыбранноеЗначение", Этаформа.Элементы.СегментФактическоеИсполнениеОбязательств.ТекущиеДанные.Значение);
	ОткрытьФормуВыбораРеквизитов(Элемент, ДанныеВыбора, СтандартнаяОбработка,ПараметрВыбранноеЗначение)
КонецПроцедуры

&НаКлиенте
Процедура СегментДополнительныеЗалогиЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрВыбранноеЗначение = Новый Структура("ВыбранноеЗначение", Этаформа.Элементы.СегментДополнительныеЗалоги.ТекущиеДанные.Значение);
	ОткрытьФормуВыбораРеквизитов(Элемент, ДанныеВыбора, СтандартнаяОбработка,ПараметрВыбранноеЗначение)
КонецПроцедуры

&НаКлиенте
Процедура СегментДополнительныеПоручителиЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрВыбранноеЗначение = Новый Структура("ВыбранноеЗначение", Этаформа.Элементы.СегментДополнительныеПоручители.ТекущиеДанные.Значение);
	ОткрытьФормуВыбораРеквизитов(Элемент, ДанныеВыбора, СтандартнаяОбработка,ПараметрВыбранноеЗначение)
КонецПроцедуры

&НаКлиенте
Процедура СегментДополнительныеБанковскиеГарантииЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрВыбранноеЗначение = Новый Структура("ВыбранноеЗначение", Этаформа.Элементы.СегментДополнительныеБанковскиеГарантии.ТекущиеДанные.Значение);
	ОткрытьФормуВыбораРеквизитов(Элемент, ДанныеВыбора, СтандартнаяОбработка,ПараметрВыбранноеЗначение)
КонецПроцедуры

&НаКлиенте
Процедура СегментСделкаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрВыбранноеЗначение = Новый Структура("ВыбранноеЗначение", Этаформа.Элементы.СегментСделка.ТекущиеДанные.Значение);
	ОткрытьФормуВыбораРеквизитов(Элемент, ДанныеВыбора, СтандартнаяОбработка,ПараметрВыбранноеЗначение)
КонецПроцедуры

&НаКлиенте
Процедура СегментЮридическийСтатусЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрВыбранноеЗначение = Новый Структура("ВыбранноеЗначение", Этаформа.Элементы.СегментЮридическийСтатус.ТекущиеДанные.Значение);
	ОткрытьФормуВыбораРеквизитов(Элемент, ДанныеВыбора, СтандартнаяОбработка,ПараметрВыбранноеЗначение)
КонецПроцедуры

&НаКлиенте
Процедура СегментБанкротствоЮрлицаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрВыбранноеЗначение = Новый Структура("ВыбранноеЗначение", Этаформа.Элементы.СегментБанкротствоЮрлица.ТекущиеДанные.Значение);
	ОткрытьФормуВыбораРеквизитов(Элемент, ДанныеВыбора, СтандартнаяОбработка,ПараметрВыбранноеЗначение)
КонецПроцедуры

&НаКлиенте
Процедура СегментБанкротствоФизлицаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрВыбранноеЗначение = Новый Структура("ВыбранноеЗначение", Этаформа.Элементы.СегментБанкротствоФизлица.ТекущиеДанные.Значение);
	ОткрытьФормуВыбораРеквизитов(Элемент, ДанныеВыбора, СтандартнаяОбработка,ПараметрВыбранноеЗначение)
КонецПроцедуры

&НаКлиенте
Процедура СегментИнформационнаяЧастьЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрВыбранноеЗначение = Новый Структура("ВыбранноеЗначение", Этаформа.Элементы.СегментИнформационнаяЧасть.ТекущиеДанные.Значение);
	ОткрытьФормуВыбораРеквизитов(Элемент, ДанныеВыбора, СтандартнаяОбработка,ПараметрВыбранноеЗначение)
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "НастройкиНБКИВыборРеквизита" Тогда
		//Таб = Элементы.ИдентифицирующийСегмент;
		ЭлТаблица = ЭтаФорма.ТекущийЭлемент;
		РеквизитыИСвойстваЗначениеЗаполнение(Параметр,ЭлТаблица);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыИСвойстваЗначениеЗаполнение(СтруктураПараметров,Таблица) 
	
	ТекущиеДанные = Таблица.ТекущиеДанные;
	ИмяТаблицы = Таблица.Имя;
	Если Не СтруктураПараметров = Неопределено Тогда	
		ТекущиеДанные.Значение 	= СтруктураПараметров.Синоним;
		МассивДанных = СтруктураПараметров.МассивДанных; 	
		
		ТекущиеДанные.КодДопСвойства = СтруктураПараметров.КодДопСвойства;
		ТекущиеДанные.ОбъектДопСвойства = СтруктураПараметров.ОбъектДопСвойства;
		
		Список = Новый СписокЗначений;
		Для Каждого Стр Из МассивДанных Цикл
			Список.Добавить(Стр);
		КонецЦикла;
		ТекущиеДанные.Хранилище1 = Список;
		ЗаписатьДанныеВСтрокуХранилище(ТекущиеДанные.НомерСтроки, МассивДанных, ИмяТаблицы);	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеВСтрокуХранилище(НомерСтроки, МассивДанных, ИмяТаблицы)
	
	Рекв = РеквизитФормыВЗначение("Объект");
	Рекв.Записать_СтрокаХранилище(НомерСтроки, МассивДанных,ИмяТаблицы);
	ЗначениеВРеквизитФормы(Рекв, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	УсловноеОформление.Элементы.Очистить();
	
	МассивИменТаблиц = новый Массив;
	МассивИменТаблиц.Добавить("ИдентифицирующийСегмент");
	МассивИменТаблиц.Добавить("СегментИмени");
	МассивИменТаблиц.Добавить("СегментПредприятия");
	МассивИменТаблиц.Добавить("СегментАдреса");
	МассивИменТаблиц.Добавить("СегментТелефона");
	МассивИменТаблиц.Добавить("СегментФактическоеИсполнениеОбязательств");
	МассивИменТаблиц.Добавить("СегментДополнительныеЗалоги");
	МассивИменТаблиц.Добавить("СегментДополнительныеПоручители");
	МассивИменТаблиц.Добавить("СегментДополнительныеБанковскиеГарантии");
	МассивИменТаблиц.Добавить("СегментСделка");
	МассивИменТаблиц.Добавить("СегментЮридическийСтатус");
	МассивИменТаблиц.Добавить("СегментБанкротствоЮрлица");
	МассивИменТаблиц.Добавить("СегментБанкротствоФизлица");
	МассивИменТаблиц.Добавить("СегментИнформационнаяЧасть");
	
	Для Каждого Т из МассивИменТаблиц Цикл
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		
		// Создаем условие отбора
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект."+Т+".Обязательность"); // имя поля
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит; // либо задаем свой
		//**** Значение для отбора
		ЭлементОтбора.ПравоеЗначение = "M";
		ЭлементОтбора.Использование = Истина;
		
		//2.
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоКоралловый);
		
		ЭлементОформления.Использование = Истина;
		
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(Т);
		ПолеОформления.Использование = Истина;
		
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		
		// Создаем условие отбора
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект."+Т+".Обязательность"); // имя поля
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит; // либо задаем свой
		//**** Значение для отбора
		ЭлементОтбора.ПравоеЗначение = "O";
		ЭлементОтбора.Использование = Истина;
		
		//2.
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.ЦветМорскойВолныСветлый);
		
		ЭлементОформления.Использование = Истина;
		
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(Т);
		ПолеОформления.Использование = Истина;
		
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		
		// Создаем условие отбора
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект."+Т+".Обязательность"); // имя поля
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит; // либо задаем свой
		//**** Значение для отбора
		ЭлементОтбора.ПравоеЗначение = "C";
		ЭлементОтбора.Использование = Истина;
		
		//2.
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоЗолотистый);
		
		ЭлементОформления.Использование = Истина;
		
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(Т);
		ПолеОформления.Использование = Истина;


		
		
	КонецЦикла;
	
	

	
	
		
	
КонецПроцедуры



&НаКлиенте
Процедура ЗаполнитьПоляСегментаID(Команда)
	ИмяТаблицы = "ИдентифицирующийСегмент";
	ЗаполнитьПоляСегментов(МассивИдентифицирующийСегмент,ИмяТаблицы);
	ЗаполнитьОбязательность(ИмяТаблицы);
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПоляСегментаNA(Команда)
	ИмяТаблицы = "СегментИмени";
	ЗаполнитьПоляСегментов(МассивСегментИмени,ИмяТаблицы);
	ЗаполнитьОбязательность(ИмяТаблицы);
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПоляСегментаBU(Команда)
	ИмяТаблицы = "СегментПредприятия";
	ЗаполнитьПоляСегментов(МассивСегментПредприятия,ИмяТаблицы);
	ЗаполнитьОбязательность(ИмяТаблицы);
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПоляСегментаAD(Команда)
	ИмяТаблицы = "СегментАдреса";
	ЗаполнитьПоляСегментов(МассивСегментАдреса,ИмяТаблицы);
	ЗаполнитьОбязательность(ИмяТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоляСегментаPN(Команда)
	ИмяТаблицы = "СегментТелефона";
	ЗаполнитьПоляСегментов(МассивСегментТелефона,ИмяТаблицы);
	ЗаполнитьОбязательность(ИмяТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоляСегментаPA(Команда)
	ИмяТаблицы = "СегментФактическоеИсполнениеОбязательств";
	ЗаполнитьПоляСегментов(МассивСегментФактическоеИсполнениеОбязательств,ИмяТаблицы);
	ЗаполнитьОбязательность(ИмяТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполненитьПоляСегментCL(Команда)
	ИмяТаблицы = "СегментДополнительныеЗалоги";
	ЗаполнитьПоляСегментов(МассивСегментДополнительныеЗалоги,ИмяТаблицы);
	ЗаполнитьОбязательность(ИмяТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоляСегментаGR(Команда)
	ИмяТаблицы = "СегментДополнительныеПоручители";
	ЗаполнитьПоляСегментов(МассивСегментДополнительныеПоручители,ИмяТаблицы);
	ЗаполнитьОбязательность(ИмяТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура ЗапонитьПоляСегментаBG(Команда)
	ИмяТаблицы = "СегментДополнительныеБанковскиеГарантии";
	ЗаполнитьПоляСегментов(МассивСегментДополнительныеБанковскиеГарантии,ИмяТаблицы);
	ЗаполнитьОбязательность(ИмяТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоляСегментаTR(Команда)
	ИмяТаблицы = "СегментСделка";
	ЗаполнитьПоляСегментов(МассивСегментСделка,ИмяТаблицы);
	ЗаполнитьОбязательность(ИмяТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоляСегментаLE(Команда)
	ИмяТаблицы = "СегментЮридическийСтатус";
	ЗаполнитьПоляСегментов(МассивСегментЮридическийСтатус,ИмяТаблицы);
	ЗаполнитьОбязательность(ИмяТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоляСегментаBK(Команда)
	ИмяТаблицы = "СегментБанкротствоЮрлица";
	ЗаполнитьПоляСегментов(МассивСегментБанкротствоЮрлица,ИмяТаблицы);
	ЗаполнитьОбязательность(ИмяТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоляСегментаBC(Команда)
	ИмяТаблицы = "СегментБанкротствоФизлица";
	ЗаполнитьПоляСегментов(МассивСегментБанкротствоФизлица,ИмяТаблицы);
	ЗаполнитьОбязательность(ИмяТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьполяСегментаIP(Команда)
	ИмяТаблицы = "СегментИнформационнаяЧасть";
	ЗаполнитьПоляСегментов(МассивСегментИнформационнаяЧасть,ИмяТаблицы);
	ЗаполнитьОбязательность(ИмяТаблицы);
КонецПроцедуры




&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Инициализируем поля сегментов при открытии формы
	//Инициализируем обязательность полей
	
	МассивОбязательных = Новый Массив;
	МассивУсловных = Новый Массив ;
	МассивНеОбязательных = Новый Массив;

	//ID
	
	
	МассивИдентифицирующийСегмент = Новый Массив;
	Если Объект.КоличествоДокументов = 0 Тогда
		Объект.КоличествоДокументов = 1;
	КонецЕсли;
	Для Количество = 1 по Объект.КоличествоДокументов Цикл
		//МассивИдентифицирующийСегмент.Добавить("Наименование сегмента " + Строка(Количество));
		МассивИдентифицирующийСегмент.Добавить("Тип ID " + Строка(Количество));
		МассивОбязательных.Добавить("Тип ID " + Строка(Количество));
		МассивИдентифицирующийСегмент.Добавить("Номер серии " + Строка(Количество));
		МассивИдентифицирующийСегмент.Добавить("Номер документа " + Строка(Количество));
		МассивИдентифицирующийСегмент.Добавить("Когда выдан " + Строка(Количество));
		МассивИдентифицирующийСегмент.Добавить("Кем выдан " + Строка(Количество));
		МассивУсловных.Добавить("Номер серии " + Строка(Количество));
		МассивУсловных.Добавить("Номер документа " + Строка(Количество));
		МассивУсловных.Добавить("Когда выдан " + Строка(Количество));
		МассивУсловных.Добавить("Кем выдан " + Строка(Количество));
		МассивИдентифицирующийСегмент.Добавить("Поле не используется с 31 12 2019 "+ Строка(Количество));
		МассивИдентифицирующийСегмент.Добавить("Поле не используется "+ Строка(Количество));
		МассивНеОбязательных.Добавить("Поле не используется с 31 12 2019 "+ Строка(Количество));
		МассивНеОбязательных.Добавить("Поле не используется "+ Строка(Количество));
	КонецЦикла;	
	
	//NA
	МассивСегментИмени = Новый Массив;	
	МассивСегментИмени.Добавить("Фамилия");
	МассивСегментИмени.Добавить("Отчество");
	МассивСегментИмени.Добавить("Имя");
	МассивСегментИмени.Добавить("Поле не используется 5");
	МассивСегментИмени.Добавить("Дата рождения");
	МассивСегментИмени.Добавить("Место рождения");
	МассивСегментИмени.Добавить("Поле не используется 8");
	МассивСегментИмени.Добавить("Поле не используется 9");
	МассивСегментИмени.Добавить("Поле не используется 10");
	МассивСегментИмени.Добавить("Примечания");
	МассивСегментИмени.Добавить("Фамилия до изменения");
	МассивСегментИмени.Добавить("Отчество до изменения");

	МассивОбязательных.Добавить("Фамилия");
	МассивНеОбязательных.Добавить("Отчество");
	МассивОбязательных.Добавить("Имя");
	МассивНеОбязательных.Добавить("Поле не используется 5");
	МассивОбязательных.Добавить("Дата рождения");
	МассивОбязательных.Добавить("Место рождения");
	МассивНеОбязательных.Добавить("Поле не используется 8");
	МассивНеОбязательных.Добавить("Поле не используется 9");
	МассивНеОбязательных.Добавить("Поле не используется 10");
	МассивНеОбязательных.Добавить("Примечания");
	МассивНеОбязательных.Добавить("Фамилия до изменения");
	МассивНеОбязательных.Добавить("Отчество до изменения");

	
	//BU
	МассивСегментПредприятия = Новый Массив;
	МассивСегментПредприятия.Добавить("Полное наименование юрлица, включая организационно-правовую форму");
	МассивСегментПредприятия.Добавить("Поле не используется 3");
	МассивСегментПредприятия.Добавить("Статус предприятия");
	МассивСегментПредприятия.Добавить("Дата определения статуса");
	МассивСегментПредприятия.Добавить("ОКПО");
	МассивСегментПредприятия.Добавить("ОКОНХ");
	МассивСегментПредприятия.Добавить("ОКВЭД");
	МассивСегментПредприятия.Добавить("OKATO");
	МассивСегментПредприятия.Добавить("ОКОГУ");
	МассивСегментПредприятия.Добавить("ОКФС");
	МассивСегментПредприятия.Добавить("ОКОПФ");
	МассивСегментПредприятия.Добавить("КПП");
	МассивСегментПредприятия.Добавить("Поле не используется 14");
	МассивСегментПредприятия.Добавить("Поле не используется 15");
	МассивСегментПредприятия.Добавить("Поле не используется 16");
	МассивСегментПредприятия.Добавить("Сокращенное наименование предприятия");
	МассивСегментПредприятия.Добавить("Название предприятия до изменения");
	МассивСегментПредприятия.Добавить("ОКПО до изменения");
	МассивСегментПредприятия.Добавить("ОКАТО до изменения");
	МассивСегментПредприятия.Добавить("Код КПП до изменения");
	МассивСегментПредприятия.Добавить("Сокращенное наименование предприятия до изменения");
	МассивСегментПредприятия.Добавить("Фирменное наименование предприятия");
	МассивСегментПредприятия.Добавить("Наименование на одном из языков РФ");
	МассивСегментПредприятия.Добавить("Наименование на иностранном языке");
	
	
	МассивОбязательных.Добавить("Полное наименование юрлица, включая организационно-правовую форму");
	МассивНеОбязательных.Добавить("Поле не используется 3");
	МассивНеОбязательных.Добавить("Статус предприятия");
	МассивУсловных.Добавить("Дата определения статуса");
	МассивНеОбязательных.Добавить("ОКПО");
	МассивНеОбязательных.Добавить("ОКОНХ");
	МассивНеОбязательных.Добавить("ОКВЭД");
	МассивНеОбязательных.Добавить("OKATO");
	МассивНеОбязательных.Добавить("ОКОГУ");
	МассивНеОбязательных.Добавить("ОКФС");
	МассивНеОбязательных.Добавить("ОКОПФ");
	МассивНеОбязательных.Добавить("КПП");
	МассивНеОбязательных.Добавить("Поле не используется 14");
	МассивНеОбязательных.Добавить("Поле не используется 15");
	МассивНеОбязательных.Добавить("Поле не используется 16");
	МассивНеОбязательных.Добавить("Сокращенное наименование предприятия");
	МассивНеОбязательных.Добавить("Название предприятия до изменения");
	МассивНеОбязательных.Добавить("ОКПО до изменения");
	МассивНеОбязательных.Добавить("ОКАТО до изменения");
	МассивНеОбязательных.Добавить("Код КПП до изменения");
	МассивНеОбязательных.Добавить("Сокращенное наименование предприятия до изменения");
	МассивНеОбязательных.Добавить("Фирменное наименование предприятия");
	МассивНеОбязательных.Добавить("Наименование на одном из языков РФ");
	МассивНеОбязательных.Добавить("Наименование на иностранном языке");
	
	//AD
	МассивСегментАдреса = Новый Массив;
	Если Объект.КоличествоАдресов = 0 Тогда
		Объект.КоличествоАдресов = 1;
	КонецЕсли;
	Для Количество = 1 по Объект.КоличествоАдресов Цикл
		МассивСегментАдреса.Добавить("Тип адреса " + Строка(Количество));
		МассивСегментАдреса.Добавить("Почтовый индекс " + Строка(Количество));
		МассивСегментАдреса.Добавить("Страна " + Строка(Количество));
		МассивСегментАдреса.Добавить("Регион " + Строка(Количество));
		МассивСегментАдреса.Добавить("Поле не используется 6"+ Строка(Количество));
		МассивСегментАдреса.Добавить("Район " + Строка(Количество));
		МассивСегментАдреса.Добавить("Местоположение " + Строка(Количество));
		МассивСегментАдреса.Добавить("Тип улицы " + Строка(Количество));
		МассивСегментАдреса.Добавить("Улица " + Строка(Количество));
		МассивСегментАдреса.Добавить("Номер дома " + Строка(Количество));
		МассивСегментАдреса.Добавить("Корпус " + Строка(Количество));
		МассивСегментАдреса.Добавить("Строение " + Строка(Количество));
		МассивСегментАдреса.Добавить("Квартира " + Строка(Количество));
		МассивСегментАдреса.Добавить("Статус " + Строка(Количество));
		МассивСегментАдреса.Добавить("Дата прописки или регистации " + Строка(Количество));
		
		МассивУсловных.Добавить("Тип адреса " + Строка(Количество));
		МассивНеОбязательных.Добавить("Почтовый индекс " + Строка(Количество));
		МассивНеОбязательных.Добавить("Страна " + Строка(Количество));
		МассивНеОбязательных.Добавить("Регион " + Строка(Количество));
		МассивНеОбязательных.Добавить("Поле не используется 6"+ Строка(Количество));
		МассивНеОбязательных.Добавить("Район " + Строка(Количество));
		МассивОбязательных.Добавить("Местоположение " + Строка(Количество));
		МассивНеОбязательных.Добавить("Тип улицы " + Строка(Количество));
		МассивОбязательных.Добавить("Улица " + Строка(Количество));
		МассивНеОбязательных.Добавить("Номер дома " + Строка(Количество));
		МассивНеОбязательных.Добавить("Корпус " + Строка(Количество));
		МассивНеОбязательных.Добавить("Строение " + Строка(Количество));
		МассивНеОбязательных.Добавить("Квартира " + Строка(Количество));
		МассивНеОбязательных.Добавить("Статус " + Строка(Количество));
		МассивНеОбязательных.Добавить("Дата прописки или регистации " + Строка(Количество));

	КонецЦикла;	

	//PN
	МассивСегментТелефона = Новый Массив;
	Если Объект.КоличествоТелефонов = 0 Тогда
		Объект.КоличествоТелефонов = 1;
	КонецЕсли;
	Для Количество = 1 по Объект.КоличествоТелефонов Цикл
		МассивСегментТелефона.Добавить("Номер " + Строка(Количество));
		МассивСегментТелефона.Добавить("Тип " + Строка(Количество));
		МассивОбязательных.Добавить("Номер " + Строка(Количество));
		МассивУсловных.Добавить("Тип " + Строка(Количество));
	КонецЦикла;	
	
	//PA
	МассивСегментФактическоеИсполнениеОбязательств = Новый Массив;
	МассивСегментФактическоеИсполнениеОбязательств.Добавить("Сумма произведенного платежа");
	МассивСегментФактическоеИсполнениеОбязательств.Добавить("Сумма произведенного платежа, за исключением просроченных платежей сроком свыше 30 дней");
	МассивСегментФактическоеИсполнениеОбязательств.Добавить("Валюта платежа");
	МассивСегментФактическоеИсполнениеОбязательств.Добавить("Дата платежа");
	МассивСегментФактическоеИсполнениеОбязательств.Добавить("Объем платежа");
	МассивСегментФактическоеИсполнениеОбязательств.Добавить("Суммарный размер фактических платежей за 24 календарных месяца за исключением просроченных платежей сроком свыше 30 дней");
	
	МассивОбязательных.Добавить("Сумма произведенного платежа");
	МассивОбязательных.Добавить("Сумма произведенного платежа, за исключением просроченных платежей сроком свыше 30 дней");
	МассивУсловных.Добавить("Валюта платежа");
	МассивОбязательных.Добавить("Дата платежа");
	МассивОбязательных.Добавить("Объем платежа");
	МассивОбязательных.Добавить("Суммарный размер фактических платежей за 24 календарных месяца за исключением просроченных платежей сроком свыше 30 дней");

	
	//CL
	МассивСегментДополнительныеЗалоги = Новый Массив;
	МассивСегментДополнительныеЗалоги.Добавить("Идентификатор залога");
	МассивСегментДополнительныеЗалоги.Добавить("Код залога");
	МассивСегментДополнительныеЗалоги.Добавить("Оценочная стоимость залога");
	МассивСегментДополнительныеЗалоги.Добавить("Дата оценки стоимости залога");
	МассивСегментДополнительныеЗалоги.Добавить("Срок действия договора залога");
	МассивСегментДополнительныеЗалоги.Добавить("Код валюты");
	
	МассивОбязательных.Добавить("Идентификатор залога");
	МассивОбязательных.Добавить("Код залога");
	МассивОбязательных.Добавить("Оценочная стоимость залога");
	МассивОбязательных.Добавить("Дата оценки стоимости залога");
	МассивОбязательных.Добавить("Срок действия договора залога");
	МассивУсловных.Добавить("Код валюты");


	//GR
	МассивСегментДополнительныеПоручители = Новый Массив;
	МассивСегментДополнительныеПоручители.Добавить("Идентификатор поручительства");
	МассивСегментДополнительныеПоручители.Добавить("Объем обязательства, обеспечиваемого поручительством");
	МассивСегментДополнительныеПоручители.Добавить("Сумма поручительства");
	МассивСегментДополнительныеПоручители.Добавить("Срок поручительства");
	МассивСегментДополнительныеПоручители.Добавить("Код валюты");
	
	МассивОбязательных.Добавить("Идентификатор поручительства");
	МассивОбязательных.Добавить("Объем обязательства, обеспечиваемого поручительством");
	МассивОбязательных.Добавить("Сумма поручительства");
	МассивОбязательных.Добавить("Срок поручительства");
	МассивУсловных.Добавить("Код валюты");

	
	//BG
	МассивСегментДополнительныеБанковскиеГарантии = Новый Массив;
	МассивСегментДополнительныеБанковскиеГарантии.Добавить("Идентификатор банковской гарантии");
	МассивСегментДополнительныеБанковскиеГарантии.Добавить("Объем обязательства, обеспечиваемого банковской гарантией");
	МассивСегментДополнительныеБанковскиеГарантии.Добавить("Сумма банковской гарантии");
	МассивСегментДополнительныеБанковскиеГарантии.Добавить("Срок банковской гарантии");
	МассивСегментДополнительныеБанковскиеГарантии.Добавить("Иные случаи прекращения банковской гарантии");
	МассивСегментДополнительныеБанковскиеГарантии.Добавить("Код валюты");
	
	МассивОбязательных.Добавить("Идентификатор банковской гарантии");
	МассивУсловных.Добавить("Объем обязательства, обеспечиваемого банковской гарантией");
	МассивОбязательных.Добавить("Сумма банковской гарантии");
	МассивОбязательных.Добавить("Срок банковской гарантии");
	МассивНеОбязательных.Добавить("Иные случаи прекращения банковской гарантии");
	МассивУсловных.Добавить("Код валюты");

	
	//TR
	МассивСегментСделка = Новый Массив;
	МассивСегментСделка.Добавить("Номер счета");
	МассивСегментСделка.Добавить("Тип счёта");
	МассивСегментСделка.Добавить("Отношение к счёту");
	МассивСегментСделка.Добавить("Дата открытия счёта или Дата заключения договора поручительства или банковской гарантии");
	МассивСегментСделка.Добавить("Дата последней выплаты");
	МассивСегментСделка.Добавить("Состояние счёта");
	МассивСегментСделка.Добавить("Дата состояния счёта");
	МассивСегментСделка.Добавить("Дата составления отчёта");
	МассивСегментСделка.Добавить("Лимит кредита или Исходная сумма кредита");
	МассивСегментСделка.Добавить("Баланс");
	МассивСегментСделка.Добавить("Просрочка");
	МассивСегментСделка.Добавить("Следующий платеж");
	МассивСегментСделка.Добавить("Частота выплат");
	МассивСегментСделка.Добавить("Своевременность платежей");
	МассивСегментСделка.Добавить("Код валюты");
	МассивСегментСделка.Добавить("Код залога");
	МассивСегментСделка.Добавить("Дата окончания срока договора");
	МассивСегментСделка.Добавить("Дата финального платежа");
	МассивСегментСделка.Добавить("Дата финальной выплаты процентов");
	МассивСегментСделка.Добавить("Частота выплат процентов");
	МассивСегментСделка.Добавить("Старое имя пользователя");
	МассивСегментСделка.Добавить("Старый номер счета");
	МассивСегментСделка.Добавить("Текущая задолженность");
	МассивСегментСделка.Добавить("Флаг о наличии поручителя");
	МассивСегментСделка.Добавить("Объем обязательства, обеспечиваемого поручительством");
	МассивСегментСделка.Добавить("Сумма поручительства");
	МассивСегментСделка.Добавить("Срок поручительства");
	МассивСегментСделка.Добавить("Флаг о наличии банковской гарантии");
	МассивСегментСделка.Добавить("Объем обязательства, обеспечиваемого банковской гарантией");
	МассивСегментСделка.Добавить("Сумма банковской гарантии");
	МассивСегментСделка.Добавить("Срок банковской гарантии");
	МассивСегментСделка.Добавить("Оценочная стоимость залога");
	МассивСегментСделка.Добавить("Дата оценки стоимости залога");
	МассивСегментСделка.Добавить("Срок действия договора залога");
	МассивСегментСделка.Добавить("Полная стоимость кредита");
	МассивСегментСделка.Добавить("Наименования приобретателя права требования");
	МассивСегментСделка.Добавить("Идентификационные данные приобретателя права требования");
	МассивСегментСделка.Добавить("ИНН приобретателя права требования");
	МассивСегментСделка.Добавить("СНИЛС приобретателя права требования");
	МассивСегментСделка.Добавить("Дата фактического исполнения обязательств в полном объеме");
	МассивСегментСделка.Добавить("Срочная задолженность по основному долгу на дату последнего платежа");
	МассивСегментСделка.Добавить("Срочная задолженность по процентам на дату последнего платежа");
	МассивСегментСделка.Добавить("Сумма подлежащих уплате комиссий и иных аналогичных требований к заемщику в составе срочной задолженности на дату последнего платежа");
	МассивСегментСделка.Добавить("Просроченная задолженность по основному долгу на дату последнего платежа");
	МассивСегментСделка.Добавить("Просроченная задолженность по процентам на дату последнего платежа");
	МассивСегментСделка.Добавить("Сумма просроченных комиссий, а также сумма неустойки (штрафы, пени) и иных аналогичных требований к заемщику на дату последнего платежа");
	МассивСегментСделка.Добавить("Дата окончания льготного периода");
	МассивСегментСделка.Добавить("Уникальный идентификатор договора (сделки)");
	// 7.01 R
	МассивСегментСделка.Добавить("Дата неподтверждения или неустановления льготного периода");
	МассивСегментСделка.Добавить("Основание установления льготного периода");
	МассивСегментСделка.Добавить("Дата начала льготного периода");
	
	МассивОбязательных.Добавить("Номер счета");
	МассивУсловных.Добавить("Тип счёта");
	МассивОбязательных.Добавить("Отношение к счёту");
	МассивУсловных.Добавить("Дата открытия счёта или Дата заключения договора поручительства или банковской гарантии");
	МассивУсловных.Добавить("Дата последней выплаты");
	МассивУсловных.Добавить("Состояние счёта");
	МассивУсловных.Добавить("Дата состояния счёта");
	МассивУсловных.Добавить("Дата составления отчёта");
	МассивУсловных.Добавить("Лимит кредита или Исходная сумма кредита");
	МассивУсловных.Добавить("Баланс");
	МассивУсловных.Добавить("Просрочка");
	МассивУсловных.Добавить("Следующий платеж");
	МассивУсловных.Добавить("Частота выплат");
	МассивУсловных.Добавить("Своевременность платежей");
	МассивУсловных.Добавить("Код валюты");
	МассивУсловных.Добавить("Код залога");
	МассивУсловных.Добавить("Дата окончания срока договора");
	МассивУсловных.Добавить("Дата финального платежа");
	МассивУсловных.Добавить("Дата финальной выплаты процентов");
	МассивУсловных.Добавить("Частота выплат процентов");
	МассивНеОбязательных.Добавить("Старое имя пользователя");
	МассивНеОбязательных.Добавить("Старый номер счета");
	МассивУсловных.Добавить("Текущая задолженность");
	МассивУсловных.Добавить("Флаг о наличии поручителя");
	МассивУсловных.Добавить("Объем обязательства, обеспечиваемого поручительством");
	МассивУсловных.Добавить("Сумма поручительства");
	МассивУсловных.Добавить("Срок поручительства");
	МассивУсловных.Добавить("Флаг о наличии банковской гарантии");
	МассивУсловных.Добавить("Объем обязательства, обеспечиваемого банковской гарантией");
	МассивУсловных.Добавить("Сумма банковской гарантии");
	МассивУсловных.Добавить("Срок банковской гарантии");
	МассивУсловных.Добавить("Оценочная стоимость залога");
	МассивУсловных.Добавить("Дата оценки стоимости залога");
	МассивУсловных.Добавить("Срок действия договора залога");
	МассивУсловных.Добавить("Полная стоимость кредита");
	МассивУсловных.Добавить("Наименования приобретателя права требования");
	МассивУсловных.Добавить("Идентификационные данные приобретателя права требования");
	МассивУсловных.Добавить("ИНН приобретателя права требования");
	МассивУсловных.Добавить("СНИЛС приобретателя права требования");
	МассивУсловных.Добавить("Дата фактического исполнения обязательств в полном объеме");
	МассивУсловных.Добавить("Срочная задолженность по основному долгу на дату последнего платежа");
	МассивУсловных.Добавить("Срочная задолженность по процентам на дату последнего платежа");
	МассивУсловных.Добавить("Сумма подлежащих уплате комиссий и иных аналогичных требований к заемщику в составе срочной задолженности на дату последнего платежа");
	МассивУсловных.Добавить("Просроченная задолженность по основному долгу на дату последнего платежа");
	МассивУсловных.Добавить("Просроченная задолженность по процентам на дату последнего платежа");
	МассивУсловных.Добавить("Сумма просроченных комиссий, а также сумма неустойки (штрафы, пени) и иных аналогичных требований к заемщику на дату последнего платежа");
	МассивУсловных.Добавить("Дата окончания льготного периода");
	МассивУсловных.Добавить("Уникальный идентификатор договора (сделки)");
	МассивУсловных.Добавить("Дата неподтверждения или неустановления льготного периода");
	МассивУсловных.Добавить("Основание установления льготного периода");
	МассивУсловных.Добавить("Дата начала льготного периода");

	
	//LE
	МассивСегментЮридическийСтатус = Новый Массив;
	МассивСегментЮридическийСтатус.Добавить("Номер иска");
	МассивСегментЮридическийСтатус.Добавить("Наименование суда");
	МассивСегментЮридическийСтатус.Добавить("Дата отчёта");
	МассивСегментЮридическийСтатус.Добавить("Дата исполнения");
	МассивСегментЮридическийСтатус.Добавить("Дата возмещения");
	МассивСегментЮридическийСтатус.Добавить("Истец");
	МассивСегментЮридическийСтатус.Добавить("Решение");
	
	МассивОбязательных.Добавить("Номер иска");
	МассивОбязательных.Добавить("Наименование суда");
	МассивУсловных.Добавить("Дата отчёта");
	МассивНеОбязательных.Добавить("Дата исполнения");
	МассивНеОбязательных.Добавить("Дата возмещения");
	МассивНеОбязательных.Добавить("Истец");
	МассивОбязательных.Добавить("Решение");

	
	//BK
	МассивСегментБанкротствоЮрлица = Новый Массив;
	МассивСегментБанкротствоЮрлица.Добавить("Наименование суда");
	МассивСегментБанкротствоЮрлица.Добавить("Номер дела");
	МассивСегментБанкротствоЮрлица.Добавить("Дата исполнения");
	МассивСегментБанкротствоЮрлица.Добавить("Дата отчёта");
	МассивСегментБанкротствоЮрлица.Добавить("Истец");
	МассивСегментБанкротствоЮрлица.Добавить("Тип банкротства");
	МассивСегментБанкротствоЮрлица.Добавить("Решение");
	
	МассивНеОбязательных.Добавить("Наименование суда");
	МассивНеОбязательных.Добавить("Номер дела");
	МассивНеОбязательных.Добавить("Дата исполнения");
	МассивУсловных.Добавить("Дата отчёта");
	МассивНеОбязательных.Добавить("Истец");
	МассивОбязательных.Добавить("Тип банкротства");
	МассивНеОбязательных.Добавить("Решение");

	
	//BC
	МассивСегментБанкротствоФизлица = Новый Массив;
	МассивСегментБанкротствоФизлица.Добавить("Идентификатор записи о банкротстве");
	МассивСегментБанкротствоФизлица.Добавить("Дата изменения");
	МассивСегментБанкротствоФизлица.Добавить("Вид процедуры банкротства");
	МассивСегментБанкротствоФизлица.Добавить("Дата включения в ЕФРСБ");
	МассивСегментБанкротствоФизлица.Добавить("Дата завершения банкротства");
	МассивСегментБанкротствоФизлица.Добавить("Иные сведения о банкротстве");
	МассивСегментБанкротствоФизлица.Добавить("Другие иные сведения о банкротстве");
	МассивСегментБанкротствоФизлица.Добавить("Дата включения иных сведений в ЕФРСБ");
	МассивСегментБанкротствоФизлица.Добавить("Дата начала полномочий управляющего");
	МассивСегментБанкротствоФизлица.Добавить("Дата окончания полномочий управляющего");
	
	МассивОбязательных.Добавить("Идентификатор записи о банкротстве");
	МассивОбязательных.Добавить("Дата изменения");
	МассивОбязательных.Добавить("Вид процедуры банкротства");
	МассивОбязательных.Добавить("Дата включения в ЕФРСБ");
	МассивУсловных.Добавить("Дата завершения банкротства");
	МассивНеОбязательных.Добавить("Иные сведения о банкротстве");
	МассивУсловных.Добавить("Другие иные сведения о банкротстве");
	МассивУсловных.Добавить("Дата включения иных сведений в ЕФРСБ");
	МассивОбязательных.Добавить("Дата начала полномочий управляющего");
	МассивОбязательных.Добавить("Дата окончания полномочий управляющего");

	
	//IP
	МассивСегментИнформационнаяЧасть = Новый Массив;
	МассивСегментИнформационнаяЧасть.Добавить("Номер заявки или Номер договора поручительства");
	МассивСегментИнформационнаяЧасть.Добавить("Дата заявки или Дата договора поручительства");
	МассивСегментИнформационнаяЧасть.Добавить("Тип займодавца");
	МассивСегментИнформационнаяЧасть.Добавить("Вид обязательства");
	МассивСегментИнформационнаяЧасть.Добавить("Тип запрошенного кредита");
	МассивСегментИнформационнаяЧасть.Добавить("Способ предоставления заявки");
	МассивСегментИнформационнаяЧасть.Добавить("Решение об одобрении");
	МассивСегментИнформационнаяЧасть.Добавить("Срок окончания действия одобрения");
	МассивСегментИнформационнаяЧасть.Добавить("Сумма займа по отклоненной заявке");
	МассивСегментИнформационнаяЧасть.Добавить("Валюта отклоненной заявки");
	МассивСегментИнформационнаяЧасть.Добавить("Дата отказа в предоставлении займа");
	МассивСегментИнформационнаяЧасть.Добавить("Основание отказа в выдаче займа");
	МассивСегментИнформационнаяЧасть.Добавить("Номер договора займа (кредита)");
	МассивСегментИнформационнаяЧасть.Добавить("Информация о предоставленном кредите (если отличается от информации о запрошенном кредите)");
	МассивСегментИнформационнаяЧасть.Добавить("Признак отсутствия платежей");
	МассивСегментИнформационнаяЧасть.Добавить("Кредит погашен");
	МассивСегментИнформационнаяЧасть.Добавить("Старый номер заявки или Старый номер договора поручительства");
	
	МассивОбязательных.Добавить("Номер заявки или Номер договора поручительства");
	МассивОбязательных.Добавить("Дата заявки или Дата договора поручительства");
	МассивОбязательных.Добавить("Тип займодавца");
	МассивОбязательных.Добавить("Вид обязательства");
	МассивОбязательных.Добавить("Тип запрошенного кредита");
	МассивУсловных.Добавить("Способ предоставления заявки");
	МассивУсловных.Добавить("Решение об одобрении");
	МассивУсловных.Добавить("Срок окончания действия одобрения");
	МассивУсловных.Добавить("Сумма займа по отклоненной заявке");
	МассивУсловных.Добавить("Валюта отклоненной заявки");
	МассивУсловных.Добавить("Дата отказа в предоставлении займа");
	МассивУсловных.Добавить("Основание отказа в выдаче займа");
	МассивУсловных.Добавить("Номер договора займа (кредита)");
	МассивУсловных.Добавить("Информация о предоставленном кредите (если отличается от информации о запрошенном кредите)");
	МассивУсловных.Добавить("Признак отсутствия платежей");
	МассивУсловных.Добавить("Кредит погашен");
	МассивНеОбязательных.Добавить("Старый номер заявки или Старый номер договора поручительства");

		
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоляСегментов(МассивНаименований,ИмяТаблицы)
	Объект[ИмяТаблицы].Очистить();
	Если МассивНаименований.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	Для каждого Элемент из МассивНаименований Цикл
		НСтрока = Объект[ИмяТаблицы].Добавить();
		Нстрока.Поле = Элемент;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоДокументовПриИзменении(Элемент)
	//ID
	МассивИдентифицирующийСегмент = Новый Массив;
	Если Объект.КоличествоДокументов = 0 Тогда
		Объект.КоличествоДокументов = 1;
	КонецЕсли;
	Для Количество = 1 по Объект.КоличествоДокументов Цикл
		//МассивИдентифицирующийСегмент.Добавить("Наименование сегмента " + Строка(Количество));
		МассивИдентифицирующийСегмент.Добавить("Тип ID " + Строка(Количество));
		МассивОбязательных.Добавить("Тип ID " + Строка(Количество));
		МассивИдентифицирующийСегмент.Добавить("Номер серии " + Строка(Количество));
		МассивИдентифицирующийСегмент.Добавить("Номер документа " + Строка(Количество));
		МассивИдентифицирующийСегмент.Добавить("Когда выдан " + Строка(Количество));
		МассивИдентифицирующийСегмент.Добавить("Кем выдан " + Строка(Количество));
		МассивУсловных.Добавить("Номер серии " + Строка(Количество));
		МассивУсловных.Добавить("Номер документа " + Строка(Количество));
		МассивУсловных.Добавить("Когда выдан " + Строка(Количество));
		МассивУсловных.Добавить("Кем выдан " + Строка(Количество));
		МассивИдентифицирующийСегмент.Добавить("Поле не используется с 31 12 2019 "+ Строка(Количество));
		МассивИдентифицирующийСегмент.Добавить("Поле не используется "+ Строка(Количество));
		МассивНеОбязательных.Добавить("Поле не используется с 31 12 2019 "+ Строка(Количество));
		МассивНеОбязательных.Добавить("Поле не используется "+ Строка(Количество));
	КонецЦикла;	
	
	МассивУсловных = УдалитьПовторяющиесяЭлементыМассива(МассивУсловных);
	МассивНеОбязательных = УдалитьПовторяющиесяЭлементыМассива(МассивНеОбязательных);
	МассивОбязательных = УдалитьПовторяющиесяЭлементыМассива(МассивОбязательных);


КонецПроцедуры

&НаКлиенте
Процедура КоличествоАдресовПриИзменении(Элемент)
	//AD
	МассивСегментАдреса = Новый Массив;
	Если Объект.КоличествоАдресов = 0 Тогда
		Объект.КоличествоАдресов = 1;
	КонецЕсли;
	Для Количество = 1 по Объект.КоличествоАдресов Цикл
		МассивСегментАдреса.Добавить("Тип адреса " + Строка(Количество));
		МассивСегментАдреса.Добавить("Почтовый индекс " + Строка(Количество));
		МассивСегментАдреса.Добавить("Страна " + Строка(Количество));
		МассивСегментАдреса.Добавить("Регион " + Строка(Количество));
		МассивСегментАдреса.Добавить("Район " + Строка(Количество));
		МассивСегментАдреса.Добавить("Местоположение " + Строка(Количество));
		МассивСегментАдреса.Добавить("Тип улицы " + Строка(Количество));
		МассивСегментАдреса.Добавить("Улица " + Строка(Количество));
		МассивСегментАдреса.Добавить("Номер дома " + Строка(Количество));
		МассивСегментАдреса.Добавить("Корпус " + Строка(Количество));
		МассивСегментАдреса.Добавить("Строение " + Строка(Количество));
		МассивСегментАдреса.Добавить("Квартира " + Строка(Количество));
		МассивСегментАдреса.Добавить("Статус " + Строка(Количество));
		МассивСегментАдреса.Добавить("Дата прописки или регистации " + Строка(Количество));
		
		МассивУсловных.Добавить("Тип адреса " + Строка(Количество));
		МассивНеОбязательных.Добавить("Почтовый индекс " + Строка(Количество));
		МассивНеОбязательных.Добавить("Страна " + Строка(Количество));
		МассивНеОбязательных.Добавить("Регион " + Строка(Количество));
		МассивНеОбязательных.Добавить("Поле не используется 6"+ Строка(Количество));
		МассивНеОбязательных.Добавить("Район " + Строка(Количество));
		МассивОбязательных.Добавить("Местоположение " + Строка(Количество));
		МассивНеОбязательных.Добавить("Тип улицы " + Строка(Количество));
		МассивОбязательных.Добавить("Улица " + Строка(Количество));
		МассивНеОбязательных.Добавить("Номер дома " + Строка(Количество));
		МассивНеОбязательных.Добавить("Корпус " + Строка(Количество));
		МассивНеОбязательных.Добавить("Строение " + Строка(Количество));
		МассивНеОбязательных.Добавить("Квартира " + Строка(Количество));
		МассивНеОбязательных.Добавить("Статус " + Строка(Количество));
		МассивНеОбязательных.Добавить("Дата прописки или регистации " + Строка(Количество));
	КонецЦикла;
	
	МассивУсловных = УдалитьПовторяющиесяЭлементыМассива(МассивУсловных);
	МассивНеОбязательных = УдалитьПовторяющиесяЭлементыМассива(МассивНеОбязательных);
	МассивОбязательных = УдалитьПовторяющиесяЭлементыМассива(МассивОбязательных);
КонецПроцедуры

&НаКлиенте
Процедура КоличествоТелефоновПриИзменении(Элемент)
	//PN
	МассивСегментТелефона = Новый Массив;
	Если Объект.КоличествоТелефонов = 0 Тогда
		Объект.КоличествоТелефонов = 1;
	КонецЕсли;
	Для Количество = 1 по Объект.КоличествоТелефонов Цикл
		МассивСегментТелефона.Добавить("Номер " + Строка(Количество));
		МассивСегментТелефона.Добавить("Тип " + Строка(Количество));
		МассивОбязательных.Добавить("Номер " + Строка(Количество));
		МассивУсловных.Добавить("Тип " + Строка(Количество));
	КонецЦикла;	
	
	МассивУсловных = УдалитьПовторяющиесяЭлементыМассива(МассивУсловных);
	МассивНеОбязательных = УдалитьПовторяющиесяЭлементыМассива(МассивНеОбязательных);
	МассивОбязательных = УдалитьПовторяющиесяЭлементыМассива(МассивОбязательных);

КонецПроцедуры

&НаКлиенте
Процедура КаталогДляВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекФайл = Новый Файл (Элемент.ВыделенныйТекст);
	ТекКаталог = ТекФайл.Путь;      
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = "Выберите каталог хранения файлов выгрузки НБКИ.";
	Диалог.ПредварительныйПросмотр = Ложь;
	Диалог.Каталог = ТекКаталог;
	Диалог.МножественныйВыбор = Ложь;
	
	Диалог.Показать(Новый ОписаниеОповещения("КаталогДляВыгрузкиНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогДляВыгрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Объект.КаталогДляВыгрузки = Диалог.Каталог; 	
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура КаталогДляВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;        
	ЗапуститьПриложение(Объект.КаталогДляВыгрузки);
КонецПроцедуры




&НаКлиенте
Процедура ЗаполнитьОбязательность(ИмяТаблицы)
	
	
	Для Каждого стр из Объект[ИмяТаблицы] Цикл
		Найдено = Ложь;
		Для Каждого Поле из МассивОбязательных Цикл
			Если НЕ Найдено Тогда
				Если Поле = стр.Поле Тогда
					Стр.Обязательность = "M";
					Найдено = Истина;
				Конецесли;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Найдено Тогда 
			Продолжить;
		КонецЕсли;	
		
		Для Каждого Поле из МассивНеОбязательных Цикл
			Если НЕ Найдено Тогда
				Если Поле = стр.Поле Тогда
					Стр.Обязательность = "O";
					Найдено = Истина;
				Конецесли;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Найдено Тогда 
			Продолжить;
		КонецЕсли;
		
		Для Каждого Поле из МассивУсловных Цикл
			Если НЕ Найдено Тогда
				Если Поле = стр.Поле Тогда
					Стр.Обязательность = "C";
					Найдено = Истина;
				Конецесли;
				
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Найдено Тогда 
			Продолжить;
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбязательностьПолейПоУмолчанию(Команда)
	МассивИменТаблиц = Новый массив;
	МассивИменТаблиц.Добавить("ИдентифицирующийСегмент");
	МассивИменТаблиц.Добавить("СегментИмени");
	МассивИменТаблиц.Добавить("СегментПредприятия");
	МассивИменТаблиц.Добавить("СегментАдреса");
	МассивИменТаблиц.Добавить("СегментТелефона");
	МассивИменТаблиц.Добавить("СегментФактическоеИсполнениеОбязательств");
	МассивИменТаблиц.Добавить("СегментДополнительныеЗалоги");
	МассивИменТаблиц.Добавить("СегментДополнительныеПоручители");
	МассивИменТаблиц.Добавить("СегментДополнительныеБанковскиеГарантии");
	МассивИменТаблиц.Добавить("СегментСделка");
	МассивИменТаблиц.Добавить("СегментЮридическийСтатус");
	МассивИменТаблиц.Добавить("СегментБанкротствоЮрлица");
	МассивИменТаблиц.Добавить("СегментБанкротствоФизлица");
	МассивИменТаблиц.Добавить("СегментИнформационнаяЧасть");
	Для Каждого ИмяТаблицы из МассивИменТаблиц Цикл  
		ЗаполнитьОбязательность(ИмяТаблицы);
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция УдалитьПовторяющиесяЭлементыМассива(Массив) Экспорт 
	
	
	ТекущийИндекс = 0; 
	
	
	ВсегоЭлементов = Массив.Количество(); 
	
	
	Пока ТекущийИндекс < ВсегоЭлементов Цикл 
		
		
		Индекс2 = ТекущийИндекс + 1; 
		
		
		Пока Индекс2 < ВсегоЭлементов Цикл 
			
			
			Если Массив[Индекс2] = Массив[ТекущийИндекс] Тогда 
				
				
				Массив.Удалить(Индекс2); 
				
				
				ВсегоЭлементов = ВсегоЭлементов - 1; 
				
				
			Иначе 
				
				
				Индекс2 = Индекс2 + 1; 
				
				
			КонецЕсли; 
			
			
		КонецЦикла; 
		
		
		ТекущийИндекс = ТекущийИндекс + 1; 
		
		
	КонецЦикла; 
	
	
	Возврат Массив; 
	
	
КонецФункции 










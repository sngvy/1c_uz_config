
&НаКлиенте
Процедура РеквизитыПриИзменении(Элемент)
	ЗаполнитьТаблицы();
	
	Для Номер = 0 По СписокСвойствДолжника.ПолучитьЭлементы().Количество() - 1 Цикл
		Элементы.СписокСвойствДолжника.Развернуть(СписокСвойствДолжника.ПолучитьЭлементы()[Номер].ПолучитьИдентификатор(), Ложь);
	КонецЦикла;
	
	Для Номер = 0 По СписокСвойствКредитора.ПолучитьЭлементы().Количество() - 1 Цикл
		Элементы.СписокСвойствКредитора.Развернуть(СписокСвойствКредитора.ПолучитьЭлементы()[Номер].ПолучитьИдентификатор(), Ложь);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицы()
	Если Объект.Шаблон.Пустая() Тогда
		Элементы.СписокСвойствДолжника.ИзменятьСоставСтрок = Ложь;
		Элементы.СписокСвойствКредитора.ИзменятьСоставСтрок = Ложь;
		Элементы.ДолговоеОбязательство.Доступность = Ложь;
		Элементы.ИсполнительныйДокумент.Доступность = Ложь;
		Объект.Объект = Неопределено;
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Шаблон: "" должно быть заполнено", , "Объект.Шаблон");	
	ИначеЕсли Объект.Шаблон.Назначение = "Долговые обязательства" Тогда
		Элементы.СписокСвойствДолжника.ИзменятьСоставСтрок = Истина;
		Элементы.СписокСвойствКредитора.ИзменятьСоставСтрок = Истина;
		Элементы.ДолговоеОбязательство.Доступность = Истина;
		Элементы.ИсполнительныйДокумент.Доступность = Ложь;
		ИсполнительныйДокумент = Справочники.ИсполнительныеДокументы.ПустаяСсылка();
		Если ДолговоеОбязательство.Пустая() Тогда
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Долговое обязательство: "" должно быть заполнено", , "ДолговоеОбязательство");
			Возврат;	
		КонецЕсли;
		Объект.Объект = ДолговоеОбязательство;
		
		ЗаполнитьПоДолговомуОбязательству();	
		СписокСвойствЗначениеПриИзмененииСервер(СписокСвойств.Выгрузить().ВыгрузитьКолонку("Свойство"));
		ЗаполнитьПоДолговомуОбязательству();
		
	ИначеЕсли Объект.Шаблон.Назначение = "Исполнительные документы" Тогда
		Элементы.СписокСвойствДолжника.ИзменятьСоставСтрок = Ложь;
		Элементы.СписокСвойствКредитора.ИзменятьСоставСтрок = Ложь;
		Элементы.ДолговоеОбязательство.Доступность = Истина;
		Элементы.ИсполнительныйДокумент.Доступность = Истина;
		Если ДолговоеОбязательство.Пустая() Тогда
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Долговое обязательство: "" должно быть заполнено", , "ДолговоеОбязательство");
			Возврат;	
		КонецЕсли;
		Если ИсполнительныйДокумент.Пустая() Тогда
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Исполнительный документ: "" должно быть заполнено", , "ИсполнительныйДокумент");
			Возврат;	
		КонецЕсли;
		Объект.Объект = ИсполнительныйДокумент;
		
		ЗаполнитьПоИсполнительномуДокументу();
		СписокСвойствЗначениеПриИзмененииСервер(СписокСвойств.Выгрузить().ВыгрузитьКолонку("Свойство"));
		ЗаполнитьПоИсполнительномуДокументу();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДолговомуОбязательству(ТолькоСписокСвойств = Ложь)
	Запрос = Новый Запрос();
	
	//--
	Если Объект.Шаблон.ШаблоныПечатныхФорм.Количество() > 1 Тогда
		МассивШаблонов = УЭДСервер.ШаблонПечатнойФормыУЭДСервер(Объект.Шаблон, Объект,, 
				"Справочник.тсШаблоныПечатныхДокументов");	
		Запрос.УстановитьПараметр("Массив", МассивШаблонов);
	Иначе
		Запрос.УстановитьПараметр("Массив", Объект.Шаблон.ШаблоныПечатныхФорм.ВыгрузитьКолонку("ШаблонПечатнойФормы"));
	КонецЕсли;
	//--
	
	Запрос.УстановитьПараметр("Объект", Объект.Объект);
	Запрос.УстановитьПараметр("СписокФункций", СписокФункций.Выгрузить());
	Запрос.УстановитьПараметр("СписокФункцийД", СписокФункцийД.Выгрузить());
	Запрос.УстановитьПараметр("СписокФункцийК", СписокФункцийК.Выгрузить());
	
	Если Объект.Шаблон.Пустая() Тогда
		СписокСвойств.Очистить();
		СписокСвойствДолжника.ПолучитьЭлементы().Очистить();
		СписокСвойствКредитора.ПолучитьЭлементы().Очистить();		
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.Свойство,
		               |	МИНИМУМ(тсШаблоныПечатныхДокументовИспользуемыеСвойства.Обязательное) КАК Обязательное,
		               |	МИНИМУМ(тсШаблоныПечатныхДокументовИспользуемыеСвойства.Заголовок) КАК Заголовок,
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.НомерСтроки,
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.Функция
		               |ПОМЕСТИТЬ Таблица
		               |ИЗ
		               |	Справочник.тсШаблоныПечатныхДокументов.ИспользуемыеСвойства КАК тсШаблоныПечатныхДокументовИспользуемыеСвойства
		               |ГДЕ
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.Ссылка В(&Массив)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.Свойство,
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.НомерСтроки,
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.Функция
		               |
		               |ИМЕЮЩИЕ
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.Свойство.СправочникВладелец = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.Справочник_ДолговыеОбязательства)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Список.Функция,
		               |	Список.Результат
		               |ПОМЕСТИТЬ СписокФункций
		               |ИЗ
		               |	&СписокФункций КАК Список
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Таблица.Свойство,
		               |	ЕСТЬNULL(ДополнительныеСведения.Значение, ДолговыеОбязательстваДополнительныеРеквизиты.Значение) КАК Значение,
		               |	Таблица.Обязательное,
		               |	ВЫБОР
		               |		КОГДА Таблица.Заголовок = """"
		               |			ТОГДА Таблица.Свойство.Наименование
		               |		ИНАЧЕ Таблица.Заголовок
		               |	КОНЕЦ КАК Заголовок
		               |ИЗ
		               |	Таблица КАК Таблица
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		               |		ПО Таблица.Свойство = ДополнительныеСведения.Свойство
		               |			И (ДополнительныеСведения.Объект = &Объект)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДолговыеОбязательства.ДополнительныеРеквизиты КАК ДолговыеОбязательстваДополнительныеРеквизиты
		               |		ПО Таблица.Свойство = ДолговыеОбязательстваДополнительныеРеквизиты.Свойство
		               |			И (ДолговыеОбязательстваДополнительныеРеквизиты.Ссылка = &Объект)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ СписокФункций КАК СписокФункций
		               |		ПО Таблица.Функция = СписокФункций.Функция
		               |ГДЕ
		               |	ЕСТЬNULL(СписокФункций.Результат, ИСТИНА)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Таблица.НомерСтроки";
					   
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		РезультатЗапроса.Свернуть("Заголовок, Значение, Обязательное, Свойство");
		СписокСвойств.Загрузить(РезультатЗапроса);
		//СписокСвойств.Загрузить(Запрос.Выполнить().Выгрузить());
		Если ТолькоСписокСвойств Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Объект) Тогда
		СписокСвойствДолжника.ПолучитьЭлементы().Очистить();
		СписокСвойствКредитора.ПолучитьЭлементы().Очистить();
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.Свойство,
		               |	МИНИМУМ(тсШаблоныПечатныхДокументовИспользуемыеСвойства.Обязательное) КАК Обязательное,
		               |	МИНИМУМ(тсШаблоныПечатныхДокументовИспользуемыеСвойства.Заголовок) КАК Заголовок,
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.НомерСтроки,
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.Функция
		               |ПОМЕСТИТЬ Таблица
		               |ИЗ
		               |	Справочник.тсШаблоныПечатныхДокументов.ИспользуемыеСвойства КАК тсШаблоныПечатныхДокументовИспользуемыеСвойства
		               |ГДЕ
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.Ссылка В(&Массив)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.Свойство,
					   |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.НомерСтроки,
					   |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.Функция 
		               |
		               |ИМЕЮЩИЕ
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.Свойство.СправочникВладелец = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.Справочник_Контрагенты)
		               |;
					   |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТаблицаК.Значение,
					   |	ТаблицаК.ВидКонтрагента
		               |ПОМЕСТИТЬ ТаблицаК
		               |ИЗ
		               |	&Контрагенты КАК ТаблицаК
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Список.Функция,
		               |	Список.Результат
		               |ПОМЕСТИТЬ СписокФункцийД
		               |ИЗ
		               |	&СписокФункцийД КАК Список
		               |;
					   |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Список.Функция,
		               |	Список.Результат
		               |ПОМЕСТИТЬ СписокФункцийК
		               |ИЗ
		               |	&СписокФункцийК КАК Список
		               |;
					   |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЮрФизЛицоДополнительныеРеквизиты.Ссылка,
		               |	ЮрФизЛицоДополнительныеРеквизиты.Свойство,
					   |    ЮрФизЛицоДополнительныеРеквизиты.Заголовок
		               |ПОМЕСТИТЬ СвойстваТиповКА
		               |ИЗ
		               |	Справочник.ЮрФизЛицо.ДополнительныеРеквизиты КАК ЮрФизЛицоДополнительныеРеквизиты
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ЮрФизЛицоДополнительныеСведения.Ссылка,
		               |	ЮрФизЛицоДополнительныеСведения.Свойство,
					   |    ЮрФизЛицоДополнительныеСведения.Заголовок
		               |ИЗ
		               |	Справочник.ЮрФизЛицо.ДополнительныеСведения КАК ЮрФизЛицоДополнительныеСведения
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Таблица.Свойство,
		               |	ЕСТЬNULL(ДополнительныеСведения.Значение, КонтрагентыДополнительныеРеквизиты.Значение) КАК Значение,
		               |	Таблица.Обязательное,
		               |	ВЫБОР
		               |		КОГДА Таблица.Заголовок <> """"		   
		               |			ТОГДА Таблица.Заголовок 
					   |		КОГДА СвойстваТиповКА.Заголовок <> """"
		               |			ТОГДА СвойстваТиповКА.Заголовок
		               |		ИНАЧЕ Таблица.Свойство.Наименование
		               |	КОНЕЦ КАК Заголовок,
		               |	ТаблицаК.Значение КАК Должник
		               |ИЗ
		               |	ТаблицаК КАК ТаблицаК
					   |	ЛЕВОЕ СОЕДИНЕНИЕ СвойстваТиповКА КАК СвойстваТиповКА
					   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Таблица КАК Таблица
					   |		ПО СвойстваТиповКА.Свойство = Таблица.Свойство		   
					   |	ПО ТаблицаК.Значение.ЮрФизЛицо = СвойстваТиповКА.Ссылка
					   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					   |		ПО (Таблица.Свойство = ДополнительныеСведения.Свойство)
					   |		И ТаблицаК.Значение = ДополнительныеСведения.Объект
					   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
					   |		ПО (Таблица.Свойство = КонтрагентыДополнительныеРеквизиты.Свойство)
					   |		И ТаблицаК.Значение = КонтрагентыДополнительныеРеквизиты.Ссылка
					   |    ЛЕВОЕ СОЕДИНЕНИЕ СписокФункцийД КАК СписокФункций
		               |	ПО Таблица.Функция = СписокФункций.Функция
					   |ГДЕ 
					   |	ТаблицаК.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.Должник)
					   |	И ЕСТЬNULL(СписокФункций.Результат, ИСТИНА)
					   |    
					   |УПОРЯДОЧИТЬ ПО
		               |	Должник,
		               |	Таблица.НомерСтроки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Таблица.Свойство,
		               |	ЕСТЬNULL(ДополнительныеСведения.Значение, КонтрагентыДополнительныеРеквизиты.Значение) КАК Значение,
		               |	Таблица.Обязательное,
		               |	ВЫБОР
		               |		КОГДА Таблица.Заголовок <> """"		   
		               |			ТОГДА Таблица.Заголовок 
					   |		КОГДА СвойстваТиповКА.Заголовок <> """"
		               |			ТОГДА СвойстваТиповКА.Заголовок
		               |		ИНАЧЕ Таблица.Свойство.Наименование
		               |	КОНЕЦ КАК Заголовок,
		               |	ТаблицаК.Значение КАК Кредитор
		               |ИЗ
		               |	ТаблицаК КАК ТаблицаК
					   |	ЛЕВОЕ СОЕДИНЕНИЕ СвойстваТиповКА КАК СвойстваТиповКА
					   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Таблица КАК Таблица
					   |		ПО СвойстваТиповКА.Свойство = Таблица.Свойство					   
					   |	ПО ТаблицаК.Значение.ЮрФизЛицо = СвойстваТиповКА.Ссылка
					   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					   |		ПО (Таблица.Свойство = ДополнительныеСведения.Свойство)
					   |		И ТаблицаК.Значение = ДополнительныеСведения.Объект
					   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
					   |		ПО (Таблица.Свойство = КонтрагентыДополнительныеРеквизиты.Свойство)
					   |		И ТаблицаК.Значение = КонтрагентыДополнительныеРеквизиты.Ссылка
					   |    ЛЕВОЕ СОЕДИНЕНИЕ СписокФункцийК КАК СписокФункций
		               |	ПО Таблица.Функция = СписокФункций.Функция
		               |ГДЕ 
					   |	ТаблицаК.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.Кредитор)
					   |	И ЕСТЬNULL(СписокФункций.Результат, ИСТИНА)
					   |
		               |УПОРЯДОЧИТЬ ПО
		               |	Кредитор,
		               |	Таблица.НомерСтроки";
					   // ПО ТаблицаК.Значение.ЮрФизЛицо = СвойстваТиповД.Ссылка
		Запрос.УстановитьПараметр("Контрагенты", Объект.Объект.Контрагенты.Выгрузить());
		Выборка = Запрос.ВыполнитьПакет();
		
		СписокСвойствДолжника.ПолучитьЭлементы().Очистить();
		СписокСвойствКредитора.ПолучитьЭлементы().Очистить();
		
		Результат_Выборка5 = Выборка[5].Выгрузить();
		Результат_Выборка5.Свернуть("Должник, Заголовок, Значение, Обязательное, Свойство");
		
		//Результат = Выборка[5].Выбрать();
		
		ТекКА = Неопределено;
		ТекЭлемент = Неопределено;
		//Пока Результат.Следующий() Цикл
		Для Каждого Результат Из Результат_Выборка5 Цикл
			Если ТекКА <> Результат.Должник Тогда
				ТекКА = Результат.Должник;
				
				Нов = СписокСвойствДолжника.ПолучитьЭлементы().Добавить();
				Нов.Свойство = Результат.Должник;
				Нов.Заголовок = Результат.Должник;
				ТекЭлемент = Нов.ПолучитьЭлементы();
				
				Набор = РегистрыСведений.НастройкиПечатьУЭД.СоздатьМенеджерЗаписи();
				Набор.Объект = Объект.Объект;
				Набор.ЭтоДолжник = Истина;
				Набор.Контрагент = Результат.Должник;
				Набор.Прочитать();    
				
				Нов.Значение = Набор.ТипКонтрагента;		
			КонецЕсли;
			
			Если Результат.Свойство <> Null Тогда
				Нов = ТекЭлемент.Добавить();
				Нов.Свойство = Результат.Свойство;
				Нов.Заголовок = Результат.Заголовок;
				Нов.Значение = Результат.Значение;
				Нов.ФункцияОтказа = Результат.Обязательное;		
				Нов.Отказ = ?(Нов.ФункцияОтказа.Пустая(), Ложь, ВыполнитьФункцию(Нов.ФункцияОтказа.Функция, Нов.Значение, ТекКА));
			КонецЕсли;
		КонецЦикла;
		
		//--Результат = Выборка[6].Выбрать();
		Результат_Выборка6 = Выборка[6].Выгрузить();
		Результат_Выборка6.Свернуть("Заголовок, Значение, Кредитор, Обязательное, Свойство");
		
		ТекКА = Неопределено;
		ТекЭлемент = Неопределено;
		Для Каждого Результат  Из Результат_Выборка6 Цикл
		//--Пока Результат.Следующий() Цикл
			Если ТекКА <> Результат.Кредитор Тогда
				ТекКА = Результат.Кредитор;
				
				Нов = СписокСвойствКредитора.ПолучитьЭлементы().Добавить();
				Нов.Свойство = Результат.Кредитор;
				Нов.Заголовок = Результат.Кредитор;
				ТекЭлемент = Нов.ПолучитьЭлементы();
				
				Набор = РегистрыСведений.НастройкиПечатьУЭД.СоздатьМенеджерЗаписи();
				Набор.Объект = Объект.Объект;
				Набор.ЭтоДолжник = Ложь;
				Набор.Контрагент = Результат.Кредитор;
				Набор.Прочитать();    
				
				Нов.Значение = Набор.ТипКонтрагента;
			КонецЕсли;
			
			Если Результат.Свойство <> Null Тогда
				Нов = ТекЭлемент.Добавить();
				Нов.Свойство = Результат.Свойство;
				Нов.Заголовок = Результат.Заголовок;
				Нов.Значение = Результат.Значение;
				Нов.ФункцияОтказа = Результат.Обязательное;		
				Нов.Отказ = ?(Нов.ФункцияОтказа.Пустая(), Ложь, ВыполнитьФункцию(Нов.ФункцияОтказа.Функция, Нов.Значение, ТекКА));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоИсполнительномуДокументу(ТолькоСписокСвойств = Ложь)
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Массив", Объект.Шаблон.ШаблоныПечатныхФорм.ВыгрузитьКолонку("ШаблонПечатнойФормы"));
	Запрос.УстановитьПараметр("Объект", Объект.Объект);
	Запрос.УстановитьПараметр("СписокФункций", СписокФункций.Выгрузить());
	Запрос.УстановитьПараметр("СписокФункцийД", СписокФункцийД.Выгрузить());
	Запрос.УстановитьПараметр("СписокФункцийК", СписокФункцийК.Выгрузить());
	
	Если Объект.Шаблон.Пустая() Тогда
		СписокСвойств.Очистить();
		СписокСвойствДолжника.ПолучитьЭлементы().Очистить();
		СписокСвойствКредитора.ПолучитьЭлементы().Очистить();		
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.Свойство,
		               |	МИНИМУМ(тсШаблоныПечатныхДокументовИспользуемыеСвойства.Обязательное) КАК Обязательное,
		               |	МИНИМУМ(тсШаблоныПечатныхДокументовИспользуемыеСвойства.Заголовок) КАК Заголовок,
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.НомерСтроки,
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.Функция
		               |ПОМЕСТИТЬ Таблица
		               |ИЗ
		               |	Справочник.тсШаблоныПечатныхДокументов.ИспользуемыеСвойства КАК тсШаблоныПечатныхДокументовИспользуемыеСвойства
		               |ГДЕ
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.Ссылка В(&Массив)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.Свойство,
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.НомерСтроки,
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.Функция
		               |
		               |ИМЕЮЩИЕ
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.Свойство.СправочникВладелец = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.Справочник_ИсполнительныеДокументы)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Список.Функция,
		               |	Список.Результат
		               |ПОМЕСТИТЬ СписокФункций
		               |ИЗ
		               |	&СписокФункций КАК Список
		               |;
					   |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Таблица.Свойство,
		               |	ЕСТЬNULL(ДополнительныеСведения.Значение, ИсполнительныеДокументыДополнительныеРеквизиты.Значение) КАК Значение,
		               |	Таблица.Обязательное,
		               |	ВЫБОР
		               |		КОГДА Таблица.Заголовок = """"
		               |			ТОГДА Таблица.Свойство.Наименование
		               |		ИНАЧЕ Таблица.Заголовок
		               |	КОНЕЦ КАК Заголовок
		               |ИЗ
		               |	Таблица КАК Таблица
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		               |		ПО Таблица.Свойство = ДополнительныеСведения.Свойство
		               |			И (ДополнительныеСведения.Объект = &Объект)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсполнительныеДокументы.ДополнительныеРеквизиты КАК ИсполнительныеДокументыДополнительныеРеквизиты
		               |		ПО Таблица.Свойство = ИсполнительныеДокументыДополнительныеРеквизиты.Свойство
		               |			И (ИсполнительныеДокументыДополнительныеРеквизиты.Ссылка = &Объект)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ СписокФункций КАК СписокФункций
		               |		ПО Таблица.Функция = СписокФункций.Функция
		               |ГДЕ
		               |	ЕСТЬNULL(СписокФункций.Результат, ИСТИНА)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Таблица.НомерСтроки";
		СписокСвойств.Загрузить(Запрос.Выполнить().Выгрузить());
		Если ТолькоСписокСвойств Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Объект) Тогда
		СписокСвойствДолжника.ПолучитьЭлементы().Очистить();
		СписокСвойствКредитора.ПолучитьЭлементы().Очистить();
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.Свойство,
		               |	МИНИМУМ(тсШаблоныПечатныхДокументовИспользуемыеСвойства.Обязательное) КАК Обязательное,
		               |	МИНИМУМ(тсШаблоныПечатныхДокументовИспользуемыеСвойства.Заголовок) КАК Заголовок,
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.НомерСтроки,
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.Функция
		               |ПОМЕСТИТЬ Таблица
		               |ИЗ
		               |	Справочник.тсШаблоныПечатныхДокументов.ИспользуемыеСвойства КАК тсШаблоныПечатныхДокументовИспользуемыеСвойства
		               |ГДЕ
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.Ссылка В(&Массив)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.Свойство,
					   |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.НомерСтроки,
					   |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.Функция
		               |
		               |ИМЕЮЩИЕ
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.Свойство.СправочникВладелец = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.Справочник_Контрагенты)
		               |;
					   |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТаблицаК.Значение,
					   |	ТаблицаК.ВидКонтрагента
		               |ПОМЕСТИТЬ ТаблицаК
		               |ИЗ
		               |	&Контрагенты КАК ТаблицаК
		               |;
					   |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Список.Функция,
		               |	Список.Результат
		               |ПОМЕСТИТЬ СписокФункцийД
		               |ИЗ
		               |	&СписокФункцийД КАК Список
		               |;
					   |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Список.Функция,
		               |	Список.Результат
		               |ПОМЕСТИТЬ СписокФункцийК
		               |ИЗ
		               |	&СписокФункцийК КАК Список
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЮрФизЛицоДополнительныеРеквизиты.Ссылка,
		               |	ЮрФизЛицоДополнительныеРеквизиты.Свойство,
					   |    ЮрФизЛицоДополнительныеРеквизиты.Заголовок
		               |ПОМЕСТИТЬ СвойстваТиповКА
		               |ИЗ
		               |	Справочник.ЮрФизЛицо.ДополнительныеРеквизиты КАК ЮрФизЛицоДополнительныеРеквизиты
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ЮрФизЛицоДополнительныеСведения.Ссылка,
		               |	ЮрФизЛицоДополнительныеСведения.Свойство,
					   |    ЮрФизЛицоДополнительныеСведения.Заголовок
		               |ИЗ
		               |	Справочник.ЮрФизЛицо.ДополнительныеСведения КАК ЮрФизЛицоДополнительныеСведения
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Таблица.Свойство,
		               |	ЕСТЬNULL(ДополнительныеСведения.Значение, КонтрагентыДополнительныеРеквизиты.Значение) КАК Значение,
		               |	Таблица.Обязательное,
		               |	ВЫБОР
		               |		КОГДА Таблица.Заголовок <> """"		   
		               |			ТОГДА Таблица.Заголовок 
					   |		КОГДА СвойстваТиповКА.Заголовок <> """"
		               |			ТОГДА СвойстваТиповКА.Заголовок
		               |		ИНАЧЕ Таблица.Свойство.Наименование
		               |	КОНЕЦ КАК Заголовок,
		               |	ТаблицаК.Значение КАК Должник
		               |ИЗ
		               |	ТаблицаК КАК ТаблицаК
					   |	ЛЕВОЕ СОЕДИНЕНИЕ СвойстваТиповКА КАК СвойстваТиповКА
					   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Таблица КАК Таблица
					   |		ПО СвойстваТиповКА.Свойство = Таблица.Свойство		   
					   |	ПО ТаблицаК.Значение.ЮрФизЛицо = СвойстваТиповКА.Ссылка
					   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					   |		ПО (Таблица.Свойство = ДополнительныеСведения.Свойство)
					   |		И ТаблицаК.Значение = ДополнительныеСведения.Объект
					   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
					   |		ПО (Таблица.Свойство = КонтрагентыДополнительныеРеквизиты.Свойство)
					   |		И ТаблицаК.Значение = КонтрагентыДополнительныеРеквизиты.Ссылка
					   |    ЛЕВОЕ СОЕДИНЕНИЕ СписокФункцийД КАК СписокФункций
		               |	ПО Таблица.Функция = СписокФункций.Функция
					   |ГДЕ 
					   |	ТаблицаК.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.Должник)
					   |	И ЕСТЬNULL(СписокФункций.Результат, ИСТИНА)
					   |    
					   |УПОРЯДОЧИТЬ ПО
					   |	Должник,
		               |	Таблица.НомерСтроки
					   |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Таблица.Свойство,
		               |	ЕСТЬNULL(ДополнительныеСведения.Значение, КонтрагентыДополнительныеРеквизиты.Значение) КАК Значение,
		               |	Таблица.Обязательное,
		               |	ВЫБОР
		               |		КОГДА Таблица.Заголовок <> """"		   
		               |			ТОГДА Таблица.Заголовок 
					   |		КОГДА СвойстваТиповКА.Заголовок <> """"
		               |			ТОГДА СвойстваТиповКА.Заголовок
		               |		ИНАЧЕ Таблица.Свойство.Наименование
		               |	КОНЕЦ КАК Заголовок,
		               |	ТаблицаК.Значение КАК Кредитор
		               |ИЗ
		               |	ТаблицаК КАК ТаблицаК
					   |	ЛЕВОЕ СОЕДИНЕНИЕ СвойстваТиповКА КАК СвойстваТиповКА
					   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Таблица КАК Таблица
					   |		ПО СвойстваТиповКА.Свойство = Таблица.Свойство		   
					   |	ПО ТаблицаК.Значение.ЮрФизЛицо = СвойстваТиповКА.Ссылка
					   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					   |		ПО (Таблица.Свойство = ДополнительныеСведения.Свойство)
					   |		И ТаблицаК.Значение = ДополнительныеСведения.Объект
					   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
					   |		ПО (Таблица.Свойство = КонтрагентыДополнительныеРеквизиты.Свойство)
					   |		И ТаблицаК.Значение = КонтрагентыДополнительныеРеквизиты.Ссылка
					   |    ЛЕВОЕ СОЕДИНЕНИЕ СписокФункцийК КАК СписокФункций
		               |	ПО Таблица.Функция = СписокФункций.Функция
					   |ГДЕ 
					   |	ТаблицаК.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.Контрагент)
					   |	И ЕСТЬNULL(СписокФункций.Результат, ИСТИНА)
					   |    
					   |УПОРЯДОЧИТЬ ПО
					   |	Кредитор,
		               |	Таблица.НомерСтроки";
					   // ПО ТаблицаК.Значение.ЮрФизЛицо = СвойстваТиповД.Ссылка
		ТЧ = Объект.Объект.Владелец.Контрагенты.Выгрузить();
		ТЧ.Очистить();
		Нов = ТЧ.Добавить();
		Нов.Значение = Объект.Объект.Должник;
		Нов.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Должник;
		Нов = ТЧ.Добавить();
		Нов.Значение = Объект.Объект.Взыскатель;
		Нов.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Контрагент;

		Запрос.УстановитьПараметр("Контрагенты", ТЧ);
		Выборка = Запрос.ВыполнитьПакет();
		
		СписокСвойствДолжника.ПолучитьЭлементы().Очистить();
		СписокСвойствКредитора.ПолучитьЭлементы().Очистить();
		
		Результат = Выборка[5].Выбрать();
		ТекКА = Неопределено;
		ТекЭлемент = Неопределено;
		Пока Результат.Следующий() Цикл
			Если ТекКА <> Результат.Должник Тогда
				ТекКА = Результат.Должник;
				
				Нов = СписокСвойствДолжника.ПолучитьЭлементы().Добавить();
				Нов.Свойство = Результат.Должник;
				Нов.Заголовок = Результат.Должник;
				ТекЭлемент = Нов.ПолучитьЭлементы();
				
				Набор = РегистрыСведений.НастройкиПечатьУЭД.СоздатьМенеджерЗаписи();
				Набор.Объект = Объект.Объект;
				Набор.ЭтоДолжник = Истина;
				Набор.Контрагент = Результат.Должник;
				Набор.Прочитать();    
				
				Нов.Значение = Набор.ТипКонтрагента;		
			КонецЕсли;
			
			Если Результат.Свойство <> Null Тогда
				Нов = ТекЭлемент.Добавить();
				Нов.Свойство = Результат.Свойство;
				Нов.Заголовок = Результат.Заголовок;
				Нов.Значение = ПолучитьЗначениеИзГруппыСвойств(ТекКА, Результат.Свойство, Результат.Значение);
				Нов.ФункцияОтказа = Результат.Обязательное;		
				Нов.Отказ = ?(Нов.ФункцияОтказа.Пустая(), Ложь, ВыполнитьФункцию(Нов.ФункцияОтказа.Функция, Нов.Значение, ТекКА));
			КонецЕсли;
		КонецЦикла;
		
		Результат = Выборка[6].Выбрать();
		ТекКА = Неопределено;
		ТекЭлемент = Неопределено;
		Пока Результат.Следующий() Цикл
			Если ТекКА <> Результат.Кредитор Тогда
				ТекКА = Результат.Кредитор;
				
				Нов = СписокСвойствКредитора.ПолучитьЭлементы().Добавить();
				Нов.Свойство = Результат.Кредитор;
				Нов.Заголовок = Результат.Кредитор;
				ТекЭлемент = Нов.ПолучитьЭлементы();
				
				Набор = РегистрыСведений.НастройкиПечатьУЭД.СоздатьМенеджерЗаписи();
				Набор.Объект = Объект.Объект;
				Набор.ЭтоДолжник = Истина;
				Набор.Контрагент = Результат.Кредитор;
				Набор.Прочитать();    
				
				Нов.Значение = Набор.ТипКонтрагента;		
			КонецЕсли;
			
			Если Результат.Свойство <> Null Тогда
				Нов = ТекЭлемент.Добавить();
				Нов.Свойство = Результат.Свойство;
				Нов.Заголовок = Результат.Заголовок;
				Нов.Значение = ПолучитьЗначениеИзГруппыСвойств(ТекКА, Результат.Свойство, Результат.Значение);
				Нов.ФункцияОтказа = Результат.Обязательное;		
				Нов.Отказ = ?(Нов.ФункцияОтказа.Пустая(), Ложь, ВыполнитьФункцию(Нов.ФункцияОтказа.Функция, Нов.Значение, ТекКА));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДанные(Команда)
	Если Модифицированность Тогда 
		ЗаписатьДанныеСервер();   
	КонецЕсли;
	Модифицированность = Ложь;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеСервер(Отказ = Неопределено)
	Если ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда
		ЗаписатьДанныеСерверДО(Отказ);
	Иначе
		ЗаписатьДанныеСерверИД(Отказ);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеСерверДО(Отказ)
	//Запись доп свойств и реквизитов ДО
	ОбъектДО = Объект.Объект.ПолучитьОбъект();
	
	//Очистка
	Строки = ОбъектДО.Контрагенты.НайтиСтроки(Новый Структура("ВидКонтрагента", Перечисления.ВидыКонтрагентов.Должник));
	Для Каждого Элемент Из Строки Цикл
		ОбъектДО.Контрагенты.Удалить(Элемент);
	КонецЦикла;
	Строки = ОбъектДО.Контрагенты.НайтиСтроки(Новый Структура("ВидКонтрагента", Перечисления.ВидыКонтрагентов.Кредитор));
	Для Каждого Элемент Из Строки Цикл
		ОбъектДО.Контрагенты.Удалить(Элемент);
	КонецЦикла;	
	
	//Добавление
	Для Каждого Элемент Из СписокСвойствДолжника.ПолучитьЭлементы() Цикл
		Если ЗначениеЗаполнено(Элемент.Свойство) Тогда
			Нов = ОбъектДО.Контрагенты.Добавить();
			Нов.Значение = Элемент.Свойство;
			Нов.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Должник;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Элемент Из СписокСвойствКредитора.ПолучитьЭлементы() Цикл
		Если ЗначениеЗаполнено(Элемент.Свойство) Тогда
		    Нов = ОбъектДО.Контрагенты.Добавить();
			Нов.Значение = Элемент.Свойство;
			Нов.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Кредитор;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из СписокСвойств Цикл
		Если Элемент.Свойство.ЭтоДополнительноеСведение Тогда
			Если ЗначениеЗаполнено(Элемент.Значение) Тогда
				Менеджер = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
				Менеджер.Объект = Объект.Объект;
				Менеджер.Свойство = Элемент.Свойство;
				Менеджер.Значение = Элемент.Значение;
				Менеджер.Записать();
			Иначе
				Менеджер = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
				Менеджер.Объект = Объект.Объект;
				Менеджер.Свойство = Элемент.Свойство;
				Менеджер.Прочитать();
				Если Не Менеджер.Свойство.Пустая() Тогда
					Менеджер.Удалить();
				КонецЕсли;
			КонецЕсли;
		Иначе
			Строки = ОбъектДО.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Элемент.Свойство));
			Если ЗначениеЗаполнено(Элемент.Значение) Тогда
				Если Строки.Количество() = 0 Тогда
					Стр = ОбъектДО.ДополнительныеРеквизиты.Добавить();
					Стр.Свойство = Элемент.Свойство; 
				Иначе
					Стр = Строки[0];
				КонецЕсли;
                Стр.Значение = Элемент.Значение;
			ИначеЕсли Строки.Количество() > 0 Тогда				
				ОбъектДО.ДополнительныеРеквизиты.Удалить(Строки[0]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ОбъектДО.Записать();
	
	//Записать доп реквизиты и сведения КА
	Для Каждого Элемент Из СписокСвойствДолжника.ПолучитьЭлементы() Цикл
		ОбъектКА = Неопределено;
		Если Не ЗначениеЗаполнено(Элемент.Свойство) Тогда
			Продолжить;
		КонецЕсли;
						
		Для Каждого ЭлСвойство Из Элемент.ПолучитьЭлементы() Цикл		
			Если ЭлСвойство.Свойство.ЭтоДополнительноеСведение Тогда
				Если ЗначениеЗаполнено(ЭлСвойство.Значение) Тогда
					Менеджер = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
					Менеджер.Объект = Элемент.Свойство;
					Менеджер.Свойство = ЭлСвойство.Свойство;
					Менеджер.Значение = ЭлСвойство.Значение;
					Менеджер.Записать();
				Иначе
					Менеджер = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
					Менеджер.Объект = Элемент.Свойство;
					Менеджер.Свойство = ЭлСвойство.Свойство;
					Менеджер.Прочитать();
					Если Не Менеджер.Свойство.Пустая() Тогда
						Менеджер.Удалить();
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если ОбъектКА = Неопределено Тогда
					ОбъектКА = Элемент.Свойство.ПолучитьОбъект();
				КонецЕсли;
				Строки = ОбъектКА.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ЭлСвойство.Свойство));
				Если ЗначениеЗаполнено(ЭлСвойство.Значение) Тогда
					Если Строки.Количество() = 0 Тогда
						Стр = ОбъектКА.ДополнительныеРеквизиты.Добавить();
						Стр.Свойство = ЭлСвойство.Свойство; 
					Иначе
						Стр = Строки[0];
					КонецЕсли;
	                Стр.Значение = ЭлСвойство.Значение;
				ИначеЕсли Строки.Количество() > 0 Тогда				
					ОбъектКА.ДополнительныеРеквизиты.Удалить(Строки[0]);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ОбъектКА <> Неопределено Тогда
			ОбъектКА.Записать();
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из СписокСвойствКредитора.ПолучитьЭлементы() Цикл
		ОбъектКА = Неопределено;
		Если Не ЗначениеЗаполнено(Элемент.Свойство) Тогда
			Продолжить;
		КонецЕсли;
						
		Для Каждого ЭлСвойство Из Элемент.ПолучитьЭлементы() Цикл		
			Если ЭлСвойство.Свойство.ЭтоДополнительноеСведение Тогда
				Если ЗначениеЗаполнено(ЭлСвойство.Значение) Тогда
					Менеджер = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
					Менеджер.Объект = Элемент.Свойство;
					Менеджер.Свойство = ЭлСвойство.Свойство;
					Менеджер.Значение = ЭлСвойство.Значение;
					Менеджер.Записать();
				Иначе
					Менеджер = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
					Менеджер.Объект = Элемент.Свойство;
					Менеджер.Свойство = ЭлСвойство.Свойство;
					Менеджер.Прочитать();
					Если Не Менеджер.Свойство.Пустая() Тогда
						Менеджер.Удалить();
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если ОбъектКА = Неопределено Тогда
					ОбъектКА = Элемент.Свойство.ПолучитьОбъект();
				КонецЕсли;
				Строки = ОбъектКА.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ЭлСвойство.Свойство));
				Если ЗначениеЗаполнено(ЭлСвойство.Значение) Тогда
					Если Строки.Количество() = 0 Тогда
						Стр = ОбъектКА.ДополнительныеРеквизиты.Добавить();
						Стр.Свойство = ЭлСвойство.Свойство; 
					Иначе
						Стр = Строки[0];
					КонецЕсли;
	                Стр.Значение = ЭлСвойство.Значение;
				ИначеЕсли Строки.Количество() > 0 Тогда				
					ОбъектКА.ДополнительныеРеквизиты.Удалить(Строки[0]);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ОбъектКА <> Неопределено Тогда
			ОбъектКА.Записать();
		КонецЕсли;
	КонецЦикла;
	
	//Очистка настроек в РС
	Набор = РегистрыСведений.НастройкиПечатьУЭД.СоздатьНаборЗаписей();
	Набор.Отбор.Объект.Установить(Объект.Объект);
	Набор.Записать();
	
	//Записать настройки в РС
	Для Каждого Элемент Из СписокСвойствДолжника.ПолучитьЭлементы() Цикл
		Если ЗначениеЗаполнено(Элемент.Свойство) И ЗначениеЗаполнено(Элемент.Значение) Тогда
			Набор = РегистрыСведений.НастройкиПечатьУЭД.СоздатьМенеджерЗаписи();
			Набор.Объект = Объект.Объект;
			Набор.ЭтоДолжник = Истина;
			Набор.Контрагент = Элемент.Свойство;
			Набор.ТипКонтрагента = Элемент.Значение;
			Набор.Записать();
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из СписокСвойствКредитора.ПолучитьЭлементы() Цикл
		Если ЗначениеЗаполнено(Элемент.Свойство) И ЗначениеЗаполнено(Элемент.Значение) Тогда
			Набор = РегистрыСведений.НастройкиПечатьУЭД.СоздатьМенеджерЗаписи();
			Набор.Объект = Объект.Объект;
			Набор.ЭтоДолжник = Ложь;
			Набор.Контрагент = Элемент.Свойство;
			Набор.ТипКонтрагента = Элемент.Значение;
			Набор.Записать();
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеСерверИД(Отказ)
	//Запись доп свойств и реквизитов ДО
	Если Не ЗначениеЗаполнено(Объект.Объект) Тогда
		Возврат;
	КонецЕсли;
	ОбъектДО = Объект.Объект.ПолучитьОбъект();
	
	//	
	Для Каждого Элемент Из СписокСвойств Цикл
		Если Элемент.Свойство.ЭтоДополнительноеСведение Тогда
			Если ЗначениеЗаполнено(Элемент.Значение) Тогда
				Менеджер = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
				Менеджер.Объект = Объект.Объект;
				Менеджер.Свойство = Элемент.Свойство;
				Менеджер.Значение = Элемент.Значение;
				Менеджер.Записать();
			Иначе
				Менеджер = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
				Менеджер.Объект = Объект.Объект;
				Менеджер.Свойство = Элемент.Свойство;
				Менеджер.Прочитать();
				Если Не Менеджер.Свойство.Пустая() Тогда
					Менеджер.Удалить();
				КонецЕсли;
			КонецЕсли;
		Иначе
			Строки = ОбъектДО.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Элемент.Свойство));
			Если ЗначениеЗаполнено(Элемент.Значение) Тогда
				Если Строки.Количество() = 0 Тогда
					Стр = ОбъектДО.ДополнительныеРеквизиты.Добавить();
					Стр.Свойство = Элемент.Свойство; 
				Иначе
					Стр = Строки[0];
				КонецЕсли;
                Стр.Значение = Элемент.Значение;
			ИначеЕсли Строки.Количество() > 0 Тогда				
				ОбъектДО.ДополнительныеРеквизиты.Удалить(Строки[0]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ОбъектДО.Записать();
	
	//Записать доп реквизиты и сведения КА
	Для Каждого Элемент Из СписокСвойствДолжника.ПолучитьЭлементы() Цикл
		ОбъектКА = Неопределено;
		Если Не ЗначениеЗаполнено(Элемент.Свойство) Тогда
			Продолжить;
		КонецЕсли;
						
		Для Каждого ЭлСвойство Из Элемент.ПолучитьЭлементы() Цикл		
			Если ЭлСвойство.Свойство.ЭтоДополнительноеСведение Тогда
				Если ЗначениеЗаполнено(ЭлСвойство.Значение) Тогда
					Менеджер = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
					Менеджер.Объект = Элемент.Свойство;
					Менеджер.Свойство = ЭлСвойство.Свойство;
					Менеджер.Значение = ЭлСвойство.Значение;
					Менеджер.Записать();
					
					ЗаписатьЗначениеВГруппуСвойств(ОбъектКА, Менеджер.Объект, Менеджер.Свойство, Менеджер.Значение);
				Иначе
					Менеджер = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
					Менеджер.Объект = Элемент.Свойство;
					Менеджер.Свойство = ЭлСвойство.Свойство;
					Менеджер.Прочитать();
					Если Не Менеджер.Свойство.Пустая() Тогда
						Менеджер.Удалить();
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если ОбъектКА = Неопределено Тогда
					ОбъектКА = Элемент.Свойство.ПолучитьОбъект();
				КонецЕсли;
				Строки = ОбъектКА.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ЭлСвойство.Свойство));
				Если ЗначениеЗаполнено(ЭлСвойство.Значение) Тогда
					Если Строки.Количество() = 0 Тогда
						Стр = ОбъектКА.ДополнительныеРеквизиты.Добавить();
						Стр.Свойство = ЭлСвойство.Свойство; 
					Иначе
						Стр = Строки[0];
					КонецЕсли;
	                Стр.Значение = ЭлСвойство.Значение;
					
					ЗаписатьЗначениеВГруппуСвойств(ОбъектКА, Элемент.Свойство, ЭлСвойство.Свойство, ЭлСвойство.Значение);
				ИначеЕсли Строки.Количество() > 0 Тогда				
					ОбъектКА.ДополнительныеРеквизиты.Удалить(Строки[0]);			
				КонецЕсли;
			КонецЕсли;
			
			Если ЭлСвойство.Отказ И Отказ = Ложь Тогда
				Отказ = Истина;
				Сообщить("Не все обязательные реквизиты заполнены!");
			КонецЕсли;
		КонецЦикла;
		
		Если ОбъектКА <> Неопределено Тогда
			ОбъектКА.Записать();
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из СписокСвойствКредитора.ПолучитьЭлементы() Цикл
		ОбъектКА = Неопределено;
		Если Не ЗначениеЗаполнено(Элемент.Свойство) Тогда
			Продолжить;
		КонецЕсли;
						
		Для Каждого ЭлСвойство Из Элемент.ПолучитьЭлементы() Цикл		
			Если ЭлСвойство.Свойство.ЭтоДополнительноеСведение Тогда
				Если ЗначениеЗаполнено(ЭлСвойство.Значение) Тогда
					Менеджер = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
					Менеджер.Объект = Элемент.Свойство;
					Менеджер.Свойство = ЭлСвойство.Свойство;
					Менеджер.Значение = ЭлСвойство.Значение;
					Менеджер.Записать();
					
					ЗаписатьЗначениеВГруппуСвойств(ОбъектКА, Менеджер.Объект, Менеджер.Свойство, Менеджер.Значение);
				Иначе
					Менеджер = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
					Менеджер.Объект = Элемент.Свойство;
					Менеджер.Свойство = ЭлСвойство.Свойство;
					Менеджер.Прочитать();
					Если Не Менеджер.Свойство.Пустая() Тогда
						Менеджер.Удалить();
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если ОбъектКА = Неопределено Тогда
					ОбъектКА = Элемент.Свойство.ПолучитьОбъект();
				КонецЕсли;
				Строки = ОбъектКА.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ЭлСвойство.Свойство));
				Если ЗначениеЗаполнено(ЭлСвойство.Значение) Тогда
					Если Строки.Количество() = 0 Тогда
						Стр = ОбъектКА.ДополнительныеРеквизиты.Добавить();
						Стр.Свойство = ЭлСвойство.Свойство; 
					Иначе
						Стр = Строки[0];
					КонецЕсли;
	                Стр.Значение = ЭлСвойство.Значение;
					
					ЗаписатьЗначениеВГруппуСвойств(ОбъектКА, Элемент.Свойство, ЭлСвойство.Свойство, ЭлСвойство.Значение);
				ИначеЕсли Строки.Количество() > 0 Тогда				
					ОбъектКА.ДополнительныеРеквизиты.Удалить(Строки[0]);	
				КонецЕсли;
			КонецЕсли;
			
			Если ЭлСвойство.Отказ И Отказ = Ложь Тогда
				Отказ = Истина;
				Сообщить("Не все обязательные реквизиты заполнены!");
			КонецЕсли;
		КонецЦикла;
		
		Если ОбъектКА <> Неопределено Тогда
			ОбъектКА.Записать();
		КонецЕсли;
	КонецЦикла;		
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеИзГруппыСвойств(ОбъектКА, Свойство, Значение)
	Если Свойство.Группа > 0 Тогда
		СвойствоГлавное = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоКоду(
				Прав("00000000" + Формат(Свойство.Группа, "ЧН=; ЧГ="), 9));
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	КонтрагентыДополнительныеРеквизиты.Значение
		                      |ИЗ
		                      |	Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
		                      |ГДЕ
		                      |	КонтрагентыДополнительныеРеквизиты.Ссылка = &Объект
		                      |	И КонтрагентыДополнительныеРеквизиты.Свойство = &Свойство
		                      |
		                      |ОБЪЕДИНИТЬ ВСЕ
		                      |
		                      |ВЫБРАТЬ
		                      |	ДополнительныеСведения.Значение
		                      |ИЗ
		                      |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		                      |ГДЕ
		                      |	ДополнительныеСведения.Объект = &Объект
		                      |	И ДополнительныеСведения.Свойство = &Свойство");
		Запрос.УстановитьПараметр("Объект", ОбъектКА);
		Запрос.УстановитьПараметр("Свойство", СвойствоГлавное);
		Результат = Запрос.Выполнить().Выбрать();
		Возврат ?(Результат.Следующий(), Результат.Значение, Значение);
	КонецЕсли;
	
	Возврат Значение;
КонецФункции

&НаСервере
Процедура ЗаписатьЗначениеВГруппуСвойств(ОбъектКАОбъект, ОбъектКА, Свойство, Значение)
	Если Свойство.Группа > 0 Тогда
		СвойствоГлавное = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоКоду(
				Прав("00000000" + Формат(Свойство.Группа, "ЧН=; ЧГ="), 9));
							
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	КонтрагентыДополнительныеРеквизиты.Значение
		                      |ИЗ
		                      |	Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
		                      |ГДЕ
		                      |	КонтрагентыДополнительныеРеквизиты.Ссылка = &Объект
		                      |	И КонтрагентыДополнительныеРеквизиты.Свойство = &Свойство
		                      |
		                      |ОБЪЕДИНИТЬ ВСЕ
		                      |
		                      |ВЫБРАТЬ
		                      |	ДополнительныеСведения.Значение
		                      |ИЗ
		                      |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		                      |ГДЕ
		                      |	ДополнительныеСведения.Объект = &Объект
		                      |	И ДополнительныеСведения.Свойство = &Свойство");
		Запрос.УстановитьПараметр("Объект", ОбъектКА);
		Запрос.УстановитьПараметр("Свойство", СвойствоГлавное);
		Если Не Запрос.Выполнить().Выбрать().Следующий() Тогда
			Если СвойствоГлавное.ЭтоДополнительноеСведение Тогда
				Набор = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
				Набор.Объект = ОбъектКА;
				Набор.Свойство = СвойствоГлавное;
				Набор.Значение = Значение;
				Попытка
					Набор.Записать();
				Исключение
				КонецПопытки;
			Иначе
				Если ОбъектКАОбъект = Неопределено Тогда
					ОбъектКАОбъект = ОбъектКА.ПолучитьОбъект();
				КонецЕсли;
				Нов = ОбъектКАОбъект.ДополнительныеРеквизиты.Добавить();
				Нов.Свойство = СвойствоГлавное;
				Нов.Значение = Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокСвойствПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Элементы.СписокСвойствЗначение.ОграничениеТипа = ОбъектыСервер.РазыменоватьСсылку(
			Элементы.СписокСвойств.ТекущиеДанные.Свойство, "ТипЗначения");
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСписокВыбора(ТекОбъект,ТекНаименование)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Различные
				   |	ДополнительныеСведения.Значение
				   |ИЗ
				   |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
				   |ГДЕ
				   |	ДополнительныеСведения.Свойство.Наименование = &ТекНаименование
				   |	И ДополнительныеСведения.Объект = &Объект";
	Запрос.УстановитьПараметр("Объект",ТекОбъект);
	Запрос.УстановитьПараметр("ТекНаименование",ТекНаименование);
	Выборка = Запрос.Выполнить().Выбрать();
	СписокВыбора = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Значение);
	КонецЦикла;
	Возврат СписокВыбора;
КонецФункции

&НаКлиенте
Процедура Печать(Команда)
	//ЗаписатьДанные(Неопределено);
	#Если Вебклиент Тогда
		Сообщить("Данные функционал недоступен на Веб-Клиенте!");
	#Иначе	
		Отказ = Ложь;
		ОчиститьСообщения();
		Если Модифицированность Тогда
			ЗаписатьДанныеСервер(Отказ);
		КонецЕсли;
		Модифицированность = Ложь;
		
		Если Не Отказ Тогда
			Если ЗначениеЗаполнено(ИсполнительныйДокумент) Тогда
				Объект.Объект = ИсполнительныйДокумент;
			ИначеЕсли ЗначениеЗаполнено(ДолговоеОбязательство) Тогда
				Объект.Объект = ДолговоеОбязательство;				
			КонецЕсли;
			ПечатьЭлектронныхДокументовКлиент.ПечатьОбработка(Объект, РаспечататьСформированныеДокументы, ПрикрепитьФайлы);
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ЗаписатьДанные(Неопределено);
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура СписокСвойствПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокСвойствДолжникаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если ТипЗнч(Элементы.СписокСвойствДолжника.ТекущиеДанные.Свойство) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Элементы.СписокСвойствДолжникаЗначение.ОграничениеТипа = ОбъектыСервер.РазыменоватьСсылку(
				Элементы.СписокСвойствДолжника.ТекущиеДанные.Свойство, "ТипЗначения");
	Иначе
		Элементы.СписокСвойствДолжникаЗначение.ОграничениеТипа = 
				Новый ОписаниеТипов("СправочникСсылка.ТипыКонтрагентовУЭД");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокСвойствКредитораПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если ТипЗнч(Элементы.СписокСвойствКредитора.ТекущиеДанные.Свойство) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Если Элементы.СписокСвойствКредитора.ТекущиеДанные.Свойство <> Неопределено Тогда
			Элементы.СписокСвойствКредитораЗначение.ОграничениеТипа = ОбъектыСервер.РазыменоватьСсылку(
					Элементы.СписокСвойствКредитора.ТекущиеДанные.Свойство, "ТипЗначения");
		КонецЕсли;
	Иначе
		Элементы.СписокСвойствКредитораЗначение.ОграничениеТипа = 
				Новый ОписаниеТипов("СправочникСсылка.ТипыКонтрагентовУЭД");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокСвойствДКПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокСвойствДКПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Элемент.ИзменятьСоставСтрок = ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ДолговыеОбязательства") И
				(ТипЗнч(Элемент.ТекущиеДанные.Свойство) = Тип("СправочникСсылка.Контрагенты"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокСвойствДКСвойствоПриИзменении(Элемент)
	СписокСвойствДКСвойствоПриИзмененииСервер(Истина, Элемент.Родитель.ТекущиеДанные.Заголовок, 
			Элемент.Родитель.ТекущаяСтрока, Элемент.Родитель.Имя);
КонецПроцедуры

&НаСервере
Процедура СписокСвойствДКСвойствоПриИзмененииСервер(ЭтоТаблицаДолжников, Контрагент, ИдентификаторСтроки, ИмяСпискаДК)
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Массив", Объект.Шаблон.ШаблоныПечатныхФорм.ВыгрузитьКолонку("ШаблонПечатнойФормы"));
	Запрос.УстановитьПараметр("ЮрФиз", Контрагент.ЮрФизЛицо);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
		
	Запрос.Текст = "ВЫБРАТЬ
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.Свойство,
		               |	МИНИМУМ(тсШаблоныПечатныхДокументовИспользуемыеСвойства.Обязательное) КАК Обязательное,
		               |	МИНИМУМ(тсШаблоныПечатныхДокументовИспользуемыеСвойства.Заголовок) КАК Заголовок,
					   |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.НомерСтроки
		               |ПОМЕСТИТЬ Таблица
		               |ИЗ
		               |	Справочник.тсШаблоныПечатныхДокументов.ИспользуемыеСвойства КАК тсШаблоныПечатныхДокументовИспользуемыеСвойства
		               |ГДЕ
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.Ссылка В(&Массив)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.Свойство,
					   |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.НомерСтроки
		               |
		               |ИМЕЮЩИЕ
		               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.Свойство.СправочникВладелец = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.Справочник_Контрагенты)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЮрФизЛицоДополнительныеРеквизиты.Ссылка,
		               |	ЮрФизЛицоДополнительныеРеквизиты.Свойство,
					   |    ЮрФизЛицоДополнительныеРеквизиты.Заголовок
		               |ПОМЕСТИТЬ СвойстваТиповД
		               |ИЗ
		               |	Справочник.ЮрФизЛицо.ДополнительныеРеквизиты КАК ЮрФизЛицоДополнительныеРеквизиты
		               |ГДЕ
		               |	ЮрФизЛицоДополнительныеРеквизиты.Ссылка = &ЮрФиз
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ЮрФизЛицоДополнительныеСведения.Ссылка,
		               |	ЮрФизЛицоДополнительныеСведения.Свойство,
					   |    ЮрФизЛицоДополнительныеСведения.Заголовок
		               |ИЗ
		               |	Справочник.ЮрФизЛицо.ДополнительныеСведения КАК ЮрФизЛицоДополнительныеСведения
		               |ГДЕ
		               |	ЮрФизЛицоДополнительныеСведения.Ссылка = &ЮрФиз
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Таблица.Свойство,
		               |	ЕСТЬNULL(ДополнительныеСведения.Значение, КонтрагентыДополнительныеРеквизиты.Значение) КАК Значение,
		               |	Таблица.Обязательное,
					   |	ВЫБОР
		               |		КОГДА Таблица.Заголовок <> """"		   
		               |			ТОГДА Таблица.Заголовок 
					   |		КОГДА СвойстваТиповД.Заголовок <> """"
		               |			ТОГДА СвойстваТиповД.Заголовок
		               |		ИНАЧЕ Таблица.Свойство.Наименование
		               |	КОНЕЦ КАК Заголовок,
					   |	Таблица.НомерСтроки 
		               |ИЗ
		               |	СвойстваТиповД КАК СвойстваТиповД
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Таблица КАК Таблица
		               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		               |			ПО Таблица.Свойство = ДополнительныеСведения.Свойство
		               |				И (ДополнительныеСведения.Объект = &Контрагент)
		               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
		               |			ПО Таблица.Свойство = КонтрагентыДополнительныеРеквизиты.Свойство
		               |				И (КонтрагентыДополнительныеРеквизиты.Ссылка = &Контрагент)
		               |		ПО СвойстваТиповД.Свойство = Таблица.Свойство
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Таблица.НомерСтроки";
	Результат = Запрос.Выполнить().Выбрать();
	ТекЭлементы = Неопределено;
	Выполнить("ТекЭлементы = " + ИмяСпискаДК + ".НайтиПоИдентификатору(ИдентификаторСтроки).ПолучитьЭлементы();");
	ТекЭлементы.Очистить();
    Пока Результат.Следующий() Цикл
	    Нов = ТекЭлементы.Добавить();
		Нов.Свойство = Результат.Свойство;
		Нов.Заголовок = Результат.Заголовок;
		Нов.Значение = Результат.Значение;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СписокСвойствДолжникаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
		
	Нов = СписокСвойствДолжника.ПолучитьЭлементы().Добавить();	
	Если Копирование Тогда
	    Нов.Свойство = Элемент.ТекущиеДанные.Свойство;
		Нов.Заголовок = Элемент.ТекущиеДанные.Заголовок;
		Нов.Значение = Элемент.ТекущиеДанные.Значение;		
		Элементы.СписокСвойствДолжника.ТекущаяСтрока = Нов.ПолучитьИдентификатор();
		СписокСвойствДКСвойствоПриИзменении(Элементы.СписокСвойствДолжникаЗначение);
        Элементы.СписокСвойствДолжника.Развернуть(Нов.ПолучитьИдентификатор());
	Иначе
		Форма = ПолучитьФорму("Справочник.Контрагенты.Форма.ФормаВыбора");
		Результат = Форма.ОткрытьМодально();
		Если Результат <> Неопределено Тогда
		    Нов.Свойство = Результат;
			Нов.Заголовок = Результат;
			Нов.Значение = ПредопределенноеЗначение("Справочник.ТипыКонтрагентовУЭД.ПустаяСсылка");
			Элементы.СписокСвойствДолжника.ТекущаяСтрока = Нов.ПолучитьИдентификатор();
			СписокСвойствДКСвойствоПриИзменении(Элементы.СписокСвойствДолжникаЗначение);
            Элементы.СписокСвойствДолжника.Развернуть(Нов.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СписокСвойствКредитораПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
		
	Нов = СписокСвойствКредитора.ПолучитьЭлементы().Добавить();	
	Если Копирование Тогда
	    Нов.Свойство = Элемент.ТекущиеДанные.Свойство;
		Нов.Заголовок = Элемент.ТекущиеДанные.Заголовок;
		Нов.Значение = Элемент.ТекущиеДанные.Значение;
		Элементы.СписокСвойствКредитора.ТекущаяСтрока = Нов.ПолучитьИдентификатор();
		СписокСвойствДКСвойствоПриИзменении(Элементы.СписокСвойствКредитораЗначение);
        Элементы.СписокСвойствКредитора.Развернуть(Нов.ПолучитьИдентификатор());
	Иначе
		Форма = ПолучитьФорму("Справочник.Контрагенты.Форма.ФормаВыбора");
		Результат = Форма.ОткрытьМодально();
		Если Результат <> Неопределено Тогда
		    Нов.Свойство = Результат;
			Нов.Заголовок = Результат;
			Нов.Значение = ПредопределенноеЗначение("Справочник.ТипыКонтрагентовУЭД.ПустаяСсылка"); 
			Элементы.СписокСвойствКредитора.ТекущаяСтрока = Нов.ПолучитьИдентификатор();
			СписокСвойствДКСвойствоПриИзменении(Элементы.СписокСвойствКредитораЗначение);
            Элементы.СписокСвойствКредитора.Развернуть(Нов.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокСвойствДолжникаПриАктивизацииЯчейки(Элемент)
	Если Элементы.СписокСвойствДолжника.ТекущиеДанные <> Неопределено Тогда		
		Элементы.СписокСвойствДолжникаЗаголовок.ТолькоПросмотр = 
				ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ИсполнительныеДокументы") ИЛИ
				ТипЗнч(Элементы.СписокСвойствДолжника.ТекущиеДанные.Свойство) <> Тип("СправочникСсылка.Контрагенты");
		Элементы.СписокСвойствДолжникаЗначение.ТолькоПросмотр = 
				ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ИсполнительныеДокументы") И
				ТипЗнч(Элементы.СписокСвойствДолжника.ТекущиеДанные.Свойство) = Тип("СправочникСсылка.Контрагенты");					
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокСвойствКредитораПриАктивизацииЯчейки(Элемент)
	Если Элементы.СписокСвойствКредитора.ТекущиеДанные <> Неопределено Тогда
		Элементы.СписокСвойствКредитораЗаголовок.ТолькоПросмотр = 
				ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ИсполнительныеДокументы") ИЛИ
				ТипЗнч(Элементы.СписокСвойствКредитора.ТекущиеДанные.Свойство) <> Тип("СправочникСсылка.Контрагенты");
		Элементы.СписокСвойствКредитораЗначение.ТолькоПросмотр = 
				ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ИсполнительныеДокументы") И
				ТипЗнч(Элементы.СписокСвойствКредитора.ТекущиеДанные.Свойство) = Тип("СправочникСсылка.Контрагенты");			
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ,ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Модифицированность Тогда
		Если Не ЗавершениеРаботы = Истина Тогда
			СохранитьИзменения();
		Иначе
			Отказ = Истина;
			ТекстПредупреждения = "Закрытие формы приведёт к потере несохранённых данных!";
			ПодключитьОбработчикОжидания("СохранитьИзменения", 1, Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения() Экспорт
	Если Модифицированность Тогда
		Ответ = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если Модифицированность Тогда
				ЗаписатьДанныеСервер();
			КонецЕсли;
			Модифицированность = Ложь;
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры		


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда
		ДолговоеОбязательство = Объект.Объект;
		ИсполнительныйДокумент = Неопределено;
	Иначе
		ДолговоеОбязательство = Объект.Объект.Владелец;
		ИсполнительныйДокумент = Объект.Объект;
	КонецЕсли;
	РеквизитыПриИзменении(Элементы.ДолговоеОбязательство);
КонецПроцедуры

&НаКлиенте
Процедура СписокСвойствЗначениеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.СписокСвойств.ТекущиеДанные;
	Тек = Элементы.СписокСвойств.ТекущаяСтрока;
	//Тек2 = СписокСвойств.Индекс(СписокСвойств.НайтиПоИдентификатору(Элементы.СписокСвойств.ТекущаяСтрока));
	Тек3 = СписокСвойств.Количество() + Тек;
	
	Если Элементы.СписокСвойств.ТекущиеДанные <> Неопределено Тогда
		Если ТипЗнч(ТекущиеДанные.Значение) <> Тип("Строка") Тогда
			ТекСтр = Элементы.СписокСвойств.ТекущаяСтрока;
			СписокСвойствЗначениеПриИзмененииСервер(ТекущиеДанные.Свойство);
			Элементы.СписокСвойств.ТекущаяСтрока = Тек3;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура СписокСвойствЗначениеПриИзмененииСервер(ТекущееСвойство)
	//Получаем список функций, которые используют данное измененное свойство
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ФункцииСвойствИспользуемыеСвойства.Ссылка
	                      |ИЗ
	                      |	Справочник.тсШаблоныПечатныхДокументов.ИспользуемыеСвойства КАК тсШаблоныПечатныхДокументовИспользуемыеСвойства
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФункцииСвойств.ИспользуемыеСвойства КАК ФункцииСвойствИспользуемыеСвойства
	                      |		ПО тсШаблоныПечатныхДокументовИспользуемыеСвойства.Функция = ФункцииСвойствИспользуемыеСвойства.Ссылка
	                      |			И (тсШаблоныПечатныхДокументовИспользуемыеСвойства.Ссылка В (&Шаблон))
	                      |			И (ФункцииСвойствИспользуемыеСвойства.Свойство В (&Свойство))
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ФункцииСвойствИспользуемыеСвойства.Ссылка");
	Запрос.УстановитьПараметр("Шаблон", Объект.Шаблон.ШаблоныПечатныхФорм.Выгрузить().ВыгрузитьКолонку("ШаблонПечатнойФормы"));
	Запрос.УстановитьПараметр("Свойство", ТекущееСвойство);
	Результат = Запрос.Выполнить().Выбрать();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.Функция КАК Ссылка
	               |ИЗ
	               |	Справочник.тсШаблоныПечатныхДокументов.ИспользуемыеСвойства КАК тсШаблоныПечатныхДокументовИспользуемыеСвойства
	               |ГДЕ
	               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.Ссылка В(&Шаблон)
	               |	И тсШаблоныПечатныхДокументовИспользуемыеСвойства.Свойство.СправочникВладелец = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.Справочник_Контрагенты)
	               |	И тсШаблоныПечатныхДокументовИспользуемыеСвойства.Функция <> ЗНАЧЕНИЕ(Справочник.ФункцииСвойств.Пустаяссылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	тсШаблоныПечатныхДокументовИспользуемыеСвойства.Функция";
	РезультатКА = Запрос.Выполнить().Выбрать();					  
						  
					
	//Грузим в запрос текущий список свойств со значениями и вычисляем результаты функций 
	Запрос.Текст = "ВЫБРАТЬ
	               |	СписокСвойств.Свойство,
	               |	СписокСвойств.Значение
	               |ПОМЕСТИТЬ Список
	               |ИЗ
	               |	&Список КАК СписокСвойств";
	Запрос.УстановитьПараметр("Список", СписокСвойств.Выгрузить());
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();			   
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Список.Свойство,
	               |	Список.Значение
	               |ИЗ
	               |	Список КАК Список
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФункцииСвойств.ИспользуемыеСвойства КАК ФункцииСвойствИспользуемыеСвойства
	               |		ПО Список.Свойство = ФункцииСвойствИспользуемыеСвойства.Свойство
	               |ГДЕ
	               |	ФункцииСвойствИспользуемыеСвойства.Ссылка = &Ссылка";
				   
	СписокФункций.Очистить();
	Пока Результат.Следующий() Цикл
		Запрос.УстановитьПараметр("Ссылка", Результат.Ссылка);
		ОбъектВх = Запрос.Выполнить().Выгрузить();
		 
		Значение = ВыполнитьФункцию(Результат.Ссылка.Функция, ОбъектВх, Неопределено);
		Нов = СписокФункций.Добавить();
		Нов.Функция = Результат.Ссылка;
		Нов.Результат = Не (Значение = Ложь);
	КонецЦикла;
	
	СписокФункцийД.Очистить();
	Пока РезультатКА.Следующий() Цикл
		Запрос.УстановитьПараметр("Ссылка", РезультатКА.Ссылка);
		ОбъектВх = Запрос.Выполнить().Выгрузить();
		 
		Значение = ВыполнитьФункцию(РезультатКА.Ссылка.Функция, ОбъектВх, Перечисления.ВидыКонтрагентов.Должник);
		Нов = СписокФункцийД.Добавить();
		Нов.Функция = РезультатКА.Ссылка;
		Нов.Результат = Не (Значение = Ложь);
	КонецЦикла;		
	РезультатКА.Сбросить();
	
	СписокФункцийК.Очистить();
	Пока РезультатКА.Следующий() Цикл
		Запрос.УстановитьПараметр("Ссылка", РезультатКА.Ссылка);
		ОбъектВх = Запрос.Выполнить().Выгрузить();
		 
		Значение = ВыполнитьФункцию(РезультатКА.Ссылка.Функция, ОбъектВх, Перечисления.ВидыКонтрагентов.Кредитор);
		Нов = СписокФункцийК.Добавить();
		Нов.Функция = РезультатКА.Ссылка;
		Нов.Результат = Не (Значение = Ложь);
	КонецЦикла;
	
	
	//
	Если СписокФункций.Количество() > 0 ИЛИ СписокФункцийД.Количество() > 0 ИЛИ СписокФункцийК.Количество() > 0 Тогда
		ЗаписатьДанныеСервер();
		Модифицированность = Ложь;
		
		Если Объект.Шаблон.Назначение = "Долговые обязательства" Тогда
			ЗаполнитьПоДолговомуОбязательству(Истина);
		ИначеЕсли Объект.Шаблон.Назначение = "Исполнительные документы" Тогда
			ЗаполнитьПоИсполнительномуДокументу(Истина);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ВыполнитьФункцию(ТекстФункции, ОбъектВх, ВидКонтрагента)
	Попытка
		Значение = Неопределено;
		Выполнить(ТекстФункции);
		Возврат Значение;
	Исключение
		Возврат Неопределено;
	КонецПопытки;	 
КонецФункции

&НаКлиенте
Процедура СписокСвойствКАЗначениеПриИзменении(Элемент)
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если Не ТекущиеДанные.ФункцияОтказа.Пустая() Тогда
		КА = Вычислить(Элемент.Родитель.Имя + 
				".НайтиПоИдентификатору(Элемент.Родитель.ТекущаяСтрока).ПолучитьРодителя().Свойство");
		ТекущиеДанные.Отказ = ВыполнитьФункцию(ТекущиеДанные.ФункцияОтказа.Функция, ТекущиеДанные.Значение, КА);
	КонецЕсли;		
КонецПроцедуры

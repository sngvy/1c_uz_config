
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	ОбъектыСервер.ОбработкаЗаполненияДокументов(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
	Попытка
		Займ = ДанныеЗаполнения.Займ;
	Исключение
	КонецПопытки;
КонецПроцедуры

Процедура ЗаполнитьДанныеПоЗайму() Экспорт
	ЭтотОбъект.СуммаПрощения = 0;
	ЭтотОбъект.ТекущийДоговор = РасчетЗадолженностиМФО.ПолучитьТекущийДоговор(ЭтотОбъект.Займ, ЭтотОбъект.ДатаРеструктуризации);
	Если ЭтотОбъект.ТекущийДоговор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокРеквизитов = РасчетЗадолженностиМФО.СписокРеквизитовДоговорМикрозайма();
	Для Каждого Реквизит Из СписокРеквизитов Цикл
		Попытка
			ЭтотОбъект["ДоРеструктуризации_" + Реквизит] = ЭтотОбъект.ТекущийДоговор[Реквизит];
			ЭтотОбъект[Реквизит] = ЭтотОбъект.ТекущийДоговор[Реквизит];
		Исключение
		КонецПопытки;
	КонецЦикла;
		
	ЭтотОбъект.ИнтервалыПроцентнойСтавки.Загрузить(ЭтотОбъект.ТекущийДоговор.ИнтервалыПроцентнойСтавки.Выгрузить());	
	ЭтотОбъект.ИсторияПлатежей.Загрузить(ЗагрузитьИсториюПогашений(ЭтотОбъект.Займ, ЭтотОбъект.ДатаРеструктуризации));
	ЭтотОбъект.ДоРеструктуризации_ГрафикПлатежей.Загрузить(ЭтотОбъект.ТекущийДоговор.ГрафикПлатежей.Выгрузить());
	
	Остатки = РасчетЗадолженностиМФО.ПолучитьОстаткиНаДату(ЭтотОбъект.Займ, ЭтотОбъект.ДатаРеструктуризации);
	СписокРеквизитов = РасчетЗадолженностиМФО.СписокРеквизитовОстатки();
	Если Остатки = Неопределено Тогда	
		Для Каждого Реквизит Из СписокРеквизитов Цикл
			ЭтотОбъект["ДоРеструктуризации_" + Реквизит] = 0;
			ЭтотОбъект[Реквизит] = 0;
		КонецЦикла;
		ЭтотОбъект.ДоРеструктуризации_ДниПросрочки = 0;
		ЭтотОбъект.ДниПросрочки = 0;
		ЭтотОбъект.ДоРеструктуризации_ОстаткиДата = ДАТА(1,1,1,0,0,0);
		ЭтотОбъект.ОстаткиДата = ДАТА(1,1,1,0,0,0);
	Иначе
		Для Каждого Реквизит Из СписокРеквизитов Цикл
			ЭтотОбъект["ДоРеструктуризации_" + Реквизит] = Остатки[Реквизит];
			ЭтотОбъект[Реквизит] = Остатки[Реквизит];
		КонецЦикла;
		ЭтотОбъект.ДоРеструктуризации_ДниПросрочки = Остатки.ДниПросрочки;	
		ЭтотОбъект.ДниПросрочки = Остатки.ДниПросрочки;
		ЭтотОбъект.ДоРеструктуризации_ОстаткиДата = Остатки.ОстаткиДата;
		ЭтотОбъект.ОстаткиДата = Остатки.ОстаткиДата;
	КонецЕсли;
КонецПроцедуры

Процедура РассчитатьСуммуПрощения() Экспорт
	СуммаПрощения = 0;
	СписокРеквизитов = РасчетЗадолженностиМФО.СписокРеквизитовОстатки();
	Для Каждого Реквизит Из СписокРеквизитов Цикл
		СуммаПрощения = СуммаПрощения + ЭтотОбъект["ДоРеструктуризации_" + Реквизит] - ЭтотОбъект[Реквизит];
	КонецЦикла;
	ЭтотОбъект.СуммаПрощения = СуммаПрощения;
КонецПроцедуры

&НаСервере
Функция ЗагрузитьИсториюПогашений(Займ, ДатаРеструктуризации)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ИсторияПлатежей.Период КАК ДатаПлатежа,
	                      |	ИсторияПлатежей.Регистратор КАК Регистратор,
	                      |	ИсторияПлатежей.НомерСтроки КАК НомерСтроки,
	                      |	ИсторияПлатежей.Активность КАК Активность,
	                      |	ИсторияПлатежей.ВидДвижения КАК ВидДвижения,
	                      |	ИсторияПлатежей.Объект КАК Объект,
	                      |	ИсторияПлатежей.Задолженность КАК СуммаПлатежа,
	                      |	ИсторияПлатежей.ВидДвиженияЗадолженности КАК ВидДвиженияЗадолженности,
	                      |	ИсторияПлатежей.Валюта КАК Валюта
	                      |ИЗ
	                      |	РегистрНакопления.ИсторияПлатежей КАК ИсторияПлатежей
	                      |ГДЕ
	                      |	ИсторияПлатежей.Объект = &Объект
	                      |	И ИсторияПлатежей.Период <= &ДатаРеструктуризации
	                      |	И ИсторияПлатежей.Период > &ДатаДействующегоДоговора
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ДатаПлатежа");
	Запрос.УстановитьПараметр("Объект", Займ);
	Запрос.УстановитьПараметр("ДатаРеструктуризации", ЭтотОбъект.ДатаРеструктуризации);
	
	Если ТипЗнч(ЭтотОбъект.ТекущийДоговор) = Тип("ДокументСсылка.ДоговорМикрозайма") Тогда
		ДатаДействующегоДоговора = ЭтотОбъект.ТекущийДоговор.ДатаДоговора;
	Иначе
		ДатаДействующегоДоговора = ЭтотОбъект.ТекущийДоговор.ДатаРеструктуризации;
	КонецЕсли;    	
	Запрос.УстановитьПараметр("ДатаДействующегоДоговора", ДатаДействующегоДоговора);

	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
КонецФункции

Процедура ОбработкаПроведения(Отказ, РежимПроведения)	
	Если ЭтотОбъект.ГрафикПлатежей.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ДатаПоследнегоДопСоглашения = РасчетЗадолженностиМФО.ДатаПоследнегоДопСоглашения(ЭтотОбъект.Займ);
	Если ДатаПоследнегоДопСоглашения > ЭтотОбъект.ДатаРеструктуризации Тогда
		Отказ = Истина;
		Сообщить("Существует действующее доп.соглашение с более поздней датой. Проведение невозможно");
		Возврат;
	КонецЕсли;
	ДатаРасчета = РасчетЗадолженностиМФО.ПолучитьДатуРасчетаСУчетомГоризонта(НачалоДня(ТекущаяДатаСеанса()));
	ДатаДопСоглашения = РасчетЗадолженностиМФО.ПолучитьДатуДопСоглашения(ЭтотОбъект.Ссылка);
	Если ДатаДопСоглашения = Неопределено Тогда
		РасчетнаяДата = Макс(ДатаРасчета, ЭтотОбъект.ДатаПогашения);
	Иначе
		РасчетнаяДата = ДатаДопСоглашения;
	КонецЕсли;
	
	Остатки1 = РасчетЗадолженностиМФО.ПолучитьОстаткиПоДоговоруНаДату(ЭтотОбъект.ТекущийДоговор, ЭтотОбъект.ДатаРеструктуризации);
	Остатки = РасчетЗадолженностиМФО.ПолучитьОстаткиПоДоговору(ЭтотОбъект, НачалоДня(ТекущаяДатаСеанса()));
	ТаблицаПлатежей = РасчетЗадолженностиМФО.ПолучитьИсториюПлатежей(ЭтотОбъект);
	РассчитанныйГрафик = РасчетЗадолженностиМФО.РасчитатьГрафикПлатежейИНачисленийНачальныеОстатки(ЭтотОбъект, РасчетнаяДата, ТаблицаПлатежей, Остатки);
	
	//  1. Очистка старых движений регистра
	Движения.ПериодыПросрочки.Очистить();
	Движения.ПериодыПросрочки.Записывать = Истина;
	Движения.РасчетыПоДоговорам.Очистить();
	Движения.РасчетыПоДоговорам.Записывать = Истина;
	Движения.Записать();
	
	Движения.РасчетыПоДоговорам.Записывать = Истина;
	// регистр ПериодыПросрочки
	Движения.ПериодыПросрочки.Записывать = Истина;
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РасчетыПоДоговорам.Период КАК Период,
	                      |	РасчетыПоДоговорам.Регистратор КАК Регистратор,
	                      |	РасчетыПоДоговорам.НомерСтроки КАК НомерСтроки,
	                      |	РасчетыПоДоговорам.Активность КАК Активность,
	                      |	ВЫБОР
	                      |		КОГДА РасчетыПоДоговорам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	                      |			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	                      |		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	                      |	КОНЕЦ КАК ВидДвижения,
	                      |	РасчетыПоДоговорам.Займ КАК Займ,
	                      |	РасчетыПоДоговорам.ОсновнойДолг КАК ОсновнойДолг,
	                      |	РасчетыПоДоговорам.Проценты КАК Проценты,
	                      |	РасчетыПоДоговорам.ПроцентыНачисленныеВПериодПросрочки КАК ПроцентыНачисленныеВПериодПросрочки,
	                      |	РасчетыПоДоговорам.Штрафы КАК Штрафы,
	                      |	РасчетыПоДоговорам.Пени КАК Пени,
	                      |	РасчетыПоДоговорам.ОсновнойДолгГрафик КАК ОсновнойДолгГрафик,
	                      |	РасчетыПоДоговорам.ПроцентыГрафик КАК ПроцентыГрафик,
	                      |	РасчетыПоДоговорам.РасчетныйСчет КАК РасчетныйСчет,
	                      |	РасчетыПоДоговорам.ВидДвиженияЗадолженности КАК ВидДвиженияЗадолженности,
	                      |	РасчетыПоДоговорам.ПроцентыНачисления КАК ПроцентыНачисления,
	                      |	РасчетыПоДоговорам.ШтрафыНачисления КАК ШтрафыНачисления,
	                      |	РасчетыПоДоговорам.ПениНачисления КАК ПениНачисления
	                      |ИЗ
	                      |	РегистрНакопления.РасчетыПоДоговорам КАК РасчетыПоДоговорам
	                      |ГДЕ
	                      |	РасчетыПоДоговорам.Регистратор = &Регистратор
	                      |	И РасчетыПоДоговорам.Период >= &НачалоДействия
	                      |	И РасчетыПоДоговорам.ВидДвиженияЗадолженности <> ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПоРасчетам.Реструктуризация)");
	
	Запрос.УстановитьПараметр("Регистратор", ЭтотОбъект.ТекущийДоговор);
	
	Если ЭтотОбъект.ДатаРеструктуризации = ЭтотОбъект.ТекущийДоговор.ДатаВыдачиЗайма Тогда
		Запрос.УстановитьПараметр("НачалоДействия", ЭтотОбъект.ДатаРеструктуризации);
		Движения.РасчетыПоДоговорам.Загрузить(Запрос.Выполнить().Выгрузить());
	Иначе
		Запрос.УстановитьПараметр("НачалоДействия", ЭтотОбъект.ДатаРеструктуризации + 86400);
		Движения.РасчетыПоДоговорам.Загрузить(Запрос.Выполнить().Выгрузить());
		
		Движение = Движения.РасчетыПоДоговорам.Добавить();
		Движение.Займ = ЭтотОбъект.Займ;
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.ВидДвиженияЗадолженности = Перечисления.ВидыДвиженийПоРасчетам.Реструктуризация;
		Движение.Период = ЭтотОбъект.ДатаРеструктуризации;
		Движение.ОсновнойДолгГрафик = Остатки1.ОстаткиОсновнойДолг - ЭтотОбъект.ОстаткиОсновнойДолг;
		Движение.ПроцентыГрафик = Остатки1.ОстаткиПроценты + Остатки1.ОстаткиПросроченныеПроценты - ЭтотОбъект.ОстаткиПроценты - ЭтотОбъект.ОстаткиПросроченныеПроценты;
		Движение.ПроцентыНачисленныеВПериодПросрочки = Остатки1.ОстаткиПросроченныеПроценты - ЭтотОбъект.ОстаткиПросроченныеПроценты;
		Движение.Штрафы = Остатки1.ОстаткиШтрафы - ЭтотОбъект.ОстаткиШтрафы;
		Движение.Пени = Остатки1.ОстаткиПени - ЭтотОбъект.ОстаткиПени;	
		Движение.ОсновнойДолг = Остатки1.ОстатокОДФактический;
		Движение.Проценты = Остатки1.ОстатокПроцентовФактический;
	КонецЕсли;	
	
	Если ЭтотОбъект.ДниПросрочки = 0 Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ПериодыПросрочкиСрезПоследних.Период КАК Период,
		                      |	ПериодыПросрочкиСрезПоследних.Регистратор КАК Регистратор,
		                      |	ПериодыПросрочкиСрезПоследних.НомерСтроки КАК НомерСтроки,
		                      |	ПериодыПросрочкиСрезПоследних.Активность КАК Активность,
		                      |	ПериодыПросрочкиСрезПоследних.Займ КАК Займ,
		                      |	ПериодыПросрочкиСрезПоследних.МетодРасчета КАК МетодРасчета,
		                      |	ПериодыПросрочкиСрезПоследних.ДатаПросрочки КАК ДатаПросрочки,
		                      |	ПериодыПросрочкиСрезПоследних.ДатаПогашения КАК ДатаПогашения
		                      |ПОМЕСТИТЬ вт
		                      |ИЗ
		                      |	РегистрСведений.ПериодыПросрочки.СрезПоследних(
		                      |			&Период,
		                      |			Займ = &Займ
		                      |				И МетодРасчета = &МетодРасчета) КАК ПериодыПросрочкиСрезПоследних
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	МАКСИМУМ(вт.ДатаПросрочки) КАК ДатаПросрочки
		                      |ПОМЕСТИТЬ вт_максимум
		                      |ИЗ
		                      |	вт КАК вт
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	вт_максимум.ДатаПросрочки КАК ДатаПросрочки,
		                      |	вт.ДатаПогашения КАК ДатаПогашения
		                      |ИЗ
		                      |	вт КАК вт
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_максимум КАК вт_максимум
		                      |		ПО вт.ДатаПросрочки = вт_максимум.ДатаПросрочки");
		Запрос.УстановитьПараметр("Займ", ЭтотОбъект.Займ);
		Запрос.УстановитьПараметр("Период", Новый Граница(ЭтотОбъект.ДатаДоговора, ВидГраницы.Исключая));
		
		Запрос.УстановитьПараметр("МетодРасчета", Перечисления.МетодыРасчетаДнейПросрочки.FIFO);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			ДвижениеПериод = Движения.ПериодыПросрочки.Добавить();
			ДвижениеПериод.МетодРасчета = Перечисления.МетодыРасчетаДнейПросрочки.FIFO;
			ДвижениеПериод.ДатаПросрочки = Результат.ДатаПросрочки;
			ДвижениеПериод.ДатаПогашения = ЭтотОбъект.ДатаРеструктуризации;
			ДвижениеПериод.Период = ЭтотОбъект.ДатаДоговора;
			ДвижениеПериод.Займ = ЭтотОбъект.Займ;	
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МетодРасчета", Перечисления.МетодыРасчетаДнейПросрочки.LIFO);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			ДвижениеПериод = Движения.ПериодыПросрочки.Добавить();
			ДвижениеПериод.МетодРасчета = Перечисления.МетодыРасчетаДнейПросрочки.LIFO;
			ДвижениеПериод.ДатаПросрочки = Результат.ДатаПросрочки;
			ДвижениеПериод.ДатаПогашения = ЭтотОбъект.ДатаРеструктуризации;
			ДвижениеПериод.Период = ЭтотОбъект.ДатаДоговора;
			ДвижениеПериод.Займ = ЭтотОбъект.Займ;	
		КонецЕсли;		
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СУММА(РеструктуризацияМикрозаймаГрафикПлатежей.ОплатаОсновнойДолг) КАК ОплатаОсновнойДолг,
	                      |	СУММА(РеструктуризацияМикрозаймаГрафикПлатежей.ОплатаПроценты) КАК ОплатаПроценты
	                      |ИЗ
	                      |	Документ.РеструктуризацияМикрозайма.ГрафикПлатежей КАК РеструктуризацияМикрозаймаГрафикПлатежей
	                      |ГДЕ
	                      |	РеструктуризацияМикрозаймаГрафикПлатежей.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Движение = Движения.РасчетыПоДоговорам.Добавить();
		Движение.Займ = ЭтотОбъект.Займ;
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.ВидДвиженияЗадолженности = Перечисления.ВидыДвиженийПоРасчетам.Начисление;
		Движение.ОсновнойДолг = Результат.ОплатаОсновнойДолг;
		Движение.Проценты = Результат.ОплатаПроценты;
		Движение.Период = ЭтотОбъект.ДатаВыдачиЗайма;
	КонецЕсли;

	
	ДатаВыхода = Неопределено;
	ДниПросрочкиФИФО = 0;
	ДатаВыходаФИФО = Неопределено;
	СуммаНаСчете = 0;

	Для Каждого стр из РассчитанныйГрафик Цикл
		
		Если стр.ПлановыйГрафик_ОплатаОсновнойДолг <> 0 ИЛИ стр.Проценты <> 0 ИЛИ стр.ПросроченныеПроценты <> 0 ИЛИ стр.Штрафы <> 0 ИЛИ стр.Пени <> 0 Тогда
			Движение = Движения.РасчетыПоДоговорам.Добавить();
			Движение.Займ = ЭтотОбъект.Займ;
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.ВидДвиженияЗадолженности = Перечисления.ВидыДвиженийПоРасчетам.Начисление;
			Движение.ОсновнойДолгГрафик = стр.ПлановыйГрафик_ОплатаОсновнойДолг;
			Движение.ПроцентыГрафик = стр.Проценты + стр.ПросроченныеПроценты;
			Движение.ПроцентыНачисленныеВПериодПросрочки = стр.ПросроченныеПроценты;
			Движение.Штрафы = стр.Штрафы;
			Движение.Пени = стр.Пени;
			Движение.ПроцентыНачисления = Движение.ПроцентыГрафик;
			Движение.ШтрафыНачисления = Движение.Штрафы;
			Движение.ПениНачисления = Движение.Пени;			
			Движение.Период = стр.Дата;	
			
		КонецЕсли;
		
		Если стр.КорректировкаПроценты > 0 Тогда
			Движение = Движения.РасчетыПоДоговорам.Добавить();
			Движение.Займ = ЭтотОбъект.Займ;
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.ВидДвиженияЗадолженности = Перечисления.ВидыДвиженийПоРасчетам.Корректировка;
			Движение.Проценты = стр.КорректировкаПроценты;
			Движение.Период = стр.Дата;				
		КонецЕсли;		
		
		Если стр.ОплатаОсновнойДолг <> 0 ИЛИ стр.ОплатаПроценты <> 0 ИЛИ стр.ОплатаПросроченныеПроценты <> 0 ИЛИ стр.ОплатаШтрафы <> 0 ИЛИ стр.ОплатаПени <> 0 Тогда
			Движение = Движения.РасчетыПоДоговорам.Добавить();
			Движение.Займ = ЭтотОбъект.Займ;
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.ВидДвиженияЗадолженности = Перечисления.ВидыДвиженийПоРасчетам.Оплата;
			Движение.ОсновнойДолг = стр.ОплатаОсновнойДолг;
			Движение.ОсновнойДолгГрафик = стр.ОплатаОсновнойДолг;
			Движение.Проценты = стр.ОплатаПроценты + стр.ОплатаПросроченныеПроценты;
			Движение.ПроцентыГрафик = стр.ОплатаПроценты + стр.ОплатаПросроченныеПроценты;
			Движение.ПроцентыНачисленныеВПериодПросрочки = стр.ОплатаПросроченныеПроценты;		
			Движение.Штрафы = стр.ОплатаШтрафы;
			Движение.Пени = стр.ОплатаПени;
			Движение.Период = стр.Дата;			
		КонецЕсли;		
		
		Если стр.Переплата <> СуммаНаСчете Тогда
			Движение = Движения.РасчетыПоДоговорам.Добавить();
			Движение.Займ = ЭтотОбъект.Займ;
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.ВидДвиженияЗадолженности = Перечисления.ВидыДвиженийПоРасчетам.РасчетныйСчет;
			Движение.РасчетныйСчет = стр.Переплата - СуммаНаСчете;
			Движение.Период = стр.Дата;				
		КонецЕсли;
		
		Если стр.ДниПросрочки = 1 Тогда
			ДвижениеПериод = Движения.ПериодыПросрочки.Добавить();
			ДвижениеПериод.ДатаПросрочки = стр.Дата - 24 * 3600;
			ДвижениеПериод.Период = ЭтотОбъект.ДатаДоговора;
			ДвижениеПериод.МетодРасчета = Перечисления.МетодыРасчетаДнейПросрочки.LIFO;
			ДвижениеПериод.Займ = ЭтотОбъект.Займ;
			
			ДатаВыхода = стр.Дата;
		ИначеЕсли стр.ДниПросрочки = 0 И ДатаВыхода <> Неопределено Тогда
			ДвижениеПериод.ДатаПогашения = стр.Дата - 24 * 3600;
			ДатаВыхода = Неопределено;
		КонецЕсли;
		
		Если стр.ДниПросрочки_ФИФО < ДниПросрочкиФИФО Тогда
			ДвижениеПериодФИФО = Движения.ПериодыПросрочки.Добавить();
			ДвижениеПериодФИФО.МетодРасчета = Перечисления.МетодыРасчетаДнейПросрочки.FIFO;
			ДвижениеПериодФИФО.ДатаПросрочки = стр.Дата - (ДниПросрочкиФИФО + 1) * 24 * 3600;
			ДвижениеПериодФИФО.Период = ЭтотОбъект.ДатаДоговора;
			ДвижениеПериодФИФО.ДатаПогашения = стр.Дата - 24 * 3600;
			ДвижениеПериодФИФО.Займ = ЭтотОбъект.Займ;
		КонецЕсли;
			
		ДниПросрочкиФИФО = стр.ДниПросрочки_ФИФО;
		СуммаНаСчете = стр.Переплата;
	КонецЦикла;
	
	Если стр.ДниПросрочки_ФИФО > 0 Тогда
		ДвижениеПериодФИФО = Движения.ПериодыПросрочки.Добавить();
		ДвижениеПериодФИФО.МетодРасчета = Перечисления.МетодыРасчетаДнейПросрочки.FIFO;
		ДвижениеПериодФИФО.ДатаПросрочки = стр.Дата - (ДниПросрочкиФИФО)* 24 * 3600;
		ДвижениеПериодФИФО.Период = ЭтотОбъект.ДатаДоговора;
		ДвижениеПериодФИФО.Займ = ЭтотОбъект.Займ;
	КонецЕсли;
	
	Набор = РегистрыНакопления.РасчетыПоДоговорам.СоздатьНаборЗаписей();
	Набор.Отбор["Регистратор"].Значение = ЭтотОбъект.ТекущийДоговор;
	Набор.Прочитать();
	Количество = Набор.Количество();
	Для к = 0 по Количество - 1 Цикл
		Запись = Набор[Количество - 1 - к];
		Если Запись.Период > ЭтотОбъект.ДатаРеструктуризации Тогда
			// Набор.Удалить(Запись);
			// создаем сторнирующую запись
		КонецЕсли;
	КонецЦикла;
	Набор.Записать(); 
	//Набор.Записать();  
	
	СобытиеЗафиксировано = КредитныеИстории.СобытиеСделкиЗафиксированоИсточником(ЭтотОбъект.Займ, ЭтотОбъект.Ссылка, "2.1");
	
	Попытка
		Цессия = ЭтотОбъект.ТекущийДоговор.УчитыватьОстаткиНаДатуЦессии;
	Исключение   
		Цессия = Ложь;
	КонецПопытки;	
	
	Если ЭтотОбъект.ДатаВыдачиЗайма >= НачалоДня(ТекущаяДатаСеанса()) И НЕ СобытиеЗафиксировано И Не Цессия Тогда 
		КредитныеИстории.ЗаписатьСобытиеСделки(ЭтотОбъект.Займ, ЭтотОбъект.ДатаВыдачиЗайма, ЭтотОбъект.Ссылка, "2.1");
	КонецЕсли;     
	Движения.РасчетыПоДоговорам.Записать();
	ОбъектыСервер.ЗаписатьТекущиеПараметрыЗадолженностиОбработчик(ЭтотОбъект);

КонецПроцедуры


Процедура ОбработкаУдаленияПроведения(Отказ)
	КредитныеИстории.УдалитьСобытиеСделки(ЭтотОбъект.Займ, ЭтотОбъект.Ссылка, "2.1");
	ЭтотОбъект.Движения.РасчетыПоДоговорам.Записать();   
	ОбъектыСервер.УдалитьСтадииОтменаПроведения(Этотобъект);
	ОбъектыСервер.ЗаписатьТекущиеПараметрыЗадолженностиОбработчик(ЭтотОбъект);
КонецПроцедуры


Процедура ПередУдалением(Отказ) 
	НаборЗаписей = РегистрыСведений.РасчетныеДанные.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Займ.Установить(ЭтотОбъект.Займ);
	НаборЗаписей.Записать();
	КредитныеИстории.УдалитьСобытияИсточника(ЭтотОбъект.Займ, ЭтотОбъект.Ссылка, "2.1");
КонецПроцедуры



Перем бит_сл_глФормаКлиентаЛицензирования Экспорт;
Перем ДрайверКомпоненты Экспорт;
Перем ПараметрыПриложения Экспорт;

Процедура ОбработкаЗаданий() Экспорт
    ВыполнитьОбработкуЗаданий();
КонецПроцедуры


Процедура ПередНачаломРаботыСистемы(Отказ)

	// Боевкин В.Н. 15.02.2018
	//РаботаСЦКТКлиент.СкопироватьКомпоненты();
	
	// СтандартныеПодсистемы
	СтандартныеПодсистемыКлиент.ПередНачаломРаботыСистемы();
	// Конец СтандартныеПодсистемы

	сл2_Переопределяемый.ИнициализацияРешенияСЛ_1();
	
	// ИнтернетПоддержкаПользователей
	//ИнтернетПоддержкаПользователейКлиент.ПередНачаломРаботыСистемы();
	// Конец ИнтернетПоддержкаПользователей
	
	ОбновлениеИБ.ВыполнитьОбновлениеИнформационнойБазы();	
	ОбновлениеИБ.ВыставлениеОпцийДоПервоначальнойНастройки();
	//Чуров А.И
	//РаботаСЦКТСервер.ТекущийIPАдрес("");
	//Чуров А.И
	//РаботаСЦКТСервер.АдресОбъектаЦКТ("");
                                  
	//УстановитьВнешнююКомпоненту("Справочник.тсШаблоныПечатныхДокументов.Макет.AddInEDCNativeZIP");
	//Чуров А.И
	
	// Боевкин В.Н. 10.04.2018 Закомментировал подключение компонент
	//#Если ВебКлиент Тогда                                                    
	//    Подключена = ОбщегоНазначенияКлиентСервер.ПодключитьВнешКомпонентуИзМакетаНаСервере("Справочники.СправочникЦКТ.ПолучитьМакет(""AddInEDCNative"")", "AddInEDCExten");
	//#Иначе
	//    Подключена = ПодключитьВнешнююКомпоненту(КаталогПрограммы() + "AddInEDCNative.dll", "AddInEDCExten", 
	//		ТипВнешнейКомпоненты.Native);
	//#КонецЕсли
	////	
	////Подключена = ПодключитьВнешнююКомпоненту("Справочник.тсШаблоныПечатныхДокументов.Макет.AddInEDCNativeZIP", 
	////		"AddInEDCExten", ТипВнешнейКомпоненты.Native);	
	//Попытка
	//	ДрайверКомпоненты = Новый("AddIn.AddInEDCExten.AddInEDCExtension");
	//	ОбъектыСервер.УстановитьНомерВерсииКомпоненты(СтрЗаменить(ДрайверКомпоненты.Версия, Символ(0), ""));
	//Исключение
	//	//Сообщить(ОписаниеОшибки());
	//	//Отказ = Истина;
	//КонецПопытки;
	
	
	
	//Чуров А.И	
	//Если Не РаботаСЦКТСервер.ПодключитьКомпоненту() Тогда
	//	//Отказ = Истина;	
	//КонецЕсли;
	
	#Если ВебКлиент Тогда  
		//Лебедева 11012022
		БИТПодключитьРасширение();		
	#КонецЕсли	
	

КонецПроцедуры    

Асинх Процедура БИТПодключитьРасширение() 
	ПодключениеРасширения = ПодключитьРасширениеРаботыСФайламиАсинх();
	Рез = Ждать ПодключениеРасширения; 
	Если Не Рез Тогда
		НачатьУстановкуРасширенияРаботыСФайлами();
	КонецЕсли;
КонецПроцедуры	

Процедура ПриНачалеРаботыСистемы()

	// Инициализация клиента лицензирования
	сл2_Переопределяемый.ИнициализациияЛицензирования();
	
	// отработка параметров запуска системы
	Если ОбработатьПараметрыЗапуска(ПараметрЗапуска) Тогда
		Возврат;
	КонецЕсли;
	
	// ЗавершениеРаботыПользователей
	СоединенияИБКлиент.УстановитьКонтрольРежимаЗавершенияРаботыПользователей();

	//
	Если НапоминанияПользователяСервер.НапоминатьМероприятия() Тогда
		ПроверитьТекущиеНапоминания();
	КонецЕсли;
	
	Если НапоминанияПользователяСервер.НапоминатьСообщения() Тогда
		ПроверитьСообщенияКПросмотру();
	КонецЕсли;

	//
	ОбъектыСервер.ОграничитьФункционалЗагрузкиДанных();
	
	// Проверяет заполнение реквизитов у пользователя, под которым заходят в систему.
	ТекПользователь = Неопределено;	
	Если ОбъектыСервер.ЗаполненыРеквизитыПользователя(ТекПользователь) <> Неопределено Тогда
		//+++ Чуров А.И.
		ПоказатьЗначение(,ТекПользователь); 
		//ОткрытьЗначение(ТекПользователь); 
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Заполните обязательные реквизиты у текущего пользователя (выделены красным)!";
		Сообщение.Сообщить();
		//Сообщить("Заполните обязательные реквизиты у текущего пользователя (выделены красным)!");
		//--Чуров А.И.
		
		//Сообщить("Работа текущем пользователем без заполнения обязательных реквизитов может привести к серьёзным ошибкам в
		//		 |базе данных. Настоятельно рекомендуется их заполнить или НЕ пользоваться данной учетной записью.");
	КонецЕсли;

	//ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	Если ОбъектыСервер.ПроверкаРоли() Тогда
		ПодключитьОбработчикОжидания("ОбработкаЗаданий", 300);
	КонецЕсли;
	
	// Проверка на автозапуск БИТ.Phone при старте системы 	
	Если бит_БитфонСервер.ДоступнаРольБитФонДляПользователя() И бит_БитфонСервер.ПолучитьФлагАвтостартаПриЗапускеСистемы() Тогда		
		//ФормаБит = ПолучитьФорму("Обработка.бит_Битфон.Форма");
		//ФормаБит.Открыть();	
		//Попытка
		//	ПолучитьОкна().Получить(0).Активизировать();
		//Исключение
		//КонецПопытки;
		
		ОткрытьФорму("Обработка.бит_Битфон.Форма");
		ОткрытыеОкна = ПолучитьОкна();
		Если ОткрытыеОкна.Количество() > 0 Тогда
		
			ОткрытыеОкна.Получить(0).Активизировать();
		
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка на автозапуск БИТ.Phone (монитор) при старте системы 	
	Если бит_АТССервер.ПроверитьПраваОткрытьМонитор() И бит_АТССервер.ПолучитьФлагАвтостартаПриЗапускеСистемы() Тогда
		бит_АТСКлиент.ОткрытьМонитор();
		//Попытка
		//	ПолучитьОкна().Получить(0).Активизировать();
		//Исключение
		//КонецПопытки;
		ОткрытыеОкна = ПолучитьОкна();
		Если ОткрытыеОкна.Количество() > 0 Тогда
		
			ОткрытыеОкна.Получить(0).Активизировать();
		
		КонецЕсли;
		
	КонецЕсли;
	
	СтандартныеПодсистемыКлиент.УстановитьРасширенныйЗаголовокПриложения();
	
КонецПроцедуры

Процедура ПриЗавершенииРаботыСистемы()
	// Закомментировано: Боевкин, 07.03.2018
	//// Процедура для штатного отсоединения от сервера лицензий
	//бит_сл_сервер.ОтключитьсяОтСервера();				
КонецПроцедуры

// Обработать параметр запуска программы.
// Реализация функции может быть расширена для обработки новых параметров.
//
// Параметры
//  ПараметрЗапуска  - Строка - параметр запуска, переданный в конфигурацию 
//                              с помощью ключа командной строки /C.
//
// Возвращаемое значение:
//   Булево   - Истина, если необходимо прервать выполнение процедуры ПриНачалеРаботыСистемы.
//
Функция ОбработатьПараметрыЗапуска(Знач ПараметрЗапуска)

	Перем Результат;
	Результат = Ложь;
	
	// СтандартныеПодсистемы
	
	// Есть ли параметры запуска
	Если ПустаяСтрока(ПараметрЗапуска) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Параметр может состоять из частей, разделенных символом ";".
	// Первая часть - главное значение параметра запуска. 
	// Наличие дополнительных частей определяется логикой обработки главного параметра.
	ПараметрыЗапуска = УдалитьСтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска, ";");
	ЗначениеПараметраЗапуска = Врег(ПараметрыЗапуска[0]);
	
	// ЗавершениеРаботыПользователей
	Результат = СоединенияИБКлиент.ОбработатьПараметрыЗапуска(ЗначениеПараметраЗапуска, ПараметрыЗапуска);
	// Конец ЗавершениеРаботыПользователей

	// Конец СтандартныеПодсистемы
	
	// Код конфигурации
	// ...
	// Конец кода конфигурации

	// СтандартныеПодсистемы
	Возврат Результат;
	// Конец СтандартныеПодсистемы

КонецФункции

// Выполняет "Отложенную активацию продукта"
// "Отложенная активация продукта" настраивается в окне системы лицензирования 1.6
Процедура бит_сл_ОтложеннаяАктивация() Экспорт
	Если Не бит_сл_сервер.НетОшибок( бит_сл_сервер.ПолучитьЛицензиюДляТекущегоПродукта() ) Тогда	
		// Обработка ошибки при получении лицензии
		бит_сл_клиент.ОткрытьФормуКлиентаЛицензирования();		
	КонецЕсли;
КонецПроцедуры

// Поддерживает хранимое на сервере значение в актуальном виде
Процедура бит_сл_ПоддержкаВременногоХранилища() Экспорт
	бит_сл_сервер.ОбновитьЗначениеВременногоХранилища();	
КонецПроцедуры

#Область ОбработчикиСобытий

Процедура ПередЗавершениемРаботыСистемы(Отказ, ТекстПредупреждения)
	
	// СтандартныеПодсистемы
	СтандартныеПодсистемыКлиент.ПередЗавершениемРаботыСистемы(Отказ, ТекстПредупреждения);
	// Конец СтандартныеПодсистемы
	
КонецПроцедуры

#КонецОбласти
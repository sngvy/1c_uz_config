
Процедура ПодключениеКомпонентыУправлениеАТС(ИмяОповещения, ПараметрОповещения=Неопределено) ЭКСПОРТ
	
#Если ВебКлиент Тогда
	бит_ТелефонияКлиент.ВывестиСообщение("Работа внешней компоненты управления БИТ.АТС в режиме веб-клиента не поддерживается");
	Возврат;
#КонецЕсли

	Попытка
		
		стрИмяФайлаВК = ? ( бит_ТелефонияКлиент.Клиент64бит(), "BITPBXControlNative64.dll", "BITPBXControlNative.dll");
		
		бит_ТелефонияКлиентПереопределяемый.ПодключениеВнешнейКомпоненты(
								"ОбщийМакет.бит_КомпонентаУправлениеАТС",
								стрИмяФайлаВК,
								"бит_АТССервер",
								"PBXControl",
								"БИТ.АТС",
								ИмяОповещения,
								ПараметрОповещения);
	Исключение
		
		бит_ТелефонияКлиент.ВывестиСообщение(ОписаниеОшибки());
		
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
Процедура УстановитьПараметрыПроверкиЛицензии(обКонтроллерАТС, флагМонитор) ЭКСПОРТ
	
	Если (обКонтроллерАТС <> Неопределено) Тогда
		
		стрСерверЛицензийАдрес		= бит_АТССервер.ПолучитьАдресСервераЛицензий();
		серверЛицензийПорт			= бит_АТССервер.ПолучитьПортСервераЛицензий();
		серверЛицензийНеИспПрокси	= бит_АТССервер.ПолучитьФлагСервераЛицензийНеИспользоватьПрокси();
		
		обКонтроллерАТС.SetLicenseParameters(стрСерверЛицензийАдрес, серверЛицензийПорт, серверЛицензийНеИспПрокси, флагМонитор);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует полный номер телефона с префиксами выхода в город и на междугороднюю линию.
// Из номера удаляются лишние символы.
// Если номер уже с префиксами, то сначала префиксы удаляются.
//
// Параметры:
//  стрНомерИсх - Строка - номер телефона.
//
// Возвращаемое значение:
//   Строка - сформированный полный номер с префиксами, очищенный от лишних символов.
//
Функция СформироватьНомерСПрефиксами(стрНомерИсх) ЭКСПОРТ
	флагПрямойНабор		= бит_АТССервер.ПолучитьФлагИспользоватьПрямойНабор();
	стрПрефиксВнешЛинии	= бит_АТССервер.ПолучитьПрефиксВыходаНаВнешнююЛинию();
	Возврат бит_ТелефонияКлиент.СформироватьНомерСПрефиксами(стрНомерИсх, флагПрямойНабор, стрПрефиксВнешЛинии);
КонецФункции

// Открывает форму настроек для текущего пользователя.
//
// Параметры:
//  СкрыватьПараметрыПанели  - Булево, флаг скрывания параметров, не используемых в Панели БИТ.АТС.
//
Процедура ОткрытьФормуНастроек(СкрыватьПараметрыПанели) ЭКСПОРТ
	ПараметрыФормыНастроек = бит_АТССервер.ПолучитьПараметрыОткрытияФормыНастроек();
	фрмНастройки = ПолучитьФорму("РегистрСведений.бит_БитАТСНастройки.Форма.ФормаЗаписи", ПараметрыФормыНастроек);
	фрмНастройки.Элементы.Пользователь.ТолькоПросмотр = Истина;
	фрмНастройки.Элементы.ВерсияКомпонентыПанелиУправления.ТолькоПросмотр = Истина;
	фрмНастройки.СкрыватьПараметрыПанели = СкрыватьПараметрыПанели;
	бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуСБлокировкойВладельца(фрмНастройки, "БитфонМониторПанель_ОбновлениеНастроек");
КонецПроцедуры

// Функция получения наименования для номера.
//
// Параметры:
//  СоответствиеНомеровИменам  - Соответствие, ключ - номер телефона, значение - имя абонента.
//  стрНомер  - Строка - номер телефона для поиска в соответствии.
//
// Возвращаемое значение:
//   Строка - наименование абонента.
//
Функция ПолучитьИмяПоВнутреннемуНомеру(СоответствиеНомеровИменам, стрНомер) ЭКСПОРТ
	Наименование = стрНомер;
	Если СоответствиеНомеровИменам <> Неопределено Тогда
		ИмяНомера = СоответствиеНомеровИменам.Получить(стрНомер);
		Если ИмяНомера <> Неопределено Тогда
			Наименование = ИмяНомера + " (" + стрНомер + ")";
		КонецЕсли;
	КонецЕсли;
	Возврат Наименование;
КонецФункции

//-----------------------------------------------------------------------------
Функция СократитьНомер(НомерСПрефиксами, ВнешнийВызовВозвращ) ЭКСПОРТ
	СокращНомер = НомерСПрефиксами;
	индСИП = Найти(НомерСПрефиксами, "SIP/");
	Если индСИП = 0 Тогда
		//СокращНомер = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(
		//		бит_ТелефонияКлиентСервер.ОчиститьНомерЦифрыЗвРеш(НомерСПрефиксами));
		//
		// ВРЕМЕННО! заглушка очистки префикса транка
		СокращНомер = бит_ТелефонияКлиентСервер.ОчиститьНомерЦифрыЗвРеш(НомерСПрефиксами);
		ДлинаСоединен = СтрДлина(СокращНомер);
		индРешТранк = Найти(СокращНомер, "#0");
		Если (индРешТранк = 1) И (ДлинаСоединен = 14) Тогда
			СокращНомер = Сред(СокращНомер, 3);
		КонецЕсли;
		СокращНомер = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(СокращНомер);
		//
		ДлинаСоединен = СтрДлина(СокращНомер);
		ДлинаВнешнегоНомера = бит_ТелефонияКлиентСервер.ПолучитьДлинуВнешнегоНомера();
		ВнешнийВызовВозвращ = (ДлинаСоединен >= ДлинаВнешнегоНомера);
	Иначе
		// соединение с неизвестным внутренним абонентом
		ВнешнийВызовВозвращ = Ложь;
	КонецЕсли;
	Возврат СокращНомер;
КонецФункции

//-----------------------------------------------------------------------------
Процедура СократитьНомерНайтиКонтрагента(кэшКонтактов, СоответствиеВнутреннихНомеров, НомерСПрефиксами, КонтрагентСсылка, КонтактноеЛицоСсылка) ЭКСПОРТ
	ВнешнийВызов = Ложь;
	СокращНомер = СократитьНомер(НомерСПрефиксами, ВнешнийВызов);
	НомерСПрефиксами = СокращНомер;
	НайтиКонтрагентаПоСокращНомеру(кэшКонтактов, СоответствиеВнутреннихНомеров, СокращНомер, ВнешнийВызов, КонтрагентСсылка, КонтактноеЛицоСсылка);
КонецПроцедуры

//-----------------------------------------------------------------------------
Процедура НайтиКонтрагентаПоСокращНомеру(кэшКонтактов, СоответствиеВнутреннихНомеров, СокращНомер, ВнешнийВызов, КонтрагентСсылка, КонтактноеЛицоСсылка) ЭКСПОРТ
	Если ВнешнийВызов Тогда
		ПолучитьКонтрагентаИзКэша(кэшКонтактов, СокращНомер, КонтрагентСсылка, КонтактноеЛицоСсылка);
	Иначе
		КонтрагентСсылка = ПолучитьИмяПоВнутреннемуНомеру(СоответствиеВнутреннихНомеров, СокращНомер);
	КонецЕсли;
КонецПроцедуры

//-----------------------------------------------------------------------------
// При получении контрагента устанавливается флаг "Обновлен".
Процедура ПолучитьКонтрагентаИзКэша(кэшКонтактов, НомерКлюч, КонтрагентСсылка, КонтактноеЛицоСсылка)
	СтруктураКонтакт = кэшКонтактов.Получить(НомерКлюч);
	Если СтруктураКонтакт = Неопределено Тогда
		// найти и добавить в кэш
		флагНеИскатьКонтрагента = бит_АТССервер.ПолучитьФлагНеИскатьКонтрагента();
		найден = бит_БитфонСервер.НайтиКонтрагентаИКонтактноеЛицоПоНомеру(НомерКлюч, КонтрагентСсылка, КонтактноеЛицоСсылка, флагНеИскатьКонтрагента);
		Если НЕ найден Тогда
			КонтрагентСсылка = НомерКлюч;
		КонецЕсли;
		НайденныйКонтакт = Новый Структура;
		НайденныйКонтакт.Вставить("КонтрагентСсылка", КонтрагентСсылка);
		НайденныйКонтакт.Вставить("КонтактноеЛицоСсылка", КонтактноеЛицоСсылка);
		НайденныйКонтакт.Вставить("Обновлен", Истина);
		кэшКонтактов.Вставить(НомерКлюч, НайденныйКонтакт);
	Иначе
		КонтрагентСсылка			= СтруктураКонтакт.КонтрагентСсылка;
		КонтактноеЛицоСсылка		= СтруктураКонтакт.КонтактноеЛицоСсылка;
		СтруктураКонтакт.Обновлен	= Истина;
	КонецЕсли;
КонецПроцедуры

//-----------------------------------------------------------------------------
Процедура ОчиститьФлагОбновленВсегоКэшаКонтактов(кэшКонтактов) ЭКСПОРТ
	Если кэшКонтактов <> Неопределено Тогда
		Для Каждого СтруктураКонтакт Из кэшКонтактов Цикл
			СтруктураКонтакт.Значение.Обновлен = Ложь;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

//-----------------------------------------------------------------------------
Процедура УдалитьНеобновленныеКонтактыИзКэша(кэшКонтактов) ЭКСПОРТ
	Если кэшКонтактов <> Неопределено Тогда
		Для Каждого СтруктураКонтакт Из кэшКонтактов Цикл
			Если СтруктураКонтакт.Значение.Обновлен = Ложь Тогда
				кэшКонтактов.Удалить(СтруктураКонтакт.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

//-----------------------------------------------------------------------------
// Возвращает таймаут звонка в миллисекундах.
Функция ПолучитьТаймаутЗвонка() ЭКСПОРТ
	таймаут = бит_АТССервер.ПолучитьТаймаутЗвонка();
	Если таймаут = 0 Тогда
		бит_ТелефонияКлиент.ВывестиСообщение("Не задан таймаут звонка в настройках, принимается 15 сек");
		таймаут = 15;
	КонецЕсли;
	таймаут = таймаут * 1000;	// перевод в миллисекунды
	Возврат таймаут;
КонецФункции

//-----------------------------------------------------------------------------
Функция ПолучитьИмяФормыМонитора()
	Возврат "Обработка.бит_БитАТС.Форма.Монитор";
КонецФункции

Процедура ОткрытьМонитор() ЭКСПОРТ
	бит_ТелефонияКлиент.ОткрытьФормуВыполнитьДействие(ПолучитьИмяФормыМонитора(), "", "");
КонецПроцедуры

// Открывает форму монитора стационарного телефона и начинает исходящий вызов на заданный номер.
//
// Параметры:
//  Контакт - Сссылка на контрагента, или ссылка на контактное лицо, или строка с номером.
//
Процедура ОткрытьМониторНачатьРазговор(Контакт) ЭКСПОРТ
	бит_ТелефонияКлиентПереопределяемый.ВыбратьНомерКонтактаИОповестить(Контакт, ПолучитьИмяФормыМонитора(), "БитфонМонитор_НачатьЗвонок");
КонецПроцедуры

//-----------------------------------------------------------------------------
Процедура ПеревестиОжидающийЗвонокВыборНомера(ФормаСсылка, стрИмяТаблицыОжидающих, стрИмяОповещения) ЭКСПОРТ
	ТекущаяСтрокаОжидающих = ФормаСсылка.Элементы[стрИмяТаблицыОжидающих].ТекущиеДанные;
	Если ТекущаяСтрокаОжидающих = Неопределено Тогда
		бит_ТелефонияКлиентПереопределяемый.ПоказПредупреждение("Не выбран ожидающий звонок");
		Возврат;
	КонецЕсли;
	
	формаВводаНомераПеревода = ПолучитьФорму("Обработка.бит_Битфон.Форма.ФормаВводаНомераПеревода");
	бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуСБлокировкойВладельца(формаВводаНомераПеревода, стрИмяОповещения);
КонецПроцедуры

Процедура ПеревестиОжидающийЗвонокНаНомер(ФормаСсылка, стрИмяТаблицыОжидающих, номерПеревода, ссылкаКонтроллерАТС) ЭКСПОРТ
	ТекущаяСтрокаОжидающих = ФормаСсылка.Элементы[стрИмяТаблицыОжидающих].ТекущиеДанные;
	Если ТекущаяСтрокаОжидающих = Неопределено Тогда
		бит_ТелефонияКлиентПереопределяемый.ПоказПредупреждение("Не выбран ожидающий звонок");
		Возврат;
	КонецЕсли;
	КаналОжид = ТекущаяСтрокаОжидающих.Канал;
	Попытка
		ссылкаКонтроллерАТС.Redirect(КаналОжид, номерПеревода);
	Исключение
		бит_ТелефонияКлиент.ВывестиСообщение(ОписаниеОшибки(), ФормаСсылка);
	КонецПопытки;
КонецПроцедуры

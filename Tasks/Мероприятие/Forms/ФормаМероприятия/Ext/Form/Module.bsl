 
&НаКлиенте
Перем ТекущийУИДАбонента;
&НаКлиенте
Перем КомпонентаОбъект;
&НаКлиенте
Перем ТекущийIPАдрес;
 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбъектыСервер.ОграничитьТипОбъекта(Элементы.Объект);
	Элементы.ГруппаДополнительныеРеквизитыОбъекта.Видимость = Ложь;
	//Заплатка
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ПланируемаяДата = ТекущаяДата();
		Объект.ВремяСоздания = ТекущаяДата();
	КонецЕсли;
	//
	//Заплатка
	Если Не Объект.Ссылка.Пустая() И Объект.Подразделение <> УдалитьОбщегоНазначения.ТекущийПользователь().Подразделение
			И РольДоступна("СотрудникВРегионе") Тогда
		//ЭтаФорма.ТолькоПросмотр = Истина;
		Элементы.Организация.ТолькоПросмотр = Истина;
		Элементы.Подразделение.ТолькоПросмотр = Истина;
		Элементы.ТипМероприятия.ТолькоПросмотр = Истина;
		Элементы.ТипСотрудника.ТолькоПросмотр = Истина;
		Элементы.Ответственный.ТолькоПросмотр = Истина;	
		
		Элементы.ОбъектУчета_Пусто.ТолькоПросмотр = Истина;
		Элементы.ОбъектУчета_Контрагенты.ТолькоПросмотр = Истина;
		Элементы.ОбъектУчета_ДоговорыКонтрагентов.ТолькоПросмотр = Истина;
		Элементы.ОбъектУчета_УслугиПоДоговорам.ТолькоПросмотр = Истина;
		Элементы.ОбъектУчета_ДолговыеОбязательства.ТолькоПросмотр = Истина;
		Элементы.ОбъектУчета_ИсполнительныеДокументы.ТолькоПросмотр = Истина;
		Элементы.ОбъектУчета_Залоги.ТолькоПросмотр = Истина;
	КонецЕсли;	
	//
	
	ДополнительныеРеквизиты.Загрузить(Объект.ДополнительныеРеквизиты.Выгрузить());
	
	Если Не ЗначениеЗаполнено(Объект.Автор) Тогда
		Пользователи.ЗаполнитьРеквизитыПоДаннымПользователя(Объект);	
		Если Параметры.ЗначенияЗаполнения.Свойство("Объект") Тогда
			Если ТипЗнч(Параметры.ЗначенияЗаполнения.Объект) = Тип("Массив") Тогда
				КолВо = Параметры.ЗначенияЗаполнения.Объект.Количество();
				Объект.Объект = Параметры.ЗначенияЗаполнения.Объект[КолВо - 1];
			Иначе
				Объект.Объект = Параметры.ЗначенияЗаполнения.Объект;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Параметры.Объект) Тогда
			Объект.Объект = Параметры.Объект;
		КонецЕсли;
		Если Параметры.ЗначенияЗаполнения.Свойство("Ответственный") И
				Не Параметры.ЗначенияЗаполнения.Ответственный.Пустая() Тогда
			Объект.Организация = Параметры.ЗначенияЗаполнения.Ответственный.Организация;
			Объект.Подразделение = Параметры.ЗначенияЗаполнения.Ответственный.Подразделение;
			Объект.Ответственный = Параметры.ЗначенияЗаполнения.Ответственный;
		КонецЕсли;
		Если Параметры.ЗначенияЗаполнения.Свойство("ТипМероприятия") Тогда
			Объект.ТипМероприятия = Параметры.ЗначенияЗаполнения.ТипМероприятия;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Объект) Тогда
		Элементы.ОбъектУчета_Контрагенты.Видимость = Ложь;
		Элементы.ОбъектУчета_ДоговорыКонтрагентов.Видимость = Ложь;
		Элементы.ОбъектУчета_УслугиПоДоговорам.Видимость = Ложь;
		Элементы.ОбъектУчета_ДолговыеОбязательства.Видимость = Ложь;
		Элементы.ОбъектУчета_ИсполнительныеДокументы.Видимость = Ложь;
		Элементы.ОбъектУчета_Залоги.Видимость = Ложь;
	Иначе
		Элементы.ОбъектУчета_Пусто.Доступность = Ложь;
		Элементы.ОбъектУчета_Контрагенты.Видимость = Ложь;
		Элементы.ОбъектУчета_ДоговорыКонтрагентов.Видимость = Ложь;
		Элементы.ОбъектУчета_УслугиПоДоговорам.Видимость = Ложь;
		Элементы.ОбъектУчета_ДолговыеОбязательства.Видимость = Ложь;
		Элементы.ОбъектУчета_ИсполнительныеДокументы.Видимость = Ложь;
		Элементы.ОбъектУчета_Залоги.Видимость = Ложь;
		
		Если Объект.Объект = Неопределено Тогда	
			Элементы.ОбъектУчета_Пусто.Доступность = Истина;
			ТекущийЭлемент = Элементы.Объект;
			Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_Пусто;		
		ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Элементы.ОбъектУчета_Контрагенты.Видимость = Истина;
			ТекущийЭлемент = Элементы.Контрагент;
			Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_Контрагенты;		
		ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Элементы.ОбъектУчета_ДоговорыКонтрагентов.Видимость = Истина;
			ТекущийЭлемент = Элементы.ДоговорКонтрагента;
			Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_ДоговорыКонтрагентов;		
		ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.УслугиПоДоговору") Тогда	
			Элементы.ОбъектУчета_УслугиПоДоговорам.Видимость = Истина;
			ТекущийЭлемент = Элементы.УслугаПоДоговору;
			Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_УслугиПоДоговорам;
		ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда
			Элементы.ОбъектУчета_ДолговыеОбязательства.Видимость = Истина;
			ТекущийЭлемент = Элементы.ДолговоеОбязательство;
			Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_ДолговыеОбязательства;
		ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ИсполнительныеДокументы") Тогда	
			Элементы.ОбъектУчета_ИсполнительныеДокументы.Видимость = Истина;
			ТекущийЭлемент = Элементы.ИсполнительныйДокумент;
			Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_ИсполнительныеДокументы;
		ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.Залоги") Тогда	
			Элементы.ОбъектУчета_Залоги.Видимость = Истина;
			ТекущийЭлемент = Элементы.Залог;
			Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_Залоги;
		КонецЕсли;
		
		Контрагент = Объект.Объект;
		ДоговорКонтрагента = Объект.Объект;
		УслугаПоДоговору = Объект.Объект;
		ДолговоеОбязательство = Объект.Объект;
		ИсполнительныйДокумент = Объект.Объект;
		Залог = Объект.Объект;
		
		//
		Попытка
			КонтрагентКЛ = Объект.Объект.Должник;
		Исключение
			Попытка
				КонтрагентКЛ = Объект.Объект.Контрагент;
			Исключение
				Попытка
					КонтрагентКЛ = Объект.Объект.Владелец.Должник;
				Исключение
					КонтрагентКЛ = Объект.Объект;
				КонецПопытки;
			КонецПопытки;
		КонецПопытки;
	КонецЕсли;
		
	Элементы.ФормаОтменитьВыполнение.Доступность = Объект.Выполнена;
	Элементы.ДекорацияВыполнено.Видимость = Объект.Выполнена;
	Элементы.ГруппаШапка.ТолькоПросмотр = ?(РольДоступна("тсАдминистрирование"), Ложь, Объект.Выполнена);
	Элементы.ГруппаПланирование.ТолькоПросмотр = Объект.Выполнена;
	Если Объект.БизнесПроцесс <> Неопределено И Не Объект.БизнесПроцесс.Пустая() 
			И Не РольДоступна("тсАдминистрирование") Тогда
		Элементы.ТипМероприятия.ТолькоПросмотр = Истина;		
	КонецЕсли;
	
	//	
	Если ТипЗнч(Объект.Ответственный) = Тип("ПланВидовХарактеристикСсылка.ТипыСотрудников") Тогда
		ТипСотрудника = Объект.Ответственный;		
		Если Константы.ЗапретитьУчетПоСотрудникам.Получить() Тогда
			Элементы.Ответственный.Видимость = Ложь;
		Иначе
			Элементы.Ответственный.ТолькоПросмотр = Истина;	
			ЗаполнитьОтветственный();
		КонецЕсли;
	Иначе
		Элементы.ТипСотрудника.Видимость = Константы.УчетПоТипамСотрудников.Получить();
		ТипСотрудника = ПланыВидовХарактеристик.ТипыСотрудников.ПустаяСсылка();
		
		Если Константы.ЗапретитьУчетПоСотрудникам.Получить() Тогда		
			Если Объект.Ссылка.Пустая() Тогда
				Объект.Ответственный = ПланыВидовХарактеристик.ТипыСотрудников.ПустаяСсылка();
				Элементы.Ответственный.Видимость = Ложь;				
			КонецЕсли;
			Ответственный = Объект.Ответственный;
			Элементы.ТипСотрудника.АвтоОтметкаНезаполненного = Истина;
		Иначе
			Ответственный = ?(Объект.Ответственный = Неопределено, ПараметрыСеанса.ТекущийПользователь, Объект.Ответственный);
		КонецЕсли;		
	КонецЕсли;
	//ЦКТ
	//Чуров А.И
	//СтатусОператора = Перечисления.СтатусыОператора.Выключен;
	//СостояниеОператора = Перечисления.СостоянияОператора.ИсходящийЗвонок;
	//УстановитьСтатусОператора();
	//КЦАдресIPЦКТ = Константы.АдресIPЦКТ.Получить();
	//
	Если РольДоступна("тсАдминистрирование") ИЛИ РольДоступна("ПереносСроковМероприятий") Тогда
		Элементы.ГруппаСрокВыполнения.ТолькоПросмотр = Ложь;			
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередВыполнением(Отказ)
	Если ПередВыполнениемСервер(Отказ) = Истина И Отказ = Ложь Тогда		
		//СоздатьСлед	
		Если Не Объект.СледующееМероприятие.Пустая() Тогда
			////Если Вопрос("Хотите создать следующее мероприятие?", 
			////		РежимДиалогаВопрос.ДаНет,,, "Создать следующее мероприятие?") = КодВозвратаДиалога.Да Тогда	
				Закрыть();
				СоздатьСледующееМероприятие(Отказ);
			////КонецЕсли;
		КонецЕсли;
		
		ОповеститьОбИзменении(Объект.Ссылка);
		Оповестить("ОбновитьТД");
		// Оповестить("ОбновитьТД") используется И при записи,
		// а необходимо только, когда выполнено Мероприятие.  
		Оповестить("ОбновитьПланировщик", Истина, Объект.Ссылка);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ПередВыполнениемСервер(Отказ)
	НачатьТранзакцию();
	Попытка
		//Сами делаем запись и отказ
		//Если Записать() Тогда	
		Если Не Объект.Выполнена Тогда
			ТекстСообщения = "";
			ПроверкаЗаполненияПолейПередВыполнением(Отказ, ТекстСообщения);	
			Если Отказ ИЛИ ТекстСообщения <> "" Тогда		
				Сообщить(ТекстСообщения);
				ВызватьИсключение "!!!";
			Иначе
				ПеренестиТЧДопРеквизиты(Отказ, ТекстСообщения);
				Если Отказ Тогда
					Сообщить(ТекстСообщения);
					ВызватьИсключение "!!!";
				КонецЕсли;
				
				ПроверитьОбязательныеДопРеквизиты(Отказ, ТекстСообщения);
				Если Отказ Тогда
					Сообщить(ТекстСообщения);
					ВызватьИсключение "!!!";
				КонецЕсли;
				ЗаписатьЗначениеСвойства();
													
				СохранитьСостояниеБП();
				Объект.Выполнена = Истина;
				Объект.ВыполненоКакНеАктуальное = Ложь;
				Объект.ДатаВыполнения = ТекущаяДата(); //+1 для того, чтобы отмена нормально работала, 
						//если идет параллельное выбивание другого мероприятия, которое в свою очередь, 
						//создает новое мероприятие, НО это не пашет в других случаях...
				Объект.ФактическаяДата = Объект.ДатаВыполнения; //НИКА!!!
				Объект.МоментВремени = ПолучитьМоментВремени(Объект.ДатаВыполнения);
				Объект.Исполнитель = УдалитьОбщегоНазначения.ТекущийПользователь();			
				//
				Если Объект.ВремяРаботы = 0 Тогда
					// Исправить подсчет времени работы
					Объект.ВремяРаботы = Объект.ДатаВыполнения - Объект.Дата;
				КонецЕсли;	
				//
				//
				Если ((Объект.Результат = Справочники.РезультатыМероприятий.НайтиПоКоду("000000001")) ИЛИ (Объект.Результат = Справочники.РезультатыМероприятий.НайтиПоКоду("000000002"))) Тогда
					
					Сотрудник = ПараметрыСеанса.ТекущийПользователь;
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	ОтветственныеСотрудники.Пользователь КАК Пользователь
						|ИЗ
						|	РегистрСведений.ОтветственныеСотрудники КАК ОтветственныеСотрудники
						|ГДЕ
						|	ОтветственныеСотрудники.Объект = &Объект";
					
					Запрос.УстановитьПараметр("Объект", Объект.Объект);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					Выборка = РезультатЗапроса.Выбрать();
					
					//Пока Выборка.Следующий() Цикл
					//	
					//	Если Выборка.Пользователь.Подразделение = Сотрудник.Подразделение Тогда
					//	
					//		ТекущийОтветственный = Выборка.Пользователь;
					//	
					//	КонецЕсли; 
					//	
					//КонецЦикла;
					Выборка.Следующий();
					ТекущийОтветственный = Выборка.Пользователь;
		
					
					Если ТекущийОтветственный <> Сотрудник Тогда
					
						Акт = Документы.АктПередачи.СоздатьДокумент();
						Акт.Дата = ТекущаяДата();
						Акт.Организация = Справочники.Организации.НайтиПоНаименованию("ООО «ДиДжи Финанс Рус»", Истина);
						Акт.Автор = Сотрудник;
						
						Акт.ПодразделениеПередающее = ТекущийОтветственный.Подразделение;
						Акт.СотрудникПередающий = ТекущийОтветственный;
						Акт.ТипСотрудникаПередающего = ТекущийОтветственный.ТипСотрудника;
						
						Акт.ПодразделениеПринимающее = Сотрудник.Подразделение;
						Акт.СотрудникПринимающий = Сотрудник;
						Акт.ТипСотрудникаПринимающего = Сотрудник.ТипСотрудника;
						
						Стр = Акт.Объекты.Добавить();
						Стр.Объект = Объект.Объект;
						Попытка
						
							Акт.Записать(РежимЗаписиДокумента.Проведение);
						
						Исключение
							Сообщить("Не удалось передать договор!");
						КонецПопытки;
					
					КонецЕсли; 
				
				КонецЕсли;
				//
				
				Записать();
						    
				Если ВыполнитьФункциюДопРеквизитов(Отказ) ИЛИ Отказ Тогда
					ВызватьИсключение "!!!";
				КонецЕсли;
							
				ПродолжитьВыполнениеБП(Отказ);
				Если Отказ Тогда
					ВызватьИсключение "!!!";
				КонецЕсли;
				Элементы.ДекорацияВыполнено.Видимость = Истина;
				Элементы.ФормаОтменитьВыполнение.Доступность = Истина;
				
				//СоздатьСлед	
				ЗафиксироватьТранзакцию();
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;			
		ЗафиксироватьТранзакцию();
		Возврат Ложь;
	Исключение
		ОтменитьТранзакцию();
		Отказ = Истина;
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

&НаСервере
Функция ПолучитьМоментВремени(ДатаВыполнения)
	Возврат Задачи.Мероприятие.ПолучитьМоментВремени(ДатаВыполнения);
КонецФункции

&НаСервере
Процедура СохранитьСостояниеБП()
	Если Не Объект.БизнесПроцесс.Пустая() Тогда
		Объект.ВыполненныеСтрелки.Загрузить(Объект.БизнесПроцесс.ВыполненныеСтрелки.Выгрузить());
		Объект.ЗапущенныеСтадии.Загрузить(Объект.БизнесПроцесс.ЗапущенныеСтадии.Выгрузить());
	КонецЕсли;
КонецПроцедуры
              
&НаСервере
Функция ВыполнитьФункциюДопРеквизитов(Отказ)
	Попытка
		Если Не Объект.Результат.ФункцияДопРеквизитов.Пустая() Тогда
			МероприятиеТекущее = РеквизитФормыВЗначение("Объект");
			Справочники.ФункцииДополнительныхРеквизитов.ВычислитьФункцию(Объект.Результат.ФункцияДопРеквизитов.Функция,
					МероприятиеТекущее, Неопределено, Отказ);
			ЗначениеВРеквизитФормы(МероприятиеТекущее, "Объект");
		КонецЕсли;
		Возврат Ложь;
	Исключение
		Сообщить(ОписаниеОшибки());
		Отказ = Истина;
		Возврат Истина;
	КонецПопытки;
КонецФункции

&НаСервере
Процедура ПродолжитьВыполнениеБП(Отказ)
	Если Объект.БизнесПроцесс <> Неопределено И Не Объект.БизнесПроцесс.Пустая() Тогда
		Объект.БизнесПроцесс.ПолучитьОбъект().ПродолжитьВыполнениеБП(Отказ, Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СоздатьСледующееМероприятие(Отказ)
	НовоеМероприятие = Задачи.Мероприятие.СоздатьЗадачу();
	НовоеМероприятие.Дата = ТекущаяДата();
	
	НовоеМероприятие.Объект = Объект.Объект; 
    НовоеМероприятие.ТипМероприятия = Объект.Результат.ТипСледующегоМероприятия;
	
	НовоеМероприятие.Организация = Объект.Организация;
	НовоеМероприятие.Подразделение = Объект.Подразделение;
	НовоеМероприятие.Ответственный = ?(Объект.Результат.ТипСотрудника.Пустая(), 
			ПланыВидовХарактеристик.ТипыСотрудников.РуководительПодразделения, Объект.Результат.ТипСотрудника);
		
	НовоеМероприятие.ПланируемаяДата = ТекущаяДата();
	НовоеМероприятие.Автор = Объект.Ссылка;
	
	Если Не НовоеМероприятие.ТипМероприятия.ФункцияПередСозданиемИзБП.Пустая() Тогда
		Справочники.ФункцииДополнительныхРеквизитов.ВычислитьФункцию(
				НовоеМероприятие.ТипМероприятия.ФункцияПередСозданиемИзБП.Функция, НовоеМероприятие, НовоеМероприятие);
	КонецЕсли;
	//++КазанцевЯА-БП
	Если Константы.КонтрольСроковМероприятий.Получить() И НовоеМероприятие.ТипМероприятия.СрокВыполнения > 0 Тогда 
		НовоеМероприятие.СрокВыполнения = ТекущаяДата() + НовоеМероприятие.ТипМероприятия.СрокВыполнения * 60;
		ОсновнойКалендарьПредприятия = Константы.ОсновнойКалендарьПредприятия.Получить();
		Если Константы.ПереноситьВыходныеИПраздникиМероприятий.Получить() И ЗначениеЗаполнено(ОсновнойКалендарьПредприятия) Тогда
			УстановитьПривилегированныйРежим(Истина);
			ПроизводственныйКалендарь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнойКалендарьПредприятия, "ПроизводственныйКалендарь");
			ПараметрыПолучения = КалендарныеГрафики.ПараметрыПолученияБлижайшихРабочихДат();
			ПараметрыПолучения.ПолучатьПредшествующие = Ложь;
			ПараметрыПолучения.ВызыватьИсключение = Ложь;
			свДата = НачалоДня(НовоеМероприятие.СрокВыполнения);
			свВремя =  НовоеМероприятие.СрокВыполнения - свДата;
			мСрокВыполнения = Новый Массив;
			мСрокВыполнения.Добавить(свДата);
			ДниКалендаря = КалендарныеГрафики.БлижайшиеРабочиеДаты(ПроизводственныйКалендарь, мСрокВыполнения, ПараметрыПолучения);
			НовоеМероприятие.СрокВыполнения = ДниКалендаря.Получить(свДата) + свВремя;
			УстановитьПривилегированныйРежим(Ложь);	
		КонецЕсли;
	КонецЕсли;
	//--КазанцевЯА-БП
	
	Попытка
		НовоеМероприятие.Записать();
		Автоинформирование.СформироватьЗаданиеИзБизнесПроцесса(НовоеМероприятие);
	Исключение
		Отказ = Истина;
		Возврат;
	КонецПопытки;
КонецПроцедуры

&НаСервере
Функция ПолучитьОтветственного(ОбъектСсылка, ОбъектПодразделение)
	Набор = РегистрыСведений.ОтветственныеСотрудники.СоздатьМенеджерЗаписи();
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ИсполнительныеДокументы") Тогда
		Набор.Объект = ОбъектСсылка.Владелец;
	Иначе
		Набор.Объект = ОбъектСсылка;
	КонецЕсли;
	Набор.ТипСотрудника = ПланыВидовХарактеристик.ТипыСотрудников.РуководительПодразделения;
	Набор.Прочитать();
	Если Не Набор.Пользователь.Пустая() Тогда
		Возврат Набор.Пользователь;
	КонецЕсли;
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОбъектыВРаботеОстатки.Сотрудник
	                      |ИЗ
	                      |	РегистрНакопления.ОбъектыВРаботе.Остатки(
	                      |			,
	                      |			Подразделение = &Подразделение
	                      |				И Объект = &Объект
	                      |				И Сотрудник <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК ОбъектыВРаботеОстатки");
	Запрос.УстановитьПараметр("Подразделение", ОбъектПодразделение);
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ИсполнительныеДокументы") Тогда
		Запрос.УстановитьПараметр("Объект", ОбъектСсылка.Владелец);
	Иначе
		Запрос.УстановитьПараметр("Объект", ОбъектСсылка);
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Сотрудник;
	Иначе
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоДереву(Команда)
	#Если ВебКлиент Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Сценарии диалога не поддерживаются на Веб-Клиенте!");
		Сообщение.Сообщить();
		Возврат;
	#КонецЕсли	
	
	
	
	Если Объект.ТипМероприятия.Пустая() Тогда
		Предупреждение("Тип мероприятия должен быть заполнен!");
		Возврат;
	Иначе                       
		//Объект.Исполнитель = ПараметрыСеанса.ТекущийПользователь;
		Если Не ЗначениеЗаполнено(Объект.ФактическаяДата) Тогда
			Объект.ФактическаяДата = ТекущаяДата();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.ПланируемаяДата) Тогда
			Объект.ПланируемаяДата = ТекущаяДата();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.ПланируемоеВремя) Тогда
			Объект.ПланируемоеВремя = ТекущаяДата();
		КонецЕсли;
		Сценарий = ПолучитьСценарийДиалогаПоТипуМероприятия(Объект.ТипМероприятия);
		Если Сценарий.Пустая() Тогда
			Сообщить("Для данного типа мероприятия сценарий диалога не определен!");
		Иначе
			Форма = ПолучитьФорму("Обработка.СценарийДиалога.Форма.ФормаОбработки",,ЭтаФорма);
			Форма.Макет = Сценарий;
			Форма.Открыть();
			//Чуров А.И.
			//Если ОткрытьФорму(Форма) = Истина Тогда
			////Если Форма.ОткрытьМодально() = Истина Тогда
			//	РезультатПриИзменении(Элементы.Результат);
			//КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСценарийДиалогаПоТипуМероприятия(ТипМероприятия)
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСкоринга.ПустаяСсылка) КАК Скоринг,
	                      |	ЗНАЧЕНИЕ(Справочник.Категории.ПустаяСсылка) КАК Категория
	                      |ПОМЕСТИТЬ Таблица
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	СостоянияПоКатегориямОстатки.Скоринг,
	                      |	СостоянияПоКатегориямОстатки.Категория
	                      |ИЗ
	                      |	РегистрНакопления.СостоянияПоКатегориям.Остатки(, Объект = &Объект) КАК СостоянияПоКатегориямОстатки
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	НастройкаСценариев.Сценарий
	                      |ИЗ
	                      |	Таблица КАК Таблица,
	                      |	РегистрСведений.НастройкаСценариев КАК НастройкаСценариев
	                      |ГДЕ
	                      |	(Таблица.Скоринг = НастройкаСценариев.Скоринг
	                      |			ИЛИ НастройкаСценариев.Скоринг = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСкоринга.ПустаяСсылка))
	                      |	И (Таблица.Категория = НастройкаСценариев.Категория
	                      |			ИЛИ НастройкаСценариев.Категория = ЗНАЧЕНИЕ(Справочник.Категории.ПустаяСсылка))
	                      |	И НастройкаСценариев.Используется = ИСТИНА
	                      |	И НастройкаСценариев.ТипМероприятия = &ТипМероприятия
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	НастройкаСценариев.Приоритет УБЫВ");
	Запрос.УстановитьПараметр("Объект", Объект.Объект);
	Запрос.УстановитьПараметр("ТипМероприятия", ТипМероприятия);	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Сценарий;
	Иначе
		Возврат ПредопределенноеЗначение("Справочник.ДеревоРешений.ПустаяСсылка");	
	КонецЕсли;	
КонецФункции

&НаКлиенте
Процедура РезультатПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(Объект.ФактическаяДата) Тогда
		Объект.ФактическаяДата = ТекущаяДата();
	КонецЕсли;
	
	ДобавитьДополнительныеРеквизиты();
	
	СвязанныйДокумент = ЗаполнитьДанныеПоРезультату();
	Если СвязанныйДокумент = ПредопределенноеЗначение("Перечисление.ВидыСвязанныхДокументов.ОбещанныйПлатеж") Тогда
		Элементы.СвязанныйДокумент.Доступность = Истина;
		Если Элемент <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(Объект.СвязанныйДокумент) ИЛИ 
					ТипЗнч(Объект.СвязанныйДокумент) <> Тип("ДокументСсылка.ОбещанныеПлатежи") Тогда
				Форма = ПолучитьФорму("Документ.ОбещанныеПлатежи.Форма.ФормаДокумента",, ЭтаФорма);	
				Форма.Объект.Объект = Объект.Объект;
				// Процедура не работает из связанного документа!
				ЗакрепитьДолжникаНаСервере();
		        ПоказатьОповещениеПользователя("Обещание",,"Обещание успешно установлено",БиблиотекаКартинок.Информация32);
				Форма.ОткрытьМодально();
				Если Не Форма.Объект.Ссылка.Пустая() Тогда
					Объект.СвязанныйДокумент = Форма.Объект.Ссылка;
				Иначе
					Объект.СвязанныйДокумент = ПредопределенноеЗначение("Документ.ОбещанныеПлатежи.ПустаяСсылка");
				КонецЕсли;
			Иначе
				//Чуров
				//ПоказатьЗначение(,Объект.СвязанныйДокумент);
				ОткрытьЗначение(Объект.СвязанныйДокумент);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СвязанныйДокумент = ПредопределенноеЗначение("Перечисление.ВидыСвязанныхДокументов.НеподтвержденныйПлатеж") 
			Тогда
		Элементы.СвязанныйДокумент.Доступность = Истина;
		Если Элемент <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(Объект.СвязанныйДокумент) ИЛИ 
					ТипЗнч(Объект.СвязанныйДокумент) <> Тип("ДокументСсылка.НеподтвержденныеПлатежи") Тогда
				Форма = ПолучитьФорму("Документ.НеподтвержденныеПлатежи.Форма.ФормаДокумента",, ЭтаФорма);	
				Форма.Объект.Объект = Объект.Объект;	
				//Чуров А.И.
				ОткрытьФорму(Форма);
				//Форма.ОткрытьМодально();
				Если Не Форма.Объект.Ссылка.Пустая() Тогда
					Объект.СвязанныйДокумент = Форма.Объект.Ссылка;
				Иначе
					Объект.СвязанныйДокумент = ПредопределенноеЗначение("Документ.НеподтвержденныеПлатежи.ПустаяСсылка");
				КонецЕсли;	
			Иначе
				//ПоказатьЗначение(,Объект.СвязанныйДокумент);
				ОткрытьЗначение(Объект.СвязанныйДокумент); 
			КонецЕсли;      
		КонецЕсли;	
		
	ИначеЕсли СвязанныйДокумент = ПредопределенноеЗначение("Перечисление.ВидыСвязанныхДокументов.ПрикрепитьФайлы") Тогда
		Элементы.СвязанныйДокумент.Доступность = Истина;
		Если ТипЗнч(Объект.СвязанныйДокумент) <> Тип("ДокументСсылка.ПрикрепитьФайлы") Тогда
			Объект.СвязанныйДокумент = ПредопределенноеЗначение("Документ.ПрикрепитьФайлы.ПустаяСсылка");
		КонецЕсли;
			
	ИначеЕсли СвязанныйДокумент = ПредопределенноеЗначение("Перечисление.ВидыСвязанныхДокументов.УдалитьРеструктуризацияДолга") Тогда	
		Элементы.СвязанныйДокумент.Доступность = Истина;
		Если ТипЗнч(Объект.СвязанныйДокумент) <> Тип("ДокументСсылка.УдалитьРеструктуризацияДолга") Тогда
			Объект.СвязанныйДокумент = ПредопределенноеЗначение("Документ.УдалитьРеструктуризацияДолга.ПустаяСсылка");
		КонецЕсли;
		
	ИначеЕсли СвязанныйДокумент = ПредопределенноеЗначение("Перечисление.ВидыСвязанныхДокументов.ЗагрузкаЗадолженности") Тогда	
		Элементы.СвязанныйДокумент.Доступность = Истина;
		Если ТипЗнч(Объект.СвязанныйДокумент) <> Тип("ДокументСсылка.ЗагрузкаЗадолженности") Тогда
			Объект.СвязанныйДокумент = ПредопределенноеЗначение("Документ.ЗагрузкаЗадолженности.ПустаяСсылка");
		КонецЕсли;
		
	ИначеЕсли СвязанныйДокумент = ПредопределенноеЗначение("Перечисление.ВидыСвязанныхДокументов.ПоступлениеПлатежей") Тогда	
		Элементы.СвязанныйДокумент.Доступность = Истина;
		Если ТипЗнч(Объект.СвязанныйДокумент) <> Тип("ДокументСсылка.ПоступлениеПлатежей") Тогда
			Объект.СвязанныйДокумент = ПредопределенноеЗначение("Документ.ПоступлениеПлатежей.ПустаяСсылка");
		КонецЕсли;
		
	ИначеЕсли СвязанныйДокумент = ПредопределенноеЗначение("Перечисление.ВидыСвязанныхДокументов.АктуализацияЗадолженности") Тогда	
		Элементы.СвязанныйДокумент.Доступность = Истина;
		Если ТипЗнч(Объект.СвязанныйДокумент) <> Тип("ДокументСсылка.АктуализацияЗадолженности") Тогда
			Объект.СвязанныйДокумент = ПредопределенноеЗначение("Документ.АктуализацияЗадолженности.ПустаяСсылка");
		КонецЕсли;
		
	ИначеЕсли СвязанныйДокумент = ПредопределенноеЗначение("Перечисление.ВидыСвязанныхДокументов.ВходящаяКорреспонденция") Тогда	
		Элементы.СвязанныйДокумент.Доступность = Истина;
		Если ТипЗнч(Объект.СвязанныйДокумент) <> Тип("СправочникСсылка.ВходящаяКорреспонденция") Тогда
			Объект.СвязанныйДокумент = ПредопределенноеЗначение("Справочник.ВходящаяКорреспонденция.ПустаяСсылка");
		КонецЕсли;
	ИначеЕсли СвязанныйДокумент = ПредопределенноеЗначение("Перечисление.ВидыСвязанныхДокументов.ИсходящаяКорреспонденция") Тогда	
		Элементы.СвязанныйДокумент.Доступность = Истина;
		Если ТипЗнч(Объект.СвязанныйДокумент) <> Тип("СправочникСсылка.ИсходящаяКорреспонденция") Тогда
			Объект.СвязанныйДокумент = ПредопределенноеЗначение("Справочник.ИсходящаяКорреспонденция.ПустаяСсылка");
		КонецЕсли;
	// Лебедева 05.06.2018 => 06.06.2018
	ИначеЕсли СвязанныйДокумент = ПредопределенноеЗначение("Перечисление.ВидыСвязанныхДокументов.ЗавершениеРаботыОрганизации") Тогда	
		Элементы.СвязанныйДокумент.Доступность = Истина;
		Если Не ЗначениеЗаполнено(Объект.СвязанныйДокумент) ИЛИ  ТипЗнч(Объект.СвязанныйДокумент) <> Тип("ДокументСсылка.ЗавершениеРаботыОрганизации") Тогда
			Форма = ПолучитьФорму("Документ.ЗавершениеРаботыОрганизации.Форма.ФормаДокумента",, ЭтаФорма);
			//Заполнение ДО = > из Мероприятия
			Форма.Объект.Объекты.Очистить();
			СтрокаДО = Форма.Объект.Объекты.Добавить();
			СтрокаДО.Объект = Объект.Объект; 
			ОткрытьФорму(Форма);
			Если Не Форма.Объект.Ссылка.Пустая() Тогда
				Объект.СвязанныйДокумент = Форма.Объект.Ссылка;
			Иначе
				Объект.СвязанныйДокумент = ПредопределенноеЗначение("Документ.ЗавершениеРаботыОрганизации.ПустаяСсылка");
			КонецЕсли;
		Иначе
			ОткрытьЗначение(Объект.СвязанныйДокумент);
		КонецЕсли;
	ИначеЕсли СвязанныйДокумент = ПредопределенноеЗначение("Перечисление.ВидыСвязанныхДокументов.АктПередачи") Тогда	
		Элементы.СвязанныйДокумент.Доступность = Истина;
		Элементы.СвязанныйДокумент.Доступность = Истина;
		Если ТипЗнч(Объект.СвязанныйДокумент) <> Тип("ДокументСсылка.АктПередачи") Тогда
			Объект.СвязанныйДокумент = ПредопределенноеЗначение("Документ.АктПередачи.ПустаяСсылка");
		КонецЕсли;
		//Если Не ЗначениеЗаполнено(Объект.СвязанныйДокумент) ИЛИ 
		//	ТипЗнч(Объект.СвязанныйДокумент) <> Тип("ДокументСсылка.АктПередачи") Тогда
		//	Форма = ПолучитьФорму("Документ.АктПередачи.Форма.ФормаДокумента",, ЭтаФорма);
		//	//Заполнение реквизитов Акта из результата мероприятия
		//	Форма.Объект.Организация = ОбъектыСервер.РазыменоватьСсылку(Объект.Результат, "Организация");
		//	Форма.Объект.ПодразделениеПринимающее = ОбъектыСервер.РазыменоватьСсылку(Объект.Результат, "ПодразделениеПринимающее");
		//	Форма.Объект.СотрудникПринимающий = ОбъектыСервер.РазыменоватьСсылку(Объект.Результат, "СотрудникПринимающий");
		//	Форма.Объект.ТипСотрудникаПринимающего = ОбъектыСервер.РазыменоватьСсылку(Объект.Результат, "ТипСотрудникаПринимающего");
		//	Форма.Объект.ПодразделениеПередающее = ОбъектыСервер.РазыменоватьСсылку(Объект.Результат, "ПодразделениеПередающее");
		//	Форма.Объект.СотрудникПередающий = ОбъектыСервер.РазыменоватьСсылку(Объект.Результат, "СотрудникПередающий");
		//	Форма.Объект.ТипСотрудникаПередающего = ОбъектыСервер.РазыменоватьСсылку(Объект.Результат, "ТипСотрудникаПередающего");
		//	//Заполнение ДО = > из Мероприятия
		//	Форма.Объект.Объекты.Очистить();
		//	СтрокаДО = Форма.Объект.Объекты.Добавить();
		//	СтрокаДО.Объект = Объект.Объект; 
		//	СтрокаДО.ДолговоеОбязательство = Объект.Объект;
		//	ОткрытьФорму(Форма);
		//	Если Не Форма.Объект.Ссылка.Пустая() Тогда
		//		Объект.СвязанныйДокумент = Форма.Объект.Ссылка;
		//	Иначе
		//		Объект.СвязанныйДокумент = ПредопределенноеЗначение("Документ.АктПередачи.ПустаяСсылка");
		//	КонецЕсли;
		//Иначе
		//	ОткрытьЗначение(Объект.СвязанныйДокумент);
		//КонецЕсли;
	Иначе
		Объект.СвязанныйДокумент = Неопределено;
		Элементы.СвязанныйДокумент.Доступность = Ложь;
	КонецЕсли;
	
	//
	Если Не Объект.Результат.Пустая() И Не ОбъектыСервер.РазыменоватьСсылку(Объект.Результат, "СвязанныйДокумент.Пустая()") И
			ОбъектыСервер.РазыменоватьСсылку(Объект.Результат, "ПрикрепитьФайл") Тогда
		Элементы.СвязанныйДокумент.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Элементы.СвязанныйДокумент.АвтоОтметкаНезаполненного = Неопределено;
	КонецЕсли;
	
	//
	Элементы.Комментарий.АвтоОтметкаНезаполненного = ?(ОбъектыСервер.РазыменоватьСсылку(Объект.Результат, 
			"ЗаполнитьКомментарий"), Истина, Неопределено);
	
	Если Элемент <> Неопределено Тогда
		ЗаполнитьКомментарий();
	КонецЕсли;
	//Лебедева, 26.02.2018 если у РЕЗУЛЬАТАТА МЕРОПРИЯТИЯ связанный документ = прикрепить файлы, тогда показываем кнопку "Файл".
	Элементы.ПрикрепитьФайл.Видимость = ОбъектыСервер.РазыменоватьСсылку(Объект.Результат, "ПрикреплятьФайлВМероприятие");
	Элементы.ПрикрепитьАктПередачи.Видимость = ОбъектыСервер.РазыменоватьСсылку(Объект.Результат, "ПрикреплятьАктПередачи");
	ДобавитьДополнительныеРеквизитыОбъекта();   
	ПроверитьДопРеквизитыВРезультате();
КонецПроцедуры

//Заполнение комментария по  шаблону
&НаКлиенте
Функция ЗаполнитьКомментарий()
	Если ЗначениеЗаполнено(Объект.Результат) Тогда
		Результат = ВыполнитьФункциюКомментария();
		ДлинаБезТочки = СтрДлина(Результат) - 1;
		Если Объект.КомментарийИзменен ИЛИ Объект.Выполнена Тогда
			//Если Лев(Результат, ДлинаБезТочки) <> Лев(Объект.Комментарий, ДлинаБезТочки) Тогда
			//	Объект.Комментарий = Результат + Символы.ПС + Объект.Комментарий;
			//КонецЕсли;
		Иначе
			Объект.Комментарий = Результат;
		КонецЕсли;
	КонецЕсли;	
КонецФункции 

&НаСервере
Функция ВыполнитьФункциюКомментария()
	Значение = "";	
	ПеренестиТЧДопРеквизиты();
	Реквизит = РеквизитФормыВЗначение("Объект");	
 	Возврат Справочники.ФункцииКомментариев.ВычислитьФункцию(Объект.Результат.ШаблонКомментария.Функция, Реквизит,
			Значение);	
КонецФункции

&НаСервере
Функция ЗаполнитьДанныеПоРезультату()
	Если Объект.Результат.Пустая() Тогда
		Объект.СледующееМероприятие = Неопределено;
		Возврат "";
	Иначе
		Объект.СледующееМероприятие = Объект.Результат.ТипСледующегоМероприятия;
		Возврат Объект.Результат.СвязанныйДокумент;
	КонецЕсли;
	
	//Элементы.КонтактноеЛицо.АвтоОтметкаНезаполненного = Объект.Результат.УказатьКонтактноеЛицо;
	//Элементы.ПрикрепитьФайл.АвтоОтметкаНезаполненного = Объект.Результат.ПрикрепитьФайл;
КонецФункции

&НаСервере
Процедура ПроверкаЗаполненияПолейПередВыполнением(Отказ, ТекстСообщения)
	ТекстСообщения = "";
	ОтказПроверкиЗаполнения = Ложь;
	Если Объект.Результат.Пустая() И Не МероприятиеБезРезультатов() Тогда
		ОтказПроверкиЗаполнения = Истина;
		ТекстСообщения = "Результат мероприятия должен быть определен!";
		//Возврат;
	КонецЕсли;
	Если Не ОтказПроверкиЗаполнения И Объект.Результат.УказатьКонтактноеЛицо И 
			Объект.КонтактноеЛицо.Пустая() Тогда
		ОтказПроверкиЗаполнения = Истина;
		ТекстСообщения = "Поле ""Контактное лицо"" должно быть заполнено!";
		//Возврат;
	КонецЕсли;
	Если Не ОтказПроверкиЗаполнения И Объект.Результат.ПрикрепитьФайл И 
				Не ЗначениеЗаполнено(Объект.СвязанныйДокумент) Тогда
		ОтказПроверкиЗаполнения = Истина;
		ТекстСообщения = "Связанный документ должен быть указан!";
		//Возврат;
	КонецЕсли;
	Если Не ОтказПроверкиЗаполнения И Объект.Результат.ЗаполнитьКомментарий И 
			Не ЗначениеЗаполнено(Объект.Комментарий) Тогда
		ОтказПроверкиЗаполнения = Истина;
		ТекстСообщения = "Комментарий должен быть заполнен!";
		//Возврат;
	КонецЕсли;
	Отказ = ОтказПроверкиЗаполнения;
КонецПроцедуры

&НаСервере
Функция МероприятиеБезРезультатов()
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	РезультатыМероприятий.Ссылка
	                      |ИЗ
	                      |	Справочник.РезультатыМероприятий КАК РезультатыМероприятий
	                      |ГДЕ
	                      |	РезультатыМероприятий.Владелец = &Владелец");
	Запрос.УстановитьПараметр("Владелец", Объект.ТипМероприятия);
	Возврат Запрос.Выполнить().Пустой();
КонецФункции

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	//Чуров
	//Дублирует стандартную обработку 
	
	//СтандартнаяОбработка = Ложь;
	//Если Модифицированность Тогда
	//	
		//Ответ = Вопрос("Данные были изменены! Сохранить изменения?", 
		//		РежимДиалогаВопрос.ДаНетОтмена,,, "Сохранить изменения?");
		//Если Ответ = КодВозвратаДиалога.Да Тогда
		//	Записать();
		//ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
		//	Отказ = Истина;
		//Иначе
		//	Модифицированность = Ложь;
		//КонецЕсли;
	//КонецЕсли;
	
	
	
	//
	//ОбъектыСервер.УдалитьПометкуОбИзменении(Отказ, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// Обновить родителя формы
	Если ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("ТаблицаФормы") Тогда
		ЭтаФорма.ВладелецФормы.Обновить();
	КонецЕсли;
	Оповестить("ОбновитьТД");
КонецПроцедуры

&НаСервере
функция ПроверкаТелефонныйЗвонокИсходящий()
	Возврат Справочники.ТипыМероприятий.ТелефонныйЗвонокИсходящий;	
КонецФункции

// Серверная процедура при открытии карты
&НаСервере
Процедура ПриОткрытииНаСервере(Отказ)
	Если ЭтаФорма.ДолговоеОбязательство.Пустая() Тогда
		Возврат;
	Иначе
		// Получим непредопределенное значение с сервера
		// Архив
		ДО = ЭтаФорма.ДолговоеОбязательство.ПолучитьОбъект();
		Архив = Справочники.тсЗначенияСвойствОбъектов.НайтиПоНаименованию("Архив");
		Категория = ОбъектыСервер.ПолучитьЗначениеСвойства(ДО, "0181");
		Если Категория = Архив Тогда
			ЭтаФорма.ПредупреждениеАрхив = Истина;
		КонецЕсли;
		// ЮД
		ДО = ЭтаФорма.ДолговоеОбязательство.ПолучитьОбъект();
		ЮД = Справочники.тсЗначенияСвойствОбъектов.НайтиПоНаименованию("Передано в ЮД");
		Причина = ОбъектыСервер.ПолучитьЗначениеСвойства(ДО, "0182");
		Если Причина = ЮД Тогда
			ЭтаФорма.ПредупреждениеЮД = Истина;
		КонецЕсли;
		// Ответственный
		ДО = ЭтаФорма.ДолговоеОбязательство.ПолучитьОбъект();
		ДолговоеОбязательствоОтветственный = ОбъектыСервер.ПолучитьЗначениеСвойства(ДО, "0183");
		Если ЗначениеЗаполнено(ДолговоеОбязательствоОтветственный) = Истина Тогда
			Элементы.ДолговоеОбязательствоОтветственный.Видимость = Истина
		Иначе
			Элементы.ДолговоеОбязательствоОтветственный.Видимость = Ложь
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
	
&НаКлиенте
Процедура ПриОткрытии(Отказ)	
	// Проверить состояние микрофона
	ПодключитьОбработчикОжидания("ПроверитьСостояниеМикрофона", 1, Истина);
	// Проверить состояние разговора
	ПодключитьОбработчикОжидания("ПроверитьСостояниеРазговора", 1, Истина);
	ПриОткрытииНаСервере(Отказ);
	РасчетУсловийНаСервере();
	ТипМероприятияПриИзменении(Неопределено);
	ДобавитьДополнительныеРеквизиты();
	Если НЕ Объект.КомментарийИзменен И Не Объект.Выполнена Тогда 
		ЗаполнитьКомментарий();
	КонецЕсли;	
	Если Объект.Ссылка.Пустая() И Объект.ТипМероприятия = ПроверкаТелефонныйЗвонокИсходящий() Тогда
		//Форма = ПолучитьФорму("Обработка.СценарийДиалога.Форма.ФормаОбработки",,ЭтаФорма);
		//Форма.Макет = ПолучитьСценарийДиалогаПоТипуМероприятия(Объект.ТипМероприятия);
		//Если НЕ Форма.Макет.Пустая() Тогда
		//	Если Не ЗначениеЗаполнено(Объект.ФактическаяДата) Тогда
		//		Объект.ФактическаяДата = ТекущаяДата();
		//	КонецЕсли;
		//	Если Не ЗначениеЗаполнено(Объект.ПланируемаяДата) Тогда
		//		Объект.ПланируемаяДата = ТекущаяДата();
		//	КонецЕсли;
		//	Если Не ЗначениеЗаполнено(Объект.ПланируемоеВремя) Тогда
		//		Объект.ПланируемоеВремя = ТекущаяДата();
		//	КонецЕсли;
		//	
		//	Если Форма.ОткрытьМодально() = Истина Тогда
		//		РезультатПриИзменении(Неопределено);                    
		//	КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
	
	//ЦКТ получение IP адреса
	//Чуров А.И.
	//Если РаботаСЦКТСервер.ТекущийIPАдрес() = "" Тогда
	//	//РаботаСЦКТСервер.ТекущийIPАдрес(РаботаСЦКТКлиент.ПолучитьIpАдрес());
	//КонецЕсли;
	
	//Если РаботаСЦКТСервер.АдресОбъектаЦКТ() = "" Тогда
	//	РаботаСЦКТСервер.АдресОбъектаЦКТ(РаботаСЦКТКлиент.СоздатьОбъектЦКТ());	
	//КонецЕсли;	
	
	//Чуров А.И.
	//ТекущийIPАдрес = РаботаСЦКТСервер.ТекущийIPАдрес();
	//
	
	// Попытки необходимы, чтобы при создании мероприятия из Рабочего стола заполнялся "объект".
	// Первая попытка заполняет объект, если выбран пользователь на Рабочем Столе (при нажатии кнопки "Создать").
	// Вторая попытка заполняет объект, если выбрано ДолговоеОбязательство на Рабочем столе (при нажатии кнопки "Создать")
	Попытка
		Объект.Объект = ЭтаФорма.ВладелецФормы.Родитель.Родитель.Родитель.Элементы.СписокДО.ТекущиеДанные.Объект;
	Исключение
	КонецПопытки;
	Попытка
		Объект.Объект = ЭтаФорма.ВладелецФормы.Родитель.Родитель.Родитель.ТекущийЭлемент.ТекущиеДанные.ДолговыеОбязательства;
	Исключение	
	КонецПопытки;
	
	Элементы.ГруппаЗаписьРазговора.Видимость = ЗначениеЗаполнено(Объект.бтЗаписьРазговора);
	
	// Проверка на пустое ДО
	Если ЗначениеЗаполнено(ЭтаФорма.Объект.Объект) = Ложь Тогда
		НеопознанноеДОНаСервере();
		ЭтаФорма.Объект.Объект = ЭтаФорма.НеопознанноеДО;
	КонецЕсли;
	// Присвоить контакт должника по умолчанию
	Если ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда
		ОбъектДолжник = ОбъектыСервер.РазыменоватьСсылку(Объект.Объект, "Должник");
	ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		ОбъектДолжник = Объект.Объект;
	КонецЕсли;
	Если ЭтаФорма.Объект.ТипМероприятия <> ПредопределенноеЗначение("Справочник.ТипыМероприятий.ТелефонныйЗвонокВходящий")
		И ЭтаФорма.Элементы.Контакт.СписокВыбора.Количество() > 0 Тогда
		НачалоСпискаВыбора = 0;
		Успех = Ложь;
		Пока НачалоСпискаВыбора < ЭтаФорма.Элементы.Контакт.СписокВыбора.Количество() И Успех = Ложь Цикл
			Представление = ЭтаФорма.Элементы.Контакт.СписокВыбора.Получить(НачалоСпискаВыбора).Представление;
			ЧислоВхождений = СтрЧислоВхождений(ВРег(Представление), ВРег(ОбъектДолжник));
			Если ЧислоВхождений = 1 Тогда
				ЭтаФорма.Объект.Контакт = ЭтаФорма.Элементы.Контакт.СписокВыбора.Получить(НачалоСпискаВыбора).Значение;
				Успех = Истина;
			КонецЕсли;
			НачалоСпискаВыбора = НачалоСпискаВыбора + 1;
		КонецЦикла;
		Если Успех = Ложь Тогда
			ПоказатьОповещениеПользователя("Предупреждение",,"Не удалось найти контакт должника. Пожалуйста, укажите его вручную",БиблиотекаКартинок.Предупреждение32);
		КонецЕсли;
	КонецЕсли;
	// Проверка на совпадения и архив
	Если ЗначениеЗаполнено(ЭтаФорма.Объект.Контакт) = Истина Тогда
		ФормаПоискаНомера = ПолучитьФорму("ОбщаяФорма.ПоискНомераВБазе");
		// Обрезать неинформативную часть
		ФормаПоискаНомера.Номер = Строка(Прав(Объект.Контакт, 7));
		ФормаПоискаНомера.ПриОткрытии(Неопределено);
		ФормаПоискаНомера.ПолучитьКоличествоСтрокВДинамическомСпискеНаСервере();
		Если ФормаПоискаНомера.ЕстьСовпадения = Истина Тогда
			ПоказатьОповещениеПользователя("Поиск совпадений",,"Найдены совпадения по номеру телефона",БиблиотекаКартинок.Предупреждение32);
		КонецЕсли;
		Если ЭтаФорма.ПредупреждениеАрхив = Истина Тогда
			Предупреждение("Договор находится в архиве");
		КонецЕсли;
		Если ЭтаФорма.ПредупреждениеЮД = Истина Тогда
			Предупреждение("Договор находится в ЮД");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НеопознанноеДОНаСервере()
	// Получим непредопределенное значение с сервера
	ЭтаФорма.НеопознанноеДО = Справочники.ДолговыеОбязательства.НайтиПоНаименованию("Неопознанный");
КонецПроцедуры

&НаСервере
Процедура ДобавитьДополнительныеРеквизиты()
	Элементы.КонтактноеЛицо.Видимость = (Не Объект.ТипМероприятия.Пустая() И 
			Не Объект.ТипМероприятия.ВидКИДляИсходящегоЗвонка.Пустая());
	Элементы.ГруппаКонтакт.Видимость = Элементы.КонтактноеЛицо.Видимость;	
	
	УправлениеСвойствами.ДобавитьДополнительныеРеквизиты(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТипМероприятияПриИзменении(Элемент)
	Если Объект.ТипМероприятия.Пустая() Тогда
		Объект.Результат = ПредопределенноеЗначение("Справочник.РезультатыМероприятий.ПустаяСсылка");
		Элементы.ФормаПечатьУЭД.Видимость = Ложь;
		Элементы.ОтправитьСМС.Видимость = Ложь;
		Элементы.ПрикрепитьФайл.Видимость = Ложь;
		Элементы.ПрикрепитьАктПередачи.Видимость = Ложь;
		Элементы.Инструкция.Видимость = Ложь;
		Объект.Контакт = "";
		Элементы.ГруппаКонтакт.Видимость = Ложь;
		Объект.КонтактноеЛицо = Неопределено;
		Элементы.КонтактноеЛицо.Видимость = Ложь;
		// Скрыть дополнительные элементы
		ЭтаФорма.Элементы.ВходящийЗвонок.Видимость = Ложь;
		ЭтаФорма.Элементы.ОткрытьИнструментПлатежныеСистемы.Видимость = Ложь;
		ЭтаФорма.Элементы.НаписатьВВЦ.Видимость = Ложь;
		Попытка
			Элементы.ФормаПозвонитьДолжнику.Доступность = Истина;
		Исключение
		КонецПопытки;
	Иначе
		Если ТипСотрудника.Пустая() И Не ЗначениеЗаполнено(Ответственный) Тогда
			ТипСотрудника = ОбъектыСервер.РазыменоватьСсылку(Объект.ТипМероприятия, "ТипСотрудника");
			ТипСотрудникаПриИзменении(Неопределено);
		КонецЕсли;
		
		Если Объект.Результат = ПредопределенноеЗначение("Справочник.РезультатыМероприятий.ПустаяСсылка") Тогда
			Объект.Результат = ПолучитьРезультатМероприятия(Объект.ТипМероприятия);
		КонецЕсли; 
		РезультатПриИзменении(Неопределено);
		
		Элементы.ФормаПечатьУЭД.Видимость = ОбъектыСервер.РазыменоватьСсылку(Объект.ТипМероприятия, 
				"КнопкаПечатиШаблона");
		Элементы.ОтправитьСМС.Видимость = ОбъектыСервер.РазыменоватьСсылку(Объект.ТипМероприятия, "КнопкаОтправкиСМС");
		
		// Интеграция с подсистемой ВЦ
		ТипВЦНаСервере();
		Если ЭтаФорма.Объект.ТипМероприятия = ТипВЦ Тогда
			ЭтаФорма.Элементы.НаписатьВВЦ.Видимость = Истина;
		ИначеЕсли ЗначениеЗаполнено(ЭтаФорма.Объект.ТипМероприятия) = Ложь ИЛИ ЭтаФорма.Объект.ТипМероприятия <> ТипВЦ Тогда
			ЭтаФорма.Элементы.НаписатьВВЦ.Видимость = Ложь;
		КонецЕсли;
		
		// Скрыть кнопку входящего звонка
		Если ЭтаФорма.Объект.ТипМероприятия = ПредопределенноеЗначение("Справочник.ТипыМероприятий.ТелефонныйЗвонокВходящий") Тогда
			ЭтаФорма.Элементы.ВходящийЗвонок.Видимость = Истина;
		Иначе
			ЭтаФорма.Элементы.ВходящийЗвонок.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.ОткрытьИнструментПлатежныеСистемы.Видимость = ОбъектыСервер.РазыменоватьСсылку(Объект.ТипМероприятия, "КнопкаПлатежныеСистемы");
		
		//Элементы.ПрикрепитьФайл.Видимость = ОбъектыСервер.РазыменоватьСсылку(Объект.ТипМероприятия, "КнопкаПрикрепленияФайла");
		
		Элементы.Инструкция.Заголовок = ОбъектыСервер.РазыменоватьСсылку(Объект.ТипМероприятия, "Инструкция");
		//Элементы.Инструкция.Видимость = ЗначениеЗаполнено(Инструкция);
		
		Если ОбъектыСервер.РазыменоватьСсылку(Объект.ТипМероприятия, "ВидКИДляИсходящегоЗвонка.Пустая()") Тогда
			Элементы.ГруппаКонтакт.Видимость = Ложь;
			Попытка
				Элементы.ФормаПозвонитьДолжнику.Доступность = Ложь;
			Исключение
			КонецПопытки;
		Иначе
			Элементы.ГруппаКонтакт.Видимость = Истина;
			Попытка
				Элементы.ФормаПозвонитьДолжнику.Доступность = Не ЗначениеЗаполнено(Объект.бтЗаписьРазговора); // могу звонить, только если нет записи разговора
			Исключение
			КонецПопытки;
			ЗаполнитьСписокКонтактов(Элемент = Неопределено);
		КонецЕсли;
		
		Попытка
			Если 
				//Объект.ТипМероприятия = ПредопределенноеЗначение("Справочник.ТипыМероприятий.ТелефонныйЗвонокИсходящий")
				//И НЕ 
				НЕ ОбъектыСервер.РазыменоватьСсылку(Объект.ТипМероприятия, "ВидКИДляИсходящегоЗвонка.Пустая()") Тогда
				Элементы.ФормаПозвонитьДолжнику.Доступность = Не ЗначениеЗаполнено(Объект.бтЗаписьРазговора); // могу звонить, только если нет записи разговора;
			Иначе
				Элементы.ФормаПозвонитьДолжнику.Доступность = Ложь;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	Если Объект.ТипМероприятия = ПредопределенноеЗначение("Справочник.ТипыМероприятий.ТелефонныйЗвонокВходящий") Тогда
		Элементы.ГруппаКонтакт.Видимость = Истина;
		Элементы.КонтактноеЛицо.Видимость = Истина;
	КонецЕсли;
	ДобавитьДополнительныеДанные();
	Сценарий = ПолучитьСценарийДиалогаПоТипуМероприятия(Объект.ТипМероприятия);
	Элементы.ФормаЗаполнитьПоДереву.Видимость = Не Сценарий.Пустая();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокКонтактов(ЭлементНеопределено)
	Элементы.Контакт.СписокВыбора.Очистить();
	Если Не ЭлементНеопределено Тогда
		Объект.Контакт = "";
	КонецЕсли;
	
	Если Не Объект.ТипМероприятия.ВидКИДляИсходящегоЗвонка.Пустая() Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ДополнительныеРеквизитыИСведения.Ссылка,
		                      |	ДополнительныеРеквизитыИСведения.ВидСтроки
		                      |ПОМЕСТИТЬ Табл
		                      |ИЗ
		                      |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		                      |ГДЕ
		                      |	ДополнительныеРеквизитыИСведения.ВидКИ = &ВидКИ
		                      |	И ДополнительныеРеквизитыИСведения.СправочникВладелец = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.Справочник_Контрагенты)
		                      |	И НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	ВложенныйЗапрос.Свойство КАК Свойство,
		                      |	ВложенныйЗапрос.Значение,
		                      |	Табл.ВидСтроки
		                      |ИЗ
		                      |	Табл КАК Табл
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                      |			ДополнительныеСведения.Свойство КАК Свойство,
		                      |			ДополнительныеСведения.Значение КАК Значение
		                      |		ИЗ
		                      |			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		                      |		ГДЕ
		                      |			ДополнительныеСведения.Объект = &Объект
		                      |		
		                      |		ОБЪЕДИНИТЬ ВСЕ
		                      |		
		                      |		ВЫБРАТЬ
		                      |			КонтрагентыДополнительныеРеквизиты.Свойство,
		                      |			КонтрагентыДополнительныеРеквизиты.Значение
		                      |		ИЗ
		                      |			Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
		                      |		ГДЕ
		                      |			КонтрагентыДополнительныеРеквизиты.Ссылка = &Объект) КАК ВложенныйЗапрос
		                      |		ПО Табл.Ссылка = ВложенныйЗапрос.Свойство
		                      |
		                      |ОБЪЕДИНИТЬ ВСЕ
		                      |
		                      |ВЫБРАТЬ
		                      |	КонтрагентыТелефоны.ВидТелефона,
		                      |	КонтрагентыТелефоны.Номер,
		                      |	КонтрагентыТелефоны.КонтактноеЛицо
		                      |ИЗ
		                      |	Справочник.Контрагенты.Телефоны КАК КонтрагентыТелефоны
		                      |ГДЕ
		                      |	КонтрагентыТелефоны.Ссылка = &Объект
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	Свойство");
		Запрос.УстановитьПараметр("ВидКИ", Объект.ТипМероприятия.ВидКИДляИсходящегоЗвонка);
		Запрос.УстановитьПараметр("Объект", КонтрагентКЛ);
		Результат = Запрос.Выполнить().Выбрать();
		Элементы.Контакт.СписокВыбора.Очистить();
		Пока Результат.Следующий() Цикл 
			Если Результат.ВидСтроки = Перечисления.ВидыТипаСтрока.Телефон Тогда
				Ном = Найти(Результат.Значение, ";");	
				Стр = Лев(Результат.Значение, Ном - 1);	
				
				Ном = Найти(Стр, ",");
				Если Ном > 0 Тогда
					Элементы.Контакт.СписокВыбора.Добавить(Лев(Стр, Ном - 1), Результат.Свойство.Наименование + ": " + Стр);	
				Иначе
					Элементы.Контакт.СписокВыбора.Добавить(Стр, Результат.Свойство.Наименование + ": " + Стр);
				КонецЕсли;
				
			ИначеЕсли Результат.ВидСтроки = Перечисления.ВидыТипаСтрока.Адрес Тогда
				Ном = Найти(Результат.Значение, ";");	
				Стр = Лев(Результат.Значение, Ном - 1);		
				Элементы.Контакт.СписокВыбора.Добавить(Стр, Результат.Свойство.Наименование + ": " + Стр);
			Иначе
				Стр = Результат.Значение;
				Ном = Найти(Стр, ";");
				Если ТипЗнч(Результат.Свойство) = Тип("СправочникСсылка.ВидыТелефонов") Тогда
					Если ЗначениеЗаполнено(Результат.ВидСтроки) Тогда
						Абонент = Результат.ВидСтроки.ТипОтношенияКДолжнику.Наименование + ": " + Результат.ВидСтроки.Наименование;
					Иначе
						Абонент = Строка(Результат.Свойство);
					КонецЕсли;
				Иначе
					Абонент = Результат.Свойство.Наименование;
				КонецЕсли;
				Пока Ном > 0 Цикл
					Элементы.Контакт.СписокВыбора.Добавить(Стр, Абонент + ": " + Лев(Стр, Ном - 1));
					Стр = Сред(Стр, Ном + 1);
				КонецЦикла;
				Если Стр <> "" Тогда
					Элементы.Контакт.СписокВыбора.Добавить(Стр, Абонент + ": " + Стр);
				КонецЕсли;
			КонецЕсли;		
		КонецЦикла;
		
		Если Объект.Контакт = "" И Элементы.Контакт.СписокВыбора.Количество() > 0 Тогда
			Объект.Контакт = Элементы.Контакт.СписокВыбора[0].Значение;
		КонецЕсли;
		
		// То же для долгового обязательства
		//////////////////////////////////
		Если ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	ДополнительныеРеквизитыИСведения.Ссылка,
			|	ДополнительныеРеквизитыИСведения.ВидСтроки
			|ПОМЕСТИТЬ Табл
			|ИЗ
			|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
			|ГДЕ
			|	ДополнительныеРеквизитыИСведения.ВидКИ = &ВидКИ
			|	И ДополнительныеРеквизитыИСведения.СправочникВладелец = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.Справочник_ДолговыеОбязательства)
			|	И НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВложенныйЗапрос.Свойство КАК Свойство,
			|	ВложенныйЗапрос.Значение,
			|	Табл.ВидСтроки
			|ИЗ
			|	Табл КАК Табл
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ДополнительныеСведения.Свойство КАК Свойство,
			|			ДополнительныеСведения.Значение КАК Значение
			|		ИЗ
			|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			|		ГДЕ
			|			ДополнительныеСведения.Объект = &Объект
			|		
			|		ОБЪЕДИНИТЬ ВСЕ
			|		
			|		ВЫБРАТЬ
			|			КонтрагентыДополнительныеРеквизиты.Свойство,
			|			КонтрагентыДополнительныеРеквизиты.Значение
			|		ИЗ
			|			Справочник.ДолговыеОбязательства.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
			|		ГДЕ
			|			КонтрагентыДополнительныеРеквизиты.Ссылка = &Объект) КАК ВложенныйЗапрос
			|		ПО Табл.Ссылка = ВложенныйЗапрос.Свойство
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КонтрагентыТелефоны.ВидТелефона,
			|	КонтрагентыТелефоны.Номер,
			|	КонтрагентыТелефоны.КонтактноеЛицо
			|ИЗ
			|	Справочник.Контрагенты.Телефоны КАК КонтрагентыТелефоны
			|ГДЕ
			|	КонтрагентыТелефоны.Ссылка = &Объект
			|
			|УПОРЯДОЧИТЬ ПО
			|	Свойство");
			Запрос.УстановитьПараметр("ВидКИ", Объект.ТипМероприятия.ВидКИДляИсходящегоЗвонка);
			Запрос.УстановитьПараметр("Объект", Объект.Объект);
			Результат = Запрос.Выполнить().Выбрать();
			//Элементы.Контакт.СписокВыбора.Очистить();
			Пока Результат.Следующий() Цикл
				Если ТипЗнч(Результат.Значение) = Тип("СправочникСсылка.СудебныеПриставы") ИЛИ ТипЗнч(Результат.Значение) = Тип("СправочникСсылка.Судьи") Тогда
					Для Каждого Эл из Результат.Значение.Телефоны Цикл
						Стр = Эл.Номер;
						Ном = Найти(Стр, ";");
						Пока Ном > 0 Цикл
							Элементы.Контакт.СписокВыбора.Добавить(Стр, Результат.Свойство.Наименование + ": " + Результат.Значение.Наименование + ": " + Строка(Эл.ВидТелефона) + ": " + Лев(Стр, Ном - 1));
							Стр = Сред(Стр, Ном + 1);
						КонецЦикла;
						Если Стр <> "" Тогда
							Элементы.Контакт.СписокВыбора.Добавить(Стр, Результат.Свойство.Наименование + ": " + Результат.Значение.Наименование + ": " + Строка(Эл.ВидТелефона) + ": " + Стр);
						КонецЕсли;
					КонецЦикла;
				Иначе
					Если Результат.ВидСтроки = Перечисления.ВидыТипаСтрока.Телефон Тогда
						Ном = Найти(Результат.Значение, ";");	
						Стр = Лев(Результат.Значение, Ном - 1);	
						
						Ном = Найти(Стр, ",");
						Если Ном > 0 Тогда
							Элементы.Контакт.СписокВыбора.Добавить(Лев(Стр, Ном - 1), Результат.Свойство.Наименование + ": " + Стр);	
						Иначе
							Элементы.Контакт.СписокВыбора.Добавить(Стр, Результат.Свойство.Наименование + ": " + Стр);
						КонецЕсли;
						
					ИначеЕсли Результат.ВидСтроки = Перечисления.ВидыТипаСтрока.Адрес Тогда
						Ном = Найти(Результат.Значение, ";");	
						Стр = Лев(Результат.Значение, Ном - 1);		
						Элементы.Контакт.СписокВыбора.Добавить(Стр, Результат.Свойство.Наименование + ": " + Стр);
					Иначе
						Стр = Результат.Значение;
						Ном = Найти(Стр, ";");
						Если ТипЗнч(Результат.Свойство) = Тип("СправочникСсылка.ВидыТелефонов") Тогда
							Если ЗначениеЗаполнено(Результат.ВидСтроки) Тогда
								Абонент = Результат.ВидСтроки.ТипОтношенияКДолжнику.Наименование + ": " + Результат.ВидСтроки.Наименование;
							Иначе
								Абонент = Строка(Результат.Свойство);
							КонецЕсли;
						Иначе
							Абонент = Результат.Свойство.Наименование;
						КонецЕсли;					
						Пока Ном > 0 Цикл
							Элементы.Контакт.СписокВыбора.Добавить(Стр, Абонент + ": " + Лев(Стр, Ном - 1));
							Стр = Сред(Стр, Ном + 1);
						КонецЦикла;
						Если Стр <> "" Тогда
							Элементы.Контакт.СписокВыбора.Добавить(Стр, Абонент + ": " + Стр);
						КонецЕсли;
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
			
			Если Объект.Контакт = "" И Элементы.Контакт.СписокВыбора.Количество() > 0 Тогда
				Объект.Контакт = Элементы.Контакт.СписокВыбора[0].Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура ДобавитьДополнительныеДанные()
	//Удалить текущие
	МассивРеквизитов = Новый Массив();
	Для Каждого Элемент Из ДополнительныеДанные.НайтиСтроки(Новый Структура()) Цикл
		МассивРеквизитов.Добавить("РеквизитДанные_" + СтрЗаменить(Элемент.Свойство.Код, " ", "_"));
		Элементы.Удалить(Элементы.Найти("РеквизитДанные_" + СтрЗаменить(Элемент.Свойство.Код, " ", "_")));
		ДополнительныеДанные.Удалить(Элемент);
	КонецЦикла;
	ЭтаФорма.ИзменитьРеквизиты(, МассивРеквизитов);
	
	//Добавить новые	
	Если Не Объект.ТипМероприятия.Пустая() И Не Объект.ТипМероприятия.ФункцияДопДанных.Пустая() И
			ЗначениеЗаполнено(Объект.Объект) Тогда
		ФункцияДопДанных = Объект.ТипМероприятия.ФункцияДопДанных;
		ДополнительныеДанные.Загрузить(ФункцияДопДанных.ВозвращаемыеКолонки.Выгрузить());
		ПолученноеЗначение = Справочники.ФункцииДополнительныхДанных.ВычислитьФункцию(
				ФункцияДопДанных.Функция, РеквизитФормыВЗначение("Объект"), ДополнительныеДанные.Выгрузить());
		ДополнительныеДанные.Загрузить(ПолученноеЗначение);
			
		Для Каждого Элемент Из ДополнительныеДанные Цикл 
			МассивРеквизитов.Очистить();
			Реквизит = Новый РеквизитФормы("РеквизитДанные_" + СтрЗаменить(Элемент.Свойство.Код, " ", "_"), Элемент.Свойство.ТипЗначения,, 
					Элемент.Свойство.Наименование);
			МассивРеквизитов.Добавить(Реквизит);		
			ЭтаФорма.ИзменитьРеквизиты(МассивРеквизитов);
			Выполнить("ЭтаФорма.РеквизитДанные_" + СтрЗаменить(Элемент.Свойство.Код, " ", "_") + " = Элемент.Значение;");
			
			ПолеФормы = Элементы.Добавить("РеквизитДанные_" + СтрЗаменить(Элемент.Свойство.Код, " ", "_"), Тип("ПолеФормы"), 
					Элементы.ГруппаДопДанные);
			ПолеФормы.Вид = ВидПоляФормы.ПолеВвода;
			ПолеФормы.ПутьКДанным = "РеквизитДанные_" + СтрЗаменить(Элемент.Свойство.Код, " ", "_");
			ПолеФормы.ВыбиратьТип = Ложь;
			ПолеФормы.ТолькоПросмотр = Истина;
			ПолеФормы.УстановитьДействие("Открытие", "ДополнительныеДанныеОткрытие");
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьРезультатМероприятия(ТипМероприятия)
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 2
	                      |	РезультатыМероприятий.Ссылка
	                      |ИЗ
	                      |	Справочник.РезультатыМероприятий КАК РезультатыМероприятий
	                      |ГДЕ
	                      |	РезультатыМероприятий.Владелец = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ТипМероприятия);
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() = 1 Тогда
	    Возврат Таблица[0].Ссылка;
	Иначе
		Возврат Справочники.РезультатыМероприятий.ПустаяСсылка();
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПозвонитьДолжнику(Команда)
	Если Не ЗначениеЗаполнено(Объект.ТипМероприятия) 
		И НЕ ОбъектыСервер.РазыменоватьСсылку(Объект.ТипМероприятия, "ВидКИДляИсходящегоЗвонка.Пустая()") Тогда
		Объект.ТипМероприятия = ПредопределенноеЗначение("Справочник.ТипыМероприятий.ТелефонныйЗвонокИсходящий");	
	КонецЕсли;
	
	Если ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда
		ОбъектДолжник = ОбъектыСервер.РазыменоватьСсылку(Объект.Объект, "Должник");
	ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		ОбъектДолжник = Объект.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если КонтрольСобытий.РезультативныеЗвонки(ОбъектДолжник) Тогда
	КонецЕсли;
	
	// Если ОбъектыСервер.ПолучитьЗначениеКонстанты("ЗапретТелефонныхНомеров") И КонтрольСобытий.ЗапретЗвонка(Элементы.ДолжникТелефоны.ТекущиеДанные.ЗапретЗвонка, Элементы.ДолжникТелефоны.ТекущиеДанные.НачалоЗапретаЗвонка, Элементы.ДолжникТелефоны.ТекущиеДанные.КонецЗапретаЗвонка) Тогда
	//	Предупреждение("Внимание! Для данного номера установлен запрет исходящих звонков");
	//	Возврат;
	// КонецЕсли;
	
	// Проверка на нарушение 230-ФЗ
	Если ОбъектыСервер.ПолучитьЗначениеКонстанты("ОтзывПерсональныхДанных") И ОбъектыСервер.РазыменоватьСсылку(ОбъектДолжник, "ОтзывПерсональныхДанных") Тогда
		Предупреждение("У данного должника отозваны персональные данные!");
		Возврат;
	КонецЕсли;	
	
	Если КонтрольСобытий.КонтрольЧасовогоПояса(ОбъектДолжник) Тогда
		Предупреждение("Данное действие приведет к нарушению 230-ФЗ!");
		Возврат;
	КонецЕсли;		
	
	ВидТелефонии = Бит_ТелефонияСерверПереопределяемый.ПолучитьВидТелефонии();
	ЭтаФорма.КлючУникальности = Новый УникальныйИдентификатор;
	Если ВидТелефонии = ПредопределенноеЗначение("Перечисление.ВидыТелефонии.БИТФон") Тогда
		Ф = ПолучитьФорму("Обработка.бит_Битфон.Форма.ОсновнаяФорма");
		Ф.ФормаМероприятие = ЭтаФорма.КлючУникальности;
		// Проверить статус оператора
		Если Ф.Открыта() = Истина И Ф.СтатусПодключен = Истина И Ф.ИдетРазговор = Истина Тогда
			Предупреждение("На канале уже идет разговор!");
		ИначеЕсли Ф.Открыта() = Ложь Тогда
			Предупреждение("БИТ.Phone не подключен!");
		ИначеЕсли Ф.Открыта() = Истина И Ф.СтатусПодключен = Истина Тогда
			Ф.НомерЛиния1 = Объект.Контакт;
			Ф.НачатьРазговорКл(Неопределено);
			ПоказатьОповещениеПользователя("БИТ.Phone",,"Начат вызов на выбранный номер",БиблиотекаКартинок.бит_КартинкаБитфон_48);
		ИначеЕсли Ф.Открыта() = Истина И Ф.СтатусПодключен = Ложь Тогда
			Ф.кнПодключить(Неопределено);
			Ф.НомерЛиния1 = Объект.Контакт;			
			Ф.ОбработчикСобытияРегистрация("Успешно");
			ФрмОб = ПолучитьФорму("Обработка.бит_Битфон.Форма.ОбработкаВызова");
			Ф.НачатьРазговорКл(Неопределено);
			ПоказатьОповещениеПользователя("БИТ.Phone",,"Начат вызов на выбранный номер",БиблиотекаКартинок.бит_КартинкаБитфон_48);
		КонецЕсли;
	КонецЕсли;
	// Проверить состояние микрофона
	ПодключитьОбработчикОжидания("ПроверитьСостояниеМикрофона", 1, Истина);	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Номер = Найти(Событие, ":");
	Если Номер > 0 Тогда
		Данные = Сред(Событие, Номер + 1);
		Событие = Лев(Событие, Номер - 1);
	Иначе
		Данные = "";
	КонецЕсли;
	
	
	Если Событие = "ТекущаяЗадача" Тогда
		////Элементы.Должник.ТолькоПросмотр = Истина;
		////
		////Должник = Неопределено;
		////ДО = Неопределено;
		////Кампания = Неопределено;
		////ПолучитьДолжникаИДОПоУИДТекущейЗадачи(Должник, ДО, Кампания, Данные);
		////
		////НовоеМероприятие();
		////Если Должник <> Неопределено Тогда
		////	//Создать форму
		////	ФормаМероприятия.Организация = ПолучитьТекущегоПользователя("Организация");
		////	ФормаМероприятия.Подразделение = ПолучитьТекущегоПользователя("Подразделение");
		////	ФормаМероприятия.ТипМероприятия = ПредопределенноеЗначение("Справочник.ТипыМероприятий.ТелефонныйЗвонокИсходящий");
		////	ФормаМероприятия.Автор = Кампания;
		////	//ФормаМероприятия.Ответственный = ФормаМероприятия.Автор;
		////	//ФормаМероприятия.Исполнитель = ФормаМероприятия.Автор;
		////	ФормаМероприятия.Должник = Должник; 		
		////	ФормаМероприятия.ДолговоеОбязательство = ДО;
		////	ФормаМероприятия.ПланируемаяДата = ТекущаяДата();
		////	ФормаМероприятия.ПланируемоеВремя = ТекущаяДата();
		////	ФормаМероприятия.БизнесПроцесс = Кампания;
		////	
		////	ТипМероприятияПриИзменении(ФормаМероприятия);
		////	
		////	ЗаполнитьФормуМероприятием();
		////КонецЕсли;
		
	ИначеЕсли Событие = "Коммутация" Тогда
		//////СвязьПоВладельцуД_ДО(Истина);
		
		СтатусОператора = ПредопределенноеЗначение("Перечисление.СтатусыОператора.Занят");
		УстановитьСтатусОператора();
		Попытка
			КомпонентаОбъект.ПослатьУдаленноеСообщение(КЦАдресIPЦКТ, 5090, 5091, "СменилСтатус" + ":" + 
					ПолучитьНомерОператора());
		Исключение
		КонецПопытки;	
		
		Объект.бтЗаписьРазговора = Данные;
		////////Открыть форму
		////////Если Не ФормаМероприятия.Ссылка.Пустая() Тогда
		//////	//ОбъектМероприятие = ФормаМероприятия;
		//////	ЗаполнитьФормуМероприятием();
		//////	УстановитьОтбор(События1, "Должник", ОбъектМероприятие.Должник, Истина);
		//////	УстановитьОтбор(События1, "ДолговоеОбязательство", ОбъектМероприятие.ДолговоеОбязательство, 
		//////			Не ОбъектМероприятие.ДолговоеОбязательство.Пустая());
		//////	УстановитьОтбор(События2, "Должник", ОбъектМероприятие.Должник, Истина);
		//////	УстановитьОтбор(События2, "ДолговоеОбязательство", ОбъектМероприятие.ДолговоеОбязательство, 
		//////			Не ОбъектМероприятие.ДолговоеОбязательство.Пустая());
		//////	УстановитьОтбор(События3, "Должник", ОбъектМероприятие.Должник, Истина);
		//////	УстановитьОтбор(События3, "ДолговоеОбязательство", ОбъектМероприятие.ДолговоеОбязательство, 
		//////			Не ОбъектМероприятие.ДолговоеОбязательство.Пустая());
		//////	ПолучитьМакет(ФормаМероприятия);		
		//////	МакетПриИзменении(ФормаМероприятия);			
		//////	//НовоеМероприятие();
		////////КонецЕсли;
		
	ИначеЕсли Событие = "КоммутацияВходящийВызов" Тогда	
		////Элементы.Должник.ТолькоПросмотр = Ложь;
		////СвязьПоВладельцуД_ДО(Ложь);
		////		
		////СтатусОператора = ПредопределенноеЗначение("Перечисление.СтатусыОператора.Занят");
		////УстановитьСтатусОператора();
		////Попытка
		////	КомпонентаОбъект.ПослатьУдаленноеСообщение(КЦАдресIPЦКТ, 5090, 5091, "СменилСтатус" + ":" + 
		////			ПолучитьНомерОператора());
		////Исключение
		////КонецПопытки;
		////НовоеМероприятие();	
		////
		////ФормаМероприятия.Организация = ПолучитьТекущегоПользователя("Организация");
		////ФормаМероприятия.Подразделение = ПолучитьТекущегоПользователя("Подразделение");
		////ФормаМероприятия.ТипМероприятия = ПредопределенноеЗначение("Справочник.ТипыМероприятий.ТелефонныйЗвонокВходящий");
		////ФормаМероприятия.Автор = ОбщегоНазначения.ТекущийПользователь();
		//////ФормаМероприятия.Ответственный = ФормаМероприятия.Автор;
		//////ФормаМероприятия.Исполнитель = ФормаМероприятия.Автор;
		////ФормаМероприятия.ПланируемаяДата = ТекущаяДата();
		////ФормаМероприятия.ПланируемоеВремя = ТекущаяДата();
		////ФормаМероприятия.бтЗаписьРазговора = Данные;
		////
		////ТипМероприятияПриИзменении(ФормаМероприятия);	
		////ЗаполнитьФормуМероприятием();
		////ПолучитьМакет(ФормаМероприятия);
		////МакетПриИзменении(ФормаМероприятия);
		
	ИначеЕсли Событие = "КоммутацияПереадресация"	Тогда
		////СтатусОператора = ПредопределенноеЗначение("Перечисление.СтатусыОператора.Занят");
		////УстановитьСтатусОператора();
		////Попытка
		////	КомпонентаОбъект.ПослатьУдаленноеСообщение(КЦАдресIPЦКТ, 5090, 5091, "СменилСтатус" + ":" + 
		////			ПолучитьНомерОператора());
		////Исключение
		////КонецПопытки;
		////
		////НовоеМероприятие(Данные);
		////
		////ЗаполнитьФормуМероприятием();
		////ПолучитьМакет(ФормаМероприятия);
		////МакетПриИзменении(ФормаМероприятия);
		
	ИначеЕсли Событие = "ОператорВключен" Тогда
		СтатусОператора = ПредопределенноеЗначение("Перечисление.СтатусыОператора.Включен");
		Элементы.ФормаКЦГотовПринятьЗвонок.Картинка = БиблиотекаКартинок.Пауза;
		Элементы.ФормаКЦГотовПринятьЗвонок.Заголовок = "Пауза";
		УстановитьСтатусОператора();
		КомпонентаОбъект.ПослатьУдаленноеСообщение(КЦАдресIPЦКТ, 5090, 5091, "СменилСтатус" + ":" + 
				ПолучитьНомерОператора());
		
	ИначеЕсли Событие = "ОператорНаПаузе" Тогда
		СтатусОператора = ПредопределенноеЗначение("Перечисление.СтатусыОператора.Пауза");	
		Элементы.ФормаКЦГотовПринятьЗвонок.Картинка = БиблиотекаКартинок.Продолжение;
		Элементы.ФормаКЦГотовПринятьЗвонок.Заголовок = "Продолжить";
		УстановитьСтатусОператора();
		КомпонентаОбъект.ПослатьУдаленноеСообщение(КЦАдресIPЦКТ, 5090, 5091, "СменилСтатус" + ":" + 
				ПолучитьНомерОператора());
		
	ИначеЕсли Событие = "ОператорВыключен" Тогда
		СтатусОператора = ПредопределенноеЗначение("Перечисление.СтатусыОператора.Выключен");
		СостояниеОператора = Неопределено;
		ТекущийУИДАбонента = Неопределено;
		Элементы.ФормаКЦГотовПринятьЗвонок.Картинка = БиблиотекаКартинок.СоздатьЭлементСписка;		
		Элементы.ФормаКЦГотовПринятьЗвонок.Заголовок = "Включен";
		УстановитьСтатусОператора();
		КомпонентаОбъект.ПослатьУдаленноеСообщение(КЦАдресIPЦКТ, 5090, 5091, "СменилСтатус" + ":" + 
				ПолучитьНомерОператора());
		//Кусок из ОБНОВИТЬ ОПЕРАТОРОВ
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОператоры Тогда
			//////КЦОбновитьОператоров(Неопределено);
		КонецЕсли;
		//
				
	ИначеЕсли Событие = "ГотовПринятьЗвонок" Тогда			
		СтатусОператора = ПредопределенноеЗначение("Перечисление.СтатусыОператора.Включен");
		УстановитьСтатусОператора();
		КомпонентаОбъект.ПослатьУдаленноеСообщение(КЦАдресIPЦКТ, 5090, 5091, "СменилСтатус" + ":" + 
				ПолучитьНомерОператора());
		
	ИначеЕсли Событие = "ОператорСвободен" Тогда
		СтатусОператора = ПредопределенноеЗначение("Перечисление.СтатусыОператора.Включен");
		УстановитьСтатусОператора();
		КомпонентаОбъект.ПослатьУдаленноеСообщение(КЦАдресIPЦКТ, 5090, 5091, "СменилСтатус" + ":" + 
				ПолучитьНомерОператора());
		
	ИначеЕсли Событие = "ОбновитьОператоров" Тогда
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОператоры Тогда
			//////КЦОбновитьОператоров(Неопределено);
		КонецЕсли;
		
	ИначеЕсли Событие = "ТестЗапрос" Тогда
		Если КомпонентаОбъект <> Неопределено Тогда
			КомпонентаОбъект.ПослатьУдаленноеСообщение(КЦАдресIPЦКТ, 5090, 5091, "ТестОтвет" + ":" + 
					ПолучитьНомерОператора());
		КонецЕсли;	
				
	ИначеЕсли Событие = "СообщениеПользователю" Тогда
		Сообщить(Данные);
	КонецЕсли;
		
	//Сообщить("ВнешнееСобытие - ФормаРабСтол " + Строка(Событие) + " " + Строка(Данные));
КонецПроцедуры

&НаСервере
Функция ПолучитьНомерОператора()
    Возврат Формат(ПараметрыСеанса.ТекущийПользователь.НомерОператора, "ЧГ=");	
КонецФункции

&НаСервере
Процедура ПолучитьДолжникаИДОПоУИДТекущейЗадачи(Должник, ДО, Кампания, УИД)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КампанииОбзвонаДолговыеОбязательства.Должник,
	                      |	КампанииОбзвонаДолговыеОбязательства.ДолговоеОбязательство,
	                      |	КампанииОбзвонаДолговыеОбязательства.Ссылка
	                      |ИЗ
	                      |	БизнесПроцесс.КампанииОбзвона.ДолговыеОбязательства КАК КампанииОбзвонаДолговыеОбязательства
	                      |ГДЕ
	                      |	КампанииОбзвонаДолговыеОбязательства.УИД = &УИД");
	Попытка
		Запрос.УстановитьПараметр("УИД", Новый УникальныйИдентификатор(УИД));
	Исключение
		Должник = Неопределено;
		ДО = Неопределено;
		Кампания = Неопределено;
		Возврат;
	КонецПопытки;
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Должник = Результат.Должник;
		ДО = Результат.ДолговоеОбязательство;
		Кампания = Результат.Ссылка;
	Иначе
		Должник = Неопределено;
		ДО = Неопределено;
		Кампания = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусОператора()
	УстановитьПривилегированныйРежим(Истина);
	Набор = РегистрыСведений.СостоянияОператоров.СоздатьМенеджерЗаписи();
	Набор.Оператор = ПараметрыСеанса.ТекущийПользователь;
	Набор.СтатусОператора = СтатусОператора;
	Набор.СостояниеОператора = СостояниеОператора;
	Набор.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьИЗакрыть(Команда)
	Отказ = Ложь;
	ПередВыполнением(Отказ);
	Если Не Отказ Тогда
		Попытка
			Закрыть();
		Исключение
		КонецПопытки;
	КонецЕсли;
	// Вернуть оператора на линию
	ФормаНабора = ПолучитьФорму("Обработка.бит_Битфон.Форма.ОсновнаяФорма");
	Если ФормаНабора.Открыта() И ФормаНабора.СтатусПодключен = Ложь Тогда
		ФормаНабора.КнПодключить(Неопределено);
	КонецЕсли;
	//
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.Ответственный = ?(ТипСотрудника.Пустая(), Ответственный, ТипСотрудника); //!!!!!
	УправлениеСвойствами.ПередЗаписьюНаСервере2(ЭтаФорма, ТекущийОбъект, Отказ, ТекущийОбъект.Выполнена);
		
	Если РольДоступна("тсАдминистрирование") Тогда
		Отказ = Ложь;
	КонецЕсли;
	//ТекущийОбъект.ДополнительныеРеквизиты.Загрузить(ДополнительныеРеквизиты.Выгрузить());
КонецПроцедуры

&НаСервере
Процедура ПеренестиТЧДопРеквизиты(Отказ = Ложь, ТекстСообщения = "")
	Для Каждого Элемент Из ДополнительныеРеквизиты Цикл
		Попытка
			Выполнить("Элемент.Значение = ЭтаФорма.Реквизит_" + СтрЗаменить(Элемент.Свойство.Код, " ", "_") + ";");
		Исключение
			Отказ = Истина;
			Возврат;
		КонецПопытки;
	КонецЦикла;
	
	Объект.ДополнительныеРеквизиты.Очистить();
	Для Каждого Элемент Из ДополнительныеРеквизиты Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
	        НоваяСтрока = Объект.ДополнительныеРеквизиты.Добавить();
			НоваяСтрока.Свойство = Элемент.Свойство;
			НоваяСтрока.Значение = Элемент.Значение;
		ИначеЕсли Элемент.Обязательное Тогда
			Отказ = Истина;	
			ТекстСообщения = "Не заполнены обязательные реквизиты!";
		КонецЕсли;
	КонецЦикла;
	//Объект.ДополнительныеРеквизиты.Загрузить(ДополнительныеРеквизиты.Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеДанныеОткрытие(Элемент, СтандартнаяОбработка)
	Значение = Неопределено;
	Выполнить("Значение = " + Элемент.Имя + ";");
	
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.ТипыПрикрепляемыхФайлов") Тогда
		СтандартнаяОбработка = Ложь;
		Путь = "";
        Данные = СписокВыборНаСервере(Значение, Путь);
		Если Данные = Неопределено Тогда
			Предупреждение("Файл не найден!");
			Возврат;
		КонецЕсли;
		Файл = Новый Файл(Путь);	
		
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Диалог.Заголовок = "Выберите файл";
		Диалог.ПолноеИмяФайла = Файл.Имя; 
		Диалог.Фильтр = "*" + Файл.Расширение + "|*" + Файл.Расширение;  
		Диалог.МножественныйВыбор = Ложь;
		//Диалог.Каталог = ТекущиеДанные.Путь;
		Если Диалог.Выбрать() Тогда
			Данные.Записать(Диалог.ПолноеИмяФайла);
			ЗапуститьПриложение(Диалог.ПолноеИмяФайла);
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыОткрытие(Элемент, СтандартнаяОбработка)
	//Значение = Неопределено;
	//Выполнить("Значение = " + Элемент.Имя + ";");
	//
	//Если Значение = ПредопределенноеЗначение("Документ.ПрикрепитьФайлы.ПустаяСсылка") Тогда
	//	СтандартнаяОбработка = Ложь;
	//	
	//   	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	//	Диалог.Заголовок = "Выберите файл";
	//	//Диалог.ПолноеИмяФайла = НаборКонстант.ПутьКПапкеКомпоненты; 
	//	Диалог.Фильтр = "Все|*.*";  
	//	Диалог.МножественныйВыбор = Ложь;
	//	//Диалог.Каталог = ТекущиеДанные.Путь;
	//	Если Диалог.Выбрать() Тогда
	//		Форма = ПолучитьФорму("Документ.ПрикрепитьФайлы.Форма.ФормаДокумента",, ЭтаФорма);
	//		Форма.Объект.Объект = Объект.Объект;
	//		Форма.Записать();
	//		Выполнить(Элемент.Имя + " = Форма.Объект.Ссылка;");
	//		Форма.Объект.Файлы.Добавить().Путь = Диалог.ПолноеИмяФайла;
	//		Форма.Модифицированность = Истина;
	//		Форма.Открыть(); 					
	//	КонецЕсли;
	//КонецЕсли;
	
	// Лебедева; 19.02.2018
	СтандартнаяОбработка = Ложь;
	СтрокаЗапуска = "";
	Попытка
		Стр = СтрЗаменить(Элемент.Имя, "Реквизит_", "РеквизитСвойство_");
		Строки = ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Вычислить(Стр)));	
	Исключение		
		Стр = СтрЗаменить(Элемент.Имя, "Реквизит_", "РеквизитСвойство_");
		Строки = ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ОбъектыСервер.ПолучитьДопРиСПоКоду(
				СтрЗаменить(Сред(Элемент.Имя, 10), "_", " "))));
	КонецПопытки;
	Если Строки.Количество() > 0 Тогда
		СтрокаЗапуска = Строки[0].Значение;
	КонецЕсли;
		
	Попытка
		ЗапуститьПриложение(СтрокаЗапуска);
	Исключение
		//Чуров
		//ПоказатьЗначение(,СтрокаЗапуска);
		ОткрытьЗначение(СтрокаЗапуска);
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыПриИзменении(Элемент)
	Модифицированность = Истина;
	ЗаполнитьКомментарий();
КонецПроцедуры

&НаСервере
Функция СписокВыборНаСервере(ТипФайла, Путь)
    Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
                          |	ПрикрепитьФайлыФайлы.Хранилище,
                          |	ПрикрепитьФайлыФайлы.Путь
                          |ИЗ
                          |	Документ.ПрикрепитьФайлы.Файлы КАК ПрикрепитьФайлыФайлы
                          |ГДЕ
                          |	ПрикрепитьФайлыФайлы.Ссылка.Объект = &Объект
                          |	И ПрикрепитьФайлыФайлы.ТипФайла = &ТипФайла
                          |
                          |УПОРЯДОЧИТЬ ПО
                          |	ПрикрепитьФайлыФайлы.Ссылка.Дата УБЫВ");
	Запрос.УстановитьПараметр("Объект", Объект.Объект);
	Запрос.УстановитьПараметр("ТипФайла", ТипФайла);
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 0 Тогда
		Путь = Результат[0].Путь;
		Возврат Результат[0].Хранилище.Получить();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура СвязанныйДокументОткрытие(Элемент, СтандартнаяОбработка)
	Если Объект.СвязанныйДокумент = ПредопределенноеЗначение("Документ.ПрикрепитьФайлы.ПустаяСсылка") Тогда
		СтандартнаяОбработка = Ложь;
		
   		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.Заголовок = "Выберите файл";
		//Диалог.ПолноеИмяФайла = НаборКонстант.ПутьКПапкеКомпоненты; 
		Диалог.Фильтр = "Все|*.*";  
		Диалог.МножественныйВыбор = Ложь;
		//Диалог.Каталог = ТекущиеДанные.Путь;
		Если Диалог.Выбрать() Тогда
			ЗначЗаполнения = Новый Структура("ЗначенияЗаполнения", Новый Структура("Объект", Объект.Объект));			
			Форма = ПолучитьФорму("Документ.ПрикрепитьФайлы.Форма.ФормаДокумента", ЗначЗаполнения, ЭтаФорма);
			Форма.Записать();
			
			Объект.СвязанныйДокумент = Форма.Объект.Ссылка;
			Файл = Новый Файл(Диалог.ПолноеИмяФайла);
			СтрокаФайл = Форма.Объект.Файлы.Добавить();
			СтрокаФайл.Путь = Диалог.ПолноеИмяФайла;
			СтрокаФайл.Размер = Форма.ОкруглитьРазмерФайла(Файл.Размер());
			Форма.Модифицированность = Истина;
			Форма.Открыть(); 					
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыполнение(Команда) Экспорт
	Если ОтменитьВыполнениеЗадачи() Тогда
		Элементы.ДекорацияВыполнено.Видимость = Ложь;
		Элементы.ФормаОтменитьВыполнение.Доступность = Ложь;
		
		ОповеститьОбИзменении(Объект.Ссылка);
		Оповестить("ОбновитьТД");
		Оповестить("ОбновитьПланировщик", Ложь, Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОтменитьВыполнениеЗадачи()
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Объект.БизнесПроцесс.Пустая() Тогда
		//1) Проверяем есть ли выполненные мероприятия с более поздней датой
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                      |	Мероприятие.Номер,
		                      |	Мероприятие.Дата
		                      |ИЗ
		                      |	Задача.Мероприятие КАК Мероприятие
		                      |ГДЕ
		                      |	(Мероприятие.ДатаВыполнения > &ДатаВыполнения
		                      |			ИЛИ Мероприятие.ДатаВыполнения = &ДатаВыполнения
		                      |				И Мероприятие.МоментВремени > &МоментВремени)
		                      |	И Мероприятие.БизнесПроцесс = &БизнесПроцесс
		                      |	И Мероприятие.Выполнена
		                      |	И (НЕ Мероприятие.ПометкаУдаления)
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	Мероприятие.ДатаВыполнения УБЫВ,
		                      |	Мероприятие.МоментВремени УБЫВ");
		Запрос.УстановитьПараметр("БизнесПроцесс", Объект.БизнесПроцесс);
		Запрос.УстановитьПараметр("ДатаВыполнения", Объект.ДатаВыполнения);
		Запрос.УстановитьПараметр("МоментВремени", Объект.МоментВремени);
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Сначала необходимо отменить мероприятие с номером " + Результат.Номер;
			Сообщение.Сообщить();
			Возврат Ложь;	
		КонецЕсли;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Если Не Объект.БизнесПроцесс.Пустая() Тогда	
			//2.1) помечаем мероприятия на удаление у которых дата >= текущеемероприятие.датавыполнения
			Запрос.Текст = "ВЫБРАТЬ
			               |	Мероприятие.Ссылка
			               |ИЗ
			               |	Задача.Мероприятие КАК Мероприятие
			               |ГДЕ
			               |	Мероприятие.Дата >= &ДатаВыполнения
			               |	И Мероприятие.БизнесПроцесс = &БизнесПроцесс
			               |	И (НЕ Мероприятие.Выполнена)
			               |	И (НЕ Мероприятие.ПометкаУдаления)";
			Результат = Запрос.Выполнить().Выбрать();
			Пока Результат.Следующий() Цикл
				ОбъектМероприятия = Результат.Ссылка.ПолучитьОбъект();
				ОбъектМероприятия.УстановитьПометкуУдаления(Истина);
			КонецЦикла;
			
			//4) восстанавливаем состояние БП
			БПОбъект = Объект.БизнесПроцесс.ПолучитьОбъект();
			БПОбъект.ВыполненныеСтрелки.Загрузить(Объект.ВыполненныеСтрелки.Выгрузить());
			БПОбъект.ЗапущенныеСтадии.Загрузить(Объект.ЗапущенныеСтадии.Выгрузить());
			БПОбъект.Завершен = Ложь;
			БПОбъект.Записать();
	    КонецЕсли;
	
		//3) Текущее мероприятие помечаем как не выполненное
		Объект.Выполнена = Ложь;
		Объект.ВыполненоКакНеАктуальное = Ложь;
		Объект.Исполнитель = Неопределено;
		Объект.ДатаВыполнения = Дата(1,1,1);
		Объект.МоментВремени = 0;
		Записать();	
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Сообщить("Ошибка блокировки!");
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Если Объект.Комментарий = "" Тогда 
		//Объект.КомментарийИзменен = Ложь;
	Иначе 
		Объект.КомментарийИзменен = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФактическаяДатаПриИзменении(Элемент)
	Если Объект.ФактическаяДата = Дата(1,1,1) Тогда
		Объект.ФактическаяДата = ТекущаяДата();
	КонецЕсли;
	ЗаполнитьКомментарий();
КонецПроцедуры

&НаКлиенте
Процедура ПланируемаяДатаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ПланируемаяДата) И Объект.ПланируемаяДата < НачалоДня(ТекущаяДата()) Тогда
		Объект.ПланируемаяДата = Дата(1,1,1);
		//Чуров
		ПоказатьПредупреждение(, "Указана дата меньше текущей!");
		//Вопрос("Указана дата меньше текущей!", РежимДиалогаВопрос.ОК);
	КонецЕсли;
	ЗаполнитьКомментарий();
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если Не Элементы.КонтактноеЛицо.Видимость Тогда
		Объект.КонтактноеЛицо = Неопределено;
		Объект.Контакт = "";
	КонецЕсли;
		
	//
	Если ТипЗнч(ТекущийОбъект.Ответственный) = Тип("СправочникСсылка.Пользователи") Тогда
		//заплатка +
		ТекОбъект = ТекущийОбъект.Объект;
		Если ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Если Не Константы.ДетализацияПоКА.Получить() Тогда
				Возврат;			
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Если Не Константы.ДетализацияПоДоговорам.Получить() Тогда
				Если Константы.ДетализацияПоКА.Получить() Тогда
					ТекОбъект = ТекущийОбъект.Объект.Контрагент;
				Иначе
					Возврат;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.УслугиПоДоговору") Тогда
			Если Не Константы.ДетализацияПоУслугам.Получить() Тогда
				Если Константы.ДетализацияПоДоговорам.Получить() Тогда
					ТекОбъект = ТекущийОбъект.Объект.Владелец;
				ИначеЕсли Константы.ДетализацияПоКА.Получить() Тогда
					ТекОбъект = ТекущийОбъект.Объект.Контрагент;
				Иначе
					Возврат;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда
			Если Не Константы.ДетализацияПоДО.Получить() Тогда
				Если Константы.ДетализацияПоКА.Получить() Тогда
					ТекОбъект = ТекущийОбъект.Объект.Должник;
				Иначе
					Возврат;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.ИсполнительныеДокументы") Тогда
			Если Не Константы.ДетализацияПоИД.Получить() Тогда
				Если Константы.ДетализацияПоДО.Получить() Тогда
					ТекОбъект = ТекущийОбъект.Объект.Владелец;
				ИначеЕсли Константы.ДетализацияПоКА.Получить() Тогда
					ТекОбъект = ТекущийОбъект.Объект.Должник;
				Иначе
					Возврат;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.Залоги") Тогда
			Если Не Константы.ДетализацияПоЗ.Получить() Тогда
				Если Константы.ДетализацияПоДО.Получить() Тогда
					ТекОбъект = ТекущийОбъект.Объект.Владелец;
				ИначеЕсли Константы.ДетализацияПоКА.Получить() Тогда
					ТекОбъект = ТекущийОбъект.Объект.Владелец.Должник;
				Иначе
					Возврат;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
		
		//
		Если ТекущийОбъект.Выполнена Тогда			
			ЗапросОтв = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			                         |	ОтветственныеСотрудники.Объект
			                         |ИЗ
			                         |	РегистрСведений.ОтветственныеСотрудники КАК ОтветственныеСотрудники
			                         |ГДЕ
			                         |	ОтветственныеСотрудники.Объект = &Объект
			                         |	И ОтветственныеСотрудники.Пользователь = &Сотрудник");
			ЗапросПом = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			                         |	СотрудникиВПомощь.Объект
			                         |ИЗ
			                         |	РегистрСведений.СотрудникиВПомощь КАК СотрудникиВПомощь
			                         |ГДЕ
			                         |	СотрудникиВПомощь.Объект = &Объект
			                         |	И СотрудникиВПомощь.Пользователь = &Сотрудник");
			ЗапросМ = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			                       |	Мероприятие.Объект
			                       |ИЗ
			                       |	Задача.Мероприятие КАК Мероприятие
			                       |ГДЕ
			                       |	Мероприятие.Объект = &Объект
			                       |	И Мероприятие.Ответственный = &Сотрудник
			                       |	И НЕ Мероприятие.Выполнена
			                       |	И НЕ Мероприятие.ПометкаУдаления
			                       |	И НЕ Мероприятие.БизнесПроцесс.ПометкаУдаления");					  
			ЗапросРН = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			                        |	ОбъектыВРаботеОстатки.Объект
			                        |ИЗ
			                        |	РегистрНакопления.ОбъектыВРаботе.Остатки(
			                        |			,
			                        |			Сотрудник = &Сотрудник
			                        |				И Объект = &Объект) КАК ОбъектыВРаботеОстатки");					  
								  						  
			ЗапросОтв.УстановитьПараметр("Сотрудник", ТекущийОбъект.Ответственный);
			ЗапросОтв.УстановитьПараметр("Объект", ТекОбъект);
			ЗапросПом.УстановитьПараметр("Сотрудник", ТекущийОбъект.Ответственный);
			ЗапросПом.УстановитьПараметр("Объект", ТекОбъект);
			ЗапросМ.УстановитьПараметр("Сотрудник", ТекущийОбъект.Ответственный);
			ЗапросМ.УстановитьПараметр("Объект", ТекОбъект);
			ЗапросРН.УстановитьПараметр("Сотрудник", ТекущийОбъект.Ответственный);
			ЗапросРН.УстановитьПараметр("Объект", ТекОбъект);
			
			Если ЗапросОтв.Выполнить().Пустой() И ЗапросПом.Выполнить().Пустой() И ЗапросМ.Выполнить().Пустой() И 
					Не ЗапросРН.Выполнить().Пустой() Тогда
				//Убираем из работы
				ДокОбъект = Документы.АктПередачи.СоздатьДокумент();
				ДокОбъект.Дата = ТекущаяДата();
				ДокОбъект.СотрудникПередающий = ТекущийОбъект.Ответственный;
				ДокОбъект.Автор = ТекущийОбъект.Ссылка;
				ДокОбъект.ПодразделениеПередающее = ДокОбъект.СотрудникПередающий.Подразделение;
				ДокОбъект.Организация = ДокОбъект.СотрудникПередающий.Организация;
				ДокОбъект.Объекты.Добавить().Объект = ТекОбъект;
				ДокОбъект.НеНазначатьСотрудников = Истина;
				Попытка
					ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					Сообщить(ОписаниеОшибки());
					Отказ = Истина;
				КонецПопытки;
			КонецЕсли;
			
		Иначе
			Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			                      |	ОбъектыВРаботеОстатки.Объект
			                      |ИЗ
			                      |	РегистрНакопления.ОбъектыВРаботе.Остатки(
			                      |			,
			                      |			Сотрудник = &Сотрудник
			                      |				И Объект = &Объект) КАК ОбъектыВРаботеОстатки");
			Запрос.УстановитьПараметр("Сотрудник", ТекущийОбъект.Ответственный);
			Запрос.УстановитьПараметр("Объект", ТекОбъект);
			Если Запрос.Выполнить().Пустой() Тогда
				ДокОбъект = Документы.АктПередачи.СоздатьДокумент();
				ДокОбъект.Дата = ТекущаяДата();
				ДокОбъект.СотрудникПринимающий = ТекущийОбъект.Ответственный;
				ДокОбъект.Автор = ТекущийОбъект.Ссылка;
				ДокОбъект.ПодразделениеПринимающее = ДокОбъект.СотрудникПринимающий.Подразделение;
				ДокОбъект.Организация = ДокОбъект.СотрудникПринимающий.Организация;
				ДокОбъект.Объекты.Добавить().Объект = ТекОбъект;
				ДокОбъект.НеНазначатьСотрудников = Истина;
				Попытка
					ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					Сообщить(ОписаниеОшибки());
					Отказ = Истина;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//
	ПредОтв = ТекущийОбъект.Ссылка.Ответственный;
	Если ПредОтв <> ТекущийОбъект.Ответственный И 
			ТипЗнч(ПредОтв) = Тип("СправочникСсылка.Пользователи") Тогда
		ЗапросОтв = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                         |	ОтветственныеСотрудники.Объект
		                         |ИЗ
		                         |	РегистрСведений.ОтветственныеСотрудники КАК ОтветственныеСотрудники
		                         |ГДЕ
		                         |	ОтветственныеСотрудники.Объект = &Объект
		                         |	И ОтветственныеСотрудники.Пользователь = &Сотрудник");
		ЗапросПом = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                         |	СотрудникиВПомощь.Объект
		                         |ИЗ
		                         |	РегистрСведений.СотрудникиВПомощь КАК СотрудникиВПомощь
		                         |ГДЕ
		                         |	СотрудникиВПомощь.Объект = &Объект
		                         |	И СотрудникиВПомощь.Пользователь = &Сотрудник");
		ЗапросМ = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                       |	Мероприятие.Объект
		                       |ИЗ
		                       |	Задача.Мероприятие КАК Мероприятие
		                       |ГДЕ
		                       |	Мероприятие.Объект = &Объект
		                       |	И Мероприятие.Ответственный = &Сотрудник
		                       |	И НЕ Мероприятие.Выполнена
		                       |	И НЕ Мероприятие.ПометкаУдаления
		                       |	И НЕ Мероприятие.БизнесПроцесс.ПометкаУдаления");					  
		ЗапросРН = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                        |	ОбъектыВРаботеОстатки.Объект
		                        |ИЗ
		                        |	РегистрНакопления.ОбъектыВРаботе.Остатки(
		                        |			,
		                        |			Сотрудник = &Сотрудник
		                        |				И Объект = &Объект) КАК ОбъектыВРаботеОстатки");					  
							  						  
		ЗапросОтв.УстановитьПараметр("Сотрудник", ПредОтв);
		ЗапросОтв.УстановитьПараметр("Объект", ТекОбъект);
		ЗапросПом.УстановитьПараметр("Сотрудник", ПредОтв);
		ЗапросПом.УстановитьПараметр("Объект", ТекОбъект);
		ЗапросМ.УстановитьПараметр("Сотрудник", ПредОтв);
		ЗапросМ.УстановитьПараметр("Объект", ТекОбъект);
		ЗапросРН.УстановитьПараметр("Сотрудник", ПредОтв);
		ЗапросРН.УстановитьПараметр("Объект", ТекОбъект);
			
		Если ЗапросОтв.Выполнить().Пустой() И ЗапросПом.Выполнить().Пустой() И ЗапросМ.Выполнить().Пустой() И 
				Не ЗапросРН.Выполнить().Пустой() Тогда
			//Убираем из работы
			ДокОбъект = Документы.АктПередачи.СоздатьДокумент();
			ДокОбъект.Дата = ТекущаяДата();
			ДокОбъект.СотрудникПередающий = ПредОтв;
			ДокОбъект.Автор = ТекущийОбъект.Ссылка;
			ДокОбъект.ПодразделениеПередающее = ДокОбъект.СотрудникПередающий.Подразделение;
			ДокОбъект.Организация = ДокОбъект.СотрудникПередающий.Организация;
			ДокОбъект.Объекты.Добавить().Объект = ТекОбъект;
			ДокОбъект.НеНазначатьСотрудников = Истина;
			Попытка
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщить(ОписаниеОшибки());
				Отказ = Истина;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьУЭД(Команда)
	//Форма = ПолучитьФорму("Обработка.ПечатьУЭД.Форма.Форма",, ЭтаФорма, Объект.Объект);
	//Форма.Объект.Объект = Объект.Объект;
	//Если ЗначениеЗаполнено(ОбъектыСервер.РазыменоватьСсылку(Объект.ТипМероприятия, "ПечатнаяФорма")) Тогда
	//	Форма.Объект.Шаблон = ОбъектыСервер.РазыменоватьСсылку(Объект.ТипМероприятия, "ПечатнаяФорма");
	//КонецЕсли;
	////Чуров
	//ОткрытьФорму(Форма);
	//Форма.Открыть();
	
	// Лебедева 20.02.2018
	Если ЗначениеЗаполнено(ОбъектыСервер.РазыменоватьСсылку(Объект.ТипМероприятия, "ПечатнаяФорма")) Тогда		
		Печатать = ОбъектыСервер.РазыменоватьСсылку(Объект.ТипМероприятия, "КнопкаПечать");
		ПрикрепитьФайлы = ОбъектыСервер.РазыменоватьСсылку(Объект.ТипМероприятия, "КнопкаПрикрепитьФайл");
		ТекущееДО = Объект.Объект;
		ТекущийШаблон = ОбъектыСервер.РазыменоватьСсылку(Объект.ТипМероприятия, "ПечатнаяФорма");
		ТекущиеПараметры = Новый Структура("Объект, Шаблон", ТекущееДО,ТекущийШаблон);
		ПечатьЭлектронныхДокументовКлиент.ПечатьОбработка(ТекущиеПараметры, Печатать,ПрикрепитьФайлы);
	Иначе
		Форма = ПолучитьФорму("Обработка.ПечатьУЭД.Форма.Форма",, ЭтаФорма, Объект.Объект);
		Форма.Объект.Объект = Объект.Объект;
		ОткрытьФорму(Форма);
		Форма.Открыть()
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбъектПриИзменении(Элемент)
	Контрагент = Объект.Объект;
	ДоговорКонтрагента = Объект.Объект;
	УслугаПоДоговору = Объект.Объект;
	ДолговоеОбязательство = Объект.Объект;
	ИсполнительныйДокумент = Объект.Объект;
	
	Элементы.ОбъектУчета_Пусто.Доступность = Ложь;
	Если Объект.Объект = Неопределено Тогда	
		Элементы.ОбъектУчета_Пусто.Доступность = Истина;
		ТекущийЭлемент = Элементы.Объект;
		Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_Пусто;		
	ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		Элементы.ОбъектУчета_Контрагенты.Видимость = Истина;
		ТекущийЭлемент = Элементы.Контрагент;
		Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_Контрагенты;		
	ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Элементы.ОбъектУчета_ДоговорыКонтрагентов.Видимость = Истина;
		ТекущийЭлемент = Элементы.ДоговорКонтрагента;
		Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_ДоговорыКонтрагентов;		
	ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.УслугиПоДоговору") Тогда	
		Элементы.ОбъектУчета_УслугиПоДоговорам.Видимость = Истина;
		ТекущийЭлемент = Элементы.УслугаПоДоговору;
		Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_УслугиПоДоговорам;
	ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда
		Элементы.ОбъектУчета_ДолговыеОбязательства.Видимость = Истина;
		ТекущийЭлемент = Элементы.ДолговоеОбязательство;
		Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_ДолговыеОбязательства;
	ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ИсполнительныеДокументы") Тогда	
		Элементы.ОбъектУчета_ИсполнительныеДокументы.Видимость = Истина;
		ТекущийЭлемент = Элементы.ИсполнительныйДокумент;
		Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_ИсполнительныеДокументы;
	ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.Залоги") Тогда
		Элементы.ОбъектУчета_Залоги.Видимость = Истина;
		ТекущийЭлемент = Элементы.Залог;
		Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_Залоги;
	КонецЕсли;
	
	//
	Попытка
		КонтрагентКЛ = ОбъектыСервер.РазыменоватьСсылку(Объект.Объект, "Должник");
	Исключение
		Попытка
			КонтрагентКЛ = ОбъектыСервер.РазыменоватьСсылку(Объект.Объект, "Контрагент");
		Исключение
			КонтрагентКЛ = Объект.Объект;
		КонецПопытки;
	КонецПопытки;
	ЗаполнитьСписокКонтактов(Элемент = Неопределено);
	
	//
	Модифицированность = Истина; //!!!!! - добавлено из конфы "аааа"
	
	//
	Если Не ТипСотрудника.Пустая() Тогда //!!!!!
		ЗаполнитьОтветственный();        //!!!!!
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектПростойПриИзменении(Элемент)
	Если Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_Контрагенты Тогда
		Объект.Объект = Контрагент;
		КонтрагентКЛ = Объект.Объект;
	ИначеЕсли Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_ДоговорыКонтрагентов Тогда	
		Объект.Объект = ДоговорКонтрагента;
		КонтрагентКЛ = ОбъектыСервер.РазыменоватьСсылку(Объект.Объект, "Контрагент");
	ИначеЕсли Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_УслугиПоДоговорам Тогда	
		Объект.Объект = УслугаПоДоговору;	
		КонтрагентКЛ = ОбъектыСервер.РазыменоватьСсылку(Объект.Объект, "Контрагент");
	ИначеЕсли Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_ДолговыеОбязательства Тогда
		Объект.Объект = ДолговоеОбязательство;
		КонтрагентКЛ = ОбъектыСервер.РазыменоватьСсылку(Объект.Объект, "Должник");
	ИначеЕсли Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_ИсполнительныеДокументы Тогда	
		Объект.Объект = ИсполнительныйДокумент;
		КонтрагентКЛ = ОбъектыСервер.РазыменоватьСсылку(Объект.Объект, "Должник");
	ИначеЕсли Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_Залоги Тогда
		Объект.Объект = Залог;
		КонтрагентКЛ = ОбъектыСервер.РазыменоватьСсылку(Объект.Объект.Владелец, "Должник");
	КонецЕсли;
	ЗаполнитьСписокКонтактов(Элемент = Неопределено);
		
	Модифицированность = Истина; //!!!!!
	
	//
	Если Не ТипСотрудника.Пустая() Тогда //!!!!!
		ЗаполнитьОтветственный();        //!!!!!
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолеОчистка(Элемент, СтандартнаяОбработка)
	Объект.Объект = Неопределено;
	Элементы.ОбъектУчета_Пусто.Доступность = Истина;
	Элемент.Родитель.Видимость = Ложь;
				
	Элементы.ГруппаОбъектУчета.ТекущаяСтраница = Элементы.ОбъектУчета_Пусто;
	ТекущийЭлемент = Элементы.Объект;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеГруппы(Команда)
	Элементы.ОбъектУчета_Пусто.Видимость = Истина;
	Элементы.ОбъектУчета_Контрагенты.Видимость = Истина;
	Элементы.ОбъектУчета_ДоговорыКонтрагентов.Видимость = Истина;
	Элементы.ОбъектУчета_УслугиПоДоговорам.Видимость = Истина;
	Элементы.ОбъектУчета_ДолговыеОбязательства.Видимость = Истина;
	Элементы.ОбъектУчета_ИсполнительныеДокументы.Видимость = Истина;
	Элементы.ОбъектУчета_Залоги.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТипСотрудникаПриИзменении(Элемент)
	Если ТипСотрудника.Пустая() Тогда
		Элементы.Ответственный.ТолькоПросмотр = Ложь;
		Ответственный = УдалитьОбщегоНазначения.ТекущийПользователь();
	Иначе
		Элементы.Ответственный.ТолькоПросмотр = Истина;
		ЗаполнитьОтветственный();
	КонецЕсли;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтветственный()
	Если Объект.Выполнена Тогда
		Ответственный = Объект.Исполнитель; //заплатка
		Возврат;
	КонецЕсли;
	
	Ответственный = "";
	Если ЗначениеЗаполнено(Объект.Объект) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	ОтветственныеСотрудники.Пользователь,
		                      |	ОтветственныеСотрудники.Пользователь.Наименование КАК Наименование,
		                      |	ВЫБОР
		                      |		КОГДА ОтветственныеСотрудники.Объект = &Объект
		                      |			ТОГДА 1
		                      |		ИНАЧЕ 2
		                      |	КОНЕЦ КАК Приоритет1,
		                      |	1 КАК Приоритет2,
		                      |	ОтветственныеСотрудники.ТипСотрудника
		                      |ПОМЕСТИТЬ ТипыС
		                      |ИЗ
		                      |	РегистрСведений.ОтветственныеСотрудники КАК ОтветственныеСотрудники
		                      |ГДЕ
		                      |	ОтветственныеСотрудники.Объект = &Объект
		                      |
		                      |ОБЪЕДИНИТЬ ВСЕ
		                      |
		                      |ВЫБРАТЬ  
		                      |	СотрудникиВПомощь.Пользователь,
		                      |	СотрудникиВПомощь.Пользователь.Наименование,
		                      |	ВЫБОР
		                      |		КОГДА СотрудникиВПомощь.Объект = &Объект
		                      |			ТОГДА 1
		                      |		ИНАЧЕ 2
		                      |	КОНЕЦ,
		                      |	2,
		                      |	СотрудникиВПомощь.ТипСотрудника
		                      |ИЗ
		                      |	РегистрСведений.СотрудникиВПомощь КАК СотрудникиВПомощь
		                      |ГДЕ
		                      |	СотрудникиВПомощь.Объект = &Объект
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ 
		                      |	ТипыС.Пользователь КАК Ссылка,
		                      |	ТипыС.Пользователь.Наименование КАК Наименование,
		                      |	ТипыС.ТипСотрудника.Глубина
		                      |ИЗ
		                      |	(ВЫБРАТЬ
		                      |		МАКСИМУМ(ТипыСотрудников.Глубина) КАК Глубина
		                      |	ИЗ
		                      |		ТипыС КАК ТипыС
		                      |			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ТипыСотрудников КАК ТипыСотрудников
		                      |			ПО ТипыС.ТипСотрудника = ТипыСотрудников.Ссылка
		                      |	ГДЕ
		                      |		ВЫРАЗИТЬ(&ТипСотрудника КАК ПланВидовХарактеристик.ТипыСотрудников).Родители ПОДОБНО ТипыСотрудников.РодителиШаблон) КАК ОтвМакс
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТипыС КАК ТипыС
		                      |		ПО (ТипыС.ТипСотрудника.Глубина = ОтвМакс.Глубина)
		                      |			И (ВЫРАЗИТЬ(&ТипСотрудника КАК ПланВидовХарактеристик.ТипыСотрудников).Родители ПОДОБНО ТипыС.ТипСотрудника.РодителиШаблон)
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	ТипыС.Приоритет1,
		                      |	ТипыС.Приоритет2");
		Запрос.УстановитьПараметр("ТипСотрудника", ТипСотрудника);
		//заплатка +
		Если ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Запрос.УстановитьПараметр("Объект", Объект.Объект);
		ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Если Константы.ДетализацияПоДоговорам.Получить() Тогда
				Запрос.УстановитьПараметр("Объект", Объект.Объект);
			ИначеЕсли Константы.ДетализацияПоКА.Получить() Тогда
				Запрос.УстановитьПараметр("Объект", Объект.Объект.Контрагент);
			Иначе
				Запрос.УстановитьПараметр("Объект", Объект.Объект);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.УслугиПоДоговору") Тогда
			Если Константы.ДетализацияПоУслугам.Получить() Тогда
				Запрос.УстановитьПараметр("Объект", Объект.Объект);	
			ИначеЕсли Константы.ДетализацияПоДоговорам.Получить() Тогда
				Запрос.УстановитьПараметр("Объект", Объект.Объект.Владелец);
			ИначеЕсли Константы.ДетализацияПоКА.Получить() Тогда
				Запрос.УстановитьПараметр("Объект", Объект.Объект.Контрагент);
			Иначе
				Запрос.УстановитьПараметр("Объект", Объект.Объект);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда
			Если Константы.ДетализацияПоДО.Получить() Тогда
				Запрос.УстановитьПараметр("Объект", Объект.Объект);	
			ИначеЕсли Константы.ДетализацияПоКА.Получить() Тогда
				Запрос.УстановитьПараметр("Объект", Объект.Объект.Должник);
			Иначе
				Запрос.УстановитьПараметр("Объект", Объект.Объект);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ИсполнительныеДокументы") Тогда	
			Если Константы.ДетализацияПоИД.Получить() Тогда
				Запрос.УстановитьПараметр("Объект", Объект.Объект);				
			ИначеЕсли Константы.ДетализацияПоДО.Получить() Тогда
				Запрос.УстановитьПараметр("Объект", Объект.Объект.Владелец);
			ИначеЕсли Константы.ДетализацияПоКА.Получить() Тогда
				Запрос.УстановитьПараметр("Объект", Объект.Объект.Должник);
			Иначе
				Запрос.УстановитьПараметр("Объект", Объект.Объект);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.Залоги") Тогда	
			Если Константы.ДетализацияПоЗ.Получить() Тогда
				Запрос.УстановитьПараметр("Объект", Объект.Объект);				
			ИначеЕсли Константы.ДетализацияПоДО.Получить() Тогда
				Запрос.УстановитьПараметр("Объект", Объект.Объект.Владелец);
			ИначеЕсли Константы.ДетализацияПоКА.Получить() Тогда
				Запрос.УстановитьПараметр("Объект", Объект.Объект.Владелец.Должник);
			Иначе
				Запрос.УстановитьПараметр("Объект", Объект.Объект);
			КонецЕсли;
			
		КонецЕсли;	
						
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() = 1 Тогда
			Ответственный = Результат[0].Ссылка;	
		ИначеЕсли Результат.Количество() > 1 Тогда
			Для Каждого Элемент Из Результат Цикл
				Ответственный = Ответственный + "; " + Элемент.Наименование;
			КонецЦикла;
			Ответственный = Сред(Ответственный, 3);
		КонецЕсли;
	КонецЕсли;
	
	Если Ответственный = "" Тогда
		Ответственный = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РезультатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
  	СписокФункцийДляОтбора = СформироватьСписокРезультатов();
	
	Форма = ПолучитьФорму("Справочник.РезультатыМероприятий.ФормаВыбора",,ЭтаФорма,,,);
	Отбор = Форма.Список.Отбор.Элементы;
	
	НовыйЭлемент = Отбор.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец");
	НовыйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйЭлемент.ПравоеЗначение = Объект.ТипМероприятия;
	НовыйЭлемент.Использование = Истина;
		
	НовыйЭлемент = Отбор.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФункцияВидимости");
	НовыйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;	
	НовыйЭлемент.ПравоеЗначение = СписокФункцийДляОтбора;
	НовыйЭлемент.Использование = Истина;
		
	//Чуров А.И.
	ОткрытьФорму(Форма);
	//Результат = ОткрытьФормуМодально("Справочник.РезультатыМероприятий.ФормаВыбора");
	//Если Результат <> Неопределено Тогда
	//	Объект.Результат = Результат;
	//	РезультатПриИзменении("");
	//КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "МероприятиеРезультатНачалоВыбора" и Источник = ЭтаФорма.УникальныйИдентификатор Тогда	
		Если Параметр <> Неопределено Тогда
			Объект.Результат = Параметр;
			РезультатПриИзменении("");
			Модифицированность = истина;
		КонецЕсли;	
	КонецЕсли;
	
	Если ИмяСобытия = "ЗакрытиеСценария" Тогда
		 РезультатПриИзменении(Элементы.Результат);
	КонецЕсли;

	Если ИмяСобытия = "ОбновитьВремяРаботы" Тогда
		ЭтаФорма.Записать();
		// Проверка на выполнение мероприятия
		Если ЗначениеЗаполнено(ЭтаФорма.Объект.Дата) И ЭтаФорма.Объект.Выполнена = Истина Тогда
			Возврат;
		Иначе
			ПодключитьОбработчикОжидания("ПрошлоВремя30", 30, Истина);
			ПодключитьОбработчикОжидания("ПрошлоВремя60", 60, Истина);
			ЭтаФорма.Объект.Дата = ТекущаяДата()-1;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "НовыйЗвонок" Тогда
		ЭтаФорма.Записать();
		РезультатНетКонтактаНаСервере();
		Если ЗначениеЗаполнено(ЭтаФорма.Объект.Результат) = Ложь Тогда
			ЭтаФорма.Объект.Результат = РезультатНетКонтакта;
		ИначеЕсли ЗначениеЗаполнено(ЭтаФорма.Объект.Результат) = Истина Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "СброшенныйЗвонок" Тогда
		ЭтаФорма.Записать();
		РезультатСбросНаСервере();
		Если ЗначениеЗаполнено(ЭтаФорма.Объект.Результат) = Истина Тогда
			Возврат;
		ИначеЕсли ЗначениеЗаполнено(ЭтаФорма.Объект.Результат) = Ложь Тогда
			ЭтаФорма.Объект.Результат = РезультатСброс;
			ЭтаФорма.Объект.Комментарий = "Автоматическое закрытие → " + Объект.Комментарий;
			ВыполнитьИЗакрыть(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "НеудачныйЗвонок" Тогда
		ЭтаФорма.Записать();
		РезультатНетКонтактаНаСервере();
		Если ЗначениеЗаполнено(ЭтаФорма.Объект.Результат) = Истина Тогда
			Возврат;
		ИначеЕсли ЗначениеЗаполнено(ЭтаФорма.Объект.Результат) = Ложь Тогда
			ЭтаФорма.Объект.Результат = РезультатНетКонтакта;
			ЭтаФорма.Объект.Комментарий = "Автоматическое закрытие → " + Объект.Комментарий;
			ВыполнитьИЗакрыть(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
		Если ИмяСобытия = "ШаблонИзмененВЦ" Тогда
		ТипВЦНаСервере();
		Если ЭтаФорма.Объект.ТипМероприятия <> ТипВЦ Тогда
			Возврат;
		ИначеЕсли ЭтаФорма.Объект.ТипМероприятия = ТипВЦ Тогда	
			ФормаВЦ = ПолучитьФорму("ОбщаяФорма.РассылкаНаWhatsApp");
			ЭтаФорма.Объект.Комментарий = ФормаВЦ.Сообщение;
			ФормаВЦ.Закрыть();
			ВыполнитьИЗакрыть(Неопределено);
		КонецЕсли;		
	КонецЕсли;
	
	Если ИмяСобытия = "ШаблонИзмененСМС" Тогда
		Если ЭтаФорма.Объект.ТипМероприятия <> ПредопределенноеЗначение("Справочник.ТипыМероприятий.ОтправкаСМС") Тогда
			Возврат;
		ИначеЕсли ЭтаФорма.Объект.ТипМероприятия = ПредопределенноеЗначение("Справочник.ТипыМероприятий.ОтправкаСМС") Тогда	
			ФормаСМС = ПолучитьФорму("Обработка.бит_Битфон.Форма.ОтправкаСМС");
			ЭтаФорма.Объект.Комментарий = ФормаСМС.ТекстСМС;
			ФормаСМС.Закрыть();
			ВыполнитьИЗакрыть(Неопределено);
		КонецЕсли;		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ТипВЦНаСервере()
	// Получим непредопределенное значение с сервера
	ЭтаФорма.ТипВЦ = Справочники.ТипыМероприятий.НайтиПоНаименованию("WhatsApp");
КонецПроцедуры

&НаСервере
Процедура РезультатСбросНаСервере()
	// Получим непредопределенное значение с сервера
	ЭтаФорма.РезультатСброс = Справочники.РезультатыМероприятий.НайтиПоНаименованию("Сброс");
КонецПроцедуры

&НаСервере
Процедура РезультатНетКонтактаНаСервере()
	// Получим непредопределенное значение с сервера
	ЭтаФорма.РезультатНетКонтакта = Справочники.РезультатыМероприятий.НайтиПоНаименованию("Нет контакта");
КонецПроцедуры	

&НаСервере
Функция СформироватьСписокРезультатов()
	СписокРезультатов = Новый СписокЗначений();	
	Запрос = Новый Запрос("ВЫБРАТЬ
						|	РезультатыМероприятий.ФункцияВидимости
						|ИЗ
						|	Справочник.РезультатыМероприятий КАК РезультатыМероприятий
						|ГДЕ
						|	РезультатыМероприятий.Владелец = &Владелец
						|
						|СГРУППИРОВАТЬ ПО
						|	РезультатыМероприятий.ФункцияВидимости");
	Запрос.УстановитьПараметр("Владелец", Объект.ТипМероприятия);
	Результат = Запрос.Выполнить().Выбрать();	
	Пока Результат.Следующий() Цикл
		//строгая проверка, повышает отказоустойчивость!!!
		Если УправлениеСвойствами.ВычислитьФункциюВидимости(Результат.ФункцияВидимости.Функция, Объект.Объект) = Ложь Тогда 
			СписокРезультатов.Добавить(Результат.ФункцияВидимости);			
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокРезультатов;	
КонецФункции

&НаСервере
Функция ПолучитьЗаписьРазговора()
	Возврат Объект.бтЗаписьРазговора;
КонецФункции

&НаКлиенте
Процедура бтЗаписьРазговораОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	стрЗаписьРазговора = ПолучитьЗаписьРазговора();
	Если ЗначениеЗаполнено(стрЗаписьРазговора) Тогда
		бит_БИТфонКлиент.ВоспроизвестиЗаписьРазговора(стрЗаписьРазговора);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСМС(Команда)
	// Проверка на нарушение 230-ФЗ
	Если ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда
		ОбъектДолжник = ОбъектыСервер.РазыменоватьСсылку(Объект.Объект, "Должник");
	ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		ОбъектДолжник = Объект.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если КонтрольСобытий.КонтрольЧасовогоПояса(ОбъектДолжник) Тогда
		Предупреждение("Данное действие приведет к нарушению 230-ФЗ!");
		Возврат;
	КонецЕсли;
	Если КонтрольСобытий.КонтрольСМС(ОбъектДолжник) Тогда
		Предупреждение("Данное действие приведет к нарушению 230-ФЗ!");
		Возврат;
	КонецЕсли;
 
	ФормаСМС = ПолучитьФорму("Обработка.бит_Битфон.Форма.ОтправкаСМС");
	// ФормаСМС.ВладелецФормы = ЭтаФорма;
	стрСМСЛогин = "";
	стрСМСПароль = "";
	стрОтправитель = "";
	Автоинформирование.ПолучитьПараметрыОтправкиСМС(стрСМСЛогин, стрСМСПароль, стрОтправитель);
	ФормаСМС.СМСЛогин = стрСМСЛогин;
	ФормаСМС.СМСПароль = стрСМСПароль;
	Если ЗначениеЗаполнено(стрОтправитель) Тогда
		ФормаСМС.Элементы.Отправитель.СписокВыбора.Добавить(стрОтправитель);
		ФормаСМС.Отправитель = стрОтправитель;
	КонецЕсли;
	
	ФормаСМС.НомерПолучателя = Объект.Контакт;
	Попытка
	// Попытаемся получить договор с рабочего стола
	ФормаСМС.Договор = ЭтаФорма.Объект.Объект;
	Исключение
	// Попытаемся получить договор из мероприятия
	ФормаСМС.Договор = ЭтаФорма.Объект.Ссылка;
	КонецПопытки;
	ФормаСМС.ТекстСМС = Автоинформирование.ПолучитьПодсказку(Объект.Объект, ОбъектыСервер.РазыменоватьСсылку(Объект.ТипМероприятия, "ШаблонСМС"));
	ФормаСМС.ОткрытьМодально();
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьФайл(Команда)
	ФормаДокумент = ПолучитьФорму("Документ.ПрикрепитьФайлы.Форма.ФормаДокумента");
	ФормаДокумент.ВладелецФормы = ЭтаФорма;
	ФормаДокумент.Объект.Объект = Объект.Объект;
	ФормаДокумент.Объект.Файлы.Очистить();
	Строка = ФормаДокумент.Объект.Файлы.Добавить();
	//Строка.ТипФайла = ОбъектыСервер.РазыменоватьСсылку(Объект.ТипМероприятия, "ТипФайла");
	//Лебедева 26.02.2018
	Строка.ТипФайла = ОбъектыСервер.РазыменоватьСсылку(Объект.Результат, "ТипФайла");
	Результат = ОткрытьФорму(ФормаДокумент);
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьЗапись(Команда)
	ФормаДокумент = ПолучитьФорму("Документ.ПрикрепитьФайлы.Форма.ФормаДокумента");
	ФормаДокумент.ВладелецФормы = ЭтаФорма;
	ФормаДокумент.Объект.Объект = Объект.Объект;
	Строка = ФормаДокумент.Объект.Файлы.Добавить();
	Строка.ТипФайла = ПредопределенноеЗначение("Справочник.ТипыПрикрепляемыхФайлов.ЗаписьЗвонка");
	Строка.Путь = Объект.бтЗаписьРазговора;
	ФормаДокумент.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНомер(Команда)
	контрагент = бит_ТелефонияКлиентПереопределяемый.ЗадатьНомерКонтрагентаМер(Объект.Контакт, Объект.Объект);
	ОбъектПростойПриИзменении(Неопределено);
	ОграничитьТипОбъектаЗвонок();	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтрагента(Команда)
	бит_ТелефонияКлиентПереопределяемый.СоздатьНовогоКонтрагентаМер(Объект.Контакт, Объект.Объект);
	ОбъектПростойПриИзменении(Неопределено);
	ОграничитьТипОбъектаЗвонок();
КонецПроцедуры

&НаСервере
Процедура ОграничитьТипОбъектаЗвонок() 
	СтрокаТипов = ", СправочникСсылка.Контрагенты";
	
	Если Константы.ДетализацияПоДоговорам.Получить() Тогда
	    СтрокаТипов = СтрокаТипов + ", СправочникСсылка.ДоговорыКонтрагентов";
	КонецЕсли;	
	Если Константы.ДетализацияПоУслугам.Получить() Тогда
	    СтрокаТипов = СтрокаТипов + ", СправочникСсылка.УслугиПоДоговору";
	КонецЕсли;
	Если Константы.ДетализацияПоДО.Получить() Тогда
	    СтрокаТипов = СтрокаТипов + ", СправочникСсылка.ДолговыеОбязательства";
	КонецЕсли;	
	Если Константы.ДетализацияПоИД.Получить() Тогда
	    СтрокаТипов = СтрокаТипов + ", СправочникСсылка.ИсполнительныеДокументы";
	КонецЕсли;	
	Если Константы.ДетализацияПоЗ.Получить() Тогда
		СтрокаТипов = СтрокаТипов + ", СправочникСсылка.Залоги";
	КонецЕсли;
	
	Элементы.Объект.ОграничениеТипа = Новый ОписаниеТипов(Сред(СтрокаТипов, 3));	
КонецПроцедуры

//! ЗАПИСЬ ДОПРЕКВИЗИТОВ ДО и КА через Карточку мероприятия
// Получает значение выбранных в результате мероприятия допреквизитов у объекта 
&НаСервере
Процедура ДобавитьДополнительныеРеквизитыОбъекта()
	ЗапросДО = Новый Запрос;
	ЗапросДО.Текст = 
		"ВЫБРАТЬ
		|	РезультатыМероприятийДополнительныеРеквизитыОбъекта.НаименованиеСвойства КАК НаименованиеСвойства,
		|	ДолговыеОбязательстваДополнительныеРеквизиты.Значение КАК Значение,
		|	РезультатыМероприятийДополнительныеРеквизитыОбъекта.Обязательное КАК Обязательное
		|ИЗ
		|	Справочник.РезультатыМероприятий.ДополнительныеРеквизитыОбъекта КАК РезультатыМероприятийДополнительныеРеквизитыОбъекта
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДолговыеОбязательства.ДополнительныеРеквизиты КАК ДолговыеОбязательстваДополнительныеРеквизиты
		|		ПО РезультатыМероприятийДополнительныеРеквизитыОбъекта.НаименованиеСвойства = ДолговыеОбязательстваДополнительныеРеквизиты.Свойство
		|			И (ДолговыеОбязательстваДополнительныеРеквизиты.Ссылка = &Объект)
		|ГДЕ
		|	РезультатыМероприятийДополнительныеРеквизитыОбъекта.Ссылка = &Ссылка
		|	И РезультатыМероприятийДополнительныеРеквизитыОбъекта.НаименованиеСвойства.ЭтоДополнительноеСведение = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	РезультатыМероприятийДополнительныеРеквизитыОбъекта.НаименованиеСвойства,
		|	ДополнительныеСведения.Значение,
		|	РезультатыМероприятийДополнительныеРеквизитыОбъекта.Обязательное
		|ИЗ
		|	Справочник.РезультатыМероприятий.ДополнительныеРеквизитыОбъекта КАК РезультатыМероприятийДополнительныеРеквизитыОбъекта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО РезультатыМероприятийДополнительныеРеквизитыОбъекта.НаименованиеСвойства.Ссылка = ДополнительныеСведения.Свойство
		|			И (ДополнительныеСведения.Объект = &Объект)
		|ГДЕ
		|	РезультатыМероприятийДополнительныеРеквизитыОбъекта.НаименованиеСвойства.Ссылка.ЭтоДополнительноеСведение = ИСТИНА
		|	И РезультатыМероприятийДополнительныеРеквизитыОбъекта.Ссылка = &Ссылка";
	
	ЗапросКА = Новый Запрос;
	ЗапросКА.Текст = 
	
	"ВЫБРАТЬ
	|	РезультатыМероприятийДополнительныеРеквизитыКА.НаименованиеСвойства КАК НаименованиеСвойства,
	|	КонтрагентыДополнительныеРеквизиты.Значение КАК Значение,
	|	РезультатыМероприятийДополнительныеРеквизитыКА.Обязательное КАК Обязательное
	|ИЗ
	|	Справочник.РезультатыМероприятий.ДополнительныеРеквизитыКА КАК РезультатыМероприятийДополнительныеРеквизитыКА
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
	|		ПО РезультатыМероприятийДополнительныеРеквизитыКА.НаименованиеСвойства = КонтрагентыДополнительныеРеквизиты.Свойство
	|			И (КонтрагентыДополнительныеРеквизиты.Ссылка = &ОбъектКА)
	|ГДЕ
	|	РезультатыМероприятийДополнительныеРеквизитыКА.Ссылка = &Ссылка
	|	И РезультатыМероприятийДополнительныеРеквизитыКА.НаименованиеСвойства.ЭтоДополнительноеСведение = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РезультатыМероприятийДополнительныеРеквизитыКА.НаименованиеСвойства,
	|	ДополнительныеСведения.Значение,
	|	РезультатыМероприятийДополнительныеРеквизитыКА.Обязательное
	|ИЗ
	|	Справочник.РезультатыМероприятий.ДополнительныеРеквизитыКА КАК РезультатыМероприятийДополнительныеРеквизитыКА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО РезультатыМероприятийДополнительныеРеквизитыКА.НаименованиеСвойства.Ссылка = ДополнительныеСведения.Свойство
	|			И (ДополнительныеСведения.Объект = &ОбъектКА)
	|ГДЕ
	|	РезультатыМероприятийДополнительныеРеквизитыКА.НаименованиеСвойства.Ссылка.ЭтоДополнительноеСведение = ИСТИНА
	|	И РезультатыМероприятийДополнительныеРеквизитыКА.Ссылка = &Ссылка";
		
	
	Ссылка = Объект.Результат;
	Если ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда
		ОбъектДО = Объект.Объект;
		ОбъектКА = Объект.Объект.Должник;
		
		ЗапросКА.УстановитьПараметр("ОбъектКА", ОбъектКА);
		ЗапросДО.УстановитьПараметр("Объект", ОбъектДО);
		ЗапросКА.УстановитьПараметр("Ссылка", Ссылка);
		ЗапросДО.УстановитьПараметр("Ссылка", Ссылка);

		
		РезультатЗапросаКА = ЗапросКА.Выполнить();
		ВыборкаДетальныеЗаписиКА = РезультатЗапросаКА.Выбрать();
		ДополнительныеРеквизитыДолжника.Очистить();
		Пока ВыборкаДетальныеЗаписиКА.Следующий() Цикл
			НоваяСтрока = ДополнительныеРеквизитыДолжника.Добавить();
			НоваяСтрока.Значение= ВыборкаДетальныеЗаписиКА.Значение;
			НоваяСтрока.Свойство = ВыборкаДетальныеЗаписиКА.НаименованиеСвойства;
			НоваяСтрока.Обязательное = ВыборкаДетальныеЗаписиКА.Обязательное;
		КонецЦикла;
		
		РезультатЗапросаДО = ЗапросДО.Выполнить();
		ВыборкаДетальныеЗаписиДО = РезультатЗапросаДО.Выбрать();
		ДополнительныеРеквизитыОбъекта.Очистить();
		Пока ВыборкаДетальныеЗаписиДО.Следующий() Цикл
			НоваяСтрока = ДополнительныеРеквизитыОбъекта.Добавить();
			НоваяСтрока.Значение= ВыборкаДетальныеЗаписиДО.Значение;
			НоваяСтрока.Свойство = ВыборкаДетальныеЗаписиДО.НаименованиеСвойства;
			НоваяСтрока.Обязательное = ВыборкаДетальныеЗаписиДО.Обязательное;
		КонецЦикла;
	
	ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		ОбъектКА = Объект.Объект;
		ДополнительныеРеквизитыОбъекта.Очистить();
		ЗапросКА.УстановитьПараметр("ОбъектКА", ОбъектКА);
		ЗапросКА.УстановитьПараметр("Ссылка", Ссылка);

		РезультатЗапросаКА = ЗапросКА.Выполнить();
		ВыборкаДетальныеЗаписиКА = РезультатЗапросаКА.Выбрать();
		ДополнительныеРеквизитыДолжника.Очистить();
		Пока ВыборкаДетальныеЗаписиКА.Следующий() Цикл
			НоваяСтрока = ДополнительныеРеквизитыДолжника.Добавить();
			НоваяСтрока.Значение= ВыборкаДетальныеЗаписиКА.Значение;
			НоваяСтрока.Свойство = ВыборкаДетальныеЗаписиКА.НаименованиеСвойства;
			НоваяСтрока.Обязательное = ВыборкаДетальныеЗаписиКА.Обязательное;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыОбъектаПередНачаломИзменения(Элемент, Отказ)
	ТипЭлемента = ОбъектыСервер.РазыменоватьСсылку(Элемент.ТекущиеДанные.Свойство, "ТипЗначения");	
	Если Строка(ТипЭлемента) = "Строка" Тогда
		ВидСтроки = ОбъектыСервер.РазыменоватьСсылку(Элемент.ТекущиеДанные.Свойство, "ВидСтроки");		
		Если ВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Строка") Тогда
			Элемент.ПодчиненныеЭлементы[1].КнопкаВыбора = Ложь;
			Элемент.ПодчиненныеЭлементы[1].КнопкаОткрытия = Ложь;
			Элемент.ПодчиненныеЭлементы[1].РедактированиеТекста = Истина;
		ИначеЕсли ВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Телефон") ИЛИ 
			ВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Адрес") Тогда
			Элемент.ПодчиненныеЭлементы[1].КнопкаВыбора = Истина;
			Элемент.ПодчиненныеЭлементы[1].КнопкаОткрытия = Ложь;
			Элемент.ПодчиненныеЭлементы[1].РедактированиеТекста = Ложь;	
		ИначеЕсли ВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.ПутьКФайлу") Тогда
			Элемент.ПодчиненныеЭлементы[1].КнопкаВыбора = Истина;
			Элемент.ПодчиненныеЭлементы[1].КнопкаОткрытия = Истина;
			Элемент.ПодчиненныеЭлементы[1].РедактированиеТекста = Истина;
		КонецЕсли;
	ИначеЕсли ТипЭлемента = Новый ОписаниеТипов("СправочникСсылка.тсЗначенияСвойствОбъектов") Тогда
		Элемент.ПодчиненныеЭлементы[1].КнопкаВыбора = Истина;
		Элемент.ПодчиненныеЭлементы[1].КнопкаОткрытия = Ложь;
		Элемент.ПодчиненныеЭлементы[1].РедактированиеТекста = Ложь;	
	ИначеЕсли ОбъектыСервер.ЭтотТипЕстьСсылка(ТипЭлемента) Тогда		
		Элемент.ПодчиненныеЭлементы[1].КнопкаВыбора = Истина;
		Элемент.ПодчиненныеЭлементы[1].КнопкаОткрытия = Истина;
		Элемент.ПодчиненныеЭлементы[1].РедактированиеТекста = Ложь;
		Элемент.ПодчиненныеЭлементы[1].КнопкаОчистки = Истина;
	ИначеЕсли Строка(ТипЭлемента) = "Число" Тогда
		Элемент.ПодчиненныеЭлементы[1].КнопкаВыбора = Истина;
		Элемент.ПодчиненныеЭлементы[1].КнопкаОткрытия = Ложь;
		Элемент.ПодчиненныеЭлементы[1].РедактированиеТекста = Истина;
	ИначеЕсли Строка(ТипЭлемента) = "Булево" Тогда
		Элемент.ПодчиненныеЭлементы[1].КнопкаВыбора = Истина;
		Элемент.ПодчиненныеЭлементы[1].КнопкаОткрытия = Ложь;
		Элемент.ПодчиненныеЭлементы[1].РедактированиеТекста = Ложь;
	ИначеЕсли Строка(ТипЭлемента) = "Дата" Тогда
		Элемент.ПодчиненныеЭлементы[1].КнопкаВыбора = Истина;
		Элемент.ПодчиненныеЭлементы[1].КнопкаОткрытия = Ложь;
		Элемент.ПодчиненныеЭлементы[1].РедактированиеТекста = Истина;
	КонецЕсли;
	Элемент.ПодчиненныеЭлементы[1].ОграничениеТипа = ТипЭлемента;

КонецПроцедуры
//Лебедева, 08.06.2018: Запись через карточку мероприятия допреквизитов и свойств объекта
&НаСервере
Процедура ЗаписатьЗначениеСвойства()
	Если ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда
		Для каждого стр из ДополнительныеРеквизитыОбъекта Цикл
			СсылкаНаОбъект = Объект.Объект;	
			Значение = Стр.Значение;
			КодСвойства = Стр.Свойство.Код;
			ОбъектыСервер.ЗаписатьЗначениеСвойства(СсылкаНаОбъект,КодСвойства,Значение);	
		КонецЦикла;
		Для каждого стр из ДополнительныеРеквизитыДолжника Цикл
			СсылкаНаОбъект = Объект.Объект.Должник;	
			Значение = Стр.Значение;
			КодСвойства = Стр.Свойство.Код;
			ОбъектыСервер.ЗаписатьЗначениеСвойства(СсылкаНаОбъект,КодСвойства,Значение);	
		КонецЦикла;
	ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		Для каждого стр из ДополнительныеРеквизитыДолжника Цикл
			СсылкаНаОбъект = Объект.Объект;	
			Значение = Стр.Значение;
			КодСвойства = Стр.Свойство.Код;
			ОбъектыСервер.ЗаписатьЗначениеСвойства(СсылкаНаОбъект,КодСвойства,Значение);	
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры
// Установка состава карточки
&НаСервере
Процедура ПроверитьДопРеквизитыВРезультате()	
	Элементы.ГруппаДО.Видимость = ?(ДополнительныеРеквизитыОбъекта.Количество() > 0, Истина, Ложь);
	Элементы.ГруппаДолжник.Видимость = ?(ДополнительныеРеквизитыДолжника.Количество() > 0, Истина, Ложь);
	Элементы.ГруппаДополнительныеРеквизитыОбъекта.Видимость = Элементы.ГруппаДО.Видимость ИЛИ Элементы.ГруппаДолжник.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыДолжникаПередНачаломИзменения(Элемент, Отказ)
	ТипЭлемента = ОбъектыСервер.РазыменоватьСсылку(Элемент.ТекущиеДанные.Свойство, "ТипЗначения");	
	Если Строка(ТипЭлемента) = "Строка" Тогда
		ВидСтроки = ОбъектыСервер.РазыменоватьСсылку(Элемент.ТекущиеДанные.Свойство, "ВидСтроки");		
		Если ВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Строка") Тогда
			Элемент.ПодчиненныеЭлементы[1].КнопкаВыбора = Ложь;
			Элемент.ПодчиненныеЭлементы[1].КнопкаОткрытия = Ложь;
			Элемент.ПодчиненныеЭлементы[1].РедактированиеТекста = Истина;
		ИначеЕсли ВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Телефон") ИЛИ 
			ВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Адрес") Тогда
			Элемент.ПодчиненныеЭлементы[1].КнопкаВыбора = Истина;
			Элемент.ПодчиненныеЭлементы[1].КнопкаОткрытия = Ложь;
			Элемент.ПодчиненныеЭлементы[1].РедактированиеТекста = Ложь;	
		ИначеЕсли ВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.ПутьКФайлу") Тогда
			Элемент.ПодчиненныеЭлементы[1].КнопкаВыбора = Истина;
			Элемент.ПодчиненныеЭлементы[1].КнопкаОткрытия = Истина;
			Элемент.ПодчиненныеЭлементы[1].РедактированиеТекста = Истина;
		КонецЕсли;
	ИначеЕсли ТипЭлемента = Новый ОписаниеТипов("СправочникСсылка.тсЗначенияСвойствОбъектов") Тогда
		Элемент.ПодчиненныеЭлементы[1].КнопкаВыбора = Истина;
		Элемент.ПодчиненныеЭлементы[1].КнопкаОткрытия = Ложь;
		Элемент.ПодчиненныеЭлементы[1].РедактированиеТекста = Ложь;	
	ИначеЕсли ОбъектыСервер.ЭтотТипЕстьСсылка(ТипЭлемента) Тогда		
		Элемент.ПодчиненныеЭлементы[1].КнопкаВыбора = Истина;
		Элемент.ПодчиненныеЭлементы[1].КнопкаОткрытия = Истина;
		Элемент.ПодчиненныеЭлементы[1].РедактированиеТекста = Ложь;
		Элемент.ПодчиненныеЭлементы[1].КнопкаОчистки = Истина;
	ИначеЕсли Строка(ТипЭлемента) = "Число" Тогда
		Элемент.ПодчиненныеЭлементы[1].КнопкаВыбора = Истина;
		Элемент.ПодчиненныеЭлементы[1].КнопкаОткрытия = Ложь;
		Элемент.ПодчиненныеЭлементы[1].РедактированиеТекста = Истина;
	ИначеЕсли Строка(ТипЭлемента) = "Булево" Тогда
		Элемент.ПодчиненныеЭлементы[1].КнопкаВыбора = Истина;
		Элемент.ПодчиненныеЭлементы[1].КнопкаОткрытия = Ложь;
		Элемент.ПодчиненныеЭлементы[1].РедактированиеТекста = Ложь;
	ИначеЕсли Строка(ТипЭлемента) = "Дата" Тогда
		Элемент.ПодчиненныеЭлементы[1].КнопкаВыбора = Истина;
		Элемент.ПодчиненныеЭлементы[1].КнопкаОткрытия = Ложь;
		Элемент.ПодчиненныеЭлементы[1].РедактированиеТекста = Истина;
	КонецЕсли;
	Элемент.ПодчиненныеЭлементы[1].ОграничениеТипа = ТипЭлемента;
КонецПроцедуры

&НаСервере
Процедура ПроверитьОбязательныеДопРеквизиты(Отказ=Ложь, ТекстСообщения = "")
	Для Каждого Элемент Из ДополнительныеРеквизитыОбъекта Цикл
		Если НЕ ЗначениеЗаполнено(Элемент.Значение) и Элемент.Обязательное = Истина Тогда
			Отказ = Истина;	
			ТекстСообщения = "Не заполнены обязательные реквизиты долгового!";
		КонецЕсли;
	КонецЦикла;
	Для Каждого Элемент Из ДополнительныеРеквизитыДолжника Цикл
		Если НЕ ЗначениеЗаполнено(Элемент.Значение) и Элемент.Обязательное = Истина Тогда
			Отказ = Истина;	
			ТекстСообщения = "Не заполнены обязательные реквизиты должника!";
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры	

&НаКлиенте
Процедура ПрикрепитьАктПередачи(Команда)
	Если Не ЗначениеЗаполнено(Объект.СвязанныйДокумент) ИЛИ 
			ТипЗнч(Объект.СвязанныйДокумент) <> Тип("ДокументСсылка.АктПередачи") Тогда
			Форма = ПолучитьФорму("Документ.АктПередачи.Форма.ФормаДокумента",, ЭтаФорма);
			//Заполнение реквизитов Акта из результата мероприятия
			Форма.Объект.Организация = ОбъектыСервер.РазыменоватьСсылку(Объект.Результат, "Организация");
			Форма.Объект.ПодразделениеПринимающее = ОбъектыСервер.РазыменоватьСсылку(Объект.Результат, "ПодразделениеПринимающее");
			Форма.Объект.СотрудникПринимающий = ОбъектыСервер.РазыменоватьСсылку(Объект.Результат, "СотрудникПринимающий");
			Форма.Объект.ТипСотрудникаПринимающего = ОбъектыСервер.РазыменоватьСсылку(Объект.Результат, "ТипСотрудникаПринимающего");
			Форма.Объект.ПодразделениеПередающее = ОбъектыСервер.РазыменоватьСсылку(Объект.Результат, "ПодразделениеПередающее");
			Форма.Объект.СотрудникПередающий = ОбъектыСервер.РазыменоватьСсылку(Объект.Результат, "СотрудникПередающий");
			Форма.Объект.ТипСотрудникаПередающего = ОбъектыСервер.РазыменоватьСсылку(Объект.Результат, "ТипСотрудникаПередающего");
			//Заполнение ДО = > из Мероприятия
			Форма.Объект.Объекты.Очистить();
			СтрокаДО = Форма.Объект.Объекты.Добавить();
			СтрокаДО.Объект = Объект.Объект; 
			СтрокаДО.ДолговоеОбязательство = Объект.Объект;
			Форма.ОткрытьМодально();
			Если Не Форма.Объект.Ссылка.Пустая() Тогда
				Объект.СвязанныйДокумент = Форма.Объект.Ссылка;
			Иначе
				Объект.СвязанныйДокумент = ПредопределенноеЗначение("Документ.АктПередачи.ПустаяСсылка");
			КонецЕсли;
		Иначе
			ОткрытьЗначение(Объект.СвязанныйДокумент);
		КонецЕсли;
КонецПроцедуры

//!КонецЗаписи

&НаКлиенте
Процедура ДополнительныеРеквизитыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Свойство = Неопределено;
	СвойствоВидСтроки = Неопределено;
	Код = Сред(Элемент.Имя, Найти(Элемент.Имя, "_") + 1);
	УправлениеСвойствами.ПолучитьСвойствоПоКоду(СтрЗаменить(Код, "_", " "), Свойство, СвойствоВидСтроки);
	
	Если СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Адрес") ИЛИ
			СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Телефон") Тогда
	    Строки = ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Свойство));
		ТекСтрокаПараметры = Строки[0].Параметры;
						
		СписокСтрок = СтрЗаменить(ТекСтрокаПараметры, ";", Символы.ПС);
		ЗначенияПолей = Новый СписокЗначений();
		Если СтрЧислоСтрок(СписокСтрок) > 1 Тогда
			Для Индекс = 1 По СтрЧислоСтрок(СписокСтрок) Цикл
				Стр = СтрПолучитьСтроку(СписокСтрок, Индекс);
				Если Стр <> "" Тогда 
					СписокПодстрок = СтрЗаменить(Стр, "=", Символы.ПС);
					ЗначенияПолей.Добавить(СтрПолучитьСтроку(СписокПодстрок, 2), СтрПолучитьСтроку(СписокПодстрок, 1));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;			
		Если СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Адрес") Тогда
			ИмяФормыРедактирования = "ОбщаяФорма.ВводАдреса";
		ИначеЕсли СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Телефон") Тогда
			ИмяФормыРедактирования = "ОбщаяФорма.ВводТелефона";
		КонецЕсли;
			
		Пар = Новый Структура;
		Пар.Вставить("ЗначенияПолей",                ЗначенияПолей);
		Пар.Вставить("Вид",                          ""); //"Адрес");
		Пар.Вставить("БылиВнесеныИзменения",         Ложь);
		Пар.Вставить("Представление",                Элемент.ТекстРедактирования);
		Пар.Вставить("РедактированиеТолькоВДиалоге", Не Элемент.РедактированиеТекста);
		Пар.Вставить("АдресТолькоРоссийский",        Ложь);
			
		//Чуров
		Результат = ОткрытьФорму(ИмяФормыРедактирования, Пар);	
		//Результат = ОткрытьФормуМодально(ИмяФормыРедактирования, Пар);	
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Строки[0].Значение = Результат.Представление;
			ЭтаФорма[Элемент.Имя] = Результат.Представление;
			ЗначенияПолей = Результат.ЗначенияПолей;
			Модифицированность = Истина;
			
			РезультатЗначение = "";
			Для Каждого Элемент Из ЗначенияПолей Цикл
				РезультатЗначение = РезультатЗначение + Элемент.Представление + "=" + Элемент.Значение + ";"; 
			КонецЦикла;
			
			Строки[0].Параметры = РезультатЗначение;
		КонецЕсли;
		
	ИначеЕсли СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.АдресФИАС") Тогда 
		
		Строки = ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Свойство)); 
		ТекСтрока = Строки[0]; 
		
		ИмяФормыРедактирования = "Обработка.РасширенныйВводКонтактнойИнформации.Форма.ВводАдреса"; 
		Если ТекСтрока.Параметры = "" Тогда 
			ЗнПолей = ""; 
		Иначе 
			ЗнПолей = бит_АдресныйКлассификатор.ПолучитьJSONИзXML(ТекСтрока.Параметры); 
		КонецЕсли; 
		Пар = Новый Структура; 
		Пар.Вставить("ЗначенияПолей", ЗнПолей); 
		Пар.Вставить("Вид", ""); //"Адрес"); 
		Пар.Вставить("БылиВнесеныИзменения", Ложь); 
		Пар.Вставить("Представление", Элемент.ТекстРедактирования); 
		Пар.Вставить("РедактированиеТолькоВДиалоге", Не Элемент.РедактированиеТекста); 
		Пар.Вставить("АдресТолькоРоссийский", Ложь); 
		
		Результат = ОткрытьФормуМодально(ИмяФормыРедактирования, Пар); 
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда 
			Строки[0].Значение = Результат.Представление; 
			ЭтаФорма[Элемент.Имя] = Результат.Представление; 
			Модифицированность = Истина; 
			СтрокаJSON = Результат.Значение; 
			
			Если СтрокаJSON = "" Тогда 
				СтрокаJSON = бит_АдресныйКлассификатор.ПолучитьJSONИзXML(СтрокаJSON); 
			КонецЕсли; 
			
			Строки[0].Параметры = бит_АдресныйКлассификатор.ПолучитьСтрокуXML(СтрокаJSON); 
		КонецЕсли;
		
	ИначеЕсли СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.ПутьКФайлу") Тогда	
		#Если Не ВебКлиент Тогда
			СтандартнаяОбработка = Ложь;
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			Диалог.Заголовок = "Выберите файл";
			Диалог.ПолноеИмяФайла = ЭтаФорма[Элемент.Имя];
			Диалог.МножественныйВыбор = Ложь;
			Если Диалог.Выбрать() Тогда
				ЭтаФорма[Элемент.Имя] = Диалог.ПолноеИмяФайла;
			КонецЕсли;	
		#Иначе
			СтандартнаяОбработка = Ложь;
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			Диалог.Заголовок = "Выберите файл";
			Диалог.ПолноеИмяФайла = ЭтаФорма[Элемент.Имя];
			//Фильтр = "EXE (*.exe)|*.exe"; 
			//Диалог.Фильтр = Фильтр; 
			Диалог.МножественныйВыбор = Ложь;
			//Диалог.Каталог = "F:\";
			Диалог.Показать(Новый ОписаниеОповещения("ДополнительныеРеквизитыНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("Диалог, Элемент", Диалог, Элемент)));
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	Элемент = ДополнительныеПараметры.Элемент;
	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ЭтаФорма[Элемент.Имя] = Диалог.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнструментПлатежныеСистемыMandarin()
	ФормаМандарин = ПолучитьФорму("Обработка.MandarinОперации.Форма.Форма");
	ФормаМандарин.ВладелецФормы = ЭтаФорма;
	ФормаМандарин.Объект.ОбъектУчета = Объект.Объект;
	ФормаМандарин.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнструментПлатежныеСистемы(Команда)
	Если ОбъектыСервер.ПолучитьЗначениеКонстанты("ИспользоватьMandarin") Тогда
		ОткрытьИнструментПлатежныеСистемыMandarin();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияПереносаСроковВыполнения(Команда)
	Элементы.ГруппаСрокВыполненияТЧ.Видимость = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьСудебноеДело(Команда)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Основание", Объект.Объект);	
	ОткрытьФорму("Документ.СудебноеДело.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

&НаСервере
Функция ПолучитьДолжникаСМС(Ссылка)

	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда
		Возврат Ссылка.Должник;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции	

&НаКлиенте
Процедура ПрошлоВремя30()
	ПоказатьОповещениеПользователя("Таймер закрытия",,"Прошло 30 секунд...",БиблиотекаКартинок.Информация32);
КонецПроцедуры	

&НаКлиенте
Процедура ПрошлоВремя60()
	ПоказатьОповещениеПользователя("Таймер закрытия",,"Прошло 60 секунд...",БиблиотекаКартинок.Информация32);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСостояниеМикрофона()
	ФормаНабора = ПолучитьФорму("Обработка.бит_Битфон.Форма.ОсновнаяФорма");
	Если ФормаНабора.Открыта() = Истина И ФормаНабора.СтатусПодключен = Истина И ФормаНабора.МикрофонВключен = Истина Тогда
		ЭтаФорма.Элементы.ОтключитьМикрофон.ЦветФона = Новый Цвет();
	ИначеЕсли ФормаНабора.Открыта() = Истина И ФормаНабора.СтатусПодключен = Истина И ФормаНабора.МикрофонВключен = Ложь Тогда
		// Исправить произвольное включение микрофона, если получено значение Ложь
		ФормаНабора.КнОМик(Неопределено);
		ФормаНабора.КнОМик(Неопределено);
		//
		ЭтаФорма.Элементы.ОтключитьМикрофон.ЦветФона = WebЦвета.Красный;
	ИначеЕсли ФормаНабора.Открыта() = Ложь ИЛИ ФормаНабора.СтатусПодключен = Ложь Тогда
		ЭтаФорма.Элементы.ОтключитьМикрофон.ЦветФона = Новый Цвет();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСостояниеРазговора()
	ФормаНабора = ПолучитьФорму("Обработка.бит_Битфон.Форма.ОсновнаяФорма");
	Если ФормаНабора.Открыта() = Истина И ФормаНабора.ИдетРазговор = Ложь Тогда
		ФормаНабора.кнОтключить(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗакрепитьДолжникаНаСервере()
	ДО = ЭтаФорма.ДолговоеОбязательство.Ссылка;
	Код = "0181";
	Значение = Справочники.тсЗначенияСвойствОбъектов.НайтиПоНаименованию("СТОП");
	ОбъектыСервер.ЗаписатьЗначениеСвойства(ДО, Код, Значение); 
	Код = "0182";
	Значение = Справочники.тсЗначенияСвойствОбъектов.НайтиПоНаименованию("Ручной обзвон");
	ОбъектыСервер.ЗаписатьЗначениеСвойства(ДО, Код, Значение); 
	Код = "0183";
	Значение = ПараметрыСеанса.ТекущийПользователь;
	ОбъектыСервер.ЗаписатьЗначениеСвойства(ДО, Код, Значение);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрепитьДолжника(Команда)
	НовоеЗакреплениеНаСервере();
	Если ЭтаФорма.Объект.ТипМероприятия = ЭтаФорма.ТипЗаявка Тогда
		ЗакрепитьДолжникаНаСервере();
		ПоказатьОповещениеПользователя("Закрепление",,"Должник успешно закреплен",БиблиотекаКартинок.Информация32);	
		ПрикрепитьАктПередачи(Команда);
	Иначе
		Предупреждение("Не найдена заявка на закрепление!");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОткрепитьДолжникаНаСервере()
	ДО = ЭтаФорма.ДолговоеОбязательство.Ссылка;
	Код = "0181";
	Значение = Справочники.тсЗначенияСвойствОбъектов.НайтиПоНаименованию("В работе");
	ОбъектыСервер.ЗаписатьЗначениеСвойства(ДО, Код, Значение); 
	Код = "0182";
	Значение = "";
	ОбъектыСервер.ЗаписатьЗначениеСвойства(ДО, Код, Значение); 
	Код = "0183";
	Значение = "";
	ОбъектыСервер.ЗаписатьЗначениеСвойства(ДО, Код, Значение); 
КонецПроцедуры

&НаКлиенте
Процедура ОткрепитьДолжника(Команда)
	НовоеОткреплениеНаСервере();
	Если ЭтаФорма.Объект.ТипМероприятия = ЭтаФорма.ТипЗаявка Тогда
		ОткрепитьДолжникаНаСервере();
		ПоказатьОповещениеПользователя("Открепление",,"Должник успешно откреплен",БиблиотекаКартинок.Информация32);	
		ПрикрепитьАктПередачи(Команда);
	Иначе
		Предупреждение("Не найдена заявка на открепление!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРазговор(Команда)
	ФормаНабора = ПолучитьФорму("Обработка.бит_Битфон.Форма.ОсновнаяФорма");
	Если ФормаНабора.Открыта() = Истина И ФормаНабора.СтатусПодключен = Истина И ФормаНабора.ИдетРазговор = Истина Тогда
		ФормаНабора.КнОтбой(Неопределено);
	ИначеЕсли ФормаНабора.Открыта() = Истина И ФормаНабора.СтатусПодключен = Истина И ФормаНабора.ИдетРазговор = Ложь Тогда
		Предупреждение("На канале нет активных разговоров!");
	ИначеЕсли ФормаНабора.Открыта() = Ложь ИЛИ ФормаНабора.СтатусПодключен = Ложь Тогда
		Предупреждение("БИТ.Phone не подключен!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьМикрофон(Команда)
	ФормаНабора = ПолучитьФорму("Обработка.бит_Битфон.Форма.ОсновнаяФорма");
	Если ФормаНабора.Открыта() = Истина И ФормаНабора.СтатусПодключен = Истина И ФормаНабора.МикрофонВключен = Истина Тогда
		ФормаНабора.КнОМик(Неопределено);
		ЭтаФорма.Элементы.ОтключитьМикрофон.ЦветФона = WebЦвета.Красный;
	ИначеЕсли ФормаНабора.Открыта() = Истина И ФормаНабора.СтатусПодключен = Истина И ФормаНабора.МикрофонВключен = Ложь Тогда
		ФормаНабора.КнОМик(Неопределено);
		ЭтаФорма.Элементы.ОтключитьМикрофон.ЦветФона = Новый Цвет();
	ИначеЕсли ФормаНабора.Открыта() = Ложь ИЛИ ФормаНабора.СтатусПодключен = Ложь Тогда
		Предупреждение("БИТ.Phone не подключен!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдержаниеВызова(Команда)
	ФормаНабора = ПолучитьФорму("Обработка.бит_Битфон.Форма.ОсновнаяФорма");
	Если ФормаНабора.Открыта() = Истина И ФормаНабора.СтатусПодключен = Истина И ФормаНабора.ВызовУдержан = Ложь Тогда	
		ФормаНабора.КнУдержатьВызов(Неопределено);
		ЭтаФорма.Элементы.УдержаниеВызова.ЦветФона = WebЦвета.Красный;
	ИначеЕсли ФормаНабора.Открыта() = Истина И ФормаНабора.СтатусПодключен = Истина И ФормаНабора.ВызовУдержан = Истина Тогда
		ФормаНабора.КнУдержатьВызов(Неопределено);
		ЭтаФорма.Элементы.УдержаниеВызова.ЦветФона = Новый Цвет();
	ИначеЕсли ФормаНабора.Открыта() = Ложь ИЛИ ФормаНабора.СтатусПодключен = Ложь Тогда
		Предупреждение("БИТ.Phone не подключен!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоискНомераВБазе(Команда)
	ФормаПоискаНомера = ПолучитьФорму("ОбщаяФорма.ПоискНомераВБазе");
    // Обрезать неинформативную часть
	ФормаПоискаНомера.Номер = Строка(Прав(Объект.Контакт, 7));
	ПоказатьОповещениеПользователя("Поиск совпадений",,"Выполняется поиск совпадений...",БиблиотекаКартинок.Информация32);
	ФормаПоискаНомера.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ДолжникМероприятия(Команда)
	// Передать с ключом
	ФормаМероприятия = ПолучитьФорму("Задача.Мероприятие.Форма.ФормаСписка",,,Новый УникальныйИдентификатор());
    ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФормаМероприятия.Список, "Объект.Должник", ЭтаФорма.КонтрагентКЛ, ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный, );
	ФормаМероприятия.КоманднаяПанель.Видимость = Ложь;
	ФормаМероприятия.ОткрытьМодально();
КонецПроцедуры

&НаКлиенте
Процедура ДолжникОбязательства(Команда)
	// Передать с ключом
	ФормаОбязательства = ПолучитьФорму("Справочник.ДолговыеОбязательства.Форма.ФормаСписка",,,Новый УникальныйИдентификатор());
    ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФормаОбязательства.Список, "Должник", ЭтаФорма.КонтрагентКЛ, ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный, );
	ФормаОбязательства.КоманднаяПанель.Видимость = Ложь;
	ФормаОбязательства.ОткрытьМодально();
КонецПроцедуры

&НаКлиенте
Процедура ДолжникОбещания(Команда)
	// Передать с ключом
    ФормаОбещания = ПолучитьФорму("Документ.ОбещанныеПлатежи.Форма.ФормаСписка",,,Новый УникальныйИдентификатор());
    ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФормаОбещания.Список, "Объект", ЭтаФорма.ДолговоеОбязательство, ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный, );
	ФормаОбещания.КоманднаяПанель.Видимость = Ложь;
	ФормаОбещания.ОткрытьМодально();
КонецПроцедуры

&НаКлиенте
Процедура ДолжникПогашения(Команда)
    // Передать с ключом
	ФормаПогашения = ПолучитьФорму("РегистрНакопления.ЗадолженностьПоОбъектамВнесудебная.ФормаСписка",,,Новый УникальныйИдентификатор());
    ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФормаПогашения.Список, "Объект", ЭтаФорма.ДолговоеОбязательство, ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный, );
	ФормаПогашения.КоманднаяПанель.Видимость = Ложь;
	ФормаПогашения.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ДолжникСМС(Команда)
	// Передать с ключом
    ФормаСпискаСМС = ПолучитьФорму("РегистрСведений.СообщенияСМС.ФормаСписка",,,Новый УникальныйИдентификатор());
    ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФормаСпискаСМС.Список, "Объект", ЭтаФорма.КонтрагентКЛ, ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный, );
	ФормаСпискаСМС.КоманднаяПанель.Видимость = Ложь;
	ФормаСпискаСМС.ОткрытьМодально();
КонецПроцедуры

&НаКлиенте
Процедура ВходящийЗвонокПриИзменении(Элемент)
	Объект.Комментарий = "Входящий звонок → " + Объект.Комментарий; 
КонецПроцедуры

&НаСервере
Процедура РасчетУсловийНаСервере()
	// Получим непредопределенное значение с сервера
	НаборЗаписей = РегистрыСведений.ЗадолженностьПоОбъектамОстатки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ЭтаФорма.ДолговоеОбязательство);
	НаборЗаписей.Отбор.ТипЗадолженности.Установить(ПланыВидовХарактеристик.ТипыЗадолженности.НайтиПоНаименованию("Сумма"));
	НаборЗаписей.Прочитать(); 
	Для каждого ЗаписьНабора из НаборЗаписей Цикл
		ЭтаФорма.ДолговоеОбязательствоСуммаОстатка = ЗаписьНабора.СуммаДО;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РасчетУсловий(Команда)
    РасчетУсловий = ПолучитьФорму("ОбщаяФорма.РасчетУсловий",,,Новый УникальныйИдентификатор());
	// Выгрузить сумму
	РасчетУсловийНаСервере();
	РасчетУсловий.СуммаОстатка = ЭтаФорма.ДолговоеОбязательствоСуммаОстатка;
	// Выгрузить номер ДО
	РасчетУсловий.СкрытоеПолеНомерДО = ЭтаФорма.Объект.Объект;
	РасчетУсловий.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура НаписатьВВЦ(Команда)
	// Проверка на нарушение 230-ФЗ
	Если ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда
		ОбъектДолжник = ОбъектыСервер.РазыменоватьСсылку(Объект.Объект, "Должник");
	ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		ОбъектДолжник = Объект.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если КонтрольСобытий.КонтрольЧасовогоПояса(ОбъектДолжник) Тогда
		Предупреждение("Данное действие приведет к нарушению 230-ФЗ!");
		Возврат;
	КонецЕсли;

	ФормаВЦ = ПолучитьФорму("ОбщаяФорма.РассылкаНаWhatsApp");
	ФормаВЦ.Номер = СтрСоединить(СтрРазделить(ЭтаФорма.Объект.Контакт, "+( )"), "");
	ФормаВЦ.Договор = ЭтаФорма.Объект.Объект;	
	ФормаВЦ.ОткрытьМодально();
КонецПроцедуры

&НаСервере
Процедура НовоеЗакреплениеНаСервере()
	ЭтаФорма.ТипЗаявка = Справочники.ТипыМероприятий.НайтиПоНаименованию("Заявка на закрепление");
КонецПроцедуры

&НаСервере
Процедура НовоеОткреплениеНаСервере()
	ЭтаФорма.ТипЗаявка = Справочники.ТипыМероприятий.НайтиПоНаименованию("Заявка на открепление");
КонецПроцедуры

&НаКлиенте
Процедура НовоеЗакрепление(Команда)
	НовоеЗакреплениеНаСервере();
	К = ЭтаФорма.Объект.Объект;
	НоваяЗадача = ПолучитьФорму("Задача.Мероприятие.Форма.ФормаМероприятия", Новый Структура("Объект", К));
	НоваяЗадача.Объект.Объект = К;
	НоваяЗадача.Объект.ТипМероприятия = ТипЗаявка;
	// НоваяЗадача.Объект.Контакт = РезультатНомер;
	//НоваяЗадача.КонтрагентКЛ = К;
	НоваяЗадача.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура НовоеОткрепление(Команда)
	НовоеОткреплениеНаСервере();
	К = ЭтаФорма.Объект.Объект;
	НоваяЗадача = ПолучитьФорму("Задача.Мероприятие.Форма.ФормаМероприятия", Новый Структура("Объект", К));
	НоваяЗадача.Объект.Объект = К;
	НоваяЗадача.Объект.ТипМероприятия = ТипЗаявка;
	// НоваяЗадача.Объект.Контакт = РезультатНомер;
	//НоваяЗадача.КонтрагентКЛ = К;
	НоваяЗадача.Открыть();
КонецПроцедуры

&НаСервере
Процедура ЗапланироватьЗвонокНаСервере()
	ЭтаФорма.РезультатЗапланироватьЗвонок = Справочники.РезультатыМероприятий.НайтиПоНаименованию("Запланировать звонок");
КонецПроцедуры

&НаКлиенте
Процедура ЗапланироватьЗвонок(Команда)
	ЗапланироватьЗвонокНаСервере();
	К = ЭтаФорма.Объект.Объект;
	НоваяЗадача = ПолучитьФорму("Задача.Мероприятие.Форма.ФормаМероприятия", Новый Структура("Объект", К));
	НоваяЗадача.Объект.Объект = К;
	НоваяЗадача.Объект.ТипМероприятия = ПредопределенноеЗначение("Справочник.ТипыМероприятий.ТелефонныйЗвонокИсходящий");
	НоваяЗадача.Объект.Результат = ЭтаФорма.РезультатЗапланироватьЗвонок;
	// НоваяЗадача.Объект.Контакт = РезультатНомер;
	//НоваяЗадача.КонтрагентКЛ = К;
	НоваяЗадача.Открыть();
КонецПроцедуры

&НаСервере
Процедура ЗапланироватьСМСНаСервере()
	ЭтаФорма.РезультатЗапланироватьСМС = Справочники.РезультатыМероприятий.НайтиПоНаименованию("Запланировать отправку");
КонецПроцедуры

&НаКлиенте
Процедура ЗапланироватьСМС(Команда)
	ЗапланироватьСМСНаСервере();
	К = ЭтаФорма.Объект.Объект;
	НоваяЗадача = ПолучитьФорму("Задача.Мероприятие.Форма.ФормаМероприятия", Новый Структура("Объект", К));
	НоваяЗадача.Объект.Объект = К;
	НоваяЗадача.Объект.ТипМероприятия = ПредопределенноеЗначение("Справочник.ТипыМероприятий.ОтправкаСМС");
	НоваяЗадача.Объект.Результат = ЭтаФорма.РезультатЗапланироватьСМС;
	// НоваяЗадача.Объект.Контакт = РезультатНомер;
	//НоваяЗадача.КонтрагентКЛ = К;
	НоваяЗадача.Открыть();
КонецПроцедуры

&НаСервере
Процедура ЗапланироватьВЦНаСервере()
	ЭтаФорма.РезультатЗапланироватьВЦ = Справочники.РезультатыМероприятий.НайтиПоНаименованию("Запланировать отправку");
КонецПроцедуры

&НаКлиенте
Процедура ЗапланироватьВЦ(Команда)
	ТипВЦНаСервере();
	ЗапланироватьВЦНаСервере();
	К = ЭтаФорма.Объект.Объект;
	НоваяЗадача = ПолучитьФорму("Задача.Мероприятие.Форма.ФормаМероприятия", Новый Структура("Объект", К));
	НоваяЗадача.Объект.Объект = К;
	НоваяЗадача.Объект.ТипМероприятия = ЭтаФорма.ТипВЦ;
	НоваяЗадача.Объект.Результат = ЭтаФорма.РезультатЗапланироватьВЦ;
	// НоваяЗадача.Объект.Контакт = РезультатНомер;
	//НоваяЗадача.КонтрагентКЛ = К;
	НоваяЗадача.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ЗапланироватьИЗакрыть(Команда)
	// Записать без выполнения
	ЭтаФорма.ЭтотОбъект.Записать();	
	ЭтаФорма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПоКАД(Команда)
	КомандаПроверкаПоКАД = "https://kad.arbitr.ru";
	ЗапуститьПриложение(КомандаПроверкаПоКАД);
КонецПроцедуры

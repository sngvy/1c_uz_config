
Перем ТекстИзменений;
Перем НаименованиеИзменено;

// Процедура - обработчик события "ОбработкаЗаполнения".
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ОсновнойМенеджер = ПараметрыСеанса.ТекущийПользователь;
	ДатаРегистрации = ТекущаяДата();

	// Выполним заполнение контактной информации
	//УправлениеКонтактнойИнформацией.ОбработкаЗаполненияКИ(ЭтотОбъект, ДанныеЗаполнения);

	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
	   И ДанныеЗаполнения.Свойство("Наименование") Тогда

			//создание из взаимодействия по описанию участника
			Наименование = ДанныеЗаполнения.Наименование;
	КонецЕсли;

КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	//РегСвСолидарныеДолжники = РегистрыСведений.СолидарныеДолжники.СоздатьНаборЗаписей();
	//РегСвСолидарныеДолжники.Отбор.Должник.Установить(Ссылка);
	//РегСвСолидарныеДолжники.Очистить();
	//РегСвСолидарныеДолжники.Записать();
	
КонецПроцедуры

// Процедура проверяет наличие двойников в справочники Должники.
Процедура ПроверкаДвойников() Экспорт
	//Проверка двойников 
		
	////СхожийДолжник = Справочники.Контрагенты.НайтиПоНаименованию(СокрЛП(Наименование));
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	Должники.Ссылка
	//	|ИЗ
	//	|	Справочник.Должники КАК Должники
	//	|ГДЕ
	//	|	Должники.Наименование = &Наименование
	//	|	И НЕ Должники.Код = &Код";
	//Запрос.УстановитьПараметр("Наименование",СокрЛП(Наименование));
	//Запрос.УстановитьПараметр("Код",Код);
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	НаборЗаписиДвойники = РегистрыСведений.Двойники.СоздатьМенеджерЗаписи();
	//	НаборЗаписиДвойники.Наименование = СокрЛП(Наименование);
	//	НаборЗаписиДвойники.Должник1 = Ссылка;
	//	НаборЗаписиДвойники.Должник2 = Выборка.Ссылка;
	//	НаборЗаписиДвойники.Записать();
	//	ВыдатьСообщение(Ссылка,"Должник " + Наименование + " возможно имеет двойника в базе.");		
	//КонецЦикла;	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	////Если Не Ссылка.Пустая() Тогда
	////	Запрос = Новый Запрос("ВЫБРАТЬ
	////						  |	Должники.Организация
	////						  |ИЗ
	////						  |	Справочник.Должники КАК Должники
	////						  |ГДЕ
	////						  |	Должники.Ссылка = &Ссылка");
	////	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	////	Если Организация <> Запрос.Выполнить().Выгрузить()[0].Организация Тогда
	////		Сообщить("Нельзя изменять организацию!");
	////		Отказ = Истина;
	////	КонецЕсли;
	////КонецЕсли;
	
	Если Не ЭтотОбъект.ЭтоГруппа Тогда
		Если Не ЗначениеЗаполнено(ЭтотОбъект.ДатаСоздания) Тогда
			ЭтотОбъект.ДатаСоздания = ТекущаяДата();
		КонецЕсли;
		
		// Боевкин 18.05.2018 - Анахронизм
		//Если Ссылка.Пустая() ИЛИ Ссылка.Наименование <> ЭтотОбъект.Наименование Тогда
		//	ЭтотОбъект.Фонетика	= Справочники.Контрагенты.ПолучитьФонетику(ЭтотОбъект.Наименование);
		//КонецЕсли;
	КонецЕсли;
	
	//
	ТекстИзменений = ОбъектыСервер.ПроверитьИзмененияВОбъекте(ЭтотОбъект);

	
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//                      |	ДолговыеОбязательстваКонтрагенты.Ссылка
	//                      |ИЗ
	//                      |	Справочник.ДолговыеОбязательства.Контрагенты КАК ДолговыеОбязательстваКонтрагенты
	//                      |ГДЕ
	//                      |	ДолговыеОбязательстваКонтрагенты.Значение = &Значение
	//                      |
	//                      |СГРУППИРОВАТЬ ПО
	//                      |	ДолговыеОбязательстваКонтрагенты.Ссылка");
	//Запрос.УстановитьПараметр("Значение", Ссылка);
	//Результат = Запрос.Выполнить().Выбрать();
	//Пока Результат.Следующий() Цикл
	//	Об = Результат.Ссылка.ПолучитьОбъект();
	//	Попытка
	//		Об.Записать();
	//	Исключение
	//		Отказ = Истина;
	//	КонецПопытки;
	//КонецЦикла;
	Если ЭтотОбъект.Наименование = ЭтотОбъект.Ссылка.Наименование Тогда
		НаименованиеИзменено = Ложь;
	Иначе
		НаименованиеИзменено = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	//а = а/0;
	Справочники.Пользователи.ОтслеживаниеИзменений(Отказ, Ссылка, ТекстИзменений);
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	//
	Если НаименованиеИзменено Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ДолговыеОбязательстваКонтрагенты.Ссылка
		                      |ИЗ
		                      |	Справочник.ДолговыеОбязательства.Контрагенты КАК ДолговыеОбязательстваКонтрагенты
		                      |ГДЕ
		                      |	ДолговыеОбязательстваКонтрагенты.Значение = &Значение
		                      |
		                      |СГРУППИРОВАТЬ ПО
		                      |	ДолговыеОбязательстваКонтрагенты.Ссылка");
		Запрос.УстановитьПараметр("Значение", Ссылка);
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			Об = Результат.Ссылка.ПолучитьОбъект();
			Попытка
				Об.Записать();
			Исключение
				Отказ = Истина;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция Создать(ИмяПроцедуры, ИдентификаторФормы) Экспорт

	Возврат СоздатьПоток(ИмяПроцедуры, ИдентификаторФормы);

КонецФункции // ()

Функция УстановитьПараметры(Знач Поток, ПараметрыПроцедуры) Экспорт

	ДобавитьПараметры(Поток, ПараметрыПроцедуры);
	
	Возврат Поток;

КонецФункции // ()

Функция Запустить(Поток) Экспорт

	Результат = ДлительныеОперации.ВыполнитьВФоне(
		Поток["Процедура"],
		Поток["Параметры"],
		Поток["Настройки"]
	);
	
	Возврат ПолучитьОписаниеПотока(Результат, Поток);

КонецФункции // ()

// Проверяет идет ли выполнение,
//   если выполнение идет возвращает Ложь
//   иначе Истина
// ---------------------------------------------Удалить
Функция Закончился(Контролер) Экспорт

	Возврат ПроверитьОкончание(Контролер);

КонецФункции // ()

// 
Функция ПотокЗавершился(Контролер) Экспорт

	Возврат ПроверитьЗаконченоВыполнение(Контролер);

КонецФункции // ()


// ----
Функция Результат(Контролер) Экспорт

	Если Не ПотокЗавершился(Контролер) Тогда
	
		ВызватьИсключение ОшибкаНетРезультата();
	
	КонецЕсли;
	
	Возврат СформироватьОтвет(Контролер);

КонецФункции // ()

Функция ДождатьсяЗавершения(Контролер, Таймаут = Неопределено) Экспорт

	УИДПотока = Контролер["Поток"];
	Задание = ОжидатьЗавершения(УИДПотока, Таймаут);
	Контролер["Поток"] = Задание.УникальныйИдентификатор;
	ОбновитьЗадание(Контролер, Задание);
	
	Возврат ПотокЗавершился(Контролер);

КонецФункции // ()


//  Структура              - параметры выполнения задания: 
//   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                     "Выполнено", если задание было успешно выполнено;
//                                     "Ошибка", если задание завершено с ошибкой;
//                                     "Отменено", если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания - УникальныйИдентификатор - если Статус = "Выполняется", то содержит 
//                                     идентификатор запущенного фонового задания.
//   * АдресРезультата       - Строка - адрес временного хранилища, в которое будет
//                                     помещен (или уже помещен) результат работы процедуры.
//   * АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат, 
//                                     содержит адрес дополнительного временного хранилища,
//                                     в которое будет помещен (или уже помещен) результат работы процедуры.
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
#Область ТехническаяПолучение

Функция ОбновитьЗадание(Контроллер, Задание);

	Статус = Задание["Состояние"];
	
	Ожидание = Контроллер["Ожидание"];
	Ожидание["Статус"] = ПреобразоватьСтатусКСтроке(Статус);
	Контроллер["Статус"] = ПреобразоватьСтатусКСтроке(Статус);
	
	Если Статус = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
	
		Контроллер["Ошибка"] = Задание["ИнформацияОбОшибке"];
	
	КонецЕсли;

КонецФункции // ()


// Не отлажена
Функция ПроверитьОкончание(Контролер)

	Результат = ДлительныеОперации.ЗаданиеВыполнено(Контролер["Поток"]);
	
	Возврат Результат;

КонецФункции // ()

Функция ПроверитьЗаконченоВыполнение(Контролер)

	Статус = ТекущийСтатус(Контролер);
	
	Если Статус = СостояниеФоновогоЗадания.Активно Тогда
	
		Возврат Ложь;

	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ()

Функция ПроверитьЗаконченоСОшибкой(Контролер)

	Статус = ТекущийСтатус(Контролер);
	
	Если Статус = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
	
		Возврат Истина;

	КонецЕсли;
	
	Возврат Ложь;

КонецФункции // ()

Функция ТекущийСтатус(Контролер)

	Статус = Контролер["Статус"];
	
	Возврат Статус;

КонецФункции // ()


Функция СформироватьОтвет(Контролер)

	Ответ = Новый Структура;
	Ответ.Вставить("Статус", Контролер["Статус"]);
	Ответ.Вставить("Выполнено", Истина);
	Ответ.Вставить("Адрес", Контролер["АдресРезультата"]);
	Ответ.Вставить("Ошибка", "");
	
	Если ПроверитьЗаконченоСОшибкой(Контролер) Тогда
	
		Ответ.Вставить("Выполнено", Ложь);
		Ответ.Вставить("Адрес", Контролер["АдресРезультата"]);
		Ответ.Вставить("Ошибка", Контролер["ПодробноеПредставлениеОшибки"]);
	
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции // ()

Функция ПодготовитьПотокДляОжидания(Контролер)

	НаборПотоков = Новый Массив;
	НаборПотоков.Добавить(Контролер["Поток"]);
	
	Возврат НаборПотоков;

КонецФункции // ()

Функция ОжидатьЗавершения(УИДПотока, Таймаут)

	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(УИДПотока);
	Задание = Задание.ОжидатьЗавершенияВыполнения(Таймаут);
	Возврат Задание;

КонецФункции // ()


#КонецОбласти

//  ИмяПроцедуры           - Строка    - имя экспортной процедуры общего модуля, модуля менеджера объекта 
//                                       или модуля обработки, которую необходимо выполнить в фоне.
//                                       Например, "МойОбщийМодуль.МояПроцедура", "Отчеты.ЗагруженныеДанные.Сформировать"
//                                       или "Обработки.ЗагрузкаДанных.МодульОбъекта.Загрузить". 
//                                       У процедуры может быть два или три формальных параметра:
//                                        * Параметры       - Структура - произвольные параметры ПараметрыПроцедуры;
//                                        * АдресРезультата - Строка    - адрес временного хранилища, в которое нужно
//                                          поместить результат работы процедуры. Обязательно;
//                                        * АдресДополнительногоРезультата - Строка - если в ПараметрыВыполнения установлен 
//                                          параметр ДополнительныйРезультат, то содержит адрес дополнительного временного
//                                          хранилища, в которое нужно поместить результат работы процедуры. Опционально.
//                                       При необходимости выполнить в фоне функцию, ее следует обернуть в процедуру,
//                                       а ее результат возвращать через второй параметр АдресРезультата.
//  ПараметрыПроцедуры     - Структура - произвольные параметры вызова процедуры ИмяПроцедуры.
//  ПараметрыВыполнения    - Структура - см. функцию ПараметрыВыполненияВФоне.
#Область ТехническаяСоздание

Функция СоздатьПоток(ИмяПроцедуры, ИдентификаторФормы)

	Результат = НастроитьПараметры(ИдентификаторФормы);
	
	Поток = Новый Структура;
	Поток.Вставить("Процедура", ИмяПроцедуры);
	Поток.Вставить("Настройки", Результат);
	Поток.Вставить("Ключ", Результат["КлючФоновогоЗадания"]);
	
	Возврат Поток;

КонецФункции // ()

Процедура ДобавитьПараметры(Поток, ПараметрыПроцедуры)

	Поток.Вставить("Параметры", ПараметрыПроцедуры);

КонецПроцедуры // ()

Функция НастроитьПараметры(ИдентификаторФормы)

	Результат = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	Результат.Вставить("КлючФоновогоЗадания", Новый УникальныйИдентификатор);
	
	ТестовыйЗапуск = Константы.РежимОтладки.Получить();
	Если ТестовыйЗапуск = Перечисления.РежимыОтладки.ОтладкаПотоков Тогда
	
		Результат.Вставить("ЗапуститьНеВФоне", Истина);
	
	Иначе
	
		Результат.Вставить("ЗапуститьВФоне", Истина);
	
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ()

Функция ПолучитьОписаниеПотока(Результат, Поток)

	Контролер = Новый Структура;
	
	Контролер.Вставить("Ожидание", Результат);
	Контролер.Вставить("Статус", Результат["Статус"]);
	Контролер.Вставить("Ключ", Поток["Ключ"]);
	Контролер.Вставить("Поток", Неопределено);

	Контролер.Вставить("Ошибка", Неопределено);
	Если Контролер["Статус"] = "Ошибка" Тогда
	
		Контролер.Вставить("Ошибка", Результат["КраткоеПредставлениеОшибки"]);
	
	КонецЕсли;
	
	Если Не МожноПолучитьФоновоеЗадание(Результат) Тогда
	
		Возврат Контролер;
	
	КонецЕсли;
	
	Контролер.Вставить("Поток", Результат["ИдентификаторЗадания"]);
	
	Возврат Контролер;

КонецФункции // ()

Функция ПреобразоватьСтатус(Статус)

	ПреобразованныйСтатус = Неопределено;
	
	Если Статус = "Выполняется" Тогда
	
		ПреобразованныйСтатус = СостояниеФоновогоЗадания.Активно;
	
	ИначеЕсли Статус = "Выполнено" Тогда
	
		ПреобразованныйСтатус = СостояниеФоновогоЗадания.Завершено;
	
	ИначеЕсли Статус = "Ошибка" Тогда
	
		ПреобразованныйСтатус = СостояниеФоновогоЗадания.ЗавершеноАварийно;
	
	ИначеЕсли Статус = "Отменено" Тогда
	
		ПреобразованныйСтатус = СостояниеФоновогоЗадания.Отменено;
	
	Иначе
	
		ВызватьИсключение "Не определенный статус";
	
	КонецЕсли;
	
	Возврат ПреобразованныйСтатус;

КонецФункции // ()

Функция ПреобразоватьСтатусКСтроке(Статус)

	Если Статус = СостояниеФоновогоЗадания.Активно Тогда
	
		Возврат "Выполняется";
	
	ИначеЕсли Статус = СостояниеФоновогоЗадания.Завершено Тогда
	
		Возврат "Выполнено";
	
	ИначеЕсли Статус = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
	
		Возврат "Ошибка";
	
	ИначеЕсли Статус = СостояниеФоновогоЗадания.Отменено Тогда
	
		Возврат "Отменено";
	
	Иначе
	
		ВызватьИсключение "Не определенный статус";
	
	КонецЕсли;
	
	Возврат "";

КонецФункции // ()


Функция МожноПолучитьФоновоеЗадание(Результат)

	Возврат ПреобразоватьСтатус(Результат["Статус"]) = СостояниеФоновогоЗадания.Активно
		И ЗначениеЗаполнено(Результат["ИдентификаторЗадания"]);

КонецФункции // ()


#КонецОбласти

#Область Исключения

Функция ОшибкаНетРезультата()

	Возврат "Попытка получения результата, до выполнения";

КонецФункции // ()


#КонецОбласти

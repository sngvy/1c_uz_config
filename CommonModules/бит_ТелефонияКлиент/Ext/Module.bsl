////////////////////////////////////////////////////////////////////////////////
// Общий модуль телефонии БИТ
// Содержит общие функции, которые вызываются на клиенте.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выбирает номер телефона и показывает окно отправки SMS.
//
// Параметры:
//  Контакт - Строка - номер телефона, также принимается ссылка на контрагента или контактное лицо.
//
Процедура ОтправитьSMS(Контакт) ЭКСПОРТ
	Если ЗначениеЗаполнено(Контакт) Тогда
		бит_ТелефонияКлиентПереопределяемый.ВыбратьНомерКонтактаИОповестить(Контакт, "Обработка.бит_БитфонОбщее.Форма.ОтправкаСМС", "БитФон_ОтправитьSMS");
	Иначе
		ФормаСМС = ПолучитьФорму("Обработка.бит_БитфонОбщее.Форма.ОтправкаСМС");
		ФормаСМС.Открыть();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выводит сообщение пользователю.
//
// Параметры:
//  Текст - Строка, текст сообщения
//  Форма - УправляемаяФорма к которой привязывается сообщение.
//
Процедура ВывестиСообщение(Текст, Форма=Неопределено) ЭКСПОРТ
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = Текст;
	Если Форма <> Неопределено Тогда
		Сообщение.ИдентификаторНазначения = Форма.УникальныйИдентификатор;
	КонецЕсли;
	Сообщение.Сообщить();
КонецПроцедуры

// Формирует полный номер телефона с префиксами выхода в город и на междугороднюю линию.
// Из номера удаляются лишние символы.
// Если номер уже с префиксами, то сначала префиксы удаляются.
//
// Параметры:
//  стрНомерИсх - Строка - номер телефона 
//  флагПрямойНабор - Булево - признак "прямого" набора, когда преобразования не делаются
//  стрПрефиксВнешЛинии - Строка - префикс выхода на внешнюю линию с офисной АТС.
//
// Возвращаемое значение:
//   Строка - сформированный полный номер с префиксами, очищенный от лишних символов.
//
Функция СформироватьНомерСПрефиксами(стрНомерИсх, флагПрямойНабор, стрПрефиксВнешЛинии) ЭКСПОРТ
	стрНомер = бит_ТелефонияКлиентСервер.ОчиститьНомерЦифрыЗвРеш(стрНомерИсх);
	Если НЕ ЗначениеЗаполнено(стрНомер) Тогда
		Возврат "";
	КонецЕсли;
	индексЗвРеш = бит_ТелефонияКлиентСервер.ПолучитьИндексЗвРеш(стрНомер);
	Если (НЕ флагПрямойНабор) И (индексЗвРеш = 0) Тогда
		стрНомер = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(стрНомер);
		длинаНомера = СтрДлина(стрНомер);
		длинаВнешнегоНомера = бит_ТелефонияКлиентСервер.ПолучитьДлинуВнешнегоНомера();
		//
		Если длинаНомера >= длинаВнешнегоНомера Тогда
			стрНомер = "8" + стрНомер;	// добавим префикс межгорода
			//
			Если ЗначениеЗаполнено(стрПрефиксВнешЛинии) Тогда    //добавим префикс исх. линии к номеру, если он есть
				стрНомер = стрПрефиксВнешЛинии + стрНомер;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат стрНомер;
КонецФункции

// Возвращает значение системной переменной окружения APPDATA (папки для приложений в профиле пользователя).
//
// Параметры:
//  стрЗаголовокОшибки - Строка - заголовок для вывода ошибок.
//
// Возвращаемое значение:
//   Строка - путь к директории.
//
Функция ПолучитьПапкуПриложенийПользователя(стрЗаголовокОшибки) ЭКСПОРТ
	шелл = Неопределено;
	Попытка
#Если НЕ МобильныйКлиент Тогда
		шелл = Новый COMОбъект("WScript.Shell");
#КонецЕсли
	Исключение
		ВывестиСообщение(стрЗаголовокОшибки + "Не удалось создать COM-объект WScript.Shell " + ОписаниеОшибки());
	КонецПопытки;
	стрПрофиль = ? (шелл = Неопределено, "", шелл.ExpandEnvironmentStrings("%appdata%"));
	Если НЕ ЗначениеЗаполнено(стрПрофиль) Тогда
		ВывестиСообщение(стрЗаголовокОшибки + "Не удалось получить директорию профиля пользователя");
	КонецЕсли;
	Возврат стрПрофиль;
КонецФункции

// Удаление файла внешней компоненты.
//
// Параметры:
//   стрИмяФайлаСокр - Строка - имя dll-файла внешней компоненты без пути.
//
// Возвращаемое значение:
//   Строка - полное имя файла внешней компоненты.
//
Функция УдалениеФайлаВнешнейКомпонентыТелефонии(стрИмяФайлаСокр) ЭКСПОРТ

	Перем офс;
	
	// Удаляем ВК, если она была ранее установлена.
	
	стрЗаголовокОшибки = "Ошибка при удалении старого файла внешней компоненты '" + стрИмяФайлаСокр + "'. ";
	
	// объект файловой системы MS FileSystemObject
	Попытка
#Если НЕ МобильныйКлиент Тогда
		офс = Новый COMОбъект("Scripting.FileSystemObject");
#КонецЕсли
	Исключение
		ВывестиСообщение(стрЗаголовокОшибки + "Не удалось создать COM-объект FileSystemObject " + ОписаниеОшибки());
	КонецПопытки;
	
	стрПрофиль = ПолучитьПапкуПриложенийПользователя(стрЗаголовокОшибки);
	
	СистИнформация = Новый СистемнаяИнформация;
	стрВерсияПлатформы = СистИнформация.ВерсияПриложения;
	стрВерсияПлатформыОсн = Лев(стрВерсияПлатформы, 3);
	
	стрПапкаКэша1С = "";
	
	Если стрВерсияПлатформыОсн = "8.2" Тогда
		стрПапкаКэша1С = стрПрофиль + "\1C\1Cv82";
	ИначеЕсли стрВерсияПлатформыОсн = "8.1" Тогда
		стрПапкаКэша1С = стрПрофиль + "\1C\1Cv81";
	Иначе
		стрПапкаКэша1С = стрПрофиль + "\1C\1Cv8";
	КонецЕсли;
	
	// проверить в папке файл location.cfg
	Попытка
		стрФайлКонфигурацииРасположения = стрПапкаКэша1С + "\location.cfg";
		файлКонфигурацииРасположения = Новый Файл(стрФайлКонфигурацииРасположения);
		стрРасположение = "location=";
		файлЧтение = Новый ЧтениеТекста(стрФайлКонфигурацииРасположения, КодировкаТекста.UTF8);
		стрЧтениеФайла = файлЧтение.ПрочитатьСтроку();
		Пока стрЧтениеФайла <> Неопределено Цикл
			индексРасположение = Найти(стрЧтениеФайла, стрРасположение);
			Если индексРасположение > 0 Тогда
				стрПапкаКэша1С = Сред(стрЧтениеФайла, индексРасположение + СтрДлина(стрРасположение));
				Прервать;
			КонецЕсли;
			стрЧтениеФайла = файлЧтение.ПрочитатьСтроку();
		КонецЦикла;
		файлЧтение.Закрыть();
	Исключение
		// Если файла нет - кэш в соответствующей платформе папке.
	КонецПопытки;
	
	стрИмяФайлаВК = стрПапкаКэша1С + "\ExtCompT\" + стрИмяФайлаСокр;
	Попытка
		офс.DeleteFile(стрИмяФайлаВК, Истина);
	Исключение
		// Если файла нет - исключение не обрабатывается.
	КонецПопытки;

	// Скрыть техническую информацию
	// бит_ТелефонияКлиент.ВывестиСообщение("Обновление внешней компоненты '" + стрИмяФайлаСокр + "'...");
	
	Возврат стрИмяФайлаВК;
	
КонецФункции

// Проверка разрядности платформы 1С
Функция Клиент64бит() ЭКСПОРТ
	Клиент64 = Ложь;
	Попытка
		систИнф = Новый СистемнаяИнформация();
		Если НЕ ((систИнф.ТипПлатформы = ТипПлатформы.Windows_x86) ИЛИ (систИнф.ТипПлатформы = ТипПлатформы.Windows_x86_64)) Тогда
			ВывестиСообщение("Ошибка - ОС " + Строка(систИнф.ТипПлатформы) + " не поддерживается.");
		Иначе
			Клиент64 = (систИнф.ТипПлатформы <>  ТипПлатформы.Windows_x86);
		КонецЕсли;
	Исключение
		ВывестиСообщение("Ошибка проверки разрядности платформы 1С. " + ОписаниеОшибки());
	КонецПопытки;
	Возврат Клиент64;
КонецФункции

// Получение пути к библиотеке коннектора СЛ 2.0
// Получает путь к библиотеке коннектора из параметров сеанса 1С.
// Если путь к библиотеке коннектора в параметрах сеанса не задан, получает соответствующую разрядности платформы
// библиотеку коннектора из макета, записывает во временный файл, устанавливает путь в параметр сеанса, и возвращает
// путь к временному файлу.
//
// Параметры:
//  версияСЛ - Число - задает версию БИТ Сервера Лицензий, варианты значения 0 (СЛ 1.6) или 1 (СЛ 2.0).
//  флагСофтфон - Булево - признак вызова для компоненты софтфона или монитора/панели управления БИТ.АТС.
//
Функция ПолучитьПутьБиблиотекиКоннектораСЛ(версияСЛ, флагСофтфон) Экспорт
	стрПутьКоннектора = "";
	
	Если версияСЛ = 1 Тогда // СЛ 2.0
		
		стрПутьКоннектора = бит_ТелефонияСервер.ПолучитьПараметрСеансаПутьБиблиотекиКоннектораСЛ20(флагСофтфон);
		Если Не ЗначениеЗаполнено(стрПутьКоннектора) Тогда
			стрПутьКоннектора = ПолучитьИмяВременногоФайла("lscntr_" +
									?(флагСофтфон, "softphone", "bitpbx") + ".dll");
		КонецЕсли;
		
		Файл = Новый Файл(стрПутьКоннектора);
		Если Не Файл.Существует() Тогда          
			БиблиотекаКоннектораДвоичныеДанные = бит_ТелефонияСервер.ПолучитьБиблиотекуКоннектораСЛ20(Клиент64бит());
			БиблиотекаКоннектораДвоичныеДанные.Записать(стрПутьКоннектора);
			бит_ТелефонияСервер.УстановитьПараметрСеансаПутьБиблиотекиКоннектораСЛ20(флагСофтфон, стрПутьКоннектора);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат стрПутьКоннектора;
КонецФункции

// Возвращает массив из 3 чисел
Функция ПолучитьВерсиюПлатформы() ЭКСПОРТ
	массВерсия = Новый Массив(3);
	СисИнфо = Новый СистемнаяИнформация;
	стрВерсияПлатформы = СисИнфо.ВерсияПриложения;
	списЗначВерс = бит_ТелефонияКлиентСервер.СтрРазбить(стрВерсияПлатформы, ".");
	Для й=0 По 2 Цикл
		массВерсия[й] = Число(списЗначВерс[й].Значение);
	КонецЦикла;
	Возврат массВерсия;
КонецФункции

// Сравнивает два массива, каждый из 3 чисел
Функция ПроверкаВерсий(массВерсия, массМинВерсия) ЭКСПОРТ
	проверкаВерсияБольшеРавна = Ложь;
	Для й=0 По 2 Цикл
		Если (массВерсия[й] > массМинВерсия[й]) Тогда
			проверкаВерсияБольшеРавна = Истина;
			Прервать;
		ИначеЕсли (массВерсия[й] < массМинВерсия[й]) Тогда
			проверкаВерсияБольшеРавна = Ложь;
			Прервать;
		Иначе
			// версии равны,нужно проверять дальше
			проверкаВерсияБольшеРавна = Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат проверкаВерсияБольшеРавна;
КонецФункции

// Возвращает строку, имя файла для записи разговора, без расширения.
Функция ПолучитьИмяФайлаЗаписиСДатой(датаЗаписи) ЭКСПОРТ
	стрИмяФайла = "record" + Формат(датаЗаписи, "ДФ=""yyyyMMddHHmmss""");
	Возврат стрИмяФайла;
КонецФункции

//
Процедура ОткрытьФайлИлиСсылку(стрПуть) ЭКСПОРТ
	Если ЗначениеЗаполнено(стрПуть) Тогда
		#Если ВебКлиент Тогда
			ПерейтиПоНавигационнойСсылке(стрПуть);
		#Иначе
			бит_ТелефонияКлиентПереопределяемый.ЗапускПрограммы(стрПуть);
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

//
Процедура ОткрытьФормуВыполнитьДействие(ИмяФормы, стрДействие, стрПараметрДействия) ЭКСПОРТ
	Попытка
		ФормаОповещ = ПолучитьФорму(ИмяФормы);
		Если ФормаОповещ.Открыта() Тогда
			ФормаОповещ.Активизировать();
			Если ЗначениеЗаполнено(стрДействие) Тогда
				Оповестить(стрДействие, стрПараметрДействия);
			КонецЕсли;
		Иначе
			ФормаОповещ.ПриПодключенииДействие = стрДействие;
			ФормаОповещ.ПриПодключенииПараметр = стрПараметрДействия;
			ФормаОповещ.Открыть();
			ФормаОповещ.Активизировать();
		КонецЕсли;
	Исключение
		бит_ТелефонияКлиент.ВывестиСообщение( ОписаниеОшибки() );
	КонецПопытки;
КонецПроцедуры

//
Функция ПолучитьФормуВводаНомера(формаРодитель, флагРежимПеревода, ссылкаВнешняяКомпонента, флагПроверкаСтатусаЧерезSIP, стрСвойНомер) ЭКСПОРТ
	парам = Новый Структура();
	парам.Вставить("РежимПеревода", флагРежимПеревода);
	фрмВводаНомера = ПолучитьФорму("Обработка.бит_БитАТС.Форма.НаборНомера", парам, формаРодитель);
	фрмВводаНомера.УстановитьСсылкуНаВнешнююКомпоненту(ссылкаВнешняяКомпонента);
	фрмВводаНомера.ПроверкаСтатусаЧерезSIP = флагПроверкаСтатусаЧерезSIP;
	фрмВводаНомера.СвойНомер = стрСвойНомер;
	Возврат фрмВводаНомера;
КонецФункции

//
Функция ПолучитьФормуОбработкиВызова(формаРодитель, флагСкрыватьКнопкиОбработкиВызова, стрНомерВходящий, контрагентНайден, контрагентСсылка, контактноеЛицоСсылка, стрНабранныйНомер, стрСвойНомер) ЭКСПОРТ
	фрмОбработкаВызова = ПолучитьФорму("Обработка.бит_БитфонОбщее.Форма.ОбработкаВызова", , формаРодитель);
	//фрмОбработкаВызова.Заголовок		= "Вызывает номер " + стрНомерВходящий;
	// Установить свой заголовок
	фрмОбработкаВызова.Заголовок		= "БИТ.Phone";
	фрмОбработкаВызова.КонтрагентНайден	= контрагентНайден;
	фрмОбработкаВызова.Абонент			= контрагентСсылка;
	фрмОбработкаВызова.КонтактноеЛицо	= контактноеЛицоСсылка;
	фрмОбработкаВызова.НабранныйНомер	= стрНабранныйНомер;
	фрмОбработкаВызова.СвойНомер		= стрСвойНомер;
	фрмОбработкаВызова.СкрыватьКнопкиОбработкиВызова = флагСкрыватьКнопкиОбработкиВызова;
	Возврат фрмОбработкаВызова;
КонецФункции

//
Процедура ОткрытьФормуОбработкиНеизвестногоНомера(НомерНеОпределен, НомерВходящий) ЭКСПОРТ
	Если НомерНеОпределен Тогда
		НеизвестныйНомер = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(НомерВходящий);
		обработкаНеизвНомераПарам = Новый Структура("НеизвестныйНомер", НеизвестныйНомер);
		фрмОбработкаНеизвНомера = ПолучитьФорму("Обработка.бит_БитфонОбщее.Форма.ОбработкаНомерНеопределен", обработкаНеизвНомераПарам);
		фрмОбработкаНеизвНомера.Открыть();
	КонецЕсли;
КонецПроцедуры

//
Процедура ОткрытьФормуОбработкиДублейНомера(Знач стрНомерТелефонаДубл, формаРодитель) ЭКСПОРТ
	стрНомерТелефонаДубл = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(бит_ТелефонияКлиентСервер.ОчиститьНомерТолькоЦифры(стрНомерТелефонаДубл));
	бит_ТелефонияКлиент.ВывестиСообщение("Обнаружено несколько контрагентов с номером '" + стрНомерТелефонаДубл + "'. Список дублей открыт в отдельном окне.", формаРодитель);
	ОткрытьФорму("Обработка.бит_БитфонОбщее.Форма.ПоискКонтрагентовПоНомеру", Новый Структура("НомерТелефона", стрНомерТелефонаДубл));
КонецПроцедуры

//
Процедура ОткрытьФормуОтчетаИсторииЗвонков(формаРодитель) ЭКСПОРТ
	формаОтчетПоИсторииЗвонков = ПолучитьФорму("Отчет.бит_ИсторияЗвонков.Форма.ФормаОтчета", , формаРодитель, Ложь);
	ПараметрПользователь = формаОтчетПоИсторииЗвонков.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Пользователь");
	Если ПараметрПользователь <> Неопределено Тогда
		ПараметрПользователь.Значение = бит_ТелефонияСервер.ПолучитьТекущегоПользователя();
		ПараметрПользователь.Использование = Истина;
		формаОтчетПоИсторииЗвонков.ВариантМодифицирован = Ложь;
	КонецЕсли;
	формаОтчетПоИсторииЗвонков.Открыть();
КонецПроцедуры

//
Процедура ОткрытьФормуВыбораНомера(формаРодитель, ссылкаАТС = Неопределено) ЭКСПОРТ
	парам = Новый Структура;
	Если ЗначениеЗаполнено(ссылкаАТС) Тогда
		парам.Вставить("СсылкаАТС", ссылкаАТС);
	КонецЕсли;
	формаВыбораТелефона = ПолучитьФорму("Обработка.бит_БитфонОбщее.Форма.ФормаВыбораНомера", парам, формаРодитель);
	бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуСБлокировкойВладельца(формаВыбораТелефона);
КонецПроцедуры

//
Функция СоздатьСтруктуруПараметровЗвонка() ЭКСПОРТ
	Возврат Новый Структура("Пользователь, СвойНомер, Дата, Абонент, КонтактноеЛицо,"
		"Номер, ТипЗвонка, Успешность, ДлительностьЗвонка, НабранныйНомер");
КонецФункции

Процедура ОткрытьФормуПросмотраЗвонка(структураПараметровЗвонка) ЭКСПОРТ
	Ключ = бит_ТелефонияСервер.ИсторияЗвонковПолучитьКлюч(структураПараметровЗвонка);
	ПарамЗвонок = Новый Структура("Ключ", Ключ);
	ОткрытьФорму("РегистрСведений.бит_ИсторияЗвонков.Форма.ФормаПросмотраЗвонка", ПарамЗвонок);
КонецПроцедуры

Функция СоздатьСтруктуруПараметровСобытия(флагВходящее, Контрагент, Номер, КонтактноеЛицо, стрЗаписьРазговора, стрНабранныйНомер) ЭКСПОРТ
	структ = Новый Структура;
	структ.Вставить("Входящий", флагВходящее);
	структ.Вставить("Контрагент", Контрагент);
	структ.Вставить("Номер", Номер);
	структ.Вставить("КонтактноеЛицо", КонтактноеЛицо);
	структ.Вставить("ЗаписьРазговора", стрЗаписьРазговора);
	структ.Вставить("НабранныйНомер", стрНабранныйНомер);
	Возврат структ;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с Избранным
Процедура ИзбранноеСоздать(стрИмяСобытияОповещения) ЭКСПОРТ
	фрмНовИзбранное = ПолучитьФорму("Справочник.бит_БитфонИзбранное.Форма.ФормаЭлементаБезПользователя");
	фрмНовИзбранное.ИмяСобытияОповещенияПриИзменении = стрИмяСобытияОповещения;
	бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуСБлокировкойВладельца(фрмНовИзбранное);
КонецПроцедуры

Процедура ИзбранноеСкопировать(форма, стрИмяСобытияОповещения) ЭКСПОРТ
	текущСтрокаИзбр =  форма.Элементы.Избранное.ТекущиеДанные;
	Если текущСтрокаИзбр <> Неопределено Тогда
		текущ = текущСтрокаИзбр.Ссылка;
		ПарамИзбр = Новый Структура("ЗначениеКопирования", текущ);
		нф = ПолучитьФорму("Справочник.бит_БитфонИзбранное.Форма.ФормаЭлементаБезПользователя", ПарамИзбр);
		нф.ИмяСобытияОповещенияПриИзменении = стрИмяСобытияОповещения;
		бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуСБлокировкойВладельца(нф);
	КонецЕсли;
КонецПроцедуры

Процедура ИзбранноеИзменить(форма, стрИмяСобытияОповещения) ЭКСПОРТ
	текущСтрокаИзбр =  форма.Элементы.Избранное.ТекущиеДанные;
	Если текущСтрокаИзбр <> Неопределено Тогда
		текущ = текущСтрокаИзбр.Ссылка;
		ПарамИзбр = Новый Структура("Ключ", текущ);
		формаТекущ = ПолучитьФорму("Справочник.бит_БитфонИзбранное.Форма.ФормаЭлементаБезПользователя", ПарамИзбр); 
		формаТекущ.ИмяСобытияОповещенияПриИзменении = стрИмяСобытияОповещения;
		бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуСБлокировкойВладельца(формаТекущ);
	КонецЕсли;
КонецПроцедуры

Процедура ИзбранноеУдалить(форма, стрИмяСобытияОповещения) ЭКСПОРТ
	текущСтрокаИзбр =  форма.Элементы.Избранное.ТекущиеДанные;
	Если текущСтрокаИзбр <> Неопределено Тогда
		текущ =  текущСтрокаИзбр.Ссылка;
		Если текущСтрокаИзбр.ПометкаУдаления Тогда
			стрВопрос = "Снять с элемента избранного " + Строка(текущ) + " пометку на удаление?";
		Иначе
			стрВопрос = "Пометить на удаление элемент избранного " + Строка(текущ) + " ?";
		КонецЕсли;
		бит_ТелефонияКлиентПереопределяемый.ПоказВопрос(стрВопрос, РежимДиалогаВопрос.ДаНет, , , , стрИмяСобытияОповещения, текущ);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

                                           
// Обработчик события "ПриСоздании" формы.
// Производит считывание данных пользователя ИБ и заполняет соответствующие
// реквизиты формы. При необходимости данные для нового пользователя
// копируются из существующего.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Список ПАРАМЕТРЫ содержит Объект, ИДПользователяИБ, СоздатьКопированием
	
	//Получение параметров
	Если Параметры.Свойство("Объект") И Параметры.Объект <> Неопределено Тогда
	    Объект = Параметры.Объект;
	Иначе 
		Объект = Неопределено;
	КонецЕсли;	
	Если Параметры.Свойство("ИДПользователяИБ") И Параметры.ИДПользователяИБ <> Неопределено Тогда
	    ИДПользователяИБ = Новый УникальныйИдентификатор(Параметры.ИДПользователяИБ);
	Иначе 
		ИДПользователяИБ = Неопределено;
	КонецЕсли;	
	Если Параметры.Свойство("СоздатьКопированием") И Параметры.СоздатьКопированием <> Неопределено Тогда
	    СоздатьКопированием = Параметры.СоздатьКопированием;
	Иначе 
		СоздатьКопированием = Ложь;
	КонецЕсли;
	
	
	//Настройка и заполнение полей синхронизируемых между двумя формами
	Если Не Объект.Пустая() Тогда
	    Если КраткоеИмя = "" Тогда 
			КраткоеИмя = Объект.Код;
		КонецЕсли;
		Если Объект.Наименование <> "" Тогда
			ПолноеИмя = Объект.Наименование;
			Элементы.ПолноеИмя.ТолькоПросмотр = Истина;
		КонецЕсли;
    КонецЕсли;
	//Если ИДПользователяИБ <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
	//Если ИДПользователяИБ <> Неопределено Тогда
	
			
	// Заполнение списка выбора языка
	Элементы.Язык.СписокВыбора.Очистить();	
	Для Каждого ДоступныйЯзык ИЗ Метаданные.Языки Цикл
		Элементы.Язык.СписокВыбора.Добавить(ДоступныйЯзык.Имя, ДоступныйЯзык.Синоним);
	КонецЦикла;
		
	ПравоАдминистрирования         = ПравоДоступа("Администрирование", Метаданные);
	ТекущийПользовательПолныеПрава = РольДоступна("тсАдминистрирование") ИЛИ ПустаяСтрока(ПользователиИнформационнойБазы.ТекущийПользователь().Имя);	
		
	Если ПравоАдминистрирования ИЛИ ТекущийПользовательПолныеПрава Тогда			
		ПерваяЗапись = Истина;	
		Состояние = Новый Структура("РедактированиеРолейДоступно", Истина);	
		РедактированиеРолейДоступно = Состояние.РедактированиеРолейДоступно;
		ТекстСообщенияРедактированиеРолейНедоступно = ?(РедактированиеРолейДоступно, "", Состояние.ТекстСообщения);	
		Элементы.РолиПользователя.ТолькоПросмотр = НЕ ТекущийПользовательПолныеПрава;
		
		// сбрасываем флаг изменённости пароля для доступа пользователя в режиме
		// Аутентификации 1С:Предприятия
		Пароль1СПредприятияБылИзменен = Ложь;	
		Язык = Метаданные.Языки.Русский;
		Для Каждого Роль ИЗ Метаданные.Роли Цикл
			СтрокаРоли					 = РолиПользователя.Добавить();
			Если ИДПользователяИБ = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") И (Роль.Имя = "тсАдминистрирование" ИЛИ Роль.Имя = "бит_сл_Пользователь") Тогда
				СтрокаРоли.Пометка = Истина;
			Иначе
				СтрокаРоли.Пометка			 = Ложь;
			КонецЕсли;
			СтрокаРоли.ИмяРоли			 = Роль.Имя;
			СтрокаРоли.ПредставлениеРоли = Роль.Синоним;
		КонецЦикла;
		
		
		Если СоздатьКопированием Тогда
			//Создание копированием
			Если ИДПользователяИБ <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
				//Все хорошо
				ЗаполнитьПоПользователюИБ(ИДПользователяИБ);
				ИДПользователяИБ = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
				КраткоеИмя = "";
				ПолноеИмя = "";
			КонецЕсли;
		Иначе
 			Если ИДПользователяИБ = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда	
				//Создание нового
				Если Не Объект.Ссылка.Пустая() Тогда
					//Все хорошо, устанавливаем значения "по умолчанию"
					Аутентификация1СПредприятия = Истина;
					ПоказыватьВСпискеВыбора     = Истина;
					ЗапрещеноИзменятьПароль     = Ложь;
				КонецЕсли;
			Иначе	
				//Открытие существующего
				//Если Объект не пустой то синхронизировать при сохранении
				ЗаполнитьПоПользователюИБ(ИДПользователяИБ, Истина);
			КонецЕсли;
		КонецЕсли;
	Иначе //Запрет на редактирование своей  карточки
		Элементы.РолиПользователя.ТолькоПросмотр = Истина;
		Пароль1СПредприятияБылИзменен = Ложь;	
		Язык = Метаданные.Языки.Русский;
		Для Каждого Роль ИЗ Метаданные.Роли Цикл
			СтрокаРоли					 = РолиПользователя.Добавить();
			Если ИДПользователяИБ <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") И (Роль.Имя = "тсАдминистрирование" ИЛИ Роль.Имя = "бит_сл_Пользователь") Тогда
				СтрокаРоли.Пометка = Истина;
			Иначе
				СтрокаРоли.Пометка			 = Ложь;
			КонецЕсли;			
			СтрокаРоли.ИмяРоли			 = Роль.Имя;
			СтрокаРоли.ПредставлениеРоли = Роль.Синоним;
		КонецЦикла;
		ЗаполнитьПоПользователюИБ(ИДПользователяИБ, Истина);
		Элементы.ФормаСкопироватьНастройки.Доступность = ложь;
	КонецЕсли;
	
	
	УстановитьИзмененияВИнтерфейсе_Сервер();	
	//УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаКонтактнаяИнформация");	
КонецПроцедуры

// Обработчик события "ПередЗаписью" формы
// Проверяет, что пользователю установлена хотя бы одна роль,
// а так же корректность заполнения других реквизитов.
//
&НаКлиенте
Процедура ПередЗаписью(Отказ)
	ОчиститьСообщения();
	
	//Проверка на существование такого краткого имени
	ПроверитьКраткоеИмяНаСуществование(Отказ);
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Если ПравоАдминистрирования Тогда	
		Если ПустаяСтрока(КраткоеИмя) Тогда
			УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Не заполнено имя пользователя БД (краткое имя).'"), , "КраткоеИмя", , Отказ);
		КонецЕсли;
		
		Если Аутентификация1СПредприятия 
		   И Пароль1СПредприятияБылИзменен 
		   И Пароль1СПредприятия <> Пароль1СПредприятияПодтверждение Тогда
			УдалитьОбщегоНазначенияКлиент.СообщитьПользователю(
					НСтр("ru = 'Пароль и подтверждение пароля не совпадают.'"), , "Пароль1СПредприятия", , Отказ);
			Возврат;
		КонецЕсли;
		
		// Если указана аутентификация ОС, то должен быть указан пользователь ОС
		Если АутентификацияОС И ПустаяСтрока(ПользовательОС) Тогда
			УдалитьОбщегоНазначенияКлиент.СообщитьПользователю(
					НСтр("ru = 'Укажите пользователя операционной системы или запретите аутентификацию операционной системы!'"), ,
					"ПользовательОС", , Отказ);
			Возврат;
		КонецЕсли;
		
		Если РедактированиеРолейДоступно И НЕ ПроверитьРолиНазначены() Тогда
			//Чуров
			Если Не ВыполняетсяЗакрытие Тогда
				Отказ = Истина;
				ТекстВопроса = НСтр("ru = 'Пользователю информационной базы не установлено ни одной роли. Продолжить?'");
				ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтаФорма), ТекстВопроса, РежимДиалогаВопрос.ДаНет, , ,
						НСтр("ru = 'Запись пользователя информационной базы'"));
			КонецЕсли;
			//Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , ,
			//		НСтр("ru = 'Запись пользователя информационной базы'"));
			//Если Результат = КодВозвратаДиалога.Нет Тогда
			//	Отказ = Истина;
			//	Возврат;
			//КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

//Чуров++
&НаКлиенте
Процедура ПередЗаписьюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
	КонецЕсли;	
КонецПроцедуры
//Чуров--

&НаСервере
Процедура ПроверитьКраткоеИмяНаСуществование(Отказ)
	ПользовательИБ = УправлениеПользователями.НайтиПользователяБД(КраткоеИмя);	
	Если Не (ПользовательИБ = Неопределено ИЛИ ПользовательИБ.УникальныйИдентификатор = ИДПользователяИБ ИЛИ
			ПользовательИБ.УникальныйИдентификатор = Объект.ИдентификаторПользователяИБ) Тогда
		Сообщить("Пользователь с таким кратким именем уже существует.");
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ПараметрыЗаписи)	
	//если создается пользователь ИБ - ищем пользователя в справочнике для связи с ним
	Если Объект.Пустая() Тогда
		Объект = Справочники.Пользователи.НайтиПоКоду(КраткоеИмя);
	КонецЕсли;
		
	Если Не Объект.Пустая() Тогда
		//Синхронизируем КраткоеИмя
		Если Объект.Код <> КраткоеИмя Тогда
			ОбъектПользователи = Справочники.Пользователи.НайтиПоКоду(Объект.Код).ПолучитьОбъект();
			ОбъектПользователи.Код = КраткоеИмя;
			ОбъектПользователи.Записать();	
		КонецЕсли;
		//Синхронизируем ПолноеИмя
		Если Объект.Наименование <> "" Тогда
			ПолноеИмя = Объект.Наименование;
			Элементы.ПолноеИмя.ТолькоПросмотр = Истина;
		Иначе
			ОбъектПользователи = Справочники.Пользователи.НайтиПоКоду(Объект.Код).ПолучитьОбъект();
			ОбъектПользователи.Наименование = ПолноеИмя;
			ОбъектПользователи.Записать();
		КонецЕсли;	
	КонецЕсли;
		
	ЗаписатьПользователяИБ(Отказ, Объект);	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ПараметрыЗаписи)
	//ЗаполнитьПоПользователюИБ();	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") И
			ЭтаФорма.ВладелецФормы.ИмяФормы = "Справочник.Пользователи.Форма.ФормаЭлемента" Тогда
		ВладелецФормы.Прочитать();
		ОповеститьОбИзменении(Объект);
	КонецЕсли;
	
	Значение = Новый Структура();         
	Значение.Вставить("Ссылка", Объект); 							
	Значение.Вставить("Имя", КраткоеИмя); //Имеется в виду "КраткоеИмя"							
	Значение.Вставить("ПолноеИмя", ПолноеИмя);
	Значение.Вставить("Аутентификация1С", Аутентификация1СПредприятия);
	Значение.Вставить("АутентификацияОС", АутентификацияОС);
	Значение.Вставить("ПользовательОС", ПользовательОС);	
	Оповестить("ИзмененПользовательИБ", Значение, ЭтаФорма);
	
	Если ПерваяЗапись Тогда
		ПерваяЗапись = Ложь;
		Оповестить("ИзмененСоставГруппыПользователей", ГруппаПользователей, ЭтаФорма);
	КонецЕсли;	
	Если ПараметрыЗаписи.Свойство("ЕстьОшибки") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'При записи возникли ошибки (см. журнал регистрации)'"));
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПользователяИБ(Отказ, ТекущийОбъект)
	Перем СообщениеОбОшибке;  	
	Если ПравоАдминистрирования Тогда		
		СообщениеОбОшибке = "";	
		Отказ = Ложь;	
		ДанныеПользователяИБ = ПодготовитьДанныеПользователяИБДляЗаписи();
		
		СписокРолей = Новый ТаблицаЗначений;
		СписокРолей.Колонки.Добавить("ИмяРоли");
		СписокРолей.Колонки.Добавить("Пометка");
		
		Для Каждого ЭлементКоллекции Из РолиПользователя Цикл
			НоваяСтрока = СписокРолей.Добавить();
			НоваяСтрока.ИмяРоли = ЭлементКоллекции.ИмяРоли;
			НоваяСтрока.Пометка = ЭлементКоллекции.Пометка;
			// нельзя устанавливать роли с правом администрирования ИБ
			Если НоваяСтрока.Пометка И СпециальныйРежимРедактирования
					И ПравоДоступа("Администрирование", Метаданные, Метаданные.Роли.Найти(НоваяСтрока.ИмяРоли)) Тогда
				Отказ = Истина;
				СообщениеОбОшибке = НСтр("ru = 'Недостаточно прав для установки роли с правом администрирования'");
				Прервать;
			КонецЕсли;		
		КонецЦикла;
		
		Если Не Отказ Тогда
			Если ТекущийОбъект.Пустая() Тогда
				Идентификатор = Пользователи.ЗаписатьПользователяИБ(ИДПользователяИБ, ДанныеПользователяИБ,
						СообщениеОбОшибке, СписокРолей);
				Если Идентификатор = Неопределено Тогда
					Отказ = Истина;
				Иначе
					ИДПользователяИБ = Идентификатор;
				КонецЕсли;
			Иначе
				// Идентификатор не валидный, пытаемся идентифицироваться по имени
				Идентификатор = Пользователи.ЗаписатьПользователяИБ(ТекущийОбъект.ИдентификаторПользователяИБ,
						ДанныеПользователяИБ, СообщениеОбОшибке, СписокРолей);	
				Если Идентификатор = Неопределено Тогда
					Отказ = Истина;
				ИначеЕсли ТекущийОбъект.ИдентификаторПользователяИБ <> Идентификатор Тогда
					ОбъектПользователи = Справочники.Пользователи.НайтиПоНаименованию(ТекущийОбъект.Наименование).ПолучитьОбъект();
					ОбъектПользователи.ИдентификаторПользователяИБ = Идентификатор;
					ОбъектПользователи.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Отказ Тогда
			Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
				ТекстСообщенияОбОшибке = УдалитьСтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка записи пользователя ИБ: %1'"), СообщениеОбОшибке);
				УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке);
			Иначе
				УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Пользователь информационной базы не был записан'"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура КраткоеИмяПриИзменении(Элемент)
	КраткоеИмяПриИзмененииНаСервере();	
КонецПроцедуры

&НаСервере
Процедура КраткоеИмяПриИзмененииНаСервере()
	Если Объект.Пустая() Тогда
		ОбъектСправочника = Справочники.Пользователи.НайтиПоКоду(КраткоеИмя);
		Если Не ОбъектСправочника.Пустая() Тогда
			Если ОбъектСправочника.Наименование <> "" Тогда
				ПолноеИмя = ОбъектСправочника.Наименование;
            	Элементы.ПолноеИмя.ТолькоПросмотр = Истина;
			КонецЕсли;
		Иначе
			Элементы.ПолноеИмя.ТолькоПросмотр = Ложь;
			Если ПолноеИмя = "" Тогда
				ПолноеИмя = КраткоеИмя;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Обработчик события "ПриИзменении" поля Пароль1СПредприятия.
// Устанавливает флаг того, что пароль был изменен.
//
&НаКлиенте
Процедура Пароль1СПредприятияПриИзменении(Элемент)	
	Пароль1СПредприятияБылИзменен = Истина;	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля ввода Пароль1СПредприятияПодтверждение.
// Устанавливает флаг того, что пароль был изменен.
&НаКлиенте
Процедура Пароль1СПредприятияПодтверждениеПриИзменении(Элемент)
	Пароль1СПредприятияБылИзменен = Истина;	
КонецПроцедуры

// Процедура открывает форму выбора пользователя ОС и в случае успешного
// выбора возвращает строку соединения.
//
// Возвращаемое значение
// СтрокаСоединения - Строка соединения пользователя ОС при аутентификации ОС
//
&НаКлиенте
Процедура ПользовательОСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	#Если НЕ ВебКлиент Тогда
	//Чуров
	Результат = ОткрытьФорму("Справочник.Пользователи.Форма.ФормаВыбораПользователяОС",,ЭтаФорма);	
	//Результат = ОткрытьФормуМодально("Справочник.Пользователи.Форма.ФормаВыбораПользователяОС");	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ПользовательОС = Результат;
	КонецЕсли;
	#КонецЕсли	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля флажка Аутентификация1СПредприятия
// Включает либо отключает доступность полей соответственно установленности
// либо сброшенности флажка.
//
&НаКлиенте
Процедура Аутентификация1СПредприятияПриИзменении(Элемент)	
	УстановитьДоступностьПараметровАутентификации(Элементы, Аутентификация1СПредприятия);	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля флажка АутентификацияОС
// Включает либо отключает доступность полей соответственно
// установленности либо сброшенности флажка.
//
&НаКлиенте
Процедура АутентификацияОСПриИзменении(Элемент)	
	Элементы.ПользовательОС.Доступность = ?(АутентификацияОС, Истина, Ложь);	
КонецПроцедуры

&НаКлиенте
Процедура РолиПользователяПриИзменении(Элемент)	
	Модифицированность = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСинхронизацию(Команда)
	Объект.Наименование = ПолноеИмяПользователяИБ;
	ПолноеИмяПользователяИБ = "";	
КонецПроцедуры

&НаКлиенте
Процедура РолиПользователяПередНачаломИзменения(Элемент, Отказ)	
	Если НЕ ( РедактированиеРолейДоступно ИЛИ
	          ТекущийПользовательПолныеПрава И
	          ВРег(Элемент.ТекущиеДанные.ИмяРоли) = ВРег("тсАдминистрирование") ) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, "<ТекстСообщенияРедактированиеРолейНедоступно>");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПриИзменении(Элемент)	
	УдалитьУправлениеКонтактнойИнформациейКлиент.ПредставлениеПриИзменении(ЭтаФорма, Элемент);	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	УдалитьУправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтаФорма, Элемент, Модифицированность, 
			СтандартнаяОбработка);	
КонецПроцедуры

// Процедура формирует структуру данныхпользователя ИБ для записи
//
&НаСервере
Функция ПодготовитьДанныеПользователяИБДляЗаписи()	
	ПользовательИБ = Новый Структура;	
	ПользовательИБ.Вставить("Имя",						КраткоеИмя); //Имеется в виду "КраткоеИмя"
	ПользовательИБ.Вставить("ПолноеИмя",				ПолноеИмя);
	ПользовательИБ.Вставить("АутентификацияСтандартная",Аутентификация1СПредприятия);
	ПользовательИБ.Вставить("АутентификацияОС",			АутентификацияОС);
	ПользовательИБ.Вставить("ПользовательОС",			ПользовательОС);
	ПользовательИБ.Вставить("ПоказыватьВСпискеВыбора",	ПоказыватьВСпискеВыбора);
	ПользовательИБ.Вставить("ЗапрещеноИзменятьПароль",	ЗапрещеноИзменятьПароль);
	
	Если РежимЗапуска = НСтр("ru = 'Обычное приложение'") Тогда
		ПользовательИБ.Вставить("РежимЗапуска", РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение);
	ИначеЕсли РежимЗапуска = НСтр("ru = 'Управляемое приложение'") Тогда
		ПользовательИБ.Вставить("РежимЗапуска", РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение);
	Иначе
		ПользовательИБ.Вставить("РежимЗапуска", РежимЗапускаКлиентскогоПриложения.Авто);
	КонецЕсли;
	
	Если Аутентификация1СПредприятия И Пароль1СПредприятияБылИзменен Тогда
		ПользовательИБ.Вставить("Пароль", Пароль1СПредприятия);
	КонецЕсли;
	
	// Находим язык по имени и присваиваем его пользователю.
	ПользовательИБ.Вставить("Язык", Язык);	
	Возврат ПользовательИБ;	
КонецФункции

// Считывает информацию о параметрах аутентификации пользователя из метаданных ИБ
// и заполняет реквизиты соответственно.
//
&НаСервере
Функция ЗаполнитьПоПользователюИБ(знач ЗначениеКопирования = Неопределено, знач ЗаполнятьПолноеИмя = Ложь)
	УстановитьПривилегированныйРежим(Истина);	
	Если ТипЗнч(ЗначениеКопирования) = Тип("УникальныйИдентификатор") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ЗначениеКопирования);
	Иначе
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
				?(ЗначениеЗаполнено(ЗначениеКопирования), ЗначениеКопирования.ИдентификаторПользователяИБ,
				Объект.ИдентификаторПользователяИБ));
	КонецЕсли;
		
	Если ПользовательИБ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗаполнятьПолноеИмя Тогда
		ПолноеИмя				= ПользовательИБ.ПолноеИмя;
	КонецЕсли;
	КраткоеИмя 					= ПользовательИБ.Имя;
	Аутентификация1СПредприятия	= ПользовательИБ.АутентификацияСтандартная;
	ПоказыватьВСпискеВыбора		= ПользовательИБ.ПоказыватьВСпискеВыбора;
	ЗапрещеноИзменятьПароль		= ПользовательИБ.ЗапрещеноИзменятьПароль;
	АутентификацияОС			= ПользовательИБ.АутентификацияОС;
	Язык						= ПользовательИБ.Язык;
	ПользовательОС				= ПользовательИБ.ПользовательОС;
	
	Если ПользовательИБ.РежимЗапуска = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
		РежимЗапуска = НСтр("ru = 'Обычное приложение'");
	ИначеЕсли ПользовательИБ.РежимЗапуска = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		РежимЗапуска = НСтр("ru = 'Управляемое приложение'");
	Иначе
		РежимЗапуска = НСтр("ru = 'Авто'");
	КонецЕсли;

	Если ПользовательИБ.ПарольУстановлен Тогда
		Пароль1СПредприятия					= "**********";
		Пароль1СПредприятияПодтверждение	= "**********";
	КонецЕсли;
	
	СписокРолей = РеквизитФормыВЗначение("РолиПользователя");
	Для Каждого ЭлементСпискаРолей Из СписокРолей Цикл
		ЭлементСпискаРолей.Пометка = Ложь;
	КонецЦикла;	
	Для Каждого РольПользователя ИЗ ПользовательИБ.Роли Цикл
		СтрокаТаблицыЗначений = СписокРолей.Найти(РольПользователя.Имя);
		Если СтрокаТаблицыЗначений <> Неопределено Тогда
			СтрокаТаблицыЗначений.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;	
	ЗначениеВРеквизитФормы(СписокРолей, "РолиПользователя");	
	Возврат Истина;
КонецФункции

// Проверяет что пользователю назначена хотя бы одна роль.
//
&НаКлиенте
Функция ПроверитьРолиНазначены()
	ОднаРольУстановлена = Ложь;	
	Для Каждого ЭлементКоллекции Из РолиПользователя Цикл
		Если ЭлементКоллекции.Пометка Тогда
			ОднаРольУстановлена = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	Возврат ОднаРольУстановлена;	
КонецФункции

&НаСервере
Процедура УстановитьИзмененияВИнтерфейсе_Сервер()
	Если ПравоАдминистрирования или ТекущийПользовательПолныеПрава Тогда
		УстановитьДоступностьСвойств(Элементы.ГруппаСвойства, Истина);
		УстановитьДоступностьПараметровАутентификации(Элементы, Аутентификация1СПредприятия);
		Элементы.РолиПользователя.ТолькоПросмотр = Ложь;
		Элементы.КраткоеИмя.АвтоОтметкаНезаполненного = Истина;
		Элементы.ПользовательОС.Доступность = ?(АутентификацияОС, Истина, Ложь);
	Иначе
		Если ПользователиИнформационнойБазы.ТекущийПользователь().Имя  = ПолноеИмя   Тогда //Разрешим просмотр своей карточки
			Элементы.ЗапрещеноИзменятьПароль.Доступность = Ложь;
			Если ЗапрещеноИзменятьПароль Тогда 
				Элементы.Пароль1СПредприятия.Доступность = Ложь;
				Элементы.Пароль1СПредприятияПодтверждение =Ложь;
			КонецЕсли;
			УстановитьДоступностьСвойств(Элементы.ГруппаСвойства, Истина);
			Элементы.КраткоеИмя.АвтоОтметкаНезаполненного = Истина;
			Элементы.ПользовательОС.Доступность = ?(АутентификацияОС, Истина, Ложь);
			Элементы.РолиПользователя.ТолькоПросмотр = Истина;
			Элементы.УстановитьФлажки.Доступность = Ложь;
			Элементы.СнятьФлажки.Доступность = Ложь;
		КонецЕсли;	
		
	КонецЕсли;	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьСвойств(Группа, Доступность)
	
	Для Каждого Элемент Из Группа.ПодчиненныеЭлементы Цикл
		Элемент.Доступность = Доступность;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает видимость параметров аутентификации 1С предприятия
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПараметровАутентификации(Элементы, Состояние)
	Элементы.Пароль1СПредприятия.Доступность = Состояние;
	Элементы.Пароль1СПредприятияПодтверждение.Доступность = Состояние;
	Элементы.ЗапрещеноИзменятьПароль.Доступность = Состояние;
	Элементы.ПоказыватьВСпискеВыбора.Доступность = Состояние;
КонецПроцедуры

&НаКлиенте
Процедура ФормаЗаписатьИЗакрыть(Команда)
	ФормаЗаписать(Команда);
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ФормаЗаписать(Команда)
	Отказ = Ложь;
	ПараметрыЗаписи = Новый Структура();
	                           
	ПередЗаписью(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ПередЗаписьюНаСервере(Отказ, ПараметрыЗаписи);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ПослеЗаписиНаСервере(ПараметрыЗаписи);
	ПослеЗаписи(ПараметрыЗаписи);
	ЭтаФорма.Модифицированность = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	Для Каждого Элемент Из РолиПользователя Цикл
		Элемент.Пометка = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	Для Каждого Элемент Из РолиПользователя Цикл
		Элемент.Пометка = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьНастройки(Команда)
	СписокВыбора = Новый СписокЗначений;	
	ЗаполнитьСписокВыбораПользователейИБ(СписокВыбора);	
	СписокВыбора.СортироватьПоЗначению();		
	ВыбранныйПользователь = СписокВыбора.ВыбратьЭлемент("Выберите пользователя БД для копирования настроек", 
			СписокВыбора);		
	Если ВыбранныйПользователь <> Неопределено Тогда
		ИДПользователя = ПолучитьИДВыбранногоПользователяИБ(ВыбранныйПользователь.Значение);
		КраткоеИмяСтарое = КраткоеИмя;
		ПолноеИмяСтарое = ПолноеИмя;
			ЗаполнитьПоПользователюИБ(ИДПользователя);
		КраткоеИмя = КраткоеИмяСтарое;
		ПолноеИмя = ПолноеИмяСтарое;	
    КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПользователейИБ(СписокВыбора)
	СписокВыбора = Новый СписокЗначений;
	ВсеПользователи = ПользователиИнформационнойБазы.ПолучитьПользователей();	
	Для Каждого ВремПользователь Из ВсеПользователи Цикл	
		СписокВыбора.Добавить(ВремПользователь.Имя);								
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция ПолучитьИДВыбранногоПользователяИБ(ВыбранныйПользователь)
	Возврат УправлениеПользователями.НайтиПользователяБД(ВыбранныйПользователь).УникальныйИдентификатор;	
КонецФункции	

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	//Чуров
	//Если ЭтаФорма.Модифицированность Тогда	
	//	ОтветПользователя = Вопрос("Настройки пользователя БД были изменены. Сохранить?", 
	//			РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Да);	
	//	Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
	//		ФормаЗаписать(Неопределено);
	//	ИначеЕсли ОтветПользователя = КодВозвратаДиалога.Отмена Тогда
	//        Отказ = Истина;
	//    КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Справочник.Пользователи.Форма.ФормаВыбораПользователяОС" Тогда
		ПользовательОС = ВыбранноеЗначение;
	КонецЕсли;	
КонецПроцедуры



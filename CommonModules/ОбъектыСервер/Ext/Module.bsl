
&НаСервере
Процедура РасширитьТабличнуюЧасть(Таблица) Экспорт
	ТЧ = Таблица.Выгрузить();
	КолТЧ = ТЧ.ВыгрузитьКолонку("Объект");
	ТЧ.ЗагрузитьКолонку(КолТЧ, "Контрагент");
	ТЧ.ЗагрузитьКолонку(КолТЧ, "ДоговорКонтрагента");
	ТЧ.ЗагрузитьКолонку(КолТЧ, "УслугаПоДоговору");
	ТЧ.ЗагрузитьКолонку(КолТЧ, "ДолговоеОбязательство");
	ТЧ.ЗагрузитьКолонку(КолТЧ, "ИсполнительныйДокумент");
	
	Таблица.Загрузить(ТЧ);
	
	//////Запрос = Новый Запрос("ВЫБРАТЬ
	//////					  |	Таблица.Объект
	//////					  |ПОМЕСТИТЬ Таблица
	//////					  |ИЗ
	//////					  |	&Таблица КАК Таблица
	//////					  |;
	//////					  |
	//////					  |////////////////////////////////////////////////////////////////////////////////
	//////					  |ВЫБРАТЬ
	//////					  |	Таблица.Объект,
	//////					  |	Таблица.Объект КАК Контрагент,
	//////					  |	Таблица.Объект КАК ДоговорКонтрагента,
	//////					  |	Таблица.Объект КАК Объект3,
	//////					  |	Таблица.Объект КАК Объект4
	//////					  |ИЗ
	//////					  |	Таблица КАК Таблица");
КонецПроцедуры

&НаСервере
Процедура ОграничитьТипОбъекта(Элемент) Экспорт
	СтрокаТипов = "";	
	Если Константы.ДетализацияПоКА.Получить() Тогда
	    СтрокаТипов = ", СправочникСсылка.Контрагенты";
	КонецЕсли;
	
	Если Константы.ДетализацияПоДоговорам.Получить() Тогда
	    СтрокаТипов = СтрокаТипов + ", СправочникСсылка.ДоговорыКонтрагентов";
	КонецЕсли;	
	Если Константы.ДетализацияПоУслугам.Получить() Тогда
	    СтрокаТипов = СтрокаТипов + ", СправочникСсылка.УслугиПоДоговору";
	КонецЕсли;
	Если Константы.ДетализацияПоДО.Получить() Тогда
	    СтрокаТипов = СтрокаТипов + ", СправочникСсылка.ДолговыеОбязательства";
	КонецЕсли;	
	Если Константы.ДетализацияПоИД.Получить() Тогда
	    СтрокаТипов = СтрокаТипов + ", СправочникСсылка.ИсполнительныеДокументы";
	КонецЕсли;	
	Если Константы.ДетализацияПоЗ.Получить() Тогда
		СтрокаТипов = СтрокаТипов + ", СправочникСсылка.Залоги";
	КонецЕсли;
	
	СтрокаТипов = СтрокаТипов + ", СправочникСсылка.ФССП_ИсполнительноеПроизводство";
	СтрокаТипов = СтрокаТипов + ", ДокументСсылка.СудебноеДело";
	
	Элемент.ОграничениеТипа = Новый ОписаниеТипов(Сред(СтрокаТипов, 3));	
КонецПроцедуры

&НаСервере
Функция РазыменоватьСсылку(Ссылка, Реквизит) Экспорт
	Если Ссылка = Неопределено Тогда
		Возврат Вычислить(Реквизит);
	КонецЕсли;
	Возврат Вычислить("Ссылка." + Реквизит);

КонецФункции

&НаСервере
Функция РазыменоватьТаблицу(Ссылка, Таблица) Экспорт
	Если Ссылка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Таб = Вычислить("Ссылка." + Таблица);
	Возврат ПреобразоватьТаблицуЗначенийВМассив(Таб.Выгрузить());

КонецФункции


&НаСервере
Процедура УстановитьНомерВерсииКомпоненты(Версия) Экспорт
	Константы.НомерВерсииКомпоненты.Установить(Версия);
КонецПроцедуры

// Функция предназначена для заполнения документа, созданного при нажатии на кнопку "На основании".
// Если у созданного документа отсутствует в метаданных табличная часть с именем "Объекты", то функция не сработает
// (данный функционал неактуален на 17_04_2013).
// Функция не работает для справочников. 
&НаСервере
Функция ОбработкаЗаполненияДокументов(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	// Для Документов
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ДанныеЗаполнения)) Тогда  		
		Попытка 
			ЭтотОбъект.Объекты.Загрузить(ДанныеЗаполнения.Объекты.Выгрузить()); // Большая часть документов имеют таб. часть "Объекты"
		Исключение
			Попытка
				ТЗ = ДанныеЗаполнения.ТаблицаЗначений.Получить();    // Небольшая часть хранит данные таб. части в ХранилицеЗначений			 
				Попытка // Проверяем и переименовываем колонку "СсылкаДо" на "Объект"
					ТЗ.Колонки.СсылкаДО.Имя = "Объект";		
				Исключение	
				КонецПопытки;
				ЭтотОбъект.Объекты.Загрузить(ТЗ);
			Исключение
			КонецПопытки;
		КонецПопытки;
		
		// Заполнение реквизитов
		Попытка 
			ЭтотОбъект.ДокументОснование = ДанныеЗаполнения;          
		Исключение
		КонецПопытки;
		Попытка 
			ЭтотОбъект.Комментарий = ДанныеЗаполнения.Комментарий;   
		Исключение
		КонецПопытки;
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ДанныеЗаполнения)) Тогда // Для Справочников 
		Если ТипЗнч(ЭтотОбъект) = Тип("ДокументОбъект.ОбещанныеПлатежи") ИЛИ ТипЗнч(ЭтотОбъект) = Тип("ДокументОбъект.НеподтвержденныеПлатежи") Тогда
			Попытка
				ЭтотОбъект.Объект = ДанныеЗаполнения;
			Исключение
			КонецПопытки;
		Иначе
			НовСтр = ЭтотОбъект.Объекты.Добавить();
			Попытка
				НовСтр.Объект = ДанныеЗаполнения;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ВычислитьФункцию(Знач Запрос, Знач ОбъектВх, Знач БизнесПроцесс, Знач ОбъектРодитель) Экспорт
    Значение = Неопределено;
	Попытка	
		Выполнить(Запрос);
	Исключение
		Сообщить(ОписаниеОшибки());
		Отказ = Истина;
	КонецПопытки;
	Возврат Значение;
КонецФункции

&НаСервере
Процедура ЗаполнитьОтчетОбъекта(Ссылка, ТабДок, КонстантаОтчет) Экспорт
	ОтчетСсылка = КонстантаОтчет.Получить();
	Если Не ОтчетСсылка.Пустая() Тогда
		Если ОтчетСсылка.Внутренний Тогда
			Попытка          
				Отчет = Вычислить("Отчеты." + ОтчетСсылка.ИмяОтчета + ".Создать()");
			Исключение
				Сообщить("Ошибка получения отчета!");
				Возврат;
			КонецПопытки;
		Иначе
			Попытка     
				Отчет = ВнешниеОтчеты.Создать(ОтчетСсылка.ИмяОтчета);
			Исключение
				Попытка
					Данные = ОтчетСсылка.Хранилище.Получить();
					АдресХранилища = ПоместитьВоВременноеХранилище(Данные, Новый УникальныйИдентификатор());
					ВнешниеОтчеты.Подключить(АдресХранилища, ОтчетСсылка.ИмяОтчета, Ложь);
					
					Отчет = ВнешниеОтчеты.Создать(ОтчетСсылка.ИмяОтчета);
				Исключение
					Сообщить("Ошибка получения отчета!");
					Возврат;
				КонецПопытки;
			КонецПопытки;
		КонецЕсли;
	
		Отчет.Объект = Ссылка;
		Отчет.ЗаполнитьТабличныйДокумент(ТабДок);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура УдалитьПометкуОбИзменении(Отказ, Объект) Экспорт
	Набор = РегистрыСведений.ИзмененныеОбъекты.СоздатьМенеджерЗаписи();
	Набор.Объект = Объект;
	Набор.Сотрудник = УдалитьОбщегоНазначения.ТекущийПользователь();
	Набор.Прочитать();
	Если Не Набор.Сотрудник.Пустая() Тогда
		Попытка
			Набор.Удалить();
		Исключение
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеСвойства(Объект, КодСвойства) Экспорт
	СсылкаДопРС = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоКоду(
			Формат(КодСвойства, "ЧЦ=9; ЧН=; ЧВН=; ЧГ="));
	Если СсылкаДопРС.Пустая() Тогда
		Возврат Неопределено;
	ИначеЕсли ЗначениеЗаполнено(СсылкаДопРС) Тогда
		Если СсылкаДопРС.ЭтоДополнительноеСведение Тогда
			Набор = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
			Набор.Объект = Объект.Ссылка;
			Набор.Свойство = СсылкаДопРС;
			Набор.Прочитать();
			Возврат Набор.Значение;
		Иначе
			Строки = Объект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", СсылкаДопРС));
			Если Строки.Количество() > 0 Тогда
				Возврат Строки[0].Значение;
			Иначе
            	Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;	
КонецФункции

&НаСервере
Функция ПолучитьДопРиСПоКоду(КодСвойства) Экспорт
    Возврат ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоКоду(КодСвойства);
КонецФункции	
	
&НаСервере
Функция ЭтотТипЕстьСсылка(ТипОТ) Экспорт
	ВсеСсылки = Справочники.ТипВсеСсылки();
	ВсеСсылки = Новый ОписаниеТипов(ВсеСсылки, Перечисления.ТипВсеСсылки().Типы());
	ВсеСсылки = Новый ОписаниеТипов(ВсеСсылки, Документы.ТипВсеСсылки().Типы());
	ВсеСсылки = Новый ОписаниеТипов(ВсеСсылки, ПланыВидовХарактеристик.ТипВсеСсылки().Типы());
	ВсеСсылки = Новый ОписаниеТипов(ВсеСсылки, БизнесПроцессы.ТипВсеСсылки().Типы());
    ВсеСсылки = Новый ОписаниеТипов(ВсеСсылки, Задачи.ТипВсеСсылки().Типы());
	Попытка
		Возврат ВсеСсылки.СодержитТип(ТипОТ.Типы()[0]);
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаСервере
Функция ПроверитьИзмененияВОбъекте(Объект) Экспорт
	Стр = "";
	Если Константы.КонтрольИзмененийОбъектов.Получить() И Не Объект.Ссылка.Пустая() Тогда
		//реквизиты
		Для Каждого Элемент Из Объект.Метаданные().Реквизиты Цикл
			Если Объект[Элемент.Имя] <> Объект.Ссылка[Элемент.Имя] Тогда
				Стр = Стр + Элемент.Имя + "=" + Строка(Объект.Ссылка[Элемент.Имя]) + "|";	
			КонецЕсли;	
		КонецЦикла;
		
		//доп рекв и КА
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	Т.Свойство,
		                      |	Т.Значение
		                      |ПОМЕСТИТЬ Т_До
		                      |ИЗ
		                      |	&Т_ДО КАК Т
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	Т.Свойство,
		                      |	Т.Значение
		                      |ПОМЕСТИТЬ Т_После
		                      |ИЗ
		                      |	&Т_После КАК Т
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	Т_До.Свойство,
		                      |	Т_До.Значение
		                      |ИЗ
		                      |	Т_До КАК Т_До
		                      |		ПОЛНОЕ СОЕДИНЕНИЕ Т_После КАК Т_После
		                      |		ПО Т_До.Свойство = Т_После.Свойство
		                      |ГДЕ
		                      |	Т_До.Значение <> Т_После.Значение");
		Запрос.УстановитьПараметр("Т_До", Объект.Ссылка.ДополнительныеРеквизиты.Выгрузить());
		Запрос.УстановитьПараметр("Т_После", Объект.ДополнительныеРеквизиты.Выгрузить());
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл 
			Если Результат.Свойство = Null Тогда
				Стр = Стр + Строка(Результат.Свойство) + "=|";
			Иначе
				Стр = Стр + Строка(Результат.Свойство) + "=" + Строка(Результат.Значение) + "|";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Стр;
КонецФункции

&НаСервере
Функция РазборСтроки(Результат)	
	//Строка = Результат;
	//ПозицияКонец = Найти(Строка,"~");
	//Массив_ДанныеПоПЛ = Новый Массив;
	//
	//Пока ПозицияКонец > 0 Цикл
	//	
	//	Подстрока = Сред(Строка,1,  ПозицияКонец-1);
	//	Массив_ДанныеПоПЛ.Добавить(РазборСекцииСтроки(Подстрока));
	//	
	//	Колво = СтрДлина(Строка);
	//	Строка = Сред(Строка, ПозицияКонец+1,Колво-ПозицияКонец);
	//	ПозицияКонец = Найти(Строка, "~");
	//	
	//КонецЦикла;
	//
	//Возврат Массив_ДанныеПоПЛ;	
КонецФункции

// Функция предназначена для проверки заполнения обязательных реквизитов
// актуальных на 18.04.2013 г.
&НаСервере
Функция ЗаполненыРеквизитыПользователя(ТекПользователь) Экспорт
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	Если ТекПользователь.Организация.Пустая() Или ТекПользователь.Подразделение.Пустая() Или 
			ТекПользователь.ТипСотрудника.Пустая() Тогда			
		Возврат ТекПользователь;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПроверкаРоли() Экспорт
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.РегламентныеЗаданияФайловойБазы) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции

&НаСервере
Процедура ОграничитьФункционалЗагрузкиДанных() Экспорт
	Константы.ЗагрузкаДанных.Установить(Не Константы.ЗагрузкаРеестров.Получить()); 
КонецПроцедуры

&НаСервере
Процедура СинхронизироватьРегистры_ОбъектыВРаботе() Экспорт
	
	//НачатьТранзакцию();
	К = Константы.СинхронизацияДанныхЗапущена.Получить();
	//Константы.СинхронизацияДанныхЗапущена.Установить(Ложь);
	//ЗафиксироватьТранзакцию();
	
	Пока К=Истина Цикл
		НачатьТранзакцию();
		Константы.СинхронизацияДанныхЗапущена.Установить(Ложь);
		ЗафиксироватьТранзакцию();
		
		//Организации
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ОбъектыВРаботеОстатки.Объект,
		|	ОбъектыВРаботеОстатки.Организация,
		|	ОбъектыВРаботеОрганизации.Объект КАК ОбъектРС,
		|	ОбъектыВРаботеОрганизации.Организация КАК ОрганизацияРС
		|ИЗ
		|	РегистрНакопления.ОбъектыВРаботе.Остатки(
		|			,
		|			Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|				И Сотрудник = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК ОбъектыВРаботеОстатки
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыВРаботеОрганизации КАК ОбъектыВРаботеОрганизации
		|		ПО ОбъектыВРаботеОстатки.Объект = ОбъектыВРаботеОрганизации.Объект
		|			И ОбъектыВРаботеОстатки.Организация = ОбъектыВРаботеОрганизации.Организация
		|ГДЕ
		|	(ОбъектыВРаботеОрганизации.Объект ЕСТЬ NULL 
		|			ИЛИ ОбъектыВРаботеОстатки.Объект ЕСТЬ NULL )"); 
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Результат.Объект) Тогда // = Null Тогда //Надо удалить из РС
				Набор = РегистрыСведений.ОбъектыВРаботеОрганизации.СоздатьМенеджерЗаписи();
				Набор.Объект = Результат.ОбъектРС;
				Набор.Организация = Результат.ОрганизацияРС;
				Набор.Прочитать();
				Попытка 
					Набор.Удалить();
				Исключение
					Возврат;
				КонецПопытки;
				
			Иначе //Надо добавить в РС
				Набор = РегистрыСведений.ОбъектыВРаботеОрганизации.СоздатьМенеджерЗаписи();
				Набор.Объект = Результат.Объект;
				Набор.Организация = Результат.Организация;
				Попытка 
					Набор.Записать();
				Исключение
					Возврат;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
		//Подразделение
		Запрос.Текст = "ВЫБРАТЬ
		|	ОбъектыВРаботеОстатки.Объект,
		|	ОбъектыВРаботеОстатки.Подразделение,
		|	ОбъектыВРаботеПодразделения.Объект КАК ОбъектРС,               
		|	ОбъектыВРаботеПодразделения.Подразделение КАК ПодразделениеРС
		|ИЗ
		|	РегистрНакопления.ОбъектыВРаботе.Остатки(
		|			,
		|			Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|				И Сотрудник = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК ОбъектыВРаботеОстатки
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыВРаботеПодразделения КАК ОбъектыВРаботеПодразделения
		|		ПО ОбъектыВРаботеОстатки.Объект = ОбъектыВРаботеПодразделения.Объект
		|			И ОбъектыВРаботеОстатки.Подразделение = ОбъектыВРаботеПодразделения.Подразделение
		|ГДЕ
		|	(ОбъектыВРаботеПодразделения.Объект ЕСТЬ NULL 
		|			ИЛИ ОбъектыВРаботеОстатки.Объект ЕСТЬ NULL )"; 
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Результат.Объект) Тогда // = Null Тогда //Надо удалить из РС
				Набор = РегистрыСведений.ОбъектыВРаботеПодразделения.СоздатьМенеджерЗаписи();
				Набор.Объект = Результат.ОбъектРС;
				Набор.Подразделение = Результат.ПодразделениеРС;
				Набор.Прочитать();
				Попытка 
					Набор.Удалить();
				Исключение
					Возврат;
				КонецПопытки;
				
			Иначе //Надо добавить в РС
				Набор = РегистрыСведений.ОбъектыВРаботеПодразделения.СоздатьМенеджерЗаписи();
				Набор.Объект = Результат.Объект;
				Набор.Подразделение = Результат.Подразделение;
				Попытка 
					Набор.Записать();
				Исключение
					Возврат;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
		//Сотрудник
		Запрос.Текст = "ВЫБРАТЬ
		|	ОбъектыВРаботеОстатки.Объект,
		|	ОбъектыВРаботеОстатки.Сотрудник,
		|	ОбъектыВРаботеСотрудника.Объект КАК ОбъектРС,
		|	ОбъектыВРаботеСотрудника.Сотрудник КАК СотрудникРС
		|ИЗ
		|	РегистрНакопления.ОбъектыВРаботе.Остатки(, Сотрудник <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК ОбъектыВРаботеОстатки
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыВРаботеСотрудника КАК ОбъектыВРаботеСотрудника
		|		ПО ОбъектыВРаботеОстатки.Объект = ОбъектыВРаботеСотрудника.Объект
		|			И ОбъектыВРаботеОстатки.Сотрудник = ОбъектыВРаботеСотрудника.Сотрудник
		|ГДЕ
		|	(ОбъектыВРаботеСотрудника.Объект ЕСТЬ NULL 
		|			ИЛИ ОбъектыВРаботеОстатки.Объект ЕСТЬ NULL )"; 
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Результат.Объект) Тогда // = Null Тогда //Надо удалить из РС
				Набор = РегистрыСведений.ОбъектыВРаботеСотрудника.СоздатьМенеджерЗаписи();
				Набор.Объект = Результат.ОбъектРС;
				Набор.Сотрудник = Результат.СотрудникРС;
				Набор.Прочитать();
				Попытка 
					Набор.Удалить();
				Исключение
					Возврат;
				КонецПопытки;
				
			Иначе //Надо добавить в РС
				Набор = РегистрыСведений.ОбъектыВРаботеСотрудника.СоздатьМенеджерЗаписи();
				Набор.Объект = Результат.Объект;
				Набор.Сотрудник = Результат.Сотрудник;
				Попытка 
					Набор.Записать();
				Исключение
					Возврат;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		К = Константы.СинхронизацияДанныхЗапущена.Получить();
	КонецЦикла;	
	//-------------------------------------
	////Организации
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//					  |	ОбъектыВРаботеОрганизации.Объект,
	//					  |	ОбъектыВРаботеОрганизации.Организация
	//					  |ПОМЕСТИТЬ РС
	//					  |ИЗ
	//					  |	РегистрСведений.ОбъектыВРаботеОрганизации КАК ОбъектыВРаботеОрганизации
	//					  |ГДЕ
	//					  |	ОбъектыВРаботеОрганизации.Объект В(&МассивОбъектов)
	//					  |;
	//					  |
	//					  |////////////////////////////////////////////////////////////////////////////////
	//					  |ВЫБРАТЬ
	//					  |	ОбъектыВРаботеОстатки.Объект,
	//					  |	ОбъектыВРаботеОстатки.Организация,
	//					  |	РС.Организация КАК ОрганизацияРС,
	//					  |	РС.Объект КАК ОбъектРС
	//					  |ИЗ
	//					  |	РегистрНакопления.ОбъектыВРаботе.Остатки(
	//					  |			,
	//					  |			Объект В (&МассивОбъектов)
	//					  |				И Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	//					  |				И Сотрудник = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК ОбъектыВРаботеОстатки
	//					  |		ПОЛНОЕ СОЕДИНЕНИЕ РС КАК РС
	//					  |		ПО ОбъектыВРаботеОстатки.Объект = РС.Объект
	//					  |			И ОбъектыВРаботеОстатки.Организация = РС.Организация
	//					  |ГДЕ
	//					  |	(РС.Объект ЕСТЬ NULL 
	//					  |			ИЛИ ОбъектыВРаботеОстатки.Объект ЕСТЬ NULL )"); 

	//Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);					  
	//Результат = Запрос.Выполнить().Выбрать();
	//Пока Результат.Следующий() Цикл
	//	Если Не ЗначениеЗаполнено(Результат.Объект) Тогда // = Null Тогда //Надо удалить из РС
	//		Набор = РегистрыСведений.ОбъектыВРаботеОрганизации.СоздатьМенеджерЗаписи();
	//		Набор.Объект = Результат.ОбъектРС;
	//		Набор.Организация = Результат.ОрганизацияРС;
	//		Набор.Прочитать();
	//		Попытка
	//			Набор.Удалить();
	//		Исключение
	//			РезультатФункции = Ложь;
	//			Возврат РезультатФункции;
	//		КонецПопытки;	
	//			
	//	Иначе //Надо добавить в РС
	//		Набор = РегистрыСведений.ОбъектыВРаботеОрганизации.СоздатьМенеджерЗаписи();
	//		Набор.Объект = Результат.Объект;
	//		Набор.Организация = Результат.Организация;
	//		Попытка 
	//			Набор.Записать();
	//		Исключение
	//			РезультатФункции = Ложь;
	//			Возврат РезультатФункции;
	//		КонецПопытки;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//// Подразделение
	//Запрос.Текст = 
	//						"ВЫБРАТЬ
	//						|	ОбъектыВРаботеПодразделения.Объект,
	//						|	ОбъектыВРаботеПодразделения.Подразделение
	//						|ПОМЕСТИТЬ РС
	//						|ИЗ
	//						|	РегистрСведений.ОбъектыВРаботеПодразделения КАК ОбъектыВРаботеПодразделения
	//						|ГДЕ
	//						|	ОбъектыВРаботеПодразделения.Объект В(&МассивОбъектов)
	//						|;
	//						|
	//						|////////////////////////////////////////////////////////////////////////////////
	//						|ВЫБРАТЬ
	//						|	ОбъектыВРаботеОстатки.Объект,
	//						|	ОбъектыВРаботеОстатки.Подразделение,
	//						|	РС.Подразделение КАК ПодразделениеРС,
	//						|	РС.Объект КАК ОбъектРС
	//						|ИЗ
	//						|	РегистрНакопления.ОбъектыВРаботе.Остатки(
	//						|			,
	//						|			Объект В (&МассивОбъектов)
	//						|				И Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	//						|				И Сотрудник = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК ОбъектыВРаботеОстатки
	//						|		ПОЛНОЕ СОЕДИНЕНИЕ РС КАК РС
	//						|		ПО ОбъектыВРаботеОстатки.Объект = РС.Объект
	//						|			И ОбъектыВРаботеОстатки.Подразделение = РС.Подразделение
	//						|ГДЕ
	//						|	(РС.Объект ЕСТЬ NULL 
	//						|			ИЛИ ОбъектыВРаботеОстатки.Объект ЕСТЬ NULL )"; 

	//
	//Результат = Запрос.Выполнить().Выбрать();
	//Пока Результат.Следующий() Цикл
	//	Если Не ЗначениеЗаполнено(Результат.Объект) Тогда // = Null Тогда //Надо удалить из РС
	//		Набор = РегистрыСведений.ОбъектыВРаботеПодразделения.СоздатьМенеджерЗаписи();
	//		Набор.Объект = Результат.ОбъектРС;
	//		Набор.Подразделение = Результат.ПодразделениеРС;
	//		Набор.Прочитать();
	//		Попытка
	//			Набор.Удалить();
	//		Исключение
	//			РезультатФункции = Ложь;
	//		КонецПопытки;	
	//			
	//	Иначе //Надо добавить в РС
	//		Набор = РегистрыСведений.ОбъектыВРаботеПодразделения.СоздатьМенеджерЗаписи();
	//		Набор.Объект = Результат.Объект;
	//		Набор.Подразделение = Результат.Подразделение;
	//		Попытка 
	//			Набор.Записать();
	//		Исключение
	//			РезультатФункции = Ложь;
	//			Возврат РезультатФункции;
	//		КонецПопытки;
	//	КонецЕсли;
	//КонецЦикла;
	//
	////Сотрудник
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ОбъектыВРаботеСотрудника.Объект,
	//	|	ОбъектыВРаботеСотрудника.Сотрудник
	//	|ПОМЕСТИТЬ РС
	//	|ИЗ
	//	|	РегистрСведений.ОбъектыВРаботеСотрудника КАК ОбъектыВРаботеСотрудника
	//	|ГДЕ
	//	|	ОбъектыВРаботеСотрудника.Объект В(&МассивОбъектов)
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ОбъектыВРаботеОстатки.Объект,
	//	|	ОбъектыВРаботеОстатки.Сотрудник,
	//	|	РС.Сотрудник КАК СотрудникРС,
	//	|	РС.Объект КАК ОбъектРС
	//	|ИЗ
	//	|	РегистрНакопления.ОбъектыВРаботе.Остатки(
	//	|			,
	//	|			Объект В (&МассивОбъектов)
	//	|				И Сотрудник <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК ОбъектыВРаботеОстатки
	//	|		ПОЛНОЕ СОЕДИНЕНИЕ РС КАК РС
	//	|		ПО ОбъектыВРаботеОстатки.Объект = РС.Объект
	//	|			И ОбъектыВРаботеОстатки.Сотрудник = РС.Сотрудник
	//	|ГДЕ
	//	|	(РС.Объект ЕСТЬ NULL 
	//	|			ИЛИ ОбъектыВРаботеОстатки.Объект ЕСТЬ NULL )"; 


	//			   
	//Результат = Запрос.Выполнить().Выбрать();
	//Пока Результат.Следующий() Цикл
	//	Если Не ЗначениеЗаполнено(Результат.Объект) Тогда // = Null Тогда //Надо удалить из РС
	//		Набор = РегистрыСведений.ОбъектыВРаботеСотрудника.СоздатьМенеджерЗаписи();
	//		Набор.Объект = Результат.ОбъектРС;
	//		Набор.Сотрудник = Результат.СотрудникРС;
	//		Набор.Прочитать();
	//		Попытка
	//			Набор.Удалить();
	//		Исключение
	//			РезультатФункции = Ложь;
	//			Возврат РезультатФункции;
	//		КонецПопытки;	
	//			
	//	Иначе //Надо добавить в РС
	//		Набор = РегистрыСведений.ОбъектыВРаботеСотрудника.СоздатьМенеджерЗаписи();
	//		Набор.Объект = Результат.Объект;
	//		Набор.Сотрудник = Результат.Сотрудник;
	//		Попытка 
	//			Набор.Записать();
	//		Исключение
	//			РезультатФункции = Ложь;
	//			Возврат РезультатФункции;
	//		КонецПопытки;
	//	КонецЕсли;
	//КонецЦикла;
	//Возврат РезультатФункции;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеКонстанты(Константа) Экспорт
	Возврат Вычислить("Константы." + Константа + ".Получить()");
КонецФункции

&НаСервере
Процедура ОчиститьТабличныйДокумент(ТаблДок) Экспорт
	ТаблДок.Очистить();
КонецПроцедуры

// Преобразует строку в допустимое наименование колонки таблицы значений, заменяя недопустимые
// символы на код символа ограниченного символом подчеркивания.
//
// Параметры:
//  Строка - Строка - Строка для преобразования.
// 
// Возвращаемое значение:
//  Строка - Строка, содержащая только допустимые символы для наименования колонок таблицы значений.
//
Функция ПреобразоватьСтрокуВДопустимоеНаименованиеКолонки(Строка) Экспорт
	
	НедопустимыеСимволы = ":;!@#$%^&-~`'.,?{}[]+=*/|\ ()_""";
	Результат = "";
	Для Индекс = 1 По СтрДлина(Строка) Цикл
		Символ =  Сред(Строка, Индекс, 1);
		Если СтрНайти(НедопустимыеСимволы, Символ) > 0 Тогда
			Результат = Результат + "_" + КодСимвола(Символ) + "_";
		Иначе
			Результат = Результат + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

//Записывает или перезаписывает найденный допреквизит
&НаСервере
Процедура ЗаписатьЗначениеСвойства(Объект, КодСвойства, Значение) Экспорт
	СсылкаДопРС = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоКоду(
	Формат(КодСвойства, "ЧЦ=9; ЧН=; ЧВН=; ЧГ="));
	ОбъектОбъект = Объект.ПолучитьОбъект();
	Если СсылкаДопРС.Пустая() Тогда
		Сообщить ("Такого реквизита или сведения не существует!");
	Иначе	
		Если СсылкаДопРС.ЭтоДополнительноеСведение Тогда
			НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Объект);
			НаборЗаписей.Отбор.Свойство.Установить(СсылкаДопРС);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				Запись = НаборЗаписей.Добавить();
				Запись.Объект = Объект;
				Запись.Свойство = СсылкаДопРС;
				Запись.Значение = Значение;
			Иначе
				НаборЗаписей[0].Значение = Значение;
			КонецЕсли;
			НаборЗаписей.Записать(Истина);	
		Иначе
			ДопРеквизит = ОбъектОбъект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", СсылкаДопРС));
			Если ДопРеквизит.Количество() = 0 Тогда
				НовыйДопРеквизит = ОбъектОбъект.ДополнительныеРеквизиты.Добавить();
				НовыйДопРеквизит.Свойство = СсылкаДопРС;
				НовыйДопРеквизит.Значение = Значение;
			Иначе
				ДопРеквизит[0].Значение = Значение;
			КонецЕсли;
			ОбъектОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверитьТипФайлаОбъекта(Объект, КодТипаФайла) Экспорт
	ТипФайла = Справочники.ТипыПрикрепляемыхФайлов.НайтиПоКоду(строка(КодТипаФайла),Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрикрепляемыеФайлы.Объект КАК Объект,
		|	ПрикрепляемыеФайлы.ТипФайла КАК ТипФайла
		|ИЗ
		|	РегистрСведений.ПрикрепляемыеФайлы КАК ПрикрепляемыеФайлы
		|ГДЕ
		|	ПрикрепляемыеФайлы.ТипФайла = &ТипФайла
		|	И ПрикрепляемыеФайлы.Объект = &Объект
		|	И ПрикрепляемыеФайлы.Регистратор.РегистраторКорреспонденции = ЗНАЧЕНИЕ(Справочник.Исходящаякорреспонденция.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("ТипФайла", ТипФайла);	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		Есть = Истина;
	Иначе 
		Есть =  Ложь;
	КонецЕсли;	
	Возврат Есть;
КонецФункции

// Функция преобразует ТаблицуЗначений в Массив из структур.
//
Функция ПреобразоватьТаблицуЗначенийВМассив(тзДанные) Экспорт
    
    мсДанные = Новый Массив;
        
    // Запишем в массив
    Для Каждого СтрокаТЗ Из тзДанные Цикл
        
        стСтрокаТаблицы = Новый Структура;
        Для Каждого ИмяКолонки Из тзДанные.Колонки Цикл
            стСтрокаТаблицы.Вставить(ИмяКолонки.Имя, СтрокаТЗ[ИмяКолонки.Имя]);
        КонецЦикла;
        
        мсДанные.Добавить(стСтрокаТаблицы);
        
    КонецЦикла;
    
    Возврат мсДанные;
    
КонецФункции // ПреобразоватьТаблицуЗначенийВМассив()

// Функция преобразует Массив из структур в ТаблицуЗначений.
//
Функция ПреобразоватьМассивВТаблицуЗначений(мсДанные) Экспорт
    
    тзДанные = Новый ТаблицаЗначений;
    
    Для Каждого ЭлементМассива Из мсДанные Цикл
        // Рисуем колонки для таблицы
        Если тзДанные.Колонки.Количество() = 0 Тогда
            Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
                тзДанные.Колонки.Добавить(ЗначениеСтруктуры.Ключ);
            КонецЦикла;
        КонецЕсли;
        
        // Добавляем данные в таблицу
        НоваяСтрока = тзДанные.Добавить();
        Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
            НоваяСтрока[ЗначениеСтруктуры.Ключ] = ЗначениеСтруктуры.Значение;
        КонецЦикла;
    КонецЦикла;
    
    Возврат тзДанные;
    
КонецФункции // ПреобразоватьМассивВТаблицуЗначений()

Функция ТипизированнаяТаблицаЗначений(Таблица) Экспорт
    Результат = Новый ТаблицаЗначений;
    Для Каждого Колонка Из Таблица.Колонки Цикл
        ИмяКолонки = Колонка.Имя;
        СвернутаяТаблица = Таблица.Скопировать(, ИмяКолонки);
        СвернутаяТаблица.Свернуть(ИмяКолонки);
        МассивТипов = Новый Массив;
        Для Каждого СтрокаСвернутойТаблицы из СвернутаяТаблица Цикл
            ТипЗначения = ТипЗнч(СтрокаСвернутойТаблицы[ИмяКолонки]);
            Если МассивТипов.Найти(ТипЗначения) = Неопределено Тогда
                МассивТипов.Добавить(ТипЗначения);
            КонецЕсли;
        КонецЦикла;
        Если МассивТипов.Количество() = 1 Тогда
            //Меры по предотвращению ошибки "Тип не может быть выбран в запросе"
            //для колонок заполненных исключительно значениями типа Тип("Неопределено")
            Если МассивТипов[0] = Тип("Неопределено") Тогда
                МассивТипов[0] = Тип("Строка");//Не уверен
            КонецЕсли;
        КонецЕсли;
        Результат.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов(МассивТипов), Колонка.Заголовок, Колонка.Ширина);
        ЗагрузитьКолонку(Результат, Таблица.ВыгрузитьКолонку(ИмяКолонки), ИмяКолонки, Ложь);
    КонецЦикла;
    Возврат Результат;
КонецФункции

Процедура ЗагрузитьКолонку(Таблица, МассивЗначений, Колонка, Очищать = Истина) Экспорт
    Если Очищать Тогда
        Таблица.Очистить();
    КонецЕсли;


    МаксимальныйИндексТаблицы = Таблица.Количество() - 1;
    МаксимальныйИндексМассива = МассивЗначений.Количество() - 1;
    
    Для ИндексМассива = 0 по МаксимальныйИндексМассива Цикл
        Если ИндексМассива > МаксимальныйИндексТаблицы Тогда
            Строка = Таблица.Добавить();
        Иначе
            Строка = Таблица[ИндексМассива];
        КонецЕсли;
        Строка[Колонка] = МассивЗначений[ИндексМассива];
    КонецЦикла;
    
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстЗапросаПоискаФайловПоШаблону() Экспорт
	Текст = "ВЫБРАТЬ
	|	ПрикрепляемыеФайлы.Регистратор КАК Регистратор,
	|	ПрикрепляемыеФайлы.НомерСтроки КАК НомерСтроки,
	|	ПрикрепляемыеФайлы.Объект КАК Объект,
	|	ПрикрепляемыеФайлы.ТипФайла КАК ТипФайла,
	|	ПрикрепляемыеФайлы.ИмяФайла КАК ИмяФайла,
	|	ПрикрепляемыеФайлы.Период КАК Период,
	|	ПрикрепляемыеФайлы.РазмерФайла КАК РазмерФайла,
	|	ПрикрепляемыеФайлы.Регистратор.РегистраторКорреспонденции КАК РегистраторРегистраторКорреспонденции,
	|	ПрикрепляемыеФайлы.ТипФайла.ПовторнаяРегистрация КАК ТипФайлаПовторнаяРегистрация
	|ПОМЕСТИТЬ СписокФайлов
	|ИЗ
	|	РегистрСведений.ПрикрепляемыеФайлы КАК ПрикрепляемыеФайлы
	|ГДЕ
	|	ПрикрепляемыеФайлы.ТипФайла.АктуаленПоследний = ЛОЖЬ
	|	И ПрикрепляемыеФайлы.Объект = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПрикрепляемыеФайлыСрезПоследних.Регистратор,
	|	ПрикрепляемыеФайлыСрезПоследних.НомерСтроки,
	|	ПрикрепляемыеФайлыСрезПоследних.Объект,
	|	ПрикрепляемыеФайлыСрезПоследних.ТипФайла,
	|	ПрикрепляемыеФайлыСрезПоследних.ИмяФайла,
	|	ПрикрепляемыеФайлыСрезПоследних.Период,
	|	ПрикрепляемыеФайлыСрезПоследних.РазмерФайла,
	|	ПрикрепляемыеФайлыСрезПоследних.Регистратор.РегистраторКорреспонденции,
	|	ПрикрепляемыеФайлыСрезПоследних.ТипФайла.ПовторнаяРегистрация
	|ИЗ
	|	РегистрСведений.ПрикрепляемыеФайлы.СрезПоследних КАК ПрикрепляемыеФайлыСрезПоследних
	|ГДЕ
	|	ПрикрепляемыеФайлыСрезПоследних.ТипФайла.АктуаленПоследний = ИСТИНА
	|	И ПрикрепляемыеФайлыСрезПоследних.Объект = &Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокФайлов.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВсеРегистраторы
	|ИЗ
	|	СписокФайлов КАК СписокФайлов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокФайлов.Регистратор КАК Регистратор,
	|	СУММА(1) КАК Количество
	|ПОМЕСТИТЬ Регистраторы
	|ИЗ
	|	СписокФайлов КАК СписокФайлов
	|ГДЕ
	|	СписокФайлов.ТипФайлаПовторнаяРегистрация = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокФайлов.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеРегистраторы.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ПравильныеРегистраторы
	|ИЗ
	|	ВсеРегистраторы КАК ВсеРегистраторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Регистраторы КАК Регистраторы
	|		ПО ВсеРегистраторы.Регистратор = Регистраторы.Регистратор
	|ГДЕ
	|	(ВсеРегистраторы.Регистратор.РегистраторКорреспонденции.Ссылка ЕСТЬ NULL
	|			ИЛИ НЕ ВсеРегистраторы.Регистратор.РегистраторКорреспонденции.Ссылка ЕСТЬ NULL
	|				И Регистраторы.Количество ЕСТЬ NULL)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокФайлов.Регистратор КАК Регистратор,
	|	СписокФайлов.НомерСтроки КАК НомерСтрокиРегистратор,
	|	СписокФайлов.Объект КАК Объект,
	|	СписокФайлов.ТипФайла КАК ТипФайла,
	|	СписокФайлов.ИмяФайла КАК ИмяФайла,
	|	СписокФайлов.Период КАК Период,
	|	СписокФайлов.РазмерФайла КАК РазмерФайла,
	|	СписокФайлов.ТипФайлаПовторнаяРегистрация КАК ТипФайлаПовторнаяРегистрация
	|ИЗ
	|	СписокФайлов КАК СписокФайлов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПравильныеРегистраторы КАК ПравильныеРегистраторы
	|		ПО СписокФайлов.Регистратор = ПравильныеРегистраторы.Регистратор
	|ГДЕ
	|	СписокФайлов.ТипФайла В(&МассивТиповФайлов)";
	Возврат Текст;
	
	
КонецФункции

&НаСервере
Функция ПоискТиповФайлов(ПечФорма) Экспорт
	СписокТиповФайлов = Новый Массив;
	ТЧШаблоновиКомплектов = ПечФорма.ШаблоныПечатныхФорм;
	Для каждого стр из ТЧШаблоновиКомплектов Цикл
		Если ТипЗнч(стр.ШаблонПечатнойФормы) = Тип("СправочникСсылка.КомплектыФайловДляПечати") Тогда
			Для каждого ТипФ из стр.ШаблонПечатнойФормы.ТипыФайлов Цикл
				СписокТиповФайлов.Добавить(ТипФ.ТипФайла);
			КонецЦикла;
		иначе
			СписокТиповФайлов.Добавить(Стр.ШаблонПечатнойФормы.ТипПрикрепляемогоФайла);
		КонецЕсли;	
	КонецЦикла;	
	Возврат СписокТиповФайлов;
КонецФункции

//НБКИ - вычисление UUID по гост 

  
// Функция генерирует UUID по варианту 1 (на основании MAC-адреса и текущего времени)
//
// Параметры:
//  МеткаВремени  - Дата - время UTC
//  АдресСетевойКарты  - Строка - MAC-адрес сетевой карты формата "XX:XX:XX:XX:XX:XX"
//
// Возвращаемое значение:
//   Строка   - уникальный идентификатор в формате "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"
//
Функция СформироватьUUIDver1(МеткаВремени, АдресСетевойКарты) Экспорт 
	
	ГЧ = Новый ГенераторСлучайныхЧисел;
	СлучайноеЧисло = ГЧ.СлучайноеЧисло(0, 16383); // Максимальное 14-битное число.

	ДатаГригорианскойРеформы = Дата("15821015");
	РазностьДатВСек = МеткаВремени - ДатаГригорианскойРеформы;
	НаносекундныхИнтервалов = РазностьДатВСек * 1000 * 10000;
	
	БДДН = Новый БуферДвоичныхДанных(8, ПорядокБайтов.BigEndian);
	БДДН.ЗаписатьЦелое64(0, НаносекундныхИнтервалов);
	БДДН.Установить(0, УстановитьБит(БДДН[0], 4, Истина));
	
	БДДС = Новый БуферДвоичныхДанных(2, ПорядокБайтов.BigEndian);
	БДДС.ЗаписатьЦелое16(0, СлучайноеЧисло);
	БДДС.Установить(0, УстановитьБит(БДДС[0], 7, Истина));
	
	TimeLow             = ПолучитьHexСтрокуИзБуфераДвоичныхДанных(БДДН.ПолучитьСрез(4));
	TimeMid             = ПолучитьHexСтрокуИзБуфераДвоичныхДанных(БДДН.ПолучитьСрез(2, 2));
	VersionAndTimeHigh  = ПолучитьHexСтрокуИзБуфераДвоичныхДанных(БДДН.ПолучитьСрез(0, 2));
	
	VariantAndClockSeqHigh = ПолучитьHexСтрокуИзБуфераДвоичныхДанных(БДДС.ПолучитьСрез(0, 1));
	ClockSeqLow            = ПолучитьHexСтрокуИзБуфераДвоичныхДанных(БДДС.ПолучитьСрез(1));
	
	Node = СтрЗаменить(АдресСетевойКарты, ":", "");
	
	Возврат НРег(TimeLow + "-" + TimeMid + "-" + VersionAndTimeHigh + "-" + VariantAndClockSeqHigh + ClockSeqLow + "-" + Node);

КонецФункции // СформироватьUUIDver1()

Функция СгенерироватьКонтрольныйСимвол(УУИД) Экспорт
	i =1;
	p = 0;
	s = 0;
	c = "";
	
	Для p = 1 по СтрДлина(УУИД) Цикл
		c = Сред(УУИД,p,1);
		c = ПреобразоватьВDec(c);
		s = s + (c*i);
		i = i + 1;
		Если i > 10  Тогда
			i = 1;
		КонецЕсли;	
	КонецЦикла;	
	
	Деление = s%16;
	StoHex = DecToAny(Деление,16);
	
	Возврат Нрег(Строка(StoHex)); 
	
КонецФункции

Функция ПреобразоватьВDec(Символ) Экспорт
	Если СтрНайти("abcdef",Символ) = 0 Тогда
		Возврат Число(Символ);
	КонецЕсли;
	
	Если Символ = "a" Тогда
		Возврат 10;
	ИначеЕсли Символ = "b" Тогда
		Возврат 11;
	ИначеЕсли Символ = "c" Тогда
		Возврат 12;
	ИначеЕсли Символ = "d" Тогда
		Возврат 13;
	ИначеЕсли Символ = "e" Тогда
		Возврат 14;
	ИначеЕсли Символ = "f" Тогда
		Возврат 15;
	КонецЕсли;	
	
КонецФункции

Функция DecToAny(Знач тЗначение, тОснование) Экспорт
	тРезультат = "";
	
	Если тЗначение = 0 Тогда
		возврат "0";
	КонецЕсли;	
	
	Пока тЗначение > 0 Цикл
		тРезультат = Сред("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", тЗначение%тОснование + 1, 1) + тРезультат;
		тЗначение = Цел(тЗначение/тОснование) ;
	КонецЦикла;
	
	Возврат тРезультат;
КонецФункции


Функция УдалитьПовторяющиесяЭлементыМассива(Массив) Экспорт 
	
	ТекущийИндекс = 0; 
	
	
	ВсегоЭлементов = Массив.Количество(); 
	
	
	Пока ТекущийИндекс < ВсегоЭлементов Цикл 
		
		
		Индекс2 = ТекущийИндекс + 1; 
		
		
		Пока Индекс2 < ВсегоЭлементов Цикл 
			
			
			Если Массив[Индекс2] = Массив[ТекущийИндекс] Тогда 
				
				
				Массив.Удалить(Индекс2); 
				
				
				ВсегоЭлементов = ВсегоЭлементов - 1; 
				
				
			Иначе 
				
				
				Индекс2 = Индекс2 + 1; 
				
				
			КонецЕсли; 
			
			
		КонецЦикла; 
		
		
		ТекущийИндекс = ТекущийИндекс + 1; 
		
		
	КонецЦикла; 
	Возврат Массив; 
	
КонецФункции 

Функция ОбъединитьТЗЗапросом(ТЗ1, ТЗ2, КолонкаПоиска, СворачиватьТЗ = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТЗ1) Тогда
		Возврат ТЗ2;
	ИначеЕсли НЕ ЗначениеЗаполнено(ТЗ2) Тогда
		Возврат ТЗ1;
	КонецЕсли;
	
	Если СворачиватьТЗ Тогда
		СписокКолонок = "";
		КолКолонок = 0;
		Для Каждого КолонкаТЗ Из ТЗ1.Колонки Цикл
			КолКолонок = КолКолонок + 1;
			СписокКолонок = СписокКолонок + КолонкаТЗ.Имя+?(КолКолонок = ТЗ1.Колонки.Количество(),"",",");
		КонецЦикла;
		ТЗ1.Свернуть(СписокКолонок);
		СписокКолонок = "";
		КолКолонок = 0;
		Для Каждого КолонкаТЗ Из ТЗ2.Колонки Цикл
			КолКолонок = КолКолонок + 1;
			СписокКолонок = СписокКолонок + КолонкаТЗ.Имя+?(КолКолонок = ТЗ2.Колонки.Количество(),"",",");
		КонецЦикла;
		ТЗ2.Свернуть(СписокКолонок);
	КонецЕсли;
	
	ЗапросТекст = "ВЫБРАТЬ"+Символы.ПС;
	КолКолонок = 0;
	Для Каждого КолонкаТЗ Из ТЗ1.Колонки Цикл
		КолКолонок = КолКолонок + 1;
		ЗапросТекст = ЗапросТекст + " ТЗ1."+КолонкаТЗ.Имя+?(КолКолонок = ТЗ1.Колонки.Количество(),"",",")+Символы.ПС;
	КонецЦикла;
	ЗапросТекст = ЗапросТекст + 
	"ПОМЕСТИТЬ ТЗ1
	|ИЗ
	|    &ТЗ1 КАК ТЗ1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ"+Символы.ПС;
	КолКолонок = 0;
	Для Каждого КолонкаТЗ Из ТЗ2.Колонки Цикл
		КолКолонок = КолКолонок + 1;
		ЗапросТекст = ЗапросТекст + " ТЗ2."+КолонкаТЗ.Имя+?(КолКолонок = ТЗ2.Колонки.Количество(),"",",")+Символы.ПС;
	КонецЦикла;
	ЗапросТекст = ЗапросТекст + 
	"ПОМЕСТИТЬ ТЗ2
	|ИЗ
	|    &ТЗ2 КАК ТЗ2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ"+Символы.ПС;
	// колонки результирующей таблицы
	КолКолонок = 0;
	Для Каждого КолонкаТЗ Из ТЗ1.Колонки Цикл 
		КолКолонок = КолКолонок + 1;
		Если ТЗ2.Колонки.Найти(КолонкаТЗ.Имя) = Неопределено Тогда
			ЗапросТекст = ЗапросТекст + " ТЗ1."+КолонкаТЗ.Имя + ?(КолКолонок = ТЗ1.Колонки.Количество(), "", ","+Символы.ПС);
		Иначе
			ЗапросТекст = ЗапросТекст + " ЕСТЬNULL(ТЗ1."+КолонкаТЗ.Имя+", ТЗ2."+КолонкаТЗ.Имя+") КАК "+КолонкаТЗ.Имя + ?(КолКолонок = ТЗ1.Колонки.Количество(), "", ","+Символы.ПС);
		КонецЕсли;
	КонецЦикла;
	// уникальные колонки могут быть как ТЗ1 так и в ТЗ2, поэтому разницей количества колонок 2-х ТЗ не определить будем ли добавлять
	// поэтому перебираем все колонки ТЗ2 и ищем их в ТЗ1
	Для Каждого КолонкаТЗ Из ТЗ2.Колонки Цикл
		Если ТЗ1.Колонки.Найти(КолонкаТЗ.Имя) = Неопределено Тогда
			ЗапросТекст = ЗапросТекст + "," + Символы.ПС + " ТЗ2."+КолонкаТЗ.Имя;
		КонецЕсли;
	КонецЦикла;
	// ПОЛНОЕ - если нужны все записи по колонке поиска
	// ВНУТРЕННЕЕ - если нужны только записи присутствующие в ТЗ1 и ТЗ2 по колонке поиска 
	ЗапросТекст = ЗапросТекст + Символы.ПС +
	"ИЗ
	|    ТЗ1 КАК ТЗ1
	|        ПОЛНОЕ СОЕДИНЕНИЕ ТЗ2 КАК ТЗ2        
	|        ПО ТЗ1.КолонкаПоиска = ТЗ2.КолонкаПоиска
	|";
	
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "КолонкаПоиска", КолонкаПоиска);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ЗапросТекст;
	Запрос.УстановитьПараметр("ТЗ1", ТЗ1);
	Запрос.УстановитьПараметр("ТЗ2", ТЗ2);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции 

//Функции для работы с задолженностью

Функция ВычислитьЗадолженностьНаДату(ОбъектУчета,ДатаОстатков) Экспорт
	Если Не ЗначениеЗаполнено(ДатаОстатков) Тогда
		ДатаОстатков = ТекущаяДата();
	КонецЕсли;
	
	ВариантУчета = ОбъектыСервер.ОпределитьВариантУчетаЗадолженности2(ОбъектУчета,ДатаОстатков);
		
	
	ТЗ_Остатки = Неопределено;
	
	Если ВариантУчета = Перечисления.СтадииЗадолженности.СтарыйУчет Тогда	
		ТЗ_Остатки = ОбъектыСервер.ЗадолженностьПоОбъектамОстатки_ПолучитьОстаткиЗадолженности(ОбъектУчета,ДатаОстатков);		
	ИначеЕсли ВариантУчета = Перечисления.СтадииЗадолженности.Внесудебная Тогда
		// ЗадолженностьПоОбъектамВнесудебная
		ТЗ_Остатки = ОбъектыСервер.ЗадолженностьПоОбъектамВнесудебная_ПолучитьОстаткиЗадолженности(ОбъектУчета,ДатаОстатков);		
	ИначеЕсли ВариантУчета = Перечисления.СтадииЗадолженности.Расчетная Тогда
		//Расчеты по договорам
		ТЗ_Остатки = ОбъектыСервер.РасчетыПоДоговорам_ПолучитьОстаткиЗадолженности(ОбъектУчета,ДатаОстатков);
	ИначеЕсли ВариантУчета = Перечисления.СтадииЗадолженности.Судебная Тогда
		//ЗадолженностьпоСудебнымРешениям
		ТЗ_Остатки = ОбъектыСервер.ЗадолженностьПоСудебнымРешениям_ПолучитьОстаткиЗадолженности(ОбъектУчета,ДатаОстатков);
	КонецЕсли;	
	
	Возврат ТЗ_Остатки;
	
КонецФункции 

Функция ОпределитьВариантУчетаЗадолженности(Об, ДатаПлатежа) Экспорт
	ВариантУчета = Неопределено;
	ЕстьРасчеты = Константы.РасчетНачислений.Получить(); 
	ЕстьСудебныйБлок = Константы.ИспользоватьСудебныйБлок.Получить();
	Если НЕ ЕстьРасчеты и Не ЕстьСудебныйБлок Тогда
		ВариантУчета = "Остатки";
		Возврат ВариантУчета;
	КонецЕсли;	
	
	Если ЕстьРасчеты и Не ЕстьСудебныйБлок Тогда
		ВариантУчета = "ДосудебкаМикроЗайм";
		Возврат ВариантУчета;
	КонецЕсли;	
	
	Если ЕстьРасчеты и ЕстьСудебныйБлок Тогда
		ВариантУчета = ПроверитьСтадиюОбъектаУчета(Об,ЕстьРасчеты,ДатаПлатежа);
		Возврат ВариантУчета; //Судебка  //ДосудебкаМикроЗайм
	КонецЕсли;	
	
	Если НЕ ЕстьРасчеты и ЕстьСудебныйБлок Тогда
		ВариантУчета = ПроверитьСтадиюОбъектаУчета(Об,ЕстьРасчеты,ДатаПлатежа);
		Возврат ВариантУчета; //Судебка //Досудебка
	КонецЕсли;	
	
	Возврат ВариантУчета;	
КонецФункции

Функция ПроверитьСтадиюОбъектаУчета(ОбъектУчета,Расчеты,ДатаПлатежа) Экспорт
	ВариантУчета = Неопределено;
	
	ЕстьДело = ПолучитьСудебноеДело(ОбъектУчета,ДатаПлатежа);
	Если ЕстьДело Тогда
		ВариантУчета = "Судебка";
	Иначе
		ВариантУчета =?(Расчеты,"ДосудебкаМикроЗайм","Досудебка");
	КонецЕсли;	

	Возврат ВариантУчета;	
КонецФункции

//Новые функции для работы с задолженностью

Функция ОпределитьВариантУчетаЗадолженности2(Об, ДатаПлатежа) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаПлатежа) Тогда
		ДатаПлатежа = ТекущаяДата();
	КонецЕсли;
	
	//ДатаПлатежа = ДатаПлатежа + 5;

	ВариантУчета = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадолженностьПоОбъектамОстатки.Объект КАК Объект,
		|	ЕСТЬNULL(ЗадолженностьПоОбъектамОстатки.СуммаДООстаток, 0) КАК СтарыйОстаток
		|ПОМЕСТИТЬ СтарыеОстатки
		|ИЗ
		|	РегистрНакопления.ЗадолженностьПоОбъектам.Остатки(&ДатаОстатков, Объект = &Об) КАК ЗадолженностьПоОбъектамОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыПоДоговорамОстатки.Займ КАК Займ,
		|	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ОсновнойДолгОстаток + РасчетыПоДоговорамОстатки.ПроцентыОстаток + РасчетыПоДоговорамОстатки.ПроцентыНачисленныеВПериодПросрочкиОстаток + РасчетыПоДоговорамОстатки.ШтрафыОстаток + РасчетыПоДоговорамОстатки.ПениОстаток, 0) КАК РасчетыОстаток
		|ПОМЕСТИТЬ Расчеты
		|ИЗ
		|	РегистрНакопления.РасчетыПоДоговорам.Остатки(&ДатаОстатков, Займ = &Об) КАК РасчетыПоДоговорамОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Займ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗадолженностьПоОбъектамВнесудебнаяОстатки.Объект КАК Объект,
		|	ЕСТЬNULL(ЗадолженностьПоОбъектамВнесудебнаяОстатки.СуммаДООстаток, 0) КАК ВнесудОстаток
		|ПОМЕСТИТЬ Внесудебка
		|ИЗ
		|	РегистрНакопления.ЗадолженностьПоОбъектамВнесудебная.Остатки(&ДатаОстатков, Объект = &Об) КАК ЗадолженностьПоОбъектамВнесудебнаяОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗадолженностьПоСудебнымРешениямОстатки.Займ КАК Займ,
		|	ЕСТЬNULL(ЗадолженностьПоСудебнымРешениямОстатки.СуммаОстаток, 0) КАК СудебкаОстаток
		|ПОМЕСТИТЬ Судебка
		|ИЗ
		|	РегистрНакопления.ЗадолженностьПоСудебнымРешениям.Остатки(&ДатаОстатков, Займ = &Об) КАК ЗадолженностьПоСудебнымРешениямОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Займ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъектыВРаботеОстатки.Объект КАК Объект,
		|	ЕСТЬNULL(СтарыеОстатки.СтарыйОстаток, 0) КАК СтарыйОстаток,
		|	ЕСТЬNULL(Расчеты.РасчетыОстаток, 0) КАК РасчетыОстаток,
		|	ЕСТЬNULL(Внесудебка.ВнесудОстаток, 0) КАК ВнесудОстаток,
		|	ЕСТЬNULL(Судебка.СудебкаОстаток, 0) КАК СудебкаОстаток
		|ИЗ
		|	РегистрНакопления.ОбъектыВРаботе.Остатки(, Объект = &Об) КАК ОбъектыВРаботеОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ СтарыеОстатки КАК СтарыеОстатки
		|		ПО ОбъектыВРаботеОстатки.Объект = СтарыеОстатки.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ Расчеты КАК Расчеты
		|		ПО ОбъектыВРаботеОстатки.Объект = Расчеты.Займ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Внесудебка КАК Внесудебка
		|		ПО ОбъектыВРаботеОстатки.Объект = Внесудебка.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ Судебка КАК Судебка
		|		ПО ОбъектыВРаботеОстатки.Объект = Судебка.Займ";
	
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаПлатежа);
	Запрос.УстановитьПараметр("Об", Об);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписи.СудебкаОстаток > 0 Тогда
			ВариантУчета = Перечисления.СтадииЗадолженности.Судебная;
		Иначе
			Если ВыборкаДетальныеЗаписи.ВнесудОстаток > 0 Тогда	
				ВариантУчета =?(ВыборкаДетальныеЗаписи.РасчетыОстаток > 0, Перечисления.СтадииЗадолженности.Расчетная,Перечисления.СтадииЗадолженности.Внесудебная);
			Иначе
				Если ВыборкаДетальныеЗаписи.РасчетыОстаток > 0 Тогда
					ВариантУчета = Перечисления.СтадииЗадолженности.Расчетная;
				Иначе
					Если ВыборкаДетальныеЗаписи.СтарыйОстаток > 0  Тогда
						ВариантУчета = Перечисления.СтадииЗадолженности.СтарыйУчет;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЦикла;

		
	Возврат ВариантУчета;	
КонецФункции



Функция ПолучитьСудебноеДело(ОбъектУчета,ДатаПлатежа) Экспорт
	
	ЕстьДело = Ложь;
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СудебноеДело.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ПроверкаНаПустоеРешение
		|ИЗ
		|	Документ.СудебноеДело КАК СудебноеДело
		|ГДЕ
		|	СудебноеДело.Проведен = ИСТИНА
		|	И СудебноеДело.ПометкаУдаления = ЛОЖЬ
		|	И СудебноеДело.Займ = &Займ
		|	И СудебноеДело.ВидИска = &ВидИска
		|	И СудебноеДело.ДатаВступленияВЗаконнуюСилу <> &ПустаяДата
		|	И СудебноеДело.Решение <> &ПустоеРешение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроверкаНаПустоеРешение.Ссылка КАК Ссылка
		|ИЗ
		|	ПроверкаНаПустоеРешение КАК ПроверкаНаПустоеРешение
		|ГДЕ
		|	ПроверкаНаПустоеРешение.Ссылка.ДатаВступленияВЗаконнуюСилу <= &ДатаВступленияВЗаконнуюСилу
		|	И ПроверкаНаПустоеРешение.Ссылка.Решение <> &Решение";
	
	Запрос.УстановитьПараметр("Займ", ОбъектУчета);
	Запрос.УстановитьПараметр("ВидИска", Перечисления.ВидыИска.ВзысканиеПросроченнойЗадолженности);
	Запрос.УстановитьПараметр("ДатаВступленияВЗаконнуюСилу", ДатаПлатежа); 
	Запрос.УстановитьПараметр("Решение", Перечисления.СтатусыСудебногоДела.Отказ);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1)); 
	Запрос.УстановитьПараметр("ПустоеРешение", Перечисления.СтатусыСудебногоДела.ПустаяСсылка());
	

	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ЕстьДело = Истина;
	КонецЕсли;
	
	Возврат ЕстьДело;
		
КонецФункции

Функция ЗадолженностьПоОбъектамОстатки_ПолучитьОстаткиЗадолженности(ОбъектУчета,ДатаОстатков) Экспорт
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадолженностьПоОбъектамОстатки.Объект КАК Объект,
		|	ЗадолженностьПоОбъектамОстатки.СуммаДООстаток КАК Сумма,
		|	ЗадолженностьПоОбъектамОстатки.ОсновнойДолгДООстаток КАК ОсновнойДолг,
		|	ЗадолженностьПоОбъектамОстатки.ПроцентыДООстаток КАК Проценты,
		|	ЗадолженностьПоОбъектамОстатки.ШтрафыДООстаток КАК Штрафы,
		|	ЗадолженностьПоОбъектамОстатки.ПениДООстаток КАК Пени,
		|	ЗадолженностьПоОбъектамОстатки.Составляющая1ДООстаток КАК Составляющая1,
		|	ЗадолженностьПоОбъектамОстатки.Составляющая2ДООстаток КАК Составляющая2,
		|	ЗадолженностьПоОбъектамОстатки.Составляющая3ДООстаток КАК Составляющая3,
		|	ЗадолженностьПоОбъектамОстатки.Составляющая4ДООстаток КАК Составляющая4,
		|	ЗадолженностьПоОбъектамОстатки.Составляющая5ДООстаток КАК Составляющая5,
		|	ЗадолженностьПоОбъектамОстатки.Составляющая6ДООстаток КАК Составляющая6,
		|	ЗадолженностьПоОбъектамОстатки.Составляющая7ДООстаток КАК Составляющая7,
		|	ЗадолженностьПоОбъектамОстатки.Составляющая8ДООстаток КАК Составляющая8
		|ИЗ
		|	РегистрНакопления.ЗадолженностьПоОбъектам.Остатки(&ТекДата, Объект = &ОбъектУчета) КАК ЗадолженностьПоОбъектамОстатки";
	
	Запрос.УстановитьПараметр("ОбъектУчета", ОбъектУчета);
	Запрос.УстановитьПараметр("ТекДата", ДатаОстатков);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ЗадолженностьПоОбъектамВнесудебная_ПолучитьОстаткиЗадолженности(ОбъектУчета,ДатаОстатков) Экспорт
			
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗадолженностьПоОбъектамВнесудебнаяОстатки.ОсновнойДолгРеглОстаток КАК ОсновнойДолг,
	                      |	ЗадолженностьПоОбъектамВнесудебнаяОстатки.ПроцентыРеглОстаток КАК Проценты,
	                      |	ЗадолженностьПоОбъектамВнесудебнаяОстатки.ШтрафыРеглОстаток КАК Штрафы,
	                      |	ЗадолженностьПоОбъектамВнесудебнаяОстатки.ПениРеглОстаток КАК Пени,
	                      |	-ЕСТЬNULL(ЗадолженностьПоОбъектамВнесудебнаяОстатки.Составляющая8РеглОстаток, 0) КАК Переплата,
	                      |	ЗадолженностьПоОбъектамВнесудебнаяОстатки.СуммаДООстаток КАК Сумма,
	                      |	ЗадолженностьПоОбъектамВнесудебнаяОстатки.Объект КАК Объект
	                      |ИЗ
	                      |	РегистрНакопления.ЗадолженностьПоОбъектамВнесудебная.Остатки(&ДатаОстатков, Объект = &ОбъектУчета) КАК ЗадолженностьПоОбъектамВнесудебнаяОстатки");
	
	Запрос.УстановитьПараметр("ОбъектУчета", ОбъектУчета);
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ЗадолженностьПоСудебнымРешениям_ПолучитьОстаткиЗадолженности(ОбъектУчета,ДатаОстатков) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗадолженностьПоСудебнымРешениямОстатки.Займ КАК Займ,
	                      |	ВЫБОР
	                      |		КОГДА ЗадолженностьПоСудебнымРешениямОстатки.ТипЗадолженности = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыЗадолженностиПоРешению.Госпошлина)
	                      |			ТОГДА ЗадолженностьПоСудебнымРешениямОстатки.СуммаОстаток
	                      |	КОНЕЦ КАК Госпошлина,
	                      |	ВЫБОР
	                      |		КОГДА ЗадолженностьПоСудебнымРешениямОстатки.ТипЗадолженности = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыЗадолженностиПоРешению.Проценты)
	                      |			ТОГДА ЗадолженностьПоСудебнымРешениямОстатки.СуммаОстаток
	                      |	КОНЕЦ КАК Проценты,
	                      |	ВЫБОР
	                      |		КОГДА ЗадолженностьПоСудебнымРешениямОстатки.ТипЗадолженности = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыЗадолженностиПоРешению.ОсновнойДолг)
	                      |			ТОГДА ЗадолженностьПоСудебнымРешениямОстатки.СуммаОстаток
	                      |	КОНЕЦ КАК ОсновнойДолг,
	                      |	ВЫБОР
	                      |		КОГДА ЗадолженностьПоСудебнымРешениямОстатки.ТипЗадолженности = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыЗадолженностиПоРешению.Пени)
	                      |			ТОГДА ЗадолженностьПоСудебнымРешениямОстатки.СуммаОстаток
	                      |	КОНЕЦ КАК Пени,
	                      |	ВЫБОР
	                      |		КОГДА ЗадолженностьПоСудебнымРешениямОстатки.ТипЗадолженности = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыЗадолженностиПоРешению.Штрафы)
	                      |			ТОГДА ЗадолженностьПоСудебнымРешениямОстатки.СуммаОстаток
	                      |	КОНЕЦ КАК Штрафы,
	                      |	ВЫБОР
	                      |		КОГДА ЗадолженностьПоСудебнымРешениямОстатки.ТипЗадолженности = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыЗадолженностиПоРешению.Переплата)
	                      |			ТОГДА ЗадолженностьПоСудебнымРешениямОстатки.СуммаОстаток
	                      |	КОНЕЦ КАК Переплата,
	                      |	ВЫБОР
	                      |		КОГДА ЗадолженностьПоСудебнымРешениямОстатки.ТипЗадолженности = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыЗадолженностиПоРешению.Сумма)
	                      |			ТОГДА ЗадолженностьПоСудебнымРешениямОстатки.СуммаОстаток
	                      |	КОНЕЦ КАК Сумма
	                      |ИЗ
	                      |	РегистрНакопления.ЗадолженностьПоСудебнымРешениям.Остатки(&ДатаОстатков, Займ = &ОбъектУчета) КАК ЗадолженностьПоСудебнымРешениямОстатки");
	Запрос.УстановитьПараметр("ОбъектУчета", ОбъектУчета);
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	РезультатЗапроса.Свернуть("Займ","Госпошлина,Проценты,ОсновнойДолг,Пени,Штрафы,Переплата,Сумма");
	
	Возврат РезультатЗапроса;
КонецФункции	

Функция РасчетыПоДоговорам_ПолучитьОстаткиЗадолженности(ОбъектУчета,ДатаОстатков) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РасчетыПоДоговорамОстатки.Займ КАК Займ,
	                      |	РасчетыПоДоговорамОстатки.ОсновнойДолгОстаток КАК ОсновнойДолгОстаток,
	                      |	РасчетыПоДоговорамОстатки.ПроцентыОстаток КАК ПроцентыОстаток,
	                      |	РасчетыПоДоговорамОстатки.ПроцентыНачисленныеВПериодПросрочкиОстаток КАК ПроцентыНачисленныеВПериодПросрочкиОстаток,
	                      |	РасчетыПоДоговорамОстатки.ШтрафыОстаток КАК ШтрафыОстаток,
	                      |	РасчетыПоДоговорамОстатки.ПениОстаток КАК ПениОстаток,
	                      |	РасчетыПоДоговорамОстатки.ОсновнойДолгГрафикОстаток КАК ОсновнойДолгГрафикОстаток,
	                      |	РасчетыПоДоговорамОстатки.ПроцентыГрафикОстаток КАК ПроцентыГрафикОстаток,
	                      |	РасчетыПоДоговорамОстатки.РасчетныйСчетОстаток КАК РасчетныйСчетОстаток,
	                      |	РасчетыПоДоговорамОстатки.ПроцентыНачисленияОстаток КАК ПроцентыНачисленияОстаток,
	                      |	РасчетыПоДоговорамОстатки.ШтрафыНачисленияОстаток КАК ШтрафыНачисленияОстаток,
	                      |	РасчетыПоДоговорамОстатки.ПениНачисленияОстаток КАК ПениНачисленияОстаток
	                      |ИЗ
	                      |	РегистрНакопления.РасчетыПоДоговорам.Остатки(&ДатаОстатков, Займ = &ОбъектУчета) КАК РасчетыПоДоговорамОстатки");
	Запрос.УстановитьПараметр("ОбъектУчета", ОбъектУчета);
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();	
	Возврат РезультатЗапроса;
КонецФункции	

//Функции и процедуры по работе с Записями в регистры накопления Задолженности
&НаСервере
Функция ОтборОбъектовПоРегистратору(Набор) Экспорт
	//КазанцевЯА , в документе Корректировка регистров он там отсутствует реквизит на который идет проверка
	//Документ Корректировка регистров является также регистратором данного регистра, но не должен подстраиваться под логику,а вносить коррективы из ТЧ 
	МетаданныеОбъекта = Набор.Отбор.Регистратор.Значение.Метаданные();
	МассивОбъектов = Новый Массив;
	Регистратор = Набор.Отбор.Регистратор.Значение;
	Если ТипЗнч(Регистратор)= тип("ДокументСсылка.СудебноеДело") или ТипЗнч(Регистратор)= тип("ДокументСсылка.ПоступлениеПлатежа") Тогда 
		МассивОбъектов.Добавить(Регистратор.Займ);
	ИначеЕсли МетаданныеОбъекта.Реквизиты.Найти("Объекты") <> Неопределено Тогда
		МассивОбъектов = Регистратор.Объекты.ВыгрузитьКолонку("Объект");
	КонецЕсли; 
	
	Возврат МассивОбъектов;
КонецФункции  


//Для обновления ИБ  Модуль ФССП

&НаСервере
Процедура ФССП_РеквизитДатаВозбуждения() Экспорт 	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФССП_ИсполнительноеПроизводство.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(ФССП_СостояниеИПСрезПоследних.ДатаВозбуждения, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаВозбуждения
		|ИЗ
		|	Справочник.ФССП_ИсполнительноеПроизводство КАК ФССП_ИсполнительноеПроизводство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФССП_СостояниеИП.СрезПоследних КАК ФССП_СостояниеИПСрезПоследних
		|		ПО (ФССП_СостояниеИПСрезПоследних.ИП = ФССП_ИсполнительноеПроизводство.Ссылка)
		|ГДЕ
		|	ФССП_ИсполнительноеПроизводство.ДатаВозбуждения = ДАТАВРЕМЯ(1, 1, 1)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ИПОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ИПОбъект.ДатаВозбуждения = ВыборкаДетальныеЗаписи.ДатаВозбуждения;
		ИПОбъект.Записать();
	КонецЦикла;
		
КонецПроцедуры      

&НаСервере
Процедура ФССП_ИсправитьДокументПредметыИП() Экспорт    
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФССП_ЗагрузкаИсполнительногоПроизводства.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ФССП_ЗагрузкаИсполнительногоПроизводства КАК ФССП_ЗагрузкаИсполнительногоПроизводства
		|ГДЕ
		|	ФССП_ЗагрузкаИсполнительногоПроизводства.ПометкаУдаления = &ПометкаУдаления
		|	И ФССП_ЗагрузкаИсполнительногоПроизводства.Проведен = &Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
	
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	Запрос.УстановитьПараметр("Проведен", Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		тчИсполнительныеПроизводства = ДокОбъект.тчИсполнительныеПроизводства;
		Для каждого СТР из тчИсполнительныеПроизводства Цикл 
			Предмет = Стр.subject;
			подстрокиПредмет = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Предмет, "руб.",Истина,Истина);
			МассивПредметов = Новый Массив;
			Для каждого строкаПредмет из подстрокиПредмет Цикл 
				стрПредмет = Новый Структура("Предмет, Сумма", "",0);
				бит_ФССП_ИнтеграцияФССП.ПолучитьСуммуИПредмет(стрПредмет.Предмет, стрПредмет.Сумма,строкаПредмет);
				МассивПредметов.Добавить(стрПредмет);
			КонецЦикла;	
			
			К = 1; 
			
			Для М  = 1 по 5 Цикл
				ИмяКолонкиПредмет = "Предмет" + Строка(М); 
				ИмяКолонкиСумма = "Сумма"+Строка(М); 
				стр[ИмяКолонкиПредмет] = "";
				стр[ИмяКолонкиСумма]  = "";  
			КонецЦикла;
			
			Для каждого Пред из МассивПредметов Цикл  
				спрПредмет = бит_ФССП_ИнтеграцияФССП.ПолучитьСправочникПредмет(Пред.Предмет);	
				ИмяКолонкиПредмет = "Предмет" + Строка(к); 
				ИмяКолонкиСумма = "Сумма"+Строка(к); 
				стр[ИмяКолонкиПредмет] = спрПредмет;
				стр[ИмяКолонкиСумма]  = Пред.Сумма;  
				К = К+1;
			КонецЦикла;   			
		КонецЦикла;
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;	
КонецПроцедуры     

&НаСервере
Функция ПолучитьЗначениеПВХ(ИмяПВХ,Значение) Экспорт
	Возврат Вычислить("ПланыВидовХарактеристик." + ИмяПВХ + "." + Значение);
КонецФункции

&НаКлиенте
Перем РезультатЗакрытияФормПараметровСвязи Экспорт;
&НаКлиенте
Перем ВидНазначения Экспорт;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗначениеОбъект = РеквизитФормыВЗначение("Объект");
	ЗначениеОбъект.ИнициализироватьОбъектыУчета();
	ЗначениеВРеквизитФормы(ЗначениеОбъект, "Объект");
	ЗагрузитьБазовыеНастройки();
	Объект.Организация = ПараметрыСеанса.ТекущийПользователь.Организация;
	Объект.Автор = ПараметрыСеанса.ТекущийПользователь;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьБазовыеНастройки()
	ОграничитьНастройкиСервер();	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуКНастройкамСоответствий(Имя, Назначение, ВидРеквизита, Код, Тип)
	Строка = Объект.НастройкаСоответствий.Добавить();
	Строка.ИмяСвойства = Имя;
	Строка.Назначение = Назначение;
	Строка.ВидРеквизита = ВидРеквизита;
	Строка.КодСвойства = Код;
	Строка.ТипДанных = Тип;
КонецПроцедуры


&НаКлиенте
Процедура УстановитьВидимостьЗакладок()
	Элементы.ГруппаДолговыеОбязательства.Видимость = Объект.УчетПоДО;
	Элементы.ГруппаИД.Видимость = Объект.УчетПоИД;
	Элементы.ГруппаЗалоги.Видимость = Объект.УчетПоЗ;
	Элементы.ГруппаДоговоры.Видимость = Объект.УчетПоД;
	Элементы.ГруппаУслуги.Видимость = Объект.УчетПоУ;
	Элементы.ГруппаДолжники.Видимость = Объект.УчетПоДолжникам;
	Элементы.ГруппаКонтрагенты.Видимость = Объект.УчетПоКонтрагентам;
	Элементы.ГруппаКредиторы.Видимость = Объект.УчетПоКредиторам;
	
	ОграничитьНастройкиСервер();
	РаспределитьНастройкиПоЗакладкам();
КонецПроцедуры

&НаСервере
Процедура ОграничитьНастройкиСервер()
	ЗначениеОбъект = РеквизитФормыВЗначение("Объект");
	ЗначениеОбъект.ОграничитьНастройкиПоОбъектамУчета();
	ЗначениеВРеквизитФормы(ЗначениеОбъект, "Объект");	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьНастроекУчета()
	Если Не Объект.УчетПоДО Тогда
		Элементы.КонтрольДО.Доступность = Ложь;
		Объект.КонтрольДО = Ложь;
		Элементы.КонтрольИД.Доступность = Ложь;
		Объект.КонтрольИД = Ложь;
		Элементы.КонтрольЗ.Доступность = Ложь;
		Объект.КонтрольЗ = Ложь;
		Элементы.КонтрольКредиторы.Доступность = Ложь;
		Объект.КонтрольКредиторы = Ложь;
		
		Элементы.УчетПоИД.Доступность = Ложь;
		Объект.УчетПоИД = Ложь;
		
		Элементы.УчетПоЗ.Доступность = Ложь;
		Объект.УчетПоЗ = Ложь;	
		
		Элементы.УчетПоКредиторам.Доступность = Ложь;
		Объект.УчетПоКредиторам = Ложь;
	Иначе
		Элементы.КонтрольДО.Доступность = Истина;
		Элементы.УчетПоИД.Доступность = Истина;
		Элементы.УчетПоЗ.Доступность = Истина;
		Элементы.УчетПоДолжникам.Доступность = Истина;
		Элементы.УчетПоКредиторам.Доступность = Истина;
	КонецЕсли;
	
	Если Не Объект.УчетПоИД Тогда
		Объект.КонтрольИД = Ложь;
		Элементы.КонтрольИД.Доступность = Ложь;
	Иначе
		Элементы.КонтрольИД.Доступность = Истина;
	КонецЕсли;	
	
	Если Не Объект.УчетПоЗ Тогда
		Объект.КонтрольЗ = Ложь;
		Элементы.КонтрольЗ.Доступность = Ложь;
	Иначе
		Элементы.КонтрольЗ.Доступность = Истина;
	КонецЕсли;
	
	Если Не Объект.УчетПоД Тогда
		Элементы.КонтрольД.Доступность = Ложь;
		Объект.КонтрольД = Ложь;
		Объект.УчетПоУ = Ложь;
		Элементы.УчетПоУ.Доступность = Ложь;
		
		Элементы.КонтрольУ.Доступность = Ложь;
		Объект.КонтрольУ = Ложь;
	Иначе
		Элементы.КонтрольД.Доступность = Истина;
		Элементы.УчетпоУ.Доступность = Истина;
	КонецЕсли;
	
	Если Не Объект.УчетПоД Тогда
		Элементы.КонтрольД.Доступность = Ложь;
		Объект.КонтрольД = Ложь;
		Объект.УчетПоУ = Ложь;
		Элементы.УчетПоУ.Доступность = Ложь;
		
		Элементы.КонтрольУ.Доступность = Ложь;
		Объект.КонтрольУ = Ложь;
	Иначе
		Элементы.КонтрольД.Доступность = Истина;
		Элементы.УчетпоУ.Доступность = Истина;
	КонецЕсли;	
	
	Если Не Объект.УчетПоУ Тогда
		Элементы.КонтрольУ.Доступность = Ложь;
		Объект.КонтрольУ = Ложь;
	Иначе
		Элементы.КонтрольУ.Доступность = Истина;
	КонецЕсли;
	
	Если Не Объект.УчетПоДолжникам Тогда
		Элементы.КонтрольДолжники.Доступность = Ложь;
		Объект.КонтрольДолжники = Ложь;
	Иначе
		Элементы.КонтрольДолжники.Доступность = Истина;
	КонецЕсли;
	
	Если Не Объект.УчетПоКонтрагентам Тогда
		Элементы.КонтрольКонтрагенты.Доступность = Ложь;
		Объект.КонтрольКонтрагенты = Ложь;
	Иначе
		Элементы.КонтрольКонтрагенты.Доступность = Истина;
	КонецЕсли;	
	
	Если Не Объект.УчетПоКонтрагентам Тогда
		Элементы.КонтрольКонтрагенты.Доступность = Ложь;
		Объект.КонтрольКонтрагенты = Ложь;
	Иначе
		Элементы.КонтрольКонтрагенты.Доступность = Истина;
	КонецЕсли;
	
	Если Не Объект.УчетПоКредиторам Тогда
		Элементы.КонтрольКредиторы.Доступность = Ложь;
		Объект.КонтрольКредиторы = Ложь;
	Иначе
		Элементы.КонтрольКредиторы.Доступность = Истина;
	КонецЕсли;
	УстановитьВидимостьЗакладок();
КонецПроцедуры

&НаКлиенте
Процедура УчетПоДОПриИзменении(Элемент)
	Если Не Объект.УчетПоДО Тогда
		Элементы.КонтрольДО.Доступность = Ложь;
		Объект.КонтрольДО = Ложь;
		Элементы.КонтрольИД.Доступность = Ложь;
		Объект.КонтрольИД = Ложь;
		Элементы.КонтрольЗ.Доступность = Ложь;
		Объект.КонтрольЗ = Ложь;
		Элементы.КонтрольКредиторы.Доступность = Ложь;
		Объект.КонтрольКредиторы = Ложь;
		
		Элементы.УчетПоИД.Доступность = Ложь;
		Объект.УчетПоИД = Ложь;
		
		Элементы.УчетПоЗ.Доступность = Ложь;
		Объект.УчетПоЗ = Ложь;	
		
		Элементы.УчетПоКредиторам.Доступность = Ложь;
		Объект.УчетПоКредиторам = Ложь;
	Иначе
		Элементы.КонтрольДО.Доступность = Истина;
		Элементы.УчетПоИД.Доступность = Истина;
		Элементы.УчетПоЗ.Доступность = Истина;
		Элементы.УчетПоДолжникам.Доступность = Истина;
		Элементы.УчетПоКредиторам.Доступность = Истина;
	КонецЕсли;
	УстановитьВидимостьЗакладок();
КонецПроцедуры

&НаКлиенте
Процедура УчетПоИДПриИзменении(Элемент)
	Если Не Объект.УчетПоИД Тогда
		Объект.КонтрольИД = Ложь;
		Элементы.КонтрольИД.Доступность = Ложь;
	Иначе
		Элементы.КонтрольИД.Доступность = Истина;
	КонецЕсли;
	УстановитьВидимостьЗакладок();
КонецПроцедуры

&НаКлиенте
Процедура УчетПоЗПриИзменении(Элемент)
	Если Не Объект.УчетПоЗ Тогда
		Объект.КонтрольЗ = Ложь;
		Элементы.КонтрольЗ.Доступность = Ложь;
	Иначе
		Элементы.КонтрольЗ.Доступность = Истина;
	КонецЕсли;
	УстановитьВидимостьЗакладок();
КонецПроцедуры

&НаКлиенте
Процедура УчетПоДПриИзменении(Элемент)
	Если Не Объект.УчетПоД Тогда
		Элементы.КонтрольД.Доступность = Ложь;
		Объект.КонтрольД = Ложь;
		Объект.УчетПоУ = Ложь;
		Элементы.УчетПоУ.Доступность = Ложь;
		
		Элементы.КонтрольУ.Доступность = Ложь;
		Объект.КонтрольУ = Ложь;
	Иначе
		Элементы.КонтрольД.Доступность = Истина;
		Элементы.УчетпоУ.Доступность = Истина;
	КонецЕсли;
	УстановитьВидимостьЗакладок();
КонецПроцедуры

&НаКлиенте
Процедура УчетПоУПриИзменении(Элемент)
	Если Не Объект.УчетПоУ Тогда
		Элементы.КонтрольУ.Доступность = Ложь;
		Объект.КонтрольУ = Ложь;
	Иначе
		Элементы.КонтрольУ.Доступность = Истина;
	КонецЕсли;
	УстановитьВидимостьЗакладок();	
КонецПроцедуры

&НаКлиенте
Процедура УчетПоДолжникамПриИзменении(Элемент)
	Если Не Объект.УчетПоДолжникам Тогда
		Элементы.КонтрольДолжники.Доступность = Ложь;
		Объект.КонтрольКонтрагенты = Ложь;
	Иначе
		Элементы.КонтрольДолжники.Доступность = Истина;
	КонецЕсли;
	УстановитьВидимостьЗакладок();
КонецПроцедуры

&НаКлиенте
Процедура УчетПоКонтрагентамПриИзменении(Элемент)
	Если Не Объект.УчетПоКонтрагентам Тогда
		Элементы.КонтрольКонтрагенты.Доступность = Ложь;
		Объект.КонтрольКонтрагенты = Ложь;
	Иначе
		Элементы.КонтрольКонтрагенты.Доступность = Истина;
	КонецЕсли;	
	УстановитьВидимостьЗакладок();
КонецПроцедуры

&НаКлиенте
Процедура УчетПоКредиторамПриИзменении(Элемент)
	Если Не Объект.УчетПоКредиторам Тогда
		Элементы.КонтрольКредиторы.Доступность = Ложь;
		Объект.КонтрольКредиторы = Ложь;
	Иначе
		Элементы.КонтрольКредиторы.Доступность = Истина;
	КонецЕсли;	
	УстановитьВидимостьЗакладок();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	#Если  ВебКлиент Тогда
		//Сообщить("Это веб клиент");
		// На Веб-Клиенте Табличный документ, находящийся в составе Группы-страницы, отображается некорректно
		//Платформа 8.3.12.1529 
		//Проверить(тут и во всех объектах, где есть ТабДок в составе страницы),как будут отображаться сетки, когда выйдет новая платформа
		//А пока что убираем сетку, если это ВебКлиент
		Элементы.ПолеИсходнойТаблицы.ОтображатьСетку = Ложь;
		Элементы.ПолеИсходнойТаблицы.ОтображатьЗаголовки = Ложь;
		Элементы.ПолеИсходнойТаблицы.ТолькоПросмотр = Ложь;
	#КонецЕсли
	УстановитьВидимостьЗакладок();	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПроцедуру(Назначение)
	Перем Значение;
	Отбор = Новый Структура;
	Если Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДолговыеОбязательства") Тогда
		ОбъектУчета = ПредопределенноеЗначение("Перечисление.ОбъектыУчета.ДолговыеОбязательства");
	ИначеЕсли Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДоговорыКонтрагентов") Тогда
		ОбъектУчета = ПредопределенноеЗначение("Перечисление.ОбъектыУчета.ДоговорыКонтрагентов");
	ИначеЕсли Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ИсполнительныеДокументы") Тогда
		ОбъектУчета = ПредопределенноеЗначение("Перечисление.ОбъектыУчета.ИсполнительныеДокументы");
	ИначеЕсли Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Услуги") Тогда
		ОбъектУчета = ПредопределенноеЗначение("Перечисление.ОбъектыУчета.УслугиПоДоговорам");
	ИначеЕсли Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Залоги") Тогда
		ОбъектУчета = ПредопределенноеЗначение("Перечисление.ОбъектыУчета.Залоги");
	ИначеЕсли Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Должники") Тогда
		ОбъектУчета = ПредопределенноеЗначение("Перечисление.ОбъектыУчета.Контрагенты");
	ИначеЕсли Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Кредиторы") Тогда
		ОбъектУчета = ПредопределенноеЗначение("Перечисление.ОбъектыУчета.Контрагенты");
	ИначеЕсли Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Контрагенты") Тогда
		ОбъектУчета = ПредопределенноеЗначение("Перечисление.ОбъектыУчета.Контрагенты");
	
	КонецЕсли;
	Отбор.Вставить("ОбъектУчета", ОбъектУчета);
	Форма = ПолучитьФорму("Справочник.ПроцедурыЗагрузкиДанных.ФормаВыбора", Отбор);
	ОткрытьФорму(Форма.ИмяФормы,Новый Структура("Отбор", Отбор),ЭтаФорма,,,,Новый ОписаниеОповещения("ДобавитьПроцедуруЗавершение",ЭтаФорма,Новый Структура("Назначение, Значение", Назначение, Значение)),);
	//Результат = Форма.ОткрытьМодально();
	//Результат = ОткрытьФорму(Форма);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПроцедуруЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Назначение = ДополнительныеПараметры.Назначение;
	Значение = ?(Результат = Неопределено, ДополнительныеПараметры.Значение, Результат);
	
	
	Если Значение <> Неопределено Тогда
		ДобавитьПроцедуруСервер(Значение, Назначение);
		РаспределитьНастройкиПоЗакладкам();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьПроцедуруСервер(ПроцедураЗагрузки, Назначение)
	Строка = Объект.НастройкаСоответствий.Добавить();
	Строка.ИмяСвойства = ПроцедураЗагрузки.Наименование;
	Строка.Назначение = Назначение;
	Строка.ВидРеквизита = ПредопределенноеЗначение("Перечисление.ВидыРеквизитов.Процедура");
	Строка.КодСвойства = ПроцедураЗагрузки.Код;
	Строка.ТипДанных = "Строка";
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьНастройкиПоЗакладкам()
	//Объект.НастройкаСоответствий.Сортировать("ВидРеквизита");
	
	// Очищаем таблицы на форме
	ВыборСоответствийДО.Очистить();
	ВыборСоответствийД.Очистить();
	ВыборСоответствийИД.Очистить();
	ВыборСоответствийУ.Очистить();
	ВыборСоответствийЗ.Очистить();
	ВыборСоответствийДолжник.Очистить(); 
	ВыборСоответствийКонтрагент.Очистить();
	ВыборСоответствийКредитор.Очистить();
	
	// Заполняем таблицы на форме из общей настройки
	Для Каждого Элемент Из Объект.НастройкаСоответствий Цикл
		Назначение = Элемент.Назначение;
		Если Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДолговыеОбязательства") Тогда
			Строка = ВыборСоответствийДО.Добавить();
		ИначеЕсли Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДоговорыКонтрагентов") Тогда
			Строка = ВыборСоответствийД.Добавить();
		ИначеЕсли Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ИсполнительныеДокументы") Тогда
			Строка = ВыборСоответствийИД.Добавить();
		ИначеЕсли Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Услуги") Тогда
			Строка = ВыборСоответствийУ.Добавить();
		ИначеЕсли Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Залоги") Тогда
			Строка = ВыборСоответствийЗ.Добавить();
		ИначеЕсли Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Должники") Тогда
			Строка = ВыборСоответствийДолжник.Добавить();
			РаспределитьНастройкиКонтакты();
		ИначеЕсли Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Кредиторы") Тогда
			Строка = ВыборСоответствийКредитор.Добавить();
		ИначеЕсли Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Контрагенты") Тогда
			Строка = ВыборСоответствийКонтрагент.Добавить();
		КонецЕсли;
		Строка.ИмяСвойства = Элемент.ИмяСвойства;
		Строка.ВидРеквизита = Элемент.ВидРеквизита;
		Строка.КодСвойства = Элемент.КодСвойства;
		Строка.ТипДанных = Элемент.ТипДанных;
		Строка.ПараметрыСвязи = Элемент.ПараметрыСвязи;
		Строка.Обновлять = Элемент.Обновлять;
	КонецЦикла;
	//УстановитьВидимостьЗакладок();
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьНастройкиКонтакты()
	
	ВыборСоответствийКонтакты.Очистить();
	Для Каждого Элемент Из Объект.НастройкаСоответствийКонтакты Цикл
		Строка = ВыборСоответствийКонтакты.Добавить();
		Строка.УИД = Элемент.УИД;
		Строка.ВидТелефона = Элемент.ВидТелефона;
		Строка.Номер = Элемент.Номер;
		Строка.КонтактноеЛицо = Элемент.КонтактноеЛицо;
		Строка.ВидТелефонаПоУмолчанию = Элемент.ВидТелефонаПоУмолчанию;
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьПроцедуруИД(Команда)
	ДобавитьПроцедуру(ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ИсполнительныеДокументы"));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПроцедуруД(Команда)
	ДобавитьПроцедуру(ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДоговорыКонтрагентов"));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПроцедуруДолжник(Команда)
	ДобавитьПроцедуру(ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Должники"));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПроцедуруЗ(Команда)
	ДобавитьПроцедуру(ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Залоги"));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПроцедуруКонтрагент(Команда)
	ДобавитьПроцедуру(ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Контрагенты"));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПроцедуруКредитор(Команда)
	ДобавитьПроцедуру(ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Кредиторы"));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПроцедуруУ(Команда)
	ДобавитьПроцедуру(ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Услуги"));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПроцедуруДО(Команда)
	ДобавитьПроцедуру(ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДолговыеОбязательства"));
КонецПроцедуры


&НаКлиенте
Процедура ПолеИсходнойТаблицыПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

#Область СчитатьФайл

&НаКлиенте
Асинх Процедура ФайлИмпортаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Чтец = УправлениеЧтениеФайловКлиент;
	Попытка
	
		ОписаниеФайла = Ждать Чтец.ВыбратьИПоместитьНаСерверТабличныйДокумент(ЭтаФорма.УникальныйИдентификатор);
	
	Исключение
		СообщениеПользователю("Операция не удалась: " + ОписаниеОшибки());
		ОчиститьДанныеФайла();
		Возврат;
	КонецПопытки;
	
	Если ОписаниеФайла = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
	
	АдресФайлИмпорта = ОписаниеФайла["Адрес"];
	ФайлИмпорта = ОписаниеФайла["СсылкаНаФайл"]["Имя"];
	
	Результат = УправлениеЗагрузкойСервер.ЗаполнитьТабличныйДокументИзАрхива(ФайлИмпорта, АдресФайлИмпорта);
	Если Результат["Ошибка"] = Неопределено Тогда
	
		ПолеИсходнойТаблицы = Результат["ТабличныйДокумент"];
	
	КонецЕсли;
	
	УдалитьВременныйФайл(Результат["ИмяФайла"]);
	СообщениеПользователю(Результат["Сообщение"]);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьВременныйФайл(ИмяФайла)

	ФайловаяСистема.УдалитьВременныйФайл(ИмяФайла);

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеФайла()

	ФайлИмпорта = Неопределено;
	АдресФайлИмпорта = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура СообщениеПользователю(ТекстСообщения)

	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();

КонецПроцедуры

#КонецОбласти

//&НаКлиенте
//Асинх Процедура ПрочитатьФайлСКлиента()

//	ДанныеПрочитанногоФайла = Неопределено;
//	Попытка
//	
//		ДанныеПрочитанногоФайла = Ждать УправлениеЗагрузкойКлиент.ИмпортироватьФайл(ЭтаФорма.УникальныйИдентификатор);
//	
//	Исключение
//		Сообщение = Новый СообщениеПользователю;
//		Сообщение.Текст = ОписаниеОшибки();
//		Сообщение.Сообщить();
//	КонецПопытки;
//	
//	Если НЕ ЗначениеЗаполнено(ДанныеПрочитанногоФайла) Тогда
//	
//		Возврат;
//	
//	КонецЕсли;
//	
//	ПолеИсходнойТаблицы = ДанныеПрочитанногоФайла["ТабличныйДокумент"];
//	ФайлИмпорта = ДанныеПрочитанногоФайла["ПутьФайлаНаКлиенте"];

//КонецПроцедуры


//&НаКлиенте
//Процедура ФайлИмпортаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	
//	ПрочитатьФайлСКлиента();
//	
//КонецПроцедуры

&НаКлиенте
Процедура ЗагружатьЗадолженностьД(Команда)
	ДобавитьТипыЗадолженности(ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДоговорыКонтрагентов"));
КонецПроцедуры


&НаКлиенте
Процедура ЗагружатьЗадолженностьДО(Команда)
	ДобавитьТипыЗадолженности(ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДолговыеОбязательства"));
КонецПроцедуры


&НаКлиенте
Процедура ЗагружатьЗадолженностьДолжник(Команда)
	ДобавитьТипыЗадолженности(ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Должники"));
КонецПроцедуры


&НаКлиенте
Процедура ЗагружатьЗадолженностьЗ(Команда)
	ДобавитьТипыЗадолженности(ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Залоги"));
КонецПроцедуры


&НаКлиенте
Процедура ЗагружатьЗадолженностьИД(Команда)
	ДобавитьТипыЗадолженности(ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ИсполнительныеДокументы"));
КонецПроцедуры


&НаКлиенте
Процедура ЗагружатьЗадолженностьКонтрагент(Команда)
	ДобавитьТипыЗадолженности(ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Контрагенты"));
КонецПроцедуры


&НаКлиенте
Процедура ЗагружатьЗадолженностьКредитор(Команда)
	ДобавитьТипыЗадолженности(ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Кредиторы"));
КонецПроцедуры


&НаКлиенте
Процедура ЗагружатьЗадолженностьУ(Команда)
	ДобавитьТипыЗадолженности(ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Услуги"));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТипыЗадолженности(Назначение)
	ДобавитьТипыЗадолженностиСервер(Назначение);
	РаспределитьНастройкиПоЗакладкам();
КонецПроцедуры

&НаСервере
Процедура ДобавитьТипыЗадолженностиСервер(Назначение)
	Отбор = Новый Структура;
	Отбор.Вставить("Назначение", Назначение);
	Отбор.Вставить("ВидРеквизита", Перечисления.ВидыРеквизитов.ТипЗадолженности);
	Строки = Объект.НастройкаСоответствий.НайтиСтроки(Отбор);
	Если Строки.Количество() > 0 Тогда
		Для i = 0 По Строки.Количество() - 1 Цикл
			Объект.НастройкаСоответствий.Удалить(Строки[i]);
		КонецЦикла;	
		Элементы.ДатаАктуализацииЗадолженности.Видимость = Ложь;
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ТипыЗадолженности.Наименование,
		                      |	ТипыЗадолженности.Код КАК Код
		                      |ИЗ
		                      |	ПланВидовХарактеристик.ТипыЗадолженности КАК ТипыЗадолженности
		                      |ГДЕ
		                      |	ТипыЗадолженности.ПометкаУдаления = ЛОЖЬ
		                      |	И ТипыЗадолженности.Код <> ""     0001""
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	Код");
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			Строка = Объект.НастройкаСоответствий.Добавить();
			Строка.ИмяСвойства = Результат.Наименование;
			Строка.Назначение = Назначение;
			Строка.ВидРеквизита = Перечисления.ВидыРеквизитов.ТипЗадолженности;
			Строка.КодСвойства = Результат.Код;
			Строка.ТипДанных = "Число";
		КонецЦикла;
		Строка = Объект.НастройкаСоответствий.Добавить();
		Строка.ИмяСвойства = "Валюта";
		Строка.Назначение = Назначение;
		Строка.ВидРеквизита = Перечисления.ВидыРеквизитов.ТипЗадолженности;
		Строка.КодСвойства = "";
		Строка.ТипДанных = "Справочник ссылка: Валюты";	
		Элементы.ДатаАктуализацииЗадолженности.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборСоответствийДОПередУдалением(Элемент, Отказ)
	Отказ = ВыборСоответствийПередУдалением(
		Элементы.ВыборСоответствийДО.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДолговыеОбязательства"), 
		Элементы.ВыборСоответствийДО.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийДО.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийДО.ТекущиеДанные.Обновлять);
КонецПроцедуры

&НаКлиенте
Процедура ВыборСоответствийИДПередУдалением(Элемент, Отказ)
	Отказ = ВыборСоответствийПередУдалением(
		Элементы.ВыборСоответствийИД.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ИсполнительныеДокументы"), 
		Элементы.ВыборСоответствийИД.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийИД.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийИД.ТекущиеДанные.Обновлять);
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийЗПередУдалением(Элемент, Отказ)
	Отказ = ВыборСоответствийПередУдалением(
		Элементы.ВыборСоответствийЗ.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Залоги"), 
		Элементы.ВыборСоответствийЗ.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийЗ.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийИД.ТекущиеДанные.Обновлять);
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийДПередУдалением(Элемент, Отказ)
	Отказ = ВыборСоответствийПередУдалением(
		Элементы.ВыборСоответствийД.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДоговорыКонтрагентов"), 
		Элементы.ВыборСоответствийД.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийД.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийД.ТекущиеДанные.Обновлять);
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийУПередУдалением(Элемент, Отказ)
	Отказ = ВыборСоответствийПередУдалением(
		Элементы.ВыборСоответствийУ.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Услуги"), 
		Элементы.ВыборСоответствийУ.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийУ.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийУ.ТекущиеДанные.Обновлять);
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийДолжникПередУдалением(Элемент, Отказ)
	Отказ = ВыборСоответствийПередУдалением(
		Элементы.ВыборСоответствийДолжник.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Должники"), 
		Элементы.ВыборСоответствийДолжник.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийДолжник.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийДолжник.ТекущиеДанные.Обновлять);
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийКонтрагентПередУдалением(Элемент, Отказ)
	Отказ = ВыборСоответствийПередУдалением(
		Элементы.ВыборСоответствийКонтрагент.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Контрагенты"), 
		Элементы.ВыборСоответствийКонтрагент.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийКонтрагент.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийконтрагент.ТекущиеДанные.Обновлять);
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийКредиторПередУдалением(Элемент, Отказ)
	Отказ = ВыборСоответствийПередУдалением(
		Элементы.ВыборСоответствийКредитор.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Кредиторы"), 
		Элементы.ВыборСоответствийКредитор.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийКредитор.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийКредитор.ТекущиеДанные.Обновлять);
КонецПроцедуры

&НаКлиенте
Функция ВыборСоответствийПередУдалением(ИмяСвойства, Назначение, ВидРеквизита, КодСвойства, Обновлять)
	Если ВидРеквизита = ПредопределенноеЗначение("Перечисление.ВидыРеквизитов.Наименование") ИЛИ ВидРеквизита = ПредопределенноеЗначение("Перечисление.ВидыРеквизитов.Код") ИЛИ ВидРеквизита = ПредопределенноеЗначение("Перечисление.ВидыРеквизитов.ТипОбъекта") ИЛИ ВидРеквизита = ПредопределенноеЗначение("Перечисление.ВидыРеквизитов.ТипЗадолженности") ИЛИ (ВидРеквизита = ПредопределенноеЗначение("Перечисление.ВидыРеквизитов.ТипЗадолженности") И ИмяСвойства = "Валюта") Тогда  
		Возврат Истина;
	Иначе
		Отбор = Новый Структура;
		Отбор.Вставить("ИмяСвойства", ИмяСвойства);
		Отбор.Вставить("Назначение", Назначение);
		Отбор.Вставить("ВидРеквизита", ВидРеквизита);
		Отбор.Вставить("КодСвойства", КодСвойства);
		Отбор.Вставить("Обновлять", Обновлять);
		Строка = Объект.НастройкаСоответствий.НайтиСтроки(Отбор);
		Объект.НастройкаСоответствий.Удалить(Строка[0]);
		РаспределитьНастройкиПоЗакладкам();		
		Возврат Ложь;
	КонецЕсли;
КонецФункции


//&НаКлиенте
//Процедура ДопРеквизит(Назначение)
//	Перем Значение;
//	Отбор = Новый Структура;
//	Если Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДолговыеОбязательства") Тогда
//		СправочникВладелец = ПредопределенноеЗначение("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.Справочник_ДолговыеОбязательства");
//	ИначеЕсли Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДоговорыКонтрагентов") Тогда
//		СправочникВладелец = ПредопределенноеЗначение("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.Справочник_ДоговорыКонтрагентов");
//	ИначеЕсли Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ИсполнительныеДокументы") Тогда
//		СправочникВладелец = ПредопределенноеЗначение("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.Справочник_ИсполнительныеДокументы");
//	ИначеЕсли Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Услуги") Тогда
//		СправочникВладелец = ПредопределенноеЗначение("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.Справочник_УслугиПоДоговору");
//	ИначеЕсли Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Залоги") Тогда
//		СправочникВладелец = ПредопределенноеЗначение("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.Справочник_Залоги");
//	ИначеЕсли Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Должники") Тогда
//		СправочникВладелец = ПредопределенноеЗначение("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.Справочник_Контрагенты");
//	ИначеЕсли Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Кредиторы") Тогда
//		СправочникВладелец = ПредопределенноеЗначение("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.Справочник_Контрагенты");
//	ИначеЕсли Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Контрагенты") Тогда
//		СправочникВладелец = ПредопределенноеЗначение("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.Справочник_Контрагенты");
//	
//	КонецЕсли;
//	
//	Отбор.Вставить("СправочникВладелец", СправочникВладелец);
//	Форма = ПолучитьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаВыбора", Новый Структура("Отбор", Отбор));
//	ОткрытьФорму(Форма.ИмяФормы,Новый Структура("Отбор", Отбор),ЭтаФорма,,,,Новый ОписаниеОповещения("ДопРеквизитЗавершение",ЭтаФорма,Новый Структура("Назначение, Значение", Назначение, Значение)),);
//	//Если Результат <> Неопределено Тогда
//	//	ДопРеквизитСервер(Результат, Назначение);
//	//	РаспределитьНастройкиПоЗакладкам();
//	//КонецЕсли;	

//	//Отбор.Вставить("СправочникВладелец", СправочникВладелец);
//	//Форма = ПолучитьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаВыбора", Отбор);
//	//Результат = Форма.ОткрытьМодально();
//КонецПроцедуры

&НаКлиенте
Процедура ДопРеквизитЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Назначение = ДополнительныеПараметры.Назначение;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДопРеквизитСервер(Результат, Назначение);
	РаспределитьНастройкиПоЗакладкам();
	
	//Значение = ?(Результат = Неопределено, ДополнительныеПараметры.Значение, Результат);
	//
	//
	//Если Значение <> Неопределено Тогда
	//	ДопРеквизитСервер(Значение, Назначение);
	//	РаспределитьНастройкиПоЗакладкам();
	//КонецЕсли;
	
КонецПроцедуры


&НаСервере 
Процедура ДопРеквизитСервер(Реквизит, Назначение)
	Отбор = Новый Структура;
	Отбор.Вставить("КодСвойства", Реквизит.Код);
	Отбор.Вставить("ИмяСвойства", Реквизит.Наименование);
	Отбор.Вставить("Назначение", Назначение);
	Строки = Объект.НастройкаСоответствий.НайтиСтроки(Отбор);
	Если Строки.Количество() = 0 Тогда
		
		Строка = Объект.НастройкаСоответствий.Добавить();		
		Строка.ИмяСвойства = Реквизит.Наименование;
		Строка.Назначение = Назначение;
		Если Реквизит.ЭтоДополнительноеСведение Тогда
			Строка.ВидРеквизита = ПредопределенноеЗначение("Перечисление.ВидыРеквизитов.ДополнительноеСведение");
		Иначе
			Строка.ВидРеквизита = ПредопределенноеЗначение("Перечисление.ВидыРеквизитов.ДополнительныйРеквизит");
		КонецЕсли;
		Строка.КодСвойства = Реквизит.Код;		
		
		Строка.ТипДанных = ВернутьТипЗначения(Реквизит);
		
		Если Строка.ТипДанных = "Строка" Тогда
			Если Реквизит.ВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Адрес") Тогда
				Строка.ТипДанных = Строка.ТипДанных + ": Адрес";
			ИначеЕсли Реквизит.ВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Телефон") Тогда
				Строка.ТипДанных = Строка.ТипДанных + ": Телефон";
			ИначеЕсли Реквизит.ВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.АдресФИАС") Тогда
				Строка.ТипДанных = Строка.ТипДанных + ": Адрес";
			КонецЕсли;	
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВернутьТипЗначения(Реквизит)
	стр = Строка(Реквизит.ТипЗначения);
	Если стр <> "Строка" И стр <> "Дата" И стр <> "Булево" И стр <> "Число" И стр <> "Значения свойств объектов" Тогда
		Возврат "Справочник ссылка: " + стр;
	Иначе
		Возврат Реквизит.ТипЗначения;
	КонецЕсли;
КонецФункции

#Область ДобавлениеРеквизитов

&НаКлиенте
Процедура ДопРеквизитИД(Команда)
	//ДопРеквизит(ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ИсполнительныеДокументы"));
	Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ИсполнительныеДокументы");
	ДополнительныеРеквизитыИСведения.ДобавитьМассово(ЭтаФорма, Назначение);
	
	ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ИсполнительныеДокументы");
КонецПроцедуры

&НаКлиенте
Процедура ДопРеквизитД(Команда)
	//ДопРеквизит(ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДоговорыКонтрагентов"));
	Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДоговорыКонтрагентов");
	ДополнительныеРеквизитыИСведения.ДобавитьМассово(ЭтаФорма, Назначение);
	
	ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДоговорыКонтрагентов")
КонецПроцедуры

&НаКлиенте
Процедура ДопРеквизитДолжник(Команда)
	Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Должники");
	ДополнительныеРеквизитыИСведения.ДобавитьМассово(ЭтаФорма, Назначение);
	
	ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Должники");
КонецПроцедуры

&НаКлиенте
Процедура ДопРеквизитЗ(Команда)
	//ДопРеквизит(ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Залоги"));
	Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Залоги");
	ДополнительныеРеквизитыИСведения.ДобавитьМассово(ЭтаФорма, Назначение);
	
	ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Залоги");
КонецПроцедуры

&НаКлиенте
Процедура ДопРеквизитКонтрагент(Команда)
	//ДопРеквизит(ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Контрагенты"));
	Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Контрагенты");
	ДополнительныеРеквизитыИСведения.ДобавитьМассово(ЭтаФорма, Назначение);
	
	ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Контрагенты");
КонецПроцедуры

&НаКлиенте
Процедура ДопРеквизитКредитор(Команда)
	//ДопРеквизит(ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Кредиторы"));
	Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Кредиторы");
	ДополнительныеРеквизитыИСведения.ДобавитьМассово(ЭтаФорма, Назначение);
	
	ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Кредиторы");
КонецПроцедуры

&НаКлиенте
Процедура ДопРеквизитУ(Команда)
	//ДопРеквизит(ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Услуги"));
	Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Услуги");
	ДополнительныеРеквизитыИСведения.ДобавитьМассово(ЭтаФорма, Назначение);
	
	ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Услуги");
КонецПроцедуры

&НаКлиенте
Процедура ДопРеквизитДО(Команда)
	Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДолговыеОбязательства");
	ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДолговыеОбязательства");
	//ДопРеквизит(Назначение);
	
	ДополнительныеРеквизитыИСведения.ДобавитьМассово(ЭтаФорма, Назначение);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВыделенныеДО(Команда)

	Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДолговыеОбязательства");
	УдалитьВыделенные("ВыборСоответствийДО", Назначение);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВыделенныеДоговоры(Команда)

	Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДоговорыКонтрагентов");
	УдалитьВыделенные("ВыборСоответствийД", Назначение);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВыделенныеДолжники(Команда)

	Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Должники");
	УдалитьВыделенные("ВыборСоответствийДолжник", Назначение);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВыделенныеЗалоги(Команда)

	Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Залоги");
	УдалитьВыделенные("ВыборСоответствийЗ", Назначение);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВыделенныеИД(Команда)

	Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ИсполнительныеДокументы");
	УдалитьВыделенные("ВыборСоответствийИД", Назначение);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВыделенныеКонтрагенты(Команда)

	Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Контрагенты");
	УдалитьВыделенные("ВыборСоответствийКонтрагент", Назначение);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВыделенныеКредиторы(Команда)

	Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Кредиторы");
	УдалитьВыделенные("ВыборСоответствийКредитор", Назначение);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВыделенныеУслуги(Команда)

	Назначение = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Услуги");
	УдалитьВыделенные("ВыборСоответствийУ", Назначение);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВыделенные(ТаблицаУдаленияИмя, Назначение)

	ВыделенныеСтроки = Элементы[ТаблицаУдаленияИмя].ВыделенныеСтроки;
	
	ТаблицаУдаления = ЭтаФорма[ТаблицаУдаленияИмя];
	Номер = ВыделенныеСтроки.Количество() - 1;
	Пока Номер >= 0 Цикл
	
		ВыделеннаяСтрока = ТаблицаУдаления.НайтиПоИдентификатору(ВыделенныеСтроки[Номер]);
		Отбор = Новый Структура;
		Отбор.Вставить("КодСвойства", ВыделеннаяСтрока.КодСвойства);
		Отбор.Вставить("ИмяСвойства", ВыделеннаяСтрока.ИмяСвойства);
		Отбор.Вставить("Назначение", Назначение);
		Строки = Объект.НастройкаСоответствий.НайтиСтроки(Отбор);
		Если Строки.Количество() > 0 Тогда
		
			Объект.НастройкаСоответствий.Удалить(Строки[0]);
			ТаблицаУдаления.Удалить(ВыделеннаяСтрока);
		
		КонецЕсли;
		
		Номер = Номер - 1;
	
	КонецЦикла;

КонецПроцедуры

#КонецОбласти


&НаКлиенте
// Выбирает соответствия связи для текущего элемента.
//
// Параметры:
//	Элемент - текущий элемент; 
//  Форма - имя формы; 
//  ДокументОбъект - документ; -
//  ИмяТаблицы - имя таблицы; -
//  СписокРеквизитов - список реквизитов. -
// 
Процедура ВыборСоответствийСвязи(Форма, ТекСтр)
	//ТекСтр = Форма.Элементы.ВыборСоответствий.ТекущиеДанные; //ТекущаяСтрока;
	ПараметрыФормы = Новый Структура;       
	Если Нрег(ТекСтр.ТипДанных) = "строка" Тогда
		ПараметрыФормы.Вставить("СписокПараметров",СписокИменКолонок);
		ПараметрыФормы.Вставить("ИзменяемыйЭлемент",ТекСтр.ПараметрыСвязи);
		ФормаПараметров = ПолучитьФорму("Обработка.УстановкаПараметровСвязи.Форма.ФормаВыбораКолонок",ПараметрыФормы,ЭтаФорма);
		//ФормаПараметров.СписокПараметров = СписокИменКолонок;
		
	ИначеЕсли Нрег(ТекСтр.ТипДанных) = "число" ИЛИ Нрег(ТекСтр.ТипДанных) = "дата" Тогда
		ТекСтр.ПараметрыСвязи = Форма.ВыбратьИзСписка(СписокИменКолонок);
		Возврат;
		
		//ИначеЕсли Нрег(Лев(ТекСтр.ТипДанных, 12)) = "перечисление" Тогда
		//	ФормаПараметров = ПолучитьФорму("ФормаПеречисления",Элемент);
		//	ТипПеречисления = Форма.Элементы.ВыборСоответствий.ТекущиеДанные.ТипДанных;
		//	ТипПеречисления = СтрЗаменить(Сред(ТипПеречисления, 21), " ", "");
		//	//ФормаПараметров.Перечисление = Перечисления[ТипПеречисления].ПустаяСсылка();
		
	ИначеЕсли Нрег(ТекСтр.ТипДанных) = Нрег(Тип("СправочникСсылка.тсЗначенияСвойствОбъектов")) Тогда
		ПараметрыФормы.Вставить("СписокКолонок",СписокИменКолонок);
		ПараметрыФормы.Вставить("КодСвойства",ТекСтр.КодСвойства);
		ПараметрыФормы.Вставить("ИзменяемыйЭлемент",ТекСтр.ПараметрыСвязи);
		ФормаПараметров = ПолучитьФорму("Обработка.УстановкаПараметровСвязи.Форма.ФормаПеречисления",ПараметрыФормы,ЭтаФорма); 
		//ФормаПараметров.СписокКолонок = СписокИменКолонок;		
		//ФормаПараметров.КодСвойства = ТекСтр.КодСвойства;
		
	ИначеЕсли Нрег(ТекСтр.ТипДанных) = "булево" Тогда
		ПараметрыФормы.Вставить("СписокКолонок",СписокИменКолонок);
		ПараметрыФормы.Вставить("КодСвойства",ТекСтр.КодСвойства);
		ПараметрыФормы.Вставить("ИзменяемыйЭлемент",ТекСтр.ПараметрыСвязи);
		ФормаПараметров = ПолучитьФорму("Обработка.УстановкаПараметровСвязи.Форма.ФормаПеречисления",ПараметрыФормы,ЭтаФорма);
		//ФормаПараметров.СписокКолонок = СписокИменКолонок;		
		//ФормаПараметров.КодСвойства = ТекСтр.КодСвойства;
		//ФормаПараметров.Перечисление = Истина;
		
		//ИначеЕсли Нрег(Сред(ТекСтр.ТипДанных, СтрДлина("СправочникСсылка.")+3)) = 
		//		Нрег(Тип("СправочникСсылка.ЮрФизЛицо")) Тогда
		//	
		//	
		//ИначеЕсли Нрег(Сред(ТекСтр.ТипДанных, СтрДлина("СправочникСсылка.")+3)) = 
		//		Нрег(Тип("СправочникСсылка.ТипыДолговыхОбязательств")) Тогда
		
	Иначе
		ПараметрыФормы.Вставить("ИзменяемыйЭлемент",ТекСтр.ПараметрыСвязи);
		Колонки = ВозвратКоллекцииРеквизитовСправочника(ТекСтр.ТипДанных); 
		ПараметрыФормы.Вставить("СписокКолонок",Колонки);
		Парам = РасширитьСписокВыбора(СписокИменКолонок);
		ПараметрыФормы.Вставить("СписокПараметров",Парам);
		ПараметрыФормы.Вставить("СписокВыбора",СписокИменКолонок);
		ПараметрыФормы.Вставить("ТипСтроки ", ТекСтр.ТипДанных);
		ФормаПараметров = ПолучитьФорму("Обработка.УстановкаПараметровСвязи.Форма.ФормаВыбораПараметров",ПараметрыФормы,ЭтаФорма);
		//ФормаПараметров.СписокКолонок = ВозвратКоллекцииРеквизитовСправочника(ТекСтр.ТипДанных);
		//ФормаПараметров.СписокПараметров = РасширитьСписокВыбора(СписокИменКолонок);
		//ФормаПараметров.СписокВыбора = СписокИменКолонок;
		//ФормаПараметров.ТипСтроки = ТекСтр.ТипДанных;
	КонецЕсли;
	
	//ФормаПараметров.ИзменяемыйЭлемент = ТекСтр.ПараметрыСвязи;
	//ФормаПараметров.ПеремИзменяемыйЭлемент = ТекСтр.ПараметрыСвязи;
	//ФормаПараметров.ОткрытьМодально();
	//ФормаПараметров.Открыть();
	//ТекСтр.ПараметрыСвязи = ФормаПараметров.РезультатЗакрытия;
	//Модифицированность = Истина;
	ПараметрыДляОповещения = Новый Структура;
	ПараметрыДляОповещения.Вставить("ТекСтр",ТекСтр);
	ОповещениеОЗакрытииФормы = Новый ОписаниеОповещения("ЗакрытиеОбработкиУстановкиПараметровСвязи",ЭтаФорма,ПараметрыДляОповещения);
	ОткрытьФорму(ФормаПараметров.ИмяФормы,ПараметрыФормы,ЭтаФорма,,,,ОповещениеОЗакрытииФормы);
	Модифицированность = Истина;
КонецПроцедуры 

&НаКлиенте
Процедура ЗакрытиеОбработкиУстановкиПараметровСвязи(РезультатЗакрытия,ПараметрыДляОповещения) Экспорт
	ТекСтр = ПараметрыДляОповещения.ТекСтр;
	ТекСтр.ПараметрыСвязи = РезультатЗакрытия;
	Если ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДолговыеОбязательства") Тогда 
		СохранитьПараметрыСвязи(ТекСтр.ИмяСвойства,ВидНазначения,ТекСтр.ВидРеквизита,ТекСтр.КодСвойства,ТекСтр.ПараметрыСвязи,ТекСтр.Обновлять);
	ИначеЕсли ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ИсполнительныеДокументы") Тогда
		СохранитьПараметрыСвязи(ТекСтр.ИмяСвойства,ВидНазначения,ТекСтр.ВидРеквизита,ТекСтр.КодСвойства,ТекСтр.ПараметрыСвязи,ТекСтр.Обновлять);
	ИначеЕсли ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Залоги") Тогда
		СохранитьПараметрыСвязи(ТекСтр.ИмяСвойства,ВидНазначения,ТекСтр.ВидРеквизита,ТекСтр.КодСвойства,ТекСтр.ПараметрыСвязи,ТекСтр.Обновлять);
	ИначеЕсли ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДоговорыКонтрагентов") Тогда
		СохранитьПараметрыСвязи(ТекСтр.ИмяСвойства,ВидНазначения,ТекСтр.ВидРеквизита,ТекСтр.КодСвойства,ТекСтр.ПараметрыСвязи,ТекСтр.Обновлять);
	ИначеЕсли ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Услуги") Тогда
		СохранитьПараметрыСвязи(ТекСтр.ИмяСвойства,ВидНазначения,ТекСтр.ВидРеквизита,ТекСтр.КодСвойства,ТекСтр.ПараметрыСвязи,ТекСтр.Обновлять);
	ИначеЕсли ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Должники") Тогда
		СохранитьПараметрыСвязи(ТекСтр.ИмяСвойства,ВидНазначения,ТекСтр.ВидРеквизита,ТекСтр.КодСвойства,ТекСтр.ПараметрыСвязи,ТекСтр.Обновлять);
	ИначеЕсли ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Контрагенты") Тогда
		СохранитьПараметрыСвязи(ТекСтр.ИмяСвойства,ВидНазначения,ТекСтр.ВидРеквизита,ТекСтр.КодСвойства,ТекСтр.ПараметрыСвязи,ТекСтр.Обновлять);
	ИначеЕсли ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Кредиторы") Тогда
		СохранитьПараметрыСвязи(ТекСтр.ИмяСвойства,ВидНазначения,ТекСтр.ВидРеквизита,ТекСтр.КодСвойства,ТекСтр.ПараметрыСвязи,ТекСтр.Обновлять);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВозвратКоллекцииРеквизитовСправочника(ТипДанных)
	ТипРеквизитаСтр = СтрЗаменить(ТипДанных, " ", "");
	
	СписокВсехПараметров = Новый СписокЗначений;
	Если Лев(ТипРеквизитаСтр,10) = "Справочник" Тогда
		СправочникРеквизита = Сред(ТипРеквизитаСтр,18);
		Если СправочникРеквизита = "Организация" Тогда
			СправочникРеквизита = "Организации";
		КонецЕсли;
		Если СправочникРеквизита = "Службысудебныхприставов" Тогда
			 СправочникРеквизита = "ФССП_СлужбыСудебныхПриставов";
		КонецЕсли;
		РеквизитОбъект = Метаданные.Справочники.Найти(СправочникРеквизита).Реквизиты;
		СписокВсехПараметров.Добавить("Код");
		СписокВсехПараметров.Добавить("Наименование");
		Если Метаданные.Справочники.Найти(СправочникРеквизита).Владельцы.Количество() > 0 Тогда
			СписокВсехПараметров.Добавить("Владелец");
		КонецЕсли;
	ИначеЕсли Лев(ТипРеквизитаСтр, 8) = "Документ" Тогда
		СписокВсехПараметров.Добавить("Номер");
		СписокВсехПараметров.Добавить("Дата");
	КонецЕсли;

	Если Не РеквизитОбъект = Неопределено Тогда	
		Для Каждого СвойствоРеквизит ИЗ РеквизитОбъект Цикл
			НовСтрока = СписокВсехПараметров.Добавить();
			НовСтрока.Значение = СвойствоРеквизит.Имя;
		КонецЦикла;
	КонецЕсли;

	Возврат СписокВсехПараметров;
КонецФункции

Функция РасширитьСписокВыбора(СписокВыбора)
	РасширенныйСписок = Новый СписокЗначений;	
	РасширенныйСписок.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());
	
	//Для Каждого Элемент ИЗ СписокРеквизитов Цикл
	//	НовСтрока = РасширенныйСписок.Добавить();
	//	НовСтрока.Значение = Элемент.Значение + "_";
	//	НовСтрока.Картинка = БиблиотекаКартинок.Справочник; 
	//КонецЦикла;
	
	Возврат РасширенныйСписок;
КонецФункции


&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.Имя = "ГруппаВыборСоответствий" Тогда
		РаботаСДокументами.ЗаполнитьСписокРеквизитовПоляИмпорта(ПолеИсходнойТаблицы, СписокИменКолонок);
		Элементы.ВыборСоответствийДОПараметрыСвязи.СписокВыбора.ЗагрузитьЗначения(СписокИменКолонок.ВыгрузитьЗначения());
		Элементы.ВыборСоответствийИДПараметрыСвязи.СписокВыбора.ЗагрузитьЗначения(СписокИменКолонок.ВыгрузитьЗначения());
		Элементы.ВыборСоответствийДПараметрыСвязи.СписокВыбора.ЗагрузитьЗначения(СписокИменКолонок.ВыгрузитьЗначения());
		Элементы.ВыборСоответствийЗПараметрыСвязи.СписокВыбора.ЗагрузитьЗначения(СписокИменКолонок.ВыгрузитьЗначения());
		Элементы.ВыборСоответствийУПараметрыСвязи.СписокВыбора.ЗагрузитьЗначения(СписокИменКолонок.ВыгрузитьЗначения());
		Элементы.ВыборСоответствийДолжникПараметрыСвязи.СписокВыбора.ЗагрузитьЗначения(СписокИменКолонок.ВыгрузитьЗначения());
		Элементы.ВыборСоответствийКонтрагентПараметрыСвязи.СписокВыбора.ЗагрузитьЗначения(СписокИменКолонок.ВыгрузитьЗначения());
		Элементы.ВыборСоответствийКредиторПараметрыСвязи.СписокВыбора.ЗагрузитьЗначения(СписокИменКолонок.ВыгрузитьЗначения());		
		
		Элементы.ВыборСоответствийКонтактыВидТелефона.СписокВыбора.ЗагрузитьЗначения(СписокИменКолонок.ВыгрузитьЗначения());
		Элементы.ВыборСоответствийКонтактыНомер.СписокВыбора.ЗагрузитьЗначения(СписокИменКолонок.ВыгрузитьЗначения());
		Элементы.ВыборСоответствийКонтактыКонтактноеЛицо.СписокВыбора.ЗагрузитьЗначения(СписокИменКолонок.ВыгрузитьЗначения());
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийДОПараметрыСвязиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДолговыеОбязательства");
	ВыборСоответствийСвязи(ЭтаФорма, Элементы.ВыборСоответствийДО.ТекущиеДанные);
	Если Элементы.ВыборСоответствийДО.текущиеДанные.ТипДанных = "Число" ИЛИ Элементы.ВыборСоответствийДО.текущиеДанные.ТипДанных = "Дата" Тогда
		СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийДО.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДолговыеОбязательства"), 
		Элементы.ВыборСоответствийДО.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийДО.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийДО.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийДО.ТекущиеДанные.Обновлять);
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийДОПараметрыСвязиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Лев(Элемент.Родитель.ТекущиеДанные.ТипДанных, СтрДлина("Справочник ссылка:")) = "Справочник ссылка:" Тогда
		ВыбранноеЗначение = "Наименование=" + ВыбранноеЗначение + ";";		
	ИначеЕсли Элемент.Родитель.ТекущиеДанные.ТипДанных = "Число" ИЛИ 
			Элемент.Родитель.ТекущиеДанные.ТипДанных = "Дата" Тогда
		ВыбранноеЗначение = ВыбранноеЗначение;
	Иначе
		ВыбранноеЗначение = ВыбранноеЗначение + "|0||";
			СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийДО.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДолговыеОбязательства"), 
		Элементы.ВыборСоответствийДО.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийДО.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийДО.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийДО.ТекущиеДанные.Обновлять);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийИДПараметрыСвязиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ИсполнительныеДокументы");
	ВыборСоответствийСвязи(ЭтаФорма, Элементы.ВыборСоответствийИД.ТекущиеДанные);
	Если Элементы.ВыборСоответствийИД.текущиеДанные.ТипДанных = "Число" ИЛИ Элементы.ВыборСоответствийИД.текущиеДанные.ТипДанных = "Дата" Тогда
	СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийИД.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ИсполнительныеДокументы"), 
		Элементы.ВыборСоответствийИД.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийИД.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийИД.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийИД.ТекущиеДанные.Обновлять);
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийИДПараметрыСвязиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Лев(Элемент.Родитель.ТекущиеДанные.ТипДанных, СтрДлина("Справочник ссылка:")) = "Справочник ссылка:" Тогда
		ВыбранноеЗначение = "Наименование=" + ВыбранноеЗначение + ";";		
	ИначеЕсли Элемент.Родитель.ТекущиеДанные.ТипДанных = "Число" ИЛИ 
			Элемент.Родитель.ТекущиеДанные.ТипДанных = "Дата" Тогда
		ВыбранноеЗначение = ВыбранноеЗначение;
	Иначе
		ВыбранноеЗначение = ВыбранноеЗначение + "|0||";
	КонецЕсли;
	СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийИД.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ИсполнительныеДокументы"), 
		Элементы.ВыборСоответствийИД.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийИД.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийИД.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийИД.ТекущиеДанные.Обновлять);
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийЗПараметрыСвязиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Залоги");
	ВыборСоответствийСвязи(ЭтаФорма, Элементы.ВыборСоответствийЗ.ТекущиеДанные);
	Если Элементы.ВыборСоответствийЗ.текущиеДанные.ТипДанных = "Число" ИЛИ Элементы.ВыборСоответствийЗ.текущиеДанные.ТипДанных = "Дата" Тогда
	СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийЗ.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Залоги"), 
		Элементы.ВыборСоответствийЗ.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийЗ.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийЗ.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийЗ.ТекущиеДанные.Обновлять);
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийЗПараметрыСвязиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Лев(Элемент.Родитель.ТекущиеДанные.ТипДанных, СтрДлина("Справочник ссылка:")) = "Справочник ссылка:" Тогда
		ВыбранноеЗначение = "Наименование=" + ВыбранноеЗначение + ";";		
	ИначеЕсли Элемент.Родитель.ТекущиеДанные.ТипДанных = "Число" ИЛИ 
			Элемент.Родитель.ТекущиеДанные.ТипДанных = "Дата" Тогда
		ВыбранноеЗначение = ВыбранноеЗначение;
	Иначе
		ВыбранноеЗначение = ВыбранноеЗначение + "|0||";
	КонецЕсли;
	СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийЗ.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Залоги"), 
		Элементы.ВыборСоответствийЗ.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийЗ.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийЗ.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийЗ.ТекущиеДанные.Обновлять);
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийДПараметрыСвязиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДоговорыКонтрагентов");
	ВыборСоответствийСвязи(ЭтаФорма, Элементы.ВыборСоответствийД.ТекущиеДанные);
	Если Элементы.ВыборСоответствийД.текущиеДанные.ТипДанных = "Число" ИЛИ Элементы.ВыборСоответствийД.текущиеДанные.ТипДанных = "Дата" Тогда
	СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийД.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДоговорыКонтрагентов"), 
		Элементы.ВыборСоответствийД.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийД.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийД.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийД.ТекущиеДанные.Обновлять);
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийДПараметрыСвязиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Лев(Элемент.Родитель.ТекущиеДанные.ТипДанных, СтрДлина("Справочник ссылка:")) = "Справочник ссылка:" Тогда
		ВыбранноеЗначение = "Наименование=" + ВыбранноеЗначение + ";";		
	ИначеЕсли Элемент.Родитель.ТекущиеДанные.ТипДанных = "Число" ИЛИ 
			Элемент.Родитель.ТекущиеДанные.ТипДанных = "Дата" Тогда
		ВыбранноеЗначение = ВыбранноеЗначение;
	Иначе
		ВыбранноеЗначение = ВыбранноеЗначение + "|0||";
	КонецЕсли;
	СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийД.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДоговорыКонтрагентов"), 
		Элементы.ВыборСоответствийД.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийД.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийД.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийД.ТекущиеДанные.Обновлять);
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийУПараметрыСвязиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Услуги");
	ВыборСоответствийСвязи(ЭтаФорма, Элементы.ВыборСоответствийУ.ТекущиеДанные);
	Если Элементы.ВыборСоответствийУ.текущиеДанные.ТипДанных = "Число" ИЛИ Элементы.ВыборСоответствийУ.текущиеДанные.ТипДанных = "Дата" Тогда
	СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийУ.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Услуги"), 
		Элементы.ВыборСоответствийУ.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийУ.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийУ.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийУ.ТекущиеДанные.Обновлять);
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийУПараметрыСвязиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Лев(Элемент.Родитель.ТекущиеДанные.ТипДанных, СтрДлина("Справочник ссылка:")) = "Справочник ссылка:" Тогда
		ВыбранноеЗначение = "Наименование=" + ВыбранноеЗначение + ";";		
	ИначеЕсли Элемент.Родитель.ТекущиеДанные.ТипДанных = "Число" ИЛИ 
			Элемент.Родитель.ТекущиеДанные.ТипДанных = "Дата" Тогда
		ВыбранноеЗначение = ВыбранноеЗначение;
	Иначе
		ВыбранноеЗначение = ВыбранноеЗначение + "|0||";
	КонецЕсли;
	СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийУ.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Услуги"), 
		Элементы.ВыборСоответствийУ.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийУ.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийУ.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийУ.ТекущиеДанные.Обновлять);
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийДолжникПараметрыСвязиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Должники");
	ВыборСоответствийСвязи(ЭтаФорма, Элементы.ВыборСоответствийДолжник.ТекущиеДанные);
	Если Элементы.ВыборСоответствийДолжник.текущиеДанные.ТипДанных = "Число" ИЛИ Элементы.ВыборСоответствийДолжник.текущиеДанные.ТипДанных = "Дата" Тогда
		СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийДолжник.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Должники"), 
		Элементы.ВыборСоответствийДолжник.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийДолжник.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийДолжник.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийДолжник.ТекущиеДанные.Обновлять);
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийДолжникПараметрыСвязиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Лев(Элемент.Родитель.ТекущиеДанные.ТипДанных, СтрДлина("Справочник ссылка:")) = "Справочник ссылка:" Тогда
		ВыбранноеЗначение = "Наименование=" + ВыбранноеЗначение + ";";		
	ИначеЕсли Элемент.Родитель.ТекущиеДанные.ТипДанных = "Число" ИЛИ 
			Элемент.Родитель.ТекущиеДанные.ТипДанных = "Дата" Тогда
		ВыбранноеЗначение = ВыбранноеЗначение;
	Иначе
		ВыбранноеЗначение = ВыбранноеЗначение + "|0||";
	КонецЕсли;
	СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийДолжник.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Должники"), 
		Элементы.ВыборСоответствийДолжник.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийДолжник.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийДолжник.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийДолжник.ТекущиеДанные.Обновлять);
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийКонтрагентПараметрыСвязиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Контрагенты");
	ВыборСоответствийСвязи(ЭтаФорма, Элементы.ВыборСоответствийКонтрагент.ТекущиеДанные);
	Если Элементы.ВыборСоответствийКонтрагент.текущиеДанные.ТипДанных = "Число" ИЛИ Элементы.ВыборСоответствийКонтрагент.текущиеДанные.ТипДанных = "Дата" Тогда
	СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийКонтрагент.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Контрагенты"), 
		Элементы.ВыборСоответствийКонтрагент.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийКонтрагент.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийКонтрагент.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийКонтрагент.ТекущиеДанные.Обновлять);
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийКонтрагентПараметрыСвязиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Лев(Элемент.Родитель.ТекущиеДанные.ТипДанных, СтрДлина("Справочник ссылка:")) = "Справочник ссылка:" Тогда
		ВыбранноеЗначение = "Наименование=" + ВыбранноеЗначение + ";";		
	ИначеЕсли Элемент.Родитель.ТекущиеДанные.ТипДанных = "Число" ИЛИ 
			Элемент.Родитель.ТекущиеДанные.ТипДанных = "Дата" Тогда
		ВыбранноеЗначение = ВыбранноеЗначение;
	Иначе
		ВыбранноеЗначение = ВыбранноеЗначение + "|0||";
	КонецЕсли;
	СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийКонтрагент.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Контрагенты"), 
		Элементы.ВыборСоответствийКонтрагент.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийКонтрагент.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийКонтрагент.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийКонтрагент.ТекущиеДанные.Обновлять);
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийКредиторПараметрыСвязиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Кредиторы");
	ВыборСоответствийСвязи(ЭтаФорма, Элементы.ВыборСоответствийКредитор.ТекущиеДанные);
	Если Элементы.ВыборСоответствийКредитор.текущиеДанные.ТипДанных = "Число" ИЛИ Элементы.ВыборСоответствийКредитор.текущиеДанные.ТипДанных = "Дата" Тогда
	СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийКредитор.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Кредиторы"), 
		Элементы.ВыборСоответствийКредитор.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийКредитор.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийКредитор.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийКредитор.ТекущиеДанные.Обновлять);
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийКредиторПараметрыСвязиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Лев(Элемент.Родитель.ТекущиеДанные.ТипДанных, СтрДлина("Справочник ссылка:")) = "Справочник ссылка:" Тогда
		ВыбранноеЗначение = "Наименование=" + ВыбранноеЗначение + ";";		
	ИначеЕсли Элемент.Родитель.ТекущиеДанные.ТипДанных = "Число" ИЛИ 
			Элемент.Родитель.ТекущиеДанные.ТипДанных = "Дата" Тогда
		ВыбранноеЗначение = ВыбранноеЗначение;
	Иначе
		ВыбранноеЗначение = ВыбранноеЗначение + "|0||";
	КонецЕсли;
	СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийКредитор.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Кредиторы"), 
		Элементы.ВыборСоответствийКредитор.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийКредитор.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийКредитор.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийКредитор.ТекущиеДанные.Обновлять);
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийКредиторПараметрыСвязиПриИзменении(Элемент)
	СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийКредитор.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Кредиторы"), 
		Элементы.ВыборСоответствийКредитор.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийКредитор.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийКредитор.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийКредитор.ТекущиеДанные.Обновлять);
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийКонтрагентПараметрыСвязиПриИзменении(Элемент)
	СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийКонтрагент.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Контрагенты"), 
		Элементы.ВыборСоответствийКонтрагент.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийКонтрагент.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийКонтрагент.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийКонтрагент.ТекущиеДанные.Обновлять);
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийДолжникПараметрыСвязиПриИзменении(Элемент)
	СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийДолжник.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Должники"), 
		Элементы.ВыборСоответствийДолжник.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийДолжник.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийДолжник.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийДолжник.ТекущиеДанные.Обновлять);
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийУПараметрыСвязиПриИзменении(Элемент)
	СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийУ.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Услуги"), 
		Элементы.ВыборСоответствийУ.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийУ.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийУ.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийУ.ТекущиеДанные.Обновлять);
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийДПараметрыСвязиПриИзменении(Элемент)
	СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийД.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДоговорыКонтрагентов"), 
		Элементы.ВыборСоответствийД.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийД.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийД.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийД.ТекущиеДанные.Обновлять);
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийЗПараметрыСвязиПриИзменении(Элемент)
	СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийЗ.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Залоги"), 
		Элементы.ВыборСоответствийЗ.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийЗ.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийЗ.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийЗ.ТекущиеДанные.Обновлять);
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийИДПараметрыСвязиПриИзменении(Элемент)
	СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийИД.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ИсполнительныеДокументы"), 
		Элементы.ВыборСоответствийИД.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийИД.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийИД.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийИД.ТекущиеДанные.Обновлять);
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийДОПараметрыСвязиПриИзменении(Элемент)
	СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийДО.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДолговыеОбязательства"), 
		Элементы.ВыборСоответствийДО.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийДО.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийДО.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийДО.ТекущиеДанные.Обновлять);
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийКредиторОбновлятьПриИзменении(Элемент)
	СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийКредитор.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Кредиторы"), 
		Элементы.ВыборСоответствийКредитор.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийКредитор.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийКредитор.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийКредитор.ТекущиеДанные.Обновлять);
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийКонтрагентОбновлятьПриИзменении(Элемент)
	СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийКонтрагент.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Контрагенты"), 
		Элементы.ВыборСоответствийКонтрагент.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийКонтрагент.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийКонтрагент.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийКонтрагент.ТекущиеДанные.Обновлять);
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийДолжникОбновлятьПриИзменении(Элемент)
	СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийДолжник.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Должники"), 
		Элементы.ВыборСоответствийДолжник.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийДолжник.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийДолжник.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийДолжник.ТекущиеДанные.Обновлять);
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийУОбновлятьПриИзменении(Элемент)
	СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийУ.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Услуги"), 
		Элементы.ВыборСоответствийУ.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийУ.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийУ.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийУ.ТекущиеДанные.Обновлять);
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийДОбновлятьПриИзменении(Элемент)
	СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийД.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДоговорыКонтрагентов"), 
		Элементы.ВыборСоответствийД.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийД.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийД.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийД.ТекущиеДанные.Обновлять);
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийЗОбновлятьПриИзменении(Элемент)
	СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийЗ.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Залоги"), 
		Элементы.ВыборСоответствийЗ.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийЗ.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийЗ.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийЗ.ТекущиеДанные.Обновлять);
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийИДОбновлятьПриИзменении(Элемент)
	СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийИД.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ИсполнительныеДокументы"), 
		Элементы.ВыборСоответствийИД.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийИД.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийИД.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийИД.ТекущиеДанные.Обновлять);
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийДООбновлятьПриИзменении(Элемент)
	СохранитьПараметрыСвязи(
		Элементы.ВыборСоответствийДО.ТекущиеДанные.ИмяСвойства, 
		ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДолговыеОбязательства"), 
		Элементы.ВыборСоответствийДО.ТекущиеДанные.ВидРеквизита, 
		Элементы.ВыборСоответствийДО.ТекущиеДанные.КодСвойства,
		Элементы.ВыборСоответствийДО.ТекущиеДанные.ПараметрыСвязи,
		Элементы.ВыборСоответствийДО.ТекущиеДанные.Обновлять);
КонецПроцедуры


&НаСервере
Процедура СохранитьПараметрыСвязи(ИмяСвойства, Назначение, ВидРеквизита, КодСвойства, ПараметрыСвязи, Обновлять)
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяСвойства", ИмяСвойства);
	Отбор.Вставить("Назначение", Назначение);
	Отбор.Вставить("ВидРеквизита", ВидРеквизита);
	Отбор.Вставить("КодСвойства", КодСвойства);
	//Отбор.Вставить("Обновлять", Обновлять);
	Строка = Объект.НастройкаСоответствий.НайтиСтроки(Отбор);
	Строка[0].ПараметрыСвязи = ПараметрыСвязи;
	Строка[0].Обновлять = Обновлять;
КонецПроцедуры


&НаКлиенте
Процедура ЗагружатьОтветственныхД(Команда)
	ДобавитьОтветственных(ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДоговорыКонтрагентов"));
КонецПроцедуры


&НаКлиенте
Процедура ЗагружатьОтветственныхДО(Команда)
	ДобавитьОтветственных(ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ДолговыеОбязательства"));
КонецПроцедуры


&НаКлиенте
Процедура ЗагружатьОтветственныхДолжник(Команда)
	ДобавитьОтветственных(ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Должники"));
КонецПроцедуры


&НаКлиенте
Процедура ЗагружатьОтветственныхЗ(Команда)
	ДобавитьОтветственных(ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Залоги"));
КонецПроцедуры


&НаКлиенте
Процедура ЗагружатьОтветственныхИД(Команда)
	ДобавитьОтветственных(ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.ИсполнительныеДокументы"));
КонецПроцедуры


&НаКлиенте
Процедура ЗагружатьОтветственныхКонтрагент(Команда)
	ДобавитьОтветственных(ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Контрагенты"));
КонецПроцедуры


&НаКлиенте
Процедура ЗагружатьОтветственныхКредитор(Команда)
	ДобавитьОтветственных(ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Кредиторы"));
КонецПроцедуры


&НаКлиенте
Процедура ЗагружатьОтветственныхУ(Команда)
	ДобавитьОтветственных(ПредопределенноеЗначение("Перечисление.ВидыНазначенийСвойств.Услуги"));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОтветственных(Назначение)
	ДобавитьОтветственныхСервер(Назначение);
	РаспределитьНастройкиПоЗакладкам();
КонецПроцедуры

&НаСервере
Процедура ДобавитьОтветственныхСервер(Назначение)
	Отбор = Новый Структура;
	Отбор.Вставить("Назначение", Назначение);
	Отбор.Вставить("ВидРеквизита", Перечисления.ВидыРеквизитов.ОтветственныйСотрудник);
	Строки = Объект.НастройкаСоответствий.НайтиСтроки(Отбор);
	Если Строки.Количество() > 0 Тогда
		Для i = 0 По Строки.Количество() - 1 Цикл
			Объект.НастройкаСоответствий.Удалить(Строки[i]);
		КонецЦикла;			
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ТипыСотрудников.Наименование,
		                      |	ТипыСотрудников.Код
		                      |ИЗ
		                      |	ПланВидовХарактеристик.ТипыСотрудников КАК ТипыСотрудников
		                      |ГДЕ
		                      |	ТипыСотрудников.ПометкаУдаления = ЛОЖЬ");
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			Строка = Объект.НастройкаСоответствий.Добавить();
			Строка.ИмяСвойства = Результат.Наименование;
			Строка.Назначение = Назначение;
			Строка.ВидРеквизита = Перечисления.ВидыРеквизитов.ОтветственныйСотрудник;
			Строка.КодСвойства = Результат.Код;
			Строка.ТипДанных = "Справочник ссылка: Пользователи";
		КонецЦикла;		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуДанных(Команда)
	ЗаполнитьТаблицуДанныхНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуДанныхНаСервере()	

	Попытка
		КолонкиТаблицыЦенДоб = Новый Массив;
		КолонкиТаблицыЦенДоб.Добавить("тзДанные");
		
		ЭтаФорма.ИзменитьРеквизиты(,КолонкиТаблицыЦенДоб);
	Исключение
//		Сообщить("ааа");
	КонецПопытки;
	
	Попытка
		Элементы.Удалить(Элементы["тзДанные"]);
	Исключение
//		Сообщить("ббб");
	КонецПопытки;
	
	
	Реквизит = Новый РеквизитФормы("тзДанные", Новый ОписаниеТипов("ТаблицаЗначений"), "", "тзДанные");
	КолонкиТаблицыЦенДоб = Новый Массив;
	КолонкиТаблицыЦенДоб.Добавить(Реквизит);
	ЭтаФорма.ИзменитьРеквизиты(КолонкиТаблицыЦенДоб);

	ПолеТаблицы = Элементы.Добавить("тзДанные", Тип("ТаблицаФормы"), Элементы.ГруппаЗагруженные);
	ПолеТаблицы.ПутьКДанным = "тзДанные";
	ПолеТаблицы.ИзменятьПорядокСтрок = Ложь;
	ПолеТаблицы.ИзменятьСоставСтрок = Ложь;
	
	
	РеквизитНомерСтроки = Новый РеквизитФормы("НомерСтроки", Новый Описаниетипов("Число"), "тзДанные", "N");
	КолонкиТаблицыЦенДоб = Новый Массив;
	КолонкиТаблицыЦенДоб.Добавить(РеквизитНомерСтроки);
	ПолеФормы = Элементы.Добавить("тзДанныеНомерСтроки", Тип("ПолеФормы"), Элементы["тзДанные"]);
	ПолеФормы.Заголовок = "N";
	ЭтаФорма.ИзменитьРеквизиты(КолонкиТаблицыЦенДоб);
	
	Попытка		
		ПолеФормы.ПутьКДанным = "тзДанные.НомерСтроки";			
	Исключение
		Сообщить(ОписаниеОшибки());		
	КонецПопытки;
	ПолеФормы.Вид = ВидПоляФормы.ПолеВвода;
	
	Для Каждого Элемент Из Объект.НастройкаСоответствий Цикл
		Имя = СтрЗаменить(Строка(Элемент.Назначение)," ", "") + "_" + СтрЗаменить(Строка(Элемент.ВидРеквизита), " ", "") + "_" + СтрЗаменить(Строка(Элемент.КодСвойства), " ", "_");
		Синоним = Элемент.ИмяСвойства;
		Если Элемент.ВидРеквизита = ПредопределенноеЗначение("Перечисление.ВидыРеквизитов.Код") Тогда
			ТипЗначения = Новый ОписаниеТипов("Строка");
		ИначеЕсли Элемент.ВидРеквизита = ПредопределенноеЗначение("Перечисление.ВидыРеквизитов.Наименование") Тогда
			ТипЗначения = Новый ОписаниеТипов("Строка");
		ИначеЕсли Элемент.ВидРеквизита = ПредопределенноеЗначение("Перечисление.ВидыРеквизитов.Процедура") Тогда
			ТипЗначения = Новый ОписаниеТипов("Строка");
		ИначеЕсли Элемент.ВидРеквизита = ПредопределенноеЗначение("Перечисление.ВидыРеквизитов.ДополнительноеСведение") ИЛИ Элемент.ВидРеквизита = ПредопределенноеЗначение("Перечисление.ВидыРеквизитов.ДополнительныйРеквизит") Тогда
			ТипЗначения = НайтиТипПВХ(Элемент.КодСвойства);
		ИначеЕсли Элемент.ВидРеквизита = ПредопределенноеЗначение("Перечисление.ВидыРеквизитов.ОтветственныйСотрудник") Тогда
			ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
		ИначеЕсли Элемент.ВидРеквизита = ПредопределенноеЗначение("Перечисление.ВидыРеквизитов.ТипЗадолженности") ИЛИ Элемент.ВидРеквизита = ПредопределенноеЗначение("Перечисление.ВидыРеквизитов.ТипОбъекта") Тогда
			ТипЗначения = Новый ОписаниеТипов(СтрЗаменить(СтрЗаменить(Элемент.ТипДанных, ":", "."), " ", ""));
		КонецЕсли;
			
			
		//2 Добавляем колонку в таблицу тзДанные
		Реквизит = Новый РеквизитФормы(Имя, ТипЗначения, "тзДанные", Синоним);
		//РеквизитНомерСтроки = Новый РеквизитФормы("НомерСтроки", Новый Описаниетипов("Число"), "тзДанные", "N");
		КолонкиТаблицыЦенДоб = Новый Массив;
		КолонкиТаблицыЦенДоб.Добавить(Реквизит);
		
		ПолеФормы = Элементы.Добавить("тзДанные" + Имя, Тип("ПолеФормы"), Элементы["тзДанные"]);
		ПолеФормы.Заголовок = Синоним;
		ЭтаФорма.ИзменитьРеквизиты(КолонкиТаблицыЦенДоб);
		
		Попытка		
			ПолеФормы.ПутьКДанным = "тзДанные." + Имя;			
		Исключение
			Сообщить(ОписаниеОшибки());		
		КонецПопытки;
		ПолеФормы.Вид = ВидПоляФормы.ПолеВвода; 		
	КонецЦикла;
	
	п = 1;
	Для Каждого Элемент Из Объект.НастройкаСоответствийКонтакты Цикл					
		//Добавляем колонку в таблицу тзДанные
		РеквизитВидТелефона = Новый РеквизитФормы("Должники_ВидТелефона" + п, новый ОписаниеТипов("Строка"), "тзДанные", "Вид телефона" + п);
		РеквизитНомер = Новый РеквизитФормы("Должники_Номер" + п, новый ОписаниеТипов("Строка"), "тзДанные", "Номер" + п);
		РеквизитКонтактноеЛицо = Новый РеквизитФормы("Должники_КонтактноеЛицо" + п, новый ОписаниеТипов("Строка"), "тзДанные", "Контактное лицо" + п);
		
		КолонкиТаблицыЦенДоб = Новый Массив;
		КолонкиТаблицыЦенДоб.Добавить(РеквизитВидТелефона);
		КолонкиТаблицыЦенДоб.Добавить(РеквизитНомер);
		КолонкиТаблицыЦенДоб.Добавить(РеквизитКонтактноеЛицо);
		
		ПолеФормы = Элементы.Добавить("тзДанные" + "Должники_ВидТелефона" + п, Тип("ПолеФормы"), Элементы["тзДанные"]);
		ПолеФормы.Заголовок = "Вид телефона" + п;
		ЭтаФорма.ИзменитьРеквизиты(КолонкиТаблицыЦенДоб);
		Попытка		
			ПолеФормы.ПутьКДанным = "тзДанные." + "Должники_ВидТелефона" + п;			
		Исключение
			Сообщить(ОписаниеОшибки());		
		КонецПопытки;	
		ПолеФормы.Вид = ВидПоляФормы.ПолеВвода;
		
		ПолеФормы = Элементы.Добавить("тзДанные" + "Должники_Номер" + п, Тип("ПолеФормы"), Элементы["тзДанные"]);
		ПолеФормы.Заголовок = "Номер" + п;
		//ЭтаФорма.ИзменитьРеквизиты(КолонкиТаблицыЦенДоб);
		Попытка		
			ПолеФормы.ПутьКДанным = "тзДанные." + "Должники_Номер" + п;			
		Исключение
			Сообщить(ОписаниеОшибки());		
		КонецПопытки;	
		ПолеФормы.Вид = ВидПоляФормы.ПолеВвода;
		
		ПолеФормы = Элементы.Добавить("тзДанные" + "Должники_КонтактноеЛицо" + п, Тип("ПолеФормы"), Элементы["тзДанные"]);
		ПолеФормы.Заголовок = "Контактное лицо" + п;
		//ЭтаФорма.ИзменитьРеквизиты(КолонкиТаблицыЦенДоб);
		Попытка		
			ПолеФормы.ПутьКДанным = "тзДанные." + "Должники_КонтактноеЛицо" + п;			
		Исключение
			Сообщить(ОписаниеОшибки());		
		КонецПопытки;
		ПолеФормы.Вид = ВидПоляФормы.ПолеВвода;
		
		
		п = п + 1;
	КонецЦикла;

	
	Мегазагрузка(РеквизитФормыВЗначение("тзДанные"));
КонецПроцедуры

&НаСервере
Функция НайтиТипПВХ(КодСвойства)
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоКоду(КодСвойства);
	Возврат Свойство.ТипЗначения;
КонецФункции

&НаКлиенте
Процедура СохранитьНастройкиСоответствий(Команда)
	Если Объект.Настройка = ПредопределенноеЗначение("Справочник.НастройкиСоответствий.ПустаяСсылка") Тогда
		Форма = ПолучитьФорму("Справочник.НастройкиСоответствий.Форма.ФормаЭлемента",, ЭтаФорма);
		//Форма.ОткрытьМодально();
		Форма.Открыть();
		//ДП = Новый Структура;
		//ДП.Вставить("Форма",Форма);
		//ОткрытьФорму(Форма.ИмяФормы,,ЭтаФорма,,,,Новый ОписаниеОповещения("СохранитьНастройкиСоответствийЗавершение",ЭтаФорма,ДП),);
		//Если Не Форма.Объект.Ссылка.Пустая() Тогда
		//	Объект.Настройка = Форма.Объект.Ссылка;
		//	ЗагрузитьВыборСоответствий(Объект.Настройка);
		//	РаспределитьНастройкиПоЗакладкам();
		//КонецЕсли;
	Иначе
		СохранитьНастройкиСервер(Объект.Настройка);
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "НастройкиСоответствийФормаЭлементаЗакрыть" Тогда
		Если Не Параметр.Пустая() Тогда
			Объект.Настройка = Параметр;
			ЗагрузитьВыборСоответствий(Объект.Настройка);
			РаспределитьНастройкиПоЗакладкам();
		КонецЕсли;	
		
		//ИначеЕсли ИмяСобытия = "ЗакрытиеФормыУстановкаПараметровСвязиВыборКолонок" Тогда
		
	КонецЕсли;
	
	Если ИмяСобытия = "ДобавитьРеквизит" И Источник = ЭтаФорма Тогда
		
		ДопРеквизитЗавершение(Параметр["Результат"], Параметр);
	
	КонецЕсли;
	
	Если ИмяСобытия = "ДобавитьРеквизиты" И Источник = ЭтаФорма Тогда
	
		Результаты = Параметр["Результат"];
		Для каждого Результат Из Результаты Цикл
		
			ДопРеквизитЗавершение(Результат, Параметр);
		
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиСервер(Настройка)
	ОбъектНастройка = Настройка.ПолучитьОбъект();
	ОбъектНастройка.НастройкаСоответствий.Очистить();
	ОбъектНастройка.НастройкаСоответствий.Загрузить(Объект.НастройкаСоответствий.Выгрузить());
	
	ОбъектНастройка.ТипДоговоров = Объект.ТипДоговоров;
	ОбъектНастройка.ТипДолговыхОбязательств = Объект.ТипДолговыхОбязательств;
	ОбъектНастройка.ТипЗалогов = Объект.ТипЗалогов;
	ОбъектНастройка.ТипУслуг = Объект.ТипУслуг;
	ОбъектНастройка.ТипИсполнительныхДокументов = Объект.ТипИсполнительныхДокументов;
	ОбъектНастройка.ТипДолжников = Объект.ТипДолжников;
	ОбъектНастройка.ТипКонтрагентов = Объект.ТипКонтрагентов;
	ОбъектНастройка.ТипКредиторов = Объект.ТипКредиторов;
	
	ОбъектНастройка.УчетПоДО = Объект.УчетПоДО;
	ОбъектНастройка.УчетПоИД = Объект.УчетПоИД;
	ОбъектНастройка.УчетПоЗ = Объект.УчетПоЗ;
	ОбъектНастройка.УчетПоД = Объект.УчетПоД;
	ОбъектНастройка.УчетПоУ = Объект.УчетПоУ;
	ОбъектНастройка.УчетПоДолжникам = Объект.УчетПоДолжникам;
	ОбъектНастройка.УчетПоКредиторам = Объект.УчетПоКредиторам;
	ОбъектНастройка.УчетПоКонтрагентам = Объект.УчетПоКонтрагентам;
	
	ОбъектНастройка.КонтрольД = Объект.КонтрольД;
	ОбъектНастройка.КонтрольДО = Объект.КонтрольДО;
	ОбъектНастройка.КонтрольЗ = Объект.КонтрольЗ;
	ОбъектНастройка.КонтрольДолжники = Объект.КонтрольДолжники;
	ОбъектНастройка.КонтрольИД = Объект.КонтрольИД;
	ОбъектНастройка.КонтрольКонтрагенты = Объект.КонтрольКонтрагенты;
	ОбъектНастройка.КонтрольКредиторы = Объект.КонтрольКредиторы;
	ОбъектНастройка.КонтрольУ = Объект.КонтрольУ;
	
	
	ОбъектНастройка.НастройкаСоответствийКонтакты.Очистить();
	ОбъектНастройка.НастройкаСоответствийКонтакты.Загрузить(Объект.НастройкаСоответствийКонтакты.Выгрузить());	
	
	ОбъектНастройка.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиСоответствий(Команда)
	//Не используется
	Форма = ПолучитьФорму("Справочник.НастройкиСоответствий.Форма.ФормаВыбора",, ЭтаФорма);
	//Результат = Форма.ОткрытьМодально();
	Результат = ОткрытьФорму(Форма);
	Если Результат <> Неопределено Тогда
		ЗагрузитьВыборСоответствий(Результат);
		РаспределитьНастройкиПоЗакладкам();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВыборСоответствий(Результат)
	ЗначениеОбъект = РеквизитФормыВЗначение("Объект");
	ЗначениеОбъект.ЗагрузитьНастройкиСоответствий(Результат);
	ЗначениеВРеквизитФормы(ЗначениеОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПриИзменении(Элемент)
	ЗагрузитьВыборСоответствий(Объект.Настройка); 
	УстановитьВидимостьЗакладок();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиКак(Команда)
	Форма = ПолучитьФорму("Справочник.НастройкиСоответствий.Форма.ФормаЭлемента",, ЭтаФорма);
	//ОткрытьФорму
	//Форма.ОткрытьМодально();
	Форма.Открыть();
	//Если Не Форма.Объект.Ссылка.Пустая() Тогда
	//	Объект.Настройка = Форма.Объект.Ссылка;
	//	ЗагрузитьВыборСоответствий(Объект.Настройка);
	//	РаспределитьНастройкиПоЗакладкам();
	//КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	Модифицированность = Истина;
	//тзДанные.Очистить();	
//	Мегазагрузка();	
КонецПроцедуры

&НаСервере
Процедура Мегазагрузка(тзДанные);
	ЗаполнитьДанные(тзДанные);	 

	ЗаполнитьДанные1(тзДанные);
	Таб = РеквизитФормыВЗначение("тзДанные");
	Кол = Таб.Количество() - 1;
	Для н = 0 По Кол Цикл
		//Стр = тзДанные[н];
		ПустаяСтрокаТаблицы = Истина;
		Для Номер = 1 По ПолеИсходнойТаблицы.ШиринаТаблицы Цикл
			Если ЗначениеЗаполнено(ПолеИсходнойТаблицы.Область("R" + Формат(Кол-н+2, "ЧГ=") + "C" + 
				Формат(Номер, "ЧГ=")).Текст) Тогда
				ПустаяСтрокаТаблицы = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПустаяСтрокаТаблицы Тогда
			Таб.Удалить(Кол-н);
		КонецЕсли;
	КонецЦикла;
	ЗначениеВРеквизитФормы(Таб, "тзДанные");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМассив(Массив, ТипДанных)
	
КонецПроцедуры

&НаСервере
// Заполняет данные.
//
// Параметры:
//  ДокументОбъект - документ; -
//  ПолеИмпорта  - поле импорта;
//  ИмяТаблицы   - имя таблицы. -
// 
Процедура ЗаполнитьДанные(Таб)
	                               
	Таб = РеквизитФормыВЗначение("тзДанные");
	Для НомерСтрокиТаблицыИмпорта = 2 По ПолеИсходнойТаблицы.ВысотаТаблицы Цикл
		//ПустаяСтрокаТаблицы = Истина;
		//Для Номер = 1 По ПолеИсходнойТаблицы.ШиринаТаблицы Цикл
		//	Если ЗначениеЗаполнено(ПолеИсходнойТаблицы.Область("R" + Формат(НомерСтрокиТаблицыИмпорта, "ЧГ=") + "C" + 
		//		Формат(Номер, "ЧГ=")).Текст) Тогда
		//		ПустаяСтрокаТаблицы = Ложь;
		//		Прервать;
		//	КонецЕсли;
		//КонецЦикла;
		//
		//Если Не ПустаяСтрокаТаблицы Тогда
		//	Таб.Добавить();
		//КонецЕсли;		
		Таб.Добавить();
	КонецЦикла;
	Для Каждого ТекСтрока Из Объект.НастройкаСоответствий Цикл
		Имя = СтрЗаменить(Строка(ТекСтрока.Назначение)," ", "") + "_" + СтрЗаменить(Строка(ТекСтрока.ВидРеквизита), " ", "") + "_" + СтрЗаменить(Строка(ТекСтрока.КодСвойства), " ", "_");
		Массив = Новый Массив;
	//	ЗаполнитьМассив(Массив, ТекСтрока.ТипДанных);
	//	Для НомерСтрокиТаблицыИмпорта = 2 По ПолеИсходнойТаблицы.ВысотаТаблицы Цикл
			Если ТекСтрока.ТипДанных = "Строка" ИЛИ ТекСтрока.ТипДанных = "Число" ИЛИ ТекСтрока.ТипДанных = "Дата" Тогда
			//	Для Каждого Элемент Из СписокРеквизитов Цикл
					//Если (ТипЗнч(ТекСтрока.ИмяДанных) = Тип("Строка") И Элемент.Представление = Строка(ТекСтрока.ИмяДанных)) ИЛИ 
					//		(ТипЗнч(ТекСтрока.ИмяДанных) <> Тип("Строка") И 
					//			Элемент.Значение = "_" + СтрЗаменить(ТекСтрока.ИмяДанных.Код, " ", "_")) Тогда
						стр = РаботаСДокументами.СформироватьСтрокуИзДанных821(
								ТекСтрока.ПараметрыСвязи, 1, ПолеИсходнойТаблицы, Массив, ТекСтрока.ТипДанных);
				
			КонецЕсли;
	    Таб.ЗагрузитьКолонку(Массив, Имя);
	КонецЦикла;
	//Контакты
	п = 1;
	Для Каждого ТекСтрока Из Объект.НастройкаСоответствийКонтакты Цикл	
		ИмяВидТелефона = "Должники_ВидТелефона" + п;
		ИмяНомер = "Должники_Номер" + п;
		ИмяКонтактноеЛицо = "Должники_КонтактноеЛицо" + п;
		
		МассивВидТелефона = Новый Массив;
		МассивНомер = Новый Массив;
		МассивКонтактноеЛицо = Новый Массив;
		
		стр = РаботаСДокументами.СформироватьСтрокуИзДанных821(
								ТекСтрока.ВидТелефона, 1, ПолеИсходнойТаблицы, МассивВидТелефона, новый описаниеТипов("СправочникСсылка.ВидыТелефонов"));
		Таб.ЗагрузитьКолонку(МассивВидТелефона, ИмяВидТелефона);
		
		стр = РаботаСДокументами.СформироватьСтрокуИзДанных821(
								ТекСтрока.Номер, 1, ПолеИсходнойТаблицы, МассивНомер, новый описаниеТипов("Строка"));
		Таб.ЗагрузитьКолонку(МассивНомер, ИмяНомер);
		
		стр = РаботаСДокументами.СформироватьСтрокуИзДанных821(
								ТекСтрока.КонтактноеЛицо, 1, ПолеИсходнойТаблицы, МассивКонтактноеЛицо, новый описаниеТипов("Строка"));
		Таб.ЗагрузитьКолонку(МассивКонтактноеЛицо, ИмяКонтактноеЛицо);
		
		Для Каждого Элемент Из Таб Цикл
			Если ТекСтрока.ВидТелефонаПоУмолчанию <> Справочники.ВидыТелефонов.ПустаяСсылка() Тогда
				Элемент[ИмяВидТелефона] = ТекСтрока.ВидТелефонаПоУмолчанию;
			КонецЕсли;
		КонецЦикла;	
		
		п = п + 1;	
	КонецЦикла;

	ЗначениеВРеквизитФормы(Таб, "тзДанные");
КонецПроцедуры

&НаСервере
// Заполняет данные.
//
// Параметры:
//  ДокументОбъект - документ; -
//  ПолеИмпорта  - поле импорта;
//  ИмяТаблицы   - имя таблицы. -
// 
Процедура ЗаполнитьДанные1(тзДанные)
	ТзДанные = РеквизитФормыВЗначение("тзДанные");
	Для НомерСтрокиТаблицыИмпорта = 2 По ПолеИсходнойТаблицы.ВысотаТаблицы Цикл
		//ПустаяСтрокаТаблицы = Истина;
		//Для Номер = 1 По ПолеИсходнойТаблицы.ШиринаТаблицы Цикл
		//	Если ЗначениеЗаполнено(ПолеИсходнойТаблицы.Область("R" + Формат(НомерСтрокиТаблицыИмпорта, "ЧГ=") + "C" + 
		//			Формат(Номер, "ЧГ=")).Текст) Тогда
		//		ПустаяСтрокаТаблицы = Ложь;
		//		Прервать;
		//	КонецЕсли;
		//КонецЦикла;
		//
		//Если ПустаяСтрокаТаблицы Тогда
		//	Продолжить;
		//КонецЕсли;
		
		НоваяСтрока = тзДанные[НомерСтрокиТаблицыИмпорта - 2];
		НоваяСтрока.НомерСтроки = НомерСтрокиТаблицыИмпорта - 1;
		Для Каждого ТекСтрока Из Объект.НастройкаСоответствий Цикл
			ИмяДанных = СтрЗаменить(Строка(ТекСтрока.Назначение)," ", "") + "_" + СтрЗаменить(Строка(ТекСтрока.ВидРеквизита), " ", "") + "_" + СтрЗаменить(Строка(ТекСтрока.КодСвойства), " ", "_");
			Если НЕ ЗначениеЗаполнено(ТекСтрока.ПараметрыСвязи) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекСтрока.ТипДанных = "Строка" Тогда
			//	Для Каждого Элемент Из СписокРеквизитов Цикл
			//		Если (ТипЗнч(ТекСтрока.ИмяДанных) = Тип("Строка") И Элемент.Представление = Строка(ТекСтрока.ИмяДанных)) ИЛИ 
			//				(ТипЗнч(ТекСтрока.ИмяДанных) <> Тип("Строка") И 
			//					Элемент.Значение = "_" + СтрЗаменить(ТекСтрока.ИмяДанных.Код, " ", "_")) Тогда
			//			НоваяСтрока[Элемент.Значение] = РаботаСДокументами.СформироватьСтрокуИзДанных82(
			//					ТекСтрока.ПараметрыСвязи, НомерСтрокиТаблицыИмпорта, ПолеИсходнойТаблицы);
			//			Прервать;
			//		КонецЕсли
			//	КонецЦикла;	
				
			ИначеЕсли ТекСтрока.ТипДанных = "Строка: Адрес" Тогда
				//Для Каждого Элемент Из СписокРеквизитов Цикл
				//	Если Элемент.Представление = Строка(ТекСтрока.ИмяДанных) Тогда	
						Строки = СтрЗаменить(ТекСтрока.ПараметрыСвязи, ";", Символы.ПС);
						Если СтрЧислоСтрок(Строки) = 1 Тогда
							НоваяСтрока[ИмяДанных] = РаботаСДокументами.СформироватьСтрокуИзДанных82(
									ТекСтрока.ПараметрыСвязи, НомерСтрокиТаблицыИмпорта, ПолеИсходнойТаблицы);
						Иначе
							СписокПараметров = Новый СписокЗначений();
							Для Номер = 1 По СтрЧислоСтрок(Строки) Цикл
								Подстроки = СтрЗаменить(СтрПолучитьСтроку(Строки, Номер), "=", Символы.ПС);
								ЗначениеДляСписка = РаботаСДокументами.СформироватьСтрокуИзДанных82(
										СтрПолучитьСтроку(Подстроки, 2), НомерСтрокиТаблицыИмпорта, ПолеИсходнойТаблицы);
								ПредставлениеДляСписка = СтрПолучитьСтроку(Подстроки, 1);
								ЗначениеДляСписка = СтрЗаменить(ЗначениеДляСписка, ";", ",");
								Если ЗначениеЗаполнено(ЗначениеДляСписка) Тогда
									СписокПараметров.Добавить(ЗначениеДляСписка, ПредставлениеДляСписка); 
								КонецЕсли;
							КонецЦикла;
							
							ТипДома = "";
							ТипКорпуса = "";
							ТипКвартиры = "";
							Для Каждого Параметр Из СписокПараметров Цикл
								Если Параметр.Представление = "Населенный пункт" Тогда
									Параметр.Представление = "НаселенныйПункт";
									
								ИначеЕсли Параметр.Представление = "Дом" И ЗначениеЗаполнено(Параметр.Значение) Тогда
									ТипДома = "дом";
								ИначеЕсли Параметр.Представление = "Владение" И ТипДома = "" Тогда
									ТипДома = "владение";
									
								ИначеЕсли Параметр.Представление = "Корпус" И ЗначениеЗаполнено(Параметр.Значение) Тогда
									ТипКорпуса = "корпус";
								ИначеЕсли Параметр.Представление = "Строение" И ТипКорпуса = "" Тогда
									ТипКорпуса = "строение";
									
								ИначеЕсли Параметр.Представление = "Квартира" И ЗначениеЗаполнено(Параметр.Значение) Тогда
									ТипКвартиры = "кв.";
								ИначеЕсли Параметр.Представление = "Офис" И ТипКвартиры = "" Тогда
									ТипКвартиры = "оф.";	
								КонецЕсли;
							КонецЦикла;
							
							Если ТипДома = "дом" Тогда
								СписокПараметров.Добавить(ТипДома, "ТипДома");
								//Удалить Владение
								Для Каждого Параметр Из СписокПараметров Цикл
									Если Параметр.Представление = "Владение" Тогда
										СписокПараметров.Удалить(Параметр);
										Прервать;
									КонецЕсли;
								КонецЦикла;
							ИначеЕсли ТипДома = "владение" Тогда	
							    СписокПараметров.Добавить(ТипДома, "ТипДома");
								//Удалить Дом
								Для Каждого Параметр Из СписокПараметров Цикл
									Если Параметр.Представление = "Дом" Тогда
										СписокПараметров.Удалить(Параметр);
										Прервать;
									КонецЕсли;
								КонецЦикла;
								//Переименовать Владение в Дом
								Для Каждого Параметр Из СписокПараметров Цикл
									Если Параметр.Представление = "Владение" Тогда
										Параметр.Представление = "Дом";
										Прервать;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							
							Если ТипКорпуса = "корпус" Тогда
								СписокПараметров.Добавить(ТипКорпуса, "ТипКорпуса");
								//Удалить Строение
								Для Каждого Параметр Из СписокПараметров Цикл
									Если Параметр.Представление = "Строение" Тогда
										СписокПараметров.Удалить(Параметр);
										Прервать;
									КонецЕсли;
								КонецЦикла;
							ИначеЕсли ТипКорпуса = "строение" Тогда
								СписокПараметров.Добавить(ТипКорпуса, "ТипКорпуса");
								//Удалить Корпус
								Для Каждого Параметр Из СписокПараметров Цикл
									Если Параметр.Представление = "Корпус" Тогда
										СписокПараметров.Удалить(Параметр);
										Прервать;
									КонецЕсли;
								КонецЦикла;
								//Переименовать Строение в Корпус
								Для Каждого Параметр Из СписокПараметров Цикл
									Если Параметр.Представление = "Строение" Тогда
										Параметр.Представление = "Корпус";
										Прервать;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							
							Если ТипКвартиры = "кв." Тогда
								СписокПараметров.Добавить(ТипКвартиры, "ТипКвартиры");
								//Удалить Офис
								Для Каждого Параметр Из СписокПараметров Цикл
									Если Параметр.Представление = "Офис" Тогда
										СписокПараметров.Удалить(Параметр);
										Прервать;
									КонецЕсли;
								КонецЦикла;
							ИначеЕсли ТипКвартиры = "оф." Тогда
								СписокПараметров.Добавить(ТипКвартиры, "ТипКвартиры");
								//Удалить Квартира
								Для Каждого Параметр Из СписокПараметров Цикл
									Если Параметр.Представление = "Квартира" Тогда
										СписокПараметров.Удалить(Параметр);
										Прервать;
									КонецЕсли;
								КонецЦикла;
								//Переименовать Офис в Квартира
								Для Каждого Параметр Из СписокПараметров Цикл
									Если Параметр.Представление = "Офис" Тогда
										Параметр.Представление = "Квартира";
										Прервать;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
								
							//Теперь список значений надо запихнуть в форму и сделать для него представление
							Представление = "";
							Страна = "";
							Индекс = "";
							Регион = "";
							Район = "";
							Город = "";
							НаселенныйПункт = "";
							Улица = "";
							Дом = "";
							Корпус = "";
							Квартира = "";
							ПредставлениеСтрокой = "";
							ТипДома = ""; 
							ТипКорпуса = ""; 
							ТипКвартиры = "";
							СтрокаВыполнить = "";
							Для Каждого Параметр Из СписокПараметров Цикл
								СтрокаВыполнить = СтрокаВыполнить + Параметр.Представление + "=""" + Параметр.Значение + """;";
								Представление = Представление + Параметр.Представление + "=" + Параметр.Значение + ";";
							КонецЦикла;
							Выполнить(СтрокаВыполнить);
							ПредставлениеСтрокой = СформироватьПредставлениеАдреса(Страна, Индекс, Регион, Район, 
									Город, НаселенныйПункт, Улица, Дом, Корпус, Квартира, ТипДома, ТипКорпуса, 
									ТипКвартиры);			
							НоваяСтрока[ИмяДанных] = ПредставлениеСтрокой + ";" + Представление;
						КонецЕсли;
					///	Прервать;
				//	КонецЕсли
				//КонецЦикла;
				
			ИначеЕсли ТекСтрока.ТипДанных = "Строка: Телефон" Тогда
				//Для Каждого Элемент Из СписокРеквизитов Цикл
				//	Если Элемент.Представление = Строка(ТекСтрока.ИмяДанных) Тогда	
						Строки = СтрЗаменить(ТекСтрока.ПараметрыСвязи, ";", Символы.ПС);
						Если СтрЧислоСтрок(Строки) = 1 Тогда
							ЗначениеДляСписка = РаботаСДокументами.СформироватьСтрокуИзДанных82(
									ТекСтрока.ПараметрыСвязи, НомерСтрокиТаблицыИмпорта, ПолеИсходнойТаблицы);
							ЗначениеДляСписка = СтрЗаменить(ЗначениеДляСписка, ";", ",");
							СписокПараметров = ПропарситьТелефон(ЗначениеДляСписка);
						Иначе
							СписокПараметров = Новый СписокЗначений();
							Для Номер = 1 По СтрЧислоСтрок(Строки) Цикл
								Подстроки = СтрЗаменить(СтрПолучитьСтроку(Строки, Номер), "=", Символы.ПС);
								ЗначениеДляСписка = РаботаСДокументами.СформироватьСтрокуИзДанных82(
										СтрПолучитьСтроку(Подстроки, 2), НомерСтрокиТаблицыИмпорта, ПолеИсходнойТаблицы);
								ПредставлениеДляСписка = СтрПолучитьСтроку(Подстроки, 1);
								ЗначениеДляСписка = СтрЗаменить(ЗначениеДляСписка, ";", ",");
								Если ЗначениеЗаполнено(ЗначениеДляСписка) Тогда
									СписокПараметров.Добавить(ЗначениеДляСписка, ПредставлениеДляСписка); 
								КонецЕсли;
							КонецЦикла;
							
							Для Каждого Параметр Из СписокПараметров Цикл
								Если Параметр.Представление = "Код страны" Тогда
									Параметр.Представление = "КодСтраны";
								ИначеЕсли Параметр.Представление = "Код города" Тогда
									Параметр.Представление = "КодГорода";
								ИначеЕсли Параметр.Представление = "Номер телефона" Тогда
									Параметр.Представление = "НомерТелефона";
								ИначеЕсли Параметр.Представление = "Добавочный номер" Тогда
									Параметр.Представление = "Добавочный";	
								КонецЕсли;	
							КонецЦикла;
						КонецЕсли;	
						
						//Теперь список значений надо запихнуть в форму и сделать для него представление
						Представление = "";
						КодСтраны = "";
						КодГорода = "";
						НомерТелефона = "";
						Добавочный = "";
						Комментарий = "";
						СтрокаВыполнить = "";
						Для Каждого Параметр Из СписокПараметров Цикл
							СтрокаВыполнить = СтрокаВыполнить + Параметр.Представление + "=""" + Параметр.Значение + """;";
							Представление = Представление + Параметр.Представление + "=" + Параметр.Значение + ";";
						КонецЦикла;
						Выполнить(СтрокаВыполнить);
						ПредставлениеСтрокой = СформироватьПредставлениеТелефона(КодСтраны, КодГорода, НомерТелефона, 
								Добавочный, Комментарий);			
						НоваяСтрока[ИмяДанных] = ПредставлениеСтрокой + ";" + Представление;
						//Прервать;
				//	КонецЕсли
				//КонецЦикла;
				
			ИначеЕсли ТекСтрока.ТипДанных = "Число" Тогда
				Попытка
					Результат = Число(СтрЗаменить(РаботаСДокументами.НайтиЗначениеВТаблицеИмпорта(
							НомерСтрокиТаблицыИмпорта, ТекСтрока.ПараметрыСвязи, 
							ПолеИсходнойТаблицы)," ",""));
				Исключение
					Результат = 0;
				КонецПопытки;
				
				//Для Каждого Элемент Из Объект.ВыборСоответствий Цикл
				//	Если Элемент.ИмяДанных = ТекСтрока.ИмяДанных Тогда
						НоваяСтрока[ИмяДанных] = Результат;
						//Прервать;
				//	КонецЕсли
				//КонецЦикла;
				
			ИначеЕсли ТекСтрока.ТипДанных = "Дата" Тогда
				Попытка
					Результат = Дата(РаботаСДокументами.НайтиЗначениеВТаблицеИмпорта(НомерСтрокиТаблицыИмпорта, 
							ТекСтрока.ПараметрыСвязи, ПолеИсходнойТаблицы));
				Исключение
					Результат = Технический.ПреобразоватьДату(РаботаСДокументами.НайтиЗначениеВТаблицеИмпорта(
							НомерСтрокиТаблицыИмпорта, ТекСтрока.ПараметрыСвязи, 
							ПолеИсходнойТаблицы));
				КонецПопытки;
				Если Год(Результат) > 3999 Тогда
					Результат = Дата("00010101000000");
				КонецЕсли;						
				//Для Каждого Элемент Из Объект.ВыборСоответствий Цикл
				//	Если Элемент.ИмяДанных = ТекСтрока.ИмяДанных Тогда
						НоваяСтрока[ИмяДанных] = Результат;
				//		Прервать;
				//	КонецЕсли
				//КонецЦикла;
					
			ИначеЕсли Найти(ТекСтрока.ТипДанных, "Перечисление ссылка:") = 1 
					Или НРег(ТекСтрока.ТипДанных) = Нрег(Тип("СправочникСсылка.тсЗначенияСвойствОбъектов")) 
					Или ТекСтрока.ТипДанных = "Булево" Тогда
				РаботаСДокументами.НайтиИЗаписатьПеречислениеНов(ТекСтрока, НоваяСтрока, НомерСтрокиТаблицыИмпорта, ПолеИсходнойТаблицы);
								
			Иначе	
				//Для Каждого Элемент Из СписокРеквизитов Цикл
				//	Если Элемент.Представление = Строка(ТекСтрока.ИмяДанных) Тогда
						РаботаСДокументами.НайтиИЗаписатьДокументИлиСправочник81(ИмяДанных, 
								ТекСтрока.ТипДанных, ТекСтрока.ПараметрыСвязи,
								НоваяСтрока, НомерСтрокиТаблицыИмпорта, ПолеИсходнойТаблицы);		
						//Прервать;
				//	КонецЕсли;		
				//КонецЦикла;				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
	
	Для Каждого Элемент Из тзДанные Цикл
		Если Объект.ТипДоговоров <> Справочники.ТипыДоговоровКонтрагентов.ПустаяСсылка() Тогда
			Элемент["Договорыконтрагентов_Типобъекта_"] = Объект.ТипДоговоров;
		КонецЕсли;
		Если Объект.ТипДолговыхОбязательств <> Справочники.ТипыДолговыхОбязательств.ПустаяСсылка() Тогда
			Элемент["Долговыеобязательства_Типобъекта_"] = Объект.ТипДолговыхОбязательств;
		КонецЕсли;
		Если Объект.ТипДолжников <> Справочники.ЮрФизЛицо.ПустаяСсылка() Тогда
			Элемент["Должники_Типобъекта_"] = Объект.ТипДолжников;
		КонецЕсли;
		Если Объект.ТипКонтрагентов <> Справочники.ЮрФизЛицо.ПустаяСсылка() Тогда
			Элемент["Контрагенты_Типобъекта_"] = Объект.ТипКонтрагентов;
		КонецЕсли;
		Если Объект.ТипЗалогов <> Справочники.ТипыЗалогов.ПустаяСсылка() Тогда
			Элемент["Залоги_Типобъекта_"] = Объект.ТипЗалогов;
		КонецЕсли;
		Если Объект.ТипИсполнительныхДокументов <> Справочники.ТипыИсполнительныхЛистов.ПустаяСсылка() Тогда
			Элемент["Исполнительныедокументы_Типобъекта_"] = Объект.ТипИсполнительныхДокументов;
		КонецЕсли;
		Если Объект.ТипКредиторов <> Справочники.ЮрФизЛицо.ПустаяСсылка() Тогда
			Элемент["Кредиторы_Типобъекта_"] = Объект.ТипКредиторов;
		КонецЕсли;
		Если Объект.ТипУслуг <> Справочники.ТипыУслуг.ПустаяСсылка() Тогда
			Элемент["Услуги_Типобъекта_"] = Объект.ТипУслуг;
		КонецЕсли;
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(тзДанные, "тзДанные");
КонецПроцедуры

&НаСервере
Функция СформироватьПредставлениеТелефона(КодСтраны, КодГорода, НомерТелефона, Добавочный, Комментарий)
	Представление = СокрЛП(КодСтраны);	
	Если Не ПустаяСтрока(КодГорода) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", " ") + "(" + СокрЛП(КодГорода) + ")";
	КонецЕсли;	
	Если Не ПустаяСтрока(НомерТелефона) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", " ") + СокрЛП(НомерТелефона);
	КонецЕсли;	
	Если НЕ ПустаяСтрока(Добавочный) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") + "доб. " + СокрЛП(Добавочный);
	КонецЕсли;	
	Если НЕ ПустаяСтрока(Комментарий) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") + СокрЛП(Комментарий);
	КонецЕсли;	
	Возврат Представление;	
КонецФункции

&НаСервере
Функция СформироватьПредставлениеАдреса(Страна, Индекс, Регион, Район, Город, НаселенныйПункт, Улица, Дом, Корпус, 
		Квартира, ТипДома, ТипКорпуса, ТипКвартиры)
	Представление = "";
	
	Если ЗначениеЗаполнено(Страна) И ВРег(Страна) <> ВРег(Справочники.СтраныМира.Россия.Наименование) Тогда
		ДополнитьПредставлениеАдреса(Страна, ", ", Представление);
	КонецЕсли;
	ДополнитьПредставлениеАдреса(СокрЛП(Индекс),             ", ", Представление);
	ДополнитьПредставлениеАдреса(СокрЛП(Регион),             ", ", Представление);
	ДополнитьПредставлениеАдреса(СокрЛП(Район),              ", ", Представление);
	ДополнитьПредставлениеАдреса(СокрЛП(Город),              ", ", Представление);
	ДополнитьПредставлениеАдреса(СокрЛП(НаселенныйПункт),    ", ", Представление);
	ДополнитьПредставлениеАдреса(СокрЛП(Улица),              ", ", Представление);
	ДополнитьПредставлениеАдреса(СокрЛП(Дом),                ", " + ТипДома    + " № ", Представление);
	ДополнитьПредставлениеАдреса(СокрЛП(Корпус),             ", " + ТипКорпуса + " "  , Представление);
	ДополнитьПредставлениеАдреса(СокрЛП(Квартира),           ", " + ТипКвартиры       , Представление);
	
	Если СтрДлина(Представление) > 2 Тогда
		Представление = Сред(Представление, 3);
	КонецЕсли;
	
	Возврат Представление;	
КонецФункции

&НаСервере
Процедура ДополнитьПредставлениеАдреса(Дополнение, СтрокаКонкатенации, Представление)
	Если Дополнение <> "" Тогда
		Представление = Представление + СтрокаКонкатенации + Дополнение;
	КонецЕсли;	
КонецПроцедуры

//! Тел
&НаСервере
Функция ПропарситьТелефон(Знач Телефон)
//	Если СписокСимволов = Неопределено ИЛИ СписокЧисел = Неопределено Тогда
		СписокСимволов = Новый СписокЗначений();
		СписокСимволов.Добавить("0", "0");
		СписокСимволов.Добавить("1", "1");
		СписокСимволов.Добавить("2", "2");
		СписокСимволов.Добавить("3", "3");
		СписокСимволов.Добавить("4", "4");
		СписокСимволов.Добавить("5", "5");
		СписокСимволов.Добавить("6", "6");
		СписокСимволов.Добавить("7", "7");
		СписокСимволов.Добавить("8", "8");
		СписокСимволов.Добавить("9", "9");
		СписокСимволов.Добавить("(", "(");
		СписокСимволов.Добавить(")", ")");
		СписокСимволов.Добавить(" ", " ");
		СписокСимволов.Добавить("-", " ");
		
		СписокЧисел = Новый СписокЗначений();
		СписокЧисел.Добавить("0", "0");
		СписокЧисел.Добавить("1", "1");
		СписокЧисел.Добавить("2", "2");
		СписокЧисел.Добавить("3", "3");
		СписокЧисел.Добавить("4", "4");
		СписокЧисел.Добавить("5", "5");
		СписокЧисел.Добавить("6", "6");
		СписокЧисел.Добавить("7", "7");
		СписокЧисел.Добавить("8", "8");
		СписокЧисел.Добавить("9", "9");
//	КонецЕсли;
	
	СписокРезультат = Новый СписокЗначений();
	Телефон = СокрЛП(Телефон);
	
	Для Индекс = 1 По СтрДлина(Телефон) Цикл
		СимволТелефона = Сред(Телефон, Индекс, 1);
		Если СписокСимволов.НайтиПоЗначению(СимволТелефона) = Неопределено Тогда
			СписокРезультат.Добавить(Сред(Телефон, Индекс), "Комментарий"); 
			Телефон = Лев(Телефон, Индекс - 1);
			Прервать;
		КонецЕсли;  
	КонецЦикла;
	
	КолОткрСкобок = 0;
	КолЗакрСкобок = 0;
	НомерПервой = 0;
	НомерПоследней = 0;
	Для Индекс = 1 По СтрДлина(Телефон) Цикл
		СимволТелефона = Сред(Телефон, Индекс, 1);
		Если СимволТелефона = "(" Тогда
			Если Индекс > 1 И НомерПервой = 0 Тогда
				НомерПервой = Индекс; 
			КонецЕсли;	
			КолОткрСкобок = КолОткрСкобок + 1;
		ИначеЕсли СимволТелефона = ")" Тогда
			НомерПоследней = Индекс;
			КолЗакрСкобок = КолЗакрСкобок + 1;
		КонецЕсли;
	КонецЦикла;	
	
	Если КолОткрСкобок <> КолЗакрСкобок Тогда
		СписокРезультат.Добавить(Телефон, "НомерТелефона");
		Возврат СписокРезультат;
	Иначе
		Если КолОткрСкобок = 0 Тогда
			Телефон = ОставитьТолькоИзСписка(Телефон, СписокЧисел);
			Если СтрДлина(Телефон) > 10 Тогда
				СписокРезультат.Добавить(Лев(Телефон, СтрДлина(Телефон)-10), "КодСтраны");
                Телефон = Прав(Телефон, 10);
			КонецЕсли;
			СписокРезультат.Добавить(ВставитьТире(Телефон), "НомерТелефона");
			Возврат СписокРезультат;
		ИначеЕсли КолОткрСкобок = 1 И Лев(Телефон, 1) = "(" Тогда
			КодГорода = Сред(Телефон, 2, НомерПоследней - 2);
			КодГорода = ОставитьТолькоИзСписка(КодГорода, СписокЧисел);	
			СписокРезультат.Добавить(КодГорода, "КодГорода");
			Телефон = Сред(Телефон, НомерПоследней + 1);
			Телефон = ОставитьТолькоИзСписка(Телефон, СписокЧисел);
			СписокРезультат.Добавить(ВставитьТире(Телефон), "НомерТелефона");
			Возврат СписокРезультат;
		Иначе
			КодСтраны = Лев(Телефон, НомерПервой - 1);
			КодСтраны = ОставитьТолькоИзСписка(КодСтраны, СписокЧисел);
			СписокРезультат.Добавить(КодСтраны, "КодСтраны");
			КодГорода = Сред(Телефон, НомерПервой + 1, НомерПоследней - НомерПервой - 1);
			КодГорода = ОставитьТолькоИзСписка(КодГорода, СписокЧисел);	
			СписокРезультат.Добавить(КодГорода, "КодГорода");
			Телефон = Сред(Телефон, НомерПоследней + 1);
			Телефон = ОставитьТолькоИзСписка(Телефон, СписокЧисел);
			СписокРезультат.Добавить(ВставитьТире(Телефон), "НомерТелефона");
			Возврат СписокРезультат;
		КонецЕсли;
	КонецЕсли;	
КонецФункции

//! Тел
&НаСервере
Функция ОставитьТолькоИзСписка(Телефон, СписокЧисел)
	ТелНовый = "";
	Для Индекс = 1 По СтрДлина(Телефон) Цикл
		СимволТелефона = Сред(Телефон, Индекс, 1);
		Если СписокЧисел.НайтиПоЗначению(СимволТелефона) <> Неопределено Тогда
			ТелНовый = ТелНовый + СимволТелефона;
		КонецЕсли;
	КонецЦикла;
	Возврат ТелНовый;
КонецФункции

//! Тел
&НаСервере
Функция ВставитьТире(Знач Телефон)
	Длн = СтрДлина(Телефон);
	//Если Длн > 10 Тогда
	//	Возврат Лев(Телефон, Длн-10) + "-" + ПоделитьТире(Сред(Телефон, Длн-9, 6), 3) + "-" + ПоделитьТире(Прав(Телефон, 4), 2); 
	//Иначе
	Если Длн > 8 Тогда
		Возврат ПоделитьТире(Лев(Телефон, Длн-4), 3) + "-" + Сред(Телефон, Длн-3, 2) + "-" + Прав(Телефон, 2); 
	ИначеЕсли Длн = 8 ИЛИ Длн = 6 ИЛИ Длн = 4 Тогда
	    Возврат ПоделитьТире(Телефон, 2);
	ИначеЕсли Длн = 7 ИЛИ Длн = 5 Тогда
		Возврат Лев(Телефон, 3) + "-" + ПоделитьТире(Сред(Телефон, 4), 2);
	Иначе
		Возврат Телефон;
	КонецЕсли;
КонецФункции

//! Тел
&НаСервере
Функция ПоделитьТире(Знач Телефон, ЧислоЦифр)
	НовыйТел = "";
	Пока СтрДлина(Телефон) > 0 Цикл
		НовыйТел = Прав(Телефон, ЧислоЦифр) + "-" + НовыйТел;
		Телефон = Лев(Телефон, СтрДлина(Телефон) - ЧислоЦифр);
	КонецЦикла;
	Возврат Лев(НовыйТел, СтрДлина(НовыйТел)-1);
КонецФункции

&НаКлиенте
Процедура ВыполнитьЗагрузку(Команда)
	Если КонтрольЗаполнения() Тогда
		ВыполнитьЗагрузкуСервер();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция КонтрольЗаполнения()
	Возврат КонтрольЗаполненияСервер();	
КонецФункции

&НаСервере
Функция КонтрольЗаполненияСервер()
	Загружать = Истина;
	Попытка
		ТаблицаЗначений = РеквизитФормыВЗначение("тзДанные");
	Исключение
		Сообщить("Таблица загрузки не сформирована!");
		Загружать = Ложь;
	КонецПопытки;
	
	Если Загружать Тогда
		ЗначениеОбъект = РеквизитФормыВЗначение("Объект");
		Контроль = ЗначениеОбъект.КонтрольЗаполнения(ТаблицаЗначений);
		ЗначениеВРеквизитФормы(ЗначениеОбъект, "Объект");	
		Возврат Контроль;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ВыполнитьЗагрузкуСервер()
	Загружать = Истина;
	Попытка
		ТаблицаЗначений = РеквизитФормыВЗначение("тзДанные");
	Исключение
		Сообщить("Таблица загрузки не сформирована!");
		Загружать = Ложь;
	КонецПопытки;
	Если Загружать Тогда
		НачатьТранзакцию();
		Попытка
			ЗначениеОбъект = РеквизитФормыВЗначение("Объект");
			ЗначениеОбъект.ЗагрузитьДанные(ТаблицаЗначений, ПолеИсходнойТаблицы);
			ЗначениеВРеквизитФормы(ЗначениеОбъект, "Объект");
			Сообщить("Загрузка данных успешно выполнена!");
			ЗафиксироватьТранзакцию();
		Исключение
			Сообщить("При загрузке данных произошла ошибка!");
			Сообщить(ОписаниеОшибки());
			ОтменитьТранзакцию();
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СравнитьСИмеющимисяДаннымиНаСервере()
	//	тзДанные = Новый ТаблицаЗначений;
	Попытка
		ОбъектыДляСравнения.Очистить();
		Для Каждого Элемент из ЭтаФорма.тзДанные Цикл
			Если Объект.УчетПоДО Тогда
				ПроизвестиСравнение(Элемент, Перечисления.ВидыНазначенийСвойств.ДолговыеОбязательства, "КодДО", Справочники.ДолговыеОбязательства); 
			КонецЕсли;
			Если Объект.УчетПоДолжникам Тогда
				ПроизвестиСравнение(Элемент, Перечисления.ВидыНазначенийСвойств.Должники, "КодКонтрагента", Справочники.Контрагенты);
			КонецЕсли;
			Если Объект.УчетПоКонтрагентам Тогда
				ПроизвестиСравнение(Элемент, Перечисления.ВидыНазначенийСвойств.Контрагенты, "КодКонтрагента", Справочники.Контрагенты);
			КонецЕсли;
			Если Объект.УчетПоКредиторам Тогда
				ПроизвестиСравнение(Элемент, Перечисления.ВидыНазначенийСвойств.Кредиторы, "КодКонтрагента", Справочники.Контрагенты);
			КонецЕсли;
			Если Объект.УчетПоД Тогда
				ПроизвестиСравнение(Элемент, Перечисления.ВидыНазначенийСвойств.ДоговорыКонтрагентов, "КодДоговора", Справочники.ДоговорыКонтрагентов);
			КонецЕсли;
			Если Объект.УчетПоУ Тогда
				ПроизвестиСравнение(Элемент, Перечисления.ВидыНазначенийСвойств.Услуги, "КодУслуги", Справочники.УслугиПоДоговору);
			КонецЕсли;
			Если Объект.УчетПоИД Тогда
				ПроизвестиСравнение(Элемент, Перечисления.ВидыНазначенийСвойств.ИсполнительныеДокументы, "КодИД", Справочники.ИсполнительныеДокументы);
			КонецЕсли;
			Если Объект.УчетПоЗ Тогда
				ПроизвестиСравнение(Элемент, Перечисления.ВидыНазначенийСвойств.Залоги, "НомерЗалога", Справочники.Залоги);
			КонецЕсли;
		КонецЦикла;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ПроизвестиСравнение(Элемент, Назначение, ИмяКлюча, СправочникМенеджер)
	ОбъектСсылка = СправочникМенеджер.НайтиПоРеквизиту(ИмяКлюча, Элемент[СтрЗаменить(Строка(Назначение), " ", "") + "_Код_"]);
	Если ОбъектСсылка <> СправочникМенеджер.ПустаяСсылка() Тогда
		МассивДопРеквизитов = Объект.НастройкаСоответствий.НайтиСтроки(Новый Структура("Назначение, ВидРеквизита", Назначение, Перечисления.ВидыРеквизитов.ДополнительныйРеквизит));
		Для Каждого Реквизит Из МассивДопРеквизитов Цикл 	
			Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоКоду(Реквизит.КодСвойства);
			Если ОбъектСсылка.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Свойство)).Количество() > 0 Тогда
				ИсходныеДанные = ОбъектСсылка.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Свойство))[0].Значение;
			Иначе 
				ИсходныеДанные = Неопределено;
			КонецЕсли;
			ЗагружаемыеДанные = Элемент[СтрЗаменить(Строка(Назначение), " ", "") + "_Дополнительныйреквизит_" + СтрЗаменить(Реквизит.КодСвойства, " ", "_")];
			Если ИсходныеДанные <> ЗагружаемыеДанные Тогда
				Строка = ОбъектыДляСравнения.Добавить();
				Строка.Объект = ОбъектСсылка;
				Строка.ТипОбъекта = Назначение;
				Строка.Реквизит = Свойство;
				Строка.ИсходныеДанные = ИсходныеДанные;
				Строка.ЗагружаемыеДанные = ЗагружаемыеДанные;
				Строка.НомерСтроки = Элемент.НомерСтроки;
			КонецЕсли;
		КонецЦикла;
		
		МассивДопСведений = Объект.НастройкаСоответствий.НайтиСтроки(Новый Структура("Назначение, ВидРеквизита", Назначение, Перечисления.ВидыРеквизитов.ДополнительноеСведение));
		Для Каждого Реквизит Из МассивДопСведений Цикл 	
			Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоКоду(Реквизит.КодСвойства);
			НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(ОбъектСсылка);
			НаборЗаписей.Отбор.Свойство.Установить(Свойство);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				ИсходныеДанные = НаборЗаписей[0].Значение;
				ЗагружаемыеДанные = Элемент[СтрЗаменить(Строка(Назначение), " ", "") + "_Дополнительноесведение_" + СтрЗаменить(Реквизит.КодСвойства, " ", "_")];
				Если ИсходныеДанные <> ЗагружаемыеДанные Тогда
					Строка = ОбъектыДляСравнения.Добавить();
					Строка.Объект = ОбъектСсылка;
					Строка.ТипОбъекта = Назначение;
					Строка.Реквизит = Свойство;
					Строка.ИсходныеДанные = ИсходныеДанные;
					Строка.ЗагружаемыеДанные = ЗагружаемыеДанные;
					Строка.НомерСтроки = Элемент.НомерСтроки;
				КонецЕсли;
			КонецЕСли;
		КонецЦикла;					
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьСИмеющимисяДанными(Команда)
	СравнитьСИмеющимисяДаннымиНаСервере();
	//ФормаСравнения = ПолучитьФорму("Обработка.ЗагрузкаРеестров.Форма.ФормаСравнения");
	//ФормаСравнения.Открыть();
КонецПроцедуры

&НаСервере
Процедура ПрименитьСравнениеНаСервере()
	МодифицироватьТаблицу();
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьСравнение(Команда)
	ПрименитьСравнениеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбновлятьРанееЗаписанныеПриИзменении(Элемент)
	Элементы.ГруппаСравнение.Видимость = Объект.ОбновлятьРанееЗаписанные;
КонецПроцедуры

&НаСервере
Процедура МодифицироватьТаблицу()	
	Для Каждого Элемент Из ОбъектыДляСравнения Цикл
		Если Не Элемент.Перезаписывать Тогда
			Если Элемент.Реквизит.ЭтоДополнительноеСведение Тогда
				ИмяДопСвойства = "_Дополнительноесведение_";
			Иначе
				ИмяДопСвойства = "_Дополнительныйреквизит_";
			КонецЕсли;		
			ИмяКолонки = СтрЗаменить(Строка(Элемент.ТипОбъекта), " ", "") + ИмяДопСвойства + СтрЗаменить(Элемент.Реквизит.Код, " ", "_");
			Выполнить("тзДанные[Элемент.НомерСтроки-1][ИмяКолонки] = Элемент.ИсходныеДанные");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ФлажкиСнять(Команда)
	Для Каждого Элемент Из ОбъектыДляСравнения Цикл
		Элемент.Перезаписывать = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ФлажкиУстановить(Команда)
	Для Каждого Элемент Из ОбъектыДляСравнения Цикл
		Элемент.Перезаписывать = Истина;
	КонецЦикла;
//	Элементы.ОбъектыДляСравнения.ВыделенныеСтроки
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайл(Команда)
	Загружено = РаботаСДокументами.мПрочитатьТабличныйДокументИзExcel(ПолеИсходнойТаблицы, ФайлИмпорта, 1);
КонецПроцедуры

&НаКлиенте
Процедура ВыборСоответствийСвязиКонтакты(Форма, ТекСтр, ИмяСвойства)
	//Не вызывается => Не используется
	Если ИмяСвойства = "КонтактноеЛицо" Тогда
		ФормаПараметров = ПолучитьФорму("Обработка.УстановкаПараметровСвязи.Форма.ФормаВыбораПараметров",,ЭтаФорма);
		ФормаПараметров.СписокКолонок = ВозвратКоллекцииРеквизитовСправочника("Справочник ссылка: КонтактныеЛицаПоДолжнику");
		ФормаПараметров.СписокПараметров = РасширитьСписокВыбора(СписокИменКолонок);
		ФормаПараметров.СписокВыбора = СписокИменКолонок;
		ФормаПараметров.ТипСтроки = "Справочник ссылка: КонтактныеЛицаПоДолжнику";		
	Иначе 
		ФормаПараметров = ПолучитьФорму("Обработка.УстановкаПараметровСвязи.Форма.ФормаВыбораКолонок",,ЭтаФорма);
		ФормаПараметров.СписокПараметров = СписокИменКолонок;
	КонецЕсли;
	
	ФормаПараметров.ИзменяемыйЭлемент = ТекСтр[ИмяСвойства];	
	//ФормаПараметров.ОткрытьМодально();
	ФормаПараметров.Открыть();
	ТекСтр[ИмяСвойства] = ФормаПараметров.Результат;
	Модифицированность = Истина;
КонецПроцедуры 


&НаСервере
Процедура СохранитьПараметрыСвязиКонтакты(УИД, ВидТелефона, Номер, КонтактноеЛицо, ВидТелефонаПоУмолчанию)
	Отбор = Новый Структура;
	Отбор.Вставить("УИД", УИД); 
		
	Строка = Объект.НастройкаСоответствийКонтакты.НайтиСтроки(Отбор);
	Если Строка.Количество() > 0 Тогда
		Строка = Строка[0];	
	Иначе
		Строка = Объект.НастройкаСоответствийКонтакты.Добавить();
	КонецЕсли; 
	Строка.УИД = УИД;
	Строка.ВидТелефона = ВидТелефона;
	Строка.Номер = Номер;
	Строка.КонтактноеЛицо = КонтактноеЛицо;
	Строка.ВидТелефонаПоУмолчанию = ВидТелефонаПоУмолчанию;
КонецПроцедуры


&НаКлиенте
Процедура ВыборСоответствийКонтактноеЛицоПараметрыСвязиПриИзменении(Элемент)
	СохранитьПараметрыСвязиКонтакты(
		Элементы.ВыборСоответствийКонтакты.ТекущиеДанные.УИД, 
		Элементы.ВыборСоответствийКонтакты.ТекущиеДанные.ВидТелефона, 
		Элементы.ВыборСоответствийКонтакты.ТекущиеДанные.Номер, 
		Элементы.ВыборСоответствийКонтакты.ТекущиеДанные.КонтактноеЛицо,
		Элементы.ВыборСоответствийКонтакты.ТекущиеДанные.ВидТелефонаПоУмолчанию);
КонецПроцедуры

&НаКлиенте
Процедура ВыборСоответствийКонтактыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока или Копирование Тогда 
		Элемент.ТекущиеДанные.УИД = новый УникальныйИдентификатор;	
	КонецЕсли;
	
	Если Копирование Тогда 
		СохранитьПараметрыСвязиКонтакты(
		Элемент.ТекущиеДанные.УИД, 
		Элемент.ТекущиеДанные.ВидТелефона, 
		Элемент.ТекущиеДанные.Номер, 
		Элемент.ТекущиеДанные.КонтактноеЛицо,
		Элемент.ТекущиеДанные.ВидТелефонаПоУмолчанию);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборСоответствийКонтактыКонтактноеЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)	
	ВыбранноеЗначение = ВыбранноеЗначение + "|0||";
	
	СохранитьПараметрыСвязиКонтакты(
		Элементы.ВыборСоответствийКонтакты.ТекущиеДанные.УИД, 
		Элементы.ВыборСоответствийКонтакты.ТекущиеДанные.ВидТелефона, 
		Элементы.ВыборСоответствийКонтакты.ТекущиеДанные.Номер, 
		Элементы.ВыборСоответствийКонтакты.ТекущиеДанные.КонтактноеЛицо,
		Элементы.ВыборСоответствийКонтакты.ТекущиеДанные.ВидТелефонаПоУмолчанию);	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСоответствийКонтактыПередУдалением(Элемент, Отказ)
	Отбор = Новый Структура;
	Отбор.Вставить("УИД", Элемент.ТекущиеДанные.УИД);
	Строка = Объект.НастройкаСоответствийКонтакты.НайтиСтроки(Отбор);
	Если Строка.Количество() > 0 Тогда
		Объект.НастройкаСоответствийКонтакты.Удалить(Строка[0]);
		РаспределитьНастройкиПоЗакладкам();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборСоответствийКонтактыНомерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ВыбранноеЗначение = ВыбранноеЗначение + "|0||";
	
	СохранитьПараметрыСвязиКонтакты(
		Элементы.ВыборСоответствийКонтакты.ТекущиеДанные.УИД, 
		Элементы.ВыборСоответствийКонтакты.ТекущиеДанные.ВидТелефона, 
		Элементы.ВыборСоответствийКонтакты.ТекущиеДанные.Номер, 
		Элементы.ВыборСоответствийКонтакты.ТекущиеДанные.КонтактноеЛицо,
		Элементы.ВыборСоответствийКонтакты.ТекущиеДанные.ВидТелефонаПоУмолчанию);
КонецПроцедуры

&НаКлиенте
Процедура ВыборСоответствийКонтактыВидТелефонаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ВыбранноеЗначение = ВыбранноеЗначение + "|0||";
	
	СохранитьПараметрыСвязиКонтакты(
		Элементы.ВыборСоответствийКонтакты.ТекущиеДанные.УИД, 
		Элементы.ВыборСоответствийКонтакты.ТекущиеДанные.ВидТелефона, 
		Элементы.ВыборСоответствийКонтакты.ТекущиеДанные.Номер, 
		Элементы.ВыборСоответствийКонтакты.ТекущиеДанные.КонтактноеЛицо,
		Элементы.ВыборСоответствийКонтакты.ТекущиеДанные.ВидТелефонаПоУмолчанию);

КонецПроцедуры

&НаКлиенте
Процедура ВыборСоответствийКонтактыВидТелефонаПоУмолчаниюПриИзменении(Элемент)
	СохранитьПараметрыСвязиКонтакты(
		Элементы.ВыборСоответствийКонтакты.ТекущиеДанные.УИД, 
		Элементы.ВыборСоответствийКонтакты.ТекущиеДанные.ВидТелефона, 
		Элементы.ВыборСоответствийКонтакты.ТекущиеДанные.Номер, 
		Элементы.ВыборСоответствийКонтакты.ТекущиеДанные.КонтактноеЛицо,
		Элементы.ВыборСоответствийКонтакты.ТекущиеДанные.ВидТелефонаПоУмолчанию);
КонецПроцедуры

#Область ПроверкаРеестра

#Область КомандыПроверки

&НаКлиенте
Процедура ПроверитьРеестр(Команда)
	
	Попытка
	
		ПроверитьРеестрНаСервере();
	
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Проверка не удалась: " + ОписаниеОшибки();
		Сообщение.Сообщить();
	КонецПопытки;
	
	Элементы.ГруппаОтоброжениеПроверки.Показать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКЗагружаемомуРеестру(Команда)
	
	ПерейтиКРеестру(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяемыеЗначенияВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ЯчейкаНомерКолонки = 6;
	НомерКолонки = Область.Лево;
	НомерСтроки = Область.Верх;
	
	Если НомерСтроки = 1 Тогда
	
		Возврат;
	
	КонецЕсли;
	ТекстЯчейки = Область.Текст;
	Если НомерКолонки <> ЯчейкаНомерКолонки Тогда
	
		ТекстЯчейки = ПроверяемыеЗначения.Область(НомерСтроки, ЯчейкаНомерКолонки).Текст;
	
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекстЯчейки) Тогда
	
		Возврат;
	
	КонецЕсли;
	
	НаборСтрок = СтрРазделить(ТекстЯчейки, ",");
	ИсходныйНомер = 1;
	Если НаборСтрок.Количество() > 0 Тогда
	
		ОписаниеЧисла = Новый ОписаниеТипов("Число");
		ИсходныйНомер = ОписаниеЧисла.ПривестиЗначение(НаборСтрок[0]);
	
	КонецЕсли;
	
	ПерейтиКРеестру(ИсходныйНомер);
	
КонецПроцедуры

#КонецОбласти

#Область ПереходКРеестру

&НаКлиенте
Процедура ПерейтиКРеестру(НомерСтроки)

	ЭтаФорма.ТекущийЭлемент = Элементы.ИсходнаяТаблица;
	Элементы.ПолеИсходнойТаблицы.ТекущаяОбласть = ПолеИсходнойТаблицы.Область(НомерСтроки, , НомерСтроки);

КонецПроцедуры


#КонецОбласти

#Область ПроверкаРеестра

&НаСервере
Процедура ПроверитьРеестрНаСервере()

	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("НачалоДанных", 2);
	ПараметрыПроверки.Вставить("ТаблицаПроверки", ПолеИсходнойТаблицы);
	
	НомерСтрокиШапки = 1;
	Попытка
	
		НастройкиДляПроверки = ПолучитьНастройки(
			ПараметрыПроверки["ТаблицаПроверки"],
			НомерСтрокиШапки
		);
	
	Исключение
		ВызватьИсключение "Не удалось получить настройки: " + ОписаниеОшибки();
	КонецПопытки;
	
	ПараметрыПроверки.Вставить("Настройки", НастройкиДляПроверки);
	ПараметрыПроверки.Вставить("Менеджер", Обработки.ЗагрузкаРеестров);
	ПараметрыПроверки.Вставить("Макет", "Макет_ПроверкаРеестра");
	
	ПолучитьЗначения(ПараметрыПроверки);
	УстановитьФункцииПроверки(ПараметрыПроверки);
	РезультатПроверки = Проверка_ПолученияДанныхОбщий.ПроверитьОшибки(ПараметрыПроверки);
	
	ПроверяемыеЗначения = РезультатПроверки["ОписаниеОшибок"];
	
	НераскрашиваемыеКоды = ПолучитьИменаНеРаскрашиваемыхКодов();
	РаскраситьЯчейки(ПараметрыПроверки, РезультатПроверки["Ячейки"], НераскрашиваемыеКоды);

КонецПроцедуры

&НаСервере
Процедура ПолучитьЗначения(ПараметрыПроверки)

	НачалоДанных = ПараметрыПроверки["НачалоДанных"];
	НастройкиПроверки = ПараметрыПроверки["Настройки"];
	Для Каждого Элемент Из НастройкиПроверки Цикл
	
		Если Элемент["ТипДанных"] = "Число"
			ИЛИ Элемент["ТипДанных"] = "Дата" Тогда
		
			ПолучитьИзОднойЯчейки(
				ПараметрыПроверки["ТаблицаПроверки"],
				Элемент,
				НачалоДанных
			);
		
		КонецЕсли;
		
		Если Элемент.ТипДанных = "Строка"
			И Элемент.ВидРеквизита = Перечисления.ВидыРеквизитов.Код Тогда
		
			ПолучитьИзСоставнойЯчейки(
				ПараметрыПроверки["ТаблицаПроверки"],
				Элемент,
				НачалоДанных
			);
		
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьФункцииПроверки(ПараметрыПроверки)

	НастройкиПроверки = ПараметрыПроверки["Настройки"];
	Для Каждого Элемент Из НастройкиПроверки Цикл
	
		ОписаниеТипаКолонки = Новый ОписаниеТипов(Элемент["ТипДанных"]);
		Элемент.Вставить("ОписаниеТипа", ОписаниеТипаКолонки);
		
		Если Элемент["ТипДанных"] = "Число" Тогда
			
			Элемент.Вставить("Функция", Проверка_ПолученияЧисла);
		
		КонецЕсли;
		
		Если Элемент["ТипДанных"] = "Дата" Тогда
			
			Элемент.Вставить("Функция", Проверка_ПолученияДаты);
		
		КонецЕсли;
		
		Если Элемент.ТипДанных = "Строка"
			И Элемент.ВидРеквизита = Перечисления.ВидыРеквизитов.Код Тогда
		
			Элемент.Вставить("Функция", Проверка_ПолученияКодаСправочника);
		
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПолучитьИзОднойЯчейки(ИсходныйДокумент, ДанныеДляПроверки, НачалоДанных)

	ЗначенияЯчеек = Новый Массив;
	Для НомерСтроки = НачалоДанных По ИсходныйДокумент.ВысотаТаблицы Цикл
	
		Текст = УправлениеЗагрузкойСервер.ТекстЯчейки(ИсходныйДокумент, НомерСтроки, ДанныеДляПроверки["НомерКолонки"]);
		ЗначенияЯчеек.Добавить(Текст);
	
	КонецЦикла;
	
	ДанныеДляПроверки.Вставить("ЗначенияЯчеек", ЗначенияЯчеек);

КонецПроцедуры

&НаСервере
Процедура ПолучитьИзСоставнойЯчейки(ИсходныйДокумент, ДанныеДляПроверки, НачалоДанных)

	ЗначенияЯчеек = Новый Массив;
	Для НомерСтроки = НачалоДанных По ИсходныйДокумент.ВысотаТаблицы Цикл
	
		Значение = РаботаСДокументами.СформироватьСтрокуИзДанных82(ДанныеДляПроверки["ИмяКолонки"], НомерСтроки, ИсходныйДокумент);
		ЗначенияЯчеек.Добавить(Значение);
	
	КонецЦикла;
	
	ДанныеДляПроверки.Вставить("ЗначенияЯчеек", ЗначенияЯчеек);

КонецПроцедуры

&НаСервере
Функция ПолучитьИменаНеРаскрашиваемыхКодов()

	ПропускаемыеКоды = Новый Массив;
	ПропускаемыеКоды.Добавить("Код должника");
	ПропускаемыеКоды.Добавить("Код контрагента");
	ПропускаемыеКоды.Добавить("Код кредитора");
	
	Возврат ПропускаемыеКоды;

КонецФункции // ()


&НаСервере
Процедура РаскраситьЯчейки(ПараметрыПроверки, ДанныеЯчеек, ПропускаемыеКоды)

	ТаблицаПроверки = ПараметрыПроверки["ТаблицаПроверки"];
	НастройкиДляПроверки = ПараметрыПроверки["Настройки"];
	
	Для каждого ОписаниеЯчейки Из ДанныеЯчеек Цикл
	
		Если ОписаниеЯчейки["ИмяКолонки"] = Неопределено
			И ПропускаемыеКоды.Найти(ОписаниеЯчейки["ИмяСвойства"]) = Неопределено Тогда
		
			ЗаполнитьОшибку(
				ТаблицаПроверки,
				ОписаниеЯчейки["НомерСтроки"],
				Неопределено,
				WebЦвета.БледноЗолотистый
			);
			Продолжить;
		
		КонецЕсли;
		
		Для каждого НастройкаПроверки Из НастройкиДляПроверки Цикл
		
			Если СтрСравнить(ОписаниеЯчейки["ИмяКолонки"], НастройкаПроверки["ИмяКолонки"]) = 0 Тогда
			
				ЗаполнитьОшибку(
					ТаблицаПроверки,
					ОписаниеЯчейки["НомерСтроки"],
					НастройкаПроверки["НомерКолонки"],
					WebЦвета.ЛососьСветлый
				);
			
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОшибку(ТаблицаПроверки, НомерСтроки, НомерКолонки, Цвет)

	Если НомерКолонки = Неопределено Тогда
	
		Ячейка = ТаблицаПроверки.Область(НомерСтроки, 1, НомерСтроки, ТаблицаПроверки.ШиринаТаблицы);
		
	Иначе
		
		Ячейка = ТаблицаПроверки.Область(НомерСтроки, НомерКолонки);
		
	КонецЕсли;
	
	Ячейка.ЦветФона = Цвет;

КонецПроцедуры

&НаСервере
Функция ПолучитьНомерКолонки(ТаблицаПроверки, НомерСтрокиШапки, ИскомаяКолонка)

	Для НомерКолонки = 1 По ТаблицаПроверки.ШиринаТаблицы Цикл
	
		ИмяКолонки = УправлениеЗагрузкойСервер.ТекстЯчейки(ТаблицаПроверки, НомерСтрокиШапки, НомерКолонки);
		Если СтрСравнить(ИмяКолонки, ИскомаяКолонка) = 0 Тогда
		
			Возврат НомерКолонки;
		
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции // ()

&НаСервере
Функция ПолучитьНастройки(ТаблицаПроверки, НомерСтрокиШапки)

	НастройкиДляПроверки = Новый Массив;
	Для Каждого Элемент Из Объект.НастройкаСоответствий Цикл
	
		Если Не НужноПроверить(Элемент) Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		НомерКолонки = 0;
		Если Элемент.ВидРеквизита <> Перечисления.ВидыРеквизитов.Код Тогда
		
			НомерКолонки = ПолучитьНомерКолонки(ТаблицаПроверки, НомерСтрокиШапки, Элемент.ПараметрыСвязи);
		
		КонецЕсли;
		
		Если НомерКолонки = Неопределено Тогда
		
			ВызватьИсключение "В загруженном документе нет колонки: " + Элемент.ПараметрыСвязи;
		
		КонецЕсли;
		
		НастройкаПроверки = Новый Структура;
		НастройкаПроверки.Вставить("ТипДанных", Элемент.ТипДанных);
		НастройкаПроверки.Вставить("ВидРеквизита", Элемент.ВидРеквизита);
		НастройкаПроверки.Вставить("ИмяСвойства", Элемент.ИмяСвойства);
		НастройкаПроверки.Вставить("ИмяКолонки", Элемент.ПараметрыСвязи);
		НастройкаПроверки.Вставить("НомерКолонки", НомерКолонки);
		
		НастройкиДляПроверки.Добавить(НастройкаПроверки);
	
	КонецЦикла;
	
	Возврат НастройкиДляПроверки;

КонецФункции // ()

Функция НужноПроверить(Элемент)

	Если Не Элемент.Обновлять
		И Не Элемент.ВидРеквизита = Перечисления.ВидыРеквизитов.Код
		И Не Элемент.ВидРеквизита = Перечисления.ВидыРеквизитов.ТипЗадолженности Тогда
	
		Возврат Ложь;
	
	КонецЕсли;
	
	Если Не АнализируемыеТипы(Элемент.ВидРеквизита, Элемент.ТипДанных)
		И Не Элемент.ВидРеквизита = Перечисления.ВидыРеквизитов.Код Тогда
	
		Возврат Ложь;
	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Элемент.ПараметрыСвязи) Тогда
	
		Возврат Ложь;
	
	КонецЕсли;

	Возврат Истина;

КонецФункции // ()


Функция АнализируемыеТипы(ВидРеквизита, ТипДанных)

	Если Не (ВидРеквизита = Перечисления.ВидыРеквизитов.ДополнительноеСведение
		ИЛИ ВидРеквизита = Перечисления.ВидыРеквизитов.ДополнительныйРеквизит
		ИЛИ ВидРеквизита = Перечисления.ВидыРеквизитов.ТипЗадолженности) Тогда
	
		Возврат Ложь;
	
	КонецЕсли;
	
	Если Не (ТипДанных = "Число"
		ИЛИ ТипДанных = "Дата") Тогда
	
		Возврат Ложь;
	
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ()


#КонецОбласти

#КонецОбласти



///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СохранитьПараметрыОткрытия(Параметры);
	Взаимодействия.ОбработатьНеобходимостьОтображенияГруппПользователей(ЭтотОбъект);
	Взаимодействия.ДобавитьСтраницыФормыПодбораКонтактов(ЭтотОбъект);
	
	// Заполним контакты по предмету.
	Взаимодействия.ЗаполнитьКонтактыПоПредмету(Элементы, Параметры.Предмет, КонтактыПоПредмету, Ложь);
	
	// Заполним список вариантов поиска и осуществим первый поиск.
	ВсеСпискиПоиска = Взаимодействия.СписокДоступныхПоисков(ППДВключен, Параметры, Элементы, Ложь);
	ВыполнитьПервыйПоиск();
	
	// Если заполнен контакт, установим нужной текущую страницу и спозиционируемся на нем.
	Если ЗначениеЗаполнено(Параметры.Контакт) Тогда
		УстановитьТекущимКонтакт(Параметры.Контакт)
	КонецЕсли;
//тест = ЗапросКонтрагентыСТелефонами();
//	КонстАдресЭП = Константы.EmailАдресДолжника.Получить();
//	Если ЗначениеЗаполнено(КонстАдресЭП) И КонстАдресЭП.СправочникВладелец = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_Контрагенты.Родитель Тогда
//		Элементы.СтраницаКонтрагенты.Видимость = Истина;
//		ЭтотОбъект.Контрагенты.Параметры.УстановитьЗначениеПараметра("Свойство", КонстАдресЭП);
//	ИначеЕсли ЗначениеЗаполнено(КонстАдресЭП) И КонстАдресЭП.СправочникВладелец = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_ДолговыеОбязательства.Родитель Тогда
//		Элементы.СтраницаДолговыеОбязательство.Видимость = Истина;
//		ЭтотОбъект.ДолговыеОбязательства.Параметры.УстановитьЗначениеПараметра("Свойство", КонстАдресЭП);
//	КонецЕсли;

	ОтоброжениеДополнительныхСтраниц();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьСписокВыбораВСтрокеПоиска(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеЗадолженностью

&НаКлиенте
Функция ПараметрыОповещения_УЗ(ВыбранныйКонтакт, КонтактнаяИнформация)

	ПараметрыОповещения = ПараметрыОповещения(ВыбранныйКонтакт);
	
	Если ПараметрыОповещения["ТолькоТелефон"] = Истина Тогда
	
		ПараметрыОповещения.Вставить("Адрес", КонтактнаяИнформация);
		ПараметрыОповещения.Вставить("Представление", Строка(ВыбранныйКонтакт));
	
	КонецЕсли;
	
	Возврат ПараметрыОповещения;

КонецФункции 

// Осуществляет поиск контактов по телефону.
	//|	ТаблицаКонтактнойИнформации.Ссылка КАК Контакт,
	//|	ПОДСТРОКА(ТаблицаКонтактнойИнформации.Представление, 1, 1000)КАК Представление,
	//|	ТаблицаКонтактнойИнформации.Ссылка.Наименование КАК Наименование,
	//|	"""" КАК НаименованиеВладельца
&НаСервере
Функция НайтиПоТелефону_УЗ()

	СтрокиПоиска = МассивСтрокПоискаПоВарианту();
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
	
		СтрокиПоиска = Новый Массив;
		СтрокиПоиска.Добавить(СтрокаПоиска);
	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрагентыТелефоны.Ссылка КАК Контакт,
		|	КонтрагентыТелефоны.Ссылка.Наименование КАК Наименование,
		|	КонтрагентыТелефоны.Ссылка.Наименование КАК Представление,
		|	"""" КАК НаименованиеВладельца
		|ИЗ
		|	Справочник.Контрагенты.Телефоны КАК КонтрагентыТелефоны
		|ГДЕ
		|	КонтрагентыТелефоны.Номер В(&Номер)";
	
	
	Запрос.УстановитьПараметр("Номер", СтрокиПоиска);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаКонтакты = РезультатЗапроса.Выгрузить();
	
	Если ТаблицаКонтакты = Неопределено ИЛИ ТаблицаКонтакты.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	НайденныеКонтакты.Очистить();
	Взаимодействия.ЗаполнитьНайденныеКонтакты(ТаблицаКонтакты, НайденныеКонтакты);
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция МассивСтрокПоискаПоВарианту()

	СписокСтрок = Новый Массив;
	
	Значения = Неопределено;
	ВсеСпискиПоиска.Свойство(ВариантыПоиска, Значения);
	
	Если ТипЗнч(Значения) = Тип("Строка") Тогда
		СписокСтрок.Добавить(Значения);
	ИначеЕсли ТипЗнч(Значения) = Тип("СписокЗначений") Тогда
		Для Каждого Элемент Из Значения Цикл
			СписокСтрок.Добавить(Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокСтрок;

КонецФункции

&НаСервере
Процедура ОтоброжениеДополнительныхСтраниц()

	Представление = ОпределитьПредставление();
	
	Если Представление["Тип"] = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
	
	Если Представление["Тип"] = "Емаил"
		И Представление["Значение"] <> Неопределено Тогда
	
		Если Представление["Значение"].СправочникВладелец = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_Контрагенты.Родитель Тогда
			Элементы.СтраницаКонтрагенты.Видимость = Истина;
			ЭтотОбъект.Контрагенты.Параметры.УстановитьЗначениеПараметра("Свойство", Представление["Значение"]);
		ИначеЕсли Представление["Значение"].СправочникВладелец = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_ДолговыеОбязательства.Родитель Тогда
			Элементы.СтраницаДолговыеОбязательство.Видимость = Истина;
			ЭтотОбъект.ДолговыеОбязательства.Параметры.УстановитьЗначениеПараметра("Свойство", Представление["Значение"]);
		КонецЕсли;
	
	КонецЕсли;
	
	Если Представление["Тип"] = "СМС" Тогда
	
		Элементы.СтраницаКонтрагенты.Видимость = Истина;
		
		Телефоны = ЗапросКонтрагентыСТелефонами();
		ЭтотОбъект.Контрагенты.ТекстЗапроса = Телефоны;
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОпределитьПредставление()

	Если Параметры.ТолькоEmail И Параметры.ТолькоТелефон Тогда
	
		ВызватьИсключение "Одновременно выбраны параметры: ТолькоEmail, ТолькоТелефон";
	
	КонецЕсли;
	
	Представление = Новый Структура;
	Представление.Вставить("Тип", Неопределено);
	Представление.Вставить("Значение", Неопределено);
	
	Если Параметры.ТолькоEmail Тогда
	
		Представление["Тип"] = "Емаил";
		КонстАдресЭП = Константы.EmailАдресДолжника.Получить();
		Если ЗначениеЗаполнено(КонстАдресЭП) Тогда
		
			Представление["Значение"] = КонстАдресЭП;
		
		КонецЕсли;
	
	КонецЕсли;
	
	Если Параметры.ТолькоТелефон Тогда
	
		Представление["Тип"] = "СМС";
	
	КонецЕсли;
	
	Возврат Представление;

КонецФункции // ()

&НаСервере
Функция ЗапросКонтрагентыСТелефонами()

	Текст = 
		"ВЫБРАТЬ
		|	КонтрагентыТелефоны.Ссылка КАК Ссылка,
		|	КонтрагентыТелефоны.Ссылка КАК Контрагент,
		|	КонтрагентыТелефоны.Номер КАК Представление
		|ИЗ
		|	Справочник.Контрагенты.Телефоны КАК КонтрагентыТелефоны
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент";
	
	Возврат Текст;

КонецФункции // ()


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НайденныеКонтактыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Оповестить("ВыбранКонтакт", ПараметрыОповещения_УЗ(Элемент.ТекущиеДанные.Ссылка, Элемент.ТекущиеДанные.Представление));
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокСправочникаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено  Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеКонтакта = Новый Структура;
	
	МассивОписанийКонтакта = ВзаимодействияКлиентСервер.ОписанияКонтактов();
	Для Каждого ЭлементМассива Из  МассивОписанийКонтакта Цикл
		Если ТипЗнч(ТекущиеДанные.Ссылка) = ЭлементМассива.Тип Тогда
			ОписаниеКонтакта = ЭлементМассива;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ОписаниеКонтакта.Свойство("Иерархический")И ОписаниеКонтакта.Иерархический Тогда
		ЭтоГруппа = ЭтоГруппа(ТекущиеДанные.Ссылка);
	Иначе
		ЭтоГруппа = Ложь;
	КонецЕсли;
	
	Если Не ЭтоГруппа Тогда
		Оповестить("ВыбранКонтакт", ПараметрыОповещения(ТекущиеДанные.Ссылка));
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактыПоПредметуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Оповестить("ВыбранКонтакт", ПараметрыОповещения(Элемент.ТекущиеДанные.Ссылка));
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыПоискаПриИзменении(Элемент)
	
	ЗаполнитьСписокВыбораВСтрокеПоиска(Истина);
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_СписокКонтактыПриАктивизацииСтроки(Элемент)
	
	ОпределитьАктивизированныйКонтакт(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокВладелецПриАктивизацииСтроки(Элемент)
	
	ОпределитьАктивизированныйКонтакт(Элемент);
	
	ВзаимодействияКлиент.КонтактВладелецПриАктивизацииСтроки(Элемент, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ГруппыПользователейПриАктивизацииСтроки(Элемент)
	
	СписокПользователей.Параметры.УстановитьЗначениеПараметра("ГруппаПользователей", Элементы.ГруппыПользователей.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаНайтиВыполнить()
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не задана строка поиска.'"));
		Возврат;
	КонецЕсли;
	
	Результат = "";
	НайденныеКонтакты.Очистить();
	
	Если ВариантыПоиска = "ПоEmail" Тогда
		НайтиПоEmail(Ложь);
	ИначеЕсли ВариантыПоиска = "ПоДомену" Тогда
		НайтиПоEmail(Истина);
	ИначеЕсли ВариантыПоиска = "ПоТелефону" Тогда
		НайтиПоТелефону_УЗ();
	ИначеЕсли ВариантыПоиска = "ПоСтроке" Тогда
		Результат = НайтиПоСтроке();
	ИначеЕсли ВариантыПоиска = "НачинаетсяС" Тогда
		НайтиПоНачалуНаименования();
	КонецЕсли;
	
	Если Не ПустаяСтрока(Результат) Тогда
		ПоказатьПредупреждение(, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиВСпискеИзСпискаНайденныхВыполнить()
	
	Если Элементы.НайденныеКонтакты.ТекущиеДанные <> Неопределено Тогда
		УстановитьТекущимКонтакт(Элементы.НайденныеКонтакты.ТекущиеДанные.Ссылка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НайтиВСпискеИзСпискаПредметовВыполнить()
	
	Если Элементы.КонтактыПоПредмету.ТекущиеДанные <> Неопределено Тогда
		УстановитьТекущимКонтакт(Элементы.КонтактыПоПредмету.ТекущиеДанные.Ссылка);
	КонецЕсли;

КонецПроцедуры

// Возвращает данные строки таблицы Контакты по предмету.
// 
// Параметры:
//  ВыделеннаяСтрока  - ДанныеФормыЭлементКоллекции - строка, данные которой получаются.
//
// Возвращаемое значение:
//  Структура:
//   * Ссылка                    - ОпределяемыйТип.КонтактВзаимодействия
//   * Наименование              - Строка
//   * ИмяСправочника            - Строка
//   * ПредставлениеНаименования - Строка
//
&НаКлиенте
Функция ДанныеКонтактыПоПредмету(ВыделеннаяСтрока);
	
	Возврат ВыделеннаяСтрока;
	
КонецФункции

&НаКлиенте
Процедура КомандаВыбрать(Команда)
	
	Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПоискКонтактов Тогда
		
		ТекущиеДанные = ДанныеКонтактыПоПредмету(Элементы.НайденныеКонтакты.ТекущиеДанные);
		Если ТекущиеДанные <> Неопределено Тогда
			Оповестить("ВыбранКонтакт", ПараметрыОповещения(ТекущиеДанные.Ссылка));
			Закрыть();
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаВсеКонтактыПоПредмету Тогда
		
		ТекущиеДанные = ДанныеКонтактыПоПредмету(Элементы.КонтактыПоПредмету.ТекущиеДанные);
		Если ТекущиеДанные <> Неопределено Тогда
			Оповестить("ВыбранКонтакт", ПараметрыОповещения(ТекущиеДанные.Ссылка));
			Закрыть();
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	КонтактДляВыбора = Неопределено;
	
	Для инд = 0 По Элементы.СтраницыСписки.ТекущаяСтраница.ПодчиненныеЭлементы.Количество() -1 Цикл
		
		ТекущиеДанные = ДанныеКонтактыПоПредмету(Элементы.СтраницыСписки.ТекущаяСтраница.ПодчиненныеЭлементы[инд].ТекущиеДанные);
		Если ТекущиеДанные = Неопределено  Тогда
			Продолжить;
		Иначе
			Если ТекущиеДанные.Свойство("Ссылка") И ТекущиеДанные.Ссылка = ПоследнийАктивизированныйКонтакт Тогда
				КонтактДляВыбора = ПоследнийАктивизированныйКонтакт;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если КонтактДляВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ОписаниеКонтакта = Новый Структура;
	
	МассивОписанийКонтакта = ВзаимодействияКлиентСервер.ОписанияКонтактов();
	Для Каждого ЭлементМассива Из  МассивОписанийКонтакта Цикл
		Если ТипЗнч(КонтактДляВыбора) = ЭлементМассива.Тип Тогда
			ОписаниеКонтакта = ЭлементМассива;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ОписаниеКонтакта.Свойство("Иерархический")И ОписаниеКонтакта.Иерархический Тогда
		ЭтоГруппа = ЭтоГруппа(КонтактДляВыбора);
	Иначе
		ЭтоГруппа = Ложь;
	КонецЕсли;
	
	Если Не ЭтоГруппа Тогда
		Оповестить("ВыбранКонтакт", ПараметрыОповещения_УЗ(ТекущиеДанные.Ссылка, ТекущиеДанные.Представление));
		Закрыть(КонтактДляВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Просмотр(Команда)
	Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПользователей Тогда
		ТекущиеДанные = Элементы.СписокПользователей.ТекущиеДанные;
	ИначеЕсли ТипЗнч(ТекущийЭлемент) = Тип("ТаблицаФормы") Тогда
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОСУЩЕСТВЛЕНИЯ ПОИСКА

// Формирует список значений строк, по которым будет осуществляться поиск по текущему варианту поиска.
//
// Возвращаемое значение:
//   СписокЗначений   - список строк, по которым будет осуществляться поиск.
//
&НаСервере
Функция СписокСтрокПоискаПоВарианту()

	СписокСтрок = Новый СписокЗначений;
	
	Значения = Неопределено;
	ВсеСпискиПоиска.Свойство(ВариантыПоиска, Значения);
	
	Если ТипЗнч(Значения) = Тип("Строка") Тогда
		СписокСтрок.Добавить(Значения);
	ИначеЕсли ТипЗнч(Значения) = Тип("СписокЗначений") Тогда
		Для Каждого Элемент Из Значения Цикл
			СписокСтрок.Добавить(Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокСтрок;

КонецФункции

// Выполняет первый поиск по всем возможным вариантам поиска согласно переданным параметрам.
//
&НаСервере
Процедура ВыполнитьПервыйПоиск()
	
	ВариантыПоиска = "ПоСтроке";
	Если ПустаяСтрока(Параметры.Адрес) И ПустаяСтрока(Параметры.Представление) Тогда
		Возврат;
	КонецЕсли;

	// Попробуем поискать по email.
	ВариантыПоиска = "ПоEmail";
	Для Каждого Вариант Из СписокСтрокПоискаПоВарианту() Цикл
		СтрокаПоиска = Вариант.Значение;
		Если ПустаяСтрока(СтрокаПоиска) Тогда
			Продолжить;
		КонецЕсли;
		Если НайтиПоEmail(Ложь) Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	// Попробуем поискать по телефону.
	ВариантыПоиска = "ПоТелефону";
	Для Каждого Вариант Из СписокСтрокПоискаПоВарианту() Цикл
		СтрокаПоиска = Вариант.Значение;
		Если ПустаяСтрока(СтрокаПоиска) Тогда
			Продолжить;
		КонецЕсли;
		Если НайтиПоТелефону_УЗ() Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;

	// Если индекс ППД не включен то дальше не ищем.
	Если НЕ ППДВключен Тогда
		ВариантыПоиска = "ПоEmail";
		Возврат;
	КонецЕсли;

	// Попробуем поискать по адресу и представлению.
	ВариантыПоиска = "ПоСтроке";
	Для Каждого Вариант Из СписокСтрокПоискаПоВарианту() Цикл
		СтрокаПоиска = Вариант.Значение;
		Если ПустаяСтрока(СтрокаПоиска) Тогда
			Продолжить;
		КонецЕсли;
		НайтиПоСтроке();
		Если НайденныеКонтакты.Количество() > 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Осуществляет поиск контактов по доменному имени или по адресу электронной почты.
//
&НаСервере
Функция НайтиПоEmail(ПоДомену)

	Возврат Взаимодействия.НайтиПоEmail(СтрокаПоиска, ПоДомену, НайденныеКонтакты);

КонецФункции

// Осуществляет поиск контактов по телефону.
//
&НаСервере
Функция НайтиПоТелефону()
	
	Возврат Взаимодействия.НайтиКонтактыПоТелефону(СтрокаПоиска, НайденныеКонтакты);
	
КонецФункции

// Осуществляет поиск контактов по строке.
//
&НаСервере
Функция НайтиПоСтроке()
	
	Возврат Взаимодействия.ПолнотекстовыйПоискКонтактовПоСтроке(СтрокаПоиска, НайденныеКонтакты);
	
КонецФункции

// Осуществляет поиск контактов по началу наименования.
//
&НаСервере
Функция НайтиПоНачалуНаименования()

	ТаблицаКонтактов = Взаимодействия.НайтиКонтактыПоНачалуНаименования(СтрокаПоиска);

	Если ТаблицаКонтактов = Неопределено ИЛИ ТаблицаКонтактов.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Взаимодействия.ЗаполнитьНайденныеКонтакты(ТаблицаКонтактов, НайденныеКонтакты);
	Возврат Истина;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Устанавливает текущим контакт в соответствующем динамическом списке.
//
// Параметры:
//  Контакт  - СправочникСсылка - контакт, на котором необходимо спозиционироваться.
// 
&НаСервере
Процедура УстановитьТекущимКонтакт(Контакт)

	Взаимодействия.УстановитьТекущимКонтакт(Контакт, ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыОткрытия(ПереданныеПараметры)
	
	Представление = "";
	Если Не ПустаяСтрока(ПереданныеПараметры.Представление) Тогда
		Представление = СтрПолучитьСтроку(ПереданныеПараметры.Представление, 1);
	КонецЕсли;
	
	ПараметрыФормы.Добавить( ПереданныеПараметры.Адрес,                             "Адрес");
	ПараметрыФормы.Добавить( ПереданныеПараметры.Контакт,                           "Контакт");
	ПараметрыФормы.Добавить( ПереданныеПараметры.Предмет,                           "Предмет");
	ПараметрыФормы.Добавить( Представление,                                         "Представление");
	ПараметрыФормы.Добавить( ПереданныеПараметры.ТолькоEmail,                       "ТолькоEmail");
	ПараметрыФормы.Добавить( ПереданныеПараметры.ТолькоТелефон,                     "ТолькоТелефон");
	ПараметрыФормы.Добавить( ПереданныеПараметры.ДляФормыУточненияКонтактов,        "ДляФормыУточненияКонтактов");
	ПараметрыФормы.Добавить( ПереданныеПараметры.ЗаменятьПустыеАдресИПредставление, "ЗаменятьПустыеАдресИПредставление");
	ПараметрыФормы.Добавить( ПереданныеПараметры.ИдентификаторФормы,                "ИдентификаторФормы");
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыОповещения(ВыбранныйКонтакт)

	ПараметрыОповещения = Новый Структура;
	
	Для каждого ЭлементСписка Из ПараметрыФормы Цикл
	
		ПараметрыОповещения.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
	
	КонецЦикла;
	
	ПараметрыОповещения.Вставить("ВыбранныйКонтакт", ВыбранныйКонтакт);
	
	Возврат ПараметрыОповещения;

КонецФункции 

&НаКлиенте
Процедура ОпределитьАктивизированныйКонтакт(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоследнийАктивизированныйКонтакт = ТекущиеДанные.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораВСтрокеПоиска(ИзменятьСтрокуПоиска)

	СписокВариантовПоиска = Неопределено;
	ВсеСпискиПоиска.Свойство(ВариантыПоиска, СписокВариантовПоиска);
	
	ЭтоСписок = Ложь;
	Если ТипЗнч(СписокВариантовПоиска) = Тип("СписокЗначений") Тогда
		Количество = СписокВариантовПоиска.Количество();
		Если Количество = 0 Тогда
			СписокВариантовПоиска = "";
		ИначеЕсли Количество = 1 Тогда
			СписокВариантовПоиска = СписокВариантовПоиска.Получить(0).Значение;
		Иначе
			ЭтоСписок = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СтрокаПоиска.КнопкаВыпадающегоСписка = ЭтоСписок;
	
	Если ЭтоСписок Тогда
		Элементы.СтрокаПоиска.СписокВыбора.Очистить();
		Для Каждого ЭлементВарианта Из СписокВариантовПоиска Цикл
			Элементы.СтрокаПоиска.СписокВыбора.Добавить(ЭлементВарианта.Значение);
		КонецЦикла;
		Если ИзменятьСтрокуПоиска Тогда
			СтрокаПоиска = СписокВариантовПоиска.Получить(0).Значение;
		КонецЕсли;
	ИначеЕсли ИзменятьСтрокуПоиска Тогда
		СтрокаПоиска = СписокВариантовПоиска;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЭтоГруппа(СсылкаНаОбъект)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ЭтоГруппа");
КонецФункции

&НаКлиенте
Процедура КонтрагентыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ВыбраннаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	Контрагент = Элемент.ТекущиеДанные.Контрагент;
	АдресЭП = Элемент.ТекущиеДанные.Представление;
	
	//ДобавитьПолучателя(АдресЭП, Контрагент.Наименование, Контрагент, АдресЭП);

КонецПроцедуры


&НаКлиенте
Процедура ДолговыеОбязательстваВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ВыбраннаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	ДО = Элемент.ТекущиеДанные.ДО;
	АдресЭП = Элемент.ТекущиеДанные.Представление;
	
//	ДобавитьПолучателя(АдресЭП, ДО.Наименование, ДО, АдресЭП);

КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполнить перемещение объекта вверх или вниз
//
// Параметры:
//   Ссылка      - Ссылка                  - Ссылка на перемещаемый элемент
//   Направление - Число                   - Направление в котором перемещается элемент: -1 - вверх, +1 - вниз
//   Отбор       - ОтборКомпоновкиДанных   - Отбор установленный в динамическом списке
//   Отображение - ОтображениеТаблицы      - Установленный список отображения динамического списка
//   СтрОшибка   - Строка                  - При возникновении ошибки возвращается описание
//
//
Функция ИзменитьПорядокЭлементов(Ссылка, УстановленныеОтборы, ОтображениеСписком, Вверх) Экспорт
	
	Информация = ПолучитьИнформациюДляПеремещенияОМетаданных(Ссылка);
	
	// Для иерархических справочников может быть установлен отбор по родителю, если нет,
	// то способ отображения должен быть иерархический или в виде дерева
	Если Информация.ЕстьРодитель И ОтображениеСписком И Не УстановленныеОтборы.ЕстьОтборПоРодителю Тогда
		Возврат НСтр("ru = 'Перед перемещением необходимо установить отображение в виде дерева или иерархического списка!'");
	КонецЕсли;
	
	// Для подчиненных справочников должен быть установлен отбор по владельцу
	Если Информация.ЕстьВладелец И НЕ УстановленныеОтборы.ЕстьОтборПоВладельцу Тогда
		Возврат НСтр("ru = 'Перед перемещением необходимо установить отбор по владельцу!'");
	КонецЕсли;
	
	// Проверим, есть ли у выбранного объекта реквизит доп. упорядочивания
	Если Информация.ЕстьГруппы Тогда
		ЭтоГруппа = УдалитьОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "ЭтоГруппа");
		Если ЭтоГруппа И Не Информация.ДляГрупп Тогда
			// Это группа, но для группа порядок не назначается
			Возврат "";
		ИначеЕсли Не ЭтоГруппа И Не Информация.ДляЭлементов Тогда
			// Это элемент, но для элементов порядок не назначается
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	масУсловия = Новый Массив;
	
	// Добавим условие по родителю
	Если Информация.ЕстьРодитель Тогда
		масУсловия.Добавить("Таблица.Родитель = &Родитель");
		Запрос.УстановитьПараметр("Родитель", УдалитьОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "Родитель"));
	КонецЕсли;
	
	// Добавим условие по владельцу
	Если Информация.ЕстьВладелец Тогда
		масУсловия.Добавить("Таблица.Владелец = &Владелец");
		Запрос.УстановитьПараметр("Владелец", УдалитьОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "Владелец"));
	КонецЕсли;
	
	// Добавим условие на группу
	Если Информация.ЕстьГруппы Тогда
		Если Информация.ДляГрупп И Не Информация.ДляЭлементов Тогда
			масУсловия.Добавить("Таблица.ЭтоГруппа");
		ИначеЕсли Не Информация.ДляГрупп И Информация.ДляЭлементов Тогда
			масУсловия.Добавить("НЕ Таблица.ЭтоГруппа");
		КонецЕсли;
	КонецЕсли;
	
	// Составим строку со всеми условиями
	СтрУсловия = "";
	СтрДобавка = "
	|ГДЕ
	|	";
	Для Каждого Условие Из масУсловия Цикл
		СтрУсловия = СтрУсловия + СтрДобавка + Условие;
		СтрДобавка = "
		|	И ";
	КонецЦикла;
	
	// Составим текст запроса
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Ссылка,
	|	Таблица.РеквизитДопУпорядочивания КАК ПорядокСтарый,
	|	Таблица.РеквизитДопУпорядочивания КАК ПорядокНовый
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК Таблица
	|" + СтрУсловия + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеквизитДопУпорядочивания";
	
	
	Запрос.Текст = ТекстЗапроса;
	ТабЭлементы = Запрос.Выполнить().Выгрузить();
	
	Стр1 = ТабЭлементы.Найти(Ссылка, "Ссылка");
	Если Стр1 = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Смещение = ?(Вверх, -1, 1);
	Индекс1 = ТабЭлементы.Индекс(Стр1);
	Индекс2 = Индекс1 + Смещение;
	Если (Индекс2 < 0) ИЛИ (Индекс2 >= ТабЭлементы.Количество()) Тогда
		Возврат "";
	КонецЕсли;
	Стр2 = ТабЭлементы[Индекс2];
	
	Стр1.ПорядокНовый = Стр2.ПорядокСтарый;
	Стр2.ПорядокНовый = Стр1.ПорядокСтарый;
	
	ТабЭлементы.Сдвинуть(Стр1, Смещение);
	
	предПорядок = 0;
	
	НачатьТранзакцию();
	
	Попытка
		
		Для Каждого Стр Из ТабЭлементы Цикл
			
			Если предПорядок >= Стр.ПорядокНовый Тогда
				Стр.ПорядокНовый = предПорядок + 1;
			КонецЕсли;
			
			предПорядок = Стр.ПорядокНовый;
			
			Если Стр.ПорядокНовый <> Стр.ПорядокСтарый Тогда
				Объект = Стр.Ссылка.ПолучитьОбъект();
				ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка);
				Объект.РеквизитДопУпорядочивания = Стр.ПорядокНовый;
				Объект.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат "";
	
КонецФункции

// Получить структуру с информацией о метаданных объекта
Функция ПолучитьИнформациюДляПеремещенияОМетаданных(Ссылка) Экспорт
	
	Информация = Новый Структура;
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	МетаданныеРеквизита = МетаданныеОбъекта.Реквизиты.РеквизитДопУпорядочивания;
	
	Информация.Вставить("ПолноеИмя",    МетаданныеОбъекта.ПолноеИмя());
	
	ЭтоСправочник = Метаданные.Справочники.Содержит(МетаданныеОбъекта);
	ЭтоПВХ        = Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта);
	
	Если ЭтоСправочник ИЛИ ЭтоПВХ Тогда
		
		Информация.Вставить("ЕстьГруппы",
					МетаданныеОбъекта.Иерархический И 
							?(ЭтоПВХ, Истина, МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов));
		
		Информация.Вставить("ДляГрупп",     (МетаданныеРеквизита.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента));
		Информация.Вставить("ДляЭлементов", (МетаданныеРеквизита.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы));
		Информация.Вставить("ЕстьРодитель",  МетаданныеОбъекта.Иерархический);
		Информация.Вставить("ГруппыСверху", ?(НЕ Информация.ЕстьРодитель, Ложь, МетаданныеОбъекта.ГруппыСверху));
		Информация.Вставить("ЕстьВладелец", ?(ЭтоПВХ, Ложь, (МетаданныеОбъекта.Владельцы.Количество() <> 0)));
		
	Иначе
		
		Информация.Вставить("ЕстьГруппы",   Ложь);
		Информация.Вставить("ДляГрупп",     Ложь);
		Информация.Вставить("ДляЭлементов", Истина);
		Информация.Вставить("ЕстьРодитель", Ложь);
		Информация.Вставить("ЕстьВладелец", Ложь);
		Информация.Вставить("ГруппыСверху", Ложь);
		
	КонецЕсли;
	
	Возврат Информация;
	
КонецФункции


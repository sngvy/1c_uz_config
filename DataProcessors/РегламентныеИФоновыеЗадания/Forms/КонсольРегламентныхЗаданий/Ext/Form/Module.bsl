
///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ МЕТОДЫ
//
// Сначала выполняемые НаКлиенте, затем НаСервере

// Процедура ИзменитьСкопироватьРегламентноеЗадание открывает форму редактирования
// выбранного регламентного задания для изменения или создания нового копированием.
// 
// Параметры:
//  Действие  - строка - "Добавить", "Скопировать", "Изменить".
//  
&НаКлиенте
Процедура ДобавитьСкопироватьИзменитьРегламентноеЗадание(Действие)
	
	Если Элементы.ТаблицаРегламентныеЗадания.ТекущиеДанные = Неопределено Тогда
		Предупреждение ( НСтр("ru = 'Выберите регламентное задание!'") );
		
	ИначеЕсли ОткрытьФормуМодально("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентноеЗадание",
		                           Новый Структура("Идентификатор, Действие",
		                                           Элементы.ТаблицаРегламентныеЗадания.ТекущиеДанные.Идентификатор,
		                                           Действие)) = Истина Тогда
		ОбновитьТаблицуРегламентныхЗаданий();
		ОбновитьСписокВыбораРегламентногоЗадания();
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСкопироватьИзменитьРегламентноеЗадание()

// Процедура СообщитьОбОкончанииРучнойОбработкиРегламентногоЗадания подключается/отключается,
// как обработчик ожидания, в процедуре ОбработатьРегламентноеЗаданиеВручнуюВыполнить()
// и в самой себе если нужно.
//
&НаКлиенте
Процедура СообщитьОбОкончанииРучнойОбработкиРегламентногоЗадания()

	ОповещенияОбОкончанииОбработки = ОповещенияОбОкончанииОбработкиРегламентныхЗаданий();
	Для каждого Оповещение Из ОповещенияОбОкончанииОбработки Цикл
			ПоказатьОповещениеПользователя(НСтр("ru = 'Выполнено регламентное задание'"), ,
				УдалитьСтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.
					|Процедура завершена %2'"),
					Оповещение.ПредставлениеРегламентногоЗадания,
					Строка(Оповещение.МоментОкончания)),
				БиблиотекаКартинок.ОбработатьРегламентноеЗаданиеВручную);
	КонецЦикла;
	
	Если ИдентификаторыЗаданийПриРучнойОбработке.Количество() > 0 Тогда
		ПодключитьОбработчикОжидания("СообщитьОбОкончанииРучнойОбработкиРегламентногоЗадания", 1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОповещенияОбОкончанииОбработкиРегламентныхЗаданий()

	ОповещенияОбОкончанииОбработки = Новый Массив;
	Если ИдентификаторыЗаданийПриРучнойОбработке.Количество() > 0 Тогда
		Индекс = ИдентификаторыЗаданийПриРучнойОбработке.Количество() - 1;
		Пока Индекс >= 0 Цикл
			МоментОкончания = УдалитьРегламентныеЗаданияСервер.ПолучитьСвойстваФоновогоЗадания(ИдентификаторыЗаданийПриРучнойОбработке[Индекс].Значение, "Конец").Конец;
			Если ЗначениеЗаполнено(МоментОкончания) Тогда
				ОповещенияОбОкончанииОбработки.Добавить(Новый Структура("ПредставлениеРегламентногоЗадания, МоментОкончания", ИдентификаторыЗаданийПриРучнойОбработке[Индекс].Представление, МоментОкончания));
				ИдентификаторыЗаданийПриРучнойОбработке.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьДанные();
	
	Возврат ОповещенияОбОкончанииОбработки;
	
КонецФункции

// Процедура ОбновитьТаблицуРегламентныхЗаданий заполняет/обновляет таблицу 
// регламентных заданий из источника.
//
&НаСервере
Процедура ОбновитьТаблицуРегламентныхЗаданий()

	// Обновить ТаблицуРегламентныеЗадания и СписокВыбора регламентного задания для отбора.
	ТекущиеЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания();
	Таблица = ТаблицаРегламентныеЗадания;
	Индекс = 0;
	Для каждого Задание ИЗ ТекущиеЗадания Цикл
		Идентификатор = Строка(Задание.УникальныйИдентификатор);
		Если Индекс >= Таблица.Количество() ИЛИ Таблица[Индекс].Идентификатор <> Идентификатор Тогда
			// Вставим новое задание
			Обновляемое = Таблица.Вставить(Индекс);
			// Установим уникальный идентификатор
			Обновляемое.Идентификатор = Идентификатор;
		Иначе
			Обновляемое = Таблица[Индекс];
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Обновляемое, Задание);
		// Уточним Наименование
		Обновляемое.Наименование = УдалитьРегламентныеЗаданияСервер.ПредставлениеРегламентногоЗадания(Задание);
		// Установим ДатуЗавершения и СостояниеЗавершения по последней фоновой процедуре
		СвойстваПоследнегоФоновогоЗадания = УдалитьРегламентныеЗаданияСервер.ПолучитьСвойстваПоследнегоФоновогоЗаданияОбработкиРегламентногоЗадания(Задание);
		Если СвойстваПоследнегоФоновогоЗадания = Неопределено Тогда
			Обновляемое.ДатаОкончания       = ТекстНеОпределено;
			Обновляемое.СостояниеВыполнения = ТекстНеОпределено;
		Иначе
			Обновляемое.ДатаОкончания       = ?(ЗначениеЗаполнено(СвойстваПоследнегоФоновогоЗадания.Конец),
			                                    СвойстваПоследнегоФоновогоЗадания.Конец,
			                                    "<>");
			Обновляемое.СостояниеВыполнения = СвойстваПоследнегоФоновогоЗадания.Состояние;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	// Удалим лишние строки
	Пока Индекс < Таблица.Количество() Цикл
		Таблица.Удалить(Индекс);
	КонецЦикла;
	
КонецПроцедуры // ОбновитьТаблицуРегламентныхЗаданий()

// Процедура ОбновитьСписокВыбораРегламентногоЗадания заполняет/обновляет список 
// регламентных заданий из текущих списков.
//  Необходима вызывать НаКлиенте после обновления таблицы регламентных заданий НаСервере.
//
&НаСервере
Процедура ОбновитьСписокВыбораРегламентногоЗадания()

	Таблица = ТаблицаРегламентныеЗадания;
	Список = Элементы.РегламентноеЗаданиеДляОтбора.СписокВыбора;
	// Добавим предопределенный элемент.
	Если Список.Количество() = 0 Тогда
		Список.Добавить(ПустойИдентификатор, ТекстНеОпределено);
	КонецЕсли;
	Индекс = 1;
	Для каждого Задание ИЗ Таблица Цикл
		Если Индекс >= Список.Количество() ИЛИ Список[Индекс].Значение <> Задание.Идентификатор Тогда
			// Вставим новое задание
			Список.Вставить(Индекс, Задание.Идентификатор, Задание.Наименование);
		Иначе
			Список[Индекс].Представление = Задание.Наименование;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	// Удалим лишние строки
	Пока Индекс < Список.Количество() Цикл
		Список.Удалить(Индекс);
	КонецЦикла;
	
	ЭлементСписка = Список.НайтиПоЗначению(РегламентноеЗаданиеДляОтбораИдентификатор);
	Если ЭлементСписка = Неопределено Тогда
		РегламентноеЗаданиеДляОтбораИдентификатор = ПустойИдентификатор;
		РегламентноеЗаданиеДляОтбораПредставление = ТекстНеОпределено;
	Иначе
		РегламентноеЗаданиеДляОтбораПредставление = ЭлементСписка.Представление;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьТаблицуРегламентныхЗаданий()

// Процедура ОбновитьТаблицуФоновыхЗаданий заполняет/обновляет таблицу
// фоновых заданий из источника.
//
&НаСервере
Процедура ОбновитьТаблицуФоновыхЗаданий()

	// 1. Составим отбор
	Отбор = Новый Структура;
	// 1.1. Добавим отбор по состояниям
	МассивСостояний = Новый Массив;
	Если ОтборПоСостояниюАктивно Тогда 
		МассивСостояний.Добавить(СостояниеФоновогоЗадания.Активно);
	КонецЕсли;
	Если ОтборПоСостояниюЗавершено Тогда 
		МассивСостояний.Добавить(СостояниеФоновогоЗадания.Завершено);
	КонецЕсли;
	Если ОтборПоСостояниюЗавершеноАварийно Тогда 
		МассивСостояний.Добавить(СостояниеФоновогоЗадания.ЗавершеноАварийно);
	КонецЕсли;
	Если ОтборПоСостояниюОтменено Тогда 
		МассивСостояний.Добавить(СостояниеФоновогоЗадания.Отменено);
	КонецЕсли;
	Если МассивСостояний.Количество() <> 4 Тогда
		Если МассивСостояний.Количество() = 1 Тогда
			Отбор.Вставить("Состояние", МассивСостояний[0]);
		Иначе
			Отбор.Вставить("Состояние", МассивСостояний);
		КонецЕсли;
	КонецЕсли;
	// 1.2. Добавим отбор по регламентному заданию
	Если ОтбиратьПоРегламентномуЗаданию Тогда
		Отбор.Вставить("ИдентификаторРегламентногоЗадания",
					   ?(РегламентноеЗаданиеДляОтбораИдентификатор = ПустойИдентификатор,
					     "",
					     РегламентноеЗаданиеДляОтбораИдентификатор));
	КонецЕсли;
	// 1.3. Добавим отбор по периоду
	Если ВидОтбораПоПериоду <> 0 Тогда
		Отбор.Вставить("Начало", ОтборПериодС);
		Отбор.Вставить("Конец",  ОтборПериодПо);
	КонецЕсли;
	
	// 2. Обновим список фоновых заданий
	Таблица = ТаблицаФоновыеЗадания;
	КоличествоФоновыхЗаданийВсего = 0;
	ТекущаяТаблица = УдалитьРегламентныеЗаданияСервер.ПолучитьТаблицуСвойствФоновыхЗаданий(Отбор, КоличествоФоновыхЗаданийВсего);
	Индекс = 0;
	Для каждого Задание ИЗ ТекущаяТаблица Цикл
		Если Индекс >= Таблица.Количество() ИЛИ Таблица[Индекс].Идентификатор <> Задание.Идентификатор Тогда
			// Вставим новое задание
			Обновляемое = Таблица.Вставить(Индекс);
			// Установим уникальный идентификатор
			Обновляемое.Идентификатор = Задание.Идентификатор;
		Иначе
			Обновляемое = Таблица[Индекс];
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Обновляемое, Задание);
		// Установим наименование регламентного задания из коллекции ТаблицаРегламентныеЗадания
		Строки = ТаблицаРегламентныеЗадания.НайтиСтроки(Новый Структура("Идентификатор", Задание.ИдентификаторРегламентногоЗадания));
		Если Строки.Количество() = 0 Тогда
			Обновляемое.НаименованиеРегламентногоЗадания = ?(ПустаяСтрока(Задание.ИдентификаторРегламентногоЗадания),
			                                                 ТекстНеОпределено,
			                                                 НСтр("ru = '<не найдено>'"));
		Иначе
			Обновляемое.НаименованиеРегламентногоЗадания = Строки[0].Наименование;
		КонецЕсли;
		// Установим дату окончания выполенения фонового задания
		Обновляемое.Конец = ?(ЗначениеЗаполнено(Задание.Конец), Обновляемое.Конец, "<>");
		// Увеличим индекс
		Индекс = Индекс + 1;
	КонецЦикла;
	// Удалим лишние строки
	Пока Индекс < Таблица.Количество() Цикл
		Таблица.Удалить(Таблица.Количество()-1);
	КонецЦикла;
	КоличествоФоновыхЗаданийВТаблице = Таблица.Количество();

КонецПроцедуры // ОбновитьТаблицуФоновыхЗаданий()

&НаСервере
Процедура ОбновитьДанные()

	ОбновитьТаблицуРегламентныхЗаданий();
	ОбновитьТаблицуФоновыхЗаданий();
	ОбновитьСписокВыбораРегламентногоЗадания();
	
КонецПроцедуры // ОбновитьДанныеВыполнить()

// Процедура АктивизироватьОкно выполняет активизацию окна после паузы.
//  Подключается, как обработчик ожидания в процедуре
// ОткрытьОтдельныйСеансОбработкиРегламентныхЗаданийВыполнить.
// 
&НаКлиенте
Процедура АктивизироватьОкно()

	Активизировать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТЧИКИ СОБЫТИЙ
//
// Источники: форма, панели

// Обработчик события ПриСозданииНаСервере формы выполняет начальную настройку формы НаСервере.
// 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ПравоДоступа("Администрирование", Метаданные) Тогда
		ВызватьИсключение(НСтр("ru = 'У пользователя нет права администрирования, открыть консоль невозможно!'"));
	КонецЕсли;
	Элементы.НастройкаОбработкиРегламентныхЗаданий.Видимость = СтандартныеПодсистемыПереопределяемый.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	Элементы.ОткрытьОтдельныйСеансОбработкиРегламентныхЗаданий.Видимость = Элементы.НастройкаОбработкиРегламентныхЗаданий.Видимость;
	ПустойИдентификатор = Строка(Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	ТекстНеОпределено = УдалитьРегламентныеЗаданияСервер.ТекстНеОпределено();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
		
	ОбновитьТаблицуРегламентныхЗаданий();
	
	// Настроим отбор фоновых заданий
	Если Настройки.Получить("ОтборПоСостояниюАктивно") = Неопределено Тогда
		Настройки.Вставить("ОтборПоСостояниюАктивно", Истина);
	КонецЕсли;
	
	Если Настройки.Получить("ОтборПоСостояниюЗавершено") = Неопределено Тогда
		Настройки.Вставить("ОтборПоСостояниюЗавершено", Истина);
	КонецЕсли;
	
	Если Настройки.Получить("ОтборПоСостояниюЗавершеноАварийно") = Неопределено Тогда
		Настройки.Вставить("ОтборПоСостояниюЗавершеноАварийно", Истина);
	КонецЕсли;

	Если Настройки.Получить("ОтборПоСостояниюОтменено") = Неопределено Тогда
		Настройки.Вставить("ОтборПоСостояниюОтменено", Истина);
	КонецЕсли;
	
	Если Настройки.Получить("ОтбиратьПоРегламентномуЗаданию") = Неопределено
	 ИЛИ Настройки.Получить("РегламентноеЗаданиеДляОтбораИдентификатор")   = Неопределено Тогда
		Настройки.Вставить("ОтбиратьПоРегламентномуЗаданию", Ложь);
		Настройки.Вставить("РегламентноеЗаданиеДляОтбораИдентификатор", ПустойИдентификатор);
	КонецЕсли;
	
	// Настроим отбор по периоду "Без отбора"
	// (см. обработчик события ВидОтбораПоПериодуПриИзменении переключателя)
	Если Настройки.Получить("ВидОтбораПоПериоду") = Неопределено
	 ИЛИ Настройки.Получить("ОтборПериодС")       = Неопределено
	 ИЛИ Настройки.Получить("ОтборПериодПо")      = Неопределено Тогда
		Настройки.Вставить("ВидОтбораПоПериоду", 0);
		Настройки.Вставить("ОтборПериодС", НачалоДня(ТекущаяДатаСеанса()) - 3 * 360);
		Настройки.Вставить("ОтборПериодПо", НачалоДня(ТекущаяДатаСеанса()) + 9 * 360);
	КонецЕсли;
	
	Для каждого КлючИЗначение Из Настройки Цикл
		Попытка
			ЭтаФорма[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
	// Настроим видимость и доступность.
	Элементы.ОтборПериодС.ТолькоПросмотр  = НЕ (ВидОтбораПоПериоду = 4);
	Элементы.ОтборПериодПо.ТолькоПросмотр = НЕ (ВидОтбораПоПериоду = 4);
	Элементы.РегламентноеЗаданиеДляОтбора.Доступность = ОтбиратьПоРегламентномуЗаданию;
	
	ОбновитьТаблицуФоновыхЗаданий();
	
	
	НастройкиЗагружены = Истина;
	
КонецПроцедуры

// Обработчик события ПриОткрытии формы выполняет начальную настройку формы НаКлиенте.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ НастройкиЗагружены Тогда
		ПриЗагрузкеДанныхИзНастроекНаСервере(Новый Соответствие);
	КонецЕсли;
	ОбновитьСписокВыбораРегламентногоЗадания();
	
КонецПроцедуры // ПриОткрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТЧИКИ СОБЫТИЙ
//
// Источники: команды

&НаКлиенте
Процедура ДобавитьРегламентноеЗаданиеВыполнить()
	
	ДобавитьСкопироватьИзменитьРегламентноеЗадание("Добавить");
	
КонецПроцедуры // ДобавитьРегламентноеЗаданиеВыполнить()

&НаКлиенте
Процедура СкопироватьРегламентноеЗаданиеВыполнить()
	
	ДобавитьСкопироватьИзменитьРегламентноеЗадание("Скопировать");
	
КонецПроцедуры // СкопироватьРегламентноеЗаданиеВыполнить()

&НаКлиенте
Процедура ИзменитьРегламентноеЗаданиеВыполнить()
	
	ДобавитьСкопироватьИзменитьРегламентноеЗадание("Изменить");
	
КонецПроцедуры // ИзменитьРегламентноеЗаданиеВыполнить()

&НаКлиенте
Процедура УдалитьРегламентноеЗаданиеВыполнить()
	
	Если Элементы.ТаблицаРегламентныеЗадания.ТекущиеДанные = Неопределено Тогда
		Предупреждение( НСтр("ru = 'Выберите регламентное задание!'") );
		
	ИначеЕсли Вопрос(НСтр("ru = 'Удалить регламентное задание?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		УдалитьРегламентноеЗаданиеВыполнитьНаСервере(Элементы.ТаблицаРегламентныеЗадания.ТекущиеДанные.Идентификатор);
		ОбновитьСписокВыбораРегламентногоЗадания();
	КонецЕсли;
	
КонецПроцедуры // УдалитьРегламентноеЗаданиеВыполнить()

&НаСервере
Процедура УдалитьРегламентноеЗаданиеВыполнитьНаСервере(Идентификатор)
	
	Задание = УдалитьРегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание(Идентификатор);
	Если Задание.Предопределенное Тогда
		ВызватьИсключение( НСтр("ru = 'Невозможно удалить предопределенное регламентное задание!'") );
	Иначе
		Строка = ТаблицаРегламентныеЗадания.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор))[0];
		Задание.Удалить();
		ТаблицаРегламентныеЗадания.Удалить(ТаблицаРегламентныеЗадания.Индекс(Строка));
	КонецЕсли;
	
КонецПроцедуры // УдалитьРегламентноеЗаданиеВыполнитьНаСервере()

&НаКлиенте
Процедура ОбновитьДанныеВыполнить()
	
	ОбновитьДанные();
	
КонецПроцедуры // ОбновитьДанныеВыполнить()

&НаКлиенте
Процедура ОткрытьФоновоеЗаданиеВыполнить()
	
	Если Элементы.ТаблицаФоновыеЗадания.ТекущиеДанные = Неопределено Тогда
		Предупреждение (НСтр("ru = 'Выберите фоновое задание!'"));
	Иначе
		ОткрытьФормуМодально("Обработка.РегламентныеИФоновыеЗадания.Форма.ФоновоеЗадание",
		                     Новый Структура("Идентификатор", Элементы.ТаблицаФоновыеЗадания.ТекущиеДанные.Идентификатор));
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФоновоеЗаданиеВыполнить()

&НаКлиенте
Процедура ОтменитьФоновоеЗаданиеВыполнить()
	
	Если Элементы.ТаблицаФоновыеЗадания.ТекущиеДанные = Неопределено Тогда
		Предупреждение( НСтр("ru = 'Выберите фоновое задание!'") );
		
	Иначе
		ОтменитьФоновоеЗаданиеНаСервере(Элементы.ТаблицаФоновыеЗадания.ТекущиеДанные.Идентификатор);
		Предупреждение( НСтр("ru = 'Задание отменено, но состояние отмены будет
		                           |установлено сервером только через секунды,
		                           |возможно потребуется обновить данные вручную!'") );
	КонецЕсли;
	
КонецПроцедуры // ОтменитьФоновоеЗаданиеВыполнить()

&НаСервере
Процедура ОтменитьФоновоеЗаданиеНаСервере(Идентификатор)
	
	УдалитьРегламентныеЗаданияСервер.ОтменитьФоновоеЗадание(Идентификатор);
	
	ОбновитьДанные();
	
КонецПроцедуры // ОтменитьФоновоеЗаданиеНаСервере()

&НаКлиенте
Процедура ОткрытьРасписаниеРегламентногоЗаданияВыполнить()
	
	ТекущиеДанные = Элементы.ТаблицаРегламентныеЗадания.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Предупреждение( НСтр("ru = 'Выберите регламентное задание!'") );
	Иначе
		Диалог = Новый ДиалогРасписанияРегламентногоЗадания(УдалитьРегламентныеЗаданияСервер.ПолучитьРасписаниеРегламентногоЗадания(ТекущиеДанные.Идентификатор));
		Если Диалог.ОткрытьМодально() Тогда
			УдалитьРегламентныеЗаданияСервер.УстановитьРасписаниеРегламентногоЗадания(ТекущиеДанные.Идентификатор, Диалог.Расписание);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОткрытьРасписаниеРегламентногоЗаданияВыполнить()

&НаКлиенте
Процедура ОткрытьОтдельныйСеансОбработкиРегламентныхЗаданийВыполнить()
	
	Результат = РегламентныеЗаданияКлиент.ОткрытьОтдельныйСеансОбработкиРегламентныхЗаданий();
	Если Результат.Отказ  Тогда
		Предупреждение(Результат.ОписаниеОшибки);
	ИначеЕсли Результат.ВыполненаПопыткаОткрытия Тогда
		ПодключитьОбработчикОжидания("АктивизироватьОкно", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьОтдельныйСеансОбработкиРегламентныхЗаданийВыполнить()

&НаКлиенте
Процедура НастройкаОбработкиРегламентныхЗаданийВыполнить()

	ОткрытьФормуМодально("Обработка.РегламентныеИФоновыеЗадания.Форма.НастройкаОбработкиРегламентныхЗаданий");
	
КонецПроцедуры // НастройкаОбработкиРегламентныхЗаданийВыполнить()

&НаКлиенте
Процедура ОбработатьРегламентноеЗаданиеВручнуюВыполнить()

	ТекущиеДанные = Элементы.ТаблицаРегламентныеЗадания.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Предупреждение( НСтр("ru = 'Выберите регламентное задание!'") );
	Иначе
		ИдентификаторФоновогоЗадания = "";
		Если УдалитьСтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая Тогда
			МоментЗапуска = ОбщегоНазначенияКлиент.ДатаСеанса();
			ПоказатьОповещениеПользователя(НСтр("ru = 'Запущено регламентное задание'"), ,
				УдалитьСтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.
					|Процедура запущена в этом сеансе %2'"),
					ТекущиеДанные.Наименование,
					Строка(МоментЗапуска)),
				БиблиотекаКартинок.ОбработатьРегламентноеЗаданиеВручную);
			ОбработатьРегламентноеЗаданиеВручнуюНаСервере(ТекущиеДанные.Идентификатор, МоментЗапуска, ИдентификаторФоновогоЗадания);
		Иначе
			МоментЗапуска = Неопределено;
			ОбработатьРегламентноеЗаданиеВручнуюНаСервере(ТекущиеДанные.Идентификатор, МоментЗапуска, ИдентификаторФоновогоЗадания);
			ПоказатьОповещениеПользователя(НСтр("ru = 'Запущено регламентное задание'"), ,
				УдалитьСтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.
			    	|Процедура запущена в фоновом задании %2'"),
					ТекущиеДанные.Наименование,
					Строка(МоментЗапуска)),
				БиблиотекаКартинок.ОбработатьРегламентноеЗаданиеВручную);
		КонецЕсли;
		ИдентификаторыЗаданийПриРучнойОбработке.Добавить(ИдентификаторФоновогоЗадания, ТекущиеДанные.Наименование);
		ПодключитьОбработчикОжидания("СообщитьОбОкончанииРучнойОбработкиРегламентногоЗадания", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРегламентноеЗаданиеВручнуюВыполнить()

&НаСервере
Процедура ОбработатьРегламентноеЗаданиеВручнуюНаСервере(Знач ИдентификаторРегламентногоЗадания, МоментЗапуска, ИдентификаторФоновогоЗадания)
	
	УдалитьРегламентныеЗаданияСервер.ОбработатьРегламентноеЗаданиеВручную(ИдентификаторРегламентногоЗадания, МоментЗапуска, ИдентификаторФоновогоЗадания);
	
	ОбновитьДанные();
	
КонецПроцедуры // ОбработатьРегламентноеЗаданиеВручнуюНаСервере()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТЧИКИ СОБЫТИЙ
//
// Источники: элементы панелей, элементы формы

// Обработчик события ПриИзменении переключателя ВидОтбораПоПериоду
// управляет значениями реквизитов ОтборПериодС и ОтборПериодПо и доступностью
// элементов ОтборПериодС и ОтборПериодПо.
//
&НаКлиенте
Процедура ВидОтбораПоПериодуПриИзменении(Элемент)

	Элементы.ОтборПериодС.ТолькоПросмотр  = НЕ (ВидОтбораПоПериоду = 4);
	Элементы.ОтборПериодПо.ТолькоПросмотр = НЕ (ВидОтбораПоПериоду = 4);
	Если ВидОтбораПоПериоду = 0 Тогда
		ОтборПериодС    = '00010101';
		ОтборПериодПо   = '00010101';
	ИначеЕсли ВидОтбораПоПериоду = 1 Тогда
		ОтборПериодС    = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()) - 3 * 3600;
		ОтборПериодПо   = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()) + 9 * 3600;
	ИначеЕсли ВидОтбораПоПериоду = 2 Тогда
		ОтборПериодС    = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()) - 24 * 3600;
		ОтборПериодПо   = КонецДня(ОтборПериодС);
	ИначеЕсли ВидОтбораПоПериоду = 3 Тогда
		ОтборПериодС    = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
		ОтборПериодПо   = КонецДня(ОтборПериодС);
	ИначеЕсли ВидОтбораПоПериоду = 4 Тогда
		ОтборПериодС    = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
		ОтборПериодПо   = ОтборПериодС;
	КонецЕсли;
	
КонецПроцедуры // ВидОтбораПоПериодуПриИзменении()

// Обработчик ПриИзменении флажка ОтбиратьПоРегламентномуЗаданию изменяет доступность
// ПоляВвода РегламентноеЗаданиеДляОтбора.
//
&НаКлиенте
Процедура ОтбиратьПоРегламентномуЗаданиюПриИзменении(Элемент)

	Элементы.РегламентноеЗаданиеДляОтбора.Доступность = ОтбиратьПоРегламентномуЗаданию;
	
КонецПроцедуры // ОтбиратьПоРегламентномуЗаданиюПриИзменении()

// Обработчик события Очистка ПоляВвода РегламентноеЗаданиеДляОтбора
// устанавливает предопределенное в СпискеВыбора значение "<не определено>".
//
&НаКлиенте
Процедура РегламентноеЗаданиеДляОтбораОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	РегламентноеЗаданиеДляОтбораИдентификатор = ПустойИдентификатор;
	РегламентноеЗаданиеДляОтбораПредставление = ТекстНеОпределено;
	
КонецПроцедуры // РегламентноеЗаданиеДляОтбораОчистка()

// Обработчик события ОбработкаВыбора ПоляВвода РегламентноеЗаданиеДляОтбора
// устанавливает представление и идентификатор выбранного значения.
//
&НаКлиенте
Процедура РегламентноеЗаданиеДляОтбораОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЭлементСписка = Элементы.РегламентноеЗаданиеДляОтбора.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	РегламентноеЗаданиеДляОтбораИдентификатор = ЭлементСписка.Значение;
	РегламентноеЗаданиеДляОтбораПредставление = ЭлементСписка.Представление;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИсториюФоновыхЗаданий(Команда)
	
	ОчиститьИсториюФоновыхЗаданийНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьИсториюФоновыхЗаданийНаСервере()
	
	УдалитьРегламентныеЗаданияСервер.ОчиститьИсториюФоновыхЗаданий();
	ОбновитьДанные();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТЧИКИ СОБЫТИЙ
//
// Источники: поля, элементы полей

// Обработчик события Выбор поля ТаблицаФоновыеЗадания вызывает команду
// "ОткрытьФоновоеЗадание".
//
&НаКлиенте
Процедура ТаблицаФоновыеЗаданияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ОткрытьФоновоеЗаданиеВыполнить();
	
КонецПроцедуры // ТаблицаФоновыеЗаданияВыбор()

// Обработчик события Выбор поля ТаблицаРегламентныеЗадания вызывает команду
// "ИзменитьРегламентноеЗадание".
//
&НаКлиенте
Процедура ТаблицаРегламентныеЗаданияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ИзменитьРегламентноеЗаданиеВыполнить();
	
КонецПроцедуры // ТаблицаРегламентныеЗаданияВыбор()



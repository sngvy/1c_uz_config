
// Копирует в регистр сведений подчиненной валюты всю информацию из регистра
// сведений базовой валюты (период, курс, кратность).
//
// Параметры
//  ВалютаИсточник - Справочники.Валюты - ссылка на базовую валюту, из регистра
//                 сведений которой, будут копироваться данные
//  ВалютаПриемник - Справочники.Валюты - ссылка на зависимую валюту от базовой,
//                 в регистр сведений которой данные будут копироваться
//
Процедура ЗаписатьСведенияДляПодчиненногоРегистра(ВалютаИсточник, ВалютаПриемник) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ *
	              | ИЗ РегистрСведений.КурсыВалют
	              | ГДЕ Валюта = &ВалютаИсточник";
	Запрос.УстановитьПараметр("ВалютаИсточник", ВалютаИсточник);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	РегистрКурсыВалют = РегистрыСведений.КурсыВалют;
	НаборКурсов = РегистрКурсыВалют.СоздатьНаборЗаписей();
	
	НаборКурсов.Отбор.Валюта.ВидСравнения  = ВидСравнения.Равно;
	НаборКурсов.Отбор.Валюта.Значение      = ВалютаПриемник;
	НаборКурсов.Отбор.Валюта.Использование = Истина;
	
	КоэффициентПодчиненногоКурса = ВалютаПриемник.КоэффициентПодчиненногоКурса;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяЗаписьНабораКурсов = НаборКурсов.Добавить();
		НоваяЗаписьНабораКурсов.Валюта    = ВалютаПриемник;
		НоваяЗаписьНабораКурсов.Кратность = Выборка.Кратность;
		НоваяЗаписьНабораКурсов.Курс      = Выборка.Курс + Выборка.Курс*КоэффициентПодчиненногоКурса/100;
		НоваяЗаписьНабораКурсов.Период    = Выборка.Период;
		
	КонецЦикла;
	
	НаборКурсов.Записать();
	
КонецПроцедуры

// Проверяет наличие установленного курса и кратности валюты на 1 января 1980 года.
// В случае отсутствия устанавливает курс и кратность равными единице.
//
// Параметры:
//  Валюта - ссылка на элемент справочника Валют
//
Процедура ПроверитьКорректностьКурсаНа01_01_1980(Валюта) Экспорт
	
	ДатаКурса = Дата("19800101");
	СтруктураКурса = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", Валюта));
	
	Если (СтруктураКурса.Курс = 0) Или (СтруктураКурса.Кратность = 0) Тогда
		
		РегистрКурсыВалют = РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи();
		
		РегистрКурсыВалют.Период    = ДатаКурса;
		РегистрКурсыВалют.Валюта    = Валюта;
		РегистрКурсыВалют.Курс      = 1;
		РегистрКурсыВалют.Кратность = 1;
		РегистрКурсыВалют.Записать();
	КонецЕсли;
	
КонецПроцедуры // ПроверитьКорректностьКурсаНа01_01_1980()

// Функция, загружающая информацию о курсе валюты из файла в регистр
// сведений курсов валют. При этом файл с курсами разбирается и записываются
// только те данные, которые удовлетворяют периоду.
//
Функция ЗагрузитьКурсВалютыИзФайла(знач Валюта,
                                   знач СсылкаНаФайл,
                                   знач НачалоПериодаЗагрузки,
                                   знач ОкончаниеПериодаЗагрузки) Экспорт
	
	СтатусЗагрузки = 1;
	
	ЧислоЗагружаемыхДнейВсего = 1 + (ОкончаниеПериодаЗагрузки - НачалоПериодаЗагрузки) / ( 24 * 60 * 60);
	
	ЧислоЗагруженныхДней = 0;
	
	Если ЭтоАдресВременногоХранилища(СсылкаНаФайл) Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла();
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(СсылкаНаФайл);
		ДвоичныеДанные.Записать(ИмяФайла);
	Иначе
		ИмяФайла = СсылкаНаФайл;
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент();
	
	РегистрКурсыВалют = РегистрыСведений.КурсыВалют;
	
	Текст.Прочитать(ИмяФайла, КодировкаТекста.ANSI);
	КолСтрок = Текст.КоличествоСтрок();
	
	Для Инд = 1 По КолСтрок Цикл
		
		Стр = Текст.ПолучитьСтроку(Инд);
		Если (Стр = "") ИЛИ (Найти(Стр,Символы.Таб) = 0) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НачалоПериодаЗагрузки = ОкончаниеПериодаЗагрузки Тогда
			ДатаКурса = ОкончаниеПериодаЗагрузки;
		Иначе
			ДатаКурсаСтр = ВыделитьПодСтроку(Стр);
			ДатаКурса    = Дата(Лев(ДатаКурсаСтр,4), Сред(ДатаКурсаСтр,5,2), Сред(ДатаКурсаСтр,7,2));
		КонецЕсли;
		
		Кратность = Число(ВыделитьПодСтроку(Стр));
		Курс      = Число(ВыделитьПодСтроку(Стр));
		
		Если ДатаКурса > ОкончаниеПериодаЗагрузки Тогда
			Прервать;
		КонецЕсли;
		
		Если ДатаКурса < НачалоПериодаЗагрузки Тогда 
			Продолжить;
		КонецЕсли;
		
		ЗаписьКурсовВалют = РегистрКурсыВалют.СоздатьМенеджерЗаписи();
		
		ЗаписьКурсовВалют.Валюта    = Валюта;
		ЗаписьКурсовВалют.Период    = ДатаКурса;
		ЗаписьКурсовВалют.Курс      = Курс;
		ЗаписьКурсовВалют.Кратность = Кратность;
		ЗаписьКурсовВалют.Записать();
		
		ЧислоЗагруженныхДней = ЧислоЗагруженныхДней + 1;
	КонецЦикла;
	
	Если ЭтоАдресВременногоХранилища(СсылкаНаФайл) Тогда
		УдалитьФайлы(ИмяФайла);
		УдалитьИзВременногоХранилища(СсылкаНаФайл);
	КонецЕсли;
	
	Если ЧислоЗагружаемыхДнейВсего = ЧислоЗагруженныхДней Тогда
		ПояснениеОЗагрузке = "";
	ИначеЕсли ЧислоЗагруженныхДней = 0 Тогда
		ПояснениеОЗагрузке = НСтр("ru = 'Курсы валюты %1 - %2 не загружены. Нет данных.'");
	Иначе
		ПояснениеОЗагрузке = НСтр("ru = 'Загружены не все курсы по валюте %1 - %2.'");
	КонецЕсли;
	
	ПояснениеОЗагрузке = УдалитьСтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ПояснениеОЗагрузке,
									Валюта.Код,
									Валюта.Наименование);
	
	Возврат ПояснениеОЗагрузке;
	
КонецФункции

// Выделяет из переданной строки первое значение
 //  до символа "TAB"
 //
 // Параметры: 
 //  ИсходнаяСтрока - Строка - строка для разбора
 //
 // Возвращаемое значение:
 //  подстроку до символа "TAB"
 //
Функция ВыделитьПодСтроку(ИсходнаяСтрока)
	
	Перем ПодСтрока;
	
	Поз = Найти(ИсходнаяСтрока,Символы.Таб);
	Если Поз > 0 Тогда
		ПодСтрока = Лев(ИсходнаяСтрока,Поз-1);
		ИсходнаяСтрока = Сред(ИсходнаяСтрока,Поз + 1);
	Иначе
		ПодСтрока = ИсходнаяСтрока;
		ИсходнаяСтрока = "";
	КонецЕсли;
	
	Возврат ПодСтрока;
	
КонецФункции

Функция ПолучитьМассивЗагружаемыхВалют() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Ссылка КАК Ссылка
					|ИЗ Справочник.Валюты КАК Валюты
					|ГДЕ Валюты.ВалютаЗагружается";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Функция возвращает информацию о курсе валюты на основе ссылки на валюту.
// Данные возвращаются в виде структуры.
//
// Параметры:
// ВыбраннаяВалюта - Справочник.Валюты / Ссылка - ссылка на валюту, информацию
//                  о курсе которой необходимо получить
//
// Возвращаемое значение:
// ДанныеКурса   - стуктура, содержащая информацию о последней доступной 
//                 записи курса
//
Функция ЗаполнитьДанныеКурсаДляВалюты(ВыбраннаяВалюта) Экспорт
	
	ДанныеКурса = Новый Структура("ДатаКурса, Курс, Кратность");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РегКурсы.Период, РегКурсы.Курс, РегКурсы.Кратность
	              | ИЗ РегистрСведений.КурсыВалют.СрезПоследних(&ОкончаниеПериодаЗагрузки, Валюта = &ВыбраннаяВалюта) КАК РегКурсы";
	Запрос.УстановитьПараметр("ВыбраннаяВалюта", ВыбраннаяВалюта);
	Запрос.УстановитьПараметр("ОкончаниеПериодаЗагрузки", ТекущаяДатаСеанса());
	
	ВыборкаКурс = Запрос.Выполнить().Выбрать();
	ВыборкаКурс.Следующий();
	
	ДанныеКурса.ДатаКурса = ВыборкаКурс.Период;
	ДанныеКурса.Курс      = ВыборкаКурс.Курс;
	ДанныеКурса.Кратность = ВыборкаКурс.Кратность;
	
	Возврат ДанныеКурса;
	
КонецФункции

// Возвращает таблицу значений - валюты, зависящие от переданной
// в качестве параметра.
// Возвращаемое значение
// ТаблицаЗначений
// колонка "Ссылка" - СправочникСсылка.Валюты
// колонка "КоэффициентПодчиненногоКурса" - число
//
Функция ПолучитьСписокЗависимыхВалют(знач ВалютаБазовая) Экспорт
	
	Запрос	= Новый Запрос;
	Запрос.Текст = "Выбрать Ссылка, КоэффициентПодчиненногоКурса
	                | ИЗ Справочник.Валюты Как СпрВалюты
	                | ГДЕ ПодчиненныйКурсОт = &ВалютаБазовая";
	
	Запрос.УстановитьПараметр("ВалютаБазовая", ВалютаБазовая);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ОбновитьФорматХраненияПрописиНаРусскомЯзыке() Экспорт
	
	ВыборкаВалют = Справочники.Валюты.Выбрать();
	
	Пока ВыборкаВалют.Следующий() Цикл
		Объект = ВыборкаВалют.ПолучитьОбъект();
		СтрокаПараметров = СтрЗаменить(Объект.ПараметрыПрописиНаРусском, ",", Символы.ПС);
		Род1 = НРег(Лев(СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 4)), 1));
		Род2 = НРег(Лев(СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 8)), 1));
		Объект.ПараметрыПрописиНаРусском = 
					  СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 1)) + ", "
					+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 2)) + ", "
					+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 3)) + ", "
					+ Род1 + ", "
					+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 5)) + ", "
					+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 6)) + ", "
					+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 7)) + ", "
					+ Род2 + ", "
					+ СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 9));
		Объект.Записать();
	КонецЦикла;
	
КонецПроцедуры

//-----------------------------------------------------------------------------
// Структура модуля формы:
//
// Глобальные переменные
//
// Общие сервисные функции:
// - сервисные функции сервер,
// - сервисные функции клиент,
// - сервисные функции клиент-сервер.
//
// Обработка внешних событий
//
// Работа с историей звонков
//
// Работа с контактами линий
//
// Управление подключением
//
// Управление разговором:
// - начало разговора,
// - прием/отклонение входящего звонка,
// - завершение разговора,
// - переадресация, удержание,
// - запись,
// - DTMF.
//
// Управление микрофоном/динамиками
//
// Взаимодействие с пользовательским интерфейсом:
// - общие функции интерфейса,
// - события формы,
// - командная панель,
// - панель линий,
// - основная панель,
// - панель истории,
// - панель Избранного,
// - обработка статусов.
//
// Интеграция с БИТ.АТС
//
// Обработка оповещений
//-----------------------------------------------------------------------------

#Область ОписаниеПеременных

// Глобальные переменные

&НаКлиенте
Перем СофтФон;

&НаКлиенте
Перем обКонтроллерАТС;

&НаКлиенте
Перем фрмОбработкаВызова;

&НаКлиенте
Перем фрмВводаНомераПеревода;

// Тип - Соответствие (Map)
//  ключ - строка-номер телефона,
//  значение - структура из двух полей (КонтрагентСсылка, КонтрагентНаименование).
&НаКлиенте
Перем кэшКонтактов;

// Массив структур
&НаКлиенте
Перем ИнформацияЛиний;

&НаКлиенте
Перем МассивИдентификаторовПолученияСтатуса;

&НаКлиенте
Перем АсинхронноеИзменениеСтатусаНеБеспокоить;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте                                                                
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Если Источник = "1С_Софтфон" Тогда	
		Если 		Событие = "Регистрация" Тогда  			//---Регистрация(при попытке подключения к серверу)
			ОбработчикСобытияРегистрация(Данные);
		ИначеЕсли 	Событие = "ВходящийЗвонок" Тогда		//---Входящий вызов
			ОбработчикСобытияВходящийЗвонок(Данные);
		ИначеЕсли 	Событие = "ПропущенныйЗвонок" Тогда		//---Пропущенный вызов
			ОбработчикСобытияПропущенныйЗвонок(Данные);
		ИначеЕсли 	Событие = "СостояниеЗвонка" Тогда		//---Установка/Завершение звонка	
			ОбработчикСобытияСостояниеЗвонка(Данные);
		ИначеЕсли Событие = "ОбновлениеЗвонка" Тогда
			ОбработчикСобытияОбновлениеЗвонка(Данные);
		ИначеЕсли Событие = "СостояниеПодписки" Тогда      //--Отслеживание статусов абонентов по SIP
			ОбработчикСобытияСостояниеПодписки(Данные);
		ИначеЕсли	Событие = "Софтфон_Ошибка" Тогда        //---Оповещение об ошибке
			ОбработчикСобытияОшибка(Данные);
		КонецЕсли;
	КонецЕсли;
	
	Если Источник = ИмяИсточникаСобытийИнтегрБИТАТС() Тогда
		Если Событие = "Ошибка" Тогда
			бит_ТелефонияКлиент.ВывестиСообщение(Данные, ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РегуляторМикрофонПриИзменении(Элемент)
	УровеньМикрофона=-1*(Микрофон-255);
	Если МикрофонВключен Тогда
		УстановитьМикрофон(УровеньМикрофона);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РегуляторГромкостьПриИзменении(Элемент)
	УровеньГромкости=-1*(Громкость-255);
	Если ГромкостьВключена Тогда
		УстановитьГромкость(УровеньГромкости);
	КонецЕсли;
КонецПроцедуры

// - события формы
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СофтФон 			= Неопределено;
	обКонтроллерАТС		= Неопределено;
	ИдетРазговор 		= Ложь;
	ИдетЗапись			= Ложь;
	ВызовУдержан		= Ложь;
	УровеньГромкости 	= 255;
	УровеньМикрофона 	= 255;
	ГромкостьВключена 	= Истина;
	МикрофонВключен 	= Истина;
	фрмОбработкаВызова 	= Неопределено;
	СтатусПодключен		= Ложь;
	СтатусНеБеспокоить	= Ложь;
	фрмВводаНомераПеревода		= Неопределено;
	
	АсинхронноеИзменениеСтатусаНеБеспокоить	= Ложь;
	
	кэшКонтактов		= Новый Соответствие;
	МассивИдентификаторовПолученияСтатуса	= Новый Массив;
	
	ИнформацияЛиний = Новый Массив;
	Для й=0 По 3 Цикл
		инфЛиния = Новый Структура;
		инфЛиния.Вставить("НабранныйНомер", "");
		инфЛиния.Вставить("ЗаписьРазговора", "");
		инфЛиния.Вставить("НомерРазговора", "");
		ИнформацияЛиний.Добавить(инфЛиния);
	КонецЦикла;
	
	//
	Если НЕ бит_БитфонСервер.ПроверитьНастройкиТекущегоПользователя() Тогда
		ПарамНастр = бит_БитфонСервер.ПолучитьПараметрыОткрытияФормыНастроек();
		фрмМастерНастроек = ПолучитьФорму("РегистрСведений.бит_БитфонНастройки.Форма.ФормаЗаписиСтартовая", ПарамНастр);
		Если НЕ фрмМастерНастроек.БольшеНеПоказывать Тогда
			бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуСБлокировкойВладельца(фрмМастерНастроек, "БитФон_ПриОткрытииЗавершение", , Истина);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПриОткрытииЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОтключитьСофтФон()
КонецПроцедуры

&НаКлиенте
Процедура ГруппаЛинииПриСменеСтраницы(Элемент, ТекущаяСтраница)
	группаКанал = ПолучитьКаналТекущейЛинии();
	ОбновитьПанель(группаКанал);
КонецПроцедуры

&НаКлиенте
Процедура ЛинияВКонференцииПриИзменении(Элемент)
	конфКанал = ПолучитьКаналТекущейЛинии();
	Если СофтФон <> Неопределено Тогда
		активн = Софтфон.IsChannelActive(конфКанал);
		Если активн Тогда
			каналВКонф = Софтфон.IsChannelInConference(конфКанал);
			Если каналВКонф Тогда
				СофтФон.RemoveFromConference(конфКанал);
			Иначе
				СофтФон.AddToConference(конфКанал);
			КонецЕсли;
		Иначе
			ПоказатьОповещениеПользователя("На канале нет разговора");
		КонецЕсли;
	КонецЕсли;
	ОбновитьПанель(конфКанал);
КонецПроцедуры

// - панель истории
&НаКлиенте
Процедура ГруппаБИТфонПанелиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.Имя = "ГруппаПанельИстория" Тогда
		ПроверитьТекущуюДатуОбновитьИсторию();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппаВидыИсторииПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ПроверитьТекущуюДатуОбновитьИсторию();
КонецПроцедуры

&НаКлиенте
Процедура ИсторияЗвонковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущийЭлемент = Элементы.ГруппаПанельОсновная;
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	НачатьРазговорНаКанале(каналАктивнойЛинии, Элемент.ТекущиеДанные.Номер);
КонецПроцедуры

&НаКлиенте
Процедура ИзбранноеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	СтатусыИспользуются = бит_БитфонСервер.ПолучитьФлагПолучениеСтатусовАбонентов();
		
	Номер = Элементы.Избранное.ТекущиеДанные.Номер;
	КодСтатуса = Элементы.Избранное.ТекущиеДанные.ИндексКартинкиСтатуса;
	ОтслеживатьСтатус = Элементы.Избранное.ТекущиеДанные.ОтслеживатьСтатус;
	
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	ОбновитьПанель(каналАктивнойЛинии);
	ТекущийЭлемент = Элементы.ГруппаПанельОсновная;
	
	Если ИдетРазговор Тогда
		Если СтатусыИспользуются И ОтслеживатьСтатус И КодСтатуса <> 1 Тогда // статус 1 - свободен
			бит_ТелефонияКлиент.ВывестиСообщение("Абонент не доступен для перевода звонка.");
		Иначе
			ПеревестиЗвонокНаКанале(каналАктивнойЛинии, Номер);
		КонецЕсли;
	Иначе
		Если СтатусыИспользуются И ОтслеживатьСтатус И КодСтатуса <> 1 Тогда // статус 1 - свободен
			бит_ТелефонияКлиент.ВывестиСообщение("Абонент не доступен для звонка."); 
		Иначе
			НачатьРазговорНаКанале(каналАктивнойЛинии, Номер);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//-----------------------------------------------------------------------------
// Обработка оповещений
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
		УстановитьНомерЛинии(каналАктивнойЛинии, ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "БитФон_ПриОткрытииЗавершение" Тогда
		резВводаНастроек = Параметр.Результат;
		Если (резВводаНастроек = Ложь) ИЛИ (резВводаНастроек = Неопределено) Тогда
			Закрыть();
			Возврат;
		Иначе
			ПриОткрытииЗавершение();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "БитФон_СофтфонПодключен" Тогда
		СофтФон = Параметр.Результат;
		Если СофтФон <> Неопределено Тогда
			Если бит_БитфонКлиент.ПроверкаРазрешенногоАдреса(СофтФон, "БитФон_ПроверкаАдресаПодключения") Тогда
				ОбновитьВсеПанели();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "БитФон_ПроверкаАдресаПодключения" Тогда
		Если Параметр.Результат = КодВозвратаДиалога.Да Тогда
			бит_БитфонСервер.УстановитьРазрешенныйАдрес(Параметр.ПараметрОповещения);
			инициализацияУспешна = бит_БитфонКлиент.ИнициализироватьСофтфонРегистрацияНаАТС(СофтФон);
			Если инициализацияУспешна Тогда
				ОбновитьВсеПанели();
			КонецЕсли;
		Иначе
			ОтключитьСофтФон();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "БитФон_ИнтегрМониторБИТАТС_ПодключениеВнешнейКомпоненты" Тогда
		обКонтроллерАТС = Параметр.Результат;
		Если обКонтроллерАТС <> Неопределено Тогда
			обКонтроллерАТС.SetMessageSourceName( ИмяИсточникаСобытийИнтегрБИТАТС() );
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "БитФон_ОбработкаВходящегоЗвонка" Тогда
		резОбработки		= Параметр.Результат;
		НомерКанала			= Параметр.ПараметрОповещения.НомерКанала;
		НомерНеОпределен	= Параметр.ПараметрОповещения.НомерНеОпределен;
		НомерВходящий		= Параметр.ПараметрОповещения.НомерВходящий;
		Если резОбработки = "принять" Тогда
			ПринятьВходящийВызовНаКанале(НомерКанала);
		Иначе
			ОтклонитьВходящийВызовНаКанале(НомерКанала);
		КонецЕсли;
		Если резОбработки <> "завершенВДругомМесте" И бит_БитфонСервер.ПолучитьФлагПредлагатьСохранитьНеизвестныйНомер() Тогда
			бит_ТелефонияКлиент.ОткрытьФормуОбработкиНеизвестногоНомера(НомерНеОпределен, НомерВходящий);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "БитФон_НачатьРазговор" Тогда
		НачатьРазговор(Параметр);
	ИначеЕсли ИмяСобытия = "БитФон_ЗавершитьРазговор" Тогда
		ЗавершитьВсеРазговоры();
	ИначеЕсли ИмяСобытия = "БитФон_ПеревестиРазговор" Тогда
		каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
		Номер = Параметр;
		ПеревестиЗвонокНаКанале(каналАктивнойЛинии, Номер);
	ИначеЕсли ИмяСобытия = "БитФон_ПереводЗвонка" Тогда
		Если ЗначениеЗаполнено(Параметр.Результат) Тогда
			стрНомерПеревода = Параметр.Результат;
			каналАктивнойЛинии = Параметр.ПараметрОповещения;
			ПеревестиЗвонокНаКанале(каналАктивнойЛинии, стрНомерПеревода);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "БитФон_ПереводЗвонкаОбъединениеЛиний" Тогда
		ПереводЗвонкаПослеВыбораЛиний(Параметр.Результат, Параметр.ПараметрОповещения);
	ИначеЕсли ИмяСобытия = "БитФон_ОбновлениеНастроек" Тогда
		СтарыеНастройки = Параметр.ПараметрОповещения;
		ОбновитьНастройки(СтарыеНастройки);
	ИначеЕсли ИмяСобытия = "БитФон_ОбновитьИзбранное" Тогда
		ИзбранноеОбновитьКлиент();
		Если Параметр <> Неопределено Тогда
			массСтрок = Избранное.НайтиСтроки(Параметр);
			Если массСтрок.Количество() > 0 Тогда
				Элементы.Избранное.ТекущаяСтрока = массСтрок[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "БитФон_УдалитьИзбранное" Тогда
		Если Параметр.Результат = КодВозвратаДиалога.Да Тогда
			ИзбранноеСсылка = Параметр.ПараметрОповещения;
			бит_ТелефонияСервер.ИзбранноеУдалить(ИзбранноеСсылка);
			Оповестить("БитФон_ОбновитьИзбранное");
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "БитФонНастройки_ТестВходящегоЗвонка" Тогда
		Если СофтФон <> Неопределено Тогда
			СофтФон.RingTest(Параметр.ТипВходящегоЗвонка, Параметр.ФайлВходящегоЗвонка);
		КонецЕсли;
	КонецЕсли;
	
	// Область взаимодействий
	
	Если ИмяСобытия = "ОбработатьСостояниеЗвонка" Тогда
		Если ЭтаФорма.СостояниеЗвонка = "ЗвонокОтклонён" Тогда
			ПоказатьОповещениеПользователя("БИТ.Phone",,"Нет ответа",БиблиотекаКартинок.NC_ОшибкаЗвонка);
			Оповестить("ОбновитьВремяРаботы");			
			Оповестить("НеудачныйЗвонок");
			ЭтаФорма.СостояниеЗвонка = "";
		ИначеЕсли ЭтаФорма.СостояниеЗвонка = "ЗвонокПрерван" Тогда
			Если ЭтаФорма.ДлительностьРазговора = "0:00:00" Тогда
				ПоказатьОповещениеПользователя("БИТ.Phone",,"Вызов сброшен",БиблиотекаКартинок.NC_ЗвонокСброшен);
				Оповестить("ОбновитьВремяРаботы");
				Оповестить("СброшенныйЗвонок");
				ЭтаФорма.СостояниеЗвонка = "";
			ИначеЕсли ЭтаФорма.ДлительностьРазговора = "0:00:01"
				ИЛИ ЭтаФорма.ДлительностьРазговора = "0:00:02"
				ИЛИ ЭтаФорма.ДлительностьРазговора = "0:00:03"
				ИЛИ ЭтаФорма.ДлительностьРазговора = "0:00:04"
				ИЛИ ЭтаФорма.ДлительностьРазговора = "0:00:05"
				ИЛИ ЭтаФорма.ДлительностьРазговора = "0:00:06"
				ИЛИ ЭтаФорма.ДлительностьРазговора = "0:00:07"
				ИЛИ ЭтаФорма.ДлительностьРазговора = "0:00:08"
				ИЛИ ЭтаФорма.ДлительностьРазговора = "0:00:09"
				ИЛИ ЭтаФорма.ДлительностьРазговора = "0:00:10" Тогда
				ПоказатьОповещениеПользователя("БИТ.Phone",,"Нет ответа",БиблиотекаКартинок.NC_ОшибкаЗвонка);
				Оповестить("ОбновитьВремяРаботы");
				Оповестить("НеудачныйЗвонок");
				ЭтаФорма.СостояниеЗвонка = "";
			ИначеЕсли ЭтаФорма.ДлительностьРазговора <> "0:00:00"
				ИЛИ ЭтаФорма.ДлительностьРазговора <> "0:00:01"
				ИЛИ ЭтаФорма.ДлительностьРазговора <> "0:00:02"
				ИЛИ ЭтаФорма.ДлительностьРазговора <> "0:00:03"
				ИЛИ ЭтаФорма.ДлительностьРазговора <> "0:00:04"
				ИЛИ ЭтаФорма.ДлительностьРазговора <> "0:00:05"
				ИЛИ ЭтаФорма.ДлительностьРазговора <> "0:00:06"
				ИЛИ ЭтаФорма.ДлительностьРазговора <> "0:00:07"
				ИЛИ ЭтаФорма.ДлительностьРазговора <> "0:00:08"
				ИЛИ ЭтаФорма.ДлительностьРазговора <> "0:00:09"
				ИЛИ ЭтаФорма.ДлительностьРазговора <> "0:00:10" Тогда
				Оповестить("ОбновитьВремяРаботы");
				Оповестить("ОбновитьДлительностьРазговора");
				ЭтаФорма.КнОтключить(Неопределено);
				ЭтаФорма.СостояниеЗвонка = "";
				ПоказатьОповещениеПользователя("БИТ.Phone",,"Разговор завершен. Длительность разговора: "+ЭтаФорма.ДлительностьРазговора,БиблиотекаКартинок.NC_РазговорЗавершен);
				ЭтаФорма.ДлительностьРазговора = "0:00:00";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// - командная панель
&НаКлиенте
Процедура кнПодключить(Команда) Экспорт
	ПоказатьОповещениеПользователя("БИТ.Phone",,"Вы на линии",БиблиотекаКартинок.NC_Онлайн);
	Если СтатусПодключен Тогда
		ОтменитьСтатусНеБеспокоить();
	Иначе
		текущРежимНеБеспокоить = бит_БитфонСервер.ПолучитьФлагРежимНеБеспокоить();
		Если текущРежимНеБеспокоить Тогда
			АсинхронноеИзменениеСтатусаНеБеспокоить = Истина;
		КонецЕсли;
		Подключение();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнОтключить(Команда) Экспорт
	ПоказатьОповещениеПользователя("БИТ.Phone",,"Вы не на линии",БиблиотекаКартинок.NC_Оффлайн);
	ОтключитьСофтФон();
КонецПроцедуры

&НаКлиенте
Процедура кнПереподключить(Команда) Экспорт
	кнОтключить(Команда);
	текущРежимНеБеспокоить = бит_БитфонСервер.ПолучитьФлагРежимНеБеспокоить();
	Если текущРежимНеБеспокоить Тогда
		кнНеБеспокоить(Команда);
	Иначе
		кнПодключить(Команда);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнНеБеспокоить(Команда) Экспорт
	Если СтатусПодключен Тогда
		УстановитьСтатусНеБеспокоить();
	Иначе
		текущРежимНеБеспокоить = бит_БитфонСервер.ПолучитьФлагРежимНеБеспокоить();
		Если НЕ текущРежимНеБеспокоить Тогда
			АсинхронноеИзменениеСтатусаНеБеспокоить = Истина;
		КонецЕсли;
		Подключение();
	КонецЕсли;
	ПоказатьОповещениеПользователя("БИТ.Phone",,"Установлен статус «Не беспокоить»",БиблиотекаКартинок.NC_НеБеспокоить);
КонецПроцедуры

&НаКлиенте
Процедура кнНастройки(Команда)
	бит_БитфонКлиент.ОткрытьФормуНастроек(СофтФон);
КонецПроцедуры

&НаКлиенте
Процедура КнПринятьВходящий(Команда)
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	ПринятьВходящийВызовНаКанале(каналАктивнойЛинии);
КонецПроцедуры

&НаКлиенте
Процедура КнОтклонитьВходящий(Команда)
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	ОтклонитьВходящийВызовНаКанале(каналАктивнойЛинии);
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияОЗвонке(Команда)
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	Если СофтФон <> Неопределено Тогда
		стрИнф = СофтФон.GetInviteHeaders(каналАктивнойЛинии);
		Если ЗначениеЗаполнено(стрИнф) Тогда
			чтХмл = Новый ЧтениеXML();
			чтХмл.УстановитьСтроку(стрИнф);
			постр = Новый ПостроительDOM();
			докХмл = постр.Прочитать(чтХмл);
			корнУзел = докХмл.ПервыйДочерний;
			Для Каждого узел ИЗ корнУзел.ДочерниеУзлы Цикл
				бит_ТелефонияКлиент.ВывестиСообщение(узел.ИмяУзла + ": " + узел.ТекстовоеСодержимое);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// - основная панель
&НаКлиенте
Процедура КнОГр(Команда)
	Если ГромкостьВключена Тогда
		ОтключитьГромкость();
	Иначе
		ВключитьГромкость();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КнОМик(Команда) Экспорт
	Если МикрофонВключен Тогда
		ОтключитьМикрофон();
	Иначе
		ВключитьМикрофон();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачатьРазговорКл(Команда) Экспорт
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	Если СофтФон <> Неопределено И СофтФон.IsIncomingCall(каналАктивнойЛинии) И НЕ Софтфон.IsInCall(каналАктивнойЛинии) Тогда
		ПринятьВходящийВызовНаКанале(каналАктивнойЛинии);
	Иначе
		Номер = ПолучитьНомерЛинии(каналАктивнойЛинии);
		НачатьРазговорНаКанале(каналАктивнойЛинии, Номер);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КнОтбой(Команда) Экспорт
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	Если СофтФон <> Неопределено И СофтФон.IsIncomingCall(каналАктивнойЛинии) И НЕ Софтфон.IsInCall(каналАктивнойЛинии) Тогда
		ОтклонитьВходящийВызовНаКанале(каналАктивнойЛинии);
	Иначе
		ЗавершитьРазговор(каналАктивнойЛинии);
	КонецЕсли;
	ОбновитьПанель(каналАктивнойЛинии);
КонецПроцедуры

&НаКлиенте
Процедура КнУдержатьВызов(Команда) Экспорт
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	ОбновитьПанель(каналАктивнойЛинии);
	Если ИдетРазговор Тогда 
		НовоеСостояниеУдержания = Не ВызовУдержан;
		УдержатьВызов(каналАктивнойЛинии, НовоеСостояниеУдержания);
		ОбновитьПанель(каналАктивнойЛинии);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КнПереводЗвонка(Команда)
	Если НЕ ИдетРазговор Тогда
		Возврат;
	КонецЕсли;
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	типПеревода = бит_БитфонСервер.ПолучитьТипПереводаЗвонка();
	Если типПеревода = ПредопределенноеЗначение("Перечисление.бит_ТипПереводаЗвонка.Условный") Тогда
		Если бит_БитфонСервер.ПолучитьФлагПроверкаСтатусаНомераПередПереводом() Тогда
			ПереводЗвонкаВыборНомераСПроверкойСтатуса("БитФон_ПереводЗвонка", каналАктивнойЛинии)
		Иначе
			Если НабратьКомандуПереадресацииНаКанале(каналАктивнойЛинии) Тогда
				УстановитьНомерЛинии(каналАктивнойЛинии, "");
				ПоказатьОповещениеПользователя("Введите номер переадресации");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли типПеревода = ПредопределенноеЗначение("Перечисление.бит_ТипПереводаЗвонка.Безусловный") Тогда
		Если бит_БитфонСервер.ПолучитьФлагПроверкаСтатусаНомераПередПереводом() Тогда
			ПереводЗвонкаВыборНомераСПроверкойСтатуса("БитФон_ПереводЗвонка", каналАктивнойЛинии)
		Иначе
			формаВводаНомераПеревода = ПолучитьФорму("Обработка.бит_БитфонОбщее.Форма.ФормаВводаНомераПеревода");
			бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуСБлокировкойВладельца(формаВводаНомераПеревода, "БитФон_ПереводЗвонка", каналАктивнойЛинии);
		КонецЕсли;
	ИначеЕсли типПеревода = ПредопределенноеЗначение("Перечисление.бит_ТипПереводаЗвонка.ОбъединениеЛиний") Тогда
		списокЛиний = Новый СписокЗначений;
		списокАктивныхКаналов = Новый Массив;
		Для й=0 По 3 Цикл
			// каналам от 0 до 3 соответствуют линии от 1 до 4
			списокЛиний.Добавить(й, "Линия " + Строка(й+1));
			Если СофтФон.IsInCall(й) Тогда
				списокАктивныхКаналов.Добавить(й);
			КонецЕсли;
		КонецЦикла;
		Если списокАктивныхКаналов.Количество() = 2 Тогда
			Если каналАктивнойЛинии = списокАктивныхКаналов[0] Тогда
				ОбъединитьКаналы(списокАктивныхКаналов[0], списокАктивныхКаналов[1]);
			Иначе
				ОбъединитьКаналы(списокАктивныхКаналов[1], списокАктивныхКаналов[0]);
			КонецЕсли;
		Иначе
			списокЛиний.Добавить(Неопределено, "Отмена");
			бит_ТелефонияКлиентПереопределяемый.ПоказВопрос("Выберите линию для объединения", списокЛиний, , , , "БитФон_ПереводЗвонкаОбъединениеЛиний", каналАктивнойЛинии);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КН1(Команда)
	КодКнопки = Прав(Команда.Имя, 1);
	ДТМФВызовНаАктивнойЛинии(КодКнопки);
	СофтФон.PlayDTMF(КодКнопки);
КонецПроцедуры

&НаКлиенте
Процедура КНЗВ(Команда)
	стрКомЗв = "*";
	ДТМФВызовНаАктивнойЛинии(стрКомЗв);
	СофтФон.PlayDTMF(стрКомЗв);
КонецПроцедуры

&НаКлиенте
Процедура КНРеш(Команда)
	стрКомРеш = "#";
	ДТМФВызовНаАктивнойЛинии(стрКомРеш);
	СофтФон.PlayDTMF(стрКомРеш);
КонецПроцедуры

&НаКлиенте
Процедура КнУдалитьПоследнийСимволНомера(Команда)
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	Номер = ПолучитьНомерЛинии(каналАктивнойЛинии);
	Номер = Лев(Номер,СтрДлина(Номер)-1);
	УстановитьНомерЛинии(каналАктивнойЛинии,Номер);
КонецПроцедуры

&НаКлиенте
Процедура кнКонтакты(Команда)
	бит_ТелефонияКлиент.ОткрытьФормуВыбораНомера(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура кнSMS(Команда)
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	Номер = ПолучитьНомерЛинии(каналАктивнойЛинии);
	Если Не ЗначениеЗаполнено(Номер) Тогда
		Если СофтФон <> Неопределено И Софтфон.IsInCall(каналАктивнойЛинии) Тогда
			Номер = СофтФон.GetChannelName(каналАктивнойЛинии);
		КонецЕсли;
	КонецЕсли;
	бит_ТелефонияКлиент.ОтправитьSMS(Номер);
КонецПроцедуры

&НаКлиенте
Процедура кнФакс(Команда)
	номерФакса = бит_БитфонСервер.ПолучитьНомерФакса();
	Если ИдетРазговор Тогда
		Если ЗначениеЗаполнено(номерФакса) Тогда
			каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
			ПеревестиЗвонокНаКанале(каналАктивнойЛинии, номерФакса);
		Иначе
			бит_ТелефонияКлиент.ВывестиСообщение("Не задан номер факса в настройках");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кнЗаписьРазговора(Команда)
	записьОбязательна = бит_БитфонСервер.ПолучитьФлагВсегдаЗаписыватьРазговор();
	Если записьОбязательна = Истина Тогда
		ПоказатьОповещениеПользователя("Разговор записывается автоматически",
			, "см. пункт 'Всегда записывать разговор' в настройках");
		Возврат;
	КонецЕсли;
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	ОбновитьПанель(каналАктивнойЛинии);
	Если ИдетЗапись Тогда
		ОстановитьЗапись(каналАктивнойЛинии);
	Иначе
		НачатьЗапись(каналАктивнойЛинии);
	КонецЕсли;
	ОбновитьПанель(каналАктивнойЛинии);
КонецПроцедуры

&НаКлиенте
Процедура КнСтационарныйТелефон(Команда)
	бит_АТСКлиент.ОткрытьМонитор();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсюИсторию(Команда)
	бит_ТелефонияКлиент.ОткрытьФормуОтчетаИсторииЗвонков(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура АналитикаАТС(Команда)
	бит_АТСКлиент.ОткрытьАналитикуБИТАТС(бит_БитфонСервер.ПолучитьАТС());
КонецПроцедуры

&НаКлиенте
Процедура Информация(Команда)
	строкаИстории = ПолучитьТекущуюСтрокуВИстории();
	Если строкаИстории = Неопределено Тогда
		Возврат;
	КонецЕсли;
	стрТекущНомер	= строкаИстории.Номер;
	текущАбонент	= строкаИстории.Абонент;
	стрТекущАбонент	= Строка(текущАбонент);
	
	текущКонтрагент = Неопределено;
	текущКонтактноеЛицо = Неопределено;
	контраг_найден = НайтиКонтрагентаПоНомеру(стрТекущНомер, текущКонтрагент, текущКонтактноеЛицо);
	Если НЕ контраг_найден = Истина Тогда
		текущКонтрагент = текущАбонент;
	КонецЕсли;
	
	ФормаК = ПолучитьФорму("Обработка.бит_Битфон.Форма.ФормаКонтрагента");
	ФормаК.ВладелецФормы = ЭтаФорма;
	ФормаК.Контрагент = текущКонтрагент;
	ФормаК.КонтактноеЛицо = текущКонтактноеЛицо;
	ФормаК.Объект.ИсторияЗвонковИсходящие.Очистить();
	ФормаК.Объект.ИсторияЗвонковВходящие.Очистить();
	
	Для Каждого ТЧСтрока Из Объект.ИсторияЗвонковИсходящие Цикл
		Если ТЧСтрока.Номер = стрТекущНомер ИЛИ ТЧСтрока.Абонент = стрТекущАбонент
			ИЛИ ТЧСтрока.Абонент = текущКонтрагент Тогда
				Тстрока = ФормаК.Объект.ИсторияЗвонковИсходящие.Добавить();
				ЗаполнитьЗначенияСвойств(Тстрока, ТЧСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТЧСтрока Из Объект.ИсторияЗвонковВходящие Цикл
		Если ТЧСтрока.Номер = стрТекущНомер ИЛИ ТЧСтрока.Абонент = стрТекущАбонент
			ИЛИ ТЧСтрока.Абонент = текущКонтрагент Тогда
				Тстрока = ФормаК.Объект.ИсторияЗвонковВходящие.Добавить();
				ЗаполнитьЗначенияСвойств(Тстрока, ТЧСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ФормаК.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтрагента(Команда)
	строкаИстории = ПолучитьТекущуюСтрокуВИстории();
	Если строкаИстории = Неопределено Тогда
		Возврат;
	КонецЕсли;
	стрТекущНомер	= строкаИстории.Номер;
	
	текущКонтрагент = Неопределено;
	текущКонтактноеЛицо = Неопределено;
	контраг_найден = НайтиКонтрагентаПоНомеру(стрТекущНомер, текущКонтрагент, текущКонтактноеЛицо);
	//
	Если контраг_найден = Истина Тогда
		ПоказатьОповещениеПользователя("Контрагент '" + Строка(текущКонтрагент) + "' уже существует");
		Возврат;
	КонецЕсли;
	бит_ТелефонияКлиентПереопределяемый.СоздатьНовогоКонтрагента(стрТекущНомер);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНомер(Команда)
	строкаИстории = ПолучитьТекущуюСтрокуВИстории();
	Если строкаИстории = Неопределено Тогда
		Возврат;
	КонецЕсли;
	стрТекущНомер	= строкаИстории.Номер;
	
	бит_ТелефонияКлиентПереопределяемый.ВыбратьКонтрагентаЗадатьНомер(стрТекущНомер);
КонецПроцедуры

&НаКлиенте
Процедура ПрослушатьЗапись(Команда)
	строкаИстории = ПолучитьТекущуюСтрокуВИстории();
	Если строкаИстории = Неопределено Тогда
		Возврат;
	КонецЕсли;
	стрТекущЗапись	= строкаИстории.ЗаписьРазговора;
	
	бит_БитфонКлиент.ВоспроизвестиЗаписьРазговора(стрТекущЗапись);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияЗвонковЗаписьДетально(Команда)
	строкаИстории = ПолучитьТекущуюСтрокуВИстории();
	Если строкаИстории = Неопределено Тогда
		Возврат;
	КонецЕсли;
	отбор = бит_ТелефонияКлиент.СоздатьСтруктуруПараметровЗвонка();
	ЗаполнитьЗначенияСвойств(отбор, строкаИстории);
	отбор.СвойНомер = СвойНомер;
	бит_ТелефонияКлиент.ОткрытьФормуПросмотраЗвонка(отбор);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияЗвонковОтправкаSMS(Команда)
	строкаИстории = ПолучитьТекущуюСтрокуВИстории();
	Если строкаИстории = Неопределено Тогда
		Возврат;
	КонецЕсли;
	бит_ТелефонияКлиент.ОтправитьSMS(строкаИстории.Номер);
КонецПроцедуры

// - панель Избранного
&НаКлиенте
Процедура ИзбранноеСоздать(Команда)
	бит_ТелефонияКлиент.ИзбранноеСоздать("БитФон_ОбновитьИзбранное");
КонецПроцедуры

&НаКлиенте
Процедура ИзбранноеСкопировать(Команда)
	бит_ТелефонияКлиент.ИзбранноеСкопировать(ЭтаФорма, "БитФон_ОбновитьИзбранное");
КонецПроцедуры

&НаКлиенте
Процедура ИзбранноеИзменить(Команда)
	бит_ТелефонияКлиент.ИзбранноеИзменить(ЭтаФорма, "БитФон_ОбновитьИзбранное");
КонецПроцедуры

&НаКлиенте
Процедура ИзбранноеУдалить(Команда)
	бит_ТелефонияКлиент.ИзбранноеУдалить(ЭтаФорма, "БитФон_УдалитьИзбранное");
КонецПроцедуры

&НаКлиенте
Процедура ИзбранноеОбновить(Команда)
	ИзбранноеОбновитьКлиент();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//-----------------------------------------------------------------------------
// Общие сервисные функции

// - сервисные функции сервер

&НаСервере
Функция НайтиКонтрагентаПоНомеруСервер(Знач НомерДляПоиска, КонтрагентСсылка, КонтактноеЛицоСсылка, флагЕстьДубли)
	флагЕстьДубли = Ложь;
	длинаНомера = СтрДлина(НомерДляПоиска);
	длинаВнешнегоНомера = бит_ТелефонияКлиентСервер.ПолучитьДлинуВнешнегоНомера();
	ВнешнийВызов = (длинаНомера >= длинаВнешнегоНомера);
	найден = бит_ТелефонияСервер.НайтиКонтрагентаПоНомеруВИзбранном(НомерДляПоиска, ВнешнийВызов, КонтрагентСсылка);
	Если найден <> Истина Тогда
		флагНеИскатьКонтрагента = бит_БитфонСервер.ПолучитьФлагНеИскатьКонтрагента();
		флагПоискДублей = бит_БитфонСервер.ПолучитьФлагПоискДублей();
		найден = бит_ТелефонияСервер.НайтиКонтрагентаИКонтактноеЛицоПоНомеру(НомерДляПоиска, КонтрагентСсылка, КонтактноеЛицоСсылка, флагНеИскатьКонтрагента,
					флагПоискДублей, флагЕстьДубли);
	КонецЕсли;
	возврат найден;
КонецФункции

// - сервисные функции клиент

&НаКлиенте
Функция НайтиКонтрагентаПоНомеру(Знач НомерДляПоиска, КонтрагентСсылка, КонтактноеЛицоСсылка)
	флагЕстьДубли = Ложь;
	найден = НайтиКонтрагентаПоНомеруСервер(НомерДляПоиска, КонтрагентСсылка, КонтактноеЛицоСсылка, флагЕстьДубли);
	Если флагЕстьДубли Тогда
		бит_ТелефонияКлиент.ОткрытьФормуОбработкиДублейНомера(НомерДляПоиска, ЭтаФорма);
	КонецЕсли;
	возврат найден;
КонецФункции

// Проверяет, что номер является командой АТС для включения/выключения статуса 'Не беспокоить'.
//
// Параметры:
//  стрНомер - Строка - номер телефона.
//
// Возвращаемое значение:
//   Булево - Истина, если номер - команда изменения статуса.
//
&НаКлиенте
Функция ПроверитьКомандуИзмененияСтатусаНеБеспокоить(стрНомер)
	РежимНеБеспокоитьНаАТС = бит_БитфонСервер.ПолучитьФлагИспользоватьКомандуНеБеспокоитьНаАТС();
	Если НЕ РежимНеБеспокоитьНаАТС Тогда
		Возврат Ложь;
	КонецЕсли;
	стрКомандаНеБеспокоить = бит_БитфонСервер.ПолучитьКомандуНеБеспокоить();
	стрКомандаОтменитьНеБеспокоить = бит_БитфонСервер.ПолучитьКомандуОтменаНеБеспокоить();
	флагКомандаИзмененияСтатуса = Ложь;
	Если (стрНомер = стрКомандаНеБеспокоить) ИЛИ (стрНомер = стрКомандаОтменитьНеБеспокоить) Тогда
		флагКомандаИзмененияСтатуса = Истина;
	КонецЕсли;
	Возврат флагКомандаИзмененияСтатуса;
КонецФункции

// - сервисные функции клиент-сервер
&НаКлиентеНаСервереБезКонтекста
Функция ФорматироватьДлительностьЗвонка(Длительность)
	Если НЕ ЗначениеЗаполнено(Длительность) Тогда
		Возврат "";
	КонецЕсли;
	//
	длитМин = Цел(Длительность / 60);
	длитСек = Длительность % 60;
	длитЧас = Цел(длитМин / 60);
	длитМин = длитМин % 60;
	стрФорматаБезЛидНуля = "ЧЦ=1; ЧН=; ЧВН=";
	стрФорматаСЛидНулем = "ЧЦ=2; ЧН=; ЧВН=";
	Если длитМин > 0 ИЛИ длитЧас > 0 ИЛИ длитСек > 9 Тогда
		стрДлительность = Формат(длитСек, стрФорматаСЛидНулем);
	Иначе
		стрДлительность = Формат(длитСек, стрФорматаБезЛидНуля);
	КонецЕсли;
	Если длитМин > 0 ИЛИ длитЧас > 0 Тогда
		стрДлительность = Формат(длитМин, ?((длитЧас > 0 ИЛИ длитМин > 9), стрФорматаСЛидНулем, стрФорматаБезЛидНуля) ) + ":" + стрДлительность;
	КонецЕсли;
	Если длитЧас > 0 Тогда
		стрДлительность = Строка(длитЧас) + ":" + стрДлительность;
	КонецЕсли;
	Возврат стрДлительность;
КонецФункции

//-----------------------------------------------------------------------------
// Обработка внешних событий
&НаКлиенте
Процедура ОбработчикСобытияРегистрация(Данные)
	Если Данные = "Успешно" Тогда
		//
		ПодключитьОбработчикОжидания("ОбновитьДлительностьРазговора", 1, Ложь);
		ИзбранноеОбновитьКлиент();	// Статусы
		//
		СтатусПодключен = Истина;
		СтатусНеБеспокоить = бит_БитфонСервер.ПолучитьФлагРежимНеБеспокоить();
		Если АсинхронноеИзменениеСтатусаНеБеспокоить Тогда
			АсинхронноеИзменениеСтатусаНеБеспокоить = Ложь;
			Если СтатусНеБеспокоить Тогда
				ОтменитьСтатусНеБеспокоить();
			Иначе
				УстановитьСтатусНеБеспокоить();
			КонецЕсли;
		КонецЕсли;
		ОбновитьСтатусыПодключения();
	Иначе
		СтатусПодключен = Ложь;
		ОбновитьСтатусыПодключения();
		бит_ТелефонияКлиент.ВывестиСообщение("Ошибка регистрации: " + Данные);
		ПоказатьОповещениеПользователя("Ошибка регистрации: ", , Данные);
		бит_БитфонСервер.ЗаписатьОшибкуВЖурналРегистрации("Ошибка регистрации", Данные);
	КонецЕсли;
	//
	Если ЗначениеЗаполнено(ПриПодключенииДействие) Тогда
		Оповестить(ПриПодключенииДействие, ПриПодключенииПараметр);
		ПриПодключенииДействие = "";
		ПриПодключенииПараметр = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСобытияОшибка(Данные)
	бит_ТелефонияКлиент.ВывестиСообщение("Ошибка Софтфон: " + Данные, ЭтаФорма);
	бит_БитфонСервер.ЗаписатьОшибкуВЖурналРегистрации("Софтфон_Ошибка", Данные);
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	// Если ошибка произошла во время инициализации софтфона, то при обновлении панели будет вызвано исключение.
	// Обрабатывать это исключение не нужно.
	Попытка
		ОбновитьПанель(каналАктивнойЛинии);
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСобытияВходящийЗвонок(Данные)
	
	Если бит_БитфонСервер.ПолучитьФлагРазворачиватьОкноПриВходящемЗвонке() И Не СтатусНеБеспокоить Тогда
		Активизировать();
	КонецЕсли;
	
	Канал = Число(Данные);
	ИмяВходящий = СофтФон.GetChannelSIPName(Канал);
	НомерВходящий = "";
	НомерПеревода = "";
	ПолучитьНомераКанала(Канал, НомерВходящий, НомерПеревода);
	
	НомерНабранный = СофтФон.GetDestination(Канал);
	НомерНабранный = бит_ТелефонияСервер.ПолучитьНаименованиеНабранногоНомера(НомерНабранный);
	ИнформацияЛиний[Канал].НабранныйНомер = НомерНабранный;
	
	контактВходящий		= Неопределено;
	номерНеОпределен	= Ложь;
	контактноеЛицо = Неопределено;
	номер_найден = НайтиКонтрагентаПоНомеру(НомерВходящий, контактВходящий, контактноеЛицо);
	Если номер_найден <> Истина Тогда 
		номерНеОпределен = Истина;
		контактВходящий = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(НомерВходящий);
	КонецЕсли;
	УстановитьКонтактыЛинии(Канал, НомерВходящий, контактВходящий, контактноеЛицо);
	
	Если ЗначениеЗаполнено(НомерПеревода) Тогда
		контактПеревод		= Неопределено;
		контактноеЛицоПеревод = Неопределено;
		номер_перевода_найден = НайтиКонтрагентаПоНомеру(НомерПеревода, контактПеревод, контактноеЛицоПеревод);
		Если номер_перевода_найден <> Истина Тогда 
			контактПеревод = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(НомерПеревода);
		КонецЕсли;
		УстановитьКонтактыПереводаЛинии(Канал, контактПеревод, контактноеЛицоПеревод);
	КонецЕсли;
	
	Если СтатусНеБеспокоить Тогда
		ОтклонитьВходящийВызовНаКанале(Канал);
		Возврат;
	КонецЕсли;
	
	ТекстЗаголовка = "Вызывает номер " + НомерВходящий;
	Текст = Строка(контактВходящий);
	ссылкаНавиг = "";
	флагПолучитьНавигСсылку = Ложь;
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		флагПолучитьНавигСсылку = Истина;
		Если ТипЗнч(контактВходящий) <> Тип("Строка") Тогда
			ссылкаНавиг = ПолучитьНавигационнуюСсылку(контактВходящий);
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(контактноеЛицо) Тогда
		Текст = Текст + " (" + Строка(контактноеЛицо) + ")";
		Если флагПолучитьНавигСсылку Тогда
			ссылкаНавиг = ПолучитьНавигационнуюСсылку(контактноеЛицо);
		КонецЕсли;
	КонецЕсли;
	ПоказатьОповещениеПользователя("Вас вызывает номер " + НомерВходящий, , Строка(контактВходящий),БиблиотекаКартинок.NC_ВходящийЗвонок);
	
	Если бит_БитфонСервер.ПолучитьФлагОткрыватьКартуЯндексПриВходящемЗвонке() И
	  СтрДлина(НомерВходящий) >= бит_ТелефонияКлиентСервер.ПолучитьДлинуВнешнегоНомера() Тогда
		//ПараметрыЯндекс = Новый Структура("Номер", НомерВходящий);
		//фрмКартаЯндекс = ПолучитьФорму("Обработка.бит_БитфонОбщее.Форма.ФормаКартаЯндекс", ПараметрыЯндекс);
		//фрмКартаЯндекс.Открыть();
	  	бит_ТелефонияКлиентПереопределяемый.ЗапускПрограммы("http://maps.yandex.ru/?text=" + НомерВходящий);
	КонецЕсли;
	
	режимНесколькихВход	= бит_БитфонСервер.ПолучитьФлагПриниматьНесколькоВходящих();
	
	Если режимНесколькихВход Тогда
		Элементы.ГруппаЛинии.ТекущаяСтраница = Элементы["ГруппаЛиния" + Строка(Канал+1)];
		ОбновитьПанель(Канал);
		Если бит_БитфонСервер.ПолучитьФлагПредлагатьСохранитьНеизвестныйНомер() Тогда
			бит_ТелефонияКлиент.ОткрытьФормуОбработкиНеизвестногоНомера(номерНеОпределен, НомерВходящий);
		КонецЕсли;
		Если бит_БитфонСервер.ПолучитьФлагРазворачиватьОкноПриВходящемЗвонке() Тогда
			Активизировать();
		КонецЕсли;
	Иначе
		ОбработатьВходящийВызовВМодальномДиалоге(НомерВходящий, НЕ номерНеОпределен, контактВходящий, контактноеЛицо, НомерНабранный, Канал);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСобытияПропущенныйЗвонок(Данные)
	флагСохранитьПропущенный = бит_БитфонСервер.ПолучитьФлагСохранятьОтклоненныйПриРазговореВходящий();
	Если флагСохранитьПропущенный Тогда
		параметрыПропущЗвонка = бит_ТелефонияКлиентСервер.СтрРазбить(Данные, "#");
		НомерВходящий = параметрыПропущЗвонка[0].Значение;
		НомерНабранный = "";
		Если параметрыПропущЗвонка.Количество() > 1 Тогда
			НомерНабранный = параметрыПропущЗвонка[1].Значение;
			НомерНабранный = бит_ТелефонияСервер.ПолучитьНаименованиеНабранногоНомера(НомерНабранный);
		КонецЕсли;
		контактВходящий	= Неопределено;
		контактноеЛицо = Неопределено;
		номер_найден = НайтиКонтрагентаПоНомеру(НомерВходящий, контактВходящий, контактноеЛицо);
		Если номер_найден <> Истина Тогда 
			контактВходящий = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(НомерВходящий);
		КонецЕсли;
		стрНомерДляИстории = НомерВходящий;
		прямойНабор = бит_БитфонСервер.ПолучитьФлагИспользоватьПрямойНабор();
		Если НЕ прямойНабор Тогда
			стрНомерДляИстории = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(стрНомерДляИстории);
		КонецЕсли;
		ДобавитьВИсториюВходящие(стрНомерДляИстории, контактВходящий, контактноеЛицо, Ложь,
			0, НомерНабранный, "");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСобытияСостояниеЗвонка(Данные)
	
	параметрыЗвонка = бит_ТелефонияКлиентСервер.СтрРазбить(Данные, "#");
	Состояние = параметрыЗвонка[0].Значение;
	Канал = Число(параметрыЗвонка[1].Значение);
	длительностьЗвонкаСек = Число(параметрыЗвонка[2].Значение);
	
	Если фрмОбработкаВызова <> Неопределено Тогда
		Если фрмОбработкаВызова.Открыта() Тогда
			флагЗавершенВДругомМесте = СофтФон.IsCompletedElsewhere(Канал);
			фрмОбработкаВызова.Закрыть(?(флагЗавершенВДругомМесте, "завершенВДругомМесте", Неопределено));
		КонецЕсли;
	КонецЕсли;
	
	Если фрмВводаНомераПеревода <> Неопределено Тогда
		Если фрмВводаНомераПеревода.Открыта() Тогда
			фрмВводаНомераПеревода.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
	// Заглушка для значения IsIncomingCall
	Попытка
		ВходящийВызов = СофтФон.IsIncomingCall(Канал);
	Исключение
		ФормаНетОтвета = ПолучитьФорму("ОбщаяФорма.АТСНеОтвечает");
		ФормаНетОтвета.Открыть();
	КонецПопытки;
	НомерЗвонка		= "";
	НомерПеревода	= "";
	ПолучитьНомераКанала(Канал, НомерЗвонка, НомерПеревода);
	//
	Если Состояние = "ЗвонокУспешен" И (НЕ ВходящийВызов) И ЗначениеЗаполнено(НомерПеревода) Тогда
		стрНомерЗвонкаСокр = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(НомерЗвонка);
		стрНомерПереводаСокр = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(НомерПеревода);
		Если стрНомерЗвонкаСокр <> стрНомерПереводаСокр Тогда
			// Номер абонента уже изменился, например при перехвате.
			// Событие звонка будет создано в обработчике события изменения номера.
			УстановитьКонтактыЛинии(Канал, "", Неопределено, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	НомерНабранный = ИнформацияЛиний[Канал].НабранныйНомер;
	
	контактВходящий		= Неопределено;
	контактноеЛицо		= Неопределено;
	ПолучитьКонтактыЛинии(Канал, контактВходящий, контактноеЛицо);
	
	флагИзменениеСтатуса	= ПроверитьКомандуИзмененияСтатусаНеБеспокоить(НомерЗвонка);
	
	Если флагИзменениеСтатуса Тогда
		
		ОбработкаСостоянияКомандыИзмененияСтатусаНеБеспокоить(НомерЗвонка, Состояние);
		
	Иначе
		
		стрНомерДляИстории = НомерЗвонка;
		
		прямойНабор = бит_БитфонСервер.ПолучитьФлагИспользоватьПрямойНабор();
		Если НЕ прямойНабор Тогда
			стрНомерДляИстории = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(стрНомерДляИстории);
		КонецЕсли;
		
		ОбработкаСостоянияОбычногоКанала(Канал, Состояние, ВходящийВызов, НомерЗвонка, стрНомерДляИстории,
			контактВходящий, контактноеЛицо, длительностьЗвонкаСек, НомерНабранный);

	КонецЕсли;
	
	Если Состояние = "ЗвонокОтклонён" ИЛИ Состояние = "ЗвонокПрерван" Тогда
		ОчиститьКонтактыЛинии(Канал);
		ИнформацияЛиний[Канал].НабранныйНомер = "";
		ИнформацияЛиний[Канал].ЗаписьРазговора = "";
		ИнформацияЛиний[Канал].НомерРазговора = "";
		СофтФон.HandleDisconnected(Канал);
	КонецЕсли;
	
	УстановитьНомерЛинии(Канал, "");
	ОбновитьЗаголовокПанели(Канал);
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	Если каналАктивнойЛинии = Канал Тогда
		ОбновитьПанель(Канал);
	КонецЕсли;
	
	// Область взаимодействий
	
	Если Состояние = "ЗвонокОтклонён" Тогда
		ЭтаФорма.СостояниеЗвонка = "ЗвонокОтклонён";
		Оповестить("ОбработатьСостояниеЗвонка");
	ИначеЕсли Состояние = "ЗвонокПрерван" Тогда
		ЭтаФорма.СостояниеЗвонка = "ЗвонокПрерван";
		Оповестить("ОбработатьСостояниеЗвонка");
	КонецЕсли;
	
	//
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСостоянияКомандыИзмененияСтатусаНеБеспокоить(НомерЗвонка, Состояние)
	
	стрКомандаНеБеспокоить = бит_БитфонСервер.ПолучитьКомандуНеБеспокоить();
	стрКомандаОтменитьНеБеспокоить = бит_БитфонСервер.ПолучитьКомандуОтменаНеБеспокоить();
	
	УстНеБеспокоить = Ложь;
	
	Если стрКомандаНеБеспокоить = стрКомандаОтменитьНеБеспокоить Тогда
		УстНеБеспокоить = НЕ СтатусНеБеспокоить;
	Иначе
		УстНеБеспокоить = (НомерЗвонка = стрКомандаНеБеспокоить);
	КонецЕсли;
	
	Если Состояние = "ЗвонокОтклонён" Тогда
		
		Элементы.ГруппаБИТфонПанели.Доступность = Истина;
		
		стрОшибкаИзмененияСтатусаНеБеспокоить = "Не удалось изменить статус 'Не беспокоить'";
		
		Если УстНеБеспокоить Тогда
			стрОшибкаИзмененияСтатусаНеБеспокоить = "Не удалось установить статус 'Не беспокоить' на АТС";
		Иначе
			стрОшибкаИзмененияСтатусаНеБеспокоить = "Не удалось отменить статус 'Не беспокоить' на АТС";
		КонецЕсли;
		
		бит_ТелефонияКлиент.ВывестиСообщение("Ошибка изменения статуса: " + стрОшибкаИзмененияСтатусаНеБеспокоить);
		
	ИначеЕсли Состояние = "ЗвонокПрерван" Тогда
		
		Элементы.ГруппаБИТфонПанели.Доступность = Истина;
		
		СтатусНеБеспокоить = УстНеБеспокоить;
		
		бит_БитфонСервер.УстановитьФлагРежимНеБеспокоить(СтатусНеБеспокоить);
		
	КонецЕсли;
	
	ОбновитьСтатусыПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСостоянияОбычногоКанала(Канал, Состояние, ВходящийВызов, НомерЗвонка, стрНомерДляИстории,
										контактВходящий, контактноеЛицо, длительностьЗвонкаСек, стрНабранныйНомер)
	Если Состояние = "ЗвонокУспешен" Тогда			//Обработчик установки связи
		Если ВходящийВызов Тогда				//Обработка входящего звонка
			ПроверитьДоступностьМикрофонаИДинамиков();
		Иначе									//Обработка исходящего звонка
			стрИмяФайлаЗаписи = "";
			записьОбязательна = бит_БитфонСервер.ПолучитьФлагВсегдаЗаписыватьРазговор();
			Если записьОбязательна Тогда
				стрИмяФайлаЗаписи = НачатьЗапись(Канал);
			КонецЕсли;
			//
			создаватьСобытие = бит_БитфонСервер.ПолучитьФлагСоздаватьСобытиеИсходящийЗвонок();
			Если создаватьСобытие Тогда
				структПараметрыСобытия = бит_ТелефонияКлиент.СоздатьСтруктуруПараметровСобытия(Ложь,
					контактВходящий, стрНомерДляИстории, контактноеЛицо, стрИмяФайлаЗаписи, "");
					
					//УЗ привязка к отрытым формам	
					Если ЭтаФорма.ФормаМероприятие <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
						бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуМероприятия(ЭтаФорма.ФормаМероприятие, стрИмяФайлаЗаписи);
					Иначе
						ссылкаСобытие = бит_БитфонСервер.СоздатьСобытие(структПараметрыСобытия);
						бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуДокументаСобытие(ссылкаСобытие);
					КонецЕсли;

			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Состояние = "ЗвонокПрерван" Тогда 	//Обработчик завершения разговора
		
		стрИмяФайлаЗаписи = ПолучитьИмяФайлаЗаписи(Канал);
		Если ВходящийВызов Тогда
			флагРазгУспешен = (длительностьЗвонкаСек > 0) ;
			ДобавитьВИсториюВходящие(стрНомерДляИстории, контактВходящий, контактноеЛицо,
				флагРазгУспешен, длительностьЗвонкаСек, стрНабранныйНомер, стрИмяФайлаЗаписи);
		Иначе
			ДобавитьВИсториюИсходящие(стрНомерДляИстории, контактВходящий, контактноеЛицо, Истина, длительностьЗвонкаСек, стрИмяФайлаЗаписи);
		КонецЕсли;
		// Проиграть сигнал
		// ПоказатьОповещениеПользователя("Разговор завершен");
		Сигнал();
	ИначеЕсли Состояние = "ЗвонокОтклонён" Тогда 	//На удаленной стороне сбросили вызов не поднимая трубку.
		
		Если ВходящийВызов Тогда
			ЗавершенВДругомМесте = СофтФон.IsCompletedElsewhere(Канал);
			Если НЕ ЗавершенВДругомМесте Тогда
				ДобавитьВИсториюВходящие(стрНомерДляИстории, контактВходящий, контактноеЛицо, Ложь,
					длительностьЗвонкаСек, стрНабранныйНомер, "");
			КонецЕсли;
		Иначе
			ДобавитьВИсториюИсходящие(стрНомерДляИстории, контактВходящий, контактноеЛицо, Ложь, длительностьЗвонкаСек, "");
		КонецЕсли;
		// Проиграть сигнал
		// ПоказатьОповещениеПользователя("Звонок отклонен");
		Сигнал();
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНомераКанала(чКанал, НомерКаналаОсновной, НомерКаналаПеревод)
	Попытка
		НомерКаналаОсновной	= СофтФон.GetChannelName(чКанал);
		НомерКаналаПеревод	= СофтФон.GetChannelRPIDName(чКанал);
		Если ЗначениеЗаполнено(НомерКаналаПеревод) Тогда
			стрВрем = НомерКаналаОсновной;
			НомерКаналаОсновной = НомерКаналаПеревод;
			НомерКаналаПеревод = стрВрем;
		КонецЕсли;
	Исключение
		ФормаНетОтвета = ПолучитьФорму("ОбщаяФорма.АТСНеОтвечает");
		ФормаНетОтвета.Открыть();
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСобытияОбновлениеЗвонка(Данные)
	параметрыЗвонка = бит_ТелефонияКлиентСервер.СтрРазбить(Данные, "#");
	Канал			= Число(параметрыЗвонка[0].Значение);
	СтарыйНомер		= параметрыЗвонка[1].Значение;
	ВходящийВызов	= СофтФон.IsIncomingCall(Канал);
	НовыйНомер		= "";
	НомерПеревода	= "";
	ПолучитьНомераКанала(Канал, НовыйНомер, НомерПеревода);
	//
	контактВходящий	= Неопределено;
	контактноеЛицо	= Неопределено;
	номер_найден = НайтиКонтрагентаПоНомеру(НовыйНомер, контактВходящий, контактноеЛицо);
	Если НЕ номер_найден Тогда 
		контактВходящий = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(НовыйНомер);
	КонецЕсли;
	УстановитьКонтактыЛинии(Канал, НовыйНомер, контактВходящий, контактноеЛицо);
	//
	НовыйНомерСокр = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(НовыйНомер);
	СтарыйНомерСокр = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(СтарыйНомер);
	НомерПереводаСокр = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(НомерПеревода);
	Если НовыйНомерСокр = СтарыйНомерСокр Тогда
		Если (Не ЗначениеЗаполнено(НомерПеревода)) Или (НовыйНомерСокр = НомерПереводаСокр) Тогда
			УстановитьКонтактыПереводаЛинии(Канал, Неопределено, Неопределено);
			каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
			Если каналАктивнойЛинии = Канал Тогда
				ОбновитьПанель(Канал);
			КонецЕсли;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//
	контактПеревод			= Неопределено;
	контактноеЛицоПеревод	= Неопределено;
	номер_перевода_найден = НайтиКонтрагентаПоНомеру(НомерПеревода, контактПеревод, контактноеЛицоПеревод);
	Если номер_перевода_найден <> Истина Тогда 
		контактПеревод = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(НомерПеревода);
	КонецЕсли;
	УстановитьКонтактыПереводаЛинии(Канал, контактПеревод, контактноеЛицоПеревод);
	//
	ОбновитьЗаголовокПанели(Канал);
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	Если каналАктивнойЛинии = Канал Тогда
		ОбновитьПанель(Канал);
	КонецЕсли;
	//
	создаватьСобытие = бит_БитфонСервер.ПолучитьФлагСоздаватьСобытиеВходящийЗвонок();
	Если создаватьСобытие Тогда
		стрИмяФайлаЗаписи = ПолучитьИмяФайлаЗаписи(Канал);
		структПараметрыСобытия = бит_ТелефонияКлиент.СоздатьСтруктуруПараметровСобытия(ВходящийВызов,
			контактВходящий, НовыйНомер, контактноеЛицо, стрИмяФайлаЗаписи, ИнформацияЛиний[Канал].НабранныйНомер);
		ссылкаСобытие = бит_БитфонСервер.СоздатьСобытие(структПараметрыСобытия);
		бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуДокументаСобытие(ссылкаСобытие);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСобытияСостояниеПодписки(Данные)
	Ид = Число(Данные);
	ОбновитьСтатусАбонентаSIP(Ид);
КонецПроцедуры

//-----------------------------------------------------------------------------
// Работа с историей звонков
&НаСервере
Процедура ДобавитьВИсториюВходящие(стрНомерВходящий, Абонент, КонтактноеЛицо, Успешность, Длительность, стрНабранныйНомер, стрЗаписьРазговора)
	бит_ТелефонияСервер.ДобавитьВИсториюЗвонков(СвойНомер, Истина, стрНомерВходящий, Абонент, КонтактноеЛицо,
		Успешность, Длительность, стрНабранныйНомер, стрЗаписьРазговора);
	ЗаполнитьИсторию();
КонецПроцедуры

&НаСервере
Процедура ДобавитьВИсториюИсходящие(стрНомерИсходящий, Абонент, КонтактноеЛицо, Успешность, Длительность, стрЗаписьРазговора)
	бит_ТелефонияСервер.ДобавитьВИсториюЗвонков(СвойНомер, Ложь, стрНомерИсходящий, Абонент, КонтактноеЛицо,
		Успешность, Длительность, "", стрЗаписьРазговора);
	ЗаполнитьИсторию();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсторию()
	глубинаИстории = бит_БитфонСервер.ПолучитьГлубинуИсторииЗвонков();
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ " + Строка(глубинаИстории) + "
	|	бит_ИсторияЗвонков.Номер,
	|	бит_ИсторияЗвонков.Абонент,
	|	бит_ИсторияЗвонков.КонтактноеЛицо,
	|	бит_ИсторияЗвонков.Дата КАК Дата,
	|	бит_ИсторияЗвонков.ТипЗвонка,
	|	бит_ИсторияЗвонков.Успешность,
	|	бит_ИсторияЗвонков.ДлительностьЗвонка,
	|	бит_ИсторияЗвонков.ЗаписьРазговора
	|ИЗ
	|	РегистрСведений.бит_ИсторияЗвонков КАК бит_ИсторияЗвонков
	|ГДЕ
	|	бит_ИсторияЗвонков.ТипЗвонка = ЗНАЧЕНИЕ(Перечисление.бит_ТипЗвонка.Исходящий)
	|	И бит_ИсторияЗвонков.Пользователь = &Пользователь
	|	И бит_ИсторияЗвонков.СвойНомер = &СвойНомер
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ " + Строка(глубинаИстории) + "
	|	бит_ИсторияЗвонков.Номер,
	|	бит_ИсторияЗвонков.Абонент,
	|	бит_ИсторияЗвонков.КонтактноеЛицо,
	|	бит_ИсторияЗвонков.Дата КАК Дата,
	|	бит_ИсторияЗвонков.ТипЗвонка,
	|	бит_ИсторияЗвонков.Успешность,
	|	бит_ИсторияЗвонков.ДлительностьЗвонка,
	|	бит_ИсторияЗвонков.ЗаписьРазговора
	|ИЗ
	|	РегистрСведений.бит_ИсторияЗвонков КАК бит_ИсторияЗвонков
	|ГДЕ
	|	бит_ИсторияЗвонков.ТипЗвонка = ЗНАЧЕНИЕ(Перечисление.бит_ТипЗвонка.Входящий)
	|	И бит_ИсторияЗвонков.Пользователь = &Пользователь
	|	И бит_ИсторияЗвонков.СвойНомер = &СвойНомер
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";

	Запрос.УстановитьПараметр("Пользователь", бит_ТелефонияСервер.ПолучитьТекущегоПользователя());
	Запрос.УстановитьПараметр("СвойНомер", СвойНомер);
	Результат = Запрос.ВыполнитьПакет();
	
	ИсходящиеЗвонки = Результат.Получить(0).Выгрузить();
	ВходящиеЗвонки = Результат.Получить(1).Выгрузить();
	
	ТекущееНачалоДня = НачалоДня(ТекущаяДата());
	
	Объект.ИсторияЗвонковИсходящие.Очистить();
	Для каждого исход Из ИсходящиеЗвонки Цикл
		строкаИсход = Объект.ИсторияЗвонковИсходящие.Добавить();
		ЗаполнитьЗначенияСвойств(строкаИсход, исход);
		строкаИсход.ВыводДлительностьЗвонка = ФорматироватьДлительностьЗвонка(исход.ДлительностьЗвонка);
		строкаИсход.ВыводДата = бит_ТелефонияКлиентСервер.ФорматироватьДатуРазговора(ТекущееНачалоДня, исход.Дата);
	КонецЦикла;
	
	Объект.ИсторияЗвонковВходящие.Очистить();
	Для каждого вход Из ВходящиеЗвонки Цикл
		строкаВход = Объект.ИсторияЗвонковВходящие.Добавить();
		ЗаполнитьЗначенияСвойств(строкаВход, вход);
		строкаВход.ВыводДлительностьЗвонка = ФорматироватьДлительностьЗвонка(вход.ДлительностьЗвонка);
		строкаВход.ВыводДата = бит_ТелефонияКлиентСервер.ФорматироватьДатуРазговора(ТекущееНачалоДня, вход.Дата);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверкаЕстьИсторияЗвонковСтарыхРелизов()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_ИсторияЗвонков.Дата
	               |ИЗ
	               |	РегистрСведений.бит_ИсторияЗвонков КАК бит_ИсторияЗвонков
	               |ГДЕ
	               |	бит_ИсторияЗвонков.Пользователь = &Пользователь
	               |	И бит_ИсторияЗвонков.СвойНомер = """"";
	Запрос.УстановитьПараметр("Пользователь", бит_ТелефонияСервер.ПолучитьТекущегоПользователя());
	Возврат НЕ (Запрос.Выполнить().Пустой());
КонецФункции

&НаСервере
Процедура ПереносИсторииЗвонковСтарыхРелизов()
	стрСвойНомерОбновл = бит_БитфонСервер.ПолучитьСвойНомер();
	Если ЗначениеЗаполнено(стрСвойНомерОбновл) Тогда
		наборЗаписей = РегистрыСведений.бит_ИсторияЗвонков.СоздатьНаборЗаписей();
		наборЗаписей.Отбор.Пользователь.Установить(бит_ТелефонияСервер.ПолучитьТекущегоПользователя());
		наборЗаписей.Прочитать();
		Для Каждого записьИстории Из наборЗаписей Цикл
			Если ПустаяСтрока(записьИстории.СвойНомер) Тогда
				записьИстории.СвойНомер = стрСвойНомерОбновл;
			КонецЕсли;
		КонецЦикла;
		наборЗаписей.Записать();
	КонецЕсли;
КонецПроцедуры

//-----------------------------------------------------------------------------
// Работа с контактами линий
&НаКлиенте
Процедура УстановитьКонтактыЛинии(чНомерКанала, стрНомерРазговора, КонтрагентСсылка, КонтактноеЛицоСсылка)
	стрЛиния = Строка(чНомерКанала + 1);
	ЭтаФорма["Линия" + стрЛиния + "Абонент"] = КонтрагентСсылка;
	ЭтаФорма["Линия" + стрЛиния + "КонтактноеЛицо"] = КонтактноеЛицоСсылка;
	ИнформацияЛиний[чНомерКанала].НомерРазговора = стрНомерРазговора;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКонтактыЛинии(чНомерКанала, КонтрагентСсылка, КонтактноеЛицоСсылка)
	стрЛиния = Строка(чНомерКанала + 1);
	КонтрагентСсылка		= ЭтаФорма["Линия" + стрЛиния + "Абонент"];
	КонтактноеЛицоСсылка	= ЭтаФорма["Линия" + стрЛиния + "КонтактноеЛицо"];
КонецПроцедуры

Процедура УстановитьКонтактыПереводаЛинии(чНомерКанала, КонтрагентСсылка, КонтактноеЛицоСсылка)
	стрЛиния = Строка(чНомерКанала + 1);
	ЭтаФорма["Линия" + стрЛиния + "ПереведенОтАбонент"] = КонтрагентСсылка;
	ЭтаФорма["Линия" + стрЛиния + "ПереведенОтКонтактноеЛицо"] = КонтактноеЛицоСсылка;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКонтактыЛинии(чНомерКанала)
	УстановитьКонтактыЛинии(чНомерКанала, "", Неопределено, Неопределено);
	УстановитьКонтактыПереводаЛинии(чНомерКанала, Неопределено, Неопределено);
КонецПроцедуры

//-----------------------------------------------------------------------------
// Управление подключением
&НаКлиенте
Процедура Подключение()
	
	// Состояние("Ожидание подключения...");
	
	ОбновитьСвойНомерИЗаголовокФормы();
	
	ЗаполнитьИсторию();
	
	Если СофтФон <> Неопределено Тогда
		// обработка ситуации, когда объект был создан, но подключиться не удалось
		СофтФон = Неопределено;
	КонецЕсли;
	бит_БитфонКлиент.ПодключитьСофтфон("БитФон_СофтфонПодключен");
	
	ПодключитьВКМонитораБИТАТС();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьСофтФон()
	ОтключениеСтатусов();
	Избранное.Очистить();
	ОтключитьОбработчикОжидания("ОбновитьДлительностьРазговора");
	СофтФон = Неопределено;
	СтатусПодключен = Ложь;
	СтатусНеБеспокоить = Ложь;
	ОбновитьСтатусыПодключения();
	ОбновитьВсеПанели();
	Для й=0 По 3 Цикл
		УстановитьНомерЛинии(й, "");
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПодключениеСтатусов()
	получениеСтатусов = бит_БитфонСервер.ПолучитьФлагПолучениеСтатусовАбонентов();
	Для Каждого строкаИзбр Из Избранное Цикл
		Если строкаИзбр.ПометкаУдаления Тогда
			строкаИзбр.ИндексКартинкиСтатуса = 5;
		Иначе
			Если (строкаИзбр.ОтслеживатьСтатус = Истина) И получениеСтатусов И (СофтФон <> Неопределено) Тогда
				номерПолучСтатуса = Формат(строкаИзбр.Номер, "ЧГ=");
				Если ЗначениеЗаполнено(номерПолучСтатуса) Тогда
					Идент = СофтФон.BuddyAdd(номерПолучСтатуса);
					МассивИдентификаторовПолученияСтатуса.Добавить(Идент);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтключениеСтатусов()
	Если СофтФон <> Неопределено Тогда
		Для Каждого идентПолучСтатуса Из МассивИдентификаторовПолученияСтатуса Цикл
			СофтФон.BuddyDel(идентПолучСтатуса);
		КонецЦикла;
	КонецЕсли;
	//
	МассивИдентификаторовПолученияСтатуса.Очистить();
КонецПроцедуры

//-----------------------------------------------------------------------------
// Управление разговором
// - начало разговора
&НаКлиенте
Процедура НачатьРазговорНаКанале(НомерКанала, ВызываемыйНомер)
	КомандаИзменениеСтатуса = ПроверитьКомандуИзмененияСтатусаНеБеспокоить(ВызываемыйНомер);
	Если НЕ КомандаИзменениеСтатуса Тогда
		// проверка микрофона и динамиков
		Если НЕ ПроверитьДоступностьМикрофонаИДинамиков() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	НачатьИсходящийВызовНаКанале(НомерКанала, ВызываемыйНомер);
КонецПроцедуры

&НаКлиенте
Функция НачатьИсходящийВызовНаКанале(НомерКанала, ВызываемыйНомер)
	Возврат НачатьИсходящийВызовНаКаналеСAssertedID(НомерКанала, ВызываемыйНомер, "");
КонецФункции

&НаКлиенте
Функция НачатьИсходящийВызовНаКаналеСAssertedID(НомерКанала, ВызываемыйНомер, стрНомерAssertedID)
	Если НЕ СтатусПодключен ИЛИ СофтФон = Неопределено Тогда
		бит_ТелефонияКлиентПереопределяемый.ПоказПредупреждение("БИТ.Phone не подключен к АТС", , "Ошибка начала разговора");
		Возврат Ложь;
	КонецЕсли;
	//
	Если СофтФон.IsChannelActive(НомерКанала) Тогда
		бит_ТелефонияКлиентПереопределяемый.ПоказПредупреждение("На канале уже идет разговор", , "Ошибка начала разговора");
		Возврат Ложь;
	КонецЕсли;
	//
	Номер = бит_БитфонКлиент.СформироватьНомерСПрефиксами(ВызываемыйНомер);
	//
	УстановитьНомерЛинии(НомерКанала, Номер);
	началоВызоваУспешно = Ложь;
	Если ЗначениеЗаполнено(Номер) Тогда
		// данные нужны при создании события исходящего звонка
		вызывКонтрагент = Неопределено;
		вызывКонтактноеЛицо = Неопределено;
		контрагент_найден = НайтиКонтрагентаПоНомеру(Номер, вызывКонтрагент, вызывКонтактноеЛицо);
		Если НЕ контрагент_найден Тогда
			вызывКонтрагент = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(Номер);
		КонецЕсли;
		УстановитьКонтактыЛинии(НомерКанала, Номер, вызывКонтрагент, вызывКонтактноеЛицо);
		
		Если ЗначениеЗаполнено(стрНомерAssertedID) Тогда
			началоВызоваУспешно = СофтФон.CallWithAssertedID(НомерКанала, Номер, стрНомерAssertedID);
		Иначе
			началоВызоваУспешно = СофтФон.Call(НомерКанала, Номер);
		КонецЕсли;
	Иначе
		ПоказатьОповещениеПользователя("Не задан номер");
	КонецЕсли;
	ОбновитьПанель(НомерКанала);
	//
	Возврат началоВызоваУспешно;
КонецФункции

// - прием/отклонение входящего звонка
&НаКлиенте
Процедура ПринятьВходящийВызовНаКанале(НомерКанала)
	Если СофтФон = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заглушка для значения IsIncomingCall
	Попытка
		входящийВызов = СофтФон.IsIncomingCall(НомерКанала);
	Исключение
		ФормаНетОтвета = ПолучитьФорму("ОбщаяФорма.АТСНеОтвечает");
		ФормаНетОтвета.Открыть();
	КонецПопытки;
	Если входящийВызов Тогда
		входящийВызовПринят = СофтФон.acceptCall(НомерКанала);
		Если НЕ входящийВызовПринят Тогда
			Возврат;	// вызов может быть не принят, если во время обработки входящего звонка АТС уже прислало CANCEL событие завершения разговора
		КонецЕсли;
	КонецЕсли;
	//
	стрИмяФайлаЗаписи = "";
	записьОбязательна = бит_БитфонСервер.ПолучитьФлагВсегдаЗаписыватьРазговор();
	Если записьОбязательна = Истина Тогда
		стрИмяФайлаЗаписи = НачатьЗапись(НомерКанала);
	КонецЕсли;
	//
	создаватьСобытие = бит_БитфонСервер.ПолучитьФлагСоздаватьСобытиеВходящийЗвонок();
	Если создаватьСобытие Тогда
		НомерВходящий = СофтФон.GetChannelName(НомерКанала);
		КонтактВходящий	= Неопределено;
		КонтактноеЛицо	= Неопределено;
		ПолучитьКонтактыЛинии(НомерКанала, КонтактВходящий, КонтактноеЛицо);
		структПараметрыСобытия = бит_ТелефонияКлиент.СоздатьСтруктуруПараметровСобытия(Истина, контактВходящий,
			НомерВходящий, контактноеЛицо, стрИмяФайлаЗаписи, ИнформацияЛиний[НомерКанала].НабранныйНомер);
		ссылкаСобытие = бит_БитфонСервер.СоздатьСобытие(структПараметрыСобытия);
		бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуДокументаСобытие(ссылкаСобытие);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьВходящийВызовНаКанале(НомерКанала)
	Если СофтФон <> Неопределено Тогда
		// Заглушка для значения IsIncomingCall
		Попытка
			входящийВызов = СофтФон.IsIncomingCall(НомерКанала);
		Исключение
			ФормаНетОтвета = ПолучитьФорму("ОбщаяФорма.АТСНеОтвечает");
			ФормаНетОтвета.Открыть();
		КонецПопытки;
		Если входящийВызов Тогда
			СофтФон.declineCall(НомерКанала);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВходящийВызовВМодальномДиалоге(НомерВходящий, контрагентНайден, контрагентСсылка, контактноеЛицоСсылка, стрНабранныйНомер, НомерКанала);
	фрмОбработкаВызова = бит_ТелефонияКлиент.ПолучитьФормуОбработкиВызова(ЭтаФорма, Ложь, НомерВходящий,
		контрагентНайден, контрагентСсылка, контактноеЛицоСсылка, стрНабранныйНомер, "");
	параметрыОповещ = Новый Структура;
	параметрыОповещ.Вставить("НомерКанала", НомерКанала);
	параметрыОповещ.Вставить("НомерВходящий", НомерВходящий);
	параметрыОповещ.Вставить("НомерНеОпределен", НЕ контрагентНайден);
	бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуСБлокировкойВладельца(фрмОбработкаВызова, "БитФон_ОбработкаВходящегоЗвонка", параметрыОповещ);
КонецПроцедуры

// - завершение разговора
&НаКлиенте
Процедура ЗавершитьРазговор(НомерКанала) Экспорт
	Если СтатусПодключен = Истина Тогда
		ОстановитьЗапись(НомерКанала);
		СофтФон.Hangup(НомерКанала);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВсеРазговоры() Экспорт
	Если СофтФон <> Неопределено Тогда
		Для й=0 По 3 Цикл
			Если СофтФон.IsChannelActive(й) Тогда
				ОстановитьЗапись(й);
				СофтФон.Hangup(й);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// - переадресация, удержание

&НаКлиенте
Процедура БезусловныйПеревод(ЗНАЧ НомерКанала, ЗНАЧ стрНомерБезусловногоПеревода)
	стрНомерБезусловногоПеревода = бит_БитфонКлиент.СформироватьНомерСПрефиксами(стрНомерБезусловногоПеревода);
	Если НЕ ЗначениеЗаполнено(стрНомерБезусловногоПеревода) Тогда
		Возврат;
	КонецЕсли;
	Если стрНомерБезусловногоПеревода = СвойНомер Тогда
		бит_ТелефонияКлиент.ВывестиСообщение("Безусловный перевод - невозможно перевести на собственный номер");
		Возврат;
	КонецЕсли;
	СофтФон.HoldAndRedirect(НомерКанала, стрНомерБезусловногоПеревода);
КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьКаналы(НомерКанала1, НомерКанала2)
	СофтФон.JoinChannels(НомерКанала1, НомерКанала2);
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиЗвонокНаКанале(Канал, стрНомерПеревода) Экспорт
	типПеревода = бит_БитфонСервер.ПолучитьТипПереводаЗвонка();
	Если типПеревода = ПредопределенноеЗначение("Перечисление.бит_ТипПереводаЗвонка.Условный") Тогда
		Если НЕ НабратьКомандуПереадресацииНаКанале(Канал) Тогда
			Возврат;
		КонецЕсли;
		УстановитьНомерЛинии(Канал, "");
		ДТМФВызовНаКанале(Канал, стрНомерПеревода);
		ДлинаНомераПеревода = СтрДлина(стрНомерПеревода);
		// бит_ТелефонияКлиентПереопределяемый.ПоказПредупреждение("БИТ.Phone", ДлинаНомераПеревода, "Перевод звонка на " + стрНомерПеревода + "...");
	Иначе
		БезусловныйПеревод(Канал, стрНомерПеревода);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция НабратьКомандуПереадресацииНаКанале(Канал)
	стрКомПереадрес = бит_БитфонСервер.ПолучитьКомандуПереадресации();
	Если НЕ ЗначениеЗаполнено(стрКомПереадрес) Тогда
		бит_ТелефонияКлиент.ВывестиСообщение("Не задано значение DTMF-команды переадресации в настройках");
		Возврат Ложь;
	КонецЕсли;
	ДТМФВызовНаКанале(Канал, стрКомПереадрес);
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура УдержатьВызов(НомерКанала, УдержатьВызов)
	Если УдержатьВызов Тогда
		СофтФон.HoldOn(НомерКанала);
	Иначе
		СофтФон.HoldOff(НомерКанала);
	КонецЕсли;
КонецПроцедуры

// - запись
&НаКлиенте
Функция НачатьЗапись(НомерКанала)
	стрИмяФайла = "";
	Если бит_БитфонСервер.ПолучитьФлагПолучатьЗаписиРазговоровСБИТАТС() Тогда
		стрНомерДляЗаписи = СофтФон.GetChannelName(НомерКанала);
		стрНомерДляЗаписи = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(стрНомерДляЗаписи);
		стрИмяФайла = бит_БитфонКлиент.ПолучитьЗаписьРазговораБИТАТС(обКонтроллерАТС, СвойНомер, стрНомерДляЗаписи);
	Иначе
		Если СофтФон <> Неопределено Тогда
			Если НЕ СофтФон.IsRecording(НомерКанала) Тогда
				стрИмяФайла = бит_БитфонКлиент.ПолучитьИмяФайлаДляЗаписи();
				Если ЗначениеЗаполнено(стрИмяФайла) Тогда
					стрФорматФайлаЗаписи = Строка(бит_БитфонСервер.ПолучитьФорматЗаписи());
					СофтФон.RecordStart(НомерКанала, стрИмяФайла, стрФорматФайлаЗаписи);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ИнформацияЛиний[НомерКанала].ЗаписьРазговора = стрИмяФайла;
	Возврат стрИмяФайла;
КонецФункции

&НаКлиенте
Процедура ОстановитьЗапись(НомерКанала)
	Если СофтФон <> Неопределено Тогда
		Если СофтФон.IsRecording(НомерКанала) Тогда
			СофтФон.RecordStop(НомерКанала);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяФайлаЗаписи(НомерКанала)
	стрИмяФайлаЗаписи = "";
	Если бит_БитфонСервер.ПолучитьФлагПолучатьЗаписиРазговоровСБИТАТС() Тогда
		стрИмяФайлаЗаписи = ИнформацияЛиний[НомерКанала].ЗаписьРазговора;
	Иначе
		Если СофтФон <> Неопределено Тогда
			стрИмяФайлаЗаписи = СофтФон.GetRecordFilename(НомерКанала);
		КонецЕсли;
	КонецЕсли;
	Возврат стрИмяФайлаЗаписи;
КонецФункции

// - DTMF
&НаКлиенте
Процедура ДТМФВызовНаАктивнойЛинии(Код)
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	ДТМФВызовНаКанале(каналАктивнойЛинии, Код);
КонецПроцедуры

&НаКлиенте
Процедура ДТМФВызовНаКанале(ЗНАЧ Канал, Код)
	Если СтатусПодключен = Истина Тогда
		//
		стрНомерКаналаВызова = ПолучитьНомерЛинии(Канал);
		стрНомерКаналаВызова = стрНомерКаналаВызова + Код;
		УстановитьНомерЛинии(Канал, стрНомерКаналаВызова);
		//
		Если СофтФон.IsInCall(Канал) Тогда
			СофтФон.DialDTMF(Канал, Код);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//-----------------------------------------------------------------------------
// Управление микрофоном/динамиками
&НаКлиенте
Процедура УстановитьМикрофон(Микрофон)
	СофтФон.SetMicLevel(Микрофон); 
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьМикрофон()
	УстановитьМикрофон(0);
	МикрофонВключен = Ложь;
	Элементы.РегуляторМикрофон.Доступность = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВключитьМикрофон()
	УстановитьМикрофон(УровеньМикрофона);
	МикрофонВключен = Истина;
	Элементы.РегуляторМикрофон.Доступность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьГромкость(Громкость)
	СофтФон.SetSpeakerLevel(Громкость);
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьГромкость()
	УстановитьГромкость(0);
	ГромкостьВключена = Ложь;
	Элементы.РегуляторГромкость.Доступность = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВключитьГромкость()
	УстановитьГромкость(УровеньГромкости);
	ГромкостьВключена = Истина;
	Элементы.РегуляторГромкость.Доступность = Истина;
КонецПроцедуры

&НаКлиенте
Функция ПроверитьДоступностьМикрофонаИДинамиков()
	Если СофтФон = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	//
	микр_динам_дост = Истина;
	//
	Если НЕ (СофтФон.GetRecordDevicesCount() > 0) Тогда
		бит_ТелефонияКлиент.ВывестиСообщение("БИТ.Phone - Ошибка! Не найден микрофон.");
		микр_динам_дост = Ложь;
	КонецЕсли;
	//
	Если НЕ (СофтФон.GetPlaybackDevicesCount() > 0) Тогда
		бит_ТелефонияКлиент.ВывестиСообщение("БИТ.Phone - Ошибка! Не найдено устройство вывода звука.");
		микр_динам_дост = Ложь;
	КонецЕсли;
	//
	Возврат микр_динам_дост;
КонецФункции

//-----------------------------------------------------------------------------
// Отправка SMS
&НаКлиенте
Процедура ОткрытьФормуОтправкиSMS(стрНомерПолучателя)
	ФормаСМС = ПолучитьФорму("Обработка.бит_Битфон.Форма.ОтправкаСМС");
	ФормаСМС.ВладелецФормы = ЭтаФорма;
	стрСМСЛогин = "";
	стрСМСПароль = "";
	бит_БитфонСервер.ПолучитьПараметрыОтправкиСМС(стрСМСЛогин, стрСМСПароль);
	ФормаСМС.СМСЛогин = стрСМСЛогин;
	ФормаСМС.СМСПароль = стрСМСПароль;
	стрОтправитель = бит_БитфонСервер.ПолучитьОтправителяСМСПоУмолчанию();
	Если ЗначениеЗаполнено(стрОтправитель) Тогда
		ФормаСМС.Элементы.Отправитель.СписокВыбора.Добавить(стрОтправитель);
		ФормаСМС.Отправитель = стрОтправитель;
	КонецЕсли;
	НомерПолучателяСМС = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(
							бит_ТелефонияКлиентСервер.ОчиститьНомерТолькоЦифры(стрНомерПолучателя)
							);
	Если ЗначениеЗаполнено(НомерПолучателяСМС) Тогда
		ФормаСМС.НомерПолучателя = НомерПолучателяСМС;
	КонецЕсли;
	ФормаСМС.Открыть();
КонецПроцедуры
//
//-----------------------------------------------------------------------------

// Взаимодействие с пользовательским интерфейсом
// - общие функции интерфейса.
&НаКлиенте
Функция ПолучитьКаналТекущейЛинии() Экспорт
	текущСтр = Элементы.ГруппаЛинии.ТекущаяСтраница;
	группаКанал = Число( Сред(текущСтр.Имя, 12) ) - 1;
	Возврат группаКанал;
КонецФункции

// Ищет свободный канал
// Возвращает признак успешности поиска.
&НаКлиенте
Функция НайтиСвободнуюЛинию(НомерСвободногоКанала)
	свободныйКаналНайден = Ложь;
	Если СофтФон <> Неопределено Тогда
		свобканал = СофтФон.GetFreeChannel();
		Если свобканал>=0 И свобканал<=3 Тогда
			НомерСвободногоКанала = свобканал;
			свободныйКаналНайден = Истина;
			Элементы.ГруппаЛинии.ТекущаяСтраница = Элементы.Найти("ГруппаЛиния"+Строка(НомерСвободногоКанала+1));
		КонецЕсли;
	КонецЕсли;
	Возврат свободныйКаналНайден;
КонецФункции

&НаКлиенте
Процедура ОбновитьСтатусыПодключения()
	Если СтатусПодключен = Истина Тогда
		Если СтатусНеБеспокоить = Истина Тогда
			Элементы.ГруппаБИТфонКоманды.Картинка = БиблиотекаКартинок.NC_НеБеспокоить16;
			Элементы.ГруппаБИТфонКоманды.Заголовок = "Не Беспокоить";
			Элементы.кнПодключить.Доступность = Истина;
			Элементы.кнНеБеспокоить.Доступность = Ложь;
		Иначе
			Элементы.ГруппаБИТфонКоманды.Картинка = БиблиотекаКартинок.NC_Подключен16;
			Элементы.ГруппаБИТфонКоманды.Заголовок = "Подключен";
			Элементы.кнПодключить.Доступность = Ложь;
			Элементы.кнНеБеспокоить.Доступность = Истина;
		КонецЕсли;
		//
		Элементы.ГруппаБитфонОбщ.Доступность = Истина;
		Элементы.кнОтключить.Доступность = Истина;
		Элементы.кнПереподключить.Доступность = Истина;
	Иначе
		Элементы.ГруппаБИТфонКоманды.Картинка = БиблиотекаКартинок.NC_Отключен16;
		Элементы.ГруппаБИТфонКоманды.Заголовок = "Отключен";
		Элементы.ГруппаБитфонОбщ.Доступность = Ложь;
		//
		Элементы.кнПодключить.Доступность = Истина;
		Элементы.кнНеБеспокоить.Доступность = Истина;
		Элементы.кнОтключить.Доступность = Ложь;
		Элементы.кнПереподключить.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение()
	
	//
	// + помощник перехода со старых релизов +
	//
	// история звонков
	Если ПроверкаЕстьИсторияЗвонковСтарыхРелизов() Тогда
		// бит_ТелефонияКлиент.ВывестиСообщение("Выполняется обновление истории звонков, пожалуйста подождите...");
		ПереносИсторииЗвонковСтарыхРелизов();
		// бит_ТелефонияКлиент.ВывестиСообщение("Обновление истории звонков завершено.");
	КонецЕсли;
	//
	// заполнение профиля настроек значением по умолчанию
	бит_БитфонСервер.ПроверитьПрофильНастроек();
	//
	// - помощник перехода со старых релизов -
	//
	
	Подключение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНастройки(СтарыеНастройки)
	собственныйНомерНов			= бит_БитфонСервер.ПолучитьСвойНомер();
	глубинаИсторииЗвонковНов	= бит_БитфонСервер.ПолучитьГлубинуИсторииЗвонков();
	уровеньЛоггированияНов		= бит_БитфонСервер.ПолучитьУровеньЛоггирования();
	получениеСтатусовНов		= бит_БитфонСервер.ПолучитьФлагПолучениеСтатусовАбонентов();
	режимНесколькихВходНов		= бит_БитфонСервер.ПолучитьФлагПриниматьНесколькоВходящих();
	разворачПриВхЗвонкеНов		= бит_БитфонСервер.ПолучитьФлагРазворачиватьОкноПриВходящемЗвонке();
	устройствоЗвукаВхЗвонкаНов	= бит_БитфонСервер.ПолучитьУстройствоВыводаЗвукаВходящегоЗвонка();
	типВходящегоЗвонкаНов		= бит_БитфонСервер.ПолучитьТипВходящегоЗвонка();
	файлВходящегоЗвонкаНов		= бит_БитфонСервер.ПолучитьФайлВходящегоЗвонка();
	получениеЗаписейСБИТАТСНов	= бит_БитфонСервер.ПолучитьФлагПолучатьЗаписиРазговоровСБИТАТС();
	//
	Попытка
		Если собственныйНомерНов <> СтарыеНастройки.СобственныйНомер Тогда
			ОбновитьСвойНомерИЗаголовокФормы();
			ЗаполнитьИсторию();
		КонецЕсли;
		Если глубинаИсторииЗвонковНов <> СтарыеНастройки.ГлубинаИсторииЗвонков Тогда
			ЗаполнитьИсторию();
		КонецЕсли;
		Если (уровеньЛоггированияНов <> СтарыеНастройки.УровеньЛоггирования) И (СофтФон <> Неопределено) Тогда
			СофтФон.SetLogLevel(уровеньЛоггированияНов, бит_БитфонСервер.ПолучитьПараметрыСоединения().Логин);
		КонецЕсли;
		Если получениеСтатусовНов <> СтарыеНастройки.ПолучениеСтатусов Тогда
			ИзбранноеОбновитьКлиент();
		КонецЕсли;
		Если режимНесколькихВходНов <> СтарыеНастройки.РежимНесколькихВход Тогда
			СофтФон.SetMultichannelMode(режимНесколькихВходНов);
		КонецЕсли;
		Если разворачПриВхЗвонкеНов <> СтарыеНастройки.РазворачПриВхЗвонке Тогда
			СофтФон.SetActivateOnIncomingCall(разворачПриВхЗвонкеНов);
		КонецЕсли;
		Если устройствоЗвукаВхЗвонкаНов <> СтарыеНастройки.УстройствоЗвукаВхЗвонка Тогда
			СофтФон.SetRingPlaybackDevice(устройствоЗвукаВхЗвонкаНов);
		КонецЕсли;
		Если (типВходящегоЗвонкаНов <> СтарыеНастройки.ТипВходящегоЗвонка) ИЛИ (файлВходящегоЗвонкаНов <> СтарыеНастройки.ФайлВходящегоЗвонка) Тогда
			Софтфон.SetRingType(типВходящегоЗвонкаНов, файлВходящегоЗвонкаНов);
		КонецЕсли;
		Если получениеЗаписейСБИТАТСНов <> СтарыеНастройки.ПолучениеЗаписейСБИТАТС Тогда
			ПодключитьВКМонитораБИТАТС();
		КонецЕсли;
	Исключение
		бит_ТелефонияКлиент.ВывестиСообщение(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусНеБеспокоить()
	РежимНеБеспокоитьНаАТС = бит_БитфонСервер.ПолучитьФлагИспользоватьКомандуНеБеспокоитьНаАТС();
	Если РежимНеБеспокоитьНаАТС Тогда
		стрКомандаНеБеспокоить = бит_БитфонСервер.ПолучитьКомандуНеБеспокоить();
		Если НЕ ЗначениеЗаполнено(стрКомандаНеБеспокоить) Тогда
			бит_ТелефонияКлиент.ВывестиСообщение("Не задан номер для установки статуса 'Не беспокоить'");
		Иначе
			// свободныйКанал = 0;
			
			// Обойти все каналы и выбрать свободную линию
			ЕстьСвободнаяЛиния = Ложь;
			Пока Не ЕстьСвободнаяЛиния Цикл
				Для свободныйКанал = 0 По 3 Цикл
					Если НайтиСвободнуюЛинию(свободныйКанал) Тогда
						вызовУстСтатусаУспешен = НачатьИсходящийВызовНаКанале(свободныйКанал, стрКомандаНеБеспокоить);
						Если вызовУстСтатусаУспешен Тогда
							ЕстьСвободнаяЛиния = Истина;
							Элементы.ГруппаБИТфонПанели.Доступность = Ложь;
						КонецЕсли;
					Иначе
						// бит_ТелефонияКлиент.ВывестиСообщение("Не найдена свободная линия для установки статуса 'Не беспокоить'");
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	Иначе
		СтатусНеБеспокоить = Истина;
		бит_БитфонСервер.УстановитьФлагРежимНеБеспокоить(СтатусНеБеспокоить);
		ОбновитьСтатусыПодключения();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСтатусНеБеспокоить()
	РежимНеБеспокоитьНаАТС = бит_БитфонСервер.ПолучитьФлагИспользоватьКомандуНеБеспокоитьНаАТС();
	Если РежимНеБеспокоитьНаАТС Тогда
		стрКомандаОтменитьНеБеспокоить = бит_БитфонСервер.ПолучитьКомандуОтменаНеБеспокоить();
		Если НЕ ЗначениеЗаполнено(стрКомандаОтменитьНеБеспокоить) Тогда
			бит_ТелефонияКлиент.ВывестиСообщение("Не задан номер для отмены статуса 'Не беспокоить'");
		Иначе
			свободныйКанал = 0;
			Если НайтиСвободнуюЛинию(свободныйКанал) Тогда
				вызовОтмСтатусаУспешен = НачатьИсходящийВызовНаКанале(свободныйКанал, стрКомандаОтменитьНеБеспокоить);
				Если вызовОтмСтатусаУспешен Тогда
					Элементы.ГруппаБИТфонПанели.Доступность = Ложь;
				КонецЕсли;
			Иначе
				бит_ТелефонияКлиент.ВывестиСообщение("Не найдена свободная линия для отмены статуса 'Не беспокоить'");
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтатусНеБеспокоить = Ложь;
		бит_БитфонСервер.УстановитьФлагРежимНеБеспокоить(СтатусНеБеспокоить);
		ОбновитьСтатусыПодключения();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСвойНомерИЗаголовокФормы()
	Заголовок = "БИТ.Phone";
	СвойНомер = бит_БитфонСервер.ПолучитьСвойНомер();
	Если ЗначениеЗаполнено(СвойНомер) Тогда
		Заголовок = Заголовок + " - " + СвойНомер;
	КонецЕсли;
КонецПроцедуры

// - панель линий
&НаКлиенте
Функция ПолучитьНомерЛинии(чКанал)
	Возврат ЭтаФорма["НомерЛиния"+Строка(чКанал+1)];
КонецФункции

&НаКлиенте
Процедура УстановитьНомерЛинии(чКанал, Номер)
	ЭтаФорма["НомерЛиния"+Строка(чКанал+1)] = Номер;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокПанели(номерКаналаЛинии)
	ЭтаФорма["Линия"+(номерКаналаЛинии+1)+"Заголовок"]	= "";
	Если СофтФон <> Неопределено Тогда
		активн		= Софтфон.IsChannelActive(номерКаналаЛинии);
		входящ 		= Софтфон.IsIncomingCall(номерКаналаЛинии);
		каналВКонф	= Софтфон.IsChannelInConference(номерКаналаЛинии);
		Если активн Тогда
			стрСуффиксВх = ?(входящ, Символ(8595), Символ(8593)); // стрелка вниз или вверх
			стрСуффиксКонф = ?(каналВКонф, "+", "");
			стрСуффиксЗаголовка = стрСуффиксВх + стрСуффиксКонф;
			ЭтаФорма["Линия"+(номерКаналаЛинии+1)+"Заголовок"]	= стрСуффиксЗаголовка;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПанель(номерКаналаЛинии)
	//
	ОбновитьЗаголовокПанели(номерКаналаЛинии);
	//
	ИдетРазговор	= Ложь;
	ИдетЗапись		= Ложь;
	ВызовУдержан	= Ложь;
	ЛинияАбонент						= "";
	ЛинияКонтактноеЛицо					= "";
	ЛинияВКонференции					= Ложь;
	ВидимостьГруппыОбработкиВходящегоЗвонка = Ложь;
	ВидимостьГруппыНабранногоНомера			= Ложь;
	Если СофтФон <> Неопределено Тогда
		активн			= Софтфон.IsChannelActive(номерКаналаЛинии);
		ИдетЗапись		= Софтфон.IsRecording(номерКаналаЛинии);
		ВызовУдержан	= СофтФон.IsHold(номерКаналаЛинии);
		каналВКонф		= Софтфон.IsChannelInConference(номерКаналаЛинии);
		входящ 			= Софтфон.IsIncomingCall(номерКаналаЛинии);
		вразговоре		= Софтфон.IsInCall(номерКаналаЛинии);
		//
		Если входящ Тогда
			ИдетРазговор = активн И вразговоре;
		Иначе
			ИдетРазговор = активн;
		КонецЕсли;
		//
		Если активн Тогда
			ЛинияВКонференции					= каналВКонф;
			//
			ВидимостьГруппыОбработкиВходящегоЗвонка = (входящ И НЕ вразговоре);
			//
			НомерНабранный = ИнформацияЛиний[номерКаналаЛинии].НабранныйНомер;
			ЛинияНабранныйНомер = НомерНабранный;
			ВидимостьГруппыНабранногоНомера = ЗначениеЗаполнено(НомерНабранный);
		КонецЕсли;
	КонецЕсли;
	//
	Элементы.кнЗаписьРазговора.Доступность = ИдетРазговор;
	Элементы.кнФакс.Доступность = ИдетРазговор;
	Элементы.КнПереводЗвонка.Доступность = ИдетРазговор;
	Элементы.КнУдержатьВызов.Доступность = ИдетРазговор;
	Элементы.кнКонтакты.Доступность = НЕ ИдетРазговор;
	//
	стрЛиния = Строка(номерКаналаЛинии + 1);
	Элементы["ГруппаОбработкиВходящегоЗвонка"+стрЛиния].Видимость = ВидимостьГруппыОбработкиВходящегоЗвонка;
	Элементы["ГруппаНабранныйНомер"+стрЛиния].Видимость = ВидимостьГруппыНабранногоНомера;
	Элементы["ГруппаПереведенОт"+стрЛиния].Видимость = ЗначениеЗаполнено(ЭтаФорма["Линия"+стрЛиния+"ПереведенОтАбонент"]);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсеПанели()
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	Для й=0 По 3 Цикл
		Если й <> каналАктивнойЛинии Тогда
			ОбновитьПанель(й);
		КонецЕсли;
	КонецЦикла;
	ОбновитьПанель(каналАктивнойЛинии);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДлительностьРазговора()
	длительностьРазговораТекКаналСек = 0;
	каналАктивнойЛинии = ПолучитьКаналТекущейЛинии();
	Если СофтФон <> Неопределено Тогда
		Если СофтФон.IsChannelActive(каналАктивнойЛинии) Тогда
			длительностьРазговораТекКаналСек = СофтФон.GetCallDuration(каналАктивнойЛинии);
		КонецЕсли;
	КонецЕсли;
	ДлительностьРазговора = бит_ТелефонияКлиентСервер.ФорматироватьДлительностьЗвонкаСЛидНулями(длительностьРазговораТекКаналСек);
	Элементы["ДлительностьРазговораЛиния"+Строка(каналАктивнойЛинии+1)].Видимость = (длительностьРазговораТекКаналСек > 0);
	// Разорвать соединение с АТС, если текущий разговор длится 1 час
	Если ЭтаФорма.ДлительностьРазговора = "1:00:00" Тогда
		кнОтключить(Неопределено);
		Сигнал();
		Ответ = Вопрос("Для экономии ресурсов подключение к АТС было прервано. Восстановить?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да,"БИТ.Phone");
		Если Ответ = КодВозвратаДиалога.Да Тогда
			кнПодключить(Неопределено);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПереводЗвонкаПослеВыбораЛиний(ОбъединениеЛинийРезультатВыбораЛинии, ОбъединениеЛинийТекущийКанал)
	Если ОбъединениеЛинийРезультатВыбораЛинии <> Неопределено Тогда
		каналПеревода = ОбъединениеЛинийРезультатВыбораЛинии;
		Если каналПеревода = ОбъединениеЛинийТекущийКанал Тогда
			бит_ТелефонияКлиент.ВывестиСообщение("Нельзя объединить канал сам с собой");
			Возврат;
		КонецЕсли;
		Если НЕ СофтФон.IsInCall(каналПеревода) Тогда
			бит_ТелефонияКлиент.ВывестиСообщение("На линии " + Строка(каналПеревода+1) + " не идет разговор");
			Возврат;
		КонецЕсли;
		ОбъединитьКаналы(ОбъединениеЛинийТекущийКанал, каналПеревода);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПереводЗвонкаВыборНомераСПроверкойСтатуса(ИмяСобытияОповещения, ПараметрОповещения)
	фрмВводаНомераПеревода = бит_ТелефонияКлиент.ПолучитьФормуВводаНомера(ЭтаФорма, Истина, СофтФон, Истина, СвойНомер);
	бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуСБлокировкойВладельца(фрмВводаНомераПеревода, ИмяСобытияОповещения, ПараметрОповещения);
КонецПроцедуры
	
&НаКлиенте
Процедура ПроверитьТекущуюДатуОбновитьИсторию()
	датаТекущНачалоДня = НачалоДня(ТекущаяДата());
	Если датаТекущНачалоДня <> ТекущееНачалоДня Тогда
		ЗаполнитьИсторию();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущуюСтрокуВИстории()
	ТекущиеДанные = Неопределено;
	Если Элементы.ГруппаВидыИстории.ТекущаяСтраница.Имя = "ГруппаИсторияВходящие" Тогда
		ТекущиеДанные = Элементы.ИсторияЗвонковВходящие.ТекущиеДанные;
	Иначе
		ТекущиеДанные = Элементы.ИсторияЗвонковИсходящие.ТекущиеДанные;
	КонецЕсли;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьОповещениеПользователя("Не выбрана запись в истории");
	КонецЕсли;
	Возврат ТекущиеДанные;
КонецФункции

&НаСервере
Процедура ИзбранноеОбновитьСервер()
	бит_ТелефонияСервер.ИзбранноеОбновить(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИзбранноеОбновитьКлиент()
	ОтключениеСтатусов();
	ИзбранноеОбновитьСервер();
	ПодключениеСтатусов();
КонецПроцедуры

// - обработка статусов
&НаКлиенте
Процедура УстановитьСтатусНомера(стрНомерУстановкиСтатуса, кодНовогоСтатуса)
	Отбор = Новый Структура("Номер", стрНомерУстановкиСтатуса);
	массСтрок = Избранное.НайтиСтроки(Отбор);
	Для Каждого НайденнаяСтрока Из массСтрок Цикл
		Если НайденнаяСтрока.ОтслеживатьСтатус И Не НайденнаяСтрока.ПометкаУдаления Тогда
			НайденнаяСтрока.ИндексКартинкиСтатуса = кодНовогоСтатуса;	// индекс картинки равен коду статуса
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусАбонентаSIP(ИдентификаторАбонента)
	индексИдент = МассивИдентификаторовПолученияСтатуса.Найти(ИдентификаторАбонента);
	Если индексИдент = Неопределено Тогда
		Возврат;	// обновился статус в форме перевода звонка
	КонецЕсли;
	//
	Инф = СофтФон.BuddyGetInfo(ИдентификаторАбонента);
	параметрыПодписки = бит_ТелефонияКлиентСервер.СтрРазбить(Инф, "#");
	//
	Если параметрыПодписки.Количество() <> 3 Тогда
		Возврат;
	КонецЕсли;
	//
	НомерПодп = параметрыПодписки[0].Значение;
	СтрСтатус = параметрыПодписки[1].Значение;
	ОписаниеСтатуса = параметрыПодписки[2].Значение;
	Если (СтрСтатус) = "" Тогда
		Возврат;			
	КонецЕсли;
	ЧСтатус = Число(СтрСтатус);
	ИндексКартинкиСтатуса = бит_БитфонКлиент.ПолучитьИндексКартинкиСтатуса(ЧСтатус, ОписаниеСтатуса);
	УстановитьСтатусНомера(НомерПодп, ИндексКартинкиСтатуса);
КонецПроцедуры 

//-----------------------------------------------------------------------------
// Интеграция с БИТ.АТС

&НаКлиенте
Функция ИмяИсточникаСобытийИнтегрБИТАТС()
	Возврат "БитФон_ИнтегрМониторБИТАТС";
КонецФункции

&НаКлиенте
Процедура ПодключитьВКМонитораБИТАТС()
	Если обКонтроллерАТС <> Неопределено Тогда
		обКонтроллерАТС = Неопределено;
	КонецЕсли;
	//
	Если бит_БитфонСервер.ПолучитьФлагПолучатьЗаписиРазговоровСБИТАТС() Тогда
		бит_АТСКлиент.ПодключениеКомпонентыУправлениеАТС("БитФон_ИнтегрМониторБИТАТС_ПодключениеВнешнейКомпоненты");
	КонецЕсли;
КонецПроцедуры

//-----------------------------------------------------------------------------
&НаКлиенте
Процедура НачатьРазговор(ВызываемыйНомер)
	свободныйКанал = 0;
	Если НайтиСвободнуюЛинию(свободныйКанал) Тогда
		НачатьРазговорНаКанале(свободныйКанал, ВызываемыйНомер);
	Иначе
		бит_ТелефонияКлиент.ВывестиСообщение("Не найдена свободная линия для исходящего звонка");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


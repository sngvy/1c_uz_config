
#Область Интерфейс

Функция СоздатьФайлыВКонфигурации(ВыделенныеСтроки) Экспорт

	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;

	ВременныеФайлы = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		Если ТипЗнч(ВыделеннаяСтрока.Регистратор) <> Тип("ДокументСсылка.ПрикрепитьФайлы") Тогда
		
			ВызватьИсключение 
				"Не правильный тип регистратора"
				+ "Тип регистратора: " + ТипЗнч(ВыделеннаяСтрока.Регистратор);
		
		КонецЕсли;
			
		Попытка
		
			ВременныйФайл = СоздатьВременныйФайл(ВыделеннаяСтрока);
			ВременныйФайл.Вставить("Регистратор", ВыделеннаяСтрока.Регистратор);
		
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;

		ВременныеФайлы.Добавить(ВременныйФайл);
		
	КонецЦикла;
	
	СсылкиНаФайлы = Новый Массив;
	Для каждого ВременныйФайл Из ВременныеФайлы Цикл
	
		Результат = СоздатьФайлПоСтрокеРегистра(ВременныйФайл);
		ДанныеОФайле = Новый Структура;
		ДанныеОФайле.Вставить("Файл", Результат);
		ДанныеОФайле.Вставить("УИД", ВременныйФайл["УИД"]);
		ДанныеОФайле.Вставить("Регистратор", ВременныйФайл["Регистратор"]);
		СсылкиНаФайлы.Добавить(ДанныеОФайле);
	
	КонецЦикла;
	
	Возврат СсылкиНаФайлы;

КонецФункции

Функция СоздатьФайлПоСтрокеРегистра(ВременныйФайл) Экспорт

	Папка = Справочники.ПапкиФайлов.Подписание;
	ПолноеИмяФайла = ВременныйФайл["Путь"];
	Файл = Новый Файл(ПолноеИмяФайла);
	ИмяФайлаБезРасширения = Файл.ИмяБезРасширения;
	Расширение = СтрЗаменить(Файл.Расширение, ".", "");
	
	ПараметрыФайла = РаботаСФайламиСлужебныйКлиентСервер.ПараметрыДобавленияФайла();
	ПараметрыФайла["Автор"] = Пользователи.ТекущийПользователь();
	ПараметрыФайла["ВладелецФайлов"] = Папка;
	ПараметрыФайла["ИмяБезРасширения"] = ИмяФайлаБезРасширения;
	ПараметрыФайла["РасширениеБезТочки"] = Расширение;

	Попытка
	
		АдоесХранилища = ВременныйФайл["Хранилище"];
		ФайлСсылка = РаботаСФайламиСлужебныйВызовСервера.ДобавитьФайл(ПараметрыФайла, АдоесХранилища);
	
	Исключение
		ВызватьИсключение
			ОписаниеОшибки()
			+ "Не удалось создать файл: " + Файл.Имя;
	КонецПопытки;
	
	Возврат ФайлСсылка;

КонецФункции // ()

// Возвращает краткое имя файла по Регистратору и Номеру строки
// Если Имя файла не удалось определить, возвращает пустую строку
Функция ИмяФайлаПоРегистратору(Регистратор, НомерСтроки) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрикрепляемыеФайлы.ИмяФайла КАК ИмяФайла
		|ИЗ
		|	РегистрСведений.ПрикрепляемыеФайлы КАК ПрикрепляемыеФайлы
		|ГДЕ
		|	ПрикрепляемыеФайлы.Регистратор = &Регистратор
		|	И ПрикрепляемыеФайлы.НомерСтроки_ = &НомерСтроки_";
	
	Запрос.УстановитьПараметр("НомерСтроки_", НомерСтроки);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.ИмяФайла;
		
	КонецЕсли;
	
	Возврат "";

КонецФункции // ()

// Возвращает Ссылку на элемент справочника Файлы по Регистратору и Номеру строки
// Если Имя файла не удалось определить, возвращает пустую строку
Функция СсылкаФайлПоРегистратору(Регистратор, НомерСтроки) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрикрепляемыеФайлы.ЭлементФайлы КАК ЭлементФайлы
		|ИЗ
		|	РегистрСведений.ПрикрепляемыеФайлы КАК ПрикрепляемыеФайлы
		|ГДЕ
		|	ПрикрепляемыеФайлы.Регистратор = &Регистратор
		|	И ПрикрепляемыеФайлы.НомерСтроки_ = &НомерСтроки_";
	
	Запрос.УстановитьПараметр("НомерСтроки_", НомерСтроки);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.ЭлементФайлы;
		
	КонецЕсли;
	
	Возврат Справочники.Файлы.ПустаяСсылка();

КонецФункции // ()

// По строке регистра сведений Прикрепляемые файлы возвращает
// Структуру данных с полями УИД и БинарныеДанные
//
// ВыбраннаяСтрока - строка регистра сведений Прикрепляемые файлы
//
// ДанныеФайла - Структура
//     УИД            - УИД файла из Документа ПрикрепитьФайлы
//     БинарныеДанные - Двоичные данные файла, если файлы хранятся в базе иначе Неопределено
Функция ДанныеФайла(ВыбраннаяСтрока) Экспорт
	
	Результат = НахождениеДанныхФайла(ВыбраннаяСтрока);
	
	ДанныеФайла = Новый Структура;
	ДанныеФайла.Вставить("УИД", Результат[0].УИД);
	ДанныеФайла.Вставить("БинарныеДанные", Результат[0].Хранилище.Получить());
	ФайлыНаСервере = Константы.ХранитьПрикрепляемыеФайлыНаСервере.Получить();
	Если ФайлыНаСервере Тогда
	
		ДанныеФайла["БинарныеДанные"] = Неопределено;
	
	КонецЕсли;

	Возврат ДанныеФайла;

КонецФункции

#КонецОбласти

Функция ПолучитьИмяФайла(ВыделеннаяСтрока)

	Регистратор = ВыделеннаяСтрока.Регистратор;
	НомерСтроки = ВыделеннаяСтрока.НомерСтроки_;
	
	ИмяФайла = ИмяФайлаПоРегистратору(Регистратор, НомерСтроки);
	
	Если НЕ ЗначениеЗаполнено(ИмяФайла) Тогда
	
		ВызватьИсключение
			"Нет прикрепленного файла"
			+ "Данные запроса: "
			+ ВыделеннаяСтрока.Регистратор
			+ ", " + ВыделеннаяСтрока.НомерСтроки_;
	
	КонецЕсли;
	
	Возврат ИмяФайла;

КонецФункции // ()

Функция СоздатьВременныйФайл(ВыделеннаяСтрока)

	ВременныйФайл = Новый Структура;
	
	ДанныеФайла = ДанныеХраненияФайла(ВыделеннаяСтрока);
	ВременныйФайл.Вставить("УИД", ДанныеФайла["УИД"]);
	
	ВременныйКаталог = КаталогВременныхФайлов();
	ИмяФайла = ПолучитьИмяФайла(ВыделеннаяСтрока);
	ВременныйФайл.Вставить("ИмяФайла", ИмяФайла);
	ПолноеИмяФайла = СтандартныйВидКаталога(ВременныйКаталог) + ИмяФайла;
	ВременныйФайл.Вставить("Путь", ПолноеИмяФайла);
	
	ФайлыНаСервере = Константы.ХранитьПрикрепляемыеФайлыНаСервере.Получить();
	
	ВременныйФайл.Вставить("Хранилище", Неопределено);
	ДвоичныеДанные = Неопределено;
	Если ФайлыНаСервере Тогда
	
		Каталог = СтандартныйВидКаталога(Константы.КаталогХраненияПрикрепляемыхФайловНаСервере.Получить());
		ИмяСохраненногоФайла = Каталог + ДанныеФайла["УИД"];
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяСохраненногоФайла);
	
	Иначе
	
		ДвоичныеДанные = ДанныеФайла["Хранилище"].Получить(); 
	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДвоичныеДанные) Тогда
	
		ВызватьИсключение
			"Нет данных файла в хранилище"
			+ "Данные запроса: " + ИмяФайла;
	
	КонецЕсли;
	ВременныйФайл["Хранилище"] = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
	
	Возврат ВременныйФайл;

КонецФункции // ()

Функция СтандартныйВидКаталога(ПутьКаталога)

	Файл = Новый Файл(ПутьКаталога);
	Возврат Файл.ПолноеИмя + ПолучитьРазделительПути();

КонецФункции // ()

Функция ДанныеХраненияФайла(ВыбраннаяСтрока)

	Результат = НахождениеДанныхФайла(ВыбраннаяСтрока);
	
	ДанныеФайла = Новый Структура;
	ДанныеФайла.Вставить("УИД", Результат[0].УИД);
	ДанныеФайла.Вставить("Хранилище", Результат[0].Хранилище);

	Возврат ДанныеФайла;

КонецФункции // ()

Функция НахождениеДанныхФайла(ВыбраннаяСтрока)

	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПрикрепитьФайлыФайлы.Хранилище,
	|	ПрикрепитьФайлыФайлы.УИД
	|ИЗ
	|	Документ.ПрикрепитьФайлы.Файлы КАК ПрикрепитьФайлыФайлы
	|ГДЕ
	|	ПрикрепитьФайлыФайлы.Ссылка = &Ссылка
	|	И ПрикрепитьФайлыФайлы.НомерСтроки = &НомерСтроки");
	Запрос.УстановитьПараметр("Ссылка", ВыбраннаяСтрока.Регистратор);
	Запрос.УстановитьПараметр("НомерСтроки", ВыбраннаяСтрока.НомерСтроки_);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
	
		ВызватьИсключение
			"Нет прикрепленного файла"
			+ "Данные запроса: " + ВыбраннаяСтрока.Регистратор + ", " + ВыбраннаяСтрока.НомерСтроки_;
	
	КонецЕсли;
		
	Возврат Результат;

КонецФункции // ()




Перем ТекстИзменений;
Перем НаименованиеИзменено;

// Процедура - обработчик события "ОбработкаЗаполнения".
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ОсновнойМенеджер = ПараметрыСеанса.ТекущийПользователь;
	ДатаРегистрации = ТекущаяДатаСеанса();

	// Выполним заполнение контактной информации
	//УправлениеКонтактнойИнформацией.ОбработкаЗаполненияКИ(ЭтотОбъект, ДанныеЗаполнения);

	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
	   И ДанныеЗаполнения.Свойство("Наименование") Тогда

			//создание из взаимодействия по описанию участника
			Наименование = ДанныеЗаполнения.Наименование;
	КонецЕсли;

КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	//РегСвСолидарныеДолжники = РегистрыСведений.СолидарныеДолжники.СоздатьНаборЗаписей();
	//РегСвСолидарныеДолжники.Отбор.Должник.Установить(Ссылка);
	//РегСвСолидарныеДолжники.Очистить();
	//РегСвСолидарныеДолжники.Записать();
	
КонецПроцедуры

// Процедура проверяет наличие двойников в справочники Должники.
Процедура ПроверкаДвойников() Экспорт
	//Проверка двойников 
		
	////СхожийДолжник = Справочники.Контрагенты.НайтиПоНаименованию(СокрЛП(Наименование));
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	Должники.Ссылка
	//	|ИЗ
	//	|	Справочник.Должники КАК Должники
	//	|ГДЕ
	//	|	Должники.Наименование = &Наименование
	//	|	И НЕ Должники.Код = &Код";
	//Запрос.УстановитьПараметр("Наименование",СокрЛП(Наименование));
	//Запрос.УстановитьПараметр("Код",Код);
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	НаборЗаписиДвойники = РегистрыСведений.Двойники.СоздатьМенеджерЗаписи();
	//	НаборЗаписиДвойники.Наименование = СокрЛП(Наименование);
	//	НаборЗаписиДвойники.Должник1 = Ссылка;
	//	НаборЗаписиДвойники.Должник2 = Выборка.Ссылка;
	//	НаборЗаписиДвойники.Записать();
	//	ВыдатьСообщение(Ссылка,"Должник " + Наименование + " возможно имеет двойника в базе.");		
	//КонецЦикла;	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)

	Если Не ЭтотОбъект.ЭтоГруппа Тогда

		Если Не ЗначениеЗаполнено(ЭтотОбъект.ДатаСоздания) Тогда
			ЭтотОбъект.ДатаСоздания = ТекущаяДатаСеанса();
		КонецЕсли;

	КонецЕсли;
	
	//
	ТекстИзменений = ОбъектыСервер.ПроверитьИзмененияВОбъекте(ЭтотОбъект);

	Если ЭтотОбъект.Наименование = ЭтотОбъект.Ссылка.Наименование Тогда
		НаименованиеИзменено = Ложь;
	Иначе
		НаименованиеИзменено = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	ТекстОшибки = "Не удалось записать Контрагента: ";
	
	//Справочники.Пользователи.ОтслеживаниеИзменений(Отказ, Ссылка, ТекстИзменений);

	//ДобавитьВОчередьНаСклонение();
	Если ЗаполнятьСклонения() Тогда
		
		Попытка
		
			ЗаполнитьСклонения();
		
		Исключение
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстОшибки + ОписаниеОшибки();
			Сообщение.Сообщить();
			
			Возврат;
		КонецПопытки;
		
	КонецЕсли;

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если НаименованиеИзменено Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ДолговыеОбязательстваКонтрагенты.Ссылка
		                      |ИЗ
		                      |	Справочник.ДолговыеОбязательства.Контрагенты КАК ДолговыеОбязательстваКонтрагенты
		                      |ГДЕ
		                      |	ДолговыеОбязательстваКонтрагенты.Значение = &Значение
		                      |
		                      |СГРУППИРОВАТЬ ПО
		                      |	ДолговыеОбязательстваКонтрагенты.Ссылка");
		Запрос.УстановитьПараметр("Значение", Ссылка);
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			Об = Результат.Ссылка.ПолучитьОбъект();
			Попытка
				Об.Записать();
			Исключение
				Отказ = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекстОшибки + ОписаниеОшибки();
				Сообщение.Сообщить();
				Возврат;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//Функция ДобавитьВОчередьНаСклонение()

//	Если ЭтоГруппа Тогда
//	
//		Возврат;
//	
//	КонецЕсли;
//	
//	ИменаИзТабличнойЧасти = ЭтотОбъект.ФИО.ВыгрузитьКолонку("ФИО");
//	Если ИменаИзТабличнойЧасти.Количество() = 0 Тогда
//	
//		Возврат;
//	
//	КонецЕсли;
//	
//	ИменаВОчередь = Новый Массив;
//	Для Каждого ИмяТЧ Из ИменаИзТабличнойЧасти Цикл
//	
//		Если СтрДлина(СокрЛП(ИмяТЧ)) = 0 Тогда
//		
//			Продолжить;
//		
//		КонецЕсли;
//		ИменаВОчередь.Добавить(ИмяТЧ);
//	
//	КонецЦикла;
//	
//	ДобавитьИменаВОчередь(ИменаВОчередь);

//КонецФункции // ()

Процедура ДобавитьИменаВОчередь(ИменаВОчередь)

	Для каждого ИмяВОчередь Из ИменаВОчередь Цикл
	
		РегистрыСведений.ОчередьНаСклонениеФИО.ДобавитьИмяВОчередь(
			ЭтотОбъект.Ссылка,
			ИмяВОчередь
		);
	
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнениеСклоненияВФоне()

	Если ЭтоГруппа Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ИменаИзТабличнойЧасти = ЭтотОбъект.ФИО.ВыгрузитьКолонку("ФИО");
	Если ИменаИзТабличнойЧасти.Количество() = 0 Тогда
	
		Возврат;
	
	КонецЕсли;
	
	Управлятор = УправлениеПотоками;
	
	Поток = Управлятор.Создать(
		"Справочники.Контрагенты.ЗаполнитьСклоненияВФоне",
		Новый УникальныйИдентификатор()
	);
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Контрагент", ЭтотОбъект.Ссылка);
	ПараметрыЗаписи.Вставить("Имена", ИменаИзТабличнойЧасти);
	Поток = Управлятор.УстановитьПараметры(Поток, ПараметрыЗаписи);
	
	Контроллер = Управлятор.Запустить(Поток);
	Если Управлятор.ПотокЗавершился(Контроллер) Тогда
	
		Возврат;
	
	КонецЕсли;
	
	Счетчик = 0;
	Пока Не Управлятор.ДождатьсяЗавершения(Контроллер, 5) ИЛИ Счетчик < 10 Цикл
	
		Счетчик = Счетчик + 1;
	
	КонецЦикла;

КонецПроцедуры


Процедура ЗаполнитьСклонения()

	Если ЭтоГруппа Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ИменаИзТабличнойЧасти = ЭтотОбъект.ФИО.ВыгрузитьКолонку("ФИО");
	Если ИменаИзТабличнойЧасти.Количество() = 0 Тогда
	
		Возврат;
	
	КонецЕсли;
	
	Для Каждого ИмяТЧ Из ИменаИзТабличнойЧасти Цикл
	
		Если СтрДлина(СокрЛП(ИмяТЧ)) = 0 Тогда
		
			ВызватьИсключение "Пустая строка таблицы";
		
		КонецЕсли;
		ИмяТЧ = СтрЗаменить(ИмяТЧ, "ё", "е");
	
	КонецЦикла;
	
	Попытка
	
		ЗаписатьНаборСклонений(ЭтотОбъект.Ссылка, ИменаИзТабличнойЧасти);
	
	Исключение
		ВызватьИсключение "Заполнение склонений не удалось: " + ОписаниеОшибки();
	КонецПопытки;

КонецПроцедуры // ЗаполнитьСклонения()

Функция ЗаписатьНаборСклонений(Элемент, ИменаИзТабличнойЧасти)

	НаборЗаписей = РегистрыСведений.СклонениеФИО.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Контрагент.Установить(Элемент);
	
	Для каждого ИмяТЧ Из ИменаИзТабличнойЧасти Цикл
	
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Контрагент = Элемент;
		НоваяЗапись.Именительный = ИмяТЧ;
		
		Выборка = РегистрыСведений.СклонениеФИО.ИзмененоВРучную(Элемент, ИмяТЧ);
		Если Выборка <> Неопределено И Выборка.Следующий() Тогда
		
			НоваяЗапись.Инициалы = Выборка.Инициалы;
			НоваяЗапись.Родительный = Выборка.Родительный;
			НоваяЗапись.Творительный = Выборка.Творительный;
			НоваяЗапись.Предолжный = Выборка.Предолжный;
			НоваяЗапись.Дательный = Выборка.Дательный;
			НоваяЗапись.ИзмененоВРучную = Выборка.ИзмененоВРучную;
			Продолжить;
		
		КонецЕсли;
		
		НоваяЗапись.Инициалы = Инициалы(ИмяТЧ);
		
		ЗаписатьСклонения(НоваяЗапись, ИмяТЧ);
	
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	Возврат Истина;

КонецФункции // ()

Функция ЗаписатьСклонения(Запись, ФИОКонтрагента)

	// Если протащить пол, можно точно указать
	Запись.Родительный = ПолучитьПадеж(ФИОКонтрагента, "Родительный");
	Запись.Творительный = ПолучитьПадеж(ФИОКонтрагента, "Творительный");
	Запись.Предолжный = ПолучитьПадеж(ФИОКонтрагента, "Предложный");
	Запись.Дательный = ПолучитьПадеж(ФИОКонтрагента, "Дательный");

	Возврат Запись;

КонецФункции // ()

Функция ПолучитьПадеж(ФИОКонтрагента, Падеж)

	Формат = "ПД=" + Падеж;
	Результат = ПолучитьСклоненияСтроки(ФИОКонтрагента, , Формат);
	
	Ответ = "";
	Если Результат.Количество() > 0 Тогда
	
		Ответ = Результат[0];
	
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции

Функция ЗаполнятьСклонения()

	Возврат Константы.ПарсингДокументов.Получить();

КонецФункции // ()


Функция Инициалы(СтрФИО)
	
	сФио = ФизическиеЛицаКлиентСервер.ЧастиИмени(СтрФИО);
	Если сФио.Свойство("Имя") И сФио.Свойство("Отчество") Тогда
		Инициалы = Лев(сФио.Имя,1) + " " +  Лев(сФио.Отчество,1);
		Возврат Инициалы;
	КонецЕсли;
	
	Возврат "";
КонецФункции
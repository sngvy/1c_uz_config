#Область ПрограммныйИнтерфейс

// Получает модуль по переданной настройке,
//   Если Настройка - ОбщийМодуль - возвращет ее
//   Если Настройка - Ссылка - Возвращает МодульМенеджера по Ссылке
//
// Параметры:
//  Настройка  - ЛюбаяСсылка - ОбщийМодуль или Ссылка
//
// Возвращаемое значение:
//   Произвольный   - МодульМенеджера, ОбщийМодуль
//
Функция ПолучитьНастройщик(Настройка) Экспорт
	
	Настройщик = Настройка;
	Если ЗначениеСсылочногоТипа(Настройка) Тогда
	
		Настройщик = МенеджерОбъектаПоСсылке(Настройка);
	
	КонецЕсли;
	
	Возврат Настройщик;

КонецФункции

// По переданному значению возвращает - Является ли значение Ссылочным типом
//
// Параметры:
//  ПроверяемоеЗначение  - Произвольный - Любое значение
//
// Возвращаемое значение:
//   Булево   - Ссылка или не ссылка
//
Функция ЗначениеСсылочногоТипа(ПроверяемоеЗначение) Экспорт

	Возврат ЭтоСсылочныйТип(
		ТипЗнч(ПроверяемоеЗначение)
	);

КонецФункции // ()

// По переданному типу возвращает - Является ли тип Ссылочным
//
// Параметры:
//  ПроверяемыйТип  - Произвольный - Любой тип
//
// Возвращаемое значение:
//   Булево   - Ссылочный или не ссылочный
//
Функция ЭтоСсылочныйТип(ПроверяемыйТип) Экспорт

	Если ПроверяемыйТип = Тип("Неопределено") Тогда
	
		Возврат Ложь;
	
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(
		Метаданные.НайтиПоТипу(ПроверяемыйТип)
	);

КонецФункции // ()

// По переданному типу возвращает - Является ли тип примитивом
//
// Параметры:
//  ТипЗначения  - Произвольный - Любой тип
//
// Возвращаемое значение:
//   Булево   - Это Число, Дата, Строка, Булево
//
Функция ЭтоПримитивныйТип(ТипЗначения) Экспорт

	Возврат УправлениеДанными.ЭтоПримитивныйТип(ТипЗначения);

КонецФункции // ()

// По переданной ссылке возвращает - МодульМенеджера
//   Если переданное значение не ссылка - вызывается Исключение
//
// Параметры:
//  Ссылка  - Произвольный - Любая ссылка
//
// Возвращаемое значение:
//   Произвольный   - Любой модуль менеджера
//
Функция МенеджерОбъектаПоСсылке(Ссылка) Экспорт

	Возврат МенеджерОбъектаПоТипу(ТипЗнч(Ссылка));

КонецФункции 

// По переданному ссылочному типу возвращает - МодульМенеджера,
//   Если переданный тип не ссылочный - вызывается Исключение
//
// Параметры:
//  ТипСсылки  - Произвольный - Любой ссылочный тип
//
// Возвращаемое значение:
//   Произвольный   - Любой модуль менеджера
//
Функция МенеджерОбъектаПоТипу(ТипСсылки) Экспорт

	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипСсылки);

	Попытка
	
		МенеджерСсылки = МенеджерПоОбъектуМетаданных(ОбъектМетаданных);
	
	Исключение
		
		Ошибка = УправленияСообщениями.СформироватьСтекОшибки(
			ИнформацияОбОшибке(),
			"Не удалось получить МодульМенеджера"
		);
		ВызватьИсключение Ошибка["Выражение"] + Символы.ПС + Ошибка["Стек"];
	КонецПопытки;
	
	Возврат МенеджерСсылки;

КонецФункции

// Возвращает ссылку на общий модуль или модуль менеджера по имени.
//
// Параметры:
//  ИмяМодуля - Строка - имя общего модуля.
//
// Возвращаемое значение:
//  ОбщийМодуль, МодульМенеджераОбъекта - общий модуль.
//
Функция ОбщийМодуль(ИмяМодуля) Экспорт

	Возврат ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);

КонецФункции // ()

#КонецОбласти

#Область Конфигурация

Функция БазовыеПредставленияСсылочногоТипа()

	Данные = Новый Соответствие;
	Данные.Вставить("Справочник", Справочники);
	Данные.Вставить("Документ", Документы);
	Данные.Вставить("БизнесПроцесс", БизнесПроцессы);
	Данные.Вставить("Задача", Задачи);
	Данные.Вставить("ПланСчетов", ПланыСчетов);
	Данные.Вставить("ПланОбмена", ПланыОбмена);
	Данные.Вставить("ПланВидовХарактеристик", ПланыВидовХарактеристик);
	Данные.Вставить("ПланВидовРасчета", ПланыВидовРасчета);
	Данные.Вставить("Перечисление", Перечисления);
	
	Возврат Данные;

КонецФункции // ()

#КонецОбласти

#Область Техническая

Функция МенеджерПоОбъектуМетаданных(ОбъектМетаданных)

	ИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
	
	ЧастиИмени = СтрРазделить(ИмяОбъектаМетаданных, ".");
	Если ЧастиИмени.Количество() < 2 Тогда
	
		ВызватьИсключение "Переданный тип не является ссылкой";
	
	КонецЕсли;
	
	ИмяБазовогоТипа = ЧастиИмени[0];
	ИмяОбъекта = ЧастиИмени[1];
	
	БазовыеПредставления = БазовыеПредставленияСсылочногоТипа();
	БазовыйМенеджер = БазовыеПредставления.Получить(ИмяБазовогоТипа);
	Если БазовыйМенеджер = Неопределено Тогда
	
		ВызватьИсключение "Переданный тип не является ссылкой";
	
	КонецЕсли;
	
	Возврат БазовыйМенеджер[ИмяОбъекта];

КонецФункции // ()

#КонецОбласти


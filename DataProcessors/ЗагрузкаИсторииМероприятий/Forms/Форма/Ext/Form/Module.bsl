
&НаСервереБезКонтекста
Функция ЗаписатьМероприятие(Данные, Сотрудник)

	Мероприятие = Задачи.Мероприятие.Создать()
		.Автор(Сотрудник["Автор"])
		.Объект(Данные["Объект"])
		.ТипМероприятия(Данные["ТипМероприятия"])
		.Результат(Данные["Результат"])
		.Выполнено()
		.ПланируемаяДата(Данные["ПланируемаяДата"])
		.ДатаВыполнения(Данные["ДатаВыполнения"])
		.ФактическаяДата(Данные["ФактическаяДата"])
		.Исполнитель(Сотрудник["Исполнитель"])
		.Ответственный(Сотрудник["Ответственный"])
		.Подразделение(Сотрудник["Подразделение"])
		.Комментарий(Данные["Комментарий"]);
	
	Для каждого Реквизит Из Данные["Реквизиты"] Цикл
	
		Мероприятие.ДобавитьДополнительныйРеквизит(Реквизит.Ключ, Реквизит.Значение);
	
	КонецЦикла;
	
	Мероприятие.Сохранить();

КонецФункции // ()

&НаСервереБезКонтекста
Функция ДанныеСотрудника()

	Данные = Новый Структура;
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	Данные.Вставить("Исполнитель", ТекущийПользователь);
	Данные.Вставить("Ответственный", ТекущийПользователь);
	Данные.Вставить("Подразделение", ТекущийПользователь.Подразделение);
	Данные.Вставить("Автор", "Обработка загрузки от " + Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy"));
	
	Возврат Данные;

КонецФункции // ()

&НаСервереБезКонтекста
Функция ОбработатьСчитанныеЗначения(ДанныеСтроки, Настройка)

	Данные = Новый Структура;
	Данные.Вставить("Успех", Истина);
	
	Текст = СокрЛП(ДанныеСтроки["Объект"]);
	Попытка
	
		Объект = Настройка["Модуль"].НайтиЭлемент(Текст);
	
	Исключение
		ВызватьИсключение УправленияСообщениями.ПредупреждениеОбПользовательскойОшибке(
			СтрШаблон("Для объекта учета(%1) не реализована загрузка мероприятий", Настройка["Модуль"])
		);
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(Объект) Тогда
	
		Данные.Вставить("Успех", Ложь);
		Данные.Вставить("Ошибка", "Не удалось найти объект: " + Текст);
		Возврат Данные;
	
	КонецЕсли;
	Данные.Вставить("Объект", Объект);
	
	Текст = ДанныеСтроки["ДатаВыполнения"];
	ОписаниеДаты = Настройка["ОписаниеДаты"];
	ДатаВыполнения = Проверка_ПолученияДаты.ПривестиКДате(Текст, ОписаниеДаты);
	Если Не ЗначениеЗаполнено(Объект) Тогда
	
		Данные.Вставить("Успех", Ложь);
		Данные.Вставить("Ошибка", "Некорректное значение Даты: " + Текст);
		Возврат Данные;
	
	КонецЕсли;
	Данные.Вставить("ДатаВыполнения", ДатаВыполнения);
	
	Данные.Вставить("Комментарий", ДанныеСтроки["Комментарий"]);
	
	ДанныеПоУмолчанию = Настройка["ДанныеПоУмолчанию"];
	
	Текст = ДанныеСтроки["ТипМероприятия"];
	ТипМероприятия = НайтиМероприятие(
		Настройка["ТипыМероприятий"],
		Настройка["СовпаденияТипов"],
		Текст
	);     
	
	Если Не ПустаяСтрока(Текст)
		И ТипМероприятия.Пустая() Тогда
		
		Данные.Вставить("Успех", Ложь);
		Данные.Вставить("Ошибка", "Не нашелся тип мероприятия: " + Текст);
		Возврат Данные;
		
	КонецЕсли;
		
	ТипМероприятия = ?(
		ТипМероприятия.Пустая(),
		ДанныеПоУмолчанию["ТипМероприятия"],
		ТипМероприятия
	);
	
	Если ТипМероприятия.Пустая() Тогда
	
		Данные.Вставить("Успех", Ложь);
		Данные.Вставить("Ошибка", "Не нашелся тип мероприятия: " + Текст);
		Возврат Данные;
	
	КонецЕсли;
	
	Данные.Вставить("ТипМероприятия", ТипМероприятия);
	
	Текст = ДанныеСтроки["Результат"];
	Результат = ПодобратьРезультат(
		Настройка["ВсеРезультаты"],
		Настройка["СовпаденияРезультатов"],
		ТипМероприятия,
		Текст
	);
	
	Данные.Вставить("Результат", Результат);
	
	ТекстДопРеквизиты = ДанныеСтроки["ДополнительныеРеквизиты"];

	Данные.Вставить("Реквизиты", ТекстДопРеквизиты);
	
	Возврат Данные;

КонецФункции // ()

&НаСервереБезКонтекста
Функция ЗаполнитьДанныеДляСозданияМероприятия(Данные)

	Данные.Вставить("ПланируемаяДата", Данные["ДатаВыполнения"]);
	Данные.Вставить("ФактическаяДата", Данные["ДатаВыполнения"]);
	
	Возврат Данные;

КонецФункции // ()


&НаСервереБезКонтекста
Функция ВсеРезультаты()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РезультатыМероприятий.Ссылка КАК Результат,
		|	РезультатыМероприятий.Владелец КАК ТипМероприятия,
		|	РезультатыМероприятий.Представление КАК Представление
		|ИЗ
		|	Справочник.РезультатыМероприятий КАК РезультатыМероприятий";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();

КонецФункции // ()

&НаСервереБезКонтекста
Функция ВсеТипыМероприятий()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТипыМероприятий.Ссылка КАК Ссылка,
		|	ТипыМероприятий.Представление КАК Представление
		|ИЗ
		|	Справочник.ТипыМероприятий КАК ТипыМероприятий
		|
		|УПОРЯДОЧИТЬ ПО
		|	Представление";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();

КонецФункции // ()


&НаСервереБезКонтекста
Функция ПодобратьРезультат(ВсеРезультаты, Совпадения, ТипМероприятия, Знач Текст) Экспорт

	Текст = СокрЛП(Текст);

	Результат = Совпадения.Получить(Текст);
	Если Результат <> Неопределено Тогда
	
		Возврат Результат;
	
	КонецЕсли;
	
	РезультатыТипа = ВсеРезультаты.НайтиСтроки(Новый Структура("ТипМероприятия", ТипМероприятия));
	Для каждого Запись Из РезультатыТипа Цикл

		Представление = ВРег(Запись.Представление);
		ВТекст = ВРег(Текст);
		
		Если СтрНайти(Представление, ВТекст) <> 0 Тогда
		
			Результат = Запись.Результат;
			Совпадения.Вставить(Текст, Результат);
			
			Возврат Результат;
		
		КонецЕсли;
	
	КонецЦикла;

	ПустойРезультат = Справочники.РезультатыМероприятий.ПустаяСсылка();
	Совпадения.Вставить(Текст, ПустойРезультат);
	
	Возврат ПустойРезультат;

КонецФункции // ()

&НаСервереБезКонтекста
Функция НайтиМероприятие(Мероприятия, Совпадения, Знач Текст)

	Текст = СокрЛП(Текст);

	ТипМероприятия = Совпадения.Получить(Текст);
	Если ТипМероприятия <> Неопределено Тогда
	
		Возврат ТипМероприятия;
	
	КонецЕсли;
	
	Для каждого Запись Из Мероприятия Цикл
	
		Представление = ВРег(Запись.Представление);
		ВТекст = ВРег(Текст);
		Если СтрСравнить(СокрЛП(Представление), ВТекст) = 0 Тогда
		
			ТипМероприятия = Запись.Ссылка;
			Совпадения.Вставить(Текст, ТипМероприятия);
			
			Возврат ТипМероприятия;
		
		КонецЕсли;
	
	КонецЦикла;
	
	Для каждого Запись Из Мероприятия Цикл
		
		Представление = ВРег(Запись.Представление);
		ВТекст = ВРег(Текст);
		
		Если Не ПустаяСтрока(Текст)
			И СтрНайти(Представление, ВТекст) <> 0 Тогда
		
			ТипМероприятия = Запись.Ссылка;
			Совпадения.Вставить(Текст, ТипМероприятия);
			
			Возврат ТипМероприятия;
		
		КонецЕсли;
	
	КонецЦикла;

	ПустойТип = Справочники.ТипыМероприятий.ПустаяСсылка();
	Совпадения.Вставить(Текст, ПустойТип);
	
	Возврат ПустойТип;

КонецФункции // ()

&НаСервереБезКонтекста
Функция ПолучитьТекстЯчееек(Реестр, НачалоРеестра, НомераСтолбцов, ДанныеСвойств)

	ПрочитанныеЗначения = Новый Массив;
	
	Для НомерСтроки = НачалоРеестра По Реестр.ВысотаТаблицы Цикл
		
		ДанныеСтроки = Новый Структура;
		Для каждого НомерСтолбца Из НомераСтолбцов Цикл
		
			Текст = УправлениеЗагрузкойСервер.ТекстЯчейки(
				Реестр,
				НомерСтроки,
				НомерСтолбца.Значение
			);
			
			ДанныеСтроки.Вставить(НомерСтолбца.Ключ, Текст);
		
		КонецЦикла;
		
		ДанныеДопРеквизитов = Новый Соответствие;
		Для каждого Реквизит Из ДанныеСвойств Цикл
		
			Текст = УправлениеЗагрузкойСервер.ТекстЯчейки(
				Реестр,
				НомерСтроки,
				Реквизит.НомерСтолбца
			);
			
			ДанныеДопРеквизитов.Вставить(Реквизит.Свойство, Текст);
			
		
		КонецЦикла;
		ДанныеСтроки.Вставить("ДополнительныеРеквизиты", ДанныеДопРеквизитов);
		
		ДанныеСтроки.Вставить("НомерСтроки", НомерСтроки);
		
		ПрочитанныеЗначения.Добавить(ДанныеСтроки);
	
	КонецЦикла;
	
	Возврат ПрочитанныеЗначения;

КонецФункции // ()

&НаСервереБезКонтекста
Функция ОбработатьРеестр(Реестр, НачалоРеестра, ВыбраннаяНастройка)

	Настройка = Справочники.НастройкиЗагрузкиМероприятий.НастройкиПарсинга(
		ВыбраннаяНастройка
	);
	
	Ячейки = ПолучитьТекстЯчееек(Реестр, НачалоРеестра, Настройка["Столбцы"], Настройка["СтолбцыСвойств"]);
	
	Сотрудник = ДанныеСотрудника();
	
	Результаты = ВсеРезультаты();
	Настройка.Вставить("ВсеРезультаты", Результаты);
	КэшРезультатов = Новый Соответствие;
	Настройка.Вставить("СовпаденияРезультатов", КэшРезультатов);
	
	ТипыМероприятий = ВсеТипыМероприятий();
	Настройка.Вставить("ТипыМероприятий", ТипыМероприятий);
	КэшТиповМероприятий = Новый Соответствие;
	Настройка.Вставить("СовпаденияТипов", КэшТиповМероприятий);
	
	Настройка.Вставить("ОписаниеДаты", Новый ОписаниеТипов("Дата"));
	
	Ошибки = Новый Массив;
	Для каждого ДанныеСтроки Из Ячейки Цикл
	
		ОбработанныеДанные = ОбработатьСчитанныеЗначения(ДанныеСтроки, Настройка);
		Если Не ОбработанныеДанные["Успех"] Тогда
		
			Ошибки.Добавить(
				СтрШаблон(
					"В строке %1 произошла ошибка:
					|%2",
					ДанныеСтроки["НомерСтроки"],
					ОбработанныеДанные["Ошибка"]
				)
			);
			Продолжить;
		
		КонецЕсли;
		ДанныеМероприятия = ЗаполнитьДанныеДляСозданияМероприятия(ОбработанныеДанные);
		
		Попытка
		
			ЗаписатьМероприятие(ДанныеМероприятия, Сотрудник);
		
		Исключение
			Ошибки.Добавить(
				СтрШаблон(
					"Не удалось записать строку %1:
					|%2",
					ДанныеСтроки["НомерСтроки"],
					ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
				)
			);
		КонецПопытки;
	
	КонецЦикла;
	
	Ответ = Новый Структура;
	Ответ.Вставить("Результат", Истина);
	Ответ.Вставить("Количество", Ячейки.Количество());
	
	Если Ошибки.Количество() > 0 Тогда
	
		Ответ.Вставить("Результат", Ложь);
		Ответ.Вставить("Ошибки", Ошибки);
		Ответ.Вставить("КоличествоОшибок", Ошибки.Количество());
	
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции // ()



#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НачалоДанных = 2;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРеестрНаКлиенте(Команда)

	Ответ = ОбработатьРеестр(
		Объект.Реестр,
		НачалоДанных,
		Объект.Настройка
	);
	
	Если Ответ["Результат"] Тогда
	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(
			"Загружены все данные, общее количество %1 строк",
			Ответ["Количество"]
		);
		Сообщение.Сообщить();
		Возврат;
	
	КонецЕсли;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = СтрШаблон(
		"Не удалось загрузить все данные,
		|общее количество не загруженных строк %1
		|Количество всех строк %2",
		Ответ["КоличествоОшибок"],
		Ответ["Количество"]
	);
	Сообщение.Сообщить();
	
	Элементы.ОшибкиЗагрузки.Видимость = Истина;
	ОшибкиЗагрузки = СтрСоединить(Ответ["Ошибки"], Символы.ПС + Символы.ПС);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции



#КонецОбласти
&НаКлиенте
Перем ОтветПередЗакрытием;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	КаталогДокументов = Настройка.КаталогДокументовПоУмолчанию; 
	Если Настройка.ДолговыеОбязательства Тогда
		Элементы.ТЧДолговоеОбязательство.Видимость = Истина;
		Элементы.ТЧОтметкаДО.Видимость = Истина;
	КонецЕсли;
	
	Если Настройка.Контрагенты Тогда
		Элементы.ТЧКонтрагент.Видимость = Истина;
		Элементы.ТЧОтметкаКА.Видимость = Истина;
	КонецЕсли;
	
	Если Настройка.ИсполнительноеПроизводство Тогда
		Элементы.ТЧИсполнительноеПроизводство.Видимость = Истина;
		Элементы.ТЧОтметкаИП.Видимость = Истина;
	КонецЕсли;
	
	Если Настройка.ИсполнительныеДокументы Тогда
		Элементы.ТЧИсполнительныйДокументу.Видимость = Истина;
		Элементы.ТЧОтметкаИД.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЕстьДанные = ПроверитьОчередьСклонений();
	Если ЕстьДанные Тогда
		
		ДлительнаяОперация = ОбновитьСклонения(УникальныйИдентификатор);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);

		ПараметрыОжидания["ТекстСообщения"] = "Есть измененные ФИО. Запущена обработка...";

		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			Новый ОписаниеОповещения("ЗавершениеОбновленияСклонения", ЭтотОбъект),
			ПараметрыОжидания
		);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПриИзменении(Элемент)

	НастройкиПоУмолчанию = ПолучитьВсеНастройки(Настройка);
	
	Если НастройкиПоУмолчанию.ДолговыеОбязательства Тогда
		Элементы.ТЧДолговоеОбязательство.Видимость = Истина;
		Элементы.ТЧОтметкаДО.Видимость = Истина;
	Иначе
		Элементы.ТЧДолговоеОбязательство.Видимость = Ложь;
		Элементы.ТЧОтметкаДО.Видимость = Ложь;
	КонецЕсли;
	
	Если НастройкиПоУмолчанию.Контрагенты Тогда
		Элементы.ТЧКонтрагент.Видимость = Истина;
		Элементы.ТЧОтметкаКА.Видимость = Истина;
	Иначе
		Элементы.ТЧКонтрагент.Видимость = Ложь;
		Элементы.ТЧОтметкаКА.Видимость = Ложь;	
	КонецЕсли;
	
	Если НастройкиПоУмолчанию.ИсполнительноеПроизводство Тогда
		Элементы.ТЧИсполнительноеПроизводство.Видимость = Истина;
		Элементы.ТЧОтметкаИП.Видимость = Истина;
	Иначе
		Элементы.ТЧИсполнительноеПроизводство.Видимость = Ложь;
		Элементы.ТЧОтметкаИП.Видимость = Ложь;
	КонецЕсли;
	
	Если НастройкиПоУмолчанию.ИсполнительныеДокументы Тогда
		Элементы.ТЧИсполнительныйДокументу.Видимость = Истина;
		Элементы.ТЧОтметкаИД.Видимость = Истина;
	Иначе
		Элементы.ТЧИсполнительныйДокументу.Видимость = Ложь;
		Элементы.ТЧОтметкаИД.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьДокумент = НастройкиПоУмолчанию.ПоказатьДокумент;
	ПоказыватьСкрытьДокумент = ПоказатьДокумент;
	Элементы.ГруппаПраво.Видимость = ПоказатьДокумент;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)	
	
	Если ЗавершениеРаботы Тогда
	
		Отказ = Истина;
		ТекстПредупреждения =
			"При закрытии формы все не сохраненные данные будут утеряны,
			|а временные файлы не будут удалены
			|
			|Продолжить?";
		
		Возврат;
	
	КонецЕсли;
	
	Если ОтветПередЗакрытием <> КодВозвратаДиалога.Да Тогда
		Отказ = Истина;
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеОЗакрытии, "Вы хотите закрыть форму?", РежимДиалогаВопрос.ДаНет);
		
		Возврат;
	КонецЕсли;
	
	НастройкиПарсинга = ПолучитьВсеНастройки(Настройка);
	Если НастройкиПарсинга = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
	
	УдачнаяОчистка = УдалитьВременныеКаталоги(НастройкиПарсинга);
	Если Не УдачнаяОчистка Тогда
	
		// Не ставим "Отказ = Истина;", только рассказываем
		// Не уверен, что есть смысл блокировать закрытие в этом случае
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось очистить временные каталоги";
		Сообщение.Сообщить();
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(УверенныйОтвет, ДополнительныеПараметры) Экспорт
	
	ОтветПередЗакрытием = УверенныйОтвет;
	
	Если УверенныйОтвет = КодВозвратаДиалога.Да Тогда		
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Колбэк ПарсингСПервичнойПодготовкойTXT
//
// Параметры:
//  Результаты  - Структура - Результаты обработки вызываемых модулей
//                 Значение определяется вызываемым модулем
//  ПараметрыНастройки  - Структура - Данные реквизитов настройки
//                 См. Справочник.НастройкиПарсингаДокументов
//
&НаКлиенте
Процедура ОбработатьРезультатПарсинга(Результаты, ПараметрыНастройки) Экспорт

	ФайлыДляОбработки = ПарсингДокументовОбщийКлиентСервер.РезультатПодготовки(Результаты);
	
	Объект.ТЧ.Очистить();
	ЗаполнитьПервоначальныеДанные(ФайлыДляОбработки, Объект.ТЧ);
	ОтобразитьИзменениеДанных(Объект.ТЧ, ВидИзмененияДанных.Добавление);
	
	РезультатКонвертации = ПарсингДокументовОбщийКлиентСервер
		.РезультатПолученияТекстовогоФайлаКонвертация(Результаты);
	Если Не РезультатКонвертации Тогда
	
		УправленияСообщениямиКлиентСервер.СообщениеПользователюСФормыОшибка(
			"Конвертация документов в изображение"
		);
		Возврат;
	
	КонецЕсли;
	
	РезультатПарсинга = ПарсингДокументовОбщийКлиентСервер
		.РезультатПолученияТекстовогоФайлаРаспознание(Результаты);
	Если Не РезультатПарсинга Тогда
	
		УправленияСообщениямиКлиентСервер.СообщениеПользователюСФормыОшибка(
			"Распознавание текста из изображений"
		);
		Возврат;
	
	КонецЕсли;
	
	ОбработкаТекстовыхДокументов(ПараметрыНастройки);
	
	УправленияСообщениямиКлиентСервер.СообщениеПользователюСФормыУспех(
		"Парсинг документов"
	);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьБезПодгатовки(Команда)

	Если Не ПарсингРазрешен() Тогда
	
		СообщитьОбЗапретеНаПарсинг();
		Возврат;
	
	КонецЕсли;
	
	ОбработкаТекстовыхДокументов();

КонецПроцедуры

#Область ОбработкаКомандыФормыНавигация

&НаКлиенте
Процедура ПредыдущаяСтраница(Команда)
	
	ТекущиеДанные = Элементы.ТЧ.ТекущиеДанные;
	Если Не ПрименятьНавигацию(ТекущиеДанные) Тогда
	
		Возврат;
	
	КонецЕсли;
	
	НастройкиПарсинга = ПолучитьВсеНастройки(Настройка);
	
	Ответ = ПереходНаСтраницу(ТекущиеДанные, НастройкиПарсинга, "Предыдущая");
	Если Ответ = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ОбработатьОтветНовойСтраницы(Ответ, ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура СледующаяСтраница(Команда)

	ТекущиеДанные = Элементы.ТЧ.ТекущиеДанные;
	Если Не ПрименятьНавигацию(ТекущиеДанные) Тогда
	
		Возврат;
	
	КонецЕсли;
	
	НастройкиПарсинга = ПолучитьВсеНастройки(Настройка);
	
	Ответ = ПереходНаСтраницу(ТекущиеДанные, НастройкиПарсинга, "Следующая");
	Если Ответ = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ОбработатьОтветНовойСтраницы(Ответ, ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ПерваяСтраница(ТекущиеДанные)

	Если Не ПрименятьНавигацию(ТекущиеДанные) Тогда
	
		Возврат;
	
	КонецЕсли;
	
	НастройкиПарсинга = ПолучитьВсеНастройки(Настройка);
	
	Ответ = ПереходНаСтраницу(ТекущиеДанные, НастройкиПарсинга, "Первая");
	Если Ответ = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ОбработатьОтветНовойСтраницы(Ответ, ТекущиеДанные);

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ТЧПриАктивизацииСтроки(Элемент)

	ТекущиеДанные = Элементы.ТЧ.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		ИЛИ ТекущиеДанные.НомерСтроки = ТекущееПредставление Тогда
	
		Возврат;
	
	КонецЕсли;

	ПерваяСтраница(ТекущиеДанные);
	ТекущееПредставление = ТекущиеДанные.НомерСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЧОригиналСканаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗапуститьПриложение(Элемент.ТекстРедактирования);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеКомандыФормыНавигация

&НаКлиенте
Функция ПрименятьНавигацию(ТекущиеДанные)

	Если Не ПоказыватьСкрытьДокумент Тогда
	
		Возврат Ложь;
	
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
	
		Возврат Ложь;
	
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ()

&НаКлиенте
Процедура ОбработатьОтветНовойСтраницы(Ответ, ТекущиеДанные)

	Если Ответ["Представление"] = Неопределено Тогда
	
		Если ЗначениеЗаполнено(СсылкаНаКартинку) Тогда
		
			Возврат;
		
		КонецЕсли;
		
		СсылкаНаКартинку = Неопределено;
		Элементы.СсылкаНаКартинку.Заголовок = "Нет представления";
		Возврат;
	
	КонецЕсли;
	
	МиниПредставление = Ответ["Представление"];
	Если МиниПредставление <> Неопределено Тогда
	
		ТекущиеДанные.Страница = Ответ["ТекущаяСтраница"];
		Элементы.СсылкаНаКартинку.Заголовок = "Текущая часть - " + МиниПредставление;
		СсылкаНаКартинку = ПолучитьПоказываемуюКартинку(Ответ["Файл"]);
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПереходНаСтраницу(ТекущиеДанные, НастройкиПарсинга, Направление)

	Настройщик = НастройкиПарсингаКлиентСервер;
	
	КаталогиПарсинга = Настройщик.ПолучитьКаталогиПарсинга(
		НастройкиПарсинга,
		Новый Структура("КаталогДокументов", КаталогДокументов)
	);
	
	ВыполнятьНаСервере = Настройщик.ВыполнятьНаСервере(НастройкиПарсинга);
	
	ДанныеПерехода = Новый Структура;
	ДанныеПерехода.Вставить("ОригиналСкана", ТекущиеДанные.ОригиналСкана);
	ДанныеПерехода.Вставить("Страница", ТекущиеДанные.Страница);
	
	Если ВыполнятьНаСервере Тогда
	
		Возврат ПереходНаСтраницуСервер(ДанныеПерехода, КаталогиПарсинга, Направление);
	
	КонецЕсли;
	
	Возврат ПереходНаСтраницуКлиент(ДанныеПерехода, КаталогиПарсинга, Направление);

КонецФункции // ()

&НаКлиенте
Функция ПереходНаСтраницуКлиент(ТекущиеДанные, КаталогиПарсинга, Направление)

	Возврат ПереходНаСтраницуОбщий(ТекущиеДанные, КаталогиПарсинга, Направление);

КонецФункции // ()

&НаСервереБезКонтекста
Функция ПереходНаСтраницуСервер(Знач ТекущиеДанные, Знач КаталогиПарсинга, Знач Направление)

	Возврат ПереходНаСтраницуОбщий(ТекущиеДанные, КаталогиПарсинга, Направление);

КонецФункции // ()

&НаКлиентеНаСервереБезКонтекста
Функция ПереходНаСтраницуОбщий(ТекущиеДанные, КаталогиПарсинга, Направление)

	Если Направление = "Следующая" Тогда
	
		Возврат ПарсингУправлениеСтраницамиПредставления.СледующаяСтраница(
			ТекущиеДанные,
			КаталогиПарсинга
		);
	
	КонецЕсли;
	
	Если Направление = "Предыдущая" Тогда
	
		Возврат ПарсингУправлениеСтраницамиПредставления.ПредыдущаяСтраница(
			ТекущиеДанные,
			КаталогиПарсинга
		);
	
	КонецЕсли;
	
	Если Направление = "Первая" Тогда
	
		Возврат ПарсингУправлениеСтраницамиПредставления.ПерваяСтраница(
			ТекущиеДанные,
			КаталогиПарсинга
		);
	
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции // ()

#КонецОбласти

&НаКлиенте
Функция УдалитьВременныеКаталоги(НастройкиПарсинга)

	Настройщик = НастройкиПарсингаКлиентСервер;
	
	Каталоги = Настройщик.ПолучитьКаталогиПарсинга(НастройкиПарсинга);
	
	ВыполнятьНаСервере = Настройщик.ВыполнятьНаСервере(НастройкиПарсинга);
	
	Если ВыполнятьНаСервере Тогда
	
		Возврат УдалитьВременныеКаталогиНаСервере(Каталоги);
	
	КонецЕсли;
	
	Возврат УдалитьВременныеКаталогиНаКлиенте(Каталоги);

КонецФункции // ()

&НаКлиенте
Функция УдалитьВременныеКаталогиНаКлиенте(Каталоги)

	Возврат ПарсингДокументовОбщийКлиентСервер.УдалитьВременныеКаталоги(Каталоги);

КонецФункции // ()

&НаСервереБезКонтекста
Функция УдалитьВременныеКаталогиНаСервере(Каталоги)

	Возврат ПарсингДокументовОбщийКлиентСервер.УдалитьВременныеКаталоги(Каталоги);

КонецФункции // ()

&НаКлиенте
Функция ПолучитьПоказываемуюКартинку(МиниПредставление)

	Возврат ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(
		МиниПредставление
	));

КонецФункции // ()

&НаКлиенте
Процедура ОбработкаТекстовыхДокументов(ПараметрыНастройки = Неопределено)

	Если ПараметрыНастройки = Неопределено Тогда
	
		ПараметрыНастройки = ПолучитьВсеНастройки(Настройка);
	
	КонецЕсли;
	
	ВыполнятьНа = ВыполнятьНа();
	Если ВыполнятьНа = "2" Тогда
		ОбработатьБезПодгатовкиНаКлиенте(ПараметрыНастройки);	
	Иначе
		ОбработатьБезПодгатовкиНаСервере(ПараметрыНастройки);
	КонецЕсли;
	ОформитьТЧНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОбработатьБезПодгатовкиНаСервере(ПараметрыНастройки)
	ПутьВременныеКаталоги = ОбработатьБезПодгатовкиОбщий(Объект.ТЧ, ПараметрыНастройки, КаталогДокументов);
	ОбходТХТНаСервере(ПутьВременныеКаталоги, ПараметрыНастройки);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьБезПодгатовкиНаКлиенте(ПараметрыНастройки)
	ПутьВременныеКаталоги = ОбработатьБезПодгатовкиОбщий(Объект.ТЧ, ПараметрыНастройки, КаталогДокументов);
	ОбходТХТНаКлиенте(ПутьВременныеКаталоги, ПараметрыНастройки);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОбработатьБезПодгатовкиОбщий(ТаблицаТЧ, ПараметрыНастройки, КаталогДокументов)

	ПутьВременныеКаталоги = ПутиВременныхКаталогов(
		ПараметрыНастройки["КаталогДокументовПоУмолчанию"],
		КаталогДокументов
	);
	
	Файл = Новый Файл(ПутьВременныеКаталоги["TXT"]);
	Если Не Файл.Существует()
		Или Не Файл.ЭтоКаталог() Тогда
	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Нет каталога с текстовыми документами";
		Сообщение.Сообщить();
		
		Возврат Неопределено;
	
	КонецЕсли;
	
	Если ТаблицаТЧ.Количество() = 0 Тогда
	
		Файл = Новый Файл(ПутьВременныеКаталоги["КаталогДокументов"]);
		Если Не Файл.Существует()
			Или Не Файл.ЭтоКаталог() Тогда
		
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Нет каталога для обработки";
			Сообщение.Сообщить();
			
			Возврат Неопределено;
		
		КонецЕсли;
		
		ЗаполнитьТЧНачальнымиФайлами(ТаблицаТЧ, Файл, ПараметрыНастройки["ВключатьВложенныеКаталоги"]);
	
	КонецЕсли;
	
	Возврат ПутьВременныеКаталоги;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьТЧНачальнымиФайлами(ТаблицаТЧ, Источник, ВключатьВложенныеКаталоги)

	НайденыеФайлы = НайтиФайлы(Источник.ПолноеИмя, "*", ВключатьВложенныеКаталоги);
	
	Для каждого ТекущийФайл Из НайденыеФайлы Цикл
	
		Если ТекущийФайл.ЭтоКаталог() Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		ЗаполнитьСтрокуТаблицы(ТекущийФайл, ТаблицаТЧ);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПутиВременныхКаталогов(КаталогОбработки, КаталогИсточник)

	Каталоги = ПарсингДокументовОбщийКлиентСервер
		.КаталогиДляПарсинга(КаталогОбработки, КаталогИсточник);
		
	ВременныеКаталоги = Новый Соответствие;
	ВременныеКаталоги.Вставить("КаталогДокументов", Каталоги["Начальный"]);
	ВременныеКаталоги.Вставить("Cmd", Каталоги["Исполняемый"]);
	ВременныеКаталоги.Вставить("WordToPDF", Каталоги["PDF"]);
	ВременныеКаталоги.Вставить("jpeg", Каталоги["Изображения"]);
	ВременныеКаталоги.Вставить("TXT", Каталоги["Текст"]);
	ВременныеКаталоги.Вставить("TempJpeg", Каталоги["МиниИзображения"]);
	Возврат ВременныеКаталоги;
		
	//ПутьCmd = КаталогДокументов + "\Cmd\";	
	//ПутьWordToPDF = КаталогДокументов + "\WordToPDF\";		
	//Путьjpeg = КаталогДокументов + "\jpeg\";
	//КлиентПутьjpeg = Путьjpeg;		
	//ПутьTXT = КаталогДокументов + "\TXT\";
	//ПутьTempJpeg = КаталогДокументов + "\TempJpeg\";
	//
	//ВременныеКаталоги = Новый Соответствие;
	//ВременныеКаталоги.Вставить("КаталогДокументов",КаталогДокументов);
	//ВременныеКаталоги.Вставить("Cmd",ПутьCmd);
	//ВременныеКаталоги.Вставить("WordToPDF",ПутьWordToPDF);
	//ВременныеКаталоги.Вставить("jpeg",Путьjpeg);
	//ВременныеКаталоги.Вставить("TXT",ПутьTXT);
	//ВременныеКаталоги.Вставить("TempJpeg",ПутьTempJpeg);
	//Возврат ВременныеКаталоги;	
КонецФункции

#КонецОбласти

#Область СлужебныеНастройка

&НаКлиенте
Функция ПолучитьВсеНастройки(ВыбраннаяНастройка)

	Если Не ЗначениеЗаполнено(ВыбраннаяНастройка) Тогда
	
		Возврат Неопределено;
	
	КонецЕсли;
	
	Возврат ПолучитьВсеНастройкиНаСервере(ВыбраннаяНастройка);

КонецФункции // ()

&НаСервереБезКонтекста
Функция ПолучитьВсеНастройкиНаСервере(Настройка)
	РеквизитыНастройки = РеквизитыНастройки(Настройка);
	Настройки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Настройка,
		РеквизитыНастройки
	);
	
	Возврат Настройки;
КонецФункции

&НаСервереБезКонтекста
Функция РеквизитыНастройки(Настройка)
	
	РеквизитыНастройки = Новый Массив();
	Для Каждого Реквизит Из Настройка.Метаданные().Реквизиты Цикл
		РеквизитыНастройки.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	Возврат РеквизитыНастройки;
КонецФункции

#КонецОбласти

#Область СлужебныеОбработкаТабличнойЧасти

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПервоначальныеДанные(РезультатыПодготовки, ТаблицаТЧ)

	Для каждого ДанныеФайла Из РезультатыПодготовки Цикл
	
		ЗаполнитьСтрокуТаблицы(ДанныеФайла, ТаблицаТЧ);
	
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСтрокуТаблицы(ДанныеФайла, ТаблицаТЧ)

	Запись = ТаблицаТЧ.Добавить();
	Запись.ОригиналСкана = ДанныеФайла.ПолноеИмя;
	Запись.СокрОригиналСкана = ДанныеФайла.Имя;
	Запись.Наименование = ДанныеФайла.ИмяБезРасширения;
	Запись.Расширение = ДанныеФайла.Расширение;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеКПереработке

&НаКлиенте
Функция ПарсингРазрешен()

	Возврат УправлениеДоступами.ЕстьДоступНаПарсинг();

КонецФункции

&НаКлиенте
Процедура СообщитьОбЗапретеНаПарсинг()

	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Нужны права на парсинг!";
	Сообщение.Сообщить();

КонецПроцедуры

&НаКлиенте
Процедура ОбходТХТНаОбщий(КаталогиПарсинга, НастройкиПарсинга, ВыполнятьНаСервере)

	Если ВыполнятьНаСервере Тогда
	
		ОбходТХТНаСервереПредварительный(КаталогиПарсинга, НастройкиПарсинга);
	
	Иначе
	
		ОбходТХТНаКлиентеПредварительный(КаталогиПарсинга, НастройкиПарсинга);
	
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВременныйСТХТ(КаталогиПарсинга)

	ВременныеКаталоги = Новый Соответствие;
	
	Каталог = Новый Файл(
		КаталогиПарсинга["Корень"] + ПолучитьРазделительПути() + КаталогиПарсинга["Текст"]
	);
	
	Если Не (Каталог.Существует() И Каталог.ЭтоКаталог()) Тогда
	
		ВызватьИсключение "Нет каталога с текстовыми файлами";
	
	КонецЕсли;
	
	ВременныеКаталоги.Вставить(
		"TXT",
		Каталог.ПолноеИмя + ПолучитьРазделительПути()
	);
	
	Возврат ВременныеКаталоги;

КонецФункции // ()

&НаСервере
Функция ОбходТХТНаСервереПредварительный(КаталогиПарсинга, НастройкиПарсинга)

	ВременныеКаталоги = ВременныйСТХТ(КаталогиПарсинга);
	ОбходТХТНаСервере(ВременныеКаталоги, НастройкиПарсинга);

КонецФункции // ()

&НаКлиенте
Функция ОбходТХТНаКлиентеПредварительный(КаталогиПарсинга, НастройкиПарсинга)

	ВременныеКаталоги = ВременныйСТХТ(КаталогиПарсинга);
	ОбходТХТНаКлиенте(ВременныеКаталоги, НастройкиПарсинга);

КонецФункции // ()

&НаСервере
Процедура ОбходТХТНаСервере(ВременныеКаталоги, сНастройка)
	ПутьTXT = ВременныеКаталоги.Получить("TXT");
	ПутьКаталогДокументов = ВременныеКаталоги.Получить("КаталогДокументов");

	ПДДлинаСловаВСимволах = сНастройка.ДлинаСловаВСимволах;
	//ВложенныеКаталоги = сНастройка["ВключатьВложенныеКаталоги"];
	Для Каждого СтрокаТЧ Из Объект.ТЧ Цикл	
		Если Не СтрокаТЧ.Ошибка Тогда
			Наименование = СтрокаТЧ.Наименование;
			ПутьФайла = СтрЗаменить(СтрокаТЧ.ОригиналСкана, ПутьКаталогДокументов, ПутьTXT);
			Файл = Новый Файл(ПутьФайла);
			НесколькоСтраницСкана = НайтиФайлы(Файл.Путь, Наименование + "*");

			КоличествоСтраниц = НесколькоСтраницСкана.Количество();
			Если КоличествоСтраниц = 0 Тогда
		
				СтрокаТЧ.Ошибка = Истина;
				СтрокаТЧ.ТекстОшибки = "текстовый файл не найден";
				Если Не НастройкиПарсингаКлиентСервер.ПоддерживаемыйФормат(СтрокаТЧ.Расширение) Тогда
				
					СтрокаТЧ.ТекстОшибки = "Формат не поддерживается";
				
				КонецЕсли;
				
				Продолжить;
			
			КонецЕсли;
			Для каждого ТекущийФайл Из НесколькоСтраницСкана Цикл
			
				ТекстДок = Новый ТекстовыйДокумент;
				ТекстДок.Прочитать(ТекущийФайл.ПолноеИмя, КодировкаТекста.UTF8); 
				Текст = ТекстДок.ПолучитьТекст();
				ПарсингТХТ(Текст, ПДДлинаСловаВСимволах, СтрокаТЧ.НомерСтроки, сНастройка);
		
			КонецЦикла;

			//Если КоличествоСтраниц = 0 Тогда
			//	TXT = НайтиФайлы(ПутьTXT, "*" + Наименование + "-*", ВложенныеКаталоги);
			//	Если TXT.Количество() = 0 Тогда
			//	
			//		Продолжить;
			//	
			//	КонецЕсли;
			//	
			//	ФайлTXT = TXT[0];
			//	Если ФайлTXT.Существует() Тогда
			//		ТекстДок = Новый ТекстовыйДокумент;
			//		ТекстДок.Прочитать(ФайлTXT.ПолноеИмя, КодировкаТекста.UTF8); 
			//		Текст = ТекстДок.ПолучитьТекст();
			//		ПарсингТХТ(Текст, ПДДлинаСловаВСимволах, СтрокаТЧ.НомерСтроки, сНастройка);
			//	Иначе         
			//		СтрокаТЧ.Ошибка = Истина;
			//		СтрокаТЧ.ТекстОшибки = "текстовый файл не найден";	
			//	КонецЕсли;
			//Иначе 
			//	КоличествоСтраниц = КоличествоСтраниц - 1;
			//	ТекСтраница = 0;
			//	Пока ТекСтраница <= КоличествоСтраниц Цикл  
			//		Наименование = СтрокаТЧ.Наименование + "-" + ТекСтраница;
			//		TXT = ПутьTXT + Наименование + ".txt"; 
			//		ФайлTXT = Новый Файл(TXT);
			//		Если ФайлTXT.Существует() Тогда
			//			ТекстДок = Новый ТекстовыйДокумент;
			//			ТекстДок.Прочитать(TXT, КодировкаТекста.UTF8); 
			//			Текст = ТекстДок.ПолучитьТекст();
			//			ПарсингТХТ(Текст, ПДДлинаСловаВСимволах, СтрокаТЧ.НомерСтроки, сНастройка);
			//			ТекСтраница = ТекСтраница + 1;
			//		Иначе         
			//			СтрокаТЧ.Ошибка = Истина;
			//			СтрокаТЧ.ТекстОшибки = "текстовый файл не найден";	
			//		КонецЕсли;
			//	КонецЦикла;
			//КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбходТХТ()

&НаКлиенте
Процедура ОбходТХТНаКлиенте(ВременныеКаталоги, сНастройка)
	ПутьTXT = ВременныеКаталоги.Получить("TXT");
	ПутьКаталогДокументов = ВременныеКаталоги.Получить("КаталогДокументов");

	ПДДлинаСловаВСимволах = сНастройка.ДлинаСловаВСимволах;
	ВложенныеКаталоги = сНастройка["ВключатьВложенныеКаталоги"];
	Для Каждого СтрокаТЧ Из Объект.ТЧ Цикл	
		Если Не СтрокаТЧ.Ошибка Тогда
			Наименование = СтрокаТЧ.Наименование;
			ПутьФайла = СтрЗаменить(СтрокаТЧ.ОригиналСкана, ПутьКаталогДокументов, ПутьTXT);
			Файл = Новый Файл(ПутьФайла);
			НесколькоСтраницСкана = НайтиФайлы(Файл.Путь, Наименование + "*");

			КоличествоСтраниц = НесколькоСтраницСкана.Количество();
			Если КоличествоСтраниц = 0 Тогда
		
				СтрокаТЧ.Ошибка = Истина;
				СтрокаТЧ.ТекстОшибки = "текстовый файл не найден";
				Если Не НастройкиПарсингаКлиентСервер.ПоддерживаемыйФормат(СтрокаТЧ.Расширение) Тогда
				
					СтрокаТЧ.ТекстОшибки = "Формат не поддерживается";
				
				КонецЕсли;
				
				Продолжить;
			
			КонецЕсли;
			Для каждого ТекущийФайл Из НесколькоСтраницСкана Цикл
			
				ТекстДок = Новый ТекстовыйДокумент;
				ТекстДок.Прочитать(ТекущийФайл.ПолноеИмя, КодировкаТекста.UTF8); 
				Текст = ТекстДок.ПолучитьТекст();
				ПарсингТХТ(Текст, ПДДлинаСловаВСимволах, СтрокаТЧ.НомерСтроки, сНастройка);
		
			КонецЦикла;
			
			//Наименование = СтрокаТЧ.Наименование;
			//НесколькоСтраницСкана = НайтиФайлы(ПутьTXT, "*" + Наименование + "-*");
			//НКолВо = НесколькоСтраницСкана.Количество();
			//Если НКолВо = 0 Тогда
			//	TXT = ПутьTXT + Наименование + ".txt"; 
			//	ФайлTXT = Новый Файл(TXT);
			//	Если ФайлTXT.Существует() Тогда
			//		ТекстДок = Новый ТекстовыйДокумент;
			//		ТекстДок.Прочитать(TXT, КодировкаТекста.UTF8); 
			//		Текст = ТекстДок.ПолучитьТекст();
			//		ПарсингТХТ(Текст, ПДДлинаСловаВСимволах, СтрокаТЧ.НомерСтроки, сНастройка);
			//	Иначе         
			//		СтрокаТЧ.Ошибка = Истина;
			//		СтрокаТЧ.ТекстОшибки = "текстовый файл не найден";	
			//	КонецЕсли;
			//Иначе 
			//	НКолВо = НКолВо - 1;
			//	ТекСтраница = 0;
			//	Пока ТекСтраница <= НКолВо Цикл  
			//		Наименование = СтрокаТЧ.Наименование + "-" + ТекСтраница;
			//		TXT = ПутьTXT + Наименование + ".txt"; 
			//		ФайлTXT = Новый Файл(TXT);
			//		Если ФайлTXT.Существует() Тогда
			//			ТекстДок = Новый ТекстовыйДокумент;
			//			ТекстДок.Прочитать(TXT, КодировкаТекста.UTF8); 
			//			Текст = ТекстДок.ПолучитьТекст();
			//			ПарсингТХТ(Текст, ПДДлинаСловаВСимволах, СтрокаТЧ.НомерСтроки, сНастройка);
			//			ТекСтраница = ТекСтраница + 1;
			//		Иначе         
			//			СтрокаТЧ.Ошибка = Истина;
			//			СтрокаТЧ.ТекстОшибки = "текстовый файл не найден";	
			//		КонецЕсли;
			//	КонецЦикла;
			//КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбходТХТ()

&НаСервере
Функция ПарсингТХТ(Текст, ПДДлинаСловаВСимволах, НомерСтроки, сНастройка)
	СтрокаТЧ = Объект.ТЧ[НомерСтроки-1];
	ТЗПадежиМесяцов = ПадежиМесяцов();
	Текст = УбратьЛишниеСимволы(Текст, сНастройка);
	Если Найти(Текст,"ИСПОЛНИТЕЛЬНЫЙ ЛИСТ") > 0 ИЛИ Найти(Текст,"СУДЕБНЫЙ ПРИКАЗ") > 0 Тогда
		СтрокаТЧ.ТипФайла = Справочники.ТипыПрикрепляемыхФайлов.ИсполнительныйДокумент;	
	Иначе
		СтрокаТЧ.ТипФайла = сНастройка.ТипыПрикрепляемыхФайлов;
	КонецЕсли;
	мСлова = СтрРазделить(Текст, " ", Ложь);
	
	ДанныеПоиска = Обработки.ПарсингДокументов.ПолучитьДанныеПоиска(
		мСлова,
		ТЗПадежиМесяцов,
		ПДДлинаСловаВСимволах,
		сНастройка.ЗаглавныеБуквыЦифры
	);
	мСловаПоиска = ДанныеПоиска["Слова"];
	мДатыПоиска = ДанныеПоиска["Даты"];
	
	Если сНастройка.Контрагенты Тогда
		Контрагент = ПоискКА(мСловаПоиска, мДатыПоиска, сНастройка);	
		Если ЗначениеЗаполнено(Контрагент) Тогда
			СтрокаТЧ.Контрагент = Контрагент;
			СтрокаТЧ.ОтметкаКА = Истина;		
		КонецЕсли;
		
		Если сНастройка.ИсполнительныеДокументы И ЗначениеЗаполнено(Контрагент) Тогда
			ИсполнительныйДокумент = ПоискИД(Контрагент, мСловаПоиска, мДатыПоиска, сНастройка);
			Если ЗначениеЗаполнено(ИсполнительныйДокумент) Тогда
				СтрокаТЧ.ИсполнительныйДокумент = ИсполнительныйДокумент;
				СтрокаТЧ.ОтметкаИД = Истина;		
			КонецЕсли;
		КонецЕсли;
		
		Если сНастройка.ИсполнительноеПроизводство И ЗначениеЗаполнено(Контрагент) Тогда
			ИсполнительноеПроизводство = ПоискИП(Контрагент, мСловаПоиска, мДатыПоиска, сНастройка);
			Если ЗначениеЗаполнено(ИсполнительноеПроизводство) Тогда
				СтрокаТЧ.ИсполнительноеПроизводство = ИсполнительноеПроизводство;
				СтрокаТЧ.ОтметкаИП = Истина;		
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	Если сНастройка.ДолговыеОбязательства Тогда
		ДолговоеОбязательство = ПоискДО(мСловаПоиска, мДатыПоиска, СтрокаТЧ.Контрагент, сНастройка); 
		Если ЗначениеЗаполнено(ДолговоеОбязательство) Тогда
			СтрокаТЧ.ДолговоеОбязательство = ДолговоеОбязательство;
			СтрокаТЧ.ОтметкаДО = Истина;		
		КонецЕсли;
	КонецЕсли;
	
	ИсключитьКонтрагент = сНастройка.ИсключитьКонтрагент;
	Если ИсключитьКонтрагент И СтрокаТЧ.ОтметкаДО
		ИЛИ ИсключитьКонтрагент И СтрокаТЧ.ОтметкаИП 
		ИЛИ ИсключитьКонтрагент И СтрокаТЧ.ОтметкаИД Тогда
		СтрокаТЧ.ОтметкаКА = Ложь;	 
	КонецЕсли;
	
	ИсключитьДО = сНастройка.ИсключитьДО;
	Если ИсключитьДО И СтрокаТЧ.ОтметкаКА
		ИЛИ ИсключитьДО И СтрокаТЧ.ОтметкаИП 
		ИЛИ ИсключитьДО И СтрокаТЧ.ОтметкаИД Тогда
		СтрокаТЧ.ОтметкаДО = Ложь;	 
	КонецЕсли;
	
	
КонецФункции // ПарсингТХТ()

&НаСервере
Функция ПадежиМесяцов()

	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Месяц");
	ТЗ.Колонки.Добавить("Номер");
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "январь";
	нСтр.Номер = "01";  
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "января";
	нСтр.Номер = "01";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "февраль";
	нСтр.Номер = "02";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "февраля";
	нСтр.Номер = "02";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "март";
	нСтр.Номер = "03";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "марта";
	нСтр.Номер = "03";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "апрель";
	нСтр.Номер = "04";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "апреля";
	нСтр.Номер = "04";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "май";
	нСтр.Номер = "05";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "мая";
	нСтр.Номер = "05";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "июнь";
	нСтр.Номер = "06";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "июня";
	нСтр.Номер = "06";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "июль";
	нСтр.Номер = "07";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "июля";
	нСтр.Номер = "07";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "август";
	нСтр.Номер = "08";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "августа";
	нСтр.Номер = "08";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "сентябрь";
	нСтр.Номер = "09";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "сентября";
	нСтр.Номер = "09";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "октябрь";
	нСтр.Номер = "10";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "октября";
	нСтр.Номер = "10";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "ноябрь";
	нСтр.Номер = "11";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "ноября";
	нСтр.Номер = "11";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "декабрь";
	нСтр.Номер = "12";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "декабря";
	нСтр.Номер = "12";

	Возврат ТЗ;
КонецФункции // ПадежиМесяцов()

&НаСервере
Функция УбратьЛишниеСимволы(Строка, сНастройка)
	
	
	Возврат ФункцииРазбораТекста.УбратьЛишниеСимволы(
		Строка,
		сНастройка.ЧитаемыеСимволы,
		сНастройка.НомерМожетСодержатьТочку
	);
	
	//зСтрока = Строка;
	//зСтрока = СтрЗаменить(зСтрока,Символы.ПС," ");
	//зСтрока = СтрЗаменить(зСтрока,"ё","е");
	//НомерМожетСодержатьТочку = сНастройка.НомерМожетСодержатьТочку;
	//НоваяСтрока = "";
	//ЧитаемыеСимволы = сНастройка.ЧитаемыеСимволы;
	//Для Сч = 1 по СтрДлина(зСтрока) Цикл
	//	Символ = Сред(зСтрока, Сч, 1);
	//	Если Найти(ЧитаемыеСимволы, Символ) > 0 Тогда
	//		НоваяСтрока = НоваяСтрока + Символ;
	//	ИначеЕсли Сч > 1 И Символ = "." И СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Сред(зСтрока, Сч - 1, 1)) <> Неопределено Тогда // если точка и предущий символ число , то предпологаем что это дата через точку
	//		НоваяСтрока = НоваяСтрока + Символ;	
	//	ИначеЕсли НомерМожетСодержатьТочку И Сч < СтрДлина(зСтрока) И Символ = "." И Сред(зСтрока, Сч + 1, 1) = " " Тогда //если точка и далее пробел, то предпологаем это конец строки 
	//		Продолжить;	
	//	ИначеЕсли НомерМожетСодержатьТочку И Символ = "." Тогда
	//		НоваяСтрока = НоваяСтрока + Символ;	
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Функция ПоискДО(мСлова, мДаты, Контрагент = Неопределено, сНастройка)
	
	Если ЗначениеЗаполнено(сНастройка.ДОСодержит) Тогда
		мСловаПоиска = Новый Массив;
		Счетчик = мСлова.Количество() - 1;     
		Пока Счетчик >= 0 Цикл
			Если Найти(мСлова[Счетчик],сНастройка.ДОСодержит) Тогда
				мСловаПоиска.Добавить(мСлова[Счетчик]);	
			КонецЕсли;
			Счетчик = Счетчик - 1;
		КонецЦикла;	 
	Иначе
		мСловаПоиска = мСлова;	
	КонецЕсли;	
	
	ДопРеквДата = сНастройка.ДОДата;
	ДОДатаДМ = сНастройка.ДОДатаДМ;
	ДООдин = сНастройка.ДООдин;
	ДОЧерезКонтрагента = сНастройка.ДОЧерезКонтрагента;
	
	Если ДОЧерезКонтрагента И ЗначениеЗаполнено(Контрагент) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДолговыеОбязательства.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
		|ГДЕ
		|	ДолговыеОбязательства.Должник = &Контрагент
		|	И ДолговыеОбязательства.Наименование В(&Наименование)";
		
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("Наименование", мСловаПоиска);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка;	
		КонецЦикла;		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДолговыеОбязательства.Ссылка КАК Ссылка,
	|	ДоговорМикрозайма.ДатаДоговора КАК ДатаДоговора
	|ИЗ
	|	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорМикрозайма КАК ДоговорМикрозайма
	|		ПО ДолговыеОбязательства.Ссылка = ДоговорМикрозайма.Займ
	|ГДЕ
	|	ДолговыеОбязательства.Наименование В(&Наименование)";
	
	Запрос.УстановитьПараметр("Наименование", мСловаПоиска);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДО = Выборка.Ссылка;
		ДатаДоговора = Выборка.ДатаДоговора;
				
		Если ЗначениеЗаполнено(ДопРеквДата) Тогда	
			ДатаДО = ОбъектыСервер.ПолучитьЗначениеСвойства(ДО,ДопРеквДата.Код);
			Для Каждого стрДата Из мДаты Цикл
				Если стрДата = ДатаДО Тогда
					Возврат ДО;		
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
				
		Если ДОДатаДМ Тогда	
			Для Каждого стрДата Из мДаты Цикл
				Если стрДата = ДатаДоговора Тогда
					Возврат ДО;		
				КонецЕсли;
			КонецЦикла;;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДопРеквДата) И НЕ ДОДатаДМ Тогда
			Возврат ДО;	
		КонецЕсли;
		
		Если ДООдин И Выборка.Количество() = 1 Тогда
			Возврат ДО;	
		КонецЕсли;

	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

&НаСервере
Функция ПоискКА(мСлова, мДаты, сНастройка)
	ДопРеквДата = сНастройка.КАДатаРождения;
	ДопИннСнилс = сНастройка.КаИннСнилс;

	Условия = Новый Структура;
	
	Условия.Вставить("мСлова", мСлова);
	Условия.Вставить("мДаты", мДаты);
	Условия.Вставить("КАОдин", сНастройка.КАОдин);
	Условия.Вставить("ДопРеквДата", ДопРеквДата);
	Условия.Вставить("ДопИннСнилс", ДопИннСнилс);
	
	МинДлинаФамилии = сНастройка.МинимальнаяДлинаФамилии;
	Если МинДлинаФамилии = 0 Тогда
	
		МинДлинаФамилии = Справочники.НастройкиПарсингаДокументов.МинимальнаяДлинаФамилии();
	
	КонецЕсли;
	
	Для Индекс = 0 по мСлова.ВГраница()-2 Цикл
		
		//фамилия, ИО 1 символ
		Если СтрДлина(мСлова[Индекс]) >= МинДлинаФамилии И СтрДлина(мСлова[Индекс+1]) = 1 И СтрДлина(мСлова[Индекс+2]) = 1 Тогда
		
			ЭтоПолноеФИО = Ложь;
			ФИО = мСлова[Индекс];
			Инициалы = мСлова[Индекс+1] + " " + мСлова[Индекс+2];
			
			Условия.Вставить("ЭтоПолноеФИО", ЭтоПолноеФИО);
			
			Контрагент = РегистрыСведений.СклонениеФИО.ПоискКонтрагентаПоФИО(ФИО, Инициалы, Условия);
			Если ЗначениеЗаполнено(Контрагент) Тогда
			
				Возврат Контрагент;
			
			КонецЕсли;
			
		КонецЕсли;
		
		//фамилия, ИО 2 символа слитно
		Если СтрДлина(мСлова[Индекс]) >= МинДлинаФамилии И СтрДлина(мСлова[Индекс + 1]) = 2 Тогда
		
			ЭтоПолноеФИО = Ложь;
			ФИО = мСлова[Индекс];
			
			ИО = мСлова[Индекс + 1];
			Инициалы = Сред(ИО, 1, 1) + " " + Сред(ИО, 2, 1);
			
			Условия.Вставить("ЭтоПолноеФИО", ЭтоПолноеФИО);
			
			Контрагент = РегистрыСведений.СклонениеФИО.ПоискКонтрагентаПоФИО(ФИО, Инициалы, Условия);
			Если ЗначениеЗаполнено(Контрагент) Тогда
			
				Возврат Контрагент;
			
			КонецЕсли;
			
		КонецЕсли;
		
		//фамилия
		Если СтрДлина(мСлова[Индекс]) >= МинДлинаФамилии Тогда
			
			ЭтоПолноеФИО = Истина;
			ФИО = мСлова[Индекс] + " " + мСлова[Индекс+1] + " " + мСлова[Индекс+2];
			
			Условия.Вставить("ЭтоПолноеФИО", ЭтоПолноеФИО);
			
			Контрагент = РегистрыСведений.СклонениеФИО.ПоискКонтрагентаПоФИО(ФИО, Инициалы, Условия);
			Если ЗначениеЗаполнено(Контрагент) Тогда
			
				Возврат Контрагент;
			
			КонецЕсли;

		КонецЕсли;
		

		

		
		//Запрос = Новый Запрос;
		//Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	СклонениеФИО.Контрагент КАК Контрагент
		//|ИЗ
		//|	РегистрСведений.СклонениеФИО КАК СклонениеФИО
		//|ГДЕ
		//|	ВЫБОР
		//|			КОГДА &ЭтоПолноеФИО = ИСТИНА
		//|				ТОГДА СклонениеФИО.Именительный = &ФИО
		//|						ИЛИ СклонениеФИО.Родительный = &ФИО
		//|						ИЛИ СклонениеФИО.Творительный = &ФИО
		//|						ИЛИ СклонениеФИО.Предолжный = &ФИО
		//|						ИЛИ СклонениеФИО.Дательный = &ФИО
		//|			ИНАЧЕ СклонениеФИО.Именительный ПОДОБНО ""%"" + &ФИО + ""%""
		//|						И СклонениеФИО.Инициалы = &Инициалы
		//|					ИЛИ СклонениеФИО.Родительный ПОДОБНО ""%"" + &ФИО + ""%""
		//|						И СклонениеФИО.Инициалы = &Инициалы
		//|					ИЛИ СклонениеФИО.Творительный ПОДОБНО ""%"" + &ФИО + ""%""
		//|						И СклонениеФИО.Инициалы = &Инициалы
		//|					ИЛИ СклонениеФИО.Предолжный ПОДОБНО ""%"" + &ФИО + ""%""
		//|						И СклонениеФИО.Инициалы = &Инициалы
		//|					ИЛИ СклонениеФИО.Дательный ПОДОБНО ""%"" + &ФИО + ""%""
		//|						И СклонениеФИО.Инициалы = &Инициалы
		//|		КОНЕЦ";
		//
		//Запрос.УстановитьПараметр("ЭтоПолноеФИО", ЭтоПолноеФИО);
		//Запрос.УстановитьПараметр("ФИО", ФИО);
		//Запрос.УстановитьПараметр("Инициалы", Инициалы);
		//
		//Выборка = Запрос.Выполнить().Выбрать();
		//
		//Пока Выборка.Следующий() Цикл
		//	Контрагент = Выборка.Контрагент;
		//	Если сНастройка.КАОдин И Выборка.Количество() = 1 Тогда
		//		Возврат Контрагент;	
		//	КонецЕсли;
		//	
		//	Если ЗначениеЗаполнено(ДопРеквДата) Тогда
		//		ДатаРождения = ОбъектыСервер.ПолучитьЗначениеСвойства(Контрагент,ДопРеквДата.Код);	
		//		Для Каждого Стр Из мДаты Цикл
		//			Если ДатаРождения = Стр Тогда
		//				Возврат Контрагент;	
		//			КонецЕсли;
		//		КонецЦикла;
		//	КонецЕсли;
		//	
		//	Если ЗначениеЗаполнено(ДопИннСнилс) Тогда
		//		ИннСнилс = ОбъектыСервер.ПолучитьЗначениеСвойства(Контрагент,ДопИннСнилс.Код);	
		//		Для Каждого Стр Из мСлова Цикл
		//			Если ИннСнилс = Стр Тогда
		//				Возврат Контрагент;	
		//			КонецЕсли;
		//		КонецЦикла;
		//	КонецЕсли;
		//	
		//	Если НЕ ЗначениеЗаполнено(ДопРеквДата) И НЕ ЗначениеЗаполнено(ДопИннСнилс) Тогда
		//		Возврат Контрагент;			
		//	КонецЕсли;
		//КонецЦикла;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

&НаСервере
Функция ПоискИД(Контрагент, мСлова, мДаты, сНастройка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсполнительныеДокументы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ИсполнительныеДокументы КАК ИсполнительныеДокументы
		|ГДЕ
		|	ИсполнительныеДокументы.Должник = &Контрагент
		|	И ИсполнительныеДокументы.ДатаИД В(&ДатаИД)
		|	И ИсполнительныеДокументы.НомерДела В(&НомерДела)";
	
	Запрос.УстановитьПараметр("ДатаИД", мДаты);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("НомерДела", мСлова);
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СудебноеДелоОтветчики.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СудебноеДело.Ответчики КАК СудебноеДелоОтветчики
		|ГДЕ
		|	СудебноеДелоОтветчики.Значение = &Контрагент
		|	И СудебноеДелоОтветчики.Ссылка.НомерДела В(&НомерДела)
		|	И СудебноеДелоОтветчики.Ссылка.ДатаРешения В(&ДатаРешения)";
	
	Запрос.УстановитьПараметр("ДатаРешения", мДаты);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("НомерДела", мСлова);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции // ПоискИД()

&НаСервере
Функция ПоискИП(Контрагент, мСлова, мДаты, сНастройка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ФССП_ИсполнительноеПроизводство.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФССП_ИсполнительноеПроизводство КАК ФССП_ИсполнительноеПроизводство
		|ГДЕ
		|	ФССП_ИсполнительноеПроизводство.Наименование В(&Наименование)
		|	И ФССП_ИсполнительноеПроизводство.Владелец = &Контрагент
		|	И ФССП_ИсполнительноеПроизводство.ДатаВозбуждения В(&ДатаВозбуждения)";
	
	Запрос.УстановитьПараметр("ДатаВозбуждения", мДаты);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Наименование", мСлова);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции // ПоискИП()

&НаСервере
Процедура ОформитьТЧНаСервере()

	РеквизитыОформления = Новый ТаблицаЗначений;
	РеквизитыОформления.Колонки.Добавить("ЛевоеЗначение");
	РеквизитыОформления.Колонки.Добавить("ПравоеЗначение");
	
	Если Элементы.ТЧКонтрагент.Видимость Тогда
		Стр = РеквизитыОформления.Добавить();
		Стр.ЛевоеЗначение = Элементы.ТЧКонтрагент.ПутьКДанным;
		Стр.ПравоеЗначение = Справочники.Контрагенты.ПустаяСсылка();	
	КонецЕсли;
	
	Если Элементы.ТЧДолговоеОбязательство.Видимость Тогда
		Стр = РеквизитыОформления.Добавить();
		Стр.ЛевоеЗначение = Элементы.ТЧКонтрагент.ПутьКДанным;
		Стр.ПравоеЗначение = Справочники.ДолговыеОбязательства.ПустаяСсылка();	
	КонецЕсли;
	
	Если Элементы.ТЧИсполнительноеПроизводство.Видимость Тогда
		Стр = РеквизитыОформления.Добавить();
		Стр.ЛевоеЗначение = Элементы.ТЧКонтрагент.ПутьКДанным;
		Стр.ПравоеЗначение = Справочники.ФССП_ИсполнительноеПроизводство.ПустаяСсылка();		
	КонецЕсли;
	
	Если Элементы.ТЧИсполнительныйДокументу.Видимость Тогда
		Стр = РеквизитыОформления.Добавить();
		Стр.ЛевоеЗначение = Элементы.ТЧКонтрагент.ПутьКДанным;
		Стр.ПравоеЗначение = Справочники.ИсполнительныеДокументы.ПустаяСсылка();	
	КонецЕсли;
	
	Для Каждого рОформления Из РеквизитыОформления Цикл
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Использование = Истина;
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",  WebЦвета.БледноКрасноФиолетовый);		
		ГруппаУсловия = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаУсловия.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ЭлементУсловия = ГруппаУсловия.Элементы.Добавить(     Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементУсловия.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(рОформления.ЛевоеЗначение);
		ЭлементУсловия.ПравоеЗначение = рОформления.ПравоеЗначение; 
		ЭлементУсловия.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементУсловия.Использование  = Истина;		
		ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТЧ");
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПроверкаНаДублиНаСервере()
	ТЗДубли = Новый ТаблицаЗначений;
	ТЗДубли.Колонки.Добавить("ИмяБезРасширения",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024)));
	ТЗДубли.Колонки.Добавить("ПолноеИмя",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024)));
	Файлы = НайтиФайлы(КаталогДокументов,"*.*",Ложь);
	Для Каждого Файл Из Файлы Цикл
		СтрокаТЗ = ТЗДубли.Добавить();
		ИмяБезРасширения = СтрЗаменить(Файл.ИмяБезРасширения," ","");
		СтрокаТЗ.ИмяБезРасширения = СтрЗаменить(ИмяБезРасширения,"-","");	
		СтрокаТЗ.ПолноеИмя = Файл.ПолноеИмя;	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗДубли.ИмяБезРасширения КАК ИмяБезРасширения,
	|	ТЗДубли.ПолноеИмя КАК ПолноеИмя
	|ПОМЕСТИТЬ ВТ_ТЗДубли
	|ИЗ
	|	&ТЗДубли КАК ТЗДубли
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЗДубли.ИмяБезРасширения КАК ИмяБезРасширения,
	|	КОЛИЧЕСТВО(ВТ_ТЗДубли.ИмяБезРасширения) КАК ИмяБезРасширения1,
	|	ВТ_ТЗДубли1.ПолноеИмя КАК ПолноеИмя
	|ИЗ
	|	ВТ_ТЗДубли КАК ВТ_ТЗДубли
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТЗДубли КАК ВТ_ТЗДубли1
	|		ПО ВТ_ТЗДубли.ИмяБезРасширения = ВТ_ТЗДубли1.ИмяБезРасширения
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТЗДубли.ИмяБезРасширения,
	|	ВТ_ТЗДубли1.ПолноеИмя
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ВТ_ТЗДубли.ИмяБезРасширения) > 1";
	
	Запрос.УстановитьПараметр("ТЗДубли",ТЗДубли);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = Объект.ТЧ.Добавить();
		СтрокаТЧ.ОригиналСкана = Выборка.ПолноеИмя;
		СтрокаТЧ.Ошибка = Истина;
	КонецЦикла;
	
	Если Объект.ТЧ.Количество() = 0 Тогда
		Возврат Истина;
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Присутсвуют дубли файлов по имени без учета расширения файла или дубли файлов без учета пробелов в имени. Необходимо исправить имена файлов выделенные красным.";
		Сообщение.Сообщить();
		Возврат Ложь
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция МассивРасширенийWord()

	мДокТипов = Новый Массив;
	мДокТипов.Добавить(".doc");
	мДокТипов.Добавить(".docx");
	мДокТипов.Добавить(".odt");
	мДокТипов.Добавить(".rtf");
	Возврат мДокТипов;

КонецФункции


&НаКлиенте
Процедура КаталогСкановНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Если Диалог.Выбрать() Тогда
		КаталогДокументов = Диалог.Каталог;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьВПрекрепляемыеФайлыНаСервере()
	ТипФайла = ТипПрикрепляемогоФайла();
	ДетализацияПоИд = ДетализацияПоИд();
	ХранитьПрикрепляемыеФайлыНаСервере = ХранитьПрикрепляемыеФайлыНаСервере();
	Каталог =  КаталогХраненияПрикрепляемыхФайловНаСервере();
	ВидыОтметки = Новый Массив;
	ВидыОтметки.Добавить("ОтметкаДО");
	ВидыОтметки.Добавить("ОтметкаКА");
	ВидыОтметки.Добавить("ОтметкаИД");
	ВидыОтметки.Добавить("ОтметкаИП");	
	Для Каждого ВидОтметки Из ВидыОтметки Цикл 
		мСтрок = Объект.ТЧ.НайтиСтроки(Новый Структура(ВидОтметки,Истина));
		Для Каждого Стр Из мСтрок Цикл
			ПрикрепитьФайлы = Документы.ПрикрепитьФайлы.СоздатьДокумент();
			ПрикрепитьФайлы.Дата = ТекущаяДатаСеанса();
			Пользователи.ЗаполнитьРеквизитыПоДаннымПользователя(ПрикрепитьФайлы);
			ПрикрепитьФайлы.Комментарий = "Автоматически Парсинг документов";
			Если ВидОтметки = "ОтметкаКА" Тогда
				ПрикрепитьФайлы.Объект = Стр.Контрагент;
			ИначеЕсли ВидОтметки = "ОтметкаДО" Тогда
				ПрикрепитьФайлы.Объект = Стр.ДолговоеОбязательство;
			ИначеЕсли ВидОтметки = "ОтметкаИП" Тогда
				Попытка
					ПрикрепитьФайлы.Объект = Стр.ИсполнительноеПроизводство.НомерИД.Владелец;
				Исключение
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "у документа " + Стр.ИсполнительноеПроизводство + " не найден ИД или Владелец ИД";
					Сообщение.Сообщить();	
				КонецПопытки;
			ИначеЕсли ВидОтметки = "ОтметкаИД" И ДетализацияПоИД Тогда	
				Если ТипЗнч(Стр.ИсполнительныйДокумент) = Тип("СправочникСсылка.ИсполнительныеДокументы") Тогда
					ПрикрепитьФайлы.Объект = Стр.ИсполнительныйДокумент;	
				ИначеЕсли ТипЗнч(Стр.ИсполнительныйДокумент) = Тип("ДокументСсылка.СудебноеДело") Тогда
					Попытка
						ПрикрепитьФайлы.Объект = Стр.ИсполнительныйДокумент.Займ;
					Исключение
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = "у документа " + Стр.ИсполнительныйДокумент + " не найден Владелец";
						Сообщение.Сообщить();		
					КонецПопытки;
				КонецЕсли;
			ИначеЕсли ВидОтметки = "ОтметкаИД" Тогда
				Если ТипЗнч(Стр.ИсполнительныйДокумент) = Тип("СправочникСсылка.ИсполнительныеДокументы") Тогда
					Попытка
						ПрикрепитьФайлы.Объект = Стр.ИсполнительныйДокумент.Владелец;	
					Исключение
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = "у документа " + Стр.ИсполнительныйДокумент + " не найден Владелец";
						Сообщение.Сообщить();		
					КонецПопытки;
				ИначеЕсли ТипЗнч(Стр.ИсполнительныйДокумент) = Тип("ДокументСсылка.СудебноеДело") Тогда
					Попытка
						ПрикрепитьФайлы.Объект = Стр.ИсполнительныйДокумент.Займ;
					Исключение
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = "у документа " + Стр.ИсполнительныйДокумент + " не найден Владелец";
						Сообщение.Сообщить();		
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			СтрПФ = ПрикрепитьФайлы.Файлы.Добавить();
			Если ХранитьПрикрепляемыеФайлыНаСервере Тогда
				Файл = Новый Файл(Стр.ОригиналСкана);
				СтрПФ.УИД = Новый УникальныйИдентификатор();
				ДвДанные = Новый ДвоичныеДанные(Стр.ОригиналСкана);
				ДвДанные.Записать(Каталог + "\" + Строка(СтрПФ.УИД) + Файл.Расширение);
				СтрПФ.Путь = Стр.ОригиналСкана;
				СтрПФ.Размер = ОкруглитьРазмерФайла(Строка(Файл.Размер()));
				СтрПФ.Загружен = Истина;
				Если ВидОтметки = "ОтметкаИД" И ЗначениеЗаполнено(Стр.ТипФайла) Тогда
					СтрПФ.ТипФайла = Стр.ТипФайла;	
				Иначе
					СтрПФ.ТипФайла = ТипФайла;
				КонецЕсли;
			Иначе
				СтрПФ.Загружен = Истина;  
				СтрПФ.Путь = Стр.ОригиналСкана;
				СтрПФ.УИД = Новый УникальныйИдентификатор();
				Если ВидОтметки = "ОтметкаИД" И ЗначениеЗаполнено(Стр.ТипФайла) Тогда
					СтрПФ.ТипФайла = Стр.ТипФайла;
				Иначе
					СтрПФ.ТипФайла = ТипФайла;
				КонецЕсли;
				Файл = Новый Файл(Стр.ОригиналСкана);
				СтрПФ.Размер = ОкруглитьРазмерФайла(Строка(Файл.Размер()));
				МассивДанных = Новый Массив;
				Данные = Новый ДвоичныеДанные(СтрПФ.Путь);
				МассивДанных.Добавить(Данные);
				ПрикрепитьФайлы.ПоместитьВХранилище(МассивДанных);	
			КонецЕсли;
			Если ЗначениеЗаполнено(ПрикрепитьФайлы.Объект) Тогда
				ПрикрепитьФайлы.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере                        
Функция ОкруглитьРазмерФайла(СтрРазмер)
	Размер = Число(СтрРазмер);
	Если Размер > 1024 Тогда
		Размер = Окр(Размер/1024, 0);
		Стр = Строка(Размер) + " Кб";
	КонецЕсли;
	Если Размер > 1024 Тогда
		Размер = Окр(Размер/1024, 1);
		Стр = Строка(Размер) + " Мб";
	КонецЕсли;	
	Возврат Стр;		
КонецФункции

&НаСервере
Процедура ДобавитьВПрекрепляемыеФайлыСКлиент(ВидОтметки,
											ИндексСтроки,
											ФайлДвДанные,
											Расширение,
											Размер,
											ТипФайла,
											ДетализацияПоИд,
											ХранитьПрикрепляемыеФайлыНаСервере,
											Каталог)
	Стр = Объект.ТЧ[ИндексСтроки];
	ПрикрепитьФайлы = Документы.ПрикрепитьФайлы.СоздатьДокумент();
	ПрикрепитьФайлы.Дата = ТекущаяДатаСеанса();
	Пользователи.ЗаполнитьРеквизитыПоДаннымПользователя(ПрикрепитьФайлы);
	ПрикрепитьФайлы.Комментарий = "Автоматически Парсинг документов";
	Если ВидОтметки = "ОтметкаКА" Тогда
		ПрикрепитьФайлы.Объект = Стр.Контрагент;
	ИначеЕсли ВидОтметки = "ОтметкаДО" Тогда
		ПрикрепитьФайлы.Объект = Стр.ДолговоеОбязательство;
	ИначеЕсли ВидОтметки = "ОтметкаИП" Тогда
		Попытка
			ПрикрепитьФайлы.Объект = Стр.ИсполнительноеПроизводство.НомерИД.Владелец;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "у документа " + Стр.ИсполнительноеПроизводство + " не найден ИД или Владелец ИД";
			Сообщение.Сообщить();	
		КонецПопытки;
	ИначеЕсли ВидОтметки = "ОтметкаИД" И ДетализацияПоИД Тогда	
		Если ТипЗнч(Стр.ИсполнительныйДокумент) = Тип("СправочникСсылка.ИсполнительныеДокументы") Тогда
			ПрикрепитьФайлы.Объект = Стр.ИсполнительныйДокумент;	
		ИначеЕсли ТипЗнч(Стр.ИсполнительныйДокумент) = Тип("ДокументСсылка.СудебноеДело") Тогда
			Попытка
				ПрикрепитьФайлы.Объект = Стр.ИсполнительныйДокумент.Займ;
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "у документа " + Стр.ИсполнительныйДокумент + " не найден Владелец";
				Сообщение.Сообщить();		
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли ВидОтметки = "ОтметкаИД" Тогда
		Если ТипЗнч(Стр.ИсполнительныйДокумент) = Тип("СправочникСсылка.ИсполнительныеДокументы") Тогда
			Попытка
				ПрикрепитьФайлы.Объект = Стр.ИсполнительныйДокумент.Владелец;	
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "у документа " + Стр.ИсполнительныйДокумент + " не найден Владелец";
				Сообщение.Сообщить();		
			КонецПопытки;
		ИначеЕсли ТипЗнч(Стр.ИсполнительныйДокумент) = Тип("ДокументСсылка.СудебноеДело") Тогда
			Попытка
				ПрикрепитьФайлы.Объект = Стр.ИсполнительныйДокумент.Займ;
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "у документа " + Стр.ИсполнительныйДокумент + " не найден Владелец";
				Сообщение.Сообщить();		
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	СтрПФ = ПрикрепитьФайлы.Файлы.Добавить();
	Если ХранитьПрикрепляемыеФайлыНаСервере Тогда
		СтрПФ.УИД = Новый УникальныйИдентификатор();
		ДвДанные = ФайлДвДанные;
		ДвДанные.Записать(Каталог + "\" + Строка(СтрПФ.УИД) + Расширение);
		СтрПФ.Путь = Стр.ОригиналСкана;
		СтрПФ.Размер = Размер;
		СтрПФ.Загружен = Истина;
		Если ВидОтметки = "ОтметкаИД" И ЗначениеЗаполнено(Стр.ТипФайла) Тогда
			СтрПФ.ТипФайла = Стр.ТипФайла;	
		Иначе
			СтрПФ.ТипФайла = ТипФайла;
		КонецЕсли;
	Иначе
		СтрПФ.Загружен = Истина;  
		СтрПФ.Путь = Стр.ОригиналСкана;
		СтрПФ.УИД = Новый УникальныйИдентификатор();
		Если ВидОтметки = "ОтметкаИД" И ЗначениеЗаполнено(Стр.ТипФайла) Тогда
			СтрПФ.ТипФайла = Стр.ТипФайла;
		Иначе
			СтрПФ.ТипФайла = ТипФайла;
		КонецЕсли;
		СтрПФ.Размер = Размер;
		МассивДанных = Новый Массив;
		Данные = ФайлДвДанные;
		МассивДанных.Добавить(Данные);
		ПрикрепитьФайлы.ПоместитьВХранилище(МассивДанных);	
	КонецЕсли;
	Если ЗначениеЗаполнено(ПрикрепитьФайлы.Объект) Тогда
		ПрикрепитьФайлы.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВПрекрепляемыеФайлы(Команда)
	ВыполнятьНа = ВыполнятьНа();
	Если ВыполнятьНа = "2" Тогда
		ТипФайла = ТипПрикрепляемогоФайла();
		ДетализацияПоИд = ДетализацияПоИд();
		ХранитьПрикрепляемыеФайлыНаСервере = ХранитьПрикрепляемыеФайлыНаСервере();
		КаталогХраненияПрикрепляемыхФайловНаСервере =  КаталогХраненияПрикрепляемыхФайловНаСервере();
		ВидыОтметки = Новый Массив;
		ВидыОтметки.Добавить("ОтметкаДО");
		ВидыОтметки.Добавить("ОтметкаКА");
		ВидыОтметки.Добавить("ОтметкаИД");
		ВидыОтметки.Добавить("ОтметкаИП");
		Для Каждого ВидОтметки Из ВидыОтметки Цикл 
			мСтрок = Объект.ТЧ.НайтиСтроки(Новый Структура(ВидОтметки,Истина));
			Для Каждого Стр Из мСтрок Цикл
				ИндексСтроки = Стр.НомерСтроки - 1;
				Файл = Новый Файл(Стр.ОригиналСкана);
				Расширение = Файл.Расширение;
				Размер = ОкруглитьРазмерФайла(Строка(Файл.Размер()));
				ФайлДвДанные = Новый ДвоичныеДанные(Стр.ОригиналСкана);
				ДобавитьВПрекрепляемыеФайлыСКлиент(ВидОтметки,ИндексСтроки,ФайлДвДанные,Расширение,Размер,
					ТипФайла,ДетализацияПоИд,ХранитьПрикрепляемыеФайлыНаСервере,КаталогХраненияПрикрепляемыхФайловНаСервере);	
			КонецЦикла;
		КонецЦикла;
	Иначе // по умолчанию всегда на сервере, даже если не заполнена настройка т.к. ранее выполнялось только на сервере
		ДобавитьВПрекрепляемыеФайлыНаСервере();
	КонецЕсли;
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Прикрепление документов завершено";
	Сообщение.Сообщить();
КонецПроцедуры

&НаСервере 
Функция ТипПрикрепляемогоФайла()

	Возврат Настройка.ТипыПрикрепляемыхФайлов;

КонецФункции // ТипПрикрепляемогоФайла()

&НаСервере
Функция ДетализацияПоИд()

	Возврат Константы.ДетализацияПоИД.Получить();

КонецФункции // ДетализацияПоИд()

&НаСервере
Функция ХранитьПрикрепляемыеФайлыНаСервере()

	Возврат Константы.ХранитьПрикрепляемыеФайлыНаСервере.Получить();

КонецФункции // ХранитьПрикрепляемыеФайлыНаСервере()

&НаСервере
Функция КаталогХраненияПрикрепляемыхФайловНаСервере()

	Возврат Константы.КаталогХраненияПрикрепляемыхФайловНаСервере.Получить();

КонецФункции // КаталогХраненияПрикрепляемыхФайловНаСервере()

&НаСервере
Функция ВыполнятьНа()

	Возврат Настройка.ВыполнятьНа;

КонецФункции // ВыполнятьНа()


&НаКлиенте
Процедура СнятьОтметки(Команда)
	СнятьПоВидуОтметки("ОтметкаДО");
	СнятьПоВидуОтметки("ОтметкаКА");
	СнятьПоВидуОтметки("ОтметкаИД");
	СнятьПоВидуОтметки("ОтметкаИП");
КонецПроцедуры

&НаКлиенте
Процедура СнятьПоВидуОтметки(ВидОтметки)
	мСтрок = Объект.ТЧ.НайтиСтроки(Новый Структура(ВидОтметки,Истина));
	Для Каждого Стр Из мСтрок Цикл
		Стр[ВидОтметки] = Ложь;		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметки(Команда)
	Для Каждого Стр Из Объект.ТЧ Цикл
		Если ЗначениеЗаполнено(Стр.ИсполнительныйДокумент) Тогда
			Стр.ОтметкаИД = Истина;
		ИначеЕсли ЗначениеЗаполнено(Стр.ИсполнительноеПроизводство) Тогда
			Стр.ОтметкаИП = Истина;
		ИначеЕсли ЗначениеЗаполнено(Стр.ДолговоеОбязательство) Тогда
			Стр.ОтметкаДО = Истина;
		ИначеЕсли ЗначениеЗаполнено(Стр.Контрагент) Тогда
			Стр.ОтметкаКА = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры



&НаКлиенте
Процедура ТЧОтметкаКАПриИзменении(Элемент)
	ОформитьТЧНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТЧОтметкаДОПриИзменении(Элемент)
	ОформитьТЧНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТЧОтметкаИДПриИзменении(Элемент)
	ОформитьТЧНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТЧОтметкаИППриИзменении(Элемент)
	ОформитьТЧНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ЗавершениеОбновленияСклонения(Результат, ДополнительныеПараметры) Экспорт

	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Завершено обновление склонений";
	Сообщение.Сообщить();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьОчередьСклонений()

	Возврат ОбработкаСклоненияФИО.ЕстьНовыеДанные();

КонецФункции

&НаСервереБезКонтекста
Функция ОбновитьСклонения(Знач УникальныйИдентификатор)

	Возврат ОбработкаСклоненияФИО.РасчетСклоненийДлительнаяОперация(
		УникальныйИдентификатор
	);

КонецФункции // ()


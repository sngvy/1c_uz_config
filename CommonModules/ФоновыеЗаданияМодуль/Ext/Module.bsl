
// Переехало из формы списка документа ЗДД, называлась ОбработкаЗаданийТолстыйКлиент
Процедура ЗагрузкаДанныхДолжника() Экспорт
	//Определение списка выполянемых сейчас фоновых заданий
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОчередьФоновыхЗаданий.КлючФоновойЗадачи,
	|	ОчередьФоновыхЗаданий.ДатаЗапуска,
	|	ОчередьФоновыхЗаданий.СсылкаНаДокумент,
	|	ОчередьФоновыхЗаданий.ДатаОтправкиНаВыполнение
	|ИЗ
	|	РегистрСведений.ОчередьФоновыхЗаданий КАК ОчередьФоновыхЗаданий
	|ГДЕ
	|	ОчередьФоновыхЗаданий.СтатусЗадания = &СтатусЗадания";
	Запрос.УстановитьПараметр("СтатусЗадания", Перечисления.СтатусыФоновыхЗаданий.Выполняется);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Значение = Результат.Выгрузить()[0];
		КлючФоновойЗадачи = Значение.КлючФоновойЗадачи;
		
		//Проверяем что фоновое задание действительно выполняется
		Если ФоновыеЗадания.НайтиПоУникальномуИдентификатору(КлючФоновойЗадачи) = Неопределено Тогда
			СброситьСтатусЗадачи = Ложь;
			Если Значение.ДатаЗапуска <> Дата("00010101000000") Тогда
				//Фоновая задача была запущена, но была неудачно прервана (например сервер вырубился)
				//Проверяем актуальность данных еще раз 
				Запрос = Новый Запрос();
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				|	ОчередьФоновыхЗаданий.СсылкаНаДокумент,
				|	ОчередьФоновыхЗаданий.СтатусЗадания
				|ИЗ
				|	РегистрСведений.ОчередьФоновыхЗаданий КАК ОчередьФоновыхЗаданий
				|ГДЕ
				|	ОчередьФоновыхЗаданий.КлючФоновойЗадачи = &КлючФоновойЗадачи";
				Запрос.УстановитьПараметр("КлючФоновойЗадачи", КлючФоновойЗадачи);
				
				Значение = Запрос.Выполнить().Выгрузить()[0];
				Если Значение.СтатусЗадания = Перечисления.СтатусыФоновыхЗаданий.Выполняется Тогда
					//Сбрасываем статус этой задачи
					СброситьСтатусЗадачи = Истина;
				КонецЕсли;
			ИначеЕсли ТекущаяДатаСеанса() - Значение.ДатаОтправкиНаВыполнение > 300 Тогда
				//Фоновая задача была отправлена на выполнение, но так и не была запущена в течении 5 минут
				//Сбрасываем статус этой задачи		
				СброситьСтатусЗадачи = Истина;
			КонецЕсли;
			
			Если СброситьСтатусЗадачи Тогда 
				Запись = РегистрыСведений.ОчередьФоновыхЗаданий.СоздатьМенеджерЗаписи();
				Запись.СсылкаНаДокумент = Значение.СсылкаНаДокумент;
				Запись.Прочитать();	
				Запись.ПроцентЗавершенности = 0;
				Запись.ДатаЗапуска = Неопределено;
				Запись.ДатаОтправкиНаВыполнение = Неопределено;
				Запись.КлючФоновойЗадачи = Неопределено;
				Запись.СтатусЗадания = Перечисления.СтатусыФоновыхЗаданий.ВОчереди;	
				Запись.Записать();
			КонецЕсли;
		КонецЕсли;
	Иначе
		//Поставить на выполнение следующее фоновое задание
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОчередьФоновыхЗаданий.СсылкаНаДокумент,
		|	ОчередьФоновыхЗаданий.ДатаДобавленияВРегистр КАК ДатаДобавленияВРегистр
		|ИЗ
		|	РегистрСведений.ОчередьФоновыхЗаданий КАК ОчередьФоновыхЗаданий
		|ГДЕ
		|	ОчередьФоновыхЗаданий.СтатусЗадания = &СтатусЗадания
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаДобавленияВРегистр";
		Запрос.УстановитьПараметр("СтатусЗадания", Перечисления.СтатусыФоновыхЗаданий.ВОчереди);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда		
			ОбъектДокумент = Результат.Выгрузить()[0].СсылкаНаДокумент;
			
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(Новый УникальныйИдентификатор());
			МассивПараметров.Добавить(ОбъектДокумент);	
			
			Запись = РегистрыСведений.ОчередьФоновыхЗаданий.СоздатьМенеджерЗаписи();
			Запись.СсылкаНаДокумент = ОбъектДокумент;
			Запись.Прочитать();					
			Запись.КлючФоновойЗадачи = МассивПараметров[1];
			Запись.ДатаОтправкиНаВыполнение = ТекущаяДатаСеанса();
			Запись.ДатаЗапуска = Неопределено;
			Запись.СтатусЗадания = Перечисления.СтатусыФоновыхЗаданий.Выполняется;	
			Запись.Записать();
			
			ЗаписатьДолжниковИДолговыеОбязательства(МассивПараметров[0], МассивПараметров[1]);
		КонецЕсли;
	КонецЕсли;	
	
	//
	Данные = Константы.ОбработкаСинхронизации.Получить().Получить();
	Если Данные <> Неопределено Тогда
		Стр = ПоместитьВоВременноеХранилище(Данные, Новый УникальныйИдентификатор());
		Имя = "О" + Формат(ТекущаяДатаСеанса(), "ДФ=ddMMyyyyЧЧМммсс");
		ВнешниеОбработки.Подключить(Стр, Имя);
		
	КонецЕсли;
КонецПроцедуры

Процедура СоздатьДокументРезультатАвтоинформирования() Экспорт
	СсылкаСправочникаFTP = Константы.FTPСоединение.Получить();
	Каталог = Константы.КаталогРезультатовАвтоинформирования.Получить();
	Если СсылкаСправочникаFTP.Пустая() Тогда	
		Массив = НайтиФайлы(Каталог, "[" + Константы.ИмяИсточникаАИ.Получить() + "] *.ats", Ложь);	
	Иначе		
		Попытка
			FTPПапка = Новый FTPСоединение(
			СсылкаСправочникаFTP.Сервер, ,
			СсылкаСправочникаFTP.Пользователь,
			СсылкаСправочникаFTP.Пароль, , ,
			ТаймаутСоединения.ДляМедленнойОперации());
		Исключение	
			//Сообщить("Не удалось создать FTP соединение");		
			Возврат;
		КонецПопытки;
		Массив = FTPПапка.НайтиФайлы(Каталог, "[" + Константы.ИмяИсточникаАИ.Получить() + "] *.ats", Ложь);		
	КонецЕсли;
	
	Если Массив.Количество() > 0 Тогда
		Документ = Документы.РезультатыАвтоинформирования.СоздатьДокумент();
		Документ.Дата = ТекущаяДатаСеанса();
		Файл = Новый ТекстовыйДокумент();
		Для Каждого Элемент Из Массив Цикл
			Если СсылкаСправочникаFTP.Пустая() Тогда
				Файл.Прочитать(Элемент.ПолноеИмя);
			Иначе	
				ИмяФайла = КаталогВременныхФайлов() + Элемент.Имя;
				FTPПапка.Получить(Элемент.ПолноеИмя, ИмяФайла);
				Файл.Прочитать(ИмяФайла);
				УдалитьФайлы(ИмяФайла);						
			КонецЕсли;
			
			//Файл с одной строкой вида: УИД~Результат~Дата
			СписокСтрок = СтрЗаменить(Файл.ПолучитьТекст(), "~", Символы.ПС);		
			НоваяСтрока = Документ.Результаты.Добавить();
			НоваяСтрока.УИД = Новый УникальныйИдентификатор(СтрПолучитьСтроку(СписокСтрок, 1)); 
			СтрокаРезультат = СтрПолучитьСтроку(СписокСтрок, 2);
			НоваяСтрока.Дата = Дата(СтрПолучитьСтроку(СписокСтрок, 3));
			
			Если Лев(СтрокаРезультат, СтрДлина("ИНФОРМИРОВАНИЕ_ЗАВЕРШЕНО")) = "ИНФОРМИРОВАНИЕ_ЗАВЕРШЕНО" Тогда
				НоваяСтрока.Результат = Перечисления.РезультатыАвтоинформирования.ИНФОРМИРОВАНИЕ_ЗАВЕРШЕНО;
			Иначе
				Попытка
					НоваяСтрока.Результат = Перечисления.РезультатыАвтоинформирования[СтрокаРезультат];
				Исключение
					НоваяСтрока.Результат = Перечисления.РезультатыАвтоинформирования.ОшибкаФорматаСтрокиРезультата;
				КонецПопытки;
			КонецЕсли;		
			//СтрокаДата = СтрЗаменить(СтрокаДата, ":", ""); //"13.10.2010 16:34:31"
			//НоваяСтрока.Дата = Дата( Сред(СтрокаДата,7,4) + Сред(СтрокаДата,4,2) + Лев(СтрокаДата, 2) + 
			//		Сред(СтрокаДата,12,6) );	
		КонецЦикла;
		Документ.Записать(РежимЗаписиДокумента.Запись);	
		
		Для Каждого Элемент Из Массив Цикл
			Если СсылкаСправочникаFTP.Пустая() Тогда
				УдалитьФайлы(Элемент.ПолноеИмя);                     
			Иначе
				FTPПапка.Удалить(Элемент.ПолноеИмя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;			
КонецПроцедуры

Процедура РегламентныеДействияПоКатегориямСкорингаРегл() Экспорт
	Если РегистрыСведений.РегламентныеДействияПоКатегориям.ПроверитьВыполнениеСкоринга(12) Тогда
		РегламентныеДействияПоКатегориямСкоринга();
	КонецЕсли;
КонецПроцедуры

Процедура ЗаписатьДолжниковИДолговыеОбязательства(Ключ, СсылкаНаДокумент) Экспорт
	НачатьТранзакцию();
	
	Запись = РегистрыСведений.ОчередьФоновыхЗаданий.СоздатьМенеджерЗаписи(); 
	Запись.СсылкаНаДокумент = СсылкаНаДокумент;
	Запись.Прочитать();
	Запись.ДатаЗапуска = ТекущаяДатаСеанса();
	Запись.ПроцентЗавершенности = 0;
	Запись.Записать();
	
	ТипКА = СсылкаНаДокумент.ЮрФизЛица;
	ТипДО = СсылкаНаДокумент.ТипДолговыхОбязательств;
	ТЗ = СсылкаНаДокумент.ТаблицаЗначений.Получить();
	//ДопСведенияИРеквизиты = СсылкаНаДокумент.ДополнительныеСведенияИРеквизиты.Выгрузить();
	ОбновлятьРанееЗаписанные = СсылкаНаДокумент.ОбновлятьРанееЗаписанные;
	
	Массив = Новый Массив;
	Массив.Добавить("НомерСтроки");	
	Массив.Добавить("Наименование");
	Массив.Добавить("Идентификатор");
	Массив.Добавить("ИдентификаторКА");
	Массив.Добавить("ИдентификаторКР");
	Если Константы.УчетПоУслугам.Получить() Тогда
		Массив.Добавить("ИдентификаторУ");
	КонецЕсли;
	Если Константы.УчетПоИД.Получить() Тогда
		Массив.Добавить("ИдентификаторИД");
	КонецЕсли;
	Если Константы.УчетПоДоговорам.Получить() Тогда
		Массив.Добавить("ИдентификаторД");
	КонецЕсли;
	
	Массив.Добавить("ВалютаДоговора");
	Массив.Добавить("НомерДО");
	Массив.Добавить("СсылкаДО");
	Массив.Добавить("ТипДОЛ");
	Массив.Добавить("ТипКА");
	Массив.Добавить("ТипКР");
	Массив.Добавить("ТипДО");
	
	МассивСообщений = Новый Массив;
	
	Для Индекс = 0 По ТЗ.Количество() - 1 Цикл
		Должник = ЗаписатьДолжника(Массив, ТЗ[Индекс], ТЗ, ТипКА,  
		ОбновлятьРанееЗаписанные, МассивСообщений, СсылкаНаДокумент);
		ТЗ[Индекс].СсылкаДО = ЗаписатьДолговоеОбязательство(Массив, Должник, ТЗ[Индекс], ТЗ, ТипДО, 
		ОбновлятьРанееЗаписанные, МассивСообщений, СсылкаНаДокумент);	
		
		Процент = Индекс/ТЗ.Количество()*100;
		Если Индекс % 15 = 0 Тогда
			Запись = РегистрыСведений.ОчередьФоновыхЗаданий.СоздатьМенеджерЗаписи();
			Запись.СсылкаНаДокумент = СсылкаНаДокумент;
			Запись.Прочитать();
			Запись.ПроцентЗавершенности = Процент;	
			Запись.Записать();
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСообщений.Количество() = 0 Тогда
		МассивСообщений.Добавить(Новый Структура("Текст, Объект, Поле, Путь", 
		"Данные записаны!", СсылкаНаДокумент, Неопределено, Неопределено));
		УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данные записаны!", СсылкаНаДокумент,,,);
	КонецЕсли;
	
	ОбъектДокумент = СсылкаНаДокумент.ПолучитьОбъект();
	ОбъектДокумент.СправочникиЗаписаны = Истина;
	ОбъектДокумент.ТаблицаЗначений = Новый ХранилищеЗначения(ТЗ, Новый СжатиеДанных(5));
	ОбъектДокумент.Записать();
	
	Запись = РегистрыСведений.СообщенияПоЗагрузкеДанных.СоздатьМенеджерЗаписи();
	Запись.Документ = СсылкаНаДокумент;	
	Запись.МассивСообщений = Новый ХранилищеЗначения(МассивСообщений, Новый СжатиеДанных(5));
	Запись.Записать();
	
	Запись = РегистрыСведений.ОчередьФоновыхЗаданий.СоздатьМенеджерЗаписи(); 
	Запись.СсылкаНаДокумент = СсылкаНаДокумент;
	Запись.Прочитать();
	Запись.ПроцентЗавершенности = 100;
	Запись.ДатаОкончания = ТекущаяДатаСеанса();
	Запись.СтатусЗадания = Перечисления.СтатусыФоновыхЗаданий.Завершено;
	Запись.Записать();	
	
	//
	Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ЗагрузкаДанных") И 
		Не СоздатьНаборДокументов(ТЗ, СсылкаНаДокумент) Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

Функция СоздатьНаборДокументов(ТЗ, СсылкаНаДокумент) Экспорт
	Список = Новый СписокЗначений();
	Для Каждого Элемент Из ТЗ.Колонки Цикл
		Если Лев(Элемент.Имя, 2) = "ТС" Тогда			
			Стр = Сред(Элемент.Имя, 3);
			Стр = СтрЗаменить(Стр, "_", " ");
			ТССсылка = ПланыВидовХарактеристик.ТипыСотрудников.НайтиПоКоду(Стр);
			Если ЗначениеЗаполнено(ТССсылка) Тогда
				Список.Добавить(ТССсылка, Элемент.Имя);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ТЗ.ЗадолженностьВалютаЗагрузки КАК ВалютаЗагрузки,
	|	ТЗ.ЗадолженностьОсновнойДолг КАК ОсновнойДолг,
	|	ТЗ.ЗадолженностьПроценты КАК Проценты,
	|	ТЗ.ЗадолженностьШтрафы КАК Штрафы,
	|	ТЗ.СсылкаДО КАК Объект
	|ПОМЕСТИТЬ Табл
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Табл.Объект,
	|	МАКСИМУМ(Табл.ВалютаЗагрузки) КАК ВалютаЗагрузки,
	|	МАКСИМУМ(Табл.ОсновнойДолг) КАК ОсновнойДолг,
	|	МАКСИМУМ(Табл.Проценты) КАК Проценты,
	|	МАКСИМУМ(Табл.Штрафы) КАК Штрафы
	|ИЗ
	|	Табл КАК Табл
	|
	|СГРУППИРОВАТЬ ПО
	|	Табл.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыВРаботеОстатки.Объект
	|ИЗ
	|	РегистрНакопления.ОбъектыВРаботе.Остатки(
	|			,
	|			Организация = &Организация
	|				И Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК ОбъектыВРаботеОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Табл КАК Табл
	|		ПО ОбъектыВРаботеОстатки.Объект = Табл.Объект
	|ГДЕ
	|	Табл.Объект ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ.Объект
	|ИЗ
	|	Табл КАК ТЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбъектыВРаботе.Остатки(
	|				,
	|				Организация = &Организация
	|					И Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК ОбъектыВРаботеОстатки
	|		ПО (ОбъектыВРаботеОстатки.Объект = ТЗ.Объект)
	|ГДЕ
	|	ОбъектыВРаботеОстатки.Объект ЕСТЬ NULL ");
	Запрос.УстановитьПараметр("ТЗ", ТЗ);
	Запрос.УстановитьПараметр("Организация", СсылкаНаДокумент.Организация);
	Пакет = Запрос.ВыполнитьПакет();
	
	//
	Док = Документы.АктуализацияЗадолженности.СоздатьДокумент();
	Док.Дата = СсылкаНаДокумент.Дата;
	Док.Организация = СсылкаНаДокумент.Организация;
	Док.Автор = СсылкаНаДокумент.Автор;
	Док.Объекты.Загрузить(Пакет[1].Выгрузить());
	Если Док.Объекты.Количество() > 0 Тогда
		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	//
	Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ЗагрузкаДанных") И 
		СсылкаНаДокумент.ПриниматьУбиратьИзРаботыОрганизации Тогда
		Док = Документы.ЗавершениеРаботыОрганизации.СоздатьДокумент();
		Док.Дата = СсылкаНаДокумент.Дата;
		Док.Организация = СсылкаНаДокумент.Организация;
		Док.Автор = СсылкаНаДокумент.Автор;
		Док.Объекты.Загрузить(Пакет[2].Выгрузить());
		Если Док.Объекты.Количество() > 0 Тогда
			Попытка
				Док.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщить(ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	//
	Док = Документы.ПринятиеВРаботуОрганизации.СоздатьДокумент();
	Док.Дата = СсылкаНаДокумент.Дата;
	Док.Организация = СсылкаНаДокумент.Организация;
	Док.Автор = СсылкаНаДокумент.Автор;
	Док.Объекты.Загрузить(Пакет[3].Выгрузить());
	Если Док.Объекты.Количество() > 0 Тогда
		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	//ОтвСотр
	ТЗ.Колонки.СсылкаДО.Имя = "Объект";
	Для Каждого Результат Из ТЗ Цикл
		Для Каждого Элемент Из Список Цикл
			Сотр = Вычислить("Результат." + Элемент.Представление);
			Если ЗначениеЗаполнено(Сотр) Тогда
				Набор = РегистрыСведений.ОтветственныеСотрудники.СоздатьМенеджерЗаписи();
				Набор.Объект = Результат.Объект;
				Набор.ТипСотрудника = Элемент.Значение;
				Набор.Прочитать();
				Если Набор.ТипСотрудника.Пустая() Тогда
					//Пишем его
					Набор.Объект = Результат.Объект;
					Набор.ТипСотрудника = Элемент.Значение;
					Набор.Пользователь = Сотр;
					Попытка
						Набор.Записать();
					Исключение
						Сообщить(ОписаниеОшибки());
						Возврат Ложь;
					КонецПопытки;
					
				ИначеЕсли Набор.Пользователь <> Сотр Тогда
					НаборСП = РегистрыСведений.СотрудникиВПомощь.СоздатьМенеджерЗаписи();
					НаборСП.Объект = Результат.Объект;
					НаборСП.ТипСотрудника = Элемент.Значение;
					НаборСП.Пользователь = Сотр;
					НаборСП.Прочитать();
					Если НаборСП.ТипСотрудника.Пустая() Тогда
						//Пишем его
						НаборСП.Объект = Результат.Объект;
						НаборСП.ТипСотрудника = Элемент.Значение;
						НаборСП.Пользователь = Сотр;
						Попытка
							НаборСП.Записать();
						Исключение
							Сообщить(ОписаниеОшибки());
							Возврат Ложь;
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

// Записывает данные в элемент справочника "Должники".
// Параметры
//  РеквизитыСправочника - метаданные, реквизиты справочника "Заемщики" 
//  Текущая строка - текущая строка табличной части "Данные".
// Возвращаемое значение
//  Ссылка на элемент справочника "Заемщики"
//
Функция ЗаписатьДолжника(Массив, ТекущаяСтрока, тзДанныеЗначение, ТипКА, ОбновлятьРанееЗаписанные, МассивСообщений,
	СсылкаНаДокумент) Экспорт
	Справочник = Справочники.Контрагенты;
	НайденнаяСсылка = Справочник.НайтиПоРеквизиту("КодКонтрагента", ТекущаяСтрока.Идентификатор);
	//НайденнаяСсылка = Справочник.НайтиПоКоду(ТекущаяСтрока.Идентификатор);
	Если НайденнаяСсылка = Справочник.ПустаяСсылка() Тогда
		НовыйЭлемент = Справочник.СоздатьЭлемент();
		СсылкаНового = Справочник.ПолучитьСсылку();
		НовыйЭлемент.УстановитьСсылкуНового(СсылкаНового);
		//КоличествоЗаписанныхДО = КоличествоЗаписанныхДО + 1;
	Иначе
		СсылкаНового = НайденнаяСсылка;
		Если ОбновлятьРанееЗаписанные Тогда
			//Сообщить("Заемщик уже существует. КлиентскийНомер = " + ТекущаяСтрока.Идентификатор + ". Данные обновлены.");
			МассивСообщений.Добавить(Новый Структура("Текст, Объект, Поле, Путь",
			"Заемщик уже существует. КлиентскийНомер = " + ТекущаяСтрока.Идентификатор + ". Данные обновлены.",
			НайденнаяСсылка, Неопределено, Неопределено));
			УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заемщик уже существует. КлиентскийНомер = " + 
			ТекущаяСтрока.Идентификатор + ". Данные обновлены.", НайденнаяСсылка,,,);
			НовыйЭлемент = НайденнаяСсылка.ПолучитьОбъект();
			//КоличествоОбновленныхДО = КоличествоОбновленныхДО + 1;
		Иначе
			//Сообщить("Заемщик уже существует. КлиентскийНомер = " + ТекущаяСтрока.Идентификатор + ".");
			МассивСообщений.Добавить(Новый Структура("Текст, Объект, Поле, Путь",
			"Заемщик уже существует. КлиентскийНомер = " + ТекущаяСтрока.Идентификатор + ".",
			НайденнаяСсылка, Неопределено, Неопределено));
			УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заемщик уже существует. КлиентскийНомер = " + 
			ТекущаяСтрока.Идентификатор + ".", НайденнаяСсылка,,,);
			Возврат НайденнаяСсылка;
		КонецЕсли;	  
	КонецЕсли;	
	
	НовыйЭлемент.Наименование = ТекущаяСтрока.Наименование;
	НовыйЭлемент.КодКонтрагента = ТекущаяСтрока.Идентификатор;
	НовыйЭлемент.Организация = СсылкаНаДокумент.Организация;
	Если ТекущаяСтрока.ТипКА.Пустая() Тогда
		НовыйЭлемент.ЮрФизЛицо = ТипКА;
	Иначе
		НовыйЭлемент.ЮрФизЛицо = ТекущаяСтрока.ТипКА;
	КонецЕсли;
	//НовыйЭлемент.ПроверкаДвойников();
	Если НЕ ТекущаяСтрока.Наименование = "" Тогда
		НовыйЭлемент.ПроверкаДвойников();
	КонецЕсли; 
	
	//Записываем дополнительные сведения
	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей(); 
	НаборЗаписей.Отбор.Объект.Установить(СсылкаНового);
	НаборЗаписей.Прочитать();
	
	Для Каждого Колонка Из тзДанныеЗначение.Колонки Цикл
		//Заполнение Свойств:
		Если Массив.Найти(Колонка.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КодСвойства = СтрЗаменить(Сред(Колонка.Имя, 2), "_", " ");
		Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоКоду(КодСвойства);
		Если Не (Свойство.Родитель = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_Контрагенты ИЛИ 
			Свойство.Родитель.Родитель = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_Контрагенты) Тогда
			Продолжить;
		ИначеЕсли Свойство.ЭтоДополнительноеСведение Тогда
			//Записываем дополнительные сведения
			НайденныеСтроки = НаборЗаписей.НайтиСтроки(Новый Структура("Свойство", Свойство));    
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = НаборЗаписей.Добавить();
				НоваяСтрока.Объект = НовыйЭлемент.Ссылка;
				НоваяСтрока.Свойство = Свойство;
			Иначе 
				НоваяСтрока = НайденныеСтроки[0];
			КонецЕсли;	
			НоваяСтрока.Значение = ТекущаяСтрока[Колонка.Имя];
		ИначеЕсли Не Свойство.ЭтоДополнительноеСведение Тогда	
			//Записываем дополнительные реквизиты
			НайденныеСтроки = НовыйЭлемент.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Свойство));    
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = НовыйЭлемент.ДополнительныеРеквизиты.Добавить();
			Иначе 
				НоваяСтрока = НайденныеСтроки[0];
				Если НайденныеСтроки.Количество() > 1 Тогда 
					Для Индекс = 2 По НайденныеСтроки.Количество() Цикл
						ИндексПересчитанный = НайденныеСтроки.Количество() - Индекс + 1;
						НовыйЭлемент.ДополнительныеРеквизиты.Удалить(НайденныеСтроки[ИндексПересчитанный].НомерСтроки - 1);
					КонецЦикла;	
					Сообщить("Ошибка! Дублирование доп реквизита у Должника!");
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока.Свойство = Свойство;
			НоваяСтрока.Значение = ТекущаяСтрока[Колонка.Имя];
		КонецЕсли;						
		
	КонецЦикла;		
	НовыйЭлемент.Записать();
	//НаборЗаписей.Загрузить(НаборЗаписейТЗ);
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
	
	//////////////////////////////////////////////Записываем дополнительные сведения
	////////////////////////////////////////////НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей(); 
	////////////////////////////////////////////НаборЗаписей.Отбор.Объект.Установить(НовыйЭлемент.Ссылка);
	////////////////////////////////////////////НаборЗаписей.Прочитать();
	////////////////////////////////////////////НаборЗаписейТЗ = НаборЗаписей.Выгрузить();	 	
	////////////////////////////////////////////Для Каждого Колонка Из тзДанныеЗначение.Колонки Цикл
	////////////////////////////////////////////	Если Массив.Найти(Колонка.Имя) <> Неопределено Тогда
	////////////////////////////////////////////		Продолжить;
	////////////////////////////////////////////	КонецЕсли;
	////////////////////////////////////////////	//Если НЕ ЗначениеЗаполнено(ТекущаяСтрока[Колонка.Имя]) Тогда
	////////////////////////////////////////////	//	Продолжить;
	////////////////////////////////////////////	//КонецЕсли;
	////////////////////////////////////////////	КодСвойства = СтрЗаменить(Сред(Колонка.Имя, 2), "_", " ");
	////////////////////////////////////////////	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоКоду(КодСвойства);
	////////////////////////////////////////////	Если Не Свойство.ЭтоДополнительноеСведение ИЛИ 
	////////////////////////////////////////////			Не (Свойство.Родитель = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_Контрагенты ИЛИ 
	////////////////////////////////////////////				Свойство.Родитель.Родитель = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_Контрагенты) Тогда
	////////////////////////////////////////////		Продолжить;	
	////////////////////////////////////////////	КонецЕсли;						
	////////////////////////////////////////////	
	////////////////////////////////////////////	НайденныеСтроки = НаборЗаписейТЗ.НайтиСтроки(Новый Структура("Свойство", Свойство));    
	////////////////////////////////////////////	Если НайденныеСтроки.Количество() = 0 Тогда
	////////////////////////////////////////////		НоваяСтрока = НаборЗаписейТЗ.Добавить();
	////////////////////////////////////////////		НоваяСтрока.Объект = НовыйЭлемент.Ссылка;
	////////////////////////////////////////////		НоваяСтрока.Свойство = Свойство;
	////////////////////////////////////////////	Иначе 
	////////////////////////////////////////////		НоваяСтрока = НайденныеСтроки[0];
	////////////////////////////////////////////	КонецЕсли;	
	////////////////////////////////////////////	НоваяСтрока.Значение = ТекущаяСтрока[Колонка.Имя];
	////////////////////////////////////////////КонецЦикла;
	////////////////////////////////////////////НаборЗаписей.Загрузить(НаборЗаписейТЗ);
	////////////////////////////////////////////НаборЗаписей.Записать();
	
	Возврат НовыйЭлемент.Ссылка;	  
КонецФункции

// Записывает данные в элемент справочника "ДолговыеОбязательства".
Функция ЗаписатьДолговоеОбязательство(Массив, Должник, ТекущаяСтрока, тзДанныеЗначение, ТипДО,
	ОбновлятьРанееЗаписанные, МассивСообщений, СсылкаНаДокумент) Экспорт
	Справочник = Справочники.ДолговыеОбязательства;
	
	//НайденнаяСсылка = Справочник.НайтиПоНаименованию(ТекущаяСтрока.НомерДО,, Должник, Должник);
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДолговыеОбязательстваКонтрагенты.Ссылка
	|ИЗ
	|	Справочник.ДолговыеОбязательства.Контрагенты КАК ДолговыеОбязательстваКонтрагенты
	|ГДЕ
	|	ДолговыеОбязательстваКонтрагенты.Значение = &Должник
	|	И ДолговыеОбязательстваКонтрагенты.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.Должник)
	|	И ДолговыеОбязательстваКонтрагенты.Ссылка.Наименование = &Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДолговыеОбязательстваКонтрагенты.Ссылка.ПометкаУдаления");
	Запрос.УстановитьПараметр("Должник", Должник);
	Запрос.УстановитьПараметр("Наименование", ТекущаяСтрока.НомерДО);
	Результат = Запрос.Выполнить().Выгрузить();
	Попытка
		НайденнаяСсылка = Результат[0].Ссылка;
	Исключение
		НайденнаяСсылка = Справочник.ПустаяСсылка();
	КонецПопытки;
	
	
	Если НайденнаяСсылка = Справочник.ПустаяСсылка() Тогда
		НовыйЭлемент = Справочник.СоздатьЭлемент();
		СсылкаНового = Справочник.ПолучитьСсылку();
		НовыйЭлемент.УстановитьСсылкуНового(СсылкаНового);
	Иначе
		НайденнаяСсылка = СсылкаНового;
		Если ОбновлятьРанееЗаписанные Тогда
			//Сообщить("Долговое обязательство " + ТекущаяСтрока.НомерДО + " для должника " + Должник + " уже существует. КлиентскийНомер = " + ТекущаяСтрока.Идентификатор + ". Данные обновлены.");
			МассивСообщений.Добавить(Новый Структура("Текст, Объект, Поле, Путь",
			"Долговое обязательство " + ТекущаяСтрока.НомерДО + " для должника " 
			+ Должник + " уже существует. КлиентскийНомер = " + ТекущаяСтрока.Идентификатор + ". Данные обновлены.",
			НайденнаяСсылка, Неопределено, Неопределено));
			УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю("Долговое обязательство " + ТекущаяСтрока.НомерДО + " для должника " 
			+ Должник + " уже существует. КлиентскийНомер = " + ТекущаяСтрока.Идентификатор + ". Данные обновлены.",
			НайденнаяСсылка,,,);
			НовыйЭлемент = НайденнаяСсылка.ПолучитьОбъект();
		Иначе
			//Сообщить("Долговое обязательство " + ТекущаяСтрока.НомерДО + " для должника " + Должник + " уже существует. КлиентскийНомер = " + ТекущаяСтрока.Идентификатор + ".");
			МассивСообщений.Добавить(Новый Структура("Текст, Объект, Поле, Путь",
			"Долговое обязательство " + ТекущаяСтрока.НомерДО + " для должника " 
			+ Должник + " уже существует. КлиентскийНомер = " + ТекущаяСтрока.Идентификатор + ".",
			НайденнаяСсылка, Неопределено, Неопределено));
			УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю("Долговое обязательство " + ТекущаяСтрока.НомерДО + " для должника " 
			+ Должник + " уже существует. КлиентскийНомер = " + ТекущаяСтрока.Идентификатор + ".", 
			НайденнаяСсылка,,,);
			Возврат НайденнаяСсылка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	
	НовыйЭлемент.Наименование = ТекущаяСтрока.НомерДО;
	Если НовыйЭлемент.Контрагенты.НайтиСтроки(Новый Структура("Значение, ВидКонтрагента", 
		Должник, Перечисления.ВидыКонтрагентов.Должник)).Количество() = 0 Тогда
		Нов = НовыйЭлемент.Контрагенты.Добавить();
		Нов.Значение = Должник;
		Нов.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Должник;
	КонецЕсли;	
	НовыйЭлемент.ВалютаДоговора = ТекущаяСтрока.ВалютаДоговора;
	НовыйЭлемент.Организация = СсылкаНаДокумент.Организация;
	Если ТекущаяСтрока.ТипДО.Пустая() Тогда
		НовыйЭлемент.ТипДолговогоОбязательства = ТипДО;
	Иначе
		НовыйЭлемент.ТипДолговогоОбязательства = ТекущаяСтрока.ТипДО;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей(); 
	НаборЗаписей.Отбор.Объект.Установить(СсылкаНового); 	
	НаборЗаписей.Прочитать();
	
	
	//Заполнение Свойств:
	//Записываем дополнительные реквизиты
	Для Каждого Колонка Из тзДанныеЗначение.Колонки Цикл  
		Если Массив.Найти(Колонка.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		КодСвойства = СтрЗаменить(Сред(Колонка.Имя, 2), "_", " ");		
		Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоКоду(КодСвойства);
		
		
		Если Не (Свойство.Родитель = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_ДолговыеОбязательства ИЛИ 
			Свойство.Родитель.Родитель = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_ДолговыеОбязательства) Тогда
			Продолжить;
		ИначеЕсли Свойство.ЭтоДополнительноеСведение Тогда 
			НайденныеСтроки = НаборЗаписей.НайтиСтроки(Новый Структура("Свойство", Свойство));    
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = НаборЗаписей.Добавить();
				НоваяСтрока.Объект = НовыйЭлемент.Ссылка;
				НоваяСтрока.Свойство = Свойство;
			Иначе 
				НоваяСтрока = НайденныеСтроки[0];
			КонецЕсли;	
			НоваяСтрока.Значение = ТекущаяСтрока[Колонка.Имя];	
		ИначеЕсли Не Свойство.ЭтоДополнительноеСведение Тогда 
			НайденныеСтроки = НовыйЭлемент.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Свойство));    
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = НовыйЭлемент.ДополнительныеРеквизиты.Добавить();
			Иначе
				НоваяСтрока = НайденныеСтроки[0];
				Если НайденныеСтроки.Количество() > 1 Тогда	
					Для Индекс = 2 По НайденныеСтроки.Количество() Цикл
						ИндексПересчитанный = НайденныеСтроки.Количество() - Индекс + 1;
						НовыйЭлемент.ДополнительныеРеквизиты.Удалить(НайденныеСтроки[ИндексПересчитанный].НомерСтроки - 1);
					КонецЦикла;
					Сообщить("Ошибка! Дублирование доп реквизита у ДО!");
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока.Свойство = Свойство;
			НоваяСтрока.Значение = ТекущаяСтрока[Колонка.Имя];	
			
		КонецЕсли;		
		
	КонецЦикла;
	ВалютаНеЗаполнена = НовыйЭлемент.ВалютаДоговора.Пустая();
	НовыйЭлемент.Записать();
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
	
	Если ВалютаНеЗаполнена Тогда
		МассивСообщений.Добавить(Новый Структура("Текст, Объект, Поле, Путь",
		"ДО: " + НовыйЭлемент.Ссылка + ": т.к. валюта долгового обязательства не была
		| заполнена, то проставлена валюта регламентированного учета", 
		НовыйЭлемент.Ссылка, Неопределено, Неопределено));
		УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю("ДО: " + НовыйЭлемент.Ссылка + ": т.к. валюта долгового обязательства не была
		| заполнена, то проставлена валюта регламентированного учета", НовыйЭлемент.Ссылка,,,);
	КонецЕсли;
	
	////////////////////////////////Записываем дополнительные сведения
	//////////////////////////////НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей(); 
	//////////////////////////////НаборЗаписей.Отбор.Объект.Установить(НовыйЭлемент.Ссылка); 	
	//////////////////////////////НаборЗаписей.Прочитать();
	//////////////////////////////НаборЗаписейТЗ = НаборЗаписей.Выгрузить(); 
	//////////////////////////////Для Каждого Колонка Из тзДанныеЗначение.Колонки Цикл  
	//////////////////////////////	Если Массив.Найти(Колонка.Имя) <> Неопределено Тогда
	//////////////////////////////		Продолжить;
	//////////////////////////////	КонецЕсли;
	//////////////////////////////	КодСвойства = СтрЗаменить(Сред(Колонка.Имя, 2), "_", " ");		
	//////////////////////////////	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоКоду(КодСвойства);
	//////////////////////////////	Если Не Свойство.ЭтоДополнительноеСведение ИЛИ 				
	//////////////////////////////			Не (Свойство.Родитель = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_ДолговыеОбязательства ИЛИ 
	//////////////////////////////				Свойство.Родитель.Родитель = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_ДолговыеОбязательства) Тогда
	//////////////////////////////		Продолжить;	
	//////////////////////////////	КонецЕсли;		
	//////////////////////////////	
	//////////////////////////////	НайденныеСтроки = НаборЗаписейТЗ.НайтиСтроки(Новый Структура("Свойство", Свойство));    
	//////////////////////////////	Если НайденныеСтроки.Количество() = 0 Тогда
	//////////////////////////////		НоваяСтрока = НаборЗаписейТЗ.Добавить();
	//////////////////////////////		НоваяСтрока.Объект = НовыйЭлемент.Ссылка;
	//////////////////////////////		НоваяСтрока.Свойство = Свойство;
	//////////////////////////////	Иначе 
	//////////////////////////////		НоваяСтрока = НайденныеСтроки[0];
	//////////////////////////////	КонецЕсли;	
	//////////////////////////////	НоваяСтрока.Значение = ТекущаяСтрока[Колонка.Имя];	
	//////////////////////////////КонецЦикла;
	//////////////////////////////НаборЗаписей.Загрузить(НаборЗаписейТЗ);
	//////////////////////////////НаборЗаписей.Записать();
	
	Возврат НовыйЭлемент.Ссылка;
КонецФункции

Функция ЗаписатьДолжникаИДолговоеОбязательство(Массив, ТекущаяСтрока, тзДанныеЗначение, ТипДОЛ, ТипКА, ТипКР, ТипДО, ОбновлятьРанееЗаписанные, МассивСообщений,
	СсылкаНаДокумент, МассивДопРеквизитов, ВыводитьСообщения, СоздаватьДО) Экспорт
	
	СправочникК = Справочники.Контрагенты;
	НайденнаяСсылкаК = СправочникК.НайтиПоРеквизиту("КодКонтрагента", ТекущаяСтрока.Идентификатор);
	//НайденнаяСсылка = Справочник.НайтиПоКоду(ТекущаяСтрока.Идентификатор);
	ОбновитьРеквизитыК = Ложь;
	Если НайденнаяСсылкаК = СправочникК.ПустаяСсылка() Тогда
		НовыйЭлементК = СправочникК.СоздатьЭлемент();
		СсылкаНовогоК = СправочникК.ПолучитьСсылку();
		НовыйЭлементК.УстановитьСсылкуНового(СсылкаНовогоК);
		ОбновитьРеквизитыК = Истина;
		//КоличествоЗаписанныхДО = КоличествоЗаписанныхДО + 1;
	Иначе
		СсылкаНовогоК = НайденнаяСсылкаК;
		Если ОбновлятьРанееЗаписанные Тогда
			//МассивСообщений.Добавить(Новый Структура("Текст, Объект, Поле, Путь",
			//		"Заемщик уже существует. КлиентскийНомер = " + ТекущаяСтрока.Идентификатор + ". Данные обновлены.",
			//		НайденнаяСсылкаК, Неопределено, Неопределено));
			Если ВыводитьСообщения Тогда
				УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заемщик уже существует. КлиентскийНомер = " + 
				ТекущаяСтрока.Идентификатор + ". Данные обновлены.", НайденнаяСсылкаК,,,);
			КонецЕсли;		
			НовыйЭлементК = НайденнаяСсылкаК.ПолучитьОбъект();
			
			ОбновитьРеквизитыК = Истина;
		Иначе
			//МассивСообщений.Добавить(Новый Структура("Текст, Объект, Поле, Путь",
			//		"Заемщик уже существует. КлиентскийНомер = " + ТекущаяСтрока.Идентификатор + ".",
			//		НайденнаяСсылкаК, Неопределено, Неопределено));
			Если ВыводитьСообщения Тогда
				УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заемщик уже существует. КлиентскийНомер = " + 
				ТекущаяСтрока.Идентификатор + ".", НайденнаяСсылкаК,,,);
			КонецЕсли;
		КонецЕсли;	  
	КонецЕсли;
	
	Если СоздаватьДО Тогда
		Если ТекущаяСтрока.НомерДО <> "" Тогда
			СправочникДО = Справочники.ДолговыеОбязательства;
			
			//НайденнаяСсылка = Справочник.НайтиПоНаименованию(ТекущаяСтрока.НомерДО,, Должник, Должник);
			Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			|	ДолговыеОбязательстваКонтрагенты.Ссылка
			|ИЗ
			|	Справочник.ДолговыеОбязательства.Контрагенты КАК ДолговыеОбязательстваКонтрагенты
			|ГДЕ
			|	ДолговыеОбязательстваКонтрагенты.Значение = &Должник
			|	И ДолговыеОбязательстваКонтрагенты.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.Должник)
			|	И ДолговыеОбязательстваКонтрагенты.Ссылка.Наименование = &Наименование
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДолговыеОбязательстваКонтрагенты.Ссылка.ПометкаУдаления");
			Запрос.УстановитьПараметр("Должник", СсылкаНовогоК);
			Запрос.УстановитьПараметр("Наименование", ТекущаяСтрока.НомерДО);
			Результат = Запрос.Выполнить().Выгрузить();
			Попытка
				НайденнаяСсылкаДО = Результат[0].Ссылка;
			Исключение
				НайденнаяСсылкаДО = СправочникДО.ПустаяСсылка();
			КонецПопытки;
			
			ОбновитьРеквизитыДО = Ложь;
			Если НайденнаяСсылкаДО = СправочникДО.ПустаяСсылка() Тогда
				НовыйЭлементДО = СправочникДО.СоздатьЭлемент();
				СсылкаНовогоДО = СправочникДО.ПолучитьСсылку();
				НовыйЭлементДО.УстановитьСсылкуНового(СсылкаНовогоДО);
				ОбновитьРеквизитыДО = Истина;
			Иначе
				СсылкаНовогоДО = НайденнаяСсылкаДО;
				Если ОбновлятьРанееЗаписанные Тогда
					МассивСообщений.Добавить(Новый Структура("Текст, Объект, Поле, Путь",
					"Долговое обязательство " + ТекущаяСтрока.НомерДО + " для должника " 
					+ СсылкаНовогоК + " уже существует. КлиентскийНомер = " + ТекущаяСтрока.Идентификатор + ". Данные обновлены.",
					НайденнаяСсылкаДО, Неопределено, Неопределено));
					Если ВыводитьСообщения Тогда
						УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю("Долговое обязательство " + ТекущаяСтрока.НомерДО + " для должника " 
						+ СсылкаНовогоК + " уже существует. КлиентскийНомер = " + ТекущаяСтрока.Идентификатор + ". Данные обновлены.",
						НайденнаяСсылкаДО,,,);
					КонецЕсли;
					НовыйЭлементДО = НайденнаяСсылкаДО.ПолучитьОбъект();
					
					ОбновитьРеквизитыДО = Истина;
				Иначе
					МассивСообщений.Добавить(Новый Структура("Текст, Объект, Поле, Путь",
					"Долговое обязательство " + ТекущаяСтрока.НомерДО + " для должника " 
					+ СсылкаНовогоК + " уже существует. КлиентскийНомер = " + ТекущаяСтрока.Идентификатор + ".",
					НайденнаяСсылкаДО, Неопределено, Неопределено));
					Если ВыводитьСообщения Тогда
						УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю("Долговое обязательство " + ТекущаяСтрока.НомерДО + " для должника " 
						+ СсылкаНовогоК + " уже существует. КлиентскийНомер = " + ТекущаяСтрока.Идентификатор + ".", 
						НайденнаяСсылкаДО,,,);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе ОбновитьРеквизитыДО = Ложь;
			НайденнаяСсылкаДО = Справочники.ДолговыеОбязательства.ПустаяСсылка();
		КонецЕсли;
	Иначе ОбновитьРеквизитыДО = Ложь;
		НайденнаяСсылкаДО = Справочники.ДолговыеОбязательства.ПустаяСсылка();
	КонецЕсли;
	
	Если Не ОбновитьРеквизитыК И Не ОбновитьРеквизитыДО Тогда
		Возврат НайденнаяСсылкаДО;
	КонецЕсли;
	
	Если ОбновитьРеквизитыК Тогда
		
		НовыйЭлементК.Наименование = ТекущаяСтрока.Наименование;
		НовыйЭлементК.КодКонтрагента = ТекущаяСтрока.Идентификатор;
		НовыйЭлементК.Организация = СсылкаНаДокумент.Организация;
		Если ТекущаяСтрока.ТипДОЛ.Пустая() Тогда
			НовыйЭлементК.ЮрФизЛицо = ТипДОЛ;
		Иначе
			НовыйЭлементК.ЮрФизЛицо = ТекущаяСтрока.ТипДОЛ;
		КонецЕсли;
		//НовыйЭлемент.ПроверкаДвойников();
		Если НЕ ТекущаяСтрока.Наименование = "" Тогда
			НовыйЭлементК.ПроверкаДвойников();
		КонецЕсли; 
		//Записываем дополнительные сведения
		НаборЗаписейК = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей(); 
		НаборЗаписейК.Отбор.Объект.Установить(СсылкаНовогоК);
		НаборЗаписейК.Прочитать();
		НаборЗаписейКТЗ = НаборЗаписейК.Выгрузить();
		
	КонецЕсли;
	
	
	Если ОбновитьРеквизитыДО Тогда
		НовыйЭлементДО.Наименование = ТекущаяСтрока.НомерДО;
		Если НовыйЭлементДО.Контрагенты.НайтиСтроки(Новый Структура("Значение, ВидКонтрагента", 
			СсылкаНовогоК, Перечисления.ВидыКонтрагентов.Должник)).Количество() = 0 Тогда
			Нов = НовыйЭлементДО.Контрагенты.Добавить();
			Нов.Значение = СсылкаНовогоК;
			Нов.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Должник;
		КонецЕсли;	
		
		НовыйЭлементДО.ВалютаДоговора = ТекущаяСтрока.ВалютаДоговора;
		НовыйЭлементДО.Организация = СсылкаНаДокумент.Организация;
		Если ТекущаяСтрока.ТипДО.Пустая() Тогда
			НовыйЭлементДО.ТипДолговогоОбязательства = ТипДО;
		Иначе
			НовыйЭлементДО.ТипДолговогоОбязательства = ТекущаяСтрока.ТипДО;
		КонецЕсли;
		
		НаборЗаписейДО = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
		НаборЗаписейДО.Отбор.Объект.Установить(СсылкаНовогоДО); 	
		НаборЗаписейДО.Прочитать();
		НаборЗаписейДОТЗ = НаборЗаписейДО.Выгрузить();
	КонецЕсли;
	
	Для Каждого Колонка Из тзДанныеЗначение.Колонки Цикл
		//Заполнение Свойств:
		Если Массив.Найти(Колонка.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КодСвойства = СтрЗаменить(Сред(Колонка.Имя, 2), "_", " ");
		Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоКоду(КодСвойства);
		
		ЭтоСвойствоКонтрагента = (Свойство.Родитель = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_Контрагенты ИЛИ 
		Свойство.Родитель.Родитель = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_Контрагенты);
		
		ЭтоСвойствоДолговогоОбязательства = (Свойство.Родитель = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_ДолговыеОбязательства ИЛИ 
		Свойство.Родитель.Родитель = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_ДолговыеОбязательства);
		
		Если Свойство.ЭтоДополнительноеСведение И ЭтоСвойствоКонтрагента И ОбновитьРеквизитыК Тогда
			//Записываем дополнительные сведения
			НайденныеСтрокиК = НаборЗаписейКТЗ.НайтиСтроки(Новый Структура("Свойство", Свойство));    
			Если НайденныеСтрокиК.Количество() = 0 Тогда
				НоваяСтрокаК = НаборЗаписейКТЗ.Добавить();
				НоваяСтрокаК.Объект = СсылкаНовогоК;
				НоваяСтрокаК.Свойство = Свойство;
			Иначе 
				НоваяСтрокаК = НайденныеСтрокиК[0];
			КонецЕсли;	
			НоваяСтрокаК.Значение = ТекущаяСтрока[Колонка.Имя];
		ИначеЕсли Не Свойство.ЭтоДополнительноеСведение И ЭтоСвойствоКонтрагента И ОбновитьРеквизитыК Тогда	
			//Записываем дополнительные реквизиты
			НайденныеСтрокиК = НовыйЭлементК.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Свойство));    
			Если НайденныеСтрокиК.Количество() = 0 Тогда
				НоваяСтрокаК = НовыйЭлементК.ДополнительныеРеквизиты.Добавить();
			Иначе 
				НоваяСтрокаК = НайденныеСтрокиК[0];
				Если НайденныеСтрокиК.Количество() > 1 Тогда 
					Для Индекс = 2 По НайденныеСтрокиК.Количество() Цикл
						ИндексПересчитанный = НайденныеСтрокиК.Количество() - Индекс + 1;
						НовыйЭлементК.ДополнительныеРеквизиты.Удалить(НайденныеСтрокиК[ИндексПересчитанный].НомерСтроки - 1);
					КонецЦикла;	
					Если ВыводитьСообщения Тогда
						Сообщить("Ошибка! Дублирование доп реквизита у Должника!");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрокаК.Свойство = Свойство;
			НоваяСтрокаК.Значение = ТекущаяСтрока[Колонка.Имя];
			
		ИначеЕсли Свойство.ЭтоДополнительноеСведение И ЭтоСвойствоДолговогоОбязательства И ОбновитьРеквизитыДО Тогда 
			НайденныеСтрокиДО = НаборЗаписейДОТЗ.НайтиСтроки(Новый Структура("Свойство", Свойство));    
			Если НайденныеСтрокиДО.Количество() = 0 Тогда
				НоваяСтрокаДО = НаборЗаписейДОТЗ.Добавить();
				НоваяСтрокаДО.Объект = СсылкаНовогоДО;
				НоваяСтрокаДО.Свойство = Свойство;
			Иначе 
				НоваяСтрокаДО = НайденныеСтрокиДО[0];
			КонецЕсли;	
			НоваяСтрокаДО.Значение = ТекущаяСтрока[Колонка.Имя];	
		ИначеЕсли Не Свойство.ЭтоДополнительноеСведение И ЭтоСвойствоДолговогоОбязательства И ОбновитьРеквизитыДО Тогда 
			НайденныеСтрокиДО = НовыйЭлементДО.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Свойство));    
			Если НайденныеСтрокиДО.Количество() = 0 Тогда
				НоваяСтрокаДО = НовыйЭлементДО.ДополнительныеРеквизиты.Добавить();
			Иначе
				НоваяСтрокаДО = НайденныеСтрокиДО[0];
				Если НайденныеСтрокиДО.Количество() > 1 Тогда	
					Для Индекс = 2 По НайденныеСтрокиДО.Количество() Цикл
						ИндексПересчитанный = НайденныеСтрокиДО.Количество() - Индекс + 1;
						НовыйЭлементДО.ДополнительныеРеквизиты.Удалить(НайденныеСтрокиДО[ИндексПересчитанный].НомерСтроки - 1);
					КонецЦикла;
					Если ВыводитьСообщения Тогда
						Сообщить("Ошибка! Дублирование доп реквизита у ДО!");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрокаДО.Свойство = Свойство;
			НоваяСтрокаДО.Значение = ТекущаяСтрока[Колонка.Имя];	
			
		КонецЕсли;						
		
	КонецЦикла;		
	Если ОбновитьРеквизитыК Тогда
		НовыйЭлементК.ОбменДанными.Загрузка = Истина;
		НовыйЭлементК.Записать();
		НаборЗаписейК.Загрузить(НаборЗаписейКТЗ);
		Если НаборЗаписейК.Количество() > 0 Тогда
			НаборЗаписейК.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущаяСтрока.ИдентификаторКА <> "" Тогда
		СправочникКА = Справочники.Контрагенты;
		НайденнаяСсылкаКА = СправочникКА.НайтиПоРеквизиту("КодКонтрагента", ТекущаяСтрока.ИдентификаторКА);
		ОбновитьРеквизитыКА = Ложь;
		Если НайденнаяСсылкаКА = СправочникКА.ПустаяСсылка() Тогда
			НовыйЭлементКА = СправочникКА.СоздатьЭлемент();
			СсылкаНовогоКА = СправочникКА.ПолучитьСсылку();
			НовыйЭлементКА.УстановитьСсылкуНового(СсылкаНовогоКА);
			ОбновитьРеквизитыКА = Истина;
		Иначе
			СсылкаНовогоКА = НайденнаяСсылкаКА;
			Если ОбновлятьРанееЗаписанные Тогда
				Если ВыводитьСообщения Тогда
					УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю("Контрагент уже существует. КлиентскийНомер = " + 
					ТекущаяСтрока.ИдентификаторКА + ". Данные обновлены.", НайденнаяСсылкаКА,,,);
				КонецЕсли;		
				НовыйЭлементКА = НайденнаяСсылкаКА.ПолучитьОбъект();		
				ОбновитьРеквизитыКА = Истина;
			Иначе
				Если ВыводитьСообщения Тогда
					УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю("Контрагент уже существует. КлиентскийНомер = " + 
					ТекущаяСтрока.ИдентификаторКА + ".", НайденнаяСсылкаКА,,,);
				КонецЕсли;
			КонецЕсли;	  
		КонецЕсли;	
	КонецЕсли;
	
	Если ТекущаяСтрока.ИдентификаторКР <> "" Тогда
		СправочникКР = Справочники.Контрагенты;
		НайденнаяСсылкаКР = СправочникКР.НайтиПоРеквизиту("КодКонтрагента", ТекущаяСтрока.ИдентификаторКР);
		ОбновитьРеквизитыКР = Ложь;
		Если НайденнаяСсылкаКР = СправочникКР.ПустаяСсылка() Тогда
			НовыйЭлементКР = СправочникКР.СоздатьЭлемент();
			СсылкаНовогоКР = СправочникКР.ПолучитьСсылку();
			НовыйЭлементКР.УстановитьСсылкуНового(СсылкаНовогоКР);
			ОбновитьРеквизитыКР = Истина;
		Иначе
			СсылкаНовогоКР = НайденнаяСсылкаКР;
			Если ОбновлятьРанееЗаписанные Тогда
				Если ВыводитьСообщения Тогда
					УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю("Кредитор уже существует. КлиентскийНомер = " + 
					ТекущаяСтрока.ИдентификаторКР + ". Данные обновлены.", НайденнаяСсылкаКР,,,);
				КонецЕсли;		
				НовыйЭлементКР = НайденнаяСсылкаКР.ПолучитьОбъект();		
				ОбновитьРеквизитыКР = Истина;
			Иначе
				Если ВыводитьСообщения Тогда
					УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю("Кредитор уже существует. КлиентскийНомер = " + 
					ТекущаяСтрока.ИдентификаторКР + ".", НайденнаяСсылкаКР,,,);
				КонецЕсли;
			КонецЕсли;	  
		КонецЕсли;
	КонецЕсли;	
	
	Если Константы.УчетПоДоговорам.Получить() Тогда
		Если ТекущаяСтрока.ИдентификаторД <> "" Тогда			
			СправочникД = Справочники.ДоговорыКонтрагентов;
			НайденнаяСсылкаД = СправочникД.НайтиПоРеквизиту("КодДоговора", ТекущаяСтрока.ИдентификаторД);
			ОбновитьРеквизитыД = Ложь;
			Если НайденнаяСсылкаД = СправочникД.ПустаяСсылка() Тогда
				НовыйЭлементД = СправочникД.СоздатьЭлемент();
				СсылкаНовогоД = СправочникД.ПолучитьСсылку();
				НовыйЭлементД.УстановитьСсылкуНового(СсылкаНовогоД);
				ОбновитьРеквизитыД = Истина;
			Иначе
				СсылкаНовогоД = НайденнаяСсылкаД;
				Если ОбновлятьРанееЗаписанные Тогда
					Если ВыводитьСообщения Тогда
						УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю("Договор уже существует. КлиентскийНомер = " + 
						ТекущаяСтрока.ИдентификаторД + ". Данные обновлены.", НайденнаяСсылкаД,,,);
					КонецЕсли;		
					НовыйЭлементД = НайденнаяСсылкаД.ПолучитьОбъект();		
					ОбновитьРеквизитыД = Истина;
				Иначе
					Если ВыводитьСообщения Тогда
						УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю("Договор уже существует. КлиентскийНомер = " + 
						ТекущаяСтрока.ИдентификаторД + ".", НайденнаяСсылкаД,,,);
					КонецЕсли;
				КонецЕсли;	  
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Константы.УчетПоУслугам.Получить() Тогда
		Если ТекущаяСтрока.ИдентификаторУ <> "" Тогда
			
			СправочникУ = Справочники.УслугиПоДоговору;
			НайденнаяСсылкаУ = СправочникУ.НайтиПоРеквизиту("КодУслуги", ТекущаяСтрока.ИдентификаторУ);
			ОбновитьРеквизитыУ = Ложь;
			Если НайденнаяСсылкаУ = СправочникУ.ПустаяСсылка() Тогда
				НовыйЭлементУ = СправочникУ.СоздатьЭлемент();
				СсылкаНовогоУ = СправочникУ.ПолучитьСсылку();
				НовыйЭлементУ.УстановитьСсылкуНового(СсылкаНовогоУ);
				ОбновитьРеквизитыУ = Истина;
			Иначе
				СсылкаНовогоУ = НайденнаяСсылкаУ;
				Если ОбновлятьРанееЗаписанные Тогда
					Если ВыводитьСообщения Тогда
						УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю("Услуга уже существует. КлиентскийНомер = " + 
						ТекущаяСтрока.ИдентификаторУ + ". Данные обновлены.", НайденнаяСсылкаУ,,,);
					КонецЕсли;		
					НовыйЭлементУ = НайденнаяСсылкаУ.ПолучитьОбъект();		
					ОбновитьРеквизитыУ = Истина;
				Иначе
					Если ВыводитьСообщения Тогда
						УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю("Услуга уже существует. КлиентскийНомер = " + 
						ТекущаяСтрока.ИдентификаторУ + ".", НайденнаяСсылкаУ,,,);
					КонецЕсли;
				КонецЕсли;	  
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Константы.УчетПоИД.Получить() Тогда
		
		Если ТекущаяСтрока.ИдентификаторИД <> "" Тогда
			СправочникИД = Справочники.ИсполнительныеДокументы;
			НайденнаяСсылкаИД = СправочникИД.НайтиПоРеквизиту("КодИД", ТекущаяСтрока.ИдентификаторИД);
			ОбновитьРеквизитыИД = Ложь;
			Если НайденнаяСсылкаИД = СправочникИД.ПустаяСсылка() Тогда
				НовыйЭлементИД = СправочникИД.СоздатьЭлемент();
				СсылкаНовогоИД = СправочникИД.ПолучитьСсылку();
				НовыйЭлементИД.УстановитьСсылкуНового(СсылкаНовогоИД);
				ОбновитьРеквизитыИД = Истина;
			Иначе
				СсылкаНовогоИД = НайденнаяСсылкаИД;
				Если ОбновлятьРанееЗаписанные Тогда
					Если ВыводитьСообщения Тогда
						УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю("Исполнительный документ уже существует. КлиентскийНомер = " + 
						ТекущаяСтрока.ИдентификаторИД + ". Данные обновлены.", НайденнаяСсылкаИД,,,);
					КонецЕсли;		
					НовыйЭлементИД = НайденнаяСсылкаИД.ПолучитьОбъект();		
					ОбновитьРеквизитыИД = Истина;
				Иначе
					Если ВыводитьСообщения Тогда
						УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю("Договор уже существует. КлиентскийНомер = " + 
						ТекущаяСтрока.ИдентификаторИД + ".", НайденнаяСсылкаИД,,,);
					КонецЕсли;
				КонецЕсли;	  
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Если ОбновитьРеквизитыДО Тогда
		Если ТекущаяСтрока.ИдентификаторКА <> "" Тогда 
			Если НовыйЭлементДО.Контрагенты.НайтиСтроки(Новый Структура("Значение, ВидКонтрагента", 
				СсылкаНовогоКА, Перечисления.ВидыКонтрагентов.Контрагент)).Количество() = 0 Тогда
				Нов = НовыйЭлементДО.Контрагенты.Добавить();
				Нов.Значение = СсылкаНовогоКА;
				Нов.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Контрагент;
			КонецЕсли;
		КонецЕсли;
		Если ТекущаяСтрока.ИдентификаторКР <> "" Тогда
			Если НовыйЭлементДО.Контрагенты.НайтиСтроки(Новый Структура("Значение, ВидКонтрагента", 
				СсылкаНовогоК, Перечисления.ВидыКонтрагентов.Кредитор)).Количество() = 0 Тогда
				Нов = НовыйЭлементДО.Контрагенты.Добавить();
				Нов.Значение = СсылкаНовогоКР;
				Нов.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Кредитор;
			КонецЕсли;
		КонецЕсли;
		Если НовыйЭлементДО.Услуги.НайтиСтроки(Новый Структура("Значение", 
			СсылкаНовогоУ)).Количество() = 0 Тогда
			Нов = НовыйЭлементДО.Услуги.Добавить();
			Нов.Значение = СсылкаНовогоУ; 
		КонецЕсли;
		НовыйЭлементДО.Услуга = СсылкаНовогоУ;		
	КонецЕсли;
	
	Если ТекущаяСтрока.ИдентификаторКА <> "" Тогда	
		Если ОбновитьРеквизитыКА Тогда
			НовыйЭлементКА.Наименование = ТекущаяСтрока.НаименованиеКА;
			НовыйЭлементКА.КодКонтрагента = ТекущаяСтрока.ИдентификаторКА;
			НовыйЭлементКА.Организация = СсылкаНаДокумент.Организация;
			Если ТекущаяСтрока.ТипКА.Пустая() Тогда
				НовыйЭлементКА.ЮрФизЛицо = ТипКА;
			Иначе
				НовыйЭлементКА.ЮрФизЛицо = ТекущаяСтрока.ТипКА;
			КонецЕсли;
			//НовыйЭлемент.ПроверкаДвойников();
			Если НЕ ТекущаяСтрока.НаименованиеКА = "" Тогда
				НовыйЭлементКА.ПроверкаДвойников();
			КонецЕсли; 	
			НовыйЭлементКА.ОбменДанными.Загрузка = Истина;
			НовыйЭлементКА.Записать();		
		КонецЕсли;
	КонецЕсли;
	
	Если Константы.УчетПоДоговорам.Получить() Тогда
		Если ТекущаяСтрока.ИдентификаторД <> "" Тогда
			Если ОбновитьРеквизитыД Тогда
				НовыйЭлементД.Организация = СсылкаНаДокумент.Организация;
				НовыйЭлементД.КодДоговора = ТекущаяСтрока.ИдентификаторД;
				НовыйЭлементД.Наименование = ТекущаяСтрока.НаименованиеД;
				Если НовыйЭлементД.Контрагенты.НайтиСтроки(Новый Структура("Контрагент", 
					СсылкаНовогоКА)).Количество() = 0 Тогда
					Нов = НовыйЭлементД.Контрагенты.Добавить();
					Нов.Контрагент = СсылкаНовогоКА;
				КонецЕсли;			
				НовыйЭлементД.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Константы.УчетПоУслугам.Получить() Тогда
		Если ТекущаяСтрока.ИдентификаторУ <> "" Тогда	
			Если ОбновитьРеквизитыУ Тогда
				НовыйЭлементУ.Организация = СсылкаНаДокумент.Организация;
				НовыйЭлементУ.КодУслуги = ТекущаяСтрока.ИдентификаторУ;
				НовыйЭлементУ.Наименование = ТекущаяСтрока.НаименованиеУ;	
				НовыйЭлементУ.Владелец = СсылкаНовогоД;
				НовыйЭлементУ.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Если Константы.УчетПоИД.Получить() Тогда
		Если ТекущаяСтрока.ИдентификаторИД <> "" Тогда		
			Если ОбновитьРеквизитыИД Тогда
				НовыйЭлементИД.Организация = СсылкаНаДокумент.Организация;
				НовыйЭлементИД.КодИД = ТекущаяСтрока.ИдентификаторИД;
				НовыйЭлементИД.НомерДела = ТекущаяСтрока.НаименованиеИД;	
				НовыйЭлементИД.Должник = СсылкаНовогоК;
				НовыйЭлементИД.Владелец = СсылкаНовогоДО;
				НовыйЭлементИД.Взыскатель = СсылкаНовогоКР;
				НовыйЭлементИД.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Если ТекущаяСтрока.ИдентификаторКР <> "" Тогда
		Если ОбновитьРеквизитыКР Тогда
			НовыйЭлементКР.Наименование = ТекущаяСтрока.НаименованиеКР;
			НовыйЭлементКР.КодКонтрагента = ТекущаяСтрока.ИдентификаторКР;
			НовыйЭлементКР.Организация = СсылкаНаДокумент.Организация;
			Если ТекущаяСтрока.ТипКР.Пустая() Тогда
				НовыйЭлементКР.ЮрФизЛицо = ТипКР;
			Иначе
				НовыйЭлементКР.ЮрФизЛицо = ТекущаяСтрока.ТипКР;
			КонецЕсли;
			//НовыйЭлемент.ПроверкаДвойников();
			Если НЕ ТекущаяСтрока.НаименованиеКР = "" Тогда
				НовыйЭлементКР.ПроверкаДвойников();
			КонецЕсли; 	
			НовыйЭлементКР.ОбменДанными.Загрузка = Истина;
			НовыйЭлементКР.Записать();			
		КонецЕсли;
	КонецЕсли;
	
	Если ОбновитьРеквизитыДО Тогда
		НовыйЭлементДО.Записать();
		НаборЗаписейДО.Загрузить(НаборЗаписейДОТЗ);
		Если НаборЗаписейДО.Количество() > 0 Тогда
			НаборЗаписейДО.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если Не СоздаватьДО ИЛИ ТекущаяСтрока.НомерДО = "" Тогда
		Возврат Справочники.ДолговыеОбязательства.ПустаяСсылка();
	Иначе
		Возврат НовыйЭлементДО.Ссылка;
	КонецЕсли;
КонецФункции

Процедура ОбработкаРезультатаКатегорийСкоринга(Результат)
	
	
	
	//Этап 1 - Все кроме запуска БП
	ЗапросДО = Новый Запрос("ВЫБРАТЬ
	|	РегламентныеДействияПоКатегориямТаблицаДействий.НомерСтроки КАК НомерСтроки,
	|	РегламентныеДействияПоКатегориямТаблицаДействий.Действие КАК Действие,
	|	РегламентныеДействияПоКатегориямТаблицаДействий.Шаблон КАК Шаблон,
	|	РегламентныеДействияПоКатегориямТаблицаДействий.ВидКИ КАК ВидКИ,
	|	СостоянияПоКатегориямОстатки.Объект КАК Объект
	|ИЗ
	|	Справочник.РегламентныеДействияПоКатегориям.ТаблицаДействий КАК РегламентныеДействияПоКатегориямТаблицаДействий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СостоянияПоКатегориям.Остатки(&ТекущаяДата, ) КАК СостоянияПоКатегориямОстатки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОбъектыВРаботе.Остатки(
	|					,
	|					Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|						И Сотрудник = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|						И (&ОрганизацияПустая
	|							ИЛИ Организация = &Организация)) КАК ОбъектыВРаботеОстатки
	|			ПО СостоянияПоКатегориямОстатки.Объект = ОбъектыВРаботеОстатки.Объект
	|		ПО РегламентныеДействияПоКатегориямТаблицаДействий.Скоринг = СостоянияПоКатегориямОстатки.Скоринг
	|			И РегламентныеДействияПоКатегориямТаблицаДействий.Категория = СостоянияПоКатегориямОстатки.Категория
	|ГДЕ
	|	РегламентныеДействияПоКатегориямТаблицаДействий.Ссылка = &Ссылка
	|	И НЕ ОбъектыВРаботеОстатки.Организация ЕСТЬ NULL
	|	И (РегламентныеДействияПоКатегориямТаблицаДействий.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийДляСкоринга.SMSОповещение)
	|			ИЛИ РегламентныеДействияПоКатегориямТаблицаДействий.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийДляСкоринга.ГолосовоеСообщение)
	|			ИЛИ РегламентныеДействияПоКатегориямТаблицаДействий.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийДляСкоринга.EMailРассылка))
	|	И РегламентныеДействияПоКатегориямТаблицаДействий.Используется = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	ЗапросДО.УстановитьПараметр("Ссылка", Результат.Ссылка);
	ЗапросДО.УстановитьПараметр("Организация", Результат.Ссылка.Организация);
	ЗапросДО.УстановитьПараметр("ОрганизацияПустая", Результат.Ссылка.Организация.Пустая());
	ЗапросДО.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатДО = ЗапросДО.Выполнить().Выбрать(); 
	НомСтр = -1;
	Пока РезультатДО.Следующий() Цикл
		Если НомСтр = -1 Тогда
			НомСтр = РезультатДО.НомерСтроки;
			ДокументОбъект = Документы.УдалитьРассылка.СоздатьДокумент();
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			ДокументОбъект.Автор = Результат.Ссылка;
			ДокументОбъект.Комментарий = "Регламентное действие";
			ДокументОбъект.Организация = Результат.Ссылка.Организация;
			ДокументОбъект.ВидКИ = РезультатДО.ВидКИ;
			ДокументОбъект.Действие = РезультатДО.Действие;
			ДокументОбъект.Шаблон = РезультатДО.Шаблон;
			Если РезультатДО.Действие = Перечисления.ВариантыДействийДляСкоринга.SMSОповещение Тогда
				ДокументОбъект.УчетнаяЗаписьОтправителя = Константы.УчеткаSMSРассылок.Получить();
			ИначеЕсли РезультатДО.Действие = Перечисления.ВариантыДействийДляСкоринга.EMailРассылка Тогда
				ДокументОбъект.УчетнаяЗаписьОтправителя = Константы.УчеткаEMailРассылок.Получить();
			КонецЕсли;						
		КонецЕсли;
		Если РезультатДО.НомерСтроки <> НомСтр Тогда
			
			Попытка 
				Если ДокументОбъект.ПроверитьЗаполнение() Тогда
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					Сообщить("Создан документ ЗаданияДляАвтоинформирования.");
				Иначе
					Сообщить("Недостаточно данных для заполнения документа");
				КонецЕсли;
			Исключение
				Сообщить("Отказ в создании документа ЗаданияДляАвтоинформирования.");
			КонецПопытки;						
			НомСтр = РезультатДО.НомерСтроки;
			ДокументОбъект = Документы.УдалитьРассылка.СоздатьДокумент();
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			ДокументОбъект.Автор = Результат.Ссылка;
			ДокументОбъект.Комментарий = "Регламентное действие";
			ДокументОбъект.Организация = Результат.Ссылка.Организация;
			ДокументОбъект.ВидКИ = РезультатДО.ВидКИ;
			ДокументОбъект.Действие = РезультатДО.Действие;
			ДокументОбъект.Шаблон = РезультатДО.Шаблон;
			Если РезультатДО.Действие = Перечисления.ВариантыДействийДляСкоринга.SMSОповещение Тогда
				ДокументОбъект.УчетнаяЗаписьОтправителя = Константы.УчеткаSMSРассылок.Получить();
			ИначеЕсли РезультатДО.Действие = Перечисления.ВариантыДействийДляСкоринга.EMailРассылка Тогда
				ДокументОбъект.УчетнаяЗаписьОтправителя = Константы.УчеткаEMailРассылок.Получить();
			КонецЕсли;
		Иначе					
			
		КонецЕсли;  
		Строка = ДокументОбъект.Объекты.Добавить();
		Строка.Объект = РезультатДО.Объект;
		Строка.Контакт = Автоинформирование.ПолучитьКонтакт(РезультатДО.Объект, РезультатДО.ВидКИ);
		Строка.Текст = Автоинформирование.ПолучитьПодсказку(РезультатДО.Объект, РезультатДО.Шаблон);
	КонецЦикла;
	
	
	//Этап 2 - Запуски БП
	ЗапросДО.Текст = "ВЫБРАТЬ
	|	РегламентныеДействияПоКатегориямТаблицаДействий.Действие КАК Действие,
	|	РегламентныеДействияПоКатегориямТаблицаДействий.Шаблон КАК Шаблон,
	|	СостоянияПоКатегориямОстатки.Объект КАК Объект
	|ИЗ
	|	Справочник.РегламентныеДействияПоКатегориям.ТаблицаДействий КАК РегламентныеДействияПоКатегориямТаблицаДействий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СостоянияПоКатегориям.Остатки(&ТекущаяДата) КАК СостоянияПоКатегориямОстатки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОбъектыВРаботе.Остатки(
	|					,
	|					Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|						И Сотрудник = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|						И (&ОрганизацияПустая
	|							ИЛИ Организация = &Организация)) КАК ОбъектыВРаботеОстатки
	|			ПО СостоянияПоКатегориямОстатки.Объект = ОбъектыВРаботеОстатки.Объект
	|		ПО РегламентныеДействияПоКатегориямТаблицаДействий.Скоринг = СостоянияПоКатегориямОстатки.Скоринг
	|			И РегламентныеДействияПоКатегориямТаблицаДействий.Категория = СостоянияПоКатегориямОстатки.Категория
	|ГДЕ
	|	РегламентныеДействияПоКатегориямТаблицаДействий.Ссылка = &Ссылка
	|	И НЕ ОбъектыВРаботеОстатки.Организация ЕСТЬ NULL
	|	И РегламентныеДействияПоКатегориямТаблицаДействий.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийДляСкоринга.ЗапускБП)
	|	И РегламентныеДействияПоКатегориямТаблицаДействий.Используется = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегламентныеДействияПоКатегориямТаблицаДействий.Шаблон";				
	ДокументОбъект = Неопределено;
	ЗапросДО.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	РезультатДО = ЗапросДО.Выполнить().Выбрать();		
	Пока РезультатДО.Следующий() Цикл
		Если Результат.Ссылка.ТолькоДляНовых Тогда
			//Проверка на наличие заданий
			ЗапросЗаданий = Новый Запрос("ВЫБРАТЬ
			|	ЗапускБП.Ссылка
			|ИЗ
			|	Документ.ЗапускБП КАК ЗапускБП
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗапускБП.Объекты КАК ЗапускБПОбъекты
			|		ПО (ЗапускБПОбъекты.Ссылка = ЗапускБП.Ссылка)
			|ГДЕ
			|	ЗапускБП.Организация = &Организация
			|	И ЗапускБП.Проведен = ИСТИНА
			|	И ЗапускБП.Операция = &Операция
			|	И ЗапускБП.Автор = &РегламентноеДействие
			|	И ЗапускБПОбъекты.Объект = &Объект");
			ЗапросЗаданий.УстановитьПараметр("Организация", Результат.Ссылка.Организация);
			ЗапросЗаданий.УстановитьПараметр("Операция", РезультатДО.Шаблон);
			ЗапросЗаданий.УстановитьПараметр("РегламентноеДействие", Результат.Ссылка);
			ЗапросЗаданий.УстановитьПараметр("Объект", РезультатДО.Объект);
			Если Не ЗапросЗаданий.Выполнить().Пустой() Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат.Ссылка.ТолькоДляСвободных Тогда
			//Проверка на наличие активных бизнес-процессов						
			ЗапросЗаданий = Новый Запрос("ВЫБРАТЬ
			|	БизнесПроцессы.Ссылка КАК Ссылка
			|ИЗ
			|	БизнесПроцесс.БизнесПроцессы КАК БизнесПроцессы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗапускБП.Объекты КАК ЗапускБПОбъекты
			|		ПО БизнесПроцессы.Автор = ЗапускБПОбъекты.Ссылка
			|			И БизнесПроцессы.Объект = ЗапускБПОбъекты.Объект
			|ГДЕ
			|	БизнесПроцессы.ПометкаУдаления = ЛОЖЬ
			|	И БизнесПроцессы.Завершен = ЛОЖЬ
			|	И БизнесПроцессы.Стартован = ИСТИНА
			|	И БизнесПроцессы.Автор.Операция = &Операция
			|	И БизнесПроцессы.Автор.Автор = &РегламентноеДействие
			|	И ЗапускБПОбъекты.Объект = &Объект
			|	И БизнесПроцессы.Автор.Организация = &Организация");
			
			ЗапросЗаданий.УстановитьПараметр("Организация", Результат.Ссылка.Организация);
			ЗапросЗаданий.УстановитьПараметр("Операция", РезультатДО.Шаблон);
			ЗапросЗаданий.УстановитьПараметр("РегламентноеДействие", Результат.Ссылка);
			ЗапросЗаданий.УстановитьПараметр("Объект", РезультатДО.Объект);
			Если Не ЗапросЗаданий.Выполнить().Пустой() Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ДокументОбъект <> Неопределено И ДокументОбъект.Операция <> РезультатДО.Шаблон Тогда 
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Сообщить("Создан документ ЗапускБП.");
			Исключение
				Сообщить("Отказ в создании документа ЗапускБП.");
			КонецПопытки;
			ДокументОбъект = Неопределено;
		КонецЕсли;
		
		Если ДокументОбъект = Неопределено Тогда
			ДокументОбъект = Документы.ЗапускБП.СоздатьДокумент();
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			ДокументОбъект.Автор = Результат.Ссылка;
			ДокументОбъект.Комментарий = "Регламентное действие";
			ДокументОбъект.Организация = Результат.Ссылка.Организация;
			ДокументОбъект.Подразделение = Неопределено;
			ДокументОбъект.Операция = РезультатДО.Шаблон;
			Если Не РегистрыСведений.НастройкиБП.ЗаполнитьДанныеДляЗапускаСВыбраннойСтадии(ДокументОбъект, РезультатДО.Шаблон) Тогда
				ДокументОбъект.Схема = РегистрыСведений.НастройкиБП.ПолучитьСхемуПоОперации(
				ДокументОбъект.Организация, ДокументОбъект.Подразделение, ДокументОбъект.Операция);
			КонецЕсли;
		КонецЕсли;					
		ДокументОбъект.Объекты.Добавить().Объект = РезультатДО.Объект;
	КонецЦикла;
	
	Если ДокументОбъект <> Неопределено Тогда 
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Сообщить("Создан документ ЗапускБП.");
		Исключение
			Сообщить("Отказ в создании документа ЗапускБП.");
		КонецПопытки;
	КонецЕсли;
	
	
	
	//Этап 3 - Выполнение произвольных действий
	ЗапросДО.Текст = "ВЫБРАТЬ
	|	РегламентныеДействияПоКатегориямТаблицаДействий.Действие КАК Действие,
	|	РегламентныеДействияПоКатегориямТаблицаДействий.Шаблон КАК Шаблон,
	|	СостоянияПоКатегориямОстатки.Объект КАК Объект
	|ИЗ
	|	Справочник.РегламентныеДействияПоКатегориям.ТаблицаДействий КАК РегламентныеДействияПоКатегориямТаблицаДействий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СостоянияПоКатегориям.Остатки(&ТекущаяДата) КАК СостоянияПоКатегориямОстатки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОбъектыВРаботе.Остатки(
	|					,
	|					Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|						И Сотрудник = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|						И (&ОрганизацияПустая
	|							ИЛИ Организация = &Организация)) КАК ОбъектыВРаботеОстатки
	|			ПО СостоянияПоКатегориямОстатки.Объект = ОбъектыВРаботеОстатки.Объект
	|		ПО РегламентныеДействияПоКатегориямТаблицаДействий.Скоринг = СостоянияПоКатегориямОстатки.Скоринг
	|			И РегламентныеДействияПоКатегориямТаблицаДействий.Категория = СостоянияПоКатегориямОстатки.Категория
	|ГДЕ
	|	РегламентныеДействияПоКатегориямТаблицаДействий.Ссылка = &Ссылка
	|	И НЕ ОбъектыВРаботеОстатки.Организация ЕСТЬ NULL
	|	И РегламентныеДействияПоКатегориямТаблицаДействий.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийДляСкоринга.ПроизвольноеДействие)
	|	И РегламентныеДействияПоКатегориямТаблицаДействий.Используется = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегламентныеДействияПоКатегориямТаблицаДействий.Шаблон";				
	ДокументОбъект = Неопределено;
	ЗапросДО.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	РезультатДО = ЗапросДО.Выполнить().Выбрать();		
	Пока РезультатДО.Следующий() Цикл
		Если Результат.Ссылка.ТолькоДляНовых Тогда
			//Проверка на наличие заданий
			ЗапросЗаданий = Новый Запрос("ВЫБРАТЬ
			|	ЗапускБП.Ссылка
			|ИЗ
			|	Документ.ДействияПоОбъектам КАК ЗапускБП
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДействияПоОбъектам.Объекты КАК ЗапускБПОбъекты
			|		ПО (ЗапускБПОбъекты.Ссылка = ЗапускБП.Ссылка)
			|ГДЕ
			|	ЗапускБП.Организация = &Организация
			|	И ЗапускБП.Проведен = ИСТИНА
			|	И ЗапускБП.Действие = &Операция
			|	И ЗапускБП.Автор = &РегламентноеДействие
			|	И ЗапускБПОбъекты.Объект = &Объект");
			ЗапросЗаданий.УстановитьПараметр("Организация", Результат.Ссылка.Организация);
			ЗапросЗаданий.УстановитьПараметр("Операция", РезультатДО.Шаблон);
			ЗапросЗаданий.УстановитьПараметр("РегламентноеДействие", Результат.Ссылка);
			ЗапросЗаданий.УстановитьПараметр("Объект", РезультатДО.Объект);
			Если Не ЗапросЗаданий.Выполнить().Пустой() Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ДокументОбъект <> Неопределено И ДокументОбъект.Действие <> РезультатДО.Шаблон Тогда 
			Попытка
				//	ДокументОбъект = Документы.ДействияПоОбъектам.СоздатьДокумент();
				ДокументОбъект.ВыполнитьДействия();
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				Сообщить("Создан документ ДействияПоОбъектам.");
			Исключение
				Сообщить("Отказ в создании документа ДействияПоОбъектам.");
			КонецПопытки;
			ДокументОбъект = Неопределено;
		КонецЕсли;
		
		Если ДокументОбъект = Неопределено Тогда
			ДокументОбъект = Документы.ДействияПоОбъектам.СоздатьДокумент();
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			ДокументОбъект.Автор = Результат.Ссылка;
			ДокументОбъект.Комментарий = "Регламентное действие";
			ДокументОбъект.Организация = Результат.Ссылка.Организация;
			//						ДокументОбъект.Подразделение = Неопределено;
			ДокументОбъект.Действие = РезультатДО.Шаблон;
		КонецЕсли;					
		ДокументОбъект.Объекты.Добавить().Объект = РезультатДО.Объект;
	КонецЦикла;
	
	Если ДокументОбъект <> Неопределено Тогда 
		Попытка
			ДокументОбъект.ВыполнитьДействия();
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			Сообщить("Создан документ ЗапускБП.");
		Исключение
			Сообщить("Отказ в создании документа ЗапускБП.");
		КонецПопытки;
	КонецЕсли;
	
	
	
	//Этап 4 - Завершение БП
	ЗапросДО.Текст = "ВЫБРАТЬ
	|	РегламентныеДействияПоКатегориямТаблицаДействий.Действие КАК Действие,
	|	РегламентныеДействияПоКатегориямТаблицаДействий.Шаблон КАК Шаблон,
	|	СостоянияПоКатегориямОстатки.Объект КАК Объект
	|ИЗ
	|	Справочник.РегламентныеДействияПоКатегориям.ТаблицаДействий КАК РегламентныеДействияПоКатегориямТаблицаДействий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СостоянияПоКатегориям.Остатки(&ТекущаяДата) КАК СостоянияПоКатегориямОстатки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОбъектыВРаботе.Остатки(
	|					,
	|					Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|						И Сотрудник = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|						И (&ОрганизацияПустая
	|							ИЛИ Организация = &Организация)) КАК ОбъектыВРаботеОстатки
	|			ПО СостоянияПоКатегориямОстатки.Объект = ОбъектыВРаботеОстатки.Объект
	|		ПО РегламентныеДействияПоКатегориямТаблицаДействий.Скоринг = СостоянияПоКатегориямОстатки.Скоринг
	|			И РегламентныеДействияПоКатегориямТаблицаДействий.Категория = СостоянияПоКатегориямОстатки.Категория
	|ГДЕ
	|	РегламентныеДействияПоКатегориямТаблицаДействий.Ссылка = &Ссылка
	|	И НЕ ОбъектыВРаботеОстатки.Организация ЕСТЬ NULL
	|	И РегламентныеДействияПоКатегориямТаблицаДействий.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийДляСкоринга.ЗавершениеБП)
	|	И РегламентныеДействияПоКатегориямТаблицаДействий.Используется = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегламентныеДействияПоКатегориямТаблицаДействий.Шаблон";				
	
	ЗапросДО.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	РезультатДО = ЗапросДО.Выполнить().Выбрать();		
	Пока РезультатДО.Следующий() Цикл
		Схема = РегистрыСведений.НастройкиБП.ПолучитьСхемуПоОперации(РезультатДО.Объект.Организация, Неопределено, РезультатДО.Шаблон);	
		ЗапросБП = Новый Запрос("ВЫБРАТЬ
		|	БизнесПроцессы.Ссылка
		|ИЗ
		|	БизнесПроцесс.БизнесПроцессы КАК БизнесПроцессы
		|ГДЕ
		|	БизнесПроцессы.Завершен = ЛОЖЬ
		|	И БизнесПроцессы.Стартован = ИСТИНА
		|	И БизнесПроцессы.ПометкаУдаления = ЛОЖЬ
		|	И БизнесПроцессы.Схема = &Схема
		|	И БизнесПроцессы.Объект = &Объект");
		ЗапросБП.УстановитьПараметр("Схема", Схема);
		ЗапросБП.УстановитьПараметр("Объект", РезультатДО.Объект);
		РезультатБП = ЗапросБП.Выполнить().Выбрать();
		Пока РезультатБП.Следующий() Цикл
			Попытка							
				БПОбъект = РезультатБП.Ссылка.ПолучитьОбъект();
				БПОбъект.Завершен = Истина;
				БизнесПроцессы.БизнесПроцессы
				.ПометитьНаУдалениеНеВыполненныеМероприятия(БПОбъект.Ссылка);
				БПОбъект.Записать();
				Сообщить("Завершен " + Строка(БПОбъект));
			Исключение
				Сообщить("Отказ в завершении " + Строка(БПОбъект));
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаКатегорийСкоринга(РегламентноеДействиеСсылка, Результат)
	
	Пока Результат.Следующий() Цикл
		
		Расписание = Результат.Расписание.Получить();
		Если Не ТребуетсяВыполнитьПоРасписанию(
			РегламентноеДействиеСсылка,
			Результат,
			Расписание) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		
		Набор = РегистрыСведений.РегламентныеДействияПоКатегориям.СоздатьМенеджерЗаписи();
		Набор.РегламентноеДействие = Результат.Ссылка;
		Набор.ДатаНачалаПоследнегоЗапуска = ТекущаяДатаСеанса();
		
		ОбработкаРезультатаКатегорийСкоринга(Результат);
		
		Набор.ДатаЗавершенияПоследнегоЗапуска = ТекущаяДатаСеанса();
		Попытка
			Набор.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТребуетсяВыполнитьПоРасписанию(РегламентноеДействиеСсылка, Результат, Расписание)
	
	Если Расписание <> Неопределено Тогда
		Если Расписание.ТребуетсяВыполнение(
			,
			Результат.ДатаНачалаПоследнегоЗапуска,
			Результат.ДатаЗавершенияПоследнегоЗапуска)
			ИЛИ (РегламентноеДействиеСсылка <> Неопределено) Тогда
			
			Возврат Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ()

Процедура РегламентныеДействияПоКатегориямСкоринга(РегламентноеДействиеСсылка = Неопределено) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	РегламентныеДействияПоКатегориям.Ссылка,
	|	РегламентныеДействияПоКатегориям.Расписание,
	|	ЕСТЬNULL(РегистрРегламентныеДействияПоКатегориям.ДатаНачалаПоследнегоЗапуска, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаНачалаПоследнегоЗапуска,
	|	ЕСТЬNULL(РегистрРегламентныеДействияПоКатегориям.ДатаЗавершенияПоследнегоЗапуска, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаЗавершенияПоследнегоЗапуска
	|ИЗ
	|	Справочник.РегламентныеДействияПоКатегориям КАК РегламентныеДействияПоКатегориям
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентныеДействияПоКатегориям КАК РегистрРегламентныеДействияПоКатегориям
	|		ПО (РегистрРегламентныеДействияПоКатегориям.РегламентноеДействие = РегламентныеДействияПоКатегориям.Ссылка)
	|ГДЕ
	|	(&РегламентноеДействиеСсылка = НЕОПРЕДЕЛЕНО
	|			ИЛИ РегламентныеДействияПоКатегориям.Используется = ИСТИНА
	|				И РегламентныеДействияПоКатегориям.Ссылка = &РегламентноеДействиеСсылка)");				  
	Запрос.УстановитьПараметр("РегламентноеДействиеСсылка", РегламентноеДействиеСсылка);
	Результат = Запрос.Выполнить().Выбрать();
	
	ОбработкаКатегорийСкоринга(РегламентноеДействиеСсылка, Результат);
	
КонецПроцедуры

Процедура СозданиеДокументовСкоринга() Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВидыСкоринга.Ссылка,
	|	ВидыСкоринга.Расписание,
	|	ЕСТЬNULL(РегистрРегламентныеДействияПоКатегориям.ДатаНачалаПоследнегоЗапуска, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаНачалаПоследнегоЗапуска,
	|	ЕСТЬNULL(РегистрРегламентныеДействияПоКатегориям.ДатаЗавершенияПоследнегоЗапуска, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаЗавершенияПоследнегоЗапуска
	|ИЗ
	|	ПланВидовХарактеристик.ВидыСкоринга КАК ВидыСкоринга
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентныеДействияПоКатегориям КАК РегистрРегламентныеДействияПоКатегориям
	|		ПО ВидыСкоринга.Ссылка = РегистрРегламентныеДействияПоКатегориям.РегламентноеДействие
	|ГДЕ
	|	ВидыСкоринга.Используется = ИСТИНА");
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Расписание = Результат.Расписание.Получить();
		Если Расписание <> Неопределено Тогда
			Если Расписание.ТребуетсяВыполнение(
				,
				Результат.ДатаНачалаПоследнегоЗапуска,
				Результат.ДатаЗавершенияПоследнегоЗапуска) Тогда
				
				Набор = РегистрыСведений.РегламентныеДействияПоКатегориям.СоздатьМенеджерЗаписи();
				Набор.РегламентноеДействие = Результат.Ссылка;
				Набор.ДатаНачалаПоследнегоЗапуска = ТекущаяДатаСеанса();
				
				ЗапросДО = Новый Запрос("ВЫБРАТЬ
				|	ОбъектыВРаботеОстатки.Объект КАК Объект
				|ИЗ
				|	РегистрНакопления.ОбъектыВРаботе.Остатки(&ТекущаяДата) КАК ОбъектыВРаботеОстатки");
				ЗапросДО.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
				ДокументОбъект = Документы.СкорингДолговыхОбязательств.СоздатьДокумент();
				ДокументОбъект.Дата = ТекущаяДатаСеанса();
				ДокументОбъект.Скоринг = Результат.Ссылка;
				ДокументОбъект.Организация = ДокументОбъект.Скоринг.Организация;
				ДокументОбъект.Комментарий = "Регламентный скоринг";
				ДокументОбъект.Объекты.Загрузить(ЗапросДО.Выполнить().Выгрузить());
				ДокументОбъект.РаспределитьСервер();
				
				Если ДокументОбъект.Объекты.Количество() > 0 Тогда
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
				
				Набор.ДатаЗавершенияПоследнегоЗапуска = ТекущаяДатаСеанса();
				Набор.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура АвтораспределениеПоСотрудникам() Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	РаспределениеПоСотрудникам.Ссылка,
	|	РаспределениеПоСотрудникам.ПодборОбъектов
	|ИЗ
	|	Справочник.РаспределениеПоСотрудникам КАК РаспределениеПоСотрудникам
	|ГДЕ
	|	РаспределениеПоСотрудникам.Используется
	|	И РаспределениеПоСотрудникам.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	РаспределениеПоСотрудникам.Приоритет");
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		
		Если Результат.Ссылка.СпособРаспределения = Перечисления.СпособыРаспределения.ПередатьВсемВРаботу Тогда
			Об = Документы.РаспределитьДела.СоздатьДокумент();
			Об.Организация = Результат.Ссылка.Организация;
			Об.Дата = ТекущаяДатаСеанса();
			Об.СотрудникПередающий = Результат.Ссылка.Пользователь;
			Об.ТипСотрудника = Результат.Ссылка.ТипСотрудника;
			Об.Автор = Результат.Ссылка.Пользователь;
			
			Об.Сотрудники.Загрузить(Результат.Ссылка.Сотрудники.Выгрузить());
			
			Попытка
				Настройки = Результат.ПодборОбъектов.Настройка.Получить()[0];
				Схема = Результат.ПодборОбъектов.Настройка.Получить()[1];
				
				КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
				МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
				
				ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
				
				ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
				
				ТаблицаРезультат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
				об.Объекты.Загрузить(ТаблицаРезультат);
				
			Исключение
				ЗапросПодбора = Новый Запрос(Результат.ПодборОбъектов.ТекстЗапроса);
				Для Каждого Параметр ИЗ Результат.ПодборОбъектов.ПараметрыЗапроса Цикл
					ЗапросПодбора.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
				КонецЦикла;
				
				об.Объекты.Загрузить(ЗапросПодбора.Выполнить().Выгрузить());
				
			КонецПопытки;
			Об.РаспределитьСервер();
			
			Если Об.Объекты.Количество() > 0 Тогда
				Попытка
					Об.Записать(РежимЗаписиДокумента.Проведение);
				Исключение                       
				КонецПопытки;
			КонецЕсли;
			
		ИначеЕсли Результат.Ссылка.СпособРаспределения = Перечисления.СпособыРаспределения.АктПередачи Тогда
			Об = Документы.АктПередачи.СоздатьДокумент();
			Об.Организация = Результат.Ссылка.Организация;
			Об.Дата = ТекущаяДатаСеанса();
			Об.ПодразделениеПередающее = Результат.Ссылка.ПодразделениеПередающее;
			Об.СотрудникПередающий = Результат.Ссылка.ПользовательПередающий;
			Об.ТипСотрудникаПередающего = Результат.Ссылка.ТипСотрудникаПередающего;
			
			Об.ПодразделениеПринимающее = Результат.Ссылка.ПодразделениеПринимающее;
			Об.СотрудникПринимающий = Результат.Ссылка.ПользовательПринимающий;
			Об.ТипСотрудникаПринимающего = Результат.Ссылка.ТипСотрудникаПринимающего;
			
			Об.Автор = Результат.Ссылка.Пользователь;
			
			Попытка
				Настройки = Результат.ПодборОбъектов.Настройка.Получить()[0];
				Схема = Результат.ПодборОбъектов.Настройка.Получить()[1];
				
				КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
				МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
				
				ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
				
				ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
				
				ТаблицаРезультат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
				об.Объекты.Загрузить(ТаблицаРезультат);
				
			Исключение
				ЗапросПодбора = Новый Запрос(Результат.ПодборОбъектов.ТекстЗапроса);
				Для Каждого Параметр ИЗ Результат.ПодборОбъектов.ПараметрыЗапроса Цикл
					ЗапросПодбора.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
				КонецЦикла;
				
				об.Объекты.Загрузить(ЗапросПодбора.Выполнить().Выгрузить());
				
			КонецПопытки;
			
			
			Если Об.Объекты.Количество() > 0 Тогда
				Попытка
					Об.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;	
			
			
		Иначе
			Об = Документы.РаспределениеПоНагрузке.СоздатьДокумент();
			Об.Организация = Результат.Ссылка.Организация;
			Об.Дата = ТекущаяДатаСеанса();
			Об.Ответственный = Результат.Ссылка.Пользователь;
			Об.ТипСотрудника = Результат.Ссылка.ТипСотрудника;
			Об.РаспределятьПоДолям = Результат.Ссылка.РаспределятьПоДолям;
			Об.Автор = Результат.Ссылка.Пользователь;
			Если ЗначениеЗаполнено(Результат.Ссылка.Сотрудники) Тогда
				Об.Сотрудники.Загрузить(Результат.Ссылка.Сотрудники.Выгрузить());
			КонецЕсли;
			
			
			Попытка
				Настройки = Результат.ПодборОбъектов.Настройка.Получить()[0];
				Схема = Результат.ПодборОбъектов.Настройка.Получить()[1];
				
				КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
				МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
				
				ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
				
				ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
				
				ТаблицаРезультат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
				об.Объекты.Загрузить(ТаблицаРезультат);
				
			Исключение
				ЗапросПодбора = Новый Запрос(Результат.ПодборОбъектов.ТекстЗапроса);
				Для Каждого Параметр ИЗ Результат.ПодборОбъектов.ПараметрыЗапроса Цикл
					ЗапросПодбора.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
				КонецЦикла;
				
				об.Объекты.Загрузить(ЗапросПодбора.Выполнить().Выгрузить());
				
			КонецПопытки;
			
			Об.ВыполнитьРаспределение();
			
			Если Об.Объекты.Количество() > 0 Тогда
				Попытка
					Об.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьИсториюДанных() Экспорт
	ИсторияДанных.ОбновитьИсторию();	
КонецПроцедуры

Процедура СинхронизацияСЦКТ() Экспорт
	Попытка
		Соединитель = Новый COMОбъект("V82.COMConnector");
		ОбъектЦКТ = Соединитель.Connect(РаботаСЦКТСервер.СтрокаПодключенияКЦКТ());	
	Исключение
		Возврат;
	КонецПопытки;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	КампанииОбзвона.Ссылка,
	|	КампанииОбзвона.КодВЦКТ
	|ИЗ
	|	БизнесПроцесс.КампанииОбзвона КАК КампанииОбзвона
	|ГДЕ
	|	КампанииОбзвона.Стартован = ИСТИНА
	|	И КампанииОбзвона.Завершен = ЛОЖЬ");
	Результат = Запрос.Выполнить().Выбрать();	
	Пока Результат.Следующий() Цикл
		ВсеВыполнены = Истина;
		ОбъектБП = Результат.Ссылка.ПолучитьОбъект();
		Для Каждого Элемент Из ОбъектБП.ДолговыеОбязательства Цикл
			Если Элемент.Результат = "" Тогда
				Элемент.Результат = ОбъектЦКТ.КонтактЦентрВС.ПолучитьРезультатЗадачи(Элемент.УИД);
				Если Элемент.Результат = "" Тогда
					ВсеВыполнены = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		
		Если ВсеВыполнены Тогда
			ОбъектБП.Стартован = Ложь;
			ОбъектБП.Завершен = Истина;
		КонецЕсли;
		ОбъектБП.Записать();
	КонецЦикла;	
КонецПроцедуры

Процедура СинхронизацияСУЗРегл() Экспорт
	СинхронизацияСУЗ();
КонецПроцедуры

Процедура СинхронизацияСУЗ(РегламентноеДействиеСсылка = Неопределено) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ХранилищеВнешнихОбработок.Ссылка,
	|	ХранилищеВнешнихОбработок.Расписание,
	|	ЕСТЬNULL(РегистрРегламентныеДействияПоКатегориям.ДатаНачалаПоследнегоЗапуска, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаНачалаПоследнегоЗапуска,
	|	ЕСТЬNULL(РегистрРегламентныеДействияПоКатегориям.ДатаЗавершенияПоследнегоЗапуска, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаЗавершенияПоследнегоЗапуска,
	|	ХранилищеВнешнихОбработок.Хранилище,
	|	ХранилищеВнешнихОбработок.ИмяОбработки,
	|	ХранилищеВнешнихОбработок.Внутренний
	|ИЗ
	|	Справочник.ХранилищеВнешнихОбработок КАК ХранилищеВнешнихОбработок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентныеДействияПоКатегориям КАК РегистрРегламентныеДействияПоКатегориям
	|		ПО (РегистрРегламентныеДействияПоКатегориям.РегламентноеДействие = ХранилищеВнешнихОбработок.Ссылка)
	|ГДЕ
	|	(&РегламентноеДействиеСсылка = НЕОПРЕДЕЛЕНО
	|				И ХранилищеВнешнихОбработок.Используется
	|			ИЛИ ХранилищеВнешнихОбработок.Ссылка = &РегламентноеДействиеСсылка)");
	Запрос.УстановитьПараметр("РегламентноеДействиеСсылка", РегламентноеДействиеСсылка);
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Расписание = Результат.Расписание.Получить();
		Если Расписание <> Неопределено И (РегламентноеДействиеСсылка <> Неопределено ИЛИ
			Расписание.ТребуетсяВыполнение(, Результат.ДатаНачалаПоследнегоЗапуска, 
			Результат.ДатаЗавершенияПоследнегоЗапуска)) Тогда
			Набор = РегистрыСведений.РегламентныеДействияПоКатегориям.СоздатьМенеджерЗаписи();
			Набор.РегламентноеДействие = Результат.Ссылка;
			Набор.ДатаНачалаПоследнегоЗапуска = ТекущаяДатаСеанса();
			
			//
			НаборСообщ = РегистрыСведений.СообщенияРегламентныхЗаданий.СоздатьМенеджерЗаписи();
			НаборСообщ.Период = Набор.ДатаНачалаПоследнегоЗапуска;
			НаборСообщ.Регламент = Результат.Ссылка;
			
			Если Результат.Внутренний Тогда
				Попытка
					Об = Вычислить("Обработки." + Результат.ИмяОбработки + ".Создать()");
				Исключение
					НаборСообщ.Сообщение = ОписаниеОшибки();
				КонецПопытки;
			Иначе
				АдресХранилища = ПоместитьВоВременноеХранилище(Результат.Хранилище.Получить(), Новый УникальныйИдентификатор());
				Попытка
					ВнешниеОбработки.Подключить(АдресХранилища,, Ложь);
				Исключение
					НаборСообщ.Сообщение = ОписаниеОшибки();
				КонецПопытки;	
				
				Если НаборСообщ.Сообщение = "" Тогда
					Попытка
						Об = ВнешниеОбработки.Создать(Результат.ИмяОбработки);
					Исключение
						НаборСообщ.Сообщение = ОписаниеОшибки();
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			
			//
			Если НаборСообщ.Сообщение = "" Тогда
				Попытка
					Об.РегламентноеЗадание(НаборСообщ);
				Исключение
					НаборСообщ.Сообщение = НаборСообщ.Сообщение + Символы.ПС + Символы.ПС + ОписаниеОшибки();
				КонецПопытки;
			КонецЕсли;
			
			Если НаборСообщ.Сообщение = "" Тогда
				НаборСообщ.Сообщение = "Выполнено.";
			КонецЕсли;
			
			Попытка
				НаборСообщ.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
				Прервать;
			КонецПопытки;
			
			//
			Набор.ДатаЗавершенияПоследнегоЗапуска = НаборСообщ.Период;
			Попытка
				Набор.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;		
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

Процедура КонтрольБП() Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	БизнесПроцессыВыполненныеСтрелки.Ссылка
	|ПОМЕСТИТЬ БП
	|ИЗ
	|	БизнесПроцесс.БизнесПроцессы.ВыполненныеСтрелки КАК БизнесПроцессыВыполненныеСтрелки
	|ГДЕ
	|	БизнесПроцессыВыполненныеСтрелки.ДатаВыполнения <= &ТекДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БП.Ссылка,
	|	БизнесПроцессы.Объект
	|ПОМЕСТИТЬ БП_2
	|ИЗ
	|	БП КАК БП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.БизнесПроцессы КАК БизнесПроцессы
	|		ПО БП.Ссылка = БизнесПроцессы.Ссылка
	|			И (БизнесПроцессы.Стартован)
	|			И (НЕ БизнесПроцессы.Завершен)
	|			И (НЕ БизнесПроцессы.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ БП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БП_2.Ссылка,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(БП_2.Объект) = ТИП(Справочник.ИсполнительныеДокументы)
	|			ТОГДА ИсполнительныеДокументы.Владелец
	|		ИНАЧЕ БП_2.Объект
	|	КОНЕЦ КАК Объект
	|ПОМЕСТИТЬ БП_3
	|ИЗ
	|	БП_2 КАК БП_2
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсполнительныеДокументы КАК ИсполнительныеДокументы
	|		ПО (ТИПЗНАЧЕНИЯ(БП_2.Объект) = ТИП(Справочник.ИсполнительныеДокументы))
	|			И БП_2.Объект = ИсполнительныеДокументы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ БП_2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БП_3.Ссылка
	|ИЗ
	|	БП_3 КАК БП_3
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОбъектыВРаботе.Остатки(&ТекДата, Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК ОбъектыВРаботеОстатки
	|		ПО БП_3.Объект = ОбъектыВРаботеОстатки.Объект");
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДатаСеанса());
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Об = Результат.Ссылка.ПолучитьОбъект();
		Отказ = Ложь;
		Об.ПродолжитьВыполнениеБП(Отказ);
	КонецЦикла;
	
	//Автовыполнение
	Запрос.Текст = "ВЫБРАТЬ
	|	ТипыМероприятий.Ссылка,
	|	ТипыМероприятий.АвтоВыполнение
	|ПОМЕСТИТЬ ТипыМ
	|ИЗ
	|	Справочник.ТипыМероприятий КАК ТипыМероприятий
	|ГДЕ
	|	ТипыМероприятий.АвтоВыполнение <> ЗНАЧЕНИЕ(Справочник.РезультатыМероприятий.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Мероприятие.Ссылка,
	|	ТипыМ.АвтоВыполнение
	|ИЗ
	|	ТипыМ КАК ТипыМ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.Мероприятие КАК Мероприятие
	|		ПО ТипыМ.Ссылка = Мероприятие.ТипМероприятия
	|			И (Мероприятие.ПланируемаяДата < &ТекДата)
	|			И (НЕ Мероприятие.ПометкаУдаления)
	|			И (НЕ Мероприятие.Выполнена)
	|			И (Мероприятие.БизнесПроцесс = ЗНАЧЕНИЕ(БизнесПроцесс.БизнесПроцессы.ПустаяСсылка)
	|				ИЛИ НЕ Мероприятие.БизнесПроцесс.ПометкаУдаления)";						  
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Об = Результат.Ссылка.ПолучитьОбъект();
		Об.Результат = Результат.АвтоВыполнение;
		Отказ = Ложь;
		Об.ВыполнитьМероприятие(Отказ);
	КонецЦикла;	
КонецПроцедуры

Процедура ЗагрузкаРеестров() Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	НастройкиАвтозагрузки.Ссылка,
	|	НастройкиАвтозагрузки.Организация,
	|	НастройкиАвтозагрузки.Автор,
	|	НастройкиАвтозагрузки.НастройкаСоответствий,
	|	НастройкиАвтозагрузки.КаталогФайловДляОбработки,
	|	НастройкиАвтозагрузки.КаталогПеремещенныхФайлов,
	|	НастройкиАвтозагрузки.КаталогОшибочныхФайлов,
	|	НастройкиАвтозагрузки.ОбновлятьРанееЗаписанные
	|ИЗ
	|	Справочник.НастройкиАвтозагрузки КАК НастройкиАвтозагрузки
	|ГДЕ
	|	НастройкиАвтозагрузки.ПометкаУдаления = ЛОЖЬ
	|	И НастройкиАвтозагрузки.Используется = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	НастройкиАвтозагрузки.Приоритет");
	Результат = Запрос.Выполнить().Выбрать();
	
	
	МассивСообщений = Новый Массив();
	МаскаРеестров = Новый Массив(3);
	МаскаРеестров[0] = "*.xls";
	МаскаРеестров[1] =  "*.xlsx"; 
	МаскаРеестров[2] = "*.ods";
	
	
	Пока Результат.Следующий() Цикл   
		ТД = Новый ТекстовыйДокумент;
		
		Для Каждого ЭлементМаски из МаскаРеестров цикл
			ВыполнитьЗагрузкуРеестров(Результат.Организация, Результат.Автор, Результат.НастройкаСоответствий, Результат.КаталогФайловДляОбработки, Результат.КаталогПеремещенныхФайлов, Результат.КаталогОшибочныхФайлов, Результат.ОбновлятьРанееЗаписанные, ЭлементМаски, ТД);
			ИмяФайла = Результат.КаталогОшибочныхФайлов + "\Ошибки регламентной загрузки данных от " + СтрЗаменить(Строка(ТекущаяДатаСеанса()), ":", "_") + ".txt";
			Если ТД.КоличествоСтрок() > 0 Тогда
				ТД.Записать(ИмяФайла);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуРеестров(Организация,
	Автор,
	НастройкаСоответствий,
	КаталогФайловДляОбработки,
	КаталогПеремещенныхФайлов,
	КаталогОшибочныхФайлов,
	ОбновлятьРанееЗаписанные,
	Маска,
	ТД) Экспорт
	
	Логер = БЛогер_Логирование.Создать();
	АвтоЗагрузчик = Справочники.НастройкиАвтозагрузки;
	
	Реестры = АвтоЗагрузчик.НайтиРеестры(
	КаталогФайловДляОбработки,
	Маска
	);
	
	ОбщиеДанныеЗагрузки = Новый Структура;
	ОбщиеДанныеЗагрузки.Вставить("Организация", Организация);
	ОбщиеДанныеЗагрузки.Вставить("Автор", Автор);
	ОбщиеДанныеЗагрузки.Вставить("ОбновлятьРанееЗаписанные", ОбновлятьРанееЗаписанные);
	ОбщиеДанныеЗагрузки.Вставить("Дата", ТекущаяДатаСеанса());
	
	Для каждого Реестр Из Реестры Цикл
		
		ПапкаПеремещения = КаталогПеремещенныхФайлов;
		ОбщиеДанныеЗагрузки.Вставить("Файл", Реестр);
		
		Ответ = АвтоЗагрузчик.ПрочитатьРеестрВТабличныйДокумент(Реестр);
		Если Не Ответ["Результат"] Тогда
			
			ТД.ДобавитьСтроку(Ответ["Ошибка"]);
			ТД.ДобавитьСтроку(Ответ["СтекОшибки"]);
			БЛогер_Логирование.Добавить(
			Логер,
			Ответ["Ошибка"],
			Перечисления.БЛогер_Уровни.Ошибка
			);
			Продолжить;
			
		КонецЕсли;
		
		ПолеИсходнойТаблицы = Ответ["Таблица"];
		
		ОбщиеДанныеЗагрузки.Вставить("Комментарий", Реестр.ПолноеИмя);
		
		Попытка
			
			ДанныеЗагрузки = АвтоЗагрузчик.ОбщиеНастройки(
			НастройкаСоответствий,
			ОбщиеДанныеЗагрузки
			);
			
			АвтоЗагрузчик.ОбработатьНастройку(
			НастройкаСоответствий,
			ДанныеЗагрузки,
			ПолеИсходнойТаблицы
			);
			
		Исключение
			ТД.ДобавитьСтроку("Не удалось загрузить файл");
			ДанныеОшибки = АвтоЗагрузчик.ОбработатьОшибку(
			НастройкаСоответствий,
			ИнформацияОбОшибке()
			);
			Для каждого ЧастьОписанияОшибки Из ДанныеОшибки Цикл
				
				ТД.ДобавитьСтроку(ЧастьОписанияОшибки);
				
			КонецЦикла;
			
			БЛогер_Логирование.Добавить(
			Логер,
			"Не удалось загрузить файл",
			Перечисления.БЛогер_Уровни.Ошибка
			);
			
			ПапкаПеремещения = КаталогОшибочныхФайлов;
		КонецПопытки;
		
		Попытка
			
			ПереместитьФайл(Реестр.ПолноеИмя, ПапкаПеремещения + ПолучитьРазделительПути() + Реестр.Имя);
			
		Исключение
			ОписаниеОшибки = УправленияСообщениями.СформироватьТекстОшибки(
			ИнформацияОбОшибке(),
			"Не удалось переместить файл"
			);
			
			ТД.ДобавитьСтроку(ОписаниеОшибки["Выражение"]);
			ТД.ДобавитьСтроку(ОписаниеОшибки["Стек"]);
			
			БЛогер_Логирование.Добавить(
			Логер,
			ОписаниеОшибки["Выражение"],
			Перечисления.БЛогер_Уровни.Ошибка
			);
		КонецПопытки;
		
	КонецЦикла;
	
	БЛогер_Логирование.Вывести(Логер, ТекущаяДатаСеанса());
	
КонецПроцедуры

Процедура ВыгрузитьДанныеВНБКИ() Экспорт
	РучнаяВыгрузка = Ложь;
	ОбъектОбработки = Обработки.ВыгрузкаВНБКИ.Создать();
	ОбъектОбработки.ВыгрузитьДанныеВФайл(РучнаяВыгрузка); 
КонецПроцедуры

Процедура Mandarin_Автосписание() Экспорт
	Бит_Мандарин.АвтосписаниеПоГрафику();
КонецПроцедуры

Процедура НБКИRUTDFСформироватьМассовыйОтчет() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъектыВРаботеОстатки.Объект КАК ОбъектУчета,
	|	ОбъектыВРаботеОстатки.Объект.Должник КАК Должник
	|ИЗ
	|	РегистрНакопления.ОбъектыВРаботе.Остатки(, Сотрудник <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК ОбъектыВРаботеОстатки";
	
	РезультатЗапроса = Запрос.Выполнить(); 
	Если НЕ РезультатЗапроса.Пустой() Тогда  
		ДокументОтчет = Документы.НБКИДокументRUTDF.СоздатьДокумент(); 
		ДокументОтчет.Дата = ТекущаяДатаСеанса();
		ДокументОтчет.Операция = Перечисления.ВидыОперацийОтчетаRUTDF.B;
		ДокументОтчет.Принято = Перечисления.СтатусыОтчетаНБКИ.ВОбработке;
		ДокументОтчет.НастройкаВыгрузки = Справочники.НастройкиВыгрузкиНБКИ_RUTDF.НайтиПоРеквизиту("ДляМассовойВыгрузки", Истина); 
		ИмяПользователя = ДокументОтчет.НастройкаВыгрузки.ИмяПользователяНБКИ;
		ДокументОтчет.ИмяФайла = Строка(ИмяПользователя) + "_" + КредитныеИстории.СформироватьСтрокуДаты(ДокументОтчет.Дата); 
		ДокументОтчет.тчОбновляемыеЗаписиB.Загрузить(РезультатЗапроса.Выгрузить());
		ТекстСообщения = "";
		ТекстовыйФайлОбщий = ДокументОтчет.СформироватьФайлыВыгрузкиRUTDF(ТекстСообщения); 
		
		Путь = ДокументОтчет.НастройкаВыгрузки.КаталогДляВыгрузки + "\" + ДокументОтчет.ИмяФайла;		
		
		Попытка
			ТекстовыйФайлОбщий.Записать(Путь, КодировкаТекста.ANSI, ,Ложь); 
			ДокументОтчет.Комментарий = ТекстСообщения;
		Исключение    
			ДокументОтчет.Комментарий = "Произошла ошибка сохранения файла!";
		КонецПопытки; 
		ДокументОтчет.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;	
	
КонецПроцедуры    

Процедура ЕдиныйФорматКИМассоваяВыгрузка() Экспорт  
	
	ЗапросНастройки = Новый Запрос;
	ЗапросНастройки.Текст = 
	"ВЫБРАТЬ
	|	НастройкиВыгрузкиКредитныхИсторий.Ссылка КАК НастройкаСсылка,
	|	НастройкиВыгрузкиКредитныхИсторий.ВерсияФормата.БКИ КАК ВерсияФорматаБКИ,
	|	НастройкиВыгрузкиКредитныхИсторий.РеквизитПризнакВыгрузкиВБюро КАК РеквизитПризнакВыгрузкиВБюро,
	|	НастройкиВыгрузкиКредитныхИсторий.КаталогДляВыгрузки КАК КаталогДляВыгрузки
	|ИЗ
	|	Справочник.НастройкиВыгрузкиКредитныхИсторий КАК НастройкиВыгрузкиКредитныхИсторий
	|ГДЕ
	|	НЕ НастройкиВыгрузкиКредитныхИсторий.ПометкаУдаления
	|	И НастройкиВыгрузкиКредитныхИсторий.Используется
	|	И НастройкиВыгрузкиКредитныхИсторий.ДляМассовойВыгрузки";
	
	РезультатЗапросаНастройки = ЗапросНастройки.Выполнить();
	
	ВыборкаДетальныеЗаписиНастройки = РезультатЗапросаНастройки.Выбрать();
	
	Пока ВыборкаДетальныеЗаписиНастройки.Следующий() Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДолговыеОбязательстваДополнительныеРеквизиты.Значение КАК ЗначениеПризнакаВыгрузкиВБюро,
		|	ДолговыеОбязательстваДополнительныеРеквизиты.Ссылка КАК Сделка
		|ПОМЕСТИТЬ ПризнакВыгрузкиВБюро
		|ИЗ
		|	Справочник.ДолговыеОбязательства.ДополнительныеРеквизиты КАК ДолговыеОбязательстваДополнительныеРеквизиты
		|ГДЕ
		|	ДолговыеОбязательстваДополнительныеРеквизиты.Свойство = &Свойство
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДополнительныеСведения.Значение,
		|	ДополнительныеСведения.Объект
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Свойство = &Свойство
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сделка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъектыВРаботеОстатки.Объект КАК ОбъектУчета,
		|	ОбъектыВРаботеОстатки.Объект.Должник КАК Должник,
		|	ЕСТЬNULL(ПризнакВыгрузкиВБюро.ЗначениеПризнакаВыгрузкиВБюро, ЛОЖЬ) КАК ЗначениеПризнакаВыгрузкиВБюро
		|ИЗ
		|	РегистрНакопления.ОбъектыВРаботе.Остатки КАК ОбъектыВРаботеОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПризнакВыгрузкиВБюро КАК ПризнакВыгрузкиВБюро
		|		ПО ОбъектыВРаботеОстатки.Объект = ПризнакВыгрузкиВБюро.Сделка
		|ГДЕ
		|	ПризнакВыгрузкиВБюро.ЗначениеПризнакаВыгрузкиВБюро = ИСТИНА"; 
		
		Запрос.УстановитьПараметр("Свойство", ВыборкаДетальныеЗаписиНастройки.РеквизитПризнакВыгрузкиВБюро);
		РезультатЗапроса = Запрос.Выполнить(); 
		
		Если НЕ РезультатЗапроса.Пустой() Тогда  
			ДокументОтчет = Документы.НБКИДокументRUTDF.СоздатьДокумент(); 
			ДокументОтчет.Дата = ТекущаяДатаСеанса();
			ДокументОтчет.Операция = Перечисления.ВидыОперацийОтчетаRUTDF.B;
			ДокументОтчет.Принято = Перечисления.СтатусыОтчетаНБКИ.ВОбработке;
			ДокументОтчет.НастройкаВыгрузки = ВыборкаДетальныеЗаписиНастройки.НастройкаСсылка; 
			ИмяПользователя = ВыборкаДетальныеЗаписиНастройки.НастройкаСсылка.ИдентификаторИсточника;
			
			ДокументОтчет.Комментарий = "Массовая Выгрузка ";
			
			ДокументОтчет.ИмяФайла = ДокументОтчет.СформироватьИмяФайлаПоБКИ(); 
			
			ДокументОтчет.тчОбновляемыеЗаписиB.Загрузить(РезультатЗапроса.Выгрузить());
			ТекстСообщения = "";
			XMLдокумент = ДокументОтчет.СформироватьФайлВыгрузкиXML(ТекстСообщения);
			
			Путь = ВыборкаДетальныеЗаписиНастройки.КаталогДляВыгрузки + "\" + ДокументОтчет.ИмяФайла;		
			
			Попытка
				XMLдокумент.Записать(Путь, КодировкаТекста.UTF8, ,Ложь); 
				ТекстСообщения = "Выгрузка завершена! " + ТекстСообщения; 
				ДокументОтчет.Комментарий = ТекстСообщения;
			Исключение    
				ДокументОтчет.Комментарий = "Произошла ошибка сохранения файла в папку!" + Символы.ПС + ТекстСообщения;
			КонецПопытки; 		
			
			ДокументОтчет.Записать(РежимЗаписиДокумента.Проведение);
			
			ВременныеЗаписиЖурнала = РегистрыСведений.ВременныйЖурналМассовыхВыгрузокКИ.СоздатьНаборЗаписей();
			ВременныеЗаписиЖурнала.Отбор.ДокументОтчет.Установить(ДокументОтчет);
			ВременныеЗаписиЖурнала.Прочитать();
			
			Для Каждого темпЗапись ИЗ ВременныеЗаписиЖурнала Цикл
				ЗаписьЖурнала = РегистрыСведений.ЖурналВыгрузокНБКИRUTDF.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(ЗаписьЖурнала, темпЗапись);
				ЗаписьЖурнала.Записать();
			КонецЦикла;
			
			ВременныеЗаписиЖурнала.Записать();
			
			
		КонецЕсли;	
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ФормированиеСписковАвтообзвона() Экспорт
	// Основной список (дальние регионы)
	
	СписокАвтообзвона = Справочники.СписокДляАвтообзвона.СоздатьЭлемент();
	СписокАвтообзвона.Наименование = "Основной список (дальние регионы) " + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
	
	Запрос = Новый Запрос;
	// Установить параметры в отдельной процедуре
	ФормированиеСписковАвтообзвонаПараметры(Запрос);
	//
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДолговыеОбязательства.Ссылка КАК НомерСтроки,
	|	ПОДСТРОКА(ДолговыеОбязательства.Код, 0, 10) КАК Строка,
	|	КОЛИЧЕСТВО(Мероприятие.Результат.АнализируетсяБлокировщиком) КАК РезультатАнализируетсяБлокировщиком
	|ПОМЕСТИТЬ Дано
	|ИЗ
	|	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.Мероприятие КАК Мероприятие
	|		ПО ДолговыеОбязательства.Ссылка = Мероприятие.Объект
	|ГДЕ
	|	ДолговыеОбязательства.ДополнительныеРеквизиты.Значение.Наименование В (""В работе"", ""Новые"")
	|	И ДолговыеОбязательства.Должник.ЧасовойПояс В (""Antarctica/McMurdo"", ""Antarctica/Casey"", ""AET"", ""Asia/Chita"", ""Asia/Brunei"", ""Antarctica/Davis"")
	|	И ДолговыеОбязательства.ЗапретАвтообзвона = ЛОЖЬ
	|	И Мероприятие.Ссылка ЕСТЬ НЕ NULL 
	|	И ДолговыеОбязательства.Кредитор.Код <> ""F00121332""
	|
	|СГРУППИРОВАТЬ ПО
	|	ДолговыеОбязательства.Ссылка,
	|	ПОДСТРОКА(ДолговыеОбязательства.Код, 0, 10),
	|	Мероприятие.Результат.АнализируетсяБлокировщиком
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(Мероприятие.Дата) < &Вчера И
	|	МАКСИМУМ(Мероприятие.Результат.АнализируетсяБлокировщиком) = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК С,
	|	1 КАК П
	|ПОМЕСТИТЬ Р16
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	1,
	|	10
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	2,
	|	100
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	3,
	|	1000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	4,
	|	10000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	5,
	|	100000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	6,
	|	1000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	7,
	|	10000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	8,
	|	100000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	9,
	|	1000000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	10,
	|	10000000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	11,
	|	100000000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	12,
	|	1000000000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	13,
	|	10000000000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	14,
	|	100000000000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	15,
	|	1000000000000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	16,
	|	10000000000000000
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Дано.НомерСтроки КАК НомерСтроки,
	|	СУММА(А.П * Б.С * ВЫБОР
	|			КОГДА ПОДСТРОКА(Дано.Строка, 1, 17 - А.С) ПОДОБНО ""%.%""
	|				ТОГДА 10
	|			ИНАЧЕ 1
	|		КОНЕЦ) / МИНИМУМ(ВЫБОР
	|			КОГДА НЕ ПОДСТРОКА(Дано.Строка, 1, 17 - А.С) ПОДОБНО ""%.%""
	|				ТОГДА А.П
	|			ИНАЧЕ 100000000000000000
	|		КОНЕЦ) КАК Ответ,
	|	Дано.РезультатАнализируетсяБлокировщиком КАК РезультатАнализируетсяБлокировщиком
	|ПОМЕСТИТЬ Результат
	|ИЗ
	|	Дано КАК Дано,
	|	Р16 КАК А,
	|	Р16 КАК Б
	|ГДЕ
	|	Б.С < 10
	|	И ПОДСТРОКА(Дано.Строка, 17 - А.С, 1) = ПОДСТРОКА(""0123456789"", Б.С + 1, 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	Дано.НомерСтроки,
	|	Дано.РезультатАнализируетсяБлокировщиком
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 400
	|	Результат.НомерСтроки КАК Ссылка,
	|	Результат.Ответ КАК Ответ,
	|	(ВЫРАЗИТЬ(Результат.Ответ / &РандомайзерСлужебный КАК ЧИСЛО(10, 0))) - (ВЫРАЗИТЬ(Результат.Ответ / &РандомайзерСлужебный КАК ЧИСЛО(10, 5))) КАК Поле1,
	|	Результат.РезультатАнализируетсяБлокировщиком КАК РезультатАнализируетсяБлокировщиком
	|ИЗ
	|	Результат КАК Результат
	|
	|УПОРЯДОЧИТЬ ПО
	|	Результат.НомерСтроки.ДатаСоздания УБЫВ";
	
	ВыгрузкаВСписокАвтообзвона(Запрос, СписокАвтообзвона);
	
	// Центрофинанс (дальние регионы)
	
	СписокАвтообзвона = Справочники.СписокДляАвтообзвона.СоздатьЭлемент();
	СписокАвтообзвона.Наименование = "Центрофинанс (дальние регионы) " + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
	
	Запрос = Новый Запрос;
	// Установить параметры в отдельной процедуре
	ФормированиеСписковАвтообзвонаПараметры(Запрос);
	//
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДолговыеОбязательства.Ссылка КАК НомерСтроки,
	|	ПОДСТРОКА(ДолговыеОбязательства.Код, 0, 10) КАК Строка,
	|	КОЛИЧЕСТВО(Мероприятие.Результат.АнализируетсяБлокировщиком) КАК РезультатАнализируетсяБлокировщиком
	|ПОМЕСТИТЬ Дано
	|ИЗ
	|	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.Мероприятие КАК Мероприятие
	|		ПО ДолговыеОбязательства.Ссылка = Мероприятие.Объект
	|ГДЕ
	|	ДолговыеОбязательства.ДополнительныеРеквизиты.Значение.Наименование В (""В работе"", ""Новые"")
	|	И ДолговыеОбязательства.Должник.ЧасовойПояс В (""Antarctica/McMurdo"", ""Antarctica/Casey"", ""AET"", ""Asia/Chita"", ""Asia/Brunei"", ""Antarctica/Davis"")
	|	И ДолговыеОбязательства.ЗапретАвтообзвона = ЛОЖЬ
	|	И Мероприятие.Ссылка ЕСТЬ НЕ NULL
	|	И ДолговыеОбязательства.Кредитор.Код = ""F00121332""
	|
	|СГРУППИРОВАТЬ ПО
	|	ДолговыеОбязательства.Ссылка,
	|	ПОДСТРОКА(ДолговыеОбязательства.Код, 0, 10),
	|	Мероприятие.Результат.АнализируетсяБлокировщиком
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(Мероприятие.Дата) < &Вчера И
	|	МАКСИМУМ(Мероприятие.Результат.АнализируетсяБлокировщиком) = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК С,
	|	1 КАК П
	|ПОМЕСТИТЬ Р16
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	1,
	|	10
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	2,
	|	100
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	3,
	|	1000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	4,
	|	10000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	5,
	|	100000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	6,
	|	1000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	7,
	|	10000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	8,
	|	100000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	9,
	|	1000000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	10,
	|	10000000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	11,
	|	100000000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	12,
	|	1000000000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	13,
	|	10000000000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	14,
	|	100000000000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	15,
	|	1000000000000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	16,
	|	10000000000000000
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Дано.НомерСтроки КАК НомерСтроки,
	|	СУММА(А.П * Б.С * ВЫБОР
	|			КОГДА ПОДСТРОКА(Дано.Строка, 1, 17 - А.С) ПОДОБНО ""%.%""
	|				ТОГДА 10
	|			ИНАЧЕ 1
	|		КОНЕЦ) / МИНИМУМ(ВЫБОР
	|			КОГДА НЕ ПОДСТРОКА(Дано.Строка, 1, 17 - А.С) ПОДОБНО ""%.%""
	|				ТОГДА А.П
	|			ИНАЧЕ 100000000000000000
	|		КОНЕЦ) КАК Ответ,
	|	Дано.РезультатАнализируетсяБлокировщиком КАК РезультатАнализируетсяБлокировщиком
	|ПОМЕСТИТЬ Результат
	|ИЗ
	|	Дано КАК Дано,
	|	Р16 КАК А,
	|	Р16 КАК Б
	|ГДЕ
	|	Б.С < 10
	|	И ПОДСТРОКА(Дано.Строка, 17 - А.С, 1) = ПОДСТРОКА(""0123456789"", Б.С + 1, 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	Дано.НомерСтроки,
	|	Дано.РезультатАнализируетсяБлокировщиком
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 400
	|	Результат.НомерСтроки КАК Ссылка,
	|	Результат.Ответ КАК Ответ,
	|	(ВЫРАЗИТЬ(Результат.Ответ / &РандомайзерСлужебный КАК ЧИСЛО(10, 0))) - (ВЫРАЗИТЬ(Результат.Ответ / &РандомайзерСлужебный КАК ЧИСЛО(10, 5))) КАК Поле1,
	|	Результат.РезультатАнализируетсяБлокировщиком КАК РезультатАнализируетсяБлокировщиком
	|ИЗ
	|	Результат КАК Результат
	|
	|УПОРЯДОЧИТЬ ПО
	|	Результат.НомерСтроки.ДатаСоздания УБЫВ";
	
	ВыгрузкаВСписокАвтообзвона(Запрос, СписокАвтообзвона);
	
	// Основной список (основные регионы)
	
	СписокАвтообзвона = Справочники.СписокДляАвтообзвона.СоздатьЭлемент();
	СписокАвтообзвона.Наименование = "Основной список (основные регионы) " + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
	
	Запрос = Новый Запрос;
	// Установить параметры в отдельной процедуре
	ФормированиеСписковАвтообзвонаПараметры(Запрос);
	//
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДолговыеОбязательства.Ссылка КАК НомерСтроки,
	|	ПОДСТРОКА(ДолговыеОбязательства.Код, 0, 10) КАК Строка,
	|	КОЛИЧЕСТВО(Мероприятие.Результат.АнализируетсяБлокировщиком) КАК РезультатАнализируетсяБлокировщиком
	|ПОМЕСТИТЬ Дано
	|ИЗ
	|	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.Мероприятие КАК Мероприятие
	|		ПО ДолговыеОбязательства.Ссылка = Мероприятие.Объект
	|ГДЕ
	|	ДолговыеОбязательства.ДополнительныеРеквизиты.Значение.Наименование В (""В работе"", ""Новые"")
	|	И ДолговыеОбязательства.Должник.ЧасовойПояс В (""Antarctica/Vostok"", ""Antarctica/Mawson"", ""Asia/Baku"", ""Antarctica/Syowa"", ""EET"")
	|	И ДолговыеОбязательства.ЗапретАвтообзвона = ЛОЖЬ
	|	И Мероприятие.Ссылка ЕСТЬ НЕ NULL
	|	И ДолговыеОбязательства.Кредитор.Код <> ""F00121332""
	|
	|СГРУППИРОВАТЬ ПО
	|	ДолговыеОбязательства.Ссылка,
	|	ПОДСТРОКА(ДолговыеОбязательства.Код, 0, 10),
	|	Мероприятие.Результат.АнализируетсяБлокировщиком
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(Мероприятие.Дата) < &Вчера И
	|	МАКСИМУМ(Мероприятие.Результат.АнализируетсяБлокировщиком) = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК С,
	|	1 КАК П
	|ПОМЕСТИТЬ Р16
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	1,
	|	10
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	2,
	|	100
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	3,
	|	1000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	4,
	|	10000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	5,
	|	100000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	6,
	|	1000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	7,
	|	10000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	8,
	|	100000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	9,
	|	1000000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	10,
	|	10000000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	11,
	|	100000000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	12,
	|	1000000000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	13,
	|	10000000000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	14,
	|	100000000000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	15,
	|	1000000000000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	16,
	|	10000000000000000
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Дано.НомерСтроки КАК НомерСтроки,
	|	СУММА(А.П * Б.С * ВЫБОР
	|			КОГДА ПОДСТРОКА(Дано.Строка, 1, 17 - А.С) ПОДОБНО ""%.%""
	|				ТОГДА 10
	|			ИНАЧЕ 1
	|		КОНЕЦ) / МИНИМУМ(ВЫБОР
	|			КОГДА НЕ ПОДСТРОКА(Дано.Строка, 1, 17 - А.С) ПОДОБНО ""%.%""
	|				ТОГДА А.П
	|			ИНАЧЕ 100000000000000000
	|		КОНЕЦ) КАК Ответ,
	|	Дано.РезультатАнализируетсяБлокировщиком КАК РезультатАнализируетсяБлокировщиком
	|ПОМЕСТИТЬ Результат
	|ИЗ
	|	Дано КАК Дано,
	|	Р16 КАК А,
	|	Р16 КАК Б
	|ГДЕ
	|	Б.С < 10
	|	И ПОДСТРОКА(Дано.Строка, 17 - А.С, 1) = ПОДСТРОКА(""0123456789"", Б.С + 1, 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	Дано.НомерСтроки,
	|	Дано.РезультатАнализируетсяБлокировщиком
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2600
	|	Результат.НомерСтроки КАК Ссылка,
	|	Результат.Ответ КАК Ответ,
	|	(ВЫРАЗИТЬ(Результат.Ответ / &РандомайзерСлужебный КАК ЧИСЛО(10, 0))) - (ВЫРАЗИТЬ(Результат.Ответ / &РандомайзерСлужебный КАК ЧИСЛО(10, 5))) КАК Поле1,
	|	Результат.РезультатАнализируетсяБлокировщиком КАК РезультатАнализируетсяБлокировщиком
	|ИЗ
	|	Результат КАК Результат
	|
	|УПОРЯДОЧИТЬ ПО
	|	Результат.НомерСтроки.ДатаСоздания УБЫВ";
	
	ВыгрузкаВСписокАвтообзвона(Запрос, СписокАвтообзвона);
	
	// Центрофинанс (основные регионы)
	
	СписокАвтообзвона = Справочники.СписокДляАвтообзвона.СоздатьЭлемент();
	СписокАвтообзвона.Наименование = "Центрофинанс (основные регионы) " + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
	
	Запрос = Новый Запрос;
	// Установить параметры в отдельной процедуре
	ФормированиеСписковАвтообзвонаПараметры(Запрос);
	//
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДолговыеОбязательства.Ссылка КАК НомерСтроки,
	|	ПОДСТРОКА(ДолговыеОбязательства.Код, 0, 10) КАК Строка,
	|	КОЛИЧЕСТВО(Мероприятие.Результат.АнализируетсяБлокировщиком) КАК РезультатАнализируетсяБлокировщиком
	|ПОМЕСТИТЬ Дано
	|ИЗ
	|	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.Мероприятие КАК Мероприятие
	|		ПО ДолговыеОбязательства.Ссылка = Мероприятие.Объект
	|ГДЕ
	|	ДолговыеОбязательства.ДополнительныеРеквизиты.Значение.Наименование В (""В работе"", ""Новые"")
	|	И ДолговыеОбязательства.Должник.ЧасовойПояс В (""Antarctica/Vostok"", ""Antarctica/Mawson"", ""Asia/Baku"", ""Antarctica/Syowa"", ""EET"")
	|	И ДолговыеОбязательства.ЗапретАвтообзвона = ЛОЖЬ
	|	И Мероприятие.Ссылка ЕСТЬ НЕ NULL
	|	И ДолговыеОбязательства.Кредитор.Код = ""F00121332""
	|
	|СГРУППИРОВАТЬ ПО
	|	ДолговыеОбязательства.Ссылка,
	|	ПОДСТРОКА(ДолговыеОбязательства.Код, 0, 10),
	|	Мероприятие.Результат.АнализируетсяБлокировщиком
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(Мероприятие.Дата) < &Вчера И
	|	МАКСИМУМ(Мероприятие.Результат.АнализируетсяБлокировщиком) = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК С,
	|	1 КАК П
	|ПОМЕСТИТЬ Р16
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	1,
	|	10
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	2,
	|	100
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	3,
	|	1000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	4,
	|	10000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	5,
	|	100000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	6,
	|	1000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	7,
	|	10000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	8,
	|	100000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	9,
	|	1000000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	10,
	|	10000000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	11,
	|	100000000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	12,
	|	1000000000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	13,
	|	10000000000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	14,
	|	100000000000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	15,
	|	1000000000000000
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	16,
	|	10000000000000000
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Дано.НомерСтроки КАК НомерСтроки,
	|	СУММА(А.П * Б.С * ВЫБОР
	|			КОГДА ПОДСТРОКА(Дано.Строка, 1, 17 - А.С) ПОДОБНО ""%.%""
	|				ТОГДА 10
	|			ИНАЧЕ 1
	|		КОНЕЦ) / МИНИМУМ(ВЫБОР
	|			КОГДА НЕ ПОДСТРОКА(Дано.Строка, 1, 17 - А.С) ПОДОБНО ""%.%""
	|				ТОГДА А.П
	|			ИНАЧЕ 100000000000000000
	|		КОНЕЦ) КАК Ответ,
	|	Дано.РезультатАнализируетсяБлокировщиком КАК РезультатАнализируетсяБлокировщиком
	|ПОМЕСТИТЬ Результат
	|ИЗ
	|	Дано КАК Дано,
	|	Р16 КАК А,
	|	Р16 КАК Б
	|ГДЕ
	|	Б.С < 10
	|	И ПОДСТРОКА(Дано.Строка, 17 - А.С, 1) = ПОДСТРОКА(""0123456789"", Б.С + 1, 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	Дано.НомерСтроки,
	|	Дано.РезультатАнализируетсяБлокировщиком
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2600
	|	Результат.НомерСтроки КАК Ссылка,
	|	Результат.Ответ КАК Ответ,
	|	(ВЫРАЗИТЬ(Результат.Ответ / &РандомайзерСлужебный КАК ЧИСЛО(10, 0))) - (ВЫРАЗИТЬ(Результат.Ответ / &РандомайзерСлужебный КАК ЧИСЛО(10, 5))) КАК Поле1,
	|	Результат.РезультатАнализируетсяБлокировщиком КАК РезультатАнализируетсяБлокировщиком
	|ИЗ
	|	Результат КАК Результат
	|
	|УПОРЯДОЧИТЬ ПО
	|	Результат.НомерСтроки.ДатаСоздания УБЫВ";
	
	ВыгрузкаВСписокАвтообзвона(Запрос, СписокАвтообзвона);
	
	// Список по новым и необработанным (дальние регионы)
	
	СписокАвтообзвона = Справочники.СписокДляАвтообзвона.СоздатьЭлемент();
	СписокАвтообзвона.Наименование = "Новые и необработанные (дальние регионы) " + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДолговыеОбязательства.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	|		ПРАВОЕ СОЕДИНЕНИЕ Задача.Мероприятие КАК Мероприятие
	|		ПО ДолговыеОбязательства.Ссылка = Мероприятие.Объект
	|ГДЕ
	|	ДолговыеОбязательства.ДополнительныеРеквизиты.Значение.Наименование В (""В работе"", ""Новые"")
	|	И ДолговыеОбязательства.Должник.ЧасовойПояс В (""Antarctica/McMurdo"", ""Antarctica/Casey"", ""AET"", ""Asia/Chita"", ""Asia/Brunei"", ""Antarctica/Davis"")
	|	И ДолговыеОбязательства.ЗапретАвтообзвона = ЛОЖЬ
	|	И Мероприятие.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДолговыеОбязательства.ДатаСоздания УБЫВ";
	
	ВыгрузкаВСписокАвтообзвонаБезКонтроляСобытий(Запрос, СписокАвтообзвона);
	
	// Список по новым и необработанным (основные регионы)
	
	СписокАвтообзвона = Справочники.СписокДляАвтообзвона.СоздатьЭлемент();
	СписокАвтообзвона.Наименование = "Новые и необработанные (основные регионы) " + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДолговыеОбязательства.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	|		ПРАВОЕ СОЕДИНЕНИЕ Задача.Мероприятие КАК Мероприятие
	|		ПО ДолговыеОбязательства.Ссылка = Мероприятие.Объект
	|ГДЕ
	|	ДолговыеОбязательства.ДополнительныеРеквизиты.Значение.Наименование В (""В работе"", ""Новые"")
	|	И ДолговыеОбязательства.Должник.ЧасовойПояс В (""Antarctica/Vostok"", ""Antarctica/Mawson"", ""Asia/Baku"", ""Antarctica/Syowa"", ""EET"")
	|	И ДолговыеОбязательства.ЗапретАвтообзвона = ЛОЖЬ
	|	И Мероприятие.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДолговыеОбязательства.ДатаСоздания УБЫВ";
	
	ВыгрузкаВСписокАвтообзвонаБезКонтроляСобытий(Запрос, СписокАвтообзвона);
	
КонецПроцедуры

Процедура ВыгрузкаВСписокАвтообзвона(Знач Запрос, Знач СписокАвтообзвона) Экспорт
	
	Перем Выборка, Договор, Должник, РезультатЗапроса, стр, стрТел;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Договор = Выборка.Ссылка.ПолучитьОбъект();
		Если НЕ КонтрольСобытий.РезультативныеЗвонки(Договор.Должник) Тогда
			// Заблокировать ДО для автообзвона
			Договор.ЗапретАвтообзвона = Истина;
			Договор.Записать();
			//
			стр = СписокАвтообзвона.Объекты.Добавить();
			стр.Объект = Договор.Ссылка;
			Должник = Договор.Должник.ПолучитьОбъект();
			Для каждого стр из Должник.Телефоны Цикл
				Если строка(стр.ВидТелефона) = "Мобильный" Тогда 
					стрТел = СписокАвтообзвона.СписокДляАО.Добавить();
					стрТел.Должник = Договор.Должник;
					// Фикс для БИТ.АТС
					стрТел.НомерТелефона = бит_ТелефонияКлиентСервер.ОчиститьНомерТолькоЦифры(стр.Номер);
					//
					стрТел.СтрокаАвтообзвона = Договор;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//СписокАвтообзвона.Записать();
	ЗагрузитьНаСервере(СписокАвтообзвона);
	СписокАвтообзвона.Записать();
	
КонецПроцедуры

Процедура ВыгрузкаВСписокАвтообзвонаБезКонтроляСобытий(Знач Запрос, Знач СписокАвтообзвона)
	
	Перем Выборка, Договор, Должник, РезультатЗапроса, стр, стрТел;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Договор = Выборка.Ссылка.ПолучитьОбъект();
		// Заблокировать ДО для автообзвона
		Договор.ЗапретАвтообзвона = Истина;
		Договор.Записать();
		//
		стр = СписокАвтообзвона.Объекты.Добавить();
		стр.Объект = Договор.Ссылка;
		Должник = Договор.Должник.ПолучитьОбъект();
		Для каждого стр из Должник.Телефоны Цикл
			Если строка(стр.ВидТелефона) = "Мобильный" Тогда 
				стрТел = СписокАвтообзвона.СписокДляАО.Добавить();
				стрТел.Должник = Договор.Должник;
				// Фикс для БИТ.АТС
				стрТел.НомерТелефона = бит_ТелефонияКлиентСервер.ОчиститьНомерТолькоЦифры(стр.Номер);
				//
				стрТел.СтрокаАвтообзвона = Договор;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//СписокАвтообзвона.Записать();
	ЗагрузитьНаСервере(СписокАвтообзвона);
	СписокАвтообзвона.Записать();
	
КонецПроцедуры

Процедура ФормированиеСписковАвтообзвонаПараметры(Знач Запрос) Экспорт
	
	Перем Дата;
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	СлучайноеЧисло = ГСЧ.СлучайноеЧисло(1000, 5000);
	
	Дата = День(ТекущаяДата()) * СлучайноеЧисло;
	Запрос.УстановитьПараметр("РандомайзерСлужебный", Дата);
	
	Дата = НачалоДня(ТекущаяДата()) - 86400;
	Запрос.УстановитьПараметр("Вчера", Дата);
	
КонецПроцедуры	

//&НаСервере
//Процедура ПроверитьID()
//	Если Объект.IDSQL = 0 Тогда
//		Элементы.Удалить.Доступность = Ложь;
//		Элементы.Обновить.Доступность = Ложь;
//		Элементы.Загрузить.Доступность = Истина;
//	Иначе
//		Элементы.Удалить.Доступность = Истина;
//		Элементы.Обновить.Доступность = Истина;
//		Элементы.Загрузить.Доступность = Ложь;
//	КонецЕсли;
//КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНаСервере(Объект)
	
	//Если ПроверитьЗаполнение() тогда
	СтрокаСоединения   =  ПолучитьСоединение();	
	Соединение = Новый COMОбъект("ADODB.Connection");
	Соединение.ConnectionString = (СтрокаСоединения);
	Попытка
		Соединение.Open();
		Сообщить("Производится добавление списка в АТС...");
	Исключение
		Сообщить("Добавление списка в АТС не может быть осуществлено!");
	КонецПопытки;
	Попытка	
		СтрPhoneList = "REPLACE INTO `autodialer_phonelists` SET `name`  ="+""""+Объект.Наименование+""""+"";
		Соединение.Execute(СтрPhoneList);
		//Сообщить(СтрPhoneList);
		ЗаписиSQL = Новый ComObject("ADODB.RecordSet"); 
		ЗаписиSQL.ActiveConnection = Соединение; 
		ЗапросНомерСписка  = "SELECT max(id) from autodialer_phonelists";
		ЗаписиSQL = Соединение.Execute(ЗапросНомерСписка);
		// Получить ID целым числом
		НомерСписка = СтрЗаменить(ЗаписиSQL.Fields(0).Value, Символы.НПП, "");
		Для к = 0 по Объект.СписокДляАО.Количество()-1 цикл
			СтрNumbers = "REPLACE INTO `autodialer_phones` SET `phonelist_id`="+""""+НомерСписка+""""+",`client`="+""""+Объект.СписокДляАО[к].СтрокаАвтообзвона+""""+",`number`  ="+""""+Объект.СписокДляАО[к].НомерТелефона+""""+" "; 
			Соединение.Execute(СтрNumbers);
			//Сообщить(СтрNumbers);
		КонецЦикла;
		Объект.IDSQL = НомерСписка;
		Сообщить("Список добавлен на АТС");
		Соединение.Close();
		//ЭтотОбъект.Записать();
	Исключение
		Сообщить("Произошла ошибка добавления списка на АТС");
	КонецПопытки;
	//Иначе
	//Сообщить("Заполните обязательные поля!");
	//КонецЕсли;
КонецПроцедуры

Процедура УдалениеСписковАвтообзвона() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписокДляАвтообзвона.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СписокДляАвтообзвона КАК СписокДляАвтообзвона";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		// Получить ID целым числом
		НомерСписка = СтрЗаменить(Объект.IDSQL, Символы.НПП, "");
		СтрокаСоединения   =  ПолучитьСоединение();	
		Соединение = Новый COMОбъект("ADODB.Connection");
		Соединение.ConnectionString = (СтрокаСоединения);
		Попытка
			Соединение.Open();
		Исключение
			Сообщить("Удаление списка из АТС не может быть осуществлено!");
		КонецПопытки;
		Попытка
			ЗаписиSQL = Новый ComObject("ADODB.RecordSet"); 
			ЗаписиSQL.ActiveConnection = Соединение; 
			ЗапросНомерСписка  = "SELECT id from autodialer_phonelists WHERE `id`  ="+""""+НомерСписка+ """"+"";
			ЗаписиSQL = Соединение.Execute(ЗапросНомерСписка);
			// Получить ID целым числом
			НомерСпискаSQL = СтрЗаменить(ЗаписиSQL.Fields(0).Value, Символы.НПП, "");
			Если НомерСпискаSQL = НомерСписка Тогда 
				СтрPhoneList = "DELETE from `autodialer_phonelists` WHERE `id`  ="+""""+НомерСписка+ """"+"";
				Соединение.Execute(СтрPhoneList);
				//Сообщить(СтрPhoneList);
				Для к = 0 по Объект.СписокДляАО.Количество()-1 цикл
					СтрNumbers = "DELETE from`autodialer_phones` WHERE `phonelist_id`  ="+""""+НомерСписка+ """"+""; 
					Соединение.Execute(СтрNumbers);
					//Сообщить(СтрNumbers);
				КонецЦикла;
				//Сообщить("Список удален из АТС");
			КонецЕсли;
			Соединение.Close();
		Исключение
			//Сообщить("Списка с таким номером уже не существует!");
		КонецПопытки;
		Объект.Удалить();
	КонецЦикла;
	// Удалить статистику обзвона
	УдалитьСтатистикуНаАТС();
КонецПроцедуры

Процедура УдалитьСтатистикуНаАТС() Экспорт
	СтрокаСоединения = ПолучитьСоединение();	
	Соединение = Новый COMОбъект("ADODB.Connection");
	Соединение.ConnectionString = (СтрокаСоединения);
	Соединение.Open();
	ЗаписиSQL = Новый ComObject("ADODB.RecordSet"); 
	ЗаписиSQL.ActiveConnection = Соединение;
	ЗапросУдалениеСтатистики = "DELETE from `autodialer_reports`";
	Пока КоличествоЗаписейВСтатистике() <> 0 Цикл
		Соединение.Execute(ЗапросУдалениеСтатистики);
	КонецЦикла;
	Соединение.Close();
КонецПроцедуры

Функция КоличествоЗаписейВСтатистике() Экспорт
	СтрокаСоединения = ПолучитьСоединение();
	Соединение = Новый COMОбъект("ADODB.Connection");
	Соединение.ConnectionString = (СтрокаСоединения);
	Соединение.Open();
	ЗаписиSQL = Новый ComObject("ADODB.RecordSet"); 
	ЗаписиSQL.ActiveConnection = Соединение;
	ЗапросКоличествоЗаписей = "SELECT COUNT(*) from `autodialer_reports`";
	ЗаписиSQL.Open(ЗапросКоличествоЗаписей, Соединение);
	Возврат ЗаписиSQL.Fields.Item(0).Value;
	Соединение.Close();
КонецФункции

&НаСервере
Функция ПолучитьСоединение()
	Настройки = Константы.ПрофильПодключенияКАТС.Получить();
	Если Не ЗначениеЗаполнено(Настройки) Тогда
		Возврат "";
	Иначе
		ОДБС = Настройки.ODBCDriver;
		Сервер = Настройки.Сервер;
		БД = Настройки.НазваниеБазыДанных;
		Пользователь = Настройки.Пользователь;
		Пароль = Настройки.Пароль;
		СтрОДБС  = "{" + ОДБС + "}";
		
		Стр = "
		|DRIVER="+СтрОДБС+";
		|SERVER="+Сервер+";
		|DATABASE="+БД+"; 
		|UID="+Пользователь+";
		|PWD="+Пароль+"";
		
		Возврат Стр; 
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ОбновлениеДнейПросрочки() Экспорт  
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|  ДолговыеОбязательства.Ссылка КАК Ссылка
	|ИЗ
	|  Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	|ГДЕ
	|  ДолговыеОбязательства.ДополнительныеРеквизиты.Значение.Наименование <> ""Архив""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл    
		ДО = Выборка.Ссылка;
		ДатаВозврата = ОбъектыСервер.ПолучитьЗначениеСвойства(ДО, "0162");
		Если ЗначениеЗаполнено(ДатаВозврата) = Истина Тогда
			ДнейПросрочки = (НачалоДня(ТекущаяДата()) - НачалоДня(ДатаВозврата)) / 86400;
			ОбъектыСервер.ЗаписатьЗначениеСвойства(ДО, "0141", ДнейПросрочки);
			ДатаПередачи = ОбъектыСервер.ПолучитьЗначениеСвойства(ДО, "0138");
			ДнейВАгентстве = (НачалоДня(ТекущаяДата()) - НачалоДня(ДатаПередачи)) / 86400;
			ОбъектыСервер.ЗаписатьЗначениеСвойства(ДО, "0140", ДнейВАгентстве);
			ДнейНаДатуПередачи = (ДнейПросрочки - ДнейВАгентстве);
			ОбъектыСервер.ЗаписатьЗначениеСвойства(ДО, "0139", ДнейНаДатуПередачи);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УдалениеПомеченныхОбъектов() Экспорт
	// Выгрузить все акты передачи, помеченные на удаление
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктПередачи.Ссылка КАК Ссылка,
	|	АктПередачи.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.АктПередачи КАК АктПередачи
	|ГДЕ
	|	АктПередачи.ПометкаУдаления = ИСТИНА";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл    
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Удалить();
	КонецЦикла;
	
	// Выгрузить все обещания, помеченные на удаление
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбещанныеПлатежи.Ссылка КАК Ссылка,
	|	ОбещанныеПлатежи.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.ОбещанныеПлатежи КАК ОбещанныеПлатежи
	|ГДЕ
	|	ОбещанныеПлатежи.ПометкаУдаления = ИСТИНА";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл    
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Удалить();
	КонецЦикла;
	
	// Выгрузить все платежи, помеченные на удаление
	
	Запрос = Новый Запрос;	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеПлатежа.Ссылка КАК Ссылка,
	|	ПоступлениеПлатежа.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.ПоступлениеПлатежа КАК ПоступлениеПлатежа
	|ГДЕ
	|	ПоступлениеПлатежа.ПометкаУдаления = ИСТИНА";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл    
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Удалить();
	КонецЦикла;
	
	// Выгрузить все мероприятия, помеченные на удаление
	
	Запрос = Новый Запрос;	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Мероприятие.Ссылка КАК Ссылка,
	|	Мероприятие.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Задача.Мероприятие КАК Мероприятие
	|ГДЕ
	|	Мероприятие.ПометкаУдаления = ИСТИНА";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл    
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Удалить();
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновлениеОстатковКЦ() Экспорт
	// Выгрузить остатки по внесудебке
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДолговыеОбязательства.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ЗадолженностьПоОбъектамВнесудебнаяОстатки.ОсновнойДолгРеглОстаток, 0) КАК ОсновнойДолг,
	|	ЕСТЬNULL(ЗадолженностьПоОбъектамВнесудебнаяОстатки.ПроцентыРеглОстаток, 0) КАК Проценты,
	|	ЕСТЬNULL(ЗадолженностьПоОбъектамВнесудебнаяОстатки.ШтрафыРеглОстаток, 0) КАК Штрафы,
	|	ЕСТЬNULL(ЗадолженностьПоОбъектамВнесудебнаяОстатки.ПениРеглОстаток, 0) КАК Пени,
	|	-ЕСТЬNULL(ЗадолженностьПоОбъектамВнесудебнаяОстатки.Составляющая8РеглОстаток, 0) КАК Переплата,
	|	ЕСТЬNULL(ЗадолженностьПоОбъектамВнесудебнаяОстатки.СуммаДООстаток, 0) КАК Итого
	|ИЗ
	|	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗадолженностьПоОбъектамВнесудебная.Остатки КАК ЗадолженностьПоОбъектамВнесудебнаяОстатки
	|		ПО (ЗадолженностьПоОбъектамВнесудебнаяОстатки.Объект = ДолговыеОбязательства.Ссылка)
	|ГДЕ
	|	(ДолговыеОбязательства.Кредитор.Код В (""F00114343"", ""F00000160"", ""F00000236"", ""F00000091"", ""F00001401"", ""F00114342"")
	|			ИЛИ (ДолговыеОбязательства.Кредитор.Код В (""F00079066"", ""F00099453"", ""F00108622"", ""F00000172"", ""F00109962"", ""F00000206"", ""F00107981"")
	|				И НЕ ДолговыеОбязательства.ДополнительныеРеквизиты.Значение.Наименование = ""Передано в ЮД""))";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		// Получить остатки по внесудебке
		СуммаОДВнесудебка = Выборка.ОсновнойДолг;
		СуммаПроцентыВнесудебка	= Выборка.Проценты;
		СуммаПениВнесудебка = Выборка.Пени;
		СуммаДОВнесудебка = Выборка.Итого;
		
		// Получить основной долг
		Если СуммаОДВнесудебка <> 0 Тогда
			Попытка
				НаборЗаписей = РегистрыСведений.ЗадолженностьПоОбъектамОстатки.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
				НаборЗаписей.Отбор.ТипЗадолженности.Установить(ПланыВидовХарактеристик.ТипыЗадолженности.НайтиПоНаименованию("Основной долг"));
				НаборЗаписей.Добавить();
				Для каждого ЗаписьНабора из НаборЗаписей Цикл
					ЗаписьНабора.Объект = Выборка.Ссылка;
					ЗаписьНабора.ТипЗадолженности = ПланыВидовХарактеристик.ТипыЗадолженности.НайтиПоНаименованию("Основной долг");
					ЗаписьНабора.СуммаДО = 0;
					ЗаписьНабора.СуммаРегл = 0;
				КонецЦикла; 
				НаборЗаписей.Записать();
			Исключение                       
			КонецПопытки;
			НаборЗаписей = РегистрыСведений.ЗадолженностьПоОбъектамОстатки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
			НаборЗаписей.Отбор.ТипЗадолженности.Установить(ПланыВидовХарактеристик.ТипыЗадолженности.НайтиПоНаименованию("Основной долг"));
			НаборЗаписей.Прочитать(); 
			Для каждого ЗаписьНабора из НаборЗаписей Цикл
				СуммаОДРегистр = ЗаписьНабора.СуммаДО;
				Если СуммаОДРегистр <> СуммаОДВнесудебка Тогда
					ЗаписьНабора.СуммаДО = СуммаОДВнесудебка;
					ЗаписьНабора.СуммаРегл = СуммаОДВнесудебка;
				КонецЕсли;
				НаборЗаписей.Записать();
			КонецЦикла;
		КонецЕсли;
		
		// Получить проценты
		Если СуммаПроцентыВнесудебка <> 0 Тогда
			Попытка
				НаборЗаписей = РегистрыСведений.ЗадолженностьПоОбъектамОстатки.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
				НаборЗаписей.Отбор.ТипЗадолженности.Установить(ПланыВидовХарактеристик.ТипыЗадолженности.НайтиПоНаименованию("Проценты"));
				НаборЗаписей.Добавить(); 
				Для каждого ЗаписьНабора из НаборЗаписей Цикл
					ЗаписьНабора.Объект = Выборка.Ссылка;
					ЗаписьНабора.ТипЗадолженности = ПланыВидовХарактеристик.ТипыЗадолженности.НайтиПоНаименованию("Проценты");
					ЗаписьНабора.СуммаДО = 0;
					ЗаписьНабора.СуммаРегл = 0;
				КонецЦикла; 
				НаборЗаписей.Записать();
			Исключение
			КонецПопытки;
			НаборЗаписей = РегистрыСведений.ЗадолженностьПоОбъектамОстатки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
			НаборЗаписей.Отбор.ТипЗадолженности.Установить(ПланыВидовХарактеристик.ТипыЗадолженности.НайтиПоНаименованию("Проценты"));
			НаборЗаписей.Прочитать();
			Для каждого ЗаписьНабора из НаборЗаписей Цикл
				СуммаПроцентыРегистр = ЗаписьНабора.СуммаДО;
				Если СуммаПроцентыРегистр <> СуммаПроцентыВнесудебка Тогда
					ЗаписьНабора.СуммаДО = СуммаПроцентыВнесудебка;
					ЗаписьНабора.СуммаРегл = СуммаПроцентыВнесудебка;
				КонецЕсли;
				НаборЗаписей.Записать();
			КонецЦикла;
		Иначе
			// Исключение для Квик Мани, где сумма по процентам загружена в реквизит 0169
			СуммаПроцентыВнесудебка = ОбъектыСервер.ПолучитьЗначениеСвойства(Выборка.Ссылка, "0169");
			Если СуммаПроцентыВнесудебка <> 0 Тогда
				НаборЗаписей = РегистрыСведений.ЗадолженностьПоОбъектамОстатки.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
				НаборЗаписей.Отбор.ТипЗадолженности.Установить(ПланыВидовХарактеристик.ТипыЗадолженности.НайтиПоНаименованию("Проценты"));
				НаборЗаписей.Прочитать();
				Для каждого ЗаписьНабора из НаборЗаписей Цикл
					СуммаПроцентыРегистр = ЗаписьНабора.СуммаДО;
					Если СуммаПроцентыРегистр <> СуммаПроцентыВнесудебка Тогда
						ЗаписьНабора.СуммаДО = СуммаПроцентыВнесудебка;
						ЗаписьНабора.СуммаРегл = СуммаПроцентыВнесудебка;
					КонецЕсли;
					НаборЗаписей.Записать();
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Получить пени и штрафы
		Если СуммаПениВнесудебка <> 0 Тогда
			Попытка
				НаборЗаписей = РегистрыСведений.ЗадолженностьПоОбъектамОстатки.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
				НаборЗаписей.Отбор.ТипЗадолженности.Установить(ПланыВидовХарактеристик.ТипыЗадолженности.НайтиПоНаименованию("Пени"));
				НаборЗаписей.Добавить(); 
				Для каждого ЗаписьНабора из НаборЗаписей Цикл
					ЗаписьНабора.Объект = Выборка.Ссылка;
					ЗаписьНабора.ТипЗадолженности = ПланыВидовХарактеристик.ТипыЗадолженности.НайтиПоНаименованию("Пени");
					ЗаписьНабора.СуммаДО = 0;
					ЗаписьНабора.СуммаРегл = 0;
				КонецЦикла; 
				НаборЗаписей.Записать();
			Исключение
			КонецПопытки;
			НаборЗаписей = РегистрыСведений.ЗадолженностьПоОбъектамОстатки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
			НаборЗаписей.Отбор.ТипЗадолженности.Установить(ПланыВидовХарактеристик.ТипыЗадолженности.НайтиПоНаименованию("Пени"));
			НаборЗаписей.Прочитать(); 
			Для каждого ЗаписьНабора из НаборЗаписей Цикл
				СуммаПениРегистр = ЗаписьНабора.СуммаДО;
				Если СуммаПениРегистр <> СуммаПениВнесудебка Тогда
					ЗаписьНабора.СуммаДО = СуммаПениВнесудебка;
					ЗаписьНабора.СуммаРегл = СуммаПениВнесудебка;
				КонецЕсли;
				НаборЗаписей.Записать();
			КонецЦикла;
		КонецЕсли;
		
		// Обновить остатки в регистре сведений
		Если ЗначениеЗаполнено(СуммаОДВнесудебка) = Ложь Тогда
			СуммаОДВнесудебка = 0;
		КонецЕсли;
		Если ЗначениеЗаполнено(СуммаПроцентыВнесудебка) = Ложь Тогда
			СуммаПроцентыВнесудебка = 0;
		КонецЕсли;
		Если ЗначениеЗаполнено(СуммаПениВнесудебка) = Ложь Тогда
			СуммаПениВнесудебка = 0;
		КонецЕсли;
		СуммаДОРегистрНовая = СуммаОДВнесудебка + СуммаПроцентыВнесудебка + СуммаПениВнесудебка;
		Попытка
			НаборЗаписей = РегистрыСведений.ЗадолженностьПоОбъектамОстатки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
			НаборЗаписей.Отбор.ТипЗадолженности.Установить(ПланыВидовХарактеристик.ТипыЗадолженности.НайтиПоНаименованию("Сумма"));
			НаборЗаписей.Добавить(); 
			Для каждого ЗаписьНабора из НаборЗаписей Цикл
				ЗаписьНабора.Объект = Выборка.Ссылка;
				ЗаписьНабора.ТипЗадолженности = ПланыВидовХарактеристик.ТипыЗадолженности.НайтиПоНаименованию("Сумма");
				ЗаписьНабора.СуммаДО = 0;
				ЗаписьНабора.СуммаРегл = 0;
			КонецЦикла; 
			НаборЗаписей.Записать();
		Исключение
		КонецПопытки;
		НаборЗаписей = РегистрыСведений.ЗадолженностьПоОбъектамОстатки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
		НаборЗаписей.Отбор.ТипЗадолженности.Установить(ПланыВидовХарактеристик.ТипыЗадолженности.НайтиПоНаименованию("Сумма"));
		НаборЗаписей.Прочитать();
		Для каждого ЗаписьНабора из НаборЗаписей Цикл
			СуммаДОРегистрСтарая = ЗаписьНабора.СуммаДО;
			Если СуммаДОРегистрСтарая <> СуммаДОВнесудебка Тогда
				ЗаписьНабора.СуммаДО = СуммаДОРегистрНовая;
				ЗаписьНабора.СуммаРегл = СуммаДОРегистрНовая;
			КонецЕсли;
			НачатьТранзакцию();
			НаборЗаписей.Записать();
			ЗафиксироватьТранзакцию();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновлениеОстатковЮД() Экспорт
	// Выгрузить остатки по внесудебке
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДолговыеОбязательства.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ЗадолженностьПоОбъектамВнесудебнаяОстатки.ОсновнойДолгРеглОстаток, 0) КАК ОсновнойДолг,
	|	ЕСТЬNULL(ЗадолженностьПоОбъектамВнесудебнаяОстатки.ПроцентыРеглОстаток, 0) КАК Проценты,
	|	ЕСТЬNULL(ЗадолженностьПоОбъектамВнесудебнаяОстатки.ШтрафыРеглОстаток, 0) КАК Штрафы,
	|	ЕСТЬNULL(ЗадолженностьПоОбъектамВнесудебнаяОстатки.ПениРеглОстаток, 0) КАК Пени,
	|	-ЕСТЬNULL(ЗадолженностьПоОбъектамВнесудебнаяОстатки.Составляющая8РеглОстаток, 0) КАК Переплата,
	|	ЕСТЬNULL(ЗадолженностьПоОбъектамВнесудебнаяОстатки.СуммаДООстаток, 0) КАК Итого
	|ИЗ
	|	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗадолженностьПоОбъектамВнесудебная.Остатки КАК ЗадолженностьПоОбъектамВнесудебнаяОстатки
	|		ПО (ЗадолженностьПоОбъектамВнесудебнаяОстатки.Объект = ДолговыеОбязательства.Ссылка)
	|ГДЕ
	|	ДолговыеОбязательства.ДополнительныеРеквизиты.Значение.Наименование = ""Передано в ЮД""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		// Получить остатки по внесудебке
		СуммаОДВнесудебка = Выборка.ОсновнойДолг;
		СуммаПроцентыВнесудебка	= Выборка.Проценты;
		СуммаПениВнесудебка = Выборка.Пени;
		СуммаДОВнесудебка = Выборка.Итого;
		
		// Получить основной долг
		Если СуммаОДВнесудебка <> 0 Тогда
			Попытка
				НаборЗаписей = РегистрыСведений.ЗадолженностьПоОбъектамОстатки.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
				НаборЗаписей.Отбор.ТипЗадолженности.Установить(ПланыВидовХарактеристик.ТипыЗадолженности.НайтиПоНаименованию("Основной долг"));
				НаборЗаписей.Добавить();
				Для каждого ЗаписьНабора из НаборЗаписей Цикл
					ЗаписьНабора.Объект = Выборка.Ссылка;
					ЗаписьНабора.ТипЗадолженности = ПланыВидовХарактеристик.ТипыЗадолженности.НайтиПоНаименованию("Основной долг");
					ЗаписьНабора.СуммаДО = 0;
					ЗаписьНабора.СуммаРегл = 0;
				КонецЦикла; 
				НаборЗаписей.Записать();
			Исключение                       
			КонецПопытки;
			НаборЗаписей = РегистрыСведений.ЗадолженностьПоОбъектамОстатки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
			НаборЗаписей.Отбор.ТипЗадолженности.Установить(ПланыВидовХарактеристик.ТипыЗадолженности.НайтиПоНаименованию("Основной долг"));
			НаборЗаписей.Прочитать(); 
			Для каждого ЗаписьНабора из НаборЗаписей Цикл
				СуммаОДРегистр = ЗаписьНабора.СуммаДО;
				Если СуммаОДРегистр <> СуммаОДВнесудебка Тогда
					ЗаписьНабора.СуммаДО = СуммаОДВнесудебка;
					ЗаписьНабора.СуммаРегл = СуммаОДВнесудебка;
				КонецЕсли;
				НаборЗаписей.Записать();
			КонецЦикла;
		КонецЕсли;
		
		// Получить проценты
		Если СуммаПроцентыВнесудебка <> 0 Тогда
			Попытка
				НаборЗаписей = РегистрыСведений.ЗадолженностьПоОбъектамОстатки.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
				НаборЗаписей.Отбор.ТипЗадолженности.Установить(ПланыВидовХарактеристик.ТипыЗадолженности.НайтиПоНаименованию("Проценты"));
				НаборЗаписей.Добавить(); 
				Для каждого ЗаписьНабора из НаборЗаписей Цикл
					ЗаписьНабора.Объект = Выборка.Ссылка;
					ЗаписьНабора.ТипЗадолженности = ПланыВидовХарактеристик.ТипыЗадолженности.НайтиПоНаименованию("Проценты");
					ЗаписьНабора.СуммаДО = 0;
					ЗаписьНабора.СуммаРегл = 0;
				КонецЦикла; 
				НаборЗаписей.Записать();
			Исключение
			КонецПопытки;
			НаборЗаписей = РегистрыСведений.ЗадолженностьПоОбъектамОстатки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
			НаборЗаписей.Отбор.ТипЗадолженности.Установить(ПланыВидовХарактеристик.ТипыЗадолженности.НайтиПоНаименованию("Проценты"));
			НаборЗаписей.Прочитать();
			Для каждого ЗаписьНабора из НаборЗаписей Цикл
				СуммаПроцентыРегистр = ЗаписьНабора.СуммаДО;
				Если СуммаПроцентыРегистр <> СуммаПроцентыВнесудебка Тогда
					ЗаписьНабора.СуммаДО = СуммаПроцентыВнесудебка;
					ЗаписьНабора.СуммаРегл = СуммаПроцентыВнесудебка;
				КонецЕсли;
				НаборЗаписей.Записать();
			КонецЦикла;
		Иначе
		КонецЕсли;
		
		// Получить пени и штрафы
		Если СуммаПениВнесудебка <> 0 Тогда
			Попытка
				НаборЗаписей = РегистрыСведений.ЗадолженностьПоОбъектамОстатки.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
				НаборЗаписей.Отбор.ТипЗадолженности.Установить(ПланыВидовХарактеристик.ТипыЗадолженности.НайтиПоНаименованию("Пени"));
				НаборЗаписей.Добавить(); 
				Для каждого ЗаписьНабора из НаборЗаписей Цикл
					ЗаписьНабора.Объект = Выборка.Ссылка;
					ЗаписьНабора.ТипЗадолженности = ПланыВидовХарактеристик.ТипыЗадолженности.НайтиПоНаименованию("Пени");
					ЗаписьНабора.СуммаДО = 0;
					ЗаписьНабора.СуммаРегл = 0;
				КонецЦикла; 
				НаборЗаписей.Записать();
			Исключение
			КонецПопытки;
			НаборЗаписей = РегистрыСведений.ЗадолженностьПоОбъектамОстатки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
			НаборЗаписей.Отбор.ТипЗадолженности.Установить(ПланыВидовХарактеристик.ТипыЗадолженности.НайтиПоНаименованию("Пени"));
			НаборЗаписей.Прочитать(); 
			Для каждого ЗаписьНабора из НаборЗаписей Цикл
				СуммаПениРегистр = ЗаписьНабора.СуммаДО;
				Если СуммаПениРегистр <> СуммаПениВнесудебка Тогда
					ЗаписьНабора.СуммаДО = СуммаПениВнесудебка;
					ЗаписьНабора.СуммаРегл = СуммаПениВнесудебка;
				КонецЕсли;
				НаборЗаписей.Записать();
			КонецЦикла;
		КонецЕсли;
		
		// Обновить остатки в регистре сведений
		Если ЗначениеЗаполнено(СуммаОДВнесудебка) = Ложь Тогда
			СуммаОДВнесудебка = 0;
		КонецЕсли;
		Если ЗначениеЗаполнено(СуммаПроцентыВнесудебка) = Ложь Тогда
			СуммаПроцентыВнесудебка = 0;
		КонецЕсли;
		Если ЗначениеЗаполнено(СуммаПениВнесудебка) = Ложь Тогда
			СуммаПениВнесудебка = 0;
		КонецЕсли;
		СуммаДОРегистрНовая = СуммаОДВнесудебка + СуммаПроцентыВнесудебка + СуммаПениВнесудебка;
		Попытка
			НаборЗаписей = РегистрыСведений.ЗадолженностьПоОбъектамОстатки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
			НаборЗаписей.Отбор.ТипЗадолженности.Установить(ПланыВидовХарактеристик.ТипыЗадолженности.НайтиПоНаименованию("Сумма"));
			НаборЗаписей.Добавить(); 
			Для каждого ЗаписьНабора из НаборЗаписей Цикл
				ЗаписьНабора.Объект = Выборка.Ссылка;
				ЗаписьНабора.ТипЗадолженности = ПланыВидовХарактеристик.ТипыЗадолженности.НайтиПоНаименованию("Сумма");
				ЗаписьНабора.СуммаДО = 0;
				ЗаписьНабора.СуммаРегл = 0;
			КонецЦикла; 
			НаборЗаписей.Записать();
		Исключение
		КонецПопытки;
		НаборЗаписей = РегистрыСведений.ЗадолженностьПоОбъектамОстатки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
		НаборЗаписей.Отбор.ТипЗадолженности.Установить(ПланыВидовХарактеристик.ТипыЗадолженности.НайтиПоНаименованию("Сумма"));
		НаборЗаписей.Прочитать();
		Для каждого ЗаписьНабора из НаборЗаписей Цикл
			СуммаДОРегистрСтарая = ЗаписьНабора.СуммаДО;
			Если СуммаДОРегистрСтарая <> СуммаДОВнесудебка Тогда
				ЗаписьНабора.СуммаДО = СуммаДОРегистрНовая;
				ЗаписьНабора.СуммаРегл = СуммаДОРегистрНовая;
			КонецЕсли;
			НачатьТранзакцию();
			НаборЗаписей.Записать();
			ЗафиксироватьТранзакцию();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура БлокировкаНеконтактныхДелДляАвтообзвона() Экспорт
	// Выгрузить незаблокированные ДО, где больше 5 нерезультативных контактов за последние 3 месяца
	
	Запрос = Новый Запрос;
	// Установить параметры в отдельной процедуре
	БлокировкаНеконтактныхДелДляАвтообзвонаПараметры(Запрос);
	//
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДолговыеОбязательства.Ссылка КАК Ссылка
	|ИЗ
	|	Задача.Мероприятие КАК Мероприятие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	|		ПО ДолговыеОбязательства.Ссылка = Мероприятие.Объект
	|ГДЕ
	|	ДолговыеОбязательства.ДополнительныеРеквизиты.Значение.Наименование В (""В работе"", ""Новые"")
	|	И ДолговыеОбязательства.НеконтактныеНомера = ЛОЖЬ
	|	И Мероприятие.Ссылка ЕСТЬ НЕ NULL 
	|	И Мероприятие.ТипМероприятия.Наименование = ""Телефонный звонок входящий""
	|	И Мероприятие.Результат.АнализируетсяБлокировщиком = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	ДолговыеОбязательства.Ссылка
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(Мероприятие.Дата) >= &ТриМесяцаНазад И
	|	МАКСИМУМ(Мероприятие.Дата) < &Вчера И
	|	КОЛИЧЕСТВО(Мероприятие.Результат.РезультативныйКонтакт) >= 5
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДолговыеОбязательства.Ссылка
	|ИЗ
	|	Задача.Мероприятие КАК Мероприятие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	|		ПО ДолговыеОбязательства.Ссылка = Мероприятие.Объект
	|ГДЕ
	|	ДолговыеОбязательства.ДополнительныеРеквизиты.Значение.Наименование В (""В работе"", ""Новые"")
	|	И ДолговыеОбязательства.НеконтактныеНомера = ЛОЖЬ
	|	И Мероприятие.Ссылка ЕСТЬ НЕ NULL 
	|	И Мероприятие.ТипМероприятия.Наименование = ""Телефонный звонок исходящий""
	|	И Мероприятие.Результат.АнализируетсяБлокировщиком = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	ДолговыеОбязательства.Ссылка
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(Мероприятие.Дата) >= &ТриМесяцаНазад И
	|	МАКСИМУМ(Мероприятие.Дата) < &Вчера И
	|	КОЛИЧЕСТВО(Мероприятие.Результат.РезультативныйКонтакт) >= 5";
	
	ОбработкаНеконтактныхДелДляАвтообзвона(Запрос);
	
КонецПроцедуры

Процедура БлокировкаНеконтактныхДелДляАвтообзвонаПараметры(Знач Запрос)
	
	Перем Дата;
	
	Дата = ДобавитьМесяц(НачалоМесяца(ТекущаяДата()),-3);
	Запрос.УстановитьПараметр("ТриМесяцаНазад", Дата);
	
	Дата = НачалоДня(ТекущаяДата()) - 86400;
	Запрос.УстановитьПараметр("Вчера", Дата);
	
КонецПроцедуры

Процедура ОбработкаНеконтактныхДелДляАвтообзвона(Знач Запрос)
	
	Перем Выборка, Договор, РезультатЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Договор = Выборка.Ссылка.ПолучитьОбъект();
		// Заблокировать ДО для автообзвона по причине неконтактности
		Договор.ЗапретАвтообзвона = Истина;
		Договор.НеконтактныеНомера = Истина;
		Договор.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РазблокировкаНеконтактныхДелДляАвтообзвона() Экспорт
	// Выгрузить заблокированные по причине неконтактности ДО
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДолговыеОбязательства.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	|ГДЕ
	|	ДолговыеОбязательства.НеконтактныеНомера = ИСТИНА";
	
	ОбработкаНеконтактныхДелДляАвтообзвона2(Запрос);
КонецПроцедуры

Процедура ОбработкаНеконтактныхДелДляАвтообзвона2(Знач Запрос)
	
	Перем Выборка, Договор, РезультатЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Договор = Выборка.Ссылка.ПолучитьОбъект();
		// Заблокировать ДО для автообзвона по причине неконтактности
		Договор.ЗапретАвтообзвона = Ложь;
		Договор.НеконтактныеНомера = Ложь;
		Договор.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РазблокировкаДелДляАвтообзвона() Экспорт
	// Выгрузить ДО, заблокированные по причине добавления в автообзвон
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДолговыеОбязательства.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	|ГДЕ
	|	ДолговыеОбязательства.ЗапретАвтообзвона = ИСТИНА
	|	И ДолговыеОбязательства.НеконтактныеНомера = ЛОЖЬ";
	
	ОбработкаДелДляАвтообзвона(Запрос);
	
КонецПроцедуры

Процедура ОбработкаДелДляАвтообзвона(Знач Запрос)
	
	Перем Выборка, Договор, РезультатЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Договор = Выборка.Ссылка.ПолучитьОбъект();
		// Разблокировать ДО для автообзвона
		Договор.ЗапретАвтообзвона = Ложь;
		Договор.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПересчетИтоговРегистров() Экспорт
	// Из БСП
	Для каждого Рег из Метаданные.РегистрыНакопления Цикл
		Если Рег.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			РегистрыНакопления[Рег.Имя].ПересчитатьИтоги();
		КонецЕсли;
	КонецЦикла;
	Для каждого Рег из Метаданные.РегистрыБухгалтерии Цикл
		РегистрыБухгалтерии[Рег.Имя].ПересчитатьИтоги();
	КонецЦикла;
КонецПроцедуры

Процедура ПересчетРегистров(МенеджерРегистров, НаДату, ОграничениеПоВидуРегистра = Неопределено)
	
	Для Каждого МенеджерРегистра ИЗ МенеджерРегистров Цикл
		МетаданныеРегистра = Метаданные.НайтиПоТипу(ТипЗнч(МенеджерРегистра));
		
		Если ОграничениеПоВидуРегистра <> Неопределено И МетаданныеРегистра.ВидРегистра <> ОграничениеПоВидуРегистра Тогда
			Продолжить;
		КонецЕсли;
		ПересчитатьРегистрПоДате(МенеджерРегистра, НаДату);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПересчитатьРегистрПоДате(МенеджерРегистра, НаДату)
	
	Если МенеджерРегистра.ПолучитьПериодРассчитанныхИтогов()<НаДату Тогда
		МенеджерРегистра.УстановитьПериодРассчитанныхИтогов(НаДату);
	Иначе
		МенеджерРегистра.ПересчитатьИтоги();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПромежуточнаяРазблокировкаДелДляАвтообзвона() Экспорт
	// Выгрузить ДО, заблокированные по причине добавления в автообзвон и имеющие "плохой" последний результат
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДолговыеОбязательства.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	|ГДЕ
	|	ДолговыеОбязательства.ЗапретАвтообзвона = ИСТИНА
	|	И ДолговыеОбязательства.НеконтактныеНомера = ЛОЖЬ";
	
	ОбработкаДелДляАвтообзвона2(Запрос);
	
КонецПроцедуры

Процедура ОбработкаДелДляАвтообзвона2(Знач Запрос)
	
	Перем Выборка, Договор, РезультатЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ПлохойРезультат(Выборка.Ссылка) = Истина Тогда
			Договор = Выборка.Ссылка.ПолучитьОбъект();
			// Разблокировать ДО для автообзвона
			Договор.ЗапретАвтообзвона = Ложь;
			Договор.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПлохойРезультат(ДО)
	// Вернуть "Истина", если последний результат является "плохим"
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДолговыеОбязательства.Ссылка КАК Ссылка,
	|	Мероприятие.Результат КАК Результат
	|ИЗ
	|	Задача.Мероприятие КАК Мероприятие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	|		ПО Мероприятие.Объект = ДолговыеОбязательства.Ссылка
	|ГДЕ
	|	Мероприятие.Результат.АнализируетсяБлокировщиком = ИСТИНА
	|	И ДолговыеОбязательства.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Мероприятие.Дата УБЫВ";
	Запрос.УстановитьПараметр("Ссылка", ДО);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат = Выборка.Результат.ПолучитьОбъект();
		Если Результат.АнализируетсяБлокировщиком = Истина Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура ОбновитьИП() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10000
	|	ДолговыеОбязательства.Должник КАК Должник,
	|	ДолговыеОбязательства.ДатаСоздания КАК ДатаСоздания,
	|	ДолговыеОбязательства.Должник.Код КАК ДолжникКод,
	|	ИсполнительныеПроизводства.ДатаПроверки КАК ДатаПроверки
	|ИЗ
	|	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнительныеПроизводства КАК ИсполнительныеПроизводства
	|		ПО ДолговыеОбязательства.Должник = ИсполнительныеПроизводства.Должник
	|ГДЕ
	|	(ДолговыеОбязательства.ДополнительныеРеквизиты.Значение.Наименование В (""В работе"", ""Новые"", ""СТОП"")
	|				И ИсполнительныеПроизводства.ДатаПроверки ЕСТЬ NULL
	|			ИЛИ ДолговыеОбязательства.ДополнительныеРеквизиты.Значение.Наименование В (""В работе"", ""Новые"", ""СТОП"")
	|				И ИсполнительныеПроизводства.ДатаПроверки < &НачалоМесяца)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДолговыеОбязательства.ДатаСоздания УБЫВ";
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ТекущаяДата()));
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Должник");
	ТЗ.Колонки.Добавить("ДатаРождения");
	ТЗ.Колонки.Добавить("КодРегиона");
	Пока Выборка.Следующий() Цикл
		ДатаРождения = СтрЗаменить(Формат(ОбъектыСервер.ПолучитьЗначениеСвойства(Выборка.Должник, "0043"), "ДФ=yyyy-MM-dd"), " 0:00:00", "");
		КодРегиона = ФССПСлужебный.ПолучитьКодРегионаПоДолжнику(Выборка.Должник);
		Если КодРегиона <> Неопределено Тогда
			Стр = ТЗ.Добавить();
			Стр.Должник = Выборка.Должник.Наименование;
			Стр.ДатаРождения = ДатаРождения;
			Стр.КодРегиона = КодРегиона;
		КонецЕсли;	
	КонецЦикла;
	ФССПСлужебный.ПолучитьИП(ТЗ); 
КонецПроцедуры

Процедура ОбновитьДелаОБанкротстве() Экспорт	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДолговыеОбязательства.Должник КАК Должник,
	|	ДолговыеОбязательства.Должник.Код КАК ДолжникКод,
	|	ДелаОБанкротстве.ДатаПроверки КАК ДатаПроверки
	|ИЗ
	|	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДелаОБанкротстве КАК ДелаОБанкротстве
	|		ПО ДолговыеОбязательства.Должник = ДелаОБанкротстве.Должник
	|ГДЕ
	|	(ДолговыеОбязательства.ДополнительныеРеквизиты.Значение.Наименование В (""В работе"", ""Новые"", ""Ручной обзвон"", ""Процесс банкротства""))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДолговыеОбязательства.ДатаСоздания УБЫВ";
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ТекущаяДата()));
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();	
	Пока Выборка.Следующий() Цикл
		Попытка 
			ЕФРСБСлужебный.ПолучитьСведения(Выборка.Должник.ФИО[0].ФИО, Выборка.ДолжникКод);
		Исключение
			ЕФРСБСлужебный.ПолучитьСведения(Выборка.Должник.Наименование, Выборка.ДолжникКод);
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ОстановитьАктивныеЗадачиАвтообзвона() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	autodialer.id КАК id,
	|	autodialer.active КАК active
	|ИЗ
	|	ВнешнийИсточникДанных.BITPBX.Таблица.autodialer КАК autodialer";
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();	
	Пока Выборка.Следующий() Цикл
		Если Выборка.active = 1 Тогда
			ОстановитьЗадачу(Выборка.id);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ОстановитьЗадачу(ИДЗадачи) Экспорт	
	// Логин
	// Запрос к API. Сертификаты УЦ = Неопределено для обхода проверки
	SSL = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено);  
	Соединение = Новый HTTPСоединение("10.10.0.20", 443,,,,, SSL);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Cookie", "PHPSESSID=qmc147qvjm2d6sj64uvdclodef");
	
	Запрос = Новый HTTPЗапрос("/ajax/auth.php", Заголовки);
	Запрос.УстановитьТелоИзСтроки("refresh=&login=popov&password=305018");
	
	Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
	
	//Сообщить(Ответ.ПолучитьТелоКакСтроку());
	
	Если Ответ.КодСостояния = 200 Тогда
		
		// Остановка задачи
		// Запрос к API. Сертификаты УЦ = Неопределено для обхода проверки
		SSL = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено);  
		Соединение = Новый HTTPСоединение("10.10.0.20", 443,,,,, SSL);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
		Заголовки.Вставить("Cookie", "PHPSESSID=qmc147qvjm2d6sj64uvdclodef"); 
		
		Запрос = Новый HTTPЗапрос("/ajax/component.php", Заголовки);
		Запрос.УстановитьТелоИзСтроки("component=tools.autodialer&template=default&params=task%3D"+ИДЗадачи+"%26processAutocall%3Dtrue&operation=refresh");
		
		Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
		
		//Сообщить(Ответ.ПолучитьТелоКакСтроку());
		
		Если Ответ.КодСостояния = 200 Тогда
			//Сообщить("Автообзвон возобновлен");
		КонецЕсли;
		
	КонецЕсли;
КонецФункции

Процедура СохранитьРезультатыIVR() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	autodialer_reports.autodialer_name КАК autodialer_name,
	|	autodialer_reports.date КАК date,
	|	autodialer_reports.number КАК number,
	|	autodialer_reports.state КАК state
	|ИЗ
	|	ВнешнийИсточникДанных.BITPBX.Таблица.autodialer_reports КАК autodialer_reports
	|ГДЕ
	|	autodialer_reports.autodialer_name ПОДОБНО &autodialer_name";
	Запрос.УстановитьПараметр("autodialer_name", "%" + "IVR" + "%");
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() > 0 Тогда
		ДокументРезультатов = Документы.IVRИнформирование.СоздатьДокумент();
		ДокументРезультатов.Дата = ТекущаяДата();
		Пока Выборка.Следующий() Цикл
			НоваяЗапись = ДокументРезультатов.РезультатыИнформирования.Добавить();
			НоваяЗапись.Дата = Выборка.date;
			НоваяЗапись.Телефон = Выборка.number;
			НоваяЗапись.ДО = ТелефонВДО(Выборка.number);
			Если Выборка.state = "answered" Тогда
				НоваяЗапись.Результат = Перечисления.ДействияПоРезультатамIVR.ПереводВРаботу;
				ДО = НоваяЗапись.ДО;
				Код = "0181";
				Значение = Справочники.тсЗначенияСвойствОбъектов.НайтиПоНаименованию("В работе");
				ОбъектыСервер.ЗаписатьЗначениеСвойства(ДО, Код, Значение); 
				Код = "0182";
				Значение = "";
				ОбъектыСервер.ЗаписатьЗначениеСвойства(ДО, Код, Значение); 
				Код = "0183";
				Значение = "";
				ОбъектыСервер.ЗаписатьЗначениеСвойства(ДО, Код, Значение);	
			Иначе
				НоваяЗапись.Результат = Перечисления.ДействияПоРезультатамIVR.БезИзменений;
			КонецЕсли;
		КонецЦикла;
		ДокументРезультатов.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры
	
Функция ТелефонВДО(НомерДляПоиска)
	
	длинаНомера = СтрДлина(НомерДляПоиска);
	стрПодобия = "%";
	Для й = 1 ПО длинаНомера Цикл
		стрПодобия = стрПодобия + Сред(НомерДляПоиска, й, 1) + "%";
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КонтрагентыТелефоны.Ссылка КАК Контрагент,
		|	КонтрагентыТелефоны.КонтактноеЛицо КАК КонтактноеЛицо,
		|	КонтрагентыТелефоны.Номер КАК НомерТелефона,
		|	ДолговыеОбязательства.Ссылка КАК ДО
		|ИЗ
		|	Справочник.Контрагенты.Телефоны КАК КонтрагентыТелефоны
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
		|		ПО КонтрагентыТелефоны.Ссылка = ДолговыеОбязательства.Должник
		|ГДЕ
		|	КонтрагентыТелефоны.Номер ПОДОБНО &НомерТелефона";
	
	Запрос.УстановитьПараметр("НомерТелефона", "%" + Сред(стрПодобия, 3) + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ДО;
КонецФункции
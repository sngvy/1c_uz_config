
&НаСервере
Процедура ТокенКартыНаСервере()
	Действие  = Перечисления.Mandarin_Действия.Токен;
	Объект.ВидЗаказа = Перечисления.Mandarin_Действия.Токен;
	Объект.СуммаЗаказа = 1;
	ВыполнитьЗапрос(Действие);	
КонецПроцедуры

&НаКлиенте
Процедура ТокенКарты(Команда)
	ТокенКартыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОдностадийныйПлатежНаСервере()
	Действие  = Перечисления.Mandarin_Действия.ОдностадийныйПлатеж;
	Объект.ВидЗаказа = Перечисления.Mandarin_Действия.ОдностадийныйПлатеж;

	Если НЕ ЗначениеЗаполнено(Объект.ТокенКарты) Тогда
		Сообщить("У плательщика нет сохраненной карты! Проведите операцию токенизации перед работой с платежами!");
	Иначе	
		Если НЕ ЕстьЗадолженность(Объект.ОбъектУчета) Тогда
			Сообщить("У объекта учета нет задолженности");
		Иначе	
			ВыполнитьЗапрос(Действие);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОдностадийныйПлатеж(Команда)
	ОдностадийныйПлатежНаСервере();
КонецПроцедуры

&НаСервере
Процедура РекуррентныйПлатежНаСервере()
	Действие = Перечисления.Mandarin_Действия.РекуррентныйПлатеж;
	Объект.ВидЗаказа = Перечисления.Mandarin_Действия.РекуррентныйПлатеж;
	Если НЕ ЗначениеЗаполнено(Объект.ТокенКарты) Тогда
		Сообщить("У плательщика нет сохраненной карты! Проведите операцию токенизации перед работой с платежами!");
	Иначе	
		Если НЕ ЕстьЗадолженность(Объект.ОбъектУчета) Тогда
			Сообщить("У объекта учета нет задолженности");
		Иначе	
			ВыполнитьЗапрос(Действие);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РекуррентныйПлатеж(Команда)
	СолгасиеНаАвтосиписание = ПроверкаСогласияНаАвтосписание(Объект.ОбъектУчета);
	Если СолгасиеНаАвтосиписание Тогда
		РекуррентныйПлатежНаСервере();
	Иначе
		Сообщить("Для данного Объекта учета не подтверждено согласие на автосписание! Операция отменена!");
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ОтменаПлатежаНаСервере()
	Действие = Перечисления.Mandarin_Действия.ОтменаТранзакции;
	Объект.ВидЗаказа = Перечисления.Mandarin_Действия.ОтменаТранзакции;
	СформироватьНомерЗаказаНаСервере();
	ВыполнитьЗапрос(Действие);
КонецПроцедуры

&НаКлиенте
Процедура ОтменаПлатежа(Команда)
	ОтменаПлатежаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Объект.ОплатитьДо = ТекущаяДатаСеанса() + 86400;
	Объект.СуммаЗаказа = 1500.50;
	СформироватьНомерЗаказаНаСервере();
	тзДанныеТранзакций = Бит_Мандарин.СформироватьСписокУспешныхТранзакцийПлатежей();
	Объект.ДанныеТранзакций.Загрузить(тзДанныеТранзакций);
КонецПроцедуры

&НаСервере
Процедура ВыплатаНаКартуНаСервере()
	Действие = Перечисления.Mandarin_Действия.Выплата;
	Объект.ВидЗаказа = Перечисления.Mandarin_Действия.Выплата;
	Если НЕ ЗначениеЗаполнено(Объект.ТокенКарты) Тогда
		Сообщить("У плательщика нет сохраненной карты! Проведите операцию токенизации перед работой с платежами!");
	Иначе
		Если ЕстьЗадолженность(Объект.ОбъектУчета) Тогда
			Сообщить("У объекта учета уже начислена задолженность!");
		Иначе	
			ВыполнитьЗапрос(Действие);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЕстьЗадолженность(ОбУ)
	Задолженность = объектыСервер.ВычислитьЗадолженностьНаДату(ОбУ, ТекущаяДатаСеанса());
	НеПустая = ?(ЗначениеЗаполнено(Задолженность), Истина, Ложь);
	Возврат НеПустая;
КонецФункции


&НаКлиенте
Процедура ВыплатаНаКарту(Команда)
	ВыплатаНаКартуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСсылку(Команда)
	Если ЗначениеЗаполнено(Объект.СсылкаДляПлательщика) Тогда
		ЗапуститьПриложение(Объект.СсылкаДляПлательщика);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СократитьСсылкуНаСервере()
	
	Сервер = "clck.ru";
	Ресурс = "/--"; 
	СтрокаПараметров = "?url=" + строка(Объект.СсылкаДляПлательщика); 
	//'https://clck.ru/--?url='+ url
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.АдресРесурса = Ресурс + СтрокаПараметров;
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL;
	HTTP = Новый HTTPСоединение(
		Сервер,,,,,
		ТаймаутСоединения.ДляОперацииПолучениеСведений(),
		ssl);
	Попытка
		ОтветHTTP = HTTP.Получить(HTTPЗапрос);
		стрОтвет = ОтветHTTP.ПолучитьТелоКакСтроку();
		Объект.СсылкаДляПлательщика = СтрОтвет;
		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Проверьте подключение к интернету!";
		Сообщение.Сообщить();
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СократитьСсылку(Команда)
	СократитьСсылкуНаСервере();
КонецПроцедуры

&НаСервере
Функция СформироватьПараметрыЗапроса(Действие)
	ОплатитьДо  = СформироватьДатуМандарин(Объект.ОплатитьДо);
	сПараметрыЗапроса = новый Структура;
	сПараметрыЗапроса.Вставить("емаил",Объект.ЕмаилПлательщика);
	сПараметрыЗапроса.Вставить("телефон",Объект.ТелефонПлательщика);
	сПараметрыЗапроса.Вставить("ОбъектУчета",Объект.ОбъектУчета);
	сПараметрыЗапроса.Вставить("Плательщик",Объект.Плательщик);
	
	
	Экшн = ВычислитьСтрокуAction(Действие);
	сПараметрыЗапроса.Вставить("Action",Экшн);

	сПараметрыЗапроса.Вставить("действие",Действие);
	сПараметрыЗапроса.Вставить("заказ",Объект.Заказ);
	сПараметрыЗапроса.Вставить("сумма",строка(Формат(Объект.СуммаЗаказа, "ЧЦ=10; ЧДЦ=2")));
	сПараметрыЗапроса.Вставить("оплатитьДо",ОплатитьДо);
	сПараметрыЗапроса.Вставить("токен",объект.ТокенКарты);
	таргетТранзакция = ?(Действие = Перечисления.Mandarin_Действия.ОтменаТранзакции,Объект.ОтменяемаяТранзакция,Объект.Транзакция);   
	сПараметрыЗапроса.Вставить("транзакция",таргетТранзакция);
	возврат сПараметрыЗапроса;
КонецФункции

&НаСервере
Функция СформироватьДатуМандарин(Дата)
	
	//"2020-02-20 12:34:56+00:00"
	
	ДатаСтрока = "";
	Число = Формат(Дата, "ДФ=дд"); 
	Месяц = Формат(Дата, "ДФ=ММ"); 
	Год = Формат(Дата, "ДФ=гггг");
    Час = Формат(Дата, "ДФ=ЧЧ");
    Минута = Формат(Дата, "ДФ=мм"); 
    Секунда = Формат(Дата, "ДФ=сс"); 
	ДатаСтрока = Год+"-"+Месяц+"-"+Число+" "+Час+":"+Минута+":"+Секунда + "+00:00";
	Возврат ДатаСтрока;

КонецФункции

&НаСервере
Функция ВычислитьСтрокуAction(пДействие)
	Act = "";
	Если пДействие = Перечисления.Mandarin_Действия.ОдностадийныйПлатеж Или пДействие = Перечисления.Mandarin_Действия.РекуррентныйПлатеж Тогда
		Act = "pay";
	ИначеЕсли пДействие = Перечисления.Mandarin_Действия.Выплата Тогда
		Act = "payout";
	ИначеЕсли пДействие = Перечисления.Mandarin_Действия.Токен Тогда
		Act = "card_biding";
	ИначеЕсли пДействие = Перечисления.Mandarin_Действия.ОтменаТранзакции Тогда
		Act = "reversal";
	КонецЕсли;	
	
	Возврат Act;	
КонецФункции



&НаСервере
Процедура СформироватьНомерЗаказаНаСервере()
	объект.Заказ = Строка(Новый УникальныйИдентификатор());
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНомерЗаказа(Команда)
	СформироватьНомерЗаказаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗапрос(Действие)	
	ПараметрыЗапроса  = СформироватьПараметрыЗапроса(Действие);
	Если Бит_Мандарин.БылТакойOrderID(ПараметрыЗапроса.заказ) Тогда
		ПараметрыЗапроса.заказ = Строка(Новый УникальныйИдентификатор());
	КонецЕсли;	
	Результат = бит_Мандарин.МандаринОбработатьОперацию(ПараметрыЗапроса);	
	Если Результат = Неопределено Тогда                    
		Сообщить("Проверьте подключение к интернету! Запрос не выполнен.");
		Возврат;
	КонецЕсли;	
	Если Результат = "УчетнаяЗапись" Тогда                    
		Сообщить("Не установлена текущая учетная запись платежной системы Мандарин! Проверьте настройки.Запрос не выполнен.");
		Возврат;
	КонецЕсли;
	
	Если Результат = "Лимит" Тогда                    
		Сообщить("Для операций отмен превышен суточный лимит! Запрос не выполнен.");
		Возврат;
	КонецЕсли;

	
	бит_Мандарин.ЗаписатьУспешнуюТранзакцию(Результат,ПараметрыЗапроса);
	КодОтвета = Результат[Результат.Количество()-1];
	Элементы.ГруппаОперации.ТекущаяСтраница = Элементы.Ответ;
	Если КодОтвета <> 200 Тогда
		Текст = "При выполнении операции произошла ошибка! ";
		ТекстОшибки = Строка(КодОтвета) + Символы.ПС + Результат[0];
		Сообщить(Текст + ТекстОшибки);
	Иначе
		строкаТранзакция = Результат[0]; 
		Транзакция = бит_Мандарин.ВычислитьНомерТранзакции(строкаТранзакция);
		объект.Транзакция = "";
		Объект.Транзакция = Транзакция; 
		юСсылка = бит_Мандарин.ВычислитьЮзерскуюСсылку(Результат);
		Объект.СсылкаДляПлательщика = юСсылка;
		Текст = "Операция зарегистрирована! ";
		Если ЗначениеЗаполнено(юСсылка) Тогда
			ТекстСсылка = "Сообщите плательщику данную ссылку для завершения операции "+СклонениеФИО.daСклонение(Строка(ПараметрыЗапроса.Действие),"Р",,,)+ " по e-mail или sms!";
			Текст = Текст + ТекстСсылка;	
		КонецЕсли;
		Сообщить(Текст);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ТестКоллбекаНаСервере()
	// создаем новое HTTP соединение с указанием сервера
	// последний параметр отвечает за использование защищенного соединения
	HTTP = Новый HTTPСоединение(
		Строка(Перечисления.АдресаСерверов.TestPing),,,,,
		ТаймаутСоединения.ДляМгновеннойОперации(),,);
	
	Поток = Новый ПотокВПамяти();
	Запись = Новый ЗаписьДанных(Поток);
	Запись.РазделительСтрок = "";
	Запись.КонвертируемыйРазделительСтрок = "";
	Запись.ЗаписатьСтроку("Судебный Максим Петрович:1");
	ДД = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
	строкаАвторизации = Base64Строка(ДД);
	строкаАвторизации = СтрЗаменить(строкаАвторизации,"¶","");
	
	//заголовок создадим в виде соответствия
	ЗаголовокЗапросаHTTP = Новый Соответствие();
	ЗаголовокЗапросаHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
//	ЗаголовокЗапросаHTTP.Вставить("Authorization", "Basic "+строкаАвторизации);
	
	//создадим заголовок запроса
	ЗапросHTTP = Новый HTTPЗапрос("3502_Mandarin/hs/Callback/PostOrderCallBack", ЗаголовокЗапросаHTTP);
	
	ЗапросHTTP.УстановитьТелоИзСтроки("testCallBack");
	//отсылаем POST-запрос на обработку.
	//ссылкаНаРесурс — ссылка на веб-сервер (страницу), к которой посылается POST
	//запрос
	ОтветHTTP = HTTP.ОтправитьДляОбработки(ЗапросHTTP);
КонецПроцедуры

&НаКлиенте
Процедура ТестКоллбека(Команда)
	ТестКоллбекаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбъектУчетаПриИзмененииНаСервере()
	тзДанныеПлательщиков = бит_Мандарин.ЗаполнитьДанныеПлательщика(Объект.ОбъектУчета);
	Объект.ДанныеПлательщиков.Очистить();
	Объект.ДанныеПлательщиков.Загрузить(тзДанныеПлательщиков);
КонецПроцедуры

&НаКлиенте
Процедура ОбъектУчетаПриИзменении(Элемент)
	ОбъектУчетаПриИзмененииНаСервере();
	Попытка
		Элементы.ДанныеПлательщиков.ТекущаяСтрока = Объект.ДанныеПлательщиков[0].ПолучитьИдентификатор();
	Исключение
	Конецпопытки;
КонецПроцедуры



&НаКлиенте
Процедура ДанныеПлательщиковПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.ДанныеПлательщиков.ТекущиеДанные;
	Объект.Плательщик = "";
	Объект.ЕмаилПлательщика = "";
	Объект.ТелефонПлательщика = "";
	Объект.ТокенКарты = "";
	
	Если ТекДанные <> Неопределено Тогда
		Объект.Плательщик = ТекДанные.Плательщик;
		Объект.ЕмаилПлательщика = ТекДанные.ЕмаилПлательщика;
		Объект.ТелефонПлательщика = ТекДанные.ТелефонПлательщика;
		Объект.ТокенКарты = ТекДанные.ТокенКарты;
	КонецЕсли;
КонецПроцедуры




&НаКлиенте
Процедура ОтправитьСсылкуEmail(Команда)
	Если не ЗначениеЗаполнено(Объект.ОбъектУчета) Тогда
		Сообщить("Для отправки ссылок необходимо выбрать объект учета и сформировать ссылку для плательщика!");
		Возврат;
	КонецЕсли;	
	ФормаМаил = ПолучитьФорму("ОбщаяФорма.ФормаОтправкиEmailизКарточки");
	ФормаМаил.ВладелецФормы = ЭтаФорма;
	ФормаМаил.Открыть();
КонецПроцедуры


&НаСервере
Функция ПроверитьТипКонтактныеЛица(Плательщик)
	Возврат ТипЗнч(Плательщик) = Тип("СправочникСсылка.КонтактныеЛицаПоДолжнику");
КонецФункции


&НаКлиенте
Процедура ОтправитьСсылкуSMS(Команда)
	
	Если не ЗначениеЗаполнено(Объект.ОбъектУчета) Тогда
		Сообщить("Для отправки ссылок необходимо выбрать объект учета и сформировать ссылку для плательщика!");
		Возврат;
	КонецЕсли;	
	
	КЛ  = ПроверитьТипКонтактныеЛица(Объект.Плательщик);
	
	Если НЕ КЛ Тогда
		
		Если КонтрольСобытий.КонтрольЧасовогоПояса(Объект.Плательщик) Тогда
			Возврат;
		КонецЕсли;
		
		Если КонтрольСобытий.КонтрольСМС(Объект.Плательщик) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ФормаСМС = ПолучитьФорму("Обработка.бит_Битфон.Форма.ОтправкаСМС");
	ФормаСМС.ВладелецФормы = ЭтаФорма;
	стрСМСЛогин = "";
	стрСМСПароль = "";
	стрОтправитель = "";
	Автоинформирование.ПолучитьПараметрыОтправкиСМС(стрСМСЛогин, стрСМСПароль, стрОтправитель);
	ФормаСМС.СМСЛогин = стрСМСЛогин;
	ФормаСМС.СМСПароль = стрСМСПароль;
	Если ЗначениеЗаполнено(стрОтправитель) Тогда
		ФормаСМС.Элементы.Отправитель.СписокВыбора.Добавить(стрОтправитель);
		ФормаСМС.Отправитель = стрОтправитель;
	КонецЕсли;
	ФормаСМС.НомерПолучателя = Объект.ТелефонПлательщика;
	Действие = Объект.ВидЗаказа;
	Шаблон = ?(строка(Действие) = "Токен",ОбъектыСервер.ПолучитьЗначениеКонстанты("MandarinШаблонТекстаТокен"),ОбъектыСервер.ПолучитьЗначениеКонстанты("MandarinШаблонТекстаОплата"));
	Текст = Автоинформирование.ПолучитьПодсказку(Объект.ОбъектУчета, Шаблон);
	ФормаСМС.ТекстСМС = Текст + Строка(Объект.СсылкаДляПлательщика);
	ФормаСМС.Открыть();	
КонецПроцедуры


&НаКлиенте
Процедура ДанныеТранзакцийПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.ДанныеТранзакций.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Объект.ОтменяемаяТранзакция = ТекДанные.Транзакция;
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ОбновитьДанныеТранзакцийНаСервере()
	тзДанныеТранзакций = Бит_Мандарин.СформироватьСписокУспешныхТранзакцийПлатежей();
	Объект.ДанныеТранзакций.Загрузить(тзДанныеТранзакций);
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьДанныеТранзакций(Команда)
	ОбновитьДанныеТранзакцийНаСервере();
КонецПроцедуры


&НаКлиенте                                                                                 
Процедура logoНажатие(Элемент)
	ЗапуститьПриложение("https://mandarin.io/partner_firstbit");
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбъектУчетаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Функция ПроверкаСогласияНаАвтосписание(ОбъектУ)
	Возврат Бит_Мандарин.ПроверкаСогласияНаАвтосписание(ОбъектУ); 
КонецФункции



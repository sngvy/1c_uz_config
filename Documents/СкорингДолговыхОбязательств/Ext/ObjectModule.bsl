
Процедура ОбработкаПроведения(Отказ, Режим)
	//Проверка на двойников
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	СкорингДолговыхОбязательствОбъекты.Объект,
	                      |	КОЛИЧЕСТВО(*) КАК КолВо
	                      |ИЗ
	                      |	Документ.СкорингДолговыхОбязательств.Объекты КАК СкорингДолговыхОбязательствОбъекты
	                      |ГДЕ
	                      |	СкорингДолговыхОбязательствОбъекты.Ссылка = &Ссылка
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	СкорингДолговыхОбязательствОбъекты.Объект
	                      |
	                      |ИМЕЮЩИЕ
	                      |	КОЛИЧЕСТВО(*) > 1");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Отказ = Не Запрос.Выполнить().Пустой();
	
	//
	Если Не Отказ Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	СкорингДолговыхОбязательствОбъекты.Объект,
		               |	СкорингДолговыхОбязательствОбъекты.Категория,
		               |	СкорингДолговыхОбязательствОбъекты.Ссылка.Скоринг КАК Скоринг,
		               |	СкорингДолговыхОбязательствОбъекты.НомерСтроки,
		               |	СкорингДолговыхОбязательствОбъекты.КатегорияСтарая
		               |ПОМЕСТИТЬ ТаблицаДокумента
		               |ИЗ
		               |	Документ.СкорингДолговыхОбязательств.Объекты КАК СкорингДолговыхОбязательствОбъекты
		               |ГДЕ
		               |	СкорингДолговыхОбязательствОбъекты.Ссылка = &Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТаблицаДокумента.Объект,
		               |	ТаблицаДокумента.Категория,
		               |	ТаблицаДокумента.Скоринг,
		               |	СостоянияПоКатегориямОстатки.Объект КАК ОбъектИзРегистра,
		               |	ЕСТЬNULL(СостоянияПоКатегориямОстатки.Объект, 0) КАК ОбъектNULL,
		               |	ТаблицаДокумента.НомерСтроки,
		               |	ТаблицаДокумента.КатегорияСтарая
		               |ПОМЕСТИТЬ ВременнаяТаблица
		               |ИЗ
		               |	ТаблицаДокумента КАК ТаблицаДокумента
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СостоянияПоКатегориям.Остатки КАК СостоянияПоКатегориямОстатки
		               |		ПО ТаблицаДокумента.Объект = СостоянияПоКатегориямОстатки.Объект
		               |			И ТаблицаДокумента.Скоринг = СостоянияПоКатегориямОстатки.Скоринг
		               |			И ТаблицаДокумента.Категория = СостоянияПоКатегориямОстатки.Категория
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВременнаяТаблица.Объект,
		               |	ВременнаяТаблица.Категория,
		               |	ВременнаяТаблица.Скоринг,
		               |	ВременнаяТаблица.ОбъектNULL,
		               |	ВременнаяТаблица.НомерСтроки,
		               |	ВременнаяТаблица.КатегорияСтарая
		               |ИЗ
		               |	ВременнаяТаблица КАК ВременнаяТаблица
		               |ГДЕ
		               |	ВременнаяТаблица.ОбъектNULL = 0";
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Количество() = 0 Тогда
			Отказ = Истина;
			Сообщить("Таблица пуста!");
			Возврат;
		КонецЕсли;
		
		Движения.СобытияПоОбъектам.Записывать = Истина;
		Движения.СостоянияПоКатегориям.Записывать = Истина;
				
		Пока Результат.Следующий() Цикл
			Движение = Движения.СобытияПоОбъектам.Добавить();
			Движение.Период = Дата;
			Движение.Регистратор = ЭтотОбъект.Ссылка;
			Движение.Объект = Результат.Объект;
			Движение.Автор = ЭтотОбъект.Автор;
			Движение.ВидСобытия = Перечисления.ВидыСобытий.ИзменениеКатегории;
			Движение.ИсточникСобытия = ЭтотОбъект.Ссылка;
			Движение.Категория = Результат.Категория;
										 
			Если Не Результат.КатегорияСтарая.Пустая() Тогда
				Движение = Движения.СостоянияПоКатегориям.Добавить();
	            Движение.Период = Дата;
				Движение.Регистратор = ЭтотОбъект.Ссылка;
				Движение.Скоринг = Результат.Скоринг;
				Движение.Объект = Результат.Объект;
				Движение.Категория = Результат.КатегорияСтарая;
				Движение.Количество = 1;
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			КонецЕсли;
			
			Если Не Результат.Категория.Пустая() Тогда
				Движение = Движения.СостоянияПоКатегориям.Добавить();
	            Движение.Период = Дата;
				Движение.Регистратор = ЭтотОбъект.Ссылка;
				Движение.Скоринг = Результат.Скоринг;
				Движение.Объект = Результат.Объект;
				Движение.Категория = Результат.Категория;
				Движение.Количество = 1;
				Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;		
КонецПроцедуры
		
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	ОбъектыСервер.ОбработкаЗаполненияДокументов(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
КонецПроцедуры

Процедура РаспределитьСервер() Экспорт
	Если ЭтотОбъект.Скоринг.Пустая() Тогда
		Сообщить("Не выбран тип скоринга!");
		Возврат;
	ИначеЕсли ЭтотОбъект.Объекты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////
	//Запрос через произвольную процедуру
	Если ЭтотОбъект.Скоринг.ПроизвольнаяПроцедура Тогда
		РаспределитьПоПроизвольнойПроцедуре();
		Возврат;
	КонецЕсли;
	//////////////////////////////////////////////////////////////////////////////
	
	СКД = ПланыВидовХарактеристик.ВидыСкоринга.ПолучитьМакет("Макет");	
	СКД.НаборыДанных.Получить(0).Запрос = ЭтотОбъект.Скоринг.ЗапросМакета;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(ЭтотОбъект.Скоринг.ПользовательскиеПоля.Получить());
			
	ИмяПоля = "Объект";

	Отбор = КомпоновщикНастроек.Настройки.Структура[0].Отбор.Элементы;
	ЭлементОтбора = Отбор.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(ЭтотОбъект.Объекты.ВыгрузитьКолонку(ИмяПоля));
	
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ПравоеЗначение = Список;
	ЭлементОтбора.Использование = Истина;
	
	ПоляГруппировки = КомпоновщикНастроек.Настройки.Структура[0].ПоляГруппировки.Элементы;
	ПоляГруппировки.Очистить();
	
	ПутьКДанным = КомпоновщикНастроек.Настройки.ПользовательскиеПоля.Элементы[0].ПутьКДанным;
	//
	ПолеКатегория = ПоляГруппировки.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	//ПолеКатегория.Поле = Новый ПолеКомпоновкиДанных("UserFields.field1");
	ПолеКатегория.Поле = Новый ПолеКомпоновкиДанных(ПутьКДанным);
	
	
	ПолеДолжник = ПоляГруппировки.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеДолжник.Поле = Новый ПолеКомпоновкиДанных("Объект");
		
	Источник = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД);
	КомпоновщикНастроек.Инициализировать(Источник);
	
	                      
	///////////////////////////////////////////////////////////////////
	ПараметрДанныхКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ТекущаяДата");
	Если ПараметрДанныхКонецПериода <> Неопределено Тогда
		ПараметрДанныхКонецПериода.Значение = ТекущаяДата();
		ПараметрДанныхКонецПериода.Использование = Истина;
	КонецЕсли;
	
	ПараметрДанныхДатаДокумента = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДатаДокумента");
	Если ПараметрДанныхДатаДокумента <> Неопределено Тогда
		ПараметрДанныхДатаДокумента.Значение = ЭтотОбъект.Дата;
		ПараметрДанныхДатаДокумента.Использование = Истина;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////
	                          
	//УПРАВЛЕНИЕ ПАРАМЕТРАМИ И КОНТРОЛЬ ЗАПОЛНЕНИЯ
	Если Не ПроверкаКорректныхПараметров(КомпоновщикНастроек) Тогда
		Возврат;	
	КонецЕсли;    
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	Попытка
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, КомпоновщикНастроек.Настройки,,, 
				Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	Исключение
		Сообщить("Проверьте правильность пользовательских полей. Распределение отменено.");
		Возврат;
	КонецПопытки;
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, КомпоновщикНастроек.Настройки);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	

	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений = 
			Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
	ТЗ = Новый ТаблицаЗначений();
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.УстановитьОбъект(ТЗ);	
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.Вывести(ПроцессорКомпоновкиДанных);
	             
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Таблица.Объект,
	                      |	ЕСТЬNULL(Таблица.UserFieldsField1, 0) КАК UserFieldsField1						  
	                      |ПОМЕСТИТЬ Таблица
	                      |ИЗ
	                      |	&Таблица КАК Таблица
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Список.Объект
	                      |ПОМЕСТИТЬ Список
	                      |ИЗ
	                      |	&Список КАК Список
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Список.Объект,
	                      |	ЕСТЬNULL(СостоянияПоКатегориямОстатки.Категория, ЗНАЧЕНИЕ(Справочник.Категории.ПустаяСсылка)) КАК КатегорияСтарая,
	                      |	ЕСТЬNULL(Категории.Ссылка, ЗНАЧЕНИЕ(Справочник.Категории.ПустаяСсылка)) КАК Категория
	                      |ИЗ
	                      |	Список КАК Список
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Таблица КАК Таблица
	                      |		ПО Список.Объект = Таблица.Объект
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СостоянияПоКатегориям.Остатки(&Период, Скоринг = &Скоринг) КАК СостоянияПоКатегориямОстатки
	                      |		ПО Список.Объект = СостоянияПоКатегориямОстатки.Объект
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Категории КАК Категории
	                      |		ПО (Категории.Владелец = &Скоринг)
	                      |			И (Таблица.UserFieldsField1 = Категории.Код)						  
	                      |ГДЕ
	                      |	ЕСТЬNULL(СостоянияПоКатегориямОстатки.Категория, ЗНАЧЕНИЕ(Справочник.Категории.ПустаяСсылка)) <> ЕСТЬNULL(Категории.Ссылка, ЗНАЧЕНИЕ(Справочник.Категории.ПустаяСсылка))
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ Таблица
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ Список");
	Запрос.Текст = стрЗаменить(Запрос.Текст, "UserFieldsField1", стрЗаменить(ПутьКДанным, ".", ""));
	Запрос.УстановитьПараметр("Таблица", ТЗ);
	Запрос.УстановитьПараметр("Список", ЭтотОбъект.Объекты.Выгрузить());
	Запрос.УстановитьПараметр("Скоринг", ЭтотОбъект.Скоринг);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Результат = Запрос.ВыполнитьПакет();
	ЭтотОбъект.Объекты.Загрузить(Результат[2].Выгрузить());
КонецПроцедуры 

Процедура РаспределитьПоПроизвольнойПроцедуре()
	Таблица = ЭтотОбъект.Объекты.Выгрузить();
	ПланыВидовХарактеристик.ВидыСкоринга.ВыполнитьПроцедуру(ЭтотОбъект.Скоринг.ЗапросМакета, Таблица);
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Таблица.Объект,
	                      |	Таблица.Категория
	                      |ПОМЕСТИТЬ Таблица
	                      |ИЗ
	                      |	&Таблица КАК Таблица
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Список.Объект
	                      |ПОМЕСТИТЬ Список
	                      |ИЗ
	                      |	&Список КАК Список
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Список.Объект,
	                      |	ЕСТЬNULL(Таблица.Категория, ЗНАЧЕНИЕ(Справочник.Категории.ПустаяСсылка)) КАК Категория,
	                      |	ЕСТЬNULL(СостоянияПоКатегориямОстатки.Категория, ЗНАЧЕНИЕ(Справочник.Категории.ПустаяСсылка)) КАК КатегорияСтарая
	                      |ИЗ
	                      |	Список КАК Список
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Таблица КАК Таблица
	                      |		ПО Список.Объект = Таблица.Объект
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СостоянияПоКатегориям.Остатки(, Скоринг = &Скоринг) КАК СостоянияПоКатегориямОстатки
	                      |		ПО (Таблица.Объект = СостоянияПоКатегориямОстатки.Объект)
	                      |ГДЕ
	                      |	ЕСТЬNULL(Таблица.Категория, ЗНАЧЕНИЕ(Справочник.Категории.ПустаяСсылка)) <> ЕСТЬNULL(СостоянияПоКатегориямОстатки.Категория, ЗНАЧЕНИЕ(Справочник.Категории.ПустаяСсылка))");					  
	Запрос.УстановитьПараметр("Скоринг", ЭтотОбъект.Скоринг);					  
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Запрос.УстановитьПараметр("Список", ЭтотОбъект.Объекты.Выгрузить());
	ЭтотОбъект.Объекты.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

Функция ПроверкаКорректныхПараметров(КомпоновщикНастроек);
	Успех = Истина;
	Для Каждого Параметр Из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		Если ЗначениеЗаполнено(Параметр.Значение) Тогда
			Продолжить;		
		ИначеЕсли Строка(Параметр.Параметр) = "Период" ИЛИ Строка(Параметр.Параметр) = "BeginOfPeriod" 
				ИЛИ Строка(Параметр.Параметр) = "EndOfPeriod" Тогда
			Продолжить;		
		КонецЕсли;
		
		Сообщить("	В скоринге: " + ЭтотОбъект.Скоринг + ", не заполнен параметр " + Параметр.Параметр, 
				СтатусСообщения.Внимание); 
		Успех = Ложь;
	КонецЦикла;
	
	ОбнаруженаОшибка = Не Успех;
	Возврат Успех;
КонецФункции


#Область СборщикЗагрузки

Функция ЗаполнитьБазовыеЗначения(Значения) Экспорт
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Значения);
	
	Возврат ЭтотОбъект;
	
КонецФункции // ()

Функция ЗагрузитьСоответствия(Значение) Экспорт
	
	ЗагрузитьНастройкиСоответствий(Значение);
	
	Возврат ЭтотОбъект;
	
КонецФункции // ()

Процедура Загрузить(ТабличныйДокумент) Экспорт
	
	ТаблицаДанных = СформироватьТаблицуДанных(ТабличныйДокумент);
	
	ЗагрузитьДанные(ТаблицаДанных, ТабличныйДокумент);
	
КонецПроцедуры


#КонецОбласти

&НаСервере
Процедура ИнициализироватьОбъектыУчета() Экспорт
	ЭтотОбъект.УчетПоДО = Константы.УчетПоДО.Получить();
	ЭтотОбъект.УчетПоИД = Константы.УчетПоИД.Получить();
	ЭтотОбъект.УчетПоЗ = Константы.УчетПоЗ.Получить();
	ЭтотОбъект.УчетПоД = Константы.УчетПоДоговорам.Получить();
	ЭтотОбъект.УчетПоУ = Константы.УчетПоУслугам.Получить();
	ЭтотОбъект.УчетПоДолжникам = Константы.УчетПоДО.Получить();
	ЭтотОбъект.УчетПоКредиторам = Константы.УчетПоДО.Получить();
	ЭтотОбъект.УчетПоКонтрагентам = Константы.УчетПоДО.Получить() ИЛИ Константы.УчетПоДоговорам.Получить();
	
	ЭтотОбъект.КонтрольДО = ЭтотОбъект.УчетПоДО;
	ЭтотОбъект.КонтрольИД = ЭтотОбъект.КонтрольД;
	ЭтотОбъект.КонтрольЗ = ЭтотОбъект.УчетПоЗ;
	ЭтотОбъект.КонтрольД = ЭтотОбъект.УчетПоД;
	ЭтотОбъект.КонтрольУ = ЭтотОбъект.УчетПоУ;
	ЭтотОбъект.КонтрольДолжники = ЭтотОбъект.УчетПоДолжникам;
	ЭтотОбъект.КонтрольКредиторы = ЭтотОбъект.УчетПоКредиторам;
	ЭтотОбъект.КонтрольКонтрагенты = ЭтотОбъект.УчетПоКонтрагентам;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиСоответствий(Настр) Экспорт
	ЭтотОбъект.НастройкаСоответствий.Загрузить(Настр.НастройкаСоответствий.Выгрузить());	
	//Контакты Чуров
	ЭтотОбъект.НастройкаСоответствийКонтакты.Загрузить(Настр.НастройкаСоответствийКонтакты.Выгрузить());	
	ЭтотОбъект.ТипДоговоров = Настр.ТипДоговоров;
	ЭтотОбъект.ТипДолговыхОбязательств = Настр.ТипДолговыхОбязательств;
	ЭтотОбъект.ТипДолжников = Настр.ТипДолжников;
	ЭтотОбъект.ТипЗалогов = Настр.ТипЗалогов;
	ЭтотОбъект.ТипИсполнительныхДокументов = Настр.ТипИсполнительныхДокументов;
	ЭтотОбъект.ТипКонтрагентов = Настр.ТипКонтрагентов;
	ЭтотОбъект.ТипКредиторов = Настр.ТипКредиторов;
	ЭтотОбъект.ТипУслуг = Настр.ТипУслуг;
	
	ЭтотОбъект.УчетПоДО = Настр.УчетПоДО;
	ЭтотОбъект.УчетПоИД = Настр.УчетПоИД;
	ЭтотОбъект.УчетПоЗ = Настр.УчетПоЗ;
	ЭтотОбъект.УчетПоД = Настр.УчетПоД;
	ЭтотОбъект.УчетПоУ = Настр.УчетПоУ;
	ЭтотОбъект.УчетПоДолжникам = Настр.УчетПоДолжникам;
	ЭтотОбъект.УчетПоКредиторам = Настр.УчетПоКредиторам;
	ЭтотОбъект.УчетПоКонтрагентам = Настр.УчетПоКонтрагентам;
	
	ЭтотОбъект.КонтрольД = Настр.КонтрольД;
	ЭтотОбъект.КонтрольДО = Настр.КонтрольДО;
	ЭтотОбъект.КонтрольЗ = Настр.КонтрольЗ;
	ЭтотОбъект.КонтрольДолжники = Настр.КонтрольДолжники;
	ЭтотОбъект.КонтрольИД = Настр.КонтрольИД;
	ЭтотОбъект.КонтрольКонтрагенты = Настр.КонтрольКонтрагенты;
	ЭтотОбъект.КонтрольКредиторы = Настр.КонтрольКредиторы;
	ЭтотОбъект.КонтрольУ = Настр.КонтрольУ;
	
	ОграничитьНастройкиПоОбъектамУчета();
КонецПроцедуры

&НаСервере
Процедура ОграничитьНастройкиПоОбъектамУчета() Экспорт
	УдалитьИлиДобавитьВкладку(Перечисления.ВидыНазначенийСвойств.ДоговорыКонтрагентов, ЭтотОбъект.УчетПоД, "Справочник ссылка: Типы договоров контрагентов", "Код договора", "Номер договора", "Тип договора", ЭтотОбъект.ТипДоговоров, Справочники.ТипыДоговоровКонтрагентов);
	УдалитьИлиДобавитьВкладку(Перечисления.ВидыНазначенийСвойств.ДолговыеОбязательства, ЭтотОбъект.УчетПоДО, "Справочник ссылка: Типы долговых обязательств", "Код долгового обязательства", "Номер долгового обязательства", "Тип долгового обязательства", ЭтотОбъект.ТипДолговыхОбязательств, Справочники.ТипыДолговыхОбязательств);
	УдалитьИлиДобавитьВкладку(Перечисления.ВидыНазначенийСвойств.Должники, ЭтотОбъект.УчетПоДолжникам, "Справочник ссылка: ЮрФизЛицо", "Код должника", "Ф.И.О. Должника", "Тип должника", ЭтотОбъект.ТипДолжников, Справочники.ЮрФизЛицо);
	УдалитьИлиДобавитьВкладку(Перечисления.ВидыНазначенийСвойств.Залоги, ЭтотОбъект.УчетПоЗ, "Справочник ссылка: Типы залогов", "Код залога", "Номер залога", "Тип залога", ЭтотОбъект.ТипЗалогов, Справочники.Залоги);
	УдалитьИлиДобавитьВкладку(Перечисления.ВидыНазначенийСвойств.ИсполнительныеДокументы, ЭтотОбъект.УчетПоИД, "Справочник ссылка: Типы исполнительных листов", "Код исполнительного документа", "Номер исполнительного документа", "Тип исполнительного документа", ЭтотОбъект.ТипИсполнительныхДокументов, Справочники.ИсполнительныеДокументы);
	УдалитьИлиДобавитьВкладку(Перечисления.ВидыНазначенийСвойств.Контрагенты, ЭтотОбъект.УчетПоКонтрагентам, "Справочник ссылка: ЮрФизЛицо", "Код контрагента", "Ф.И.О. контрагента", "Тип контрагента", ЭтотОбъект.ТипКонтрагентов, Справочники.ЮрФизЛицо);
	УдалитьИлиДобавитьВкладку(Перечисления.ВидыНазначенийСвойств.Кредиторы, ЭтотОбъект.УчетПоКредиторам, "Справочник ссылка: ЮрФизЛицо", "Код кредитора", "Ф.И.О. Кредитора", "Тип кредитора", ЭтотОбъект.ТипКредиторов, Справочники.ЮрФизЛицо);
	УдалитьИлиДобавитьВкладку(Перечисления.ВидыНазначенийСвойств.Услуги, ЭтотОбъект.УчетПоУ, "Справочник ссылка: Типы услуг", "Код услуги", "Номер услуги", "Тип услуги", ЭтотОбъект.ТипУслуг, Справочники.УслугиПоДоговору);
КонецПроцедуры

&НаСервере
Процедура УдалитьИлиДобавитьВкладку(Назначение, Флаг, СтрокаТип, Стр1, Стр2, Стр3, ТипОбъектаСсылка, СправочникМенеджер)
	Отбор = Новый Структура;
	Отбор.Вставить("Назначение", Назначение);
	Строки = ЭтотОбъект.НастройкаСоответствий.НайтиСтроки(Отбор);
	Если Строки.Количество() = 0 Тогда
		Если Флаг Тогда
			ДобавитьСтрокуКНастройкамСоответствий(Стр1, Назначение, Перечисления.ВидыРеквизитов.Код, "", "Строка");
			ДобавитьСтрокуКНастройкамСоответствий(Стр2, Назначение, Перечисления.ВидыРеквизитов.Наименование, "", "Строка");
			ДобавитьСтрокуКНастройкамСоответствий(Стр3, Назначение, Перечисления.ВидыРеквизитов.ТипОбъекта, "", СтрокаТип);
		КонецЕсли;
	Иначе
		Если Не Флаг Тогда
			Для i = 0 По Строки.Количество() - 1 Цикл
				ЭтотОбъект.НастройкаСоответствий.Удалить(Строки[i]);			
			КонецЦикла;	
			ТипОбъектаСсылка = СправочникМенеджер.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуКНастройкамСоответствий(Имя, Назначение, ВидРеквизита, Код, Тип)
	Строка = ЭтотОбъект.НастройкаСоответствий.Добавить();
	Строка.ИмяСвойства = Имя;
	Строка.Назначение = Назначение;
	Строка.ВидРеквизита = ВидРеквизита;
	Строка.КодСвойства = Код;
	Строка.ТипДанных = Тип;
КонецПроцедуры

&НаСервере
Функция СформироватьТаблицуДанных(ПолеИсходнойТаблицы) Экспорт
	тзДанные = Новый ТаблицаЗначений;
	тзДанные.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"), "N");
	Для Каждого Элемент ИЗ ЭтотОбъект.НастройкаСоответствий Цикл
		Имя = СтрЗаменить(Строка(Элемент.Назначение)," ", "") + "_" + СтрЗаменить(Строка(Элемент.ВидРеквизита), " ", "") + "_" + СтрЗаменить(Строка(Элемент.КодСвойства), " ", "_");
		Синоним = Элемент.ИмяСвойства;
		Если Элемент.ВидРеквизита = ПредопределенноеЗначение("Перечисление.ВидыРеквизитов.Код") Тогда
			ТипЗначения = Новый ОписаниеТипов("Строка");
		ИначеЕсли Элемент.ВидРеквизита = ПредопределенноеЗначение("Перечисление.ВидыРеквизитов.Наименование") Тогда
			ТипЗначения = Новый ОписаниеТипов("Строка");
		ИначеЕсли Элемент.ВидРеквизита = ПредопределенноеЗначение("Перечисление.ВидыРеквизитов.Процедура") Тогда
			ТипЗначения = Новый ОписаниеТипов("Строка");
		ИначеЕсли Элемент.ВидРеквизита = ПредопределенноеЗначение("Перечисление.ВидыРеквизитов.ДополнительноеСведение") ИЛИ Элемент.ВидРеквизита = ПредопределенноеЗначение("Перечисление.ВидыРеквизитов.ДополнительныйРеквизит") Тогда
			ТипЗначения = НайтиТипПВХ(Элемент.КодСвойства);
		ИначеЕсли Элемент.ВидРеквизита = ПредопределенноеЗначение("Перечисление.ВидыРеквизитов.ОтветственныйСотрудник") Тогда
			ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
		ИначеЕсли Элемент.ВидРеквизита = ПредопределенноеЗначение("Перечисление.ВидыРеквизитов.ТипЗадолженности") ИЛИ Элемент.ВидРеквизита = ПредопределенноеЗначение("Перечисление.ВидыРеквизитов.ТипОбъекта") Тогда
			ТипЗначения = Новый ОписаниеТипов(СтрЗаменить(СтрЗаменить(Элемент.ТипДанных, ":", "."), " ", ""));
		КонецЕсли;
		
		тзДанные.Колонки.Добавить(Имя, ТипЗначения, Синоним);
	КонецЦикла;
	
	п = 1;
	Для Каждого Элемент Из ЭтотОбъект.НастройкаСоответствийКонтакты Цикл					
		//Добавляем колонку в таблицу тзДанные
		тзДанные.Колонки.Добавить("Должники_ВидТелефона" + п, новый ОписаниеТипов("Строка"), "Вид телефона" + п);
		тзДанные.Колонки.Добавить("Должники_Номер" + п, новый ОписаниеТипов("Строка"), "Номер" + п);
		тзДанные.Колонки.Добавить("Должники_КонтактноеЛицо" + п, новый ОписаниеТипов("Строка"), "Контактное лицо" + п);
		
		п = п + 1;
	КонецЦикла;
	
	
	Мегазагрузка(тзДанные, ПолеИсходнойТаблицы);
	Возврат тзДанные;
КонецФункции

&НаСервере
Функция НайтиТипПВХ(КодСвойства)
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоКоду(КодСвойства);
	Возврат Свойство.ТипЗначения;
КонецФункции


&НаСервере
Процедура ЗагрузитьДанные(тзДанные, ПолеИсходнойТаблицы) Экспорт	
	ДокументЗагрузка = Документы.ЗагрузкаРеестров.СоздатьДокумент();
	ДокументЗагрузка.Автор = ЭтотОбъект.Автор;
	ДокументЗагрузка.Организация = ЭтотОбъект.Организация;
	ДокументЗагрузка.Комментарий = ЭтотОбъект.Комментарий;
	ДокументЗагрузка.Дата = ТекущаяДатаСеанса();
	
	ДокументЗагрузка.НастройкаСоответствий.Загрузить(ЭтотОбъект.НастройкаСоответствий.Выгрузить());	
	//Контакты Чуров
	ДокументЗагрузка.НастройкаСоответствийКонтакты.Загрузить(ЭтотОбъект.НастройкаСоответствийКонтакты.Выгрузить());	
	ДокументЗагрузка.ТипДоговоров = ЭтотОбъект.ТипДоговоров;
	ДокументЗагрузка.ТипДолговыхОбязательств = ЭтотОбъект.ТипДолговыхОбязательств;
	ДокументЗагрузка.ТипДолжников = ЭтотОбъект.ТипДолжников;
	ДокументЗагрузка.ТипЗалогов = ЭтотОбъект.ТипЗалогов;
	ДокументЗагрузка.ТипИсполнительныхДокументов = ЭтотОбъект.ТипИсполнительныхДокументов;
	ДокументЗагрузка.ТипКонтрагентов = ЭтотОбъект.ТипКонтрагентов;
	ДокументЗагрузка.ТипКредиторов = ЭтотОбъект.ТипКредиторов;
	ДокументЗагрузка.ТипУслуг = ЭтотОбъект.ТипУслуг;
	ДокументЗагрузка.ОбновлятьРанееЗаписанные = ЭтотОбъект.ОбновлятьРанееЗаписанные;
	ДокументЗагрузка.ДатаАктуализацииЗадолженности = ЭтотОбъект.ДатаАктуализацииЗадолженности;
	
	ДокументЗагрузка.ЗаписатьСодержимоеХранилищаТЗДанных(тзДанные);
	Если КонтрольЗаполнения(тзДанные) Тогда
		ДокументЗагрузка.ПроизвестиЗагрузку();
		Если ДокументЗагрузка.СозданныеОбъекты.Количество() > 0 ИЛИ ДокументЗагрузка.ИзмененныеОбъекты.Количество() > 0 Тогда
			ДокументЗагрузка.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			УправлениеЗагрузкамиДанных.ПоместитьТабличнуюЧастьВХранилище(ПолеИсходнойТаблицы, ДокументЗагрузка.Ссылка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция КонтрольЗаполнения(тзДанные) Экспорт
	Возврат Контроль(тзДанные, "Долговыеобязательства_Наименование_", "Долговыеобязательства_Код_", "Долговыеобязательства_Типобъекта_", "долгового обязательства", Справочники.ТипыДолговыхОбязательств, ЭтотОбъект.КонтрольДО)
	И Контроль(тзДанные, "Должники_Наименование_", "Должники_Код_", "Должники_Типобъекта_", Справочники.ЮрФизЛицо, "должника", ЭтотОбъект.КонтрольДолжники)
	И Контроль(тзДанные, "Контрагенты_Наименование_", "Контрагенты_Код_", "Контрагенты_Типобъекта_", Справочники.ЮрФизЛицо, "контрагента", ЭтотОбъект.КонтрольКонтрагенты)
	И Контроль(тзДанные, "Кредиторы_Наименование_", "Кредиторы_Код_", "Кредиторы_Типобъекта_", Справочники.ЮрФизЛицо, "кредиторы", ЭтотОбъект.КонтрольКредиторы)
	И Контроль(тзДанные, "Залоги_Наименование_", "Залоги_Код_", "Залоги_Типобъекта_", Справочники.ТипыЗалогов, "залога", ЭтотОбъект.КонтрольЗ)
	И Контроль(тзДанные, "Исполнительныедокументы_Наименование_", "Исполнительныедокументы_Код_", "Исполнительныедокументы_Типобъекта_", Справочники.ТипыИсполнительныхЛистов, "исполнительного документа", ЭтотОбъект.КонтрольИД)
	И Контроль(тзДанные, "Договорыконтрагентов_Наименование_", "Договорыконтрагентов_Код_", "Договорыконтрагентов_Типобъекта_", Справочники.ТипыДоговоровКонтрагентов, "договора", ЭтотОбъект.КонтрольД)
	И Контроль(тзДанные, "Услуги_Наименование_", "Услуги_Код_", "Услуги_Типобъекта_", Справочники.ТипыУслуг, "услуги", ЭтотОбъект.КонтрольУ);
КонецФункции

&НаСервере
Функция Контроль(тзДанные, РекНаименование, РекКод, РекТип, СправочникТип, РодительныйПадеж, Контроль)
	Если Контроль Тогда
		НомерСтроки = 0;
		Для Каждого стр из тзДанные Цикл
			НомерСтроки = НомерСтроки + 1;
			Если стр[РекНаименование] = "" Тогда
				ВызватьИсключение "В строке " + Строка(НомерСтроки) + " не заполнено наименование " + РодительныйПадеж + "!";				
				Возврат Ложь;
			КонецЕсли;
			Если стр[РекКод] = "" Тогда
				Сообщить("В строке " + Строка(НомерСтроки) + " не заполнен код " + РодительныйПадеж + "!");
				Возврат Ложь;
			КонецЕсли;
			Если стр[РекТип] = СправочникТип Тогда
				Сообщить("В строке " + Строка(НомерСтроки) + " не заполнен тип " + РодительныйПадеж + "!");
				Возврат Ложь;				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Истина;	
КонецФункции

&НаСервере
Процедура Мегазагрузка(тзДанные, ПолеИсходнойТаблицы) Экспорт
	ЗаполнитьДанные(тзДанные, ПолеИсходнойТаблицы);	
	ЗаполнитьДанные1(тзДанные, ПолеИсходнойТаблицы);
	Кол = тзДанные.Количество() - 1;
	Для н = 0 По Кол Цикл
		//Стр = тзДанные[н];
		ПустаяСтрокаТаблицы = Истина;
		Для Номер = 1 По ПолеИсходнойТаблицы.ШиринаТаблицы Цикл
			Если ЗначениеЗаполнено(ПолеИсходнойТаблицы.Область("R" + Формат(Кол-н+2, "ЧГ=") + "C" + 
				Формат(Номер, "ЧГ=")).Текст) Тогда
				ПустаяСтрокаТаблицы = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПустаяСтрокаТаблицы Тогда
			тзДанные.Удалить(Кол-н);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМассив(Массив, ТипДанных)
	
КонецПроцедуры

&НаСервере
// Заполняет данные.
//
// Параметры:
//  ДокументОбъект - документ; -
//  ПолеИмпорта  - поле импорта;
//  ИмяТаблицы   - имя таблицы. -
// 
Процедура ЗаполнитьДанные(Таб, ПолеИсходнойТаблицы)
	
	//Таб = РеквизитФормыВЗначение("тзДанные");
	Для НомерСтрокиТаблицыИмпорта = 2 По ПолеИсходнойТаблицы.ВысотаТаблицы Цикл
		//ПустаяСтрокаТаблицы = Истина;
		//Для Номер = 1 По ПолеИсходнойТаблицы.ШиринаТаблицы Цикл
		//	Если ЗначениеЗаполнено(ПолеИсходнойТаблицы.Область("R" + Формат(НомерСтрокиТаблицыИмпорта, "ЧГ=") + "C" + 
		//		Формат(Номер, "ЧГ=")).Текст) Тогда
		//		ПустаяСтрокаТаблицы = Ложь;
		//		Прервать;
		//	КонецЕсли;
		//КонецЦикла;
		//
		//Если Не ПустаяСтрокаТаблицы Тогда
		//	Таб.Добавить();
		//КонецЕсли;		
		Таб.Добавить();
	КонецЦикла;
	Для Каждого ТекСтрока Из ЭтотОбъект.НастройкаСоответствий Цикл
		Имя = СтрЗаменить(Строка(ТекСтрока.Назначение)," ", "") + "_" + СтрЗаменить(Строка(ТекСтрока.ВидРеквизита), " ", "") + "_" + СтрЗаменить(Строка(ТекСтрока.КодСвойства), " ", "_");
		Массив = Новый Массив;
		//	ЗаполнитьМассив(Массив, ТекСтрока.ТипДанных);
		//	Для НомерСтрокиТаблицыИмпорта = 2 По ПолеИсходнойТаблицы.ВысотаТаблицы Цикл
		Если ТекСтрока.ТипДанных = "Строка" ИЛИ ТекСтрока.ТипДанных = "Число" ИЛИ ТекСтрока.ТипДанных = "Дата" Тогда
			//	Для Каждого Элемент Из СписокРеквизитов Цикл
			//Если (ТипЗнч(ТекСтрока.ИмяДанных) = Тип("Строка") И Элемент.Представление = Строка(ТекСтрока.ИмяДанных)) ИЛИ 
			//		(ТипЗнч(ТекСтрока.ИмяДанных) <> Тип("Строка") И 
			//			Элемент.Значение = "_" + СтрЗаменить(ТекСтрока.ИмяДанных.Код, " ", "_")) Тогда
			стр = РаботаСДокументами.СформироватьСтрокуИзДанных821(
			ТекСтрока.ПараметрыСвязи, 1, ПолеИсходнойТаблицы, Массив, ТекСтрока.ТипДанных);
			
		КонецЕсли;
		Таб.ЗагрузитьКолонку(Массив, Имя);
	КонецЦикла;
	
	
	//Контакты
	п = 1;
	Для Каждого ТекСтрока Из ЭтотОбъект.НастройкаСоответствийКонтакты Цикл	
		ИмяВидТелефона = "Должники_ВидТелефона" + п;
		ИмяНомер = "Должники_Номер" + п;
		ИмяКонтактноеЛицо = "Должники_КонтактноеЛицо" + п;
		
		МассивВидТелефона = Новый Массив;
		МассивНомер = Новый Массив;
		МассивКонтактноеЛицо = Новый Массив;
		
		стр = РаботаСДокументами.СформироватьСтрокуИзДанных821(
		ТекСтрока.ВидТелефона, 1, ПолеИсходнойТаблицы, МассивВидТелефона, новый описаниеТипов("СправочникСсылка.ВидыТелефонов"));
		Таб.ЗагрузитьКолонку(МассивВидТелефона, ИмяВидТелефона);
		
		стр = РаботаСДокументами.СформироватьСтрокуИзДанных821(
		ТекСтрока.Номер, 1, ПолеИсходнойТаблицы, МассивНомер, новый описаниеТипов("Строка"));
		Таб.ЗагрузитьКолонку(МассивНомер, ИмяНомер);
		
		стр = РаботаСДокументами.СформироватьСтрокуИзДанных821(
		ТекСтрока.КонтактноеЛицо, 1, ПолеИсходнойТаблицы, МассивКонтактноеЛицо, новый описаниеТипов("Строка"));
		Таб.ЗагрузитьКолонку(МассивКонтактноеЛицо, ИмяКонтактноеЛицо);
		
		Для Каждого Элемент Из Таб Цикл
			Если ТекСтрока.ВидТелефонаПоУмолчанию <> Справочники.ВидыТелефонов.ПустаяСсылка() Тогда
				Элемент[ИмяВидТелефона] = ТекСтрока.ВидТелефонаПоУмолчанию;
			КонецЕсли;
		КонецЦикла;	
		
		п = п + 1;	
	КонецЦикла;	
	//ЗначениеВРеквизитФормы(Таб, "тзДанные");
КонецПроцедуры

&НаСервере
// Заполняет данные.
//
// Параметры:
//  ДокументОбъект - документ; -
//  ПолеИмпорта  - поле импорта;
//  ИмяТаблицы   - имя таблицы. -
// 
Процедура ЗаполнитьДанные1(тзДанные, ПолеИсходнойТаблицы) Экспорт
	//ТзДанные = РеквизитФормыВЗначение("тзДанные");
	Для НомерСтрокиТаблицыИмпорта = 2 По ПолеИсходнойТаблицы.ВысотаТаблицы Цикл
		//ПустаяСтрокаТаблицы = Истина;
		//Для Номер = 1 По ПолеИсходнойТаблицы.ШиринаТаблицы Цикл
		//	Если ЗначениеЗаполнено(ПолеИсходнойТаблицы.Область("R" + Формат(НомерСтрокиТаблицыИмпорта, "ЧГ=") + "C" + 
		//			Формат(Номер, "ЧГ=")).Текст) Тогда
		//		ПустаяСтрокаТаблицы = Ложь;
		//		Прервать;
		//	КонецЕсли;
		//КонецЦикла;
		//
		//Если ПустаяСтрокаТаблицы Тогда
		//	Продолжить;
		//КонецЕсли;
		
		НоваяСтрока = тзДанные[НомерСтрокиТаблицыИмпорта - 2];
		НоваяСтрока.НомерСтроки = НомерСтрокиТаблицыИмпорта - 1;
		Для Каждого ТекСтрока Из ЭтотОбъект.НастройкаСоответствий Цикл
			ИмяДанных = СтрЗаменить(Строка(ТекСтрока.Назначение)," ", "") + "_" + СтрЗаменить(Строка(ТекСтрока.ВидРеквизита), " ", "") + "_" + СтрЗаменить(Строка(ТекСтрока.КодСвойства), " ", "_");
			Если НЕ ЗначениеЗаполнено(ТекСтрока.ПараметрыСвязи) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекСтрока.ТипДанных = "Строка" Тогда
				//	Для Каждого Элемент Из СписокРеквизитов Цикл
				//		Если (ТипЗнч(ТекСтрока.ИмяДанных) = Тип("Строка") И Элемент.Представление = Строка(ТекСтрока.ИмяДанных)) ИЛИ 
				//				(ТипЗнч(ТекСтрока.ИмяДанных) <> Тип("Строка") И 
				//					Элемент.Значение = "_" + СтрЗаменить(ТекСтрока.ИмяДанных.Код, " ", "_")) Тогда
				//			НоваяСтрока[Элемент.Значение] = РаботаСДокументами.СформироватьСтрокуИзДанных82(
				//					ТекСтрока.ПараметрыСвязи, НомерСтрокиТаблицыИмпорта, ПолеИсходнойТаблицы);
				//			Прервать;
				//		КонецЕсли
				//	КонецЦикла;	
				
			ИначеЕсли ТекСтрока.ТипДанных = "Строка: Адрес" Тогда
				//Для Каждого Элемент Из СписокРеквизитов Цикл
				//	Если Элемент.Представление = Строка(ТекСтрока.ИмяДанных) Тогда	
				Строки = СтрЗаменить(ТекСтрока.ПараметрыСвязи, ";", Символы.ПС);
				Если СтрЧислоСтрок(Строки) = 1 Тогда
					НоваяСтрока[ИмяДанных] = РаботаСДокументами.СформироватьСтрокуИзДанных82(
					ТекСтрока.ПараметрыСвязи, НомерСтрокиТаблицыИмпорта, ПолеИсходнойТаблицы);
				Иначе
					СписокПараметров = Новый СписокЗначений();
					Для Номер = 1 По СтрЧислоСтрок(Строки) Цикл
						Подстроки = СтрЗаменить(СтрПолучитьСтроку(Строки, Номер), "=", Символы.ПС);
						ЗначениеДляСписка = РаботаСДокументами.СформироватьСтрокуИзДанных82(
						СтрПолучитьСтроку(Подстроки, 2), НомерСтрокиТаблицыИмпорта, ПолеИсходнойТаблицы);
						ПредставлениеДляСписка = СтрПолучитьСтроку(Подстроки, 1);
						ЗначениеДляСписка = СтрЗаменить(ЗначениеДляСписка, ";", ",");
						Если ЗначениеЗаполнено(ЗначениеДляСписка) Тогда
							СписокПараметров.Добавить(ЗначениеДляСписка, ПредставлениеДляСписка); 
						КонецЕсли;
					КонецЦикла;
					
					ТипДома = "";
					ТипКорпуса = "";
					ТипКвартиры = "";
					Для Каждого Параметр Из СписокПараметров Цикл
						Если Параметр.Представление = "Населенный пункт" Тогда
							Параметр.Представление = "НаселенныйПункт";
							
						ИначеЕсли Параметр.Представление = "Дом" И ЗначениеЗаполнено(Параметр.Значение) Тогда
							ТипДома = "дом";
						ИначеЕсли Параметр.Представление = "Владение" И ТипДома = "" Тогда
							ТипДома = "владение";
							
						ИначеЕсли Параметр.Представление = "Корпус" И ЗначениеЗаполнено(Параметр.Значение) Тогда
							ТипКорпуса = "корпус";
						ИначеЕсли Параметр.Представление = "Строение" И ТипКорпуса = "" Тогда
							ТипКорпуса = "строение";
							
						ИначеЕсли Параметр.Представление = "Квартира" И ЗначениеЗаполнено(Параметр.Значение) Тогда
							ТипКвартиры = "кв.";
						ИначеЕсли Параметр.Представление = "Офис" И ТипКвартиры = "" Тогда
							ТипКвартиры = "оф.";	
						КонецЕсли;
					КонецЦикла;
					
					Если ТипДома = "дом" Тогда
						СписокПараметров.Добавить(ТипДома, "ТипДома");
						//Удалить Владение
						Для Каждого Параметр Из СписокПараметров Цикл
							Если Параметр.Представление = "Владение" Тогда
								СписокПараметров.Удалить(Параметр);
								Прервать;
							КонецЕсли;
						КонецЦикла;
					ИначеЕсли ТипДома = "владение" Тогда	
						СписокПараметров.Добавить(ТипДома, "ТипДома");
						//Удалить Дом
						Для Каждого Параметр Из СписокПараметров Цикл
							Если Параметр.Представление = "Дом" Тогда
								СписокПараметров.Удалить(Параметр);
								Прервать;
							КонецЕсли;
						КонецЦикла;
						//Переименовать Владение в Дом
						Для Каждого Параметр Из СписокПараметров Цикл
							Если Параметр.Представление = "Владение" Тогда
								Параметр.Представление = "Дом";
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Если ТипКорпуса = "корпус" Тогда
						СписокПараметров.Добавить(ТипКорпуса, "ТипКорпуса");
						//Удалить Строение
						Для Каждого Параметр Из СписокПараметров Цикл
							Если Параметр.Представление = "Строение" Тогда
								СписокПараметров.Удалить(Параметр);
								Прервать;
							КонецЕсли;
						КонецЦикла;
					ИначеЕсли ТипКорпуса = "строение" Тогда
						СписокПараметров.Добавить(ТипКорпуса, "ТипКорпуса");
						//Удалить Корпус
						Для Каждого Параметр Из СписокПараметров Цикл
							Если Параметр.Представление = "Корпус" Тогда
								СписокПараметров.Удалить(Параметр);
								Прервать;
							КонецЕсли;
						КонецЦикла;
						//Переименовать Строение в Корпус
						Для Каждого Параметр Из СписокПараметров Цикл
							Если Параметр.Представление = "Строение" Тогда
								Параметр.Представление = "Корпус";
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Если ТипКвартиры = "кв." Тогда
						СписокПараметров.Добавить(ТипКвартиры, "ТипКвартиры");
						//Удалить Офис
						Для Каждого Параметр Из СписокПараметров Цикл
							Если Параметр.Представление = "Офис" Тогда
								СписокПараметров.Удалить(Параметр);
								Прервать;
							КонецЕсли;
						КонецЦикла;
					ИначеЕсли ТипКвартиры = "оф." Тогда
						СписокПараметров.Добавить(ТипКвартиры, "ТипКвартиры");
						//Удалить Квартира
						Для Каждого Параметр Из СписокПараметров Цикл
							Если Параметр.Представление = "Квартира" Тогда
								СписокПараметров.Удалить(Параметр);
								Прервать;
							КонецЕсли;
						КонецЦикла;
						//Переименовать Офис в Квартира
						Для Каждого Параметр Из СписокПараметров Цикл
							Если Параметр.Представление = "Офис" Тогда
								Параметр.Представление = "Квартира";
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					//Теперь список значений надо запихнуть в форму и сделать для него представление
					Представление = "";
					Страна = "";
					Индекс = "";
					Регион = "";
					Район = "";
					Город = "";
					НаселенныйПункт = "";
					Улица = "";
					Дом = "";
					Корпус = "";
					Квартира = "";
					ПредставлениеСтрокой = "";
					ТипДома = ""; 
					ТипКорпуса = ""; 
					ТипКвартиры = "";
					СтрокаВыполнить = "";
					Для Каждого Параметр Из СписокПараметров Цикл
						СтрокаВыполнить = СтрокаВыполнить + Параметр.Представление + "=""" + Параметр.Значение + """;";
						Представление = Представление + Параметр.Представление + "=" + Параметр.Значение + ";";
					КонецЦикла;
					Выполнить(СтрокаВыполнить);
					ПредставлениеСтрокой = СформироватьПредставлениеАдреса(Страна, Индекс, Регион, Район, 
					Город, НаселенныйПункт, Улица, Дом, Корпус, Квартира, ТипДома, ТипКорпуса, 
					ТипКвартиры);			
					НоваяСтрока[ИмяДанных] = ПредставлениеСтрокой + ";" + Представление;
				КонецЕсли;
				///	Прервать;
				//	КонецЕсли
				//КонецЦикла;
				
			ИначеЕсли ТекСтрока.ТипДанных = "Строка: Телефон" Тогда
				//Для Каждого Элемент Из СписокРеквизитов Цикл
				//	Если Элемент.Представление = Строка(ТекСтрока.ИмяДанных) Тогда	
				Строки = СтрЗаменить(ТекСтрока.ПараметрыСвязи, ";", Символы.ПС);
				Если СтрЧислоСтрок(Строки) = 1 Тогда
					ЗначениеДляСписка = РаботаСДокументами.СформироватьСтрокуИзДанных82(
					ТекСтрока.ПараметрыСвязи, НомерСтрокиТаблицыИмпорта, ПолеИсходнойТаблицы);
					ЗначениеДляСписка = СтрЗаменить(ЗначениеДляСписка, ";", ",");
					СписокПараметров = ПропарситьТелефон(ЗначениеДляСписка);
				Иначе
					СписокПараметров = Новый СписокЗначений();
					Для Номер = 1 По СтрЧислоСтрок(Строки) Цикл
						Подстроки = СтрЗаменить(СтрПолучитьСтроку(Строки, Номер), "=", Символы.ПС);
						ЗначениеДляСписка = РаботаСДокументами.СформироватьСтрокуИзДанных82(
						СтрПолучитьСтроку(Подстроки, 2), НомерСтрокиТаблицыИмпорта, ПолеИсходнойТаблицы);
						ПредставлениеДляСписка = СтрПолучитьСтроку(Подстроки, 1);
						ЗначениеДляСписка = СтрЗаменить(ЗначениеДляСписка, ";", ",");
						Если ЗначениеЗаполнено(ЗначениеДляСписка) Тогда
							СписокПараметров.Добавить(ЗначениеДляСписка, ПредставлениеДляСписка); 
						КонецЕсли;
					КонецЦикла;
					
					Для Каждого Параметр Из СписокПараметров Цикл
						Если Параметр.Представление = "Код страны" Тогда
							Параметр.Представление = "КодСтраны";
						ИначеЕсли Параметр.Представление = "Код города" Тогда
							Параметр.Представление = "КодГорода";
						ИначеЕсли Параметр.Представление = "Номер телефона" Тогда
							Параметр.Представление = "НомерТелефона";
						ИначеЕсли Параметр.Представление = "Добавочный номер" Тогда
							Параметр.Представление = "Добавочный";	
						КонецЕсли;	
					КонецЦикла;
				КонецЕсли;	
				
				//Теперь список значений надо запихнуть в форму и сделать для него представление
				Представление = "";
				КодСтраны = "";
				КодГорода = "";
				НомерТелефона = "";
				Добавочный = "";
				Комментарий = "";
				СтрокаВыполнить = "";
				Для Каждого Параметр Из СписокПараметров Цикл
					СтрокаВыполнить = СтрокаВыполнить + Параметр.Представление + "=""" + Параметр.Значение + """;";
					Представление = Представление + Параметр.Представление + "=" + Параметр.Значение + ";";
				КонецЦикла;
				Выполнить(СтрокаВыполнить);
				ПредставлениеСтрокой = СформироватьПредставлениеТелефона(КодСтраны, КодГорода, НомерТелефона, 
				Добавочный, Комментарий);			
				НоваяСтрока[ИмяДанных] = ПредставлениеСтрокой + ";" + Представление;
				//Прервать;
				//	КонецЕсли
				//КонецЦикла;
				
			ИначеЕсли ТекСтрока.ТипДанных = "Число" Тогда
				Попытка
					Результат = Число(СтрЗаменить(РаботаСДокументами.НайтиЗначениеВТаблицеИмпорта(
					НомерСтрокиТаблицыИмпорта, ТекСтрока.ПараметрыСвязи, 
					ПолеИсходнойТаблицы)," ",""));
				Исключение
					Результат = 0;
				КонецПопытки;
				
				//Для Каждого Элемент Из ЭтотОбъект.ВыборСоответствий Цикл
				//	Если Элемент.ИмяДанных = ТекСтрока.ИмяДанных Тогда
				НоваяСтрока[ИмяДанных] = Результат;
				//Прервать;
				//	КонецЕсли
				//КонецЦикла;
				
			ИначеЕсли ТекСтрока.ТипДанных = "Дата" Тогда
				Попытка
					Результат = Дата(РаботаСДокументами.НайтиЗначениеВТаблицеИмпорта(НомерСтрокиТаблицыИмпорта, 
					ТекСтрока.ПараметрыСвязи, ПолеИсходнойТаблицы));
				Исключение
					Результат = Технический.ПреобразоватьДату(РаботаСДокументами.НайтиЗначениеВТаблицеИмпорта(
					НомерСтрокиТаблицыИмпорта, ТекСтрока.ПараметрыСвязи, 
					ПолеИсходнойТаблицы));
				КонецПопытки;
				Если Год(Результат) > 3999 Тогда
					Результат = Дата("00010101000000");
				КонецЕсли;						
				//Для Каждого Элемент Из ЭтотОбъект.ВыборСоответствий Цикл
				//	Если Элемент.ИмяДанных = ТекСтрока.ИмяДанных Тогда
				НоваяСтрока[ИмяДанных] = Результат;
				//		Прервать;
				//	КонецЕсли
				//КонецЦикла;
				
			ИначеЕсли Найти(ТекСтрока.ТипДанных, "Перечисление ссылка:") = 1 
				Или НРег(ТекСтрока.ТипДанных) = Нрег(Тип("СправочникСсылка.тсЗначенияСвойствОбъектов")) 
				Или ТекСтрока.ТипДанных = "Булево" Тогда
				РаботаСДокументами.НайтиИЗаписатьПеречислениеНов(ТекСтрока, НоваяСтрока, НомерСтрокиТаблицыИмпорта, ПолеИсходнойТаблицы);
				
			Иначе	
				//Для Каждого Элемент Из СписокРеквизитов Цикл
				//	Если Элемент.Представление = Строка(ТекСтрока.ИмяДанных) Тогда
				РаботаСДокументами.НайтиИЗаписатьДокументИлиСправочник81(ИмяДанных, 
				ТекСтрока.ТипДанных, ТекСтрока.ПараметрыСвязи,
				НоваяСтрока, НомерСтрокиТаблицыИмпорта, ПолеИсходнойТаблицы);		
				//Прервать;
				//	КонецЕсли;		
				//КонецЦикла;				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
	
	Для Каждого Элемент Из тзДанные Цикл
		Если ЭтотОбъект.ТипДоговоров <> Справочники.ТипыДоговоровКонтрагентов.ПустаяСсылка() Тогда
			Элемент["Договорыконтрагентов_Типобъекта_"] = ЭтотОбъект.ТипДоговоров;
		КонецЕсли;
		Если ЭтотОбъект.ТипДолговыхОбязательств <> Справочники.ТипыДолговыхОбязательств.ПустаяСсылка() Тогда
			Элемент["Долговыеобязательства_Типобъекта_"] = ЭтотОбъект.ТипДолговыхОбязательств;
		КонецЕсли;
		Если ЭтотОбъект.ТипДолжников <> Справочники.ЮрФизЛицо.ПустаяСсылка() Тогда
			Элемент["Должники_Типобъекта_"] = ЭтотОбъект.ТипДолжников;
		КонецЕсли;
		Если ЭтотОбъект.ТипКонтрагентов <> Справочники.ЮрФизЛицо.ПустаяСсылка() Тогда
			Элемент["Контрагенты_Типобъекта_"] = ЭтотОбъект.ТипКонтрагентов;
		КонецЕсли;
		Если ЭтотОбъект.ТипЗалогов <> Справочники.ТипыЗалогов.ПустаяСсылка() Тогда
			Элемент["Залоги_Типобъекта_"] = ЭтотОбъект.ТипЗалогов;
		КонецЕсли;
		Если ЭтотОбъект.ТипИсполнительныхДокументов <> Справочники.ТипыИсполнительныхЛистов.ПустаяСсылка() Тогда
			Элемент["Исполнительныедокументы_Типобъекта_"] = ЭтотОбъект.ТипИсполнительныхДокументов;
		КонецЕсли;
		Если ЭтотОбъект.ТипКредиторов <> Справочники.ЮрФизЛицо.ПустаяСсылка() Тогда
			Элемент["Кредиторы_Типобъекта_"] = ЭтотОбъект.ТипКредиторов;
		КонецЕсли;
		Если ЭтотОбъект.ТипУслуг <> Справочники.ТипыУслуг.ПустаяСсылка() Тогда
			Элемент["Услуги_Типобъекта_"] = ЭтотОбъект.ТипУслуг;
		КонецЕсли;
	КонецЦикла;	
	
	//ЗначениеВРеквизитФормы(тзДанные, "тзДанные");
КонецПроцедуры

&НаСервере
Функция СформироватьПредставлениеТелефона(КодСтраны, КодГорода, НомерТелефона, Добавочный, Комментарий)
	Представление = СокрЛП(КодСтраны);	
	Если Не ПустаяСтрока(КодГорода) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", " ") + "(" + СокрЛП(КодГорода) + ")";
	КонецЕсли;	
	Если Не ПустаяСтрока(НомерТелефона) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", " ") + СокрЛП(НомерТелефона);
	КонецЕсли;	
	Если НЕ ПустаяСтрока(Добавочный) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") + "доб. " + СокрЛП(Добавочный);
	КонецЕсли;	
	Если НЕ ПустаяСтрока(Комментарий) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") + СокрЛП(Комментарий);
	КонецЕсли;	
	Возврат Представление;	
КонецФункции

&НаСервере
Функция СформироватьПредставлениеАдреса(Страна, Индекс, Регион, Район, Город, НаселенныйПункт, Улица, Дом, Корпус, 
	Квартира, ТипДома, ТипКорпуса, ТипКвартиры)
	Представление = "";
	
	Если ЗначениеЗаполнено(Страна) И ВРег(Страна) <> ВРег(Справочники.СтраныМира.Россия.Наименование) Тогда
		ДополнитьПредставлениеАдреса(Страна, ", ", Представление);
	КонецЕсли;
	ДополнитьПредставлениеАдреса(СокрЛП(Индекс),             ", ", Представление);
	ДополнитьПредставлениеАдреса(СокрЛП(Регион),             ", ", Представление);
	ДополнитьПредставлениеАдреса(СокрЛП(Район),              ", ", Представление);
	ДополнитьПредставлениеАдреса(СокрЛП(Город),              ", ", Представление);
	ДополнитьПредставлениеАдреса(СокрЛП(НаселенныйПункт),    ", ", Представление);
	ДополнитьПредставлениеАдреса(СокрЛП(Улица),              ", ", Представление);
	ДополнитьПредставлениеАдреса(СокрЛП(Дом),                ", " + ТипДома    + " № ", Представление);
	ДополнитьПредставлениеАдреса(СокрЛП(Корпус),             ", " + ТипКорпуса + " "  , Представление);
	ДополнитьПредставлениеАдреса(СокрЛП(Квартира),           ", " + ТипКвартиры       , Представление);
	
	Если СтрДлина(Представление) > 2 Тогда
		Представление = Сред(Представление, 3);
	КонецЕсли;
	
	Возврат Представление;	
КонецФункции

&НаСервере
Процедура ДополнитьПредставлениеАдреса(Дополнение, СтрокаКонкатенации, Представление)
	Если Дополнение <> "" Тогда
		Представление = Представление + СтрокаКонкатенации + Дополнение;
	КонецЕсли;	
КонецПроцедуры

//! Тел
&НаСервере
Функция ПропарситьТелефон(Знач Телефон)
	//	Если СписокСимволов = Неопределено ИЛИ СписокЧисел = Неопределено Тогда
	СписокСимволов = Новый СписокЗначений();
	СписокСимволов.Добавить("0", "0");
	СписокСимволов.Добавить("1", "1");
	СписокСимволов.Добавить("2", "2");
	СписокСимволов.Добавить("3", "3");
	СписокСимволов.Добавить("4", "4");
	СписокСимволов.Добавить("5", "5");
	СписокСимволов.Добавить("6", "6");
	СписокСимволов.Добавить("7", "7");
	СписокСимволов.Добавить("8", "8");
	СписокСимволов.Добавить("9", "9");
	СписокСимволов.Добавить("(", "(");
	СписокСимволов.Добавить(")", ")");
	СписокСимволов.Добавить(" ", " ");
	СписокСимволов.Добавить("-", " ");
	
	СписокЧисел = Новый СписокЗначений();
	СписокЧисел.Добавить("0", "0");
	СписокЧисел.Добавить("1", "1");
	СписокЧисел.Добавить("2", "2");
	СписокЧисел.Добавить("3", "3");
	СписокЧисел.Добавить("4", "4");
	СписокЧисел.Добавить("5", "5");
	СписокЧисел.Добавить("6", "6");
	СписокЧисел.Добавить("7", "7");
	СписокЧисел.Добавить("8", "8");
	СписокЧисел.Добавить("9", "9");
	//	КонецЕсли;
	
	СписокРезультат = Новый СписокЗначений();
	Телефон = СокрЛП(Телефон);
	
	Для Индекс = 1 По СтрДлина(Телефон) Цикл
		СимволТелефона = Сред(Телефон, Индекс, 1);
		Если СписокСимволов.НайтиПоЗначению(СимволТелефона) = Неопределено Тогда
			СписокРезультат.Добавить(Сред(Телефон, Индекс), "Комментарий"); 
			Телефон = Лев(Телефон, Индекс - 1);
			Прервать;
		КонецЕсли;  
	КонецЦикла;
	
	КолОткрСкобок = 0;
	КолЗакрСкобок = 0;
	НомерПервой = 0;
	НомерПоследней = 0;
	Для Индекс = 1 По СтрДлина(Телефон) Цикл
		СимволТелефона = Сред(Телефон, Индекс, 1);
		Если СимволТелефона = "(" Тогда
			Если Индекс > 1 И НомерПервой = 0 Тогда
				НомерПервой = Индекс; 
			КонецЕсли;	
			КолОткрСкобок = КолОткрСкобок + 1;
		ИначеЕсли СимволТелефона = ")" Тогда
			НомерПоследней = Индекс;
			КолЗакрСкобок = КолЗакрСкобок + 1;
		КонецЕсли;
	КонецЦикла;	
	
	Если КолОткрСкобок <> КолЗакрСкобок Тогда
		СписокРезультат.Добавить(Телефон, "НомерТелефона");
		Возврат СписокРезультат;
	Иначе
		Если КолОткрСкобок = 0 Тогда
			Телефон = ОставитьТолькоИзСписка(Телефон, СписокЧисел);
			Если СтрДлина(Телефон) > 10 Тогда
				СписокРезультат.Добавить(Лев(Телефон, СтрДлина(Телефон)-10), "КодСтраны");
				Телефон = Прав(Телефон, 10);
			КонецЕсли;
			СписокРезультат.Добавить(ВставитьТире(Телефон), "НомерТелефона");
			Возврат СписокРезультат;
		ИначеЕсли КолОткрСкобок = 1 И Лев(Телефон, 1) = "(" Тогда
			КодГорода = Сред(Телефон, 2, НомерПоследней - 2);
			КодГорода = ОставитьТолькоИзСписка(КодГорода, СписокЧисел);	
			СписокРезультат.Добавить(КодГорода, "КодГорода");
			Телефон = Сред(Телефон, НомерПоследней + 1);
			Телефон = ОставитьТолькоИзСписка(Телефон, СписокЧисел);
			СписокРезультат.Добавить(ВставитьТире(Телефон), "НомерТелефона");
			Возврат СписокРезультат;
		Иначе
			КодСтраны = Лев(Телефон, НомерПервой - 1);
			КодСтраны = ОставитьТолькоИзСписка(КодСтраны, СписокЧисел);
			СписокРезультат.Добавить(КодСтраны, "КодСтраны");
			КодГорода = Сред(Телефон, НомерПервой + 1, НомерПоследней - НомерПервой - 1);
			КодГорода = ОставитьТолькоИзСписка(КодГорода, СписокЧисел);	
			СписокРезультат.Добавить(КодГорода, "КодГорода");
			Телефон = Сред(Телефон, НомерПоследней + 1);
			Телефон = ОставитьТолькоИзСписка(Телефон, СписокЧисел);
			СписокРезультат.Добавить(ВставитьТире(Телефон), "НомерТелефона");
			Возврат СписокРезультат;
		КонецЕсли;
	КонецЕсли;	
КонецФункции

//! Тел
&НаСервере
Функция ОставитьТолькоИзСписка(Телефон, СписокЧисел)
	ТелНовый = "";
	Для Индекс = 1 По СтрДлина(Телефон) Цикл
		СимволТелефона = Сред(Телефон, Индекс, 1);
		Если СписокЧисел.НайтиПоЗначению(СимволТелефона) <> Неопределено Тогда
			ТелНовый = ТелНовый + СимволТелефона;
		КонецЕсли;
	КонецЦикла;
	Возврат ТелНовый;
КонецФункции

//! Тел
&НаСервере
Функция ВставитьТире(Знач Телефон)
	Длн = СтрДлина(Телефон);
	//Если Длн > 10 Тогда
	//	Возврат Лев(Телефон, Длн-10) + "-" + ПоделитьТире(Сред(Телефон, Длн-9, 6), 3) + "-" + ПоделитьТире(Прав(Телефон, 4), 2); 
	//Иначе
	Если Длн > 8 Тогда
		Возврат ПоделитьТире(Лев(Телефон, Длн-4), 3) + "-" + Сред(Телефон, Длн-3, 2) + "-" + Прав(Телефон, 2); 
	ИначеЕсли Длн = 8 ИЛИ Длн = 6 ИЛИ Длн = 4 Тогда
		Возврат ПоделитьТире(Телефон, 2);
	ИначеЕсли Длн = 7 ИЛИ Длн = 5 Тогда
		Возврат Лев(Телефон, 3) + "-" + ПоделитьТире(Сред(Телефон, 4), 2);
	Иначе
		Возврат Телефон;
	КонецЕсли;
КонецФункции

//! Тел
&НаСервере
Функция ПоделитьТире(Знач Телефон, ЧислоЦифр)
	НовыйТел = "";
	Пока СтрДлина(Телефон) > 0 Цикл
		НовыйТел = Прав(Телефон, ЧислоЦифр) + "-" + НовыйТел;
		Телефон = Лев(Телефон, СтрДлина(Телефон) - ЧислоЦифр);
	КонецЦикла;
	Возврат Лев(НовыйТел, СтрДлина(НовыйТел)-1);
КонецФункции

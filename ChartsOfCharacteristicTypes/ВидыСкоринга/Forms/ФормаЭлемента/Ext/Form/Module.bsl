Перем СКД;



&НаКлиенте
Процедура ИзменитьЗапросЗавершение(РезультатЗакрытия, ДополнительныеПараметры)  Экспорт	
	Если РезультатЗакрытия <> Неопределено Тогда
		Объект.ПроизвольнаяПроцедура = Ложь;
		Модифицированность = Истина;
		Объект.ЗапросМакета = РезультатЗакрытия.ТекстЗапроса;
	КонецЕсли;
	
	ИзмСКДСервер();
	
	ПроверитьПоляКомпоновкиДанных();		
КонецПроцедуры


Процедура ИнициализКомпоновщика()
	СКД = ПланыВидовХарактеристик.ВидыСкоринга.ПолучитьМакет("Макет");
    СКД.НаборыДанных.НаборДанных1.Запрос = Объект.ЗапросМакета;

	Источник = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД);
	Компоновщик.Инициализировать(Источник);	
КонецПроцедуры	


#Область НаИзменение

&НаКлиенте
Функция ПроверитьПоляКомпоновкиДанных()
	#Если ТолстыйКлиентУправляемоеПриложение Тогда
		СписокПолей = Новый СписокЗначений;
		СписокПолей.Добавить("Объект", "Объекты");	
		ИмяСправочника = ПолучитьИмяСправочника(Объект.ОбъектУчета);
		
		Для Каждого ЭлементСписка Из СписокПолей Цикл
			ТипПоля = Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочника);
			Поле = Компоновщик.Настройки.ДоступныеПоляГруппировок.Элементы.Найти(ЭлементСписка.Значение);
			Если Поле = Неопределено Тогда
				//Чуров
				ПоказатьПредупреждение(,"В запросе необходимо указать поле """ + ЭлементСписка.Значение + """ (Объект скоринга)!");
				//Предупреждение("В запросе необходимо указать поле """ + ЭлементСписка.Значение + """ (Объект скоринга)!");
			ИначеЕсли Не Поле.Тип.СодержитТип(ТипПоля.Типы()[0]) Тогда
				//Чуров
				ПоказатьПредупреждение(,"Несоответствие типов для поля """ + ЭлементСписка.Значение + """!");	
				//Предупреждение("Несоответствие типов для поля """ + ЭлементСписка.Значение + """!");	
			КонецЕсли;	
		КонецЦикла;		
	#КонецЕсли
	Возврат Ложь;	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяСправочника(ОбъектУчета)
	Возврат Перечисления.ОбъектыУчета.ПолучитьИмяСправочника(ОбъектУчета);
КонецФункции

&НаСервере
Функция ПолучитьМассивОбъектов();
	Массив = Новый Массив();
	ИмяСправочника = Перечисления.ОбъектыУчета.ПолучитьИмяСправочника(Объект.ОбъектУчета);
	
	Для Каждого Элемент Из Объект.Объекты Цикл	
		Выполнить("Массив.Добавить(Справочники." + ИмяСправочника + ".НайтиПоКоду(Элемент.Объект))"); 			
	КонецЦикла;
	Возврат Массив;
КонецФункции

&НаКлиенте
Процедура СоздатьПоШаблонуДляОбъект(Команда)
	#Если ТолстыйКлиентУправляемоеПриложение Тогда
		Объект.ПроизвольнаяПроцедура = Ложь;
		Модифицированность = Истина;
		//Объект.ОбъектУчета = ПредопределенноеЗначение("Перечисление.ОбъектыУчета.ДолговыеОбязательства");
		СКД = ПланыВидовХарактеристик.ВидыСкоринга.ПолучитьМакет("Макет");
		СКД.НаборыДанных.НаборДанных1.Запрос = СтрЗаменить(Объект.ЗапросМакета, "|", "");		
		НазначениеПриИзменении(Неопределено);
		ИзменитьЗапрос(Неопределено);
	#Иначе
		Сообщить("Данная опция доступна только под толстым клиентом!");
		Возврат;
	#КонецЕсли 
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПриИзменении(Элемент)
	//#Если ТолстыйКлиентУправляемоеПриложение Тогда
	//	ИзменитьЗапрос(Истина);	
	//#КонецЕсли
	ИзмСКДСервер();
	ПроверитьПоляКомпоновкиДанных();
КонецПроцедуры

&НаКлиенте
Процедура ИзмСКДСервер()
	#Если ТолстыйКлиентУправляемоеПриложение Тогда
		СКД = ПланыВидовХарактеристик.ВидыСкоринга.ПолучитьМакет("Макет");
		Если Не Объект.ПроизвольнаяПроцедура Тогда
			СКД.НаборыДанных.НаборДанных1.Запрос = СтрЗаменить(Объект.ЗапросМакета, "|", "");
		КонецЕсли;
		Источник = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД);
		Компоновщик.Инициализировать(Источник);
	#КонецЕсли
КонецПроцедуры	


&НаКлиенте
Процедура ИзменитьЗапрос(Команда)
	Форма = ПолучитьФорму("ПланВидовХарактеристик.ВидыСкоринга.Форма.ФормаКонструктора",, ЭтаФорма);
	Форма.ТекстЗапроса = СтрЗаменить(Объект.ЗапросМакета, "|", "");
	
	//Чуров***
	ОткрытьФорму(Форма,,ЭтаФорма,Истина,,,Новый ОписаниеОповещения("ИзменитьЗапросЗавершение", ЭтаФорма));

КонецПроцедуры

#КонецОбласти

#Область НастройкаПриОткрытии

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ПриОткрытииНаКлиенте();
	ПриОткрытииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииНаКлиенте()

	УстановитьЗначениеТипаЗапроса();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеТипаЗапроса()

	Если Объект.ПроизвольнаяПроцедура Тогда
		ТипЗапроса = 2;
	Иначе
		ТипЗапроса = 1;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()

	ОткрытиеСервер();
	ПриОткрытиНаСервере();

КонецПроцедуры

#КонецОбласти





&НаСервере
Процедура ПриОткрытиНаСервере()
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	Расписание = СправочникОбъект.ВернутьСодержимоеХранилища();
	Если Расписание = Неопределено Тогда
		Расписание = Новый РасписаниеРегламентногоЗадания();
	КонецЕсли;
КонецПроцедуры

Процедура ОткрытиеСервер()
	//Элементы.Категории.НастройкаОтбора.Владелец.Доступность = Ложь;
	Категории.КомпоновщикНастроек.Настройки.Отбор.Элементы[0].ПравоеЗначение = Объект.Ссылка;
	
	СКД = ПланыВидовХарактеристик.ВидыСкоринга.ПолучитьМакет("Макет");

	Настройки = Объект.Ссылка.ПользовательскиеПоля.Получить();
    Если Настройки <> Неопределено Тогда
		Компоновщик.ЗагрузитьНастройки(Настройки);
	КонецЕсли;

	Если СКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПервоначальнаяПодготовка = Ложь;
	Если ПустаяСтрока(Объект.ЗапросМакета) Тогда
	
		Объект.ЗапросМакета = СКД.НаборыДанных.НаборДанных1.Запрос;
		ПервоначальнаяПодготовка = Истина;
	
	КонецЕсли;
	
	//Если Объект.Ссылка.Пустая() Тогда
	//	Объект.ЗапросМакета = СКД.НаборыДанных.НаборДанных1.Запрос;	
	//КонецЕсли;
	
	Если Не Объект.ПроизвольнаяПроцедура Тогда
		СКД.НаборыДанных.НаборДанных1.Запрос = Объект.ЗапросМакета;
	КонецЕсли;
	
	Если ПервоначальнаяПодготовка Тогда
		Компоновщик.Настройки.ПользовательскиеПоля.Элементы.Очистить();
		НовоеПП = Компоновщик.Настройки.ПользовательскиеПоля.Элементы.Добавить(
				Тип("ПользовательскоеПолеВыборКомпоновкиДанных"));
		НовоеПП.Заголовок = "Новое пользовательское поле";
		
		Компоновщик.Настройки.Структура.Очистить();
		ГруппировкаКомпоновки = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГруппировкаКомпоновки.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		ГруппировкаКомпоновки.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		
		ПолеПользовательское = ГруппировкаКомпоновки.ПоляГруппировки.Элементы.Добавить(
				Тип("ПолеГруппировкиКомпоновкиДанных")
		);
		ПолеПользовательское.Поле = Новый ПолеКомпоновкиДанных("UserFields.field1");
		
		ПолеДолговоеОбязательство = ГруппировкаКомпоновки.ПоляГруппировки.Элементы.Добавить(
				Тип("ПолеГруппировкиКомпоновкиДанных")
		);
		ПолеДолговоеОбязательство.Поле = Новый ПолеКомпоновкиДанных("ДолговоеОбязательство");
		
		ПолеДолжник = ГруппировкаКомпоновки.ПоляГруппировки.Элементы.Добавить(
				Тип("ПолеГруппировкиКомпоновкиДанных")
		);
		ПолеДолжник.Поле = Новый ПолеКомпоновкиДанных("Должник");
		
		ПолеИсполнительныйЛист = ГруппировкаКомпоновки.ПоляГруппировки.Элементы.Добавить(
				Тип("ПолеГруппировкиКомпоновкиДанных")
		);
		ПолеИсполнительныйЛист.Поле = Новый ПолеКомпоновкиДанных("ИсполнительныйЛист");
		
		ПолеКоличество = ГруппировкаКомпоновки.ПоляГруппировки.Элементы.Добавить(
				Тип("ПолеГруппировкиКомпоновкиДанных")
		);
		ПолеКоличество.Поле = Новый ПолеКомпоновкиДанных("КоличествоДО");
		
		ПолеКоличество = ГруппировкаКомпоновки.ПоляГруппировки.Элементы.Добавить(
				Тип("ПолеГруппировкиКомпоновкиДанных")
		);
		ПолеКоличество.Поле = Новый ПолеКомпоновкиДанных("Исполнитель");

	КонецЕсли;
	Источник = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД);
	Компоновщик.Инициализировать(Источник);	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПоле1ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	#Если ТолстыйКлиентУправляемоеПриложение Тогда
		ИзменитьЗапрос(Истина);
		ИзмСКДСервер();
		ПроверитьПоляКомпоновкиДанных();
	#Иначе	
		Отказ = Истина;
		Сообщить("Данная опция доступна только под толстым клиентом!");
	#КонецЕсли 		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	//#Если ТолстыйКлиентУправляемоеПриложение Тогда
	//	ИзменитьЗапрос(Истина);	
	//#КонецЕсли
	ИзмСКДСервер();
	Если ПроверитьПоляКомпоновкиДанных() Тогда
		Отказ = Истина;
	КонецЕсли;
	Если Не Отказ И ЗаписьСервер() Тогда	
		Отказ = Истина	
	КонецЕсли;
	Если Не Отказ Тогда
		ПоместитьВХранилищеДанные();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПоместитьВХранилищеДанные()
	СправочникОбъект = РеквизитФормыВЗначение("Объект");                  
	Если ТипЗапроса = 2 Тогда
		СправочникОбъект.ПроизвольнаяПроцедура = Истина;
	КонецЕсли;	
	СправочникОбъект.ЗаписатьСодержимоеХранилища(Расписание);
	СправочникОбъект.Записать();
	ЗначениеВРеквизитФормы(СправочникОбъект, "Объект");
КонецПроцедуры

&НаСервере
Функция ЗаписьСервер()
	СсылкаНаОбъект = РеквизитФормыВЗначение("Объект");
	СсылкаНаОбъект.ПользовательскиеПоля = Новый ХранилищеЗначения(Компоновщик.Настройки);
	СсылкаНаОбъект.Записать();
	ЗначениеВРеквизитФормы(СсылкаНаОбъект, "Объект");
	  
	Нстр = Объект.Ссылка.ПользовательскиеПоля.Получить(); //?
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ТабличноеПоле1Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	#Если ТолстыйКлиентУправляемоеПриложение Тогда
		ИзмСКДСервер();   
		ПроверитьПоляКомпоновкиДанных();
	#Иначе	
		СтандартнаяОбработка = Ложь;
		Сообщить("Данная опция доступна только под толстым клиентом!");
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура НазначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	НазначениеИзменениеСервер(ВыбранноеЗначение);
КонецПроцедуры

Процедура НазначениеИзменениеСервер(ВыбранноеЗначение)
	СКД = ПланыВидовХарактеристик.ВидыСкоринга.ПолучитьМакет("Макет");
	Настройки = Объект.Ссылка.ПользовательскиеПоля.Получить();
	Если Настройки <> Неопределено Тогда
		Компоновщик.ЗагрузитьНастройки(Настройки);
	КонецЕсли;
	    	
	Объект.ЗапросМакета = СКД.НаборыДанных.НаборДанных1.Запрос;		
	СКД.НаборыДанных.НаборДанных1.Запрос = Объект.ЗапросМакета;
	Источник = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД);
	Компоновщик.Инициализировать(Источник);			
КонецПроцедуры	

&НаКлиенте
Процедура КатегорииОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	Элементы.Категории.Обновить();	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Объект.Ссылка.Пустая() Тогда
		Попытка
			Записать();
		Исключение
			Сообщить("Перед началом добавления необходимо сохранить объект!");
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли;
	
	Если Не Отказ И Копирование Тогда
		Отказ = Истина;
		ТекущаяСтрока = Элементы.Категории.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			КодКатегорииРодителя = Неопределено;
			КодНовойКатегории = Неопределено;	
			НоваяКатегория = СкопироватьКатегориюНаСервере(ТекущаяСтрока, КодНовойКатегории, КодКатегорииРодителя);
			Элементы.Категории.ТекущаяСтрока = НоваяКатегория;
			
			//Скопировать строку настройки из компановщика
			Для Каждого Элемент Из Компоновщик.Настройки.ПользовательскиеПоля.Элементы[0].Варианты.Элементы Цикл
				Если Элемент.Значение = КодКатегорииРодителя Тогда
					НоваяСтрока = Компоновщик.Настройки.ПользовательскиеПоля.Элементы[0].Варианты.Элементы.Добавить();
					НоваяСтрока.Значение = КодНовойКатегории;
					
					Массив = Новый Массив();
					Для Индекс = 0 По Элемент.КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() - 1 Цикл
						ЗаписатьЭлементОтбора(Элемент.КомпоновщикНастроек.Настройки.Отбор.Элементы[Индекс], Массив);		
					КонецЦикла;
					Для Индекс = 0 По Массив.Количество() - 1 Цикл 
						ВосстановитьЭлементОтбора(НоваяСтрока.КомпоновщикНастроек.Настройки.Отбор.Элементы, Массив[Индекс]);
					КонецЦикла;	
					
					Прервать;
			    КонецЕсли;
			КонецЦикла;		
			Записать();

			//Открыть
			//ОткрытьЗначение(НоваяКатегория);	
			Форма = ПолучитьФорму("Справочник.Категории.Форма.ФормаЭлемента", 
					Новый Структура("ОткрываемоеЗначение", НоваяКатегория), Элементы.Категории);
			//Чуров
			ОткрытьФорму(Форма);
			//Форма.Открыть();			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОткрытиеСервер();
КонецПроцедуры



&НаКлиенте
Процедура КатегорияВверх(Команда)
	Если Элементы.Категории.ТекущиеДанные <> Неопределено Тогда
		ПереместитьКатегориюВверхВниз(Элементы.Категории.ТекущаяСтрока, Истина);
		Элементы.Категории.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КатегорияВниз(Команда)
	Если Элементы.Категории.ТекущиеДанные <> Неопределено Тогда
		ПереместитьКатегориюВверхВниз(Элементы.Категории.ТекущаяСтрока, Ложь);
		Элементы.Категории.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПереместитьКатегориюВверхВниз(ТекущаяСтрока, ПереместитьВверх)
	НомерСтроки = ТекущаяСтрока.НомерСтроки;	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	Категории.НомерСтроки КАК НомерСтроки
	                      |ИЗ
	                      |	Справочник.Категории КАК Категории
	                      |ГДЕ
	                      |	Категории.Владелец = &Владелец
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	НомерСтроки УБЫВ");
	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
	Результат = Запрос.Выполнить().Выбрать();
	Если Не Результат.Следующий() Тогда
		Возврат;
	КонецЕсли;
	МаксимальныйНомер = Результат.НомерСтроки;
	
	Если Не ((ПереместитьВверх И НомерСтроки > 1) ИЛИ (Не ПереместитьВверх И НомерСтроки < МаксимальныйНомер)) Тогда	
		Возврат;
	КонецЕсли;
		
	Если ПереместитьВверх Тогда	
	    НомерСтроки2 = НомерСтроки - 1;
	Иначе
		НомерСтроки2 = НомерСтроки + 1;
	КонецЕсли;	
	Запрос.УстановитьПараметр("НомерСтроки", НомерСтроки);
	Запрос.УстановитьПараметр("НомерСтроки2", НомерСтроки2);		
	Запрос.Текст = "ВЫБРАТЬ
	               |	Категории.НомерСтроки КАК НомерСтроки,
	               |	Категории.Ссылка,
	               |	ВЫБОР
	               |		КОГДА Категории.НомерСтроки = &НомерСтроки
	               |			ТОГДА &НомерСтроки2
	               |		ИНАЧЕ &НомерСтроки
	               |	КОНЕЦ КАК НомерСтрокиНовый
	               |ИЗ
	               |	Справочник.Категории КАК Категории
	               |ГДЕ
	               |	Категории.Владелец = &Владелец
	               |	И (Категории.НомерСтроки = &НомерСтроки
	               |			ИЛИ Категории.НомерСтроки = &НомерСтроки2)";
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл;
		ОбъектКатегория = Результат.Ссылка.ПолучитьОбъект();
		ОбъектКатегория.НомерСтроки = Результат.НомерСтрокиНовый;
		ОбъектКатегория.Записать();
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура КатегорииПередНачаломИзменения(Элемент, Отказ)
	#Если ТолстыйКлиентУправляемоеПриложение Тогда
		ИзмСКДСервер();   
		ПроверитьПоляКомпоновкиДанных();
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Форма = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	//Чуров
	Форма.Показать(Новый ОписаниеОповещения("РасписаниеНачалоВыбораЗавершение", ЭтаФорма));
	//Если Форма.ОткрытьМодально() = Истина Тогда
	//	Расписание = Форма.Расписание;
	//КонецЕсли;
КонецПроцедуры

//Чуров++
&НаКлиенте
Процедура РасписаниеНачалоВыбораЗавершение(ФормаРасписание, ДополнительныеПараметры)  Экспорт
	Расписание = ФормаРасписание;
КонецПроцедуры
//Чуров--



&НаКлиенте
Процедура СоздатьПроизвольнойПроцедурой(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		Сообщить("Необходимо записать!");
	Иначе
		Форма = ПолучитьФорму("ПланВидовХарактеристик.ВидыСкоринга.Форма.ФормаЗапроса",, ЭтаФорма);
		Форма.Объект = Объект.Ссылка;
		Форма.ТекстовыйДокумент.УстановитьТекст(Объект.ЗапросМакета);
		Форма.ВходОбъект.Очистить();
		Массив = ПолучитьМассивОбъектов();
		Для Каждого Элемент Из Массив Цикл
			Форма.ВходОбъект.Добавить().Объект = Элемент;
		КонецЦикла;
		
		//Чуров А.И.
		ОткрытьФорму(Форма);

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ВидыСкорингаФормаЗапросаЗавершение" Тогда
		Объект.ПроизвольнаяПроцедура = Истина;
		Модифицированность = Истина;
		Объект.ЗапросМакета = Параметр.ПолучитьТекст();
		Объект.ПроизвольнаяПроцедура = Истина;
		Объект.Объекты.Очистить();
	ИначеЕсли ИмяСобытия = "ВидыСкорингаФормаЗапросаСКДЗавершение" Тогда
		Объект.ПроизвольнаяПроцедура = Ложь;
		Модифицированность = Истина;
		Объект.ЗапросМакета = Параметр;
		Объект.ПроизвольнаяПроцедура = Ложь;
		Объект.Объекты.Очистить();
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьСейчас(Команда)
	ФоновыеЗаданияМодуль.СозданиеДокументовСкоринга();
КонецПроцедуры



&НаСервереБезКонтекста
Функция ПолучитьКодЭлемента(Элемент)
	Возврат Элемент.Код;
КонецФункции

&НаКлиенте
Процедура ВосстановитьЭлементОтбора(Элементы, Массив)
	Если Массив.ТипЗначения = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		НовыйОтбор = Элементы.Добавить(Массив.ТипЗначения);
		НовыйОтбор.Использование = Массив.Использование;
		НовыйОтбор.ЛевоеЗначение = Массив.ЛевоеЗначение;
		НовыйОтбор.ВидСравнения = Массив.ВидСравнения;
		НовыйОтбор.ПравоеЗначение = Массив.ПравоеЗначение;
	Иначе
		НовыйОтбор = Элементы.Добавить(Массив.ТипЗначения);
		НовыйОтбор.Использование = Массив.Использование;
        НовыйОтбор.ТипГруппы = Массив.ТипГруппы;
		Для Индекс = 0 По Массив.Элементы.Количество() - 1 Цикл 
			ВосстановитьЭлементОтбора(НовыйОтбор.Элементы, Массив.Элементы[Индекс]);
		КонецЦикла;	
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЭлементОтбора(Элемент, Массив)
	Если ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Массив.Добавить(Новый Структура("ТипЗначения, Использование, ЛевоеЗначение, ВидСравнения, ПравоеЗначение",
				ТипЗнч(Элемент), Элемент.Использование, Элемент.ЛевоеЗначение, Элемент.ВидСравнения,
				Элемент.ПравоеЗначение));
	Иначе
		МассивЭлементов = Новый Массив();		
		Массив.Добавить(Новый Структура("ТипЗначения, Использование, ТипГруппы, Элементы",
				ТипЗнч(Элемент), Элемент.Использование, Элемент.ТипГруппы, МассивЭлементов));
		Для Индекс = 0 По Элемент.Элементы.Количество()-1 Цикл
			ЗаписатьЭлементОтбора(Элемент.Элементы[Индекс], МассивЭлементов);		
		КонецЦикла;		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СкопироватьКатегориюНаСервере(СсылкаКопирования, КодНовойКатегории, КодКатегорииРодителя)
	ЭлементОбъект = СсылкаКопирования.Скопировать();
	ЭлементОбъект.Записать();
	
	КодКатегорииРодителя = СсылкаКопирования.Код;
	КодНовойКатегории = ЭлементОбъект.Код;

	Возврат ЭлементОбъект.Ссылка;
КонецФункции

&НаКлиенте
Процедура Изменить(Команда)
	Если ТипЗапроса = 2 Тогда
		СоздатьПроизвольнойПроцедурой(Команда);	
	Иначе
		СоздатьПоШаблонуДляОбъект(Команда);		
	КонецЕсли;
КонецПроцедуры


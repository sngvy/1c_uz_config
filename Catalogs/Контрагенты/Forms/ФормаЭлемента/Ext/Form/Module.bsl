
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЭтоНовыйОбъект = Объект.Ссылка.Пустая();
	
	Если Объект.Ссылка.Пустая() Тогда
		Пользователи.ЗаполнитьРеквизитыПоДаннымПользователя(Объект);
	КонецЕсли;
	
	ДополнительныеРеквизиты.Загрузить(Объект.ДополнительныеРеквизиты.Выгрузить());
	УправлениеЗаполнением.ДобавитьДополнительныеРеквизиты(ЭтаФорма);
	
	ЗаполнитьТабличныйДокумент();
	Если Параметры.видКонтр <> ПредопределенноеЗначение("Справочник.ЮрФизЛицо.ПустаяСсылка") Тогда
		Объект.ЮрФизЛицо = Параметры.видКонтр;
		ДобавитьДополнительныеРеквизиты();
	КонецЕсли;	
	
	Если НЕ ПроверкаРоли() Тогда
		Элементы.ТелефоныДобавитьТелефон.Доступность = ЛОЖЬ;
		Элементы.Телефоны.ИзменятьСоставСтрок = Ложь;
	КонецЕсли;
	
	Элементы.ЧасовойПояс.СписокВыбора.Очистить();
	Массив = ПолучитьДопустимыеЧасовыеПояса();
	МассивПредставлений = Новый Массив;
	Для Каждого Пояс Из Массив Цикл
		Если Найти(ПредставлениеЧасовогоПояса(Пояс), "GMT") > 0 И МассивПредставлений.Найти(ПредставлениеЧасовогоПояса(Пояс)) = Неопределено Тогда
			Строка = Элементы.ЧасовойПояс.СписокВыбора.Добавить(Пояс, ПредставлениеЧасовогоПояса(Пояс));
			МассивПредставлений.Добавить(ПредставлениеЧасовогоПояса(Пояс));
		КонецЕсли;
	КонецЦикла;
	Элементы.ЧасовойПояс.СписокВыбора.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	УниверсальноеВремя(ТекущаяДатаСеанса(), ПолучитьДопустимыеЧасовыеПояса()[10]);
	
	ИспользоватьФССП = Константы.ИспользоватьИнтеграциюФССП.Получить();
	Если НЕ ИспользоватьФССП Тогда
		Элементы.ФормаЗапросВФССП.Видимость = Ложь;
	КонецЕсли;	
	
	ИспользоватьБанкротство = Константы.ИспользоватьИнтеграциюФедРесурсБанкротство.Получить();
	Если НЕ ИспользоватьБанкротство Тогда
		Элементы.ФормаЗапросНаБанкротство.Видимость = Ложь;
	КонецЕсли;	
	
	ДССклонения.Параметры.УстановитьЗначениеПараметра("Контрагент", Объект.Ссылка);
	
	ВывестиОтчетыИмущества();
	ВывестиОтчетыСчетов();
	
КонецПроцедуры

// Получить значения с сервера

 &НаСервере
Процедура ПриОткрытииНаСервере()
	ЭтаФорма.РольЮД = РольДоступна("ЮД");
КонецПроцедуры

//

// Клиентская процедура при открытии формы

 &НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПриОткрытииНаСервере();
КонецПроцедуры

//

// Клиентская процедура при закрытии формы

&НаКлиенте
Процедура ПриЗакрытии(ПараметрыЗаписи)
	Если ЭтаФорма.ТелефоныИзменились = Истина Тогда
		Оповестить("ЗаписьДолжника");
	КонецЕсли;
КонецПроцедуры

//

&НаСервере
Процедура ЗаполнитьТабличныйДокумент()
	ОбъектыСервер.ЗаполнитьОтчетОбъекта(Объект.Ссылка, ТабличныйДокумент, Константы.ОтчетДляКонтрагента);	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДополнительныеРеквизиты()
	УправлениеЗаполнением.ДобавитьДополнительныеРеквизиты(ЭтаФорма);	
КонецПроцедуры
              
&НаСервере
Процедура УстановитьПараметрОтбора(Параметр, Значение, Использование = Истина)
	ПараметрДанных = События.Параметры.Элементы.Найти(Параметр);
	ПараметрДанных.Значение = Значение;
	ПараметрДанных.Использование = Использование;	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтбор(Поле, Значение, Использование = Истина)
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(Поле);
	Для Каждого ЭлементОтбораСобытий Из События.Отбор.Элементы Цикл		
		Если ЭлементОтбораСобытий.ЛевоеЗначение = ПолеКомпоновки Тогда
			ЭлементОтбораСобытий.ПравоеЗначение = Значение;
			Если Использование <> Неопределено Тогда
				ЭлементОтбораСобытий.Использование = Использование;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	УправлениеСвойствами.ПередЗаписьюНаСервере2(ЭтаФорма, ТекущийОбъект, Отказ);
	УправлениеСвойствами.КонтрольУникальности(Справочники.Контрагенты, ТекущийОбъект, "КодКонтрагента", ТекущийОбъект.КодКонтрагента, Отказ);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА СВОЙСТВ

&НаСервере
Функция ПосчитатьКоличествоДО()
	////УстановитьПривилегированныйРежим(Истина);
	////		
	////Запрос = Новый Запрос("ВЫБРАТЬ
	////			   |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДолговыеОбязательстваВРаботеОстатки.ДолговоеОбязательство) КАК КоличествоВработе,
	////			   |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДолговыеОбязательства.Ссылка) КАК КоличествоВсего
	////			   |ИЗ
	////			   |	РегистрНакопления.ДолговыеОбязательстваВРаботе.Остатки(, ДолговоеОбязательство.Владелец = &Должник) КАК ДолговыеОбязательстваВРаботеОстатки
	////			   |		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	////			   |		ПО ДолговыеОбязательстваВРаботеОстатки.ДолговоеОбязательство = ДолговыеОбязательства.Ссылка
	////			   |ГДЕ
	////			   |	ДолговыеОбязательства.Владелец = &Должник");				   
	////Запрос.УстановитьПараметр("Должник", Объект.Ссылка);
	////Результат = Запрос.Выполнить();
	////Выборка = Результат.Выбрать();
	////
	////КоличествоВработе = 0;
	////КоличествоВсего = 0;

	////Пока Выборка.Следующий() Цикл
	////	КоличествоВсего = Выборка.КоличествоВсего;
	////	КоличествоВработе = Выборка.КоличествоВработе;
	////КонецЦикла;
	////КоличествоДО = Новый Массив;
	////КоличествоДО.Добавить(КоличествоВсего);
	////КоличествоДО.Добавить(КоличествоВработе);
	////
	////Возврат КоличествоДО;
КонецФункции

&НаСервере
Функция ПолучитьТекущегоПользователя()
	Возврат ПараметрыСеанса.ТекущийПользователь;
КонецФункции

&НаКлиенте
Процедура ЮрФизЛицоПриИзменении(Элемент)
	ДобавитьДополнительныеРеквизиты();
КонецПроцедуры

// Удаленная процедура ИсходящийЗвонок(Команда)

// Область взаимодействий

&НаКлиенте
Процедура ИсходящийЗвонокТЧ(Команда)
	Если Объект.Ссылка.Пустая() Тогда	
		Предупреждение("Сначала запишите объект!");		
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы.Телефоны И Элементы.Телефоны.ТекущиеДанные <> Неопределено Тогда
		
		// Обход ограничений при использовании обработчиков
		ВидТелефонии = Бит_ТелефонияСерверПереопределяемый.ПолучитьВидТелефонии();
		Если ВидТелефонии = ПредопределенноеЗначение("Перечисление.ВидыТелефонии.БИТФон") Тогда
			Ф = ПолучитьФорму("Обработка.бит_Битфон.Форма.ОсновнаяФорма");
			// Проверить состояние Битфона
			Если Ф.Открыта() = Ложь Тогда
				Ф.Открыть();
				Ф.кнНеБеспокоить(Неопределено);
			ИначеЕсли Ф.Открыта() = Истина И Ф.СтатусНеБеспокоить = Ложь И Ф.ИдетРазговор = Ложь Тогда
				Ф.кнНеБеспокоить(Неопределено);
			ИначеЕсли Ф.Открыта() = Истина И Ф.СтатусПодключен = Истина И Ф.ИдетРазговор = Истина
				ИЛИ Ф.Открыта() = Истина И Ф.СтатусНеБеспокоить = Истина И Ф.ИдетРазговор = Истина Тогда
				Предупреждение("На канале уже идет разговор!",,"БИТ.Phone");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		НовоеМероприятие = ПолучитьФорму("Задача.Мероприятие.Форма.ФормаМероприятия", Новый Структура("Объект", Объект.Ссылка),,Новый УникальныйИдентификатор());
		НовоеМероприятие.Объект.Объект = ЭтаФорма.Объект.Ссылка;
		НовоеМероприятие.Объект.ТипМероприятия = ПредопределенноеЗначение("Справочник.ТипыМероприятий.ТелефонныйЗвонокИсходящий");
		// НовоеМероприятие.Объект.Контакт = РезультатНомер;
		НовоеМероприятие.КонтрагентКЛ = ЭтаФорма.Объект.Ссылка;
		НовоеМероприятие.УстановленСтатусНеБеспокоить = Истина;
		НовоеМероприятие.Элементы.ПозвонитьДолжнику.ЦветФона = WebЦвета.СветлоЗеленый;
		НовоеМероприятие.Открыть();
		// Передать управление обработчику ожидания
		ПодключитьОбработчикОжидания("НовоеМероприятиеСоздано", 1, Истина);
	Иначе
		Предупреждение("Не выбран контакт!",,"Исходящий звонок");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НовоеМероприятиеСоздано()
	// Получить мероприятие по УИД
	НовоеМероприятие = ПолучитьФорму("Задача.Мероприятие.Форма.ФормаМероприятия", Новый Структура("Объект", Объект.Ссылка),,Новый УникальныйИдентификатор);
	НовоеМероприятие.КлючУникальности = Новый УникальныйИдентификатор;
	Ф = ПолучитьФорму("Обработка.бит_Битфон.Форма.ОсновнаяФорма");
	Ф.ФормаМероприятие = НовоеМероприятие.КлючУникальности;
	// Передать управление обработчикам
	ПодключитьОбработчикОжидания("УстановленСтатусНеБеспокоить", 5, Истина);
	ПодключитьОбработчикОжидания("ПроверитьСостояниеБИТФон", 1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УстановленСтатусНеБеспокоить()
	// Получить мероприятие по УИД
	НовоеМероприятие = ПолучитьФорму("Задача.Мероприятие.Форма.ФормаМероприятия", Новый Структура("Объект", Объект.Ссылка),,Новый УникальныйИдентификатор);
	ПоказатьОповещениеПользователя("БИТ.Phone",,"Набор выбранного номера...",БиблиотекаКартинок.NC_ИсходящийЗвонок);
	Ф = ПолучитьФорму("Обработка.бит_Битфон.Форма.ОсновнаяФорма");
	Ф.НомерЛиния1 = ЭтаФорма.Элементы.Телефоны.ТекущиеДанные.Номер;
	Ф.НомерЛиния2 = Ф.НомерЛиния1;
	Ф.НомерЛиния3 = Ф.НомерЛиния1;
	Ф.НомерЛиния4 = Ф.НомерЛиния1;
	Ф.НачатьРазговорКл(Неопределено);
	// Сбросить служебные флаги
	Оповестить("ОтменитьСтатусНеБеспокоить");
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСостояниеБИТФон()
	// Получить мероприятие по УИД
	НовоеМероприятие = ПолучитьФорму("Задача.Мероприятие.Форма.ФормаМероприятия", Новый Структура("Объект", Объект.Ссылка),,Новый УникальныйИдентификатор);
	//
	ФормаНабора = ПолучитьФорму("Обработка.бит_Битфон.Форма.ОсновнаяФорма");
	Если ФормаНабора.Открыта() = Истина И ФормаНабора.СтатусПодключен = Истина И ФормаНабора.МикрофонВключен = Истина
		ИЛИ ФормаНабора.Открыта() = Истина И ФормаНабора.СтатусНеБеспокоить = Истина И ФормаНабора.МикрофонВключен = Истина Тогда
		НовоеМероприятие.Элементы.ОтключитьМикрофон.ЦветФона = Новый Цвет();
	ИначеЕсли ФормаНабора.Открыта() = Истина И ФормаНабора.СтатусПодключен = Истина И ФормаНабора.МикрофонВключен = Ложь
		ИЛИ ФормаНабора.Открыта() = Истина И ФормаНабора.СтатусНеБеспокоить = Истина И ФормаНабора.МикрофонВключен = Ложь Тогда
		// Исправить произвольное включение микрофона, если получено значение Ложь
		ФормаНабора.КнОМик(Неопределено);
		ФормаНабора.КнОМик(Неопределено);
		НовоеМероприятие.Элементы.ОтключитьМикрофон.ЦветФона = WebЦвета.Красный;
	ИначеЕсли ФормаНабора.Открыта() = Ложь ИЛИ ФормаНабора.СтатусПодключен = Ложь Тогда
		НовоеМероприятие.Элементы.ОтключитьМикрофон.ЦветФона = Новый Цвет();
	КонецЕсли;	
КонецПроцедуры

//

&НаКлиенте
Процедура СобытияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	////ОткрытьЗначение(Элемент.ТекущиеДанные[Поле.Имя]);
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Свойство = Неопределено;
	СвойствоВидСтроки = Неопределено;
	Код = Сред(Элемент.Имя, Найти(Элемент.Имя, "_") + 1);
	УправлениеСвойствами.ПолучитьСвойствоПоКоду(СтрЗаменить(Код, "_", " "), Свойство, СвойствоВидСтроки);
	
	Если СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Адрес") ИЛИ
			СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Телефон") Тогда
	    Строки = ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Свойство));
		ТекСтрокаПараметры = Строки[0].Параметры;
						
		СписокСтрок = СтрЗаменить(ТекСтрокаПараметры, ";", Символы.ПС);
		ЗначенияПолей = Новый СписокЗначений();
		Если СтрЧислоСтрок(СписокСтрок) > 1 Тогда
			Для Индекс = 1 По СтрЧислоСтрок(СписокСтрок) Цикл
				Стр = СтрПолучитьСтроку(СписокСтрок, Индекс);
				Если Стр <> "" Тогда 
					СписокПодстрок = СтрЗаменить(Стр, "=", Символы.ПС);
					ЗначенияПолей.Добавить(СтрПолучитьСтроку(СписокПодстрок, 2), СтрПолучитьСтроку(СписокПодстрок, 1));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;			
		Если СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Адрес") Тогда
			ИмяФормыРедактирования = "ОбщаяФорма.ВводАдреса";
		ИначеЕсли СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Телефон") Тогда
			ИмяФормыРедактирования = "ОбщаяФорма.ВводТелефона";
		КонецЕсли;
			
		Пар = Новый Структура;
		Пар.Вставить("ЗначенияПолей",                ЗначенияПолей);
		Пар.Вставить("Вид",                          ""); //"Адрес");
		Пар.Вставить("БылиВнесеныИзменения",         Ложь);
		Пар.Вставить("Представление",                Элемент.ТекстРедактирования);
		Пар.Вставить("РедактированиеТолькоВДиалоге", Не Элемент.РедактированиеТекста);
		Пар.Вставить("АдресТолькоРоссийский",        Ложь);
		
		//Чуров 06042017
		ДопПараметры  = новый Структура("Строки, Элемент", Строки, Элемент);
		Результат = ОткрытьФорму(ИмяФормыРедактирования, Пар,,,,,Новый ОписаниеОповещения("ДопРеквизитыОткрытьФормуЗавершение", ЭтаФорма, ДопПараметры));	
		//Результат = ОткрытьФормуМодально(ИмяФормыРедактирования, Пар);
		//Если ТипЗнч(Результат) = Тип("Структура") Тогда
		//	Строки[0].Значение = Результат.Представление;
		//	ЭтаФорма[Элемент.Имя] = Результат.Представление;
		//	ЗначенияПолей = Результат.ЗначенияПолей;
		//	Модифицированность = Истина;
		//	
		//	РезультатЗначение = "";
		//	Для Каждого Элемент Из ЗначенияПолей Цикл
		//		РезультатЗначение = РезультатЗначение + Элемент.Представление + "=" + Элемент.Значение + ";"; 
		//	КонецЦикла;
		//	
		//	Строки[0].Параметры = РезультатЗначение;
		//КонецЕсли;
	ИначеЕсли СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.АдресФИАС") Тогда 
		
		Строки = ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Свойство)); 
		ТекСтрока = Строки[0]; 
		
		ИмяФормыРедактирования = "Обработка.РасширенныйВводКонтактнойИнформации.Форма.ВводАдреса"; 
		Если ТекСтрока.Параметры = "" Тогда 
			ЗнПолей = ""; 
		Иначе 
			ЗнПолей = бит_АдресныйКлассификатор.ПолучитьJSONИзXML(ТекСтрока.Параметры); 
		КонецЕсли; 
		Пар = Новый Структура; 
		Пар.Вставить("ЗначенияПолей", ЗнПолей); 
		Пар.Вставить("Вид", ""); //"Адрес"); 
		Пар.Вставить("БылиВнесеныИзменения", Ложь); 
		Пар.Вставить("Представление", Элемент.ТекстРедактирования); 
		Пар.Вставить("РедактированиеТолькоВДиалоге", Не Элемент.РедактированиеТекста); 
		Пар.Вставить("АдресТолькоРоссийский", Ложь); 
		
		Результат = ОткрытьФормуМодально(ИмяФормыРедактирования, Пар); 
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда 
			Строки[0].Значение = Результат.Представление; 
			ЭтаФорма[Элемент.Имя] = Результат.Представление; 
			Модифицированность = Истина; 
			СтрокаJSON = Результат.Значение; 
			
			Если СтрокаJSON = "" Тогда 
				СтрокаJSON = бит_АдресныйКлассификатор.ПолучитьJSONИзXML(СтрокаJSON); 
			КонецЕсли; 
			
			Строки[0].Параметры = бит_АдресныйКлассификатор.ПолучитьСтрокуXML(СтрокаJSON); 
		КонецЕсли;
		
		
	ИначеЕсли СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.ПутьКФайлу") Тогда	
		#Если Не ВебКлиент Тогда
			СтандартнаяОбработка = Ложь;
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			Диалог.Заголовок = "Выберите файл";
			Диалог.ПолноеИмяФайла = ЭтаФорма[Элемент.Имя];
			Диалог.МножественныйВыбор = Ложь;
			Если Диалог.Выбрать() Тогда
				ЭтаФорма[Элемент.Имя] = Диалог.ПолноеИмяФайла;
			КонецЕсли;	
		#Иначе
			СтандартнаяОбработка = Ложь;
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			Диалог.Заголовок = "Выберите файл";
			Диалог.ПолноеИмяФайла = ЭтаФорма[Элемент.Имя];
			//Фильтр = "EXE (*.exe)|*.exe"; 
			//Диалог.Фильтр = Фильтр; 
			Диалог.МножественныйВыбор = Ложь;
			//Диалог.Каталог = "F:\";
			Диалог.Показать(Новый ОписаниеОповещения("ДополнительныеРеквизитыНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("Диалог, Элемент", Диалог, Элемент)));
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	Элемент = ДополнительныеПараметры.Элемент;
	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ЭтаФорма[Элемент.Имя] = Диалог.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры

//Чуров 06042017
&НаКлиенте
Процедура ДопРеквизитыОткрытьФормуЗавершение(Результат, ДопПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ДопПараметры.Строки[0].Значение = Результат.Представление;
		ЭтаФорма[ДопПараметры.Элемент.Имя] = Результат.Представление;
		ЗначенияПолей = Результат.ЗначенияПолей;
		Модифицированность = Истина;
		
		РезультатЗначение = "";
		Для Каждого Элемент Из ЗначенияПолей Цикл
			РезультатЗначение = РезультатЗначение + Элемент.Представление + "=" + Элемент.Значение + ";"; 
		КонецЦикла;
		
		ДопПараметры.Строки[0].Параметры = РезультатЗначение;
	КонецЕсли;
КонецПроцедуры	


&НаКлиенте
Процедура ДополнительныеРеквизитыОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Стр = СтрЗаменить(Элемент.Имя, "Реквизит_", "РеквизитСвойство_");
	Строки = ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Вычислить(Стр)));
	СтрокаЗапуска = "";	
	Если Строки.Количество() > 0 Тогда
		СтрокаЗапуска = Строки[0].Значение;
	КонецЕсли;

	Попытка
		ЗапуститьПриложение(СтрокаЗапуска);
	Исключение
		//Чуров
		//ПоказатьЗначение(,СтрокаЗапуска);
		ОткрытьЗначение(СтрокаЗапуска);
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	//ОбъектыСервер.УдалитьПометкуОбИзменении(Отказ, Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ЭтоНовыйОбъект И Константы.ДетализацияПоКА.Получить() Тогда
		//Принятие в работу Организации
		ДокОбъект = Документы.ПринятиеВРаботуОрганизации.СоздатьДокумент();	
		ДокОбъект.Дата = ТекущаяДатаСеанса();
		ДокОбъект.Автор = УдалитьОбщегоНазначения.ТекущийПользователь();		
		ДокОбъект.Организация = ДокОбъект.Автор.Организация;

		ДокОбъект.Объекты.Добавить().Объект = ТекущийОбъект.Ссылка;
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
			Отказ = Истина;
			Возврат;
		КонецПопытки;
				
		ЭтоНовыйОбъект = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверкаРоли() 
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.ТелефонныеНомера) ИЛИ ПользовательИБ.Роли.Содержит(Метаданные.Роли.ТелефонныеНомераПользователя) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции

&НаКлиенте
Процедура ДобавитьТелефон(Команда)
	ЗначенияПолей = Новый СписокЗначений();
	ЗначенияПолей.Добавить(Объект.Ссылка, "Должник");
	//ЗначенияПолей.Добавить(Элементы.Телефоны.ТекущиеДанные.ВидТелефона, "ВидТелефона");
	//ЗначенияПолей.Добавить(Элементы.Телефоны.ТекущиеДанные.КонтактноеЛицо, "КонтактноеЛицо");
	//ЗначенияПолей.Добавить(Элементы.Телефоны.ТекущиеДанные.КодСтраны,     "КодСтраны");
	//ЗначенияПолей.Добавить(Элементы.Телефоны.ТекущиеДанные.КодГорода,     "КодГорода");
	//ЗначенияПолей.Добавить(Элементы.Телефоны.ТекущиеДанные.НомерТелефона, "НомерТелефона");
	//ЗначенияПолей.Добавить(Элементы.Телефоны.ТекущиеДанные.Добавочный,    "Добавочный");
	//ЗначенияПолей.Добавить(Элементы.Телефоны.ТекущиеДанные.Комментарий,   "Комментарий");
	
	Если Элементы.Телефоны.ТекущиеДанные = Неопределено Тогда
		// Использовать функцию Предупреждение
		Предупреждение("Добавьте строку табличной части");
		Возврат;
	КонецЕсли;	
	ТекСтрока = Объект.Телефоны[Элементы.Телефоны.ТекущиеДанные.НомерСтроки - 1];
	ИмяФормыРедактирования = "Справочник.Контрагенты.Форма.ВводТелефонногоНомера";
	
	Пар = Новый Структура;
	Пар.Вставить("ЗначенияПолей",                ЗначенияПолей);
	Пар.Вставить("Вид",                          ""); //"Адрес");
	Пар.Вставить("БылиВнесеныИзменения",         Ложь);
	Пар.Вставить("Представление",                "");
	Пар.Вставить("РедактированиеТолькоВДиалоге", Ложь);
	Пар.Вставить("АдресТолькоРоссийский",        Ложь);
	
	//Чуров 06042017
	//ДопПараметры  = новый Структура("Строки, Элемент", Строки, Элемент);
	Результат = ОткрытьФорму(ИмяФормыРедактирования, Пар,,,,,Новый ОписаниеОповещения("ТелефоныНомерЗавершение", ЭтаФорма, новый Структура("ТекСтрока", Неопределено)));
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ЗаписьДолжника");
КонецПроцедуры

&НаКлиенте
Процедура ТелефоныНомерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗначенияПолей = Новый СписокЗначений();
	ЗначенияПолей.Добавить(Объект.Ссылка, "Должник");
	ЗначенияПолей.Добавить(Элементы.Телефоны.ТекущиеДанные.ВидТелефона, "ВидТелефона");
	ЗначенияПолей.Добавить(Элементы.Телефоны.ТекущиеДанные.КонтактноеЛицо, "КонтактноеЛицо");
	ЗначенияПолей.Добавить(Элементы.Телефоны.ТекущиеДанные.КодСтраны,     "КодСтраны");
	ЗначенияПолей.Добавить(Элементы.Телефоны.ТекущиеДанные.КодГорода,     "КодГорода");
	ЗначенияПолей.Добавить(Элементы.Телефоны.ТекущиеДанные.НомерТелефона, "НомерТелефона");
	ЗначенияПолей.Добавить(Элементы.Телефоны.ТекущиеДанные.Добавочный,    "Добавочный");
	ЗначенияПолей.Добавить(Элементы.Телефоны.ТекущиеДанные.Комментарий,   "Комментарий");

	
	ТекСтрока = Объект.Телефоны[Элементы.Телефоны.ТекущиеДанные.НомерСтроки - 1];
	ИмяФормыРедактирования = "Справочник.Контрагенты.Форма.ВводТелефонногоНомера";
	
	Пар = Новый Структура;
	Пар.Вставить("ЗначенияПолей",                ЗначенияПолей);
	Пар.Вставить("Вид",                          ""); //"Адрес");
	Пар.Вставить("БылиВнесеныИзменения",         Ложь);
	Пар.Вставить("Представление",                Элемент.ТекстРедактирования);
	Пар.Вставить("РедактированиеТолькоВДиалоге", Не Элемент.РедактированиеТекста);
	Пар.Вставить("АдресТолькоРоссийский",        Ложь);
	Пар.Вставить("Добавление",					 Ложь);
	
	Результат = ОткрытьФорму(ИмяФормыРедактирования, Пар,,,,,Новый ОписаниеОповещения("ТелефоныНомерЗавершение", ЭтаФорма, новый Структура("ТекСтрока", ТекСтрока)));
КонецПроцедуры

&НаКлиенте
Процедура ТелефоныНомерЗавершение(Результат, ДопПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если ДопПараметры.ТекСтрока = Неопределено Тогда
			СтрокаТелефон = Объект.Телефоны.Добавить();
		Иначе
			СтрокаТелефон = ДопПараметры.ТекСтрока;
		КонецЕсли;
		СтрокаТелефон.Номер = Результат.Представление;
		ЗначенияПолей = Результат.ЗначенияПолей;
		Модифицированность = Истина;
		Для Каждого Элемент Из ЗначенияПолей Цикл
			СтрокаТелефон[Элемент.Представление] = Элемент.Значение; 
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ЗапросВФССП(Команда)
	
	СсылкиНаДокументы = ЗапуститьРобота();
	Для Каждого ДокСсылка Из СсылкиНаДокументы Цикл
		
		ОткрытьЗначение(ДокСсылка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьРобота()
	МассивДокументов = Обработки.ФССП_Робот.ЕдиничныйЗапрос(Объект.Ссылка);

	Возврат МассивДокументов;
КонецФункции

&НаСервере
Процедура ЗапросФССПСервер(Должник,Фамилия,Имя,Отчество,ДР,Регион)	
	бит_ФССП_Переопределяемый.ЗаполнитьЗапрос(Должник,Фамилия,Имя,Отчество,ДР,Регион);
КонецПроцедуры

&НаКлиенте
Процедура ФИОПриИзменении(Элемент)
	ТекДанные = Элементы.ФИО.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	ТекДанные.ФИО = ТекДанные.Фамилия + " " + ТекДанные.Имя + " " + ТекДанные.Отчество;
	к = Объект.ФИО.Количество() - 1;
	
	Фамилия = Объект.ФИО[к].Фамилия;
	Для н = 1 по к Цикл
		Фамилия = Фамилия + " (" + Объект.ФИО[к-н].Фамилия + ")"; 
	КонецЦикла;
	Объект.ФИО_ПФ = Фамилия + " " + Объект.ФИО[к].Имя + " " + Объект.ФИО[к].Отчество; 
	Объект.ФИО_Действующее = Объект.ФИО[к].ФИО;
	
	Объект.Наименование = Объект.ФИО_ПФ;
КонецПроцедуры

&НаСервере
Процедура ЗапросНаБанкротствоНаСервере()
	БанкротствоСервер.СоздатьДоБ(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ЗапросНаБанкротство(Команда)
	ЗапросНаБанкротствоНаСервере();
КонецПроцедуры

#Область Имущество

&НаСервере
Процедура ЗанестиСведенияОбИмуществеНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ЗанестиСведенияОбИмуществе(Команда)
	
	ПараметрыЗанесения = Новый Структура;
	ПараметрыЗанесения.Вставить("Контрагент", Объект.Ссылка);
	
	ОткрытьФорму(
		"Справочник.Контрагенты.Форма.ФормаВнесениеСведенийОбИмуществе",
		ПараметрыЗанесения,
		ЭтотОбъект,
		Новый УникальныйИдентификатор
	);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиОтчетыИмущества()

	ПараметрыКонтрагента = Новый Структура;
	ПараметрыКонтрагента.Вставить("Контрагент", Объект.Ссылка);
	ТДИмущество = УправлениеСКД.ПолучитьТабличныйДокумент(
		Отчеты.СведенияОбИмуществе,
		"ОсновнаяСхемаКомпоновкиДанных",
		ПараметрыКонтрагента
	);

КонецПроцедуры

&НаСервере
Процедура ВывестиОтчетыСчетов()

	ПараметрыКонтрагента = Новый Структура;
	ПараметрыКонтрагента.Вставить("Владелец", Объект.Ссылка);
	ТДСчета = УправлениеСКД.ПолучитьТабличныйДокумент(
		Справочники.Счета,
		"ДанныеПоСчетам",
		ПараметрыКонтрагента
	);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтчеты(Команда)
	ВывестиОтчетыИмущества();
КонецПроцедуры

#КонецОбласти

// Область служебных функций

&НаКлиенте
Процедура ТелефоныПриИзменении(Элемент)
	ЭтаФорма.ТелефоныИзменились = Истина;
КонецПроцедуры

//

// Получить значения с сервера

&НаСервере
Процедура ОтправитьСМСНаСервере()
	// Получить значения с сервера
	ЭтаФорма.РезультатОтправлено = Справочники.РезультатыМероприятий.НайтиПоНаименованию("Отправлено");
КонецПроцедуры

//

// Область взаимодействий

&НаКлиенте
Процедура ОтправитьСМС(Команда)
	Если ЭтаФорма.РольЮД = Истина Тогда
		Если ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы.Телефоны И Элементы.Телефоны.ТекущиеДанные <> Неопределено Тогда
			ФормаСМС = ПолучитьФорму("Обработка.бит_Битфон.Форма.ОтправкаСМС");
			// ФормаСМС.ВладелецФормы = ЭтаФорма;
			стрСМСЛогин = "";
			стрСМСПароль = "";
			стрОтправитель = "";
			Автоинформирование.ПолучитьПараметрыОтправкиСМС(стрСМСЛогин, стрСМСПароль, стрОтправитель);
			ФормаСМС.СМСЛогин = стрСМСЛогин;
			ФормаСМС.СМСПароль = стрСМСПароль;
			Если ЗначениеЗаполнено(стрОтправитель) Тогда
				ФормаСМС.Элементы.Отправитель.СписокВыбора.Добавить(стрОтправитель);
				ФормаСМС.Отправитель = стрОтправитель;
			КонецЕсли;
			
			// Обход ограничений при использовании модальности
			Ф = ПолучитьФорму("Обработка.бит_Битфон.Форма.ОсновнаяФорма");
			Если Ф.Открыта() = Истина И Ф.СтатусНеБеспокоить = Ложь И Ф.ИдетРазговор = Ложь Тогда
				Ф.кнНеБеспокоить(Неопределено);
			КонецЕсли;
			
			ФормаСМС.НомерПолучателя = Элементы.Телефоны.ТекущиеДанные.Номер;
			ФормаСМС.Договор = ЭтаФорма.Объект.Ссылка; 
			ФормаСМС.ТекстСМС = Автоинформирование.ПолучитьПодсказку(Объект.Ссылка, ОбъектыСервер.РазыменоватьСсылку(ПредопределенноеЗначение("Справочник.ТипыМероприятий.ОтправкаСМС"), "ШаблонСМС"));
			ОтправитьСМСНаСервере();	
			
			НоваяЗадача = ПолучитьФорму("Задача.Мероприятие.Форма.ФормаМероприятия", Новый Структура("Объект", Объект.Ссылка),,Новый УникальныйИдентификатор());
			НоваяЗадача.Объект.Объект = ЭтаФорма.Объект.Ссылка;
			НоваяЗадача.Объект.ТипМероприятия = ПредопределенноеЗначение("Справочник.ТипыМероприятий.ОтправкаСМС");
			НоваяЗадача.Объект.Результат = РезультатОтправлено;
			// НоваяЗадача.Объект.Контакт = РезультатНомер;
			НоваяЗадача.КонтрагентКЛ = ЭтаФорма.Объект.Ссылка;
			НоваяЗадача.Открыть();
			ФормаСМС.ОткрытьМодально();
		Иначе
			Предупреждение("Не выбран контакт для отправки!",,"Отправка СМС");
		КонецЕсли;
	Иначе
		Предупреждение("Нарушение прав доступа!",,"Предупреждение");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НайтиВВЦ(Команда)
	Если ЭтаФорма.РольЮД = Истина Тогда
		Если ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы.Телефоны И Элементы.Телефоны.ТекущиеДанные <> Неопределено Тогда
			// Найти контакт через API
			ПоказатьОповещениеПользователя("Интеграция с WhatsApp",,"Поиск номера...",БиблиотекаКартинок.NC_ПодсистемаИнтеграцияСWhatsApp);
			ФормаВЦ = ПолучитьФорму("ОбщаяФорма.ОтправкаНаWhatsApp",,,Новый УникальныйИдентификатор());
			ФормаВЦ.Номер = СтрСоединить(СтрРазделить(Элементы.Телефоны.ТекущиеДанные.Номер, "+( )"), "");
			ФормаВЦ.Договор = ЭтаФорма.Объект.Ссылка;
			ФормаВЦ.ПоискДолжника(Неопределено);
		Иначе
			Предупреждение("Не выбран контакт для поиска!",,"Интеграция с WhatsApp");
		КонецЕсли;
	Иначе
		Предупреждение("Нарушение прав доступа!",,"Предупреждение");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НаписатьВВЦНаСервере()
	// Получить значения с сервера
	ЭтаФорма.ТипВЦ = Справочники.ТипыМероприятий.НайтиПоНаименованию("WhatsApp");
	ЭтаФорма.РезультатОтправлено = Справочники.РезультатыМероприятий.НайтиПоНаименованию("Отправлено");
КонецПроцедуры

&НаКлиенте
Процедура НаписатьВВЦ(Команда)
	Если ЭтаФорма.РольЮД = Истина Тогда
		Если ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы.Телефоны И Элементы.Телефоны.ТекущиеДанные <> Неопределено Тогда
			
			// Обход ограничений при использовании модальности
			Ф = ПолучитьФорму("Обработка.бит_Битфон.Форма.ОсновнаяФорма");
			Если Ф.Открыта() = Истина И Ф.СтатусНеБеспокоить = Ложь И Ф.ИдетРазговор = Ложь Тогда
				Ф.кнНеБеспокоить(Неопределено);
			КонецЕсли;
			
			ФормаВЦ = ПолучитьФорму("ОбщаяФорма.ОтправкаНаWhatsApp");
			ФормаВЦ.Номер = СтрСоединить(СтрРазделить(Элементы.Телефоны.ТекущиеДанные.Номер, "+( )"), "");
			ФормаВЦ.Договор = ЭтаФорма.Объект.Ссылка;
			НаписатьВВЦНаСервере();
			
			НоваяЗадача = ПолучитьФорму("Задача.Мероприятие.Форма.ФормаМероприятия", Новый Структура("Объект", Объект.Ссылка),,Новый УникальныйИдентификатор());
			НоваяЗадача.Объект.Объект = ЭтаФорма.Объект.Ссылка;
			НоваяЗадача.Объект.ТипМероприятия = ТипВЦ;
			НоваяЗадача.Объект.Результат = РезультатОтправлено;
			// НоваяЗадача.Объект.Контакт = РезультатНомер;
			НоваяЗадача.КонтрагентКЛ = ЭтаФорма.Объект.Ссылка;
			НоваяЗадача.Открыть();
			ФормаВЦ.ОткрытьМодально();
		Иначе
			Предупреждение("Не выбран контакт для отправки!",,"Интеграция с WhatsApp");
		КонецЕсли;
	Иначе
		Предупреждение("Нарушение прав доступа!",,"Предупреждение");
	КонецЕсли;
КонецПроцедуры

//




#Область События

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Контрагент = Неопределено;
	Если Не Параметры.Свойство("Контрагент", Контрагент) Тогда
	
		УправленияСообщениями.ТекстовоеСообщить(
			"Попытка открыть форму без указания контрагента"
		);
		Закрыть();
	
	КонецЕсли;
	
	НастроитьЗначенияПоУмолчанию();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УбратьВидимостьСтраниц();
	Элементы.ГруппаТранспорт.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)

	ДанныеИмущества = ТекущиеДанныеИмущества();

	ОтветНаВопрос = КодВозвратаДиалога.Да;
	Если Не ВсеЗаполнены(ДанныеИмущества["Таблица"]) Тогда
	
		ОтветНаВопрос = Вопрос(
			"Продолжить запись?",
			РежимДиалогаВопрос.ДаНет,
			60,
			,
			"В записываемых данных, есть пустые значения"
		);
		
		Если ОтветНаВопрос = КодВозвратаДиалога.Таймаут Тогда
		
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Запись отменена";
			Сообщение.Сообщить();
			Возврат;
		
		КонецЕсли;
	
	КонецЕсли;
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ТекстРезультата = ЗаписатьСведенияПоИмуществу(ДанныеИмущества);
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстРезультата;
	Сообщение.Сообщить();

КонецПроцедуры

&НаКлиенте
Процедура ТипИмуществаПриИзменении(Элемент)

	УбратьВидимостьСтраниц();
	
	ИмяГруппы = "Группа" + ИмяПредопределенныхДанныхТипаИмущества(ТипИмущества);
	Элементы[ИмяГруппы].Видимость = Истина;
	ЭтаФорма.ТекущийЭлемент = Элементы[ИмяГруппы];

КонецПроцедуры

//&НаКлиенте
//Процедура ОграничитьЗначение(Элемент)

//	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
//	
//	УправлениеДанными.ОграничитьТипыЗначения(
//		ТекущиеДанные.Свойство,
//		Элемент
//	);

//КонецПроцедуры

&НаКлиенте
Процедура УдалитьПустые(Команда)
	
	ИмяТекущихДанных = ИмяПредопределенныхДанныхТипаИмущества(ТипИмущества);
	Имущество = ЭтотОбъект[ИмяТекущихДанных];
	
	Количество = Имущество.Количество();
	ТекущийНомер = Количество - 1;
	Пока ТекущийНомер >= 0 Цикл
	
		Если Не ЗначениеЗаполнено(Имущество[ТекущийНомер].Значение) Тогда
		
			Транспорт.Удалить(ТекущийНомер);
		
		КонецЕсли;
		ТекущийНомер = ТекущийНомер - 1;
	
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяПредопределенныхДанныхТипаИмущества(ТипИмущества)

	Возврат ТипИмущества.ИмяПредопределенныхДанных;

КонецФункции // ()


#КонецОбласти

#Область УправлениеФормой

&НаСервере
Процедура НастроитьЗначенияПоУмолчанию()

	ТипИмущества = ПланыВидовХарактеристик.Имущество.Транспорт;
	
	ЗаполнитьВсеСвойства();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВсеСвойства()

	Имущество = ПланыВидовХарактеристик.Имущество;
	ЗаполнитьСвойстваИмущества(Имущество.Транспорт);
	ЗаполнитьСвойстваИмущества(Имущество.Помещения);
	ЗаполнитьСвойстваИмущества(Имущество.ЗемельныеУчастки);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСвойстваИмущества(ВидИмущества)

	СвойстваИмущества = ПланыВидовХарактеристик.СвойстваИмущества;
	Поля = СвойстваИмущества.ПоляИмущества(ВидИмущества);
	
	Для каждого Поле Из Поля Цикл
	
		Элемент = ЭтотОбъект[ВидИмущества.ИмяПредопределенныхДанных].Добавить();
		Элемент.Свойство = Поле["Свойство"];
		Элемент.Значение = УправлениеДанными.ЗначениеПоУмолчанию(Поле["Свойство"].ТипЗначения);
	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УбратьВидимостьСтраниц()

	Элементы.ГруппаТранспорт.Видимость = Ложь;
	Элементы.ГруппаЗемельныеУчастки.Видимость = Ложь;
	Элементы.ГруппаПомещения.Видимость = Ложь;

КонецПроцедуры


#КонецОбласти

#Область ЗаписьДанных

&НаКлиенте
Функция ТекущиеДанныеИмущества()

	ДанныеИмущества = Новый Структура;
	
	ИмяТекущихДанных = ИмяПредопределенныхДанныхТипаИмущества(ТипИмущества);
	ДанныеИмущества.Вставить("Имя", ИмяТекущихДанных);
	
	Имущество = ПолучитьТекущийЭлемент(ИмяТекущихДанных);
	ДанныеИмущества.Вставить("Имущество", Имущество);
	
	ТекущаяТаблица = ПолучитьЗаполняемуюТаблицу(ИмяТекущихДанных);
	ДанныеИмущества.Вставить("Таблица", ТекущаяТаблица);

	Возврат ДанныеИмущества;

КонецФункции // ()

&НаКлиенте
Функция ПолучитьТекущийЭлемент(ИмяТекущихДанных)

	ТекущееИмущество = ЭтотОбъект["Элемент" + ИмяТекущихДанных];
	
	Если ЗначениеЗаполнено(ТекущееИмущество) Тогда
	
		Возврат ТекущееИмущество;
	
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции // ()

&НаКлиенте
Функция ПолучитьЗаполняемуюТаблицу(ИмяТекущихДанных)

	Возврат ЭтотОбъект[ИмяТекущихДанных];

КонецФункции // ()

&НаКлиенте
Функция ВсеЗаполнены(ТекущаяТаблица)

	Для каждого Элемент Из ТекущаяТаблица Цикл
	
		Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
		
			Возврат Ложь;
		
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Истина;

КонецФункции // ()


&НаСервере
Функция ЗаписатьСведенияПоИмуществу(ДанныеИмущества)

	НачатьТранзакцию();
	
	Попытка
	
		КонтрольИмущества(ДанныеИмущества);
		ЗанесениеДанных(ДанныеИмущества);
	
	Исключение
		ОтменитьТранзакцию();
		Возврат "Запись не удалась: " + ОписаниеОшибки();
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();

	Возврат "Данные внесены";

КонецФункции

&НаСервере
Процедура КонтрольИмущества(ДанныеИмущества)

	Имущество = ДанныеИмущества["Имущество"];
	Если Не ЗначениеЗаполнено(Имущество) Тогда
	
		ДанныеИмущества["Имущество"] = СоздатьНовыйЭлемент(ДанныеИмущества["Имя"]);
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗанесениеДанных(ДанныеИмущества)

	Записатор = Документы.СведенияОбИмуществе;
	
	ЗаписьСведений = Записатор.Создать();
	
	Данные = Новый Структура;
	Данные.Вставить("Источник", Справочники.ИсточникиСведений.РучнойВвод);
	Данные.Вставить("Имущество", ДанныеИмущества["Имущество"]);
	Данные.Вставить("Сведения", ДанныеИмущества["Таблица"]);
	Попытка
	
		ЗаписьСведений = Записатор.Заполнить(ЗаписьСведений, Данные);
	
	Исключение
		ВызватьИсключение УправленияСообщениями.ПредупреждениеОбПользовательскойОшибке(
			"Не прошла проверка вносимых данных: " + Символы.ПС
			+ ОписаниеОшибки()
		);
	КонецПопытки;

	Попытка
	
		Записатор.Провести(ЗаписьСведений);
	
	Исключение
		ВызватьИсключение УправленияСообщениями.ПредупреждениеОбПользовательскойОшибке(
			"Не удалось внести сведения: " + Символы.ПС
			+ ОписаниеОшибки()
		);
	КонецПопытки;
	
	Имущество = ПланыВидовХарактеристик.Имущество;
	Имущество.ИзменитьНаименование(
		ДанныеИмущества["Имущество"]
	);

КонецПроцедуры

&НаСервере
Функция СоздатьНовыйЭлемент(ИмяТекущихДанных)

	Возврат Справочники[ИмяТекущихДанных].ПолучитьНовый(Контрагент);

КонецФункции // ()

#КонецОбласти


















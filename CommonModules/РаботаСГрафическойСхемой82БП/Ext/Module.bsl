
Процедура ИзменитьЗадержку(Имя, Задержка, Карта) Экспорт
	СтруктураГрафическойСхемы = ПолучитьСтруктуруНеПустойГрафическойСхемы(Карта);
	
	Для Каждого Элемент Из СтруктураГрафическойСхемы.Элементы цикл		
		Если Элемент.СтруктураИмени.Идентификатор = Имя тогда
			 Элемент.СтруктураИмени.Наименование = Задержка;
		КонецЕсли;	 
	КонецЦикла;		
    ОтобразитьГрафическуюСхему(СтруктураГрафическойСхемы, Карта);
КонецПроцедуры
            
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//! Функции задают некоторые константы модуля
Функция НаправлениеВверх() Экспорт
	Возврат "Вверх";       
КонецФункции	
Функция НаправлениеВправо() Экспорт
	Возврат "Вправо";       
КонецФункции
Функция НаправлениеВниз() Экспорт
	Возврат "Вниз";       
КонецФункции
Функция НаправлениеВлево() Экспорт
	Возврат "Влево";       
КонецФункции
	
Процедура ЗавершитьСхему(ГрафическаяСхема, ТекущийЭлемент) Экспорт
	#Если НЕ Вебклиент Тогда
		пИмяФайла = ПолучитьИмяВременногоФайла();
	#Иначе
		пИмяФайла = Новый Файл(строка(Секунда(ОбщегоНазначенияКлиент.ДатаСеанса())));
	#КонецЕсли
	пСтруктураГрафическойСхемы =  ПолучитьСтруктуруНеПустойГрафическойСхемы(ГрафическаяСхема);
	ИндексЗавершения = пСтруктураГрафическойСхемы.Элементы.Количество() + 1;
	
	МаксПраво = 0;
	МаксНиз = 0;
	
	Для Каждого Элемент Из пСтруктураГрафическойСхемы.Элементы Цикл	
		Если ТипЗнч(Элемент._СвойстваЭлемента) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда			
			ТочкиМас = Элемент.Точки;
			Для каждого точка Из ТочкиМас Цикл				
				Если точка.Лево > МаксПраво Тогда					
					МаксПраво = точка.Лево;					
				КонецЕсли; 		
				Если Точка.Верх > МаксНиз Тогда			
					МаксНиз  = Точка.Верх;			
				КонецЕсли; 		
			КонецЦикла; 		
		Иначе	
			Если (Элемент.Лево + Элемент.Ширина) > МаксПраво Тогда			
				МаксПраво = (Элемент.Лево + Элемент.Ширина)			
			КонецЕсли; 		
			Если (Элемент.Верх + Элемент.Высота) > МаксНиз Тогда		
				МаксНиз = (Элемент.Верх + Элемент.Высота)		
			КонецЕсли; 			
		КонецЕсли; 
	КонецЦикла; 

	МаксПраво = МаксПраво + 60;
	МаксНиз = МаксНиз + 60;	

	Для каждого Элемент Из пСтруктураГрафическойСхемы.Элементы Цикл	
		Если ТипЗнч(Элемент._СвойстваЭлемента) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда	
			Если Элемент._СвойстваЭлемента.КонецЭлемент = Неопределено Тогда	
				Элемент.КудаИдет = ИндексЗавершения;
				Элемент.Точки[1].Верх = МаксНиз;
				Элемент.Точки[1].Лево = МаксПраво+70;	
			КонецЕсли; 
		КонецЕсли;		
	КонецЦикла;	
	
	СтрЗавершения = "{{{4," + Строка(ИндексЗавершения) + ",{1,1,{" + Символ(34) + "#" + Символ(34) + "," + Символ(34) +
			"Завершение" + Символ(34) + "}}" + "," + Символ(34) + "Завершение" + Символ(34) + 
			",6},4,cf1fff5b-b11b-45bc-aa6d-6e9558df5623,0},2,{{{{6,{3,4,{0}},{3,3,{-22}},{3,3,{-3}},{6,3,0,1},{1,0},1,1,1,5,0,0,0},5," + 
			Строка(МаксПраво) + "," + Строка(МаксНиз) + "," + Строка(140 + МаксПраво) + "," + Строка(80 + МаксНиз) + ",5," +
			Строка(70 + МаксПраво) + "," + Строка(МаксНиз) + "," + Строка(139 + МаксПраво) + "," + Строка(40 + МаксНиз) + "," +
			Строка(139 + МаксПраво)+ "," + Строка(79 + МаксНиз) + "," + Строка(МаксПраво) + "," + Строка(79 + МаксНиз) + "," +
			Строка(МаксПраво) + "," + Строка(40 + МаксНиз) + 
			",4,{3,0,{0},"",-1,-1,1,0},{4,0,{0},1,1,0,e45c0cd8-a878-4bcb-8e1a-af934481e1cc,0}},1}},{0}},7}";
	СохранитьГрафическуюСхему(пСтруктураГрафическойСхемы, пИмяФайла, СтрЗавершения);
	
	Попытка	
		ГрафическаяСхема.Прочитать(пИмяФайла); 
	Исключение 
		Сообщить("Ошибка потока!!! ///!!!"); 
	КонецПопытки;
	УдалитьФайлы(пИмяФайла); //!!! поидее надо раскомментить
КонецПроцедуры

//! Создает графическую схему с единственным элементом "Старт"
Процедура СоздатьНовуюКарту(ПолеГрафическойСхемы) Экспорт
	СтруктураНовойСхемы = ПолучитьСтруктуруГрафическойСхемы();
	ДобавитьСтарт(СтруктураНовойСхемы, "Старт", 20, 20, 100, 50);
	ОтобразитьГрафическуюСхему(СтруктураНовойСхемы, ПолеГрафическойСхемы); 		
КонецПроцедуры

//! Процедура создает новый узел карты
// Параметры
//  ТекущийЭлемент  - ЭлементГрафическойСхемыДекорация               
//  ПолеГрафическойСхемы  - ПолеГрафическойСхемы               
//          (пСтруктураГрафическойСхемы, пНаименование="", пЛево=100, пВерх=100, пШирина=50, пВысота=50, пПодсказка="", пПояснениеДействия="", пГрупповая=Ложь, пИдентификатор=Неопределено
Функция ПолучитьИндексДляДобавленияЭлемента(СтруктураДобавленногоЭлемента, СтруктураГрафическойСхемы)
    Счетчик = 1;
	Для Каждого Элем из СтруктураГрафическойСхемы.Элементы цикл
		Если Элем.СтруктураИмени.Идентификатор = СтруктураДобавленногоЭлемента.СтруктураИмени.Идентификатор Тогда
			Возврат Счетчик
		Иначе 
			Счетчик = Счетчик + 1;
		КонецЕсли;	
	КонецЦикла;		
КонецФункции

//! Создает новый узел ГС (добавляет через временный файл)
Функция СоздатьУзел(ТекущийЭлемент, ГрафическаяСхема, ГрафическийЭлемент, Наименование = "",
		Направление = "Вправо", МассивПараметров = Неопределено, ВремяЗадержки = 0, Имя = Неопределено, 
		Подсказка = "") Экспорт  		
	//ИндексТекущегоЭлемента    = ПолучитьИндексТекущегоЭлементаПоСтруктура(ТекущийЭлемент, ГрафическаяСхема);
	СтруктураГрафическойСхемы = ПолучитьСтруктуруНеПустойГрафическойСхемы(ГрафическаяСхема);
	ИндексТекущегоЭлемента    = ПолучитьИндексТекущегоЭлементаПоСтруктура(ТекущийЭлемент, СтруктураГрафическойСхемы);	
	Координаты                = ОпределитьКоординатыНовогоУзла(ТекущийЭлемент, ГрафическаяСхема, Направление);
	
	Если ГрафическийЭлемент = "ТочкаДействия" Тогда	
		СтруктураДобавленногоЭлемента = ДобавитьТочкуДействия(СтруктураГрафическойСхемы, Наименование, 
				Координаты.Лево, Координаты.Верх, 150, 50, Подсказка,,,,Имя);		
		//ОтобразитьГрафическуюСхему(СтруктураГрафическойСхемы, ГрафическаяСхема);
		////Добавление пустой стрелки //Начало
		//ЭлементДействие = ГрафическаяСхема.ЭлементыГрафическойСхемы[
		//		ГрафическаяСхема.ЭлементыГрафическойСхемы.Количество()-1];
		//
		//КоординатыДействия = Новый Структура();
		//КоординатыДействия.Вставить("Верх",   СтруктураДобавленногоЭлемента.Верх);
		//КоординатыДействия.Вставить("Высота", СтруктураДобавленногоЭлемента.Высота);
		//КоординатыДействия.Вставить("Лево",   СтруктураДобавленногоЭлемента.Лево);
		//КоординатыДействия.Вставить("Ширина", СтруктураДобавленногоЭлемента.Ширина);
		//	
		//КоординатыЛинииДляДействия  = ОпределитьКоординатыЛинии(ЭлементДействие, КоординатыДействия, "Вниз");	 
		//Индекс = ПолучитьИндексДляДобавленияЭлемента(СтруктураДобавленногоЭлемента,СтруктураГрафическойСхемы);
		//СтруктураЛинии = ДобавитьЛинию(СтруктураГрафическойСхемы, , ,Индекс, , , , , , , Ложь, , -1);  

		//ПровестиЛиниюМеждуТочками(СтруктураЛинии, 
		//		КоординатыЛинииДляДействия.НачалоЛево, 
		//		КоординатыЛинииДляДействия.КонецВерх+СтруктураДобавленногоЭлемента.Высота, 
		//		КоординатыЛинииДляДействия.НачалоЛево,
		//		КоординатыЛинииДляДействия.КонецВерх+СтруктураДобавленногоЭлемента.Высота+20);
		////Добавление пустой стрелки //Конец
	ИначеЕсли ГрафическийЭлемент = "ТочкаВыбораВарианта" Тогда
		Если МассивПараметров = Неопределено Тогда
			МассивПараметров = Новый Массив();
		КонецЕсли;
		
		СтруктураДобавленногоЭлемента = ДобавитьВыборВарианта(СтруктураГрафическойСхемы, Наименование, 
				Координаты.Лево, Координаты.Верх, 150, 50+15*МассивПараметров.Количество());	
		НомерВарианта = 1;	
		Для Каждого ВариантВыбора Из МассивПараметров Цикл			
			ДобавитьВариантВВыборВарианта(СтруктураДобавленногоЭлемента, "Вариант"+Строка(НомерВарианта), 
					ВариантВыбора);
			НомерВарианта = НомерВарианта + 1;
		КонецЦикла;	  
		//ОтрисовкаЛинийДляТелефонныйЗвонокИсходящий(ГрафическаяСхема,СтруктураГрафическойСхемы,
		//		СтруктураДобавленногоЭлемента);	  
	Иначе		
		СтруктураДобавленногоЭлемента = ДобавитьДекорацию(СтруктураГрафическойСхемы, Наименование, 
				Координаты.Лево, Координаты.Верх, Координаты.Ширина, Координаты.Высота);	
    Конецесли;
		
	//НомерДобавленногоЭлемента = ПолучитьИндексДляДобавленияЭлемента(СтруктураДобавленногоЭлемента,
	//		СтруктураГрафическойСхемы);	
	НомерДобавленногоЭлемента = СтруктураДобавленногоЭлемента.СтруктураИмени.Номер;
	
	ИндексДляОтрисовки = ИндексТекущегоЭлемента;		
	ВарДляОтрисовки = -1;
	КоординатыЛинии = ОпределитьКоординатыЛинии(ТекущийЭлемент, Координаты, Направление);	
	УдалитьПредыдЛинию = Ложь;
	Удалять = Истина;
	НачСтрононана = КоординатыЛинии.НачалоСторона;
                                                                            	                                                    	
	Если ТипЗнч(ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") И 
			ТипЗнч(ТекущийЭлемент.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыВыборВарианта") Тогда			
	 	ДекоративнаяЛиния = Новый Структура;
		ТекущийЭлементЛево = ТекущийЭлемент.КонецЛево;
	 	ТекущийЭлементВерх = ТекущийЭлемент.КонецВерх;			
		
		Ширина = ТекущийЭлементЛево;// - ТекущийЭлемент.НачалоЛево;
		Высота = ТекущийЭлементВерх;// - ТекущийЭлемент.НачалоВерх;		
		Если Ширина < 0 Тогда
			Ширина = - Ширина;
		КонецЕсли; 			 
		Если Высота < 0 Тогда
			Высота = - Высота;  
		КонецЕсли; 
			
		ТекущийЭлементШирина =  Ширина;
		ТекущийЭлементВысота = Высота;
			
		ДекоративнаяЛиния.Вставить("Лево",ТекущийЭлементЛево-20);
		ДекоративнаяЛиния.Вставить("Верх",ТекущийЭлементВерх);
		ДекоративнаяЛиния.Вставить("Ширина",0);
	   	ДекоративнаяЛиния.Вставить("Высота",0);

	    ИндексДляОтрисовки = ПолучитьИндексТекущегоЭлемента(ТекущийЭлемент.НачалоЭлемент, ГрафическаяСхема);	 		
	    КоординатыЛинии = ОпределитьКоординатыЛинии(ДекоративнаяЛиния, Координаты, Направление);
	    УдалитьПредыдЛинию = Истина;
		СчетчВыборки = 0;
		Для каждого Вар Из ТекущийЭлемент.НачалоЭлемент.Элементы Цикл
			Если Вар.Наименование = ТекущийЭлемент.НачалоВариант.Наименование Тогда
				НомерВар = СчетчВыборки;
				Прервать;			
			КонецЕсли; 
			СчетчВыборки = СчетчВыборки+1;
		КонецЦикла;
	   	   
	    ВарДляОтрисовки = НомерВар;
	    НачСтрононана = 7 + 2*НомерВар;
		Удалять = Ложь;
	КонецЕсли; 
	
	Если ТипЗнч(ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") И 
			ТипЗнч(ТекущийЭлемент.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыДействие") Тогда	
		ДекоративнаяЛиния = Новый Структура;
		ТекущийЭлементЛево = ТекущийЭлемент.КонецЛево;
	 	ТекущийЭлементВерх = ТекущийЭлемент.НачалоВерх;
			
		Ширина = ТекущийЭлементЛево;// - ТекущийЭлемент.НачалоЛево;
		Высота = ТекущийЭлементВерх;// - ТекущийЭлемент.НачалоВерх;	
		Если Ширина < 0 Тогда
			Ширина = - Ширина;
		КонецЕсли; 		 
		Если Высота < 0 Тогда
			Высота = - Высота;  
		КонецЕсли; 
				
		ТекущийЭлементШирина = Ширина;
		ТекущийЭлементВысота = Высота;
			
		ДекоративнаяЛиния.Вставить("Лево", ТекущийЭлементЛево);
		ДекоративнаяЛиния.Вставить("Верх", ТекущийЭлементВерх);
		ДекоративнаяЛиния.Вставить("Ширина", 0);
	   	ДекоративнаяЛиния.Вставить("Высота", 0);

	    ИндексДляОтрисовки = ПолучитьИндексТекущегоЭлементаПоСтруктура(ТекущийЭлемент.НачалоЭлемент, 
				СтруктураГрафическойСхемы) + 1;	 		
	    КоординатыЛинии    = ОпределитьКоординатыЛинии(ДекоративнаяЛиния, Координаты, Направление);
	    УдалитьПредыдЛинию = Истина;	   
	    ВарДляОтрисовки = -1;    
	    Удалять = Ложь; 	
	КонецЕсли; 
		
	///  ИА: изменить со свободной линии на соед	
	Если Удалять = Истина Тогда		
		СтруктураЛинии = ДобавитьЛинию(СтруктураГрафическойСхемы, , , ИндексДляОтрисовки + 1, 
				НомерДобавленногоЭлемента, НачСтрононана, КоординатыЛинии.КонецСторона, , , , Ложь,,
				ВарДляОтрисовки,ВремяЗадержки);    	
	    ПровестиЛиниюМеждуТочками(СтруктураЛинии, КоординатыЛинии.НачалоЛево, КоординатыЛинии.НачалоВерх, 
				КоординатыЛинии.КонецЛево, КоординатыЛинии.КонецВерх);
		
		НачВар = СтруктураЛинии.НачалоВарианта;
		ОткВыходит = СтруктураЛинии.ОткудаИдет;
 		
		//Если ТипЗнч(ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыВыборВарианта") И
		//		Не МассивПараметров = Неопределено Тогда
		//	ОтрисовкаЛинийДляТелефонныйЗвонокИсходящий(СтруктураГрафическойСхемы, ИндексТекущегоЭлемента,
		//		НомерДобавленногоЭлемента,ТекущийЭлемент,Координаты,ТекущийЭлемент.Элементы);	
		//КонецЕсли; 
		//ОтобразитьГрафическуюСхему(СтруктураГрафическойСхемы, ГрафическаяСхема);
		Если УдалитьПредыдЛинию = Истина Тогда			
			МассивЭлементов = СтруктураГрафическойСхемы.Элементы;
			Для Каждого Элемент Из МассивЭлементов Цикл	
				Если Найти(Элемент.СтруктураИмени.Идентификатор, "Линия") > 0 И Элемент.ОткудаИдет = ОткВыходит И 
						Элемент.НачалоВарианта = НачВар Тогда	
					ИндексУдал = МассивЭлементов.Найти(Элемент);
					МассивЭлементов.Удалить(ИндексУдал);
					Прервать;
				КонецЕсли; 	
			КонецЦикла; 	
		КонецЕсли; 	
	Иначе 		
		МассивЭлементов = СтруктураГрафическойСхемы.Элементы;	
		Для каждого Элемент Из МассивЭлементов Цикл		
			Если ТекущийЭлемент.Имя =  Элемент.СтруктураИмени.Идентификатор тогда
				Элемент.КудаИдет = НомерДобавленногоЭлемента;
				Элемент.Точки[1].Верх = Элемент.Точки[1].Верх + 40;
				Элемент.Точки[1].Лево = Элемент.Точки[1].Лево + СтруктураДобавленногоЭлемента.Ширина/2;
				//Элемент._СвойстваЭлемента.КонецВерх = Элемент._СвойстваЭлемента.КонецВерх + 20;
			КонецЕсли;
		КонецЦикла;   
    КонецЕсли;
	ОтобразитьГрафическуюСхему(СтруктураГрафическойСхемы, ГрафическаяСхема);	
	//ЗаполнитьСвойстваЭлементовСхемы(СтруктураГрафическойСхемы, ГрафическаяСхема, НомерДобавленногоЭлемента-1);
	
	Возврат СтруктураДобавленногоЭлемента.СтруктураИмени.Идентификатор;
КонецФункции

//! 
Функция СоздатьУзелМеждуДругими(ТекущийЭлемент, ГрафическаяСхема, ГрафическийЭлемент, Наименование = "",
		Направление = "Вправо", МассивПараметров = Неопределено, ВремяЗадержки = 0, Имя = Неопределено, 
		Подсказка = "", ЭлементРебенок, ДобавляетсяПослеТекущего = Ложь) Экспорт  		
	//ИндексТекущегоЭлемента    = ПолучитьИндексТекущегоЭлементаПоСтруктура(ТекущийЭлемент, ГрафическаяСхема);
	СтруктураГрафическойСхемы = ПолучитьСтруктуруНеПустойГрафическойСхемы(ГрафическаяСхема);
	ИндексТекущегоЭлемента    = ПолучитьИндексТекущегоЭлементаПоСтруктура(ТекущийЭлемент, СтруктураГрафическойСхемы);	
	Координаты                = ОпределитьКоординатыНовогоУзла(ТекущийЭлемент, ГрафическаяСхема, Направление);
	Координаты.Лево = ТекущийЭлемент.Лево - (150 - ТекущийЭлемент.Ширина);
	Координаты.Верх = ТекущийЭлемент.Верх;
	
	Если ГрафическийЭлемент = "ТочкаДействия" Тогда	
		//1 Добавить элемент как ребенок
		СтруктураДобавленногоЭлемента = ДобавитьТочкуДействия(СтруктураГрафическойСхемы, Наименование, 
				Координаты.Лево, Координаты.Верх, 150, 50, Подсказка,,,,Имя);		
		//ОтобразитьГрафическуюСхему(СтруктураГрафическойСхемы, ГрафическаяСхема);
		//2 У предыдущей стрелки поменять начало элемент
		Если ДобавляетсяПослеТекущего Тогда
			Для Каждого Элемент Из СтруктураГрафическойСхемы.Элементы Цикл
				Если Элемент.Свойство("_СвойстваЭлемента") И
						ТипЗнч(Элемент._СвойстваЭлемента) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") И	
						Элемент._СвойстваЭлемента.НачалоЭлемент = ТекущийЭлемент Тогда
					Элемент.ОткудаИдет = СтруктураДобавленногоЭлемента.СтруктураИмени.Номер;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого Элемент Из СтруктураГрафическойСхемы.Элементы Цикл
				Если ТипЗнч(Элемент._СвойстваЭлемента) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") И
						Элемент._СвойстваЭлемента.НачалоЭлемент = ТекущийЭлемент И
						Элемент._СвойстваЭлемента.КонецЭлемент = ЭлементРебенок Тогда
					Элемент.ОткудаИдет = СтруктураДобавленногоЭлемента.СтруктураИмени.Номер;
					Прервать;
				КонецЕсли;
			КонецЦикла;				
		КонецЕсли;
    Конецесли;
		
	//НомерДобавленногоЭлемента = ПолучитьИндексДляДобавленияЭлемента(СтруктураДобавленногоЭлемента,
	//		СтруктураГрафическойСхемы);	
	НомерДобавленногоЭлемента = СтруктураДобавленногоЭлемента.СтруктураИмени.Номер;	
	
	ИндексДляОтрисовки = ИндексТекущегоЭлемента;		
	ВарДляОтрисовки = -1;
	КоординатыЛинии = ОпределитьКоординатыЛинии(ТекущийЭлемент, Координаты, Направление);	
	УдалитьПредыдЛинию = Ложь;
	Удалять = Истина;
	НачСтрононана = КоординатыЛинии.НачалоСторона;
                                                                            	                                                    			
	//ИА: изменить со свободной линии на соед	
	Если Удалять = Истина Тогда		
		СтруктураЛинии = ДобавитьЛинию(СтруктураГрафическойСхемы, , , ИндексДляОтрисовки + 1, 
				НомерДобавленногоЭлемента, НачСтрононана, КоординатыЛинии.КонецСторона, , , , Ложь,,
				ВарДляОтрисовки,ВремяЗадержки);    	
	    ПровестиЛиниюМеждуТочками(СтруктураЛинии, КоординатыЛинии.НачалоЛево, КоординатыЛинии.НачалоВерх, 
				КоординатыЛинии.КонецЛево, КоординатыЛинии.КонецВерх);
		
		НачВар = СтруктураЛинии.НачалоВарианта;
		ОткВыходит = СтруктураЛинии.ОткудаИдет;
 	
		ОтобразитьГрафическуюСхему(СтруктураГрафическойСхемы, ГрафическаяСхема);
		Если УдалитьПредыдЛинию = Истина Тогда			
			МассивЭлементов = СтруктураГрафическойСхемы.Элементы;
			Для Каждого Элемент Из МассивЭлементов Цикл	
				Если Найти(Элемент.СтруктураИмени.Идентификатор, "Линия") > 0 И Элемент.ОткудаИдет = ОткВыходит И 
						Элемент.НачалоВарианта = НачВар Тогда	
					ИндексУдал = МассивЭлементов.Найти(Элемент);
					МассивЭлементов.Удалить(ИндексУдал);
					Прервать;
				КонецЕсли; 	
			КонецЦикла; 	
		КонецЕсли; 	
	Иначе 		
		МассивЭлементов = СтруктураГрафическойСхемы.Элементы;	
		Для каждого Элемент Из МассивЭлементов Цикл		
			Если ТекущийЭлемент.Имя =  Элемент.СтруктураИмени.Идентификатор тогда
				Элемент.КудаИдет = НомерДобавленногоЭлемента;
				Элемент.Точки[1].Верх = Элемент.Точки[1].Верх + 40;
				Элемент.Точки[1].Лево = Элемент.Точки[1].Лево + СтруктураДобавленногоЭлемента.Ширина/2;
			КонецЕсли;
		КонецЦикла;   
    КонецЕсли;
	ОтобразитьГрафическуюСхему(СтруктураГрафическойСхемы, ГрафическаяСхема);	
		
	Возврат СтруктураДобавленногоЭлемента.СтруктураИмени.Идентификатор;
КонецФункции

//Рисуем линии для четырех (пока) событий.
Функция ИндексДляВарианта(ТекущийЭлемент, СтруктураГрафическойСхемы)
	Для каждого Элемент Из СтруктураГрафическойСхемы.Элементы Цикл
		Если Элемент.СтруктураИмени.Идентификатор = ТекущийЭлемент.СтруктураИмени.Идентификатор Тогда
			ИскомыйИндекс = Элемент.СтруктураИмени.Номер-1;  
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат ИскомыйИндекс;	
КонецФункции	

//!!
Процедура ОтрисовкаЛинийДляТелефонныйЗвонокИсходящий(ГрафическаяСхема, СтруктураГрафическойСхемы, Элемент)
	//ИндексТекущегоЭлемента = ПолучитьИндексТекущегоЭлемента(Элемент, ГрафическаяСхема);	
	ИндексТекущегоЭлемента = ИндексДляВарианта(Элемент, СтруктураГрафическойСхемы);      
    // ПолучитьИндексТекущегоЭлементаПоСтруктура(ТекущийЭлемент, СтруктураГрафическойСхемы)      
    Координаты = ОпределитьКоординатыНовогоУзла(Элемент, ГрафическаяСхема, "Вправо");
    КоординатыЛинии = ОпределитьКоординатыЛинии(Элемент, Координаты,  "Вправо");
					   
	Элементы = Элемент.Варианты;	
	Счетчик = 1;
    КоличествоЭлементов = Элементы.Количество();
	Низ = Координаты.Верх + Координаты.Высота;	
	СуммарнаяВысотаЭлементов = КоличествоЭлементов * 20;
	ВысотаШапки = Низ - СуммарнаяВысотаЭлементов;	
	СмещениеЭлемента = ВысотаШапки;
	ИндексЛинииВарианта = 5;
	Пока Счетчик <= КоличествоЭлементов Цикл
		СмещениеЭлемента = СмещениеЭлемента + 18;
		ИндексЛинииВарианта = ИндексЛинииВарианта + 2;		
		НачалоВарианта = Счетчик - 1;
		Смещение = (Счетчик - 1) * 20;  
		//СтруктураЛинии = ДобавитьЛинию(СтруктураГрафическойСхемы, , , ИндексТекущегоЭлемента+1, ИндексТекущегоЭлемента+2+Счетчик, КоординатыЛинии.НачалоСторона, КоординатыЛинии.КонецСторона, , , , Ложь);  
		//СтруктураЛинии = ДобавитьЛинию(СтруктураГрафическойСхемы, , ,ИндексТекущегоЭлемента+1 , -1 ,Счетчик-1  ,-1 , , , , Ложь, );  	
		СтруктураЛинии = ДобавитьЛинию(СтруктураГрафическойСхемы,,, ИндексТекущегоЭлемента + 1,, ИндексЛинииВарианта,
				,,,,,, НачалоВарианта,,);  
		ПровестиЛиниюМеждуТочками(СтруктураЛинии, КоординатыЛинии.НачалоЛево, СмещениеЭлемента, 
				КоординатыЛинии.НачалоЛево + 20, СмещениеЭлемента);
		СтруктураЛинии.Вставить("НачалоВариант", Элементы[Счетчик - 1]);		
		Счетчик = Счетчик + 1;
	КонецЦикла; 
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

//! Функция экранирует кавычки в строке
//
// Параметры
//  Строка
//
// Возвращаемое значение:
//   Строка
//
Функция БезопаснаяСтрока(Строка)
	Возврат СтрЗаменить(Строка, """", """""");																			 
КонецФункции

//!
Процедура ПровестиЛиниюМеждуТочками(СтруктураЛинии, НачалоЛево, НачалоВерх, КонецЛево, КонецВерх)
	НачалоСторона = СтруктураЛинии.ОткудаВыходитЛиния;
	СтруктураЛинии.Точки.Добавить(Новый Структура("Лево, Верх", НачалоЛево, НачалоВерх));	
	Если НачалоЛево <> КонецЛево И НачалоВерх <> КонецВерх Тогда	
		Если НачалоСторона = 2 ИЛИ НачалоСторона = 4  Тогда
			ЦентрВерх = Окр( (НачалоВерх + КонецВерх) / 2);
			СтруктураЛинии.Точки.Добавить(Новый Структура("Лево, Верх", НачалоЛево, ЦентрВерх));
			СтруктураЛинии.Точки.Добавить(Новый Структура("Лево, Верх", КонецЛево, ЦентрВерх));		
		ИначеЕсли НачалоСторона = 3 ИЛИ  НачалоСторона = 1 Тогда
			ЦентрЛево = Окр( (НачалоЛево + КонецЛево) / 2);
			СтруктураЛинии.Точки.Добавить(Новый Структура("Лево, Верх", ЦентрЛево, НачалоВерх));
			СтруктураЛинии.Точки.Добавить(Новый Структура("Лево, Верх", ЦентрЛево, КонецВерх));			
		КонецЕсли;	
	КонецЕсли;	
	СтруктураЛинии.Точки.Добавить(Новый Структура("Лево, Верх", КонецЛево, КонецВерх));	
КонецПроцедуры

//! Функция возвращает индекс текущего элемента поля графической схемы
//
//
// Возвращаемое значение:
//   Число
//
Функция ПолучитьИндексТекущегоЭлемента(ТекущийЭлемент, ПолеГрафическойСхемы)
	Если ТекущийЭлемент <> Неопределено Тогда
		Сч = 0;
		КоличествоЭлементов = ПолеГрафическойСхемы.ЭлементыГрафическойСхемы.Количество();		
		Пока Сч < КоличествоЭлементов Цикл			
			Если ПолеГрафическойСхемы.ЭлементыГрафическойСхемы[Сч].Имя = ТекущийЭлемент.Имя Тогда
				//Возврат Сч;			
				СписокСтрок = СтрЗаменить(ТекущийЭлемент.Имя, "-", Символы.ПС);		
				Номер_ = Число( СтрПолучитьСтроку(СписокСтрок, СтрЧислоСтрок(СписокСтрок)) );
				Возврат Номер_ - 1;
			КонецЕсли;				 		
		    Сч = Сч + 1;
		КонецЦикла;	
	КонецЕсли;
	Возврат - 2;	
КонецФункции

//! Функция возвращает индекс текущего элемента поля графической схемы
//
//
// Возвращаемое значение:
//   Число
//
Функция ПолучитьНомерТекущегоЭлемента(ТекущийЭлемент, ПолеГрафическойСхемы) Экспорт
	Сч = 0;
	КоличествоЭлементов = ПолеГрафическойСхемы.ЭлементыГрафическойСхемы.Количество();		
	Пока Сч < КоличествоЭлементов Цикл	
		Если Не ТекущийЭлемент = Неопределено Тогда	
			Если ПолеГрафическойСхемы.ЭлементыГрафическойСхемы[Сч].Имя = ТекущийЭлемент.Имя Тогда
				Возврат Сч;			
			КонецЕсли;				
		КонецЕсли; 		
	    Сч = Сч + 1;
	КонецЦикла;	
	Возврат - 1;	
КонецФункции

//! Функция возвращает индекс текущего элемента поля графической схемы
//
//
// Возвращаемое значение:
//   Число
//
Функция ПолучитьИндексТекущегоЭлементаПоСтруктура(ТекущийЭлемент, СтруктураГрафическойСхемы)
	Индекс = 0;
	Для Каждого Элемент Из СтруктураГрафическойСхемы.Элементы Цикл	
		Если Элемент.СтруктураИмени.Идентификатор = ТекущийЭлемент.Имя Тогда
		//Если Элемент._СвойстваЭлемента.Имя = ТекущийЭлемент.Имя Тогда
			ИскомыйИндекс = Элемент.СтруктураИмени.Номер - 1;
			//ИскомыйИндекс = Индекс;
			Прервать;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла; 	
	Возврат ИскомыйИндекс;
КонецФункции

Функция ПолучитьИндексТекущегоЭлементаВСтруктуре(ТекущийЭлемент, СтруктураГрафическойСхемы)
	Индекс = 0;
	Для Каждого Элемент Из СтруктураГрафическойСхемы.Элементы Цикл	
		//Если Элемент.СтруктураИмени.Идентификатор = ТекущийЭлемент.Имя Тогда
		Если Элемент._СвойстваЭлемента.Имя = ТекущийЭлемент.Имя Тогда
			//ИскомыйИндекс = Элемент.СтруктураИмени.Номер - 1;
			ИскомыйИндекс = Индекс;
			Прервать;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла; 	
	Возврат ИскомыйИндекс;
КонецФункции

//! Функция определяет координаты линии (после добавления нового узла)
// Возвращаемое значение:
//   Структура с полями НачалоЛево, НачалоВерх, КонецЛево, КонецВерх
Функция ОпределитьКоординатыЛинии(ТекущийЭлемент, Координаты, Направление = "Вправо")
	СтруктураКоординат = Новый Структура;
	Если  ТипЗнч(ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда 
		Если Направление = "Вправо" Тогда
			СтруктураКоординат.Вставить("НачалоЛево", ТекущийЭлемент.КонецЛево);
			СтруктураКоординат.Вставить("НачалоВерх", ТекущийЭлемент.КонецВерх);
			СтруктураКоординат.Вставить("КонецЛево", Координаты.Лево);
			СтруктураКоординат.Вставить("КонецВерх", Координаты.Верх + Окр(Координаты.Высота / 2));
			СтруктураКоординат.Вставить("НачалоСторона", 3);
			СтруктураКоординат.Вставить("КонецСторона", 1);
		ИначеЕсли Направление = "Вниз" Тогда	
			СтруктураКоординат.Вставить("НачалоЛево", ТекущийЭлемент.КонецЛево);
			СтруктураКоординат.Вставить("НачалоВерх", ТекущийЭлемент.КонецВерх);
			СтруктураКоординат.Вставить("КонецЛево", Координаты.Лево + Окр(Координаты.Ширина / 2));
			СтруктураКоординат.Вставить("КонецВерх", Координаты.Верх);
			СтруктураКоординат.Вставить("НачалоСторона", 4);
			СтруктураКоординат.Вставить("КонецСторона", 2);
		ИначеЕсли Направление = "Вверх" Тогда
			СтруктураКоординат.Вставить("НачалоЛево", ТекущийЭлемент.КонецЛево);
			СтруктураКоординат.Вставить("НачалоВерх", ТекущийЭлемент.КонецВерх);
			СтруктураКоординат.Вставить("КонецЛево", Координаты.Лево + Окр(Координаты.Ширина / 2));
			СтруктураКоординат.Вставить("КонецВерх", Координаты.Верх + Координаты.Высота);
			СтруктураКоординат.Вставить("НачалоСторона", 2);
			СтруктураКоординат.Вставить("КонецСторона", 4);
		ИначеЕсли Направление = "Влево" Тогда
			СтруктураКоординат.Вставить("НачалоЛево", ТекущийЭлемент.КонецЛево);
			СтруктураКоординат.Вставить("НачалоВерх", ТекущийЭлемент.КонецВерх);
			СтруктураКоординат.Вставить("КонецЛево", Координаты.Лево + Координаты.Ширина);
			СтруктураКоординат.Вставить("КонецВерх", Координаты.Верх + Окр(Координаты.Высота / 2));
			СтруктураКоординат.Вставить("НачалоСторона", 1);
			СтруктураКоординат.Вставить("КонецСторона", 3);
		КонецЕсли;	
	Иначе 
		Если Направление = "Вправо" Тогда
			СтруктураКоординат.Вставить("НачалоЛево", ТекущийЭлемент.Лево + ТекущийЭлемент.Ширина);
			СтруктураКоординат.Вставить("НачалоВерх", ТекущийЭлемент.Верх + Окр(ТекущийЭлемент.Высота / 2));
			СтруктураКоординат.Вставить("КонецЛево", Координаты.Лево);
			СтруктураКоординат.Вставить("КонецВерх", Координаты.Верх + Окр(Координаты.Высота / 2));
			СтруктураКоординат.Вставить("НачалоСторона", 3);
			СтруктураКоординат.Вставить("КонецСторона", 1);
		ИначеЕсли Направление = "Вниз" Тогда	
			СтруктураКоординат.Вставить("НачалоЛево", ТекущийЭлемент.Лево + Окр(ТекущийЭлемент.Ширина / 2));
			СтруктураКоординат.Вставить("НачалоВерх", ТекущийЭлемент.Верх + ТекущийЭлемент.Высота);
			СтруктураКоординат.Вставить("КонецЛево", Координаты.Лево + Окр(Координаты.Ширина / 2));
			СтруктураКоординат.Вставить("КонецВерх", Координаты.Верх);
			СтруктураКоординат.Вставить("НачалоСторона", 4);
			СтруктураКоординат.Вставить("КонецСторона", 2);
		ИначеЕсли Направление = "Вверх" Тогда
			СтруктураКоординат.Вставить("НачалоЛево", ТекущийЭлемент.Лево + Окр(ТекущийЭлемент.Ширина / 2));
			СтруктураКоординат.Вставить("НачалоВерх", ТекущийЭлемент.Верх);
			СтруктураКоординат.Вставить("КонецЛево", Координаты.Лево + Окр(Координаты.Ширина / 2));
			СтруктураКоординат.Вставить("КонецВерх", Координаты.Верх + Координаты.Высота);
			СтруктураКоординат.Вставить("НачалоСторона", 2);
			СтруктураКоординат.Вставить("КонецСторона", 4);
		ИначеЕсли Направление = "Влево" Тогда
			СтруктураКоординат.Вставить("НачалоЛево", ТекущийЭлемент.Лево);
			СтруктураКоординат.Вставить("НачалоВерх", ТекущийЭлемент.Верх + Окр(ТекущийЭлемент.Высота / 2));
			СтруктураКоординат.Вставить("КонецЛево", Координаты.Лево + Координаты.Ширина);
			СтруктураКоординат.Вставить("КонецВерх", Координаты.Верх + Окр(Координаты.Высота / 2));
			СтруктураКоординат.Вставить("НачалоСторона", 1);
			СтруктураКоординат.Вставить("КонецСторона", 3);
		КонецЕсли;	
	КонецЕсли; 
   	
	Возврат СтруктураКоординат;	
КонецФункции 

//!! Функция получает структуру ГС из ГС
//
// Параметры
//  ГрафическаяСхема
//
// Возвращаемое значение:
//   Структура
//
Функция ПолучитьСтруктуруНеПустойГрафическойСхемы(ГрафическаяСхема) Экспорт
	СтруктураСхемы = ПолучитьСтруктуруГрафическойСхемы(ГрафическаяСхема.ГоризонтальныйШагСетки, 
	ГрафическаяСхема.ВертикальныйШагСетки, ГрафическаяСхема.ИспользоватьСетку);
	#Если НЕ Вебклиент Тогда		
		лИмяФайла = ПолучитьИмяВременногоФайла();
	#Иначе
		лИмяФайла = Новый Файл(строка(Секунда(ОбщегоНазначенияКлиент.ДатаСеанса())));
	#КонецЕсли

	лИмяФайла = ПолучитьИмяВременногоФайла();
	ГрафическаяСхема.Записать(лИмяФайла);
	ГрафическаяСхема.Прочитать(лИмяФайла);
	лТекстовыйДокумент = Новый ТекстовыйДокумент();
	лТекстовыйДокумент.Прочитать(лИмяФайла);
	ТекстФайла = лТекстовыйДокумент.ПолучитьТекст();
	УдалитьФайлы(лИмяФайла);
	
	Для Каждого Элемент Из ГрафическаяСхема.ЭлементыГрафическойСхемы Цикл	
		ТипЭлемента = ТипЗнч(Элемент);
		Если ТипЭлемента = Тип("ЭлементГрафическойСхемыСтарт") Тогда		
			СтруктураЭлемента = ДобавитьСтарт(СтруктураСхемы, Элемент.Наименование, Элемент.Лево, 
					Элемент.Верх, Элемент.Ширина, Элемент.Высота, Элемент.Подсказка,,Элемент.Имя);
		ИначеЕсли ТипЭлемента = Тип("ЭлементГрафическойСхемыЗавершение") Тогда		
			СтруктураЭлемента = ДобавитьОкончание(СтруктураСхемы, Элемент.Наименование, Элемент.Лево, 
					Элемент.Верх, Элемент.Ширина, Элемент.Высота, Элемент.Подсказка,,Элемент.Имя);
		ИначеЕсли ТипЭлемента = Тип("ЭлементГрафическойСхемыДекорация") Тогда		
			СтруктураЭлемента = ДобавитьДекорацию(СтруктураСхемы, Элемент.Наименование, Элемент.Лево, 
					Элемент.Верх, Элемент.Ширина, Элемент.Высота, Элемент.Подсказка,,,Элемент.Имя);
		ИначеЕсли ТипЭлемента = Тип("ЭлементГрафическойСхемыДействие") Тогда	
			СтруктураЭлемента = ДобавитьТочкуДействия(СтруктураСхемы, Элемент.Наименование, Элемент.Лево, 
					Элемент.Верх, Элемент.Ширина, Элемент.Высота, Элемент.Подсказка,,,,Элемент.Имя);
					
		ИначеЕсли ТипЭлемента = Тип("ЭлементГрафическойСхемыВыборВарианта") Тогда	
			СтруктураЭлемента = ДобавитьВыборВарианта(СтруктураСхемы, Элемент.Наименование, Элемент.Лево, 
					Элемент.Верх, Элемент.Ширина, Элемент.Высота, Элемент.Подсказка,,Элемент.Имя);		
			НомерВарианта = 1;
			Для Каждого ВариантВыбора Из Элемент.Элементы Цикл	
				ДобавитьВариантВВыборВарианта(СтруктураЭлемента, "Вариант" + Строка(НомерВарианта), 
						ВариантВыбора.Наименование);
				НомерВарианта = НомерВарианта + 1;
			КонецЦикла;	
			
		ИначеЕсли ТипЭлемента = Тип("ЭлементГрафическойСхемыДекоративнаяЛиния")
				ИЛИ ТипЭлемента = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда
			Номер = Найти(ТекстФайла, """" + Элемент.Имя + """");
			СтрокаДляРазбора = Сред(ТекстФайла, Номер);		
			
			СписокТочек = СтрПолучитьСтроку(СтрокаДляРазбора, 15);
			СисИнфо = Новый СистемнаяИнформация;
			Если ВерсияКонфигурацииЧисло(СисИнфо.ВерсияПриложения) > ВерсияКонфигурацииЧисло("8.3.5.9999") Тогда // 8.3.6 новый формат
				СписокТочек = СтрЗаменить(СписокТочек, ",0},6", "},6");   
			КонецЕсли;
			СписокТочек = СтрЗаменить(СписокТочек, ",", Символы.ПС);
			НомерВариантаИзФайла = Неопределено;
			Если Элемент.КонецВариант = Неопределено И 
					ТипЗнч(Элемент.КонецЭлемент) = Тип("ЭлементГрафическойСхемыВыборВарианта") Тогда
				НомерВариантаИзФайла = СтрПолучитьСтроку(СтрокаДляРазбора, 17);
				НомерВариантаИзФайла = СтрЗаменить(НомерВариантаИзФайла, ",", Символы.ПС);
				НомерВариантаИзФайла = Число(СтрПолучитьСтроку(НомерВариантаИзФайла, 9));
			КонецЕсли;
				
			СвойстваЛинии = ПолучитьСвойстваЛинии(Элемент, ГрафическаяСхема, ТипЭлемента, НомерВариантаИзФайла);
			СтруктураЭлемента = ДобавитьЛинию(СтруктураСхемы, Элемент.Наименование, Элемент.Подсказка, 
					СвойстваЛинии.НачалоЭлемент, СвойстваЛинии.КонецЭлемент, СвойстваЛинии.НачалоСторона, 
					СвойстваЛинии.КонецСторона, СвойстваЛинии.СтрелкаНачала, СвойстваЛинии.СтрелкаКонца, 
					СвойстваЛинии.РазмещатьНаименованиеВСерединеЛинии, СвойстваЛинии.Свободная,,
					СвойстваЛинии.Вариант,,Элемент.Имя);
								
			Для Номер = 0 По (СтрЧислоСтрок(СписокТочек) - 13) / 2 Цикл
				ДобавитьТочкуЛинии(СтруктураЭлемента, 
						Число(СтрПолучитьСтроку(СписокТочек, 12 + Номер * 2)), 
						Число(СтрПолучитьСтроку(СписокТочек, 13 + Номер * 2)));		
			КонецЦикла;			
			//ПровестиЛиниюМеждуТочками(СтруктураЭлемента, Элемент.НачалоЛево, Элемент.НачалоВерх, Элемент.КонецЛево,
			//		Элемент.КонецВерх);
		КонецЕсли;	
		
		СтруктураЭлемента.Вставить("_СвойстваЭлемента", Элемент);	
	КонецЦикла;
	
	Возврат СтруктураСхемы;
КонецФункции 

//!! Функция получает свойства линии и заносит их в структуру
//
// Возвращаемое значение:
//   Структура
Функция ПолучитьСвойстваЛинии(Линия, ГрафическаяСхема, ТипЛинии = Неопределено, КонецВариантИзФайла = Неопределено)	
	СтруктураЛинии = Новый Структура;	
	СтруктураЛинии.Вставить("НачалоЭлемент", 
			ПолучитьИндексТекущегоЭлемента(Линия.НачалоЭлемент, ГрафическаяСхема) + 1);
	СтруктураЛинии.Вставить("КонецЭлемент", 
			ПолучитьИндексТекущегоЭлемента(Линия.КонецЭлемент, ГрафическаяСхема) + 1);	
	СтруктураЛинии.Вставить("НачалоСторона", ПолучитьСторонуЧислом(Линия.НачалоСторона));
	СтруктураЛинии.Вставить("КонецСторона", ПолучитьСторонуЧислом(Линия.КонецСторона));
	СтруктураЛинии.Вставить("РазмещатьНаименованиеВСерединеЛинии", 
			Линия.ПоложениеТекста = ПоложениеТекстаСоединительнойЛинии.СерединаЛинии);
			
	Если ТипЛинии = Тип("ЭлементГрафическойСхемыДекоративнаяЛиния") Тогда	
		СтруктураЛинии.Вставить("СтрелкаНачала", ПолучитьТипСтрелкиЧислом(Линия.СтрелкаНачала));
		СтруктураЛинии.Вставить("СтрелкаКонца", ПолучитьТипСтрелкиЧислом(Линия.СтрелкаКонца));
		СтруктураЛинии.Вставить("Свободная", Истина);		
	Иначе //Тип("ЭлементГрафическойСхемыСоединительнаяЛиния");
		СтруктураЛинии.Вставить("СтрелкаНачала", 0);
		СтруктураЛинии.Вставить("СтрелкаКонца", 1);
		СтруктураЛинии.Вставить("Свободная", Ложь);	
	КонецЕсли;	
	СтруктураЛинии.Вставить("Вариант", -1);	
		
	Если ТипЗнч(Линия.НачалоВариант) = Тип("ВариантЭлементаГрафическойСхемыВыборВарианта") Тогда
	    //Элемент вариант
		НомерВар = 0;
		Для Каждого Вар Из Линия.НачалоЭлемент.Элементы Цикл
			#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
			Если Вар.Значение = Линия.НачалоВариант.Значение Тогда
			#Иначе
			//Из-за косяка в 1С, в тонком клиенте не получается значение верхнего сравнения, а на сервере уйти нельзя
			// т.к. при возврате графическую схему перекашивает
			Если Вар.Наименование = Линия.НачалоВариант.Наименование Тогда
			#КонецЕсли		
			//Если Вар.Наименование = Линия.НачалоВариант.Наименование Тогда	
				НачСтрононана = 6 + 2 * НомерВар;
				Если Линия.НачалоСторона = ТипСтороныЭлементаГрафическойСхемы.Право Тогда
					НачСтрононана = НачСтрононана + 1;
				КонецЕсли;
				Прервать;		
			КонецЕсли; 
			НомерВар = НомерВар + 1;
		КонецЦикла; 
		
		СтруктураЛинии.Вставить("НачалоСторона", НачСтрононана);
		//СтруктураЛинии.Вставить("Вариант", НомерВар);
	КонецЕсли;	
			
	Если ТипЗнч(Линия.КонецВариант) = Тип("ВариантЭлементаГрафическойСхемыВыборВарианта") ИЛИ 
			КонецВариантИзФайла <> Неопределено Тогда
	    //Элемент вариант
		Если КонецВариантИзФайла = Неопределено Тогда		
			НомерВар = 0;
			Для Каждого Вар Из Линия.КонецЭлемент.Элементы Цикл
				Если Вар.Значение = Линия.НачалоВариант.Значение Тогда
				//Если Вар.Наименование = Линия.КонецВариант.Наименование Тогда	
					НачСтрононана = 6 + 2 * НомерВар;
					Если Линия.НачалоСторона = ТипСтороныЭлементаГрафическойСхемы.Право Тогда
						НачСтрононана = НачСтрононана + 1;
					КонецЕсли;
					Прервать;		
				КонецЕсли; 
				НомерВар = НомерВар + 1;
			КонецЦикла; 
			СтруктураЛинии.Вставить("КонецСторона", НачСтрононана);
		Иначе
			СтруктураЛинии.Вставить("КонецСторона", КонецВариантИзФайла);
			НомерВар = КонецВариантИзФайла;
			Если НомерВар % 2 = 1 Тогда
			    НомерВар = НомерВар - 1;
			КонецЕсли;
			НомерВар = НомерВар / 2 - 6;
		КонецЕсли;
		//СтруктураЛинии.Вставить("Вариант", НомерВар);
	КонецЕсли;
		
	Возврат СтруктураЛинии;	
КонецФункции

// Функция возвращает тип стрелки в виде числа
//
//
// Возвращаемое значение:
//   Число
//
Функция ПолучитьТипСтрелкиЧислом(ТипСтрелки)

	Если ТипСтрелки = СтильСтрелки.Заполненная Тогда
	
		Возврат 1;
		
	ИначеЕсли ТипСтрелки = СтильСтрелки.Незаполненная Тогда
		
		Возврат 2;
		
	Иначе
		
		Возврат 0;
	
	КонецЕсли;	

КонецФункции // ПолучитьТипСтрелкиЧислом()
 
// Функция возвращает тип стороны в виде числа
//
// Параметры
//  Сторона  - ТипСтороныЭлементаГрафическойСхемы
//
// Возвращаемое значение:
//   Число
//
Функция ПолучитьСторонуЧислом(Сторона)
	Если Сторона = ТипСтороныЭлементаГрафическойСхемы.Лево Тогда	
		Возврат 1;		
	ИначеЕсли Сторона = ТипСтороныЭлементаГрафическойСхемы.Верх Тогда		
		Возврат 2;		
	ИначеЕсли Сторона = ТипСтороныЭлементаГрафическойСхемы.Право Тогда		
		Возврат 3;		
	ИначеЕсли Сторона = ТипСтороныЭлементаГрафическойСхемы.Низ Тогда		
		Возврат 4;		
	Иначе		
		Возврат 0;	
	КонецЕсли;	
КонецФункции // ПолучитьСторонуЧислом()
 
//!! Функция определяет координаты нового узла, куда он будет добавлен
//  Параметры:
//      ТекущийЭлемент - ЭлементГрафическойСхемыДекорация              
//      ГрафическаяСхема - ГрафическаяСхема                
//      Направление - Строка
//  Возвращаемое значение:
//      Структура - с полями "Лево", "Верх", "Высота", "Ширина"
Функция ОпределитьКоординатыНовогоУзла(ТекущийЭлемент, ГрафическаяСхема, Направление = "Вправо", Шаг = 40) Экспорт
	Если ТипЗнч(ТекущийЭлемент) <> Тип("ЭлементГрафическойСхемыДекоративнаяЛиния") Тогда
		Если ТипЗнч(ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда
	        ШиринаНовогоЭлемента = ТекущийЭлемент.КонецЛево - ТекущийЭлемент.НачалоЛево;
			ВысотаНовогоЭлемента = 0;
			ТекущийЭлементЛево = ТекущийЭлемент.КонецЛево;
			ТекущийЭлементВерх = ТекущийЭлемент.КонецВерх;
			ТекущийЭлементШирина =  ТекущийЭлемент.КонецЛево - ТекущийЭлемент.НачалоЛево;
			ТекущийЭлементВысота = 0;	
		Иначе
		    ШиринаНовогоЭлемента = ТекущийЭлемент.Ширина;
			ВысотаНовогоЭлемента = ТекущийЭлемент.Высота;
			ТекущийЭлементЛево = ТекущийЭлемент.Лево;
			ТекущийЭлементВерх = ТекущийЭлемент.Верх;
			ТекущийЭлементШирина =  ТекущийЭлемент.Ширина;
			ТекущийЭлементВысота = ТекущийЭлемент.Высота;	
	    КонецЕсли;
		СтруктураКоординат = Новый Структура("Лево, Верх, Ширина, Высота", ТекущийЭлементЛево, ТекущийЭлементВерх, 
				ТекущийЭлементШирина, ТекущийЭлементВысота);
	Иначе 	
		ТекущийЭлементЛево = ТекущийЭлемент.КонецЛево;
	 	ТекущийЭлементВерх = ТекущийЭлемент.КонецВерх;
				
		Ширина = ТекущийЭлементЛево - ТекущийЭлемент.НачалоЛево;
		Высота = ТекущийЭлементВерх - ТекущийЭлемент.НачалоВерх;	
		Если Ширина < 0 Тогда
			Ширина = - Ширина;
		КонецЕсли; 
		Если Высота < 0 Тогда
				Высота = - Высота;
		КонецЕсли; 			
		ТекущийЭлементШирина = Ширина;
		ТекущийЭлементВысота = Высота;	
		ШиринаНовогоЭлемента = Ширина;
		ВысотаНовогоЭлемента = Высота;
	
		СтруктураКоординат = Новый Структура("Лево, Верх, Ширина, Высота", ТекущийЭлементЛево, ТекущийЭлементВерх, 
				ТекущийЭлементШирина, ТекущийЭлементВысота);
	КонецЕсли; 
	
	
	Если Направление = "Вправо" Тогда
		Если ТочкаВходитВСхему(ТекущийЭлементЛево + ТекущийЭлементШирина + Шаг, ТекущийЭлементВерх) Тогда
			// пробуем нарисовать новый узел рядом с текущим
			Если НЕ СуществуютПересекающиеЭлементы(ГрафическаяСхема, 
					ТекущийЭлементЛево + ТекущийЭлементШирина + Шаг, 
					ТекущийЭлементВерх, 
					ТекущийЭлементЛево + ТекущийЭлементШирина + Шаг + ШиринаНовогоЭлемента, 
					ТекущийЭлементВерх + ТекущийЭлементВысота) Тогда
				Возврат Новый Структура("Лево, Верх, Ширина, Высота", 
						ТекущийЭлементЛево + ТекущийЭлементШирина + Шаг, ТекущийЭлементВерх, ШиринаНовогоЭлемента, 
						ВысотаНовогоЭлемента);
			КонецЕсли;	
		КонецЕсли;
		Сч = 1;
		Пока Истина Цикл			
			// Пробуем опуститься вниз
			Если ТочкаВходитВСхему(ТекущийЭлементЛево + ТекущийЭлементШирина + Шаг, ТекущийЭлементВерх + Шаг * Сч) 
					Тогда
				Если НЕ СуществуютПересекающиеЭлементы(ГрафическаяСхема, 
						ТекущийЭлементЛево + ТекущийЭлементШирина + Шаг, 
						ТекущийЭлементВерх + Шаг * Сч, 
						ТекущийЭлементЛево + ТекущийЭлементШирина + Шаг + ШиринаНовогоЭлемента, 
						ТекущийЭлементВерх + ТекущийЭлементВысота + Шаг * Сч) Тогда	
					Возврат Новый Структура("Лево, Верх, Ширина, Высота", 
							ТекущийЭлементЛево + ТекущийЭлементШирина + Шаг, ТекущийЭлементВерх + Шаг * Сч, 
							ШиринаНовогоЭлемента, ВысотаНовогоЭлемента);
				КонецЕсли;
			КонецЕсли;		
			// Пробуем подняться вверх
			Если ТочкаВходитВСхему(ТекущийЭлементЛево + ТекущийЭлементШирина + Шаг, ТекущийЭлементВерх - Шаг * Сч) 
					Тогда	
				Если НЕ СуществуютПересекающиеЭлементы(ГрафическаяСхема, 
						ТекущийЭлементЛево + ТекущийЭлементШирина + Шаг, 
						ТекущийЭлементВерх - Шаг * Сч, 
						ТекущийЭлементЛево + ТекущийЭлементШирина + Шаг + ШиринаНовогоЭлемента, 
						ТекущийЭлементВерх + ТекущийЭлементВысота - Шаг * Сч) Тогда			
					Возврат Новый Структура("Лево, Верх, Ширина, Высота", 
							ТекущийЭлементЛево + ТекущийЭлементШирина + Шаг, ТекущийЭлементВерх - Шаг * Сч, 
							ШиринаНовогоЭлемента, ВысотаНовогоЭлемента);	
				КонецЕсли;		
			КонецЕсли;	
			Сч = Сч + 1;	
		КонецЦикла;
	ИначеЕсли Направление = "Вниз" Тогда	
		// пробуем разместить новый элемент непосредственно под текущим
		Если ТочкаВходитВСхему(ТекущийЭлементЛево, ТекущийЭлементВерх + ТекущийЭлементВысота + Шаг) Тогда
			Если НЕ СуществуютПересекающиеЭлементы(ГрафическаяСхема, 
					ТекущийЭлементЛево, 
					ТекущийЭлементВерх + ТекущийЭлементВысота + Шаг, 
					ТекущийЭлементЛево + ТекущийЭлементШирина, 
					ТекущийЭлементВерх + ТекущийЭлементВысота + Шаг + ВысотаНовогоЭлемента) Тогда
				Возврат Новый Структура("Лево, Верх, Ширина, Высота", ТекущийЭлементЛево, 
						ТекущийЭлементВерх + ТекущийЭлементВысота + Шаг, ШиринаНовогоЭлемента, ВысотаНовогоЭлемента);
			КонецЕсли;	
		КонецЕсли;	
		Сч = 1;
		Пока Истина Цикл			
			// пробуем сдвинуться вправо
			Если ТочкаВходитВСхему(ТекущийЭлементЛево + Сч * Шаг, ТекущийЭлементВерх + ТекущийЭлементВысота + Шаг) 
					Тогда	
				Если Не СуществуютПересекающиеЭлементы(ГрафическаяСхема,
						ТекущийЭлементЛево + Сч * Шаг,
						ТекущийЭлементВерх + ТекущийЭлементВысота + Шаг,
						ТекущийЭлементЛево + Сч * Шаг + ШиринаНовогоЭлемента,
						ТекущийЭлементВерх + ТекущийЭлементВысота + Шаг + ВысотаНовогоЭлемента) Тогда		
					Возврат Новый Структура("Лево, Верх, Ширина, Высота", ТекущийЭлементЛево + Сч * Шаг, 
							ТекущийЭлементВерх + ТекущийЭлементВысота + Шаг, ШиринаНовогоЭлемента, 
							ВысотаНовогоЭлемента);	
				КонецЕсли;	
			КонецЕсли;		
			// пробуем сдвинуться влево
			Если ТочкаВходитВСхему(ТекущийЭлементЛево - Сч * Шаг, ТекущийЭлементВерх + ТекущийЭлементВысота + Шаг) 
					Тогда
				Если Не СуществуютПересекающиеЭлементы(ГрафическаяСхема,
						ТекущийЭлементЛево - Сч * Шаг,
						ТекущийЭлементВерх + ТекущийЭлементВысота + Шаг,
						ТекущийЭлементЛево - Сч * Шаг + ШиринаНовогоЭлемента,
						ТекущийЭлементВерх + ТекущийЭлементВысота + Шаг + ВысотаНовогоЭлемента) Тогда		
					Возврат Новый Структура("Лево, Верх, Ширина, Высота", ТекущийЭлементЛево - Сч * Шаг, 
							ТекущийЭлементВерх + ТекущийЭлементВысота + Шаг, ШиринаНовогоЭлемента, 
							ВысотаНовогоЭлемента);	
				КонецЕсли;		
			КонецЕсли;
			Сч = Сч + 1;
		КонецЦикла;	
	ИначеЕсли Направление = "Вверх" Тогда
		Если ТочкаВходитВСхему(ТекущийЭлементЛево, ТекущийЭлементВерх - ВысотаНовогоЭлемента - Шаг) Тогда		
			// пробуем разместить новый элемент непосредственно над текущим
			Если НЕ СуществуютПересекающиеЭлементы(ГрафическаяСхема, 
					ТекущийЭлементЛево, 
					ТекущийЭлементВерх - ВысотаНовогоЭлемента - Шаг, 
					ТекущийЭлементЛево + ШиринаНовогоЭлемента, 
					ТекущийЭлементВерх - Шаг) Тогда	
				Возврат Новый Структура("Лево, Верх, Ширина, Высота", ТекущийЭлементЛево, 
						ТекущийЭлементВерх - ВысотаНовогоЭлемента - Шаг, ШиринаНовогоЭлемента, ВысотаНовогоЭлемента);	
			КонецЕсли;
		КонецЕсли;
		Сч = 1;
		Пока Истина Цикл		
			// Пробуем сдвинуться вправо
			Если ТочкаВходитВСхему(ТекущийЭлементЛево + Сч * Шаг, ТекущийЭлементВерх - ВысотаНовогоЭлемента - Шаг) 
					Тогда			
				Если Не СуществуютПересекающиеЭлементы(ГрафическаяСхема,
						ТекущийЭлементЛево + Сч * Шаг,
						ТекущийЭлементВерх - ВысотаНовогоЭлемента - Шаг,
						ТекущийЭлементЛево + Сч * Шаг + ШиринаНовогоЭлемента,
						ТекущийЭлементВерх - Шаг) Тогда
					Возврат Новый Структура("Лево, Верх, Ширина, Высота", ТекущийЭлементЛево + Сч * Шаг, 
							ТекущийЭлементВерх - ВысотаНовогоЭлемента - Шаг, ШиринаНовогоЭлемента, 
							ВысотаНовогоЭлемента);	
				КонецЕсли;					
			КонецЕсли;	
			// Пробуем сдвинуться слево
			Если ТочкаВходитВСхему(ТекущийЭлементЛево - Сч * Шаг, ТекущийЭлементВерх - ВысотаНовогоЭлемента - Шаг) 
					Тогда	
				Если Не СуществуютПересекающиеЭлементы(ГрафическаяСхема,
						ТекущийЭлементЛево - Сч * Шаг,
						ТекущийЭлементВерх - ВысотаНовогоЭлемента - Шаг,
						ТекущийЭлементЛево - Сч * Шаг + ШиринаНовогоЭлемента,
						ТекущийЭлементВерх - Шаг) Тогда
					Возврат Новый Структура("Лево, Верх, Ширина, Высота", ТекущийЭлементЛево - Сч * Шаг, 
							ТекущийЭлементВерх - ВысотаНовогоЭлемента - Шаг, ШиринаНовогоЭлемента, 
							ВысотаНовогоЭлемента);
				КонецЕсли;			
			КонецЕсли;
			Сч = Сч + 1;	
		КонецЦикла;
	ИначеЕсли Направление = "Влево" Тогда
		// пробуем разместить новый элемент непосредственно слево от текущего
		Если ТочкаВходитВСхему(ТекущийЭлементЛево - ШиринаНовогоЭлемента - Шаг, ТекущийЭлементВерх) Тогда
			Если НЕ СуществуютПересекающиеЭлементы(ГрафическаяСхема, 
					ТекущийЭлементЛево - ШиринаНовогоЭлемента - Шаг, 
					ТекущийЭлементВерх , 
					ТекущийЭлементЛево - Шаг, 
					ТекущийЭлементВерх + ВысотаНовогоЭлемента) Тогда
				Возврат Новый Структура("Лево, Верх, Ширина, Высота", 
						ТекущийЭлементЛево - ШиринаНовогоЭлемента - Шаг, ТекущийЭлементВерх, ШиринаНовогоЭлемента, 
						ВысотаНовогоЭлемента);	
			КонецЕсли;		
		КонецЕсли;	
		Сч = 1;
		Пока Истина Цикл
			// пробуем сдвинуться вниз
			Если ТочкаВходитВСхему(ТекущийЭлементЛево - ШиринаНовогоЭлемента - Шаг, ТекущийЭлементВерх + Сч * Шаг) 
					Тогда	
				Если Не СуществуютПересекающиеЭлементы(ГрафическаяСхема,
						ТекущийЭлементЛево - ШиринаНовогоЭлемента - Шаг,
						ТекущийЭлементВерх + Сч * Шаг,
						ТекущийЭлементЛево - Шаг,
						ТекущийЭлементВерх + Сч * Шаг + ВысотаНовогоЭлемента) Тогда
					Возврат Новый Структура("Лево, Верх, Ширина, Высота", 
							ТекущийЭлементЛево - ШиринаНовогоЭлемента - Шаг, ТекущийЭлементВерх + Сч * Шаг, 
							ШиринаНовогоЭлемента, ВысотаНовогоЭлемента);
				КонецЕсли;		
			КонецЕсли;	
			// пробуем сдвинуться вверх
			Если ТочкаВходитВСхему(ТекущийЭлементЛево - ШиринаНовогоЭлемента - Шаг, ТекущийЭлементВерх - Сч * Шаг) 
					Тогда			
				Если Не СуществуютПересекающиеЭлементы(ГрафическаяСхема,
						ТекущийЭлементЛево - ШиринаНовогоЭлемента - Шаг,
						ТекущийЭлементВерх - Сч * Шаг,
						ТекущийЭлементЛево - Шаг,
						ТекущийЭлементВерх - Сч * Шаг + ВысотаНовогоЭлемента) Тогда
					Возврат Новый Структура("Лево, Верх, Ширина, Высота", 
							ТекущийЭлементЛево - ШиринаНовогоЭлемента - Шаг, ТекущийЭлементВерх - Сч * Шаг, 
							ШиринаНовогоЭлемента, ВысотаНовогоЭлемента);
				КонецЕсли;	
			КонецЕсли;
			Сч = Сч + 1;
		КонецЦикла; 
	КонецЕсли;
	
	Возврат СтруктураКоординат;
КонецФункции

//! Функция проверяет вхождение координат элемента в графическую схему
// Параметры
//   Лево - Число
//	 Верх - Число
// Возвращаемое значение:
//   Булево
Функция ТочкаВходитВСхему(Лево, Верх)
	Возврат ((Лево >= 0) И (Верх >= 0));	
КонецФункции

//! Функция проверяет наличие элементов схемы, которые пересекают указанную область
//
// Возвращаемое значение:
//   Булево
//
Функция СуществуютПересекающиеЭлементы(ГрафическаяСхема, Лево, Верх, Право, Низ)
	Для Каждого Элемент Из ГрафическаяСхема.ЭлементыГрафическойСхемы Цикл
		ТипЭлемента = ТипЗнч(Элемент);
		Если ТипЭлемента = Тип("ЭлементГрафическойСхемыДекорация")
				ИЛИ ТипЭлемента = Тип("ЭлементГрафическойСхемыДействие")
				ИЛИ ТипЭлемента = Тип("ЭлементГрафическойСхемыВыборВарианта") 
				ИЛИ ТипЭлемента = Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс") 
				ИЛИ ТипЭлемента = Тип("ЭлементГрафическойСхемыЗавершение") 
				ИЛИ ТипЭлемента = Тип("ЭлементГрафическойСхемыОбработка") 
				ИЛИ ТипЭлемента = Тип("ЭлементГрафическойСхемыРазделение") 
				ИЛИ ТипЭлемента = Тип("ЭлементГрафическойСхемыСлияние") 
				ИЛИ ТипЭлемента = Тип("ЭлементГрафическойСхемыСтарт") 
				ИЛИ ТипЭлемента = Тип("ЭлементГрафическойСхемыУсловие")  Тогда
			Если ЭлементыПересекаются(Элемент.Лево, Элемент.Верх, Элемент.Лево + Элемент.Ширина, 
					Элемент.Верх + Элемент.Высота, Лево, Верх, Право, Низ) Тогда
				Возврат Истина;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции
 
//! Функция проверяет пересечение элементов
//
// Возвращаемое значение:
//   Булево
//
Функция ЭлементыПересекаются(Лево1, Верх1, Право1, Низ1, Лево2, Верх2, Право2, Низ2)
	Возврат (
			( 	(Лево2 >= Лево1)	И	(Лево2 <= Право1)	И	(Верх2 >= Верх1)	И	(Верх2 <= Низ1)	) ИЛИ
			(	(Право2 >= Лево1)	И	(Право2 <= Право1)	И	(Верх2 >= Верх1)	И	(Верх2 <= Низ1)	) ИЛИ
			(	(Лево2 >= Лево1)	И	(Лево2 <= Право1)	И	(Низ2 >= Верх1)		И	(Низ2 <= Низ1)	) ИЛИ
			(	(Право2 >= Лево1)	И	(Право2 <= Право1)	И	(Низ2 >= Верх1)		И	(Низ2 <= Низ1)	) 
			);
КонецФункции
  
Процедура ЗаполнитьСвойстваЭлементовСхемы(СтруктураСхемы, ГрафическаяСхема, КоличествоЭлементов)

	Сч = 0;
	Пока Сч < КоличествоЭлементов Цикл
	
		СтарыйЭлемент = СтруктураСхемы.Элементы[Сч]._СвойстваЭлемента;
		НовыйЭлемент  = ГрафическаяСхема.ЭлементыГрафическойСхемы[Сч];
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтарыйЭлемент);
		Сч = Сч + 1;
	
	КонецЦикла;

КонецПроцедуры

///////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СТРУКТУРОЙ ГРАФИЧЕСКОЙ СХЕМЫ

//! Создает структуру с настройками графической схемы
Функция ПолучитьСтруктуруГрафическойСхемы(пШагСеткиПоГоризонтали = 20, пШагСеткиПоВертикали = 20,
		пВыравниватьПоСетке = Ложь, пТипСетки = 3) Экспорт			
	лСтруктура = Новый Структура("ШагСеткиПоГоризонтали, ШагСеткиПоВертикали, ВыравниватьПоСетке, ТипСетки", 
			пШагСеткиПоГоризонтали, пШагСеткиПоВертикали, пВыравниватьПоСетке, пТипСетки); 
	лСтруктура.Вставить("Элементы", Новый Массив);
	лСтруктура.Вставить("ТипЦветаФона", 3);
	лСтруктура.Вставить("ЦветФона", -10);
	лСтруктура.Вставить("НомерПоследнегоЭлемента", 0);	
	Возврат лСтруктура;
КонецФункции

//! Возвращает структуру с настройками Линии (толщина, тип, стиль)
Функция мПолучитьСтруктуруЛинии(пТипЛинии = 1, пТолщинаЛинии = 1)
	Возврат Новый Структура("ТипЛинии, ТолщинаЛинии", пТипЛинии, пТолщинаЛинии); 
КонецФункции

//! Возвращает структуру настроек для наименования элемента ГС 
Функция мПолучитьСтруктуруИмени(пСтруктураГрафическойСхемы, пИд = Неопределено, пНаименование = "", 
		пИмя = Неопределено)
	Если пИмя = Неопределено Тогда	
		пСтруктураГрафическойСхемы.НомерПоследнегоЭлемента = пСтруктураГрафическойСхемы.НомерПоследнегоЭлемента + 1;
		НомерПоследнего = пСтруктураГрафическойСхемы.НомерПоследнегоЭлемента;
		БезопасноеНаименование = БезопаснаяСтрока(пНаименование);
		Возврат Новый Структура("Идентификатор, Наименование, Номер", БезопасноеНаименование + "--" + 
				Формат(НомерПоследнего, "ЧН=0; ЧГ=0"), БезопасноеНаименование, НомерПоследнего);
	ИначеЕсли Прав(пИмя, 1) = "-" Тогда
		пСтруктураГрафическойСхемы.НомерПоследнегоЭлемента = пСтруктураГрафическойСхемы.НомерПоследнегоЭлемента + 1;
		НомерПоследнего = пСтруктураГрафическойСхемы.НомерПоследнегоЭлемента;
		БезопасноеИмя = БезопаснаяСтрока(пИмя);
		БезопасноеНаименование = БезопаснаяСтрока(пНаименование);
		Возврат Новый Структура("Идентификатор, Наименование, Номер", БезопасноеИмя + 
				Формат(НомерПоследнего, "ЧН=0; ЧГ=0"), БезопасноеНаименование, НомерПоследнего);
	Иначе
		СписокСтрок = СтрЗаменить(пИмя, "-", Символы.ПС);		
		НомерПоследнего = Число( СтрПолучитьСтроку(СписокСтрок, СтрЧислоСтрок(СписокСтрок)) );		
		Если НомерПоследнего > пСтруктураГрафическойСхемы.НомерПоследнегоЭлемента Тогда
			пСтруктураГрафическойСхемы.НомерПоследнегоЭлемента = НомерПоследнего;
		КонецЕсли;	
		БезопасноеИмя = БезопаснаяСтрока(пИмя);
		БезопасноеНаименование = БезопаснаяСтрока(пНаименование);
		Возврат Новый Структура("Идентификатор, Наименование, Номер", БезопасноеИмя, БезопасноеНаименование, 
				НомерПоследнего);		
	КонецЕсли;	
КонецФункции

//! Возвращает структуру настроек для отрисовки элемента ГС (цвет фона, цвет рамки, цвет текста и т.д.)
Функция мПолучитьСтруктуруОтрисовки(пПодсказка="", пГоризонтальноеПоложение=1, пВертикальноеПоложение=1,
		пТипЦветаФона=4, пЦветФона=Неопределено, пТипЦветаРамки=3, пЦветРамки=Неопределено, пТипЦветаТекста=3, 
		пЦветТекста=Неопределено, пПоложениеКартинки=1, пГиперссылка=0, пПрозрачныйФон=0, пНомерПорядкаОтрисовки=0)	
	лСтруктура = Новый Структура;
	лСтруктура.Вставить("ТипЦветаФона", пТипЦветаФона);
	лСтруктура.Вставить("ЦветФона", пЦветФона);
	лСтруктура.Вставить("ТипЦветаРамки", пТипЦветаРамки);
	лСтруктура.Вставить("ЦветРамки", пЦветРамки);
	лСтруктура.Вставить("ТипЦветаТекста", пТипЦветаТекста);
	лСтруктура.Вставить("ЦветТекста", пЦветТекста);
	лСтруктура.Вставить("Подсказка", пПодсказка);
	лСтруктура.Вставить("ГоризонтальноеПоложение", пГоризонтальноеПоложение);
	лСтруктура.Вставить("ВертикальноеПоложение", пВертикальноеПоложение);
	лСтруктура.Вставить("ПоложениеКартинки", пПоложениеКартинки);
	лСтруктура.Вставить("НомерПорядкаОтрисовки", пНомерПорядкаОтрисовки);
	лСтруктура.Вставить("Гиперссылка", пГиперссылка);
	лСтруктура.Вставить("ПрозрачныйФон", пПрозрачныйФон);	
	Возврат лСтруктура; 
КонецФункции 

//! Добавляет в структуру ГС элемент "Линия"
Функция ДобавитьЛинию(пСтруктураГрафическойСхемы, пНаименование = "", пПодсказка = "", пОткудаИдет = -1, пКудаИдет = -1,
		пОткудаВыходитЛиния = 4, пКудаВходитЛиния = 2, пТипСтрелкиНачала = 0, пТипСтрелкиКонца = 1, 
		пРазмещатьНаименованиеВСерединеЛинии = Ложь, пСвободнаяЛиния = Истина, пИдентификатор = Неопределено, 
		пНачалоВарианта = -1, ВремяЗадержки = 0, пИмя = Неопределено) Экспорт
		
	лСтруктура = Новый Структура("ТипЭлемента, ОткудаИдет, КудаИдет, ОткудаВыходитЛиния, КудаВходитЛиния, 
			| ТипСтрелкиНачала, ТипСтрелкиКонца, СвободнаяЛиния, НачалоВарианта", 1, пОткудаИдет, пКудаИдет, 
			пОткудаВыходитЛиния, пКудаВходитЛиния, пТипСтрелкиНачала, пТипСтрелкиКонца, пСвободнаяЛиния,
			пНачалоВарианта);
	лСтруктура.Вставить("Точки", Новый Массив);
	лСтруктура.Вставить("РазмещатьНаименованиеВСерединеЛинии", пРазмещатьНаименованиеВСерединеЛинии);
	лСтруктура.Вставить("СтруктураЛинии", мПолучитьСтруктуруЛинии());
	
	СтруктИмени = мПолучитьСтруктуруИмени(пСтруктураГрафическойСхемы, пИдентификатор, пНаименование, пИмя);
	Если пИмя = Неопределено Тогда
		СтруктИмени.Вставить("Идентификатор", "Линия" + СтруктИмени.Идентификатор);
	КонецЕсли;
	Если ВремяЗадержки <> 0 Тогда
		СтруктИмени.Вставить("Наименование", ВремяЗадержки);
	КонецЕсли;
	
	лСтруктура.Вставить("СтруктураИмени", СтруктИмени);
	лСтруктура.Вставить("СтруктураОтрисовки", мПолучитьСтруктуруОтрисовки(пПодсказка));
	пСтруктураГрафическойСхемы.Элементы.Добавить(лСтруктура);
	Возврат лСтруктура;
КонецФункции 

Процедура ДобавитьТочкуЛинии(пЛиния, пЛево, пВерх) Экспорт
	пЛиния.Точки.Добавить(Новый Структура("Лево, Верх", пЛево, пВерх));
КонецПроцедуры

//! Добавляет в структуру с настройками ГС элемент указанного типа
Функция мДобавитьСтандартныйЭлемент(пСтруктураГрафическойСхемы, пТипЭлемента, пНаименование = "", пЛево = 100,
		пВерх = 20, пШирина = 250, пВысота = 150, пПодсказка = "", пИдентификатор = Неопределено, пИмя = Неопределено)
	//пТипЭлемента: 2 - "Старт", 5 - "ТочкаДействия"
	лСтруктура = Новый Структура("Лево, Верх, Ширина, Высота", пЛево, пВерх, пШирина, пВысота);
	лСтруктура.Вставить("ТипЭлемента", пТипЭлемента);
	лСтруктура.Вставить("УИД", ""+(Новый УникальныйИдентификатор));
	лСтруктура.Вставить("СтруктураЛинии", мПолучитьСтруктуруЛинии());
	лСтруктура.Вставить("СтруктураИмени", мПолучитьСтруктуруИмени(пСтруктураГрафическойСхемы, пИдентификатор, 
			пНаименование, пИмя));
	лСтруктура.Вставить("СтруктураОтрисовки", мПолучитьСтруктуруОтрисовки(пПодсказка));
	пСтруктураГрафическойСхемы.Элементы.Добавить(лСтруктура);
	Возврат лСтруктура;
КонецФункции 

//!!
Функция ДобавитьОкончание(пСтруктураГрафическойСхемы, пНаименование = "", пЛево = 100, пВерх = 100, пШирина = 50,
		пВысота = 50, пПодсказка = "", пИдентификатор = Неопределено, пИмя = Неопределено) Экспорт
	Возврат мДобавитьСтандартныйЭлемент(пСтруктураГрафическойСхемы, 3, пНаименование, пЛево, пВерх, пШирина, 
			пВысота, пПодсказка, пИдентификатор, пИмя);
КонецФункции 

//! Добавляет в структуру с настройками ГС элемент "Старт"
Функция ДобавитьСтарт(пСтруктураГрафическойСхемы, пНаименование="", пЛево=100, пВерх=20, пШирина=80,
		пВысота=50, пПодсказка="", пИдентификатор=Неопределено, пИмя=Неопределено) Экспорт	
	Возврат мДобавитьСтандартныйЭлемент(пСтруктураГрафическойСхемы, 2, пНаименование, пЛево, пВерх, пШирина, 
			пВысота, пПодсказка, пИдентификатор, пИмя);
КонецФункции

//! Добавляет в структуру с настройками ГС элемент "ТочкаДействия"
Функция ДобавитьТочкуДействия(пСтруктураГрафическойСхемы, пНаименование="", пЛево=100, пВерх=100, пШирина=50,
		пВысота=50, пПодсказка="", пПояснениеДействия="", пГрупповая=Ложь, пИдентификатор=Неопределено, 
		пИмя=Неопределено) Экспорт	
	лСтруктура = мДобавитьСтандартныйЭлемент(пСтруктураГрафическойСхемы, 5, пНаименование, пЛево, пВерх, пШирина, 
			пВысота, пПодсказка, пИдентификатор, пИмя);
	лСтруктура.Вставить("ПояснениеДействия", пПояснениеДействия);
	лСтруктура.Вставить("Групповая", пГрупповая);	
	Возврат лСтруктура;
КонецФункции

//!!
Функция ДобавитьВыборВарианта(пСтруктураГрафическойСхемы, пНаименование="", пЛево=100, пВерх=100, пШирина=50,
		пВысота=50, пПодсказка="", пИдентификатор=Неопределено, пИмя=Неопределено) Экспорт	
	лСтруктура = мДобавитьСтандартныйЭлемент(пСтруктураГрафическойСхемы, 6, пНаименование, пЛево, пВерх, пШирина, 
			пВысота, пПодсказка, пИдентификатор, пИмя);
	лСтруктура.Вставить("Варианты", Новый Массив);	
	Возврат лСтруктура;
КонецФункции

//!! Функция добавляет декорацию в структуру графической схемы
//
// Возвращаемое значение:
//   Структура - структура добавленного элемента
//
Функция ДобавитьДекорацию(СтруктураСхемы, Наименование = "", Лево = 100, Верх = 100, Ширина = 150, Высота = 50,
		Подсказка = "", Идентификатор = Неопределено, Фигура = 11, пИмя = Неопределено)  
	СтруктураДекорации = мДобавитьСтандартныйЭлемент(СтруктураСхемы, 0, Наименование, Лево, Верх, Ширина, Высота, 
			Подсказка, Идентификатор, пИмя);
	СтруктураДекорации.Вставить("Фигура", Фигура);
	Возврат СтруктураДекорации;	
КонецФункции // ДобавитьДекорацию()

//!!
Функция ДобавитьВариантВВыборВарианта(пСтруктураВыборВарианта, пИмяВарианта, пНаименованиеВарианта,
		пЦветВарианта=0) Экспорт	
	лВариант = Новый Структура("Имя, Наименование, Цвет", пИмяВарианта, пНаименованиеВарианта, пЦветВарианта);
	пСтруктураВыборВарианта.Варианты.Добавить(лВариант);	
	Возврат лВариант;
КонецФункции

Функция ПолучитьВариантПоИмени(пОбъектСхемы, пИмяВарианта) Экспорт
	Для Каждого лВариант Из пОбъектСхемы.Варианты Цикл
		Если лВариант.Имя=пИмяВарианта Тогда Возврат лВариант; КонецЕсли; 
	КонецЦикла;
	Возврат Неопределено; 
КонецФункции

Функция ПолучитьНомерВариантаПоИмени(пОбъектСхемы, пИмяВарианта) Экспорт
	лВариант=ПолучитьВариантПоИмени(пОбъектСхемы, пИмяВарианта);
	Если лВариант=Неопределено Тогда Возврат Неопределено; КонецЕсли;
	Возврат пОбъектСхемы.Варианты.Найти(лВариант)+1;
КонецФункции

Функция ПолучитьТочкуТочкиДействия(пТочкаДействия, пТипТочки, пИмяВарианта=Неопределено) Экспорт
	Если Не пИмяВарианта = Неопределено Тогда 
		лНомерВарианта=ПолучитьНомерВариантаПоИмени(пТочкаДействия, пИмяВарианта);
		Если лНомерВарианта=Неопределено Тогда Сообщить("Не найден вариант: "+пИмяВарианта); Возврат Неопределено; КонецЕсли;
		лКоличествоВариантов=пТочкаДействия.Варианты.Количество();
		лДельта=20*(0.5+лКоличествоВариантов-лНомерВарианта);
	КонецЕсли;
	Если НРег(пТипТочки)="верх" Тогда 
		Возврат Новый Структура("Лево, Верх", пТочкаДействия.Лево+Окр(пТочкаДействия.Ширина/2), пТочкаДействия.Верх);
	КонецЕсли;
	Если НРег(пТипТочки)="низ" Тогда 
		Возврат Новый Структура("Лево, Верх", пТочкаДействия.Лево+Окр(пТочкаДействия.Ширина/2), пТочкаДействия.Верх+пТочкаДействия.Высота);
	КонецЕсли;
	Если НРег(пТипТочки)="лево" Тогда
		Возврат Новый Структура("Лево, Верх", пТочкаДействия.Лево, пТочкаДействия.Верх+пТочкаДействия.Высота-?(пИмяВарианта=Неопределено, Окр(пТочкаДействия.Высота/2), лДельта));
	КонецЕсли;
	Если НРег(пТипТочки)="право" Тогда 
		Возврат Новый Структура("Лево, Верх", пТочкаДействия.Лево+пТочкаДействия.Ширина, пТочкаДействия.Верх+пТочкаДействия.Высота-?(пИмяВарианта=Неопределено, Окр(пТочкаДействия.Высота/2), лДельта));
	КонецЕсли;
	Возврат Неопределено; 
КонецФункции

Функция мЧисло(пЗначение)
	Если пЗначение=Неопределено Тогда Возврат "0"; КонецЕсли;
	Если ТипЗнч(пЗначение)=Тип("Булево") Тогда Возврат ?(пЗначение, "1", "0"); КонецЕсли; 
	Возврат Формат(пЗначение, "ЧН=0; ЧГ=0"); 
КонецФункции

Функция мСтрока(пСтрока)
	Возврат СтрЗаменить(пСтрока, """", """""");
КонецФункции 

Функция мПолучитьТекстШапки(пСтруктураГрафическойСхемы)
	Возврат "{5,{{1,{3,"+мЧисло(пСтруктураГрафическойСхемы.ТипЦветаФона)
	+",{"+?(пСтруктураГрафическойСхемы.ЦветФона=Неопределено, "-10", мЧисло(пСтруктураГрафическойСхемы.ЦветФона))
	+"}},"+мЧисло(пСтруктураГрафическойСхемы.ВыравниватьПоСетке)
	+","+мЧисло(пСтруктураГрафическойСхемы.ШагСеткиПоГоризонтали)+","+мЧисло(пСтруктураГрафическойСхемы.ШагСеткиПоВертикали)+","+мЧисло(пСтруктураГрафическойСхемы.ТипСетки)+
	",6,6,{""N"",10},7,{""N"",10},8,{""N"",10},9,{""N"",10},13,{""N"",0},16,{""N"",0}}},"+Символы.ПС;
КонецФункции

Функция мПолучитьТекстБлокаИмени(пСтруктураИмени)
	Возврат "{4,"+СтрЗаменить(Строка(пСтруктураИмени.Номер),Символы.НПП,"")+",{1,"
	+?(ПустаяСтрока(пСтруктураИмени.Наименование), "0", "1,{""#"","""+пСтруктураИмени.Наименование+"""}")+"},"
	+""""+пСтруктураИмени.Идентификатор+""","+СтрЗаменить(Строка(пСтруктураИмени.Номер),Символы.НПП,"")+"}";
КонецФункции

Функция мПолучитьТекстБлокаОтрисовки(пСтруктураОтрисовки)
	Возврат "{4,{3,"+мЧисло(пСтруктураОтрисовки.ТипЦветаФона)+",{"+мЧисло(пСтруктураОтрисовки.ЦветФона)+"}},"
	+"{3,"+мЧисло(пСтруктураОтрисовки.ТипЦветаРамки)+",{"+?(пСтруктураОтрисовки.ЦветРамки=Неопределено, "-22", мЧисло(пСтруктураОтрисовки.ЦветРамки))+"}},"
	+"{3,"+мЧисло(пСтруктураОтрисовки.ТипЦветаТекста)+",{"+?(пСтруктураОтрисовки.ЦветТекста=Неопределено, "-3", мЧисло(пСтруктураОтрисовки.ЦветТекста))+"}},"
	+"{6,3,0,1},"
	+"{1,"+?(ПустаяСтрока(пСтруктураОтрисовки.Подсказка), "0", "1,{""#"","""+мСтрока(пСтруктураОтрисовки.Подсказка)+"""}")+"},"
	+мЧисло(пСтруктураОтрисовки.ГоризонтальноеПоложение)+","+мЧисло(пСтруктураОтрисовки.ВертикальноеПоложение)+","
	+мЧисло(пСтруктураОтрисовки.ПоложениеКартинки)+","+мЧисло(пСтруктураОтрисовки.НомерПорядкаОтрисовки)+","
	+мЧисло(пСтруктураОтрисовки.Гиперссылка)+","+мЧисло(пСтруктураОтрисовки.ПрозрачныйФон)+",0}"; 
КонецФункции 

Функция мПолучитьТекстБлокаЛинии(пСтруктураЛинии)
	Возврат "{4,0,{0},"+мЧисло(пСтруктураЛинии.ТипЛинии)+","+мЧисло(пСтруктураЛинии.ТолщинаЛинии)+",0,e45c0cd8-a878-4bcb-8e1a-af934481e1cc,0}";
КонецФункции

Функция мПолучитьТекстБлокаКартинки()
	Возврат "4,{3,0,{0},"""",-1,-1,1,0}";
КонецФункции

Функция мДобавитьТочку(пЛево, пВерх)
	Возврат мЧисло(пЛево)+","+мЧисло(пВерх)+","; 
КонецФункции 

Функция мПолучитьТекстТочек(пТочки)
	лТекст="";
	Для Каждого лТочка Из пТочки Цикл лТекст=лТекст+мДобавитьТочку(лТочка.Лево, лТочка.Верх); КонецЦикла;
	Возврат лТекст;
КонецФункции

Функция мПолучитьТекстЛинии(пЭлемент)
	
	// ИА закомментирован исходный текст
	//Возврат "{"+мПолучитьТекстБлокаИмени(пЭлемент.СтруктураИмени)+",3,"+мЧисло(пЭлемент.ОткудаИдет)+",0,"
	//+мЧисло(пЭлемент.КудаИдет)+","+мЧисло(пЭлемент.СвободнаяЛиния)
	//+",{{"+мПолучитьТекстБлокаОтрисовки(пЭлемент.СтруктураОтрисовки)+",6,"
	//+мЧисло(пЭлемент.Точки.Количество())+","+мПолучитьТекстТочек(пЭлемент.Точки)
	//+мПолучитьТекстБлокаЛинии(пЭлемент.СтруктураЛинии)+","+мЧисло(пЭлемент.РазмещатьНаименованиеВСерединеЛинии)+","
	//+мЧисло(пЭлемент.ОткудаВыходитЛиния)+","+мЧисло(пЭлемент.КудаВходитЛиния)+",0,"
	//+мЧисло(пЭлемент.ТипСтрелкиНачала)+","+мЧисло(пЭлемент.ТипСтрелкиКонца)+"}}},"+Символы.ПС;
	
	// Добавлена точка соединения с выбором варианта
		Возврат "{"+мПолучитьТекстБлокаИмени(пЭлемент.СтруктураИмени)+",3,"+мЧисло(пЭлемент.ОткудаИдет)+","+мЧисло(пЭлемент.НачалоВарианта)+","
	+мЧисло(пЭлемент.КудаИдет)+","+мЧисло(пЭлемент.СвободнаяЛиния)
	+",{{"+мПолучитьТекстБлокаОтрисовки(пЭлемент.СтруктураОтрисовки)+",6,"
	+мЧисло(пЭлемент.Точки.Количество())+","+мПолучитьТекстТочек(пЭлемент.Точки)
	+мПолучитьТекстБлокаЛинии(пЭлемент.СтруктураЛинии)+","+мЧисло(пЭлемент.РазмещатьНаименованиеВСерединеЛинии)+","
	+мЧисло(пЭлемент.ОткудаВыходитЛиния)+","+мЧисло(пЭлемент.КудаВходитЛиния)+",0,"
	+мЧисло(пЭлемент.ТипСтрелкиНачала)+","+мЧисло(пЭлемент.ТипСтрелкиКонца)+"}}},"+Символы.ПС;

КонецФункции

Функция мПолучитьТекстСтандартногоЭлемента(пЭлемент, пТекстТочек)
	Возврат "{{"+мПолучитьТекстБлокаИмени(пЭлемент.СтруктураИмени)+",4,"+пЭлемент.УИД+",0},2,{{{"
	+мПолучитьТекстБлокаОтрисовки(пЭлемент.СтруктураОтрисовки)+",5,"
	+мДобавитьТочку(пЭлемент.Лево, пЭлемент.Верх)
	+мДобавитьТочку(пЭлемент.Лево+пЭлемент.Ширина, пЭлемент.Верх+пЭлемент.Высота)
	+"5,"+пТекстТочек+мПолучитьТекстБлокаКартинки()+","
	+мПолучитьТекстБлокаЛинии(пЭлемент.СтруктураЛинии)
	+"},1}},{0}},"+Символы.ПС;
КонецФункции 

Функция мПолучитьТекстСтарта(пЭлемент)
	лСдвиг=Окр((пЭлемент.Ширина/2)*(2/3.5));
	Если лСдвиг>пЭлемент.Высота Тогда лСдвиг=Окр(пЭлемент.Высота/2); КонецЕсли; 
	лТекстТочек=мЧисло(пЭлемент.Лево)+","+мЧисло(пЭлемент.Верх)+","
	+мДобавитьТочку(пЭлемент.Лево+пЭлемент.Ширина-1, пЭлемент.Верх)
	+мДобавитьТочку(пЭлемент.Лево+пЭлемент.Ширина-1, пЭлемент.Верх+пЭлемент.Высота-лСдвиг)
	+мДобавитьТочку(пЭлемент.Лево+Окр(пЭлемент.Ширина/2), пЭлемент.Верх+пЭлемент.Высота-1)
	+мДобавитьТочку(пЭлемент.Лево, пЭлемент.Верх+пЭлемент.Высота-лСдвиг);
	Возврат мПолучитьТекстСтандартногоЭлемента(пЭлемент, лТекстТочек);
КонецФункции

Функция мПолучитьТекстОкончания(пЭлемент)
	лСдвиг=Окр((пЭлемент.Ширина/2)*(2/3.5));
	Если лСдвиг>пЭлемент.Высота Тогда лСдвиг=Окр(пЭлемент.Высота/2); КонецЕсли; 
	лТекстТочек=мДобавитьТочку(пЭлемент.Лево+Окр(пЭлемент.Ширина/2), пЭлемент.Верх)
	+мДобавитьТочку(пЭлемент.Лево+пЭлемент.Ширина-1, пЭлемент.Верх+лСдвиг)
	+мДобавитьТочку(пЭлемент.Лево+пЭлемент.Ширина-1, пЭлемент.Верх+пЭлемент.Высота-1)
	+мДобавитьТочку(пЭлемент.Лево, пЭлемент.Верх+пЭлемент.Высота-1)
	+мДобавитьТочку(пЭлемент.Лево, пЭлемент.Верх+лСдвиг);
	Возврат мПолучитьТекстСтандартногоЭлемента(пЭлемент, лТекстТочек);
КонецФункции

Функция мПолучитьТекстДекорации(пЭлемент)

	Возврат "{"+мПолучитьТекстБлокаИмени(пЭлемент.СтруктураИмени)+",2,{{"
	+мПолучитьТекстБлокаОтрисовки(пЭлемент.СтруктураОтрисовки)+",6,"
	+мДобавитьТочку(пЭлемент.Лево, пЭлемент.Верх)
	+мДобавитьТочку(пЭлемент.Лево+пЭлемент.Ширина, пЭлемент.Верх+пЭлемент.Высота)
	+мПолучитьТекстБлокаКартинки()+",0," + пЭлемент.Фигура + ",0,0}}},"+Символы.ПС;	

КонецФункции

Функция мПолучитьТекстТочкиДействия(пЭлемент)
	лСдвиг=1+?(пЭлемент.Групповая, 3, 0);
	Возврат "{{"+мПолучитьТекстБлокаИмени(пЭлемент.СтруктураИмени)+",4,"+пЭлемент.УИД+",0},8,{{{"
	+мПолучитьТекстБлокаОтрисовки(пЭлемент.СтруктураОтрисовки)+",5,"
	+мДобавитьТочку(пЭлемент.Лево, пЭлемент.Верх)
	+мДобавитьТочку(пЭлемент.Лево+пЭлемент.Ширина, пЭлемент.Верх+пЭлемент.Высота)
	+"4,"+мДобавитьТочку(пЭлемент.Лево, пЭлемент.Верх)
	+мДобавитьТочку(пЭлемент.Лево+пЭлемент.Ширина-лСдвиг, пЭлемент.Верх)
	+мДобавитьТочку(пЭлемент.Лево+пЭлемент.Ширина-лСдвиг, пЭлемент.Верх+пЭлемент.Высота-лСдвиг)
	+мДобавитьТочку(пЭлемент.Лево, пЭлемент.Верх+пЭлемент.Высота-лСдвиг)
	+мПолучитьТекстБлокаКартинки()+","
	+мПолучитьТекстБлокаЛинии(пЭлемент.СтруктураЛинии)
	+"},3,16,1}},"""+пЭлемент.ПояснениеДействия+""","+мЧисло(пЭлемент.Групповая)+",{0},{0},"""+пЭлемент.СтруктураИмени.Наименование+"""},"+Символы.ПС;
КонецФункции 

Функция мПолучитьТекстВыбораВарианта(пЭлемент)
	лКоличествоВариантов=пЭлемент.Варианты.Количество();
	лТекст="{{"+мПолучитьТекстБлокаИмени(пЭлемент.СтруктураИмени)+",4,"+пЭлемент.УИД+",0},2,{{{"
	+мПолучитьТекстБлокаОтрисовки(пЭлемент.СтруктураОтрисовки)+",5,"
	+мДобавитьТочку(пЭлемент.Лево, пЭлемент.Верх)
	+мДобавитьТочку(пЭлемент.Лево+пЭлемент.Ширина, пЭлемент.Верх+пЭлемент.Высота)
	+"4,"+мДобавитьТочку(пЭлемент.Лево, пЭлемент.Верх)
	+мДобавитьТочку(пЭлемент.Лево+пЭлемент.Ширина, пЭлемент.Верх)
	+мДобавитьТочку(пЭлемент.Лево+пЭлемент.Ширина, пЭлемент.Верх+пЭлемент.Высота)
	+мДобавитьТочку(пЭлемент.Лево, пЭлемент.Верх+пЭлемент.Высота)
	+мПолучитьТекстБлокаКартинки()+","
	+мПолучитьТекстБлокаЛинии(пЭлемент.СтруктураЛинии)
	+"},2,"+лКоличествоВариантов+",";
	лИменаВариантов="";
	Для лИнд=0 По лКоличествоВариантов-1 Цикл
		лВариант=пЭлемент.Варианты[лИнд];
		лТекст=лТекст+"{1,1,{""#"", """+лВариант.Наименование+"""}},{3,"+?(ЗначениеЗаполнено(лВариант.Цвет), "0", "4")+",{"+лВариант.Цвет+"}}"+?(лИнд=лКоличествоВариантов-1, "", ",");
		лИменаВариантов=лИменаВариантов+""""+лВариант.Имя+""",";
	КонецЦикла;
	лТекст=лТекст+"}},"+лКоличествоВариантов+","+лИменаВариантов+"{0}}," + Символы.ПС;
	Возврат лТекст;
КонецФункции

Функция мПолучитьТекстЭлемента(пЭлемент)
	Если пЭлемент.ТипЭлемента=1 Тогда Возврат мПолучитьТекстЛинии(пЭлемент); КонецЕсли; 
	Если пЭлемент.ТипЭлемента=2 Тогда Возврат мПолучитьТекстСтарта(пЭлемент); КонецЕсли; 
	Если пЭлемент.ТипЭлемента=3 Тогда Возврат мПолучитьТекстОкончания(пЭлемент); КонецЕсли; 
	Если пЭлемент.ТипЭлемента=5 Тогда Возврат мПолучитьТекстТочкиДействия(пЭлемент); КонецЕсли; 
	Если пЭлемент.ТипЭлемента=6 Тогда Возврат мПолучитьТекстВыбораВарианта(пЭлемент); КонецЕсли; 
	Если пЭлемент.ТипЭлемента=0 Тогда Возврат мПолучитьТекстДекорации(пЭлемент); КонецЕсли;
	Сообщить("Не определен алгоритм для получения текста элемента типа: "+пЭлемент.ТипЭлемента);
	Возврат "";
КонецФункции

Функция ПолучитьТекстФайлаГрафическойСхемы(пСтруктураГрафическойСхемы) Экспорт
	лТекст=мПолучитьТекстШапки(пСтруктураГрафическойСхемы)+мЧисло(пСтруктураГрафическойСхемы.Элементы.Количество())+",";
	Для Каждого лЭлемент Из пСтруктураГрафическойСхемы.Элементы Цикл 
		лТекст=лТекст+мЧисло(лЭлемент.ТипЭлемента)+","+мПолучитьТекстЭлемента(лЭлемент); КонецЦикла;
	лТекст=лТекст+мЧисло(пСтруктураГрафическойСхемы.НомерПоследнегоЭлемента)+"}";
	Возврат лТекст;
КонецФункции   

//! Записывает структуру с настройками графической схемы в файл
Процедура СохранитьГрафическуюСхему(пСтруктураГрафическойСхемы, пИмяФайла, СтрЗаверш = "") Экспорт
	лТекствыйДокумент = Новый ТекстовыйДокумент;
	ТекстСхемы = ПолучитьТекстФайлаГрафическойСхемы(пСтруктураГрафическойСхемы);
	
	Если СтрЗаверш <> "" Тогда
		ПереводСтр = Найти(ТекстСхемы, Символы.ПС);
		СтрДо_ПС = Лев(ТекстСхемы, Найти(ТекстСхемы, Символы.ПС));
		СтрПосле_ПС = Сред(ТекстСхемы, Найти(ТекстСхемы, Символы.ПС) + 1);
		СтрПосле_ПСЗпт = Сред(СтрПосле_ПС, Найти(СтрПосле_ПС, ","));
		СтрДоСтрЗаверш = Лев(СтрПосле_ПСЗпт, СтрДлина(СтрПосле_ПСЗпт) - 2);
		
		ист = Истина;
		Пока ист Цикл
			Если Прав(СтрДоСтрЗаверш, 1) <> "," Тогда
				СтрДл = СтрДлина(СтрДоСтрЗаверш);
				СтрДоСтрЗаверш = Лев(СтрДоСтрЗаверш, СтрДл - 1);
			Иначе
				ист = Ложь;
			КонецЕсли;
		КонецЦикла;
			
		СтрДоСтрЗаверш = СтрДоСтрЗаверш + "3,";	
		КолЭлементов = Число(Лев(Сред(
			ТекстСхемы,
			Найти(ТекстСхемы, Символы.ПС) + 1),
			Найти(Сред(ТекстСхемы, Найти(ТекстСхемы, Символы.ПС) + 1), ",") - 1));
		КолЭлементов = КолЭлементов + 1;
		ТекстСхемы = СтрДо_ПС + КолЭлементов + СтрДоСтрЗаверш+СтрЗаверш;
	КонецЕсли;
		
	лТекствыйДокумент.УстановитьТекст(ТекстСхемы);
	лТекствыйДокумент.Записать(пИмяФайла);
КонецПроцедуры

//! Переносит структуру с настройками ГС в элемент ГС (через временный файл)
Процедура ОтобразитьГрафическуюСхему(пСтруктураГрафическойСхемы, пПолеГрафическойСхемы, СтрЗаверш="") Экспорт
	#Если НЕ Вебклиент Тогда		
		лИмяФайла = ПолучитьИмяВременногоФайла();
	#Иначе
		лИмяФайла = Новый Файл(строка(Секунда(ОбщегоНазначенияКлиент.ДатаСеанса())));
	#КонецЕсли
	СохранитьГрафическуюСхему(пСтруктураГрафическойСхемы, лИмяФайла, СтрЗаверш);
		
	пПолеГрафическойСхемы.Прочитать(лИмяФайла); 
	УдалитьФайлы(лИмяФайла);
КонецПроцедуры

// Функции для преобразования существующей схемы в структуру
Функция мПолучитьЛексему(пТекст, пПозиция, пКонец)
	лЛексема = "";
	лВСтроке = Ложь;
	Пока Истина Цикл
		//ОбработкаПрерыванияПользователя();
		лСимвол = Сред(пТекст, пПозиция, 1);
		Если лСимвол = Символы.ПС Тогда
			пПозиция = пПозиция + 1;
			Продолжить;
		КонецЕсли;
		Если лСимвол = "" Тогда
			Прервать;
		КонецЕсли;
		Если лВСтроке Тогда
			пПозиция = пПозиция + 1; 
			Если лСимвол = """" Тогда
				Возврат лЛексема;
			КонецЕсли;
			лЛексема = лЛексема + лСимвол;
			Продолжить;
		КонецЕсли;
		Если Найти("{},", лСимвол) <> 0 Тогда
			Если ПустаяСтрока(лЛексема) Тогда
				пПозиция = пПозиция + 1;
				Возврат лСимвол;
			КонецЕсли;
			Прервать;
		КонецЕсли;
		пПозиция = пПозиция + 1;
		Если лСимвол = """" Тогда
			лВСтроке = Истина;
			Продолжить;
		КонецЕсли;
		лЛексема = лЛексема + лСимвол;
	КонецЦикла;
	Если лЛексема = "" Тогда
		пКонец = Истина;
		Возврат "";
	КонецЕсли; 
	Если СтрДлина(лЛексема) = 36 Тогда
		Возврат Новый УникальныйИдентификатор(лЛексема);
	КонецЕсли;
	Попытка
		Возврат Число(лЛексема);
	Исключение
		Возврат 0;
	КонецПопытки;
КонецФункции

Функция мПолучитьКлюч(пНомер)
	Возврат "Ключ"+Формат(пНомер, "ЧЦ=3; ЧН=0; ЧВН=; ЧГ=0"); 
КонецФункции

Процедура мДобавитьВСтруктуру(пСтруктура, пТекст, пПозиция)
	лОжидаетсяИдентификатор = Истина;
	лКонец = Ложь;
	Пока Истина Цикл
		лЛексема = мПолучитьЛексему(пТекст, пПозиция, лКонец);
		Если лКонец Тогда
			Возврат;
		КонецЕсли; // Завершилось
		Если лЛексема = "}" Тогда
			Возврат;
		КонецЕсли;
		Если Не лОжидаетсяИдентификатор Тогда 
			Если лЛексема = "," Тогда
				лОжидаетсяИдентификатор = Истина;
				Продолжить;
			КонецЕсли; 
			Сообщить("Неожиданная лексема: "+лЛексема);
			Продолжить; 
		КонецЕсли;
		лОжидаетсяИдентификатор = Ложь;
		лКлюч = мПолучитьКлюч(пСтруктура.Количество() + 1);
		Если лЛексема = "{" Тогда
			лУзел = Новый Структура;
			пСтруктура.Вставить(лКлюч, лУзел);
			мДобавитьВСтруктуру(лУзел, пТекст, пПозиция);
			Продолжить;
		КонецЕсли;
		пСтруктура.Вставить(лКлюч, лЛексема);
	КонецЦикла;
КонецПроцедуры

Функция ТекстВСтруктуру(пТекст) Экспорт
	Если Лев(пТекст, 1)<>"{" Тогда Возврат Неопределено; КонецЕсли;
	лСтруктура=Новый Структура;
	мДобавитьВСтруктуру(лСтруктура, пТекст, 2);
	Возврат лСтруктура; 
КонецФункции

Функция мБулево(пЗначение)
	Возврат ?(Число(пЗначение)=0, Ложь, Истина); 
КонецФункции 

Функция мПолучитьСтруктуруИмениИзСтруктурыФайла(пСтруктураИмени)
	лСтруктура=Новый Структура;
	лСтруктура.Вставить("Идентификатор", пСтруктураИмени.Ключ004);
	лСтруктура.Вставить("Номер", пСтруктураИмени.Ключ002);
	лСтруктура.Вставить("Наименование", ?(мБулево(пСтруктураИмени.Ключ003.Ключ002), пСтруктураИмени.Ключ003.Ключ003.Ключ002, ""));
	Возврат лСтруктура;
КонецФункции

Функция мПолучитьСтруктуруОтрисовкиИзСтруктурыФайла(пСтруктураОтрисовки)
	лСтруктура=Новый Структура;
	лСтруктура.Вставить("ТипЦветаФона", пСтруктураОтрисовки.Ключ002.Ключ002);
	лСтруктура.Вставить("ЦветФона", пСтруктураОтрисовки.Ключ002.Ключ003.Ключ001);
	лСтруктура.Вставить("ТипЦветаРамки", пСтруктураОтрисовки.Ключ003.Ключ002);
	лСтруктура.Вставить("ЦветРамки", пСтруктураОтрисовки.Ключ003.Ключ003.Ключ001);
	лСтруктура.Вставить("ТипЦветаТекста", пСтруктураОтрисовки.Ключ004.Ключ002);
	лСтруктура.Вставить("ЦветТекста", пСтруктураОтрисовки.Ключ004.Ключ003.Ключ001);
	лСтруктура.Вставить("Подсказка", ?(мБулево(пСтруктураОтрисовки.Ключ006.Ключ002), пСтруктураОтрисовки.Ключ006.Ключ003.Ключ002, ""));
	лСтруктура.Вставить("ГоризонтальноеПоложение", пСтруктураОтрисовки.Ключ007);
	лСтруктура.Вставить("ВертикальноеПоложение", пСтруктураОтрисовки.Ключ008);
	лСтруктура.Вставить("ПоложениеКартинки", пСтруктураОтрисовки.Ключ009);
	лСтруктура.Вставить("НомерПорядкаОтрисовки", пСтруктураОтрисовки.Ключ010);
	лСтруктура.Вставить("Гиперссылка", мБулево(пСтруктураОтрисовки.Ключ011));
	лСтруктура.Вставить("ПрозрачныйФон", мБулево(пСтруктураОтрисовки.Ключ012));
	Возврат лСтруктура;
КонецФункции

Функция мПолучитьСтруктуруБлокаЛинииИзСтруктурыФайла(пСтруктураБлокаЛинии)
	лСтруктура=Новый Структура;
	лСтруктура.Вставить("ТипЛинии", пСтруктураБлокаЛинии.Ключ004);
	лСтруктура.Вставить("ТолщинаЛинии", пСтруктураБлокаЛинии.Ключ005);
	Возврат лСтруктура;
КонецФункции

Функция мПолучитьСтруктуруЛинииИзСтруктурыФайла(пСтруктураЭлемента)
	лСтруктура=Новый Структура;
	лСтруктура.Вставить("ТипЭлемента", 1);
	лСтруктура.Вставить("Точки", Новый Массив);
	лСтруктура.Вставить("СтруктураИмени", мПолучитьСтруктуруИмениИзСтруктурыФайла(пСтруктураЭлемента.Ключ001));
	лСтруктура.Вставить("ОткудаИдет", пСтруктураЭлемента.Ключ003);
	лСтруктура.Вставить("КудаИдет", пСтруктураЭлемента.Ключ005);
	лСтруктура.Вставить("СвободнаяЛиния", мБулево(пСтруктураЭлемента.Ключ006));
	
	лСтруктураЭлементаВложенная=пСтруктураЭлемента.Ключ007.Ключ001;
	лСтруктура.Вставить("СтруктураОтрисовки", мПолучитьСтруктуруОтрисовкиИзСтруктурыФайла(лСтруктураЭлементаВложенная.Ключ001));
	
	лКоличествоТочек=лСтруктураЭлементаВложенная.Ключ003;
	Для лИнд=1 По лКоличествоТочек Цикл
		ДобавитьТочкуЛинии(лСтруктура, лСтруктураЭлементаВложенная[мПолучитьКлюч(4+(лИнд-1)*2)], лСтруктураЭлементаВложенная[мПолучитьКлюч(5+(лИнд-1)*2)]);
	КонецЦикла;
	лСтруктура.Вставить("СтруктураЛинии", мПолучитьСтруктуруБлокаЛинииИзСтруктурыФайла(лСтруктураЭлементаВложенная[мПолучитьКлюч(4+лКоличествоТочек*2)]));
	лСтруктура.Вставить("РазмещатьНаименованиеВСерединеЛинии", мБулево(лСтруктураЭлементаВложенная[мПолучитьКлюч(5+лКоличествоТочек*2)]));
	лСтруктура.Вставить("ОткудаВыходитЛиния", лСтруктураЭлементаВложенная[мПолучитьКлюч(6+лКоличествоТочек*2)]);
	лСтруктура.Вставить("КудаВходитЛиния", лСтруктураЭлементаВложенная[мПолучитьКлюч(7+лКоличествоТочек*2)]);
	лСтруктура.Вставить("ТипСтрелкиНачала", лСтруктураЭлементаВложенная[мПолучитьКлюч(9+лКоличествоТочек*2)]);
	лСтруктура.Вставить("ТипСтрелкиКонца", лСтруктураЭлементаВложенная[мПолучитьКлюч(10+лКоличествоТочек*2)]);
	Возврат лСтруктура;
КонецФункции

Функция мПолучитьСтруктуруТочкиДействияИзСтруктурыФайла(пСтруктураЭлемента, пТипЭлемента)
	лСтруктура=Новый Структура;
	лСтруктура.Вставить("ТипЭлемента", пТипЭлемента);
	лСтруктура.Вставить("СтруктураИмени", мПолучитьСтруктуруИмениИзСтруктурыФайла(пСтруктураЭлемента.Ключ001.Ключ001));
	лСтруктура.Вставить("УИД", пСтруктураЭлемента.Ключ001.Ключ003);
	
	лСтруктураЭлементаВложенная=пСтруктураЭлемента.Ключ003.Ключ001.Ключ001;
	лСтруктура.Вставить("СтруктураОтрисовки", мПолучитьСтруктуруОтрисовкиИзСтруктурыФайла(лСтруктураЭлементаВложенная.Ключ001));
	лСтруктура.Вставить("Лево", лСтруктураЭлементаВложенная.Ключ003);
	лСтруктура.Вставить("Верх", лСтруктураЭлементаВложенная.Ключ004);
	лСтруктура.Вставить("Ширина", лСтруктураЭлементаВложенная.Ключ005-лСтруктураЭлементаВложенная.Ключ003);
	лСтруктура.Вставить("Высота", лСтруктураЭлементаВложенная.Ключ006-лСтруктураЭлементаВложенная.Ключ004);
	//лСтруктура.Вставить("СтруктураКартинки", мПолучитьСтруктуруБлокаКартинкиИзСтруктурыФайла(лСтруктураЭлементаВложенная[мПолучитьКлюч(?(пТипЭлемента=5, 17, 19))]));
	лСтруктура.Вставить("СтруктураЛинии", мПолучитьСтруктуруБлокаЛинииИзСтруктурыФайла(лСтруктураЭлементаВложенная[мПолучитьКлюч(?(пТипЭлемента=5, 18, 20))]));
	Если пТипЭлемента=5 Тогда 
		лСтруктура.Вставить("ПояснениеДействия", пСтруктураЭлемента.Ключ004);
		лСтруктура.Вставить("Групповая", мБулево(пСтруктураЭлемента.Ключ005));
	ИначеЕсли пТипЭлемента=6 Тогда // ВыборВарианта
		лВарианты=Новый Массив;
		Для лИнд=1 По пСтруктураЭлемента.Ключ004 Цикл
			лИмя=пСтруктураЭлемента[мПолучитьКлюч(4+лИнд)];
			лНаименование=пСтруктураЭлемента.Ключ003.Ключ001[мПолучитьКлюч(4+(лИнд-1)*2)].Ключ003.Ключ002;
			лЦвет=пСтруктураЭлемента.Ключ003.Ключ001[мПолучитьКлюч(5+(лИнд-1)*2)].Ключ003.Ключ001;
			лВарианты.Добавить(Новый Структура("Имя, Наименование, Цвет", лИмя, лНаименование, лЦвет));
		КонецЦикла;
	КонецЕсли;
	Возврат лСтруктура;
КонецФункции

Функция мДобавитьЭлементИзСтруктурыФайла(пСтруктураСхемы, пСтруктураЭлемента, пТипЭлемента)
	Если пТипЭлемента=1 Тогда 
		лСтруктура=мПолучитьСтруктуруЛинииИзСтруктурыФайла(пСтруктураЭлемента); 
	ИначеЕсли пТипЭлемента=2 или пТипЭлемента=3 или пТипЭлемента=5 ИЛИ пТипЭлемента = 0 Тогда
		лСтруктура=мПолучитьСтруктуруТочкиДействияИзСтруктурыФайла(пСтруктураЭлемента, пТипЭлемента); 
	Иначе
		Сообщить("Элемент с типом: "+пТипЭлемента+", не может быть разобран и будет проигнорирован");
		Возврат 0; 
	КонецЕсли; 
	пСтруктураСхемы.Элементы.Добавить(лСтруктура);
КонецФункции 

Функция СтруктураФайлаВСтруктуруГрафическойСхемы(пСтруктураФайла) Экспорт
	лСтруктура=ПолучитьСтруктуруГрафическойСхемы();
	лСтруктура.ШагСеткиПоГоризонтали	=пСтруктураФайла.Ключ002.Ключ001.Ключ004;
	лСтруктура.ШагСеткиПоВертикали		=пСтруктураФайла.Ключ002.Ключ001.Ключ005;
	лСтруктура.ВыравниватьПоСетке		=мБулево(пСтруктураФайла.Ключ002.Ключ001.Ключ003);
	лСтруктура.ТипСетки					=пСтруктураФайла.Ключ002.Ключ001.Ключ006;
	лСтруктура.ТипЦветаФона				=пСтруктураФайла.Ключ002.Ключ001.Ключ002.Ключ002;
	лСтруктура.ЦветФона					=пСтруктураФайла.Ключ002.Ключ001.Ключ002.Ключ003.Ключ001;
	лСтруктура.НомерПоследнегоЭлемента	=пСтруктураФайла[мПолучитьКлюч(пСтруктураФайла.Количество())];
	Для лИнд=1 По пСтруктураФайла.Ключ003 Цикл
		лТипЭлемента=пСтруктураФайла[мПолучитьКлюч(4+(лИнд-1)*2)];
		лСтруктураЭлемента=пСтруктураФайла[мПолучитьКлюч(5+(лИнд-1)*2)];
		мДобавитьЭлементИзСтруктурыФайла(лСтруктура, лСтруктураЭлемента, лТипЭлемента);
	КонецЦикла;
	Возврат лСтруктура;
КонецФункции

Функция ПолучитьСтруктуруГрафическойСхемыИзГрафическойСхемы(пГрафическаяСхема) Экспорт
	#Если НЕ Вебклиент Тогда		
		лИмяФайла = ПолучитьИмяВременногоФайла();
	#Иначе
		лИмяФайла = Новый Файл(строка(Секунда(ОбщегоНазначенияКлиент.ДатаСеанса())));
	#КонецЕсли

	пГрафическаяСхема.Записать(лИмяФайла);
	лТекстовыйДокумент = Новый ТекстовыйДокумент();
	лТекстовыйДокумент.Прочитать(лИмяФайла);
	УдалитьФайлы(лИмяФайла); //!!! поидее надо раскоментить
	лСтруктураФайла = ТекстВСтруктуру(лТекстовыйДокумент.ПолучитьТекст());
	Возврат СтруктураФайлаВСтруктуруГрафическойСхемы(лСтруктураФайла); 
КонецФункции

Функция ПолучитьСтруктуруЭлементаПоИмени(пСтруктураГрафическойСхемы, пИмяЭлемента) Экспорт
	Для Каждого лЭлемент Из пСтруктураГрафическойСхемы.Элементы Цикл
		Если лЭлемент.СтруктураИмени.Идентификатор=пИмяЭлемента Тогда Возврат лЭлемент; КонецЕсли;
	КонецЦикла;
	Возврат Неопределено; 
КонецФункции

Функция ПолучитьСтруктуруЭлементаПоНомеру(пСтруктураГрафическойСхемы, пНомер) Экспорт
	Для Каждого лЭлемент Из пСтруктураГрафическойСхемы.Элементы Цикл
		Если лЭлемент.СтруктураИмени.Номер=пНомер Тогда Возврат лЭлемент; КонецЕсли;
	КонецЦикла;
	Возврат Неопределено; 
КонецФункции

Функция СуществуетСвойство(пОбъект, пИдСвойства) Экспорт
	Попытка	
		лТест=Вычислить("пОбъект."+пИдСвойства);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина; 
КонецФункции 

Функция ГУИДВСтроку(пGUID) Экспорт
	Возврат СтрЗаменить(пGUID, "-", "");
КонецФункции

Функция ТзДобавитьКолонки(пТз, пСпКолонки) Экспорт
	лСпКолонки=?(ТипЗнч(пСпКолонки)=Тип("Строка"), СпСоздать(пСпКолонки), пСпКолонки);
	Для лИнд=0 По лСпКолонки.Количество()-1 Цикл
		лИдКолонки=лСпКолонки[лИнд];
		Если Не пТз.Колонки.Найти(лИдКолонки) = Неопределено Тогда 
			Продолжить; 
		КонецЕсли; 
		пТз.Колонки.Добавить(лИдКолонки);
	КонецЦикла;
	Возврат Истина; 
КонецФункции 

Функция СпСоздать(Знач пЗначения, пРазделитель=",") Экспорт
	лСпВозрата=Новый СписокЗначений;
	Если ТипЗнч(пЗначения)=Тип("Структура") или ТипЗнч(пЗначения)=Тип("Соответствие")  Тогда
		Для Каждого лЭлемент ИЗ пЗначения Цикл лСпВозрата.Добавить(лЭлемент.Значение, лЭлемент.Ключ); КонецЦикла;
		Возврат лСпВозрата;
	КонецЕсли;
	Если ТипЗнч(пЗначения)<>Тип("Массив") Тогда пЗначения=МассивыСоздать(пЗначения, пРазделитель); КонецЕсли;
	лСпВозрата.ЗагрузитьЗначения(пЗначения);
	Возврат лСпВозрата;
КонецФункции

Функция МассивыСоздать(Знач пЗначенияСтр, пРазделитель=",") Экспорт
	лМассив=Новый Массив;
	Если ПустаяСтрока(пЗначенияСтр) Тогда Возврат лМассив; КонецЕсли; 
	лПозицияРазделителя=Найти(пЗначенияСтр, пРазделитель);
	Пока лПозицияРазделителя<>0 Цикл
		лЗначение=СокрЛП(Лев(пЗначенияСтр, лПозицияРазделителя-1));
		лМассив.Добавить(лЗначение);
		
		пЗначенияСтр=Сред(пЗначенияСтр, лПозицияРазделителя+1);
		лПозицияРазделителя=Найти(пЗначенияСтр, пРазделитель);
	КонецЦикла; 
	лМассив.Добавить(СокрЛП(пЗначенияСтр));
	Возврат лМассив;
КонецФункции

//! Удаляет элемент ГС вместе со всеми элементами идущими из него
Процедура УдалитьЭлементВместеСДетьми(ТекЭлемент, ГрафическаяСхема, СтруктураГрафическойСхемы = Неопределено) 
		Экспорт
	ОбновитьГрафическуюСхему = Ложь;
	Если СтруктураГрафическойСхемы = Неопределено Тогда	
		СтруктураГрафическойСхемы = ПолучитьСтруктуруНеПустойГрафическойСхемы(ГрафическаяСхема);
		ОбновитьГрафическуюСхему = Истина;
	КонецЕсли;
	
	//Для каждого ребенка запустить удаление
	Для Каждого Элемент Из ГрафическаяСхема.ЭлементыГрафическойСхемы Цикл
        Если ТипЗнч(Элемент) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") И 
				Элемент.НачалоЭлемент = ТекЭлемент И Не Элемент.КонецЭлемент = Неопределено Тогда	
			УдалитьЭлементВместеСДетьми(Элемент.КонецЭлемент, ГрафическаяСхема, СтруктураГрафическойСхемы);		
		КонецЕсли;
	КонецЦикла;	
	//Удалить ТекЭлемент вместе с идущими в него и из него стрелками
	Для Каждого Элемент Из ГрафическаяСхема.ЭлементыГрафическойСхемы Цикл
        Если ТипЗнч(Элемент) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") И 
				(Элемент.НачалоЭлемент = ТекЭлемент ИЛИ Элемент.КонецЭлемент = ТекЭлемент) Тогда
			ИндексЭлемента = ПолучитьИндексТекущегоЭлементаВСтруктуре(Элемент, СтруктураГрафическойСхемы);
			Если Не ИндексЭлемента = Неопределено Тогда
				СтруктураГрафическойСхемы.Элементы.Удалить(ИндексЭлемента);			
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;				
	ИндексТекЭлемента = ПолучитьИндексТекущегоЭлементаВСтруктуре(ТекЭлемент, СтруктураГрафическойСхемы);
	СтруктураГрафическойСхемы.Элементы.Удалить(ИндексТекЭлемента);
		
	Если ОбновитьГрафическуюСхему Тогда	
		ОтобразитьГрафическуюСхему(СтруктураГрафическойСхемы, ГрафическаяСхема);
	КонецЕсли;
КонецПроцедуры

//!
Процедура РасставитьЭлементыВДереве(Дерево, КореньДерева, Верх, Лево, РазмерСхемыЛево = 0, РазмерСхемыВерх = 0) Экспорт
	КореньСтрока = Дерево[КореньДерева];	
	КореньСтрока.Лево = Лево;
	КореньСтрока.Верх = Верх;
	Если Лево + КореньСтрока.Ширина + 20 > РазмерСхемыЛево Тогда
		РазмерСхемыЛево = Лево + КореньСтрока.Ширина + 20;
	КонецЕсли;
	Если Верх + КореньСтрока.Высота + 20 > РазмерСхемыВерх Тогда
		РазмерСхемыВерх = Верх + КореньСтрока.Высота + 20;
	КонецЕсли;	
	Если КореньСтрока.КоличествоДетей > 0 Тогда	
		Для Номер = 1 По КореньСтрока.КоличествоДетей Цикл
			Ребенок = Дерево.НайтиСтроки(Новый Структура("Родитель, Номер", КореньСтрока.Идентификатор, Номер))[0];
			РасставитьЭлементыВДереве(Дерево, Ребенок.НомерСтроки - 1, Верх, 
					Лево + КореньСтрока.Ширина + 40, РазмерСхемыЛево, РазмерСхемыВерх);
			Верх = Верх + КореньСтрока.Высота + 20;
		КонецЦикла;	
	   	Верх = Верх - КореньСтрока.Высота - 20;
	КонецЕсли;
КонецПроцедуры

//!
Процедура РасставитьЭлементыВДереве2(Дерево, КореньДерева, Знач Верх, Знач Лево, РазмерСхемыЛево = 0, 
		РазмерСхемыВерх = 0) Экспорт
	КореньСтрока = Дерево[КореньДерева];	
	КореньСтрока.Лево = Лево;
	КореньСтрока.Верх = Верх;
	Если Лево + КореньСтрока.Ширина + 20 > РазмерСхемыЛево Тогда
		РазмерСхемыЛево = Лево + КореньСтрока.Ширина + 20;
	КонецЕсли;
	Если Верх + КореньСтрока.Высота + 20 > РазмерСхемыВерх Тогда
		РазмерСхемыВерх = Верх + КореньСтрока.Высота + 20;
	КонецЕсли;	
	Для Номер = 1 По КореньСтрока.КоличествоДетей Цикл
		Ребенок = Дерево.НайтиСтроки(Новый Структура("Родитель, Номер", КореньСтрока.Идентификатор, Номер))[0];
		Ребенок.НеУдалять = Истина;
		РасставитьЭлементыВДереве2(Дерево, Ребенок.НомерСтроки - 1, Верх, 
				Лево + КореньСтрока.Ширина + 40, РазмерСхемыЛево, РазмерСхемыВерх);
	    Верх = Верх + КореньСтрока.Высота + 20;
	КонецЦикла;	
КонецПроцедуры

//!
Процедура СинхронизироватьРасположениеЭлементовСДеревом(ГрафическаяСхема, Дерево) Экспорт
	СтруктураГрафическойСхемы = ПолучитьСтруктуруНеПустойГрафическойСхемы(ГрафическаяСхема);
	//Каждый элемент ГС ...
	Для Каждого ЭлементСГС Из СтруктураГрафическойСхемы.Элементы Цикл
		Если ТипЗнч(ЭлементСГС._СвойстваЭлемента) <> Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда 
			//... Ищем в Дереве
			Для Каждого Элемент Из Дерево Цикл
				Если ЭлементСГС._СвойстваЭлемента.Имя = Элемент.Идентификатор Тогда 
					ИзменениеЛево = Элемент.Лево - ЭлементСГС.Лево;
					ИзменениеВерх = Элемент.Верх - ЭлементСГС.Верх;	
					//Меняем координаты элемента ГС
					ЭлементСГС.Лево = Элемент.Лево;
					ЭлементСГС.Верх = Элемент.Верх;	
					
					//Для каждого передвинутого элемента ГС ищем приходящие и исходящие из него стрелки ...
					Для Каждого ЭлементСтрелка Из СтруктураГрафическойСхемы.Элементы Цикл
						Если ТипЗнч(ЭлементСтрелка._СвойстваЭлемента) = 
								Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда
							//... И двигаем их
							Если ЭлементСтрелка._СвойстваЭлемента.НачалоЭлемент = ЭлементСГС._СвойстваЭлемента Тогда
								ЭлементСтрелка.Точки[0].Лево = ЭлементСтрелка.Точки[0].Лево + ИзменениеЛево;
								ЭлементСтрелка.Точки[0].Верх = ЭлементСтрелка.Точки[0].Верх + ИзменениеВерх;		
							ИначеЕсли ЭлементСтрелка._СвойстваЭлемента.КонецЭлемент = ЭлементСГС._СвойстваЭлемента 
									Тогда
								ПоследняяТочка = ЭлементСтрелка.Точки.Количество() - 1;
								ЭлементСтрелка.Точки[ПоследняяТочка].Лево = 
										ЭлементСтрелка.Точки[ПоследняяТочка].Лево + ИзменениеЛево;
								ЭлементСтрелка.Точки[ПоследняяТочка].Верх = 
										ЭлементСтрелка.Точки[ПоследняяТочка].Верх + ИзменениеВерх;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;					
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
		
	Для Каждого ЭлементСГС Из СтруктураГрафическойСхемы.Элементы Цикл
		Если ТипЗнч(ЭлементСГС._СвойстваЭлемента) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда 
			//поправить все стрелки
			ПоследняяТочка = ЭлементСГС.Точки.Количество() - 1;			
			НачалоЛево = ЭлементСГС.Точки[0].Лево;
			НачалоВерх = ЭлементСГС.Точки[0].Верх;
			КонецЛево  = ЭлементСГС.Точки[ПоследняяТочка].Лево;
			КонецВерх  = ЭлементСГС.Точки[ПоследняяТочка].Верх;	
			ЭлементСГС.Точки.Очистить();
			
			ПровестиЛиниюМеждуТочками(ЭлементСГС, НачалоЛево, НачалоВерх, КонецЛево, КонецВерх);	    	
		КонецЕсли;
	КонецЦикла;	
		
	ОтобразитьГрафическуюСхему(СтруктураГрафическойСхемы, ГрафическаяСхема);
КонецПроцедуры

//!
Процедура РасставитьЭлементыВДеревеСУчетомВыбранных(Дерево, КореньДерева, Верх, Лево) Экспорт
	КореньСтрока = Дерево[КореньДерева];
	КореньСтрока.НеУдалять = Истина; 
	КореньСтрока.Лево = Лево;
	КореньСтрока.Верх = Верх;	
	КоличествоДетейСВыбран = Дерево.НайтиСтроки(Новый Структура("Родитель, Выбран", КореньСтрока.Идентификатор, 
			Истина)).Количество();
	
	Если КоличествоДетейСВыбран > 0 Тогда	
		Для Номер = 1 По КореньСтрока.КоличествоДетей Цикл
			Ребенок = Дерево.НайтиСтроки(Новый Структура("Родитель, Номер", КореньСтрока.Идентификатор, Номер))[0];
			Если Ребенок.Выбран Тогда
				РасставитьЭлементыВДеревеСУчетомВыбранных(Дерево, Ребенок.НомерСтроки - 1, Верх, 
						Лево + КореньСтрока.Ширина + 40);
				Верх = Верх + КореньСтрока.Высота + 20;
			КонецЕсли;
		КонецЦикла;	
	   	Верх = Верх - КореньСтрока.Высота - 20;
	ИначеЕсли КореньСтрока.КоличествоДетей > 0 Тогда
		Для Номер = 1 По КореньСтрока.КоличествоДетей Цикл
			Ребенок = Дерево.НайтиСтроки(Новый Структура("Родитель, Номер", КореньСтрока.Идентификатор, Номер))[0];
			Если Ребенок.ВыборИзСписка = "Нет" Тогда
				Ребенок.НеУдалять = Истина;
				Ребенок.Лево = Лево + КореньСтрока.Ширина + 40; 
				Ребенок.Верх = Верх;
		        Верх = Верх + КореньСтрока.Высота + 20;
			КонецЕсли;
		КонецЦикла;
		Верх = Верх - КореньСтрока.Высота - 20;	
	КонецЕсли;
КонецПроцедуры	

//!
Процедура РасставитьЭлементыВДеревеСУчетомВыбранных2(Дерево, КореньДерева, Знач Верх, Знач Лево) Экспорт
	КореньСтрока = Дерево[КореньДерева];
	КореньСтрока.НеУдалять = Истина; 
	КореньСтрока.Лево = Лево;
	КореньСтрока.Верх = Верх;	
	
	Если КореньСтрока.Выбран Тогда
		Для Номер = 1 По КореньСтрока.КоличествоДетей Цикл
			Ребенок = Дерево.НайтиСтроки(Новый Структура("Родитель, Номер", КореньСтрока.Идентификатор, Номер))[0];
			Ребенок.НеУдалять = Истина;
			РасставитьЭлементыВДеревеСУчетомВыбранных2(Дерево, Ребенок.НомерСтроки - 1, Верх, Лево + КореньСтрока.Ширина + 40);
		    Верх = Верх + КореньСтрока.Высота + 20;
		КонецЦикла;	
	КонецЕсли;						
КонецПроцедуры	

//!
Процедура СинхронизироватьРасположениеЭлементовСДеревомВыбранных(ГрафическаяСхема, Дерево) Экспорт
	СтруктураГрафическойСхемы = ПолучитьСтруктуруНеПустойГрафическойСхемы(ГрафическаяСхема);
	//1 Перебираем элементы дерева
	Для Каждого Элемент Из Дерево Цикл
		Номер = 0;
		Пока Номер < СтруктураГрафическойСхемы.Элементы.Количество() Цикл	
			ЭлементСГС = СтруктураГрафическойСхемы.Элементы[Номер];
			
			//2 Находим каждый элемент дерева в СГС
			Если ЭлементСГС._СвойстваЭлемента.Имя = Элемент.Идентификатор Тогда				
				//3 Выравниваем, удаляем в соответствии с данными в дереве
				Если Элемент.НеУдалять Тогда		
					//Передвигаем элемент
					ИзменениеЛево = Элемент.Лево - ЭлементСГС.Лево;
					ИзменениеВерх = Элемент.Верх - ЭлементСГС.Верх;	
					//Меняем координаты элемента ГС
					ЭлементСГС.Лево = Элемент.Лево;
					ЭлементСГС.Верх = Элемент.Верх;	
					
					//Для каждого передвинутого элемента ГС ищем приходящие и исходящие из него стрелки ...
					Для Каждого ЭлементСтрелка Из СтруктураГрафическойСхемы.Элементы Цикл
						Если ТипЗнч(ЭлементСтрелка._СвойстваЭлемента) = 
								Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда
							//... И двигаем их
							Если ЭлементСтрелка._СвойстваЭлемента.НачалоЭлемент = ЭлементСГС._СвойстваЭлемента Тогда
								ЭлементСтрелка.Точки[0].Лево = ЭлементСтрелка.Точки[0].Лево + ИзменениеЛево;
								ЭлементСтрелка.Точки[0].Верх = ЭлементСтрелка.Точки[0].Верх + ИзменениеВерх;		
							ИначеЕсли ЭлементСтрелка._СвойстваЭлемента.КонецЭлемент = ЭлементСГС._СвойстваЭлемента 
									Тогда
								ПоследняяТочка = ЭлементСтрелка.Точки.Количество() - 1;
								ЭлементСтрелка.Точки[ПоследняяТочка].Лево = 
										ЭлементСтрелка.Точки[ПоследняяТочка].Лево + ИзменениеЛево;
								ЭлементСтрелка.Точки[ПоследняяТочка].Верх = 
										ЭлементСтрелка.Точки[ПоследняяТочка].Верх + ИзменениеВерх;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;					
					
				Иначе	
					//Удаляем элемент
					СтруктураГрафическойСхемы.Элементы.Удалить(Номер);
					Номер = Номер - 1;
				КонецЕсли;	
				Прервать;
			КонецЕсли;
			Номер = Номер + 1;
		КонецЦикла;	
	КонецЦикла;
	
	//4 В цикле перебераем все стрелки ГС	
	Номер = 0;
	Пока Номер < СтруктураГрафическойСхемы.Элементы.Количество() Цикл
		ЭлементСГС = СтруктураГрафическойСхемы.Элементы[Номер];
		
		Если ТипЗнч(ЭлементСГС._СвойстваЭлемента) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда 
			УдалитьСтрелку = Ложь;
			//5 Для каждой стрелки определяем строки в Дереве
			Попытка
				СтрокаНачалоЭлемент = Дерево.НайтиСтроки(Новый Структура("Идентификатор", 
						ЭлементСГС._СвойстваЭлемента.НачалоЭлемент.Имя))[0];
				СтрокаКонецЭлемент = Дерево.НайтиСтроки(Новый Структура("Идентификатор", 
						ЭлементСГС._СвойстваЭлемента.КонецЭлемент.Имя))[0];
			Исключение
				УдалитьСтрелку = Истина;		
			КонецПопытки;
			
			//6 Проверяем видимость соседних элементов стрелки, если ее нет, стрелку надо удалить из СГС
			Если Не УдалитьСтрелку И (Не СтрокаНачалоЭлемент.НеУдалять ИЛИ Не СтрокаКонецЭлемент.НеУдалять) Тогда
				УдалитьСтрелку = Истина;
			КонецЕсли;
			
			Если УдалитьСтрелку Тогда
				//Удаляем элемент
				СтруктураГрафическойСхемы.Элементы.Удалить(Номер);
				Номер = Номер - 1;
			Иначе
				//поправить координаты стрелки, если это нужная стрелка
				ПоследняяТочка = ЭлементСГС.Точки.Количество() - 1;			
				НачалоЛево = ЭлементСГС.Точки[0].Лево;
				НачалоВерх = ЭлементСГС.Точки[0].Верх;
				КонецЛево  = ЭлементСГС.Точки[ПоследняяТочка].Лево;
				КонецВерх  = ЭлементСГС.Точки[ПоследняяТочка].Верх;	
				ЭлементСГС.Точки.Очистить();
				
				ПровестиЛиниюМеждуТочками(ЭлементСГС, НачалоЛево, НачалоВерх, КонецЛево, КонецВерх);
			КонецЕсли;
		КонецЕсли;
		Номер = Номер + 1;
	КонецЦикла;			
					
	ОтобразитьГрафическуюСхему(СтруктураГрафическойСхемы, ГрафическаяСхема); 
КонецПроцедуры	

//!
Функция ПолучитьКодИзИмени(пИмя) Экспорт
	СписокСтрок = СтрЗаменить(пИмя, "-", Символы.ПС);
	КоличествоСтрок = СтрЧислоСтрок(СписокСтрок);
	Если КоличествоСтрок >= 3 Тогда
		Код = СтрПолучитьСтроку(СписокСтрок, КоличествоСтрок - 1);
		Попытка
			КодЧислом = Число(Код); //Проверка кода на число, если нет, то будет исключение
		Исключение
			Код = "";
		КонецПопытки;
	Иначе
	    Код = "";
	КонецЕсли;
	Возврат Код;
КонецФункции

//!
Функция ПолучитьСписокКодовВыбранныхЭлементовДерева(Дерево) Экспорт
    Результат = Новый Массив;
	СтрокаРодитель = Дерево;	
	Пока СтрокаРодитель.Количество() > 0 Цикл
		Код = ПолучитьКодИзИмени(СтрокаРодитель[0].Идентификатор);
		Если Код <> "" Тогда
			Результат.Добавить(Код);
		КонецЕсли;
		СтрокаРодитель = Дерево.НайтиСтроки(Новый Структура("Родитель, Выбран", СтрокаРодитель[0].Идентификатор, 
				Истина));
	КонецЦикла;	
	Возврат Результат;
КонецФункции

//!
Процедура СинхронизироватьИменаГрафическойСхемыСИдентификаторамиДерева(ГрафическаяСхема, Дерево) Экспорт
    СтруктураГрафическойСхемы = ПолучитьСтруктуруНеПустойГрафическойСхемы(ГрафическаяСхема);
	Для Каждого ЭлементСГС Из СтруктураГрафическойСхемы.Элементы Цикл
		Если ТипЗнч(ЭлементСГС._СвойстваЭлемента) <> Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") И 
				ТипЗнч(ЭлементСГС._СвойстваЭлемента) <> Тип("ЭлементГрафическойСхемыДекорация") Тогда
			ТекущаяСтрока = Дерево.НайтиСтроки(Новый Структура("Идентификатор", ЭлементСГС._СвойстваЭлемента.Имя))[0];
			ЭлементСГС.СтруктураИмени.Наименование = ТекущаяСтрока.Наименование;
			ЭлементСГС.СтруктураОтрисовки.Подсказка = ТекущаяСтрока.Подсказка;
		КонецЕсли;
	КонецЦикла;	
	ОтобразитьГрафическуюСхему(СтруктураГрафическойСхемы, ГрафическаяСхема);
КонецПроцедуры	

//!
Процедура СинхронизироватьЭлементаГрафическойСхемыСДеревом(ГрафическаяСхема, СтрокаЭлемента) Экспорт
    СтруктураГрафическойСхемы = ПолучитьСтруктуруНеПустойГрафическойСхемы(ГрафическаяСхема);
	Для Каждого ЭлементСГС Из СтруктураГрафическойСхемы.Элементы Цикл
		Если ТипЗнч(ЭлементСГС._СвойстваЭлемента) <> Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") И
				ЭлементСГС._СвойстваЭлемента.Имя = СтрокаЭлемента.Идентификатор Тогда	
			ЭлементСГС.СтруктураИмени.Наименование = СтрокаЭлемента.Наименование;
            Прервать;
		КонецЕсли;
	КонецЦикла;	
	ОтобразитьГрафическуюСхему(СтруктураГрафическойСхемы, ГрафическаяСхема);
КонецПроцедуры	

//! 
Процедура УдалитьЭлементБезДетей(ТекЭлемент, ГрафическаяСхема) Экспорт
	СтруктураГрафическойСхемы = ПолучитьСтруктуруНеПустойГрафическойСхемы(ГрафическаяСхема);
	//Найти элемент родитель
	Для Каждого Элемент Из СтруктураГрафическойСхемы.Элементы Цикл
		Если ТипЗнч(Элемент._СвойстваЭлемента) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") И
				Элемент._СвойстваЭлемента.КонецЭлемент = ТекЭлемент Тогда				
			ЭлементРодитель = Элемент._СвойстваЭлемента.НачалоЭлемент;
			НомерРодителя = ПолучитьИндексТекущегоЭлементаПоСтруктура(ЭлементРодитель, СтруктураГрафическойСхемы) + 1;	
			ЛинияЛево = Элемент.Точки[0].Лево;
			ЛинияВерх = Элемент.Точки[0].Верх;
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Для Каждого Элемент Из СтруктураГрафическойСхемы.Элементы Цикл
		Если ТипЗнч(Элемент._СвойстваЭлемента) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") И
				Элемент._СвойстваЭлемента.НачалоЭлемент = ТекЭлемент Тогда
			Элемент.ОткудаИдет = НомерРодителя;
			Элемент.Точки[0].Лево = ЛинияЛево;
			Элемент.Точки[0].Верх = ЛинияВерх;
		КонецЕсли;
	КонецЦикла;	
	
	//4 Поменять родителя у всех стрелок из меня выходящих
	//5 Сдвинуть точку начала всех стрелок из меня выходящих влево
	//6 Удалить тек элемент со стрелкой
	Для Каждого Элемент Из ГрафическаяСхема.ЭлементыГрафическойСхемы Цикл
        Если ТипЗнч(Элемент) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") И 
				Элемент.КонецЭлемент = ТекЭлемент Тогда
			ИндексЭлемента = ПолучитьИндексТекущегоЭлементаВСтруктуре(Элемент, СтруктураГрафическойСхемы);
			Если Не ИндексЭлемента = Неопределено Тогда
				СтруктураГрафическойСхемы.Элементы.Удалить(ИндексЭлемента);			
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;				
	ИндексТекЭлемента = ПолучитьИндексТекущегоЭлементаВСтруктуре(ТекЭлемент, СтруктураГрафическойСхемы);
	СтруктураГрафическойСхемы.Элементы.Удалить(ИндексТекЭлемента);
	
	ОтобразитьГрафическуюСхему(СтруктураГрафическойСхемы, ГрафическаяСхема);
КонецПроцедуры

//!
Процедура СоздатьДекорацию(ГрафическаяСхема, РазмерСхемыЛево, РазмерСхемыВерх) Экспорт
	СтруктураГрафическойСхемы = ПолучитьСтруктуруНеПустойГрафическойСхемы(ГрафическаяСхема);		
	СтруктураДобавленногоЭлемента = ДобавитьДекорацию(СтруктураГрафическойСхемы, "", РазмерСхемыЛево, 
			РазмерСхемыВерх, 0, 0);	                                                                      	                               				
	ОтобразитьГрафическуюСхему(СтруктураГрафическойСхемы, ГрафическаяСхема);		
КонецПроцедуры

//!
Процедура ПересоединитьСтрелки(ИдентификаторНовый, ИдентификаторСтарый, Дерево, ГрафическаяСхема) Экспорт
	СтруктураГрафическойСхемы = ПолучитьСтруктуруНеПустойГрафическойСхемы(ГрафическаяСхема);
	СтрокаТекЭлемент = Дерево.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторНовый))[0];
	Для Каждого Элемент Из СтруктураГрафическойСхемы.Элементы Цикл
		Если Элемент._СвойстваЭлемента.Имя = ИдентификаторНовый Тогда
			ЭлементНовый = Элемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Элемент Из СтруктураГрафическойСхемы.Элементы Цикл
		Если Элемент._СвойстваЭлемента.Имя = ИдентификаторСтарый Тогда
			ИзменениеЛево = ЭлементНовый.Лево - Элемент.Лево;
			ИзменениеВерх = ЭлементНовый.Верх - Элемент.Верх;
			//ЭлементНовый.Лево = Элемент.Лево;
			//ЭлементНовый.Верх = Элемент.Верх;
			Прервать;
		КонецЕсли;
	КонецЦикла;
			
	СтрокиДетей = Дерево.НайтиСтроки(Новый Структура("Родитель2", СтрокаТекЭлемент.РодительСписок));
	Для Каждого ЭлементДетя Из СтрокиДетей Цикл
	    //Найти ее стрелку и поменять родителя
		ЭлементРебенок = ГрафическаяСхема.ЭлементыГрафическойСхемы.Найти(ЭлементДетя.Идентификатор);
		Для Каждого Элемент Из СтруктураГрафическойСхемы.Элементы Цикл
			Если ТипЗнч(Элемент._СвойстваЭлемента) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") И
					Элемент._СвойстваЭлемента.КонецЭлемент = ЭлементРебенок Тогда
				Элемент.ОткудаИдет = ЭлементНовый.СтруктураИмени.Номер;
				Элемент.Точки[0].Лево = Элемент.Точки[0].Лево + ИзменениеЛево;
				Элемент.Точки[0].Верх = Элемент.Точки[0].Верх + ИзменениеВерх;
				Прервать;
			КонецЕсли;
		КонецЦикла;		
    КонецЦикла;	
	ОтобразитьГрафическуюСхему(СтруктураГрафическойСхемы, ГрафическаяСхема);	
КонецПроцедуры

//!
Процедура ДобавитьСписокЭлементов(Дерево, ГрафическаяСхема, ВыборИзСтрок) Экспорт
	СтруктураГрафическойСхемы = ПолучитьСтруктуруНеПустойГрафическойСхемы(ГрафическаяСхема);
	СтрокиСписков = Дерево.НайтиСтроки(Новый Структура("ВыборИзСписка", "Да"));
	Для Каждого Элемент Из СтрокиСписков Цикл
		//Переименвоание динамического элемента характеризующего справочник
		Элемент.Наименование = "Новое контактное лицо";
		Для Каждого ЭлементСГС Из СтруктураГрафическойСхемы.Элементы Цикл
			Если ТипЗнч(ЭлементСГС._СвойстваЭлемента) <> Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") И
					ЭлементСГС._СвойстваЭлемента.Имя = Элемент.Идентификатор Тогда	
				ЭлементСГС.СтруктураИмени.Наименование = Элемент.Наименование;
	            Прервать;
			КонецЕсли;
		КонецЦикла;
			
		СтрокиДетей = Дерево.НайтиСтроки(Новый Структура("Родитель", Элемент.Идентификатор));
		Для Каждого ЭлементДетя Из СтрокиДетей Цикл
			ЭлементДетя.Родитель2 = ЭлементДетя.Родитель;
		КонецЦикла;
		
		//Добавление новых элементов в карту и дерево
		ТекЭлемент = ГрафическаяСхема.ЭлементыГрафическойСхемы.Найти(Элемент.Идентификатор);	
		Для Каждого ЭлементВыбор Из ВыборИзСтрок Цикл
			ДобавитьСписокЭлементов_ДобавитьЭлементСтадияВверх(Дерево, ГрафическаяСхема, СтруктураГрафическойСхемы,
					ТекЭлемент, ЭлементВыбор.Код, ЭлементВыбор.Наименование, ЭлементВыбор.Наименование,,,
					ЭлементВыбор.Ссылка);
		КонецЦикла;
	КонецЦикла;
	ОтобразитьГрафическуюСхему(СтруктураГрафическойСхемы, ГрафическаяСхема);	
КонецПроцедуры

//!
Процедура ДобавитьСписокЭлементов_ДобавитьЭлементСтадияВверх(Дерево, КартаОригинал, СтруктураГрафическойСхемы, 
		ТекЭлемент, ЭлементКод = "", ЭлементНаименование, ЭлементПодсказка = "", 
		РезультатМероприятия = Неопределено, ВыборИзСписка = "Нет", СсылкаВыбор = Неопределено)
		
	СтрокаТекЭлемента = Дерево.НайтиСтроки(Новый Структура("Идентификатор", ТекЭлемент.Имя))[0];
	//Ищем родителя текущего элемента
    РодительТекущегоЭлемента = КартаОригинал.ЭлементыГрафическойСхемы.Найти(СтрокаТекЭлемента.Родитель);
	

	СтруктураДобавленногоЭлемента = ДобавитьСписокЭлементов_СоздатьУзел(
			СтруктураГрафическойСхемы, РодительТекущегоЭлемента, КартаОригинал, 
			"ТочкаДействия", ЭлементНаименование, РаботаСГрафическойСхемой82.НаправлениеВправо(),,,
			"Стадия-" + ЭлементКод + "-", ЭлементПодсказка);
				
	//1 Найти и поправить строчку родителя
	СтрокаРодитель = Дерево.НайтиСтроки(Новый Структура("Идентификатор", 
			РодительТекущегоЭлемента.Имя))[0];
	СтрокаРодитель.КоличествоДетей = СтрокаРодитель.КоличествоДетей + 1;
	//2 Найти строку текущего элемента и получить его Номер
	//СтрокаТекЭлемента = Дерево.НайтиСтроки(Новый Структура("Идентификатор", ТекЭлемент.Имя))[0];
	//3 Перебрать всех братьев у которых Номер больще текущего и увеличить их Номер
	СтрокиБратьев = Дерево.НайтиСтроки(Новый Структура("Родитель", СтрокаРодитель.Идентификатор));
	Для Каждого Элемент Из СтрокиБратьев Цикл
		Если Элемент.Номер > СтрокаТекЭлемента.Номер Тогда
			Элемент.Номер = Элемент.Номер + 1;
		КонецЕсли;
	КонецЦикла;
	//4 Добавить новую строчку	
	НоваяСтрока = Дерево.Добавить();
	НоваяСтрока.Уровень  = СтрокаТекЭлемента.Уровень;
	НоваяСтрока.Номер    = СтрокаТекЭлемента.Номер;
	СтрокаТекЭлемента.Номер = СтрокаТекЭлемента.Номер + 1;
	НоваяСтрока.Родитель = СтрокаТекЭлемента.Родитель;
	Если СтрокаТекЭлемента.ВыборИзСписка = "Да" Тогда
		НоваяСтрока.РодительСписок = СтрокаТекЭлемента.Идентификатор;
	Иначе
		НоваяСтрока.РодительСписок = СтрокаТекЭлемента.РодительСписок;
	КонецЕсли;
	НоваяСтрока.Идентификатор = СтруктураДобавленногоЭлемента.СтруктураИмени.Идентификатор;
	НоваяСтрока.КоличествоДетей = 0;
	НоваяСтрока.Наименование = СтруктураДобавленногоЭлемента.СтруктураИмени.Наименование;
	НоваяСтрока.Ширина = СтруктураДобавленногоЭлемента.Ширина;
	НоваяСтрока.Высота = СтруктураДобавленногоЭлемента.Высота;
	НоваяСтрока.Верх   = СтруктураДобавленногоЭлемента.Верх;
	НоваяСтрока.Лево   = СтруктураДобавленногоЭлемента.Лево;		
	НоваяСтрока.РезультатМероприятия = РезультатМероприятия;
	НоваяСтрока.ВыборИзСписка = ВыборИзСписка;	
	НоваяСтрока.Выбран = Ложь;
	НоваяСтрока.СсылкаВыбор = СсылкаВыбор;
	НоваяСтрока.РезультатМероприятия = СтрокаТекЭлемента.РезультатМероприятия;
КонецПроцедуры

//! Создает новый узел ГС (добавляет через временный файл)
Функция ДобавитьСписокЭлементов_СоздатьУзел(СтруктураГрафическойСхемы, ТекущийЭлемент, ГрафическаяСхема, 
		ГрафическийЭлемент, Наименование = "", Направление = "Вправо", МассивПараметров = Неопределено, 
		ВремяЗадержки = 0, Имя = Неопределено, Подсказка = "") Экспорт  		
	ИндексТекущегоЭлемента    = ПолучитьИндексТекущегоЭлементаПоСтруктура(ТекущийЭлемент, СтруктураГрафическойСхемы);	
	Координаты                = ОпределитьКоординатыНовогоУзла(ТекущийЭлемент, ГрафическаяСхема, Направление);
	
	Если ГрафическийЭлемент = "ТочкаДействия" Тогда	
		СтруктураДобавленногоЭлемента = ДобавитьТочкуДействия(СтруктураГрафическойСхемы, Наименование, 
				Координаты.Лево, Координаты.Верх, 150, 50, Подсказка,,,,Имя);		
	ИначеЕсли ГрафическийЭлемент = "ТочкаВыбораВарианта" Тогда
		СтруктураДобавленногоЭлемента = ДобавитьВыборВарианта(СтруктураГрафическойСхемы, Наименование, 
				Координаты.Лево, Координаты.Верх, 150, 50+15*МассивПараметров.Количество());	
		НомерВарианта = 1;	
		Для Каждого ВариантВыбора Из МассивПараметров Цикл			
			ДобавитьВариантВВыборВарианта(СтруктураДобавленногоЭлемента, "Вариант"+Строка(НомерВарианта), 
					ВариантВыбора);
			НомерВарианта = НомерВарианта + 1;
		КонецЦикла;	  
		ОтрисовкаЛинийДляТелефонныйЗвонокИсходящий(ГрафическаяСхема,СтруктураГрафическойСхемы,
				СтруктураДобавленногоЭлемента);	  
	Иначе		
		СтруктураДобавленногоЭлемента = ДобавитьДекорацию(СтруктураГрафическойСхемы, Наименование, 
				Координаты.Лево, Координаты.Верх, Координаты.Ширина, Координаты.Высота);	
    Конецесли;
		
	НомерДобавленногоЭлемента = СтруктураДобавленногоЭлемента.СтруктураИмени.Номер;
	
	ИндексДляОтрисовки = ИндексТекущегоЭлемента;		
	ВарДляОтрисовки = -1;
	КоординатыЛинии = ОпределитьКоординатыЛинии(ТекущийЭлемент, Координаты, Направление);	
	УдалитьПредыдЛинию = Ложь;
	Удалять = Истина;
	НачСтрононана = КоординатыЛинии.НачалоСторона;
                                                                            	                                                    	
	Если ТипЗнч(ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") И 
			ТипЗнч(ТекущийЭлемент.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыВыборВарианта") Тогда			
	 	ДекоративнаяЛиния = Новый Структура;
		ТекущийЭлементЛево = ТекущийЭлемент.КонецЛево;
	 	ТекущийЭлементВерх = ТекущийЭлемент.КонецВерх;			
		
		Ширина = ТекущийЭлементЛево;// - ТекущийЭлемент.НачалоЛево;
		Высота = ТекущийЭлементВерх;// - ТекущийЭлемент.НачалоВерх;		
		Если Ширина < 0 Тогда
			Ширина = - Ширина;
		КонецЕсли; 			 
		Если Высота < 0 Тогда
			Высота = - Высота;  
		КонецЕсли; 
			
		ТекущийЭлементШирина =  Ширина;
		ТекущийЭлементВысота = Высота;
			
		ДекоративнаяЛиния.Вставить("Лево",ТекущийЭлементЛево-20);
		ДекоративнаяЛиния.Вставить("Верх",ТекущийЭлементВерх);
		ДекоративнаяЛиния.Вставить("Ширина",0);
	   	ДекоративнаяЛиния.Вставить("Высота",0);

	    ИндексДляОтрисовки = ПолучитьИндексТекущегоЭлемента(ТекущийЭлемент.НачалоЭлемент, ГрафическаяСхема);	 		
	    КоординатыЛинии    = ОпределитьКоординатыЛинии(ДекоративнаяЛиния, Координаты, Направление);
	    УдалитьПредыдЛинию = Истина;
		СчетчВыборки = 0;
		Для каждого Вар Из ТекущийЭлемент.НачалоЭлемент.Элементы Цикл
			Если Вар.Наименование = ТекущийЭлемент.НачалоВариант.Наименование Тогда
				НомерВар = СчетчВыборки;
				Прервать;			
			КонецЕсли; 
			СчетчВыборки = СчетчВыборки+1;
		КонецЦикла;
	   	   
	    ВарДляОтрисовки = НомерВар;
	    НачСтрононана = 7 + 2*НомерВар;
		Удалять = Ложь;
	КонецЕсли; 
	
	Если ТипЗнч(ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") и 
			ТипЗнч(ТекущийЭлемент.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыДействие") Тогда	
		ДекоративнаяЛиния = Новый Структура;
		ТекущийЭлементЛево = ТекущийЭлемент.КонецЛево;
	 	ТекущийЭлементВерх = ТекущийЭлемент.НачалоВерх;
			
		Ширина = ТекущийЭлементЛево;// - ТекущийЭлемент.НачалоЛево;
		Высота = ТекущийЭлементВерх;// - ТекущийЭлемент.НачалоВерх;	
		Если Ширина < 0 Тогда
			Ширина = - Ширина;
		КонецЕсли; 		 
		Если Высота < 0 Тогда
			Высота = - Высота;  
		КонецЕсли; 
				
		ТекущийЭлементШирина = Ширина;
		ТекущийЭлементВысота = Высота;
			
		ДекоративнаяЛиния.Вставить("Лево", ТекущийЭлементЛево);
		ДекоративнаяЛиния.Вставить("Верх", ТекущийЭлементВерх);
		ДекоративнаяЛиния.Вставить("Ширина", 0);
	   	ДекоративнаяЛиния.Вставить("Высота", 0);

	    ИндексДляОтрисовки = ПолучитьИндексТекущегоЭлементаПоСтруктура(ТекущийЭлемент.НачалоЭлемент, 
				СтруктураГрафическойСхемы)+1;	 		
	    КоординатыЛинии    = ОпределитьКоординатыЛинии(ДекоративнаяЛиния, Координаты, Направление);
	    УдалитьПредыдЛинию = Истина;	   
	    ВарДляОтрисовки = -1;    
	    Удалять = Ложь; 	
	КонецЕсли; 
		
	///  ИА: изменить со свободной линии на соед	
	Если Удалять = Истина Тогда		
		СтруктураЛинии = ДобавитьЛинию(СтруктураГрафическойСхемы, , , ИндексДляОтрисовки + 1, 
				НомерДобавленногоЭлемента, НачСтрононана, КоординатыЛинии.КонецСторона, , , , Ложь,,
				ВарДляОтрисовки,ВремяЗадержки);    	
	    ПровестиЛиниюМеждуТочками(СтруктураЛинии, КоординатыЛинии.НачалоЛево, КоординатыЛинии.НачалоВерх, 
				КоординатыЛинии.КонецЛево, КоординатыЛинии.КонецВерх);
		
		НачВар = СтруктураЛинии.НачалоВарианта;
		ОткВыходит = СтруктураЛинии.ОткудаИдет;
 		
		Если УдалитьПредыдЛинию = Истина Тогда			
			МассивЭлементов = СтруктураГрафическойСхемы.Элементы;
			Для Каждого Элемент Из МассивЭлементов Цикл	
				Если Найти(Элемент.СтруктураИмени.Идентификатор, "Линия") > 0 И Элемент.ОткудаИдет = ОткВыходит И 
						Элемент.НачалоВарианта = НачВар Тогда	
					ИндексУдал = МассивЭлементов.Найти(Элемент);
					МассивЭлементов.Удалить(ИндексУдал);
					Прервать;
				КонецЕсли; 	
			КонецЦикла; 	
		КонецЕсли; 	
	Иначе 		
		МассивЭлементов = СтруктураГрафическойСхемы.Элементы;	
		Для каждого Элемент Из МассивЭлементов Цикл		
			Если ТекущийЭлемент.Имя =  Элемент.СтруктураИмени.Идентификатор тогда
				Элемент.КудаИдет = НомерДобавленногоЭлемента;
				Элемент.Точки[1].Верх = Элемент.Точки[1].Верх + 40;
				Элемент.Точки[1].Лево = Элемент.Точки[1].Лево + СтруктураДобавленногоЭлемента.Ширина/2;
			КонецЕсли;
		КонецЦикла;   
    КонецЕсли;
	
	Возврат СтруктураДобавленногоЭлемента;
КонецФункции

//!!
Функция ДобавитьЭлементКонец(ГрафическаяСхема, Наименование = "Конец") Экспорт
	СтруктураГрафическойСхемы = ПолучитьСтруктуруНеПустойГрафическойСхемы(ГрафическаяСхема);
	Результат = ДобавитьОкончание(СтруктураГрафическойСхемы, Наименование, 20, 20, 100, 50);
	ОтобразитьГрафическуюСхему(СтруктураГрафическойСхемы, ГрафическаяСхема); 
	Возврат Результат;
КонецФункции

//!!
Функция СоздатьУзелВариант(ТекущийЭлемент, ГрафическаяСхема, Наименование = "", Направление = "Вправо", 
		МассивПараметров = Неопределено, Имя = Неопределено, Подсказка = "") Экспорт  		
	//ИндексТекущегоЭлемента    = ПолучитьИндексТекущегоЭлементаПоСтруктура(ТекущийЭлемент, ГрафическаяСхема);
	СтруктураГрафическойСхемы = ПолучитьСтруктуруНеПустойГрафическойСхемы(ГрафическаяСхема);
	ИндексТекущегоЭлемента    = ПолучитьИндексТекущегоЭлементаПоСтруктура(ТекущийЭлемент, СтруктураГрафическойСхемы);	
	Координаты                = ОпределитьКоординатыНовогоУзла(ТекущийЭлемент, ГрафическаяСхема, Направление);
		
	Если МассивПараметров = Неопределено Тогда
		МассивПараметров = Новый Массив();
	КонецЕсли;
		
	СтруктураДобавленногоЭлемента = ДобавитьВыборВарианта(СтруктураГрафическойСхемы, "Стадия", 
			Координаты.Лево, Координаты.Верх, 150, Макс(46 + 18 * МассивПараметров.Количество(), 64), Подсказка,, Имя);
	СтруктураДобавленногоЭлемента.СтруктураИмени.Наименование = Наименование;		
				
	НомерВарианта = 1;	
	Для Каждого ВариантВыбора Из МассивПараметров Цикл			
		ДобавитьВариантВВыборВарианта(СтруктураДобавленногоЭлемента, "Вариант" + Строка(НомерВарианта), 
				ВариантВыбора);
		НомерВарианта = НомерВарианта + 1;
	КонецЦикла;	  
	//ОтрисовкаЛинийДляТелефонныйЗвонокИсходящий(ГрафическаяСхема,СтруктураГрафическойСхемы,
	//		СтруктураДобавленногоЭлемента);	  
				
	ОтобразитьГрафическуюСхему(СтруктураГрафическойСхемы, ГрафическаяСхема);		
	Возврат СтруктураДобавленногоЭлемента;
КонецФункции

//!!
Функция СоздатьСумматор(ГрафическаяСхема) Экспорт 
	СтруктураГрафическойСхемы = ПолучитьСтруктуруНеПустойГрафическойСхемы(ГрафическаяСхема);
	СтруктураДекорации = ДобавитьДекорацию(СтруктураГрафическойСхемы, "Слияние", 20, 20, 80, 40);
	ОтобразитьГрафическуюСхему(СтруктураГрафическойСхемы, ГрафическаяСхема);
	Возврат СтруктураДекорации;
КонецФункции

//!!
Функция ИзменитьЭлемент(ГрафическаяСхема, Идентификатор, Наименование = Неопределено, 
		МассивПараметров = Неопределено, Подсказка = Неопределено) Экспорт  		
	СтруктураГрафическойСхемы = ПолучитьСтруктуруНеПустойГрафическойСхемы(ГрафическаяСхема);
	Для Каждого Элемент Из СтруктураГрафическойСхемы.Элементы Цикл
		Если Элемент.СтруктураИмени.Идентификатор = Идентификатор Тогда
			Если Наименование <> Неопределено Тогда
				Элемент.СтруктураИмени.Наименование = Наименование;
			КонецЕсли;		
			Если Подсказка <> Неопределено Тогда
				Элемент.СтруктураОтрисовки.Подсказка = Подсказка;
			КонецЕсли;
			
			Если МассивПараметров <> Неопределено Тогда
				Элемент.Высота = Макс(46 + 18 * МассивПараметров.Количество(), 64);
				Элемент.Варианты.Очистить();
				НомерВарианта = 1;	
				Для Каждого ВариантВыбора Из МассивПараметров Цикл			
					ДобавитьВариантВВыборВарианта(Элемент, "Вариант" + Строка(НомерВарианта), ВариантВыбора,);
					НомерВарианта = НомерВарианта + 1;
				КонецЦикла;
				//Поправка исходящих и входящих линий
				Для Каждого ЭлементГС Из СтруктураГрафическойСхемы.Элементы Цикл
					Если //ТипЗнч(ЭлементГС._СвойстваЭлемента) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") ИЛИ
							ТипЗнч(ЭлементГС._СвойстваЭлемента) = Тип("ЭлементГрафическойСхемыДекоративнаяЛиния") Тогда
						Если ЭлементГС._СвойстваЭлемента.НачалоЭлемент = Элемент._СвойстваЭлемента И 
								ЭлементГС.ОткудаВыходитЛиния > 5 + 2 * МассивПараметров.Количество() Тогда
							ЭлементГС.ОткудаВыходитЛиния = 1 + ЭлементГС.ОткудаВыходитЛиния % 2 * 2;
						КонецЕсли;	
						Если ЭлементГС._СвойстваЭлемента.КонецЭлемент = Элемент._СвойстваЭлемента И 
								ЭлементГС.КудаВходитЛиния > 5 + 2 * МассивПараметров.Количество() Тогда
							ЭлементГС.КудаВходитЛиния = 1 + ЭлементГС.КудаВходитЛиния % 2 * 2;	
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	ОтобразитьГрафическуюСхему(СтруктураГрафическойСхемы, ГрафическаяСхема);		
	Возврат Элемент;
КонецФункции

//!!
Функция СоздатьЛинию(ГрафическаяСхема) Экспорт
	СтруктураГрафическойСхемы = ПолучитьСтруктуруНеПустойГрафическойСхемы(ГрафическаяСхема);
	СтруктураЛинии = ДобавитьЛинию(СтруктураГрафическойСхемы,,,,,,,,,,,,,,);  
	ПровестиЛиниюМеждуТочками(СтруктураЛинии, 20, 20, 20, 400);
	ОтобразитьГрафическуюСхему(СтруктураГрафическойСхемы, ГрафическаяСхема);
	Возврат СтруктураЛинии;
КонецФункции

//!!
Процедура СоздатьСтарт(ГрафическаяСхема) Экспорт
	СтруктураГрафическойСхемы = ПолучитьСтруктуруНеПустойГрафическойСхемы(ГрафическаяСхема);
	ДобавитьСтарт(СтруктураГрафическойСхемы, "Старт", 20, 20, 100, 50,,, "Старт--1");
	ОтобразитьГрафическуюСхему(СтруктураГрафическойСхемы, ГрафическаяСхема); 		
КонецПроцедуры

//!! 
Процедура УдалитьЭлементБП(Идентификатор, ГрафическаяСхема) Экспорт
	СтруктураГрафическойСхемы = ПолучитьСтруктуруНеПустойГрафическойСхемы(ГрафическаяСхема);
	ИндексЭлемента = 0;
	Для Каждого Элемент Из СтруктураГрафическойСхемы.Элементы Цикл
		Если Элемент.СтруктураИмени.Идентификатор = Идентификатор Тогда
			Для Каждого ЭлементГС Из СтруктураГрафическойСхемы.Элементы Цикл
				Если ТипЗнч(ЭлементГС._СвойстваЭлемента) = Тип("ЭлементГрафическойСхемыДекоративнаяЛиния") Тогда
					Если ЭлементГС._СвойстваЭлемента.НачалоЭлемент = Элемент._СвойстваЭлемента Тогда
						ЭлементГС.ОткудаИдет = -1;
						ЭлементГС.ОткудаВыходитЛиния = -1;
					КонецЕсли;
					Если ЭлементГС._СвойстваЭлемента.КонецЭлемент = Элемент._СвойстваЭлемента Тогда 
						ЭлементГС.КудаИдет = -1;
						ЭлементГС.КудаВходитЛиния = -1;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;			
			Номер = Элемент.СтруктураИмени.Номер;
			СтруктураГрафическойСхемы.Элементы.Удалить(ИндексЭлемента);	
			Прервать;
		КонецЕсли;
		ИндексЭлемента = ИндексЭлемента + 1;
	КонецЦикла;					
	ОтобразитьГрафическуюСхему(СтруктураГрафическойСхемы, ГрафическаяСхема);
КонецПроцедуры

//!!
Процедура ИзменитьНаименование(Идентификатор, Наименование, ГрафическаяСхема) Экспорт
	СтруктураГрафическойСхемы = ПолучитьСтруктуруНеПустойГрафическойСхемы(ГрафическаяСхема);
	Для Каждого Элемент Из СтруктураГрафическойСхемы.Элементы Цикл
		Если Элемент.СтруктураИмени.Идентификатор = Идентификатор Тогда
			Элемент.СтруктураИмени.Наименование = Наименование;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ОтобразитьГрафическуюСхему(СтруктураГрафическойСхемы, ГрафическаяСхема); 		
КонецПроцедуры

// Возвращает версию конфигурации в числовом шестнадцатизначном виде.
// Например: 1.6.10.22 --> 1000 6000 1000 2200 (без пробелов)
//
Функция ВерсияКонфигурацииЧисло(Знач Версия) Экспорт
	ВерсияСтроковая = "";
	Версия = Версия + ".";
	КоличествоРазделителей = СтрЧислоВхождений(Версия, ".");
	Для й = 1 По КоличествоРазделителей Цикл
		Если СтрДлина(Лев(Версия, Найти(Версия, ".")-1)) = 1 Тогда
			ВерсияСтроковая = ВерсияСтроковая + "000" + Лев(Версия, Найти(Версия, ".")-1);
		ИначеЕсли СтрДлина(Лев(Версия, Найти(Версия, ".")-1)) = 2 Тогда
			ВерсияСтроковая = ВерсияСтроковая + "00" + Лев(Версия, Найти(Версия, ".")-1);
		ИначеЕсли СтрДлина(Лев(Версия, Найти(Версия, ".")-1)) = 3 Тогда
			ВерсияСтроковая = ВерсияСтроковая + "0" + Лев(Версия, Найти(Версия, ".")-1);
		КонецЕсли;
		Версия = Сред(Версия, Найти(Версия, ".")+1);
	КонецЦикла;
	
	Возврат(Число(ВерсияСтроковая));
КонецФункции

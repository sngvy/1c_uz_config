
&НаКлиенте
Перем обКонтроллерАТС;

&НаКлиенте
Перем ИнтервалОбновления;

&НаКлиенте
Перем Хост;

// Тип - Соответствие (Map)
// ключ - строка - номер телефона
// значение - любое значение
// Используется для избегания двойного создания событий.
&НаКлиенте
Перем СоотвРазговоры;

// Тип - Соответствие (Map)
// ключ - строка - имя канала
// значение - структура из свойств звонка
// Используется для записи в историю звонков.
&НаКлиенте
Перем СоотвКаналы;

// Тип - Соответствие (Map)
//  ключ - строка-номер телефона,
//  значение - структура из трех полей (КонтрагентСсылка, КонтактноеЛицоСсылка, Обновлен).
&НаКлиенте
Перем кэшКонтактов;

// Тип - Соответствие (Map)
// ключ - внутренний номер, значение - Строка, имя внутреннего абонента.
&НаКлиенте
Перем СоответствиеНомеровХоста;


///////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Функция ИмяИсточникаСобытий()
	Возврат "БИТ.МониторАТС";
КонецФункции

&НаКлиенте
Процедура ОбновитьДоступность()
	Элементы.ПодключитьАТС.Доступность		= НЕ Подключен;
	Элементы.ОтключитьАТС.Доступность		= Подключен;
	Элементы.ГруппаНаборНомера.Доступность	= Подключен;
	
	Если бит_ТелефонияСерверПереопределяемый.ПолучитьФлагБлокироватьВводНомераБитМонитор() Тогда
		Элементы.Номер.Доступность = Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовок()
	стрЗаголовок = "БИТ.Phone (монитор БИТ.АТС)";
	Если ЗначениеЗаполнено(НомерСвязанногоТелефона) Тогда
		стрЗаголовок = стрЗаголовок + " - " + НомерСвязанногоТелефона;
	КонецЕсли;
	Заголовок = стрЗаголовок;
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьАТС(Команда)
	ПодключитьВК();
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьАТС(Команда)
	Отключить();
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьВК()
	Если обКонтроллерАТС <> Неопределено Тогда
		обКонтроллерАТС = Неопределено;
	КонецЕсли;
	бит_АТСКлиент.ПодключениеКомпонентыУправлениеАТС("БитфонМониторБИТАТС_ПодключениеВнешнейКомпоненты");
КонецПроцедуры

&НаКлиенте
Процедура Подключить()
	
	Попытка
		
		бит_АТСКлиент.УстановитьПараметрыПроверкиЛицензии(обКонтроллерАТС, Истина);
		
		ТекущаяАТС = бит_АТССервер.ПолучитьАТС();
		
		Если НЕ ЗначениеЗаполнено(ТекущаяАТС) Тогда
			бит_ТелефонияКлиент.ВывестиСообщение("Не задана АТС для подключения в настройках", ЭтаФорма);
			Возврат;
		КонецЕсли;
		
		НомерСвязанногоТелефона = бит_АТССервер.ПолучитьНомерСвязанногоТелефона();
		Если НЕ ЗначениеЗаполнено(НомерСвязанногоТелефона) Тогда
			бит_ТелефонияКлиент.ВывестиСообщение("Не задан номер связанного телефона в настройках", ЭтаФорма);
			Возврат;
		КонецЕсли;
		ОбновитьЗаголовок();
		
		ИнтервалОбновления = бит_АТССервер.ПолучитьИнтервалОбновления();
		Если ИнтервалОбновления = 0 Тогда
			бит_ТелефонияКлиент.ВывестиСообщение("Не задан интервал обновления в настройках, принимается 5 сек", ЭтаФорма);
			ИнтервалОбновления = 5;
		КонецЕсли;
		
		СписокНомеровХоста = "";
		Хост = бит_АТССервер.ПолучитьПараметрыАТС(ТекущаяАТС, СписокНомеровХоста, СоответствиеНомеровХоста);
		
		обКонтроллерАТС.Connect(Хост.Адрес, Хост.Пользователь, Хост.Пароль, СписокНомеровХоста);
		
		Подключен = обКонтроллерАТС.IsConnected;
		
		ВосстановлениеПодключения = НЕ Подключен;
	
		ОбновитьДоступность();
		
		ЗапуститьТаймерОбновления(1);
		
	Исключение
		
		бит_ТелефонияКлиент.ВывестиСообщение( "Ошибка подключения к АТС '" + Строка(ТекущаяАТС) + "'", ЭтаФорма );
		бит_ТелефонияКлиент.ВывестиСообщение( ОписаниеОшибки(), ЭтаФорма );
	
	КонецПопытки;
	
	ЗаполнитьИсториюЗвонков();
	
	Если ЗначениеЗаполнено(ПриПодключенииДействие) Тогда
		Оповестить(ПриПодключенииДействие, ПриПодключенииПараметр);
		ПриПодключенииДействие = "";
		ПриПодключенииПараметр = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отключить()
	
	ОстановитьТаймерОбновления();
	
	Попытка
		
		обКонтроллерАТС.Disconnect();
		
		Подключен = обКонтроллерАТС.IsConnected;
		
	Исключение
		
		бит_ТелефонияКлиент.ВывестиСообщение( "Ошибка отключения от АТС", ЭтаФорма );
		бит_ТелефонияКлиент.ВывестиСообщение( ОписаниеОшибки(), ЭтаФорма );
		Подключен = Ложь;
		
	КонецПопытки;
	
	СостояниеСвязанногоТелефона = "";
	
	ОбновитьДоступность();
	
	НомерСвязанногоТелефона = "";
	ОбновитьЗаголовок();
	
	ТекущаяАТС = ПредопределенноеЗначение("Справочник.бит_ТелефонныеСтанцииБитАТС.ПустаяСсылка");
	
	Хост = Неопределено;
	
	СоответствиеНомеровХоста = Неопределено;
	
	Звонки.Очистить();
	
	СоотвРазговоры.Очистить();
	
	СоотвКаналы.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	бит_АТСКлиент.ОткрытьФормуНастроек(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СоотвРазговоры		= Новый Соответствие;
	СоотвКаналы			= Новый Соответствие;
	кэшКонтактов		= Новый Соответствие;
	
	ОбновитьДоступность();
		
	ПодключитьВК();
		
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьТаймерОбновления(Таймаут)
	ПодключитьОбработчикОжидания("ОбновитьСтатусСвязанногоНомера", Таймаут, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОстановитьТаймерОбновления()
	ОтключитьОбработчикОжидания("ОбновитьСтатусСвязанногоНомера");
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусСвязанногоНомера()
	
	Попытка
		
		бит_АТСКлиент.ОчиститьФлагОбновленВсегоКэшаКонтактов(кэшКонтактов);
		
		стрХмл = обКонтроллерАТС.GetExtensionStatusAndChannels(НомерСвязанногоТелефона);
		
		чтение = Новый ЧтениеXML();
		чтение.УстановитьСтроку(стрХмл);
		
		дом = Новый ПостроительDOM();
		докХмл = дом.Прочитать(чтение);
		
		//
		списокЭкстенш = докХмл.ПолучитьЭлементыПоИмени("/ChannelsInfo/Extensions", "Extension_" + НомерСвязанногоТелефона);
		обЭкстенш = списокЭкстенш[0];
		СтатусНомера = Число(обЭкстенш.ПолучитьАтрибут("status"));
		
		Если СтатусНомера = -1 ИЛИ СтатусНомера = -2 Тогда
			СостояниеСвязанногоТелефона = "не найден";
		ИначеЕсли СтатусНомера = 0 Тогда
			СостояниеСвязанногоТелефона = "свободен";
		ИначеЕсли СтатусНомера = 1 Тогда
			СостояниеСвязанногоТелефона = "разговаривает";
		ИначеЕсли СтатусНомера = 2 Тогда
			СостояниеСвязанногоТелефона = "не беспокоить (DND)";
		ИначеЕсли СтатусНомера = 4 Тогда
			СостояниеСвязанногоТелефона = "не зарегистрирован на АТС";
		ИначеЕсли СтатусНомера = 8 Тогда
			СостояниеСвязанногоТелефона = "входящий звонок";
		ИначеЕсли СтатусНомера = 9 Тогда
			СостояниеСвязанногоТелефона = "разговаривает + входящий звонок";
		ИначеЕсли СтатусНомера = 16 Тогда
			СостояниеСвязанногоТелефона = "удержание";
		ИначеЕсли СтатусНомера = 17 Тогда
			СостояниеСвязанногоТелефона = "разговаривает + удержание";
		КонецЕсли;
		
		СостояниеСвязанногоТелефона = СостояниеСвязанногоТелефона + " (" + Строка(СтатусНомера) + ")";
		
		ИндексТекущейСтрокиЗвонков = Звонки.Индекс(Элементы.Звонки.ТекущиеДанные);
		
		Звонки.Очистить();
		
		списокАккаунтовЭкстенш = обЭкстенш.ПолучитьЭлементыПоИмени("SIPLogins", "SIPLogin");
		
		колвоАккаунтовНомера = списокАккаунтовЭкстенш.Количество();
		
		Для йАккаунт=0 По (колвоАккаунтовНомера-1) Цикл
			//
			обАккаунтЭкстенш = списокАккаунтовЭкстенш[йАккаунт];
			//
			СипУстройствоНомера	= обАккаунтЭкстенш.ПолучитьАтрибут("value");
			//
			// статус - входящий звонок, разговаривает или удержание
			списокЗвонковАккаунта = обАккаунтЭкстенш.ПолучитьЭлементыПоИмени("Channel");
			колвоЗвонковАккаунта = списокЗвонковАккаунта.Количество();
			//
			Для йЗвонокАккаунта=0 По (колвоЗвонковАккаунта-1) Цикл
				//
				обЗвонокАккаунта = списокЗвонковАккаунта[йЗвонокАккаунта];

				ВходящийЗвонок				= Булево(Число(обЗвонокАккаунта.ПолучитьАтрибут("Incoming")));
				
				НаправлениеЗвонка = ? ( ВходящийЗвонок, "входящий", "исходящий");
				
				ВнешнийВызов			= Ложь;
				СоединениеНомера		= обЗвонокАккаунта.ПолучитьАтрибут("BridgetNum");
				Если СоединениеНомера = "(connecting)" Тогда
					СоединениеНомера = "соединение...";
				Иначе
					СоединениеНомера = бит_АТСКлиент.СократитьНомер(СоединениеНомера, ВнешнийВызов);
				КонецЕсли;
				
				ДлительностьРазговора	= обЗвонокАккаунта.ПолучитьАтрибут("Duration");
				
				ЕстьСоединение			= Булево(Число(обЗвонокАккаунта.ПолучитьАтрибут("HasPair")));
				
				ИмяКанала				= обЗвонокАккаунта.ПолучитьАтрибут("Name");
				ИмяСвязанногоКанала		= обЗвонокАккаунта.ПолучитьАтрибут("BridgetName");
				
				//
				строкаЗвонок = Звонки.Добавить();
				строкаЗвонок.Аккаунт		= СипУстройствоНомера;
				строкаЗвонок.Направление	= НаправлениеЗвонка;
				строкаЗвонок.Входящий		= ВходящийЗвонок;
				строкаЗвонок.Соединен		= СоединениеНомера;
				строкаЗвонок.Длительность	= ДлительностьРазговора;
				строкаЗвонок.ЕстьСоединение	= ЕстьСоединение;
				строкаЗвонок.Канал			= ИмяКанала;
				строкаЗвонок.СвязКанал		= ИмяСвязанногоКанала;
				//
				КонтрагентСсылка = Неопределено;
				КонтактноеЛицоСсылка = Неопределено;
				бит_АТСКлиент.СократитьНомерНайтиКонтрагента(кэшКонтактов, СоответствиеНомеровХоста, СоединениеНомера, КонтрагентСсылка, КонтактноеЛицоСсылка);
				строкаЗвонок.Контрагент		= КонтрагентСсылка;
				строкаЗвонок.КонтактноеЛицо	= КонтактноеЛицоСсылка;

			КонецЦикла;
		КонецЦикла;
		
		бит_АТСКлиент.УдалитьНеобновленныеКонтактыИзКэша(кэшКонтактов);
		
		Если (ИндексТекущейСтрокиЗвонков >= 0) И (ИндексТекущейСтрокиЗвонков < Звонки.Количество()) Тогда
			ВыделеннаяСтрока = Звонки[ИндексТекущейСтрокиЗвонков];
			Элементы.Звонки.ТекущаяСтрока = ВыделеннаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
		// входящий звонок
		Если (Цел(СтатусНомера / 8) % 2) = 1 Тогда
			ТекстЗаголовка = "Вас вызывает номер ";
			Текст = "";
			Для Каждого строкаЗвонок ИЗ Звонки Цикл
				Если строкаЗвонок.Входящий И (НЕ строкаЗвонок.ЕстьСоединение) Тогда
					Если ЗначениеЗаполнено(Текст) Тогда // не первый входящий звонок
						ТекстЗаголовка = ТекстЗаголовка + ", ";
						Текст = Текст + Символы.ПС + Символы.ВК;
					КонецЕсли;
					//
					ТекстЗаголовка = ТекстЗаголовка + строкаЗвонок.Соединен;
					Текст = Текст + Строка(строкаЗвонок.Контрагент);
					Если ЗначениеЗаполнено(строкаЗвонок.КонтактноеЛицо) Тогда
						Текст = Текст + " (" + Строка(строкаЗвонок.КонтактноеЛицо) + ")";
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(Текст) Тогда
				ПоказатьОповещениеПользователя(ТекстЗаголовка, , Текст);
			КонецЕсли;
		КонецЕсли;

		// создание событий и запись в историю
		Для Каждого строкаЗвонок ИЗ Звонки Цикл
			//
			флагВходящий	= строкаЗвонок.Входящий;
			НомерЗвонка		= строкаЗвонок.Соединен;
			КаналЗвонка		= строкаЗвонок.Канал;
			//
			СоотвРазговор = СоотвРазговоры.Получить(НомерЗвонка);
			Если СоотвРазговор = Неопределено и строкаЗвонок.ЕстьСоединение Тогда
				//
				// начался новый разговор
				//
				// создать событие
				//
				
				урлЗаписиРазговора = "";
				
				ИмяКанала				= строкаЗвонок.Канал;
				ИмяСвязанногоКанала		= строкаЗвонок.СвязКанал;
				ХэшЗаписи	= обКонтроллерАТС.GetRecordHash(ИмяКанала, флагВходящий, ИмяСвязанногоКанала);
				//
				Если ЗначениеЗаполнено(ХэшЗаписи) Тогда
					урлЗаписиРазговора = "http://" + Хост.Адрес + "/services/getrecord.php?id=" + ХэшЗаписи;
				КонецЕсли;
				строкаЗвонок.ЗаписьРазговора = урлЗаписиРазговора;
				
				флагСоздаватьСобытие = Ложь;
				
				Если флагВходящий Тогда
					флагСоздаватьСобытие = бит_АТССервер.ПолучитьФлагСоздаватьСобытиеВходящийЗвонок();
				Иначе
					флагСоздаватьСобытие = бит_АТССервер.ПолучитьФлагСоздаватьСобытиеИсходящийЗвонок();
				КонецЕсли;
				
				Если флагСоздаватьСобытие Тогда
					длинаНомера = СтрДлина(НомерЗвонка);
					длинаВнешнегоНомера = бит_ТелефонияКлиентСервер.ПолучитьДлинуВнешнегоНомера();
					создаватьСобытияПриВнутреннихЗвонках = бит_АТССервер.ПолучитьФлагСоздаватьСобытияПриВнутреннихЗвонках();
					Если создаватьСобытияПриВнутреннихЗвонках ИЛИ длинаНомера >= длинаВнешнегоНомера Тогда
						//Боевкин 
						
						Если ФлагВходящий Тогда
							ссылкаСобытие = бит_ТелефонияСерверПереопределяемый.СоздатьСобытиеЗвонка(флагВходящий, строкаЗвонок.Контрагент,
							НомерЗвонка, строкаЗвонок.КонтактноеЛицо, урлЗаписиРазговора);
							бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуДокументаСобытие(ссылкаСобытие);
						Иначе
							//Если ЭтаФорма.ВладелецФормы <> Неопределено И ЭтаФорма.ВладелецФормы.ИмяФормы <> "Справочник.ДолговыеОбязательства.Форма.ФормаЭлемента" И ЭтаФорма.ВладелецФормы.ИмяФормы <> "Справочник.Контрагенты.Форма.ФормаЭлемента" Тогда
							Если ЭтаФорма.ФормаМероприятие <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
								бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуМероприятия(ЭтаФорма.ФормаМероприятие, урлЗаписиРазговора);
							Иначе
								ссылкаСобытие = бит_ТелефонияСерверПереопределяемый.СоздатьСобытиеЗвонка(флагВходящий, строкаЗвонок.Контрагент,
								НомерЗвонка, строкаЗвонок.КонтактноеЛицо, урлЗаписиРазговора);
								бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуДокументаСобытие(ссылкаСобытие);					
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				//
				// добавить в соответствие
				СоотвРазговоры.Вставить(НомерЗвонка, НомерЗвонка);
			КонецЕсли;
			
			// каналы
			соотвКанал = СоотвКаналы.Получить(КаналЗвонка);
			Если соотвКанал = Неопределено Тогда
				инфКанала = Новый Структура("Входящий, Длительность, Соединен, ЕстьСоединение, "
								"Контрагент, КонтактноеЛицо, НабранныйНомер, ЗаписьРазговора");
				ЗаполнитьЗначенияСвойств(инфКанала, строкаЗвонок);
				//
				НабранныйНомер = "";
				Если флагВходящий Тогда
					НабранныйНомер = обКонтроллерАТС.GetDestination(ИмяКанала);
					НаименованиеНабранногоНомера = бит_ТелефонияСервер.ПолучитьНаименованиеНабранногоНомера(НабранныйНомер);
					строкаЗвонок.НабранныйНомер	= НаименованиеНабранногоНомера;
					инфКанала.НабранныйНомер	= НаименованиеНабранногоНомера;
				КонецЕсли;
				
				// добавить в соответствие
				СоотвКаналы.Вставить(КаналЗвонка, инфКанала);
			Иначе
				//
				// обновить информацию о звонке
				//
				соотвКанал.Длительность		= строкаЗвонок.Длительность;
				//
				Если строкаЗвонок.ЕстьСоединение Тогда
					соотвКанал.ЕстьСоединение = строкаЗвонок.ЕстьСоединение;
				КонецЕсли;
				//
				Если ЗначениеЗаполнено(строкаЗвонок.ЗаписьРазговора) Тогда
					соотвКанал.ЗаписьРазговора = строкаЗвонок.ЗаписьРазговора;
				КонецЕсли;
				//
				Если ЗначениеЗаполнено(строкаЗвонок.Соединен) И (соотвКанал.Соединен <> строкаЗвонок.Соединен) Тогда
					соотвКанал.Соединен			= строкаЗвонок.Соединен;
					соотвКанал.Контрагент		= строкаЗвонок.Контрагент;
					соотвКанал.КонтактноеЛицо	= строкаЗвонок.КонтактноеЛицо;
					//
					соотвКанал.Входящий = строкаЗвонок.Входящий;
				КонецЕсли;
				//
				строкаЗвонок.НабранныйНомер = соотвКанал.НабранныйНомер;
			КонецЕсли;
			
		КонецЦикла;
		
		// очистка и сохранение в историю звонков
		Если Звонки.Количество() = 0 И
			(СтатусНомера<=0 ИЛИ СтатусНомера=2 ИЛИ СтатусНомера=4)
			Тогда
			
			Для Каждого соотвКанал Из СоотвКаналы Цикл
				инфКанала = соотвКанал.Значение;
				ДобавитьВИсториюЗвонков( НомерСвязанногоТелефона,
									инфКанала.Входящий,
									инфКанала.Соединен,
									инфКанала.Контрагент,
									инфКанала.КонтактноеЛицо,
									инфКанала.ЕстьСоединение,
									инфКанала.Длительность,
									инфКанала.НабранныйНомер,
									инфКанала.ЗаписьРазговора
									);
									
			КонецЦикла;
			Если СоотвКаналы.Количество() > 0 Тогда
				СоотвКаналы.Очистить();
				ЗаполнитьИсториюЗвонков();
				Номер = "";
			КонецЕсли;
			
			СоотвРазговоры.Очистить();
			
		КонецЕсли;
		
	Исключение
		
		стрОписаниеИсключения = ОписаниеОшибки();
		бит_ТелефонияКлиент.ВывестиСообщение(стрОписаниеИсключения, ЭтаФорма );
		
	КонецПопытки;
	
	//
	
	Если обКонтроллерАТС.IsConnected Тогда
		
		ЗапуститьТаймерОбновления(ИнтервалОбновления);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗвонкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СсылкаТекущ = Неопределено;
	Если Поле.Имя = "ЗвонкиКонтрагент" Тогда
		СсылкаТекущ = Элементы.Звонки.ТекущиеДанные.Контрагент;
	ИначеЕсли Поле.Имя = "ЗвонкиКонтактноеЛицо" Тогда
		СсылкаТекущ = Элементы.Звонки.ТекущиеДанные.КонтактноеЛицо;
	КонецЕсли;
	Если ЗначениеЗаполнено(СсылкаТекущ) Тогда
		бит_ТелефонияКлиентПереопределяемый.ПоказЗначение(СсылкаТекущ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗвонок(ВызываемыйНомер)
	
	Если НЕ Подключен Тогда
		бит_ТелефонияКлиентПереопределяемый.ПоказПредупреждение("Нет подключения к АТС", , "Ошибка");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НомерСвязанногоТелефона) Тогда
		бит_ТелефонияКлиентПереопределяемый.ПоказПредупреждение("Не задан номер связанного телефона", , "Ошибка");
		Возврат;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ВызываемыйНомер) Тогда
		бит_ТелефонияКлиентПереопределяемый.ПоказПредупреждение("Не задан номер вызова", , "Ошибка");
		Возврат;
	КонецЕсли;
	
	ЗаголовокАвтоподнятия = бит_АТССервер.ПолучитьФлагЗаголовокАвтоподнятия();
	ТаймаутЗвонка = бит_АТСКлиент.ПолучитьТаймаутЗвонка();
	
	ВызываемыйНомер = бит_АТСКлиент.СформироватьНомерСПрефиксами(ВызываемыйНомер);
	
	Состояние("Вызов номера '" + ВызываемыйНомер + "' со связанного телефона...");
	
	Попытка
		обКонтроллерАТС.MakeCall(НомерСвязанногоТелефона, ВызываемыйНомер, ЗаголовокАвтоподнятия, ТаймаутЗвонка);
	Исключение
		бит_ТелефонияКлиент.ВывестиСообщение( ОписаниеОшибки(), ЭтаФорма );
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ДТМФКоманда(стрКодКоманды) ЭКСПОРТ
	Номер = Номер + стрКодКоманды;
	Если Элементы.Звонки.ТекущиеДанные <> Неопределено Тогда
		стрСвязКанал = Элементы.Звонки.ТекущиеДанные.СвязКанал;
		Если ЗначениеЗаполнено(стрСвязКанал) Тогда
			Попытка
				обКонтроллерАТС.PlayDTMF(стрСвязКанал, стрКодКоманды);
			Исключение
				бит_ТелефонияКлиент.ВывестиСообщение( ОписаниеОшибки(), ЭтаФорма );
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура Кн1(Команда)
	КодКнопки = Прав(Команда.Имя, 1);
	ДТМФКоманда(КодКнопки);
КонецПроцедуры

&НаКлиенте
Процедура КНЗВ(Команда)
	ДТМФКоманда("*");
КонецПроцедуры

&НаКлиенте
Процедура КНРеш(Команда)
	ДТМФКоманда("#");
КонецПроцедуры

&НаКлиенте
Процедура КнПереводЗвонка(Команда)
	бит_ТелефонияКлиент.ВывестиСообщение("В текущей версии решения функция не поддерживается");
КонецПроцедуры

&НаКлиенте
Процедура КнУдалитьПоследнийСимволНомера(Команда)
	Номер = Лев(Номер,СтрДлина(Номер)-1);
КонецПроцедуры

&НаКлиенте
Процедура КнУдержатьВызов(Команда)
	бит_ТелефонияКлиент.ВывестиСообщение("В текущей версии решения функция не поддерживается");
КонецПроцедуры

&НаКлиенте
Процедура НачатьРазговорКл(Команда) ЭКСПОРТ
	
	Если НЕ ЗначениеЗаполнено(Номер) Тогда
		Возврат;
	КонецЕсли;
	
	Если Звонки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьЗвонок(Номер);
	Номер = "";
	
КонецПроцедуры

&НаКлиенте
Процедура КнКонтакты(Команда)
	формаВыбораТелефона = ПолучитьФорму("Обработка.бит_Битфон.Форма.ФормаВыбораНомера", , ЭтаФорма);
	бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуСБлокировкойВладельца(формаВыбораТелефона);
КонецПроцедуры

&НаКлиенте
Процедура КнОтбой(Команда)
	Если Элементы.Звонки.ТекущиеДанные <> Неопределено Тогда
		стрКанал = Элементы.Звонки.ТекущиеДанные.Канал;
		Попытка
			обКонтроллерАТС.Hangup(стрКанал);
		Исключение
			бит_ТелефонияКлиент.ВывестиСообщение( ОписаниеОшибки(), ЭтаФорма );
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура ДобавитьВИсториюЗвонков(СвойНомер, флагТипЗвонкаВходящий, Номер,
			Абонент, КонтактноеЛицо, Успешность, стрДлительность,
			НабранныйНомер, стрПутьКЗаписи)
	// перевод длительности звонка из строки в секунды
	частиДлит = бит_ТелефонияКлиентСервер.СтрРазбить(стрДлительность, ":");
	длитЧас = Число(частиДлит[0].Значение);
	длитМин = Число(частиДлит[1].Значение);
	длитСек = Число(частиДлит[2].Значение);
	Длительность = длитСек + длитМин*60 + длитЧас*3600;
	//
	бит_ТелефонияСервер.ДобавитьВИсториюЗвонков(СвойНомер, флагТипЗвонкаВходящий,
		Номер, Абонент, КонтактноеЛицо, Успешность, Длительность, НабранныйНомер,
		стрПутьКЗаписи);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсториюЗвонков()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 100
	               |	бит_ИсторияЗвонков.СвойНомер,
	               |	бит_ИсторияЗвонков.Дата КАК Дата,
	               |	бит_ИсторияЗвонков.Абонент,
	               |	бит_ИсторияЗвонков.КонтактноеЛицо,
	               |	бит_ИсторияЗвонков.Номер,
	               |	бит_ИсторияЗвонков.ТипЗвонка,
	               |	бит_ИсторияЗвонков.Успешность,
	               |	бит_ИсторияЗвонков.ДлительностьЗвонка,
	               |	бит_ИсторияЗвонков.НабранныйНомер,
	               |	бит_ИсторияЗвонков.ЗаписьРазговора
	               |ИЗ
	               |	РегистрСведений.бит_ИсторияЗвонков КАК бит_ИсторияЗвонков
	               |ГДЕ
	               |	бит_ИсторияЗвонков.Пользователь = &Пользователь
	               |	И бит_ИсторияЗвонков.СвойНомер = &СвойНомер
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата УБЫВ";

	Запрос.УстановитьПараметр("Пользователь", бит_ТелефонияСервер.ПолучитьТекущегоПользователя());
	Запрос.УстановитьПараметр("СвойНомер", НомерСвязанногоТелефона);
	табл = Запрос.Выполнить().Выгрузить();
	
	ИсторияЗвонков.Очистить();
	
	Для каждого строкаТабл Из табл Цикл
		строкаИстории = ИсторияЗвонков.Добавить();
		ЗаполнитьЗначенияСвойств(строкаИстории, строкаТабл);
		//
		строкаИстории.ВыводТипЗвонка = ? (строкаТабл.ТипЗвонка=Перечисления.бит_ТипЗвонка.Входящий, "<-", "->");
		строкаИстории.ВыводАбонент = Строка(строкаТабл.Абонент);
		Если ЗначениеЗаполнено(строкаТабл.КонтактноеЛицо) Тогда
			строкаИстории.ВыводАбонент = строкаИстории.ВыводАбонент + " (" + Строка(строкаТабл.КонтактноеЛицо) + ")";
		КонецЕсли;
		строкаИстории.ВыводДата = Формат(строкаТабл.Дата, "ДЛФ=T");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ИсторияЗвонковПолучитьКлюч(индексСтроки)
	отбор = Новый Структура("Пользователь, СвойНомер, Дата, Абонент, КонтактноеЛицо,"
		"Номер, ТипЗвонка, Успешность, ДлительностьЗвонка, НабранныйНомер");
	ЗаполнитьЗначенияСвойств(отбор, ИсторияЗвонков[индексСтроки]);
	отбор.Пользователь = бит_ТелефонияСервер.ПолучитьТекущегоПользователя();
	ключ = РегистрыСведений.бит_ИсторияЗвонков.СоздатьКлючЗаписи(отбор);
	Возврат ключ;
КонецФункции

&НаКлиенте
Процедура ИсторияЗвонковЗаписьДетально(Команда)
	текущЗапись = Элементы.ИсторияЗвонков.ТекущиеДанные;
	Если текущЗапись <> Неопределено Тогда
		Ключ = ИсторияЗвонковПолучитьКлюч(ИсторияЗвонков.Индекс(текущЗапись));
		ПарамЗвонок = Новый Структура("Ключ", Ключ);
		ОткрытьФорму("РегистрСведений.бит_ИсторияЗвонков.Форма.ФормаПросмотраЗвонка", ПарамЗвонок);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсторияЗвонковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	НачатьЗвонок(Элемент.ТекущиеДанные.Номер);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияЗвонковОткрытьЗаписьРазговора(Команда)
	текущЗапись = Элементы.ИсторияЗвонков.ТекущиеДанные;
	Если текущЗапись <> Неопределено Тогда
		стрПутьКЗаписи = текущЗапись.ЗаписьРазговора;
		бит_БИТфонКлиент.ВоспроизвестиЗаписьРазговора(стрПутьКЗаписи);
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Номер = ВыбранноеЗначение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Если Источник <> ИмяИсточникаСобытий() Тогда
		Возврат;
	КонецЕсли;
	
	Если Событие = "Ошибка" Тогда
		
		бит_ТелефонияКлиент.ВывестиСообщение(Данные, ЭтаФорма);
		
		бит_ТелефонияСервер.ЗаписатьОшибкуВЖурналРегистрации(Источник,
			"КомпонентаУправлениеАТС_Ошибка", Данные);
			
		Если НЕ обКонтроллерАТС.IsConnected Тогда
			
			Если Подключен Тогда
				ВосстановлениеПодключения = Истина;
			КонецЕсли;
			
			Отключить();
			
			Если ВосстановлениеПодключения Тогда
				бит_ТелефонияКлиент.ВывестиСообщение("Соединение с АТС потеряно, попытка переподключения...", ЭтаФорма);
				ПодключитьОбработчикОжидания("Подключить", 10, Истина);
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "БитфонМониторБИТАТС_ПодключениеВнешнейКомпоненты" Тогда
		
		обКонтроллерАТС = Параметр.Результат;
		Если обКонтроллерАТС <> Неопределено Тогда
			обКонтроллерАТС.SetMessageSourceName( ИмяИсточникаСобытий() );
			Подключить();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "БитфонМонитор_НачатьЗвонок" Тогда
		
		НачатьЗвонок(Параметр);
		
	ИначеЕсли ИмяСобытия = "БитфонМониторПанель_ОбновлениеНастроек" Тогда
		
		Если Подключен Тогда
		
			ТекущаяАТСНов				= бит_АТССервер.ПолучитьАТС();
			НомерСвязанногоТелефонаНов 	= бит_АТССервер.ПолучитьНомерСвязанногоТелефона();

			Если (ТекущаяАТС <> ТекущаяАТСНов) ИЛИ (НомерСвязанногоТелефона <> НомерСвязанногоТелефонаНов) Тогда
				Отключить();
				Подключить();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

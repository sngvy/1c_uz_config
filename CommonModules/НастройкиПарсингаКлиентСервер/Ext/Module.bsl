////////////////////////////////////////////////////////////////////////////////
// Модуль для работой со структурой
//   полученной из Справочника НастройкиПарсингаДокументов

#Область ПрограммныйИнтерфейс

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ИнициализироватьНачальныеДанные(Знач Корень) Экспорт

	Результат = ПроверкаКорняПередИнициализацией(Корень);
	Если Не Результат Тогда
	
		Возврат Ложь;
	
	КонецЕсли;
	
	Возврат ПарсингДокументовОбщийКлиентСервер.СоздатьДанныеПоНастройке(
		Корень
	);

КонецФункции // ()

Функция ПолучитьДанныеМакета(ИмяМакета) Экспорт

	Возврат НастройкиПарсингаСервер.ПолучитьДанныеМакета(ИмяМакета);

КонецФункции // ()

// При наличии свойства возвращает Кодировку
//   При отсутствии или не заполненом значении - "UTF-8"
//
// Параметры:
//  НастройкиПарсинга  - Структура - структура полученная
//                          из Справочника НастройкиПарсингаДокументов
//
// Возвращаемое значение:
//   Строка   - Строковое значение кодировки
//
Функция ПолучитьКодировку(НастройкиПарсинга) Экспорт

	Кодировка = Неопределено;
	ЕстьКлюч = НастройкиПарсинга.Свойство("Кодировка", Кодировка);
	Если Не ЕстьКлюч
		ИЛИ ПустаяСтрока(Кодировка) Тогда
	
		Возврат "UTF-8";
	
	КонецЕсли;
	
	Возврат Кодировка;

КонецФункции // ()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПоддерживаемыйФормат(РасширениеФайла) Экспорт

	РасширениеФайла = СтрЗаменить(РасширениеФайла, ".", "");
	
	Набор = Новый Соответствие;
	Набор.Вставить("pdf", Истина);
	Набор.Вставить("gif", Истина);
	Набор.Вставить("png", Истина);
	Набор.Вставить("jpeg", Истина);
	Набор.Вставить("jpg", Истина);
	
	Возврат Набор.Получить(НРег(РасширениеФайла)) = Истина;

КонецФункции // ()

// Возвращает последний номер страницы
//
// Параметры:
//  НастройкиПарсинга  - Структура - структура полученная
//                          из Справочника НастройкиПарсингаДокументов
// Возвращаемое значение:
//   Число   - последний номер страницы
//
Функция ПолучитьПоследнююСтраницу(НастройкиПарсинга) Экспорт

	Возврат НастройкиПарсинга["ДоСтраницы"];

КонецФункции // ()

// Возвращает опцию - Удалять / Не удалять временные файлы
//
// Параметры:
//  НастройкиПарсинга  - Структура - структура полученная
//                          из Справочника НастройкиПарсингаДокументов
// Возвращаемое значение:
//   Булево   - Удалять временные файлы
//
Функция ПолучитьУдалениеАртефактов(НастройкиПарсинга) Экспорт

	Возврат НастройкиПарсинга["НеУдалятьВременныеФайлы"];

КонецФункции // ()

// Возвращает путь к формирователю изображений
//
// Параметры:
//  НастройкиПарсинга  - Структура - структура полученная
//                          из Справочника НастройкиПарсингаДокументов
// Возвращаемое значение:
//   Строка   - путь к программе
//
Функция ПолучитьКонвертер(НастройкиПарсинга) Экспорт

	Конвертер = НастройкиПарсинга["ImageMagickConvert"];
	Если ПустаяСтрока(Конвертер) Тогда
	
		ВызватьИсключение "Не настроен конвертер: ImageMagick";
	
	КонецЕсли;
	
	Возврат Конвертер;

КонецФункции // ()

// Возвращает путь к распознавателю изображений
//
// Параметры:
//  НастройкиПарсинга  - Структура - структура полученная
//                          из Справочника НастройкиПарсингаДокументов
// Возвращаемое значение:
//   Строка   - путь к программе
//
Функция ПолучитьРаспознователя(НастройкиПарсинга) Экспорт

	Tesseract = НастройкиПарсинга["Tesseract"];
	Если ПустаяСтрока(Tesseract) Тогда
	
		ВызватьИсключение "Не настроен распознователь: Tesseract";
	
	КонецЕсли;
	
	Возврат Tesseract;

КонецФункции // ()

// Надо ли выполнять парсинг на Сервере
//
// Параметры:
//  НастройкиПарсинга  - Структура - структура полученная
//                          из Справочника НастройкиПарсингаДокументов
// Возвращаемое значение:
//   Булево   - Выполнять на сервере
//
Функция ВыполнятьНаСервере(НастройкиПарсинга) Экспорт

	Значение = НастройкиПарсинга["ВыполнятьНа"];
	Возврат Значение = "1";

КонецФункции // ()

// Надо ли включать вложенные каталоги
//
// Параметры:
//  НастройкиПарсинга  - Структура - структура полученная
//                          из Справочника НастройкиПарсингаДокументов
// Возвращаемое значение:
//   Булево   - Поиск файлов в подкаталоге
//
Функция ПолучитьВложенныеКаталоги(НастройкиПарсинга) Экспорт

	Возврат НастройкиПарсинга["ВключатьВложенныеКаталоги"];

КонецФункции // ()

Функция ПолучитьПарсингДокументовСтадии(НастройкиПарсинга) Экспорт
	
	НастройкаПарсинга = ОбщиеНастройкиКонфигурации.ПарсингДокументовСтадии(
		НастройкиПарсинга["ПоказатьДокумент"]
	);
	
	Возврат ОбщиеНастройкиКонфигурации.ПолучитьПарсингДокументовСтадии(
		НастройкаПарсинга
	);

КонецФункции // ()


#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьКаталогиПарсинга(НастройкиПарсинга, Источник = Неопределено) Экспорт

	КаталогОбработки = ПолучитьКаталогПоУмолчанию(НастройкиПарсинга);
	
	КаталогДокументов = "";
	Если УказанИнойКаталогДокументов(Источник) Тогда
	
		КаталогДокументов = Источник.КаталогДокументов;
	
	КонецЕсли;
	Возврат ПарсингДокументовОбщийКлиентСервер.КаталогиДляПарсинга(
		КаталогОбработки,
		КаталогДокументов
	);

КонецФункции // ()

Функция ПолучитьКаталогПоУмолчанию(НастройкиПарсинга) Экспорт

	КаталогДокументовПоУмолчанию = НастройкиПарсинга["КаталогДокументовПоУмолчанию"];
	Если ПустаяСтрока(КаталогДокументовПоУмолчанию) Тогда
	
		ВызватьИсключение "Не выбран каталог для обработки";
	
	КонецЕсли;
	
	Возврат КаталогДокументовПоУмолчанию;

КонецФункции // ()

Функция СтатусЛогера(НастройкиПарсинга) Экспорт

	Возврат НастройкиПарсинга["СтатусПарсинга"];

КонецФункции // ()

Функция КонвертироватьПараметрВложенныеКаталоги(ВложенныеКаталоги) Экспорт

	Приставка = "";
	Если ПарсингДокументовОбщийКлиентСервер.ЭтоWindows() Тогда
	
		Приставка = "i";
	
	ИначеЕсли ПарсингДокументовОбщийКлиентСервер.ЭтоLinux() Тогда
	
		Приставка = "-i";
	
	Иначе
	
		ВызватьИсключение "Нет реализации под текущий клиент";
	
	КонецЕсли;
	
	Команда = ?(ВложенныеКаталоги, "true", "false");
	
	Возврат Приставка + Команда;

КонецФункции // ()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияДанныхПоНастройке

Функция ПроверкаКорняПередИнициализацией(КаталогОбработки)

	Корень = Новый Файл(КаталогОбработки);
	Если Не Корень.Существует() Тогда
	
		#Если Сервер Тогда
			КонтекстВыполнения = "Сервер";
		#КонецЕсли
		#Если Клиент Тогда
			КонтекстВыполнения = "Клиент";
		#КонецЕсли
		
		ВызватьИсключение УправленияСообщениямиКлиентСервер.ИнструкцияКОшибке(
			"Каталога не существует",
			"Проверьте наличие выбранного каталога
			|Контекст выполнения - " + КонтекстВыполнения
		);
	
	КонецЕсли;
	
	Если Не Корень.ЭтоКаталог() Тогда
	
		ВызватьИсключение УправленияСообщениямиКлиентСервер.ИнструкцияКОшибке(
			"Выбранный файл не является каталогом",
			"Укажите корневой каталог, в котором будет производится обработка документов"
		);
	
	КонецЕсли;
	
	СуществующиеФайлы = НайтиФайлы(Корень.ПолноеИмя, "/*", Ложь);
	Если СуществующиеФайлы.Количество() > 0 Тогда
		
		Для каждого СуществующийФайл Из СуществующиеФайлы Цикл
		
			Попытка
			
				УдалитьФайлы(СуществующийФайл.ПолноеИмя);
			
			Исключение
				ВызватьИсключение УправленияСообщениямиКлиентСервер.ИнструкцияКОшибке(
					"Не удалось удалить файл",
					"Проверьте права доступа на файл: " + СуществующийФайл.ПолноеИмя
				);
			КонецПопытки;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ()

#КонецОбласти

Функция УказанИнойКаталогДокументов(Источник)

	Если ТипЗнч(Источник) = Тип("Структура")
		И Источник.Свойство("КаталогДокументов") Тогда
	
		Возврат Не ПустаяСтрока(Источник["КаталогДокументов"]);
	
	КонецЕсли;
	
	Возврат Источник <> Неопределено
		И ЕстьВыборКаталога(Источник)
		И ЗначениеЗаполнено(Источник.КаталогДокументов);

КонецФункции // ()

Функция ЕстьВыборКаталога(Форма)

	Возврат Форма.Элементы.Найти("КаталогДокументов")<> Неопределено;

КонецФункции // ()

#КонецОбласти

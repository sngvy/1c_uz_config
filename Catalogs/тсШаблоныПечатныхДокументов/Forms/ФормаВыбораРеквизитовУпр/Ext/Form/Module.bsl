//Перем ВыборкаПВХНазначениеСвойств;
//Перем ВыборкаПВХСвойстваИЗначения;
&НаКлиенте
Перем УстановитьФокус;
&НаСервере
Перем Уровень;
&НаКлиенте
Перем Найден;
&НаСервере
Перем КоллекцияСтрок;
&НаКлиенте
Перем СтрокаКоллекцииДерева;
&НаСервере
Перем ПределВложенности ;
&НаСервере
Перем ИмеющиесяОбъекты;
&НаСервере
Перем Развернуть;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ


&НаСервере
Процедура ПолучитьДопРеквизитыДолжника(Должник)
    Запрос = Новый Запрос("ВЫБРАТЬ
                          |	НаборыСвойствДополнительныеРеквизиты.Свойство КАК Свойство,
                          |	ЕСТЬNULL(ДолжникиДополнительныеРеквизиты.Значение, """") КАК Значение
                          |ИЗ
                          |	Справочник.ЮрФизЛицо.ДополнительныеРеквизиты КАК НаборыСвойствДополнительныеРеквизиты
                          |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ДополнительныеРеквизиты КАК ДолжникиДополнительныеРеквизиты
                          |		ПО НаборыСвойствДополнительныеРеквизиты.Свойство = ДолжникиДополнительныеРеквизиты.Свойство
                          |			И (ДолжникиДополнительныеРеквизиты.Ссылка = &Объект)
                          |ГДЕ
                          |	НаборыСвойствДополнительныеРеквизиты.Ссылка = &ТипКА ");
	Запрос.УстановитьПараметр("Объект", Должник);
	Запрос.УстановитьПараметр("ТипКА", Должник.ЮрФизЛицо);
	ДопРеквизитыД.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры	

&НаСервере
Процедура ПолучитьДопРеквизитыДО(ДолговоеОбязательство)
    Запрос = Новый Запрос("ВЫБРАТЬ
                          |	НаборыСвойствДополнительныеРеквизиты.Свойство КАК Свойство,
                          |	ЕСТЬNULL(ДолговыеОбязательстваДополнительныеРеквизиты.Значение, """") КАК Значение
                          |ИЗ
                          |	Справочник.ТипыДолговыхОбязательств.ДополнительныеРеквизиты КАК НаборыСвойствДополнительныеРеквизиты
                          |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДолговыеОбязательства.ДополнительныеРеквизиты КАК ДолговыеОбязательстваДополнительныеРеквизиты
                          |		ПО НаборыСвойствДополнительныеРеквизиты.Свойство = ДолговыеОбязательстваДополнительныеРеквизиты.Свойство
                          |			И (ДолговыеОбязательстваДополнительныеРеквизиты.Ссылка = &Объект)
                          |ГДЕ
                          |	НаборыСвойствДополнительныеРеквизиты.Ссылка = &ТипДО");
	Запрос.УстановитьПараметр("Объект", ДолговоеОбязательство);
	Запрос.УстановитьПараметр("ТипДО",ДолговоеОбязательство.ТипДолговогоОбязательства);
	ДопРеквизитыДО.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

&НаСервере
Процедура ПолучитьДопСведенияДолжника(Должник)
    Запрос = Новый Запрос("ВЫБРАТЬ
                          |	НаборыСвойствДополнительныеСведения.Свойство КАК Свойство,
                          |	ЕСТЬNULL(ДополнительныеСведения.Значение, """") КАК Значение,
                          |	НаборыСвойствДополнительныеСведения.Свойство.Родитель КАК Группа
                          |ИЗ
                          |	Справочник.ЮрФизЛицо.ДополнительныеСведения КАК НаборыСвойствДополнительныеСведения
                          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
                          |		ПО НаборыСвойствДополнительныеСведения.Свойство = ДополнительныеСведения.Свойство
                          |			И (ДополнительныеСведения.Объект = &Объект)
                          |ГДЕ
                          |	НаборыСвойствДополнительныеСведения.Ссылка = &ТипКА");
	Запрос.УстановитьПараметр("Объект", Должник);
	Запрос.УстановитьПараметр("ТипКА", Должник.ЮрФизЛицо);
	ДопСведенияД.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЮрФизЛицоДополнительныеСведения.Свойство.Родитель КАК Свойство
	               |ИЗ
	               |	Справочник.ЮрФизЛицо.ДополнительныеСведения КАК ЮрФизЛицоДополнительныеСведения
	               |ГДЕ
	               |	ЮрФизЛицоДополнительныеСведения.Ссылка = &ТипКА"; 
	ГруппыДСД.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

&НаСервере
Процедура ПолучитьДопСведенияДО(ДолговоеОбязательство)
    Запрос = Новый Запрос("ВЫБРАТЬ
                          |	НаборыСвойствДополнительныеСведения.Свойство КАК Свойство,
                          |	ЕСТЬNULL(ДополнительныеСведения.Значение, """") КАК Значение,
                          |	НаборыСвойствДополнительныеСведения.Свойство.Родитель КАК Группа
                          |ИЗ
                          |	Справочник.ТипыДолговыхОбязательств.ДополнительныеСведения КАК НаборыСвойствДополнительныеСведения
                          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
                          |		ПО НаборыСвойствДополнительныеСведения.Свойство = ДополнительныеСведения.Свойство
                          |			И (ДополнительныеСведения.Объект = &Объект)
                          |ГДЕ
                          |	НаборыСвойствДополнительныеСведения.Ссылка = &ТипДО");
	Запрос.УстановитьПараметр("Объект", ДолговоеОбязательство);
	Запрос.УстановитьПараметр("ТипДО", ДолговоеОбязательство.ТипДолговогоОбязательства);
	ДопСведенияДО.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	НаборыСвойствДополнительныеСведения.Свойство.Родитель КАК Свойство
	               |ИЗ
	               |	Справочник.ТипыДолговыхОбязательств.ДополнительныеСведения КАК НаборыСвойствДополнительныеСведения
	               |ГДЕ
	               |	НаборыСвойствДополнительныеСведения.Ссылка = &ТипДО";
	ГруппыДСДО.Загрузить(Запрос.Выполнить().Выгрузить());					  
КонецПроцедуры

&НаСервере
Процедура ТаблицаМатаданных(ВыбранноеЗначение);
		
	КолМетаданных = Документ.Метаданные().Реквизиты.Количество();
    СчетчикМетаданных = -1;
	КолВложений = 2;
	ВладелецЧерезОдин = Неопределено;
	ТекСтрока = ДобавитьНулевойУровень(Документ);
	//
	ВыбранноеЗначение = ВыбранноеЗначениеНаоборот(ВыбранноеЗначение);
	//
	НомерСтроки.Очистить();
	СоздатьДерево(Документ, ТекСтрока, КолВложений, ВладелецЧерезОдин, , , ВыбранноеЗначение);
	
	// разворачиваем тек строку
	//Элементы.ТабМетаданныеДерево.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	
КонецПроцедуры


// Договоры Контрагента
&НаСервере
Процедура ПолучитьДопСведения_ДоговорКонтрагента(ДоговорКонтрагента)
    Запрос = Новый Запрос("ВЫБРАТЬ
                          |	НаборыСвойствДополнительныеСведения.Свойство КАК Свойство,
                          |	ЕСТЬNULL(ДополнительныеСведения.Значение, """") КАК Значение,
                          |	НаборыСвойствДополнительныеСведения.Свойство.Родитель КАК Группа
                          |ИЗ
                          |	Справочник.ТипыДоговоровКонтрагентов.ДополнительныеСведения КАК НаборыСвойствДополнительныеСведения
                          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
                          |		ПО НаборыСвойствДополнительныеСведения.Свойство = ДополнительныеСведения.Свойство
                          |			И (ДополнительныеСведения.Объект = &Объект)
                          |ГДЕ
                          |	НаборыСвойствДополнительныеСведения.Ссылка = &ТипДоговора");
	Запрос.УстановитьПараметр("Объект", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ТипДоговора", ДоговорКонтрагента.ТипДоговора);
	
	ДопСведенияДК.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ДоговорыКонтрагентовДополнительныеСведения.Свойство.Родитель КАК Свойство
	               |ИЗ
	               |	Справочник.ТипыДоговоровКонтрагентов.ДополнительныеСведения КАК ДоговорыКонтрагентовДополнительныеСведения
	               |ГДЕ
	               |	ДоговорыКонтрагентовДополнительныеСведения.Ссылка = &ТипДоговора"; 
				   
	ГруппыДС_ДоговорыКонтрагентов.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДопРеквизиты_ДоговорКонтрагента(ДоговорКонтрагента)
    Запрос = Новый Запрос("ВЫБРАТЬ
                          |	НаборыСвойствДополнительныеРеквизиты.Свойство КАК Свойство,
                          |	ЕСТЬNULL(ДоговорыКонтрагентовДополнительныеРеквизиты.Значение, """") КАК Значение
                          |ИЗ
                          |	Справочник.ТипыДоговоровКонтрагентов.ДополнительныеРеквизиты КАК НаборыСвойствДополнительныеРеквизиты
                          |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов.ДополнительныеРеквизиты КАК ДоговорыКонтрагентовДополнительныеРеквизиты
                          |		ПО НаборыСвойствДополнительныеРеквизиты.Свойство = ДоговорыКонтрагентовДополнительныеРеквизиты.Свойство
                          |			И (ДоговорыКонтрагентовДополнительныеРеквизиты.Ссылка = &Объект)
                          |ГДЕ
                          |	НаборыСвойствДополнительныеРеквизиты.Ссылка = &ТипДоговора ");
	Запрос.УстановитьПараметр("Объект", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ТипДоговора", ДоговорКонтрагента.ТипДоговора);
	
	ДопРеквизитыДК.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры	


// Исполнительные документы
&НаСервере
Процедура ПолучитьДопСведения_ИсполнительныеДокументы(ИсполнительныйДокумент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство,
	               |	ДополнительныеРеквизитыИСведения.Родитель КАК Группа,
	               |	ДополнительныеСведения.Значение КАК Значение
	               |ИЗ
	               |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |		ПО ДополнительныеРеквизитыИСведения.Ссылка = ДополнительныеСведения.Свойство
	               |			И (ДополнительныеСведения.Объект = &Объект)
	               |ГДЕ
	               |	ДополнительныеРеквизитыИСведения.Родитель.Родитель = &РодительПВХ
	               |	И ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение = Истина";
				   
				   
	Запрос.УстановитьПараметр("РодительПВХ", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_ИсполнительныеДокументы);
	Запрос.УстановитьПараметр("Объект", ИсполнительныйДокумент);
	
	//--
	ДопСведенияИД.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Родитель КАК Свойство
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Родитель.Родитель = &РодительПВХ
	|	И ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение = Истина";
	
	//--
	ГруппыДС_ИсполнительныеДокументы.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДопРеквизиты_ИсполнительныеДокументы(ИсполнительныйДокумент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсполнительныеДокументыДополнительныеРеквизиты.Свойство,
		|	ИсполнительныеДокументыДополнительныеРеквизиты.Значение
		|ИЗ
		|	Справочник.ИсполнительныеДокументы.ДополнительныеРеквизиты КАК ИсполнительныеДокументыДополнительныеРеквизиты
		|ГДЕ
		|	ИсполнительныеДокументыДополнительныеРеквизиты.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", ИсполнительныйДокумент);
   	ДопРеквизитыИД.Загрузить(Запрос.Выполнить().Выгрузить());
 	
КонецПроцедуры	

// Организация
&НаСервере
Процедура ПолучитьДопСведения_Организация(Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство,
	               |	ДополнительныеРеквизитыИСведения.Родитель КАК Группа,
	               |	ДополнительныеСведения.Значение КАК Значение
	               |ИЗ
	               |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |		ПО ДополнительныеРеквизитыИСведения.Ссылка = ДополнительныеСведения.Свойство
	               |			И (ДополнительныеСведения.Объект = &Объект)
	               |ГДЕ
	               |	ДополнительныеРеквизитыИСведения.Родитель.Родитель = &РодительПВХ
	               |	И ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение = Истина";
				   
				   
	Запрос.УстановитьПараметр("РодительПВХ", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_Организации);
	Запрос.УстановитьПараметр("Объект", Организация);
	
	//--
	ДопСведенияО.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Родитель КАК Свойство
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Родитель.Родитель = &РодительПВХ
	|	И ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение = Истина";
	
	//--
	ГруппыДС_Организация.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДопРеквизиты_Организация(Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОрганизацииДополнительныеРеквизиты.Свойство,
		|	ОрганизацииДополнительныеРеквизиты.Значение
		|ИЗ
		|	Справочник.Организации.ДополнительныеРеквизиты КАК ОрганизацииДополнительныеРеквизиты
		|ГДЕ
		|	ОрганизацииДополнительныеРеквизиты.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Организация);
   	ДопРеквизитыО.Загрузить(Запрос.Выполнить().Выгрузить());
 	
КонецПроцедуры	

 // Подразделения организации
&НаСервере
Процедура ПолучитьДопСведения_ПодразделениеОрганизации(ПодразделениеОрганизации)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство,
	               |	ДополнительныеРеквизитыИСведения.Родитель КАК Группа,
	               |	ДополнительныеСведения.Значение КАК Значение
	               |ИЗ
	               |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |		ПО ДополнительныеРеквизитыИСведения.Ссылка = ДополнительныеСведения.Свойство
	               |			И (ДополнительныеСведения.Объект = &Объект)
	               |ГДЕ
	               |	ДополнительныеРеквизитыИСведения.Родитель.Родитель = &РодительПВХ
	               |	И ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение = Истина";
				   
				   
	Запрос.УстановитьПараметр("РодительПВХ", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_ПодразделенияОрганизаций);
	Запрос.УстановитьПараметр("Объект", ПодразделениеОрганизации);
	
	//--
	ДопСведенияПО.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Родитель КАК Свойство
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Родитель.Родитель = &РодительПВХ
	|	И ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение = Истина";
	
	//--
	ГруппыДС_ПодразделенияОрганизаций.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДопРеквизиты_ПодразделениеОрганизации(ПодразделениеОрганизации)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодразделенияОрганизацийДополнительныеРеквизиты.Свойство,
		|	ПодразделенияОрганизацийДополнительныеРеквизиты.Значение
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций.ДополнительныеРеквизиты КАК ПодразделенияОрганизацийДополнительныеРеквизиты
		|ГДЕ
		|	ПодразделенияОрганизацийДополнительныеРеквизиты.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", ПодразделениеОрганизации);
   	ДопРеквизитыПО.Загрузить(Запрос.Выполнить().Выгрузить());
 	
КонецПроцедуры	

 // Пользователи
&НаСервере
Процедура ПолучитьДопСведения_Пользователи(Пользователь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство,
	               |	ДополнительныеРеквизитыИСведения.Родитель КАК Группа,
	               |	ДополнительныеСведения.Значение КАК Значение
	               |ИЗ
	               |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |		ПО ДополнительныеРеквизитыИСведения.Ссылка = ДополнительныеСведения.Свойство
	               |			И (ДополнительныеСведения.Объект = &Объект)
	               |ГДЕ
	               |	ДополнительныеРеквизитыИСведения.Родитель.Родитель = &РодительПВХ
	               |	И ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение = Истина";
				   
				   
	Запрос.УстановитьПараметр("РодительПВХ", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_Пользователи);
	Запрос.УстановитьПараметр("Объект", Пользователь);
	
	//--
	ДопСведенияПользователь.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Родитель КАК Свойство
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Родитель.Родитель = &РодительПВХ
	|	И ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение = Истина";
	
	//--
	ГруппыДС_Пользователи.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДопРеквизиты_Пользователи(Пользователь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПользователиДополнительныеРеквизиты.Свойство,
		|	ПользователиДополнительныеРеквизиты.Значение
		|ИЗ
		|	Справочник.Пользователи.ДополнительныеРеквизиты КАК ПользователиДополнительныеРеквизиты
		|ГДЕ
		|	ПользователиДополнительныеРеквизиты.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Пользователь);
   	ДопРеквизитыПользователь.Загрузить(Запрос.Выполнить().Выгрузить());
 	
КонецПроцедуры	


// Услуги по договору
&НаСервере
Процедура ПолучитьДопСведения_УслугиПоДоговору(УслугаПоДоговору)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство,
	               |	ДополнительныеРеквизитыИСведения.Родитель КАК Группа,
	               |	ДополнительныеСведения.Значение КАК Значение
	               |ИЗ
	               |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |		ПО ДополнительныеРеквизитыИСведения.Ссылка = ДополнительныеСведения.Свойство
	               |			И (ДополнительныеСведения.Объект = &Объект)
	               |ГДЕ
	               |	ДополнительныеРеквизитыИСведения.Родитель.Родитель = &РодительПВХ
	               |	И ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение = Истина";
				   
				   
	Запрос.УстановитьПараметр("РодительПВХ", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_УслугиПоДоговору);
	Запрос.УстановитьПараметр("Объект", УслугаПоДоговору);
	
	//--
	ДопСведенияУД.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Родитель КАК Свойство
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Родитель.Родитель = &РодительПВХ
	|	И ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение = Истина";
	
	//--
	ГруппыДС_УслугиПоДоговору.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДопРеквизиты_УслугиПоДоговору(УслугаПоДоговору)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УслугиПоДоговоруДополнительныеРеквизиты.Свойство,
		|	УслугиПоДоговоруДополнительныеРеквизиты.Значение
		|ИЗ
		|	Справочник.УслугиПоДоговору.ДополнительныеРеквизиты КАК УслугиПоДоговоруДополнительныеРеквизиты
		|ГДЕ
		|	УслугиПоДоговоруДополнительныеРеквизиты.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", УслугаПоДоговору);
   	ДопРеквизитыУД.Загрузить(Запрос.Выполнить().Выгрузить());
 	
КонецПроцедуры	



&НаСервере
Функция ПолучитьКоллекциюСтрок()

	Дерево = Новый ДеревоЗначений;
	Дер = ДанныеФормыВЗначение(тзМетаданные, Тип(Дерево));
	КоллекцияСтрок = Дер.Строки[0].Строки;
	//ЗначениеВДанныеФормы(Дер, Элемент);
	Возврат Истина;	

КонецФункции // ПолучитьКоллекциюСтрок()

&НаСервере
Процедура СоздатьДерево(Документ, ТекСтрока, Знач КолВложений, ВладелецЧерезОдин, ПараметрВлож = Истина, 
			ИмеющиесяОбъекты = Неопределено, ВыбранноеЗначение = Неопределено)
	СписокРеквизитов = Новый Массив;
	
	Для Каждого Элемент Из Документ.Метаданные().Реквизиты Цикл
		СписокРеквизитов.Добавить(Элемент);
	КонецЦикла;                                            
	
	Для Каждого Элемент Из Документ.Метаданные().СтандартныеРеквизиты Цикл
		СписокРеквизитов.Добавить(Элемент);
	КонецЦикла; 
	
	КолМетаданных = СписокРеквизитов.Количество();
	КолДляВывода = КолМетаданных;
	СчетчикМетаданных = 0;
	
	Если ВыводитьТЧ Тогда
		
		КоличествоТЧ = Документ.Метаданные().ТабличныеЧасти.Количество();
		Если КоличествоТЧ > 0 Тогда
			Для ТекТЧ = 0 По КоличествоТЧ - 1 Цикл
				ТекСтрокаТЧ = ТекСтрока.ПолучитьЭлементы().Добавить(); 
				ЗаполнитьОбъектДерева("Табличная Часть",Документ,ТекСтрокаТЧ,ТекТЧ);
			КонецЦикла;				
		КонецЕсли;
		
	Иначе 
		Для СчетчикМетаданных = 0 По КолМетаданных - 1 Цикл
			
			Объект = Неопределено;
			Объект = СписокРеквизитов[СчетчикМетаданных];
			ОбъектТип = Объект.Тип.Типы()[0];
			
			ТекСтрока2 = ТекСтрока.ПолучитьЭлементы().Добавить();
			ТекСтрока2.Синоним = ?(Объект.Синоним = "", Объект.Имя,Объект.Синоним) ;
			ТекСтрока2.Имя = Объект.Имя;
			ТекСтрока2.Значение = Документ[Объект.Имя];
			ТекСтрока2.Тип = Объект.Тип;
			ТекСтрока2.ЭтоСвойство = Ложь;
			
			ИскомаяСтрока =  НРег(ТекСтрока2.Имя);
			ОтменитьДобавленияПлюсаДляВеткиДерева = Ложь;
			
			Если ВыбранноеЗначение <> Неопределено И ВыбранноеЗначение.Количество() >= 2 
					И Найти(ВыбранноеЗначение[1], ИскомаяСтрока) > 0 Тогда			
				
				Если ПроверкаТипНужныйОбъект(ОбъектТип) И ТипЗнч(Документ[Объект.Имя]) <> Тип("Неопределено")  Тогда
					НомерСтроки.Добавить(ТекСтрока2.Получитьидентификатор());
					ВыбранноеЗначение.Удалить(1);
					ТекОбъект = ТекСтрока2.Значение;
					ТекСтрока2.ПолучитьЭлементы().Очистить();
					СоздатьДерево(ТекОбъект, ТекСтрока2, 1, Неопределено, , , ВыбранноеЗначение);
					ОтменитьДобавленияПлюсаДляВеткиДерева = Истина;					
				Иначе
					ВыбранноеЗначение.Удалить(1);
					НомерСтроки.Добавить(ТекСтрока2.Получитьидентификатор());
				КонецЕсли;
				
			КонецЕсли;
						
			Если ПроверкаТипНужныйОбъект(ОбъектТип) И ТипЗнч(Документ[Объект.Имя]) <> Тип("Неопределено") 
					И Не ОтменитьДобавленияПлюсаДляВеткиДерева Тогда 			
				// проверим нужно ли ставить "+" для ветки дерева
				Текстрока3 = ТекСтрока2.ПолучитьЭлементы().Добавить();
			КонецЕсли;
			
			ОтменитьДобавленияПлюсаДляВеткиДерева = Ложь;
			
		КонецЦикла;	
		
		// 1. Должник
		Если ТипЗнч(Документ) = Тип("СправочникСсылка.Контрагенты") Тогда
			ПолучитьДопРеквизитыДолжника(Документ);
			ПолучитьДопСведенияДолжника(Документ);
			
			ДопСтрока = ТекСтрока.ПолучитьЭлементы().Добавить();
			ДопСтрока.Синоним = 
					ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_Контрагенты.Наименование;
			ДопСтрока.Значение = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_Контрагенты;
			ДопСтрока.НеВыбирать = Истина;
			ДопСтрока.Тип = ТипЗнч(ДопРеквизитыД);
			//СоздатьДеревоДопРекИСвед(ДопРеквизитыД, ТекСтрока, 1);
			Если ДопРеквизитыД.Количество() > 0 Тогда
				ДопСтрока.ПолучитьЭлементы().Добавить();
			КонецЕсли;
			
			ДопСтрока = ТекСтрока.ПолучитьЭлементы().Добавить();
			ДопСтрока.Синоним = 
					ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_Контрагенты.Наименование;
			ДопСтрока.Значение = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_Контрагенты;
			ДопСтрока.НеВыбирать = Истина;
			ДопСтрока.Тип = ТипЗнч(ДопРеквизитыД);
			Если ДопСведенияД.Количество() > 0 Тогда
				ДопСтрока.ПолучитьЭлементы().Добавить();
			КонецЕсли;
			
		// 2. ДО	
		ИначеЕсли ТипЗнч(Документ) = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда
			ПолучитьДопРеквизитыДО(Документ);
			ПолучитьДопСведенияДО(Документ);
			
			ДопСтрока = ТекСтрока.ПолучитьЭлементы().Добавить();
			ДопСтрока.Синоним = 
		    	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_ДолговыеОбязательства.Наименование;
			ДопСтрока.Значение = 
					ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_ДолговыеОбязательства;
			ДопСтрока.НеВыбирать = Истина;
			ДопСтрока.Тип = ТипЗнч(ДопРеквизитыД);
			Если ДопРеквизитыДО.Количество() > 0 Тогда
				ДопСтрока.ПолучитьЭлементы().Добавить();
			КонецЕсли;
			
			ДопСтрока = ТекСтрока.ПолучитьЭлементы().Добавить();
			ДопСтрока.Синоним = 
					ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_ДолговыеОбязательства.Наименование;
			ДопСтрока.Значение = 
					ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_ДолговыеОбязательства;
			ДопСтрока.НеВыбирать = Истина;
			ДопСтрока.Тип = ТипЗнч(ДопРеквизитыД);
			Если ДопСведенияДО.Количество() > 0 Тогда
				ДопСтрока.ПолучитьЭлементы().Добавить();
			КонецЕсли;
			
		// 3. Договоры Контрагентов	
		ИначеЕсли ТипЗнч(Документ) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда 
			
			ПолучитьДопРеквизиты_ДоговорКонтрагента(Документ);
			ПолучитьДопСведения_ДоговорКонтрагента(Документ);
			
			ДопСтрока = ТекСтрока.ПолучитьЭлементы().Добавить();
			ДопСтрока.Синоним = 
			ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_ДоговорыКонтрагентов.Наименование;
			ДопСтрока.Значение = 
			ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_ДоговорыКонтрагентов;
			ДопСтрока.НеВыбирать = Истина;
			ДопСтрока.Тип = ТипЗнч(ДопРеквизитыДК);
			Если ДопРеквизитыДК.Количество() > 0 Тогда
				ДопСтрока.ПолучитьЭлементы().Добавить();
			КонецЕсли;
			
			ДопСтрока = ТекСтрока.ПолучитьЭлементы().Добавить();
			ДопСтрока.Синоним = 
			ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_ДоговорыКонтрагентов.Наименование;
			ДопСтрока.Значение = 
			ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_ДоговорыКонтрагентов;
			ДопСтрока.НеВыбирать = Истина;
			ДопСтрока.Тип = ТипЗнч(ДопРеквизитыДК);
			Если ДопСведенияДК.Количество() > 0 Тогда
				ДопСтрока.ПолучитьЭлементы().Добавить();
			КонецЕсли;

		
				
		// 4. Исполнительные документы	
		ИначеЕсли ТипЗнч(Документ) = Тип("СправочникСсылка.ИсполнительныеДокументы") Тогда 		
			
			ПолучитьДопРеквизиты_ИсполнительныеДокументы(Документ);
			ПолучитьДопСведения_ИсполнительныеДокументы(Документ);
			
			ДопСтрока = ТекСтрока.ПолучитьЭлементы().Добавить();
			ДопСтрока.Синоним = 
			ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_ИсполнительныеДокументы.Наименование;
			ДопСтрока.Значение = 
			ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_ИсполнительныеДокументы;
			ДопСтрока.НеВыбирать = Истина;
			ДопСтрока.Тип = ТипЗнч(ДопРеквизитыИД);
			Если ДопРеквизитыИД.Количество() > 0 Тогда
				ДопСтрока.ПолучитьЭлементы().Добавить();
			КонецЕсли;
			
			ДопСтрока = ТекСтрока.ПолучитьЭлементы().Добавить();
			ДопСтрока.Синоним = 
			ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_ИсполнительныеДокументы.Наименование;
			ДопСтрока.Значение = 
			ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_ИсполнительныеДокументы;
			ДопСтрока.НеВыбирать = Истина;
			ДопСтрока.Тип = ТипЗнч(ДопРеквизитыИД);
			Если ДопСведенияИД.Количество() > 0 Тогда
				ДопСтрока.ПолучитьЭлементы().Добавить();
			КонецЕсли;

		// 5. Организация	
		ИначеЕсли ТипЗнч(Документ) = Тип("СправочникСсылка.Организации") Тогда 		
		
			ПолучитьДопРеквизиты_Организация(Документ);
			ПолучитьДопСведения_Организация(Документ);
			
			ДопСтрока = ТекСтрока.ПолучитьЭлементы().Добавить();
			ДопСтрока.Синоним = 
			ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_Организации.Наименование;
			ДопСтрока.Значение = 
			ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_Организации;
			ДопСтрока.НеВыбирать = Истина;
			ДопСтрока.Тип = ТипЗнч(ДопРеквизитыО);
			Если ДопРеквизитыО.Количество() > 0 Тогда
				ДопСтрока.ПолучитьЭлементы().Добавить();
			КонецЕсли;
			
			ДопСтрока = ТекСтрока.ПолучитьЭлементы().Добавить();
			ДопСтрока.Синоним = 
			ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_Организации.Наименование;
			ДопСтрока.Значение = 
			ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_Организации;
			ДопСтрока.НеВыбирать = Истина;
			ДопСтрока.Тип = ТипЗнч(ДопРеквизитыО);
			Если ДопСведенияО.Количество() > 0 Тогда
				ДопСтрока.ПолучитьЭлементы().Добавить();
			КонецЕсли;

			
		// 6. Подразделения Организаций	
		ИначеЕсли ТипЗнч(Документ) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда 
			
			ПолучитьДопРеквизиты_ПодразделениеОрганизации(Документ);
			ПолучитьДопСведения_ПодразделениеОрганизации(Документ);
			
			ДопСтрока = ТекСтрока.ПолучитьЭлементы().Добавить();
			ДопСтрока.Синоним = 
			ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_ПодразделенияОрганизаций.Наименование;
			ДопСтрока.Значение = 
			ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_ПодразделенияОрганизаций;
			ДопСтрока.НеВыбирать = Истина;
			ДопСтрока.Тип = ТипЗнч(ДопРеквизитыПО);
			Если ДопРеквизитыПО.Количество() > 0 Тогда
				ДопСтрока.ПолучитьЭлементы().Добавить();
			КонецЕсли;
			
			ДопСтрока = ТекСтрока.ПолучитьЭлементы().Добавить();
			ДопСтрока.Синоним = 
			ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_ПодразделенияОрганизаций.Наименование;
			ДопСтрока.Значение = 
			ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_ПодразделенияОрганизаций;
			ДопСтрока.НеВыбирать = Истина;
			ДопСтрока.Тип = ТипЗнч(ДопРеквизитыПО);
			Если ДопСведенияПО.Количество() > 0 Тогда
				ДопСтрока.ПолучитьЭлементы().Добавить();
			КонецЕсли;

		
		// 7. Пользователи
		ИначеЕсли ТипЗнч(Документ) = Тип("СправочникСсылка.Пользователи") Тогда 		
			
			ПолучитьДопРеквизиты_Пользователи(Документ);
			ПолучитьДопСведения_Пользователи(Документ);
			
			ДопСтрока = ТекСтрока.ПолучитьЭлементы().Добавить();
			ДопСтрока.Синоним = 
			ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_Пользователи.Наименование;
			ДопСтрока.Значение = 
			ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_Пользователи;
			ДопСтрока.НеВыбирать = Истина;
			ДопСтрока.Тип = ТипЗнч(ДопРеквизитыПользователь);
			Если ДопРеквизитыПользователь.Количество() > 0 Тогда
				ДопСтрока.ПолучитьЭлементы().Добавить();
			КонецЕсли;
			
			ДопСтрока = ТекСтрока.ПолучитьЭлементы().Добавить();
			ДопСтрока.Синоним = 
			ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_Пользователи.Наименование;
			ДопСтрока.Значение = 
			ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_Пользователи;
			ДопСтрока.НеВыбирать = Истина;
			ДопСтрока.Тип = ТипЗнч(ДопРеквизитыПользователь);
			Если ДопСведенияПользователь.Количество() > 0 Тогда
				ДопСтрока.ПолучитьЭлементы().Добавить();
			КонецЕсли;

			
		// 8. Услуги по договору	
		ИначеЕсли ТипЗнч(Документ) = Тип("СправочникСсылка.УслугиПоДоговору") Тогда 		
			
			ПолучитьДопРеквизиты_УслугиПоДоговору(Документ);
			ПолучитьДопСведения_УслугиПоДоговору(Документ);
			
			ДопСтрока = ТекСтрока.ПолучитьЭлементы().Добавить();
			ДопСтрока.Синоним = 
			ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_УслугиПоДоговору.Наименование;
			ДопСтрока.Значение = 
			ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_УслугиПоДоговору;
			ДопСтрока.НеВыбирать = Истина;
			ДопСтрока.Тип = ТипЗнч(ДопРеквизитыУД);
			Если ДопРеквизитыУД.Количество() > 0 Тогда
				ДопСтрока.ПолучитьЭлементы().Добавить();
			КонецЕсли;
			
			ДопСтрока = ТекСтрока.ПолучитьЭлементы().Добавить();
			ДопСтрока.Синоним = 
			ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_УслугиПоДоговору.Наименование;
			ДопСтрока.Значение = 
			ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_УслугиПоДоговору;
			ДопСтрока.НеВыбирать = Истина;
			ДопСтрока.Тип = ТипЗнч(ДопРеквизитыУД);
			Если ДопСведенияУД.Количество() > 0 Тогда
				ДопСтрока.ПолучитьЭлементы().Добавить();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДеревоДопРекИСвед(ДопРекИСвед, ТекСтрока, Знач КолВложений)
	Для Каждого Элемент Из ДопРекИСвед Цикл  
		//Элемент.Свойство
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Контрагенты"); 
		ЗначениеПустаяСсылка = ОписаниеТипов.ПривестиЗначение(Неопределено);

		ДопСтрока = ТекСтрока.ПолучитьЭлементы().Добавить();
		
		Если Элемент.Значение = "" Тогда // если значение элемента не задано ,заполняем его пустой ссылкой 			
			ОписаниеТипов = Новый ОписаниеТипов(Элемент.Свойство.ТипЗначения); 
			ЗначениеПустаяСсылка = ОписаниеТипов.ПривестиЗначение(Неопределено);
			ДопСтрока.Значение = ЗначениеПустаяСсылка;
		Иначе 
			ДопСтрока.Значение = Элемент.Значение;	
		КонецЕсли;
		
		ДопСтрока.Синоним = Элемент.Свойство.Наименование;
		ДопСтрока.Тип = Элемент.Свойство.ТипЗначения;
		ДопСтрока.Имя = Элемент.Свойство.Код;
		ДопСтрока.ЭтоСвойство = Истина;
		
		Если Не Элемент.Свойство.ЭтоГруппа Тогда
			Если ПроверкаТипНужныйОбъект(Элемент.Свойство.ТипЗначения.Типы()[0]) Тогда
				ТекСтрокаНовая = ДопСтрока.ПолучитьЭлементы().Добавить();
			КонецЕсли; 
		КонецЕсли;
		
		Если ТипЗнч(Элемент.Свойство) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") И
			Элемент.Свойство.ЭтоГруппа Тогда
			
			ДопСтрока.Значение = Элемент.Свойство;
			ДопСтрока.Тип = ТипЗнч(ДопРекИСвед);	
			ДопСтрока.НеВыбирать = Истина;
			//ДопСтрока.Имя = Элемент.Свойство.Наименование;
			ТекСтрокаНовая = ДопСтрока.ПолучитьЭлементы().Добавить();
			
		ИначеЕсли Элемент.Свойство.ТипЗначения.Типы().Количество() = 1 И 
				ПроверкаТипНужныйОбъект(Элемент.Свойство.ТипЗначения.Типы()[0]) 
				И Элемент.Значение <> Неопределено Тогда
			Попытка
				Условие = СоздатьВложенность(Элемент.Значение.Метаданные().Реквизиты, Элемент.Значение);
			Исключение
				Попытка
					Условие = СоздатьВложенность(Элемент.Значение.Метаданные().ЗначенияПеречисления, Элемент.Значение);
				Исключение
					Условие = Ложь;
				КонецПопытки;	
			КонецПопытки;
			Если Условие И Элемент.Значение <> Неопределено Тогда		
				ТекСтрокаНовая = ДопСтрока.ПолучитьЭлементы().Добавить();
			КонецЕсли;
		КонецЕсли;	 
	КонецЦикла;	 
КонецПроцедуры

// Заполняет строку дерева
&НаСервере
Процедура ЗаполнитьОбъектДерева(ИмяСтроки, Документ, ТекСтрока3, ТекТЧ = 0)
	ИмяСтроки = СокрЛП(ИмяСтроки);
	
	Если ИмяСтроки = "Код" Тогда  
		ТекСтрока3.Синоним = "Код";
		ТекСтрока3.Имя = "Код";
		ТекСтрока3.Значение = Документ[ТекСтрока3.Имя];
		ТекСтрока3.Тип = ТипЗнч(Документ[ТекСтрока3.Имя]);
	ИначеЕсли  ИмяСтроки = "Табличная Часть" Тогда 
		НомерТЧ = ТекТЧ+1;
		ТекСтрока3.Значение = "Табличная Часть "+ НомерТЧ;
		ТекСтрока3.Тип	= Строка(ТипЗНЧ(Документ[Документ.Метаданные().ТабличныеЧасти[ТекТЧ].имя]));	
		ТекСтрока3.Имя   = Документ.Метаданные().ТабличныеЧасти[ТекТЧ].имя;
		ТекСтрока3.Синоним = Документ.Метаданные().ТабличныеЧасти[ТекТЧ].Синоним;
	ИначеЕсли  ИмяСтроки = "Номер" Тогда 
		ТекСтрока3.Синоним = "Номер";
		ТекСтрока3.Имя = "Номер";
		ТекСтрока3.Значение = Документ[ТекСтрока3.Имя];
		ТекСтрока3.Тип = ТипЗнч(Документ[ТекСтрока3.Имя]); 
	ИначеЕсли  ИмяСтроки = "Дата" Тогда 
		ТекСтрока3.Синоним = "Дата";
		ТекСтрока3.Имя = "Дата";
		ТекСтрока3.Значение = Документ[ТекСтрока3.Имя];
		ТекСтрока3.Тип = ТипЗнч(Документ[ТекСтрока3.Имя]); 
	ИначеЕсли  ИмяСтроки = "Наименование" Тогда 
		ТекСтрока3.Синоним = "Наименование";
		ТекСтрока3.Имя = "Наименование";
		ТекСтрока3.Значение = Документ[ТекСтрока3.Имя];
		ТекСтрока3.Тип = ТипЗнч(Документ[ТекСтрока3.Имя]); 
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ДобавитьНулевойУровень(Документ)
	ТекСтрока = тзМетаданные.ПолучитьЭлементы().Добавить(); 
	ТекСтрока.Синоним = Документ.Метаданные().Синоним;
	ТекСтрока.Имя = "Ссылка";
	ТекСтрока.Значение = Документ;
	ТекСтрока.Тип = ТипЗнч(Документ);  
	Возврат ТекСтрока;
КонецФункции // ()

&НаСервере
Функция СоздатьВложенность(Реквизиты,Документ,Уровень = 0, ПределВложенности = 1, ИмеющиесяОбъекты = Неопределено)
	
	КолРекв = Реквизиты.Количество();
	СоздатьВозврат = Ложь;
	Если КолРекв = 0 Тогда
		Возврат Ложь;	    		
	КонецЕсли; 
	ё = 0;
	//ПределВложенности = 0;
	Пока ё <= КолРекв-1 Цикл
		Если ПроверкаТипНужныйОбъект(Реквизиты[ё].Тип.Типы()[0]) Тогда
			//Проверяем вложенность
			
			Если Уровень = 2 тогда
				Создать = Истина;
			Иначе
				Создать = ?(ВыводитьТЧ,Истина,ОтФильтрТипов.СодержитТип(Реквизиты[ё].Тип.Типы()[0]));
				
				Если Не Создать Или ВыводитьТЧ Тогда 
					Объект = Реквизиты[ё];
					ТекОбъект = Документ[Объект.Имя];
					
					Если ТекОбъект = Неопределено Тогда
						Создать = Ложь;	
					Иначе
						Попытка
							РеквизитыВлож = ТекОбъект.Метаданные().Реквизиты;
							Если ПределВложенности < 40 Тогда
								ПределВложенности = ПределВложенности + 1;
								Создать = СоздатьВложенность(РеквизитыВлож,ТекОбъект,Уровень+1, ПределВложенности, ИмеющиесяОбъекты);
							КонецЕсли;
						Исключение
							Создать = Ложь;
						КонецПопытки;	
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Создать = ?(ВыводитьТЧ,Ложь,ОтФильтрТипов.СодержитТип(Реквизиты[ё].Тип.Типы()[0]));
		КонецЕсли;
		СоздатьВозврат = Создать или СоздатьВозврат;
		ё = ё+1;	
	КонецЦикла;
	Возврат СоздатьВозврат;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ И ТЧ

&НаКлиенте
Процедура тзМетаданныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//ЭтаФорма.РежимВыбора = Истина;
	Если ВыводитьТЧ Тогда 
		
		СтруктураРеквизита = Новый Структура;
		
		//СтруктураРеквизита.Вставить("ЕстьИсточник", Истина);
		
		Массив = Новый Массив;
		Массив.Добавить(Элемент.ТекущиеДанные.Имя);
		//Объект = Документ[ВыбраннаяСтрока.Имя];
		Если ТипЗнч(Элемент.ТекущиеДанные.Значение) = Тип("ХранилищеЗначения") Тогда
			Если ТипЗнч(Элемент.ТекущиеДанные.Значение.Получить()) <> Тип("ТаблицаЗначений") Тогда
				Сообщить("Поле ("+Элемент.ТекущиеДанные.Синоним + ") не является табличной частью!");
				ПризнакЗакрытия = Ложь;
				СтандартнаяОбработка = Ложь;
			Иначе
				ПризнакЗакрытия = Истина;
			КонецЕсли;
		ИначеЕсли Найти(Строка(Элемент.ТекущиеДанные.Тип), "табличная часть: ") <= 0 Тогда
			Сообщить("Поле ("+Элемент.ТекущиеДанные.Синоним + ") не является табличной частью!");
			ПризнакЗакрытия = Ложь;
			СтандартнаяОбработка = Ложь;
		Иначе 
			ПризнакЗакрытия = Истина;
		КонецЕсли; 
		
		ТекСтр=ВыбраннаяСтрока;
		Уровень = ВыбраннаяСтрока;
		СтрокаДляДЗначения="["+Элемент.ТекущиеДанные.Синоним+"]"; 
		
		Для ТекУр=1 По Уровень Цикл
			ТекСтр = тзМетаданные.НайтиПоИдентификатору(ТекСтр).ПолучитьРодителя();
			Если Не ТекСтр = Неопределено Тогда
				Массив.Добавить(тзМетаданные.НайтиПоИдентификатору(ТекСтр.ПолучитьИдентификатор()).Имя);
				СтрокаДляДЗначения = СтрокаДляДЗначения+".["+ТекСтр.Синоним+"]";
				ТекСтр = ТекСтр.ПолучитьИдентификатор();
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;  
		
		Хранилище = ПолучитьХранилищеЗначения(Массив); 		
		СтруктураРеквизита.Вставить("Синоним", СтрокаДляДЗначения); 
		
		СтруктураРеквизита.Вставить("Хранилище", Хранилище);
			
	Иначе
		
		ПризнакЗакрытия = Истина;
		Если ЗначениеЗаполнено(ОтФильтрТипов) Тогда 
			
			Если не ОтФильтрТипов.СодержитТип(ТипЗнч(ВыбраннаяСтрока.Значение)) тогда
				Сообщить("Поле ("+ВыбраннаяСтрока.Синоним + ") не соответствует отбору");
				ПризнакЗакрытия = Ложь;
				СтандартнаяОбработка = Ложь;
			Иначе
				ПризнакЗакрытия = Истина;
			КонецЕсли;
			
		КонецЕсли;		
		СтруктураРеквизита = Новый Структура;
		
		//СтруктураРеквизита.Вставить("ЕстьИсточник", Истина);
		
		Массив = Новый Массив();
		ТекСтр = ВыбраннаяСтрока;            
		Уровень = ВыбраннаяСтрока;
		
		СтрокаДляДЗначения = "[" + тзМетаданные.НайтиПоИдентификатору(ТекСтр).Синоним + "]"; 
		
		// проверяем не является ли выбранная строка потомком доп реквизитов или свойств
		// путем перебора родителей
		
		ТекДанные = тзМетаданные.НайтиПоИдентификатору(ТекСтр);
		ТекДанныеСвойство = ТекДанные;
		//
		Пока Не ТекДанныеСвойство = Неопределено Цикл
			Если ТекДанныеСвойство.ЭтоСвойство Тогда
				Прервать;	
			КонецЕсли;
			ТекДанныеСвойство = ТекДанныеСвойство.ПолучитьРодителя();
		КонецЦикла;
		
		Если ТекДанныеСвойство = Неопределено Тогда
				ТекДанныеСвойство = ТекДанные;
		КонецЕсли;
			
		// Если найдена строка доп свойств или сведений:
		Если ТекДанныеСвойство.ЭтоСвойство Тогда
			КодДопСвойства = ТекДанныеСвойство.Имя;
			ОбъектДопСвойства = ТекДанныеСвойство.ПолучитьРодителя().ПолучитьРодителя().Значение;
			СтруктураРеквизита.Вставить("ЭтоДопСведение", Истина);
			СтруктураРеквизита.Вставить("ОбъектДопСвойства",ОбъектДопСвойства);
			Массив.Добавить(тзМетаданные.НайтиПоИдентификатору(ТекСтр).Имя);
			СтруктураРеквизита.Вставить("КодДопСвойства", КодДопСвойства);
			Строка = ТекСтр;
			
			Для ТекУр=1 По Уровень Цикл

				Если тзМетаданные.НайтиПоИдентификатору(ТекСтр) = ТекДанныеСвойство Тогда
					Прервать;
				КонецЕсли; 
				
				ТекСтр = тзМетаданные.НайтиПоИдентификатору(ТекСтр).ПолучитьРодителя();
				Если Не ТекСтр = Неопределено И Не ТекСтр.ЭтоСвойство Тогда
					Массив.Добавить(тзМетаданные.НайтиПоИдентификатору(ТекСтр.ПолучитьИдентификатор()).Имя);
					ТекСтр = ТекСтр.ПолучитьИдентификатор();
				Иначе
					Если ТекДанныеСвойство.ПолучитьЭлементы().Количество() > 0 Тогда
						//Массив.Добавить("Ссылка");         // здесь был коммент
					КонецЕсли; 

					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Для ТекУр=1 По Уровень Цикл
				Строка = тзМетаданные.НайтиПоИдентификатору(Строка).ПолучитьРодителя();
				Если Не Строка = Неопределено Тогда
					Если Найти(Строка.Синоним, "Дополнительные реквизиты") = 0 И Найти(Строка.Синоним, "Дополнительные сведения") = 0 Тогда 
						Массив.Добавить(Строка.Имя);
					КонецЕсли;
					Если Найти(Строка.Синоним, "Дополнительные сведения") > 0 Тогда 
						Массив.Добавить("<ДС>");
					КонецЕсли;					
					Если Найти(Строка.Синоним, "Дополнительные реквизиты") > 0 Тогда 
						Массив.Добавить("<ДР>");
					КонецЕсли;
					СтрокаДляДЗначения = СтрокаДляДЗначения+".["+Строка.Синоним+"]";
					Строка = Строка.ПолучитьИдентификатор();
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			
		Иначе // Если строка обычных свойств
			СтруктураРеквизита.Вставить("ЭтоДопСведение", Ложь);
			СтруктураРеквизита.Вставить("ОбъектДопСвойства",Неопределено);
			СтруктураРеквизита.Вставить("КодДопСвойства",Неопределено);
			Массив.Добавить(тзМетаданные.НайтиПоИдентификатору(ТекСтр).Имя); 
			
			Для ТекУр=1 По Уровень Цикл
				ТекСтр = тзМетаданные.НайтиПоИдентификатору(ТекСтр).ПолучитьРодителя();
				Если Не ТекСтр = Неопределено Тогда
					Массив.Добавить(тзМетаданные.НайтиПоИдентификатору(ТекСтр.ПолучитьИдентификатор()).Имя);
					СтрокаДляДЗначения = СтрокаДляДЗначения+".["+ТекСтр.Синоним+"]";
					ТекСтр = ТекСтр.ПолучитьИдентификатор();
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли; 
		
		
		
		
		//Хранилище = ПолучитьХранилищеЗначения(Массив); 		
		СтруктураРеквизита.Вставить("Синоним", СтрокаДляДЗначения); 
		//СтруктураРеквизита.Вставить("Хранилище", Хранилище);
		СтруктураРеквизита.Вставить("МассивДанных", Массив);
		
	КонецЕсли;
	
	Если тзМетаданные.НайтиПоИдентификатору(ВыбраннаяСтрока).НеВыбирать Тогда
		ПризнакЗакрытия = Ложь;	
	КонецЕсли; 
	
	Если ПризнакЗакрытия = Истина Тогда
		Оповестить("ШаблоныПечФормВыборРеквизита", СтруктураРеквизита);
		ЭтаФорма.Закрыть(СтруктураРеквизита);		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьХранилищеЗначения(Массив)
	
	Хранилище = Новый ХранилищеЗначения(Массив);	
	Возврат Хранилище;
	
КонецФункции // ПолучитьХранилищеЗначения()

&НаКлиенте
Процедура тзМетаданныеПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущаяСтрока <> неопределено и СтрокаКоллекцииДерева <> неопределено тогда
		Если Элемент.ТекущаяСтрока <> СтрокаКоллекцииДерева	тогда
			СтрокаКоллекцииДерева = Элемент.ТекущаяСтрока;
			Возврат;
		КонецЕсли;
	КонецЕсли;

	
	Если не СтрокаКоллекцииДерева = неопределено и УстановитьФокус Тогда
		Попытка
			Проверка = ?(Строка(СтрокаКоллекцииДерева.Тип) = "Число",Истина,Ложь);
			Элемент.ТекущаяСтрока = СтрокаКоллекцииДерева;
		Исключение
			СтрокаКоллекцииДерева = Неопределено;
			Возврат;
		КонецПопытки;
		
		Если НАйден и СтрокаКоллекцииДерева <> Неопределено Тогда
		    //Элемент.ТекущиеДанные
			НАйден = Ложь;
           		
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Функция ПроверкаТипНужныйОбъект(ПроверяемыйТип) Экспорт	
	Если Не ПроверяемыйТип = Тип("Число") И Не ПроверяемыйТип = Тип("Дата") И Не ПроверяемыйТип = Тип("Булево") И 
			Не ПроверяемыйТип = Тип("Строка") И Не ПроверяемыйТип = Тип("Неопределено") И
			Не Перечисления.ТипВсеСсылки().СодержитТип(ПроверяемыйТип) И Не (ПроверяемыйТип = Тип("ХранилищеЗначения")) И
			Не ПроверяемыйТип = Тип("УникальныйИдентификатор") И 
			Не ПроверяемыйТип = Тип("ТочкаМаршрутаБизнесПроцессаСсылка.БизнесПроцессы") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции // ПроверкаТипНужныйОбъект()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Если ТипЗнч(Документ) = Тип("СправочникСсылка.Контрагенты") Тогда
	//	ПолучитьДопРеквизитыДолжника(Документ);
	//	ПолучитьДопСведенияДолжника(Документ);
	//ИначеЕсли ТипЗнч(Документ) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		//ПолучитьДопРеквизитыДолжника(Документ);
		//ПолучитьДопСведенияДолжника(Документ);
	//////ИначеЕсли ТипЗнч(Документ) = Тип("СправочникСсылка.УслугиПоДоговору") Тогда
	//////	ПолучитьДопРеквизитыДолжника(Документ);
	//////	ПолучитьДопСведенияДолжника(Документ);
	//////ИначеЕсли ТипЗнч(Документ) = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда	
	//////	ПолучитьДопРеквизитыДО(Документ);
	//////	ПолучитьДопСведенияДО(Документ);
	//////	
	//////ИначеЕсли ТипЗнч(Документ) = Тип("СправочникСсылка.Организации") Тогда	
	//////	ПолучитьДопРеквизитыДО(Документ);
	//////	ПолучитьДопСведенияДО(Документ);
	//////ИначеЕсли ТипЗнч(Документ) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда	
	//////	ПолучитьДопРеквизитыДО(Документ);
	//////	ПолучитьДопСведенияДО(Документ);
	//КонецЕсли; 
	
	Если ТипЗНЧ(Этаформа.ВладелецФормы.Объект.Ссылка) = Тип("СправочникСсылка.тсШаблоныПечатныхДокументов") Тогда
		ВыбранноеЗначение =  Этаформа.ВладелецФормы.Элементы.РеквизитыИСвойства.ТекущиеДанные.Значение;
	ИначеЕсли ТипЗНЧ(Этаформа.ВладелецФормы.Объект.Ссылка) = Тип("СправочникСсылка.ШаблоныТекстаДляАвтоинформирования") Тогда
		ВыбранноеЗначение =  Этаформа.ВладелецФормы.Элементы.Настройка.ТекущиеДанные.Значение;		
	КонецЕсли;
	
	ТаблицаМатаданных(ВыбранноеЗначение);	
	
	Если НомерСтроки.Количество() > 0  Тогда
		Для каждого Эл  Из НомерСтроки Цикл
			Элементы.ТабМетаданныеДерево.Развернуть(Эл.Значение);
		КонецЦикла;
		Элементы.ТабМетаданныеДерево.ТекущаяСтрока = Эл.Значение;
	КонецЕсли;
		
	//Устанавливаем начальное значение переменных
	УстановитьФокус = Истина;
	Если ЗначениеЗаполнено(ХранилищеЗначРекв) Тогда
		МсвРеквСтрок = ХранилищеЗначРекв.Получить();		
		Если МсвРеквСтрок <> Неопределено тогда
			КолСтрМсв = МсвРеквСтрок.Количество();				
			Если КолСтрМсв > 1 тогда			
				Уровень = КолСтрМсв-2;                                  
			Иначе
				УстановитьФокус = Ложь;			
			КонецЕсли;
		Иначе
			УстановитьФокус = Ложь;			
		КонецЕсли;
	Иначе
		УстановитьФокус = Ложь
	КонецЕсли;
	Найден = Ложь;
	СтрКолДер = ПолучитьКоллекциюСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабМетаданныеДеревоПередРазворачиванием(Элемент, Строка, Отказ)
	Если Элемент.ТекущаяСтрока = Неопределено Тогда	
		Возврат;	
	Иначе
			ДеревоПередРазворачиванием(Строка);
    КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДеревоПередРазворачиванием(Строка)
	ТекСтрока = тзМетаданные.НайтиПоИдентификатору(Строка);
	Текстрока.ПолучитьЭлементы().Очистить();
		       
	Если ПроверкаТипНужныйОбъект(ТипЗнч(ТекСтрока.Значение)) Тогда
		Если ТекСтрока.НеВыбирать Тогда
			ТекСтрока.ПолучитьЭлементы().Очистить();
			Если ТекСтрока.Значение = 
					ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_Контрагенты Тогда
				СоздатьДеревоДопРекИСвед(ДопРеквизитыД, ТекСтрока, 1);
			ИначеЕсли ТекСтрока.Значение = 
					ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_Контрагенты Тогда
				СоздатьДеревоДопРекИСвед(ДопСведенияД, ТекСтрока, 1); //!!!			
			ИначеЕсли ТекСтрока.Значение = 
					ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_ДолговыеОбязательства Тогда
				СоздатьДеревоДопРекИСвед(ДопРеквизитыДО, ТекСтрока, 1);
			ИначеЕсли ТекСтрока.Значение = 
					ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_ДолговыеОбязательства Тогда
				СоздатьДеревоДопРекИСвед(ДопСведенияДО, ТекСтрока, 1);
				
			ИначеЕсли ТекСтрока.Значение = 
					ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_ДоговорыКонтрагентов Тогда
				СоздатьДеревоДопРекИСвед(ДопРеквизитыДК, ТекСтрока, 1);
			ИначеЕсли ТекСтрока.Значение = 
					ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_ДоговорыКонтрагентов Тогда
				СоздатьДеревоДопРекИСвед(ДопСведенияДК, ТекСтрока, 1);
			ИначеЕсли ТекСтрока.Значение = 
					ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_УслугиПоДоговору Тогда
				СоздатьДеревоДопРекИСвед(ДопРеквизитыУД, ТекСтрока, 1);
			ИначеЕсли ТекСтрока.Значение = 
					ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_УслугиПоДоговору Тогда
				СоздатьДеревоДопРекИСвед(ДопСведенияУД, ТекСтрока, 1);
				
			ИначеЕсли ТекСтрока.Значение = 
					ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_Организации Тогда
				СоздатьДеревоДопРекИСвед(ДопРеквизитыО, ТекСтрока, 1);
			ИначеЕсли ТекСтрока.Значение = 
					ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_Организации Тогда
				СоздатьДеревоДопРекИСвед(ДопСведенияО, ТекСтрока, 1);
				
			ИначеЕсли ТекСтрока.Значение = 
				ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_ИсполнительныеДокументы Тогда
				СоздатьДеревоДопРекИСвед(ДопРеквизитыИД, ТекСтрока, 1);
			ИначеЕсли ТекСтрока.Значение = 
				ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_ИсполнительныеДокументы Тогда
				СоздатьДеревоДопРекИСвед(ДопСведенияИД, ТекСтрока, 1);
	
			ИначеЕсли ТекСтрока.Значение = 
					ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_ПодразделенияОрганизаций Тогда
				СоздатьДеревоДопРекИСвед(ДопРеквизитыПО, ТекСтрока, 1);
			ИначеЕсли ТекСтрока.Значение = 
					ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_ПодразделенияОрганизаций Тогда
				СоздатьДеревоДопРекИСвед(ДопСведенияПО, ТекСтрока, 1);
				
			ИначеЕсли ТекСтрока.Значение = 
				ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_Пользователи Тогда
				СоздатьДеревоДопРекИСвед(ДопРеквизитыПользователь, ТекСтрока, 1);
			ИначеЕсли ТекСтрока.Значение = 
				ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_Пользователи Тогда
				СоздатьДеревоДопРекИСвед(ДопСведенияПользователь, ТекСтрока, 1);
	
				
			////ИначеЕсли ГруппыДСД.НайтиСтроки(Новый Структура("Свойство", ТекСтрока.Значение)).Количество() <> 0 Тогда
			////	Строки = ДопСведенияД.НайтиСтроки(Новый Структура("Группа", ТекСтрока.Значение));
			////	СоздатьДеревоДопРекИСвед(Строки, ТекСтрока, 1);
			////ИначеЕсли ГруппыДСДО.НайтиСтроки(Новый Структура("Свойство", ТекСтрока.Значение)).Количество() <> 0 Тогда
			////	Строки = ДопСведенияДО.НайтиСтроки(Новый Структура("Группа", ТекСтрока.Значение));
			////	СоздатьДеревоДопРекИСвед(Строки, ТекСтрока, 1);
			КонецЕсли;
		Иначе
			ТекОбъект = ТекСтрока.Значение;
			ТекСтрока.ПолучитьЭлементы().Очистить();
			СоздатьДерево(ТекОбъект, ТекСтрока, 1, Неопределено);
		КонецЕсли;            
	Иначе
		ТекОбъект = ТекСтрока.Значение;
		СоздатьДерево(ТекОбъект, ТекСтрока, 1, Неопределено);
	КонецЕсли;
КонецПроцедуры

Функция ВыбранноеЗначениеНаоборот(ВыбранноеЗначение)
	
	ВыбранноеЗначение = 	НРег(СтрЗаменить(СокрЛП(ВыбранноеЗначение), " ", ""));
	ВыбранноеЗначение = 	СтрЗаменить(ВыбранноеЗначение, "/", "");
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Номер");
	ТЗ.Колонки.Добавить("Строка");	
	Номер = 0;
	
	Пока СтрДлина(ВыбранноеЗначение) > 0 Цикл
		
		НачТега = Найти(ВыбранноеЗначение, "[");
		КонТега = Найти(ВыбранноеЗначение, "]");
		
		Если НачТега = 0  И КонТега = 0 Тогда
			Прервать;	
		КонецЕсли;
		
		ИмяТега = Сред(ВыбранноеЗначение, НачТега, КонТега - НачТега + 1); 
		Номер = Номер + 1;
		НовСтр = ТЗ.Добавить();
		НовСтр.Номер = Номер;
		НовСтр.Строка = ИмяТега;
		ВыбранноеЗначение =  Сред(ВыбранноеЗначение, КонТега + 1);
		
	КонецЦикла;
	ТЗ.Сортировать("Номер Убыв");
	ВыбранноеЗначение = ТЗ.ВыгрузитьКолонку("Строка");	
	
	Возврат ВыбранноеЗначение;
	
КонецФункции



// Общий модуль КлиентСервер ВалидаторНБКИ.
//   ПроверитьНаКлиентеXML(ПолноеИмя)  
//   ПроверитьНаСервереXML(ПолноеИмя, АдресXML)
//   ПроверитьXML(ПолноеИмя, АдресXML = Неопределено)
// 
//     ПолноеИмя - Полное имя файла XML
//     АдресXML  - Адрес в хранилище

#Область ПрограммныйИнтерфейс

Функция ПроверитьXMLПоНБКИ(ПолноеИмя, АдресXML = Неопределено) Экспорт

	СтруктураОбработки = СтруктураОбработкиXML(ПолноеИмя, АдресXML = Неопределено);
	
	Возврат ПроверкаФайлаДляНБКИ(
		СтруктураОбработки["ФайлXML"].Имя,
		СтруктураОбработки["ВременныйКаталог"]);

КонецФункции // ()

Функция ПроверитьXMLПоСообщениямФедресурс(ПолноеИмя, ТипСообщения, АдресXML = Неопределено) Экспорт

	СтруктураОбработки = СтруктураОбработкиXML(ПолноеИмя, АдресXML = Неопределено);
	
	ИмяСхемы = ПолучитьСхемуСообщенияФедресурс(ТипСообщения);
	
	Возврат ПроверкаФайлаСообщенияФедресурс(
		СтруктураОбработки["ФайлXML"].Имя,
		СтруктураОбработки["ВременныйКаталог"],
		ИмяСхемы);

КонецФункции // ()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаспределениеКлиентСервер

Функция СтруктураОбработкиXML(ПолноеИмя, АдресXML = Неопределено)

	#Если Клиент Тогда
	
		Возврат СтруктураОбработкиНаКлиентеXML(ПолноеИмя);
	
	#КонецЕсли
	
	#Если Сервер Тогда
	
		Возврат СтруктураОбработкиНаСервереXML(ПолноеИмя, АдресXML);
	
	#КонецЕсли

КонецФункции

&НаКлиенте
Функция СтруктураОбработкиНаКлиентеXML(ПолноеИмя)

	ФайлXML = Новый Файл(ПолноеИмя);
	Если Не ФайлXML.Существует() Тогда
	
		ВызватьИсключение СтрШаблон("Файла не существует: %1", ПолноеИмя);
	
	КонецЕсли;
	
	ВременныйКаталог = СоздатьВременныйКаталог();
	
	СделатьКопиюФайла(ФайлXML, ВременныйКаталог);
	
	Описание = Новый Структура;
	Описание.Вставить("ФайлXML", ФайлXML);
	Описание.Вставить("ВременныйКаталог", ВременныйКаталог);
	
	Возврат Описание;

КонецФункции

&НаСервере
Функция СтруктураОбработкиНаСервереXML(ПолноеИмя, АдресXML)

	ФайлXML = Новый Файл(ПолноеИмя);

	ПроверяемыйДокумент = ПолучитьИзВременногоХранилища(АдресXML);
	Если ПроверяемыйДокумент = Неопределено Тогда
	
		ВызватьИсключение
			СтрШаблон(
				"Данных файла XML, по переданному адресу не обнаружилось
				|Имя Файла: %1
				|Адрес: %2",
				ПолноеИмя,
				АдресXML);
	
	КонецЕсли;
	
	ВременныйКаталог = СоздатьВременныйКаталог();
	
	ПроверяемыйДокумент.Записать(ВременныйКаталог + ПолучитьРазделительПути() + ФайлXML.Имя);

	Описание = Новый Структура;
	Описание.Вставить("ФайлXML", ФайлXML);
	Описание.Вставить("ВременныйКаталог", ВременныйКаталог);
	
	Возврат Описание;
	
КонецФункции

#КонецОбласти

#Область Конфигурация

Функция ИмяФайлаВалидатора()

	Возврат "validator.jar";

КонецФункции // ()

Функция ПутьJAVA(Адрес)

	Если ПустаяСтрока(Адрес) Тогда
	
		Возврат "java";
	
	КонецЕсли;
	
	Файл = Новый Файл(Адрес);
	Если Не Файл.Существует() Тогда
	
		ВызватьИсключение
			СтрШаблон("Исполняемого файла по указанному адресу не существует: %1", Адрес);
	
	КонецЕсли;
	
	Возврат """" + Файл.ПолноеИмя + """";

КонецФункции // ()

Функция ПриставкаФайлаОшибки()

	Возврат "error_";

КонецФункции // ()

Функция СтрокаЗапуска(ИмяФайлаСхемы, ИмяФайлаПроверки, ПутьJAVA)

	Возврат СтрШаблон(
		"%1 -jar %2 -xsd ./%3 -xml ./%4",
		ПутьJAVA(ПутьJAVA),
		ИмяФайлаВалидатора(),
		ИмяФайлаСхемы,
		ИмяФайлаПроверки);

КонецФункции // ()

Функция ТипыСообщенийФедресурс()

	Описание = Новый Соответствие;
	Описание.Вставить("ПереуступкаПрав", "AssignmentOfClaim.xsd");
	Описание.Вставить("ВключениеДолжниковВСписокВзыскания", "InclusionDebtorsToDebtCollectorList2.xsd");
	Описание.Вставить("ИсключениеДолжниковИзСпискаВзыскания", "ExclusionDebtorsToDebtCollectorList2.xsd");
	
	Возврат Описание;

КонецФункции // ()

#КонецОбласти

Функция ПолучитьСхемуСообщенияФедресурс(Значение)

	ДоступныеТипы = ТипыСообщенийФедресурс();
	
	ИмяСхемы = ДоступныеТипы.Получить(Значение);
	Если ИмяСхемы = Неопределено Тогда
	
		ВызватьИсключение "Переданный тип сообщения федресурса, не доступен";
	
	КонецЕсли;
	
	Возврат ИмяСхемы;

КонецФункции // ()

Функция СоздатьВременныйКаталог()

	ВременныйКаталог = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ВременныйКаталог);
	
	Возврат ВременныйКаталог;

КонецФункции // ()

Процедура СделатьКопиюФайла(Файл, ВременныйКаталог)

	КопироватьФайл(Файл.ПолноеИмя, ВременныйКаталог + ПолучитьРазделительПути() + Файл.Имя);

КонецПроцедуры

Процедура ВыгрузитьВалидатор(ДанныеВалидатора, ВременныйКаталог)

	ДанныеВалидатора.Записать(ВременныйКаталог + ПолучитьРазделительПути() + ИмяФайлаВалидатора());

КонецПроцедуры

Процедура ВыгрузитьСхему(ДанныеСхемы, ВременныйКаталог)

	ПотокСхемы = Новый ПотокВПамяти(
		ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ДанныеСхемы));
	ЧтениеАрхива = Новый ЧтениеZipФайла(ПотокСхемы, "");
	ЧтениеАрхива.ИзвлечьВсе(ВременныйКаталог);
	
	ПотокСхемы.Закрыть();
	ЧтениеАрхива.Закрыть();

КонецПроцедуры

Функция ПрочитатьФайлСОшибками(ИмяИсходногоФайла, ВременныйКаталог)

	ФайлРезультата = Новый ЧтениеТекста(
		ВременныйКаталог + ПолучитьРазделительПути() + ПриставкаФайлаОшибки() + ИмяИсходногоФайла,
		КодировкаТекста.UTF8);
		
	Ошибки = ФайлРезультата.Прочитать();
	
	ФайлРезультата.Закрыть();
	
	Возврат Ошибки;

КонецФункции // ()

Функция ПроверкаФайлаДляНБКИ(ИмяФайлаПроверки, ВременныйКаталог)

	ДанныеДляПроверки = ВалидацияXMLПоСхемеСервер.ПроверкаНБКИ();
	
	Возврат ПроверкаФайлаПоСхеме(ДанныеДляПроверки, ИмяФайлаПроверки, ВременныйКаталог);

КонецФункции // ()

Функция ПроверкаФайлаСообщенияФедресурс(ИмяФайлаПроверки, ВременныйКаталог, ИмяСхемы)

	ДанныеДляПроверки = ВалидацияXMLПоСхемеСервер.ПроверкаСообщенийФедресурс();
	
	ДанныеДляПроверки["ИмяСхемы"] = ИмяСхемы;
	
	Возврат ПроверкаФайлаПоСхеме(ДанныеДляПроверки, ИмяФайлаПроверки, ВременныйКаталог);

КонецФункции // ()

Функция ПроверкаФайлаПоСхеме(ДанныеДляПроверки, ИмяФайлаПроверки, ВременныйКаталог)

	ВыгрузитьВалидатор(ДанныеДляПроверки["Валидатор"], ВременныйКаталог);
	ВыгрузитьСхему(ДанныеДляПроверки["Схема"], ВременныйКаталог);
	
	СтрокаЗапуска = СтрокаЗапуска(
		ДанныеДляПроверки["ИмяСхемы"], ИмяФайлаПроверки, ДанныеДляПроверки["ПутьJAVA"]);
	
	КодВозврата = 0;
	ЗапуститьПриложение(СтрокаЗапуска, ВременныйКаталог, Истина, КодВозврата);
		
	Если КодВозврата <> 0 Тогда
	
		Возврат "Ошибка выполнения";
	
	КонецЕсли;
	
	Ошибки = ПрочитатьФайлСОшибками(ИмяФайлаПроверки, ВременныйКаталог);
	
	Возврат Ошибки;

КонецФункции // ()

#КонецОбласти
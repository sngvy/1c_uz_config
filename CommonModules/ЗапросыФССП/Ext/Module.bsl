
&НаСервере
Процедура ПолучитьИП(Должник, ДатаРождения, Код) Экспорт	
	Попытка
		// Получить код региона	
		КодРегиона = ДаДатаСлужебный.ПолучитьКодРегиона(ОбъектыСервер.ПолучитьЗначениеСвойства(Должник, "0049"));
	Исключение 
		// Адрес непригоден
		Сообщить("Не удалось определить регион должника! Проверьте наличие и корректность адреса регистрации");
		Возврат;
	КонецПопытки;
	
	Попытка
		// Запрос к API
		SSL = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Новый СертификатыУдостоверяющихЦентровОС());  
		Соединение = Новый HTTPСоединение("api.xn--80ajbekothchmme5j.xn--p1ai", 443,,,,, SSL);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Authorization", "Bearer " + "XVgdBurCfH_dnd0HwB0i30HSuXlirz7P");
		Заголовки.Вставить("Content-Type", "application/json");
		
		Данные = Новый Структура();
		Данные.Вставить("document_type", "fio_birth_date_requisite");
		ИП = Новый Структура();
		ИП.Вставить("birth_date", ДатаРождения);
		ИП.Вставить("fio", Строка(Должник));
		ИП.Вставить("region_id", КодРегиона);
		Данные.Вставить("document_value", ИП);
		
		ЗаписьJSON = Новый ЗаписьJSON;            
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, Данные);            
		ТелоЗапроса = ЗаписьJSON.Закрыть(); 
		
		Запрос = Новый HTTPЗапрос("/fssp/frontend-search?lead_source_id=undefined&page=0&refresh=true", Заголовки);
		Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
		
		Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
		
		//Сообщить(Ответ.ПолучитьТелоКакСтроку());
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		Данные = ПрочитатьJSON(ЧтениеJSON, Ложь);
		ЧтениеJSON.Закрыть();
		
		// Удалить старые ИП по должнику
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсполнительныеПроизводства.ИП КАК ИП,
		|	ИсполнительныеПроизводства.ДатаПроверки КАК ДатаПроверки,
		|	ИсполнительныеПроизводства.Должник КАК Должник,
		|	ИсполнительныеПроизводства.ОСП КАК ОСП,
		|	ИсполнительныеПроизводства.ИД КАК ИД,
		|	ИсполнительныеПроизводства.Взыскатель КАК Взыскатель,
		|	ИсполнительныеПроизводства.СПИ КАК СПИ,
		|	ИсполнительныеПроизводства.ТелефонСПИ КАК ТелефонСПИ,
		|	ИсполнительныеПроизводства.ДатаВозбуждения КАК ДатаВозбуждения,
		|	ИсполнительныеПроизводства.СуммаЗадолженности КАК СуммаЗадолженности,
		|	ИсполнительныеПроизводства.СуммаИсполнительскогоСбора КАК СуммаИсполнительскогоСбора,
		|	ИсполнительныеПроизводства.Всего КАК Всего,
		|	ИсполнительныеПроизводства.ТипИД КАК ТипИД,
		|	ИсполнительныеПроизводства.СтатусИД КАК СтатусИД
		|ИЗ
		|	РегистрСведений.ИсполнительныеПроизводства КАК ИсполнительныеПроизводства
		|ГДЕ
		|	ИсполнительныеПроизводства.Должник = &Должник";
		Запрос.УстановитьПараметр("Должник", Справочники.Контрагенты.НайтиПоКоду(Код));
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.ИсполнительныеПроизводства.СоздатьМенеджерЗаписи();
			
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			
			МенеджерЗаписи.Удалить();        
		КонецЦикла;	
		
		// Парсинг JSON
		Попытка
			Если Данные[0].accruals = Неопределено Тогда
				МенеджерЗаписи = РегистрыСведений.ИсполнительныеПроизводства.СоздатьМенеджерЗаписи();
				
				МенеджерЗаписи.Должник = Справочники.Контрагенты.НайтиПоКоду(Код);
				УИДЗапроса = Новый УникальныйИдентификатор();
				МенеджерЗаписи.ИП = "Действующие ИП не найдены " + "(" + УИДЗапроса + ")";
				МенеджерЗаписи.ДатаПроверки = СтрСоединить(СтрРазделить(Данные[0].check_date, "- :"), "");
				
				МенеджерЗаписи.Записать();
				
			ИначеЕсли Данные[0].accruals.Количество() > 0 Тогда
				// Записать признак наличия ИП
				ДолжникОбъект = Справочники.Контрагенты.НайтиПоКоду(Код).ПолучитьОбъект();
				Если Не ДолжникОбъект.ЕстьИП Тогда
					ДолжникОбъект.ЕстьИП = Истина;
					ДолжникОбъект.Записать();
				КонецЕсли;
				Для Сч = 0 По Данные[0].accruals.ВГраница() Цикл
					ИП = Данные[0].accruals[Сч].account;
					ОСП = Данные[0].accruals[Сч].additional_fields.division_name;
					ИД = Данные[0].accruals[Сч].additional_fields.exe_doc_reqs;
					РеквизитыИД = СтрокуВЧисло(Данные[0].accruals[Сч].additional_fields.exe_doc_reqs);
					Для Каждого Стр Из РеквизитыИД Цикл
						Если СтрДлина(Стр) = 10 Тогда
							ИННВзыскателя = Стр;
							// Нормализовать взыскателя
							// Запрос к API
							SSL = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Новый СертификатыУдостоверяющихЦентровОС());  
							Соединение = Новый HTTPСоединение("suggestions.dadata.ru", 443,,,,, SSL);
							
							Заголовки = Новый Соответствие;
							Заголовки.Вставить("Authorization", "Token " + "0209132e40a4178b46e5449713418860f53d7553");
							Заголовки.Вставить("Content-Type", "application/json");
							Заголовки.Вставить("Accept", "application/json");
							
							ДанныеВзыскателя = Новый Структура();
							ДанныеВзыскателя.Вставить("query", ИННВзыскателя);
							
							ЗаписьJSON = Новый ЗаписьJSON;            
							ЗаписьJSON.УстановитьСтроку();
							ЗаписатьJSON(ЗаписьJSON, ДанныеВзыскателя);            
							ТелоЗапроса = ЗаписьJSON.Закрыть(); 
							
							Запрос = Новый HTTPЗапрос("/suggestions/api/4_1/rs/findById/party", Заголовки);
							Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
							
							Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
							
							//Сообщить(Ответ.ПолучитьТелоКакСтроку());
							
							ЧтениеJSON = Новый ЧтениеJSON;
							ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
							ДанныеВзыскателя = ПрочитатьJSON(ЧтениеJSON, Ложь);
							ЧтениеJSON.Закрыть();
							
							Попытка
								Взыскатель = ДанныеВзыскателя.suggestions[0].value;
							Исключение
								Взыскатель = "—";
							КонецПопытки;
						Иначе
							Взыскатель = "—";
						КонецЕсли;
					КонецЦикла;
					ДанныеСПИ = Данные[0].accruals[Сч].additional_fields.officer;
					// Разложить на массив
					МассивДанныхСПИ = СтрРазделить(СтрЗаменить(ДанныеСПИ, ".+", ". +"), " ", Ложь);
					СПИ = МассивДанныхСПИ[0] + " " + МассивДанныхСПИ[1]  + " " + МассивДанныхСПИ[2];
					Если МассивДанныхСПИ.Количество() > 3 Тогда 
						ТелефонСПИ = МассивДанныхСПИ[3];
					КонецЕсли;
					ДатаПроверки = СтрСоединить(СтрРазделить(Данные[0].accruals[Сч].check_time, "- :"), "");
					ДатаВозбуждения = СтрСоединить(СтрРазделить(Данные[0].accruals[Сч].date, "- :"), "");
					// Привести суммы к дробному числу
					МассивСуммИП = ДостатьЧислаИзСтроки(Данные[0].accruals[Сч].description);
					Если МассивСуммИП.Количество() > 1 Тогда
						СуммаИП = МассивСуммИП[0];
						СуммаИспСбора = МассивСуммИП[1];
					Иначе
						СуммаИП = МассивСуммИП[0];
					КонецЕсли;
					ТипИД = Данные[0].accruals[Сч].description;
					СтатусИД = Данные[0].accruals[Сч].status.name;
					
					// Записать ИП в регистр сведений
					МенеджерЗаписи = РегистрыСведений.ИсполнительныеПроизводства.СоздатьМенеджерЗаписи();
					
					МенеджерЗаписи.Должник = Справочники.Контрагенты.НайтиПоКоду(Код);
					МенеджерЗаписи.ИП = ИП;
					МенеджерЗаписи.ОСП = ОСП;
					МенеджерЗаписи.ИД = ИД;
					МенеджерЗаписи.Взыскатель = Взыскатель;
					МенеджерЗаписи.СПИ = СПИ; 
					МенеджерЗаписи.ТелефонСПИ = ТелефонСПИ;
					МенеджерЗаписи.ДатаПроверки = ДатаПроверки;
					МенеджерЗаписи.ДатаВозбуждения = ДатаВозбуждения;
					МенеджерЗаписи.СуммаЗадолженности = СуммаИП;
					МенеджерЗаписи.СуммаИсполнительскогоСбора = СуммаИспСбора;
					МенеджерЗаписи.Всего = СуммаИП + ?(ЗначениеЗаполнено(СуммаИспСбора), СуммаИспСбора, 0);
					МенеджерЗаписи.ТипИД = ТипИД;
					МенеджерЗаписи.СтатусИД = СтатусИД;
					
					МенеджерЗаписи.Записать();
				КонецЦикла;
			КонецЕсли;
		Исключение
			МенеджерЗаписи = РегистрыСведений.ИсполнительныеПроизводства.СоздатьМенеджерЗаписи();
			
			МенеджерЗаписи.Должник = Справочники.Контрагенты.НайтиПоКоду(Код);
			УИДЗапроса = Новый УникальныйИдентификатор();
			МенеджерЗаписи.ИП = "База данных ФССП России не отвечает " + "(" + УИДЗапроса + ")";
			МенеджерЗаписи.ДатаПроверки = ТекущаяДата();
			
			МенеджерЗаписи.Записать();
		КонецПопытки;
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаСервере
Функция ДостатьЧислаИзСтроки(ИсходнаяСтрока, Разделители =  ".,") Экспорт
	Масс = Новый Массив;
	RegExp = Новый COMОбъект("VBScript.RegExp"); 
	RegExp.IgnoreCase = Истина; 
	RegExp.Global = Истина; 
	RegExp.MultiLine = Ложь; 
	RegExp.Pattern = "-*\d+[" + разделители + "]\d*";
	Matches= RegExp.Execute(ИсходнаяСтрока); 
	Для Сч = 0 по Matches.Count() - 1 Цикл
		Match = Matches.Item(Сч);
		Попытка
			Масс.Добавить(Число(Match.Value));
		Исключение
		КонецПопытки;
		Submatches = Match.Submatches;
		Для Сч1 = 0 по Submatches.Count() - 1 Цикл
			Submatch = Submatches.Item(Сч1);
			Попытка
				Масс.Добавить(Число(Submatch.Value));
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Масс;
КонецФункции

&НаСервере
Функция СтрокуВЧисло(СтрокаСЧислом) Экспорт
	МассивСтрок = СтрРазделить(СтрокаСЧислом, "0123456789", Ложь);
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Текст");
	ТЗ.Колонки.Добавить("Длина", Новый ОписаниеТипов("Число"));
	Для Каждого ТекСтрока из МассивСтрок Цикл 
		Приемник = ТЗ.Добавить();
		Приемник.Текст = ТекСтрока;
		Приемник.Длина = СтрДлина(ТекСтрока);
	КонецЦикла;  
	
	ТЗ.Сортировать("Длина УБЫВ");    
	
	Для Каждого Запись из ТЗ Цикл 
		ТекСтрока = Запись.Текст;
		СтрокаСЧислом = СтрЗаменить(СтрокаСЧислом, ТекСтрока, Символы.ПС);
	КонецЦикла;
	
	МассивЧисел = СтрРазделить(СтрокаСЧислом, Символы.ПС, Ложь);
	
	Возврат МассивЧисел;
КонецФункции
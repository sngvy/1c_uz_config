
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	////БылаНажатаКнопкаЗакрытия = Ложь;
	СсылкаНаОбъект = Параметры.Ссылка;
	ДобавитьКолонкиКТабличномуПолю();
	////
	////// Получим список доступных наборов свойств
	//////////ДоступныеНаборы = УправлениеСвойствами.ПолучитьДоступныеНаборыСвойств(СсылкаНаОбъект);
	////Если СсылкаНаОбъект.Метаданные() = Метаданные.Справочники.Контрагенты Тогда
	////	Если СсылкаНаОбъект.ЮрФизЛицо.Пустая() Тогда
	////		ДоступныеНаборы = Неопределено;
	////	Иначе
	////		//ДоступныеНаборы = Справочники.НаборыСвойств.НайтиПоНаименованию(СсылкаНаОбъект.ЮрФизЛицо);
	////		ДоступныеНаборы = Справочники.НаборыСвойств.НайтиПоКоду(СсылкаНаОбъект.ЮрФизЛицо.Код,,
	////				Справочники.НаборыСвойств.Справочник_Должники);
	////	КонецЕсли;
	////КонецЕсли;
	////Если СсылкаНаОбъект.Метаданные() = Метаданные.Справочники.ДолговыеОбязательства Тогда
	////	Если СсылкаНаОбъект.ТипДолговогоОбязательства.Пустая() Тогда
	////		ДоступныеНаборы = Неопределено;
	////	Иначе
	////		ДоступныеНаборы = Справочники.НаборыСвойств.НайтиПоКоду(СсылкаНаОбъект.ТипДолговогоОбязательства.Код,,
	////				Справочники.НаборыСвойств.Справочник_ДолговыеОбязательства);
	////	КонецЕсли;
	////КонецЕсли;
	////
	////Если ТипЗнч(ДоступныеНаборы) = Тип("СписокЗначений") Тогда
	////	ДоступныеНаборыСвойств = ДоступныеНаборы;
	////ИначеЕсли ДоступныеНаборы <> Справочники.НаборыСвойств.ПустаяСсылка() Тогда
	////	ДоступныеНаборыСвойств.Добавить(ДоступныеНаборы);
	////КонецЕсли;
	////
	////// Установим заголовок
	////Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	////			  НСтр("ru = 'Дополнительные сведения: %1'"), Строка(Параметры.Ссылка) );	
	////// Заполним таблицу значений свойств
	////ЗаполнитьТаблицуЗначенийСвойств(Истина);	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если Модифицированность И Не БылаНажатаКнопкаЗакрытия Тогда
		Результат = Вопрос(НСтр("ru = 'Значения были изменены. Сохранить?'"), РежимДиалогаВопрос.ДаНетОтмена);
		Если Результат = КодВозвратаДиалога.Да Тогда
			ЗаписатьНаборСвойствВРегистр();
		ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	////Если ИмяСобытия = "ИзмененНаборСвойств" Тогда
	////	Если ДоступныеНаборыСвойств.НайтиПоЗначению(Параметр) <> Неопределено Тогда
	////		ЗаполнитьТаблицуЗначенийСвойств(Ложь);
	////	КонецЕсли;
	////КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ДеревоЗначенийСвойств И команды РедактироватьСоставСвойств

&НаКлиенте
Процедура ТаблицаЗначенийСвойствПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗначенийСвойствПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗначенийСвойствПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.НомерКартинки = -1 Тогда
		Отказ = Истина;
		Элемент.ТекущиеДанные.Значение = Элемент.ТекущиеДанные.ТипЗначения.ПривестиЗначение(Неопределено);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗначенийСвойствПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Элемент.ПодчиненныеЭлементы.ТаблицаЗначенийСвойствЗначение.ОграничениеТипа = Элемент.ТекущиеДанные.ТипЗначения;	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ НАЖАТИЯ НА КЛАВИШИ ОК И ОТМЕНА

&НаКлиенте
Процедура КомандаОКВыполнить()
	//ЗаписатьНаборСвойствВРегистр();
	БылаНажатаКнопкаЗакрытия = Ложь;
	Закрыть();	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтменаВыполнить()
	БылаНажатаКнопкаЗакрытия = Истина;
	Закрыть();	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура ЗаписатьНаборСвойствВРегистр()
	Если СписокВкладок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	Набор = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	Набор.Отбор.Объект.Установить(СсылкаНаОбъект);
	Таблица = Неопределено;
	Для Каждого Элемент Из СписокВкладок Цикл
		Выполнить("Таблица = ЭтаФорма.Таблица" + Элемент.Представление);
		Для Каждого Стр Из Таблица Цикл
			Если ЗначениеЗаполнено(Стр.Параметры) Тогда
				Набор.Отбор.Свойство.Установить(Стр.Наименование);
				Набор.Прочитать(); 
				Если Набор.Количество() = 0 Тогда  
					Запись = Набор.Добавить();
					Запись.Свойство = Стр.Наименование;
					//+Protas 11.12.18 Открытие формы адреса в формате ФИАС
					//Запись.Значение = Стр.Значение + ";" + Стр.Параметры;
					Запись.Значение = ?(Стр.Наименование.ВидСтроки = Перечисления.ВидыТипаСтрока.АдресФИАС, Стр.Параметры, Стр.Значение + ";" + Стр.Параметры);
					//-Protas
					Запись.Объект   = СсылкаНаОбъект;			
				Иначе
					Для Каждого Запись из Набор Цикл
						Запись.Значение = ?(Стр.Наименование.ВидСтроки = Перечисления.ВидыТипаСтрока.АдресФИАС, Стр.Параметры, Стр.Значение + ";" + Стр.Параметры);
					КонецЦикла;     
				КонецЕсли;								
			Иначе
				Набор.Отбор.Свойство.Установить(Стр.Наименование);
				Набор.Прочитать();      
				Если Набор.Количество() = 0 Тогда 
					Запись = Набор.Добавить(); 
					Запись.Свойство = Стр.Наименование;
					Запись.Значение = Стр.Значение;
					Запись.Объект   = СсылкаНаОбъект;
				Иначе
					Для Каждого Запись из Набор Цикл
						Запись.Значение = Стр.Значение;
					КонецЦикла;
				КонецЕсли; 
			КонецЕсли;
			Набор.Записать();
		КонецЦикла;
	КонецЦикла;		
КонецПроцедуры

&НаСервере
Процедура ДобавитьКолонкиКТабличномуПолю()
	
	Массив_ГруппыТекПольз = ПараметрыСеанса.ТекущийПользователь.ГруппыПользователей.ВыгрузитьКолонку("Группа");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Объект", СсылкаНаОбъект);
	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Контрагенты") Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЮрФизЛицоДополнительныеСведения.НомерСтроки,
		               |	ЮрФизЛицоДополнительныеСведения.Свойство,
		               |	ЮрФизЛицоДополнительныеСведения.Свойство.Родитель КАК Родитель,
		               |	ЮрФизЛицоДополнительныеСведения.Свойство.ПорядковыйНомер КАК СвойствоПорядковыйНомер,
		               |	ЮрФизЛицоДополнительныеСведения.Свойство.Родитель.ПорядковыйНомер КАК ПорядковыйНомерРодитель,
		               |	ДополнительныеСведения.Значение
		               |ИЗ
		               |	Справочник.ЮрФизЛицо.ДополнительныеСведения КАК ЮрФизЛицоДополнительныеСведения
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		               |		ПО ЮрФизЛицоДополнительныеСведения.Свойство = ДополнительныеСведения.Свойство
		               |			И (ДополнительныеСведения.Объект = &Объект)
		               |ГДЕ
		               |	ЮрФизЛицоДополнительныеСведения.Ссылка = &Ссылка
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ПорядковыйНомерРодитель,
		               |	Родитель,
		               |	СвойствоПорядковыйНомер";
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект.ЮрФизЛицо);
		
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТипыДолговыхОбязательствДополнительныеСведения.НомерСтроки,
		               |	ТипыДолговыхОбязательствДополнительныеСведения.Свойство,
		               |	ТипыДолговыхОбязательствДополнительныеСведения.Свойство.Родитель КАК Родитель,
		               |	ТипыДолговыхОбязательствДополнительныеСведения.Свойство.ПорядковыйНомер КАК СвойствоПорядковыйНомер,
		               |	ТипыДолговыхОбязательствДополнительныеСведения.Свойство.Родитель.ПорядковыйНомер КАК ПорядковыйНомерРодитель,
		               |	ДополнительныеСведения.Значение
		               |ИЗ
		               |	Справочник.ТипыДолговыхОбязательств.ДополнительныеСведения КАК ТипыДолговыхОбязательствДополнительныеСведения
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		               |		ПО ТипыДолговыхОбязательствДополнительныеСведения.Свойство = ДополнительныеСведения.Свойство
		               |			И (ДополнительныеСведения.Объект = &Объект)
		               |ГДЕ
		               |	ТипыДолговыхОбязательствДополнительныеСведения.Ссылка = &Ссылка
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ПорядковыйНомерРодитель,
		               |	Родитель,
		               |	СвойствоПорядковыйНомер";
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект.ТипДолговогоОбязательства);
		
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТипыДоговоровКонтрагентовДополнительныеСведения.НомерСтроки,
		               |	ТипыДоговоровКонтрагентовДополнительныеСведения.Свойство,
		               |	ТипыДоговоровКонтрагентовДополнительныеСведения.Свойство.Родитель КАК Родитель,
		               |	ТипыДоговоровКонтрагентовДополнительныеСведения.Свойство.ПорядковыйНомер КАК СвойствоПорядковыйНомер,
		               |	ТипыДоговоровКонтрагентовДополнительныеСведения.Свойство.Родитель.ПорядковыйНомер КАК ПорядковыйНомерРодитель,
		               |	ДополнительныеСведения.Значение
		               |ИЗ
		               |	Справочник.ТипыДоговоровКонтрагентов.ДополнительныеСведения КАК ТипыДоговоровКонтрагентовДополнительныеСведения
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		               |		ПО ТипыДоговоровКонтрагентовДополнительныеСведения.Свойство = ДополнительныеСведения.Свойство
		               |			И (ДополнительныеСведения.Объект = &Объект)
		               |ГДЕ
		               |	ТипыДоговоровКонтрагентовДополнительныеСведения.Ссылка = &Ссылка
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ПорядковыйНомерРодитель,
		               |	Родитель,
		               |	СвойствоПорядковыйНомер";
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект.ТипДоговора);
		
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Залоги") Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТипыЗалоговДополнительныеСведения.НомерСтроки,
		               |	ТипыЗалоговДополнительныеСведения.Свойство,
		               |	ТипыЗалоговДополнительныеСведения.Свойство.Родитель КАК Родитель,
		               |	ТипыЗалоговДополнительныеСведения.Свойство.ПорядковыйНомер КАК СвойствоПорядковыйНомер,
		               |	ТипыЗалоговДополнительныеСведения.Свойство.Родитель.ПорядковыйНомер КАК ПорядковыйНомерРодитель,
		               |	ДополнительныеСведения.Значение
		               |ИЗ
		               |	Справочник.ТипыЗалогов.ДополнительныеСведения КАК ТипыЗалоговДополнительныеСведения
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		               |		ПО ТипыЗалоговДополнительныеСведения.Свойство = ДополнительныеСведения.Свойство
		               |			И (ДополнительныеСведения.Объект = &Объект)
		               |ГДЕ
		               |	ТипыЗалоговДополнительныеСведения.Ссылка = &Ссылка
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ПорядковыйНомерРодитель,
		               |	Родитель,
		               |	СвойствоПорядковыйНомер";
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект.ТипЗалога);
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство,
		               |	ДополнительныеРеквизитыИСведения.Родитель КАК Родитель,
		               |	ДополнительныеСведения.Значение,
		               |	ДополнительныеРеквизитыИСведения.ВидСтроки,
		               |	ДополнительныеРеквизитыИСведения.ПорядковыйНомер,
		               |	ДополнительныеРеквизитыИСведения.Родитель.ПорядковыйНомер КАК ПорядковыйНомерРодитель
		               |ИЗ
		               |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		               |		ПО ДополнительныеРеквизитыИСведения.Ссылка = ДополнительныеСведения.Свойство
		               |			И (ДополнительныеСведения.Объект = &Объект)
		               |ГДЕ
		               |	ДополнительныеРеквизитыИСведения.Родитель.Родитель = &РодительПВХ
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ПорядковыйНомерРодитель,
		               |	Родитель,
		               |	ДополнительныеРеквизитыИСведения.ПорядковыйНомер";
		РодительПВХ = Неопределено;
		Выполнить("РодительПВХ = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_" + 
				СсылкаНаОбъект.Метаданные().Имя + ";");
		Запрос.УстановитьПараметр("РодительПВХ", РодительПВХ);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Элементы.Декорация1.Видимость = Результат.Пустой();
	Результат = Результат.Выбрать();
		
		
	ПредыдущийРодитель = Неопределено;
	Нов = Неопределено;
	КолонкиТаблицы = Новый Массив;
	Пока Результат.Следующий() Цикл
		Если Результат.Родитель <> ПредыдущийРодитель Тогда
			
			ПредыдущийРодитель = Результат.Родитель;
			СписокВкладок.Добавить(Результат.Родитель, Результат.ПорядковыйНомерРодитель);
			
			КолонкиТаблицы.Очистить();
			Реквизит = Новый РеквизитФормы("Таблица" + Результат.ПорядковыйНомерРодитель, 
					Новый ОписаниеТипов("ТаблицаЗначений"), "", Результат.Родитель);
			КолонкиТаблицы.Добавить(Реквизит);
			Реквизит = Новый РеквизитФормы("Наименование", 
					Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"), 
					"Таблица" + Результат.ПорядковыйНомерРодитель, "Сведение");
			КолонкиТаблицы.Добавить(Реквизит);
			Реквизит = Новый РеквизитФормы("Значение", Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Тип, 
					"Таблица" + Результат.ПорядковыйНомерРодитель, "Значение");
			КолонкиТаблицы.Добавить(Реквизит);
			Реквизит = Новый РеквизитФормы("Параметры", Новый ОписаниеТипов("Строка"), 
					"Таблица" + Результат.ПорядковыйНомерРодитель, "Параметры");
			КолонкиТаблицы.Добавить(Реквизит);
			Попытка
		    	ЭтаФорма.ИзменитьРеквизиты(КолонкиТаблицы);
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОписаниеОшибки() + Символы.ПС + "Возможно из-за повторения порядкового номера закладок!";
				Сообщение.Сообщить();
				Возврат;
			КонецПопытки;
			
			ГруппаСтраница = Элементы.Добавить("Группа" + Результат.ПорядковыйНомерРодитель, Тип("ГруппаФормы"), 
					Элементы.ГруппаСтраницы);	
			ГруппаСтраница.Вид = ВидГруппыФормы.Страница;
			ГруппаСтраница.Заголовок = Результат.Родитель;
				
			Таблица = Элементы.Добавить("Таблица" + Результат.ПорядковыйНомерРодитель, Тип("ТаблицаФормы"), ГруппаСтраница);
			Таблица.ПутьКДанным = "Таблица" + Результат.ПорядковыйНомерРодитель;
			Таблица.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
			Таблица.КонтекстноеМеню.Доступность = Ложь;
			Таблица.УстановитьДействие("ПриИзменении", "ТаблицаПриИзменении");
			Таблица.УстановитьДействие("ПередНачаломИзменения", "ТаблицаПередНачаломИзменения");
			Таблица.ИзменятьСоставСтрок = Ложь;
			Таблица.ИзменятьПорядокСтрок = Ложь;
			
			ПолеФормы = Элементы.Добавить("Таблица" + Результат.ПорядковыйНомерРодитель + "Наименование", Тип("ПолеФормы"), 
					Таблица);
			ПолеФормы.Вид = ВидПоляФормы.ПолеВвода;
			ПолеФормы.ПутьКДанным = "Таблица" + Результат.ПорядковыйНомерРодитель + ".Наименование";
			ПолеФормы.ТолькоПросмотр = Истина;
				
			ПолеФормы = Элементы.Добавить("Таблица" + Результат.ПорядковыйНомерРодитель + "Значение", Тип("ПолеФормы"), 
					Таблица);
			ПолеФормы.Вид = ВидПоляФормы.ПолеВвода;
			ПолеФормы.ПутьКДанным = "Таблица" + Результат.ПорядковыйНомерРодитель + ".Значение";
			ПолеФормы.ВыбиратьТип = Ложь;
			ПолеФормы.УстановитьДействие("НачалоВыбора", "ЗначениеНачалоВыбора");
			ПолеФормы.УстановитьДействие("Открытие", "ЗначениеОткрытие");
			ПолеФормы.Формат = "ДФ=dd.MM.yyyy";	
			ПолеФормы.ФорматРедактирования = "ДФ=dd.MM.yyyy";
			
			//ПолеФормы.СвязьПоТипу = Новый СвязьПоТипу("Элементы." + Таблица.Имя + ".ТекущиеДанные.Наименование");                     
			Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы." + Таблица.Имя + ".ТекущиеДанные.Наименование");
			масСвязи = Новый Массив;
			масСвязи.Добавить(Связь);
			ПолеФормы.СвязиПараметровВыбора = Новый ФиксированныйМассив(масСвязи);
		КонецЕсли;
		
		
		ОтборПоГруппе = Истина;
		ГруппаСвойства = Результат.Свойство.ГруппаПользователей;
		Если ЗначениеЗаполнено(ГруппаСвойства) = Ложь Тогда
			ОтборПоГруппе = Истина;
		Иначе
			Если Массив_ГруппыТекПольз.Найти(ГруппаСвойства) <> Неопределено Тогда
				ОтборПоГруппе = Истина;
			Иначе
				ОтборПОГруппе = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ОтборПоГруппе = Истина Тогда
			Выполнить("Нов = ЭтаФорма.Таблица" + Результат.ПорядковыйНомерРодитель + ".Добавить();");
			Нов.Наименование = Результат.Свойство;				
			Нов.Значение = Результат.Свойство.ТипЗначения.ПривестиЗначение(Результат.Значение);
			
			//+Protas 11.12.18 Открытие формы адреса в формате ФИАС
			
			//Если Строка(Результат.Свойство.ТипЗначения) = "Строка" И
			//(Результат.Свойство.ВидСтроки = Перечисления.ВидыТипаСтрока.Адрес ИЛИ
			//Результат.Свойство.ВидСтроки = Перечисления.ВидыТипаСтрока.Телефон) Тогда
			//      Номер = Найти(Результат.Значение, ";");
			//      Нов.Параметры = Сред(Результат.Значение, Номер + 1);
			//      Нов.Значение = Сред(Результат.Значение, 1, Номер - 1);
			//КонецЕсли;
			Если Строка(Результат.Свойство.ТипЗначения) = "Строка" Тогда
				Если Результат.Свойство.ВидСтроки = Перечисления.ВидыТипаСтрока.Адрес ИЛИ
					Результат.Свойство.ВидСтроки = Перечисления.ВидыТипаСтрока.Телефон Тогда					
					Номер = Найти(Результат.Значение, ";");
					Нов.Параметры = Сред(Результат.Значение, Номер + 1);
					Нов.Значение = Сред(Результат.Значение, 1, Номер - 1);					
				ИначеЕсли Результат.Свойство.ВидСтроки = Перечисления.ВидыТипаСтрока.АдресФИАС Тогда					
					Нов.Параметры   = Результат.Значение;					
					Нов.Значение    = бит_АдресныйКлассификатор.ПолучитьПредставлениеИзXML(Результат.Значение);
				КонецЕсли;
			КонецЕсли;
			//-Protas
			
		КонецЕсли;
	КонецЦикла;	 	
КонецПроцедуры

&НаСервере
Функция ПолучитьТолькоПросмотр(Свойство)
	//Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
	Если Свойство.ГруппаПользователейДоступность = Справочники.ГруппыПользователей.ПустаяСсылка() Тогда
		Возврат Ложь;
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ПользователиГруппыПользователей.Ссылка
		                      |ИЗ
		                      |	Справочник.Пользователи.ГруппыПользователей КАК ПользователиГруппыПользователей
		                      |ГДЕ
		                      |	ПользователиГруппыПользователей.Ссылка = &Пользователь
		                      |	И ПользователиГруппыПользователей.Группа = &Группа");
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
		Запрос.УстановитьПараметр("Группа", Свойство.ГруппаПользователейДоступность);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
КонецФункции


&НаСервере
Функция ПолучитьПустуюСсылкуПоТипу(ТипОТ)
	Попытка
		ТекТип = ТипОТ.Типы()[0];
	Исключение
		Возврат Неопределено;
	КонецПопытки;
		
	Если Справочники.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
		ИмяОбъекта = "Справочник";		
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
		ИмяОбъекта = "Перечисление"; 
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
		ИмяОбъекта = "Документ";
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
		ИмяОбъекта = "ПланВидовХарактеристик";
	ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
		ИмяОбъекта = "БизнесПроцесс";
	ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
		ИмяОбъекта = "Задача";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПредопределенноеЗначение(ИмяОбъекта + "." + Метаданные.НайтиПоТипу(ТекТип).Имя + ".ПустаяСсылка");
КонецФункции

&НаКлиенте
Процедура ТаблицаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПередНачаломИзменения(Элемент, Отказ)
	Если  ПолучитьТолькоПросмотр(Элемент.ТекущиеДанные.Наименование) Тогда
		Отказ = Истина;
	Иначе
		ТипЭлемента = ОбъектыСервер.РазыменоватьСсылку(Элемент.ТекущиеДанные.Наименование, "ТипЗначения");	
		Если Строка(ТипЭлемента) = "Строка" Тогда
			ВидСтроки = ОбъектыСервер.РазыменоватьСсылку(Элемент.ТекущиеДанные.Наименование, "ВидСтроки");		
			Если ВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Строка") Тогда
				Элемент.ПодчиненныеЭлементы[1].КнопкаВыбора = Ложь;
				Элемент.ПодчиненныеЭлементы[1].КнопкаОткрытия = Ложь;
				Элемент.ПодчиненныеЭлементы[1].РедактированиеТекста = Истина;
			ИначеЕсли ВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Телефон") ИЛИ 
				//+Protas 10.12.18 Добавление формата ФИАС
				//ВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Адрес") Тогда
				ВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Адрес")
				ИЛИ ВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.АдресФИАС") Тогда
				//-Protas
				Элемент.ПодчиненныеЭлементы[1].КнопкаВыбора = Истина;
				Элемент.ПодчиненныеЭлементы[1].КнопкаОткрытия = Ложь;
				Элемент.ПодчиненныеЭлементы[1].РедактированиеТекста = Ложь;	
			ИначеЕсли ВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.ПутьКФайлу") Тогда
				Элемент.ПодчиненныеЭлементы[1].КнопкаВыбора = Истина;
				Элемент.ПодчиненныеЭлементы[1].КнопкаОткрытия = Истина;
				Элемент.ПодчиненныеЭлементы[1].РедактированиеТекста = Истина;
			КонецЕсли;
		ИначеЕсли ТипЭлемента = Новый ОписаниеТипов("СправочникСсылка.тсЗначенияСвойствОбъектов") Тогда
			Элемент.ПодчиненныеЭлементы[1].КнопкаВыбора = Истина;
			Элемент.ПодчиненныеЭлементы[1].КнопкаОткрытия = Ложь;
			Элемент.ПодчиненныеЭлементы[1].РедактированиеТекста = Ложь;	
		ИначеЕсли ОбъектыСервер.ЭтотТипЕстьСсылка(ТипЭлемента) Тогда		
			Элемент.ПодчиненныеЭлементы[1].КнопкаВыбора = Истина;
			Элемент.ПодчиненныеЭлементы[1].КнопкаОткрытия = Истина;
			Элемент.ПодчиненныеЭлементы[1].РедактированиеТекста = Ложь;
			Элемент.ПодчиненныеЭлементы[1].КнопкаОчистки = Истина;
		ИначеЕсли Строка(ТипЭлемента) = "Число" Тогда
			Элемент.ПодчиненныеЭлементы[1].КнопкаВыбора = Истина;
			Элемент.ПодчиненныеЭлементы[1].КнопкаОткрытия = Ложь;
			Элемент.ПодчиненныеЭлементы[1].РедактированиеТекста = Истина;
		ИначеЕсли Строка(ТипЭлемента) = "Булево" Тогда
			Элемент.ПодчиненныеЭлементы[1].КнопкаВыбора = Истина;
			Элемент.ПодчиненныеЭлементы[1].КнопкаОткрытия = Ложь;
			Элемент.ПодчиненныеЭлементы[1].РедактированиеТекста = Ложь;
		ИначеЕсли Строка(ТипЭлемента) = "Дата" Тогда
			Элемент.ПодчиненныеЭлементы[1].КнопкаВыбора = Истина;
			Элемент.ПодчиненныеЭлементы[1].КнопкаОткрытия = Ложь;
			Элемент.ПодчиненныеЭлементы[1].РедактированиеТекста = Истина;
		КонецЕсли;
		Элемент.ПодчиненныеЭлементы[1].ОграничениеТипа = ТипЭлемента;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВидСтроки = ОбъектыСервер.РазыменоватьСсылку(Элемент.Родитель.ТекущиеДанные.Наименование, "ВидСтроки");	
	Если ВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Адрес") ИЛИ
			ВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Телефон") Тогда
			
		Таблица = Неопределено;
		Выполнить("Таблица = ЭтаФорма." + Элемент.Родитель.Имя + ";");
		ТекСтрока = Таблица.НайтиСтроки(Новый Структура("Наименование", Элемент.Родитель.ТекущиеДанные.Наименование))[0];
		
		СписокСтрок = СтрЗаменить(ТекСтрока.Параметры, ";", Символы.ПС);
		ЗначенияПолей.Очистить();
		Если СтрЧислоСтрок(СписокСтрок) > 1 Тогда
			Для Индекс = 1 По СтрЧислоСтрок(СписокСтрок) Цикл
				Стр = СтрПолучитьСтроку(СписокСтрок, Индекс);
				Если Стр <> "" Тогда 
					СписокПодстрок = СтрЗаменить(Стр, "=", Символы.ПС);
					ЗначенияПолей.Добавить(СтрПолучитьСтроку(СписокПодстрок, 2), СтрПолучитьСтроку(СписокПодстрок, 1));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;			
		Если ВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Адрес") Тогда
			ИмяФормыРедактирования = "ОбщаяФорма.ВводАдреса";
		ИначеЕсли ВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Телефон") Тогда
			ИмяФормыРедактирования = "ОбщаяФорма.ВводТелефона";
		КонецЕсли;
		
		Пар = Новый Структура;
		Пар.Вставить("ЗначенияПолей",                ЗначенияПолей);
		Пар.Вставить("Вид",                          ""); //"Адрес");
		Пар.Вставить("БылиВнесеныИзменения",         Ложь);
		Пар.Вставить("Представление",                Элемент.ТекстРедактирования);
		Пар.Вставить("РедактированиеТолькоВДиалоге", Не Элемент.РедактированиеТекста);
		Пар.Вставить("АдресТолькоРоссийский",        Ложь);
		
		//Чуров А.И.
		Результат = ОткрытьФорму(ИмяФормыРедактирования, Пар,,,,,Новый ОписаниеОповещения("ЗначениеНачалоВыбораЗакрытие", ЭтаФорма, новый Структура("ТекСтрока", ТекСтрока)));	
		//Результат = ОткрытьФормуМодально(ИмяФормыРедактирования, Пар);	
			
		
	ИначеЕсли ВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.ПутьКФайлу") Тогда
		Таблица = Неопределено;
		Выполнить("Таблица = ЭтаФорма." + Элемент.Родитель.Имя + ";");
		ТекСтрока = Таблица.НайтиСтроки(Новый Структура("Наименование", Элемент.Родитель.ТекущиеДанные.Наименование))[0];	
				
		СтандартнаяОбработка = Ложь;
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.Заголовок = "Выберите файл";
		Диалог.ПолноеИмяФайла = ТекСтрока.Значение; 
		//Фильтр = "EXE (*.exe)|*.exe"; 
		//Диалог.Фильтр = Фильтр; 
	    Диалог.МножественныйВыбор = Ложь;
		//Диалог.Каталог = "F:\";
		Если Диалог.Выбрать() Тогда
			ТекСтрока.Значение = Диалог.ПолноеИмяФайла;
		КонецЕсли;	
		//+Protas 10.12.18 Открытие формы адреса в формате ФИАС
	ИначеЕсли ВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.АдресФИАС") Тогда
		Таблица = Неопределено;
		Выполнить("Таблица = ЭтаФорма." + Элемент.Родитель.Имя + ";");
		ТекСтрока = Таблица.НайтиСтроки(Новый Структура("Наименование",
		Элемент.Родитель.ТекущиеДанные.Наименование))[0];
		ИмяФормыРедактирования = "Обработка.РасширенныйВводКонтактнойИнформации.Форма.ВводАдреса";
		
		Если ТекСтрока.Параметры = "" Тогда
			ЗнПолей = "";
		Иначе
			ЗнПолей = ПолучитьJSONИзXML(ТекСтрока.Параметры);
		КонецЕсли;
		
		Пар = Новый Структура;
		Пар.Вставить("ЗначенияПолей", ЗнПолей);
		Пар.Вставить("Вид",                             ""); //"Адрес");
		Пар.Вставить("БылиВнесеныИзменения",            Ложь);
		Пар.Вставить("Представление", Элемент.ТекстРедактирования);
		Пар.Вставить("РедактированиеТолькоВДиалоге",    Не Элемент.РедактированиеТекста);
		Пар.Вставить("АдресТолькоРоссийский",               Ложь);
		
		Результат = ОткрытьФормуМодально(ИмяФормыРедактирования, Пар);
		
		Если ТипЗнч(Результат)   = Тип("Структура") Тогда
			
			ТекСтрока.Значение       = Результат.Представление;
			Модифицированность   = Истина;
			СтрокаJSON               = Результат.Значение;
			
			Если СтрокаJSON = "" Тогда
				СтрокаJSON = ПолучитьJSONИзXML(СтрокаJSON);
			КонецЕсли;
			
			ТекСтрока.Параметры = ПолучитьСтрокуXML(СтрокаJSON);
		КонецЕсли;
		//-Protas		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеНачалоВыбораЗакрытие(Результат, ДопПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ДопПараметры.ТекСтрока.Значение = Результат.Представление;
		ЗначенияПолей = Результат.ЗначенияПолей;
		Модифицированность = Истина;
		
		ДопПараметры.ТекСтрока.Параметры = "";
		Для Каждого Элемент Из ЗначенияПолей Цикл
			ДопПараметры.ТекСтрока.Параметры = ДопПараметры.ТекСтрока.Параметры + Элемент.Представление + "=" + Элемент.Значение + ";"; 
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ЗначениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(Элемент.Родитель.ТекущиеДанные.Значение) = Тип("Строка") Тогда 
		ЗапуститьПриложение(Элемент.Родитель.ТекущиеДанные.Значение)
	Иначе
		//Чуров
		//ПоказатьЗначение(,Элемент.Родитель.ТекущиеДанные.Значение);
		ОткрытьЗначение(Элемент.Родитель.ТекущиеДанные.Значение);
	КонецЕсли;
КонецПроцедуры

//+Protas 10.12.18 Открытие формы адреса в формате ФИАС
&НаСервере
Функция ПолучитьСтрокуXML(СтрокаJSON)
	СтруктураJSON  = УправлениеКонтактнойИнформациейСлужебный.СтрокаJSONВСтруктуру(СтрокаJSON);
	ОжидаемыйТип   = Перечисления.ТипыКонтактнойИнформации.Адрес;
	СтрокаХМЛ  = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзJSONВXML(СтруктураJSON, ОжидаемыйТип);
	Возврат СтрокаХМЛ;
КонецФункции

&НаСервере
Функция ПолучитьJSONИзXML(знач Параметры)
	СтруктураJSON = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтруктуруJSON(Параметры);
	Возврат УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(СтруктураJSON);
КонецФункции
//-Protas


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗначенияПоУмолчанию();
	
	Если Параметры.Свойство("Клиент") Тогда
	
		Клиент = Параметры["Клиент"];
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("АвтоЗапросОбновлений", 60);
	
	КлиентПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученныеФайлыСкачать(Команда)
	
	Запись = Элементы.ПолученныеФайлы.ТекущиеДанные;
	Если Запись.Загружен Тогда
	
		ОткрытьЗначение(Запись.СсылкаПрикрепления);
		Возврат;
	
	КонецЕсли;
	
	ПараметрыСкачивания = Новый Структура;
	ПараметрыСкачивания.Вставить("ИДФайла", Запись.Идентификатор);
	ПараметрыСкачивания.Вставить("Запись", Запись.ПолучитьИдентификатор());
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения(
		"ПослеЗакрытияФормыСкачивания",
		ЭтотОбъект,
		ПараметрыСкачивания);
	
	ОткрытьФорму(
		"Обработка.ИсторияЧатов.Форма.ФормаСкачиванияФайла",
		,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		ОповещениеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыСкачивания(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ТипФайла", РезультатЗакрытия);
	ДополнительныеПараметры.Вставить("Мессенджер", МессенджерДляФайлов);
	ДополнительныеПараметры.Вставить("НастройкаСохранения", НастройкаСохраненияДляФайлов);

	ПрикреплениеФайла = СкачатьВыбранныйФайл(ДополнительныеПараметры, Клиент);
	Если Не ЗначениеЗаполнено(ПрикреплениеФайла) Тогда
	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось скачать файл";
		Сообщение.Сообщить();
	
	КонецЕсли;
	
	ОтметитьСкачаным(ДополнительныеПараметры["Запись"], ПрикреплениеФайла);
	
	ОткрытьЗначение(ПрикреплениеФайла);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	
	Чат.Очистить();
	ПолученныеФайлы.Очистить();
	Ответ = "";
	
	Если Не ЗначениеЗаполнено(Клиент) Тогда
	
		Возврат;
	
	КонецЕсли;
	
	Чат = ОформлениеЧата();
	
	КлиентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Функция КлиентПриИзмененииНаСервере()

	ПолученныеФайлы.Очистить();
	
	ЗаполнитьСохраненныеФайлы();
	
	ЗапросОбновленийНаСервере();

КонецФункции // ()

&НаКлиенте
Процедура АвтоЗапросОбновлений() Экспорт

	Если ЗначениеЗаполнено(Клиент) Тогда
	
		ЗаполнитьСохраненныеФайлы();
		
		ЗапросОбновленийНаСервере();
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Элементы.Мессенджер.Имя);
	Реквизиты.Добавить(Элементы.МессенджерДляФайлов.Имя);
	
	ЗаполнитьПоУмолчаниюРеквизиты(Реквизиты);
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Элементы.НастройкаСохранения.Имя);
	Реквизиты.Добавить(Элементы.НастройкаСохраненияДляФайлов.Имя);
	
	ЗаполнитьПоУмолчаниюРеквизиты(Реквизиты);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СообщениеОтправкаНеУдалась(ИмяПоля)

	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = СтрШаблон(
		"Не заполнено поле: %1",
		ИмяПоля);
	Сообщение.Поле = ИмяПоля;
	Сообщение.Сообщить();

КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	Если ПустаяСтрока(Ответ) Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ГотовоКОтправке = Истина;
	
	Если Не ЗначениеЗаполнено(Клиент) Тогда
	
		ГотовоКОтправке = Ложь;
		СообщениеОтправкаНеУдалась(Элементы.Клиент.Имя);
	
	КонецЕсли;
	Если Не ЗначениеЗаполнено(МессенджерДляФайлов) Тогда
	
		ГотовоКОтправке = Ложь;
		СообщениеОтправкаНеУдалась(Элементы.МессенджерДляФайлов.Имя);
	
	КонецЕсли;
	Если Не ЗначениеЗаполнено(НастройкаСохраненияДляФайлов) Тогда
	
		ГотовоКОтправке = Ложь;
		СообщениеОтправкаНеУдалась(Элементы.НастройкаСохраненияДляФайлов.Имя);
	
	КонецЕсли;
	
	Если Не ГотовоКОтправке Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ОтветТелеграмма = ОтправитьОтвет();
	
	Если ОтветТелеграмма["Результат"] Тогда
	
		КлиентПриИзменении(Неопределено);
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтветТелеграмма["Данные"]) Тогда
	
		Ответ = "";
		Возврат;
	
	КонецЕсли;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Не удалось отправить сообщение";
	Сообщение.Поле = "МессенджерДляФайлов";
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросОбновлений(Команда)
	
	Если Не ЗначениеЗаполнено(Клиент) Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ЗапросОбновленийНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСессию(Команда)
	
	ЗакрытьСессиюНаСервере(Клиент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКлиента(Команда)
	
	Если Не ЗначениеЗаполнено(КлиентДляЗаполнения) Тогда
	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнен клиент";
		Сообщение.Сообщить();
		Возврат;
	
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Неопознаные.ТекущиеДанные;
	
	Описание = Новый Структура;
	Описание.Вставить("Ник", Неопределено);
	Описание.Вставить("ИД", Неопределено);
	
	ЗаполнитьЗначенияСвойств(Описание, ТекущиеДанные);
	Описание.Вставить("УИД", ТекущиеДанные.Хранитель);
	
	ДобавитьИдентификаторыОтправителю(КлиентДляЗаполнения, Описание);
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Операция выполнена";
	Сообщение.Сообщить();

КонецПроцедуры

&НаКлиенте
Процедура НайтиВсех(Команда)
	
	Если Не ЗначениеЗаполнено(Мессенджер)
		Или Не ЗначениеЗаполнено(НастройкаСохранения) Тогда
	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнены Мессенджер и Настройка Сохранения";
		Сообщение.Сообщить();
		
		Возврат;
	
	КонецЕсли;
	
	НайтиВсехНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ОтметитьСкачаным(ИдентификаторЗаписи, ПрикреплениеФайла)

	Запись = ПолученныеФайлы.НайтиПоИдентификатору(ИдентификаторЗаписи);
	
	Запись.Загружен = Истина;
	Запись.СсылкаПрикрепления = ПрикреплениеФайла;

КонецФункции // ()

&НаКлиенте
Функция ЗаполнитьПоУмолчаниюРеквизиты(Реквизиты)

	ПустыеРеквизиты = Новый Массив;
	
	ПоУмолчанию = Неопределено;
	Для каждого Элемент Из Реквизиты Цикл
	
		Если Не ЗначениеЗаполнено(ЭтотОбъект[Элемент]) Тогда
		
			ПустыеРеквизиты.Добавить(Элемент);
			Продолжить;
		
		КонецЕсли;
		
		Если ПоУмолчанию = Неопределено Тогда
		
			ПоУмолчанию = ЭтотОбъект[Элемент];
		
		КонецЕсли;
	
	КонецЦикла;
	
	Для каждого Элемент Из ПустыеРеквизиты Цикл
	
		ЭтотОбъект[Элемент] = ПоУмолчанию;
		
	КонецЦикла;

КонецФункции // ()

#Область РаботаСЧатом

&НаКлиенте
Функция ОформлениеЧата()

	Чат.ТипДиаграммы = ТипДиаграммы.ГистограммаСНакоплениемГоризонтальная;
	Чат.ОтображатьЛегенду = Ложь;
	Чат.Обновление = Истина;

	Чат.ОбластьПостроения.ШкалаТочек.ПоложениеПодписейШкалы = ПоложениеПодписейШкалыДиаграммы.Внутри;
	Чат.ОбластьПостроения.ШкалаТочек.РасположениеЗаголовка = РасположениеЗаголовкаШкалыДиаграммы.ВОбластиПостроения;
	
	Возврат Чат;

КонецФункции // ()

Функция ИдентификацияСерий()

	Описание = Новый Структура;
	Описание.Вставить("Ошибка", 0);
	Описание.Вставить("Клиент", 1);
	Описание.Вставить("Сотрудник", 2);
	
	Возврат Описание;

КонецФункции // ()

Функция УстановитьСерии(Чат)

	Определение = ИдентификацияСерий();
	
	СерияОшибка = Чат.Серии.Вставить(Определение["Ошибка"], "Ошибка");
	СерияОшибка.Цвет = WebЦвета.БледноЛиловый;
	
	СерияКлиент = Чат.Серии.Вставить(Определение["Клиент"], "Клиент");
	СерияКлиент.Цвет = WebЦвета.СветлоСерый;
	
	СерияСотрудник = Чат.Серии.Вставить(Определение["Сотрудник"], "Сотрудник");
	СерияСотрудник.Цвет = WebЦвета.ЗамшаСветлый;
	
	Описание = Новый Структура;
	Описание.Вставить("Клиент", СерияКлиент);
	Описание.Вставить("Сотрудник", СерияСотрудник);
	Описание.Вставить("Ошибка", СерияОшибка);
	
	Возврат Описание;

КонецФункции // ()

Функция ПолучитьСерии()

	Определения = ИдентификацияСерий();
	
	Серии = Новый Структура;
	Для каждого Определение Из Определения Цикл
	
		Серии.Вставить(
			Определение.Ключ,
			Чат.Серии.Получить(Определение.Значение));
	
	КонецЦикла;
		
	Возврат Серии;

КонецФункции // ()

Функция УстановитьТочку(Серии, ТекущееСообщение)

	Серия = Неопределено;
	Текст = ТекущееСообщение["Текст"];
	Если ЭтоСообщениеОтКлиента(ТекущееСообщение) Тогда
	
		Серия = Серии["Клиент"];
	
	ИначеЕсли ЭтоСообщениеОтСОтрудника(ТекущееСообщение) Тогда
	
		Серия = Серии["Сотрудник"];
	
	Иначе
	
		Серия = Серии["Ошибка"];
		Текст = СтрШаблон(
			"Не корректное сообщение:
			| Отправитель - %1
			| Клиент      - %2
			| Сотрудник   - %3",
			ТекущееСообщение["Отправитель"],
			ТекущееСообщение["Клиент"],
			ТекущееСообщение["Сотрудник"]);
	
	КонецЕсли;
	
	Точка = Чат.Точки.Добавить();
	Точка.Текст = СтрШаблон(
		"[%2] %1",
		Текст,
		Формат(
			МестноеВремя(ТекущееСообщение["Дата"]),
			"ДФ=HH:mm:ss")
	);
	
	Чат.УстановитьЗначение(Точка, Серия, 5);

КонецФункции // ()

#КонецОбласти

&НаСервере
Процедура ЗаполнитьЧат()

	Серии = УстановитьСерии(Чат);
	
	История = ИсторияОбщения(Клиент);
	
	Пока СообщениеИзЧата.ЕстьСообщения(История) Цикл
	
		ТекущееСообщение = СообщениеИзЧата.СледующееСообщение(История);
		
		УстановитьТочку(Серии, ТекущееСообщение);
	
	КонецЦикла;
	
	УправлениеДоступностьюПоФЗ(История);

КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюПоФЗ(Знач История)

	СообщениеИзЧата.СброситьПозицию(История);
	
	ДоступностьПоУмолчанию();
	
	Пока СообщениеИзЧата.ЕстьСообщения(История) Цикл
	
		ТекущееСообщение = СообщениеИзЧата.СледующееСообщение(История);
		
		Если ЭтоСообщениеОтКлиента(ТекущееСообщение) Тогда
		
			ОткрытьСессиюНаВесьДень();
			
			Возврат;
		
		КонецЕсли;
		
		Если ЭтоСообщениеОтСОтрудника(ТекущееСообщение) Тогда
		
			РазрешенноеСообщениеОтправленоБезОтвета();
		
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФайлы()

	Набор = Обработки.ПолучениеИсторииЧатов
		.ПолучитьДанныеФайлов(МессенджерДляФайлов, НастройкаСохраненияДляФайлов, Клиент);
	Если Не ЗначениеЗаполнено(Набор) Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ОтборПоИД = Новый Структура;
	ОтборПоИД.Вставить("Идентификатор", Неопределено);
	
	Для каждого Элемент Из Набор Цикл
	
		ОтборПоИД["Идентификатор"] = Элемент["ИД"];
		Если ПолученныеФайлы.НайтиСтроки(ОтборПоИД).Количество() > 0 Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		Запись = ПолученныеФайлы.Добавить();
		
		Запись.Имя = Элемент["Имя"];
		Запись.Тип = Элемент["Тип"];
		Запись.Идентификатор = Элемент["ИД"];
	
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСохраненныеФайлы()

	СохраненныеФайлы = КонфигурацияИсторияЧатов.МодульПрикрепленияФайлов()
		.СохраненныеФайлы(Клиент);

	Для каждого СохраненныйФайл Из СохраненныеФайлы Цикл
	
		Запись = ПолученныеФайлы.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СохраненныйФайл);
		
		Запись.Загружен = Истина;
	
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗапросОбновленийНаСервере()

	Чат.Очистить();
	
	ЗаполнитьЧат();
	
	ЗаполнитьФайлы();

КонецПроцедуры

&НаСервере
Функция НайтиВсехНаСервере()

	Список = Неопознаные(Мессенджер, НастройкаСохранения);
	
	Для каждого Запись Из Список Цикл
	
		Сведения = Неопознаные.Добавить();
		ЗаполнитьЗначенияСвойств(Сведения, Запись);
		Сведения.Хранитель = Запись["Документ"];
	
	КонецЦикла;

КонецФункции // ()

&НаСервере
Функция ЗначенияПоУмолчанию()

	МессенджерДляФайлов = Справочники.НастройкиЧатовТелеграм.Телеграм;
	НастройкаСохраненияДляФайлов =Константы.НастройкаИсторииЧатовПоУмолчанию.Получить();

КонецФункции // ()

&НаСервере
Функция ОтправитьОтвет()

	Хранитель = Обработки.СохранениеИсторииЧатов
		.ХранительИсторииЧатов()
		.НастройкаСохранения(НастройкаСохраненияДляФайлов);
	
	Сотрудник = ПараметрыСеанса.ТекущийПользователь;
	ВладелецЧата = УправлениеМетаданными.МенеджерОбъектаПоСсылке(Клиент)
		.ВладелецМесенджера(Клиент);
	
	Отправка = СообщениеИзЧата.НовоеСообщение();
	СообщениеИзЧата.УстановитьДату(Отправка, ТекущаяДатаСеанса());
	Отправка["Текст"] = Ответ;
	Отправка["Отправитель"] = Сотрудник;
	Отправка["Клиент"] = ВладелецЧата;
	Отправка["Сотрудник"] = Сотрудник;
	
	Отправка["Мессенджер"] = МессенджерДляФайлов;
	
	Данные = РегистрыСведений.ИдентификаторыЧатовТелеграм
		.ДанныеАкаунта(ВладелецЧата);
	Если Не ЗначениеЗаполнено(Данные) Тогда
	
		Описание = Новый Структура;
		Описание.Вставить("Результат", Ложь);
		Описание.Вставить("Данные", "Нет данных пользователя в мессенджере");
		
		Возврат Описание;
	
	КонецЕсли;
	ЧатИД = Данные["Идентификатор"];
	
	Попытка
	
		ОтветТелеграм = УправлениеМетаданными.МенеджерОбъектаПоСсылке(Мессенджер)
			.ОтправитьСообщение(Отправка["Мессенджер"], ЧатИД, Отправка["Текст"]);
		
	Исключение
		Описание = Новый Структура;
		Описание.Вставить("Результат", Ложь);
		Описание.Вставить(
			"Данные",
			"Нет данных Телеграм бота в мессенджере:
			|" + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат Описание;
	КонецПопытки;

	Если ОтветТелеграм["Результат"] Тогда
	
		Хранитель
			.Сообщение(Отправка)
			.Сохранить();
	
	КонецЕсли;

	Описание = Новый Структура;
	Описание.Вставить("Результат", ОтветТелеграм["Результат"]);
	Описание.Вставить("Данные", ОтветТелеграм["Ответ"]);
	
	Возврат Описание;
	
КонецФункции // ()

&НаСервереБезКонтекста
Функция ИсторияОбщения(Знач Клиент)

	Возврат Обработки.ПолучениеИсторииЧатов
		.ПолучитьИсториюЗаСегодня(Клиент);

КонецФункции // ()

&НаСервереБезКонтекста
Функция Неопознаные(Знач Мессенджер, Знач НастройкаСохранения)

	Возврат Обработки.ПолучениеИсторииЧатов
		.ПолучитьНеопознаных(Мессенджер, НастройкаСохранения);

КонецФункции // ()

&НаСервереБезКонтекста
Процедура ЗакрытьСессиюНаСервере(Знач Клиент)

	Документы.ЗакрытиеСессии.Исполнить(Клиент);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьИдентификаторыОтправителю(Знач КлиентДляЗаполнения, Знач Описание)

	Хранитель = Документы.ХранилищеИсторииЧатов.ПолучитьСсылку(
		Новый УникальныйИдентификатор(Описание["УИД"]));

	Если Не ЗначениеЗаполнено(Хранитель) Тогда
	
		ВызватьИсключение "Не определен документ записи истории чатов";
	
	КонецЕсли;
	
	РегистрыСведений.ИдентификаторыЧатовТелеграм.ЗаписатьДанные(
		КлиентДляЗаполнения,
		Описание["Ник"],
		Описание["ИД"]);

	Документы.ХранилищеИсторииЧатов.ДобавитьОтправителя(Хранитель, КлиентДляЗаполнения);

КонецПроцедуры // ()

&НаСервереБезКонтекста
Функция СкачатьВыбранныйФайл(Знач ПараметрыСкачивания, Знач Клиент)

	Мессенджер = ПараметрыСкачивания["Мессенджер"];
	
	ДанныеФайла = УправлениеМетаданными.МенеджерОбъектаПоСсылке(Мессенджер)
		.ПолучитьФайл(Мессенджер, ПараметрыСкачивания["ИДФайла"]);

	Прикреплятор = КонфигурацияИсторияЧатов.МодульПрикрепленияФайлов();
	
	Файл = Прикреплятор.ОписаниеФайлаПоУмолчанию();
	Файл.Вставить("Путь", ДанныеФайла["ПутьНаСервере"]);
	Файл.Вставить("Данные", ДанныеФайла["ДвоичныеДанные"]);
	Файл.Вставить("Идентификатор", ПараметрыСкачивания["ИДФайла"]);
	Файл.Вставить("ТипФайла", ПараметрыСкачивания["ТипФайла"]);
	
	Файлы = Прикреплятор.НаборФайловПоУмолчанию();
	Прикреплятор.ДобавитьФайлВНабор(Файлы, Файл);
	
	Возврат Прикреплятор.ПрикрепитьНаборФайлов(Файлы, Клиент);
	
КонецФункции

&НаКлиенте
Процедура ПолучитьИсторию(Команда)

	Если Не ЗначениеЗаполнено(Клиент) Тогда
	
		СообщениеОтправкаНеУдалась("Клиент");
		Возврат;
	
	КонецЕсли;
	
	ЗаполнитьИсториюОбщения();
	
	Элементы.ГруппаИсторияОбщения.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьИсториюОбщения(Команда)
	
	Элементы.ГруппаИсторияОбщения.Видимость = Ложь;
	
	ИсторияОбщения.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсториюОбщения()
	
	ИсторияОбщения.Очистить();
	
	История = ИсторияОбщенияЗаПериод(Клиент, ПериодОбщения, КоличествоЗаписей);
	
	Пока СообщениеИзЧата.ЕстьСообщения(История) Цикл
	
		ТекущееСообщение = СообщениеИзЧата.СледующееСообщение(История);
		
		Запись = ИсторияОбщения.Добавить();
		
		Запись.Дата = МестноеВремя(ТекущееСообщение["Дата"]);
		Запись.Текст = ТекущееСообщение["Текст"];
		
		Запись.Отправитель = "Клиент";
		Если ТекущееСообщение["Отправитель"] <> ТекущееСообщение["Клиент"] Тогда
		
			Запись.Отправитель = "Сотрудник";
		
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ИсторияОбщенияЗаПериод(Знач Клиент, Знач ПериодОбщения, Знач Количество)

	Историк = Обработки.ПолучениеИсторииЧатов;
	
	ПараметрыИстории = Историк.НовыеПараметрыЗагрузкиИстории();
	ПараметрыИстории["Начало"] = ПериодОбщения.ДатаНачала;
	ПараметрыИстории["Конец"] = ПериодОбщения.ДатаОкончания;
	
	Если Количество <> 0 Тогда
	
		ПараметрыИстории["Количество"] = Количество;
	
	КонецЕсли;
	
	Возврат Историк.ПолучитьИсториюЗаПериод(Клиент, ПараметрыИстории);

КонецФункции // ()

&НаКлиенте
Процедура СформироватьСообщениеПоФЗ(Команда)

	Если ТипЗнч(Клиент) = ТипЗнч(
			ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка")) Тогда
	
		ПараметрыВыбора = Новый Структура;
		ПараметрыВыбора.Вставить("Клиент", Клиент);
		
		ПродолжениеФормирования = Новый ОписаниеОповещения(
			"ПродолжитьФормированиеПоТЗ",
			ЭтотОбъект);
		
		ОткрытьФорму(
			"Обработка.ИсторияЧатов.Форма.ВыборДоговораПоКонтрагенту",
			ПараметрыВыбора,
			ЭтотОбъект,
			,
			,
			,
			ПродолжениеФормирования,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	ИначеЕсли ТипЗнч(Клиент) = ТипЗнч(
			ПредопределенноеЗначение("Справочник.ДолговыеОбязательства.ПустаяСсылка")) Тогда
		
		ПродолжитьФормированиеПоТЗ(Клиент);
		
	Иначе
		ВызватьИсключение "Для данного клиента нет формирования сообщения";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьФормированиеПоТЗ(Договор, ДопПараметры = Неопределено) Экспорт

	Если Договор = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ФЗДанные = СформироватьСообщениеПоФЗНаСервере(Договор);
	
	Если Не ФЗДанные["Результат"] Тогда
	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ФЗДанные["Текст"];
		Сообщение.Поле = "Клиент";
		Сообщение.Сообщить();
		
		Возврат;
	
	КонецЕсли;
	
	Ответ = ФЗДанные["Текст"];

КонецПроцедуры


&НаСервереБезКонтекста
Функция СформироватьСообщениеПоФЗНаСервере(Знач Договор)

	Ответ = Новый Структура;
	Ответ.Вставить("Результат", Ложь);
	Ответ.Вставить("Текст", Неопределено);
	
	Шаблон = Константы.ШаблонСообщенияЧатаПоТЗ.Получить();
	
	Если ТипЗнч(Договор) <> ТипЗнч(Справочники.ДолговыеОбязательства.ПустаяСсылка()) Тогда
	
		Ответ["Текст"] = "Сообщение не формируется по ДО";
		Возврат Ответ;
	
	КонецЕсли;
	
	ТекстИзШаблона = Справочники.ШаблоныТекстаДляАвтоинформирования
		.ПолучитьЗаполненныйТекст(Шаблон, Договор);

	Если ПустаяСтрока(ТекстИзШаблона) Тогда
	
		Ответ["Текст"] = "Пустой текст шаблона";
		Возврат Ответ;
	
	КонецЕсли;
	
	Ответ["Результат"] = Истина;
	Ответ["Текст"] = ТекстИзШаблона;
	Возврат Ответ;

КонецФункции

&НаСервере
Процедура ОткрытьСессиюНаВесьДень()

	Элементы.Отправить.Доступность = Истина;
	Элементы.Ответ.Доступность = Истина;

КонецПроцедуры

&НаСервере
Процедура РазрешенноеСообщениеОтправленоБезОтвета()

	Элементы.Отправить.Доступность = Ложь;

КонецПроцедуры

&НаСервере
Процедура ДоступностьПоУмолчанию()

	Элементы.Отправить.Доступность = Истина;
	Элементы.Ответ.Доступность = Ложь;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоСообщениеОтКлиента(ТекущееСообщение)

	Возврат ТекущееСообщение["Отправитель"] = ТекущееСообщение["Клиент"];

КонецФункции // ()

&НаСервереБезКонтекста
Функция ЭтоСообщениеОтСотрудника(ТекущееСообщение)

	Возврат ТекущееСообщение["Отправитель"] = ТекущееСообщение["Сотрудник"];

КонецФункции // ()


#КонецОбласти

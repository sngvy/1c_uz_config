///////////////////////////////////////////////////////////////////////////////
// Общий серверный модуль БИТ.Phone софтфон
// Содержит функции, не зависящие от конфигурации.
///////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьВерсиюВнешнейКомпоненты() ЭКСПОРТ
	Возврат "2.2.251";
КонецФункции

//-----------------------------------------------------------------------------
Функция ЗаписатьОшибкуВЖурналРегистрации(стрОшибка, стрОписание) ЭКСПОРТ
	бит_ТелефонияСервер.ЗаписатьОшибкуВЖурналРегистрации("БИТ.Phone", стрОшибка, стрОписание);
КонецФункции

// Возвращаемое значение - булево,
//   Истина если в регистре сведений есть настройки для текущего пользователя.
Функция ПроверитьНастройкиТекущегоПользователя() ЭКСПОРТ
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_БитфонНастройки.АдресСервера,
	               |	бит_БитфонНастройки.Логин,
	               |	бит_БитфонНастройки.Пароль
	               |ИЗ
	               |	РегистрСведений.бит_БитфонНастройки КАК бит_БитфонНастройки
	               |ГДЕ
	               |	бит_БитфонНастройки.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", бит_ТелефонияСервер.ПолучитьТекущегоПользователя());
	резт = Запрос.Выполнить();
	Если резт.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	табл = резт.Выгрузить();
	строкаРезт = табл[0];
	настроен = ЗначениеЗаполнено(строкаРезт.АдресСервера) И ЗначениеЗаполнено(строкаРезт.Логин);
	Возврат настроен;
КонецФункции

Процедура ПроверитьПрофильНастроек() ЭКСПОРТ
	профильНастр = ПолучитьПрофильНастроек();
	Если НЕ ЗначениеЗаполнено(профильНастр) Тогда
		УстановитьНастройку("ПрофильНастроек", Перечисления.бит_ПрофилиНастроекБИТPhone.БИТ_АТС);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьRTPПортПоУмолчанию() ЭКСПОРТ
	Возврат 4000;
КонецФункции

Функция ПолучитьФлагАвтоопределениеNATПоУмолчанию() ЭКСПОРТ
	Возврат Истина;
КонецФункции

Процедура ЗаполнитьНастройкиПоУмолчаниюТекущегоПользователя(настройки) ЭКСПОРТ
	настройки.Пользователь					= бит_ТелефонияСервер.ПолучитьТекущегоПользователя();
	настройки.ПрофильНастроек				= Перечисления.бит_ПрофилиНастроекБИТPhone.БИТ_АТС;
	настройки.Протокол						= Перечисления.бит_Протоколы.UDP;
	настройки.ИнтервалПеререгистрации		= 300;
	настройки.АвтоопределениеNAT			= ПолучитьФлагАвтоопределениеNATПоУмолчанию();
	настройки.ФорматЗаписи					= Перечисления.бит_ФорматЗаписи.wav;
	настройки.КомандаПереадресации			= "#9";
	настройки.ГлубинаИсторииЗвонков			= 50;
	настройки.ПрефиксВыходаНаВнешнююЛинию	= бит_ТелефонияСервер.ПолучитьПрефиксВыходаНаВнешнююЛиниюПоУмолчанию();
	настройки.КомандаНеБеспокоить			= "*75";
	настройки.КомандаОтменаНеБеспокоить		= "*76";
	настройки.СерверЛицензийВерсия			= 1; // СЛ 2.0
	настройки.СерверЛицензийАдрес			= "127.0.0.1";
	настройки.СерверЛицензийПорт			= 10700;
	настройки.УровеньЛоггирования			= 4;
	настройки.РазворачиватьОкноПриВходящемЗвонке = Истина;
	настройки.ПредлагатьСохранитьНеизвестныйНомер	= Истина;
	настройки.ТипПереводаЗвонка				= Перечисления.бит_ТипПереводаЗвонка.Условный;
	настройки.ПроверкаСтатусаНомераПередПереводом	= Истина;
	настройки.RTPПорт						= ПолучитьRTPПортПоУмолчанию();
КонецПроцедуры

Функция ДоступнаРольБитФонДляПользователя() ЭКСПОРТ
	Возврат (РольДоступна(Метаданные.Роли.бит_ПользовательБитфон) ИЛИ РольДоступна("ПолныеПрава"));
КонецФункции

Функция ПолучитьПараметрыСоединения() ЭКСПОРТ
	Пользователь = бит_ТелефонияСервер.ПолучитьТекущегоПользователя();
	СтруктураОтбора = Новый Структура("Пользователь", Пользователь);
	Возврат РегистрыСведений.бит_БитфонНастройки.Получить(СтруктураОтбора);
КонецФункции

Функция ПолучитьПрофильНастроек() ЭКСПОРТ
	профильНастр = ПолучитьПараметрыСоединения().ПрофильНастроек;
	Возврат профильНастр;
КонецФункции

Функция ПолучитьНомерФакса() ЭКСПОРТ
	номерФакса = ПолучитьПараметрыСоединения().НомерФакса;
	Возврат номерФакса;
КонецФункции

Функция ПолучитьДиректориюЗаписанныхФайлов() ЭКСПОРТ
	настрДиректория = ПолучитьПараметрыСоединения().ДиректорияЗаписанныхФайлов;
	Возврат настрДиректория;
КонецФункции

Функция ПолучитьФорматЗаписи() ЭКСПОРТ
	форматЗап = ПолучитьПараметрыСоединения().ФорматЗаписи;
	Возврат форматЗап;
КонецФункции

Функция ПолучитьКомандуПереадресации() ЭКСПОРТ
	команда = ПолучитьПараметрыСоединения().КомандаПереадресации;
	Возврат команда;
КонецФункции

Функция ПолучитьГлубинуИсторииЗвонков() ЭКСПОРТ
	глубина = ПолучитьПараметрыСоединения().ГлубинаИсторииЗвонков;
	Если глубина = 0 Тогда
		глубина = 50;
	КонецЕсли;
	Возврат глубина;
КонецФункции

Функция ПолучитьПрефиксВыходаНаВнешнююЛинию() ЭКСПОРТ
	префикс = ПолучитьПараметрыСоединения().ПрефиксВыходаНаВнешнююЛинию;
	Возврат префикс;
КонецФункции

Функция ПолучитьФлагИспользоватьПрямойНабор() ЭКСПОРТ
	флаг = ПолучитьПараметрыСоединения().ИспользоватьПрямойНабор;
	Возврат флаг;
КонецФункции

Функция ПолучитьФлагИспользоватьКомандуНеБеспокоитьНаАТС() ЭКСПОРТ
	флаг = ПолучитьПараметрыСоединения().ИспользоватьКомандуНеБеспокоитьНаАТС;
	Возврат флаг;
КонецФункции

Функция ПолучитьКомандуНеБеспокоить() ЭКСПОРТ
	команда = ПолучитьПараметрыСоединения().КомандаНеБеспокоить;
	Возврат команда;
КонецФункции

Функция ПолучитьКомандуОтменаНеБеспокоить() ЭКСПОРТ
	команда = ПолучитьПараметрыСоединения().КомандаОтменаНеБеспокоить;
	Возврат команда;
КонецФункции

Функция ПолучитьФлагРежимНеБеспокоить() ЭКСПОРТ
	флаг = ПолучитьПараметрыСоединения().РежимНеБеспокоить;
	Возврат флаг;
КонецФункции

Процедура УстановитьФлагРежимНеБеспокоить(включен) ЭКСПОРТ
	УстановитьНастройку("РежимНеБеспокоить", включен);
КонецПроцедуры

// Возвращаемое значение - целое неотрицательное число
// 0 - БИТ Сервер Лицензий 1.6
// 1 - БИТ Сервер Лицензий 2.0
Функция ПолучитьВерсиюСервераЛицензий() ЭКСПОРТ
	версияСЛ = ПолучитьПараметрыСоединения().СерверЛицензийВерсия;
	Возврат версияСЛ;
КонецФункции

Функция ПолучитьАдресСервераЛицензий() ЭКСПОРТ
	адрес = ПолучитьПараметрыСоединения().СерверЛицензийАдрес;
	Возврат адрес;
КонецФункции

Функция ПолучитьПортСервераЛицензий() ЭКСПОРТ
	порт = ПолучитьПараметрыСоединения().СерверЛицензийПорт;
	Возврат порт;
КонецФункции

Функция ПолучитьФлагСервераЛицензийНеИспользоватьПрокси() ЭКСПОРТ
	флаг = ПолучитьПараметрыСоединения().СерверЛицензийНеИспользоватьПрокси;
	Возврат флаг;
КонецФункции

Функция ПолучитьCIDСервераЛицензий() ЭКСПОРТ
	ид = ПолучитьПараметрыСоединения().СерверЛицензийCID;
	Возврат ид;
КонецФункции

Функция ПолучитьУровеньЛоггирования() ЭКСПОРТ
	уровеньЛог = ПолучитьПараметрыСоединения().УровеньЛоггирования;
	Возврат уровеньЛог;
КонецФункции

Функция ПолучитьФлагСоздаватьСобытиеВходящийЗвонок() ЭКСПОРТ
	флаг = ПолучитьПараметрыСоединения().СоздаватьСобытиеПриВходящемЗвонке;
	Возврат флаг;
КонецФункции

Функция ПолучитьФлагСоздаватьСобытиеИсходящийЗвонок() ЭКСПОРТ
	флаг = ПолучитьПараметрыСоединения().СоздаватьСобытиеПриИсходящемЗвонке;
	Возврат флаг;
КонецФункции

Функция ПолучитьФлагСоздаватьСобытияПриВнутреннихЗвонках() ЭКСПОРТ
	флаг = ПолучитьПараметрыСоединения().СоздаватьСобытияПриВнутреннихЗвонках;
	Возврат флаг;
КонецФункции

Функция ПолучитьФлагВсегдаЗаписыватьРазговор() ЭКСПОРТ
	флаг = ПолучитьПараметрыСоединения().ВсегдаЗаписыватьРазговор;
	Возврат флаг;
КонецФункции

Функция ПолучитьФлагПолучатьЗаписиРазговоровСБИТАТС() ЭКСПОРТ
	флаг = ПолучитьПараметрыСоединения().ПолучатьЗаписиРазговоровСБИТАТС;
	Возврат флаг;
КонецФункции

Функция ПолучитьАТС() ЭКСПОРТ
	настрАТС = ПолучитьПараметрыСоединения().АТС;
	Возврат настрАТС;
КонецФункции

Процедура ПолучитьПараметрыОтправкиСМС(стрСМСЛогин, стрСМСПароль) ЭКСПОРТ
	параметрыСоед = ПолучитьПараметрыСоединения();
	стрСМСЛогин = параметрыСоед.УдалитьОтправкаСМСЛогин;
	стрСМСПароль = параметрыСоед.УдалитьОтправкаСМСПароль;
КонецПроцедуры

Функция ПолучитьОтправителяСМСПоУмолчанию() ЭКСПОРТ
	отправитель = ПолучитьПараметрыСоединения().УдалитьОтправкаСМСОтправитель;
	Возврат отправитель;
КонецФункции

Функция ПолучитьФлагАвтостартаПриЗапускеСистемы() ЭКСПОРТ
	Если НЕ бит_ТелефонияСерверПереопределяемый.ЕстьВозможностьАвтозапуска() Тогда
		Возврат Ложь;
	КонецЕсли;
	флаг = ПолучитьПараметрыСоединения().АвтозапускПриСтартеСистемы;
	Возврат флаг;
КонецФункции	

Функция ПолучитьСвойНомер() ЭКСПОРТ
	номер = ПолучитьПараметрыСоединения().СвойНомер;
	Возврат номер;
КонецФункции  

Функция ПолучитьФлагРазворачиватьОкноПриВходящемЗвонке() ЭКСПОРТ
	флаг = ПолучитьПараметрыСоединения().РазворачиватьОкноПриВходящемЗвонке;
	Возврат флаг;
КонецФункции  

Функция ПолучитьФлагОткрыватьКартуЯндексПриВходящемЗвонке() ЭКСПОРТ
	флаг = ПолучитьПараметрыСоединения().ОткрыватьКартуЯндексПриВходящемЗвонке;
	Возврат флаг;
КонецФункции  

Функция ПолучитьФлагПредлагатьСохранитьНеизвестныйНомер() ЭКСПОРТ
	флаг = ПолучитьПараметрыСоединения().ПредлагатьСохранитьНеизвестныйНомер;
	Возврат флаг;
КонецФункции

Функция ПолучитьВерсиюВнешнейКомпонентыТекущегоПользователя() ЭКСПОРТ
	версия = ПолучитьПараметрыСоединения().ВерсияСофтфона;
	Возврат версия;
КонецФункции

Процедура УстановитьВерсиюВнешнейКомпонентыТекущегоПользователя(стрВерсия) ЭКСПОРТ
	УстановитьНастройку("ВерсияСофтфона", стрВерсия);
КонецПроцедуры

Функция ПолучитьФлагПолучениеСтатусовАбонентов() ЭКСПОРТ
	флаг = ПолучитьПараметрыСоединения().ПолучениеСтатусов;
	Возврат флаг;
КонецФункции  

Функция ПолучитьФлагНеИскатьКонтрагента() ЭКСПОРТ
	флаг = ПолучитьПараметрыСоединения().НеИскатьКонтрагента;
	Возврат флаг;
КонецФункции  

Функция ПолучитьФлагПоискДублей() ЭКСПОРТ
	флаг = ПолучитьПараметрыСоединения().ПоискДублей;
	Возврат флаг;
КонецФункции

Функция ПолучитьФлагПриниматьНесколькоВходящих() ЭКСПОРТ
	флаг = ПолучитьПараметрыСоединения().ПриниматьНесколькоВходящих;
	Возврат флаг;
КонецФункции  

Функция ПолучитьФлагСохранятьОтклоненныйПриРазговореВходящий() ЭКСПОРТ
	флаг = ПолучитьПараметрыСоединения().СохранятьОтклоненныйПриРазговореВходящий;
	Возврат флаг;
КонецФункции  

Функция ПолучитьТипПереводаЗвонка() ЭКСПОРТ
	тип = ПолучитьПараметрыСоединения().ТипПереводаЗвонка;
	Если НЕ ЗначениеЗаполнено(тип) Тогда
		тип = Перечисления.бит_ТипПереводаЗвонка.Условный;
		УстановитьНастройку("ТипПереводаЗвонка", тип);
	КонецЕсли;
	Возврат тип;
КонецФункции 

Функция ПолучитьФлагПроверкаСтатусаНомераПередПереводом() ЭКСПОРТ
	флаг = ПолучитьПараметрыСоединения().ПроверкаСтатусаНомераПередПереводом;
	Возврат флаг;
КонецФункции

Функция ПолучитьСписокКодеков() ЭКСПОРТ
	список = ПолучитьПараметрыСоединения().СписокКодеков;
	Возврат список;
КонецФункции 

Процедура УстановитьСписокКодеков(стрСписок) ЭКСПОРТ
	УстановитьНастройку("СписокКодеков", стрСписок);
КонецПроцедуры

Функция ПолучитьУстройствоВыводаЗвукаВходящегоЗвонка() ЭКСПОРТ
	устройство = ПолучитьПараметрыСоединения().УстройствоВыводаЗвукаВходящегоЗвонка;
	Возврат устройство;
КонецФункции

Функция ПолучитьТипВходящегоЗвонка() ЭКСПОРТ
	тип = ПолучитьПараметрыСоединения().ТипВходящегоЗвонка;
	Возврат тип;
КонецФункции

Функция ПолучитьФайлВходящегоЗвонка() ЭКСПОРТ
	стрФайл = ПолучитьПараметрыСоединения().ФайлВходящегоЗвонка;
	Возврат стрФайл;
КонецФункции

Функция ПолучитьРазрешенныйАдрес() ЭКСПОРТ
	флаг = ПолучитьПараметрыСоединения().РазрешенныйАдрес;
	Возврат флаг;
КонецФункции

Процедура УстановитьРазрешенныйАдрес(стрРазрешенныйАдрес) ЭКСПОРТ
	УстановитьНастройку("РазрешенныйАдрес", стрРазрешенныйАдрес);
КонецПроцедуры

//-----------------------------------------------------------------------------
// Создание событий

// Возвращает ссылку на новый созданный документ события взаимодействия
Функция СоздатьСобытие(структПараметрыСобытия) ЭКСПОРТ
	длинаНомера = СтрДлина(структПараметрыСобытия.Номер);
	длинаВнешнегоНомера = бит_ТелефонияКлиентСервер.ПолучитьДлинуВнешнегоНомера();
	создаватьСобытияПриВнутреннихЗвонках = бит_БитфонСервер.ПолучитьФлагСоздаватьСобытияПриВнутреннихЗвонках();
	Если НЕ создаватьСобытияПриВнутреннихЗвонках И длинаНомера < длинаВнешнегоНомера Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(структПараметрыСобытия.Контрагент) Тогда
		// Контрагент не был найден - номер уже изменился, ожидается событие изменения номера и создание события в нем.
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат бит_ТелефонияСерверПереопределяемый.СоздатьСобытиеЗвонка(структПараметрыСобытия);
КонецФункции

//-----------------------------------------------------------------------------
Функция ПолучитьНомерДляОператора(стрНомер, контрагент, контактноеЛицо) ЭКСПОРТ
	стрНомер = "";
	
	структОтбор = Новый Структура("Пользователь", бит_ТелефонияСервер.ПолучитьТекущегоПользователя());
	выборка = РегистрыСведений.бит_СпискиОбзвона.Выбрать(структОтбор);
	Если НЕ выборка.Следующий() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СписокОбзвонаТекущий = выборка.Список;
	Если НЕ ЗначениеЗаполнено(СписокОбзвонаТекущий) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	бит_СписокОбзвонаСписок.Ссылка,
	               |	бит_СписокОбзвонаСписок.НомерСтроки,
	               |	бит_СписокОбзвонаСписок.НомерТелефона,
	               |	бит_СписокОбзвонаСписок.Контрагент,
	               |	бит_СписокОбзвонаСписок.КонтактноеЛицо,
	               |	бит_СписокОбзвонаСписок.Обработан
	               |ИЗ
	               |	Документ.бит_СписокОбзвона.Список КАК бит_СписокОбзвонаСписок
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_СписокОбзвона КАК бит_СписокОбзвона
	               |		ПО бит_СписокОбзвонаСписок.Ссылка = бит_СписокОбзвона.Ссылка
	               |ГДЕ
	               |	бит_СписокОбзвона.Ссылка = &Ссылка
	               |	И бит_СписокОбзвонаСписок.Обработан = ЛОЖЬ";
	Запрос.УстановитьПараметр("Ссылка", СписокОбзвонаТекущий);
	выгрузка = Запрос.Выполнить().Выбрать();
	Если выгрузка.Количество() = 0 Тогда
		ОтменитьТранзакцию();
		Возврат Истина;
	КонецЕсли;
	
	выгрузка.Следующий();
	
	стрНомер			= выгрузка.НомерТелефона;
	контрагент			= выгрузка.Контрагент;
	контактноеЛицо		= выгрузка.КонтактноеЛицо;
	
	списокОбзвона = выгрузка.Ссылка;
	списокОбзвонаОб = списокОбзвона.ПолучитьОбъект();
	строка = списокОбзвонаОб.Список.Найти(выгрузка.НомерСтроки, "НомерСтроки");
	Если строка <> Неопределено Тогда
		строка.Обработан = Истина;
	КонецЕсли;
	списокОбзвонаОб.Записать();
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
КонецФункции

//-----------------------------------------------------------------------------
// Возвращаемое значение - структура, в которой поле Ключ указывает на запись настроек текущего пользователя.
Функция ПолучитьПараметрыОткрытияФормыНастроек() ЭКСПОРТ
	Возврат бит_ТелефонияСервер.ПолучитьПараметрыОткрытияФормыНастроек("бит_БитфонНастройки", "бит_БитфонСервер");
КонецФункции

//-----------------------------------------------------------------------------
Функция ОтправитьПочтовоеСообщениеВТехподдержку(стрТема, стрТекст, стрНаименованиеВложения, двоичнВложение, сообщение) ЭКСПОРТ
	Письмо = Новый ИнтернетПочтовоеСообщение;
	
	Письмо.Тема = стрТема;
	Текст = Письмо.Тексты.Добавить(стрТекст, ТипТекстаПочтовогоСообщения.ПростойТекст);
	Письмо.Отправитель = "BIT.Phonesupport@1cbit.ru";
	Письмо.ИмяОтправителя = "БИТ.Phone техническая поддержка";
	
	Если двоичнВложение <> Неопределено Тогда
		Письмо.Вложения.Добавить(двоичнВложение, стрНаименованиеВложения);
	КонецЕсли;
	
	Письмо.Получатели.Добавить("bitphone@1cbit.ru");
	
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	Профиль.АдресСервераSMTP = "mx.1cbit.ru";
	Профиль.ПортSMTP = 587;
	Профиль.ПользовательSMTP = "BIT.Phonesupport@1cbit.ru";
	Профиль.ПарольSMTP = "NYF7ayjyu";
	Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
	
	Почта = Новый ИнтернетПочта;
	
	успешностьОтправки = Истина;
	 
	Попытка
		Почта.Подключиться(Профиль);
		сообщение.Текст = сообщение.Текст + Символы.ПС + "Подключение к почтовому серверу БИТ успешно установлено";
		
		Почта.Послать(Письмо);
		сообщение.Текст = сообщение.Текст + Символы.ПС + "Письмо отправлено";
		
		Почта.Отключиться();
	Исключение
		успешностьОтправки = Ложь;
		сообщение.Текст = сообщение.Текст + Символы.ПС + "Не удалось подключиться к почтовому серверу БИТ - " + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат успешностьОтправки;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьНастройку(стрНастройка, значениеНастройки)
	бит_ТелефонияСервер.УстановитьНастройкуТекущегоПользователя("бит_БитфонНастройки", "бит_БитфонСервер", стрНастройка, значениеНастройки);
КонецПроцедуры

#КонецОбласти

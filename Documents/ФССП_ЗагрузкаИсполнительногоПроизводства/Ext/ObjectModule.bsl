
Процедура ОбработкаПроведения(Отказ, РежимПроведения) 

	// 19012022
	//Изменен состав полей при записи в регистр ФССП_СостояниеИП в связи с изменением данных в Предметах ИП
	//ЭтотОбъект.Движения.Записать();
	
	ДокументСсылка = ЭтотОбъект.Ссылка;
	ОбработатьТабличнуюЧастьДокумента();
	тзИП_Документ = Новый ТаблицаЗначений;
	тзИП_Документ = ЭтотОбъект.тчИсполнительныеПроизводства.Выгрузить(,);
	тзИП_Документ.Колонки.Добавить("Идентификатор");
	
	Для Каждого ИП из тзИП_Документ Цикл
		НомерИП = бит_ФССП_ИнтеграцияФССП.ПолучитьНомерОт(ИП.exe_production);
		ДатаВозбужденияИП= бит_ФССП_ИнтеграцияФССП.ПолучитьДатуОт(ИП.exe_production);
		ID = НомерИП + " от " + Лев(Строка(ДатаВозбужденияИП), 10);
		ИП.Идентификатор = ID;
	КонецЦикла;
	
	МассивПредметов = новый Массив;
	
	ПоискОдинаковыхИсполнительныхИзДокумента(тзИП_Документ);	
	
	ЗапросСрезПоследних = Новый Запрос;
	ЗапросСрезПоследних.Текст = "ВЫБРАТЬ
	                            |	ФССП_СостояниеИПСрезПоследних.bailiff КАК bailiff,
	                            |	ФССП_СостояниеИПСрезПоследних.department КАК department,
	                            |	ФССП_СостояниеИПСрезПоследних.name КАК name,
	                            |	ФССП_СостояниеИПСрезПоследних.subject КАК subject,
	                            |	ФССП_СостояниеИПСрезПоследних.ip_end КАК ip_end,
	                            |	ФССП_СостояниеИПСрезПоследних.exe_production КАК exe_production,
	                            |	ФССП_СостояниеИПСрезПоследних.details КАК details,
	                            |	ФССП_СостояниеИПСрезПоследних.СтатусИП КАК СтатусИП,
	                            |	ЕСТЬNULL(ФССП_СостояниеИПСрезПоследних.Завершено, ЛОЖЬ) КАК Завершено,
	                            |	ФССП_СостояниеИПСрезПоследних.ОтделСудебныхПриставов КАК ОтделСудебныхПриставов,
	                            |	ФССП_СостояниеИПСрезПоследних.СудебныйПриставИсполнитель КАК СудебныйПриставИсполнитель,
	                            |	ФССП_СостояниеИПСрезПоследних.ПричинаОкончания КАК ПричинаОкончания,
	                            |	ФССП_СостояниеИПСрезПоследних.ДатаОкончания КАК ДатаОкончания,
	                            |	ФССП_СостояниеИПСрезПоследних.НомерИД КАК НомерИД,
	                            |	ФССП_СостояниеИПСрезПоследних.НомерСД КАК НомерСД,
	                            |	ФССП_СостояниеИПСрезПоследних.ДатаВозбуждения КАК ДатаВозбуждения,
	                            |	ФССП_ИсполнительноеПроизводство.Ссылка КАК Ссылка,
	                            |	ПРЕДСТАВЛЕНИЕ(ФССП_ИсполнительноеПроизводство.Ссылка) КАК Идентификатор
	                            |ИЗ
	                            |	Справочник.ФССП_ИсполнительноеПроизводство КАК ФССП_ИсполнительноеПроизводство
	                            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФССП_СостояниеИП.СрезПоследних(&МоментДоДокумента, ) КАК ФССП_СостояниеИПСрезПоследних
	                            |		ПО ФССП_ИсполнительноеПроизводство.Ссылка = ФССП_СостояниеИПСрезПоследних.ИП
	                            |ГДЕ
	                            |	ФССП_ИсполнительноеПроизводство.Владелец = &Владелец";
	ЗапросСрезПоследних.УстановитьПараметр("Владелец", ЭтотОбъект.Должник);  
	ЗапросСрезПоследних.УстановитьПараметр("МоментДоДокумента", Новый Граница(ЭтотОбъект.МоментВремени(), ВидГраницы.Исключая)); 
	
	ЗапросСуммОстатки = Новый Запрос;
	ЗапросСуммОстатки.Текст = "ВЫБРАТЬ
	|	ФССП_ЗадолженностьПоПредметамИПОстатки.ИсполнительноеПроизводство КАК ИсполнительноеПроизводство,
	|	ФССП_ЗадолженностьПоПредметамИПОстатки.Предмет КАК Предмет,
	|	ФССП_ЗадолженностьПоПредметамИПОстатки.СуммаОстаток КАК СуммаОстаток
	|ИЗ
	|	РегистрНакопления.ФССП_ЗадолженностьПоПредметамИП.Остатки(&датаОстатков, ИсполнительноеПроизводство.Владелец = &Должник) КАК ФССП_ЗадолженностьПоПредметамИПОстатки";
	ЗапросСуммОстатки.УстановитьПараметр("Должник", ЭтотОбъект.Должник);
	ЗапросСуммОстатки.УстановитьПараметр("датаОстатков", Новый Граница(ЭтотОбъект.МоментВремени(), ВидГраницы.Исключая));
	тзИП_Суммы = ЗапросСуммОстатки.Выполнить().Выгрузить();
	
	тзИП_База = ЗапросСрезПоследних.Выполнить().Выгрузить();

	ПредметыПоИП = ПолучитьПредметыПоИП();
	
	Движения.ФССП_СостояниеИП.Записывать = Истина; 
	Для Каждого ИП из тзИП_База Цикл

		ЗакончитьИсполнением = Не ИП.Завершено
			И ИПЗакончилосьИсполнением(
				тзИП_Документ,
				ИП.Идентификатор,
				ИП.СтатусИП);
		Если Не ЗакончитьИсполнением Тогда
			
			Продолжить;
			
		КонецЕсли;
			
		//Делаем запись о Завершении ИСПОЛНЕНИЕМ  
		Движение = Движения.ФССП_СостояниеИП.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение, ИП);

		Движение.ИП = ИП.Ссылка;
		Движение.Регистратор = ДокументСсылка;
		Движение.Период = ДокументСсылка.Дата;
		Движение.Завершено = Истина;
		Движение.СтатусИП = Перечисления.ФССП_СтатусыИП.ОконченоИсполнением;
		Движение.НомерИД = ?(ИП.Ссылка.НомерИД = Справочники.ИсполнительныеДокументы.ПустаяСсылка(),Справочники.ИсполнительныеДокументы.ПустаяСсылка(),ИП.Ссылка.НомерИД);
		Движение.ДатаОкончания = Дата(1,1,1);
		Движение.ПричинаОкончания = "";
		
		ОтборПредметов = Новый Структура;
		ОтборПредметов.Вставить("ИсполнительноеПроизводство", Движение.ИП);	
		ПредметыИПОстатки = тзИП_Суммы.НайтиСтроки(ОтборПредметов);
		
		Для Каждого ПредметОстатки из ПредметыИПОстатки Цикл

			Предмет = ПредметИзОстатков(ПредметОстатки, Движение.ИП);
			Если Не ЗначениеЗаполнено(Предмет) Тогда
			
				Продолжить;
			
			КонецЕсли;
			МассивПредметов.Добавить(Предмет);
			
			Состояние = СостояниеПредмета(Предмет);
			Если Не ЗначениеЗаполнено(Состояние) Тогда
			
				Продолжить;
			
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Движение, Состояние);
			
		КонецЦикла;	

	КонецЦикла;		
	Движения.ФССП_СостояниеИП.Записывать = Истина;
	
	//Ищем в Документе
	Для Каждого ИП из тзИП_Документ Цикл
		//Шаг Раз: Ищем по Идентификатору
		ОтборИД = Новый Структура;
		ОтборИД.Вставить("Идентификатор", ИП.Идентификатор);
		НайденныеИП = тзИП_База.НайтиСтроки(ОтборИД);
		Если НайденныеИП.Количество() = 0 Тогда
			//Если НЕТ ИП в базе
			
			//05122023 Проверка на взыскателя 
			Статус = Перечисления.ФССП_СтатусыИП.Действующее; 
			Если ЗагружатьТолькоИПВзыскателя() Тогда
				Продолжить;
			Иначе
				Если НЕ ЭтоИПВзыскателя(ИП.ОрганВыдавшийИД) Тогда
					Статус = Перечисления.ФССП_СтатусыИП.ДругойВзыскатель; 
				КонецЕсли; 		
			КонецЕсли;	
			
			НовоеИП = Справочники.ФССП_ИсполнительноеПроизводство.СоздатьЭлемент();
			НовоеИП.Наименование = ИП.Идентификатор;
			НовоеИП.Владелец = ЭтотОбъект.Должник;
			НовоеИП.ДатаВозбуждения = ИП.ДатаВозбуждения;
			НовоеИП.Записать();
			НовоеИПСсыль = НовоеИП.Ссылка;
			НовыйИДСсылка = Справочники.ИсполнительныеДокументы.ПустаяСсылка();
			//Если нет ИП в базе, проверяем, есть ли какие-либо ИД у должника по ИП.ДатаИД и ИП.НомерИД
			//ПривязатьИПкДО
			//Если ИД есть - Процедура свяжет ИП и ИД,а также свяжет ИП и ДО по ИД: проставит в поле ИП "Связанное ДО" Владельца ИД 
			//( при условии, что Владелец - ДО);
			//Если ИД нет - Процедура создаст новый ИД, запишет его реквизиты, привяжет его к ИП и Владельцем проставит должника
			
			ПривязатьИПкДО(ИП.НомерИД, ИП.ДатаИД, ИП.ОрганВыдавшийИД, ИП.ВидИД, НовоеИПСсыль, НовыйИДСсылка);
			
			Движение = Движения.ФССП_СостояниеИП.Добавить();
			Движение.bailiff = ИП.bailiff;
			Движение.department = ИП.department;
			Движение.details = ИП.details;
			Движение.exe_production = ИП.exe_production;
			Движение.ip_end = ИП.ip_end;
			Движение.name = ИП.name;
			Движение.subject = ИП.subject;
			Движение.ОтделСудебныхПриставов = ИП.ОтделСудебныхПриставов;
			Движение.СудебныйПриставИсполнитель = ИП.СудебныйПриставИсполнитель;
			Движение.НомерИД = НовыйИДСсылка;
			Движение.НомерСД = ИП.НомерСД;
			Движение.ДатаВозбуждения = ИП.ДатаВозбуждения;
			Движение.ИП = НовоеИПСсыль;
			Движение.Регистратор = ДокументСсылка;
			Движение.Период = ДокументСсылка.Дата;
			Если ЗначениеЗаполнено(ИП.ip_end) Тогда
				Движение.Завершено = Истина;
				Движение.СтатусИП = Перечисления.ФССП_СтатусыИП.ОконченоБезИсполнения;
				Движение.ДатаОкончания = ИП.ДатаОкончания;
				Движение.ПричинаОкончания = ИП.ПричинаОкончания;
			Иначе
				Движение.Завершено = Ложь;
				Движение.СтатусИП = Статус;
				Движение.ДатаОкончания = Дата(1,1,1);
				Движение.ПричинаОкончания = "";
			КонецЕсли;
			
			// WTF?????? Почему 5
			Для ПорядковыйНомер = 1 по 5 Цикл 

				Предмет = ПредметИзПолученныхДанных(ИП, Движение.ИП, ПорядковыйНомер);
				Если Не ЗначениеЗаполнено(Предмет) Тогда
				
					Продолжить;
				
				КонецЕсли;
				МассивПредметов.Добавить(Предмет);
				
				Состояние = СостояниеПредмета(Предмет);
				Если Не ЗначениеЗаполнено(Состояние) Тогда
				
					Продолжить;
				
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(Движение, Состояние);

			КонецЦикла;
			//ПИШЕМ НОВОЕ ИП
		Иначе
			//Если ЕСТЬ такое ИП в базе
			//Ищем Неизмененные ИП
			ИПСсылка = НайденныеИП[0].Ссылка;
			
			Отбор = Новый Структура;
			Отбор.Вставить("Идентификатор", Неопределено);
			Отбор.Вставить("name", Неопределено);
			Отбор.Вставить("exe_production", Неопределено);
			Отбор.Вставить("details", Неопределено);
			Отбор.Вставить("ip_end", Неопределено);
			Отбор.Вставить("subject", Неопределено);
			Отбор.Вставить("bailiff", Неопределено);
			Если Не (бит_ФССП_ИнтеграцияФССП.ПолучитьТипСлова(ИП.department) = "Число"
				Или ТипЗнч(ИП.department) = Тип("Число")) Тогда
				
				Отбор.Вставить("department", Неопределено);
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Отбор, ИП);
			
			ИП_Неизмененные = тзИП_База.НайтиСтроки(Отбор);
			Если ИП_Неизмененные.Количество() = 0 Тогда
				//Записываем изменения
				Движение = Движения.ФССП_СостояниеИП.Добавить();
				Движение.bailiff = ИП.bailiff;
				Движение.department = ИП.department;
				Движение.details = ИП.details;
				Движение.exe_production = ИП.exe_production;
				Движение.ip_end = ИП.ip_end;
				Движение.name = ИП.name;
				Движение.subject = ИП.subject;
				Движение.ОтделСудебныхПриставов = ИП.ОтделСудебныхПриставов;
				Движение.СудебныйПриставИсполнитель = ИП.СудебныйПриставИсполнитель;
				СсылкаИД = Справочники.ИсполнительныеДокументы.ПустаяСсылка();
				ПроверитьИзмененияИсполДока(ИПСсылка, ИП.НомерИД, ИП.ДатаИД, ИП.ОрганВыдавшийИД, ИП.ВидИД, СсылкаИД);
				Движение.НомерИД = СсылкаИД;
				Движение.ИП = ИПСсылка;
				Движение.НомерСД = ИП.НомерСД;
				Движение.ДатаВозбуждения = ИП.ДатаВозбуждения;
				Движение.Регистратор = ДокументСсылка;
				Движение.Период = ДокументСсылка.Дата; 
				
				//5.12.2023 Проверка обновлений ИП не относящихся ко Взыскателю - установка статуса Другой взыскатель
				
				Если ЗначениеЗаполнено(ИП.ip_end) Тогда
					Движение.Завершено = Истина;
					
					Если ЗагружатьТолькоИПВзыскателя() Тогда
						Статус = Перечисления.ФССП_СтатусыИП.ДругойВзыскатель;
					Иначе
						Статус = Перечисления.ФССП_СтатусыИП.ОконченоБезИсполнения;
					КонецЕсли;	
					
					Если НЕ ЭтоИПВзыскателя(ИП.ОрганВыдавшийИД) Тогда
						Статус = Перечисления.ФССП_СтатусыИП.ДругойВзыскатель;
					Иначе
						Статус = Перечисления.ФССП_СтатусыИП.ОконченоБезИсполнения;
					КонецЕсли;
					
   					Движение.СтатусИП = Статус;
					Движение.ДатаОкончания = ИП.ДатаОкончания;
					Движение.ПричинаОкончания = ИП.ПричинаОкончания;
				Иначе
					Движение.Завершено = Ложь;
					
					Если ЗагружатьТолькоИПВзыскателя() Тогда
						Статус = Перечисления.ФССП_СтатусыИП.ДругойВзыскатель;
					Иначе
						Статус = Перечисления.ФССП_СтатусыИП.Действующее;
					КонецЕсли;	
					
					Если НЕ ЭтоИПВзыскателя(ИП.ОрганВыдавшийИД) Тогда
						Статус = Перечисления.ФССП_СтатусыИП.ДругойВзыскатель;
					Иначе
						Статус = Перечисления.ФССП_СтатусыИП.Действующее;
					КонецЕсли; 
					
					
					Движение.СтатусИП = Статус;
					Движение.ДатаОкончания = Дата(1,1,1);
					Движение.ПричинаОкончания = "";
				КонецЕсли; 
				
				Для ПорядковыйНомер = 1 по 5 Цикл 
					
					Предмет = ПредметИзПолученныхДанных(ИП, Движение.ИП, ПорядковыйНомер);
					Если Не ЗначениеЗаполнено(Предмет) Тогда
					
						Продолжить;
					
					КонецЕсли;
					МассивПредметов.Добавить(Предмет);
					
					Состояние = СостояниеПредмета(Предмет);
					Если Не ЗначениеЗаполнено(Состояние) Тогда
					
						Продолжить;
					
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(Движение, Состояние);
					
				КонецЦикла;				
			Иначе   
				Движения.ФССП_СостояниеИП.Записывать = Ложь;
				Продолжить;
			КонецЕсли;
		КонецЕсли;					
		
	КонецЦикла;
	
	ТаблицаДвиженийЗадолженность = Неопределено;
	Документы.ФССП_ЗагрузкаИсполнительногоПроизводства.ИнициализироватьДанныеДокумента(ЭтотОбъект,Движения.ФССП_СостояниеИП, МассивПредметов, ТаблицаДвиженийЗадолженность); 
	Если ТаблицаДвиженийЗадолженность <> Неопределено Тогда 
		Если ТаблицаДвиженийЗадолженность.Количество() > 0 Тогда 
			// 190120222 ФССП_ЗадолженностьПоИП Заменен на ФССП_ЗадолженностьПоПредметамИП
			//ЭтотОбъект.Движения.ФССП_ЗадолженностьПоИП.Загрузить(ТаблицаДвиженийЗадолженность);
			//ЭтотОбъект.Движения.ФССП_ЗадолженностьПоИП.Записывать = Истина;  
			ЭтотОбъект.Движения.ФССП_ЗадолженностьПоПредметамИП.Загрузить(ТаблицаДвиженийЗадолженность);
			ЭтотОбъект.Движения.ФССП_ЗадолженностьПоПредметамИП.Записывать = Истина;  
		КонецЕсли;   
	КонецЕсли;
	
КонецПроцедуры

// Поидее не нужна
Процедура ПоискОдинаковыхИсполнительныхИзДокумента(тзИП_Документ)
	ТаблЗнач = тзИП_Документ; 
	
	Отбор = Новый Структура();
	
	Для каждого Стр Из ТаблЗнач Цикл
		Отбор.Очистить();
		Отбор.Вставить("Идентификатор", Стр.Идентификатор);
		Строки = ТаблЗнач.НайтиСтроки(Отбор);
		КоличествоСтрок = Строки.Количество();
		Если КоличествоСтрок <= 1 Тогда
			Продолжить;
		КОнецЕсли;
		// Обход с конца для для удаления всех строк по условию
		Пока КоличествоСтрок > 0 Цикл
		
			ТипСловаДепартамент = бит_ФССП_ИнтеграцияФССП.ПолучитьТипСлова(Строки[КоличествоСтрок - 1].department);
			Если ТипСловаДепартамент = "Число"
				И Не ЗначениеЗаполнено(Строки[КоличествоСтрок - 1].ОтделСудебныхПриставов)
				И Не ЗначениеЗаполнено(Строки[КоличествоСтрок - 1].СудебныйПриставИсполнитель) Тогда
				
				ТаблЗнач.Удалить(КоличествоСтрок - 1);
				
			КонецЕсли;
			
			КоличествоСтрок = КоличествоСтрок - 1;
		
		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

Процедура ПривязатьИПкДО(НомерИД, ДатаИД, ОрганВыдавший, ВидИД, ИсполПроизводство, ИсполДокумент)
	
	ИПОбъект = ИсполПроизводство.ПолучитьОбъект();
	
	НайденныйИД = НайтиИДПоНаименованию(НомерИД, ДатаИД);
	Если НайденныйИД = Неопределено Тогда
	
		 НовыйИД = Справочники.ИсполнительныеДокументы.СоздатьЭлемент();
		 НовыйИД.Владелец =этотобъект.Должник;
		 НовыйИД.Должник = этотобъект.Должник;
		 Если ЗначениеЗаполнено(НомерИД) Тогда
			 НовыйИД.НомерДела = НомерИД;
			 НовыйИД.КодИД = Строка(НомерИД) + " " + Лев(Строка(ДатаИД), 10) +  " " + Строка(ЭтотОбъект.Должник.КодКонтрагента);
		 Иначе
			 НовыйИД.НомерДела = Строка(ВидИД) + " от "+ Лев(Строка(ДатаИД), 10);
			 НовыйИД.КодИД = Строка(ВидИД) + " от " + Лев(Строка(ДатаИД), 10) + " " + Строка(ЭтотОбъект.Должник.КодКонтрагента);
		 КонецЕсли;
		 НовыйИД.ДатаИД = ДатаИД;
	
	Иначе
	
		НовыйИД = НайденныйИД.ПолучитьОбъект();
	
	КонецЕсли;
	 
	НовыйИД.ОрганВыдавшийИД = ОрганВыдавший;
	НовыйИД.ВидИД = ВидИД;
	НовыйИД.Записать();
	
	ИПОбъект.НомерИД = НовыйИД.Ссылка;
	
	ИПОбъект.Записать();	

 Конецпроцедуры

Функция НайтиИДПоНаименованию(НомерИД, ДатаИД = Неопределено)

	// Ищем по Должнику и Номеру дела, и оставляем Дату опционально,
	// тк на практике Даты ИД могут быть кривыми как у Приставов, так и у Клиентов
	ЗапросИДДО = Новый Запрос( "ВЫБРАТЬ
	                           |	ИсполнительныеДокументы.Ссылка КАК Ссылка
	                           |ИЗ
	                           |	Справочник.ИсполнительныеДокументы КАК ИсполнительныеДокументы
	                           |ГДЕ
	                           |	ИсполнительныеДокументы.НомерДела = &НомерДела
	                           |	И ИсполнительныеДокументы.ПометкаУдаления = ЛОЖЬ
	                           |	И ИсполнительныеДокументы.Должник = &Должник
							   |	&ДатаИД");
	
	ЗапросИДДО.УстановитьПараметр("Должник", ЭтотОбъект.Должник);
	ЗапросИДДО.УстановитьПараметр("НомерДела", НомерИД);
	
	УсловиеДатыИД = "";
	// При переносе убрать Ложь
	Если ДатаИД <> Неопределено Тогда
	
		УсловиеДатыИД = "И ИсполнительныеДокументы.ДатаИД = &ДатаИД";
		ЗапросИДДО.УстановитьПараметр("ДатаИД", ДатаИД);
	
	КонецЕсли;
	ЗапросИДДО.Текст = СтрЗаменить(ЗапросИДДО.Текст, "&ДатаИД", УсловиеДатыИД);
	
	Выборка = ЗапросИДДО.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
		
			Возврат Выборка.Ссылка;
		
		КонецЕсли;

	КонецЦикла;

	Возврат Неопределено;

КонецФункции // ()



//Процедура ПривязатьИПкДО(ИсполДок,ДатаИсполДока,ОрганВыдавший,Вид,ИсполПроизводство,ИД_Ссылка)
//	 ЗапросИДДО= Новый Запрос( "ВЫБРАТЬ
//	                      |	ИсполнительныеДокументы.Ссылка КАК Ссылка,
//	                      |	ИсполнительныеДокументы.Владелец КАК Владелец
//						  |ИЗ
//	                      |	Справочник.ИсполнительныеДокументы КАК ИсполнительныеДокументы
//	                      |ГДЕ
//	                      |	ИсполнительныеДокументы.НомерДела = &НомерДела
//	                      |	И ИсполнительныеДокументы.ПометкаУдаления = ЛОЖЬ
//	                      |	И ИсполнительныеДокументы.ДатаИД = &ДатаИД");
//	 //ЗапросИДДО.УстановитьПараметр("Должник",ЭтотОбъект.Должник);
//	 ЗапросИДДО.УстановитьПараметр("НомерДела",ИсполДок);
//	 ЗапросИДДО.УстановитьПараметр("ДатаИД",ДатаИсполДока);
//	 
//	 Выборка = ЗапросИДДО.Выполнить().Выбрать();
//	 ИПОбъект = ИсполПроизводство.ПолучитьОбъект(); 
//	 Если Выборка.Следующий() Тогда
//		 //Если ТипЗнч(Выборка.Владелец) = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда 
//		 //    ИПОбъект.ДолговоеОбязательствоИП = Выборка.Владелец;
//		 //КонецЕсли;
//		 ИПОбъект.НомерИД = Выборка.Ссылка;
//		 ИД_Ссылка = Выборка.Ссылка;
//		 ИД_Об =  ИД_Ссылка.ПолучитьОбъект();
//		 ИД_Об.ОрганВыдавшийИД = ОрганВыдавший;
//		 ИД_Об.ВидИД = Вид;
//		 ИД_Об.Записать();
//	 Иначе 
//		 НовыйИД = Справочники.ИсполнительныеДокументы.СоздатьЭлемент();
//		 НовыйИД.Владелец =этотобъект.Должник;
//		 НовыйИД.Должник = этотобъект.Должник;
//		 Если ЗначениеЗаполнено(ИсполДок) Тогда
//			 НовыйИД.НомерДела = ИсполДок;
//			 НовыйИД.КодИД = Строка(ИсполДок) + " " + Лев(Строка(ДатаИсполДока), 10) +  " " + Строка(ЭтотОбъект.Должник.КодКонтрагента);
//		 Иначе
//			 НовыйИД.НомерДела = Строка(Вид) + " от "+ Лев(Строка(ДатаИсполДока), 10);
//			 НовыйИД.КодИД = Строка(Вид) + " от " + Лев(Строка(ДатаИсполДока), 10) + " " + Строка(ЭтотОбъект.Должник.КодКонтрагента);
//		 КонецЕсли;
//		 НовыйИД.ДатаИД = ДатаИсполДока;
//		 НовыйИД.ВидИД = Вид;
//		 НовыйИД.ОрганВыдавшийИД = ОрганВыдавший;
//		 НовыйИД.Записать();
//		 ИПОбъект.НомерИД = НовыйИД.Ссылка;
//		 ИД_Ссылка = НовыйИД.Ссылка;
//	 КонецЕсли;	
//	 ИПОбъект.Записать();	

// Конецпроцедуры
 
 
Процедура ПроверитьИзмененияИсполДока(ИП, НомерИД, ДатаИД, ОрганВыдавшийИД, ВидИД, ИД_ССылка)
	 Если Не ЗначениеЗаполнено(НомерИД) Тогда
		 ИД_ССылка = ИП.НомерИД;
		 Возврат;
	 Иначе	 
		 
		 Запрос = Новый Запрос("ВЫБРАТЬ
		 |	ФССП_ИсполнительноеПроизводство.Ссылка КАК Ссылка,
		 |	ФССП_ИсполнительноеПроизводство.НомерИД КАК НомерИД
		 |ИЗ
		 |	Справочник.ФССП_ИсполнительноеПроизводство КАК ФССП_ИсполнительноеПроизводство
		 |ГДЕ
		 |	ФССП_ИсполнительноеПроизводство.Ссылка = &Ссылка");
		 Запрос.УстановитьПараметр("Ссылка",ИП);
		 Выборка = Запрос.Выполнить().Выбрать();
		 Пока Выборка.Следующий() цикл
			 Если Выборка.НомерИД.НомерДела = НомерИД Тогда
				 ИД_ССылка = Выборка.НомерИД;
				 Продолжить;
			 Иначе
				 ИДОб = Выборка.НомерИД.ПолучитьОбъект();
				 ИДОб.НомерДела =НомерИД;
				 ИДОб.ДатаИД =ДатаИД;
				 ИДОб.ОрганВыдавшийИД =ОрганВыдавшийИД;
				 ИДОб.ВидИД = ВидИД;
				 ИДОб.Записать();
				 ИД_ССылка = ИДОб.Ссылка;
			 КонецЕсли;
			 
		 КонецЦикла;
	 КонецЕсли;
КонецПроцедуры 

Процедура ОбработкаУдаленияПроведения(Отказ)
	ЗапросКонтроль = Новый Запрос("ВЫБРАТЬ
	                              |	ФССП_СостояниеИП.ИП.Владелец КАК ИПВладелец,
	                              |	ФССП_СостояниеИП.Период КАК Период,
	                              |	ФССП_СостояниеИП.ИП КАК ИП,
	                              |	ФССП_СостояниеИП.НомерСД КАК НомерСД
	                              |ИЗ
	                              |	РегистрСведений.ФССП_СостояниеИП КАК ФССП_СостояниеИП
	                              |ГДЕ
	                              |	ФССП_СостояниеИП.ИП.Владелец = &Владелец
	                              |	И ФССП_СостояниеИП.Период > &Период");
	ЗапросКонтроль.УстановитьПараметр("Владелец", Должник);
	ЗапросКонтроль.УстановитьПараметр("Период", Дата);
	РезультатКонтроль = ЗапросКонтроль.Выполнить().Выбрать();
	Если РезультатКонтроль.Следующий() Тогда
		Сообщить("Сперва распроведите следующие документы по данному должнику!");
		Отказ = Истина;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработатьТабличнуюЧастьДокумента()
	
	// Прошлый вариант в общем случае не все удалял
	ЗаполненаяТаблицаИП = ЭтотОбъект.тчИсполнительныеПроизводства;
	ДлинаТаблиц = ЗаполненаяТаблицаИП.Количество();
	Итератор = ДлинаТаблиц - 1;
	Пока Итератор > 0 Цикл

		ТипСлова = Бит_ФССП_ИнтеграцияФССП.ПолучитьТипСлова(ЗаполненаяТаблицаИП[Итератор].department);
		Если ТипСлова = "Число" Тогда 
			ЭтотОбъект.тчИсполнительныеПроизводства.Удалить(Итератор);
		КонецЕсли; 

		Итератор = Итератор - 1;
	
	КонецЦикла;
	
	//Для каждого ТекСтрока из ЭтотОбъект.тчИсполнительныеПроизводства Цикл
	//	ТекИП = ТекСтрока.exe_production;
	//	Для Каждого Стрк ИЗ ЭтотОбъект.тчИсполнительныеПроизводства Цикл
	//		ТипСлова = Бит_ФССП_ИнтеграцияФССП.ПолучитьТипСлова(Стрк.department);
	//		Если Стрк.exe_production = ТекИП И ТипСлова = "Число" Тогда 
	//			ЭтотОбъект.тчИсполнительныеПроизводства.Удалить(Стрк);
	//		КонецЕсли;    
	//	КонецЦикла;        
	//КонецЦикла;

КонецПроцедуры

Функция ЭтоИПВзыскателя(СтрокаИннВзыскателя) 
	ИННВзыскателя = Константы.ИННВзыскателяФССП.Получить(); 
	Если Не ЗначениеЗаполнено(ИННВзыскателя) Тогда 
		Возврат Истина;
	КонецЕсли; 
	
	//Расскоммениторвать при 8.3.23
	
	//РегулярноеВыражение = "([0-9]{10})";
	//
	//РезультатПоиска = СтрНайтиПоРегулярномуВыражению(СтрокаИннВзыскателя, РегулярноеВыражение, НаправлениеПоиска.СКонца);
	//Если РезультатПоиска.НачальнаяПозиция = 0 Тогда 
	//	Возврат Истина;
	//КонецЕсли;   
	
	ЕстьИНН = Истина;
	СтрокаПроверки = Прав(СтрокаИннВзыскателя, 10);
	Попытка
		ИННЧисло = Число(СтрокаПроверки); 
		ЕстьИНН = Истина;
		
	Исключение	 
		ЕстьИНН = Ложь;
	КонецПопытки;
	
	Если ЕстьИНН = Ложь Тогда 
		Возврат Истина;
	КонецЕсли; 
	
	
	Если СтрНайти(СтрокаИннВзыскателя, ИННВзыскателя, НаправлениеПоиска.СКонца) > 0 Тогда 
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции  
	
Функция ЗагружатьТолькоИПВзыскателя()  
	
	Возврат Константы.ТолькоИПВзыскателяФССП.Получить() И ЗначениеЗаполнено(Константы.ИННВзыскателяФССП.Получить());

КонецФункции

//Если НайденныеИП.Количество() = 0
//	И (
//	Не ЗначениеЗаполнено(ИП.СтатусИП)
//	ИЛИ ИП.СтатусИП = Перечисления.ФССП_СтатусыИП.Действующее
//	ИЛИ ИП.СтатусИП = Перечисления.ФССП_СтатусыИП.ДругойВзыскатель)
//	
//	И ИП.Завершено = Ложь Тогда
Функция ИПЗакончилосьИсполнением(тзИП_Документ, Идентификатор, СтатусИП)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Идентификатор", Идентификатор);
	НайденныеИП = тзИП_Документ.НайтиСтроки(Отбор);
	Если НайденныеИП.Количество() <> 0 Тогда
	
		Возврат Ложь;
	
	КонецЕсли;
	
	Возврат Не ЗначениеЗаполнено(СтатусИП)
		Или СтатусИП = Перечисления.ФССП_СтатусыИП.Действующее
		Или СтатусИП = Перечисления.ФССП_СтатусыИП.ДругойВзыскатель;

КонецФункции // ()

Функция СостояниеПредмета(ДанныеПредмета)

	Если Не ЗначениеЗаполнено(ДанныеПредмета["Сумма"]) Тогда
	
		Возврат Новый Структура;
	
	КонецЕсли;
	
	ТипПредмета = "1";
	Если ДанныеПредмета["Предмет"] = Справочники.ФССП_ПредметыИП.НайтиПоНаименованию("Исполнительский сбор", Истина) Тогда
	
		ТипПредмета = "2";
	
	КонецЕсли;

	Ответ = Новый Структура;
	Ответ.Вставить("Предмет" + ТипПредмета, ДанныеПредмета["Предмет"]);
	Ответ.Вставить("Сумма" + ТипПредмета, ДанныеПредмета["Сумма"]);
	
	Возврат Ответ;

КонецФункции // ()

Функция ПредметИзПолученныхДанных(ЗаписьИП, ИсполнительноеПроизводство, ПорядковыйНомер)

	ИмяКолонкиПредмет = "Предмет" + Строка(ПорядковыйНомер); 
	ИмяКолонкиСумма = "Сумма" + Строка(ПорядковыйНомер); 
	
	Предмет = ЗаписьИП[ИмяКолонкиПредмет];
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда
	
		Возврат Новый Структура;
	
	КонецЕсли;

	Сумма = ЗаписьИП[ИмяКолонкиСумма];
	
	Возврат ЗаполнитьПредмет(ИсполнительноеПроизводство, Предмет, Сумма);

КонецФункции // ()

Функция ПредметИзОстатков(ПредметОстатки, ИсполнительноеПроизводство)

	Предмет = ПредметОстатки.Предмет;
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда
	
		Возврат Новый Структура;
	
	КонецЕсли;

	Сумма = ПредметОстатки.СуммаОстаток;
	
	Возврат ЗаполнитьПредмет(ИсполнительноеПроизводство, Предмет, Сумма);

КонецФункции // ()

Функция ЗаполнитьПредмет(ИсполнительноеПроизводство, Предмет, Сумма)

	Данные = Новый Структура("ИП, Предмет, Сумма");
	Данные.ИП = ИсполнительноеПроизводство;
	Данные.Предмет = Предмет;
	Данные.Сумма = Сумма;
	
	Возврат Данные;

КонецФункции // ()

Функция ПолучитьПредметыПоИП()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФССП_СостояниеИП.Предмет1 КАК Предмет,
		|	ФССП_СостояниеИП.ИП КАК ИП
		|ИЗ
		|	РегистрСведений.ФССП_СостояниеИП КАК ФССП_СостояниеИП
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ФССП_СостояниеИП.Предмет2,
		|	ФССП_СостояниеИП.ИП
		|ИЗ
		|	РегистрСведений.ФССП_СостояниеИП КАК ФССП_СостояниеИП
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ФССП_СостояниеИП.Предмет3,
		|	ФССП_СостояниеИП.ИП
		|ИЗ
		|	РегистрСведений.ФССП_СостояниеИП КАК ФССП_СостояниеИП";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ()

Функция Очистить()

	

КонецФункции // ()



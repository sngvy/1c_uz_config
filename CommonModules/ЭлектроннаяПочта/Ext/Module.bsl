////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ СОДЕРЖИТ РЕАЛИЗАЦИЮ МЕХАНИКИ РАБОТЫ С ЭЛЕКТРОННЫМИ СООБЩЕНИЯМИ
// (программные интерфейсы для внешнего использования)
//

// Функция для отправки сообщений. Проверяет корректность заполнения учетной
// записи и вызывает функцию реализующую механику отправки
//
// см. параметры функции ОтправитьСообщение
//
Функция ОтправитьПочтовоеСообщение(знач УчетнаяЗапись,
                                   знач ПараметрыПисьма) Экспорт
	
	Если ТипЗнч(УчетнаяЗапись) <> Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты")
	   ИЛИ НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ВызватьИсключение НСтр("ru = 'Учетная запись не заполнена или заполнена не правильно'");
	КонецЕсли;
	
	Если ПараметрыПисьма = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не заданы параметры отправки.'");
	КонецЕсли;
	
	Кому = "";
	Если ПараметрыПисьма.Свойство("Кому", Кому) Тогда
		Если ТипЗнч(Кому) = Тип("Строка") Тогда
			ПараметрыПисьма.Кому = УдалитьОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(Кому);
		КонецЕсли;
	Иначе
		ВызватьИсключение НСтр("ru = 'Не указан ни один получатель письма.'");
	КонецЕсли;
	
	Копии = "";
	Если ПараметрыПисьма.Свойство("Копии", Копии) Тогда
		Если ТипЗнч(Копии) = Тип("Строка") Тогда
			ПараметрыПисьма.Копии = УдалитьОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(Копии);
		КонецЕсли;
	КонецЕсли;
	
	СлепыеКопии = "";
	Если ПараметрыПисьма.Свойство("СлепыеКопии", СлепыеКопии) Тогда
		Если ТипЗнч(СлепыеКопии) = Тип("Строка") Тогда
			ПараметрыПисьма.СлепыеКопии = УдалитьОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(СлепыеКопии);
		КонецЕсли;
	КонецЕсли;
	
	АдресОтвета = Неопределено;
	
	// проверяем правильную заполненность АдресаОтвета
	Если ПараметрыПисьма.Свойство("АдресОтвета", АдресОтвета) Тогда
		ПараметрыПисьма.АдресОтвета = УдалитьОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(АдресОтвета);
	КонецЕсли;
	
	Вложения = Неопределено;
	
	Если ПараметрыПисьма.Свойство("Вложения", Вложения) Тогда
		Для Каждого Вложение Из Вложения Цикл
			Если ЭтоАдресВременногоХранилища(Вложение.Значение) Тогда
				Вложения.Вставить(Вложение.Ключ, ПолучитьИзВременногоХранилища(Вложение.Значение));
			КонецЕсли;
		КонецЦикла;
		ПараметрыПисьма.Вложения = Вложения;
	КонецЕсли;
	
	Возврат ОтправитьСообщение(УчетнаяЗапись, ПараметрыПисьма);
	
КонецФункции

// Функция для загрузки сообщений. Проверяет корректность заполнения учетной
// записи и вызывает функцию реализующую механику загрузки сообщений.
// 
// параметры к функции см. в функции ЗагрузитьСообщения
//
Функция ЗагрузитьПочтовыеСообщения(знач УчетнаяЗапись,
                                   знач ПараметрыЗагрузки = Неопределено) Экспорт
	
	Если НЕ УчетнаяЗапись.ИспользоватьДляПолучения Тогда
		ВызватьИсключение НСтр("ru = 'Учетная запись не предназначена для получения сообщений.'");
	КонецЕсли;
	
	Результат = ЗагрузитьСообщения(УчетнаяЗапись, ПараметрыЗагрузки);
	
	Возврат Результат;
	
КонецФункции

// Получает ссылку на учетную запись по виду назначения учетной записи
// Параметры:
// ВидНазначенияУчетнойЗаписи - Перечисления.ВидыНазначенияУчетныхЗаписей -
//                 вид назначения учетной записи
// Возвращаемое значение:
// УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - ссылка
//                 на описание учетной записи
//
Функция ПолучитьСистемнуюУчетнуюЗапись() Экспорт
	
	Возврат Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функция отправления - непосредственная реализация механики отправления
// электронного сообщения
//
// Функция ореализующая механику отправки сообщения электронной почты
//
// Параметры:
// УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - ссылка на
//                 учетную запись электронной почты
// ПараметрыПисьма - структура - содержит всю необходимую информацию о письме:
//                   содержит следующие ключи:
//    Кому*      - Массив структур, строка - интернет адрес получателя письма
//                 Адрес         - строка - почтовый адрес
//                 Представление - строка - имя адресата
//    Копии      - массив структур, строка - интернет адреса получателей письма
//                 используется при формировании письма для поля копий
//                 в случае массива структур, формат каждой структуры:
//                 Адрес         - строка - почтовый адрес (должно быть обязательно заполнено)
//                 Представление - строка - имя адресата
//    СлепыеКопии - массив структур, строка - интернет адреса получателей письма
//                 используется при формировании письма для поля скрытых копий
//                 в случае массива структур, формат каждой структуры:
//                 Адрес         - строка - почтовый адрес (должно быть обязательно заполнено)
//                 Представление - строка - имя адресата
//
//    Тема*      - строка - тема почтового сообщения
//    Тело*      - тело почтового сообщения (простой текст в кодировке win-1251)
//    Вложения   - соответствие
//                 ключ     - наименованиеВложения - строка - наименование вложения
//                 значение - ДвоичныеДанные - данные вложения
//
// дополнительные ключи структуры, которые могут использоваться:
//    АдресОтвета - соответствие - см. такие же поля как и кому
//    Пароль      - строка - пароль для доступа учетной записи
//    ТипТекста   - Строка / Перечисление.ТипыТекстовЭлектронныхПисем/ТипТекстаПочтовогоСообщения  определяет тип переданного теста
//                  допустимые значения:
//                  HTML/ТипыТекстовЭлектронныхПисем.HTML - текст почтового сообщения в формате HTML
//                  ПростойТекст/ТипыТекстовЭлектронныхПисем.ПростойТекст - простой текст почтового сообщения. Отображается "как есть" (значение по умолчанию)
//                  РазмеченныйТекст/ТипыТекстовЭлектронныхПисем.РазмеченныйТекст - текст почтового сообщения в формате Rich Text
//
//    прим.: параметры письма помеченные символом '*' являются обязательными
//           т.е. к началу работы функции считается что они уже заполнены
//
// Возвращаемое значение:
// Строка - идентификатор отправленного почтового сообщения на smtp сервере
//
// ПРИМЕЧАНИЕ: функция может вызвать исключение, которое требуется обработать
//
Функция ОтправитьСообщение(знач УчетнаяЗапись,
                           знач ПараметрыПисьма) Экспорт
	
	// Объявление переменных перед первым использованием в качестве
	// параметра метода Свойство структуры ПараметрыПисьма.
	// Переменные содержат значения переданных в функцию параметров.
	Перем Кому, Тема, Тело, Вложения, АдресОтвета, ТипТекста, Копии, СлепыеКопии;
	
	Если Не ПараметрыПисьма.Свойство("Тема", Тема) Тогда
		Тема = "";
	КонецЕсли;
	
	Если Не ПараметрыПисьма.Свойство("Тело", Тело) Тогда
		Тело = "";
	КонецЕсли;
	
	Кому = ПараметрыПисьма.Кому;
	
	Если ТипЗнч(Кому) = Тип("Строка") Тогда
		Кому = УдалитьОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(Кому);
	КонецЕсли;
	
	ПараметрыПисьма.Свойство("Вложения", Вложения);
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = Тема;
	
	// формируем адрес получателя	
	Для Каждого ПочтовыйАдресПолучателя Из Кому Цикл
		Получатель = Письмо.Получатели.Добавить(ПочтовыйАдресПолучателя.Адрес);
		Получатель.ОтображаемоеИмя = ПочтовыйАдресПолучателя.Представление;
	КонецЦикла;
	
	Если ПараметрыПисьма.Свойство("Копии", Копии) Тогда
		// формируем адрес получателя поля Копии
		Для Каждого ПочтовыйАдресПолучателяКопии Из Копии Цикл
			Получатель = Письмо.Копии.Добавить(ПочтовыйАдресПолучателяКопии.Адрес);
			Получатель.ОтображаемоеИмя = ПочтовыйАдресПолучателяКопии.Представление;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("СлепыеКопии", СлепыеКопии) Тогда
		// формируем адрес получателя поля Копии
		Для Каждого ПочтовыйАдресПолучателяСлепыеКопии Из СлепыеКопии Цикл
			Получатель = Письмо.СлепыеКопии.Добавить(ПочтовыйАдресПолучателяСлепыеКопии.Адрес);
			Получатель.ОтображаемоеИмя = ПочтовыйАдресПолучателяСлепыеКопии.Представление;
		КонецЦикла;
	КонецЕсли;
	
	// формируем адрес ответа, если необходимо
	Если ПараметрыПисьма.Свойство("АдресОтвета", АдресОтвета) Тогда
		Для Каждого ПочтовыйАдресОтвета Из АдресОтвета Цикл
			ПочтовыйАдресОбратный = Письмо.ОбратныйАдрес.Добавить(ПочтовыйАдресОтвета.Адрес);
			ПочтовыйАдресОбратный.ОтображаемоеИмя = ПочтовыйАдресОтвета.Представление;
		КонецЦикла;
	КонецЕсли;
	
	// добавляем к письму имя отправителя
	Письмо.ИмяОтправителя              = УчетнаяЗапись.ИмяПользователя;
	Письмо.Отправитель.ОтображаемоеИмя = УчетнаяЗапись.ИмяПользователя;
	Письмо.Отправитель.Адрес           = УчетнаяЗапись.АдресЭлектроннойПочты;
	
	// добавляем вложения к письму
	Если Вложения <> Неопределено Тогда
		Для Каждого ЭлементВложение Из Вложения Цикл
			Письмо.Вложения.Добавить(ЭлементВложение.Значение, ЭлементВложение.Ключ);
		КонецЦикла;
	КонецЕсли;

	// Установим строку с идентификаторами оснований
	Если ПараметрыПисьма.Свойство("ИдентификаторыОснований") Тогда
		Письмо.УстановитьПолеЗаголовка("References", ПараметрыПисьма.ИдентификаторыОснований);
	КонецЕсли;
	
	// добавляем текст
	Текст = Письмо.Тексты.Добавить(Тело);
	Если ПараметрыПисьма.Свойство("ТипТекста", ТипТекста) Тогда
		Если ТипЗнч(ТипТекста) = Тип("Строка") Тогда
			Если      ТипТекста = "HTML" Тогда
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
			ИначеЕсли ТипТекста = "RichText" Тогда
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.РазмеченныйТекст;
			Иначе
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТипТекста) = Тип("ПеречислениеСсылка.ТипыТекстовЭлектронныхПисем") Тогда
			Если      ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML
				  ИЛИ ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
			ИначеЕсли ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.РазмеченныйТекст Тогда
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.РазмеченныйТекст;
			Иначе
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
			КонецЕсли;
		Иначе
			Текст.ТипТекста = ТипТекста;
		КонецЕсли;
	Иначе
		Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	КонецЕсли;

	// Зададим важность
	Важность = Неопределено;
	Если ПараметрыПисьма.Свойство("Важность", Важность) Тогда
		Письмо.Важность = Важность;
	КонецЕсли;
	
	// Зададим кодировку
	Кодировка = Неопределено;
	Если ПараметрыПисьма.Свойство("Кодировка", Кодировка) Тогда
		Письмо.Кодировка = Кодировка;
	КонецЕсли;

	Если ПараметрыПисьма.Свойство("Пароль") Тогда
		Профиль = СформироватьИнтернетПрофиль(УчетнаяЗапись, ПараметрыПисьма.Пароль);
	Иначе
		Профиль = СформироватьИнтернетПрофиль(УчетнаяЗапись);
	КонецЕсли;
	
	Соединение = Новый ИнтернетПочта;
	
	Соединение.Подключиться(Профиль);
	
	Соединение.Послать(Письмо);
	
	Соединение.Отключиться();
	
	Возврат Письмо.ИдентификаторСообщения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функция просмотра почты - непосредственная реализация механики отправления
// электронного сообщения
//
// Функция ореализующая механику загрузки сообщений с сервера электронной почты
// для указанной учетной записи электронной почты
// 
// Параметры:
// УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - ссылка на
//                 учетную запись электронной почты
//
// ПараметрыЗагрузки - структура
// ключ "Колонки" - массив - массив строк названий колонок
//                  названия колонок должны соответствовать полям объекта
//                  ИнтернетПочтовоеСообщение 
// ключ "РежимТестирования" - булево - если Истина то вызов сделан в�режим тестирования
//                            учетной записи - при этом выборка писем происходит,
//                            но в возвращаемом значении они не попадают; по умолчанию
//                            режим тестирования отключен
// ключ "ПолучениеЗаголовков" - булево - если Истина то в возвращаемом наборе есть только
//										заголовки писем
// ЗаголовкиИдентификаторы - массив - заголовки или идентификаторы сообщений, полные
//							сообщения по которым требуется получить
//
// ключ "Пароль" - строка - пароль для доступа к POP3
//
// Возвращаемое значение:
// НаборСообщений*- таблиица значений, содержит адаптированный вариант списка сообщений на сервере
//                 Колонки таблииы значений (по умолчанию):
//                 Важность, Вложения, ДатаОтправления, ДатаПолучения, Заголовок, ИмяОтправителя,
//                 Идентификатор, Копии, Обратный адрес, Отправитель, Получатели, Размер, Тексты,
//                 Кодировка, СпособКодированияНеASCIIСимволов, Частичное
//                 заполняется если статус Истина
//
// Прим. * - в�режиме тестирования не участвует в формировании возвращаемого значения
//
Функция ЗагрузитьСообщения(знач УчетнаяЗапись,
                           знач ПараметрыЗагрузки = Неопределено)
	
	// Используется для проверки возможности входа на почтовый ящик
	Перем РежимТестирования;
	
	// Получать только заголовки писем
	Перем ПолучениеЗаголовков;
	
	// Заголовки или идентификаторы писем, полные сообщения по которым требуется получить
	Перем ЗаголовкиИдентификаторы;
	
	Если ПараметрыЗагрузки.Свойство("РежимТестирования") Тогда
		РежимТестирования = ПараметрыЗагрузки.РежимТестирования;
	Иначе
		РежимТестирования = Ложь;
	КонецЕсли;
	
	Если ПараметрыЗагрузки.Свойство("ПолучениеЗаголовков") Тогда
		ПолучениеЗаголовков = ПараметрыЗагрузки.ПолучениеЗаголовков;
	Иначе
		ПолучениеЗаголовков = Ложь;
	КонецЕсли;
	
	Если ПараметрыЗагрузки.Свойство("Пароль") Тогда
		Профиль = СформироватьИнтернетПрофиль(УчетнаяЗапись, ПараметрыЗагрузки.Пароль);
	Иначе
		Профиль = СформироватьИнтернетПрофиль(УчетнаяЗапись);
	КонецЕсли;
	
	Если ПараметрыЗагрузки.Свойство("ЗаголовкиИдентификаторы") Тогда
		ЗаголовкиИдентификаторы = ПараметрыЗагрузки.ЗаголовкиИдентификаторы;
	Иначе
		ЗаголовкиИдентификаторы = Новый Массив;
	КонецЕсли;
	
	Соединение = Новый ИнтернетПочта;
	
	Соединение.Подключиться(Профиль);
	
	Если РежимТестирования ИЛИ ПолучениеЗаголовков Тогда
		
		НаборПисем = Соединение.ПолучитьЗаголовки();
		
	Иначе
		
		Если УчетнаяЗапись.ОставлятьКопииСообщенийНаСервере Тогда
			
			Если УчетнаяЗапись.ПериодХраненияСообщенийНаСервере > 0 Тогда
				
				Заголовки = Соединение.ПолучитьЗаголовки();
				
				НаборСообщенийДляУдаления = Новый Массив;
				
				Для Каждого ЭлементЗаголовок Из Заголовки Цикл
					ТекущаяДата = ТекущаяДата();
					РазниицаДат = (ТекущаяДата - ЭлементЗаголовок.ДатаОтправления) / (3600*24);
					Если РазниицаДат >= УчетнаяЗапись.ПериодХраненияСообщенийНаСервере Тогда
						НаборСообщенийДляУдаления.Добавить(ЭлементЗаголовок);
					КонецЕсли;
				КонецЦикла;
				
				Соединение.УдалитьСообщения(НаборСообщенийДляУдаления);
			КонецЕсли;
			
			УдалятьСообщенияПриВыбореССервера = Ложь;
			
		Иначе
			
			УдалятьСообщенияПриВыбореССервера = Истина;
			
		КонецЕсли;
		
		НаборПисем = Соединение.Выбрать(УдалятьСообщенияПриВыбореССервера, ЗаголовкиИдентификаторы);
		
	КонецЕсли;
	
	Соединение.Отключиться();
	
	Если РежимТестирования Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПараметрыЗагрузки.Свойство("Колонки") Тогда
		НаборСообщений = ПолучитьАдаптированныйНаборПисем(НаборПисем, ПараметрыЗагрузки.Колонки);
	Иначе
		НаборСообщений = ПолучитьАдаптированныйНаборПисем(НаборПисем);
	КонецЕсли;
	
	Возврат НаборСообщений;
	
КонецФункции

// Устанавливает соединение с сервером электронной почты
// Параметры:
// Профиль       - ИнтернетПочтовыйПрофиль - профиль учетной записи электронной
//                 почты, через который необходимо установить соединение
//
// Возвращаемое значение:
// Соединение (тип ИнтернетПочта)
//
Функция УстановитьСоединениеССерверомЭлектроннойПочты(Профиль) Экспорт
	
	Соединение = Новый ИнтернетПочта;
	Соединение.Подключиться(Профиль);
	
	Возврат Соединение;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Блок системных и вспомогательных функций подсистемы
//

// По переданной ссылке на учетную запись формирует профиль почтового соединения
//
// Параметры
// УчетнаяЗапись - СправочникСсылка.УчетнаяЗаписьЭлектроннойПочты - 
//                 параметры профиля в виде соответствия
//
// Возвращаемое значение
// Почтовый профиль (тип ИнтернетПочтовыйПрофиль)
//
Функция СформироватьИнтернетПрофиль(Знач УчетнаяЗапись,
                                    Знач Пароль = Неопределено,
                                    Знач ФормироватьSMTPПрофиль = Истина,
                                    Знач ФормироватьPOP3Профиль = Истина) Экспорт
									
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УчетныеЗаписиЭлектроннойПочты.POP3Сервер КАК АдресСервераIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.ПортPOP3 КАК ПортIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляВходящейПочты КАК ИспользоватьSSLIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.Пользователь КАК ПользовательIMAP,
	|	ЛОЖЬ КАК ТолькоЗащищеннаяАутентификацияIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.POP3Сервер КАК АдресСервераPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.ПортPOP3 КАК ПортPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляВходящейПочты КАК ИспользоватьSSLPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.Пользователь КАК Пользователь,
	|	ЛОЖЬ КАК ТолькоЗащищеннаяАутентификацияPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.SMTPСервер КАК АдресСервераSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ПортSMTP КАК ПортSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляИсходящейПочты КАК ИспользоватьSSLSMTP,
	|	ЛОЖЬ КАК POP3ПередSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.Пользователь КАК ПользовательSMTP,
	|	ЛОЖЬ КАК ТолькоЗащищеннаяАутентификацияSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ВремяОжидания КАК Таймаут,
	|	УчетныеЗаписиЭлектроннойПочты.ПротоколВходящейПочты КАК Протокол
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка = &Ссылка";
									
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", УчетнаяЗапись);
	Выборка = Запрос.Выполнить().Выбрать();									
	
	Результат = Неопределено;
	Если Выборка.Следующий() Тогда
		СписокСвойствIMAP = "АдресСервераIMAP,ПортIMAP,ИспользоватьSSLIMAP,ПользовательIMAP,ТолькоЗащищеннаяАутентификацияIMAP";
		СписокСвойствPOP3 = "АдресСервераPOP3,ПортPOP3,ИспользоватьSSLPOP3,Пользователь,ТолькоЗащищеннаяАутентификацияPOP3";
		СписокСвойствSMTP = "АдресСервераSMTP,ПортSMTP,ИспользоватьSSLSMTP,ПользовательSMTP,ТолькоЗащищеннаяАутентификацияSMTP";
		
		//УстановитьПривилегированныйРежим(Истина);
		//Пароли = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УчетнаяЗапись, "Пароль,ПарольSMTP");
		//УстановитьПривилегированныйРежим(Ложь);
		
		Результат = Новый ИнтернетПочтовыйПрофиль;
		Если УчетнаяЗапись.ИспользоватьДляПолучения Тогда
			Если Выборка.Протокол = "IMAP" Тогда
				ТребуемыеСвойства = СписокСвойствIMAP;
				Результат.ПарольIMAP = УчетнаяЗапись.Пароль;
			Иначе
				ТребуемыеСвойства = СписокСвойствPOP3;
				Результат.Пароль = УчетнаяЗапись.Пароль;
			КонецЕсли;
		Иначе
			ТребуемыеСвойства = СписокСвойствSMTP;
			Результат.ПарольSMTP = УчетнаяЗапись.Пароль;
			Если Выборка.Протокол <> "IMAP" Тогда //И Выборка.POP3ПередSMTP Тогда
				ТребуемыеСвойства = ТребуемыеСвойства + ",POP3ПередSMTP," + СписокСвойствPOP3;
				Результат.Пароль = УчетнаяЗапись.Пароль;
			КонецЕсли;
			Если Выборка.Протокол = "IMAP" Тогда
				ТребуемыеСвойства = ТребуемыеСвойства + "," + СписокСвойствIMAP;
				Результат.ПарольIMAP =УчетнаяЗапись.Пароль;
			КонецЕсли;
		КонецЕсли;
		ТребуемыеСвойства = ТребуемыеСвойства + ",Таймаут";
		ЗаполнитьЗначенияСвойств(Результат, Выборка, ТребуемыеСвойства);
	КонецЕсли;
	//Результат.Пароль = УчетнаяЗапись.Пароль;	
	Возврат Результат;

									
	//Профиль = Новый ИнтернетПочтовыйПрофиль;	
	//Профиль.Пользователь = УчетнаяЗапись.Пользователь;	
	//Профиль.ВремяОжидания = УчетнаяЗапись.ВремяОжидания;
	//
	//Если ЗначениеЗаполнено(Пароль) Тогда
	//	Профиль.Пароль = Пароль;
	//Иначе
	//	Профиль.Пароль = УчетнаяЗапись.Пароль;
	//КонецЕсли;
	//
	//Если ФормироватьSMTPПрофиль Тогда
	//	Профиль.АдресСервераSMTP = УчетнаяЗапись.SMTPСервер;
	//	Профиль.ПортSMTP         = УчетнаяЗапись.ПортSMTP;
	//	
	//	Если      УчетнаяЗапись.SMTPАутентификация = Перечисления.ВариантыSMTPАутентификации.АналогичноPOP3 Тогда
	//		Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
	//		Профиль.ПользовательSMTP   = УчетнаяЗапись.Пользователь;
	//		Профиль.ПарольSMTP         = УчетнаяЗапись.Пароль;
	//	ИначеЕсли УчетнаяЗапись.SMTPАутентификация = Перечисления.ВариантыSMTPАутентификации.ЗадаетсяПараметрами Тогда
	//		
	//		Если      УчетнаяЗапись.СпособSMTPАутентификации = Перечисления.СпособыSMTPАутентификации.CramMD5 Тогда
	//			Профиль.АутентификацияSMTP = СпособSMTPАутентификации.CramMD5;
	//		ИначеЕсли УчетнаяЗапись.СпособSMTPАутентификации = Перечисления.СпособыSMTPАутентификации.Login Тогда
	//			Профиль.АутентификацияSMTP = СпособSMTPАутентификации.Login;
	//		ИначеЕсли УчетнаяЗапись.СпособSMTPАутентификации = Перечисления.СпособыSMTPАутентификации.Plain Тогда
	//			Профиль.АутентификацияSMTP = СпособSMTPАутентификации.Plain;
	//		ИначеЕсли УчетнаяЗапись.СпособSMTPАутентификации = Перечисления.СпособыSMTPАутентификации.БезАутентификации Тогда
	//			Профиль.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
	//		Иначе
	//			Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
	//		КонецЕсли;
	//		
	//		Профиль.ПользовательSMTP = УчетнаяЗапись.ПользовательSMTP;
	//		Профиль.ПарольSMTP       = УчетнаяЗапись.ПарольSMTP;
	//		
	//	ИначеЕсли УчетнаяЗапись.SMTPАутентификация = Перечисления.ВариантыSMTPАутентификации.POP3ПередSMTP Тогда
	//		Профиль.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
	//		Профиль.POP3ПередSMTP = Истина;
	//	Иначе
	//		Профиль.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если ФормироватьPOP3Профиль Тогда
	//	Профиль.АдресСервераPOP3 = УчетнаяЗапись.POP3Сервер;
	//	Профиль.ПортPOP3         = УчетнаяЗапись.ПортPOP3;
	//	
	//	Если      УчетнаяЗапись.СпособPOP3Аутентификации = Перечисления.СпособыPOP3Аутентификации.APOP Тогда
	//		Профиль.АутентификацияPOP3 = СпособPOP3Аутентификации.APOP;
	//	ИначеЕсли УчетнаяЗапись.СпособPOP3Аутентификации = Перечисления.СпособыPOP3Аутентификации.CramMD5 Тогда
	//		Профиль.АутентификацияPOP3 = СпособPOP3Аутентификации.CramMD5;
	//	Иначе
	//		Профиль.АутентификацияPOP3 = СпособPOP3Аутентификации.Обычная;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Возврат Профиль;
КонецФункции

// Функция записывает адаптированный набор писем по переданным колонкам.
// Значения колонок, типы которых не поддерживаются для оперирования на клиенте
// преобразуются к строковому виду.
//
Функция ПолучитьАдаптированныйНаборПисем(знач НаборПисем, знач Колонки = Неопределено)
	
	Результат = СоздатьАдаптированноеОписаниеПисьма(Колонки);
	
	Для Каждого ПочтовоеСообщение Из НаборПисем Цикл
		НоваяСтрока = Результат.Добавить();
		
		Для Каждого НаименованиеКолонки Из Колонки Цикл
			
			Значение = ПочтовоеСообщение[НаименованиеКолонки];
			
			Если ТипЗнч(Значение) = Тип("ИнтернетПочтовыеАдреса") Тогда
				значение_итог = "";
				Для Каждого ОчереднойАдрес  Из Значение Цикл
					значение_вр =  ОчереднойАдрес.Адрес;
					Если ЗначениеЗаполнено(ОчереднойАдрес.ОтображаемоеИмя) Тогда
						значение_вр = ОчереднойАдрес.ОтображаемоеИмя + " <" + значение_вр + ">";
					КонецЕсли;
					Если ЗначениеЗаполнено(значение_вр) Тогда
						значение_вр = значение_вр + "; "
					КонецЕсли;
					значение_итог = значение_итог + значение_вр;
				КонецЦикла;
				
				Если ЗначениеЗаполнено(значение_итог) Тогда
					значение_итог = сред(значение_итог, 1, СтрДлина(значение_итог)-2)
				КонецЕсли;
				
				значение = значение_итог;
			КонецЕсли;
			
			Если ТипЗнч(Значение) = Тип("ИнтернетПочтовыйАдрес") Тогда
				значение_вр =  Значение.Адрес;
				Если ЗначениеЗаполнено(Значение.ОтображаемоеИмя) Тогда
					значение_вр = Значение.ОтображаемоеИмя + " <" + значение_вр + ">";
				КонецЕсли;
				значение = значение_вр;
			КонецЕсли;
			
			Если ТипЗнч(Значение) = Тип("ВажностьИнтернетПочтовогоСообщения") Тогда
				значение = Строка(Значение);
			КонецЕсли;
			
			Если ТипЗнч(Значение) = Тип("СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения") Тогда
				значение = Строка(Значение);
			КонецЕсли;
			
			Если ТипЗнч(Значение) = Тип("ИнтернетПочтовыеВложения") Тогда
				значение_соотв = Новый Соответствие;
			
				Для Каждого ОчередноеВложение Из Значение Цикл
					ИмяВложения    = ОчередноеВложение.Имя;
					ДвоичныеДанные = ОчередноеВложение.Данные;
					значение_соотв.Вставить(ИмяВложения, ДвоичныеДанные);
				КонецЦикла;
				
				значение = значение_соотв;
			КонецЕсли;
			
			Если ТипЗнч(Значение) = Тип("ИнтернетТекстыПочтовогоСообщения") Тогда
				значение_масс = Новый Массив;
				Для Каждого ОчереднойТекст Из Значение Цикл
					значение_соотв = Новый Соответствие;
					
					значение_соотв.Вставить("MIMEТип", ОчереднойТекст.MIMEТип);
					значение_соотв.Вставить("Данные", ОчереднойТекст.Данные);
					значение_соотв.Вставить("Кодировка", ОчереднойТекст.Кодировка);
					значение_соотв.Вставить("Текст", ОчереднойТекст.Текст);
					значение_соотв.Вставить("ТипТекста", Строка(ОчереднойТекст.ТипТекста));
					
					значение_масс.Добавить(значение_соотв);
				КонецЦикла;
				значение = значение_масс;
			КонецЕсли;
			
			НоваяСтрока[НаименованиеКолонки] = Значение;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция подготавливает таблииу, в которой впоследствии будут
// храниться сообщения с почтового сервера.
// 
// Параметры
// Колонки - строка - список полей письма, через запятую, которые должны
//                    быть записаны в таблииу. Параметр меняет тип на массив.
// Возвращаемое значение
// ТаблиицаЗначений - пустая таблиица значений с колонками
//
Функция СоздатьАдаптированноеОписаниеПисьма(Колонки = Неопределено)
	
	Если Колонки <> Неопределено
	   И ТипЗнч(Колонки) = Тип("Строка") Тогда
		Колонки = УдалитьСтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Колонки, ",");
		Для Индекс = 0 По Колонки.Количество()-1 Цикл
			Колонки[Индекс] = СокрЛП(Колонки[Индекс]);
		КонецЦикла;
	КонецЕсли;
	
	МассивКолонокПоУмолчанию = Новый Массив;
	МассивКолонокПоУмолчанию.Добавить("Важность");
	МассивКолонокПоУмолчанию.Добавить("Вложения");
	МассивКолонокПоУмолчанию.Добавить("ДатаОтправления");
	МассивКолонокПоУмолчанию.Добавить("ДатаПолучения");
	МассивКолонокПоУмолчанию.Добавить("Заголовок");
	МассивКолонокПоУмолчанию.Добавить("ИмяОтправителя");
	МассивКолонокПоУмолчанию.Добавить("Идентификатор");
	МассивКолонокПоУмолчанию.Добавить("Копии");
	МассивКолонокПоУмолчанию.Добавить("ОбратныйАдрес");
	МассивКолонокПоУмолчанию.Добавить("Отправитель");
	МассивКолонокПоУмолчанию.Добавить("Получатели");
	МассивКолонокПоУмолчанию.Добавить("Размер");
	МассивКолонокПоУмолчанию.Добавить("Тема");
	МассивКолонокПоУмолчанию.Добавить("Тексты");
	МассивКолонокПоУмолчанию.Добавить("Кодировка");
	МассивКолонокПоУмолчанию.Добавить("СпособКодированияНеASCIIСимволов");
	МассивКолонокПоУмолчанию.Добавить("Частичное");
	
	Если Колонки = Неопределено Тогда
		Колонки = МассивКолонокПоУмолчанию;
	КонецЕсли;
	
	Результат = Новый ТаблицаЗначений;
	
	Для Каждого НаименованиеКолонки Из Колонки Цикл
		Результат.Колонки.Добавить(НаименованиеКолонки);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получить доступные учетные записи электронной почты
// Параметры:
// ДляОтправки - Булево - Если установлено Истина, то будут выбирать только записи, с которых можно отправлять почту
// ДляПриема   - Булево - Если установлено Истина, то будут выбирать только записи, по которым можно получать почту
// Возвращаемое значение:
// ДоступныеУчетныеЗаписи - ТаблиицаЗначений - С колонками:
//    Ссылка       - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - Ссылка на учетную запись
//    Наименование - Строка - Наименование учетной записи
//    Адрес        - Строка - Адрес электронной почты
//
Функция ПолучитьДоступныеУчетныеЗаписи(ДляОтправки, ДляПриема) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка,
	|	УчетныеЗаписиЭлектроннойПочты.Наименование,
	|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты КАК Адрес
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты";
	
	Если ДляОтправки ИЛИ ДляПриема Тогда
		СтрУсловия = ?(ДляОтправки, "УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляОтправки", "");
		СтрУсловия = СтрУсловия + ?(ДляОтправки И ДляПриема, " И ", "");
		СтрУсловия = СтрУсловия + ?(ДляПриема, "УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляПолучения", "");
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ " + СтрУсловия;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Блок функций первоначального заполнения и обновления ИБ
//

// Выполняет заполнение системной учетной записи значениями по умолчанию
//
Процедура ЗаполнитьСистемнуюУчетнуюЗапись() Экспорт
	
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты.ПолучитьОбъект();
	УчетнаяЗапись.ЗаполнитьОбъектЗначениямиПоУмолчанию();
	УчетнаяЗапись.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//
// Блок функций для проверки учетной записи
//

&НаСервере
Функция ПарольЗадан(УчетнаяЗапись) Экспорт
	
	Возврат ЗначениеЗаполнено(УчетнаяЗапись.Пароль);
	
КонецФункции

&НаСервере
Процедура ПроверитьВозможностьОтправкиИПолученияЭлектроннойПочты(УчетнаяЗапись, СообщениеОбОшибке, ДополнительноеСообщение) Экспорт
	
	НастройкиУчетнойЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗапись, "ИспользоватьДляОтправки,ИспользоватьДляПолучения,ПротоколВходящейПочты");
	
	СообщениеОбОшибке = "";
	ДополнительноеСообщение = "";
	
	Если НастройкиУчетнойЗаписи.ИспользоватьДляОтправки Тогда
		ТекстОшибки = ПроверитьВозможностьПодключенияКПочтовомуСерверу(УчетнаяЗапись, Ложь);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось подключиться к серверу SMTP: %1'") + Символы.ПС, ТекстОшибки);
		КонецЕсли;
		Если Не НастройкиУчетнойЗаписи.ИспользоватьДляПолучения Тогда
			ДополнительноеСообщение = Символы.ПС + НСтр("ru = '(Выполнена проверка отправки электронных сообщений.)'");
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиУчетнойЗаписи.ИспользоватьДляПолучения 
		Или НастройкиУчетнойЗаписи.ИспользоватьДляОтправки И НастройкиУчетнойЗаписи.ПротоколВходящейПочты = "IMAP" Тогда
		
		ТекстОшибки = ПроверитьВозможностьПодключенияКПочтовомуСерверу(УчетнаяЗапись, Истина);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
				СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС;
			КонецЕсли;
			
			СообщениеОбОшибке = СообщениеОбОшибке + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось подключиться к серверу %1:
				|%2'"), НастройкиУчетнойЗаписи.ПротоколВходящейПочты, ТекстОшибки);
		КонецЕсли;
		
		Если Не НастройкиУчетнойЗаписи.ИспользоватьДляОтправки Тогда
			ДополнительноеСообщение = Символы.ПС + НСтр("ru = '(Выполнена проверка получения электронных сообщений.)'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьВозможностьПодключенияКПочтовомуСерверу(Знач УчетнаяЗапись, Знач ВходящаяПочта) Экспорт
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	Профиль = ИнтернетПочтовыйПрофиль(УчетнаяЗапись, ВходящаяПочта);
	
	Если ВходящаяПочта Тогда
		Протокол = ПротоколИнтернетПочты.POP3;
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ПротоколВходящейПочты") = "IMAP" Тогда
			Протокол = ПротоколИнтернетПочты.IMAP;
		КонецЕсли;
		ТекстОшибки = ПроверитьПодключениеКСерверуВходящейПочты(Профиль, Протокол);
	Иначе
		Адрес = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "АдресЭлектроннойПочты");
		ТекстОшибки = ПроверитьПодключениеКСерверуИсходящейПочты(Профиль, Адрес);
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ПроверитьПодключениеКСерверуВходящейПочты(Профиль, Протокол) Экспорт
	
	ИнтернетПочта = Новый ИнтернетПочта;
	
	ТекстОшибки = "";
	Попытка
		ИнтернетПочта.Подключиться(Профиль, Протокол);
	Исключение
		ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	ИнтернетПочта.Отключиться();
	
	Если Протокол = ПротоколИнтернетПочты.POP3 Тогда
		ТекстДляЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1:%2%3 (%4)" + Символы.ПС + "%5",
			Профиль.АдресСервераPOP3,
			Профиль.ПортPOP3,
			?(Профиль.ИспользоватьSSLPOP3, "/SSL", ""),
			Профиль.Пользователь,
			?(ПустаяСтрока(ТекстОшибки), НСтр("ru = 'OK'"), ТекстОшибки));
	Иначе
		ТекстДляЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1:%2%3 (%4)" + Символы.ПС + "%5",
			Профиль.АдресСервераIMAP,
			Профиль.ПортIMAP,
			?(Профиль.ИспользоватьSSLIMAP, "/SSL", ""),
			Профиль.ПользовательIMAP,
			?(ПустаяСтрока(ТекстОшибки), НСтр("ru = 'OK'"), ТекстОшибки));
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Проверка подключения к почтовому серверу'"), 
		УровеньЖурналаРегистрации.Информация, , , ТекстДляЖурнала);
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ПроверитьПодключениеКСерверуИсходящейПочты(Профиль, АдресЭлектроннойПочты) Экспорт
	
	Тема = НСтр("ru = 'Тестовое сообщение 1С:Предприятие'");
	Тело = НСтр("ru = 'Это сообщение отправлено подсистемой электронной почты 1С:Предприятие'");
	ИмяОтправителяПисем = НСтр("ru = '1С:Предприятие'");
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = Тема;
	
	Получатель = Письмо.Получатели.Добавить(АдресЭлектроннойПочты);
	Получатель.ОтображаемоеИмя = ИмяОтправителяПисем;
	
	Письмо.ИмяОтправителя = ИмяОтправителяПисем;
	Письмо.Отправитель.ОтображаемоеИмя = ИмяОтправителяПисем;
	Письмо.Отправитель.Адрес = АдресЭлектроннойПочты;
	
	Текст = Письмо.Тексты.Добавить(Тело);
	Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;

	ИнтернетПочта = Новый ИнтернетПочта;
	
	ТекстОшибки = "";
	Попытка
		ИнтернетПочта.Подключиться(Профиль);
		ИнтернетПочта.Послать(Письмо);
	Исключение
		ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	ИнтернетПочта.Отключиться();
	
	ТекстДляЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1:%2%3 (%4)" + Символы.ПС + "%5",
		Профиль.АдресСервераSMTP,
		Профиль.ПортSMTP,
		?(Профиль.ИспользоватьSSLSMTP, "/SSL", ""),
		Профиль.ПользовательSMTP,
		?(ПустаяСтрока(ТекстОшибки), НСтр("ru = 'OK'"), ТекстОшибки));
		
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Проверка подключения к почтовому серверу'"), 
		УровеньЖурналаРегистрации.Информация, , , ТекстДляЖурнала);
	
	Возврат ТекстОшибки;
	
КонецФункции


Функция ИнтернетПочтовыйПрофиль(УчетнаяЗапись, ДляПолучения = Ложь) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УчетныеЗаписиЭлектроннойПочты.POP3Сервер КАК АдресСервераIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.ПортPOP3 КАК ПортIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляВходящейПочты КАК ИспользоватьSSLIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.Пользователь КАК ПользовательIMAP,
	|	ЛОЖЬ КАК ТолькоЗащищеннаяАутентификацияIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.POP3Сервер КАК АдресСервераPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.ПортPOP3 КАК ПортPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляВходящейПочты КАК ИспользоватьSSLPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.Пользователь КАК Пользователь,
	|	ЛОЖЬ КАК ТолькоЗащищеннаяАутентификацияPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.SMTPСервер КАК АдресСервераSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ПортSMTP КАК ПортSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляИсходящейПочты КАК ИспользоватьSSLSMTP,
	|	ЛОЖЬ КАК POP3ПередSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.Пользователь КАК ПользовательSMTP,
	|	ЛОЖЬ КАК ТолькоЗащищеннаяАутентификацияSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ВремяОжидания КАК Таймаут,
	|	УчетныеЗаписиЭлектроннойПочты.ПротоколВходящейПочты КАК Протокол
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", УчетнаяЗапись);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Неопределено;
	Если Выборка.Следующий() Тогда
		СписокСвойствIMAP = "АдресСервераIMAP,ПортIMAP,ИспользоватьSSLIMAP,ПользовательIMAP";
		СписокСвойствPOP3 = "АдресСервераPOP3,ПортPOP3,ИспользоватьSSLPOP3,Пользователь";
		СписокСвойствSMTP = "АдресСервераSMTP,ПортSMTP,ИспользоватьSSLSMTP,ПользовательSMTP";
		//Пароли = УчетнаяЗапись;
		УстановитьПривилегированныйРежим(Истина);
		Пароли = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УчетнаяЗапись, "Пароль,ПарольSMTP");
		УстановитьПривилегированныйРежим(Ложь);
		
		Результат = Новый ИнтернетПочтовыйПрофиль;
		Если ДляПолучения Тогда
			Если Выборка.Протокол = "IMAP" Тогда
				ТребуемыеСвойства = СписокСвойствIMAP;
				Результат.ПарольIMAP = Пароли.Пароль;
			Иначе
				ТребуемыеСвойства = СписокСвойствPOP3;
				Результат.Пароль = Пароли.Пароль;
			КонецЕсли;
		Иначе
			ТребуемыеСвойства = СписокСвойствSMTP;
			Результат.ПарольSMTP = Пароли.ПарольSMTP;
			Если Выборка.Протокол <> "IMAP" Тогда //И Выборка.POP3ПередSMTP Тогда
				ТребуемыеСвойства = ТребуемыеСвойства + ",POP3ПередSMTP," + СписокСвойствPOP3;
				Результат.Пароль = Пароли.Пароль;
			КонецЕсли;
			Если Выборка.Протокол = "IMAP" Тогда
				ТребуемыеСвойства = ТребуемыеСвойства + "," + СписокСвойствIMAP;
				Результат.ПарольIMAP =Пароли.Пароль;
			КонецЕсли;
		КонецЕсли;
		ТребуемыеСвойства = ТребуемыеСвойства + ",Таймаут";
		ЗаполнитьЗначенияСвойств(Результат, Выборка, ТребуемыеСвойства);
		Если Результат.ПользовательSMTP = "" Тогда
			Результат.ПарольSMTP = "";
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.ПарольIMAP = "" Тогда
		Результат.ПарольIMAP = Результат.ПарольSMTP;
	КонецЕсли;
	Результат.Пароль = УчетнаяЗапись.Пароль;
	Возврат Результат;
	
КонецФункции





//&НаСервере
//Процедура ПроверитьВозможностьОтправкиИПолученияЭлектроннойПочты(УчетнаяЗапись, ПарольПараметр, СообщениеОбОшибке, ДополнительноеСообщение) Экспорт
//	
//	СообщениеОбОшибке = "";
//	ДополнительноеСообщение = "";
//	
//	Если УчетнаяЗапись.ИспользоватьДляОтправки Тогда
//		Попытка
//			ПроверитьВозможностьОтправкиТестовогоСообщения(УчетнаяЗапись, ПарольПараметр);
//		Исключение
//			СообщениеОбОшибке = УдалитьСтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//									НСтр("ru = 'Ошибка при отправке сообщения: %1'"),
//									ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) );
//		КонецПопытки;
//	Иначе
//		ДополнительноеСообщение = Символы.ПС + НСтр("ru = 'Прим. учетная запись не используется для отправки электронных сообщений.'");
//	КонецЕсли;
//	
//	Если УчетнаяЗапись.ИспользоватьДляПолучения Тогда
//		Попытка
//			ПроверитьВходНаСерверВходящейЭлектроннойПочты(УчетнаяЗапись, ПарольПараметр);
//		Исключение
//			Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
//				СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС;
//			КонецЕсли;
//			
//			СообщениеОбОшибке = СообщениеОбОшибке
//								+ УдалитьСтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//										НСтр("ru = 'Ошибка доступа к серверу входящих сообщений: %1'"),
//										ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) );
//		КонецПопытки;
//	Иначе
//		ДополнительноеСообщение = ДополнительноеСообщение
//								+ Символы.ПС
//								+ НСтр("ru = 'Прим. учетная запись не используется для получения электронных сообщений.'");
//	КонецЕсли;
//	
//КонецПроцедуры

// Процедура проверяющая возможность отправления почтового сообщения через
// учетную запись
//
// Парамеры
// УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись,
//                 которую необходимо проверить
//
// Возвращаемое значение
// структура 
// ключ "статус" - булево, если Истина - успешно вошли на сервер pop3
//                 если Ложь - ошибка при входе на сервер pop3
// ключ "СообщениеОбОшибке" - строка - если статус Ложь - содержит сообщение об ошибке
//
&НаСервере
Процедура ПроверитьВозможностьОтправкиТестовогоСообщения(знач УчетнаяЗапись,
														знач Пароль = Неопределено)
	
	ПараметрыПисьма = Новый Структура;
	
	ПараметрыПисьма.Вставить("Тема", НСтр("ru = 'Тестовое сообщение 1С:Предприятие'"));
	ПараметрыПисьма.Вставить("Тело", НСтр("ru = 'Это сообщение отправлено подсистемой электронной почты 1С:Предприятие'"));
	ПараметрыПисьма.Вставить("Кому", УчетнаяЗапись.АдресЭлектроннойПочты);
	Если Пароль <> Неопределено Тогда
		ПараметрыПисьма.Вставить("Пароль", Пароль);
	КонецЕсли;
	
	ЭлектроннаяПочта.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);
	
КонецПроцедуры

// Процедура проверяющая возможность получения почтового сообщения через
// учетную запись
//
// Парамеры
// УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись,
//                 которую необходимо проверить
//
// Возвращаемое значение
// структура 
// ключ "статус" - булево, если Истина - успешно вошли на сервер pop3
//                 если Ложь - ошибка при входе на сервер pop3
// ключ "СообщениеОбОшибке" - строка - если статус Ложь - содержит сообщение об ошибке
//
&НаСервере
Процедура ПроверитьВходНаСерверВходящейЭлектроннойПочты(знач УчетнаяЗапись,
														знач Пароль = Неопределено)
	
	ПараметрыЗагрузки = Новый Структура("РежимТестирования", Истина);
	
	Если Пароль <> Неопределено Тогда
		ПараметрыЗагрузки.Вставить("Пароль", Пароль);
	КонецЕсли;
	
	ЭлектроннаяПочта.ЗагрузитьПочтовыеСообщения(УчетнаяЗапись, ПараметрыЗагрузки);
	
КонецПроцедуры

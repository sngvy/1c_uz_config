
#Область ЛокальныеПеременные

&НаКлиенте 
Перем пОбработчикПодключен, пСтруктураРеквизитов;

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СЕРВЕРНЫЕ_МЕТОДЫ

&НаСервере
// Получает все необходимые данные для формы
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийЯзыкПользователя = бит_сл_сервер_ассистент.ПолучитьЯзыкКлиентаЛицензирования();
	бит_сл_сервер.ОбновитьЗначенияРеквизитов(Объект);

	Элементы.ОбщиеНастройки.Доступность = (Метаданные.Роли.Найти("бит_сл_Администратор") <> Неопределено И РольДоступна("бит_сл_Администратор")) ИЛИ
	                                      (Метаданные.Роли.Найти("ПолныеПрава") <> Неопределено И РольДоступна("ПолныеПрава")) ИЛИ
										  (Метаданные.Роли.Найти("бит_ПолныеПрава") <> Неопределено И РольДоступна("бит_ПолныеПрава")) ИЛИ
										  ПользователиИнформационнойБазы.ТекущийПользователь().Имя = "";
	ЛокализироватьИнтерфейс();
	ФормаОткрытаКодом = Параметры.ФормаОткрытаКодом;
	
КонецПроцедуры

&НаСервере
// Метод помощник, выполняет локализацию элементов формы по данным из структуры
//
Процедура ЛокализироватьИнтерфейсИзСтруктуры(ЛокализацияФормы)

	Для Каждого ЭлементЗн Из ЛокализацияФормы Цикл
					
			Попытка
				
				СтрокаКомандыЛокализации = СтрЗаменить(ЭлементЗн.Ключ, "_", ".") + " = """ + ЭлементЗн.Значение + """";				
				Выполнить(СтрокаКомандыЛокализации);
				
			Исключение
				
				ПараметрыСообщения = Новый Соответствие;
				ПараметрыСообщения.Вставить("##1##", ЭлементЗн.Ключ);
				Сообщить( бит_сл_общий.ПолучитьСтрокуСообщения("ЛокализацияСодержитОшибки", ПараметрыСообщения, ТекущийЯзыкПользователя) );							
				
			КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
// Загружает во все элементы формы локализированные данные
//
Процедура ЛокализироватьИнтерфейс()

	ЛокализироватьИнтерфейсИзСтруктуры(бит_сл_общий.ПолучитьДанныеЛокализации(ТекущийЯзыкПользователя).бит_сл_КлиентЛицензирования.Форма);
	ЛокализироватьИнтерфейсИзСтруктуры(бит_сл_общий.ПолучитьДанныеЛокализации(ТекущийЯзыкПользователя).бит_сл_КлиентЛицензирования.Форма_8_3_6);                                              
	
КонецПроцедуры

&НаСервереБезКонтекста
// Обновляет все реквизиты на форме
//
Процедура ОбновитьДанныеФормыСервер(СтруктураОбработки)

	бит_сл_сервер.ОбновитьЗначенияРеквизитов(СтруктураОбработки);
	
КонецПроцедуры

&НаСервере 
// Передает структуру параметров на сервер для сохранения
//
Процедура ПередатьНастройкиНаСервер()

	бит_сл_сервер.СохранитьНастройкиВОбъект(Объект);

КонецПроцедуры 

&НаСервереБезКонтекста
// Заполняет структуру реквизитов обработки
//
Функция СоздатьСтруктуруРекизитовОбработки()

	Результат = Новый Структура;
	
	// Обновим значения в реквизитах объекта
	Для Каждого Реквизит Из Метаданные.Обработки.бит_сл_КлиентЛицензирования.Реквизиты Цикл		
		Результат.Вставить(Реквизит.Имя);                                                  		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КЛИЕНТСКИЕ_МЕТОДЫ

&НаКлиенте
// Выводит предупреждение о не правильном значении порта
//
Процедура ВывестиСообщениеВероятноНеПравильныйПорт(ПолеИсточник)

	ЛокализированноеСообщение = бит_сл_общий.ПолучитьСтрокуСообщения("НеПравильныйПорт", Неопределено, ТекущийЯзыкПользователя);	
	бит_сл_общий.ВывестиСообщение(ЛокализированноеСообщение, ПолеИсточник);	
	
КонецПроцедуры

&НаКлиенте 
// Подключает обработчик ожидания после окончания редактирования значения
//
Процедура ПодключитьОбработчикОжиданияОбновленияДанныхФормы()

	пОбработчикПодключен = Истина;

КонецПроцедуры

&НаКлиенте 
// Отключает обработчик ожидания при редактировании значений
//
Процедура ОтключитьОбработчикОжиданияОбновленияДанныхФормы()

	пОбработчикПодключен = Ложь; 	

КонецПроцедуры

&НаКлиенте
// Обновляет все реквизиты на форме
//
Процедура ОбновитьДанныеФормы()

	Для Каждого ЭлементЗн Из пСтруктураРеквизитов Цикл		
		пСтруктураРеквизитов[ЭлементЗн.Ключ] = Объект[ЭлементЗн.Ключ];		
	КонецЦикла;	
	
	ОбновитьДанныеФормыСервер(пСтруктураРеквизитов);
	
	Для Каждого ЭлементЗн Из пСтруктураРеквизитов Цикл		
		Объект[ЭлементЗн.Ключ] = ЭлементЗн.Значение;		
	КонецЦикла; 	 	
	
	ЧислоИсключений = ?(Объект.общ_СписокИсключения="", 0, СтрЧислоСтрок(Объект.общ_СписокИсключения));
	
КонецПроцедуры 

&НаКлиенте
// Изменяет видимость элемента в случае, если она не совпадает с целевым значением
//
Процедура ИзменитьВидимостьЭлемента(Элемент, Видимость)

	Если Элемент.Видимость <> Видимость Тогда
		
		Элемент.Видимость = Видимость;
		
	КонецЕсли; 	
	
КонецПроцедуры 

#КонецОбласти

#Область ОБРАБОТЧИКИ_ОЖИДАНИЯ

&НаКлиенте
// Запускается каждые 2 секунды для обновления данных формы
//
Процедура Подключаемый_ОбработчикОбновленияДанныхФормы()

	Если пОбработчикПодключен Тогда
		
		ОбновитьДанныеФормы();
		
		ИзменитьВидимостьЭлемента(Элементы.ГруппаПредупреждениеАктивностиОбщихНастроек, Объект.общ_ПубликацияНастроек);
		Элементы.общПубликацияНастроек.ЦветТекстаЗаголовка = ?(Объект.общ_ПубликацияНастроек, Новый Цвет(53,115,5), Новый Цвет(153,51, 0));
		ИзменитьВидимостьЭлемента(Элементы.ДекорацияПредупреждениеКартинкаНеПравильныйПорт, Найти(Объект.АдресСервераИПорт, ":10600") <> 0);      
		ИзменитьВидимостьЭлемента(Элементы.ДекорацияПредупреждениеКартинкаОбщНеПравильныйПорт, Найти(Объект.общ_АдресСервераИПорт, ":10600") <> 0);
		
	КонецЕсли; 
	
	Если Не Элементы.КнопкаОбновитьСоединение.Доступность Тогда
		
		Элементы.КнопкаОбновитьСоединение.Доступность = Истина;
		
	КонецЕсли;
	
	// Настройка информации для техподдержки
	Если Объект.ИнформацияДляТехПоддержки = "" Тогда
		
		ИзменитьВидимостьЭлемента(Элементы.ИнформацияДляТехПоддержки, Ложь);
		ИзменитьВидимостьЭлемента(Элементы.ДекорацияИнформацияДляТехПоддержки, Ложь);
		
	Иначе
		
		Если Не Элементы.ИнформацияДляТехПоддержки.Видимость И Не Элементы.ДекорацияИнформацияДляТехПоддержки.Видимость Тогда			
			ИзменитьВидимостьЭлемента(Элементы.ДекорацияИнформацияДляТехПоддержки, Истина);		
		КонецЕсли; 
		
	КонецЕсли; 
	
	ИзменитьВидимостьЭлемента(Элементы.ДекорацияИзменитьВерсиюПродукта, Объект.МожетТребоватьсяИзменениеВерсии); 
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьСостояниеДействие()
	
	бит_сл_клиент.ПередОбновлениемСостояния();
	бит_сл_сервер.ОтключитьсяОтСервера();
	бит_сл_сервер.ПолучитьЛицензиюДляТекущегоПродукта();	
	бит_сл_клиент.ПриОбновленииСостояния();	
	
КонецПроцедуры

#КонецОбласти

#Область ОБРАБОТЧИКИ_ОПОВЕЩЕНИЙ
#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
// Выполняет первоначальную настройку формы при открытии 
//
Процедура ПриОткрытии(Отказ)
	
	Если Не ФормаОткрытаКодом Тогда
		
		бит_сл_клиент.ОткрытьФормуКлиентаЛицензирования();
		
		Отказ = Истина;
		Возврат;
	
	КонецЕсли; 
	
	пСтруктураРеквизитов = СоздатьСтруктуруРекизитовОбработки();
	ОбновитьДанныеФормы();	
	пОбработчикПодключен = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОбновленияДанныхФормы", 2, Ложь);
	Элементы.КнопкаОбновитьСоединение.Доступность = Истина;
		
КонецПроцедуры

&НаКлиенте
// Подготавливает обарботку к выгрузке
//
Процедура ПриЗакрытии()
	
	ОтключитьОбработчикОжидания("Подключаемый_ОбработчикОбновленияДанныхФормы");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура АдресСервераИПортПриИзменении(Элемент)
	
	ПередатьНастройкиНаСервер();
	
	ИзменитьВидимостьЭлемента(Элементы.ДекорацияПредупреждениеКартинкаНеПравильныйПорт, Найти(Объект.АдресСервераИПорт, ":10600") <> 0); 

	Если Элементы.ДекорацияПредупреждениеКартинкаНеПравильныйПорт.Видимость Тогда
		
		ВывестиСообщениеВероятноНеПравильныйПорт("Объект.АдресСервераИПорт");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОжиданияДоАктивацииПриИзменении(Элемент)
	
	ПередатьНастройкиНаСервер();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПортАссистентаСервераЛицензийПриИзменении(Элемент)
	
	ПередатьНастройкиНаСервер();	
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьProxyСерверПриИзменении(Элемент)
	
	ПередатьНастройкиНаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура общ_АдресСервераИПортПриИзменении(Элемент)
	
	ПередатьНастройкиНаСервер();
	
	ИзменитьВидимостьЭлемента(Элементы.ДекорацияПредупреждениеКартинкаОбщНеПравильныйПорт, Найти(Объект.общ_АдресСервераИПорт, ":10600") <> 0);
	
	Если Элементы.ДекорацияПредупреждениеКартинкаОбщНеПравильныйПорт.Видимость Тогда
		
		ВывестиСообщениеВероятноНеПравильныйПорт("Объект.общ_АдресСервераИПорт");
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура общ_ВремяОжиданияДоАктивацииПриИзменении(Элемент)
	
	ПередатьНастройкиНаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура общ_ПортАссистентаСервераЛицензийПриИзменении(Элемент)

	ПередатьНастройкиНаСервер();	
	
КонецПроцедуры

&НаКлиенте
Процедура общ_ИспользоватьProxyСерверПриИзменении(Элемент)
	
	ПередатьНастройкиНаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура общ_ПубликацияНастроекПриИзменении(Элемент)
	
	ПередатьНастройкиНаСервер();
	
	Элементы.общПубликацияНастроек.ЦветТекстаЗаголовка = ?(Объект.общ_ПубликацияНастроек, Новый Цвет(53,115,5), Новый Цвет(153, 51, 0));
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельЗакладокПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ПодключитьОбработчикОжиданияОбновленияДанныхФормы();
	Подключаемый_ОбработчикОбновленияДанныхФормы();
	ОтключитьОбработчикОжиданияОбновленияДанныхФормы();
	
	Если ТекущаяСтраница = Элементы.ОбщиеНастройки Тогда
	
		ЧислоИсключений = ?(Объект.общ_СписокИсключения="", 0, СтрЧислоСтрок(Объект.общ_СписокИсключения));
	
	КонецЕсли;	
	
	Если ТекущаяСтраница = Элементы.ГруппаСообщенияСистемы Тогда
		
		ПодключитьОбработчикОжиданияОбновленияДанныхФормы();
		
	Иначе
		
		ОтключитьОбработчикОжиданияОбновленияДанныхФормы();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПредупреждениеКартинкаНеПравильныйПортНажатие(Элемент)
	
	ВывестиСообщениеВероятноНеПравильныйПорт("Объект.АдресСервераИПорт");
		
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПредупреждениеКартинкаОбщНеПравильныйПортНажатие(Элемент)
	
	ВывестиСообщениеВероятноНеПравильныйПорт("Объект.общ_АдресСервераИПорт");	
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИзменитьВерсиюПродуктаНажатие(Элемент)
	
	бит_сл_клиент.ПриОткрытииФормыВыбораВерсииПродукта();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнформацияДляТехПоддержкиНажатие(Элемент)
	
	ИзменитьВидимостьЭлемента(Элементы.ДекорацияИнформацияДляТехПоддержки, Ложь);
	ИзменитьВидимостьЭлемента(Элементы.ИнформацияДляТехПоддержки, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Открывает панель настроек
//
Процедура ОткрытьЗакладкуНастроек(Команда)
	
	Элементы.ПанельЗакладок.ТекущаяСтраница = Элементы.Настройки; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояние(Команда)
	
	бит_сл_сервер.ОжиданиеПереподключения();
	
	Объект.ОсновнаяНадпись = бит_сл_общий.ПолучитьСтрокуСообщения("ПожалуйстаПодождите", Неопределено, ТекущийЯзыкПользователя);	
	Объект.СостояниеАктивации = бит_сл_общий.ПолучитьСтрокуСообщения("НеАктивирован", Неопределено, ТекущийЯзыкПользователя);
	Объект.ИнформацияДляТехПоддержки = "";
	Объект.МожетТребоватьсяИзменениеВерсии = Ложь;
	Элементы.КнопкаОбновитьСоединение.Доступность = Ложь;
	ИзменитьВидимостьЭлемента(Элементы.ИнформацияДляТехПоддержки, Ложь);			
	ИзменитьВидимостьЭлемента(Элементы.ДекорацияИнформацияДляТехПоддержки, Ложь);
	ИзменитьВидимостьЭлемента(Элементы.ДекорацияИзменитьВерсиюПродукта, Ложь);
	Элементы.ПанельЗакладок.ТекущаяСтраница = Элементы.ГруппаСообщенияСистемы;
	ПодключитьОбработчикОжиданияОбновленияДанныхФормы();	
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьСостояниеДействие", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	
	ПередатьНастройкиНаСервер();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСписка(Команда)
	
	// Откроем форму списка пользователей
	СовместимостьФорм_8_3_6 = бит_сл_сервер.ИспользоватьРежимСовместимостиФормСПлатформой_8_3_6();
	
	Если СовместимостьФорм_8_3_6 Тогда
		
		ИмяФормыОбработки = "Обработка.бит_сл_КлиентЛицензирования.Форма.СписокПользователей_упр_8_3_6";
		
	Иначе
		
		ИмяФормыОбработки = "Обработка.бит_сл_КлиентЛицензирования.Форма.СписокПользователей_упр";
		
	КонецЕсли;	
		
	ОткрытьФорму(ИмяФормыОбработки,
				 ,
				 ЭтаФорма,
				 ,
				 ,
				 ,
				 Новый ОписаниеОповещения("ОткрытьФормуСпискаЗакрытие", ЭтаФорма),
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);				  
			  	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОткрытьФормуСпискаЗакрытие(Результат, ДополнительныеПараметры) Экспорт

	Если (ТипЗнч(Результат) = Тип("Булево")) И (Результат = Истина) Тогда
		
		// Сохраним настройки
		ПередатьНастройкиНаСервер();
		ЧислоИсключений = ?(Объект.общ_СписокИсключения="", 0, СтрЧислоСтрок(Объект.общ_СписокИсключения));
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ИнициализацияЛокальныхПеременных
#КонецОбласти
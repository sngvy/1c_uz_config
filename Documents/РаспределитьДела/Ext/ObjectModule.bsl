
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	ОбъектыСервер.ОбработкаЗаполненияДокументов(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
КонецПроцедуры

Процедура РаспределитьСервер() Экспорт
	//Если СпособРаспределения = Перечисления.СпособыРаспределения.ПоровнуПоКоличеству Тогда
	//	Запрос = Новый Запрос("ВЫБРАТЬ
	//						  |	Сотрудники.Сотрудник,
	//						  |	ВЫБОР
	//						  |		КОГДА Сотрудники.ТипСотрудника = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыСотрудников.ПустаяСсылка)
	//						  |			ТОГДА Сотрудники.Сотрудник.ТипСотрудника
	//						  |		ИНАЧЕ Сотрудники.ТипСотрудника
	//						  |	КОНЕЦ КАК ТипСотрудника
	//						  |ПОМЕСТИТЬ Сотрудники
	//						  |ИЗ
	//						  |	&Сотрудники КАК Сотрудники
	//						  |;
	//						  |
	//						  |////////////////////////////////////////////////////////////////////////////////
	//						  |ВЫБРАТЬ
	//						  |	ОтветственныеСотрудники.Объект КАК Объект,
	//						  |	ОтветственныеСотрудники.ТипСотрудника КАК ТипСотрудника,
	//						  |	ОтветственныеСотрудники.Пользователь КАК Пользователь
	//						  |ПОМЕСТИТЬ ОтвСотр
	//						  |ИЗ
	//						  |	РегистрСведений.ОтветственныеСотрудники КАК ОтветственныеСотрудники
	//						  |
	//						  |ОБЪЕДИНИТЬ ВСЕ
	//						  |
	//						  |ВЫБРАТЬ
	//						  |	СотрудникиВПомощь.Объект,
	//						  |	СотрудникиВПомощь.ТипСотрудника,
	//						  |	СотрудникиВПомощь.Пользователь
	//						  |ИЗ
	//						  |	РегистрСведений.СотрудникиВПомощь КАК СотрудникиВПомощь
	//						  |;
	//						  |
	//						  |////////////////////////////////////////////////////////////////////////////////
	//						  |ВЫБРАТЬ
	//						  |	ОтвСотр.ТипСотрудника,
	//						  |	ОтвСотр.Пользователь,
	//						  |	КОЛИЧЕСТВО(*) КАК КолВо
	//						  |ПОМЕСТИТЬ ОтвСотр2
	//						  |ИЗ
	//						  |	ОтвСотр КАК ОтвСотр
	//						  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыВРаботеСотрудника КАК ОбъектыВРаботеСотрудника
	//						  |		ПО ОтвСотр.Объект = ОбъектыВРаботеСотрудника.Объект
	//						  |			И ОтвСотр.Пользователь = ОбъектыВРаботеСотрудника.Сотрудник
	//						  |
	//						  |СГРУППИРОВАТЬ ПО
	//						  |	ОтвСотр.ТипСотрудника,
	//						  |	ОтвСотр.Пользователь
	//						  |;
	//						  |
	//						  |////////////////////////////////////////////////////////////////////////////////
	//						  |ВЫБРАТЬ
	//						  |	ОтвСотр2.ТипСотрудника,
	//						  |	ОтвСотр2.Пользователь,
	//						  |	ЕСТЬNULL(ОтвСотр2.КолВо, 0) КАК КолВо
	//						  |ИЗ
	//						  |	Сотрудники КАК Сотрудники
	//						  |		ЛЕВОЕ СОЕДИНЕНИЕ ОтвСотр2 КАК ОтвСотр2
	//						  |		ПО Сотрудники.Сотрудник = ОтвСотр2.Пользователь
	//						  |			И Сотрудники.ТипСотрудника = ОтвСотр2.ТипСотрудника");
	//	Запрос.УстановитьПараметр("Сотрудники", Сотрудники.Выгрузить());
	//	ТЗСотрудники = Запрос.Выполнить().Выгрузить();
	//	
	//	Для Каждого Элемент Из Объекты Цикл 
	//		ТЗСотрудники.Сортировать("КолВо");
	//		ТЗСотрудники[0].КолВо = ТЗСотрудники[0].КолВо + 1;
	//		Элемент.Сотрудник = ТЗСотрудники[0].Пользователь;
	//		Элемент.ТипСотрудника = ТЗСотрудники[0].ТипСотрудника;	
	//	КонецЦикла;
	//	
	//ИначеЕсли СпособРаспределения = Перечисления.СпособыРаспределения.ПоровнуПоСуммеДолга Тогда
	//	Запрос = Новый Запрос("ВЫБРАТЬ
	//						  |	Сотрудники.Сотрудник,
	//						  |	ВЫБОР
	//						  |		КОГДА Сотрудники.ТипСотрудника = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыСотрудников.ПустаяСсылка)
	//						  |			ТОГДА Сотрудники.Сотрудник.ТипСотрудника
	//						  |		ИНАЧЕ Сотрудники.ТипСотрудника
	//						  |	КОНЕЦ КАК ТипСотрудника
	//						  |ПОМЕСТИТЬ Сотрудники
	//						  |ИЗ
	//						  |	&Сотрудники КАК Сотрудники
	//						  |;
	//						  |
	//						  |////////////////////////////////////////////////////////////////////////////////
	//						  |ВЫБРАТЬ
	//						  |	ОтветственныеСотрудники.Объект КАК Объект,
	//						  |	ОтветственныеСотрудники.ТипСотрудника КАК ТипСотрудника,
	//						  |	ОтветственныеСотрудники.Пользователь КАК Пользователь
	//						  |ПОМЕСТИТЬ ОтвСотр
	//						  |ИЗ
	//						  |	РегистрСведений.ОтветственныеСотрудники КАК ОтветственныеСотрудники
	//						  |
	//						  |ОБЪЕДИНИТЬ ВСЕ
	//						  |
	//						  |ВЫБРАТЬ
	//						  |	СотрудникиВПомощь.Объект,
	//						  |	СотрудникиВПомощь.ТипСотрудника,
	//						  |	СотрудникиВПомощь.Пользователь
	//						  |ИЗ
	//						  |	РегистрСведений.СотрудникиВПомощь КАК СотрудникиВПомощь
	//						  |;
	//						  |
	//						  |////////////////////////////////////////////////////////////////////////////////
	//						  |ВЫБРАТЬ
	//						  |	ОтвСотр.ТипСотрудника,
	//						  |	ОтвСотр.Пользователь,
	//						  |	СУММА(ВЫБОР
	//						  |			КОГДА ЕСТЬNULL(ЗадолженностьПоОбъектамОстатки.СуммаРеглОстаток, 0) < 0
	//						  |				ТОГДА 0
	//						  |			ИНАЧЕ ЕСТЬNULL(ЗадолженностьПоОбъектамОстатки.СуммаРеглОстаток, 0)
	//						  |		КОНЕЦ) КАК КолВо,
	//						  |	КОЛИЧЕСТВО(*) КАК КолВо2
	//						  |ПОМЕСТИТЬ ОтвСотр2
	//						  |ИЗ
	//						  |	ОтвСотр КАК ОтвСотр
	//						  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыВРаботеСотрудника КАК ОбъектыВРаботеСотрудника
	//						  |		ПО ОтвСотр.Объект = ОбъектыВРаботеСотрудника.Объект
	//						  |			И ОтвСотр.Пользователь = ОбъектыВРаботеСотрудника.Сотрудник
	//						  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗадолженностьПоОбъектам.Остатки КАК ЗадолженностьПоОбъектамОстатки
	//						  |		ПО ОтвСотр.Объект = ЗадолженностьПоОбъектамОстатки.Объект
	//						  |
	//						  |СГРУППИРОВАТЬ ПО
	//						  |	ОтвСотр.ТипСотрудника,
	//						  |	ОтвСотр.Пользователь
	//						  |;
	//						  |
	//						  |////////////////////////////////////////////////////////////////////////////////
	//						  |ВЫБРАТЬ
	//						  |	ОтвСотр2.ТипСотрудника,
	//						  |	ОтвСотр2.Пользователь,
	//						  |	ЕСТЬNULL(ОтвСотр2.КолВо, 0) КАК КолВо,
	//						  |	ЕСТЬNULL(ОтвСотр2.КолВо2, 0) КАК КолВо2
	//						  |ИЗ
	//						  |	Сотрудники КАК Сотрудники
	//						  |		ЛЕВОЕ СОЕДИНЕНИЕ ОтвСотр2 КАК ОтвСотр2
	//						  |		ПО Сотрудники.Сотрудник = ОтвСотр2.Пользователь
	//						  |			И Сотрудники.ТипСотрудника = ОтвСотр2.ТипСотрудника");
	//	Запрос.УстановитьПараметр("Сотрудники", Сотрудники.Выгрузить());
	//	ТЗСотрудники = Запрос.Выполнить().Выгрузить();
	//	
	//	Для Каждого Элемент Из Объекты Цикл 
	//		Запрос.Текст = "ВЫБРАТЬ
	//					   |	ВЫБОР
	//					   |		КОГДА ЕСТЬNULL(ЗадолженностьПоОбъектамОстатки.СуммаРеглОстаток, 0) < 0
	//					   |			ТОГДА 0
	//					   |		ИНАЧЕ ЕСТЬNULL(ЗадолженностьПоОбъектамОстатки.СуммаРеглОстаток, 0)
	//					   |	КОНЕЦ КАК Сумма
	//					   |ИЗ
	//					   |	РегистрНакопления.ЗадолженностьПоОбъектам.Остатки(, Объект = &Объект) КАК ЗадолженностьПоОбъектамОстатки";
	//		Запрос.УстановитьПараметр("Объект", Элемент.Объект);
	//		Попытка
	//			Сумма = Запрос.Выполнить().Выгрузить()[0].Сумма
	//		Исключение
	//			Сумма = 0;
	//		КонецПопытки;
	//		
	//		ТЗСотрудники.Сортировать("КолВо, КолВо2");
	//		ТЗСотрудники[0].КолВо = ТЗСотрудники[0].КолВо + Сумма;
	//		ТЗСотрудники[0].КолВо2 = ТЗСотрудники[0].КолВо2 + 1;
	//		Элемент.Сотрудник = ТЗСотрудники[0].Пользователь;
	//		Элемент.ТипСотрудника = ТЗСотрудники[0].ТипСотрудника;	
	//	КонецЦикла;
	//	
	//ИначеЕсли СпособРаспределения = Перечисления.СпособыРаспределения.ВсемВРаботу Тогда
	//	Запрос = Новый Запрос("ВЫБРАТЬ
	//						  |	Сотрудники.Сотрудник,
	//						  |	ВЫБОР
	//						  |		КОГДА Сотрудники.ТипСотрудника = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыСотрудников.ПустаяСсылка)
	//						  |			ТОГДА Сотрудники.Сотрудник.ТипСотрудника
	//						  |		ИНАЧЕ Сотрудники.ТипСотрудника
	//						  |	КОНЕЦ КАК ТипСотрудника
	//						  |ПОМЕСТИТЬ Сотрудники
	//						  |ИЗ
	//						  |	&Сотрудники КАК Сотрудники
	//						  |;
	//						  |
	//						  |////////////////////////////////////////////////////////////////////////////////
	//						  |ВЫБРАТЬ
	//						  |	Объекты.Объект
	//						  |ПОМЕСТИТЬ Объекты
	//						  |ИЗ
	//						  |	&Объекты КАК Объекты
	//						  |;
	//						  |
	//						  |////////////////////////////////////////////////////////////////////////////////
	//						  |ВЫБРАТЬ
	//						  |	Объекты.Объект,
	//						  |	Сотрудники.Сотрудник,
	//						  |	Сотрудники.ТипСотрудника
	//						  |ПОМЕСТИТЬ Объед
	//						  |ИЗ
	//						  |	Объекты КАК Объекты,
	//						  |	Сотрудники КАК Сотрудники
	//						  |
	//						  |СГРУППИРОВАТЬ ПО
	//						  |	Объекты.Объект,
	//						  |	Сотрудники.Сотрудник,
	//						  |	Сотрудники.ТипСотрудника
	//						  |;
	//						  |
	//						  |////////////////////////////////////////////////////////////////////////////////
	//						  |ВЫБРАТЬ
	//						  |	Объед.Объект,
	//						  |	Объед.Сотрудник,
	//						  |	Объед.ТипСотрудника
	//						  |ИЗ
	//						  |	Объед КАК Объед
	//						  |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//						  |			ОтветственныеСотрудники.Объект КАК Объект,
	//						  |			ОтветственныеСотрудники.ТипСотрудника КАК ТипСотрудника,
	//						  |			ОтветственныеСотрудники.Пользователь КАК Пользователь
	//						  |		ИЗ
	//						  |			РегистрСведений.ОтветственныеСотрудники КАК ОтветственныеСотрудники
	//						  |		
	//						  |		ОБЪЕДИНИТЬ ВСЕ
	//						  |		
	//						  |		ВЫБРАТЬ
	//						  |			СотрудникиВПомощь.Объект,
	//						  |			СотрудникиВПомощь.ТипСотрудника,
	//						  |			СотрудникиВПомощь.Пользователь
	//						  |		ИЗ
	//						  |			РегистрСведений.СотрудникиВПомощь КАК СотрудникиВПомощь) КАК ОтвСотр
	//						  |		ПО (ОтвСотр.Объект = Объед.Объект)
	//						  |			И (ОтвСотр.ТипСотрудника = Объед.ТипСотрудника)
	//						  |			И (ОтвСотр.Пользователь = Объед.Сотрудник)
	//						  |ГДЕ
	//						  |	ОтвСотр.Объект ЕСТЬ NULL ");
	//	Запрос.УстановитьПараметр("Сотрудники", Сотрудники.Выгрузить());
	//	Запрос.УстановитьПараметр("Объекты", Объекты.Выгрузить());
	//	Объекты = Запрос.Выполнить().Выгрузить();		
	//КонецЕсли;
	

	Если Не СотрудникПередающий.Пустая() И Сотрудники.Количество() <> 0 Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	Сотрудники.Сотрудник,
		                      |	ВЫБОР
		                      |		КОГДА Сотрудники.ТипСотрудника = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыСотрудников.ПустаяСсылка)
		                      |			ТОГДА ВЫРАЗИТЬ(Сотрудники.Сотрудник КАК Справочник.Пользователи).ТипСотрудника
		                      |		ИНАЧЕ Сотрудники.ТипСотрудника
		                      |	КОНЕЦ КАК ТипСотрудника
		                      |ПОМЕСТИТЬ Сотрудники
		                      |ИЗ
		                      |	&Сотрудники КАК Сотрудники
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	Объекты.Объект
		                      |ПОМЕСТИТЬ ОбъектыБезСотрудника
		                      |ИЗ
		                      |	&Объекты КАК Объекты
		                      |ГДЕ
		                      |	Объекты.Сотрудник = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	Объекты.Объект,
		                      |	Объекты.Сотрудник,
		                      |	Объекты.ТипСотрудника,
		                      |	Объекты.Действие
		                      |ПОМЕСТИТЬ ОбъектыССотрудником
		                      |ИЗ
		                      |	&Объекты КАК Объекты
		                      |ГДЕ
		                      |	Объекты.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	ОбъектыБезСотрудника.Объект,
		                      |	&Сотрудник,
		                      |	ВЫБОР
		                      |		КОГДА &ТипСотрудника = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыСотрудников.ПустаяСсылка)
		                      |			ТОГДА ВЫРАЗИТЬ(&Сотрудник КАК Справочник.Пользователи).ТипСотрудника
		                      |		ИНАЧЕ &ТипСотрудника
		                      |	КОНЕЦ КАК ТипСотрудника,
		                      |	ЗНАЧЕНИЕ(Перечисление.ДействияРаспределения.УбратьИзРаботы) КАК Действие
		                      |ИЗ
		                      |	ОбъектыБезСотрудника КАК ОбъектыБезСотрудника
		                      |
		                      |ОБЪЕДИНИТЬ ВСЕ
		                      |
		                      |ВЫБРАТЬ
		                      |	ОбъектыССотрудником.Объект,
		                      |	ОбъектыССотрудником.Сотрудник,
		                      |	ОбъектыССотрудником.ТипСотрудника,
		                      |	ОбъектыССотрудником.Действие
		                      |ИЗ
		                      |	ОбъектыССотрудником КАК ОбъектыССотрудником
		                      |
		                      |ОБЪЕДИНИТЬ ВСЕ
		                      |
		                      |ВЫБРАТЬ
		                      |	ОбъектыБезСотрудника.Объект,
		                      |	Сотрудники.Сотрудник,
		                      |	ВЫБОР
		                      |		КОГДА Сотрудники.ТипСотрудника = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыСотрудников.ПустаяСсылка)
		                      |			ТОГДА ВЫРАЗИТЬ(Сотрудники.Сотрудник КАК Справочник.Пользователи).ТипСотрудника
		                      |		ИНАЧЕ Сотрудники.ТипСотрудника
		                      |	КОНЕЦ,
		                      |	ЗНАЧЕНИЕ(Перечисление.ДействияРаспределения.ПринятьВРаботу)
		                      |ИЗ
		                      |	ОбъектыБезСотрудника КАК ОбъектыБезСотрудника,
		                      |	Сотрудники КАК Сотрудники");
		Запрос.УстановитьПараметр("Объекты", Объекты.Выгрузить());					  
		Запрос.УстановитьПараметр("Сотрудник", СотрудникПередающий);
		Запрос.УстановитьПараметр("ТипСотрудника", ТипСотрудника);
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники.Выгрузить());	
		Объекты.Загрузить(Запрос.Выполнить().Выгрузить());
		
	ИначеЕсли Не СотрудникПередающий.Пустая() И Сотрудники.Количество() = 0 Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	Объекты.Объект
		                      |ПОМЕСТИТЬ ОбъектыБезСотрудника
		                      |ИЗ
		                      |	&Объекты КАК Объекты
		                      |ГДЕ
		                      |	Объекты.Сотрудник = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	Объекты.Объект,
		                      |	Объекты.Сотрудник,
		                      |	Объекты.ТипСотрудника,
		                      |	Объекты.Действие
		                      |ПОМЕСТИТЬ ОбъектыССотрудником
		                      |ИЗ
		                      |	&Объекты КАК Объекты
		                      |ГДЕ
		                      |	Объекты.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	ОбъектыБезСотрудника.Объект,
		                      |	&Сотрудник,
		                      |	ВЫБОР
		                      |		КОГДА &ТипСотрудника = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыСотрудников.ПустаяСсылка)
		                      |			ТОГДА ВЫРАЗИТЬ(&Сотрудник КАК Справочник.Пользователи).ТипСотрудника
		                      |		ИНАЧЕ &ТипСотрудника
		                      |	КОНЕЦ КАК ТипСотрудника,
		                      |	ЗНАЧЕНИЕ(Перечисление.ДействияРаспределения.УбратьИзРаботы) КАК Действие
		                      |ИЗ
		                      |	ОбъектыБезСотрудника КАК ОбъектыБезСотрудника
		                      |
		                      |ОБЪЕДИНИТЬ ВСЕ
		                      |
		                      |ВЫБРАТЬ
		                      |	ОбъектыССотрудником.Объект,
		                      |	ОбъектыССотрудником.Сотрудник,
		                      |	ОбъектыССотрудником.ТипСотрудника,
		                      |	ОбъектыССотрудником.Действие
		                      |ИЗ
		                      |	ОбъектыССотрудником КАК ОбъектыССотрудником");
		Запрос.УстановитьПараметр("Объекты", Объекты.Выгрузить());
		Запрос.УстановитьПараметр("Сотрудник", СотрудникПередающий);
		Запрос.УстановитьПараметр("ТипСотрудника", ТипСотрудника);
		Объекты.Загрузить(Запрос.Выполнить().Выгрузить());
		
	ИначеЕсли СотрудникПередающий.Пустая() И Сотрудники.Количество() <> 0 Тогда	
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	Сотрудники.Сотрудник,
		                      |	ВЫБОР
		                      |		КОГДА Сотрудники.ТипСотрудника = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыСотрудников.ПустаяСсылка)
		                      |			ТОГДА Сотрудники.Сотрудник.ТипСотрудника
		                      |		ИНАЧЕ Сотрудники.ТипСотрудника
		                      |	КОНЕЦ КАК ТипСотрудника
		                      |ПОМЕСТИТЬ Сотрудники
		                      |ИЗ
		                      |	&Сотрудники КАК Сотрудники
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	Объекты.Объект
		                      |ПОМЕСТИТЬ ОбъектыБезСотрудника
		                      |ИЗ
		                      |	&Объекты КАК Объекты
		                      |ГДЕ
		                      |	Объекты.Сотрудник = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	Объекты.Объект,
		                      |	Объекты.Сотрудник,
		                      |	Объекты.ТипСотрудника,
		                      |	Объекты.Действие
		                      |ПОМЕСТИТЬ ОбъектыССотрудником
		                      |ИЗ
		                      |	&Объекты КАК Объекты
		                      |ГДЕ
		                      |	Объекты.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	ОбъектыССотрудником.Объект,
		                      |	ОбъектыССотрудником.Сотрудник,
		                      |	ВЫБОР
		                      |		КОГДА ОбъектыССотрудником.ТипСотрудника = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыСотрудников.ПустаяСсылка)
		                      |			ТОГДА ВЫРАЗИТЬ(ОбъектыССотрудником.Сотрудник КАК Справочник.Пользователи).ТипСотрудника
		                      |		ИНАЧЕ ОбъектыССотрудником.ТипСотрудника
		                      |	КОНЕЦ КАК ТипСотрудника,
		                      |	ОбъектыССотрудником.Действие
		                      |ИЗ
		                      |	ОбъектыССотрудником КАК ОбъектыССотрудником
		                      |
		                      |ОБЪЕДИНИТЬ ВСЕ
		                      |
		                      |ВЫБРАТЬ
		                      |	ОбъектыБезСотрудника.Объект,
		                      |	Сотрудники.Сотрудник,
		                      |	ВЫБОР
		                      |		КОГДА Сотрудники.ТипСотрудника = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыСотрудников.ПустаяСсылка)
		                      |			ТОГДА ВЫРАЗИТЬ(Сотрудники.Сотрудник КАК Справочник.Пользователи).ТипСотрудника
		                      |		ИНАЧЕ Сотрудники.ТипСотрудника
		                      |	КОНЕЦ,
		                      |	ЗНАЧЕНИЕ(Перечисление.ДействияРаспределения.ПринятьВРаботу)
		                      |ИЗ
		                      |	ОбъектыБезСотрудника КАК ОбъектыБезСотрудника,
		                      |	Сотрудники КАК Сотрудники");
		Запрос.УстановитьПараметр("Объекты", Объекты.Выгрузить());					  
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники.Выгрузить());
		Объекты.Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьСервер() Экспорт
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//					  |	ОтветственныеСотрудники.Объект
	//					  |ИЗ
	//					  |	РегистрСведений.ОтветственныеСотрудники КАК ОтветственныеСотрудники
	//					  |ГДЕ
	//					  |	ОтветственныеСотрудники.ТипСотрудника = &ТипСотрудника
	//					  |	И (ОтветственныеСотрудники.Пользователь = &Пользователь
	//					  |			ИЛИ &Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	//					  |
	//					  |СГРУППИРОВАТЬ ПО
	//					  |	ОтветственныеСотрудники.Объект");
	//Запрос.УстановитьПараметр("ТипСотрудника", ТипСотрудника);
	//Запрос.УстановитьПараметр("Пользователь", Пользователь);
	//Объекты.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

Процедура ОбработкаПроведения2(Отказ, РежимПроведения)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Объекты.Объект,
	                      |	Объекты.Сотрудник,
	                      |	Объекты.ТипСотрудника,
	                      |	Объекты.Действие
	                      |ПОМЕСТИТЬ Объекты
	                      |ИЗ
	                      |	&Объекты КАК Объекты
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ОтветственныеСотрудники.Объект,
	                      |	ОтветственныеСотрудники.ТипСотрудника,
	                      |	ОтветственныеСотрудники.Пользователь,
	                      |	ИСТИНА КАК Главный
	                      |ПОМЕСТИТЬ ОтвСотр
	                      |ИЗ
	                      |	РегистрСведений.ОтветственныеСотрудники КАК ОтветственныеСотрудники
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	СотрудникиВПомощь.Объект,
	                      |	СотрудникиВПомощь.ТипСотрудника,
	                      |	СотрудникиВПомощь.Пользователь,
	                      |	ЛОЖЬ
	                      |ИЗ
	                      |	РегистрСведений.СотрудникиВПомощь КАК СотрудникиВПомощь
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Объекты.Объект,
	                      |	Объекты.Сотрудник,
	                      |	Объекты.ТипСотрудника,
	                      |	Объекты.Действие,
	                      |	ВЫБОР
	                      |		КОГДА Объекты.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияРаспределения.ПринятьВРаботу)
	                      |				И ОтвСотр.Объект ЕСТЬ NULL 
	                      |			ТОГДА ИСТИНА
	                      |		КОГДА Объекты.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияРаспределения.УбратьИзРаботы)
	                      |				И НЕ ОтвСотр.Объект ЕСТЬ NULL 
	                      |			ТОГДА ИСТИНА
	                      |		ИНАЧЕ ЛОЖЬ
	                      |	КОНЕЦ КАК Выполнена,
	                      |	ОтвСотр.Главный КАК БылГлавным
	                      |ИЗ
	                      |	Объекты КАК Объекты
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ОтвСотр КАК ОтвСотр
	                      |		ПО Объекты.Объект = ОтвСотр.Объект
	                      |			И Объекты.Сотрудник = ОтвСотр.Пользователь
	                      |			И Объекты.ТипСотрудника = ОтвСотр.ТипСотрудника");
	Объекты.Загрузить(Запрос.Выполнить().Выгрузить());
	Для Каждого Элемент Из Объекты Цикл
		Если Элемент.Выполнена Тогда
			Если Элемент.Действие = Перечисления.ДействияРаспределения.ПринятьВРаботу Тогда
				//Проверка ОтветственныеСотрудники
				Набор = РегистрыСведений.ОтветственныеСотрудники.СоздатьМенеджерЗаписи();
				Набор.Объект = Элемент.Объект;
				Набор.ТипСотрудника = Элемент.ТипСотрудника;
				Набор.Прочитать();
				Если Константы.ТолькоОдинОтветственный.Получить() ИЛИ Набор.ТипСотрудника.Пустая() Тогда
					//Добавляем в ОтветственныеСотрудники
					Набор.Объект = Элемент.Объект;
					Набор.ТипСотрудника = Элемент.ТипСотрудника;
					Набор.Пользователь = Элемент.Сотрудник;
					Попытка
						Набор.Записать();
					Исключение
						Отказ = Истина;
						Возврат;
					КонецПопытки;
					
				Иначе
					//Добавляем в СотрудникиВПомощь					
					Набор = РегистрыСведений.СотрудникиВПомощь.СоздатьМенеджерЗаписи();
					Набор.Объект = Элемент.Объект;
					Набор.ТипСотрудника = Элемент.ТипСотрудника;
					Набор.Пользователь = Элемент.Сотрудник;
					Попытка
						Набор.Записать();
					Исключение
						Отказ = Истина;
						Возврат;
					КонецПопытки;
				КонецЕсли;
				
			ИначеЕсли Элемент.Действие = Перечисления.ДействияРаспределения.УбратьИзРаботы Тогда
				Если Элемент.БылГлавным Тогда 
					//Читаем из ОтветственныеСотрудники
					Набор = РегистрыСведений.ОтветственныеСотрудники.СоздатьМенеджерЗаписи();
					Набор.Объект = Элемент.Объект;
					Набор.ТипСотрудника = Элемент.ТипСотрудника;
					Набор.Прочитать();
					//Вычисляем наличие СотрудникиВПомощь
					ЗапросСП = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
					                             |	СотрудникиВПомощь.Пользователь
					                             |ИЗ
					                             |	РегистрСведений.СотрудникиВПомощь КАК СотрудникиВПомощь
					                             |ГДЕ
					                             |	СотрудникиВПомощь.Объект = &Объект
					                             |	И СотрудникиВПомощь.ТипСотрудника = &ТипСотрудника");
					ЗапросСП.УстановитьПараметр("Объект", Элемент.Объект);
					ЗапросСП.УстановитьПараметр("ТипСотрудника", Элемент.ТипСотрудника);
					Результат = ЗапросСП.Выполнить().Выбрать();
					Если Результат.Следующий() Тогда
						//Читаем из СотрудникиВПомощь
						НаборСП = РегистрыСведений.СотрудникиВПомощь.СоздатьМенеджерЗаписи();
						НаборСП.Объект = Элемент.Объект;
						НаборСП.ТипСотрудника = Элемент.ТипСотрудника;
						НаборСП.Пользователь = Результат.Пользователь;
						НаборСП.Прочитать();
						//Есть, Удяляем из СотрудникиВПомощь
						Попытка
							НаборСП.Удалить();
						Исключение
							Отказ = Истина;
							Возврат;
						КонецПопытки;
						
						//Есть, Заменяем пользователя
						Набор.Пользователь = НаборСП.Пользователь;			
						//Есть, Пишем в ОтветственныеСотрудники
						Попытка
							Набор.Записать();
						Исключение
							Отказ = Истина;
							Возврат;
						КонецПопытки;
					Иначе
						//Нет, Удаляем ОтветственныеСотрудники
						Попытка
							Набор.Удалить();
						Исключение
							Отказ = Истина;
							Возврат;
						КонецПопытки;
					КонецЕсли;
					
				Иначе
					//Читаем СотрудникиВПомощь
					Набор = РегистрыСведений.СотрудникиВПомощь.СоздатьМенеджерЗаписи();
					Набор.Объект = Элемент.Объект;
					Набор.ТипСотрудника = Элемент.ТипСотрудника;
					Набор.Пользователь = Элемент.Сотрудник;
					Набор.Прочитать();
					//Удяляем из СотрудникиВПомощь
					Попытка
						Набор.Удалить();
					Исключение
						Отказ = Истина;
						Возврат;
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;		
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения2(Отказ)
	Для Каждого Элемент Из Объекты Цикл
		Если Элемент.Выполнена Тогда
			Если Элемент.Действие = Перечисления.ДействияРаспределения.ПринятьВРаботу Тогда
				//Удаляем из работы
				//Читаем ОтветственныеСотрудники
				Набор = РегистрыСведений.ОтветственныеСотрудники.СоздатьМенеджерЗаписи();
				Набор.Объект = Элемент.Объект;
				Набор.ТипСотрудника = Элемент.ТипСотрудника;
				Набор.Прочитать();
				//Пользователь совпадает с нашим?
				Если Набор.Пользователь = Элемент.Сотрудник Тогда
					//Да, Читаем СотрудникиВПомощь
					ЗапросСП = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
					                        |	СотрудникиВПомощь.Пользователь
					                        |ИЗ
					                        |	РегистрСведений.СотрудникиВПомощь КАК СотрудникиВПомощь
					                        |ГДЕ
					                        |	СотрудникиВПомощь.Объект = &Объект
					                        |	И СотрудникиВПомощь.ТипСотрудника = &ТипСотрудника");
					ЗапросСП.УстановитьПараметр("Объект", Элемент.Объект);
					ЗапросСП.УстановитьПараметр("ТипСотрудника", Элемент.ТипСотрудника);
					Результат = ЗапросСП.Выполнить().Выбрать();
					Если Результат.Следующий() Тогда
						//Да, Читаем СотрудникиВПомощь
						НаборСП = РегистрыСведений.СотрудникиВПомощь.СоздатьМенеджерЗаписи();
						НаборСП.Объект = Элемент.Объект;
						НаборСП.ТипСотрудника = Элемент.ТипСотрудника;
						НаборСП.Пользователь = Результат.Пользователь;
						НаборСП.Прочитать();
						//Да, Удаляем СотрудникиВПомощь
						Попытка
							НаборСП.Удалить();
						Исключение
							Отказ = Истина;
							Возврат;
						КонецПопытки;
						
						//Да, Заменяем пользователя
						Набор.Пользователь = Результат.Пользователь;
						//Да, Пишем ОтветственныеСотрудники
						Попытка
							Набор.Записать();
						Исключение
							Отказ = Истина;
							Возврат;
						КонецПопытки;
					Иначе
						Попытка
							Набор.Удалить();
						Исключение
							Отказ = Истина;
							Возврат;
						КонецПопытки;
					КонецЕсли;
					
				Иначе
					//Нет, Читаем СотрудникиВПомощь
					Набор = РегистрыСведений.СотрудникиВПомощь.СоздатьМенеджерЗаписи();
					Набор.Объект = Элемент.Объект;
					Набор.ТипСотрудника = Элемент.ТипСотрудника;
					Набор.Пользователь = Элемент.Сотрудник;
					Набор.Прочитать();
					//Нет, Удаляем СотрудникиВПомощь
					Попытка
						Набор.Удалить();
					Исключение
						Отказ = Истина;
						Возврат;
					КонецПопытки;					
				КонецЕсли;
				
			ИначеЕсли Элемент.Действие = Перечисления.ДействияРаспределения.УбратьИзРаботы Тогда
				//Принимаем в работу
				Если Элемент.БылГлавным Тогда
					//Проверяем наличие в РС СотрВПом
					НаборСП = РегистрыСведений.СотрудникиВПомощь.СоздатьМенеджерЗаписи();
					НаборСП.Объект = Элемент.Объект;
					НаборСП.ТипСотрудника = Элемент.ТипСотрудника;
					НаборСП.Пользователь = Элемент.Сотрудник;
					НаборСП.Прочитать();
					
					Если Не НаборСП.ТипСотрудника.Пустая() Тогда
					//Есть						
						//Читаем ОтвСотр
						Набор = РегистрыСведений.ОтветственныеСотрудники.СоздатьМенеджерЗаписи();
						Набор.Объект = Элемент.Объект;
						Набор.ТипСотрудника = Элемент.ТипСотрудника;
						Набор.Прочитать();	
						
						//Меняем Польз
						Польз = Набор.Пользователь;
						Набор.Пользователь = НаборСП.Пользователь;
						НаборСП.Пользователь = Польз;
						
						//Пишем ОтвСотр
						Попытка
							Набор.Записать();
						Исключение
							Отказ = Истина;
							Возврат;
						КонецПопытки;
						
						//Пишем СотрВПом
						Попытка
							НаборСП.Записать();
						Исключение
							Отказ = Истина;
							Возврат;
						КонецПопытки;
							
					Иначе
					//Нет
						//Читаем ОтвСотр
						Набор = РегистрыСведений.ОтветственныеСотрудники.СоздатьМенеджерЗаписи();
						Набор.Объект = Элемент.Объект;
						Набор.ТипСотрудника = Элемент.ТипСотрудника;
						Набор.Прочитать();
						
						Если Константы.ТолькоОдинОтветственный.Получить() ИЛИ Набор.ТипСотрудника.Пустая() Тогда
						//Польз нет!
						    //Пишем ОтвСотр
							Набор.Объект = Элемент.Объект;
							Набор.ТипСотрудника = Элемент.ТипСотрудника;
							Набор.Пользователь = Элемент.Сотрудник;
							Попытка
								Набор.Записать();
							Исключение
								Отказ = Истина;
								Возврат;
							КонецПопытки;
							
						ИначеЕсли Набор.Пользователь <> Элемент.Сотрудник Тогда	
						//Польз есть и не совпадает
						    //Создаем СотрВПом
							НаборСП = РегистрыСведений.СотрудникиВПомощь.СоздатьМенеджерЗаписи();
							НаборСП.Объект = Элемент.Объект;
							НаборСП.ТипСотрудника = Элемент.ТипСотрудника;
							НаборСП.Пользователь = Набор.Пользователь;
							//Пишем СотрВПом
							Попытка
								НаборСП.Записать();
							Исключение
								Отказ = Истина;
								Возврат;
							КонецПопытки;
							
							//Пишем ОтвСотр
						    Набор.Пользователь = Элемент.Сотрудник;
							Попытка
								Набор.Записать();
							Исключение
								Отказ = Истина;
								Возврат;
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					//Проверяем что его уже нет в работе по двум РС
					//Добавляем в нужный РС
					Набор = РегистрыСведений.ОтветственныеСотрудники.СоздатьМенеджерЗаписи();
					Набор.Объект = Элемент.Объект;
					Набор.ТипСотрудника = Элемент.ТипСотрудника;
					Набор.Прочитать();
                    Если Константы.ТолькоОдинОтветственный.Получить() ИЛИ Набор.ТипСотрудника.Пустая() Тогда
					    Набор.Объект = Элемент.Объект;
						Набор.ТипСотрудника = Элемент.ТипСотрудника;
						Набор.Пользователь = Элемент.Сотрудник;
						
						Попытка
							Набор.Записать();
						Исключение
							Отказ = Истина;
							Возврат;
						КонецПопытки;
					ИначеЕсли Набор.Пользователь <> Элемент.Сотрудник Тогда
						Набор = РегистрыСведений.СотрудникиВПомощь.СоздатьМенеджерЗаписи();
						Набор.Объект = Элемент.Объект;
						Набор.ТипСотрудника = Элемент.ТипСотрудника;
						Набор.Пользователь = Элемент.Сотрудник;

						Попытка
							Набор.Записать();
						Исключение
							Отказ = Истина;
							Возврат;
						КонецПопытки;
					КонецЕсли;	
				КонецЕсли;		
			КонецЕсли;
			
			//
			Элемент.Выполнена = Ложь;
		КонецЕсли;
	КонецЦикла;		
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Сообщить("Документ не может быть перепроведен!");
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	Объекты.Объект,
	                      |	Объекты.Сотрудник,
	                      |	Объекты.ТипСотрудника,
	                      |	Объекты.Действие
	                      |ПОМЕСТИТЬ Объекты
	                      |ИЗ
	                      |	&Объекты КАК Объекты
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ОтветственныеСотрудники.Объект,
	                      |	ОтветственныеСотрудники.ТипСотрудника,
	                      |	ОтветственныеСотрудники.Пользователь,
	                      |	ИСТИНА КАК Главный
	                      |ПОМЕСТИТЬ ОтвСотр
	                      |ИЗ
	                      |	РегистрСведений.ОтветственныеСотрудники КАК ОтветственныеСотрудники
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	СотрудникиВПомощь.Объект,
	                      |	СотрудникиВПомощь.ТипСотрудника,
	                      |	СотрудникиВПомощь.Пользователь,
	                      |	ЛОЖЬ
	                      |ИЗ
	                      |	РегистрСведений.СотрудникиВПомощь КАК СотрудникиВПомощь
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Объекты.Объект,
	                      |	Объекты.Сотрудник КАК Сотрудник,
	                      |	Объекты.ТипСотрудника КАК ТипСотрудника,
	                      |	Объекты.Действие КАК Действие,
	                      |	ЕСТЬNULL(ОтвСотр.Главный, ЛОЖЬ) КАК БылГлавным
	                      |ИЗ
	                      |	Объекты КАК Объекты
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ОтвСотр КАК ОтвСотр
	                      |		ПО Объекты.Объект = ОтвСотр.Объект
	                      |			И Объекты.Сотрудник = ОтвСотр.Пользователь
	                      |			И Объекты.ТипСотрудника = ОтвСотр.ТипСотрудника
	                      |ГДЕ
	                      |	(Объекты.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияРаспределения.ПринятьВРаботу)
	                      |				И ОтвСотр.Объект ЕСТЬ NULL 
	                      |			ИЛИ Объекты.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияРаспределения.УбратьИзРаботы)
	                      |				И НЕ ОтвСотр.Объект ЕСТЬ NULL )
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Действие,
	                      |	Сотрудник,
	                      |	ТипСотрудника");
	Запрос.УстановитьПараметр("Объекты", Объекты.Выгрузить());					  
	Результат = Запрос.Выполнить().Выбрать();
	ТекДействие = Неопределено;
	ТекСотрудник = Неопределено;
	ТекТипСотрудника = Неопределено;
	ТекБылГлавным = Неопределено;
	ТекДок = Неопределено;
	Пока Результат.Следующий() Цикл
		Если ТекДействие <> Результат.Действие ИЛИ ТекСотрудник <> Результат.Сотрудник ИЛИ 
				ТекТипСотрудника <> Результат.ТипСотрудника ИЛИ ТекБылГлавным <> Результат.БылГлавным Тогда
			Если ТекДок <> Неопределено Тогда
				Попытка 
					ТекДок.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					Сообщить(ОписаниеОшибки());
					Отказ = Истина;
					Возврат;
				КонецПопытки;
			КонецЕсли;		
			
			ТекДействие = Результат.Действие;
			ТекСотрудник = Результат.Сотрудник;
			ТекТипСотрудника = Результат.ТипСотрудника;
			ТекБылГлавным = Результат.БылГлавным;
			
			ТекДок = Документы.АктПередачи.СоздатьДокумент();
			ТекДок.Дата = ТекущаяДатаСеанса();
			ТекДок.Организация = Организация;
			ТекДок.Автор = Ссылка;
			
			Если ТекДействие = Перечисления.ДействияРаспределения.УбратьИзРаботы Тогда
				ТекДок.СотрудникПередающий = ТекСотрудник;
				ТекДок.ПодразделениеПередающее = ТекДок.СотрудникПередающий.Подразделение;
				ТекДок.ТипСотрудникаПередающего = ТекТипСотрудника;
				ТекДок.БылГлавнымГруппы = ТекБылГлавным;
			ИначеЕсли ТекДействие = Перечисления.ДействияРаспределения.ПринятьВРаботу Тогда
				ТекДок.СотрудникПринимающий = ТекСотрудник;
				ТекДок.ПодразделениеПринимающее = ТекДок.СотрудникПринимающий.Подразделение;
				ТекДок.ТипСотрудникаПринимающего = ТекТипСотрудника;
			КонецЕсли;
		КонецЕсли;
		
		ТекДок.Объекты.Добавить().Объект = Результат.Объект;
		
		Если Результат.БылГлавным И Результат.Действие = Перечисления.ДействияРаспределения.УбратьИзРаботы Тогда
			Объекты.НайтиСтроки(Новый Структура("Объект, Сотрудник, ТипСотрудника", 
					Результат.Объект, Результат.Сотрудник, Результат.ТипСотрудника))[0].БылГлавным = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ТекДок <> Неопределено Тогда
		Попытка 
			ТекДок.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
			Отказ = Истина;
			Возврат;
		КонецПопытки;
	КонецЕсли;	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	АктПередачи.Ссылка,
	                      |	АктПередачи.ДокументОснование
	                      |ПОМЕСТИТЬ Таблица
	                      |ИЗ
	                      |	Документ.АктПередачи КАК АктПередачи
	                      |ГДЕ
	                      |	АктПередачи.Автор = &Автор
	                      |	И АктПередачи.Проведен
	                      |	И НЕ АктПередачи.ПометкаУдаления
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Таблица.Ссылка
	                      |ИЗ
	                      |	Таблица КАК Таблица
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Таблица КАК ТаблицаОсн
	                      |		ПО Таблица.Ссылка = ТаблицаОсн.ДокументОснование
	                      |ГДЕ
	                      |	ТаблицаОсн.Ссылка ЕСТЬ NULL 
	                      |	И Таблица.ДокументОснование = НЕОПРЕДЕЛЕНО");
	Запрос.УстановитьПараметр("Автор", Ссылка);			  
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Док = Документы.АктПередачи.СоздатьДокумент();
		Док.Дата = ТекущаяДатаСеанса();
		Док.Организация = Результат.Ссылка.Организация;
		Док.Автор = Ссылка;
		Док.ДокументОснование = Результат.Ссылка;
		Док.СотрудникПередающий = Результат.Ссылка.СотрудникПринимающий;
		Док.СотрудникПринимающий = Результат.Ссылка.СотрудникПередающий;
		Док.ПодразделениеПередающее = Результат.Ссылка.ПодразделениеПринимающее;
		Док.ПодразделениеПринимающее = Результат.Ссылка.ПодразделениеПередающее;
		Док.ТипСотрудникаПередающего = Результат.Ссылка.ТипСотрудникаПринимающего;
		Док.ТипСотрудникаПринимающего = Результат.Ссылка.ТипСотрудникаПередающего;
		Док.НазначитьГлавнымГруппы = Результат.Ссылка.БылГлавнымГруппы;
		
		Док.Объекты.Загрузить(Результат.Ссылка.Объекты.Выгрузить());
		
		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
			Отказ = Истина;
			Возврат;
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

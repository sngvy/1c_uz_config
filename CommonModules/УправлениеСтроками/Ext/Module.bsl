
#Область ПрограммныйИнтерфейс

#Область УправлениеШаблонами

// Нумерует параметры заданные через {} или {n},
// Максимальный номер нумерации :Ь 10
//
// Параметры:
//  Значение  - Строка - Строка содержащая не нумерованные параметры
//                 Пример: "Здравствуй {}, Сегодня у тебя {1} задач, {1} среднее количество в день"
//
// Возвращаемое значение:
//   Строка   - Строка содержащая нумерованные параметры
//                 Пример: "Здравствуй %2, Сегодня у тебя %1 задач"
//
Функция Шаблон(Знач Значение) Экспорт

	Номер = 1;
	Шаблон = Значение;
	ДоступныеНомера = Новый Массив;
	Пока Номер <= 10 Цикл
	
		Параметр = "{" + Номер + "}";
		Позиция = СтрНайти(Шаблон, Параметр);
		Если Позиция = 0 Тогда
		
			ДоступныеНомера.Добавить(Номер);
			Номер = Номер + 1;
			Продолжить;
		
		КонецЕсли;
		
		Шаблон = СтрЗаменить(Шаблон, Параметр, "%" + Номер);
		Номер = Номер + 1;
	
	КонецЦикла;
	
	Если ДоступныеНомера.Количество() = 0 Тогда
	
		Возврат Шаблон;
	
	КонецЕсли;
	Если СтрНайти(Шаблон, "{}") = 0 Тогда
	
		Возврат Шаблон;
	
	КонецЕсли;
	
	Длина = СтрДлина(Шаблон);
	ДлинаПараметра = 2;
	СтандартныйШаблон = Новый Массив;
	
	НачальнаяПозиция = 1;
	Индекс = 0;
	Пока НачальнаяПозиция < Длина Цикл
	
		Позиция = СтрНайти(Шаблон, "{}", НаправлениеПоиска.СНачала, НачальнаяПозиция, 1);
		Если Позиция = 0 Тогда
		
			Прервать;
		
		КонецЕсли;

		Темп = Сред(Шаблон, НачальнаяПозиция, Позиция - НачальнаяПозиция + ДлинаПараметра);
		Темп = СтрЗаменить(Темп, "{}", "%" + ДоступныеНомера[Индекс]);
		СтандартныйШаблон.Добавить(Темп);
		
		НачальнаяПозиция = Позиция + ДлинаПараметра;
		Индекс = Индекс + 1;
		
		Если Индекс = ДоступныеНомера.Количество() Тогда
		
			Остаток = Сред(Шаблон, НачальнаяПозиция);
			СтандартныйШаблон.Добавить(Остаток);
			Прервать;
		
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат СтрСоединить(СтандартныйШаблон, "");

КонецФункции // ()

#КонецОбласти

// В получаемой Строке раставляет пробелы
//   Пример - Тестовый_ПримерПример -> Тестовый Пример Пример
Функция РаставитьПробелы(Знач ПолучаемаяСтрока) Экспорт

	Текст = ПолучаемаяСтрока;
	
	ПервыйСимвол = "А";
	ПоследнийСимвол = "Я";
	Разница = КодСимвола("а") - КодСимвола("А");
	
	Номер = КодСимвола(ПервыйСимвол);
	Пока Номер <= КодСимвола(ПоследнийСимвол) Цикл
	
		ТекущийСимвол = Символ(Номер);
		НовыйСимвол = Символ(Номер + Разница);

		Текст = СтрЗаменить(Текст, ТекущийСимвол, " " + НовыйСимвол);
	
		Номер = Номер + 1;
	
	КонецЦикла;
	
	Текст = СтрЗаменить(Текст, "_", " ");
	Текст = СокрЛП(Текст);
	Текст = ВРег(Лев(Текст, 1)) + Сред(Текст, 2);
	
	Возврат Текст;

КонецФункции // ()

// Возвращает строку в Двоичных данных
//
// Параметры:
//  Значение  - Строка - Строковое значение для перевода
//                 в Двоичные данные
//  Кодировка  - КодировкаТекста - Системное перечисление
//             - Строка - Текстовое представление кодировки
//                          см. ЗаписатьСтроку,
//                        По умолчанию UTF-8
//
// Возвращаемое значение:
//   ДвоичныеДанные   - Конвертированная строка
//
Функция ВДвоичныеДанные(Значение, Кодировка = "UTF-8") Экспорт

	Возврат ПолучитьДвоичныеДанныеИзСТроки(
		Значение,
		Кодировка
	);

КонецФункции // ()

// Преобразует двоичные данные в формат Base64
//   Заменяет используеммые для URL символы
//
// Параметры:
//  ДвоичныеДанные  - Строка - Двоичные данные,
//                             которые необходимо закодировать
//
// Возвращаемое значение:
//   Строка   - Закодированная строка Base64 с спец символами
//                для URL safe
//
Функция ПолучитьBase64URLSafe(Знач ДвоичныеДанные, Перевернуть = Ложь) Экспорт

	Если Перевернуть Тогда
	
		ДвоичныеДанные = ПеревернутьДвоичныеДанные(ДвоичныеДанные);
	
	КонецЕсли;
	
	Результат = Base64Строка(ДвоичныеДанные);
	
	Заменяемые = Новый Соответствие;
	Заменяемые.Вставить(Символы.ПС, "");
	Заменяемые.Вставить(Символы.ВК, "");
	//Заменяемые.Вставить("=", "%3d");
	Заменяемые.Вставить("=", "");
	Заменяемые.Вставить("+", "%2b");
	Заменяемые.Вставить("/", "%2f");
	//Заменяемые.Вставить("+", "-");
	//Заменяемые.Вставить("/", "_");

	Для каждого Пара Из Заменяемые Цикл
	
		Результат = СтрЗаменить(Результат, Пара.Ключ, Пара.Значение);
	
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция Сейв(Знач Результат) Экспорт

	Заменяемые = Новый Соответствие;
	Заменяемые.Вставить(Символы.ПС, "");
	Заменяемые.Вставить(Символы.ВК, "");
	
	Заменяемые.Вставить("=", "");
	Заменяемые.Вставить("+", "%2B");
	Заменяемые.Вставить("/", "%2F");
	
	Для каждого Пара Из Заменяемые Цикл
	
		Результат = СтрЗаменить(Результат, Пара.Ключ, Пара.Значение);
	
	КонецЦикла;
	
	Возврат Результат;

КонецФункции // ()

Функция ПолучитьBase64URLSafe2(Знач ДвоичныеДанные, Перевернуть = Ложь) Экспорт

	Если Перевернуть Тогда
	
		ДвоичныеДанные = ПеревернутьДвоичныеДанные(ДвоичныеДанные);
	
	КонецЕсли;
	
	Результат = Base64Строка(ДвоичныеДанные);
	
	Заменяемые = Новый Соответствие;
	Заменяемые.Вставить(Символы.ПС, "");
	Заменяемые.Вставить(Символы.ВК, "");
	//Заменяемые.Вставить("=", "%3d");
	Заменяемые.Вставить("=", "");
	Заменяемые.Вставить("+", "%2B");
	Заменяемые.Вставить("/", "%2F");
	//Заменяемые.Вставить("+", "-");
	//Заменяемые.Вставить("/", "_");

	Для каждого Пара Из Заменяемые Цикл
	
		Результат = СтрЗаменить(Результат, Пара.Ключ, Пара.Значение);
	
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Преобразует строковое значение в формат Base64
//   Заменяет используеммые для URL символы
//
// Параметры:
//  Значение  - Строка - Строковое значение,
//                             которое необходимо закодировать
//
// Возвращаемое значение:
//   Строка   - Закодированная строка Base64 с спец символами
//                для URL safe
//
Функция ПеревестиВBase64URLSafe(Знач Значение, Кодировка = "UTF-8") Экспорт

	ДвоичныеДанные = ВДвоичныеДанные(Значение, Кодировка);
	Возврат ПолучитьBase64URLSafe(ДвоичныеДанные);

КонецФункции // ()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПеревернутьДвоичныеДанные(Значение)

	Набор = РазделитьДвоичныеДанные(Значение, 1);
	
	НовыйНабор = Новый Массив;
	Количество = Набор.Количество();
	Шаг = Количество - 1;
	Пока Шаг >= 0 Цикл
	
		НовыйНабор.Добавить(Набор[Шаг]);
		
		Шаг = Шаг - 1;
	
	КонецЦикла;
	
	Возврат СоединитьДвоичныеДанные(НовыйНабор);

КонецФункции // ()

#КонецОбласти

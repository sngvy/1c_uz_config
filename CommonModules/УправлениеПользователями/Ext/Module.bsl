
//// Процедура проверяет возможность запуска ИБ с определенными для текущего
//// пользователя доступными ролями
////
Процедура ПроверитьВозможностьРаботыПользователя(Отказ) Экспорт

	Если НЕ РольДоступна("тсАдминистрирование") Тогда
		Отказ = Истина;
		#Если Клиент Тогда
		//Чуров
		ПоказатьПредупреждение(,"У текущего пользователя нет доступных ролей, для запуска информационной базы.", 10, "Недостаточно прав доступа");
		//Предупреждение("У текущего пользователя нет доступных ролей, для запуска информационной базы.", 10, "Недостаточно прав доступа");
		#КонецЕсли
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеПоУмолчанию(Пользователь, Настройка) Экспорт

	//Если Пользователь = глЗначениеПеременной("глТекущийПользователь") Тогда		
	//	НастройкаСсылка = ПланыВидовХарактеристик.НастройкиПользователей[Настройка];		
	//	КэшНастроекПользователей = глЗначениеПеременной("ЗначенияНастроекПольователей");
	//	ЗначениеНастройки = КэшНастроекПользователей[НастройкаСсылка];
	//	Если ЗначениеНастройки = Неопределено Тогда
	//		ЗначениеНастройки = ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, Настройка);
	//		КэшНастроекПользователей[НастройкаСсылка] = ЗначениеНастройки;
	//		#Если Сервер Тогда
	//			глЗначениеПеременнойУстановить("ЗначенияНастроекПольователей", КэшНастроекПользователей, Истина);
	//		#КонецЕсли
	//	КонецЕсли;	
	//	Возврат ЗначениеНастройки;		
	//КонецЕсли;
	
	Возврат ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, Настройка);

КонецФункции // ПолучитьЗначениеПоУмолчанию()

&НаСервере
//// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
////
//// Параметры:
////  Пользователь - текущий пользователь программы
////  Настройка    - признак, для которого возвращается значение по умолчанию
////
//// Возвращаемое значение:
////  Значение по умолчанию для настройки.
////
Функция ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, Настройка) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Настройка"   , ПланыВидовХарактеристик.НастройкиПользователей[Настройка]);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК РегистрЗначениеПрав
	|
	|ГДЕ
	|	Пользователь = &Пользователь
	| И Настройка    = &Настройка";

	Выборка = Запрос.Выполнить().Выбрать();

	ПустоеЗначение = ПланыВидовХарактеристик.НастройкиПользователей[Настройка].ТипЗначения.ПривестиЗначение();

	Если Выборка.Количество() = 0 Тогда
		
		Если Настройка = "ОткрыватьПриЗапускеПанельФункций" Тогда
			Возврат Истина;
		
		ИначеЕсли Настройка = "ПоказыватьОписанияПанелиФункций" Тогда
			Возврат Ложь;
			
		КонецЕсли;
		
		Возврат ПустоеЗначение;

	ИначеЕсли Выборка.Следующий() Тогда

		Если НЕ ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат ПустоеЗначение;
		Иначе
			Возврат Выборка.Значение;
		КонецЕсли;

	Иначе
		Возврат ПустоеЗначение;

	КонецЕсли;

КонецФункции // ПолучитьЗначениеПоУмолчанию()

&НаСервере
//// Процедура записывает значение по умолчанию для передаваемого пользователя и настройки.
////
//// Параметры:
////  Пользователь - текущий пользователь программы
////  Настройка    - признак, для которого записывается значение по умолчанию
////  Значение     - значение по умолчанию
////
//// Возвращаемое значение:
////  Нет
////
Процедура УстановитьЗначениеПоУмолчанию(Пользователь, Настройка, Значение) Экспорт

	СсылкаНастройки = ПланыВидовХарактеристик.НастройкиПользователей[Настройка];
	МенеджерЗаписи = РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = Пользователь;
	МенеджерЗаписи.Настройка = СсылкаНастройки;
	МенеджерЗаписи.Значение = Значение;
	МенеджерЗаписи.Записать(Истина);

КонецПроцедуры // ПолучитьЗначениеПоУмолчанию()

&НаКлиенте
////Функция редактирует или создает нового пользователя БД
////Процедура редактирует пользователя БД
Функция РедактироватьИлиСоздатьПользователяБД(ОбъектПользователя, ТекущийПользовательБД, Знач Модифицированность = Ложь,
	Знач ПользовательДляКопированияНастроек = Неопределено) Экспорт
	
	СозданНовыйЭлемент = Ложь;
	
	Если ТекущийПользовательБД = Неопределено Тогда
		
		Если ОбъектПользователя = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ИмяПользователя = СокрЛП(ОбъектПользователя.Код);
		
		ОтветПользователя = Вопрос("Пользователь БД с именем """ + ИмяПользователя + """ не найден. Создать нового пользователя БД?", РежимДиалогаВопрос.ДаНет);
		Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// создаем нового пользователя БД
		ТекущийПользовательБД = ПользователиИнформационнойБазы.СоздатьПользователя();
		ТекущийПользовательБД.Имя = ИмяПользователя;
		ТекущийПользовательБД.ПолноеИмя = СокрЛП(ОбъектПользователя.Наименование);
		
		СозданНовыйЭлемент = Истина;		
		
	КонецЕсли;
	
	// надо показать форму редактирования настроек пользователя БД
	ФормаРедактированияПользователяБД = ПолучитьОбщуюФорму("ФормаПользователяБД");
	ФормаРедактированияПользователяБД.ПользовательБД = ТекущийПользовательБД;
	ФормаРедактированияПользователяБД.ПользовательДляКопированияНастроек = ПользовательДляКопированияНастроек;
	ФормаРедактированияПользователяБД.Модифицированность = Модифицированность ИЛИ СозданНовыйЭлемент;
	ФормаРедактированияПользователяБД.Пользователь = ОбъектПользователя;
	
	РезультатОткрытия = ФормаРедактированияПользователяБД.ОткрытьМодально();
	
	Возврат РезультатОткрытия;
	
КонецФункции

&НаСервере
Процедура ИнформироватьОИзмененииНастроекПравАктивныхПользователей(НаборЗаписей, СохраненныеЗначения, ИмяЗначащегоПоля, 
																   ТекущийПользователь, ТекстСообщеннияОбИзменениях, 
																   ОбновлятьЗначениеГлПеременной, УстанавливатьНовоеЗначение = Истина) Экспорт
	
	МассивПользователей = Новый Массив;
	МассивГруппПользователей = Новый Массив;
	
	ОбновлятьЗначениеГлПеременной = Ложь;
	ТипЗнчПользователь = ТипЗнч(Справочники.Пользователи.ПустаяСсылка());
		
	Для Каждого Запись Из НаборЗаписей Цикл
		Если Запись.Пользователь = ТекущийПользователь Тогда
			Если УстанавливатьНовоеЗначение Тогда
				СохраненныеЗначения[Запись[ИмяЗначащегоПоля]] = Запись.Значение;
			Иначе
				СохраненныеЗначения.Удалить(Запись[ИмяЗначащегоПоля]);
			КонецЕсли;
			ОбновлятьЗначениеГлПеременнойНаСервере = Истина;
		Иначе
			Если ТипЗнч(Запись.Пользователь) = ТипЗнчПользователь Тогда
	            Массив = МассивПользователей;
			Иначе
				Массив = МассивГруппПользователей;
			КонецЕсли;
			Если Массив.Найти(Запись.Пользователь) = Неопределено Тогда
				Массив.Добавить(Запись.Пользователь);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
			
	Если МассивПользователей.Количество() > 0 ИЛИ МассивГруппПользователей.Количество() > 0  Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ Код, Ссылка
		|ИЗ Справочник.Пользователи 
		|ГДЕ Ссылка В (&МассивПользователей)
		|ИЛИ Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ Пользователь ИЗ Справочник.ГруппыПользователей.ПользователиГруппы ГДЕ Ссылка В(&МассивГруппПользователей))";
		Запрос.УстановитьПараметр("МассивПользователей", МассивПользователей);
		Запрос.УстановитьПараметр("МассивГруппПользователей", МассивГруппПользователей);
		
		ТаблицаПользователей = Новый ТаблицаЗначений;
		ТаблицаПользователей.Колонки.Добавить("Код");
		ТаблицаПользователей.Индексы.Добавить("Код");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Ссылка = ТекущийПользователь Тогда
				СохраненныеЗначения = Новый Соответствие;
				ОбновлятьЗначениеГлПеременнойНаСервере = Истина;
				Продолжить;
			КонецЕсли;
			СтрокаПользователя = ТаблицаПользователей.Добавить();
			СтрокаПользователя.Код = СокрЛП(Выборка.Код);			
		КонецЦикла;		
		
		МассивПользователей.Очистить();
		МассивСоединений = ПолучитьСоединенияИнформационнойБазы();
		НомерТекущегоСоединения = НомерСоединенияИнформационнойБазы();
		
		Для каждого Соединение ИЗ МассивСоединений Цикл					
			Если Соединение.ИмяПриложения <> "Designer" 
				И Соединение.НомерСоединения <> НомерТекущегоСоединения
				И ТаблицаПользователей.Найти(Соединение.Пользователь.Имя, "Код") <> Неопределено Тогда
					МассивПользователей.Добавить(Соединение.Пользователь.Имя);
			КонецЕсли;		
		КонецЦикла;			
		
		Если МассивПользователей.Количество() > 0 Тогда
			Сообщить("Были изменены " + ТекстСообщеннияОбИзменениях + " пользователей, которые в данный момент работают с ИБ");
			СписокПользователей = "";
			Для Каждого Пользователь ИЗ МассивПользователей Цикл
				СписокПользователей = СписокПользователей + ?(СписокПользователей = "", "(", " ;") + Пользователь;
			КонецЦикла;
			СписокПользователей = СписокПользователей + ")";
			Сообщить(СписокПользователей);			
			Сообщить("Для них новые значения вступят в силу только после перезапуска их сеанса работы с программмой");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция по имени ищет пользователя БД, если не находит - создает нового и его возвращает
// Параметры:
//	ИмяПользователя - строка по которой ищется пользователь БД
//  ПолноеИмяПользователя - строка, при добавлении пользователя БД таким будет установлено полное имя пользователя
//	СообщатьОДобавленииПользователя - Булево, нужно ли сообщать о добавлении нового пользователя БД
//	ЗаписатьПользователяВБД - Нужно ли при добавлении пользователя записывать его
Функция НайтиПользователяБД(ИмяПользователя) Экспорт
	
	Если ИмяПользователя = "НеАвторизован" Тогда
		ПользовательИБ = Неопределено
	Иначе
		// ищем пользователя БД по имени
		Попытка
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
		Исключение
			ПользовательИБ = Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ПользовательИБ;
КонецФункции

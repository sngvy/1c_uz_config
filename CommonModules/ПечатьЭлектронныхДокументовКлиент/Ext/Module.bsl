
Процедура Печать(ОбъектСсылка, ИмяКнопки) Экспорт
	Таблица = УЭДСервер.ПолучитьШаблон(ОбъектСсылка, ИмяКнопки);
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = "Выберите каталог для сохренения документа";
	Диалог.МножественныйВыбор = Ложь;
	
	Если Диалог.Выбрать() Тогда
		Таблица.Вставить("КаталогПоУмолчанию", Диалог.Каталог);
	Иначе
		Возврат;
	КонецЕсли;
	Таблица.Вставить("ИмяФайла", "");
	СформироватьДокументПриРаботеВФормеРегистра(Таблица, Ложь);
КонецПроцедуры

// Процедура используется для формирования документов с использованием поля РегистрСведенийНаборЗаписей.тсПечатныеДокументы 
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Процедура СформироватьДокументПриРаботеВФормеРегистра(ТекущиеДанные = Неопределено, ПрикрепитьФайлы, 
		СтрокаТаблициПлатежиЛП = Неопределено, Печатать = Ложь, ГлобальнаяСклейка = Ложь, МассивФайлов=Неопределено, НеПечататьПовторно=Ложь)
			
	МассивФайлов = Новый Массив;	
		
	// 1. ПРОВЕРКА
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли ОбъектыСервер.РазыменоватьСсылку(ТекущиеДанные.ВидПечатногоДокумента, "ШаблоныПечатныхФорм.Количество()") = 0 Тогда
		Если ОбъектыСервер.РазыменоватьСсылку(ТекущиеДанные.ВидПечатногоДокумента, "ЭтоГруппа") = Ложь Тогда
			Сообщить("Для данного печатного документа не задан шаблон", СтатусСообщения.Внимание);
			Возврат; 		
		КонецЕсли;     				
	ИначеЕсли ТекущиеДанные.КаталогПоУмолчанию = ""  Тогда
		Сообщить("Для создания документа должен быть задан Каталог по умолчанию", СтатусСообщения.Внимание); 
		Возврат;
	КонецЕсли;
		
	// 2.1 ШАБЛОНЫ
	ВидПечатногоДокумента = ТекущиеДанные.ВидПечатногоДокумента;
	Объект = ТекущиеДанные.Объект;
	КаталогПоУмолчанию = ТекущиеДанные.КаталогПоУмолчанию;
	
	МассивДокументовНаПечать = Новый Массив;
	СтруктураРезультат = ОбработкаПутейИГенерацияДокументов(Объект, ВидПечатногоДокумента, КаталогПоУмолчанию, 
	СтрокаТаблициПлатежиЛП, МассивДокументовНаПечать, ГлобальнаяСклейка, ПрикрепитьФайлы,НеПечататьПовторно);
	Если ГлобальнаяСклейка Тогда
		МассивФайлов = СтруктураРезультат.МассивФайлов;
	КонецЕсли;
				
	Если НЕ ГлобальнаяСклейка Тогда
		
		Если СтруктураРезультат <> Неопределено Тогда
			ИмяФайла = СтруктураРезультат.ИмяФайла;
			ИмяКаталога = СтруктураРезультат.ИмяКаталога;
			ТекущиеДанные.ИмяФайла = ИмяФайла;	
		Иначе
			ИмяКаталога = "";
			ТекущиеДанные.ИмяФайла = Неопределено;	
		КонецЕсли;

		// 2.2 ПЕЧАТЬ ШАБЛОНОВ
		РезультатПечати = ПечатьДокументаWORD(МассивДокументовНаПечать, Печатать);
		Если РезультатПечати = Истина Тогда
			Сообщить("Печать прошла удачно!");
		ИначеЕсли РезультатПечати = Ложь Тогда
			Сообщить("Возникли проблемы при печати документов. Документы не распечатаны.");
		КонецЕсли;
		Если РезультатПечати <> Неопределено Тогда
			Для Каждого Стр Из МассивДокументовНаПечать Цикл
				Сообщить(Стр.ПутьКФайлу + " распечатано " + Стр.КоличествоРаспечатано + " из " + Стр.КоличествоКопий);
			КонецЦикла;
		КонецЕсли;
		
		// 3.1 ПРИКРЕПЛЕННЫЕ ФАЙЛЫ
		Если Не ЗначениеЗаполнено(ИмяКаталога) Тогда
			ИмяКаталога_Имя = ОбъектыСервер.РазыменоватьСсылку(ВидПечатногоДокумента, "Наименование") + " - " + 
			ОбъектыСервер.РазыменоватьСсылку(Объект, "Метаданные().Синоним");	   
			ИмяКаталога = СформироватьКаталогДляГрупп(КаталогПоУмолчанию, Объект, ИмяКаталога_Имя);
			Если тсПроверитьСуществованиеКаталога(ИмяКаталога) = Ложь Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ВозвращаемаяСтруктура = Новый Структура;
		Массив_НаПечать = Новый Массив;
		СохранитьПрикрепленныеФайлыВКаталог(Объект, ВидПечатногоДокумента, ИмяКаталога, ВозвращаемаяСтруктура, 
		Массив_НаПечать);
		
		// 3.2 ПЕЧАТЬ ПРИКРЕПЛЕННЫХ ФАЙЛОВ
		РезультатПечати = ПечатьДокументаWORD(Массив_НаПечать, Печатать);
		Если РезультатПечати = Истина Тогда
			Сообщить("Печать прошла удачно!");
		ИначеЕсли РезультатПечати = Ложь Тогда
			Сообщить("Возникли проблемы при печати ПРИКРЕПЛЕННЫХ ФАЙЛОВ. Прикрепленные файлы не распечатаны.");
		КонецЕсли;
		Если РезультатПечати <> Неопределено Тогда
			Для Каждого Стр Из МассивДокументовНаПечать Цикл
				Сообщить(Стр.ПутьКФайлу + " распечатано " + Стр.КоличествоРаспечатано + " из " + Стр.КоличествоКопий);
			КонецЦикла;
		КонецЕсли;	
		
	КонецЕсли;		
КонецПроцедуры

Процедура СохранитьПрикрепленныеФайлыВКаталог(Объект, ВидПечатногоДокумента, ПутьДляПакетаДокументов, 
		ВозвращаемаяСтруктура, Массив_НаПечать)	
	МассивКоличествоКопий = Новый Массив;
	МассивПрикреплятьДокумент = Новый Массив;
	МассивРегистрироватьИсходящий = Новый Массив;
	МассивРезультат = ПрикреплениеСервер.ШаблонПечатнойФормыУЭДСервер(ВидПечатногоДокумента, Объект, МассивКоличествоКопий, МассивПрикреплятьДокумент, МассивРегистрироватьИсходящий, 
			"Справочник.КомплектыФайловДляПечати");	
	//МассивРезультат = УЭДСервер.ШаблонПечатнойФормыУЭДСервер(ВидПечатногоДокумента, Объект, МассивКоличествоКопий, 
	//		"Справочник.КомплектыФайловДляПечати");
	
	Количество = МассивРезультат.Количество();	
	
	МассивПечать_DOC = Новый Массив;
	МассивПечать_DOC_КоличествоКопий = Новый Массив;
	МассивПечать_EXCEL = Новый Массив;
	МассивПечать_EXCEL_КоличествоКопий = Новый Массив;
	Расширение = ПолучитьРасширение();
	
	Для й = 1 ПО Количество Цикл

		Комплект = МассивРезультат[й-1].Шаблон;
		ИмяКомплекта = ОбъектыСервер.РазыменоватьСсылку( МассивРезультат[й-1].Шаблон,"Наименование");
		
		КаталогКоторыйПотомНадоУдалить = "";
		ТЗ_Файлы = ПолучитьСписокПрикрепляемыхФайлов(Объект, Комплект, КаталогКоторыйПотомНадоУдалить);
		
		ИмяКаталога_Вложенный = ПутьДляПакетаДокументов + "\" + ИмяКомплекта;			
		ФайлКаталога = Новый Файл(ИмяКаталога_Вложенный);			
		СоздатьКаталог(ФайлКаталога.ПолноеИмя);	  

		Если тсПроверитьСуществованиеКаталога(ИмяКаталога_Вложенный) = Ложь Тогда
			Продолжить;
		КонецЕсли;

		ИмяФайлаСлияния_DOC = ИмяКаталога_Вложенный + "\" + й + Расширение;
		Если СохранитьПрикрепленныеФайлыВWord(ТЗ_Файлы, ИмяФайлаСлияния_DOC) Тогда
			МассивПечать_DOC.Добавить(ИмяФайлаСлияния_DOC);	
			МассивПечать_DOC_КоличествоКопий.Добавить(МассивКоличествоКопий[й-1]);
		КонецЕсли;

		// Может нету смысла делить файлы на ВОРД и ЕКСЕЛЬ, т.к. для печати тип файла не важен
       	СохранитьПрикрепленныеФайлыВExcel(ТЗ_Файлы, ИмяКаталога_Вложенный, МассивПечать_DOC, 
				МассивПечать_DOC_КоличествоКопий, Количество);
		
		Если ЗначениеЗаполнено(КаталогКоторыйПотомНадоУдалить) Тогда
			УдалитьФайлы(КаталогКоторыйПотомНадоУдалить);		
		КонецЕсли;
	КонецЦикла;	
	
	ВозвращаемаяСтруктура = Новый Структура;
	ВозвращаемаяСтруктура.Вставить("МассивПечать_DOC", МассивПечать_DOC);
	ВозвращаемаяСтруктура.Вставить("МассивПечать_DOC_КоличествоКопий", МассивПечать_DOC_КоличествоКопий);
	ВозвращаемаяСтруктура.Вставить("МассивПечать_EXCEL", МассивПечать_EXCEL);
	ВозвращаемаяСтруктура.Вставить("МассивПечать_EXCEL_КоличествоКопий", МассивПечать_EXCEL_КоличествоКопий);
	
	Колво = МассивПечать_DOC.Количество();
	Для й = 1 По Колво Цикл
		Структура = Новый Структура;
		Структура.Вставить("ПутьКФайлу", МассивПечать_DOC[й-1]);
		Структура.Вставить("КоличествоКопий", МассивПечать_DOC_КоличествоКопий[й-1]);
		Структура.Вставить("КоличествоРаспечатано", 0);
		
		ФайлФизический = Новый Файл(МассивПечать_DOC[й-1]);
		Если ФайлФизический.Существует() тогда
			
			Сообщить("Создан файл "  + МассивПечать_DOC[й-1]);
			
			Массив_НаПечать.Добавить(Структура);
			Если ОбъектыСервер.РазыменоватьСсылку(ВидПечатногоДокумента,"ОткрыватьПослеФормирования") Тогда
				Попытка
					ЗапуститьПриложение(МассивПечать_DOC[й-1]);
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


Процедура СохранитьПрикрепленныеФайлыВКаталог_ГлобальнаяСклейка(Объект, ВидПечатногоДокумента, ПутьДляПакетаДокументов, 
		ВозвращаемаяСтруктура, Массив_НаПечать, ГлобальнаяСклейка=Ложь)	
	МассивКоличествоКопий = Новый Массив;
	МассивПрикреплятьДокумент = Новый Массив;
	МассивРегистрироватьИсходящий = Новый Массив;
	МассивРезультат = ПрикреплениеСервер.ШаблонПечатнойФормыУЭДСервер(ВидПечатногоДокумента, Объект, МассивКоличествоКопий, МассивПрикреплятьДокумент, МассивРегистрироватьИсходящий,
			"Справочник.КомплектыФайловДляПечати");	
	//МассивРезультат = УЭДСервер.ШаблонПечатнойФормыУЭДСервер(ВидПечатногоДокумента, Объект, МассивКоличествоКопий, 
	//		"Справочник.КомплектыФайловДляПечати");
	
	Количество = МассивРезультат.Количество();	
	
	МассивПечать_DOC = Новый Массив;
	МассивПечать_DOC_КоличествоКопий = Новый Массив;
	МассивПечать_EXCEL = Новый Массив;
	МассивПечать_EXCEL_КоличествоКопий = Новый Массив;
	Расширение = ПолучитьРасширение();
	
	Если ГлобальнаяСклейка Тогда
		
	КонецЕсли;
	
	Для й = 1 ПО Количество Цикл

		Комплект = МассивРезультат[й-1];
		ИмяКомплекта = МассивРезультат[й-1].Наименование;
		
		КаталогКоторыйПотомНадоУдалить = "";
		ТЗ_Файлы = ПолучитьСписокПрикрепляемыхФайлов(Объект, Комплект, КаталогКоторыйПотомНадоУдалить);
		
		ИмяКаталога_Вложенный = ПутьДляПакетаДокументов + "\" + ИмяКомплекта;			
		ФайлКаталога = Новый Файл(ИмяКаталога_Вложенный);			
		СоздатьКаталог(ФайлКаталога.ПолноеИмя);	  

		Если тсПроверитьСуществованиеКаталога(ИмяКаталога_Вложенный) = Ложь Тогда
			Продолжить;
		КонецЕсли;

		//ИмяФайлаСлияния_DOC = ИмяКаталога_Вложенный + "\" + й + ".doc";    
		ИмяФайлаСлияния_DOC = ПутьДляПакетаДокументов + "_" + ОбъектыСервер.РазыменоватьСсылку(Объект, "Номер")+ "_" + ИмяКомплекта + Расширение;
		Если СохранитьПрикрепленныеФайлыВWord(ТЗ_Файлы, ИмяФайлаСлияния_DOC) Тогда
			МассивПечать_DOC.Добавить(ИмяФайлаСлияния_DOC);	
			МассивПечать_DOC_КоличествоКопий.Добавить(МассивКоличествоКопий[й-1]);
		КонецЕсли;

		// Может нету смысла делить файлы на ВОРД и ЕКСЕЛЬ, т.к. для печати тип файла не важен
       	СохранитьПрикрепленныеФайлыВExcel(ТЗ_Файлы, ИмяКаталога_Вложенный, МассивПечать_DOC, 
				МассивПечать_DOC_КоличествоКопий, Количество);
		
		Если ЗначениеЗаполнено(КаталогКоторыйПотомНадоУдалить) Тогда
			УдалитьФайлы(КаталогКоторыйПотомНадоУдалить);		
		КонецЕсли;
	КонецЦикла;	
	
	ВозвращаемаяСтруктура = Новый Структура;
	ВозвращаемаяСтруктура.Вставить("МассивПечать_DOC", МассивПечать_DOC);
	ВозвращаемаяСтруктура.Вставить("МассивПечать_DOC_КоличествоКопий", МассивПечать_DOC_КоличествоКопий);
	ВозвращаемаяСтруктура.Вставить("МассивПечать_EXCEL", МассивПечать_EXCEL);
	ВозвращаемаяСтруктура.Вставить("МассивПечать_EXCEL_КоличествоКопий", МассивПечать_EXCEL_КоличествоКопий);
	
	Колво = МассивПечать_DOC.Количество();
	Для й = 1 По Колво Цикл
		Структура = Новый Структура;
		Структура.Вставить("ПутьКФайлу", МассивПечать_DOC[й-1]);
		Структура.Вставить("КоличествоКопий", МассивПечать_DOC_КоличествоКопий[й-1]);
		Структура.Вставить("КоличествоРаспечатано", 0);
		
		Сообщить("Создан файл "  + МассивПечать_DOC[й-1]);

		Массив_НаПечать.Добавить(Структура);
		Если ВидПечатногоДокумента.ОткрыватьПослеФормирования Тогда
			Попытка
				ЗапуститьПриложение(МассивПечать_DOC[й-1]);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


Процедура ПечатьОбработка(Объект, Печатать = Ложь, ПрикрепитьФайлы) Экспорт
	Таблица = Новый Структура("Объект, ВидПечатногоДокумента", Объект.Объект, Объект.Шаблон);

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = "Выберите каталог для сохранения документа...";
	Диалог.МножественныйВыбор = Ложь;
	
	Если Диалог.Выбрать() Тогда
		Таблица.Вставить("КаталогПоУмолчанию", Диалог.Каталог);
		Таблица.Вставить("ИмяФайла", "Шаблон.doc");
		СформироватьДокументПриРаботеВФормеРегистра(Таблица,ПрикрепитьФайлы,, Печатать);
	КонецЕсли;	
КонецПроцедуры

Процедура ПечатьОбъекты(МассивОбъект, Шаблон, ДокСсылка, Каталог_ПретензионноеПисьмо="", ПрикрепитьФайлы) Экспорт
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = "Выберите каталог для сохранения документа...";
	Диалог.МножественныйВыбор = Ложь;
	
	МассивПутейДокументов = Новый Массив;
	Если Диалог.Выбрать() Тогда
		
		Каталог_ПретензионноеПисьмо = Диалог.Каталог + "\Формирование претензионных писем №" + ДокСсылка.Номер + " от " + Формат(ДокСсылка.Дата, "ДФ=dd.MM.yyyy");    
		//Каталог_ПретензионноеПисьмо = Диалог.Каталог + "\Формирование претензионных писем №" + ДокСсылка.Номер + " от " + ДокСсылка.Дата;    
		Если тсПроверитьСуществованиеКаталога(Каталог_ПретензионноеПисьмо) = Истина Тогда
			Ответ = Вопрос("В выбранно каталоге уже существует папка с именем """ + Каталог_ПретензионноеПисьмо + """. Будет удалена папка и все ее содержимое. Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			УдалитьФайлы(Каталог_ПретензионноеПисьмо);
		КонецЕсли;
		СоздатьКаталог(Каталог_ПретензионноеПисьмо);	
        ИмяКаталога = Каталог_ПретензионноеПисьмо;
		
		
		Если ДокСсылка.СклеитьВОдинФайл Тогда
			ВременныйКаталог = Каталог_ПретензионноеПисьмо + "\ГлобальнаяСклейка"; 
			Если тсПроверитьСуществованиеКаталога(ВременныйКаталог) = Истина Тогда
				УдалитьФайлы(ВременныйКаталог);
			КонецЕсли;
			СоздатьКаталог(ВременныйКаталог);
			ИмяКаталога = ВременныйКаталог;
		КонецЕсли;
		
		МассивФайловСклейки = Новый Массив;
		Для Каждого Объект Из МассивОбъект Цикл
			МассивВспомогательный = Новый Массив;
			//Таблица = Новый Структура("Объект, ВидПечатногоДокумента, КаталогПоУмолчанию, ИмяФайла", Объект, Шаблон, Диалог.Каталог, "Шаблон.doc");
			Таблица = Новый Структура("Объект, ВидПечатногоДокумента, КаталогПоУмолчанию, ИмяФайла", Объект, Шаблон, ИмяКаталога, "Шаблон.doc");
			СформироватьДокументПриРаботеВФормеРегистра(Таблица, ПрикрепитьФайлы,,, Истина, МассивВспомогательный,ДокСсылка.НеПечататьПовторно);
			Для Каждого Эл Из МассивВспомогательный ЦИкл
				МассивФайловСклейки.Добавить(Эл);
			КонецЦикла;
		КонецЦикла;
		//Если Не ДокСсылка.СклеитьВОдинФайл И ДокСсылка.ПрикрепитьФайлы Тогда
		//	Прикрепление = Документы.ПрикрепитьФайлы.СоздатьДокумент();
		//	Прикрепление.Организация = ДокСсылка.Организация;
		//	Прикрепление.Автор = ДокСсылка.Автор;
		//КонецЕсли;	
	КонецЕсли;
	Расширение = ПолучитьРасширение();
	Если ДокСсылка.СклеитьВОдинФайл Тогда
    	ИмяФайлаСлияния = Каталог_ПретензионноеПисьмо + "\Формирование претензионных писем №" + ДокСсылка.Номер + " от " + 
				Формат(ДокСсылка.Дата, "ДФ=dd.MM.yyyy") + Расширение;					
		Если СклеитьФайлы(ВременныйКаталог, ИмяФайлаСлияния, МассивФайловСклейки) = Ложь Тогда
			Сообщить("Произошла ошибка при формировании файлов. Операция прервана.");
		КонецЕсли;
        УдалитьФайлы(ВременныйКаталог);
	КонецЕсли;		
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Проверяет наличие каталога на диске и предлагает создать, если каталога не существует.
	//
	// Параметры
	//  ИмяКаталога  – Строка, содержащая путь к каталогу файла на диске.
	//
	// Возвращаемое значение:
	//   Булево – Истина, если каталог существует или создан, Ложь, если каталога нет.
	//
Функция тсПроверитьСуществованиеКаталога(ИмяКаталога)
	КаталогНаДиске = Новый Файл(ИмяКаталога);
	Если КаталогНаДиске.Существует() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;		
КонецФункции // тсПроверитьСуществованиеКаталога()

// Создает и обрабатывает временные файлы и создает из них единый файл, путь к которому
// данная функция и возвращает.
//
// Параметры:
//  Пакет					- Булево		- признак пакетного создания,
//  ШаблонСсылка	 		– Справочник 	– Справчник шаблона,
//  Объект					– ДокументСсылка, СправочникСылка	 	
//							– Документ на основании которого строится файл Word,
//  КаталогПоУмолчанию		- Строка	    - место для сохранения файла,
//	ВидПечатногоДокумента	- Справочник	- вид печатного документа,
//  КолСтрокТЧ				- Число			- количество строк в ТЧ,
//  КомпонентаСклонения     - ВнешняяКомпонента - склоняет ФИО в указанном падеже,
//
// Возвращаемое значение:
//   <Строка>   – Полное имя  файла слияния.
//
Функция	СоздатьИОбработатьВременныеФайлы(Пакет, КолСтрокТЧ, ВидПечатногоДокумента, КаталогПоУмолчанию, ШаблонСсылка,
		Объект, КомпонентаСклонения, ТЧОбъекта, ВыборкаСвойств, тзТаблицаДляВставки, ПутьДляПакетаДокументов_Итоговый=Неопределено, ПрикрепитьФайлы)					
	ПутьДляПакетаДокументов = КаталогПоУмолчанию + "\TMP";                                        
    СоздатьКаталог(ПутьДляПакетаДокументов);				
	Если тсПроверитьСуществованиеКаталога(ПутьДляПакетаДокументов) = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;  
	УдалитьФайлы(ПутьДляПакетаДокументов, "*.doc");
	
	///*****
	// Создаем отдельный каталог для файла-склейки
	ИмяКаталога_Итоговый =  ОбъектыСервер.РазыменоватьСсылку(ВидПечатногоДокумента,"Наименование") + " - " + ОбъектыСервер.РазыменоватьСсылку(Объект, "Метаданные().Синоним");	   
	ПутьДляПакетаДокументов_Итоговый = СформироватьКаталогДляГрупп(КаталогПоУмолчанию, Объект, ИмяКаталога_Итоговый);
	Если тсПроверитьСуществованиеКаталога(ПутьДляПакетаДокументов_Итоговый) = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	///*****
	
	// Открываем приложение MS Word.
	//УспешностьЗавершенияКомпоненты = ДрайверКомпоненты.ОткрытьWord(Ложь);	
	//Если УспешностьЗавершенияКомпоненты = Ложь Тогда
	//	Сообщить("Невозможно открыть MS Word. Возможно Word не установлен.", СтатусСообщения.ОченьВажное); 
	//	Возврат Неопределено;						
	//КонецЕсли;

	Visible = False;
	Сообщить("----------- Создаются временные документы -----------"); 
	
	СчетчикПрефикса = 0;
	// Для реквизитов рассылки.
	Если Пакет = Ложь Тогда
		Для ТекСтр = 1 По КолСтрокТЧ Цикл		
			СчетчикПрефикса = СчетчикПрефикса + 1;								
			Префикс = УниверсальныйНумератор(СчетчикПрефикса, 3, "0", "-");
			
			//Генерируется документ 									
			БезРассылки = Ложь;  					
			ИмяФайла = СгенерироватьШаблон(ШаблонСсылка, Объект, ПутьДляПакетаДокументов, ТекСтр - 1, БезРассылки, 
					КомпонентаСклонения, Префикс, ВыборкаСвойств, тзТаблицаДляВставки, ПрикрепитьФайлы);
			
			УспешностьЗавершенияКомпоненты = ДрайверКомпоненты.СохранитьАттрибуты();
			Если УспешностьЗавершенияКомпоненты = Ложь Тогда
				Сообщить("Ошибка сохранения атрибутов страницы!", СтатусСообщения.Важное); 
				//Возврат Неопределено;						
			КонецЕсли;  
			
			ЧтоЗакрыть = 0;
			ЗакрытьДокументИWord(ЧтоЗакрыть);   
		КонецЦикла;
	
	// Пакетное создание.
	Иначе	
		Для Каждого Эл Из КолСтрокТЧ Цикл
			//Генерируется документ 
			Если НЕ ЗначениеЗаполнено(ОбъектыСервер.РазыменоватьСсылку(Эл.Шаблон, "Шаблон")) Тогда
				Сообщить("Не загружен шаблон в печатную форму " + Строка(Эл) + "!");
				Продолжить;
			КонецЕсли;
					
			ВыборкаСвойств = "";		
			СчетчикПрефикса = СчетчикПрефикса + 1;									
			Префикс = УниверсальныйНумератор(СчетчикПрефикса, 3, "0", "-");
				
			ИндексСтроки = Неопределено;
			БезРассылки = Истина;
			ИмяФайла = СгенерироватьШаблон(Эл, Объект, ПутьДляПакетаДокументов, ИндексСтроки, БезРассылки, КомпонентаСклонения,
					Префикс, ВыборкаСвойств, тзТаблицаДляВставки, ПрикрепитьФайлы);
			//УспешностьЗавершенияКомпоненты = ДрайверКомпоненты.СохранитьАттрибуты();
			//	
			//Если УспешностьЗавершенияКомпоненты = Ложь Тогда
			//	Сообщить("Ошибка сохранения атрибутов страницы!", СтатусСообщения.Важное); 		
			//КонецЕсли;
				
			ЧтоЗакрыть = 0;
			ЗакрытьДокументИWord(ЧтоЗакрыть);
		
		КонецЦикла;
	КонецЕсли;         
			
	Сообщить("-------- Конец создания временных документов --------"); 
	   
	Visible = True;
	ЧитатьАтрибуты = Истина;
	СтрокаПоискаФайлов = ПутьДляПакетаДокументов_Итоговый + "\*.doc"; 
	ИмяФайлаКаталога = ОбъектыСервер.РазыменоватьСсылку(Объект, "Метаданные().Синоним");					                                               
	ИмяФайлаСлияния = СформироватьИмяФайлаДляСлияния(Объект, ПутьДляПакетаДокументов_Итоговый, ИмяФайлаКаталога);
	ИмяФайлаСлияния = СтрЗаменить(ИмяФайлаСлияния, "/", "-");

	УспешностьЗавершенияКомпоненты = СклеитьФайлы(ПутьДляПакетаДокументов, ИмяФайлаСлияния);
	
	Если УспешностьЗавершенияКомпоненты = Ложь Тогда
		Сообщить("Невозможно создать объединенный документ." + ИмяФайлаСлияния, СтатусСообщения.Важное); 										
	Иначе
		Сообщить("Создан единый документ: " + ИмяФайлаСлияния, СтатусСообщения.Информация); 	
	КонецЕсли;
	
	//ДрайверКомпоненты.ОчиститьАттрибуты();
	//
	//УспешностьЗавершенияКомпоненты = ДрайверКомпоненты.УдалитьКаталог(ПутьДляПакетаДокументов + "\");
	//Если УспешностьЗавершенияКомпоненты = Ложь Тогда
	//	Сообщить("Невозможно удалить временную папку документ.", СтатусСообщения.Важное); 										
	//КонецЕсли;
	Попытка
		УдалитьФайлы(ПутьДляПакетаДокументов+"\"); 
	Исключение
		Сообщить("Невозможно удалить временную папку документ.", СтатусСообщения.Важное);
	КонецПопытки; 

	ЗакрытьДокументИWord(2);
	Если ОбъектыСервер.РазыменоватьСсылку(ВидПечатногоДокумента,"ОткрыватьПослеФормирования") И ОбъектыСервер.РазыменоватьСсылку(ВидПечатногоДокумента,"СклеиватьВОдинФайл") Тогда
		ОткрытьИПоказатьДокументWord(ИмяФайлаСлияния);  		
	КонецЕсли;	
	Возврат ИмяФайлаСлияния;			
КонецФункции

// Формирует свободное имя файла.
// 
// Параметры:
//  ВызывающийДокумент		– ДокументСсылка, СправочникСылка	 	
//							– Документ на основании которого строится файл Word,
//  КаталогПоУмолчанию		- Строка	    - место для сохранения файла,
//	ИмяФайла				- Строка		- "тело" названия файла без идентификаторов.
//
// Возвращаемое значение:
//   <Строка>   – Полное имя файла.
//
Функция СформироватьИмяФайлаДляСлияния(ВызывающийДокумент, КаталогПоУмолчанию, ИмяФайла)
	ИмяКаталогФайл = Новый Файл(ИмяФайла);

	Если УЭДСервер.ПолучитьТипОбъекта(ВызывающийДокумент) = "Справочник" Тогда
		ИдентификаторОбъекта = "_" + СокрЛП(ОбъектыСервер.РазыменоватьСсылку(ВызывающийДокумент, "Код"));
	Иначе
		ИдентификаторОбъекта = "_" + СокрЛП(ВызывающийДокумент.Номер) + "_" + 
				Формат(ВызывающийДокумент.Дата, "ДФ=yyyy-MM-dd");	
	КонецЕсли;
	Расширение = ПолучитьРасширение();
	ИмяФайлаШаблона = ИмяКаталогФайл.ИмяБезРасширения + ИдентификаторОбъекта;	
	Для й = 1 По 999999 Цикл					
		ИмяФайлаДокумента = ИмяФайлаШаблона + "-" + Строка(й) + Расширение;					
		НайденныеФайлы = НайтиФайлы(КаталогПоУмолчанию, ИмяФайлаШаблона + "-" + Строка(й) + Расширение);					
		Если НЕ НайденныеФайлы.Количество() Тогда
			ИмяЦелевогоФайла = КаталогПоУмолчанию + "\" + ИмяФайлаДокумента;
			Прервать;
		КонецЕсли;					
	КонецЦикла; 
	
	Возврат ИмяЦелевогоФайла;	
КонецФункции

//Обеспечивает генерацию лидирующих символов необходимой разрядности.
//
// Параметры:
//	НомерДокумента		- Число		- числовой номер документа,
//	Разрядность			- Число		- количество разрядов в формируемом номере,
//	ЛидирующийСимвол    - Строка 	- символ который будет выводится перед числовой
//									составляющей номера,
//	КонечныйСимвол		- Строка	- символ который будет добавлен к хвосту формируемого
//									номера.
// Возвращаемое значение:
//	Строка	- сформированный номер.
//
Функция УниверсальныйНумератор(НомерДокумента, Разрядность, ЛидирующийСимвол, КонечныйСимвол)
	//ДлинаСтроки = СтрДлина(НомерДокумента);	
	//Если ДлинаСтроки < Разрядность Тогда		
	//	СколькоНулей = Разрядность - ДлинаСтроки;
	//	Для ТекНоль = 1 По СколькоНулей Цикл
	//		НаборНулей = ЛидирующийСимвол + НаборНулей;
	//	КонецЦикла;
	//КонецЕсли;
	//
	//Результат = Строка(НаборНулей) + Строка(НомерДокумента) + Строка(КонечныйСимвол);
	//Возврат Результат;
	
	Стр = СтрЗаменить("000000000000000000000000000000", "0", ЛидирующийСимвол);
	Возврат Прав(Стр + Формат(НомерДокумента, "ЧН=; ЧГ="), Разрядность) + КонечныйСимвол;
КонецФункции

// Создает файлы в необходимом каталоге при пакетном создании и создании рассылки.
//
// Параметры:
//  Пакет					- Булево		- признак пакетного создания,
//  ШаблонСсылка	 		– Справочник 	– Справчник шаблона,
//  Объект					– ДокументСсылка, СправочникСылка	 	
//							– Документ на основании которого строится файл Word,
//  КаталогПоУмолчанию		- Строка	    - Место для сохранения файла,
//	ВидПечатногоДокумента	- Справочник	- вид печатного документа,
//  КолСтрокТЧ				- Число			- количество строк в ТЧ,
//  КомпонентаСклонения     - ВнешняяКомпонента - склоняет ФИО в указанном падеже,
//
// Возвращаемое значение:
//   <Строка>   – Полное имя папки в которой созданы документы.
//
Функция СоздатьФайлыВКаталоге(Пакет, КолСтрокТЧ, ВидПечатногоДокумента, КаталогПоУмолчанию, ШаблонСсылка, 
		Объект, КомпонентаСклонения, ВыборкаСвойств, тзТаблицаДляВставки, Массив_Файлов=Неопределено, ПрикрепитьФайлы)
		
	//Проверка каталога для пакетного сохранения
	//ВидПечатногоДокумента.Наименование
	ИмяКаталога = ОбъектыСервер.РазыменоватьСсылку(ВидПечатногоДокумента,"Наименование")  + " - " + ОбъектыСервер.РазыменоватьСсылку(Объект, "Метаданные().Синоним");	   
	ПутьДляПакетаДокументов = СформироватьКаталогДляГрупп(КаталогПоУмолчанию, Объект, ИмяКаталога);
	Если тсПроверитьСуществованиеКаталога(ПутьДляПакетаДокументов) = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
                	
	//// Открываем приложение MS Word.
	//УспешностьЗавершенияКомпоненты = ДрайверКомпоненты.ОткрытьWord(Ложь);
	//
	//Если УспешностьЗавершенияКомпоненты = Ложь Тогда
	//	Сообщить("Невозможно открыть MS Word. Возможно Word не установлен.", СтатусСообщения.ОченьВажное); 
	//	Возврат Неопределено;						
	//КонецЕсли;
	// 
	Visible = False;    	           	
	Сообщить("-------- Создаются  документы --------"); 

	СчетчикПрефикса = 0;
    // Для реквизитов рассылки   
	Если Пакет = Ложь Тогда
		Для ТекСтр = 1 По КолСтрокТЧ Цикл    
			СчетчикПрефикса = СчетчикПрефикса + 1;								
			Префикс = УниверсальныйНумератор(СчетчикПрефикса, 3, "0", "-");
								
			БезРассылки = Ложь;
			ИмяФайла = СгенерироватьШаблон(ШаблонСсылка, Объект, ПутьДляПакетаДокументов, ТекСтр - 1, БезРассылки, 
					КомпонентаСклонения, Префикс, ВыборкаСвойств, тзТаблицаДляВставки, ПрикрепитьФайлы);
			
			ЧтоЗакрыть = 0;
			ЗакрытьДокументИWord(ЧтоЗакрыть); 							 
		КонецЦикла;   			
		// Пакетное создание
	Иначе
		МассивНаОткрытие = Новый Массив;
		к = 0;
		Для Каждого Эл Из КолСтрокТЧ Цикл		                                                        
			//Генерируется документ 		
			Если НЕ ЗначениеЗаполнено(ОбъектыСервер.РазыменоватьСсылку(Эл, "Шаблон")) Тогда
				Сообщить("Не загружен шаблон в печатную форму " + Строка(Эл) + "!");
				Продолжить;
			КонецЕсли;			
			ВыборкаСвойств = "";
			СчетчикПрефикса = СчетчикПрефикса + 1;										
			Префикс = УниверсальныйНумератор(СчетчикПрефикса, 3, "0", "-");
			
			БезРассылки = Истина;
			ИндексСтроки = Неопределено;
			ИмяФайла = СгенерироватьШаблон(Эл, Объект, ПутьДляПакетаДокументов, ИндексСтроки,
			БезРассылки, КомпонентаСклонения, Префикс, ВыборкаСвойств, тзТаблицаДляВставки, ПрикрепитьФайлы);
			КолСтрокТЧ[к] = Эл;
			
			ЧтоЗакрыть = 0;
			ЗакрытьДокументИWord(ЧтоЗакрыть); 	
			ОткрыватьПослеФормирования = ОбъектыСервер.РазыменоватьСсылку(ВидПечатногоДокумента,"ОткрыватьПослеФормирования"); 
			
			Если ОткрыватьПослеФормирования Тогда
				МассивНаОткрытие.Добавить(ИмяФайла);
				//ОткрытьИПоказатьДокументWord(ИмяФайла);  				
			КонецЕсли;
			
			Если Массив_Файлов<>Неопределено Тогда
				Массив_Файлов.Добавить(ИмяФайла);
			КонецЕсли;
			
			к = к + 1;
		КонецЦикла;
		Для Каждого Элемент ИЗ МассивНаОткрытие Цикл
			ОткрытьИПоказатьДокументWord(Элемент);
		КонецЦикла;	
		
	КонецЕсли;
	Сообщить("----- Конец создания документов -----");    	
	ТолькоWord = 1;
	Если НЕ ОткрыватьПослеФормирования Тогда
		ЗакрытьДокументИWord(ТолькоWord);	
	КонецЕсли;
	Возврат ПутьДляПакетаДокументов;  
КонецФункции // СоздатьФайлыВКаталоге()



// Создает файлы в необходимом каталоге при пакетном создании и создании рассылки.
//
// Параметры:
//  Пакет					- Булево		- признак пакетного создания,
//  ШаблонСсылка	 		– Справочник 	– Справчник шаблона,
//  Объект					– ДокументСсылка, СправочникСылка	 	
//							– Документ на основании которого строится файл Word,
//  КаталогПоУмолчанию		- Строка	    - Место для сохранения файла,
//	ВидПечатногоДокумента	- Справочник	- вид печатного документа,
//  КолСтрокТЧ				- Число			- количество строк в ТЧ,
//  КомпонентаСклонения     - ВнешняяКомпонента - склоняет ФИО в указанном падеже,
//
// Возвращаемое значение:
//   <Строка>   – Полное имя папки в которой созданы документы.
//
Функция СоздатьФайлыВКаталоге_ГлобальнаяСклейка(Пакет, ПрикрепитьФайлы, КолСтрокТЧ, ВидПечатногоДокумента, КаталогПоУмолчанию, ШаблонСсылка, 
		Объект, КомпонентаСклонения, ВыборкаСвойств, тзТаблицаДляВставки, Массив_Файлов=Неопределено)
		
	ИмяКаталога = КаталогПоУмолчанию;
	ПутьДляПакетаДокументов = КаталогПоУмолчанию;
	////Проверка каталога для пакетного сохранения				        
	Если тсПроверитьСуществованиеКаталога(ПутьДляПакетаДокументов) = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
                	
	// Открываем приложение MS Word.
	//УспешностьЗавершенияКомпоненты = ДрайверКомпоненты.ОткрытьWord(Ложь);
	//
	//Если УспешностьЗавершенияКомпоненты = Ложь Тогда
	//	Сообщить("Невозможно открыть MS Word. Возможно Word не установлен.", СтатусСообщения.ОченьВажное); 
	//	Возврат Неопределено;						
	//КонецЕсли;
	 
	Visible = False;    	           	
	Сообщить("-------- Создаются  документы --------"); 

	СчетчикПрефикса = 0;
	к = 0;
	Для Каждого Эл Из КолСтрокТЧ Цикл		                                                        
		//Генерируется документ 		
		Если НЕ ЗначениеЗаполнено(ОбъектыСервер.РазыменоватьСсылку(Эл.Шаблон, "Шаблон")) Тогда
			Сообщить("Не загружен шаблон в печатную форму " + Строка(Эл) + "!");
			Продолжить;
		КонецЕсли;			
		ВыборкаСвойств = "";
		СчетчикПрефикса = СчетчикПрефикса + 1;										
		Префикс = УниверсальныйНумератор(СчетчикПрефикса, 3, "0", "-");
		
		БезРассылки = Истина;
		ИндексСтроки = Неопределено;
		ИмяФайла = СгенерироватьШаблон(Эл, Объект, ПутьДляПакетаДокументов, ИндексСтроки,
		БезРассылки, КомпонентаСклонения, Префикс, ВыборкаСвойств, тзТаблицаДляВставки, ПрикрепитьФайлы);
		
		ЧтоЗакрыть = 0;
		ЗакрытьДокументИWord(ЧтоЗакрыть); 	
		
		Если Массив_Файлов<>Неопределено Тогда
			Массив_Файлов.Добавить(ИмяФайла);
		КонецЕсли;
		КолСтрокТЧ[к] = Эл;
		к = к + 1;
	КонецЦикла;
	
	Если ПрикрепитьФайлы Тогда 
			Массив_НаПечать = Новый Массив;
			Для й=0 По КолСтрокТЧ.Количество()-1 Цикл
				Структура = Новый Структура;
				Структура.Вставить("ПутьКФайлу", Массив_Файлов[й]);
				Структура.Вставить("Шаблон", КолСтрокТЧ[й].Шаблон); 
				Структура.Вставить("РегНомер", КолСтрокТЧ[й].РегНомер);
				Структура.Вставить("Исходящий", КолСтрокТЧ[й].Исходящий);
				Структура.Вставить("Прикреплять", КолСтрокТЧ[й].Прикреплять);
				Массив_НаПечать.Добавить(Структура);						
			КонецЦикла;			
			Массив_НаПрикрепление = ПолучитьМассивНаПрикрепление(Массив_НаПечать);
			Для Каждого Эл Из Массив_НаПрикрепление Цикл  
				Если Эл.Прикреплять Тогда
					Наименование = Строка(Объект);//ОбъектыСервер.РазыменоватьСсылку(Объект, "Наименование");
					Попытка				
						ДокументПрикрепление = ПрикреплениеФайлов.ПрикрепитьФайлы(Объект, Эл);
						Если ОбъектыСервер.ПолучитьЗначениеКонстанты("АвторегистрацияПечатныхФорм") И Эл.Исходящий Тогда
							РегистрацияКорреспонденции.СоздатьРегистраторИсходящейКорреспонденции(Объект, Эл.Шаблон, ДокументПрикрепление, Эл.РегНомер);
							Сообщить("По объекту " + Наименование + " создана запись в журнале регистрации исходящих");
						КонецЕсли;   
						Сообщить("По объекту " + Наименование + " файлы прикреплены");
					Исключение
						Сообщить("Ошибка! По объекту " + Наименование + " файлы не прикреплены!");
					КонецПопытки;
				КонецЕсли;	
			КонецЦикла;
			                      
			
			
		КонецЕсли;
	Сообщить("----- Конец создания документов -----");    	
	ТолькоWord = 1;
	//Если НЕ ВидПечатногоДокумента.ОткрыватьПослеФормирования Тогда
	ЗакрытьДокументИWord(ТолькоWord);	
	//КонецЕсли;
	Возврат ПутьДляПакетаДокументов;  
КонецФункции // СоздатьФайлыВКаталоге()

// Возвращается каталог в который будт помещаться файлы при пакетном создании и
// без склейки.
//
// Параметры
//  КаталогПоУмолчанию		– строка – каталог по умолчанию,
//  ВызывющийДокумент		– СправочникСсылка, ДокументСсылка – объект для которого,
//							генерируется документ,
//	ВидПечатногоДокумента	- СправочникСсылка	- справочник "виды печатных докумнетов".
//
// Возвращаемое значение:
//   Строка		– путь к созданному или найденному каталогу
//
Функция СформироватьКаталогДляГрупп(КаталогПоУмолчанию, ВызывающийДокумент, ИмяКаталога)
	ИмяКаталогФайл = Новый Файл(ИмяКаталога);
	
	Если УЭДСервер.ПолучитьТипОбъекта(ВызывающийДокумент) = "Справочник" Тогда
		ИдентификаторОбъекта = "_" + СокрЛП(ОбъектыСервер.РазыменоватьСсылку(ВызывающийДокумент, "Код"));
	Иначе
		ИдентификаторОбъекта = "_" + СокрЛП(ОбъектыСервер.РазыменоватьСсылку(ВызывающийДокумент, "Номер")) + "_" +  
				Формат(ВызывающийДокумент.Дата, "ДФ=yyyy-MM-dd");	
	КонецЕсли;
		
	ИмяФайлаШаблона = ИмяКаталогФайл.ИмяБезРасширения + ИдентификаторОбъекта;			
	Для й = 1 По 999999 Цикл				
		ИмяФайлаДокумента = ИмяФайлаШаблона + "-" + Строка(й);					
		НайденныеФайлы = НайтиФайлы(КаталогПоУмолчанию, ИмяФайлаШаблона + "-" + Строка(й));					
		Если Не НайденныеФайлы.Количество() Тогда
			ИмяЦелевогоФайла = КаталогПоУмолчанию + "\" + ИмяФайлаДокумента;
			Прервать;
		КонецЕсли;				
	КонецЦикла;   	
	СоздатьКаталог(ИмяЦелевогоФайла);

	Возврат ИмяЦелевогоФайла;
КонецФункции

// Закрывает активный документ и само приложение MS Word.
//
// Параметры:
//	ЧтоЗакрыть		- Число				- Закрывает документ и/или Word.
//
Процедура ЗакрытьДокументИWord(ЧтоЗакрыть)
	//Если ЧтоЗакрыть = 0 Или ЧтоЗакрыть = 2 Тогда
	//	УспешностьЗавершенияКомпоненты = ДрайверКомпоненты.ЗакрытьДокумент();
	//	Если УспешностьЗавершенияКомпоненты = Ложь Тогда
	//		Сообщить("Невозможно закрыть документ MS Word.", СтатусСообщения.Важное); 				
	//	КонецЕсли; 	
	//КонецЕсли;      	    	
	//
	//Если ЧтоЗакрыть = 1 Или ЧтоЗакрыть = 2 Тогда
	//	УспешностьЗавершенияКомпоненты = ДрайверКомпоненты.ЗакрытьWord();
	//	Если УспешностьЗавершенияКомпоненты = Ложь Тогда
	//		Сообщить("Невозможно закрыть MS Word.", СтатусСообщения.Важное); 				
	//	КонецЕсли; 	
	//КонецЕсли;    	  			
КонецПроцедуры

// Открывает и показывает документ  и само приложение MS Word.
//
// Параметры:
//  ПутьКФайлу		- строка			- путь к файлу.
//
Процедура ОткрытьИПоказатьДокументWord(ПутьКФайлу)	
	
	Попытка
		ЗапуститьПриложение(ПутьКФайлу);	
	Исключение
		Сообщить("Невозможно открыть созданный документ MS Word.", СтатусСообщения.Важное); 	
	КонецПопытки;
	
	//УспешностьЗавершенияКомпоненты = ДрайверКомпоненты.ОткрытьWord(Истина);
	//Если УспешностьЗавершенияКомпоненты = Ложь Тогда
	//	Сообщить("Невозможно открыть созданный документ MS Word.", СтатусСообщения.Важное); 
	//	Возврат;				
	//КонецЕсли; 	
	//
	//УспешностьЗавершенияКомпоненты = ДрайверКомпоненты.ПрочитатьШаблон(ПутьКФайлу);
	//Если УспешностьЗавершенияКомпоненты = Ложь Тогда
	//	Сообщить("Невозможно открыть созданный документ MS Word.", СтатусСообщения.Важное); 				
	//КонецЕсли; 		  	  			
КонецПроцедуры

Функция ПолучитьФайлИзДвоичныхДанных_Клиент(СтрокаФайл, СтрокаРасширение) Экспорт
	
	ДвоичныйАдрес =  УЭДСервер.ПолучитьФайлИзДвоичныхДанных(СтрокаФайл, СтрокаРасширение);
	#Если Вебклиент Тогда
		ИмяВремФайла = Новый Файл(СтрокаРасширение);
	#Иначе
		ИмяВремФайла = ПолучитьИмяВременногоФайла(СтрокаРасширение);
	#КонецЕсли

	ИмяВремФайла = ПолучитьИмяВременногоФайла(СтрокаРасширение);
	ДвоичныйАдрес.Записать(ИмяВремФайла);
	Возврат ИмяВремФайла;
 	
КонецФункции

// Генерирует документ Word и OpenOffice на основе шаблона.
//
// Параметры:
//  СправочникШаблон 	– Справочник 	– Справчник шаблона,
//  ВызывающийДокумент	– Документ	 	– Документ на основании которого строится файл Word,
//  КаталогПоУмолчанию	- Строка	    - Место для сохранения файла,
//	ИндексСтроки		- Число			- используется для создания рассылочных списков, 
//										соответствует номер строки ТЧ на основе которой создается.
//	БезРассылки			- Булево		- признак необходимости создания рассылочных сприсоков на
//										основе ТЧ,
//  КомпонентаСклонения - ВнешняяКомпонента - склоняет ФИО в указанном падеже,
//
// Возвращаемое значение:
//   <Строка>   – Полное имя созданного файла.
//
Функция ШаблонИзСправочника(СправочникШаблон, ВызывающийДокумент, КаталогПоУмолчанию, ИндексСтроки, БезРассылки, 
		КомпонентаСклонения, Префикс, ВыборкаСвойств, тзТаблицаДляВставки, НомерСтроки = Неопределено,
		СтрокаТаблициПлатежиЛП = Неопределено, ИмяФайлаШаблона_dot, ПрикрепитьФайлы)
		
		
		
	Отказ = Ложь;
	ИмяКаталогаПоУмолчанию = Новый Файл(КаталогПоУмолчанию);
	Если не ИмяКаталогаПоУмолчанию.Существует() или не ИмяКаталогаПоУмолчанию.ЭтоКаталог() Тогда
		Сообщить("По указанному пути к шаблону каталог по умолчанию не существует!", СтатусСообщения.Внимание);
		Отказ = Истина;                                                    	
	КонецЕсли;
	
	СтрокаФайл = ОбъектыСервер.РазыменоватьСсылку(СправочникШаблон.Шаблон, "Шаблон");
	СтрокаРасширение = ОбъектыСервер.РазыменоватьСсылку(СправочникШаблон.Шаблон, "РасширениеФайлаШаблона");
	ИмяФайлаШаблона_dot = ПолучитьФайлИзДвоичныхДанных_Клиент(СтрокаФайл, СтрокаРасширение);
	
	ИмяФайлаШаблона = Новый Файл(ИмяФайлаШаблона_dot); 	
	
	Если Не ИмяФайлаШаблона.Существует() Тогда
		Сообщить("По указанному пути к шаблону файл не существует", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;		
	Если Отказ Тогда 
		Возврат Неопределено;
	КонецЕсли;
	  
	МассивДляSA = Новый Массив();
	//Лебедева, 04102019
	Если УЭДСервер.ПолучитьТипОбъекта(ВызывающийДокумент) = "Справочник" Тогда
		Код1С = СокрЛП(ОбъектыСервер.РазыменоватьСсылку(ВызывающийДокумент, "Код"));
		Код1С = ОбъектыКлиент.УдалитьПовторяющиесяСимволы(Строка(Код1С),"0");
		ИдентификаторОбъекта = "_" + Код1С;
	Иначе
		ИдентификаторОбъекта = "_" + СокрЛП(ОбъектыСервер.РазыменоватьСсылку(ВызывающийДокумент, "Номер")) + "_" + 
		Формат(ОбъектыСервер.РазыменоватьСсылку(ВызывающийДокумент,"Дата"), "ДФ=yyyy-MM-dd");	
	КонецЕсли;
	
	
	//Боевкин
	МассивСтр = Новый Массив;
	ТекущийДок = ОбъектыСервер.ПолучитьЗначениеКонстанты("ТипШаблонаДляПечати");

	// Щаблон MS Word или OpenOffice.	
	ПолноеИмяФайла	= ИмяФайлаШаблона.ПолноеИмя;
	ИмяФайлаШаблона	= ИмяФайлаШаблона.ИмяБезРасширения;
	ИмяФайлаШаблона	= Префикс + ИмяФайлаШаблона;
	//Лебедева 04102019
	ИмяФайлаЭД = СоздатьИмяФайла(ВызывающийДокумент,СправочникШаблон);
	Расширение = ПолучитьРасширение();
	Если Строка(ТекущийДок) = "Word" Тогда
		Для й = 1 По 999999 Цикл					
			//ИмяФайлаДокумента = Строка(КаталогПоУмолчанию) + "\" + ИмяФайлаШаблона + ИдентификаторОбъекта + "-" + Строка(й) + ".doc";					
			//НайденныеФайлы = НайтиФайлы(КаталогПоУмолчанию, ИмяФайлаШаблона + ИдентификаторОбъекта + "-" + Строка(й) + ".doc");					
			ИмяФайлаДокумента = Строка(КаталогПоУмолчанию) + "\"+ИмяФайлаЭД + ИдентификаторОбъекта +ИмяФайлаШаблона+"-" + Строка(й) + Расширение;					
			НайденныеФайлы = НайтиФайлы(КаталогПоУмолчанию, ИмяФайлаЭД + ИдентификаторОбъекта +ИмяФайлаШаблона+ "-" + Строка(й) + Расширение);					
			Если НЕ НайденныеФайлы.Количество() Тогда      
				ИмяЦелевогоФайла = ИмяФайлаДокумента;
				Прервать;
			КонецЕсли;					
		КонецЦикла;
	ИначеЕсли Строка(ТекущийДок) = "OpenOffice" Тогда
		Для й = 1 По 999999 Цикл							
			ИмяФайлаДокумента = Строка(КаталогПоУмолчанию) + "\" + ИмяФайлаЭД + ИдентификаторОбъекта + ИмяФайлаШаблона+ "-" + Строка(й) + Расширение;					
			НайденныеФайлы = НайтиФайлы(КаталогПоУмолчанию, ИмяФайлаЭД + ИдентификаторОбъекта + ИмяФайлаЭД + ИмяФайлаШаблона+  "-" + Строка(й) + Расширение);					
			Если НЕ НайденныеФайлы.Количество() Тогда      
				ИмяЦелевогоФайла = ИмяФайлаДокумента;
				Прервать;
			КонецЕсли;					
		КонецЦикла;
	Конецесли;

	
	//ОбъектWord = Новый COMОбъект("Word.Application");
	//
	//Попытка
	//	ОбъектWord.Documents.add(ПолноеИмяФайла);
	//Исключение
	//	Сообщить("Невозможно открыть файл шаблона: " + ПолноеИмяФайла, СтатусСообщения.Важное);
	//	ОбъектWord.Quit();
	//	Возврат Неопределено;
	//КонецПопытки;
	
	///////////ИСПОЛЬЗУЕТСЯ ДЛЯ КОМПОНЕНТЫ////////////
	//УспешностьЗавершенияКомпоненты = ДрайверКомпоненты.ПрочитатьШаблон(ПолноеИмяФайла);
	//Если УспешностьЗавершенияКомпоненты = Ложь Тогда
	//	Сообщить("Невозможно открыть файл шаблона: " + ПолноеИмяФайла, СтатусСообщения.Важное); 
	//	Возврат Неопределено;						
	//КонецЕсли;

	//ИмяЦелевогоФайла = СтрЗаменить(ИмяЦелевогоФайла, "/", "");
	//УспешностьЗавершенияКомпоненты = ДрайверКомпоненты.СохранитьДокумент(ИмяЦелевогоФайла);
	//Если УспешностьЗавершенияКомпоненты = Ложь Тогда
	//	Сообщить("Невозможно сохранить файл: " + ИмяЦелевогоФайла, СтатусСообщения.Важное); 
	//	Возврат Неопределено;						
	//КонецЕсли;	
	/////////////////КОНЕЦ КОМПОНЕНТЫ////////////////
	//
	//// --------------- Глобально: Заполняем таблицы. ----------------------------	
	//// Ищем только используемые строки.
	//НаборШаблоныПечатиТабл = УЭДСервер.Таблица_ТаблицаВыбораТаблиц(СправочникШаблон.Шаблон);	
	//Для Каждого ТекСтрокаПодстановки Из НаборШаблоныПечатиТабл Цикл		
	//	msCSAПолей = Новый COMSafeArray("VT_BSTR", 0);	
	//	/////////КОНЕЦ ИСПОЛЬЗУЕТСЯ ДЛЯ КОМПОНЕНТЫ////////
	//	
	//	ПолеКлючаПоискаТаблицы = СтрЗаменить(ТекСтрокаПодстановки.ПолеТаблицы, " ", "");
	//	ПолеКлючаПоискаТаблицы = СокрЛП(СтрЗаменить(ПолеКлючаПоискаТаблицы, Символ(13), ""));  			
	//	НомерНайденнойТаблицы = 0;
	//	msCSAПолей = ДрайверКомпоненты.ПолучитьПараметрыТаблицы(ПолеКлючаПоискаТаблицы, НомерНайденнойТаблицы);
	//	// Сделать проверку на принадлежность поля шаблону. Если в шаблоне этого поля не было и 
	//	// в помине, то и нечего выдавать сообщение
	//	Если НомерНайденнойТаблицы = 0 Тогда
	//		Сообщить("Таблица по полю: " + ПолеКлючаПоискаТаблицы + " не найдена, или не правильно сформирована!", 
	//				СтатусСообщения.Важное); 
	//		Продолжить;						
	//	КонецЕсли;
	//	
	//	// Формируем набор полей для нужной таблицы.
		//НаборШаблоныПечатиТаблЗнач = УЭДСервер.Таблица_ТаблицаТаблиц(СправочникШаблон.Шаблон, ТекСтрокаПодстановки.UID);		
	//	
	//	///////////ИСПОЛЬЗУЕТСЯ ДЛЯ КОМПОНЕНТЫ////////////		
	//	тзТаблицаДляВставки = Новый СписокЗначений();
	//	ПолнаяСтрока = msCSAПолей;
	//	Н = 1;
	//	Пока Н < 20 Цикл
	//		НомерСимвола = Найти(ПолнаяСтрока, ";");		
	//		Если НомерСимвола = 0 Тогда
	//			Прервать;
	//		КонецЕсли;
	//		
	//		Значение = Лев(ПолнаяСтрока, НомерСимвола - 1);
	//		тзТаблицаДляВставки.Добавить(Неопределено, Значение);
	//		ПолнаяСтрока = Сред(ПолнаяСтрока, НомерСимвола + 1);
	//		Н = Н + 1;
	//	КонецЦикла;                     
	//			
	//	РезультатФункцииТаблиц = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(ТекСтрокаПодстановки.Функция, 
	//			ВызывающийДокумент);		                                     
	//	Для Каждого Строка Из НаборШаблоныПечатиТаблЗнач Цикл
	//		Если Не Строка.Функция.Пустая() Тогда // Определена функция для значения
	//			МассивЗначений = РезультатФункцииТаблиц.ВыгрузитьКолонку(Строка.Значение);
	//			Для Сч = 0 По МассивЗначений.ВГраница() Цикл
	//				МассивЗначений[Сч] = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(Строка.Функция, 
	//						ВызывающийДокумент, МассивЗначений[Сч]);
	//			КонецЦикла; 
	//		ИначеЕсли ТипЗнч(РезультатФункцииТаблиц) = Тип("Массив") Тогда
	//			МассивЗначений = Новый Массив();
	//			Для Каждого Элемент Из РезультатФункцииТаблиц Цикл
	//				Если ТипЗнч(Элемент) = Тип("Структура") Тогда
	//					Выполнить("МассивЗначений.Добавить(Элемент." + Строка.Значение + ");");
	//				Иначе
	//					МассивЗначений.Добавить(Элемент);
	//				КонецЕсли;
	//			КонецЦикла;	
	//		Иначе		
	//			Попытка
	//				МассивЗначений = РезультатФункцииТаблиц.ВыгрузитьКолонку(Строка.Значение);
	//			Исключение
	//				МассивЗначений = Новый Массив();
	//			КонецПопытки;
	//		КонецЕсли;
	//		
	//		Для Каждого Эл Из тзТаблицаДляВставки Цикл
	//			Если Эл.Представление = Строка.Поле Тогда
	//				Эл.Значение = МассивЗначений;
	//			КонецЕсли;
	//		КонецЦикла;			
	//	КонецЦикла; 
	//
	//	мсCSAТаблицаДляВставки = УЭДСервер.ПереводТаблицыВМассив(тзТаблицаДляВставки, НаборШаблоныПечатиТаблЗнач, Ложь);		
	//	УспешностьЗавершенияКомпоненты = ДрайверКомпоненты.ЗаполнитьТаблицу(НомерНайденнойТаблицы, мсCSAТаблицаДляВставки);
	//	Если УспешностьЗавершенияКомпоненты = Ложь Тогда
	//		Сообщить("Невозможно заполнить таблицу № " + НомерНайденнойТаблицы + " для поля: " + ПолеКлючаПоискаТаблицы, 
	//				СтатусСообщения.Важное); 						
	//	КонецЕсли;	
	//	/////////КОНЕЦ ИСПОЛЬЗУЕТСЯ ДЛЯ КОМПОНЕНТЫ////////	
	//КонецЦикла;
	//// ----------------- Глобально: Конец заполнения таблиц ----------------------
	//
	//// ---------------- Заполняем простые реквизиты и произвольные значения ------------------------------
	////Если ТипПоля = Реквизит тогда это выбор реквизитов из дерева, если ТипПоля = Текст - тогда произв. значение
	//
	//// Значения получаемые на основе дерева.
	
	
	//!ЭТОТ КУСОК КОДА Я СТАЩИЛА В ДРУГОЕ МЕСТО!!!!!!
	//ТекущийДок = Константы.ТипШаблонаДляПечати.Получить();
	//Если Строка(ТекущийДок) = "Word" Тогда
	//	ОбъектWord = Новый COMОбъект("Word.Application");
	//	Попытка
	//		ОбъектWord.Documents.add(ПолноеИмяФайла);
	//	Исключение
	//		Сообщить("Невозможно открыть файл шаблона: " + ПолноеИмяФайла, СтатусСообщения.Важное);
	//		ОбъектWord.Quit(); 
	//		Возврат Неопределено;
	//	КонецПопытки;
	//ИначеЕсли Строка(ТекущийДок) = "OpenOffice" Тогда
	//	ServiceManager = Новый COMОбъект("com.sun.star.ServiceManager");
	//	Desktop        = ServiceManager.createInstance("com.sun.star.frame.Desktop");
	//	ОбъектОО = Новый COMОбъект("MSScriptControl.ScriptControl");
	//	ОбъектОО.Language="javascript";
	//	ОбъектОО.Eval("Args=new Array()");
	//	Args = ОбъектОО.Eval("Args"); 
	//	ОбъектОО.AddObject("ServiceManager", ServiceManager);
	//	ТекстовыйПроцессор = Desktop.LoadComponentFromURL(ПреобразоватьВURL(ПолноеИмяФайла), "_blank", 0, Args);
	//КонецЕсли;	
		//Попытка
	//	ОбъектWord.Documents.add(ПолноеИмяФайла);
	//Исключение
	//	Сообщить("Невозможно открыть файл шаблона: " + ПолноеИмяФайла, СтатусСообщения.Важное);
	//	ОбъектWord.Quit(); 
	//	Возврат Неопределено;
	//КонецПопытки;
	//!КОНЕЦ СТАЩЕННОГО КУСКА КОДА
	
	
	НаборШаблоныПечатиРеквизитыИСвойстваЗнач = УЭДСервер.Таблица_РеквизитыИСвойства(СправочникШаблон.Шаблон);	
	
	// Боевкин 20.02.2017 Необходима отладка под многопоточность
	
	Если ОбъектыСервер.ПолучитьЗначениеКонстанты("АвторегистрацияПечатныхФорм") И ПрикрепитьФайлы И ОбъектыСервер.РазыменоватьСсылку(СправочникШаблон, "Исходящий") Тогда
		СправочникШаблон.РегНомер = РегистрацияКорреспонденции.ПолучитьНомер(ОбъектыСервер.РазыменоватьСсылку(СправочникШаблон.Шаблон, "ТипПисьма"),ОбъектыСервер.РазыменоватьСсылку(ВызывающийДокумент, "Организация"), ВызывающийДокумент);
		НаборШаблоныПечатиРеквизитыИСвойстваЗнач.Добавить(Новый Структура("Поле, Значение, Функция, СтрокаДляПолученияЗначения, КодДопСвойства,
		| ОбъектДопСвойства, ТипПоля, ПустоеЗначениеНеПробел, СтрокаХранилище", Объектысервер.РазыменоватьСсылку(СправочникШаблон.Шаблон, "ТегРегНомер"), СправочникШаблон.РегНомер, ПредопределенноеЗначение("Справочник.ФункцииТекстовыхШаблонов.ПустаяСсылка"),
		, , , 
		ПредопределенноеЗначение("Перечисление.ТипыПолейУЭД.Текст"), , ));
		НаборШаблоныПечатиРеквизитыИСвойстваЗнач.Добавить(Новый Структура("Поле, Значение, Функция, СтрокаДляПолученияЗначения, КодДопСвойства,
		| ОбъектДопСвойства, ТипПоля, ПустоеЗначениеНеПробел, СтрокаХранилище", ОбъектыСервер.РазыменоватьСсылку(СправочникШаблон.Шаблон, "ТегРегДата"), Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy'"), ПредопределенноеЗначение("Справочник.ФункцииТекстовыхШаблонов.ПустаяСсылка"),
		, , , 
		ПредопределенноеЗначение("Перечисление.ТипыПолейУЭД.Текст"), , ));
	КонецЕсли;
	
	Для Каждого ТекСтрокаПодстановки Из НаборШаблоныПечатиРеквизитыИСвойстваЗнач Цикл		
		Если ТекСтрокаПодстановки.ТипПоля = ПредопределенноеЗначение("Перечисление.ТипыПолейУЭД.Реквизит") Тогда // Это реквизит, выбираемый из дерева		
			Отказ = Ложь;		
			// Тут получаем реальное значение параметра, а далее, вычисляем рез-т функции, если она используется					
			Значение = УЭДСервер.ГенерацияЗначениия(ТекСтрокаПодстановки, ВыборкаСвойств, ВызывающийДокумент, 
					ВызывающийДокумент);
			
			// Применение функции к полученному значению.  		
			мсЗначения = Новый Массив();
			ФункцияОпределена = УЭДСервер.ФункцияУспешноОпределена(ТекСтрокаПодстановки);
			Если ФункцияОпределена Тогда
				мсЗначения.Добавить(УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(ТекСтрокаПодстановки.Функция, 
						ВызывающийДокумент, Значение));
			Иначе 
				мсЗначения.Добавить(Значение);
			КонецЕсли; 
			
			// Вот тут надо заменить в тексте функции параметры <> на человеческое значение
			ПрименяемаяФункция = ?(ТекСтрокаПодстановки.Функция.Пустая(), "", 
					ОбъектыСервер.РазыменоватьСсылку(ТекСтрокаПодстановки.Функция, "Функция"));
			///***
			ДлинаКодаФункции = СтрДлина(ПрименяемаяФункция);
			ТекущийСимвол = 0;
			Пока ТекущийСимвол < ДлинаКодаФункции Цикл				
				ПозицияПараметраНачало = Найти(ПрименяемаяФункция, "{");
				ПозицияПараметраКонец = Найти(ПрименяемаяФункция, "}");
				
				Если ПозицияПараметраНачало <=0   Тогда
					ТекущийСимвол = ДлинаКодаФункции;
					Прервать;
				КонецЕсли;
				
				Если ПозицияПараметраКонец - ПозицияПараметраНачало = 1 Тогда
					ТекущийСимвол = ДлинаКодаФункции;
					Прервать;
				КонецЕсли;
				
				ЧислоСимволовПараметра = (ПозицияПараметраКонец - ПозицияПараметраНачало) - 1;		
				Параметр = СокрЛП(Сред(ПрименяемаяФункция, ПозицияПараметраНачало + 1, ЧислоСимволовПараметра)); 
				
				// Значение из дерева реквизитов.   		
				СтруктураДерева = ТекСтрокаПодстановки.Хранилище.Получить();
				ПараметрПуть = "ВызывающийДокумент";
				// Формируем путь.
				ГраницаМассива = СтруктураДерева.ВГраница();
				Счет = 0;
				Для Счет = 0 По ГраницаМассива Цикл
					НомерСКонца = ГраницаМассива - Счет;
					СтрокаМассива = СтруктураДерева[НомерСКонца];
					Если Не СтрокаМассива = "Ссылка" Тогда
						ПараметрПуть = Строка(ПараметрПуть) + "." + Строка(СтрокаМассива);	
					КонецЕсли;	
				КонецЦикла;
				
				Параметр = ПараметрПуть;			
				ПрименяемаяФункция = СтрЗаменить(ПрименяемаяФункция, 
						Сред(ПрименяемаяФункция, ПозицияПараметраНачало, ЧислоСимволовПараметра + 2), Параметр);				
				ДлинаКодаФункции = СтрДлина(ПрименяемаяФункция);
				ТекущийСимвол = ПозицияПараметраНачало + СтрДлина(Параметр);				
			КонецЦикла;
			///***
		ИначеЕсли ТекСтрокаПодстановки.ТипПоля = ПредопределенноеЗначение("Перечисление.ТипыПолейУЭД.Текст") Тогда   // Это произвольное значение
			ФункцияОпределена = УЭДСервер.ФункцияУспешноОпределена(ТекСтрокаПодстановки); 
			мсЗначения = Новый Массив;
			Если ФункцияОпределена Тогда
				мсЗначения.Добавить(УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(ТекСтрокаПодстановки.Функция,
						ВызывающийДокумент, ТекСтрокаПодстановки.Значение));
			Иначе
				мсЗначения.Добавить(ТекСтрокаПодстановки.Значение);
			КонецЕсли; 
		Конецесли;
		
		//////////////////
		Значение = мсЗначения;		
		Если Не ТекСтрокаПодстановки.Поле = "<>" И Не ПустаяСтрока(ТекСтрокаПодстановки.Поле) И ЗначениеЗаполнено(значение)
				И Не Отказ = Истина Тогда
				
			Если ТипЗнч(Значение) = Тип("Массив") Тогда 
				Значение = Значение[0];
			КонецЕсли;                        			
			Структура = Новый Структура;
			
			МассивДляSA.Добавить(ТекСтрокаПодстановки.Поле);
			Структура.Вставить("Поле", ТекСтрокаПодстановки.Поле);
			Если ЗначениеЗаполнено(Строка(Значение)) Тогда
				МассивДляSA.Добавить(Строка(Значение));
				Структура.Вставить("Значение", Строка(Значение));
			ИначеЕсли ТекСтрокаПодстановки.ПустоеЗначениеНеПробел Тогда
				МассивДляSA.Добавить("");
				Структура.Вставить("Значение", "");
			Иначе
				МассивДляSA.Добавить(" ");
				Структура.Вставить("Значение", " ");
			КонецЕсли;	
			МассивСтр.Добавить(Структура);
		КонецЕсли;	
	КонецЦикла;
	
	///////////ИСПОЛЬЗУЕТСЯ ДЛЯ КОМПОНЕНТЫ////////////	
	//Если МассивДляSA.Количество() > 0  Тогда  		
	//	МассивSA = Новый COMSafeArray(МассивДляSA, "VT_BSTR");		
	//КонецЕсли; 
	//
	//СписокЗначений = "";	
	//Если МассивSA <> Неопределено Тогда	
	//	Для Каждого Стр из МассивSA Цикл
	//		СписокЗначений = СписокЗначений + Строка(Стр);
	//	КонецЦикла;
	//	//////СписокЗначений = СтрЗаменить(СписокЗначений, "><", "> <");
	//	СписокЗначений = СтрЗаменить(СписокЗначений, Символы.ПС, Символы.ВК);
	//	УспешностьЗавершенияКомпоненты = ДрайверКомпоненты.ЗаполнитьРеквизиты(СписокЗначений);  	
	//	
	//	Если УспешностьЗавершенияКомпоненты = Ложь Тогда
	//		Сообщить("Невозможно заполнить реквизиты файла: " + ИмяЦелевогоФайла, СтатусСообщения.Важное); 
	//		Возврат Неопределено;						
	//	КонецЕсли;
	//КонецЕсли;
	
	//Отредактировано от 22.06.2018 Лебедева: можно работать с таблицами, которые содержат итоговые строки
	//WORD\OpenOffice
	Если Строка(ТекущийДок) = "Word" Тогда
		ОбъектWord = Новый COMОбъект("Word.Application");
		Попытка
			ОбъектWord.Documents.add(ПолноеИмяФайла);
		Исключение
			Сообщить("Невозможно открыть файл шаблона: " + ПолноеИмяФайла, СтатусСообщения.Важное);
			ОбъектWord.Quit(); 
			Возврат Неопределено;
		КонецПопытки;
		Попытка
			ActiveDoc = ОбъектWord.ActiveDocument;
			Content = ActiveDoc.Content;
			Для Каждого Строка из МассивСтр Цикл
				
				// ++ Страх
				Если ЭтоКартинка(Строка.Поле) = Истина Тогда
					
					ЗаменитьТегКартинкой(ОбъектWord, ActiveDoc, Строка)
					
				Иначе
					ВыполнитьЗамену(Content, Строка.Поле, Строка.Значение); 
				КонецЕсли;
				
			КонецЦикла;
		Исключение 
			Сообщить("Невозможно заполнить реквизиты файла: " + ИмяЦелевогоФайла, СтатусСообщения.Важное); 
			ОбъектWord.Quit();
			Возврат Неопределено;		
		КонецПопытки;
		
		//ВСТАВКА ТАБЛИЦЫ ДЛЯ ШАБЛОНА WORD
		// Отредактировано от 21.01.2018 Лебедева: Вместо работы со строкой Таблицы Word работа с Ячейкой	
		НаборШаблоныПечатиТабл = УЭДСервер.Таблица_ТаблицаВыбораТаблиц(СправочникШаблон.Шаблон);	
		Для Каждого ТекСтрокаПодстановки Из НаборШаблоныПечатиТабл Цикл
			TabIndex = 0;
			TabCount = ActiveDoc.Tables.Count;
			Для J = 1 по TabCount цикл
				oTbl = ActiveDoc.Tables(J);
				oTbl.Range.Find.Text = строка(ТекСтрокаПодстановки.ПолеТаблицы);
				oTbl.Range.Find.MatchWildcards = True;
				oTbl.Range.Select();
				isFound = oTbl.Range.Find.Execute(строка(ТекСтрокаПодстановки.ПолеТаблицы));
				Selection=oTbl.Select();
				Если  isFound = true Тогда
					TabIndex = J;
				конецЕсли;
			КонецЦикла;
			#Если ТонкийКлиент Тогда
				РезультатФункцииТаблиц = УдалитьОбщегоНазначения.ПередатьТаблицуНаТК(ТекСтрокаПодстановки.Функция,ВызывающийДокумент);
			#Иначе
				 РезультатФункцииТаблиц = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(ТекСтрокаПодстановки.Функция, ВызывающийДокумент);
			#КонецЕсли
			НаборШаблоныПечатиТаблЗнач = УЭДСервер.Таблица_ТаблицаТаблиц(СправочникШаблон.Шаблон, ТекСтрокаПодстановки.UID);
			Табл = ActiveDoc.Tables.Item(TabIndex);
			СчетчикСтрокТаблицыWord = Табл.Rows.Count();
			SelCell = Табл.Range.Cells(Табл.Range.Cells.Count);
					
			Для СчетчикСтрок = 0 По РезультатФункцииТаблиц.Количество() - 1 Цикл
				Row=Табл.Rows.Add(SelCell);
				СчетчикКолонок = 0;
				Для Каждого Колонка из НаборШаблоныПечатиТаблЗнач Цикл
					Значение = РезультатФункцииТаблиц[СчетчикСтрок][Колонка.Значение];
					Если ЗначениеЗаполнено(Колонка.Функция) Тогда
						Значение = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(Колонка.Функция,
						ВызывающийДокумент, Значение); 	
					Иначе 
						Значение = строка(Значение);
					КонецЕсли;
					Табл.Cell(СчетчикСтрокТаблицыWord,СчетчикКолонок+1).Range.Text = Значение; 
					СчетчикКолонок = СчетчикКолонок + 1;
				КонецЦикла;
				СчетчикСтрокТаблицыWord = СчетчикСтрокТаблицыWord+1;
			КонецЦикла;
			
			TargetText = строка(ТекСтрокаПодстановки.ПолеТаблицы);
			CellIndex = 1;
			Для каждого oCell из Табл.Range.Cells Цикл 
				ИсходнаяСтрока = строка(oCell.Range.Text);
				ИсходнаяСтрока = УбратьЛишниеСимволы(ИсходнаяСтрока);
				Если ИсходнаяСтрока = TargetText Тогда
					Табл.Range.Cells(CellIndex).Delete(2); //2 - это вордовская константа удаления: удаляется вся строка, содержащая выбранную ячейку
				КонецЕсли;
				CellIndex = CellIndex+1;
			КонецЦикла;	
			ActiveDoc.Fields.Update();
			ОбъектWord.ActiveWindow.View.ShowFieldCodes = False;	
			
		КонецЦикла;
		
		//Конец Вставки Таблицы для WORD		
		Попытка
			ОбъектWord.ActiveDocument.SaveAs(ИмяЦелевогоФайла);
			ОбъектWord.Quit();
			Сообщить("Создан документ " + ИмяЦелевогоФайла); 	
			Возврат ИмяЦелевогоФайла;
		Исключение
			Сообщить("Невозможно сохранить файл: " + ИмяЦелевогоФайла, СтатусСообщения.Важное); 
			ОбъектWord.Quit();
			Возврат Неопределено;		
		КонецПопытки;
	ИначеЕсли Строка(ТекущийДок) = "OpenOffice" Тогда
		ServiceManager = Новый COMОбъект("com.sun.star.ServiceManager");
		Desktop        = ServiceManager.createInstance("com.sun.star.frame.Desktop");
		ОбъектОО = Новый COMОбъект("MSScriptControl.ScriptControl");
		ОбъектОО.Language="javascript";
		ОбъектОО.Eval("Args=new Array()");
		Args = ОбъектОО.Eval("Args"); 
		ОбъектОО.AddObject("ServiceManager", ServiceManager);
		PropertyValue = ServiceManager.Bridge_GetStruct("com.sun.star.beans.PropertyValue");
		PropertyValue.Name = "Hidden";
		PropertyValue.Value = Истина;
		Args = Новый COMSafeArray("VT_VARIANT", 1);
		Args.SetValue(0, PropertyValue);

		оDoc = Desktop.LoadComponentFromURL(ПреобразоватьВURL(ПолноеИмяФайла), "_blank", 0, Args);
		Replace = оDoc.CreateReplaceDescriptor();
		Для Каждого Строка из МассивСтр Цикл        
			Replace.SearchString  = Строка.Поле;
			Replace.ReplaceString = Строка.Значение;        
			оDoc.ReplaceAll(Replace);
		КонецЦикла;
		//Вставка Таблицы для OPEN OFFICE
		НаборШаблоныПечатиТабл = УЭДСервер.Таблица_ТаблицаВыбораТаблиц(СправочникШаблон.Шаблон);
		//поиск метки нужной таблицы и запоминание ее индекса
		TabCount = оDoc.getTextTables().getCount();
		FindDescriptor = оDoc.createSearchDescriptor();
		Для Каждого ТекСтрокаПодстановки Из НаборШаблоныПечатиТабл Цикл
			FindDescriptor.SearchString = строка(ТекСтрокаПодстановки.ПолеТаблицы);
			isFound = оDoc.findAll(FindDescriptor);
			oView = оDoc.getCurrentController();
			oView.select(isFound);
			oView2 = оDoc.setCurrentController(oView);
			oVC = оDoc.CurrentController.getViewCursor(); 
			tName = oVC.TextTable.getName();
			oTable= оDoc.TextTables.getByName(tName);		
			//Конец поиска метки
			Replace = оDoc.CreateReplaceDescriptor();
			Replace.SearchString  = строка(ТекСтрокаПодстановки.ПолеТаблицы);
			Replace.ReplaceString = строка(ТекСтрокаПодстановки.Функция);
			оDoc.ReplaceAll(Replace);
			
			#Если ТонкийКлиент Тогда
				РезультатФункцииТаблиц = УдалитьОбщегоНазначения.ПередатьТаблицуНаТК(ТекСтрокаПодстановки.Функция,ВызывающийДокумент);
			#Иначе
				 РезультатФункцииТаблиц = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(ТекСтрокаПодстановки.Функция, ВызывающийДокумент);
			#КонецЕсли
						
			oRows = oTable.getRows();
			rowCount = oTable.getRows().getCount(); 
			НаборШаблоныПечатиТаблЗнач = УЭДСервер.Таблица_ТаблицаТаблиц(СправочникШаблон.Шаблон, ТекСтрокаПодстановки.UID);
			
			//Ищем стратегическую пустую строку в шаблоне, куда будем писать результат таблицы
			//GetType() возвращает код типа данных в строке: 0 = empty; 2 = text;
			Для RowIndex = 0 По rowCount-1 Цикл
				CurrenCell = oTable.getCellByPosition(0,RowIndex);
				type = CurrenCell.gettype();
				Если type = 0 Тогда
					ИндексПустойСтроки = RowIndex;
				КонецЕсли;	
			КонецЦикла;
			
			Для СчетчикСтрок = 0 По РезультатФункцииТаблиц.Количество() - 1 Цикл
				oRows.insertByIndex(ИндексПустойСтроки, 1);
				СчетчикКолонок = 0;
				Для Каждого Колонка из НаборШаблоныПечатиТаблЗнач Цикл
					Значение = РезультатФункцииТаблиц[СчетчикСтрок][Колонка.Значение];
					Если ЗначениеЗаполнено(Колонка.Функция) Тогда
						Значение = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(Колонка.Функция,
						ВызывающийДокумент, Значение); 	
					Иначе 
						Значение = строка(Значение);
					КонецЕсли;
					 Ячейка=oTable.getCellByPosition(СчетчикКолонок,ИндексПустойСтроки);
					Ячейка.getText().setString(Значение);
					СчетчикКолонок = СчетчикКолонок + 1;
				КонецЦикла;
				ИндексПустойСтроки=ИндексПустойСтроки+1;
			КонецЦикла;
			rowCount = oTable.getRows().getCount();
			oRows.removeByIndex(ИндексПустойСтроки,1);
		КонецЦикла;
		//Конец Вставки Таблицы для ОО
		
		Попытка
			оDoc.StoreAsURL(ПреобразоватьВURL(ИмяЦелевогоФайла), Args);
			оDoc.Store();
			оDoc.Close(1);
			Сообщить("Создан документ " + ИмяЦелевогоФайла); 	
			Возврат ИмяЦелевогоФайла;
		Исключение
			Сообщить("Невозможно сохранить файл: " + ИмяЦелевогоФайла, СтатусСообщения.Важное); 
			оDoc.Close(1);
			Возврат Неопределено;		
		КонецПопытки;
	КонецЕсли;
    //конецWORD\OpenOffice
	// Таблица для ОО должна содержать тег таблицы в первой строке, а также пустую строку для вставки данных
	//Таблица для WORD должна содержать строку таблицы с тегом таблицы

	
	
	//Попытка
	//	ActiveDoc = ОбъектWord.ActiveDocument;
	//	Content = ActiveDoc.Content;
	//	Для Каждого Строка из МассивСтр Цикл
	//		Замена = Content.Find;
	//		Замена.Execute(Строка.Поле,,,,,,,,, Строка.Значение, 2);			
	//	КонецЦикла;
	//Исключение 
	//	Сообщить("Невозможно заполнить реквизиты файла: " + ИмяЦелевогоФайла, СтатусСообщения.Важное); 
	//	ОбъектWord.Quit();
	//	Возврат Неопределено;		
	//КонецПопытки;
	
	
	
	
	//УспешностьЗавершенияКомпоненты = ДрайверКомпоненты.СохранитьДокумент(ИмяЦелевогоФайла);	
	//Если УспешностьЗавершенияКомпоненты = Ложь Тогда
	//	Сообщить("Невозможно сохранить файл: " + ИмяЦелевогоФайла, СтатусСообщения.Важное); 
	//	Возврат Неопределено;		
	//Иначе
	//	Сообщить("Создан документ " + ИмяЦелевогоФайла); 	
	//	Возврат ИмяЦелевогоФайла;				
	//КонецЕсли;
	
	
	//Попытка
	//	ОбъектWord.ActiveDocument.SaveAs(ИмяЦелевогоФайла);
	//	ОбъектWord.Quit();
	//	Сообщить("Создан документ " + ИмяЦелевогоФайла); 	
	//	Возврат ИмяЦелевогоФайла;
	//Исключение
	//	Сообщить("Невозможно сохранить файл: " + ИмяЦелевогоФайла, СтатусСообщения.Важное); 
	//	ОбъектWord.Quit();
	//	Возврат Неопределено;		
	//КонецПопытки;
КонецФункции

Процедура ВыполнитьЗамену(Content, Поле, Значение)
	Если СтрДлина(Значение) > 200 Тогда 
		строка = Значение;
		МассивСтрок = Новый Массив;
		
		к = 0;
		ОбщийТег = "";
		Пока СтрДлина(Строка) > 0 Цикл
			стр = Лев(Строка, 200);
			Структура = Новый Структура;
			Тег = "<Тег" + строка(к) + ">";
			Структура.Вставить("Тег", Тег);
			Структура.Вставить("Значение", стр);
			МассивСтрок.Добавить(Структура);
			
			ОбщийТег = ОбщийТег + Тег;
			к = к + 1;
			Строка = Прав(Строка, СтрДлина(Строка) - стрДлина(Стр));
		КонецЦикла;
		
		//Для Каждого Элемент Из МассивСтрок Цикл
		//	Сообщить(Элемент.Тег);
		//	Сообщить(Элемент.Значение);
		//КонецЦикла;
		
	//	Сообщить(ОбщийТег);
		
		Замена = Content.Find;
		Замена.Execute(Поле,,,,,,,,, ОбщийТег, 2);	
		
		Для Каждого Элемент из МассивСтрок Цикл
			Замена = Content.Find;
			Замена.Execute(Элемент.Тег,,,,,,,,, Элемент.Значение, 2);	
		КонецЦикла;
		
	Иначе
		Замена = Content.Find;
		Замена.Execute(Поле,,,,,,,,, Значение, 2);
		
	КонецЕсли;
КонецПроцедуры

// Выбор типа генерации документов (пакетный / не пакетный)
// и необходимость склеивания файлов в один.
//
// Параметры:
//	Объект	- СправочникСсылка, 
//			- ДокументСсылка	- Объект для которого создается печатный документ,
//  ВидПечатногоДокумента 		- СправочникСсылка	- Вид печатного документа,
//	КаталогПоУмолчанию			- путь к катологу куда поместиться созданный документ.
//
// Возвращаемое значение:
//	Путь к созданному документу Word.
//
Функция ОбработкаПутейИГенерацияДокументов(Объект, ВидПечатногоДокумента, КаталогПоУмолчанию, 
		СтрокаТаблициПлатежиЛП = Неопределено, Массив_НаПечать=Неопределено, ГлобальнаяСклейка=Ложь, ПрикрепитьФайлы,НеПечататьПовторно=Ложь)
		
	КомпонентаСклонения = "";	                          
	мсШаблонов = ОбъектыСервер.РазыменоватьСсылку(ВидПечатногоДокумента, 
			"ШаблоныПечатныхФорм.Выгрузить().ВыгрузитьКолонку(""ШаблонПечатнойФормы"")");		
	ИмяСозданногоФайла = "";			
	СтандартнаяОбработка = Ложь;	
	СклеиватьВОдинФайл = ОбъектыСервер.РазыменоватьСсылку(ВидПечатногоДокумента, "СклеиватьВОдинФайл");	
	Каталог = Новый Файл(КаталогПоУмолчанию);	
	Если Не Каталог.Существует() Тогда
		Сообщить("Указанный каталог для хранения документов не существует!", СтатусСообщения.Внимание);
		Возврат Неопределено;		
	КонецЕсли;	
					
	// Демина НЮ 20130319_1752
	МассивКоличествоКопий = Новый Массив;
	МассивПрикреплятьДокумент = Новый Массив;
	МассивРегистрироватьИсходящий = Новый Массив;
	РезультатМассив = ПрикреплениеСервер.ШаблонПечатнойФормыУЭДСервер(ВидПечатногоДокумента, Объект, МассивКоличествоКопий, МассивПрикреплятьДокумент, МассивРегистрироватьИсходящий,
			"Справочник.тсШаблоныПечатныхДокументов",НеПечататьПовторно);
	//РезультатМассив = УЭДСервер.ШаблонПечатнойФормыУЭДСервер(ВидПечатногоДокумента, Объект, МассивКоличествоКопий, 
	//		"Справочник.тсШаблоныПечатныхДокументов");
	КоличествоШаблонов = РезультатМассив.Количество();	
	
	Структура = Новый Структура;
	
	// Для Глобальной склейки
	Если ГлобальнаяСклейка Тогда
		МассивФайлов = Новый Массив;
		ВыборкаСвойств = "";   
		КомпонентаСклонения = "";
		ШаблонСсылка = "";
		ПутьДляПакетаДокументов = СоздатьФайлыВКаталоге_ГлобальнаяСклейка(Истина, ПрикрепитьФайлы, РезультатМассив, ВидПечатногоДокумента, 
				КаталогПоУмолчанию, ШаблонСсылка, Объект, КомпонентаСклонения, ВыборкаСвойств, Неопределено, МассивФайлов);
		
		Структура = Новый Структура;
		Структура.Вставить("МассивФайлов", МассивФайлов);
		Возврат Структура;
	КонецЕсли;
	
	
	// Выбор типа Обработки.
	Если КоличествоШаблонов = 1 Тогда
		
		ШаблонСсылка = РезультатМассив[0].Шаблон;
        ВыборкаСвойств = "";
		
		Если НЕ ЗначениеЗаполнено(ОбъектыСервер.РазыменоватьСсылку(ШаблонСсылка, "Шаблон")) Тогда
			Сообщить("Не загружен шаблон в печатную форму " + Строка(ШаблонСсылка) + "!");
			Возврат Неопределено;
		КонецЕсли;

		// Создание таблиц в Word'e.
		тзТС = Неопределено;
		ИндексСтроки = Неопределено;
		БезРассылки = Истина;
		Visible = True;			                 			
					
		//УспешностьЗавершенияКомпоненты = ДрайверКомпоненты.ОткрытьWord(Ложь);
		//Если УспешностьЗавершенияКомпоненты = Ложь Тогда
		//	Сообщить("Невозможно открыть MS Word! Возможно Word не установлен.", СтатусСообщения.ОченьВажное); 
		//	Возврат Неопределено;				 					
		//КонецЕсли;			
			
		ИмяКаталога = ОбъектыСервер.РазыменоватьСсылку(ВидПечатногоДокумента, "Наименование") + " - " + ОбъектыСервер.РазыменоватьСсылку(Объект, "Метаданные().Синоним");	   
		ПутьДляПакетаДокументов = СформироватьКаталогДляГрупп(КаталогПоУмолчанию, Объект, ИмяКаталога);
		Если тсПроверитьСуществованиеКаталога(ПутьДляПакетаДокументов) = Ложь Тогда
			Возврат Неопределено;
		КонецЕсли;

		ИмяСозданногоФайла = СгенерироватьШаблон(РезультатМассив[0], Объект, ПутьДляПакетаДокументов, ИндексСтроки, БезРассылки,
				КомпонентаСклонения, "", ВыборкаСвойств, Неопределено, ПрикрепитьФайлы, "", СтрокаТаблициПлатежиЛП);			

		ЗакрытьДокументИWord(2);
		Если ОбъектыСервер.РазыменоватьСсылку(ВидПечатногоДокумента, "ОткрыватьПослеФормирования") Тогда
			ОткрытьИПоказатьДокументWord(ИмяСозданногоФайла);			
		КонецЕсли;
		
		Если Массив_НаПечать <> Неопределено Тогда
			Структура = Новый Структура;
			Структура.Вставить("ПутьКФайлу", ИмяСозданногоФайла);
			Структура.Вставить("КоличествоКопий", МассивКоличествоКопий[0]);
			Структура.Вставить("КоличествоРаспечатано", 0);
			Структура.Вставить("ТипФайла", ОбъектыСервер.РазыменоватьСсылку(РезультатМассив[0].Шаблон, "ТипПрикрепляемогоФайла"));
			Структура.Вставить("Прикреплять", РезультатМассив[0].Прикреплять);
			Структура.Вставить("Исходящий", РезультатМассив[0].Исходящий);
			Структура.Вставить("Шаблон", РезультатМассив[0].Шаблон);
			Структура.Вставить("РегНомер", РезультатМассив[0].РегНомер);
			Массив_НаПечать.Добавить(Структура);	
			
			////  ПРИКРЕПЛЕНИЕ ФАЙЛОВ К ОБЪЕКТУ
			Если ПрикрепитьФайлы Тогда
				Массив_НаПрикрепление = ПолучитьМассивНаПрикрепление(Массив_НаПечать);
				Если Массив_НаПрикрепление[0].Прикреплять Тогда
					Наименование = ОбъектыСервер.РазыменоватьСсылку(Объект, "Наименование");
					Попытка
						ДокументПрикрепление = ПрикреплениеФайлов.ПрикрепитьФайлы(Объект, Массив_НаПрикрепление[0]);
						Если ОбъектыСервер.ПолучитьЗначениеКонстанты("АвторегистрацияПечатныхФорм") И Массив_НаПрикрепление[0].Исходящий Тогда
							РегистрацияКорреспонденции.СоздатьРегистраторИсходящейКорреспонденции(Объект, Массив_НаПрикрепление[0].Шаблон, ДокументПрикрепление, Массив_НаПрикрепление[0].РегНомер);
							Сообщить("По объекту " + Наименование + " создана запись в журнале регистрации исходящих");
						КонецЕсли;
						Сообщить("По объекту " + Наименование + " файлы прикреплены");
					Исключение
						Сообщить("Ошибка! По объекту " + Наименование + " файлы не прикреплены!");
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Структура.Вставить("ИмяФайла", ИмяСозданногоФайла);
		Структура.Вставить("ИмяКаталога", ПутьДляПакетаДокументов);
		Возврат Структура;
	ИначеЕсли КоличествоШаблонов > 1 Тогда	
		Пакет = Истина;
		// Склеивание в один файл.
		Если СклеиватьВОдинФайл Тогда		
			ПутьДляПакетаДокументов = "";
			ИмяСозданногоФайла = СоздатьИОбработатьВременныеФайлы(Пакет, РезультатМассив, ВидПечатногоДокумента, 
					КаталогПоУмолчанию, ШаблонСсылка, Объект, КомпонентаСклонения, Неопределено, ВыборкаСвойств, Неопределено,ПутьДляПакетаДокументов, ПрикрепитьФайлы);							
					
			Если Массив_НаПечать<>Неопределено Тогда
				Структура = Новый Структура;
				Структура.Вставить("ПутьКФайлу", ИмяСозданногоФайла);
				Структура.Вставить("КоличествоКопий", 1);
				Структура.Вставить("КоличествоРаспечатано", 0);
				Массив_НаПечать.Добавить(Структура);	
			КонецЕсли;
			
			Структура.Вставить("ИмяФайла", ИмяСозданногоФайла);
			Структура.Вставить("ИмяКаталога", ПутьДляПакетаДокументов);
			Возврат Структура;
			//Возврат ИмяСозданногоФайла;     								
			
		Иначе 
			МассивФайлов = Новый Массив;
			
			ПутьДляПакетаДокументов = СоздатьФайлыВКаталоге(Пакет, РезультатМассив, ВидПечатногоДокумента, 
					КаталогПоУмолчанию, ШаблонСсылка, Объект, КомпонентаСклонения, ВыборкаСвойств, Неопределено, МассивФайлов, ПрикрепитьФайлы);
			
			Если Массив_НаПечать<>Неопределено Тогда
				Для й=0 По КоличествоШаблонов-1 Цикл
					Структура = Новый Структура;
					Структура.Вставить("ПутьКФайлу", МассивФайлов[й]);
					Структура.Вставить("КоличествоКопий", МассивКоличествоКопий[й]);
					Структура.Вставить("КоличествоРаспечатано", 0);
					Структура.Вставить("Шаблон", РезультатМассив[й].Шаблон); 
					//Структура.Вставить("ТипФайла", РезультатМассив[й].Шаблон.ТипПрикрепляемогоФайла);
					Структура.Вставить("ТипФайла", ОбъектыСервер.РазыменоватьСсылку(РезультатМассив[й].Шаблон, "ТипПрикрепляемогоФайла"));
					Структура.Вставить("Прикреплять", РезультатМассив[й].Прикреплять);
					Структура.Вставить("Исходящий", РезультатМассив[й].Исходящий);
					Структура.Вставить("РегНомер", РезультатМассив[й].РегНомер);
					
					Массив_НаПечать.Добавить(Структура);						
				КонецЦикла;
				
				////  ПРИКРЕПЛЕНИЕ ФАЙЛОВ К ОБЪЕКТУ
				Если ПрикрепитьФайлы Тогда
					Массив_НаПрикрепление = ПолучитьМассивНаПрикрепление(Массив_НаПечать);
					Для Каждого Эл Из Массив_НаПрикрепление Цикл
						Если Эл.Прикреплять Тогда
							Наименование = ОбъектыСервер.РазыменоватьСсылку(Объект, "Наименование");
							Попытка
								ДокументПрикрепление = ПрикреплениеФайлов.ПрикрепитьФайлы(Объект, Эл);
								Если ОбъектыСервер.ПолучитьЗначениеКонстанты("АвторегистрацияПечатныхФорм") И Эл.Исходящий Тогда
									РегистрацияКорреспонденции.СоздатьРегистраторИсходящейКорреспонденции(Объект, Эл.Шаблон, ДокументПрикрепление, Эл.РегНомер);
									Сообщить("По объекту " + Наименование + " создана запись в журнале регистрации исходящих");
								КонецЕсли;
								Сообщить("По объекту " + Наименование + " файлы прикреплены");
							Исключение
								Сообщить("Ошибка! По объекту " + Наименование + " файлы не прикреплены");
							КонецПопытки;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;					
			
			Структура.Вставить("ИмяФайла", ПутьДляПакетаДокументов);
			Структура.Вставить("ИмяКаталога", ПутьДляПакетаДокументов);
			Возврат Структура;
		КонецЕсли;                           		
	КонецЕсли;                              			
КонецФункции	
	                   	
// Генирирует файл из шаблона Word.
//
// Параметры:
//  СправочникШаблон 	– Справочник 	– Справчник шаблона,
//  Документ			– Документ	 	– Документ на основании которого строится файл Word,
//  КаталогПоУмолчанию	- Строка	    - Место для сохранения файла,
//	ИндексСтроки		- Число			- используется для создания рассылочных списков, 
//										соответствует номер строки ТЧ на основе которой создается.
//	БезРассылки			- Булево		- признак необходимости создания рассылочных сприсоков на
//										основе ТЧ,
//  КомпонентаСклонения - ВнешняяКомпонента - склоняет ФИО в указанном падеже,
//
// Возвращаемое значение:
//   <Строка>   – Полное имя созданного файла.
//
Функция СгенерироватьШаблон(СправочникШаблон, Документ, КаталогПоУмолчанию, ИндексСтроки, БезРассылки, 
		КомпонентаСклонения, Префикс, ВыборкаСвойств, тзТаблицаДляВставки, 
		ПрикрепитьФайлы, НомерСтроки = Неопределено, СтрокаТаблициПлатежиЛП = Неопределено)
	ИмяФайлаШаблона_dot = ""; 		
	ИмяСозданногоФайла = ШаблонИзСправочника(СправочникШаблон, Документ, КаталогПоУмолчанию, ИндексСтроки, 
			БезРассылки, КомпонентаСклонения, Префикс, ВыборкаСвойств, тзТаблицаДляВставки, 
			НомерСтроки, СтрокаТаблициПлатежиЛП, ИмяФайлаШаблона_dot, ПрикрепитьФайлы);		
	ЗакрытьДокументИWord(0);		
	УдалитьФайлы(ИмяФайлаШаблона_dot);		
	Возврат ИмяСозданногоФайла;
КонецФункции

Функция ПечатьДокументаWORD(Массив_НаПечать, Печатать = Ложь)
	Если Печатать = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	Расширение= ПолучитьРасширение();
	ПечатьПрошлаУспешно = Истина;	
	
    Word = Неопределено;
	Документ = Неопределено;
	Excel = Неопределено;
	Лист = Неопределено;
	Книга = Неопределено;
	
	Для Каждого Стр Из Массив_НаПечать Цикл		
		
		Структура = Стр;		
		Путь = Структура.ПутьКФайлу;
		КоличествоКопий = Структура.КоличествоКопий;		
		Файл = Новый Файл(Путь);
		
		Если Найти(НРег(Путь), Расширение) > 0 или Найти(НРег(Путь), ".rtf") > 0 Тогда
			
			Если Word = Неопределено Тогда
				Word = Новый COMОбъект("Word.Application"); 
			КонецЕсли;
			
			Если Файл.ЭтоФайл() И Файл.Существует() Тогда			
				КоличествоРаспечатано = 0;
				Для й = 1 По КоличествоКопий Цикл
					Попытка
						Документ = Word.Documents.Add(Путь);
						Word.PrintOut();
						Документ.Close();
						КоличествоРаспечатано = КоличествоРаспечатано + 1;
					Исключение
						ПечатьПрошлаУспешно = Ложь;
					КонецПопытки;
				КонецЦикла;
				Стр.КоличествоРаспечатано = КоличествоРаспечатано;
				
			ИначеЕсли Файл.ЭтоКаталог() И Файл.Существует() Тогда	
				СписокФайлов = НайтиФайлы(Строка(Путь), "*.*");
				КолвоФайлов = СписокФайлов.Количество();
				Для й = 0 По КолвоФайлов - 1 Цикл
					Если СписокФайлов[й].ЭтоКаталог() ИЛИ Лев(СписокФайлов[й].Имя,1) = "~" Тогда
						Продолжить;
					КонецЕсли;
					Попытка
						Документ = Word.Documents.Add(СписокФайлов[й].ПолноеИмя);
						Word.PrintOut();
						Документ.Close();
					Исключение
						ПечатьПрошлаУспешно = Ложь;
					КонецПопытки;
				КонецЦикла;
			КонецЕсли;		
			
		ИначеЕсли Найти(НРег(Путь), ".xls") > 0 Тогда
			
			Если Excel = Неопределено Тогда
				Excel = Новый COMОбъект("Excel.Application"); 	
			КонецЕсли;
			
			Если Файл.ЭтоФайл() И Файл.Существует() Тогда			
				КоличествоРаспечатано = 0;
				Для й = 1 По КоличествоКопий Цикл
					Попытка
						Книга = Excel.WorkBooks.Open(Стр);
						Лист = Excel.Sheets();
						Лист.PrintOut();
						Книга.Close();
						КоличествоРаспечатано = КоличествоРаспечатано + 1;
					Исключение
						ПечатьПрошлаУспешно = Ложь;
					КонецПопытки;
				КонецЦикла;
				Стр.КоличествоРаспечатано = КоличествоРаспечатано;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;	
	
	Если Word <> Неопределено Тогда
		Word.Quit();
	КонецЕсли;
	Если Excel <> Неопределено Тогда
		Excel.Quit();
	КонецЕсли;
    Word = Неопределено;
	Документ = Неопределено;
	Excel = Неопределено;
	Лист = Неопределено;
	Книга = Неопределено;

	
	Возврат ПечатьПрошлаУспешно;
	
КонецФункции

&НаКлиенте
Функция ПечатьФайлов(М = Неопределено)
	Структура = Новый Структура;
	М_Файлы = Новый Массив;
	М_РезультатПечати = Новый Массив;
	Расширение = ПолучитьРасширение();
	Если М = Неопределено Тогда
		Структура.Вставить("Файлы", М_Файлы);
		Структура.Вставить("РезультатПечати", М_РезультатПечати);
		Возврат Структура;
	КонецЕсли;
	
	М_Картинки = Новый Массив;
	М_Word = Новый Массив;
	М_Excel = Новый Массив;
	
	Для Каждого Эл Из М Цикл
		Файл = Новый Файл(Эл);
		Если НЕ Файл.Существует() Тогда 
			Продолжить;
		КонецЕсли;
		
		Если СтрЧислоВхождений(НРег(Эл), Расширение) > 0 или СтрЧислоВхождений(НРег(Эл), ".rtf") > 0 Тогда
			М_Word.Добавить(Эл);	
		ИначеЕсли СтрЧислоВхождений(НРег(Эл), ".xls") > 0 Тогда
			М_Excel.Добавить(Эл);
		Иначе
			М_Картинки.Добавить(Эл);
		КонецЕсли;
	КонецЦикла;
	
	
	Если М_Word.Количество() > 0 ИЛИ М_Картинки.Количество() > 0 Тогда	
		Word = Новый COMОбъект("Word.Application"); 
		
		// Файлы ворд
		Для Каждого Стр Из М_Word Цикл
			М_Файлы.Добавить(Стр);	
			Попытка
				Документ = Word.Documents.Add(Стр);	
				Word.PrintOut();
				Документ.Close();
				М_РезультатПечати.Добавить(1);
			Исключение
				М_РезультатПечати.Добавить(0);
			КонецПопытки;
		КонецЦикла;
		
		// Картинки
		Документ = Word.Documents.Add();
		Для Каждого Стр Из М_Картинки Цикл
			М_Файлы.Добавить(Стр);	
			Попытка
				Picture = Word.Selection.InlineShapes.AddPicture(Стр,,);
				Word.PrintOut();  
				Word.Selection.WholeStory();
				Word.Selection.TypeBackspace();
				М_РезультатПечати.Добавить(1);
			Исключение
				М_РезультатПечати.Добавить(0);
			КонецПопытки;
		КонецЦикла;
		
		Word.Quit();
		Word = Неопределено;
		Документ = Неопределено;
		Picture = Неопределено;		
	КонецЕсли;	
	
	// Файлы Эксель
	Если М_Excel.Количество() > 0 Тогда
		Excel = Новый COMОбъект("Excel.Application"); 	
		Для Каждого Стр Из М_Excel Цикл
			М_Файлы.Добавить(Стр);	
			Попытка
				Книга = Excel.WorkBooks.Open(Стр);
				Лист = Excel.Sheets();
				Лист.PrintOut();
				Книга.Close();
				М_РезультатПечати.Добавить(1);
			Исключение
				М_РезультатПечати.Добавить(0);
			КонецПопытки;
		КонецЦикла;
		Excel.Quit();
		Excel = Неопределено;
		Книга = Неопределено;
		Лист = Неопределено;
	КонецЕсли;
	
	Структура.Вставить("Файлы", М_Файлы);
	Структура.Вставить("РезультатПечати", М_РезультатПечати);
	Возврат Структура;	
КонецФункции

&НаКлиенте
Функция ПолучитьМассивФайлов(МассивФайловПоПорядку, ПутьДляПакетаДокументов)

	МассивФайлов = МассивФайловПоПорядку;
	Если МассивФайловПоПорядку = Неопределено Тогда	
	
		МассивФайлов_Врем = НайтиФайлы(ПутьДляПакетаДокументов, "*.doc?");
		МассивФайлов = Новый Массив;
		Для Каждого Ф Из МассивФайлов_Врем Цикл
		
			Если Найти(ф.ПолноеИмя, "~") = 0 Тогда
			
				МассивФайлов.Добавить(ф);
			
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат МассивФайлов;

КонецФункции // ()

&НаКлиенте
Функция СклеитьДокументВорд(ПутьДляПакетаДокументов, ИмяФайлаСлияния, МассивФайловПоПорядку)

	МассивФайлов = ПолучитьМассивФайлов(МассивФайловПоПорядку, ПутьДляПакетаДокументов);
	Если МассивФайлов.Количество() < 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
	
		Word = Новый COMОбъект("Word.Application");
		Word.Documents.Add();
		й = 0;
		Для Каждого ФФ Из МассивФайлов Цикл
		
			Если ТипЗнч(ФФ) = Тип("Строка") Тогда
				Ф = Новый Файл(ФФ);
			ИначеЕсли ТипЗнч(ФФ) = Тип("Файл") Тогда
				Ф = Новый Файл(ФФ.ПолноеИмя);
			КонецЕсли;
			
			Если Не Ф.Существует() Тогда 
				Продолжить;
			КонецЕсли;
			
			й = й + 1;
			
			Если й > 1 Тогда
				Word.Selection.InsertBreak();
				Word.Selection.MoveLeft(1, 2);
				Word.Selection.TypeBackspace();
				Word.Selection.MoveRight(1, 2);
			КонецЕсли;
			
			Word.Documents.Add(Ф.ПолноеИмя);
			Word.Selection.WholeStory();
			Word.Selection.Copy();
			Word.Documents.Item(2).Saved = True;
			Word.ActiveWindow.Close(false);	
			
			// Вставляем в единый док
			Word.Documents.Item(1).Activate();
			Word.Selection.PasteAndFormat(0);
			
		КонецЦикла;
		Word.Selection.TypeBackspace();
		Word.Documents.Item(1).SaveAs(ИмяФайлаСлияния);
		Word.Quit();
	
	Исключение
		Вопрос(ОписаниеОшибки(), РежимДиалогаВопрос.ОК);
		Если Word <> Неопределено Тогда
			Word.Quit();
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции // ()

&НаКлиенте
Функция СклеитьФайлы(ПутьДляПакетаДокументов, ИмяФайлаСлияния, МассивФайловПоПорядку = Неопределено)
	ТекущийДок = ОбъектыСервер.ПолучитьЗначениеКонстанты("ТипШаблонаДляПечати");
	//склеить WORD
	Если Строка(ТекущийДок) = "Word" Тогда	
	
		Возврат СклеитьДокументВорд(ПутьДляПакетаДокументов, ИмяФайлаСлияния, МассивФайловПоПорядку);
		
		
		
		
		
		//СКЛЕИТЬ ОО
	ИначеЕсли Строка(ТекущийДок) = "OpenOffice" Тогда
		Сообщить ("Создан общий файл в OpenOffice");
		Если МассивФайловПоПорядку = Неопределено Тогда	
			МассивФайлов_Врем = НайтиФайлы(ПутьДляПакетаДокументов, "*.odt?");
			МассивФайлов = Новый Массив;
			Для Каждого Ф Из МассивФайлов_Врем Цикл
				Если Найти(ф.ПолноеИмя, "~") = 0 Тогда
					МассивФайлов.Добавить(ф);	
				КонецЕсли;
			КонецЦикла;
			//1 ПУТЬ
			Если МассивФайлов.Количество() < 1 Тогда
				Возврат Ложь;
			КонецЕсли;
			
				Попытка
					ServiceManager = Новый COMОбъект("com.sun.star.ServiceManager");
					Desktop        = ServiceManager.createInstance("com.sun.star.frame.Desktop");
					ОбъектОО = Новый COMОбъект("MSScriptControl.ScriptControl");
					ОбъектОО.Language="javascript";
					ОбъектОО.Eval("Args=new Array()");
					Args = ОбъектОО.Eval("Args");
					ОбъектОО.AddObject("ServiceManager", ServiceManager);
					
					PropertyValue = ServiceManager.Bridge_GetStruct("com.sun.star.beans.PropertyValue");
					PropertyValue.Name = "Hidden";
					PropertyValue.Value = Истина;
					Args = Новый COMSafeArray("VT_VARIANT", 1);
					Args.SetValue(0, PropertyValue);
					
					stylevalye = ServiceManager.Bridge_GetStruct("com.sun.star.beans.PropertyValue");
					stylevalye.Name = "OverwriteStyles";
					stylevalye.Value = Истина;
					ArgsStyle = Новый COMSafeArray("VT_VARIANT", 1);
					ArgsStyle.SetValue(0, stylevalye);
					Попытка
						й = 0;
						Для Каждого ФФ Из МассивФайлов Цикл
							
							Если ТипЗнч(ФФ) = Тип("Строка") Тогда
								Ф = Новый Файл(ФФ);								
							ИначеЕсли ТипЗнч(ФФ) = Тип("Файл") Тогда
								Ф = Новый Файл(ФФ.ПолноеИмя);								
							КонецЕсли;
							
							Если НЕ Ф.Существует() Тогда 
								Продолжить;
							КонецЕсли;	
							й = й + 1;
							Если й = 1 Тогда
								origDocument = Desktop.LoadComponentFromURL(ПреобразоватьВURL(Ф.ПолноеИмя), "_blank", 0, Args);
								origPosition = origDocument.CurrentController.getViewCursor(); 
								origPositionTC = origDocument.getText().createTextCursorByRange(origPosition);
								origDocument.lockControllers();
								c1 = origDocument.text.createTextCursor();
								c1.gotoStart(false);   
								c1.gotoEnd(true);
								origDocument.CurrentController.select(c1);
								selectedContent = origDocument.CurrentController.getTransferable();
								oDoc = Desktop.LoadComponentFromURL("private:factory/swriter", "_blank", 0, Args);
								oText = oDoc.Text;
								oCursor = oText.createTextCursor();
								//pages = 1;
								//oCursor.gotoEnd(false);
								//oControl = oText.insertControlCharacter(oCursor,0,false);
								//oCursor.gotoEnd(false);
								//oCursor.PageDescName = oCursor.PageStyleName;
								//oCursor.PageNumberOffset = pages+1;
								oDoc.CurrentController.select(oCursor);
								oDoc.CurrentController.insertTransferable(selectedContent);
								origDocument.CurrentController.select(origPositionTC);
								oDoc.currentController.viewCursor.gotoStart(false);
								origDocument.unlockControllers();
								origDocument.Close(1);	
							Иначе
								origDocument = Desktop.LoadComponentFromURL(ПреобразоватьВURL(Ф.ПолноеИмя), "_blank", 0, Args);
								origPosition = origDocument.CurrentController.getViewCursor(); 
								origPositionTC = origDocument.getText().createTextCursorByRange(origPosition);								
								origDocument.lockControllers();
								c1 = origDocument.text.createTextCursor();
								c1.gotoStart(false);   
								c1.gotoEnd(true);
								origDocument.CurrentController.select(c1);
								selectedContent = origDocument.CurrentController.getTransferable();
								oText = oDoc.Text;
								oCursor = oText.createTextCursor();
								pages = 1;
								oCursor.gotoEnd(false);
								oControl = oText.insertControlCharacter(oCursor,0,false);
								oCursor.gotoEnd(false);
								oCursor.PageDescName = oCursor.PageStyleName;
								oCursor.PageNumberOffset = pages+1;
								oDoc.CurrentController.select(oCursor);
								oDoc.CurrentController.insertTransferable(selectedContent);
								origDocument.CurrentController.select(origPositionTC);
								oDoc.currentController.viewCursor.gotoStart(false);
								origDocument.unlockControllers();
								origDocument.Close(1);
							КонецЕсли;
						КонецЦикла;
					Исключение
						origDocument.Close(1);
						й = 0;
						Для Каждого ФФ Из МассивФайлов Цикл
							
							Если ТипЗнч(ФФ) = Тип("Строка") Тогда
								Ф = Новый Файл(ФФ);								
							ИначеЕсли ТипЗнч(ФФ) = Тип("Файл") Тогда
								Ф = Новый Файл(ФФ.ПолноеИмя);								
							КонецЕсли;
							
							Если НЕ Ф.Существует() Тогда 
								Продолжить;
							КонецЕсли;	
							й = й + 1;	
							Если й = 1 Тогда
								oDoc = Desktop.LoadComponentFromURL(ПреобразоватьВURL(Ф.ПолноеИмя), "_blank", 0, Args);
								oText = oDoc.Text;
								oCursor = oText.createTextCursor();
								oCursor.gotoEnd(false);
								oControl = oText.insertControlCharacter(oCursor,0,false);
								oCursor.gotoEnd(false);
							Иначе
								oCursor.insertDocumentFromUrl(ПреобразоватьВURL(Ф.ПолноеИмя), Args);
								pages = 1;
								//oText = oDoc.Text;
								//oCursor = oText.createTextCursor();
								//oCursor.gotoEnd(false);
								//oControl = oText.insertControlCharacter(oCursor,0,false);
								//oCursor.gotoEnd(false);
								oCursor.PageDescName = oCursor.PageStyleName;
								oCursor.PageNumberOffset = pages+1;
								oCursor.gotoEnd(false);
								//oControl = oText.insertControlCharacter(oCursor,0,false);
								//oCursor.insertDocumentFromUrl(ПреобразоватьВURL(Ф.ПолноеИмя), Args);
							КонецЕсли;
						КонецЦикла;
					КонецПопытки;
					oDoc.StoreAsURL(ПреобразоватьВURL(ИмяФайлаСлияния), Args);
					oDoc.Store();
					oDoc.Close(1);
				Исключение
					Вопрос(ОписаниеОшибки(), РежимДиалогаВопрос.ОК);
					Если ОбъектОО <> Неопределено Тогда
						oDoc.Close(1);
					КонецЕсли;
					Возврат Ложь;
				КонецПопытки;
				Возврат Истина;
			//2 ПУТЬ	
			Иначе					
				МассивФайлов = МассивФайловПоПорядку;	
				Если МассивФайлов.Количество() < 1 Тогда
					Возврат Ложь;
				КонецЕсли;
				
				Попытка
					ServiceManager = Новый COMОбъект("com.sun.star.ServiceManager");
					Desktop        = ServiceManager.createInstance("com.sun.star.frame.Desktop");
					ОбъектОО = Новый COMОбъект("MSScriptControl.ScriptControl");
					ОбъектОО.Language="javascript";
					ОбъектОО.Eval("Args=new Array()");
					Args = ОбъектОО.Eval("Args");
					ОбъектОО.AddObject("ServiceManager", ServiceManager);
					
					PropertyValue = ServiceManager.Bridge_GetStruct("com.sun.star.beans.PropertyValue");
					PropertyValue.Name = "Hidden";
					PropertyValue.Value = Истина;
					Args = Новый COMSafeArray("VT_VARIANT", 1);
					Args.SetValue(0, PropertyValue);
					
					stylevalye = ServiceManager.Bridge_GetStruct("com.sun.star.beans.PropertyValue");
					stylevalye.Name = "OverwriteStyles";
					stylevalye.Value = Истина;
					ArgsStyle = Новый COMSafeArray("VT_VARIANT", 1);
					ArgsStyle.SetValue(0, stylevalye);
					Попытка
						й = 0;
						Для Каждого ФФ Из МассивФайлов Цикл 
							
							Если ТипЗнч(ФФ) = Тип("Строка") Тогда
								Ф = Новый Файл(ФФ);								
							ИначеЕсли ТипЗнч(ФФ) = Тип("Файл") Тогда
								Ф = Новый Файл(ФФ.ПолноеИмя);								
							КонецЕсли;
							
							Если НЕ Ф.Существует() Тогда 
								Продолжить;
							КонецЕсли;	
							й = й + 1;
							Если й = 1 Тогда
								origDocument = Desktop.LoadComponentFromURL(ПреобразоватьВURL(Ф.ПолноеИмя), "_blank", 0, Args);
								origPosition = origDocument.CurrentController.getViewCursor(); 
								origPositionTC = origDocument.getText().createTextCursorByRange(origPosition);
								origDocument.lockControllers();
								c1 = origDocument.text.createTextCursor();
								c1.gotoStart(false);   
								c1.gotoEnd(true);
								origDocument.CurrentController.select(c1);
								selectedContent = origDocument.CurrentController.getTransferable();
								oDoc = Desktop.LoadComponentFromURL("private:factory/swriter", "_blank", 0, Args);
								oText = oDoc.Text;
								oCursor = oText.createTextCursor();
								//pages = 1;
								//oCursor.gotoEnd(false);
								//oControl = oText.insertControlCharacter(oCursor,0,false);
								//oCursor.gotoEnd(false);
								//oCursor.PageDescName = oCursor.PageStyleName;
								//oCursor.PageNumberOffset = pages+1;
								oDoc.CurrentController.select(oCursor);
								oDoc.CurrentController.insertTransferable(selectedContent);
								origDocument.CurrentController.select(origPositionTC);
								oDoc.currentController.viewCursor.gotoStart(false);
								origDocument.unlockControllers();
								origDocument.Close(1);	
							Иначе
								origDocument = Desktop.LoadComponentFromURL(ПреобразоватьВURL(Ф.ПолноеИмя), "_blank", 0, Args);
								origPosition = origDocument.CurrentController.getViewCursor(); 
								origPositionTC = origDocument.getText().createTextCursorByRange(origPosition);								
								origDocument.lockControllers();
								c1 = origDocument.text.createTextCursor();
								c1.gotoStart(false);   
								c1.gotoEnd(true);
								origDocument.CurrentController.select(c1);
								selectedContent = origDocument.CurrentController.getTransferable();
								oText = oDoc.Text;
								oCursor = oText.createTextCursor();
								pages = 1;
								oCursor.gotoEnd(false);
								oControl = oText.insertControlCharacter(oCursor,0,false);
								oCursor.gotoEnd(false);
								oCursor.PageDescName = oCursor.PageStyleName;
								oCursor.PageNumberOffset = pages+1;
								oDoc.CurrentController.select(oCursor);
								oDoc.CurrentController.insertTransferable(selectedContent);
								origDocument.CurrentController.select(origPositionTC);
								oDoc.currentController.viewCursor.gotoStart(false);
								origDocument.unlockControllers();
								origDocument.Close(1);
							КонецЕсли;
						КонецЦикла;
					Исключение
						origDocument.Close(1);
						й = 0;
						Для Каждого ФФ Из МассивФайлов Цикл
							
							Если ТипЗнч(ФФ) = Тип("Строка") Тогда
								Ф = Новый Файл(ФФ);								
							ИначеЕсли ТипЗнч(ФФ) = Тип("Файл") Тогда
								Ф = Новый Файл(ФФ.ПолноеИмя);								
							КонецЕсли;
							
							Если НЕ Ф.Существует() Тогда 
								Продолжить;
							КонецЕсли;	
							й = й + 1;	
							Если й = 1 Тогда
								oDoc = Desktop.LoadComponentFromURL(ПреобразоватьВURL(Ф.ПолноеИмя), "_blank", 0, Args);
								oText = oDoc.Text;
								oCursor = oText.createTextCursor();
								oCursor.gotoEnd(false);
								oControl = oText.insertControlCharacter(oCursor,0,false);
								oCursor.gotoEnd(false);
							Иначе
								oCursor.insertDocumentFromUrl(ПреобразоватьВURL(Ф.ПолноеИмя), Args);
								pages = 1;
								//oText = oDoc.Text;
								//oCursor = oText.createTextCursor();
								//oCursor.gotoEnd(false);
								//oControl = oText.insertControlCharacter(oCursor,0,false);
								//oCursor.gotoEnd(false);
								oCursor.PageDescName = oCursor.PageStyleName;
								oCursor.PageNumberOffset = pages+1;
								oCursor.gotoEnd(false);
								//oControl = oText.insertControlCharacter(oCursor,0,false);
								//oCursor.insertDocumentFromUrl(ПреобразоватьВURL(Ф.ПолноеИмя), Args);
							КонецЕсли;
						КонецЦикла;
					КонецПопытки;
					oDoc.StoreAsURL(ПреобразоватьВURL(ИмяФайлаСлияния), Args);
					oDoc.Store();
					oDoc.Close(1);
				Исключение
					Вопрос(ОписаниеОшибки(), РежимДиалогаВопрос.ОК);
					Если ОбъектОО <> Неопределено Тогда
						oDoc.Close(1);
					КонецЕсли;
					Возврат Ложь;
				КонецПопытки;	

				Возврат Истина;	
			КонецЕсли;	
		КонецЕсли;	
КонецФункции

&НаКлиенте
Функция СохранитьПрикрепленныеФайлыВWord(МассивВходящий, ИмяФайлаСлияния)
	Расширение=ПолучитьРасширение();
	Попытка
		Word = Неопределено;		
		й = 0;
		Для Каждого Ф Из МассивВходящий Цикл				
			ПутьКФайлу = "";
			Если ТипЗНЧ(МассивВходящий) = Тип("Массив") Тогда
				ПутьКФайлу = ф;
			ИначеЕсли ТипЗНЧ(МассивВходящий) = Тип("ТаблицаЗначений") Тогда
				ПутьКФайлу = ф.ИмяФайла;
			КонецЕсли;
			
			Файл = Новый Файл(ПутьКФайлу);
			Если НЕ Файл.Существует() Тогда 
				Продолжить;
			КонецЕсли;
			
			Если СтрЧислоВхождений(НРег(ф), ".xls") > 0 ИЛИ СтрЧислоВхождений(НРег(ф), "~") > 0 ИЛИ Найти(НРег(Ф), ".pdf") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если й=0 Тогда
				Word = Новый COMОбъект("Word.Application");
				Word.Documents.Add();		
			КонецЕсли;
			
			й = й + 1;	
			// файлы ворд
			Если Найти(НРег(Ф), Расширение) > 0 ИЛИ Найти(НРег(Ф), ".rtf") > 0 Тогда
				Word.Documents.Add(Ф);
				//Word.Documents.Open(Ф);
				Word.Selection.WholeStory();
				Word.Selection.Copy();
				Word.ActiveWindow.Close();
				
				// Вставляем в единый док
				Word.Documents.Item(1).Activate();
				Если й > 1 Тогда
					Word.Selection.InsertBreak();
					
					Word.Selection.MoveUp();
					Word.Selection.TypeBackspace();
					Word.Selection.MoveDown();
				КонецЕсли;
				Word.Selection.PasteAndFormat(0);
						
				//Картинки	
		//	ИначеЕсли Найти(НРег(Ф), ".pdf") > 0 Тогда
			//	Acrobat = Новый COMОбъект("AcroPDF.PDF.1"); 
			////	Acrobat.Visible = false; 
			//	Acrobat.LoadFile(Ф); 
			//	Acrobat.printAll();
			//	Acrobat.SaveAs(СтрЗаменить(ИмяФайлаСлияния, ".doc", ".pdf"));
		//	КопироватьФайл(Файл.ПолноеИмя, СтрЗаменить(ИмяФайлаСлияния, ".doc", ".pdf"));
			Иначе
				Если й > 1 Тогда
					Word.Selection.InsertBreak();
					
					Word.Selection.MoveUp();
					Word.Selection.TypeBackspace();
					Word.Selection.MoveDown();
				КонецЕсли;
				Word.Selection.InlineShapes.AddPicture(Ф,,);
				Word.Selection.MoveRight();
			КонецЕсли;
		КонецЦикла;
		Если Word <> Неопределено Тогда
			Word.Documents.Item(1).SaveAs(ИмяФайлаСлияния);
			Word.Quit();
		КонецЕсли;
	Исключение
		Если Word <> Неопределено Тогда
			Word.Quit();
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;	
	Возврат Истина;	
КонецФункции

&НаКлиенте
Процедура СохранитьПрикрепленныеФайлыВExcel(МассивВходящий, ИмяКаталога, МассивПечать_EXCEL,
		МассивПечать_EXCEL_КоличествоКопий, Количество)	
	Для Каждого Стр Из МассивВходящий Цикл		
		ПутьКФайлу = "";
		Если ТипЗНЧ(МассивВходящий) = Тип("Массив") Тогда
			ПутьКФайлу = Стр;
		ИначеЕсли ТипЗНЧ(МассивВходящий) = Тип("ТаблицаЗначений") Тогда
			ПутьКФайлу = Стр.ИмяФайла;
		КонецЕсли;
		
		Если СтрЧислоВхождений(НРег(ПутьКФайлу), ".xls") < 1 И СтрЧислоВхождений(НРег(ПутьКФайлу), ".pdf") < 1 Тогда
			Продолжить;
		КонецЕсли;

		Файл = Новый Файл(ПутьКФайлу);
		Если НЕ Файл.Существует() Тогда 
			Продолжить;
		КонецЕсли;
		
		Попытка
			КопироватьФайл(Файл.ПолноеИмя, ИмяКаталога + "\" + Файл.Имя);
			МассивПечать_EXCEL.Добавить(ИмяКаталога + "\" + Файл.Имя);	
			МассивПечать_EXCEL_КоличествоКопий.Добавить(Количество);
		Исключение
		КонецПопытки;
 	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокПрикрепляемыхФайлов(Объект, Комплект, Кат)
	Список = Новый СписокЗначений();
	//
	КомСтр = КаталогПрограммы();
	Ном = Найти(Сред(КомСтр, 5), "\") + 4;
	
	Ф = Новый Файл(Лев(КомСтр,Ном) + "WinRAR\rar.exe");
	Если Ф.Существует() = Ложь Тогда 
		Возврат Список;
	КонецЕсли;
	
	КомСтр = """" + Лев(КомСтр, Ном) + "WinRAR\WinRAR.exe"" x -ibck -inul -y ";

	//
	Кат = ПолучитьИмяВременногоФайла("");
	
	//
	СоздатьКаталог(Кат);
	Массив = УЭДСервер.ПолучитьДанныеПрикрепляемыхФайлов(Объект, Комплект);
	Ном = 0;
	Для Каждого Элемент Из Массив Цикл
		Ном = Ном + 1;
		ЭлКат = Кат + "\" + Формат(Ном, "ЧН=; ЧГ=");
		ПолноеИмя = ЭлКат + Элемент.Расширение;
		Элемент.Данные.Записать(ПолноеИмя);		
		Если Элемент.Расширение = ".rar" ИЛИ Элемент.Расширение = ".zip" Тогда
			Попытка
				ЗапуститьПриложение(КомСтр + """" + ПолноеИмя + """ *.* """ + ЭлКат + "\""", , Истина);
				УдалитьФайлы(ПолноеИмя);		
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	//
	Файлы = НайтиФайлы(Кат, "*.*", Истина);
	Для Каждого Файл Из Файлы Цикл
		Если Файл.Расширение<>"" Тогда
			Список.Добавить(Файл.ПолноеИмя);
		КонецЕсли;
	КонецЦикла;
	Список.СортироватьПоЗначению();
	
	Возврат Список.ВыгрузитьЗначения();
КонецФункции

&НаКлиенте
Функция ОкруглитьРазмерФайла(СтрРазмер) Экспорт
    Размер = Число(СтрРазмер);
	Если Размер > 1024 Тогда
		Размер = Окр(Размер/1024, 0);
		Стр = Строка(Размер) + " Кб";
	КонецЕсли;
	Если Размер > 1024 Тогда
		Размер = Окр(Размер/1024, 1);
		Стр = Строка(Размер) + " Мб";
	КонецЕсли;
	
	Возврат Стр;		
КонецФункции

&НаКлиенте
Процедура ЗаписатьДвоичныеДанные(Таблица)
	НаСервере = ПрикреплениеФайлов.ПолучитьХранение();
	Если НаСервере Тогда
		Каталог = ПрикреплениеФайлов.ПолучитьКаталог();
	КонецЕсли;
	Если НаСервере Тогда
		// 1. Если хранить файлы на сервере
		//КаталогХранения = Константы.КаталогХраненияПрикрепляемыхФайловНаСервере.Получить();
		Ф = Новый Файл(Каталог); 	
		Если Ф.Существует() = Ложь Тогда
			//Сообщить("Каталог хранения прикрепляемых файлов задан неверно!");
			//Возврат;
		КонецЕсли;
		
		Для Каждого Эл Из Таблица Цикл
			Если Не Эл.Загружен Тогда
				Попытка
					Файл = Новый Файл(Эл.Путь);
					Эл.УИД = Новый УникальныйИдентификатор();
					ДвДанные = Новый ДвоичныеДанные(Эл.Путь);
					ДвДанные.Записать(Каталог + "\" + Строка(Эл.УИД) + Файл.Расширение);
					Эл.Загружен = Истина;
				Исключение
					//Отказ = Истина;
					//Сообщить(ОписаниеОшибки());
					//Возврат;
				КонецПопытки;
			КонецЕсли;	
		КонецЦикла;					
	Иначе	
		// 2. Если хранить файлы в базе в хранилище значений		
		МассивДанных = Новый Массив();
		Для Каждого Элемент Из Таблица Цикл
			Данные = Неопределено;
			Если Не Элемент.Загружен Тогда
				Попытка
					Элемент.УИД = Новый УникальныйИдентификатор();
					Данные = Новый ДвоичныеДанные(Элемент.Путь);
					Элемент.Загружен = Истина;
				Исключение
					//Отказ = Истина;
					//Сообщить("Файл """ + Элемент.Путь + """ не найден!");
					//Возврат;
				КонецПопытки;
			КонецЕсли;	
			МассивДанных.Добавить(Данные);		
		КонецЦикла;
		ПрикреплениеФайлов.ПоместитьВХранилище(МассивДанных, Таблица);
	КонецЕсли;	
КонецПроцедуры

Функция ПолучитьМассивНаПрикрепление(Массив)
	МассивНаПрикрепление = Новый Массив;
	Для Каждого Стр из Массив Цикл
		Структура = Новый Структура;
		Структура.Вставить("Шаблон", Стр.Шаблон);
		Структура.Вставить("Путь", Стр.ПутьКФайлу);
		Структура.Вставить("Прикреплять", Стр.Прикреплять);
		Структура.Вставить("Исходящий", Стр.Исходящий);
		Структура.Вставить("РегНомер", Стр.РегНомер);
		Файл = Новый Файл(Стр.ПутьКФайлу);
		Если Файл.Существует() Тогда
			Размер = ОкруглитьРазмерФайла(Файл.Размер());
		Иначе
			Размер = Неопределено;		
		КонецЕсли;
		Структура.Вставить("Загружен", Ложь);
		Структура.Вставить("Размер", Размер);
		Структура.Вставить("Хранилище", Неопределено);
		Структура.Вставить("УИД", Неопределено);
		МассивНаПрикрепление.Добавить(Структура);				
	КонецЦикла;	
	ЗаписатьДвоичныеДанные(МассивНаПрикрепление);
	Возврат МассивНаПрикрепление;
КонецФункции

Функция ПреобразоватьВURL(ИмяФайла)   
	Возврат "file:///" + СтрЗаменить(ИмяФайла, "\", "/"); 
КонецФункции

Функция ПолучитьРасширение()
	ТекущийДок = ОбъектыСервер.ПолучитьЗначениеКонстанты("ТипШаблонаДляПечати");
	Если строка(ТекущийДок) = "Word" тогда
		Возврат ".doc";
	иначеЕсли строка(ТекущийДок) = "OpenOffice" тогда
		Возврат ".odt"
	конецЕсли;
	
КонецФункции

Функция УбратьЛишниеСимволы(Строка1)
	НовСтрока = "";
	ПравильныеСимволы = " QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnmЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮйцукенгшщзхъфывапролджэячсмитьбю<>123456789";
	
	
	Для Сч = 1 по СтрДлина(Строка1) Цикл	
		ТекСимв = Сред(Строка1, Сч, 1);
		Если Найти(ПравильныеСимволы, ТекСимв) > 0 Тогда
			НовСтрока = НовСтрока + ТекСимв;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НовСтрока;
КонецФункции 
//Лебедева, 04102019
Функция СоздатьИмяФайла(ВызывающийДокумент,СправочникШаблон)
	ТипФайла = Строка(СправочникШаблон.Шаблон);
	Попытка
		ИмяДолжника = Строка(ВызывающийДокумент.Должник);
		ФамилияИнициалы = ОбъектыКлиент.ФамилияИнициалыФизЛица(ИмяДолжника,,,);
		ФамилияИнициалы = СтрЗаменить(ФамилияИнициалы," ","");
		ИмяФайлаШаблонаНовое = Строка(ВызывающийДокумент)+"_"+Строка(ФамилияИнициалы)+"_"+Строка(ТипФайла);
	Исключение
		ИмяДолжника = Строка(ВызывающийДокумент);
		ФамилияИнициалы = ОбъектыКлиент.ФамилияИнициалыФизЛица(ИмяДолжника,,,);
		ИмяФайлаШаблонаНовое = Строка(ФамилияИнициалы)+"_"+Строка(ТипФайла);
	КонецПопытки;
	ИмяФайлаШаблонаНовое = СтрЗаменить(ИмяФайлаШаблонаНовое,"\","");
	ИмяФайлаШаблонаНовое = СтрЗаменить(ИмяФайлаШаблонаНовое,"/","");
	Возврат	ИмяФайлаШаблонаНовое;
КонецФункции

Функция ЭтоКартинка(ТегВПечатнойФорме)

	безТега = ПолучитьИмяЗакладки(ТегВПечатнойФорме);
	мТестНаКартинку = СтрРазделить(безТега, "_");
	Если мТестНаКартинку[0] = "Картинка" Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;

КонецФункции // ()

Процедура ЗаменитьТегКартинкой(ОбъектWord, ActiveDoc, ТекущееСоответствие)

	безТега = ПолучитьИмяЗакладки(ТекущееСоответствие.Поле); 
	ActiveDoc.Bookmarks(безТега).Range.Select();
	Selection = ОбъектWord.Selection;
	Content = ActiveDoc.Content;
	TempImagePath = ТекущееСоответствие.Значение;   
	НашаКартинка = Selection.InlineShapes.AddPicture(TempImagePath);
	ВыполнитьЗамену(Content, ТекущееСоответствие.Поле, ""); 

КонецПроцедуры

Функция ПолучитьИмяЗакладки(ТегВПечатнойФорме)

	ИмяБезСкобочек = СтрЗаменить(ТегВПечатнойФорме, "<", "");
	ИмяБезСкобочек = СтрЗаменить(ИмяБезСкобочек, ">", "");
	
	Возврат ИмяБезСкобочек;

КонецФункции
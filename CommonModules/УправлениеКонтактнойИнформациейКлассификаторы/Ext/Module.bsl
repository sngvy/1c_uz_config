
// Используются ли в конфигурации классификаторы
Функция ИспользуютсяКлассификаторы() Экспорт
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ФОРМЫ ВВОДА АДРЕСА

// функция из исходной строки формирует строку для поиска данных в запросе
Функция СформироватьСтрокуДляПоискаВЗапросе(Знач СтрокаПоиска) Экспорт
	
	// АдресныйКлассификатор
	ИтоговаяСтрокаДляПоиска = СтрокаПоиска;
	ИтоговаяСтрокаДляПоиска = СтрЗаменить(ИтоговаяСтрокаДляПоиска, "~", "~~");
	ИтоговаяСтрокаДляПоиска = СтрЗаменить(ИтоговаяСтрокаДляПоиска, "%", "~%");
	ИтоговаяСтрокаДляПоиска = СтрЗаменить(ИтоговаяСтрокаДляПоиска, "_", "~_");
	ИтоговаяСтрокаДляПоиска = СтрЗаменить(ИтоговаяСтрокаДляПоиска, "[", "~[");
	ИтоговаяСтрокаДляПоиска = СтрЗаменить(ИтоговаяСтрокаДляПоиска, "-", "~-");

	Возврат ИтоговаяСтрокаДляПоиска;
	// Конец АдресныйКлассификатор
	
КонецФункции

// Найти по индексу записи в адресном классификаторе
Функция НайтиЗаписиВАКПоИндексу(Индекс) Экспорт
	
	// АдресныйКлассификатор
	Результат = Новый Структура;
	Результат.Вставить("Количество",      0);
	Результат.Вставить("НайденныйРегион", "");
	Результат.Вставить("НайденныйРайон",  "");
	
	// Проверим правильность ввода индекса
	Если СтрДлина(Индекс) <> 6 Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Найдем записи по индексу
	Запрос = Новый Запрос;
	Запрос.Текст = 	"ВЫБРАТЬ
	               	|	АдресныйКлассификатор.ТипАдресногоЭлемента,
	               	|	АдресныйКлассификатор.Код,
	               	|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение Как Наименование
	               	|ИЗ
	               	|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	               	|ГДЕ
	               	|	АдресныйКлассификатор.Индекс = &Индекс";
	Запрос.УстановитьПараметр("Индекс", Индекс);
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Если ничего не нашли
	Если Выборка.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Запомним наименования найденных записей 
	ТипПоКоду = Новый Соответствие;
	ИмяПоКоду = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		ТипАдресногоЭлемента = Выборка.ТипАдресногоЭлемента;
		Код = Выборка.Код;
		
		Если ТипАдресногоЭлемента < 6 Тогда
			// не дом
			ИмяПоКоду.Вставить(Код, СокрП(Выборка.Наименование));
		КонецЕсли;
		
		ТипПоКоду.Вставить(Код, ТипАдресногоЭлемента);
	КонецЦикла;
	
	// Определим коды объектов, наименования которых нужно найти
	мНужноИскать = Новый Массив;
	сНужноИскать = Новый Соответствие;
	
	Для Каждого Найденный Из ТипПоКоду Цикл
		ТипАдресногоЭлемента = Найденный.Значение;
		Код = Найденный.Ключ;
		
		Пока ТипАдресногоЭлемента > 1 Цикл
			ТипАдресногоЭлемента = ТипАдресногоЭлемента - 1;
			Маска = ПолучитьМаскуПоТипу(ТипАдресногоЭлемента);
			Код = Код - (Код % Маска);
			
			Если (ТипПоКоду.Получить(Код) = Неопределено) И (сНужноИскать.Получить(Код) = Неопределено) Тогда
				сНужноИскать.Вставить(Код, ТипАдресногоЭлемента);
				мНужноИскать.Добавить(Код);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Получим недостающие наименования
	Если мНужноИскать.Количество() <> 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	АдресныйКлассификатор.ТипАдресногоЭлемента,
		               |	АдресныйКлассификатор.Код,
		               |	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение Как Наименование
		               |ИЗ
		               |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		               |ГДЕ
		               |	АдресныйКлассификатор.Код В(&масКодов)";
		Запрос.УстановитьПараметр("масКодов", мНужноИскать);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ИмяПоКоду.Вставить(Выборка.Код, СокрП(Выборка.Наименование));
			ТипПоКоду.Вставить(Выборка.Код, Выборка.ТипАдресногоЭлемента);
		КонецЦикла;
	КонецЕсли;
	
	// Определим какие не нужно выводить записи и какие есть различные регионы и районы
	ВсеРегионы = Новый Соответствие;
	ВсеРайоны  = Новый Соответствие;
	НеВыводитьВТаблицу = Новый Соответствие;

	Для Каждого Элемент Из ТипПоКоду Цикл
		ТипАдресногоЭлемента = Элемент.Значение;
		Код = Элемент.Ключ;
		
		Если ТипАдресногоЭлемента = 1 Тогда
			ВсеРегионы.Вставить(Код, Истина);
			НайденныйРегион = Код;
			
		ИначеЕсли ТипАдресногоЭлемента = 2 Тогда
			ВсеРайоны.Вставить(Код, Истина);
			НайденныйРайон = Код;
			
		КонецЕсли;
		
		Если ТипАдресногоЭлемента = 6 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ТипАдресногоЭлемента > 1 Цикл
			ТипАдресногоЭлемента = ТипАдресногоЭлемента - 1;
			Маска = ПолучитьМаскуПоТипу(ТипАдресногоЭлемента);
			Код = Код - (Код % Маска);
			НеВыводитьВТаблицу.Вставить(Код, Истина);
		КонецЦикла;
	КонецЦикла;
	
	Результат.НайденныйРегион = ?(ВсеРегионы.Количество() = 1, ИмяПоКоду.Получить(НайденныйРегион), "");
	Результат.НайденныйРайон  = ?(ВсеРайоны.Количество()  = 1, ИмяПоКоду.Получить(НайденныйРайон),  "");
	
	// Определим уровень детализации выводимой информации о городе / населенном пункте
	Если ВсеРегионы.Количество() > 1 Тогда
		ДетализацияДоУровня = 1;
	ИначеЕсли ВсеРайоны.Количество() > 1 Тогда
		ДетализацияДоУровня = 2;
	Иначе
		ДетализацияДоУровня = 3;
	КонецЕсли;
	
	
	// Очистим таблицу
	НайденныеЗаписиПоИндексу = Новый ТаблицаЗначений;
	НайденныеЗаписиПоИндексу.Колонки.Добавить("Улица",    Новый ОписаниеТипов("Строка"));
	НайденныеЗаписиПоИндексу.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
	НайденныеЗаписиПоИндексу.Колонки.Добавить("Код",      Новый ОписаниеТипов("Строка"));
	
	// Заполним таблицу с найденными записями
	Для Каждого Элемент Из ТипПоКоду Цикл
		ТипАдресногоЭлемента = Элемент.Значение;
		Код = Элемент.Ключ;
		
		Если (ТипАдресногоЭлемента = 6) ИЛИ (НеВыводитьВТаблицу.Получить(Код) <> Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		новСтр = НайденныеЗаписиПоИндексу.Добавить();
		новСтр.Улица    = ?(ТипАдресногоЭлемента = 5, ИмяПоКоду.Получить(Код), "< Без улицы >");
		новСтр.Код      = Формат(Код, "ЧГ=");
		новСтр.Описание = "";
		
		// Получим описание
		ТипАдресногоЭлемента = ?(ТипАдресногоЭлемента = 5, 4, ТипАдресногоЭлемента);
		Пока ТипАдресногоЭлемента >= ДетализацияДоУровня Цикл
			Код = Код - (Код % ПолучитьМаскуПоТипу(ТипАдресногоЭлемента));
			Если ПолучитьТипАдресногоЭлемента(Код) = ТипАдресногоЭлемента Тогда
				новСтр.Описание = новСтр.Описание + ?(новСтр.Описание = "", "", ", ") + ИмяПоКоду.Получить(Код);
			КонецЕсли;
			
			ТипАдресногоЭлемента = ТипАдресногоЭлемента - 1;
		КонецЦикла;
	КонецЦикла;
	
	НайденныеЗаписиПоИндексу.Сортировать("Улица, Код");
	
	Количество = НайденныеЗаписиПоИндексу.Количество();
	Результат.Вставить("Количество", Количество);
	
	Если Количество = 1 Тогда
		
		КодАдресногоЭлемента = Число(НайденныеЗаписиПоИндексу[0].Код);
		ПоКодуАдресногоЭлементаВСтруктуруПолучитьЕгоКомпоненты(КодАдресногоЭлемента, Результат);
		
	ИначеЕсли Количество > 1 Тогда
		
		АдресВХранилище = ПоместитьВоВременноеХранилище(НайденныеЗаписиПоИндексу, Новый УникальныйИдентификатор);
		Результат.Вставить("АдресВХранилище", АдресВХранилище);
		
	КонецЕсли;
	
	Возврат Результат;
	// Конец АдресныйКлассификатор
	
КонецФункции

// Получить компоненты адресного элемента по его коду
Процедура ПоКодуАдресногоЭлементаВСтруктуруПолучитьЕгоКомпоненты(КодАдресногоЭлемента, Результат) Экспорт
	
	// АдресныйКлассификатор
	Регион = "";
	Район  = "";
	Город  = "";
	НаселенныйПункт = "";
	Улица  = "";
	
	ПолучитьПоКодуАдресногоЭлементаЕгоКомпоненты(КодАдресногоЭлемента, Регион, Район, Город, НаселенныйПункт, Улица, "");
	
	Результат.Вставить("Регион", Регион);
	Результат.Вставить("Район",  Район);
	Результат.Вставить("Город",  Город);
	Результат.Вставить("НаселенныйПункт", НаселенныйПункт);
	Результат.Вставить("Улица",  Улица);
	// Конец АдресныйКлассификатор
	
КонецПроцедуры

// Функция определяет индекс по переданным региону, району, городу, населенному пункту,
// улице, дому и корпусу
//
// Параметры: 
//  НазваниеРегиона - название региона( с сокращением)
//  НазваниеРайона - название района( с сокращением)
//  НазваниеГорода - название города( с сокращением)
//  НазваниеНаселенногоПункта - название населенного пункта( с сокращением)
//  Улица - название улицы ( с сокращением)
//  НомерДома - номер дома, для которого необходимо получить индекс
//  НомерКорпуса - номер корпуса
//
// Возвращаемое значение:
//  Строка - шестизначный почтовый индекс
//
Функция ПолучитьИндекс(Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода, Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы, Знач НомерДома, Знач НомерКорпуса) Экспорт

	// АдресныйКлассификатор
	РодительИндекса = ПолучитьПустуюСтруктуруАдреса();
	Индекс = "";
	
	Регион = ПолучитьАдресныйЭлемент(НазваниеРегиона, 1);
	Если Регион.Код > 0 Тогда
		РодительИндекса = Регион;
		Если НЕ ПустаяСтрока(Регион.Индекс) Тогда
			Индекс = Регион.Индекс;
		КонецЕсли;
	КонецЕсли;
	
	Район = ПолучитьАдресныйЭлемент(НазваниеРайона, 2, РодительИндекса.Код);
	Если Район.Код > 0 Тогда
		РодительИндекса = Район;
		Если НЕ ПустаяСтрока(Район.Индекс) Тогда
			Индекс = Район.Индекс;
		КонецЕсли;
	КонецЕсли;
	
	Город = ПолучитьАдресныйЭлемент(НазваниеГорода, 3, РодительИндекса.Код);
	Если Город.Код > 0 Тогда
		РодительИндекса = Город;
		Если НЕ ПустаяСтрока(Город.Индекс) Тогда
			Индекс = Город.Индекс;
		КонецЕсли;
	КонецЕсли;
	
	НаселенныйПункт = ПолучитьАдресныйЭлемент(НазваниеНаселенногоПункта, 4, РодительИндекса.Код);
	Если НаселенныйПункт.Код > 0 Тогда
		РодительИндекса = НаселенныйПункт;
		Если НЕ ПустаяСтрока(НаселенныйПункт.Индекс) Тогда
			Индекс = НаселенныйПункт.Индекс;
		КонецЕсли;
	КонецЕсли;
	
	Улица = ПолучитьАдресныйЭлемент(НазваниеУлицы, 5, РодительИндекса.Код);
	Если Улица.Код > 0 Тогда
		ИндексУлицы = ПолучитьИндексПоУлицеДомуКорпусу(Улица, НомерДома, НомерКорпуса);
		Если НЕ ПустаяСтрока(ИндексУлицы) Тогда
			Индекс = ИндексУлицы;
		КонецЕсли;
	КонецЕсли;

	Возврат Индекс;
	// Конец АдресныйКлассификатор

КонецФункции

// Обработчик автоподбора в адресном элементе
Функция АвтоПодборТекстВАдресномЭлементе(Текст, Регион, Район, Город, НаселенныйПункт, УровеньЭлемента) Экспорт
	
	// АдресныйКлассификатор
	СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу(Регион, Район, Город, НаселенныйПункт, "", УровеньЭлемента);
	РезультатЗапроса = ПолучитьРезультатЗапросаАвтоподбораДляРегистра(Текст, СтруктураОграничений, 51);
	
	Количество = РезультатЗапроса.Количество();
	Если (Количество = 0) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый СписокЗначений;
	Для Каждого Стр Из РезультатЗапроса Цикл
		Результат.Добавить(СокрЛП(Стр.Наименование) + " " + СокрЛП(Стр.Сокращение));
	КонецЦикла;
	
	Возврат Результат;
	// Конец АдресныйКлассификатор
	
КонецФункции

// АдресныйКлассификатор

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ФОРМЫ ВЫБОРА АДРЕСНОГО КЛАССИФИКАТОРА

// Функция возвращает структуру ограничений по переданным параметрам
// уже заполненным адресным полям
//
// Параметры: 
// Параметры: 
//  НазваниеРегиона - название региона( с сокращением)
//  НазваниеРайона - название района( с сокращением)
//  НазваниеГорода - название города( с сокращением)
//  НазваниеНаселенногоПункта - название населенного пункта( с сокращением)
//
Функция ВернутьСтруктуруОграниченийПоРодителю(Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода, 
											Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы, КодРодителя) Экспорт
	
	СтруктураОграничений = Новый Структура();
	РодительскийЭлемент = ВернутьСтрокуАдресногоКлассификатораПоАдреснымЭлементам(НазваниеРегиона, НазваниеРайона, НазваниеГорода, 
											НазваниеНаселенногоПункта, НазваниеУлицы);
	
	КодРодителя = РодительскийЭлемент.Код;
	
	// по коду определяем уровень элемента
	ТипЭлемента = ПолучитьТипАдресногоЭлемента(КодРодителя);
	ДобавитьКодВСтруктуру(СтруктураОграничений, "КодАдресногоОбъектаВКоде", Цел(КодРодителя / МаскаРегиона()), ТипЭлемента, 1);
    ДобавитьКодВСтруктуру(СтруктураОграничений, "КодРайонаВКоде", Цел(КодРодителя / МаскаРайона()) % 1000, ТипЭлемента, 2);
	ДобавитьКодВСтруктуру(СтруктураОграничений, "КодГородаВКоде", Цел(КодРодителя / МаскаГорода()) % 1000, ТипЭлемента, 3);
	ДобавитьКодВСтруктуру(СтруктураОграничений, "КодНаселенногоПунктаВКоде", Цел(КодРодителя / МаскаНасПункта()) % 1000, ТипЭлемента, 4);
	ДобавитьКодВСтруктуру(СтруктураОграничений, "КодУлицыВКоде", Цел(КодРодителя / МаскаУлицы())% 10000, ТипЭлемента, 5);
	
	Возврат СтруктураОграничений;
	
КонецФункции

// Функция возвращает строку адресного классификатора по значениям адресных элементов
Функция ВернутьСтрокуАдресногоКлассификатораПоАдреснымЭлементам(Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода, 
											Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы) Экспорт
											
	РодительскийЭлемент = Неопределено;
	КодРодителяРодителя = 0;

	Регион = ПолучитьАдресныйЭлемент(НазваниеРегиона, 1);
	Если Регион.Код > 0 Тогда
		РодительскийЭлемент = Регион;
		КодРодителяРодителя = Регион.Код;
	КонецЕсли;
	
	Район = ПолучитьАдресныйЭлемент(НазваниеРайона, 2, КодРодителяРодителя);
	Если Район.Код > 0 Тогда
		РодительскийЭлемент = Район;
		КодРодителяРодителя = Район.Код;
	КонецЕсли;
	
	Город = ПолучитьАдресныйЭлемент(НазваниеГорода, 3, КодРодителяРодителя);
    Если Город.Код > 0 Тогда
		РодительскийЭлемент = Город;
		КодРодителяРодителя = Город.Код;
	КонецЕсли;
	
	НаселенныйПункт = ПолучитьАдресныйЭлемент(НазваниеНаселенногоПункта, 4, КодРодителяРодителя);
	Если НаселенныйПункт.Код > 0 Тогда
		РодительскийЭлемент = НаселенныйПункт;
		КодРодителяРодителя = НаселенныйПункт.Код;
	КонецЕсли;
	
	Улица = ПолучитьАдресныйЭлемент(НазваниеУлицы, 5, КодРодителяРодителя);
	Если Улица.Код > 0 Тогда
		РодительскийЭлемент = Улица;
		КодРодителяРодителя = Улица.Код;
	КонецЕсли;
	
	Если РодительскийЭлемент = Неопределено Тогда
		Возврат ПолучитьПустуюСтруктуруАдреса()
	Иначе
		Возврат РодительскийЭлемент;
	КонецЕсли;
										
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОИСКА ПО СТРОКЕ

//Функция Строит запрос автоподбора для регистра
Функция ПолучитьРезультатЗапросаАвтоподбораДляРегистра(Знач Текст, СтруктураПараметров, КоличествоЭлементов)
	
	Объект = Метаданные.РегистрыСведений.АдресныйКлассификатор;
    	
	СтрокаОтборовПоСтруктуре = "";
	
	Запрос = СоздатьЗапросДляСпискаАвтоподбора(Текст, СтрокаОтборовПоСтруктуре, СтруктураПараметров, "ТаблицаРегистра");
	
	СтрокаПолей = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + Строка(КоличествоЭлементов) + "
				  	|	ТаблицаРегистра.* ";
	
	Запрос.Текст = СтрокаПолей + "
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК ТаблицаРегистра
		|ГДЕ ";

	
	// формируем ограничения по полям для поиска
	ОграничениеПоПолю = "(ТаблицаРегистра.Наименование ПОДОБНО &ТекстАвтоПодбора СПЕЦСИМВОЛ ""~"") ";
	
	Запрос.Текст = Запрос.Текст +"
		|	(" + ОграничениеПоПолю + ") " + СтрокаОтборовПоСтруктуре;

	Возврат Запрос.Выполнить().Выгрузить();
 	
КонецФункции

// Функция создает объект запрос и устанавливает у него параметры ТекстАвтоПодбора и ТекстАвтоПодбораЧисло
// убирает лишние символы в строке поиска
Функция СоздатьЗапросДляСпискаАвтоподбора(СтрокаПоиска, СтрокаОтборовПоСтруктуре, СтруктураПараметров, ИмяТаблицыОграничений)
	
	Запрос = Новый Запрос;
	
	СтрокаПоиска = СформироватьСтрокуДляПоискаВЗапросе(СтрокаПоиска);
		
	Запрос.УстановитьПараметр("ТекстАвтоПодбора"     , (СтрокаПоиска + "%"));
	Попытка
		Запрос.УстановитьПараметр("ТекстАвтоПодбораЧисло", Число(СтрокаПоиска));
	Исключение
		Запрос.УстановитьПараметр("ТекстАвтоПодбораЧисло", Неопределено);
	КонецПопытки;
	
	// Устанавливает ограничения
	СтрокаОтборовПоСтруктуре = "";
	Для Каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
		Ключ 	 = ЭлементСтруктуры.Ключ;
        Значение = ЭлементСтруктуры.Значение;

		Запрос.УстановитьПараметр(Ключ, Значение);
		СтрокаОтборовПоСтруктуре = СтрокаОтборовПоСтруктуре + "
		|		И
		|		" + ИмяТаблицыОграничений + "." + Ключ + " В (&"+ Ключ + ")";
	КонецЦикла; 
	
	Возврат Запрос;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С АДРЕСНЫМ КОДОМ

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаРегиона()
	Возврат 10000000000000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаРайона()
	Возврат 10000000000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаГорода()
	Возврат 10000000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаНасПункта()
	Возврат 10000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаУлицы()
	Возврат 1000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаДома()
	Возврат 100;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаКвартиры()
	Возврат 100;
КонецФункции

// Функция ставит в соответствие типу адресного элемента маску,
// через которую выделяется его значимый код
//
// Параметры:
//  ТипАдресногоЭлемента -  число - тип адресного элемента.
//
// Возвращаемое значение:
// Число - маска, при делении на которую выделяется значимый код
// адресного элемента
//
Функция ПолучитьМаскуПоТипу(ТипАдресногоЭлемента)

	Если ТипАдресногоЭлемента = 1 Тогда
		Возврат МаскаРегиона();

	ИначеЕсли ТипАдресногоЭлемента = 2 Тогда
		Возврат МаскаРайона();

	ИначеЕсли ТипАдресногоЭлемента = 3 Тогда
		Возврат МаскаГорода();

	ИначеЕсли ТипАдресногоЭлемента = 4 Тогда
		Возврат МаскаНасПункта();

	ИначеЕсли ТипАдресногоЭлемента = 5 Тогда
		Возврат МаскаУлицы();

	ИначеЕсли ТипАдресногоЭлемента = 6 Тогда
		Возврат МаскаДома();

	Иначе
		Возврат МаскаКвартиры();

	КонецЕсли;

КонецФункции

// Функция ставит в соответствие типу адресного элемента маску,
// через которую выделяется его значимый код
//
// Параметры:
//  ТипАдресногоЭлемента -  число - тип адресного элемента.
//
// Возвращаемое значение:
// Число - маска, при делении на которую выделяется значимый код
// адресного элемента
//
Функция ПолучитьТипАдресногоЭлемента(КодЭлемента)
	
	Если КодЭлемента = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если КодЭлемента % МаскаРегиона() < 100  Тогда // регион 21 ноль и АА
		Возврат 1;
		
	ИначеЕсли КодЭлемента % МаскаРайона() < 100 Тогда // район 18 ноль и АА
		Возврат 2;
		
	ИначеЕсли КодЭлемента % МаскаГорода() < 100 Тогда // город 15 ноль и АА
		Возврат 3;
		
	ИначеЕсли КодЭлемента % МаскаНасПункта() < 100 Тогда // населенный пункт 12 ноль и АА
		Возврат 4;
		
	ИначеЕсли КодЭлемента % МаскаУлицы() < 100 Тогда // улица 8 ноль и АА
		Возврат 5;
		
	ИначеЕсли КодЭлемента % МаскаДома() < 100 Тогда // дом 4 ноль и АА
		Возврат 6;
		
	Иначе // квартира
		Возврат 7;
		
	КонецЕсли;
	
КонецФункции

// Процедура по коду адресного элемента возвращает строковые представления его иерархии
Функция ПолучитьПоКодуАдресногоЭлементаЕгоКомпоненты(КодАдресногоЭлемента, Регион, Район, Город, НаселенныйПункт, Улица, Дом)
	
	Элемент = ПолучитьСтруктуруАдресногоЭлемента(КодАдресногоЭлемента);
	
	Если Элемент.ТипАдресногоЭлемента >= 6 Тогда
		Дом = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаДома(), 6);
	КонецЕсли;
	
	Если Элемент.ТипАдресногоЭлемента >= 5 Тогда
		Улица = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаУлицы(), 5);
	КонецЕсли;
	
	Если Элемент.ТипАдресногоЭлемента >= 4 Тогда
		НаселенныйПункт = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаНасПункта(), 4);
	КонецЕсли;

	Если Элемент.ТипАдресногоЭлемента >= 3 Тогда
		Город = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаГорода(), 3);
	КонецЕсли;

	Если Элемент.ТипАдресногоЭлемента >= 2 Тогда    
		Район = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаРайона(), 2);
	КонецЕсли;

	Если Элемент.ТипАдресногоЭлемента >= 1 Тогда
		Регион = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаРегиона(), 1);
	КонецЕсли;

	Возврат Элемент;
	
КонецФункции

Функция ПолучитьСтруктуруАдресногоЭлемента(КодЭлемента)
	
	КодРазбора = КодЭлемента;
	ТипАдресногоЭлемента = ПолучитьТипАдресногоЭлемента(КодРазбора);
	
	КодАдресногоОбъекта = Цел(КодРазбора / МаскаРегиона());
	КодРазбора = КодРазбора % МаскаРегиона();

	КодРайона = Цел(КодРазбора / МаскаРайона());
	КодРазбора = КодРазбора % МаскаРайона();

	КодГорода = Цел(КодРазбора / МаскаГорода());
	КодРазбора = КодРазбора % МаскаГорода();

	КодНаселенногоПункта = Цел(КодРазбора / МаскаНасПункта());
	КодРазбора = КодРазбора % МаскаНасПункта();

	КодУлицы = Цел(КодРазбора / МаскаУлицы());
	
	ТексЗапроса = "ВЫБРАТЬ
	              |	АдресныйКлассификатор.Код,
	              |	АдресныйКлассификатор.КодАдресногоОбъектаВКоде,
	              |	АдресныйКлассификатор.Наименование,
	              |	АдресныйКлассификатор.Сокращение,
	              |	АдресныйКлассификатор.Индекс,
	              |	АдресныйКлассификатор.ТипАдресногоЭлемента,
	              |	АдресныйКлассификатор.КодРайонаВКоде,
	              |	АдресныйКлассификатор.КодГородаВКоде,
	              |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде,
	              |	АдресныйКлассификатор.КодУлицыВКоде
	              |ИЗ
	              |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	              |
	              |ГДЕ
	              |	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента И
	              |	АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодАдресногоОбъекта И
	              |	АдресныйКлассификатор.КодРайонаВКоде = &КодРайона И
	              |	АдресныйКлассификатор.КодГородаВКоде = &КодГорода И
	              |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде = &КодНаселенногоПункта И
	              |	АдресныйКлассификатор.КодУлицыВКоде = &КодУлицы И
	              |	АдресныйКлассификатор.Код = &КодЭлемента";
	
	Запрос = Новый Запрос(ТексЗапроса);
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", ТипАдресногоЭлемента);
	Запрос.УстановитьПараметр("КодАдресногоОбъекта", КодАдресногоОбъекта);
	Запрос.УстановитьПараметр("КодРайона", КодРайона);
	Запрос.УстановитьПараметр("КодГорода", КодГорода);
	Запрос.УстановитьПараметр("КодНаселенногоПункта", КодНаселенногоПункта);
	Запрос.УстановитьПараметр("КодУлицы", КодУлицы);
	Запрос.УстановитьПараметр("КодЭлемента", Число(КодЭлемента));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ПолучитьПустуюСтруктуруАдреса();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Новый Структура("Код,Наименование,Сокращение,ТипАдресногоЭлемента,Индекс,КодАдресногоОбъектаВКоде,КодРайонаВКоде,КодГородаВКоде,КодНаселенногоПунктаВКоде,КодУлицыВКоде",
							 Выборка.Код,
							 Выборка.Наименование,
							 Выборка.Сокращение,
							 Выборка.ТипАдресногоЭлемента,
							 Выборка.Индекс,
							 Выборка.КодАдресногоОбъектаВКоде,
							 Выборка.КодРайонаВКоде,
							 Выборка.КодГородаВКоде,
							 Выборка.КодНаселенногоПунктаВКоде,
							 Выборка.КодУлицыВКоде);

КонецФункции

// Функция возвращает имя адресного элемента определенного уровня по коду
Функция ПолучитьИмяАдресногоЭлементаПоКоду(КодЭлемента, ТипАдресногоЭлемента)
	
	ИмяАдресногоЭлемента = "";
	// сначала по коду определим уровень элемента, если не совпадет с требуемым, то к БД не обращаемся
	ТипЭлемента = ПолучитьТипАдресногоЭлемента(КодЭлемента);
	Если  ТипЭлемента <> ТипАдресногоЭлемента Тогда
		Возврат ИмяАдресногоЭлемента;
	КонецЕсли;
	
	АдресныйЭлемент = ПолучитьСтруктуруАдресногоЭлемента(КодЭлемента);
	Если АдресныйЭлемент.ТипАдресногоЭлемента = ТипАдресногоЭлемента Тогда
		ИмяАдресногоЭлемента = ПолучитьНазвание(АдресныйЭлемент);
	КонецЕсли;
	
	Возврат ИмяАдресногоЭлемента;
	
КонецФункции

// Функция возвращает структуру с набором полей как у записи регистра сведений
//  АдресныйКлассификатор с пустым набором значений
//
// Параметры:
// Нет.
//
// Возвращаемое значение:
// Структура - структуру с набором полей как у записи регистра сведений
//  АдресныйКлассификатор с пустым набором значений
//
Функция ПолучитьПустуюСтруктуруАдреса()
	
	Возврат Новый Структура("Код,Наименование,Сокращение,ТипАдресногоЭлемента,Индекс,КодАдресногоОбъектаВКоде,КодРайонаВКоде,КодГородаВКоде,КодНаселенногоПунктаВКоде,КодУлицыВКоде", 0, "", "", 0, "", 0, 0, 0, 0, 0);
	
КонецФункции

// Функция формирует строку с названием адресного элемента,
// которое состоит из наименования и сокращения
//
// Параметры:
//  АдресныйЭлемент - элемент справочника Адресный классификатор.
//
// Возвращаемое значение:
//  Название адресного элемента
//
Функция ПолучитьНазвание(АдресныйЭлемент)

	Если АдресныйЭлемент.Код = 0 Тогда
		Возврат "";
	Иначе
		Возврат СокрЛП(АдресныйЭлемент.Наименование) + " " + СокрЛП(АдресныйЭлемент.Сокращение)
	КонецЕсли;

КонецФункции

// Процедура переносит строку из запроса в Структуру
Процедура ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, СтрокаВыборки, СтруктураЭлемента) 
	
	Если СтруктураЭлемента = Неопределено 
		ИЛИ РезультатЗапроса = Неопределено 
		ИЛИ СтрокаВыборки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭлемента.Очистить();
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		СтруктураЭлемента.Вставить(Колонка.Имя, СтрокаВыборки[Колонка.Имя]);
	КонецЦикла;
	
КонецПроцедуры // ПеренестиСтрокуВыборкиВСтруктуру()

// Функция создает структуру по строке выборки
Функция СоздатьСтруктуруПоСтрокеВыборки(РезультатЗапроса, СтрокаВыборки)
	
	РезультирующаяСтруктура = Новый Структура;
	ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, СтрокаВыборки, РезультирующаяСтруктура);
	Возврат РезультирующаяСтруктура; 
	
КонецФункции

// Функция по полному наименованию адресного элемента выдает отдельно его имя, и отдельно его адресное сокращение
Функция ПолучитьИмяИАдресноеСокращение(Знач СтрокаЭлемента, АдресноеСокращение)

	Буфер = СокрП(СтрокаЭлемента);
	ПозицияПослПробела = Найти(Буфер, " ");

	Если ПозицияПослПробела = 0 Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;
	
	Пока  СтрЧислоВхождений(Буфер, " ") > 1 Цикл
		Буфер = Лев(Буфер, ПозицияПослПробела - 1) + "_" + Сред(Буфер, ПозицияПослПробела + 1);
		ПозицияПослПробела = Найти(Буфер, " ");
	КонецЦикла;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АдресныеСокращения.Сокращение
	|ИЗ
	|	РегистрСведений.АдресныеСокращения КАК АдресныеСокращения
	|ГДЕ
	|	АдресныеСокращения.Сокращение = &Сокращение";
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Сокращение", Сред(СтрокаЭлемента, ПозицияПослПробела + 1));
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;
	
	Если ПустаяСтрока(СокрЛП(Лев(СтрокаЭлемента, ПозицияПослПробела - 1))) Тогда
		Возврат СтрокаЭлемента;
	Иначе
		АдресноеСокращение = Сред(СтрокаЭлемента, ПозицияПослПробела + 1);
		Возврат Лев(СтрокаЭлемента, ПозицияПослПробела - 1);
	КонецЕсли;
	
КонецФункции

// Процедура раскладывает код адресного элемента на составляющие:
// Код Региона, код района, код города, код населенного пункта, код улицы и код дома
Процедура РазложитьКодАдресногоЭлементаНаСоставляющие(Знач Код, КодАдресногоОбъекта, КодРайона, КодГорода, КодНаселенногоПункта, КодУлицы, КодДома)
	
	КодЭлемента = Код;
	
	КодАдресногоОбъекта = Цел(КодЭлемента / МаскаРегиона());
	КодЭлемента = КодЭлемента % МаскаРегиона();

	КодРайона = Цел(КодЭлемента / МаскаРайона());
	КодЭлемента = КодЭлемента % МаскаРайона();

	КодГорода = Цел(КодЭлемента / МаскаГорода());
	КодЭлемента = КодЭлемента % МаскаГорода();

	КодНаселенногоПункта = Цел(КодЭлемента / МаскаНасПункта());
	КодЭлемента = КодЭлемента % МаскаНасПункта();

	КодУлицы = Цел(КодЭлемента / МаскаУлицы());
	КодЭлемента = КодЭлемента % МаскаУлицы();

	КодДома = Цел(КодЭлемента / МаскаДома());

КонецПроцедуры // РазложитьКодАдресногоЭлементаНаСоставляющие()

// Функция ищет требуемый адресный элемент по названию и типу 
// и возвращает первый найденный. В качестве дополнения может 
// быть задан элемент "родитель"
//
// Параметры:
//  НазваниеЭлемента - название адресного элемента ( с сокращением)
//  ТипЭлемента - тип искомого адресного элемента
//  ЭлементРодитель - элемент "родитель"
//
// Возвращаемое значение:
//  Найденный элемент справочника Адресный классификатор или пустая ссылка в случае неудачи
//
Функция ПолучитьАдресныйЭлемент(НазваниеЭлемента, ТипЭлемента, КодЭлементаРодителя = 0)

	Перем КодАдресногоОбъекта, КодРайона, КодГорода, КодНаселенногоПункта, КодУлицы, КодДома;
	
	Если (СокрЛП(НазваниеЭлемента) = "") ИЛИ (ТипЭлемента = 0) Тогда
		Возврат ПолучитьПустуюСтруктуруАдреса();
	КонецЕсли;
	
	// смотрим есть ли в имени адресное сокращение этого уровня
	// если есть, то ищем по наименованию и адресному сокращению
	АдресноеСокращение = "";
	НазваниеЭлемента = ПолучитьИмяИАдресноеСокращение(НазваниеЭлемента, АдресноеСокращение);

	Запрос = Новый Запрос();
	
	ОграничениеПоКоду = "";
	Если КодЭлементаРодителя > 0 Тогда // проверка на соответствие подчинению родителю
		ТипАдрЭлемента = ПолучитьТипАдресногоЭлемента(КодЭлементаРодителя);
		МаскаРодителя = ПолучитьМаскуПоТипу(ТипАдрЭлемента);
		
		Если ТипАдрЭлемента <= 5 Тогда
			
			КодЭлемента = КодЭлементаРодителя;
			
			РазложитьКодАдресногоЭлементаНаСоставляющие(КодЭлемента, КодАдресногоОбъекта, КодРайона, КодГорода, КодНаселенногоПункта, КодУлицы, КодДома);

			Если КодАдресногоОбъекта <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде)";
				Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", КодАдресногоОбъекта);
			КонецЕсли;
			
			Если КодРайона <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.КодРайонаВКоде = &КодРайонаВКоде)";
				Запрос.УстановитьПараметр("КодРайонаВКоде", КодРайона);
			КонецЕсли;
			
			Если КодГорода <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.КодГородаВКоде = &КодГородаВКоде)";
				Запрос.УстановитьПараметр("КодГородаВКоде", КодГорода);
			КонецЕсли;
			
			Если КодНаселенногоПункта <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.КодНаселенногоПунктаВКоде = &КодНаселенногоПунктаВКоде)";
				Запрос.УстановитьПараметр("КодНаселенногоПунктаВКоде", КодНаселенногоПункта);
			КонецЕсли;
			
			Если КодУлицы <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.КодУлицыВКоде = &КодУлицыВКоде)";
				Запрос.УстановитьПараметр("КодУлицыВКоде", КодУлицы);
			КонецЕсли;
		
		Иначе
			// ограничиваем по коду элемента
			КонечноеЗначениеКода = КодЭлементаРодителя + МаскаРодителя - 1; 
			
			ОграничениеПоКоду = Символы.ПС + "  И (АдресныйКлассификатор.Код Между &НачальноеЗначениеКода И &КонечноеЗначениеКода)";
			Запрос.УстановитьПараметр("НачальноеЗначениеКода", КодЭлементаРодителя);
			Запрос.УстановитьПараметр("КонечноеЗначениеКода", КонечноеЗначениеКода);
		КонецЕсли;
		
	КонецЕсли;
	
	// ограничение на адресное сокращение
	Если АдресноеСокращение <> "" Тогда
		ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.Сокращение = &АдресноеСокращение)";
		Запрос.УстановитьПараметр("АдресноеСокращение", АдресноеСокращение);
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
					|	АдресныйКлассификатор.Код,
					|	АдресныйКлассификатор.КодАдресногоОбъектаВКоде,
					|	АдресныйКлассификатор.Наименование,
					|	АдресныйКлассификатор.Сокращение,
					|	АдресныйКлассификатор.Индекс,
					|	АдресныйКлассификатор.ТипАдресногоЭлемента,
					|	АдресныйКлассификатор.КодРайонаВКоде,
					|	АдресныйКлассификатор.КодГородаВКоде,
					|	АдресныйКлассификатор.КодНаселенногоПунктаВКоде,
					|	АдресныйКлассификатор.КодУлицыВКоде
					|ИЗ
					|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
					|
					|ГДЕ
					|	АдресныйКлассификатор.Наименование = &Наименование И
					|	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента " +
					ОграничениеПоКоду;
	
	Запрос.УстановитьПараметр("Наименование", НазваниеЭлемента);
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", ТипЭлемента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ПолучитьПустуюСтруктуруАдреса();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат СоздатьСтруктуруПоСтрокеВыборки(РезультатЗапроса, Выборка);
	
КонецФункции

// Процедура добавляет не нулевое значение кода в структуру
Процедура ДобавитьКодВСтруктуру(ДанныеСтруктуры, ИмяЭлемента, КодЭлемента, УровеньРодителя, УровеньЭлемента)
	
	Если (КодЭлемента <> 0) ИЛИ (УровеньРодителя >= УровеньЭлемента) Тогда
		ДанныеСтруктуры.Вставить(ИмяЭлемента, КодЭлемента);
    КонецЕсли;
	
КонецПроцедуры

//Функция по адресу возвращает структуру ограничений	
Функция ПолучитьСтруктуруОграниченийПоАдресу(ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, ИмяУлицы, УровеньЭлемента) 
	
	Если УровеньЭлемента > 1 Тогда
		
		КодРодителя = Неопределено;
		СтруктураОграничений = ВернутьСтруктуруОграниченийПоРодителю(ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, ИмяУлицы, КодРодителя);
		
	Иначе
		СтруктураОграничений = Новый Структура();
	КонецЕсли;
	СтруктураОграничений.Вставить("ТипАдресногоЭлемента", УровеньЭлемента);
	
	Возврат СтруктураОграничений;
	
КонецФункции

// Функция определяет входимость числа в заданный диапазон
//  При этом диапазон задается как это описано в комментарии к функции ЧислоВИнтервале
//
// Параметры: 
//  Номер - (число, строка) номер дома с корпусом
//  Интервал - (строка), интервал чисел (домов)
//
// Возвращаемое значение:
//  Истина - если заданное число входит в диапазон,
//  Ложь   - если не входит
//
Функция ВходитВИнтервал(Знач Номер, Интервал)

	Если ПустаяСтрока("" + Номер) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если НЕ УдалитьСтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Номер, Ложь) Тогда
		Возврат ВРЕГ(СтрЗаменить("" + Номер, " ", "")) = ВРЕГ(СтрЗаменить("" + Интервал, " ", ""));
	КонецЕсли;

	Номер = Число(Номер);

	ТолькоЧислоИнтервал = УдалитьСтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Интервал, Ложь);
	
	Если ТолькоЧислоИнтервал Тогда
		Если Номер = Число(Интервал) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Если Найти(Интервал,"Ч") > 0 Тогда // диапазон четных чисел
		Интервал      = СтрЗаменить(Интервал, "Ч", "");
		Четность = 2;
		
	ИначеЕсли Найти(Интервал,"Н") > 0 Тогда // диапазон нечетных чисел
		Интервал      = СтрЗаменить(Интервал, "Н", "");
		Четность = 1;
		
	ИначеЕсли (Найти(Интервал, "-") = 0) И ТолькоЧислоИнтервал Тогда 
		// интервал это дом представленный в виде строки
		Возврат Ложь;
		
	Иначе
		Четность=0;
		
	КонецЕсли;
	
	Интервал = СтрЗаменить(Интервал, ")", ""); // на всякий случай уберем скобки
	Интервал = СтрЗаменить(Интервал, "(", "");
	Позиция  = Найти(Интервал, "-");
	Попали = 0;
	
	Если Позиция <> 0 Тогда
		МинЗначение  = Число(Лев(Интервал, Позиция - 1));
		МаксЗначение = Число(Сред(Интервал, Позиция + 1));
		Если (Номер >= МинЗначение) И (Номер <= МаксЗначение) Тогда
			Попали = 1;
		КонецЕсли;
		
	ИначеЕсли ПустаяСтрока(Интервал) Тогда
		// случай когда интервал был равен Ч или Н
		Попали = 1;
		
	Иначе
		Если УдалитьСтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Интервал, Ложь) Тогда
			Если Номер = Число(Интервал) Тогда
				Попали = 1;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	Если (Попали = 1) И (
	((Четность = 2) И (Номер % 2 = 0)) ИЛИ 
	((Четность = 1) И (Номер % 2 = 1)) ИЛИ 
	 (Четность = 0)) Тогда
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ВходитВИнтервал()

// Функция определяет входимость:
//  1. Номера дома (представленного в виде строки)
//     где Номер дома, это строка вида:
//     <СтрокаДом> пример: 58А, 32/1, 50А/8
//
//  2. Номера дома и номера корпуса (строения), в виде строки:
//     <СтрокаДом>к<СтрокаКорпус>,   пример: 32к1   это дом 32 корпус 1, 
//     <СтрокаДом>/<СтрокаКорпус>,   пример: 32/1   это дом 32 корпус 1, 
//     <СтрокаДом>стр<СтрокаКорпус>, пример: 32стр1 это дом 32 корпус 1, 
//		
//  3. Числа (номера дома) в заданный интервал чисел
//     При этом интервал задается строкой вида:
//     <Диапазон>[,<Диапазон>]
//     где Диапазон, это строка вида:
//     [Ч/Н]<Число>[-<Число>]
//     Префикс Ч или Н диапазона обозначает четность и нечетность входящих в него чисел
//     Пример: в интервал Ч12-14,Н1-5,20-29 входят числа 1,3,5,12,14 и все с 20 по 29
//
// Параметры: 
//  Номер - (число, строка) номер дома с корпусом
//  Интервал - (строка), интервал чисел (домов)
//
//  Истина - если заданное число входит в диапазон,
//  Ложь   - если не входит
//
Функция НомерДомаВИнтервале(Номер, Знач Интервал)
	
	Пока НЕ ПустаяСтрока(Интервал) Цикл

		Позиция = Найти(Интервал, ",");
		Если Позиция = 0 Тогда
			Возврат ВходитВИнтервал(Номер, Интервал);
		Иначе
			Если ВходитВИнтервал(Номер, СокрЛП(Лев(Интервал, Позиция - 1))) Тогда
				Возврат Истина;
			Иначе
				Интервал = Сред(Интервал, Позиция + 1);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат Ложь;

КонецФункции // НомерДомаВИнтервале()

// Функция определяет индекс по переданным улице, дому и корпусу
//
// Параметры: 
//  Улица - элемент справочника адресный классификатор с требуемой улицей
//  НомерДома - номер дома, для которого необходимо получить индекс
//  НомерКорпуса - номер корпуса
//
// Возвращаемое значение:
//  Строка - шестизначный почтовый индекс
//
Функция ПолучитьИндексПоУлицеДомуКорпусу(Улица, НомерДома, НомерКорпуса)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Уровень", 6);
	Запрос.УстановитьПараметр("НижнийКод", Цел(Улица.Код / 1000000) * 1000000);
	Запрос.УстановитьПараметр("ВерхнийКод", Цел(Улица.Код / 1000000+ 1) * 1000000);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	АдресныйКлассификатор.Наименование,
	|	АдресныйКлассификатор.Индекс
	|ИЗ
	|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|
	|ГДЕ
	|	АдресныйКлассификатор.ТипАдресногоЭлемента = &Уровень И
	|	АдресныйКлассификатор.Код МЕЖДУ &НижнийКод И &ВерхнийКод";

	
	Выборка = Запрос.Выполнить().Выбрать();
	ИндексДома = "";
	
	Пока Выборка.Следующий() Цикл

		Если НЕ ПустаяСтрока(Выборка.Индекс) Тогда
			Интервал = Врег(СокрЛП(Выборка.Наименование));
			
			Если НомерДомаВИнтервале(СокрЛП(НомерДома), Интервал) Тогда
				ИндексДома = Выборка.Индекс;
				
			ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "К", "") + СокрЛП(НомерКорпуса), Интервал)) Тогда
				Возврат Выборка.Индекс;
				
			ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "/", "") + СокрЛП(НомерКорпуса), Интервал)) Тогда
				Возврат Выборка.Индекс;
				
			ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "стр", "") + СокрЛП(НомерКорпуса), Интервал)) Тогда
				Возврат Выборка.Индекс;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(ИндексДома) Тогда
		Возврат Улица.Индекс;
	Иначе
		Возврат ИндексДома;
	КонецЕсли;
	
КонецФункции

// Конец АдресныйКлассификатор

Функция МандаринОбработатьОперацию(ПараметрыЗапроса) Экспорт

	Сервер = "secure.mandarinpay.com";
	Если ПараметрыЗапроса.Действие = Перечисления.Mandarin_Действия.Токен Тогда
		Ресурс = "/api/card-bindings";
	Иначе
		Ресурс = "/api/transactions";
	КонецЕсли;
	
	УчетнаяЗаписьМандарин = Константы.ТекущаяУчетнаяЗаписьМандарин.Получить();
	
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМандарин) Тогда
		Возврат "УчетнаяЗапись";
	КонецЕсли;
	
	АдресПубликацииБазы = СокрЛП(УчетнаяЗаписьМандарин.АдресПубликацииБазы);
	Лимит = УчетнаяЗаписьМандарин.ЛимитКоличестваОтмен;
	
	Если ПараметрыЗапроса.Действие = Перечисления.Mandarin_Действия.ОтменаТранзакции
		И ПревышенЛимитЗапросовОтмена(Лимит) Тогда

		Возврат "Лимит";

	КонецЕсли;
	
	тСтруктурыЗапроса = бит_Мандарин.СформироватьМассивСтруктур(ПараметрыЗапроса,АдресПубликацииБазы);  
	JSON = бит_Мандарин.СформироватьТелоПостЗапроса(тСтруктурыЗапроса);
	
	Учетка = ОбработкаБезопасноеХранилище.ПолучитьВсеЗначения("Мандарин");
	MID = СокрЛП(Учетка["Логин"]);
	Secret = СтрЗаменить(СокрЛП(Учетка["Пароль"]), Символы.ПС, "");
	
	HTTPЗапрос = бит_Мандарин.СформироватьПостЗапрос(Ресурс, JSON, MID, Secret);
	HTTP = бит_Мандарин.СформироватьСоединение(Сервер);
	
	Попытка
		ОтветHTTP = HTTP.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Ответ = ОбработатьОтветHTTP(ОтветHTTP);
	Возврат Ответ;

КонецФункции

Функция ОбработатьОтветHTTP(ОтветHTTP)
	мОтвет = Неопределено;
	Если ОтветHTTP = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	СтрокаОтвет =  ОтветHTTP.ПолучитьТелоКакСтроку();
	мОтвет = ПреобразоватьСтроку(СтрокаОтвет);
	мОтвет.Добавить(ОтветHTTP.КодСостояния);
	Возврат мОтвет;
	
КонецФункции

Процедура ЗаписатьУспешнуюТранзакцию(Ответ,ПараметрыЗапроса) Экспорт
	Если Ответ = Неопределено Или ТипЗнч(Ответ) = Тип("Строка") Тогда
		Возврат;
	КонецЕсли;	
	
	КодОтвета = Ответ[Ответ.Количество()-1];
	
	Если КодОтвета <> 200 Тогда
		Возврат;
	КонецЕсли;
	строкаТранзакция = Ответ[0]; 
	Транзакция = ВычислитьНомерТранзакции(строкаТранзакция);
	
	МЗ = РегистрыСведений.MandarinТаблицаОпераций.СоздатьМенеджерЗаписи();
	МЗ.OrderID = ПараметрыЗапроса.заказ;
	МЗ.Транзакция = Транзакция;
	МЗ.ДатаОперации = ТекущаяДатаСеанса();
	МЗ.ОбъектУчета = ПараметрыЗапроса.ОбъектУчета;
	МЗ.Плательщик = ПараметрыЗапроса.Плательщик;
	МЗ.Action = ПараметрыЗапроса.Action;
	МЗ.Операция = ПараметрыЗапроса.Действие;
	МЗ.СуммаОперации = ПараметрыЗапроса.Сумма;
	МЗ.UserWebLink = бит_Мандарин.ВычислитьЮзерскуюСсылку(Ответ);
	
	
	Если ПараметрыЗапроса.Действие = Перечисления.Mandarin_Действия.ОтменаТранзакции тогда
		МЗЛ = РегистрыСведений.MandarinЛогированиеОтмен.СоздатьМенеджерЗаписи();
		МЗЛ.Транзакция = Транзакция;
		МЗЛ.ОтменяемаяТранзакция = ПараметрыЗапроса.транзакция;
		МЗЛ.Записать();
		
		НЗ = РегистрыСведений.MandarinТаблицаОпераций.СоздатьНаборЗаписей();
		НЗ.Отбор.Транзакция.Установить(ПараметрыЗапроса.транзакция);
		НЗ.Прочитать();
		Если НЗ.Количество() <> 0 Тогда
			МЗОснование = НЗ[0]; 
			МЗ.ОбъектУчета = МЗОснование.ОбъектУчета;
			МЗ.Плательщик = МЗОснование.Плательщик;	
		КонецЕсли;
		
	КонецЕсли; 
	
	МЗ.Записать();
КонецПроцедуры

Функция ПреобразоватьСтроку(СтрокаОтвет)
	СтрокаОтвет = СтрЗаменить(СтрокаОтвет,"{","");
	СтрокаОтвет = СтрЗаменить(СтрокаОтвет,"}","");
	СтрокаОтвет = СокрЛП(СтрЗаменить(СтрокаОтвет,Символ(34),""));
	мПодстроки = СтрРазделить(СтрокаОтвет, ",");
	возврат мПодстроки;
КонецФункции

Функция ВычислитьНомерТранзакции(стр) Экспорт
	мПодстроки = СтрРазделить(стр, ":");
	тр = мПодстроки[1];
	тр = стрЗаменить(тр,Символ(34),"");
	Тр = СокрЛП(тр);
	возврат тр;
КонецФункции                                                

Функция ВычислитьЮзерскуюСсылку(Результат) Экспорт
	//"id": "43913ddc000c4d3990fddbd3980c1725",
	//"userWebLink": "https://secure.psp.io/CardBindings/New?id=4c9932c6-5e57-4807-9103-8c4083a06d23",
	//"jsOperationId": "binding_4c9932c6-5e57-4807-9103-8c4083a06d23"
	юСсылка = "";
	Для каждого строка из Результат Цикл
		Если СтрНайти(строка, "secure",,,) > 0 Тогда
			юСсылка = СтрЗаменить(строка,":","");
			юСсылка = СтрЗаменить(юСсылка,"userWebLink","");	
			юСсылка = СтрЗаменить(юСсылка,"https","https:");
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	юСсылка = стрЗаменить(юСсылка,Символ(34),"");
	юСсылка = СокрЛП(юСсылка);
	возврат юСсылка;
КонецФункции

Функция СформироватьПостЗапрос(Ресурс, strJSON, mid, pwrd) Экспорт
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.УстановитьТелоИзСтроки(strJSON);
	
	HTTPЗапрос.АдресРесурса = Ресурс;
	
	ДанныеАвторизации = ХешДанныеАвторизации(mid, pwrd);
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос.Заголовки.Вставить("X-Auth", ДанныеАвторизации);

	//HTTPЗапрос.Заголовки.Вставить("merchant_id",mid);
	//HTTPЗапрос.Заголовки.Вставить("secret",pwrd);
	
	Возврат HTTPЗапрос;
КонецФункции

Функция ХешДанныеАвторизации(mid, pwrd) 
	
	//merchantId-SHA256(merchantId-requestId-secret)-requestId
	ГУИД = Новый УникальныйИдентификатор();
	стрГУИД = Строка(ГУИД);
	стрГУИД = СтрЗаменить(стрГУИД, "-", "");
	requestId = стрГУИД;
	
	ХешированиеДанных  = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХешированиеДанных.Добавить(mid + "-" + requestId + "-" + pwrd);
	ХешРезультат = ХешированиеДанных.ХешСумма;
	СтрокаХеш = Нрег(ПолучитьHexСтрокуИзДвоичныхДанных(ХешированиеДанных.ХешСумма));
	
	стрДанныеАвторизации = mid + "-" + СтрокаХеш + "-" + requestId;
	Возврат стрДанныеАвторизации;
КонецФункции

Функция СформироватьСоединение(Сервер) Экспорт
	ssl = Новый ЗащищенноеСоединениеOpenSSL;
	HTTP = Новый HTTPСоединение(Сервер, , , , , ТаймаутСоединения.ДляБыстройОперации(), ssl);
	Возврат HTTP;
КонецФункции

Функция СформироватьТелоПостЗапроса(тМассивСтруктур) Экспорт
			
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);  
	ЗаписьJSON.УстановитьСтроку(ПараметрыJSON);
	Запрос = Новый Структура;
	
	Для каждого Стр из тМассивСтруктур Цикл
		Запрос.Вставить(стр.ИмяСтруктуры,стр.ЭлементСтруктура);
	КонецЦикла;		
	
	ЗаписатьJSON(ЗаписьJSON, Запрос);
	strJSON = ЗаписьJSON.Закрыть();
	Возврат strJSON;
КонецФункции	

Функция СформироватьПараметрыЗапроса() Экспорт
	//ОплатитьДо  = СформироватьДатуМандарин(Объект.ОплатитьДо);
	//сПараметрыЗапроса = новый Структура;
	//сПараметрыЗапроса.Вставить("емаил",Объект.ЕмаилПлательщика);
	//сПараметрыЗапроса.Вставить("телефон",Объект.ТелефонПлательщика);
	//сПараметрыЗапроса.Вставить("ОбъектУчета",Объект.ОбъектУчета);
	//сПараметрыЗапроса.Вставить("Плательщик",Объект.Плательщик);
	//
	//
	//Экшн = ВычислитьСтрокуAction(Действие);
	//сПараметрыЗапроса.Вставить("Action",Экшн);

	//сПараметрыЗапроса.Вставить("действие",Действие);
	//сПараметрыЗапроса.Вставить("заказ",Объект.Заказ);
	//сПараметрыЗапроса.Вставить("сумма",строка(Формат(Объект.СуммаЗаказа, "ЧЦ=10; ЧДЦ=2")));
	//сПараметрыЗапроса.Вставить("оплатитьДо",ОплатитьДо);
	//сПараметрыЗапроса.Вставить("токен",объект.ТокенКарты);
	//сПараметрыЗапроса.Вставить("транзакция",Объект.Транзакция);
	//возврат сПараметрыЗапроса;
	Возврат Неопределено;
КонецФункции	

Функция СформироватьМассивСтруктур(ПараметрыЗапроса,АдресПубликацииБазы) Экспорт
	тМассивСтруктур = новый ТаблицаЗначений;
	тМассивСтруктур.Колонки.Добавить("ИмяСтруктуры");
	тМассивСтруктур.Колонки.Добавить("ЭлементСтруктура");
	
	
	Если ПараметрыЗапроса.Действие = Перечисления.Mandarin_Действия.Токен Тогда
		ДобавитьСтруктуруCustomerInfo(тМассивСтруктур,ПараметрыЗапроса); 
	ИначеЕсли ПараметрыЗапроса.Действие = Перечисления.Mandarin_Действия.ОдностадийныйПлатеж Тогда
		ДобавитьСтруктуруPayment(тМассивСтруктур,ПараметрыЗапроса);
		ДобавитьСтруктуруCustomerInfo(тМассивСтруктур,ПараметрыЗапроса);
	ИначеЕсли ПараметрыЗапроса.Действие = Перечисления.Mandarin_Действия.РекуррентныйПлатеж Тогда
		ДобавитьСтруктуруPayment(тМассивСтруктур,ПараметрыЗапроса);
		ДобавитьСтруктуруTarget(тМассивСтруктур,ПараметрыЗапроса);
	ИначеЕсли ПараметрыЗапроса.Действие = Перечисления.Mandarin_Действия.Выплата Тогда
		ДобавитьСтруктуруPayment(тМассивСтруктур,ПараметрыЗапроса);
		ДобавитьСтруктуруCustomerInfo(тМассивСтруктур,ПараметрыЗапроса);
		ДобавитьСтруктуруTarget(тМассивСтруктур,ПараметрыЗапроса);	
	ИначеЕсли ПараметрыЗапроса.Действие = Перечисления.Mandarin_Действия.ОтменаТранзакции Тогда
		ДобавитьСтруктуруPayment(тМассивСтруктур,ПараметрыЗапроса);
		ДобавитьСтруктуруTarget(тМассивСтруктур,ПараметрыЗапроса);		
	КонецЕсли;
	
	сУРЛ = Новый Структура;
	сУРЛ.Вставить("callback", АдресПубликацииБазы + "/hs/Callback/PostOrderCallBack");
	//после публикации ХТТП сервиса захерачить урл
	строкаУРЛ = тМассивСтруктур.Добавить();
	строкаУРЛ.ИмяСтруктуры = "urls";
	строкаУРЛ.ЭлементСтруктура = сУРЛ;
	
	
	
	Возврат тМассивСтруктур;
КонецФункции	

Процедура ДобавитьСтруктуруCustomerInfo(тЗапрос,сПараметрыЗапроса)
	//"customerInfo": {
	//		"email": "user@example.com",
	//		"phone": "+79001234567"
	//	},
	сПлательщик = Новый Структура;
	
	сПлательщик.Вставить("email",сПараметрыЗапроса.емаил);
	сПлательщик.Вставить("phone",сПараметрыЗапроса.телефон);
	
	строкаПлательщик = тЗапрос.Добавить();
	строкаПлательщик.ИмяСтруктуры = "customerInfo";
	строкаПлательщик.ЭлементСтруктура = сПлательщик;
КонецПроцедуры

Процедура ДобавитьСтруктуруPayment(тЗапрос,сПараметрыЗапроса)
	
	//{
	//	"payment": {
	//		"action": "pay",
	//		"orderId": "your_unique_order_id",
	//		"price": "1000.00",
	//		"orderActualTill": "2020-02-20 12:34:56+00:00"
	//	},
	
	сОперация = Новый Структура;
	сОперация.Вставить("action",сПараметрыЗапроса.Action);
	сОперация.Вставить("orderId",сПараметрыЗапроса.заказ);
	
	Если сПараметрыЗапроса.Действие = Перечисления.Mandarin_Действия.ОтменаТранзакции Тогда
		сПараметрыЗапроса.сумма = ПолучитьСуммуОтменяемойТранзакции(сПараметрыЗапроса.транзакция);		
	КонецЕсли;
	
	сОперация.Вставить("price",СтрЗаменить(СтрЗаменить(сПараметрыЗапроса.сумма,",","."),Символы.НПП,""));

	
	Если ЗначениеЗаполнено(сПараметрыЗапроса.оплатитьДо) и сПараметрыЗапроса.Действие = Перечисления.Mandarin_Действия.ОдностадийныйПлатеж Тогда
		сОперация.Вставить("orderActualTill",сПараметрыЗапроса.оплатитьДо);
	КонецЕсли;
		
	строкаОперация = тЗапрос.Добавить();
	строкаОперация.ИмяСтруктуры = "payment";
	строкаОперация.ЭлементСтруктура = сОперация;
КонецПроцедуры

Процедура ДобавитьСтруктуруTarget(тЗапрос,сПараметрыЗапроса)
	сЦель = Новый Структура;
	
	Если сПараметрыЗапроса.Действие = Перечисления.Mandarin_Действия.Выплата или сПараметрыЗапроса.Действие = Перечисления.Mandarin_Действия.РекуррентныйПлатеж Тогда
		сЦель.Вставить("card",сПараметрыЗапроса.токен); 
	ИначеЕсли сПараметрыЗапроса.Действие = Перечисления.Mandarin_Действия.ОтменаТранзакции Тогда
		сЦель.Вставить("transaction",сПараметрыЗапроса.транзакция); 
	КонецЕсли;
	
	строкаЦель = тЗапрос.Добавить();
	строкаЦель.ИмяСтруктуры = "target";
	строкаЦель.ЭлементСтруктура = сЦель;
КонецПроцедуры

Процедура РаспарситьstrCallBack(СтрокаКоллБэк) Экспорт
	//merchantId=3325&orderId=b4c9af76-1ef8-4377-9a8d-236503fff9ee&email=royia%40mail.ru&orderActualTill=2021-06-08%2018%3A31%3A57%2B00%3A00&price=1500.50&callbackUrl=http%3A%2F%2F91.226.210.87%2F3502_Mandarin%2Fhs%2FCallback%2FPostOrderCallBack&action=pay&customer_fullName=%20%20&customer_phone=%2B79161548754&customer_email=royia%40mail.ru&transaction=edb2469ea8be4e23ae57bcd3411e4211&object_type=transaction&status=success&payment_system=mandarinpayv1&sandbox=true&cb_processed_at=2021-06-07T15%3A33%3A09.9856720Z&card_number=469206XXXXXX9192&cb_customer_creditcard_number=469206XXXXXX9192&card_holder=CARD%20HOLDER&card_expiration_year=24&card_expiration_month=01&gw_channel=internal&3dsecure=true&gw_id=5bdeab37-7b36-47b4-8667-e7d83f492ebf&d7b3176c-5466-4621-b7f7-0262767cdf94=7a481301-40fc-4f13-bfce-449b64a8e5d8&sign=b5164f6ed25764c482914a04867830b6a0af15494a49767514dd6c48449609dd09.06.2021 2:20:09
	
	Плательщик = "";
	
	мПодстроки = СтрРазделить(СтрокаКоллБэк, "&");
	
	стрКолбэк = ПреобразоватьМассивВСтруктуру(мПодстроки); 
	
	//ПроверкаПодписиМандарин(стрКолбэк.sing);
	ЗаписатьCallBack(СтрокаКоллБэк,стрКолбэк,Плательщик);
	Если стрКолбэк.object_type="card_binding" Тогда
		ЗаписатьТокенКарты(стрКолбэк,Плательщик);
	КонецЕсли;	
	
	ЗаписатьОтменуРанееУспешнойТранзакции(стрКолбэк);

	
КонецПроцедуры

Функция ПреобразоватьМассивВСтруктуру(МассивСтрок)
	СтруктураСтрок = Новый Структура;
	СчетчикНераспознанныхПараметров = 1;
	Для каждого Стр из МассивСтрок Цикл
		мМСтроки = СтрРазделить(Стр,"=");
		Попытка
			СтруктураСтрок.Вставить(СокрЛП(мМСтроки[0]),СокрЛП(мМСтроки[1]));
		Исключение
			ИмяНераспознанногоПараметра = "НераспознанныйПараметр" + строка(СчетчикНераспознанныхПараметров);
			СтруктураСтрок.Вставить(ИмяНераспознанногоПараметра,СокрЛП(мМСтроки[1]));
			СчетчикНераспознанныхПараметров = СчетчикНераспознанныхПараметров + 1;
		КонецПопытки;	
	КонецЦикла;	
	Возврат СтруктураСтрок;
КонецФункции

Функция ПолучитьСуммуОтменяемойТранзакции(Транзакция)
	чСуммаЗаказа = 0;
	НЗ = РегистрыСведений.MandarinТаблицаОпераций.СоздатьНаборЗаписей();
	НЗ.Отбор.Транзакция.Установить(Транзакция);
	
	НЗ.Прочитать();
	Если НЗ.Количество() = 0 Тогда
		чСуммаЗаказа = 0;		
	Иначе
		НайденнаяОперация = НЗ[0];
		чСуммаЗаказа = НайденнаяОперация.СуммаОперации;
	КонецЕсли;
	
	СуммаЗаказа = строка(Формат(чСуммаЗаказа, "ЧЦ=10; ЧДЦ=2"));
	Возврат СуммаЗаказа;
КонецФункции

Процедура ЗаписатьCallBack(ПолнаяСтрока,СтрокаВСтруктуре,Плательщик)
	НЗ = РегистрыСведений.MandarinТаблицаОпераций.СоздатьНаборЗаписей();
	Попытка
		НЗ.Отбор.orderID.Установить(СтрокаВСтруктуре.orderId);
	Исключение
	КонецПопытки;
	Попытка
		НЗ.Отбор.Транзакция.Установить(СтрокаВСтруктуре.transaction);
	Исключение
		НЗ.Отбор.Транзакция.Установить(СтрокаВСтруктуре.card_binding);
	КонецПопытки;
	
	НЗ.Прочитать();
	Если НЗ.Количество() = 0 Тогда
		Возврат;		
	Иначе
		НайденнаяОперация = НЗ[0];
		НайденнаяОперация.strCallBack  = ПолнаяСтрока;
		НайденнаяОперация.Status = СопоставлениеСтатусовТранзакций(СтрокаВСтруктуре.status);
		НайденнаяОперация.ДатаПолученияСтатуса = ТекущаяДатаСеанса();
		
		НайденнаяОперация.Отменено  = Ложь;
		Плательщик = НайденнаяОперация.Плательщик;
		СоздатьДокументДляОперации(НайденнаяОперация);
		//СоздатьДокумент и записать его
	КонецЕсли;
	
	НЗ.Записать();
	
КонецПроцедуры

Процедура ЗаписатьТокенКарты(СтрокаВСтруктуре,Плательщик)
	МЗ = РегистрыСведений.MandarinТокеныКарт.СоздатьМенеджерЗаписи();
	МЗ.ТокенКарты = СтрокаВСтруктуре.card_binding;
	МЗ.НазваниеКарты = СтрокаВСтруктуре.card_number;
	МЗ.СтатусКарты =  СопоставлениеСтатусовТранзакций(СтрокаВСтруктуре.status);
	МЗ.Плательщик  = Плательщик;
	МЗ.Записать();
КонецПроцедуры

Процедура ЗаписатьОтменуРанееУспешнойТранзакции(СтрокаВСтруктуре)
	Транзакция = "";
	ОтменяемаяТранзакция = "";
	Попытка 
		Транзакция = СтрокаВСтруктуре.transaction;
	Исключение
		Возврат;
	КонецПопытки;
	
	Status = СопоставлениеСтатусовТранзакций(СтрокаВСтруктуре.status);
	
	Если Status = Перечисления.Mandarin_trsStatus.failed Тогда
		Возврат;
	КонецЕсли;	
	
	НЗ = РегистрыСведений.MandarinЛогированиеОтмен.СоздатьНаборЗаписей();
	НЗ.Отбор.Транзакция.Установить(Транзакция);	
	НЗ.Прочитать();
	Если НЗ.Количество() = 0 Тогда
		Возврат;		
	Иначе
		НайденнаяОтмена = НЗ[0];
		ОтменяемаяТранзакция = НайденнаяОтмена.ОтменяемаяТранзакция;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтменяемаяТранзакция) Тогда
		НЗ = РегистрыСведений.MandarinТаблицаОпераций.СоздатьНаборЗаписей();
		НЗ.Отбор.Транзакция.Установить(ОтменяемаяТранзакция);
		НЗ.Прочитать();
		Если НЗ.Количество() = 0 Тогда
			Возврат;		
		Иначе
			НайденнаяОперация = НЗ[0]; 
			НайденнаяОперация.Отменено  = Истина;
			ОтменитьДокументДляОперации(НайденнаяОперация);
		КонецЕсли;
		
		НЗ.Записать();
		
		
	КонецЕсли;	
КонецПроцедуры

Функция СопоставлениеСтатусовТранзакций(стрСтатус)
	перСтатус = Перечисления.Mandarin_trsStatus.failed;
	Если стрСтатус = "success" Тогда
		перСтатус = Перечисления.Mandarin_trsStatus.success;
	ИначеЕсли стрСтатус = "failed" Тогда
		перСтатус = Перечисления.Mandarin_trsStatus.failed;
	ИначеЕсли стрСтатус = "payout_only" Тогда
		перСтатус = Перечисления.Mandarin_trsStatus.payout_only;
	КонецЕсли;	
	Возврат перСтатус;	
КонецФункции

Функция СформироватьСписокУспешныхТранзакцийПлатежей() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	MandarinТаблицаОпераций.Транзакция КАК Транзакция,
		|	MandarinТаблицаОпераций.СвязанныйДокумент КАК СвязанныйДокумент,
		|	MandarinТаблицаОпераций.Status КАК Status
		|ИЗ
		|	РегистрСведений.MandarinТаблицаОпераций КАК MandarinТаблицаОпераций
		|ГДЕ
		|	MandarinТаблицаОпераций.Отменено = ЛОЖЬ
		|	И (MandarinТаблицаОпераций.Операция = &ОперацияР
		|			ИЛИ MandarinТаблицаОпераций.Операция = &ОперацияО)
		|	И MandarinТаблицаОпераций.Status = &Status";
	
	Запрос.УстановитьПараметр("Status", Перечисления.Mandarin_trsStatus.success);
	Запрос.УстановитьПараметр("ОперацияР", Перечисления.Mandarin_Действия.ОдностадийныйПлатеж);
	Запрос.УстановитьПараметр("ОперацияО", Перечисления.Mandarin_Действия.РекуррентныйПлатеж);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();	
	
	Возврат РезультатЗапроса;
КонецФункции

Функция ЗаполнитьДанныеПлательщика(ОбъектУчета) Экспорт
	ДанныеПлательщика = Новый Структура;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	MandarinДанныеПлательщиков.Плательщик КАК Плательщик,
		|	MandarinДанныеПлательщиков.email КАК email,
		|	MandarinДанныеПлательщиков.Телефон КАК Телефон
		|ПОМЕСТИТЬ ТелефонИЕмаил
		|ИЗ
		|	РегистрСведений.MandarinДанныеПлательщиков КАК MandarinДанныеПлательщиков
		|ГДЕ
		|	MandarinДанныеПлательщиков.ОбъектУчета = &ОбъектУчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Плательщик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	MandarinТокеныКарт.Плательщик КАК Плательщик,
		|	MandarinТокеныКарт.ТокенКарты КАК ТокенКарты
		|ПОМЕСТИТЬ ТокеныКарт
		|ИЗ
		|	РегистрСведений.MandarinТокеныКарт КАК MandarinТокеныКарт
		|ГДЕ
		|	MandarinТокеныКарт.СтатусКарты = &СтатусКарты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Плательщик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТелефонИЕмаил.Плательщик КАК Плательщик,
		|	ТелефонИЕмаил.email КАК ЕмаилПлательщика,
		|	ТелефонИЕмаил.Телефон КАК ТелефонПлательщика,
		|	ЕСТЬNULL(ТокеныКарт.ТокенКарты, "" "") КАК ТокенКарты
		|ИЗ
		|	ТелефонИЕмаил КАК ТелефонИЕмаил
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТокеныКарт КАК ТокеныКарт
		|		ПО ТелефонИЕмаил.Плательщик = ТокеныКарт.Плательщик";
	
	Запрос.УстановитьПараметр("ОбъектУчета", ОбъектУчета);
	Запрос.УстановитьПараметр("СтатусКарты", Перечисления.Mandarin_trsStatus.success);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
	
КонецФункции

Функция БылТакойOrderID(OrderID) Экспорт
	
	НЗ = РегистрыСведений.MandarinТаблицаОпераций.СоздатьНаборЗаписей();
	Попытка
		НЗ.Отбор.orderID.Установить(OrderID);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	НЗ.Прочитать();
	Если НЗ.Количество() = 0 Тогда
		Возврат Ложь;		
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ПревышенЛимитЗапросовОтмена(Лимит) Экспорт
	КоличествоТранзакцийСутки = 0;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	MandarinТаблицаОпераций.Транзакция КАК Транзакция,
		|	MandarinТаблицаОпераций.ДатаПолученияСтатуса КАК ДатаПолученияСтатуса
		|ПОМЕСТИТЬ ТранзакцииЗаСутки
		|ИЗ
		|	РегистрСведений.MandarinТаблицаОпераций КАК MandarinТаблицаОпераций
		|ГДЕ
		|	MandarinТаблицаОпераций.ДатаПолученияСтатуса МЕЖДУ &НП И &ОП
		|	И MandarinТаблицаОпераций.Status = &Status
		|	И MandarinТаблицаОпераций.Операция = &Операция
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТранзакцииЗаСутки.Транзакция) КАК КоличествоТранзакций
		|ИЗ
		|	ТранзакцииЗаСутки КАК ТранзакцииЗаСутки";
	
	Запрос.УстановитьПараметр("Status", Перечисления.Mandarin_trsStatus.success);
	Запрос.УстановитьПараметр("НП", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ОП", КонецДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Операция", Перечисления.Mandarin_Действия.ОтменаТранзакции);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		КоличествоТранзакцийСутки = ВыборкаДетальныеЗаписи.КоличествоТранзакций;
	КонецЦикла;
	
	Если КоличествоТранзакцийСутки >= (Лимит - 1) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции

Процедура ЗаполнитьРегистрДанныеПлательщиков(Параметры, АдресРезультата) Экспорт
	Результат = Ложь;
	ВидТелефона = Параметры.ВидТелефона;
	РеквизитEmail = Параметры.РеквизитEmail;
	
	Если Не ЗначениеЗаполнено(ВидТелефона) Или Не ЗначениеЗаполнено(РеквизитEmail) Тогда
		АдресРезультата = ПоместитьВоВременноеХранилище(Результат,АдресРезультата);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыВРаботеОстатки.Объект КАК ОбъектУчета,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОбъектыВРаботеОстатки.Объект) = ТИП(Справочник.ДолговыеОбязательства)
		|			ТОГДА ОбъектыВРаботеОстатки.Объект.Должник
		|		КОГДА ТИПЗНАЧЕНИЯ(ОбъектыВРаботеОстатки.Объект) = ТИП(Справочник.ДоговорыКонтрагентов)
		|			ТОГДА ОбъектыВРаботеОстатки.Объект.Контрагент
		|		КОГДА ТИПЗНАЧЕНИЯ(ОбъектыВРаботеОстатки.Объект) = ТИП(Справочник.Залоги)
		|			ТОГДА ОбъектыВРаботеОстатки.Объект.Владелец.Должник
		|		КОГДА ТИПЗНАЧЕНИЯ(ОбъектыВРаботеОстатки.Объект) = ТИП(Справочник.ИсполнительныеДокументы)
		|			ТОГДА ОбъектыВРаботеОстатки.Объект.Должник
		|		КОГДА ТИПЗНАЧЕНИЯ(ОбъектыВРаботеОстатки.Объект) = ТИП(Справочник.УслугиПоДоговору)
		|			ТОГДА ОбъектыВРаботеОстатки.Объект.Контрагент
		|		ИНАЧЕ ОбъектыВРаботеОстатки.Объект
		|	КОНЕЦ КАК Плательщик
		|ИЗ
		|	РегистрНакопления.ОбъектыВРаботе.Остатки(&ТекущаяДата) КАК ОбъектыВРаботеОстатки";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		АдресРезультата = ПоместитьВоВременноеХранилище(Результат,АдресРезультата);
		Возврат;
	КонецЕсли;	
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	КоличествоОбъектов = ВыборкаДетальныеЗаписи.Количество();
	СчетчикОбработанных = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СчетчикОбработанных = СчетчикОбработанных + 1;
		Емаил = ОбъектыСервер.ПолучитьЗначениеСвойства(ВыборкаДетальныеЗаписи.ОбъектУчета, РеквизитEmail.Код);
		Емаил = ?(ЗначениеЗаполнено(Емаил), Емаил, ОбъектыСервер.ПолучитьЗначениеСвойства(ВыборкаДетальныеЗаписи.Плательщик, РеквизитEmail.Код));
		Попытка
			ТЧТелефоны = ВыборкаДетальныеЗаписи.Плательщик.Телефоны;
			сТелефон = ТЧТелефоны.Найти(ВидТелефона, "ВидТелефона");
			Если сТелефон <> Неопределено Тогда
				Телефон = "+7" + сТелефон.НомерДляПоиска;
			КонецЕсли;
		Исключение
			Телефон = "";
		КонецПопытки;
		
		МЗ = РегистрыСведений.MandarinДанныеПлательщиков.СоздатьМенеджерЗаписи();
		МЗ.ОбъектУчета = ВыборкаДетальныеЗаписи.ОбъектУчета; 
		МЗ.Плательщик = ВыборкаДетальныеЗаписи.Плательщик;
		МЗ.email = Емаил;
		МЗ.Телефон = Телефон;
		МЗ.Записать();
		
		Прогресс = СчетчикОбработанных / КоличествоОбъектов * 100;
		Описание = "Выполняется обработка объектов учета! Обработано объектов учета: ";
		ДлительныеОперации.СообщитьПрогресс(Окр(Прогресс, 0), Описание);	
	
	КонецЦикла;
	
	Если СчетчикОбработанных > 0 Тогда
		Результат = Истина;
	КонецЕсли;	
	
	АдресРезультата = ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Процедура ОтменитьДокументДляОперации(ЗаписьОперации) Экспорт
	Док = ЗаписьОперации.СвязанныйДокумент;
	ТипЗначения = ТипЗнч(Док);
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		Возврат;
	КонецЕсли;
	
	Если Док.Проведен Тогда
		ДокОб = Док.ПолучитьОбъект();
		ДокОб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;	
КонецПроцедуры


Процедура СоздатьДокументДляОперации(ЗаписьОперации) Экспорт
	Если ЗаписьОперации.Status = Перечисления.Mandarin_trsStatus.failed Тогда
		Возврат;
	КонецЕсли;	
	ВариантУчета = ОбъектыСервер.ОпределитьВариантУчетаЗадолженностиПоРегиструСтадий(ЗаписьОперации.ОбъектУчета, ТекущаяДатаСеанса()); 
	СоздатьДокументПоВариантуУчета(ВариантУчета, ЗаписьОперации);	
КонецПроцедуры

Процедура СоздатьДокументПоВариантуУчета(ВариантУчета, ЗаписьОперации) Экспорт
	Если ЗаписьОперации.Операция = Перечисления.Mandarin_Действия.ОтменаТранзакции Тогда
		Возврат;
	КонецЕсли;	
	
	Док = ЗаписьОперации.Плательщик;
	Если ВариантУчета = Перечисления.СтадииЗадолженности.СтарыйУчет и ЗаписьОперации.Операция = Перечисления.Mandarin_Действия.Выплата тогда
		//ЗагрузкаЗадолженности
		Док = СоздатьДокументНачисленияЗагрузкаЗадолженности(ЗаписьОперации);
	ИначеЕсли ВариантУчета = Перечисления.СтадииЗадолженности.СтарыйУчет и (ЗаписьОперации.Операция = Перечисления.Mandarin_Действия.ОдностадийныйПлатеж Или ЗаписьОперации.Операция = Перечисления.Mandarin_Действия.РекуррентныйПлатеж) Тогда
		//поступлениеплатежей
		Док = СоздатьДокументОплатыПоступлениеПлатежей(ЗаписьОперации);
	ИначеЕсли ВариантУчета = Перечисления.СтадииЗадолженности.Внесудебная и ЗаписьОперации.Операция = Перечисления.Mandarin_Действия.Выплата тогда
		// НачислениеЗадолженности
		Док = СоздатьДокументНачисленияНачислениеЗадолженностиВнесудебка(ЗаписьОперации);
	ИначеЕсли ВариантУчета = Перечисления.СтадииЗадолженности.Внесудебная и (ЗаписьОперации.Операция = Перечисления.Mandarin_Действия.ОдностадийныйПлатеж Или ЗаписьОперации.Операция = Перечисления.Mandarin_Действия.РекуррентныйПлатеж) Тогда
		//поступлениеПлатежа
		Док = СоздатьДокументОплатыПоступлениеПлатежа(ЗаписьОперации,ВариантУчета);
	ИначеЕсли ВариантУчета = Перечисления.СтадииЗадолженности.Судебная и (ЗаписьОперации.Операция = Перечисления.Mandarin_Действия.ОдностадийныйПлатеж Или ЗаписьОперации.Операция = Перечисления.Mandarin_Действия.РекуррентныйПлатеж) Тогда
		// поступлениеПлатежа
		Док = СоздатьДокументОплатыПоступлениеПлатежа(ЗаписьОперации,ВариантУчета);
	ИначеЕсли ВариантУчета = Перечисления.СтадииЗадолженности.Расчетная и (ЗаписьОперации.Операция = Перечисления.Mandarin_Действия.ОдностадийныйПлатеж Или ЗаписьОперации.Операция = Перечисления.Mandarin_Действия.РекуррентныйПлатеж) Тогда
		 // ЗагрузкаИсторииПлатежей
		 Док = СоздатьДокументОплатыЗагрурзкаИсторииПлатежей(ЗаписьОперации);
	ИначеЕсли ВариантУчета = Перечисления.СтадииЗадолженности.Расчетная и  ЗаписьОперации.Операция = Перечисления.Mandarin_Действия.Выплата Тогда
		 //ДоговорМикрозайма.
		 Док = СоздатьДокументНачисленияДоговорМикрозайма(ЗаписьОперации);
	 КонецЕсли;
	 
	 ЗаписьОперации.СвязанныйДокумент = Док;
	
КонецПроцедуры
	
	
Функция ОпределитьВариантУчетаЗадолженности(Об)
	ВариантУчета = Неопределено;
	ЕстьРасчеты = Константы.РасчетНачислений.Получить(); 
	ЕстьСудебныйБлок = Константы.ИспользоватьСудебныйБлок.Получить();
	Если НЕ ЕстьРасчеты и Не ЕстьСудебныйБлок Тогда
		ВариантУчета = "Остатки";
		Возврат ВариантУчета;
	КонецЕсли;	
	
	Если ЕстьРасчеты и Не ЕстьСудебныйБлок Тогда
		ВариантУчета = "ДосудебкаМикроЗайм";
		Возврат ВариантУчета;
	КонецЕсли;	
	
	Если ЕстьРасчеты и ЕстьСудебныйБлок Тогда
		ВариантУчета = ПроверитьСтадиюОбъектаУчета(Об,ЕстьРасчеты);
		Возврат ВариантУчета; //Судебка  //ДосудебкаМикроЗайм
	КонецЕсли;	
	
	Если НЕ ЕстьРасчеты и ЕстьСудебныйБлок Тогда
		ВариантУчета = ПроверитьСтадиюОбъектаУчета(Об,ЕстьРасчеты);
		Возврат ВариантУчета; //Судебка //Досудебка
	КонецЕсли;	
	
	Возврат ВариантУчета;	
КонецФункции

Функция ПроверитьСтадиюОбъектаУчета(ОбъектУчета,Расчеты)
	ВариантУчета = Неопределено;
	
	ЕстьДело = ПолучитьСудебноеДело(ОбъектУчета);
	Если ЕстьДело Тогда
		ВариантУчета = "Судебка";
	Иначе
		ВариантУчета =?(Расчеты,"ДосудебкаМикроЗайм","Досудебка");
	КонецЕсли;	

	Возврат ВариантУчета;	
КонецФункции


Функция ПолучитьСудебноеДело(ОбъектУчета)
	
	ЕстьДело = Ложь;
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СудебноеДело.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СудебноеДело КАК СудебноеДело
		|ГДЕ
		|	СудебноеДело.Проведен = ИСТИНА
		|	И СудебноеДело.ПометкаУдаления = ЛОЖЬ
		|	И СудебноеДело.Займ = &Займ
		|	И СудебноеДело.ВидИска = &ВидИска";
	
	Запрос.УстановитьПараметр("Займ", ОбъектУчета);
	Запрос.УстановитьПараметр("ВидИска", Перечисления.ВидыИска.ВзысканиеПросроченнойЗадолженности);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ЕстьДело = Истина;
	КонецЕсли;
	
	Возврат ЕстьДело;
		
КонецФункции



Функция СоздатьДокументОплатыПоступлениеПлатежей(ЗаписьОперации) Экспорт
	ПорядокГашенияПоУмолчанию = Новый массив;  
	ПорядокГашенияПоУмолчанию.Добавить("Проценты");  
	ПорядокГашенияПоУмолчанию.Добавить("Штрафы");  
	ПорядокГашенияПоУмолчанию.Добавить("Пени");  
	ПорядокГашенияПоУмолчанию.Добавить("ОсновнойДолг"); 
	
	тОстатки = ПолучитьОстаткиЗадолженности(ЗаписьОперации.ОбъектУчета,ЗаписьОперации.ДатаПолученияСтатуса);
	
	Документ = Документы.ПоступлениеПлатежей.СоздатьДокумент();
	Документ.Автор = ПараметрыСеанса.ТекущийПользователь;
	Документ.Организация = ПараметрыСеанса.ТекущийПользователь.Организация;
	Документ.Комментарий = ЗаписьОперации.Транзакция;
	Документ.Дата = ТекущаяДатаСеанса();
	Платеж = Документ.Объекты.Добавить();
	Платеж.ДатаПлатежа = ЗаписьОперации.ДатаПолученияСтатуса;
	Платеж.Объект = ЗаписьОперации.ОбъектУчета;
	СуммаПлатежа = ЗаписьОперации.СуммаОперации; 
	
	Если тОстатки.Количество() > 0 Тогда
		
		строкаОстатки = тОстатки[0];
		
		Для Каждого Элемент Из ПорядокГашенияПоУмолчанию Цикл
			Если ЗначениеЗаполнено(строкаОстатки[Элемент]) Тогда
				Платеж[Элемент] = мин(СуммаПлатежа, строкаОстатки[Элемент]);    
				СуммаПлатежа = СуммаПлатежа - Платеж[Элемент];
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если СуммаПлатежа > 0 Тогда
		Платеж.Составляющая8 = СуммаПлатежа;
	КонецЕсли;	
	
	Документ.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат Документ.Ссылка;
КонецФункции

Функция СоздатьДокументНачисленияЗагрузкаЗадолженности(ЗаписьОперации) Экспорт
	Документ = Документы.ЗагрузкаЗадолженности.СоздатьДокумент();
	Документ.Автор = ПараметрыСеанса.ТекущийПользователь;
	Документ.Организация = ПараметрыСеанса.ТекущийПользователь.Организация;
	Документ.Комментарий = ЗаписьОперации.Транзакция;
	Документ.Дата = ТекущаяДатаСеанса();
	Начисление = Документ.Объекты.Добавить();
	Начисление.ДатаЗадолженности = ЗаписьОперации.ДатаПолученияСтатуса;
	Начисление.Объект = ЗаписьОперации.ОбъектУчета;
	Начисление.ОсновнойДолг = ЗаписьОперации.СуммаОперации;
	Документ.Записать(РежимЗаписиДокумента.Проведение);	
	Возврат Документ.Ссылка;
КонецФункции

Функция СоздатьДокументОплатыПоступлениеПлатежа(ЗаписьОперации,Стадия) Экспорт
	Документ = Документы.ПоступлениеПлатежа.СоздатьДокумент();
	Документ.Автор = ПараметрыСеанса.ТекущийПользователь;
	Документ.Комментарий = ЗаписьОперации.Транзакция;
	Документ.Дата = ТекущаяДатаСеанса();
	Документ.ДатаПлатежа = ЗаписьОперации.ДатаПолученияСтатуса;
	Документ.Займ = ЗаписьОперации.ОбъектУчета;
	Документ.ВидПлательщика = Перечисления.ВидыПлательщика.Должник;
	Документ.Плательщик = ЗаписьОперации.Плательщик;
	Документ.СуммаПлатежа = ЗаписьОперации.СуммаОперации;
	Документ.ВнешнийID = ЗаписьОперации.Транзакция;
	Если Стадия = Перечисления.СтадииЗадолженности.Судебная Тогда 
		Документ.РаспределитьПоСудебнымРешениям();
	Иначе
		Документ.РаспределитьПоВнесудебке();
	КонецЕсли;
	
	Документ.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат Документ.Ссылка; 

КонецФункции

Функция СоздатьДокументНачисленияНачислениеЗадолженностиВнесудебка(ЗаписьОперации) Экспорт
	Документ = Документы.НачислениеЗадолженностиВнесудебка.СоздатьДокумент();
	Документ.Автор = ПараметрыСеанса.ТекущийПользователь;
	Документ.Организация = ПараметрыСеанса.ТекущийПользователь.Организация;
	Документ.Комментарий = ЗаписьОперации.Транзакция;
	Документ.Дата = ТекущаяДатаСеанса();
	Начисление = Документ.Объекты.Добавить();
	Начисление.ДатаЗадолженности = ЗаписьОперации.ДатаПолученияСтатуса;
	Начисление.Объект = ЗаписьОперации.ОбъектУчета;
	Начисление.ОсновнойДолг = ЗаписьОперации.СуммаОперации;
	Документ.Записать(РежимЗаписиДокумента.Проведение);
	Возврат Документ.Ссылка;

КонецФункции

Функция СоздатьДокументОплатыЗагрурзкаИсторииПлатежей(ЗаписьОперации)Экспорт
	Документ = Документы.ЗагрузкаИсторииПлатежей.СоздатьДокумент();
	Документ.Автор = ПараметрыСеанса.ТекущийПользователь;
	Документ.Организация = ПараметрыСеанса.ТекущийПользователь.Организация;
	Документ.Комментарий = ЗаписьОперации.Транзакция;
	Документ.Дата = ТекущаяДатаСеанса();
	Платеж = Документ.Объекты.Добавить();
	Платеж.ДатаПлатежа = ЗаписьОперации.ДатаПолученияСтатуса;
	Платеж.Объект = ЗаписьОперации.ОбъектУчета;
	Платеж.СуммаВВалютеПлатежа = ЗаписьОперации.СуммаОперации;
	Документ.Записать(РежимЗаписиДокумента.Проведение);
	Возврат Документ.Ссылка;

КонецФункции

Функция СоздатьДокументНачисленияДоговорМикрозайма(ЗаписьОперации)Экспорт
	
	//Договор.ДатаВыдачиЗайма = ОбъектыСервер.ПолучитьЗначениеСвойства(ДОСсылка,"0063     ");
	//Договор.ДатаДоговора = ОбъектыСервер.ПолучитьЗначениеСвойства(ДОСсылка,"0061     ");
	//Договор.ДатаПогашения = ОбъектыСервер.ПолучитьЗначениеСвойства(ДОСсылка,"0079     ");

	//Договор.СуммаВыданногоЗайма = ОбъектыСервер.ПолучитьЗначениеСвойства(ДОСсылка,"0062     ");
	//Договор.ПроцентнаяСтавка = ОбъектыСервер.ПолучитьЗначениеСвойства(ДОСсылка,"0064     ");
	
	ОбъектыСервер.ЗаписатьЗначениеСвойства(ЗаписьОперации.ОбъектУчета,"0052     ",ЗаписьОперации.СуммаОперации);
	Заполнено = ЗаполненыПараметрыДоговора(ЗаписьОперации.ОбъектУчета);
	
	Если Не Заполнено Тогда
		
		ОбъектыСервер.ЗаписатьЗначениеСвойства(ЗаписьОперации.ОбъектУчета,"0051     ",ЗаписьОперации.ДатаОперации);
		ОбъектыСервер.ЗаписатьЗначениеСвойства(ЗаписьОперации.ОбъектУчета,"0051     ",ЗаписьОперации.ДатаОперации);
		ОбъектыСервер.ЗаписатьЗначениеСвойства(ЗаписьОперации.ОбъектУчета,"0103     ",ЗаписьОперации.ДатаОперации + (86400*10));
		ОбъектыСервер.ЗаписатьЗначениеСвойства(ЗаписьОперации.ОбъектУчета,"0117     ",1);
		
	КонецЕсли;
	
	РасчетЗадолженностиМФО_Переопределяемый.СоздатьНаСервере(ЗаписьОперации.ОбъектУчета);
	
	Документ = ВернутьСозданныйДоговорМикрозайма(ЗаписьОперации.ОбъектУчета);
	
	Возврат Документ;

		
КонецФункции

Функция ПолучитьОстаткиЗадолженности(ОбъектУчета,ДатаПлатежа)
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадолженностьПоОбъектамОстатки.Объект КАК Объект,
		|	ЗадолженностьПоОбъектамОстатки.СуммаДООстаток КАК Сумма,
		|	ЗадолженностьПоОбъектамОстатки.ОсновнойДолгДООстаток КАК ОсновнойДолг,
		|	ЗадолженностьПоОбъектамОстатки.ПроцентыДООстаток КАК Проценты,
		|	ЗадолженностьПоОбъектамОстатки.ШтрафыДООстаток КАК Штрафы,
		|	ЗадолженностьПоОбъектамОстатки.ПениДООстаток КАК Пени,
		|	ЗадолженностьПоОбъектамОстатки.Составляющая1ДООстаток КАК Составляющая1,
		|	ЗадолженностьПоОбъектамОстатки.Составляющая2ДООстаток КАК Составляющая2,
		|	ЗадолженностьПоОбъектамОстатки.Составляющая3ДООстаток КАК Составляющая3,
		|	ЗадолженностьПоОбъектамОстатки.Составляющая4ДООстаток КАК Составляющая4,
		|	ЗадолженностьПоОбъектамОстатки.Составляющая5ДООстаток КАК Составляющая5,
		|	ЗадолженностьПоОбъектамОстатки.Составляющая6ДООстаток КАК Составляющая6,
		|	ЗадолженностьПоОбъектамОстатки.Составляющая7ДООстаток КАК Составляющая7,
		|	ЗадолженностьПоОбъектамОстатки.Составляющая8ДООстаток КАК Составляющая8
		|ИЗ
		|	РегистрНакопления.ЗадолженностьПоОбъектам.Остатки(&ТекДата, Объект = &ОбъектУчета) КАК ЗадолженностьПоОбъектамОстатки";
	
	Запрос.УстановитьПараметр("ОбъектУчета", ОбъектУчета);
	Запрос.УстановитьПараметр("ТекДата", ДатаПлатежа);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ВернутьСозданныйДоговорМикрозайма(ОбъектУчета)
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДоговорМикрозайма.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ДоговорМикрозайма КАК ДоговорМикрозайма
		|ГДЕ
		|	ДоговорМикрозайма.ПометкаУдаления = ЛОЖЬ
		|	И ДоговорМикрозайма.Проведен = ИСТИНА
		|	И ДоговорМикрозайма.Займ = &Займ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДоговорМикрозайма.МоментВремени УБЫВ";
	
	Запрос.УстановитьПараметр("Займ", ОбъектУчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат  Документы.ДоговорМикрозайма.ПустаяСсылка();
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Док = Выборка.Ссылка;
		КонецЦикла;	
		Возврат Док;
	КонецЕсли;
КонецФункции


Функция ЗаполненыПараметрыДоговора(ДОСсылка)
	Заполнено = Истина;
	ДатаВыдачиЗайма = ОбъектыСервер.ПолучитьЗначениеСвойства(ДОСсылка,"0051     ");
	ДатаДоговора = ОбъектыСервер.ПолучитьЗначениеСвойства(ДОСсылка,"0051     ");
	ДатаПогашения = ОбъектыСервер.ПолучитьЗначениеСвойства(ДОСсылка,"0103     ");
	
	ПроцентнаяСтавка = ОбъектыСервер.ПолучитьЗначениеСвойства(ДОСсылка,"0117     ");
	
	Если Не ЗначениеЗаполнено(ДатаВыдачиЗайма) ИЛИ Не ЗначениеЗаполнено(ДатаДоговора) ИЛИ Не ЗначениеЗаполнено(ДатаПогашения) ИЛИ Не ЗначениеЗаполнено(ПроцентнаяСтавка) Тогда
		Заполнено = Ложь;
	КонецЕсли;
	
	Возврат Заполнено;

КонецФункции 

Функция ПроверкаСогласияНаАвтосписание(СсылкаОбъектУчета) Экспорт
	НЗ = РегистрыСведений.MandarinСогласиеНаАвтосписание.СоздатьНаборЗаписей();
	НЗ.Отбор.ОбъектУчета.Установить(СсылкаОбъектУчета);
	НЗ.Прочитать();	Согласие = ?(НЗ.Количество()>0,Истина,Ложь);
	Возврат Согласие;
КонецФункции


Процедура АвтосписаниеПоГрафику()Экспорт
	//Вычислить Объекты учета, которые согласны на автосписание, а также у кого есть действ. договор	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	MandarinСогласиеНаАвтосписание.ОбъектУчета КАК ОбъектУчета,
	|	РасчетныеДанные.Значение КАК ДействующийДоговор
	|ИЗ
	|	РегистрСведений.MandarinСогласиеНаАвтосписание КАК MandarinСогласиеНаАвтосписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РасчетныеДанные КАК РасчетныеДанные
	|		ПО MandarinСогласиеНаАвтосписание.ОбъектУчета = РасчетныеДанные.Займ
	|ГДЕ
	|	РасчетныеДанные.Свойство = &Свойство";
	
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.РасчетныеХарактеристики.ДействующийДоговор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗЗапрос = РезультатЗапроса.Выгрузить();
	ТЗЗапрос.Колонки.Добавить("ВарУчета");
	//Проверяем варианту учета, это должно быть ДосудебкаМикрозайм
	Для каждого Согласие из ТЗЗапрос Цикл
		ВарУчета = ОбъектыСервер.ОпределитьВариантУчетаЗадолженностиПоРегиструСтадий(Согласие.ОбъектУчета, ТекущаяДатаСеанса());
		Согласие.ВарУчета = ВарУчета;			
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура("ВарУчета",Перечисления.СтадииЗадолженности.Расчетная);	
	ТЗРез = ТЗЗапрос.Скопировать(ПараметрыОтбора);
		
	//Подтянуть к нему дату и сумму следующего платежа
	ЗаполнитьДатуСуммуПлатежаПоГрафику(ТЗРез);
	
	//Сформировать запрос на автосписание
	ОбработатьМассивАвтосписание(ТЗРез);	
	
КонецПроцедуры

Процедура ЗаполнитьДатуСуммуПлатежаПоГрафику(ТаблицаСогласных) Экспорт
	ТаблицаСогласных.Колонки.Добавить("Дата");
	ТаблицаСогласных.Колонки.Добавить("СуммаПлатежа");
	Для Каждого Микрозайм из ТаблицаСогласных Цикл
		ПлановыйГрафик = Микрозайм.ДействующийДоговор.ГрафикПлатежей;
		Если ЗначениеЗаполнено(ПлановыйГрафик) Тогда
			ПлановыйПлатеж = ПлановыйГрафик.Найти(НачалоДня(ТекущаяДатаСеанса()), "Дата");
			Если ПлановыйПлатеж <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(Микрозайм,ПлановыйПлатеж);		
			КонецЕсли;
			Если не ЗначениеЗаполнено(Микрозайм.СуммаПлатежа) Тогда
				Микрозайм.СуммаПлатежа = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	НулевыеСтроки = ТаблицаСогласных.НайтиСтроки(Новый Структура("СуммаПлатежа",0));
	Для каждого СтрокаТаблицы Из НулевыеСтроки Цикл
		ТаблицаСогласных.Удалить(СтрокаТаблицы);	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсторияПлатежей.Объект КАК Объект
	|ИЗ
	|	РегистрНакопления.ИсторияПлатежей КАК ИсторияПлатежей
	|ГДЕ
	|	ИсторияПлатежей.Объект В(&Объект)
	|	И ТИПЗНАЧЕНИЯ(ИсторияПлатежей.Регистратор.Ссылка) = ТИП(Документ.ЗагрузкаИсторииПлатежей)
	|	И ИсторияПлатежей.Период = &Период";
	
	Запрос.УстановитьПараметр("Объект", ТаблицаСогласных.ВыгрузитьКолонку("ОбъектУчета"));
	Запрос.УстановитьПараметр("Период", НачалоДня(ТекущаяДатаСеанса()));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	мОбъектыФактическиеПлатежи = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Объект");
	
	Для каждого ОбъектФактическиеПлатежи Из мОбъектыФактическиеПлатежи Цикл
		Заплачено = ТаблицаСогласных.НайтиСтроки(Новый Структура("объектУчета", ОбъектФактическиеПлатежи));
		Для каждого СтрокаТаблицы Из Заплачено Цикл	
			ТаблицаСогласных.Удалить(СтрокаТаблицы);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьМассивАвтосписание(ТаблицаАвтосписание) Экспорт 
	Экшн = "pay";
	Действие = Перечисления.Mandarin_Действия.РекуррентныйПлатеж;
	Для Каждого стр из ТаблицаАвтосписание Цикл
		сПараметрыЗапроса = новый Структура;
		
		ОбъектУчета = стр.ДействующийДоговор.Займ;
		Плательщик = стр.ДействующийДоговор.Займ.Должник;
		тзДанныеПлательщиков = бит_Мандарин.ЗаполнитьДанныеПлательщика(ОбъектУчета);
		
		стрДанныеПлательщика = тзДанныеПлательщиков.Найти(Плательщик,"Плательщик");
		
		Если стрДанныеПлательщика = Неопределено тогда
			Продолжить;
		КонецЕсли;
		
		Если не ЗначениеЗаполнено(стрДанныеПлательщика.ТокенКарты) тогда
			Продолжить;
		КонецЕсли;
		
		сПараметрыЗапроса.Вставить("емаил",стрДанныеПлательщика.ЕмаилПлательщика);
		сПараметрыЗапроса.Вставить("телефон",стрДанныеПлательщика.ТелефонПлательщика);
		сПараметрыЗапроса.Вставить("ОбъектУчета",ОбъектУчета);
		сПараметрыЗапроса.Вставить("Плательщик",Плательщик);
		
		сПараметрыЗапроса.Вставить("Action",Экшн);
		сПараметрыЗапроса.Вставить("действие",Действие);
		сПараметрыЗапроса.Вставить("заказ",Строка(Новый УникальныйИдентификатор()));
		сПараметрыЗапроса.Вставить("сумма",строка(Формат(стр.СуммаПлатежа, "ЧЦ=10; ЧДЦ=2")));
		сПараметрыЗапроса.Вставить("оплатитьДо",стр.Дата);
		сПараметрыЗапроса.Вставить("токен",стрДанныеПлательщика.ТокенКарты);
		таргетТранзакция ="";   
		сПараметрыЗапроса.Вставить("транзакция",таргетТранзакция);
		
		
		Ответ = бит_Мандарин.МандаринОбработатьОперацию(сПараметрыЗапроса);
		
		бит_Мандарин.ЗаписатьУспешнуюТранзакцию(Ответ,сПараметрыЗапроса);

		
	КонецЦикла;	
	

КонецПроцедуры

Функция СопоставлениеОпераций(стрОперация)
	
КонецФункции





	




	//	{
	//	"payment": {
	//		"action": "pay",
	//		"orderId": "your_unique_order_id",
	//		"price": "1000.00"
	//	},
	//	"target": {
	//		"rebill": "43913ddc000c4d3990fddbd3980c1725"
	//	},
	//	"customValues": [
	//		{"name": "first parameter to save and show", "value": "p1"},
	//		{"name": "second parameter to save and show", "value": "p2"}
	//	],
	//	"metadata": {
	//		"first_parameter_to_callback_and_not_to_show": "p1",
	//		"second_parameter_to_callback_and_not_to_show": "p2"
	//	},
	//	"urls": {
	//		"callback": "http://...",
	//		"return": "http://..."
	//	}
	//}
	
//	{
//	"payment": {
//		"action": "pay",
//		"orderId": "your_unique_order_id",
//		"price": "1000.00",
//		"orderActualTill": "2020-02-20 12:34:56+00:00"
//	},
//	"customerInfo": {
//		"email": "user@example.com",
//		"phone": "+79001234567"
//	},
//	"customValues": [
//		{"name": "first parameter to save and show", "value": "p1"},
//		{"name": "second parameter to save and show", "value": "p2"}
//	],
//	"metadata": {
//		"first_parameter_to_callback_and_not_to_show": "p1",
//		"second_parameter_to_callback_and_not_to_show": "p2"
//	},
//	"urls": {
//		"callback": "http://...",
//		"return": "http://..."
//	}
//}



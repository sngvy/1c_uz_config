
#Область ОписаниеПеременных

&НаКлиенте
Перем обКонтроллерАТС;

&НаКлиенте
Перем ИнтервалОбновления;

&НаКлиенте
Перем флагПрямойНабор;

&НаКлиенте
Перем Хост;

// Тип - Соответствие
// ключ - строка - свой номер,
// значение - соответствия:
//   Разговоры -
//     ключ - строка - номер телефона,
//     значение - любое значение.
//     Используется для избегания двойного создания событий.
//   Каналы -
//     ключ - строка - имя канала,
//     значение - структура из свойств звонка.
// Используется для записи в историю звонков.
&НаКлиенте
Перем СоотвСвязанныеНомера;

// Тип - Соответствие
//  ключ - строка-номер телефона,
//  значение - структура из трех полей (КонтрагентСсылка, КонтактноеЛицоСсылка, Обновлен).
&НаКлиенте
Перем кэшКонтактов;

// Тип - Соответствие
// ключ - внутренний номер, значение - Строка, имя внутреннего абонента.
&НаКлиенте
Перем СоответствиеНомеровХоста;

&НаКлиенте
Перем фрмВводаНомераПеревода;

&НаКлиенте
Перем фрмОбработкаВызова;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СоотвСвязанныеНомера	= Новый Соответствие;
	кэшКонтактов			= Новый Соответствие;
	
	фрмВводаНомераПеревода	= Неопределено;
	фрмОбработкаВызова		= Неопределено;
	
	ОбновитьДоступность();
	
	РежимВнеОфиса = бит_АТССервер.ПолучитьФлагРежимВнеОфиса();
	
#Если ВебКлиент Тогда
	ИспользоватьВебСервис = Истина;
#КонецЕсли
	
	ПодключитьАТС(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Если Подключен Тогда
		Отключить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗвонкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СсылкаТекущ = Неопределено;
	Если Поле.Имя = "ЗвонкиКонтрагент" Тогда
		СсылкаТекущ = Элементы.Звонки.ТекущиеДанные.Контрагент;
	ИначеЕсли Поле.Имя = "ЗвонкиКонтактноеЛицо" Тогда
		СсылкаТекущ = Элементы.Звонки.ТекущиеДанные.КонтактноеЛицо;
	КонецЕсли;
	Если ЗначениеЗаполнено(СсылкаТекущ) Тогда
		бит_ТелефонияКлиентПереопределяемый.ПоказЗначение(СсылкаТекущ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗвонкиПриАктивизацииСтроки(Элемент)
	ОбновитьРеквизитФормыМикрофонОтключен();
КонецПроцедуры

&НаКлиенте
Процедура ИсторияЗвонковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	НачатьЗвонок(Элемент.ТекущиеДанные.Номер);
КонецПроцедуры

&НаКлиенте
Процедура ИзбранноеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	НомерИзбр = Элементы.Избранное.ТекущиеДанные.Номер;
	КодСтатусаИзбр = Элементы.Избранное.ТекущиеДанные.ИндексКартинкиСтатуса;
	ОтслеживатьСтатусИзбр = Элементы.Избранное.ТекущиеДанные.ОтслеживатьСтатус;
	
	Если Элементы.Звонки.ТекущиеДанные <> Неопределено Тогда
		Если ОтслеживатьСтатусИзбр И КодСтатусаИзбр <> 1 Тогда // статус 1 - свободен
			бит_ТелефонияКлиент.ВывестиСообщение("Абонент не доступен для перевода звонка.");
		Иначе
			УсловныйПереводЗавершение(НомерИзбр);
		КонецЕсли;
	Иначе
		Если ОтслеживатьСтатусИзбр И КодСтатусаИзбр <> 1 Тогда // статус 1 - свободен
			бит_ТелефонияКлиент.ВывестиСообщение("Абонент не доступен для звонка."); 
		Иначе
			НачатьЗвонок(НомерИзбр);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГруппаПанельНабораПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.Имя = "ГруппаИсторияЗвонков" Тогда
		датаТекущНачалоДня = НачалоДня(ТекущаяДата());
		Если датаТекущНачалоДня <> ТекущееНачалоДня Тогда
			ЗаполнитьИсториюЗвонков();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Номер = ВыбранноеЗначение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Если Источник <> ИмяИсточникаСобытий() Тогда
		Возврат;
	КонецЕсли;
	
	Если Событие = "Ошибка" Тогда
		
		бит_АТСКлиент.ОбработкаОшибки(ТекущаяАТС, Источник, "КомпонентаУправлениеАТС_Ошибка", Данные, ЭтаФорма);
		
		Если обКонтроллерАТС.IsConnected Тогда

			ЗапуститьТаймерОбновления(ИнтервалОбновления);

		Иначе
			
			ПроверкаВосстановленияПодключения();
			
		КонецЕсли;

	ИначеЕсли Событие = "ОбновлениеНомера" Тогда
		
		ОбработкаОбновлениеНомера(бит_ТелефонияКлиентСервер.ЗаполнитьСоответствиеИзXML(Данные));
		
		ЗапуститьТаймерОбновления(ИнтервалОбновления);
		
	ИначеЕсли Событие = "ЗагрузкаUrl" Тогда
		
		ИсторияРазборПропущенныхЗвонков(Данные);
		
	ИначеЕсли Событие = "УправлениеПитанием" Тогда
		
		Если Данные = "СпящийРежимВход" Тогда
			Отключить();
		ИначеЕсли Данные = "СпящийРежимВыход" Тогда
			ПодключитьОбработчикОжидания("Подключить", 5, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "БитфонМониторБИТАТС_ПодключениеВнешнейКомпоненты" Тогда
		
		обКонтроллерАТС = Параметр.Результат;
		Если обКонтроллерАТС <> Неопределено Тогда
			обКонтроллерАТС.SetMessageSourceName( ИмяИсточникаСобытий() );
			Подключить();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "БитфонМонитор_ПроверкаАдресаПодключения" Тогда
		
		Если Параметр.Результат = КодВозвратаДиалога.Да Тогда
			бит_АТССервер.УстановитьРазрешенныйАдрес(Параметр.ПараметрОповещения);
			ПодключитьРазрешенныйАдрес();
		Иначе
			Отключить();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "БитфонМонитор_НачатьЗвонок" Тогда
		
		НачатьЗвонок(Параметр);
		
	ИначеЕсли ИмяСобытия = "БитфонМониторБИТАТС_УсловныйПеревод" Тогда
		
		Если ЗначениеЗаполнено(Параметр.Результат) Тогда
			стрНомерПеревода = Параметр.Результат;
			УсловныйПереводЗавершение(стрНомерПеревода);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "БитфонМонитор_ВоспроизвестиЗаписьРазговора" Тогда
		
		ВоспроизвестиЗаписьРазговора(Параметр);
		
	ИначеЕсли ИмяСобытия = "БитфонМониторПанель_ОбновлениеНастроек" Тогда
		
		Если Подключен Тогда
		
			ТекущаяАТСНов					= бит_АТССервер.ПолучитьАТС();
			НомерСвязанногоТелефонаНов 		= бит_АТССервер.ПолучитьНомерСвязанногоТелефона();
			НомерСвязанногоТелефонаДопНов	= бит_АТССервер.ПолучитьНомерСвязанногоТелефонаДоп();
			ЗагрузкаЗвонковНов				= бит_АТССервер.ПолучитьФлагЗагрузкаЗвонков();
			
			флагПрямойНабор				= бит_АТССервер.ПолучитьФлагИспользоватьПрямойНабор();

			Если (ТекущаяАТС <> ТекущаяАТСНов)
				ИЛИ (НомерСвязанногоТелефона <> НомерСвязанногоТелефонаНов)
				ИЛИ (НомерСвязанногоТелефонаДоп <> НомерСвязанногоТелефонаДопНов)
				Тогда
					Отключить();
					Подключить();
			КонецЕсли;
			
			Если ЗагрузкаЗвонков <> ЗагрузкаЗвонковНов Тогда
				ЗагрузкаЗвонков = ЗагрузкаЗвонковНов;
				Если ЗагрузкаЗвонков = Истина И Подключен Тогда
					ИсторияЗагрузкаПропущенныхЗвонков();
				Иначе
					ОстановитьТаймерЗагрузкиИсторииПропущенныхЗвонков();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "БитФон_ОбновитьИзбранное" Тогда
		
		ИзбранноеОбновитьКлиент();
		Если Параметр <> Неопределено Тогда
			массСтрок = Избранное.НайтиСтроки(Параметр);
			Если массСтрок.Количество() > 0 Тогда
				Элементы.Избранное.ТекущаяСтрока = массСтрок[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "БитфонМониторБИТАТС_УдалитьИзбранное" Тогда
		
		Если Параметр.Результат = КодВозвратаДиалога.Да Тогда
			ИзбранноеСсылка = Параметр.ПараметрОповещения;
			бит_ТелефонияСервер.ИзбранноеУдалить(ИзбранноеСсылка);
			Оповестить("БитФон_ОбновитьИзбранное");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодключитьАТС(Команда)
	Если ИспользоватьВебСервис Тогда
		Подключить();
	Иначе
		ПодключитьВК();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьАТС(Команда)
	Отключить();
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	бит_АТСКлиент.ОткрытьФормуНастроек(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВнеОфиса(Команда)
	РежимВнеОфиса = бит_АТССервер.ПолучитьФлагРежимВнеОфиса();
	Если РежимВнеОфиса Тогда
		Если УстановитьПереадресациюВходящихНаАТС(НомерСвязанногоТелефона, Ложь) Тогда
			УстановитьРежимDND(НомерСвязанногоТелефона, Ложь);
			РежимВнеОфиса = Ложь;
		КонецЕсли;
		Если УстановитьПереадресациюВходящихНаАТС(НомерСвязанногоТелефонаДоп, Ложь) Тогда
			УстановитьРежимDND(НомерСвязанногоТелефонаДоп, Ложь);
			РежимВнеОфиса = Ложь;
		КонецЕсли;
	Иначе
		стрНомерВнеОфиса = бит_АТССервер.ПолучитьНомерВнеОфиса();
		Если НЕ ЗначениеЗаполнено(стрНомерВнеОфиса) Тогда
			бит_ТелефонияКлиент.ВывестиСообщение("Не задано значение внешнего номера телефона для режима 'Вне офиса' в настройках");
			Возврат;
		КонецЕсли;
		Если УстановитьПереадресациюВходящихНаАТС(НомерСвязанногоТелефона, Истина) Тогда
			УстановитьРежимDND(НомерСвязанногоТелефона, Истина);
			РежимВнеОфиса = Истина;
		КонецЕсли;
		Если УстановитьПереадресациюВходящихНаАТС(НомерСвязанногоТелефонаДоп, Истина) Тогда
			УстановитьРежимDND(НомерСвязанногоТелефонаДоп, Истина);
			РежимВнеОфиса = Истина;
		КонецЕсли;
	КонецЕсли;
	бит_АТССервер.УстановитьФлагРежимВнеОфиса(РежимВнеОфиса);
	РежимВнеОфиса = бит_АТССервер.ПолучитьФлагРежимВнеОфиса();
	//
	Если РежимВнеОфиса Тогда
		ЗапуститьТаймерЗагрузкиИсторииПропущенныхЗвонков();
	Иначе
		ЗагрузкаЗвонков = бит_АТССервер.ПолучитьФлагЗагрузкаЗвонков();
		Если Не ЗагрузкаЗвонков Тогда
			ОстановитьТаймерЗагрузкиИсторииПропущенныхЗвонков();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Кн1(Команда)
	КодКнопки = Прав(Команда.Имя, 1);
	ДТМФКоманда(КодКнопки);
КонецПроцедуры

&НаКлиенте
Процедура КНЗВ(Команда)
	ДТМФКоманда("*");
КонецПроцедуры

&НаКлиенте
Процедура КНРеш(Команда)
	ДТМФКоманда("#");
КонецПроцедуры

&НаКлиенте
Процедура КнПереводЗвонка(Команда)
	
	Если Элементы.Звонки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	фрмВводаНомераПеревода = бит_ТелефонияКлиент.ПолучитьФормуВводаНомера(ЭтаФорма, Истина, обКонтроллерАТС, Ложь, НомерСвязанногоТелефона);
	бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуСБлокировкойВладельца(фрмВводаНомераПеревода, "БитфонМониторБИТАТС_УсловныйПеревод");
	
КонецПроцедуры

&НаКлиенте
Процедура КнПерехватЗвонка(Команда)
	Попытка
		ТаймаутЗвонка = бит_АТСКлиент.ПолучитьТаймаутЗвонка();
		ЗаголовокАвтоподнятия = бит_АТССервер.ПолучитьФлагЗаголовокАвтоподнятия();
		Состояние("Перехват звонка со связанного телефона " + СвязанныйНомер + "...");
		Если ИспользоватьВебСервис Тогда
			бит_АТССервер.ВебСервисПерехватЗвонка(ТекущаяАТС, ВебСервисИдКлиента, СвязанныйНомер, ЗаголовокАвтоподнятия, ТаймаутЗвонка);
		Иначе
			обКонтроллерАТС.Pickup(СвязанныйНомер, ЗаголовокАвтоподнятия, ТаймаутЗвонка);
		КонецЕсли;
	Исключение
		бит_ТелефонияКлиент.ВывестиСообщение( ОписаниеОшибки(), ЭтаФорма );
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура КнОМик(Команда)
	Если Элементы.Звонки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоотвКаналы = ПолучитьКаналыСвязанногоНомера(Элементы.Звонки.ТекущиеДанные.СвойНомер);
	Если СоотвКаналы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	стрТекущКанал = Элементы.Звонки.ТекущиеДанные.Канал;
	соотвКанал = СоотвКаналы.Получить(стрТекущКанал);
	Если соотвКанал <> Неопределено Тогда
		Попытка
			флагОтклМикрофона = НЕ соотвКанал.МикрофонОтключен;
			Если ИспользоватьВебСервис Тогда
				бит_АТССервер.ВебСервисОтключениеЗвука(ТекущаяАТС, ВебСервисИдКлиента, стрТекущКанал, флагОтклМикрофона);
			Иначе
				обКонтроллерАТС.MuteAudio(стрТекущКанал, флагОтклМикрофона);
			КонецЕсли;
			соотвКанал.МикрофонОтключен = флагОтклМикрофона;
			ОбновитьРеквизитФормыМикрофонОтключен();
		Исключение
			бит_ТелефонияКлиент.ВывестиСообщение( ОписаниеОшибки(), ЭтаФорма );
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьSMS(Команда)
	стрНомерСМС = "";
	текущЗвонок = ПолучитьТекущийЗвонок();
	Если текущЗвонок <> Неопределено Тогда
		стрНомерСМС = текущЗвонок.Соединен;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(стрНомерСМС) И ЗначениеЗаполнено(Номер) Тогда
		стрНомерСМС = Номер;
	КонецЕсли;
	бит_ТелефонияКлиент.ОтправитьSMS(стрНомерСМС);
КонецПроцедуры

&НаКлиенте
Процедура НачатьРазговорКл(Команда) ЭКСПОРТ
	
	Если НЕ ЗначениеЗаполнено(Номер) Тогда
		Возврат;
	КонецЕсли;
	
	Если Звонки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьЗвонок(Номер);
	Номер = "";
	
КонецПроцедуры

&НаКлиенте
Процедура КнКонтакты(Команда)
	бит_ТелефонияКлиент.ОткрытьФормуВыбораНомера(ЭтаФорма, ТекущаяАТС);
КонецПроцедуры

&НаКлиенте
Процедура КнОтбой(Команда)
	текущЗвонок = ПолучитьТекущийЗвонок();
	Если текущЗвонок <> Неопределено Тогда
		стрКанал = текущЗвонок.Канал;
		Попытка
			Если ИспользоватьВебСервис Тогда
				бит_АТССервер.ВебСервисОтбойРазговора(ТекущаяАТС, ВебСервисИдКлиента, стрКанал);
			Иначе
				обКонтроллерАТС.Hangup(стрКанал);
			КонецЕсли;
		Исключение
			бит_ТелефонияКлиент.ВывестиСообщение( ОписаниеОшибки(), ЭтаФорма );
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВключитьDND(Команда)
	Если ЭтаФорма.ТекущийЭлемент.Имя = "СостояниеСвязанногоТелефона" Тогда
		УстановитьРежимDND(НомерСвязанногоТелефона, Истина);
	ИначеЕсли ЭтаФорма.ТекущийЭлемент.Имя = "СостояниеСвязанногоТелефонаДоп" Тогда
		УстановитьРежимDND(НомерСвязанногоТелефонаДоп, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьDND(Команда)
	Если ЭтаФорма.ТекущийЭлемент.Имя = "СостояниеСвязанногоТелефона" Тогда
		УстановитьРежимDND(НомерСвязанногоТелефона, Ложь);
	ИначеЕсли ЭтаФорма.ТекущийЭлемент.Имя = "СостояниеСвязанногоТелефонаДоп" Тогда
		УстановитьРежимDND(НомерСвязанногоТелефонаДоп, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсторияЗвонковЗаписьДетально(Команда)
	текущЗапись = Элементы.ИсторияЗвонков.ТекущиеДанные;
	Если текущЗапись <> Неопределено Тогда
		отбор = бит_ТелефонияКлиент.СоздатьСтруктуруПараметровЗвонка();
		ЗаполнитьЗначенияСвойств(отбор, текущЗапись);
		бит_ТелефонияКлиент.ОткрытьФормуПросмотраЗвонка(отбор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсторияЗвонковОтправитьSMS(Команда)
	текущЗапись = Элементы.ИсторияЗвонков.ТекущиеДанные;
	Если текущЗапись <> Неопределено Тогда
		бит_ТелефонияКлиент.ОтправитьSMS(текущЗапись.Номер);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсторияЗвонковОткрытьЗаписьРазговора(Команда)
	текущЗапись = Элементы.ИсторияЗвонков.ТекущиеДанные;
	Если текущЗапись <> Неопределено Тогда
		стрПутьКЗаписи = текущЗапись.ЗаписьРазговора;
		бит_БитфонКлиент.ВоспроизвестиЗаписьРазговора(стрПутьКЗаписи);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсторияЗвонковПрослушатьНаТелефоне(Команда)
	текущЗапись = Элементы.ИсторияЗвонков.ТекущиеДанные;
	Если текущЗапись <> Неопределено Тогда
		ВоспроизвестиЗаписьРазговора(текущЗапись.ЗаписьРазговора);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсюИсторию(Команда)
	бит_ТелефонияКлиент.ОткрытьФормуОтчетаИсторииЗвонков(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура АналитикаАТС(Команда)
	бит_АТСКлиент.ОткрытьАналитикуБИТАТС(ТекущаяАТС);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// - панель Избранного
&НаКлиенте
Процедура ИзбранноеСоздать(Команда)
	бит_ТелефонияКлиент.ИзбранноеСоздать("БитФон_ОбновитьИзбранное");
КонецПроцедуры

&НаКлиенте
Процедура ИзбранноеСкопировать(Команда)
	бит_ТелефонияКлиент.ИзбранноеСкопировать(ЭтаФорма, "БитФон_ОбновитьИзбранное");
КонецПроцедуры

&НаКлиенте
Процедура ИзбранноеИзменить(Команда)
	бит_ТелефонияКлиент.ИзбранноеИзменить(ЭтаФорма, "БитФон_ОбновитьИзбранное");
КонецПроцедуры

&НаКлиенте
Процедура ИзбранноеУдалить(Команда)
	бит_ТелефонияКлиент.ИзбранноеУдалить(ЭтаФорма, "БитфонМониторБИТАТС_УдалитьИзбранное");
КонецПроцедуры

&НаКлиенте
Процедура ИзбранноеОбновить(Команда)
	ИзбранноеОбновитьКлиент();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

///////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура ДобавитьСвязанныйНомер(стрСвязанныйНомер)
	информацияСвязанногоНомера = Новый Соответствие;
	информацияСвязанногоНомера.Вставить("Разговоры", Новый Соответствие);
	информацияСвязанногоНомера.Вставить("Каналы", Новый Соответствие);
	СоотвСвязанныеНомера.Вставить(стрСвязанныйНомер, информацияСвязанногоНомера);
	//
	Элементы.СвязанныйНомер.СписокВыбора.Добавить(стрСвязанныйНомер);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИнформациюСвязанногоНомераВнутр(стрСвязанныйНомер, стрТипИнформации)
	информацияСвязанногоНомера = СоотвСвязанныеНомера.Получить(стрСвязанныйНомер);
	Если информацияСвязанногоНомера = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат информацияСвязанногоНомера.Получить(стрТипИнформации);
КонецФункции

&НаКлиенте
Функция ПолучитьКаналыСвязанногоНомера(стрСвязанныйНомер)
	Возврат ПолучитьИнформациюСвязанногоНомераВнутр(стрСвязанныйНомер, "Каналы");
КонецФункции

&НаКлиенте
Функция ПолучитьРазговорыСвязанногоНомера(стрСвязанныйНомер)
	Возврат ПолучитьИнформациюСвязанногоНомераВнутр(стрСвязанныйНомер, "Разговоры");
КонецФункции

///////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Функция ИмяИсточникаСобытий()
	Возврат "БИТ.МониторАТС";
КонецФункции

&НаКлиенте
Процедура ОбновитьДоступность()
	Элементы.ПодключитьАТС.Доступность		= НЕ Подключен;
	Элементы.ОтключитьАТС.Доступность		= Подключен;
	Элементы.ГруппаПанельНабора.Доступность	= Подключен;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовки()
	
	стрЗаголовокФормы = "БИТ.Phone (монитор БИТ.АТС)";
	стрСписокОтслеживаемыхНомеров = "";
	
	Элементы.СостояниеСвязанногоТелефона.Заголовок = "Состояние телефона";
	
	Если ЗначениеЗаполнено(НомерСвязанногоТелефона) Тогда
		стрСписокОтслеживаемыхНомеров = НомерСвязанногоТелефона;
		Элементы.СостояниеСвязанногоТелефона.Заголовок = "Состояние номера " + НомерСвязанногоТелефона;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерСвязанногоТелефонаДоп) Тогда
		Если ЗначениеЗаполнено(стрСписокОтслеживаемыхНомеров) Тогда
			стрСписокОтслеживаемыхНомеров = стрСписокОтслеживаемыхНомеров + ", ";
		КонецЕсли;
		стрСписокОтслеживаемыхНомеров = стрСписокОтслеживаемыхНомеров + НомерСвязанногоТелефонаДоп;
		//
		Элементы.СостояниеСвязанногоТелефонаДоп.Заголовок = "Состояние номера " + НомерСвязанногоТелефонаДоп;
		Элементы.СостояниеСвязанногоТелефонаДоп.Видимость = Истина;
		Элементы.ЗвонкиСвойНомер.Видимость = Истина;
		Элементы.СвязанныйНомер.Видимость = Истина;
	Иначе
		Элементы.СостояниеСвязанногоТелефонаДоп.Видимость = Ложь;
		Элементы.ЗвонкиСвойНомер.Видимость = Ложь;
		Элементы.СвязанныйНомер.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(стрСписокОтслеживаемыхНомеров) Тогда
		стрЗаголовокФормы = стрЗаголовокФормы + " - " + стрСписокОтслеживаемыхНомеров;
	КонецЕсли;
	
	Заголовок = стрЗаголовокФормы;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьВК()
	Если обКонтроллерАТС <> Неопределено Тогда
		обКонтроллерАТС = Неопределено;
	КонецЕсли;
	бит_АТСКлиент.ПодключениеКомпонентыУправлениеАТС("БитфонМониторБИТАТС_ПодключениеВнешнейКомпоненты");
КонецПроцедуры

&НаКлиенте
Процедура Подключить()
	
	ТекущаяАТС = бит_АТССервер.ПолучитьАТС();
	
	Если НЕ ЗначениеЗаполнено(ТекущаяАТС) Тогда
		бит_ТелефонияКлиент.ВывестиСообщение("Не задана АТС для подключения в настройках", ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	стрРазрешенныйАдрес = бит_АТССервер.ПолучитьРазрешенныйАдрес();
	стрАдресПодключения = бит_АТССервер.ПолучитьПараметрыПодключенияАТС(ТекущаяАТС).Адрес;
	Если стрРазрешенныйАдрес = стрАдресПодключения Тогда
		ПодключитьРазрешенныйАдрес();
	Иначе
		стрЗапросНовогоПодключения = "Разрешить подключение к БИТ.АТС по адресу '" + стрАдресПодключения + "'?";
		бит_ТелефонияКлиентПереопределяемый.ПоказВопрос(стрЗапросНовогоПодключения,
			РежимДиалогаВопрос.ДаНет, , , , "БитфонМонитор_ПроверкаАдресаПодключения", стрАдресПодключения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьРазрешенныйАдрес()
	ПоказатьОповещениеПользователя("БИТ.Phone",,"Подключение к АТС...",БиблиотекаКартинок.NC_Подсистема_бтБИТАТС);
	ПодключитьОбработчикОжидания("ПодключитьРазрешенныйАдресЗавершение", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьРазрешенныйАдресЗавершение()
		
	Попытка
		
		НомерСвязанногоТелефона = бит_АТССервер.ПолучитьНомерСвязанногоТелефона();
		Если НЕ ЗначениеЗаполнено(НомерСвязанногоТелефона) Тогда
			бит_ТелефонияКлиент.ВывестиСообщение("Не задан номер связанного телефона в настройках", ЭтаФорма);
			Возврат;
		КонецЕсли;
		ДобавитьСвязанныйНомер(НомерСвязанногоТелефона);
		//
		НомерСвязанногоТелефонаДоп = бит_АТССервер.ПолучитьНомерСвязанногоТелефонаДоп();
		Если ЗначениеЗаполнено(НомерСвязанногоТелефонаДоп) Тогда
			ДобавитьСвязанныйНомер(НомерСвязанногоТелефонаДоп);
		КонецЕсли;
		//
		СвязанныйНомер = НомерСвязанногоТелефона;
		ОбновитьЗаголовки();
		
		ИнтервалОбновления = бит_АТССервер.ПолучитьИнтервалОбновления();
		Если ИнтервалОбновления = 0 Тогда
			бит_ТелефонияКлиент.ВывестиСообщение("Не задан интервал обновления в настройках, принимается 5 сек", ЭтаФорма);
			ИнтервалОбновления = 5;
		КонецЕсли;
		
		флагПрямойНабор = бит_АТССервер.ПолучитьФлагИспользоватьПрямойНабор();
		
		СписокНомеровХоста = "";
		Хост = бит_АТССервер.ПолучитьПараметрыАТС(ТекущаяАТС, СписокНомеровХоста, СоответствиеНомеровХоста);
		
		Если ИспользоватьВебСервис Тогда
			ВебСервисИдКлиента = бит_АТССервер.ВебСервисОткрытьСоединение(ТекущаяАТС, Хост.Адрес, Хост.Пользователь, Хост.Пароль, СписокНомеровХоста, Истина);
			Подключен = Истина;
		Иначе
			бит_АТСКлиент.УстановитьПараметрыПроверкиЛицензии(обКонтроллерАТС, Истина);
			
			обКонтроллерАТС.Connect(Хост.Адрес, Хост.Пользователь, Хост.Пароль, СписокНомеровХоста);
			
			Подключен = обКонтроллерАТС.IsConnected;
		КонецЕсли;
		
		ВосстановлениеПодключения = НЕ Подключен;
	
		ОбновитьДоступность();
		
		ЗапуститьТаймерОбновления(1);
		
		ЗагрузкаЗвонков = бит_АТССервер.ПолучитьФлагЗагрузкаЗвонков();
		Если ЗагрузкаЗвонков = Истина Тогда
			ИсторияЗагрузкаПропущенныхЗвонков();
		КонецЕсли;
		
	Исключение
		бит_ТелефонияКлиент.ВывестиСообщение( "Ошибка подключения к АТС '" + Строка(ТекущаяАТС) + "'", ЭтаФорма );
		Если ИспользоватьВебСервис Тогда
			ОбработкаОшибкиВебСервиса(ОписаниеОшибки());
		Иначе
			бит_ТелефонияКлиент.ВывестиСообщение( ОписаниеОшибки(), ЭтаФорма );
		КонецЕсли;
	КонецПопытки;
	
	ЗаполнитьИсториюЗвонков();
	
	ИзбранноеОбновитьКлиент();
	
	Если ЗначениеЗаполнено(ПриПодключенииДействие) Тогда
		Оповестить(ПриПодключенииДействие, ПриПодключенииПараметр);
		ПриПодключенииДействие = "";
		ПриПодключенииПараметр = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отключить()
	
	Попытка
		
		ОстановитьТаймерОбновления();
		
		Если РежимВнеОфиса Тогда
			ОстановитьТаймерЗагрузкиИсторииПропущенныхЗвонков();
		КонецЕсли;
		
		Если ИспользоватьВебСервис Тогда
			
			Если Подключен Тогда
				бит_АТССервер.ВебСервисЗакрытьСоединение(ТекущаяАТС, ВебСервисИдКлиента);
			КонецЕсли;
			
			ВебСервисИдКлиента = 0;
			
			Подключен = Ложь;
			
		Иначе
			
			обКонтроллерАТС.Disconnect();
			
			Подключен = обКонтроллерАТС.IsConnected;
			
		КонецЕсли;
		
	Исключение
		
		бит_ТелефонияКлиент.ВывестиСообщение( "Ошибка отключения от АТС", ЭтаФорма );
		бит_ТелефонияКлиент.ВывестиСообщение( ОписаниеОшибки(), ЭтаФорма );
		Подключен = Ложь;
		
	КонецПопытки;
	
	СостояниеСвязанногоТелефона = "";
	СостояниеСвязанногоТелефонаДоп = "";
	
	ОбновитьДоступность();
	
	НомерСвязанногоТелефона = "";
	НомерСвязанногоТелефонаДоп = "";
	Элементы.СвязанныйНомер.СписокВыбора.Очистить();
	ОбновитьЗаголовки();
	
	ТекущаяАТС = ПредопределенноеЗначение("Справочник.бит_ТелефонныеСтанцииБитАТС.ПустаяСсылка");
	
	Хост = Неопределено;
	
	СоответствиеНомеровХоста = Неопределено;
	
	кэшКонтактов.Очистить();
	
	Звонки.Очистить();
	
	ИсторияЗвонков.Очистить();
	
	Избранное.Очистить();
	
	СоотвСвязанныеНомера.Очистить();
	
	Элементы.ГруппаПанельНабора.ТекущаяСтраница = Элементы.ГруппаНаборНомера;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьТаймерОбновления(Таймаут)
	ПодключитьОбработчикОжидания("ОбновитьСтатусСвязанныхНомеров", Таймаут, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОстановитьТаймерОбновления()
	ОтключитьОбработчикОжидания("ОбновитьСтатусСвязанныхНомеров");
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусСвязанногоНомера(соотвСтатусыНомеров, стрСвязанныйНомерТелефона, стрТекущийАктивныйСвойНомер, стрСтатусНомераВозвращ)
	
	Если НЕ ЗначениеЗаполнено(стрСвязанныйНомерТелефона) Тогда
		Возврат;
	КонецЕсли;

	обЭкстенш = соотвСтатусыНомеров.Получить("Extension_" + стрСвязанныйНомерТелефона);
	Если обЭкстенш = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	стрСоединениеВПроцессе = "соединение...";
	
	СтатусНомера = Число(обЭкстенш.Получить("status"));
	
	стрСтатусНомераВозвращ = бит_АТСКлиент.ПолучитьОписаниеСтатуса(СтатусНомера);
	
	стрСтатусНомераВозвращ = стрСтатусНомераВозвращ + " (" + Строка(СтатусНомера) + ")";
	
	массЗвонки = Новый Массив;
	
	списокАккаунтовЭкстенш = обЭкстенш.Получить("SIPLogins");
	
	колвоАккаунтовНомера = списокАккаунтовЭкстенш.Количество();
	
	Для йАккаунт=0 По (колвоАккаунтовНомера-1) Цикл
		//
		обАккаунтЭкстенш = списокАккаунтовЭкстенш[йАккаунт];
		//
		СипУстройствоНомера	= обАккаунтЭкстенш.Получить("value");
		//
		// статус - входящий звонок, разговаривает или удержание
		списокЗвонковАккаунта = обАккаунтЭкстенш.Получить("Channels");
		колвоЗвонковАккаунта = списокЗвонковАккаунта.Количество();
		//
		Для йЗвонокАккаунта=0 По (колвоЗвонковАккаунта-1) Цикл
			//
			обЗвонокАккаунта = списокЗвонковАккаунта[йЗвонокАккаунта];

			ВходящийЗвонок			= Булево(Число(обЗвонокАккаунта.Получить("Incoming")));

			НаправлениеЗвонка = ? ( ВходящийЗвонок, "входящий", "исходящий");
			
			ВнешнийВызов			= Ложь;
			СоединениеНомера		= обЗвонокАккаунта.Получить("BridgetNum");
			Если СоединениеНомера = "(connecting)" Тогда
				СоединениеНомера = стрСоединениеВПроцессе;
			Иначе
				СоединениеНомера = бит_АТСКлиент.СократитьНомер(СоединениеНомера, флагПрямойНабор, ВнешнийВызов);
			КонецЕсли;
			
			ДлительностьРазговора	= обЗвонокАккаунта.Получить("Duration");
			
			ЕстьСоединение			= Булево(Число(обЗвонокАккаунта.Получить("HasPair")));
			
			ИмяКанала				= обЗвонокАккаунта.Получить("Name");
			ИмяСвязанногоКанала		= обЗвонокАккаунта.Получить("BridgetName");
			
			ПрограммаКанала			= обЗвонокАккаунта.Получить("Application");
			ПараметрПрограммыКанала	= обЗвонокАккаунта.Получить("ApplicationData");
			
			//
			структЗвонок = Новый Структура;
			структЗвонок.Вставить("СвойНомер",		стрСвязанныйНомерТелефона);
			структЗвонок.Вставить("Аккаунт",		СипУстройствоНомера);
			структЗвонок.Вставить("Направление",	НаправлениеЗвонка);
			структЗвонок.Вставить("Входящий",		ВходящийЗвонок);
			структЗвонок.Вставить("Внешний",		ВнешнийВызов);
			структЗвонок.Вставить("Соединен",		СоединениеНомера);
			структЗвонок.Вставить("Длительность",	ДлительностьРазговора);
			структЗвонок.Вставить("ЕстьСоединение",	ЕстьСоединение);
			структЗвонок.Вставить("Канал",			ИмяКанала);
			структЗвонок.Вставить("СвязКанал",		ИмяСвязанногоКанала);
			//
			КонтрагентСсылка = Неопределено;
			КонтактноеЛицоСсылка = Неопределено;
			ЕстьДубли = Ложь;
			КонтрагентНайден = бит_АТСКлиент.НайтиКонтрагентаПоСокращНомеру(кэшКонтактов, СоответствиеНомеровХоста,
									СоединениеНомера, ВнешнийВызов, КонтрагентСсылка, КонтактноеЛицоСсылка, ЕстьДубли);
			структЗвонок.Вставить("Контрагент",			КонтрагентСсылка);
			структЗвонок.Вставить("КонтактноеЛицо",		КонтактноеЛицоСсылка);
			структЗвонок.Вставить("КонтрагентНайден",	КонтрагентНайден);
			структЗвонок.Вставить("ЕстьДубли",			ЕстьДубли);
			//
			структЗвонок.Вставить("ЗаписьРазговора","");
			структЗвонок.Вставить("НабранныйНомер",	"");
			//
			массЗвонки.Добавить(структЗвонок);

		КонецЦикла;
	КонецЦикла;
	
	// входящий звонок
	Если (Цел(СтатусНомера / 8) % 2) = 1 Тогда
		ТекстЗаголовка = "Вызывает номер ";
		Текст = "";
		ссылкаНавиг = "";
		флагПолучитьНавигСсылку = Ложь;
		Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
			флагПолучитьНавигСсылку = Истина;
		КонецЕсли;
		Для Каждого структЗвонок ИЗ массЗвонки Цикл
			Если структЗвонок.Входящий И (НЕ структЗвонок.ЕстьСоединение) Тогда
				Если ЗначениеЗаполнено(Текст) Тогда // не первый входящий звонок
					ТекстЗаголовка = ТекстЗаголовка + ", ";
					Текст = Текст + Символы.ПС + Символы.ВК;
				КонецЕсли;
				//
				ТекстЗаголовка = ТекстЗаголовка + структЗвонок.Соединен;
				Текст = Текст + Строка(структЗвонок.Контрагент);
				Если флагПолучитьНавигСсылку Тогда
					Если ЗначениеЗаполнено(структЗвонок.Контрагент) И (ТипЗнч(структЗвонок.Контрагент) <> Тип("Строка")) Тогда
						ссылкаНавиг = ПолучитьНавигационнуюСсылку(структЗвонок.Контрагент);
					КонецЕсли;
				КонецЕсли;
				//
				Если ЗначениеЗаполнено(структЗвонок.КонтактноеЛицо) Тогда
					Текст = Текст + " (" + Строка(структЗвонок.КонтактноеЛицо) + ")";
					Если флагПолучитьНавигСсылку Тогда
						ссылкаНавиг = ПолучитьНавигационнуюСсылку(структЗвонок.КонтактноеЛицо);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(Текст) Тогда
			ПоказатьОповещениеПользователя(ТекстЗаголовка, ссылкаНавиг, Текст);
		КонецЕсли;
	КонецЕсли;

	//
	СоотвРазговоры	= ПолучитьРазговорыСвязанногоНомера(стрСвязанныйНомерТелефона);
	СоотвКаналы		= ПолучитьКаналыСвязанногоНомера(стрСвязанныйНомерТелефона);
	
	// создание событий и запись в историю
	Для Каждого структЗвонок ИЗ массЗвонки Цикл
		//
		флагВходящий		= структЗвонок.Входящий;
		флагВнешний			= структЗвонок.Внешний;
		флагЕстьСоединение	= структЗвонок.ЕстьСоединение;
		НомерЗвонка			= структЗвонок.Соединен;
		КаналЗвонка			= структЗвонок.Канал;
		ДлительностьСекунды	= ДлительностьЗвонкаВСек(структЗвонок.Длительность);
		//
		соотвКанал = СоотвКаналы.Получить(КаналЗвонка);
		Если (соотвКанал = Неопределено) И флагВходящий Тогда
			ОбработкаВходящегоЗвонка(структЗвонок.Соединен, структЗвонок.КонтрагентНайден,
				структЗвонок.Контрагент, структЗвонок.КонтактноеЛицо, структЗвонок.НабранныйНомер, структЗвонок.ЕстьДубли);
			//
			открытьФормуВходЗвонка = бит_АТССервер.ПолучитьФлагОткрыватьФормуВходящегоЗвонка();
			Если открытьФормуВходЗвонка И (НЕ флагЕстьСоединение) Тогда
				структЗвонок.Вставить("ОткрытьФормуВходящегоЗвонка", Истина);
				ПодключитьОбработчикОжидания("ОткрытьФормуОбработкиВызова", 0.1, Истина);
			КонецЕсли;
		КонецЕсли;
		//
		Если флагЕстьСоединение И фрмОбработкаВызова <> Неопределено Тогда
			Если фрмОбработкаВызова.Открыта() И фрмОбработкаВызова.СвойНомер = стрСвязанныйНомерТелефона Тогда
				фрмОбработкаВызова.Закрыть();
			КонецЕсли;
		КонецЕсли;
		//
		СоотвРазговор = СоотвРазговоры.Получить(НомерЗвонка);
		Если СоотвРазговор = Неопределено И флагЕстьСоединение Тогда
			//
			// начался новый разговор
			//
			// создать событие
			//
			
			ИмяСвязанногоКанала		= структЗвонок.СвязКанал;

			ХэшЗаписи = "";
			урлЗаписиРазговора = "";
			Если ИспользоватьВебСервис Тогда
				ХэшЗаписи = бит_АТССервер.ВебСервисПолучитьХэшЗаписиРазговора(ТекущаяАТС, ВебСервисИдКлиента, КаналЗвонка, флагВходящий, ИмяСвязанногоКанала);
			Иначе
				Попытка
					ХэшЗаписи = обКонтроллерАТС.GetRecordHash(КаналЗвонка, флагВходящий, ИмяСвязанногоКанала);
				Исключение
					бит_ТелефонияКлиент.ВывестиСообщение( ОписаниеОшибки(), ЭтаФорма );
				КонецПопытки;
			КонецЕсли;
			Если ЗначениеЗаполнено(ХэшЗаписи) Тогда
				урлЗаписиРазговора = бит_АТСКлиент.СформироватьСсылкуНаЗаписьРазговора(Хост.Адрес, ХэшЗаписи);
			КонецЕсли;

			структЗвонок.ЗаписьРазговора = урлЗаписиРазговора;
			
			флагСоздаватьСобытие = Ложь;
			
			Если флагВходящий Тогда
				флагСоздаватьСобытие = бит_АТССервер.ПолучитьФлагСоздаватьСобытиеВходящийЗвонок();
			Иначе
				флагСоздаватьСобытие = бит_АТССервер.ПолучитьФлагСоздаватьСобытиеИсходящийЗвонок();
			КонецЕсли;
			
			Если флагСоздаватьСобытие Тогда
				создаватьСобытияПриВнутреннихЗвонках = бит_АТССервер.ПолучитьФлагСоздаватьСобытияПриВнутреннихЗвонках();
				Если создаватьСобытияПриВнутреннихЗвонках ИЛИ флагВнешний Тогда
					
					НабранныйНомер = структЗвонок.НабранныйНомер;
					Если флагВходящий И НЕ ЗначениеЗаполнено(НабранныйНомер) Тогда
						Если ИспользоватьВебСервис Тогда
							НабранныйНомер = бит_АТССервер.ВебСервисПолучитьНабранныйНомер(ТекущаяАТС, ВебСервисИдКлиента, КаналЗвонка);
						Иначе
							НабранныйНомер = обКонтроллерАТС.GetDestination(КаналЗвонка);
						КонецЕсли;
						НаименованиеНабранногоНомера = бит_ТелефонияСервер.ПолучитьНаименованиеНабранногоНомера(НабранныйНомер);
						структЗвонок.НабранныйНомер	= НаименованиеНабранногоНомера;
					КонецЕсли;
					
					структПараметрыСобытия = бит_ТелефонияКлиент.СоздатьСтруктуруПараметровСобытия(флагВходящий, структЗвонок.Контрагент,
						НомерЗвонка, структЗвонок.КонтактноеЛицо, урлЗаписиРазговора, структЗвонок.НабранныйНомер);
					ссылкаСобытие = бит_ТелефонияСерверПереопределяемый.СоздатьСобытиеЗвонка(структПараметрыСобытия);
					//УЗ привязываться к открытым карточка
					Если ЭтаФорма.ФормаМероприятие <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
						 бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуМероприятия(ЭтаФорма.ФормаМероприятие, урлЗаписиРазговора);
					Иначе	
						бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуДокументаСобытие(ссылкаСобытие);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			//
			// добавить в соответствие
			СоотвРазговоры.Вставить(НомерЗвонка, НомерЗвонка);
			
			// внешний входящий звонок с неизвестного номера
			Если флагВнешний И флагВходящий И (НЕ структЗвонок.КонтрагентНайден)
				И бит_АТССервер.ПолучитьФлагПредлагатьСохранитьНеизвестныйНомер() Тогда
					бит_ТелефонияКлиент.ОткрытьФормуОбработкиНеизвестногоНомера(Истина, НомерЗвонка);
			КонецЕсли;
		КонецЕсли;
		
		// каналы
		Если соотвКанал = Неопределено Тогда
			инфКанала = Новый Структура("Входящий, Внешний, Длительность, Соединен, ЕстьСоединение, "
							"Контрагент, КонтактноеЛицо, НабранныйНомер, ЗаписьРазговора, "
							"МикрофонОтключен, КонтрагентНайден");
			ЗаполнитьЗначенияСвойств(инфКанала, структЗвонок);
			//
			Если флагВходящий И НЕ ЗначениеЗаполнено(структЗвонок.НабранныйНомер) Тогда
				Если ИспользоватьВебСервис Тогда
					НабранныйНомер = бит_АТССервер.ВебСервисПолучитьНабранныйНомер(ТекущаяАТС, ВебСервисИдКлиента, КаналЗвонка);
				Иначе
					НабранныйНомер = обКонтроллерАТС.GetDestination(КаналЗвонка);
				КонецЕсли;
				НаименованиеНабранногоНомера = бит_ТелефонияСервер.ПолучитьНаименованиеНабранногоНомера(НабранныйНомер);
				структЗвонок.НабранныйНомер	= НаименованиеНабранногоНомера;
				инфКанала.НабранныйНомер	= НаименованиеНабранногоНомера;
			КонецЕсли;
			//
			инфКанала.МикрофонОтключен = Ложь;
			
			// добавить в соответствие
			СоотвКаналы.Вставить(КаналЗвонка, инфКанала);
		Иначе
			//
			// обновить информацию о звонке
			//
			каналДлительностьСекунды = ДлительностьЗвонкаВСек(соотвКанал.Длительность);
			Если ДлительностьСекунды > каналДлительностьСекунды Тогда
				соотвКанал.Длительность = структЗвонок.Длительность;
			КонецЕсли;
			//
			Если флагЕстьСоединение Тогда
				соотвКанал.ЕстьСоединение = флагЕстьСоединение;
			КонецЕсли;
			//
			Если ЗначениеЗаполнено(структЗвонок.ЗаписьРазговора) Тогда
				соотвКанал.ЗаписьРазговора = структЗвонок.ЗаписьРазговора;
			Иначе
				структЗвонок.ЗаписьРазговора = соотвКанал.ЗаписьРазговора;
			КонецЕсли;
			//
			Если ЗначениеЗаполнено(структЗвонок.Соединен)
				И (структЗвонок.Соединен <> стрСоединениеВПроцессе)
				И (соотвКанал.Соединен <> структЗвонок.Соединен)
			Тогда
				соотвКанал.Соединен			= структЗвонок.Соединен;
				соотвКанал.Контрагент		= структЗвонок.Контрагент;
				соотвКанал.КонтактноеЛицо	= структЗвонок.КонтактноеЛицо;
				//
				соотвКанал.Входящий = структЗвонок.Входящий;
			КонецЕсли;
			//
			структЗвонок.НабранныйНомер = соотвКанал.НабранныйНомер;
		КонецЕсли;
		
		// добавление в общую таблицу
		строкаЗвонок = Звонки.Добавить();
		ЗаполнитьЗначенияСвойств(строкаЗвонок, структЗвонок);
	КонецЦикла;
	
	// очистка и сохранение в историю звонков
	Если массЗвонки.Количество() = 0 И
		(СтатусНомера<=0 ИЛИ СтатусНомера=2 ИЛИ СтатусНомера=4)
		Тогда
		
		Для Каждого соотвКанал Из СоотвКаналы Цикл
			инфКанала = соотвКанал.Значение;
			ДобавитьВИсториюЗвонков( стрСвязанныйНомерТелефона,
								инфКанала.Входящий,
								инфКанала.Соединен,
								инфКанала.Контрагент,
								инфКанала.КонтактноеЛицо,
								инфКанала.ЕстьСоединение,
								инфКанала.Длительность,
								инфКанала.НабранныйНомер,
								инфКанала.ЗаписьРазговора
								);
			Если инфКанала.Входящий И инфКанала.Внешний	И (НЕ инфКанала.ЕстьСоединение)
				И (НЕ инфКанала.КонтрагентНайден) И бит_АТССервер.ПолучитьФлагПредлагатьСохранитьНеизвестныйНомер() Тогда
					бит_ТелефонияКлиент.ОткрытьФормуОбработкиНеизвестногоНомера(Истина, инфКанала.Соединен);
			КонецЕсли;
		КонецЦикла;
		Если СоотвКаналы.Количество() > 0 Тогда
			СоотвКаналы.Очистить();
			ЗаполнитьИсториюЗвонков();
			//
			// Проверка, что последний разговор завершился на активной строке звонков
			Если стрТекущийАктивныйСвойНомер = стрСвязанныйНомерТелефона Тогда
				Номер = "";
			КонецЕсли;
			//
			Если фрмВводаНомераПеревода <> Неопределено Тогда
				Если фрмВводаНомераПеревода.Открыта() И фрмВводаНомераПеревода.СвойНомер = стрСвязанныйНомерТелефона Тогда
					фрмВводаНомераПеревода.Закрыть();
				КонецЕсли;
			КонецЕсли;
			//
			Если фрмОбработкаВызова <> Неопределено Тогда
				Если фрмОбработкаВызова.Открыта() И фрмОбработкаВызова.СвойНомер = стрСвязанныйНомерТелефона Тогда
					фрмОбработкаВызова.Закрыть();
				КонецЕсли;
			КонецЕсли;
			//
		КонецЕсли;
		
		СоотвРазговоры.Очистить();
		
		МикрофонОтключен = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусСвязанныхНомеров()
	
	Попытка
		
		списокНомеровПолученияСтатуса = "";
		
		Для Каждого элемИзбр Из Избранное Цикл
			Если ЗначениеЗаполнено(элемИзбр.Номер) И элемИзбр.ОтслеживатьСтатус Тогда
				списокНомеровПолученияСтатуса = списокНомеровПолученияСтатуса + элемИзбр.Номер + ";";
			КонецЕсли;
		КонецЦикла;
		
		списокНомеровПолученияЗвонков = НомерСвязанногоТелефона;
		Если ЗначениеЗаполнено(НомерСвязанногоТелефонаДоп) Тогда
			списокНомеровПолученияЗвонков = списокНомеровПолученияЗвонков + ";" + НомерСвязанногоТелефонаДоп;
		КонецЕсли;
		
		Если ИспользоватьВебСервис Тогда
			соотвИнфо = бит_АТССервер.ВебСервисОбновитьНомер(ТекущаяАТС, ВебСервисИдКлиента, списокНомеровПолученияЗвонков, списокНомеровПолученияСтатуса);
			ОбработкаОбновлениеНомера(соотвИнфо);
			бит_АТСКлиент.ПроверкаОшибокВебСервиса(ТекущаяАТС, ИмяИсточникаСобытий(), соотвИнфо, ЭтаФорма);
			// загрузка звонков
			соотвЗагрСсылки = соотвИнфо.Получить("LoadedURLs");
			Если соотвЗагрСсылки <> Неопределено Тогда
				Для Каждого соотвЗагрСсылка Из соотвЗагрСсылки Цикл
					текстУрл = соотвЗагрСсылка.Получить("text");
					ИсторияРазборПропущенныхЗвонков(текстУрл);
				КонецЦикла;
			КонецЕсли;
			//
			ЗапуститьТаймерОбновления(ИнтервалОбновления);
		Иначе
			обКонтроллерАТС.GetExtensionStatusAndChannelsAsnc(списокНомеровПолученияЗвонков, списокНомеровПолученияСтатуса);
		КонецЕсли;
		
	Исключение
		
		Если ИспользоватьВебСервис Тогда
			ОбработкаОшибкиВебСервиса(ОписаниеОшибки());
		Иначе
			бит_ТелефонияКлиент.ВывестиСообщение(ОписаниеОшибки(), ЭтаФорма);
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

// Обработчик не должен блокировать интерфейс.
&НаКлиенте
Процедура ОбработкаВходящегоЗвонка(Знач стрНомерАбонентаВх, флагКонтрагентНайден, ссылкаКонтрагент,
								ссылкаКонтактноеЛицо, стрНабранныйНомер, флагЕстьДубли)

	Если бит_АТССервер.ПолучитьФлагРазворачиватьОкноПриВходящемЗвонке() Тогда
		Попытка
			// для неуправляемого режима
			Если обКонтроллерАТС <> Неопределено Тогда
				обКонтроллерАТС.ActivateMainWindow();
			КонецЕсли;
		Исключение
			бит_ТелефонияКлиент.ВывестиСообщение( ОписаниеОшибки(), ЭтаФорма );
		КонецПопытки;
		Активизировать();
	КонецЕсли;
	
	стрНомерАбонентаВх = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(стрНомерАбонентаВх);
	
	Если флагЕстьДубли Тогда
		бит_ТелефонияКлиент.ОткрытьФормуОбработкиДублейНомера(стрНомерАбонентаВх, ЭтаФорма);
	КонецЕсли;
	
	Если бит_АТССервер.ПолучитьФлагОткрыватьКартуЯндексПриВходящемЗвонке() И
	  СтрДлина(стрНомерАбонентаВх) >= бит_ТелефонияКлиентСервер.ПолучитьДлинуВнешнегоНомера() Тогда
	  	бит_ТелефонияКлиентПереопределяемый.ЗапускПрограммы("http://maps.yandex.ru/?text=" + стрНомерАбонентаВх);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОбработкиВызова()
	Для Каждого строкаЗвонок Из Звонки Цикл
		Если строкаЗвонок.Входящий И строкаЗвонок.ОткрытьФормуВходящегоЗвонка Тогда
			строкаЗвонок.ОткрытьФормуВходящегоЗвонка = Ложь;
			//
			фрмОбработкаВызова = бит_ТелефонияКлиент.ПолучитьФормуОбработкиВызова(ЭтаФорма, Истина, строкаЗвонок.Соединен,
				строкаЗвонок.КонтрагентНайден, строкаЗвонок.Контрагент, строкаЗвонок.КонтактноеЛицо, строкаЗвонок.НабранныйНомер, строкаЗвонок.СвойНомер);
			Если фрмОбработкаВызова.Открыта() Тогда
				фрмОбработкаВызова.ОбновитьОтображениеДанных();
				фрмОбработкаВызова.Активизировать();
			Иначе
				бит_ТелефонияКлиентПереопределяемый.ОткрытьФормуСБлокировкойВладельца(фрмОбработкаВызова, "БитфонМониторБИТАТС_ОбработкаВходящегоЗвонка", Неопределено);
			КонецЕсли;
			//
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗвонок(ВызываемыйНомер)
	
	бит_АТСКлиент.НачатьЗвонок(Подключен, СвязанныйНомер, ВызываемыйНомер, обКонтроллерАТС,
		ИспользоватьВебСервис, ВебСервисИдКлиента, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДТМФКоманда(стрКодКоманды)
	Номер = Номер + стрКодКоманды;
	текущЗвонок = ПолучитьТекущийЗвонок();
	Если текущЗвонок <> Неопределено Тогда
		стрСвязКанал = текущЗвонок.СвязКанал;
		Если ЗначениеЗаполнено(стрСвязКанал) Тогда
			Попытка
				Если ИспользоватьВебСервис Тогда
					бит_АТССервер.ВебСервисНабратьDTMFКоманду(ТекущаяАТС, ВебСервисИдКлиента, стрСвязКанал, стрКодКоманды);
				Иначе
					обКонтроллерАТС.PlayDTMF(стрСвязКанал, стрКодКоманды);
				КонецЕсли;
			Исключение
				бит_ТелефонияКлиент.ВывестиСообщение( ОписаниеОшибки(), ЭтаФорма );
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВоспроизвестиЗаписьРазговора(стрПутьКЗаписи)
	Если НЕ ЗначениеЗаполнено(стрПутьКЗаписи) Тогда
		бит_ТелефонияКлиент.ВывестиСообщение("Ошибка воспроизведения записи на телефоне - запись разговора не найдена");
		Возврат;
	КонецЕсли;
	стрСервисЗаписейНаАТС = бит_АТСКлиент.ПутьСервисаЗаписейРазговоровНаАТС();
	индЗаголовокЗап = Найти(стрПутьКЗаписи, стрСервисЗаписейНаАТС);
	Если индЗаголовокЗап > 0 Тогда
		стрХэш = Сред(стрПутьКЗаписи, индЗаголовокЗап + СтрДлина(стрСервисЗаписейНаАТС));
		Попытка
			ТаймаутЗвонка = бит_АТСКлиент.ПолучитьТаймаутЗвонка();
			ЗаголовокАвтоподнятия = бит_АТССервер.ПолучитьФлагЗаголовокАвтоподнятия();
			Если РежимВнеОфиса Тогда
				стрНомерВнеОфиса = бит_АТСКлиент.ПолучитьНомерВнеОфисаПолный();
				Если НЕ ЗначениеЗаполнено(стрНомерВнеОфиса) Тогда
					Возврат;
				КонецЕсли;
				ПоказатьОповещениеПользователя("Режим вне офиса - прослушивание записи", ,
					"Воспроизведение записи разговора на внешнем телефоне '" + стрНомерВнеОфиса + "'...");
				Если ИспользоватьВебСервис Тогда
					бит_АТССервер.ВебСервисВоспроизвестиЗаписьРазговора(ТекущаяАТС, ВебСервисИдКлиента, стрНомерВнеОфиса, СвязанныйНомер, стрХэш,
						ЗаголовокАвтоподнятия, ТаймаутЗвонка);
				Иначе
					обКонтроллерАТС.PlayRecording(стрНомерВнеОфиса, СвязанныйНомер, стрХэш, ЗаголовокАвтоподнятия, ТаймаутЗвонка);
				КонецЕсли;
			Иначе
				ПоказатьОповещениеПользователя("Прослушивание записи", , "Воспроизведение записи разговора на связанном телефоне '" + СвязанныйНомер + "'...");
				Если ИспользоватьВебСервис Тогда
					бит_АТССервер.ВебСервисВоспроизвестиЗаписьРазговора(ТекущаяАТС, ВебСервисИдКлиента, СвязанныйНомер, СвязанныйНомер, стрХэш,
						ЗаголовокАвтоподнятия, ТаймаутЗвонка);
				Иначе
					обКонтроллерАТС.PlayRecording(СвязанныйНомер, СвязанныйНомер, стрХэш, ЗаголовокАвтоподнятия, ТаймаутЗвонка);
				КонецЕсли;
			КонецЕсли;
		Исключение
			бит_ТелефонияКлиент.ВывестиСообщение( ОписаниеОшибки(), ЭтаФорма );
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УсловныйПереводЗавершение(стрНомерПеревода)
	
	Если Элементы.Звонки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	стрТекущКанал = Элементы.Звонки.ТекущиеДанные.Канал;
	Если НЕ ЗначениеЗаполнено(стрТекущКанал) Тогда
		Возврат;
	КонецЕсли;
		
	стрНомерПереводаПолн = бит_АТСКлиент.СформироватьНомерСПрефиксами(стрНомерПеревода);
	Если НЕ ЗначениеЗаполнено(стрНомерПереводаПолн) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Если ИспользоватьВебСервис Тогда
			бит_АТССервер.ВебСервисУсловныйПеревод(ТекущаяАТС, ВебСервисИдКлиента, стрТекущКанал, СвязанныйНомер, стрНомерПереводаПолн);
		Иначе
			обКонтроллерАТС.AtXfer2(стрТекущКанал, СвязанныйНомер, стрНомерПереводаПолн);
		КонецЕсли;
	Исключение
		бит_ТелефонияКлиент.ВывестиСообщение(ОписаниеОшибки(), ЭтаФорма);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущийЗвонок()
	текущЗвонок = Элементы.Звонки.ТекущиеДанные;
	Если текущЗвонок = Неопределено Тогда
		Если Звонки.Количество() = 1 Тогда
			текущЗвонок = Звонки[0];
		КонецЕсли;
	КонецЕсли;
	Возврат текущЗвонок;
КонецФункции

&НаКлиенте
Процедура ОбновитьРеквизитФормыМикрофонОтключен()
	Если Элементы.Звонки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоотвКаналы = ПолучитьКаналыСвязанногоНомера(Элементы.Звонки.ТекущиеДанные.СвойНомер);
	Если СоотвКаналы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	соотвКанал = СоотвКаналы.Получить(Элементы.Звонки.ТекущиеДанные.Канал);
	Если соотвКанал <> Неопределено Тогда
		МикрофонОтключен = соотвКанал.МикрофонОтключен;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимDND(стрНомерУст, флагРежим)
	Если НЕ ЗначениеЗаполнено(стрНомерУст) Тогда
		Возврат;
	КонецЕсли;
	Попытка
		Если ИспользоватьВебСервис Тогда
			бит_АТССервер.ВебСервисУстановитьРежимDND(ТекущаяАТС, ВебСервисИдКлиента, стрНомерУст, флагРежим);
		Иначе
			обКонтроллерАТС.SetDNDMode(стрНомерУст, флагРежим);
		КонецЕсли;
	Исключение
		стрЗаголовокОшибки = "Ошибка " + ?(флагРежим, "установки", "отключения") + " на БИТ.АТС режима DND для номера '" + стрНомерУст + "'";
		бит_АТСКлиент.ОбработкаОшибки(ТекущаяАТС, ИмяИсточникаСобытий(), стрЗаголовокОшибки, ОписаниеОшибки(), ЭтаФорма);
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Функция УстановитьПереадресациюВходящихНаАТС(стрНомерУст, флагПереадресацияВкл)
	
	Если НЕ ЗначениеЗаполнено(стрНомерУст) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	стрСообщОшибка = "Ошибка " + ?(флагПереадресацияВкл, "установки", "отключения") + " на БИТ.АТС переадресации по DND для номера '" + стрНомерУст + "'";
	
	стрURL = "https://" +
		Хост.Адрес +
		"/services/connector.php?action=setDndForwarding" +
		"&uuid=" + Хост.IDКлиента +
		"&extension=" + стрНомерУст;
		
	Если флагПереадресацияВкл Тогда
		стрНомерПереадресации = бит_АТСКлиент.ПолучитьНомерВнеОфисаПолный();
		стрURL = стрURL + "&module=dialnum&number=" + стрНомерПереадресации;
	КонецЕсли;
	
	стрУстановка = "";
	стрОшибкаHTTP = "";
	установлено = бит_ТелефонияКлиентСервер.СкачатьПоHTTPS(стрURL, 10, Истина, стрУстановка, стрОшибкаHTTP);
	Если установлено Тогда
		соотвРезт = бит_ТелефонияКлиентСервер.ЗаполнитьСоответствиеИзJSON(стрУстановка);
		установкаУспешна = бит_АТСКлиент.ПроверитьРезультатЗапросаАТС(соотвРезт, стрСообщОшибка, ЭтаФорма);
	Иначе
		бит_АТСКлиент.ОбработкаОшибки(ТекущаяАТС, ИмяИсточникаСобытий(), "Ошибка управления переадресацией на АТС", стрСообщОшибка + ". " + стрОшибкаHTTP, ЭтаФорма);
		установкаУспешна = Ложь;
	КонецЕсли;
	Возврат установкаУспешна;
КонецФункции

// перевод длительности звонка из строки в секунды
&НаКлиенте
Функция ДлительностьЗвонкаВСек(стрДлительность)
	частиДлит = бит_ТелефонияКлиентСервер.СтрРазбить(стрДлительность, ":");
	длитЧас = Число(частиДлит[0].Значение);
	длитМин = Число(частиДлит[1].Значение);
	длитСек = Число(частиДлит[2].Значение);
	Возврат (длитСек + длитМин*60 + длитЧас*3600);
КонецФункции

&НаКлиенте
Процедура ДобавитьВИсториюЗвонков(СвойНомер, флагТипЗвонкаВходящий, Номер,
			Абонент, КонтактноеЛицо, Успешность, стрДлительность,
			НабранныйНомер, стрПутьКЗаписи)
	Длительность = ДлительностьЗвонкаВСек(стрДлительность);
	бит_ТелефонияСервер.ДобавитьВИсториюЗвонков(СвойНомер, флагТипЗвонкаВходящий,
		Номер, Абонент, КонтактноеЛицо, Успешность, Длительность, НабранныйНомер,
		стрПутьКЗаписи);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсториюЗвонков()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 100
	               |	бит_ИсторияЗвонков.СвойНомер,
	               |	бит_ИсторияЗвонков.Дата КАК Дата,
	               |	бит_ИсторияЗвонков.Абонент,
	               |	бит_ИсторияЗвонков.КонтактноеЛицо,
	               |	бит_ИсторияЗвонков.Номер,
	               |	бит_ИсторияЗвонков.ТипЗвонка,
	               |	бит_ИсторияЗвонков.Успешность,
	               |	бит_ИсторияЗвонков.ДлительностьЗвонка,
	               |	бит_ИсторияЗвонков.НабранныйНомер,
	               |	бит_ИсторияЗвонков.ЗаписьРазговора
	               |ИЗ
	               |	РегистрСведений.бит_ИсторияЗвонков КАК бит_ИсторияЗвонков
	               |ГДЕ
	               |	бит_ИсторияЗвонков.Пользователь = &Пользователь
	               |	И бит_ИсторияЗвонков.СвойНомер В(&СвоиНомера)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата УБЫВ";

	Запрос.УстановитьПараметр("Пользователь", бит_ТелефонияСервер.ПолучитьТекущегоПользователя());
	массСвоиНомера = Новый Массив;
	массСвоиНомера.Добавить(НомерСвязанногоТелефона);
	массСвоиНомера.Добавить(НомерСвязанногоТелефонаДоп);
	Запрос.УстановитьПараметр("СвоиНомера", массСвоиНомера);
	табл = Запрос.Выполнить().Выгрузить();
	
	ИсторияЗвонков.Очистить();
	
	ТекущееНачалоДня = НачалоДня(ТекущаяДата());
	
	Для каждого строкаТабл Из табл Цикл
		строкаИстории = ИсторияЗвонков.Добавить();
		ЗаполнитьЗначенияСвойств(строкаИстории, строкаТабл);
		//
		строкаИстории.ВыводТипЗвонка = ? (строкаТабл.ТипЗвонка=Перечисления.бит_ТипЗвонка.Входящий, "<-", "->");
		строкаИстории.ВыводАбонент = Строка(строкаТабл.Абонент);
		Если ЗначениеЗаполнено(строкаТабл.КонтактноеЛицо) Тогда
			строкаИстории.ВыводАбонент = строкаИстории.ВыводАбонент + " (" + Строка(строкаТабл.КонтактноеЛицо) + ")";
		КонецЕсли;
		//
		строкаИстории.ВыводДата = бит_ТелефонияКлиентСервер.ФорматироватьДатуРазговора(ТекущееНачалоДня, строкаТабл.Дата);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЛимитЗагрузкиИсторииПропущенныхЗвонков()
	Возврат 50;
КонецФункции

&НаКлиенте
Функция ПолучитьНомерВнеОфисаЧист()
	НомерТелефонаВнеОфиса = бит_АТССервер.ПолучитьНомерВнеОфиса();
	НомерТелефонаВнеОфиса = бит_ТелефонияКлиентСервер.ОчиститьНомерТолькоЦифры(НомерТелефонаВнеОфиса);
	Возврат бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(НомерТелефонаВнеОфиса);
КонецФункции

&НаКлиенте
Процедура ЗапуститьТаймерЗагрузкиИсторииПропущенныхЗвонков()
	ЗагрузкаЗвонков = бит_АТССервер.ПолучитьФлагЗагрузкаЗвонков();
	Если ЗагрузкаЗвонков = Истина Тогда
		ПодключитьОбработчикОжидания("ИсторияЗагрузкаПропущенныхЗвонков", 60, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОстановитьТаймерЗагрузкиИсторииПропущенныхЗвонков()
	ОтключитьОбработчикОжидания("ИсторияЗагрузкаПропущенныхЗвонков");
КонецПроцедуры

&НаКлиенте
Функция ПолучитьUrlЗагрузкиИсторииПропущенныхЗвонков(Знач датаПослЗвонка, стрНомерЗагрузкиИстории)
	
	Если датаПослЗвонка = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(стрНомерЗагрузкиИстории) Тогда
		Возврат "";
	КонецЕсли;

	датаПослЗвонка = датаПослЗвонка + 1;	// увеличить на 1 секунду
	
	стрАдресАТС = Хост.Адрес;
	индПорт = СтрНайти(стрАдресАТС, ":");
	Если индПорт > 0 Тогда
		стрАдресАТС = Лев(стрАдресАТС, индПорт-1);
	КонецЕсли;
	
	стрURL = "https://" +
		стрАдресАТС +
		"/services/connector.php?action=getCallsHistory" +
		"&from=" + бит_АТСКлиент.ДатаВВебФормате(датаПослЗвонка) +
		"&to=" + бит_АТСКлиент.ДатаВВебФормате(ТекущаяДата()) +
		"&limit=" + Строка(ПолучитьЛимитЗагрузкиИсторииПропущенныхЗвонков()) +
		"&number=" + стрНомерЗагрузкиИстории +
		"&uuid=" + Хост.IDКлиента;
	
	Возврат стрURL;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьURL(стрАдресРесурса)
	Если ИспользоватьВебСервис Тогда
		бит_АТССервер.ВебСервисЗагрузитьURL(ТекущаяАТС, ВебСервисИдКлиента, стрАдресРесурса);
	Иначе
		обКонтроллерАТС.LoadURLAsnc(стрАдресРесурса);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсторияЗагрузкаПропущенныхЗвонков()
	
	Если НЕ ЗначениеЗаполнено(Хост.IDКлиента) Тогда
		бит_ТелефонияКлиент.ВывестиСообщение(
			"Ошибка загрузки звонков - не задано значение 'ID клиента' в настройках телефонной станции БИТ.АТС", ЭтаФорма);
		Возврат;
	КонецЕсли;

	датаПослЗвонка = ПолучитьДатуПоследнегоЗвонкаВИстории(НомерСвязанногоТелефона);
	Если датаПослЗвонка <> Неопределено Тогда
		ЗагрузитьURL(
			ПолучитьUrlЗагрузкиИсторииПропущенныхЗвонков(датаПослЗвонка, НомерСвязанногоТелефона)
			);
		//
		НомерТелефонаВнеОфиса = ПолучитьНомерВнеОфисаЧист();
		Если ЗначениеЗаполнено(НомерТелефонаВнеОфиса) Тогда
			ЗагрузитьURL(
				ПолучитьUrlЗагрузкиИсторииПропущенныхЗвонков(датаПослЗвонка, НомерТелефонаВнеОфиса)
				);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерСвязанногоТелефонаДоп) Тогда
		датаПослЗвонка = ПолучитьДатуПоследнегоЗвонкаВИстории(НомерСвязанногоТелефонаДоп);
		Если датаПослЗвонка <> Неопределено Тогда
			ЗагрузитьURL(
				ПолучитьUrlЗагрузкиИсторииПропущенныхЗвонков(датаПослЗвонка, НомерСвязанногоТелефонаДоп)
				);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияРазборПропущенныхЗвонков(стрУрлДанные)
	
	Если НЕ ЗначениеЗаполнено(стрУрлДанные) Тогда
		Возврат;
	КонецЕсли;
	
	стрURL = "";
	стрДанныеЗагр = "";
	
	индРазд = Найти(стрУрлДанные, "|");
	Если индРазд > 0 Тогда
		стрURL = Лев(стрУрлДанные, индРазд-1);
		стрДанныеЗагр = Сред(стрУрлДанные, индРазд+1);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(стрURL)) ИЛИ (НЕ ЗначениеЗаполнено(стрДанныеЗагр)) Тогда
		Возврат;
	КонецЕсли;
	
	стрНомерЗагр = "";
	длинаURL = СтрДлина(стрURL);
	индНомер = Найти(стрURL, "number=");	// длина 7
	код0	= 48;
	код9	= 57;
	Если индНомер > 0 Тогда
		Для индЦифр = (индНомер+7) По длинаURL Цикл
			кодСимв = КодСимвола(стрURL, индЦифр);
			Если (кодСимв >= код0 И кодСимв <= код9) Тогда
				стрНомерЗагр = стрНомерЗагр + Символ(кодСимв);
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//
	Если НЕ ЗначениеЗаполнено(стрНомерЗагр) Тогда
		бит_ТелефонияКлиент.ВывестиСообщение("Ошибка при загрузке звонков - не найден номер в URL");
		Возврат;
	КонецЕсли;
	
	соотвРезтJSON = бит_ТелефонияКлиентСервер.ЗаполнитьСоответствиеИзJSON(стрДанныеЗагр);
	Если Не бит_АТСКлиент.ПроверитьРезультатЗапросаАТС(соотвРезтJSON, "Ошибка загрузки звонков", ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	НомерТелефонаВнеОфиса = ПолучитьНомерВнеОфисаЧист();
	
	соотвЗвонки = соотвРезтJSON.Получить("data");
	
	колвоПропущенныхЗвонков = соотвЗвонки.Количество();
	
	Если колвоПропущенныхЗвонков = 0 Тогда
		Если РежимВнеОфиса И (стрНомерЗагр = НомерТелефонаВнеОфиса) Тогда
			ЗапуститьТаймерЗагрузкиИсторииПропущенныхЗвонков();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	бит_ТелефонияКлиент.ВывестиСообщение("Найдено не записанных в историю звонков: " + Строка(колвоПропущенныхЗвонков));
	
	бит_ТелефонияКлиент.ВывестиСообщение("Добавление загруженных звонков в историю...");
	
	датаПослЗвонка = Дата(1,1,1);
	колвоНеотвеченныхВходящих = 0;
	
	Для й=0 По (колвоПропущенныхЗвонков-1) Цикл

		соотвЗвонок = соотвЗвонки[Строка(й)];
		
		//бит_ТелефонияКлиент.ВывестиСообщение(элЗвонок.Ключ);
		//Для Каждого полеЗв Из соотвЗвонок Цикл
		//	бит_ТелефонияКлиент.ВывестиСообщение(полеЗв.Ключ + ": " + полеЗв.Значение);
		//КонецЦикла;
		
		стрСвойНомер		= "";
		стрНомерЗв			= "";
		Длительность		= 0;
		стрНабранныйНомер	= "";
		стрПутьКЗаписи		= "";
		флагИсходящий		= Ложь;
		стрНабранныйНомер	= "";
		
		стрИсточникЗв	= соотвЗвонок.Получить("src");
		стрНабраннЗв	= соотвЗвонок.Получить("dialedext");
		стрОтветилЗв	= соотвЗвонок.Получить("answeredext");
		стрДлитЗв		= соотвЗвонок.Получить("billsec");
		стрХэшЗв		= соотвЗвонок.Получить("recordinghash");
		стрСтатусЗв		= соотвЗвонок.Получить("disposition");
		стрДатаЗв		= соотвЗвонок.Получить("calldate");
		стрНабранТранкЗв= соотвЗвонок.Получить("totrunkdst");
		
		датаПропущЗвонка = бит_АТСКлиент.ДатаИзВебФормата(стрДатаЗв);
		
		Если датаПропущЗвонка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(стрИсточникЗв) Тогда
			Продолжить;
		КонецЕсли;
		
		стрИсточникЗвСокр = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(стрИсточникЗв);
		
		стрНомерКомуЗв = ? (ЗначениеЗаполнено(стрОтветилЗв), стрОтветилЗв, стрНабраннЗв);
		стрНомерКомуЗв = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(стрНомерКомуЗв);
		
		Если (стрИсточникЗвСокр = НомерСвязанногоТелефона)
			ИЛИ (стрИсточникЗвСокр = НомерСвязанногоТелефонаДоп)
			ИЛИ (стрИсточникЗвСокр = НомерТелефонаВнеОфиса)
		Тогда
			флагИсходящий = Истина;
			стрНомерЗв = стрНомерКомуЗв;
			Если стрИсточникЗвСокр = НомерСвязанногоТелефонаДоп Тогда
				стрСвойНомер = НомерСвязанногоТелефонаДоп;
			Иначе
				стрСвойНомер = НомерСвязанногоТелефона;
			КонецЕсли;
		Иначе
			стрНомерЗв = стрИсточникЗвСокр;
			Если стрНомерКомуЗв = НомерСвязанногоТелефонаДоп Тогда
				стрСвойНомер = НомерСвязанногоТелефонаДоп;
			Иначе
				стрСвойНомер = НомерСвязанногоТелефона;
			КонецЕсли;
		КонецЕсли;
		
		Если (НЕ флагИсходящий) И ЗначениеЗаполнено(стрНабранТранкЗв) Тогда
			стрНабранныйНомер = стрНабранТранкЗв;
		КонецЕсли;
		
		ВнешнийВызов = (СтрДлина(стрНомерЗв) >= бит_ТелефонияКлиентСервер.ПолучитьДлинуВнешнегоНомера());
		
		КонтрагентСсылка = Неопределено;
		КонтактноеЛицоСсылка = Неопределено;
		КонтрагентНайден = бит_АТСКлиент.НайтиКонтрагентаПоСокращНомеру(кэшКонтактов, СоответствиеНомеровХоста,
								стрНомерЗв, ВнешнийВызов, КонтрагентСсылка, КонтактноеЛицоСсылка);
		
		флагУспешность = Ложь;
		Если бит_АТСКлиент.ЗвонокИсторииУспешен(стрСтатусЗв) Тогда
			флагУспешность = Истина;
			Длительность = Число(стрДлитЗв);
			стрПутьКЗаписи = бит_АТСКлиент.СформироватьСсылкуНаЗаписьРазговора(Хост.Адрес, стрХэшЗв);
		КонецЕсли;

		бит_ТелефонияСервер.ДобавитьВИсториюЗвонковСДатой(датаПропущЗвонка, стрСвойНомер, НЕ флагИсходящий, стрНомерЗв,
			КонтрагентСсылка, КонтактноеЛицоСсылка, флагУспешность, Длительность, стрНабранныйНомер, стрПутьКЗаписи);
		
		Если датаПропущЗвонка > датаПослЗвонка Тогда
			датаПослЗвонка = датаПропущЗвонка;
		КонецЕсли;
		
		Если (НЕ флагИсходящий) И (НЕ флагУспешность) Тогда
			колвоНеотвеченныхВходящих = колвоНеотвеченныхВходящих + 1;
		КонецЕсли;
		
		//бит_ТелефонияКлиент.ВывестиСообщение("-----");
	КонецЦикла;
	
	бит_ТелефонияКлиент.ВывестиСообщение("Добавление загруженных звонков в историю завершено.");
	
	ЗаполнитьИсториюЗвонков();
	
	Если колвоНеотвеченныхВходящих > 0 Тогда
		бит_ТелефонияКлиент.ВывестиСообщение("Неотвеченных входящих звонков: " + Строка(колвоНеотвеченныхВходящих));
		// смена активной закладки
		Элементы.ГруппаПанельНабора.ТекущаяСтраница = Элементы.ГруппаИсторияЗвонков;
	КонецЕсли;
	
	Если колвоПропущенныхЗвонков = ПолучитьЛимитЗагрузкиИсторииПропущенныхЗвонков() Тогда
		ЗагрузитьURL(
			ПолучитьUrlЗагрузкиИсторииПропущенныхЗвонков(датаПослЗвонка, стрНомерЗагр)
			);
	Иначе
		Если РежимВнеОфиса И (стрНомерЗагр = НомерТелефонаВнеОфиса) Тогда
			ЗапуститьТаймерЗагрузкиИсторииПропущенныхЗвонков();
		Иначе
			ЗагрузитьURL(
				ПолучитьUrlЗагрузкиИсторииПропущенныхЗвонков(датаПослЗвонка, стрНомерЗагр)
				);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДатуПоследнегоЗвонкаВИстории(стрСвойНомерИстор)
	
	датаПослЗвонка = Неопределено;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	бит_ИсторияЗвонков.Дата КАК ДатаЗвонка
	               |ИЗ
	               |	РегистрСведений.бит_ИсторияЗвонков КАК бит_ИсторияЗвонков
	               |ГДЕ
	               |	бит_ИсторияЗвонков.Пользователь = &Пользователь
	               |	И бит_ИсторияЗвонков.СвойНомер = &СвойНомер
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	бит_ИсторияЗвонков.Дата УБЫВ";
				   
	Запрос.УстановитьПараметр("Пользователь", бит_ТелефонияСервер.ПолучитьТекущегоПользователя());
	Запрос.УстановитьПараметр("СвойНомер", стрСвойНомерИстор);

	табл = Запрос.Выполнить().Выгрузить();
	Если табл.Количество() > 0 Тогда
		датаПослЗвонка = табл[0].ДатаЗвонка;
	Иначе
		датаПослЗвонка = НачалоДня(ТекущаяДата());
	КонецЕсли;
	
	Возврат датаПослЗвонка;
	
КонецФункции

&НаСервере
Процедура ИзбранноеОбновитьСервер()
	бит_ТелефонияСервер.ИзбранноеОбновить(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИзбранноеОбновитьКлиент()
	ИзбранноеОбновитьСервер();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусНомераИзбранного(стрНомерУстановкиСтатуса, кодНовогоСтатуса)
	Отбор = Новый Структура("Номер", стрНомерУстановкиСтатуса);
	массСтрок = Избранное.НайтиСтроки(Отбор);
	Для Каждого НайденнаяСтрока Из массСтрок Цикл
		Если НайденнаяСтрока.ОтслеживатьСтатус И Не НайденнаяСтрока.ПометкаУдаления Тогда
			НайденнаяСтрока.ИндексКартинкиСтатуса = кодНовогоСтатуса;	// индекс картинки равен коду статуса
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОбновлениеНомера(соотвХмл)
	
	бит_АТСКлиент.ОчиститьФлагОбновленВсегоКэшаКонтактов(кэшКонтактов);
	
	соотвИнфо = соотвХмл.Получить("ChannelsInfo");
	
	соотвНомера = соотвИнфо.Получить("Extensions");
	
	//
	длинаВнешнегоНомера = бит_ТелефонияКлиентСервер.ПолучитьДлинуВнешнегоНомера();
	Для Каждого элемИзбр Из Избранное Цикл
		Если элемИзбр.ПометкаУдаления Тогда
			элемИзбр.ИндексКартинкиСтатуса = 7;
		Иначе
			Если ЗначениеЗаполнено(элемИзбр.Номер) И элемИзбр.ОтслеживатьСтатус Тогда
				длинаНомераИзбр = СтрДлина(элемИзбр.Номер);
				Если длинаНомераИзбр >= длинаВнешнегоНомера Тогда
					Продолжить;
				КонецЕсли;
				обЭкстеншИзбр = соотвНомера.Получить("Extension_" + элемИзбр.Номер);
				Если обЭкстеншИзбр <> Неопределено Тогда
					СтатусИзбр = Число(обЭкстеншИзбр.Получить("status"));
					индексКартинкиИзбр = бит_АТСКлиент.ПолучитьИндексКартинкиСтатуса(СтатусИзбр);
					УстановитьСтатусНомераИзбранного(элемИзбр.Номер, индексКартинкиИзбр);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	элТекущЗвонок = Элементы.Звонки.ТекущиеДанные;
	ИндексТекущейСтрокиЗвонков = Звонки.Индекс(элТекущЗвонок);
	стрТекущийСвойНомер = "";
	Если элТекущЗвонок <> Неопределено Тогда
		стрТекущийСвойНомер = элТекущЗвонок.СвойНомер;
	КонецЕсли;

	Звонки.Очистить();
	
	//
	ОбновитьСтатусСвязанногоНомера(соотвНомера, НомерСвязанногоТелефона, стрТекущийСвойНомер, СостояниеСвязанногоТелефона);
	ОбновитьСтатусСвязанногоНомера(соотвНомера, НомерСвязанногоТелефонаДоп, стрТекущийСвойНомер, СостояниеСвязанногоТелефонаДоп);
	//
	
	бит_АТСКлиент.УдалитьНеобновленныеКонтактыИзКэша(кэшКонтактов);

	Если (ИндексТекущейСтрокиЗвонков >= 0) И (ИндексТекущейСтрокиЗвонков < Звонки.Количество()) Тогда
		ВыделеннаяСтрока = Звонки[ИндексТекущейСтрокиЗвонков];
		Элементы.Звонки.ТекущаяСтрока = ВыделеннаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОшибкиВебСервиса(стрОписаниеИсключения)
	бит_АТСКлиент.ОбработкаОшибки(ТекущаяАТС, "ВебСервисМониторАТС", "ВебСервисУправлениеАТС_Ошибка", стрОписаниеИсключения, ЭтаФорма);
	ПроверкаВосстановленияПодключения();
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВосстановленияПодключения()
	
	Если Подключен Тогда
		ВосстановлениеПодключения = Истина;
	КонецЕсли;
	
	Отключить();
	
	Если ВосстановлениеПодключения Тогда
		бит_ТелефонияКлиент.ВывестиСообщение("Соединение с АТС потеряно, попытка переподключения...", ЭтаФорма);
		ПодключитьОбработчикОжидания("Подключить", 10, Истина);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

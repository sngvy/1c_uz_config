
&НаСервере
Функция РасчитатьГрафикПлатежейИНачисленийНачальныеОстатки(Договор, ДатаРасчета, ТаблицаПлатежей, Остатки) Экспорт
	Если Договор.ПрограммаРасчета.ПользовательскаяПрограмма Тогда
		Выполнить("График = " + Договор.ПрограммаРасчета.ИмяОбщегоМодуля + ".РасчитатьГрафикПлатежейИНачислений(Договор, ДатаРасчета, ТаблицаПлатежей, Остатки);");
	Иначе
		График = РасчетЗадолженностиМФО_БазоваяПрограмма.РасчитатьГрафикПлатежейИНачислений(Договор, ДатаРасчета, ТаблицаПлатежей, Остатки);
	КонецЕсли;
	Возврат График;
КонецФункции

Функция РассчитатьГрафикПлановыхПогашений(Договор, СписокПлатежей) Экспорт
	Если Договор.ПрограммаРасчета.ПользовательскаяПрограмма Тогда
		Выполнить("График = " + Договор.ПрограммаРасчета.ИмяОбщегоМодуля + ".РассчитатьГрафикПлановыхПогашений(Договор, СписокПлатежей);");
	Иначе
		График = РасчетЗадолженностиМФО_БазоваяПрограмма.РассчитатьГрафикПлановыхПогашений(Договор, СписокПлатежей);
	КонецЕсли;
	Возврат График;	
КонецФункции

Функция РассчитатьСписокПлатежей(Договор) Экспорт
	Если Договор.ПрограммаРасчета.ПользовательскаяПрограмма Тогда
		Выполнить("График = " + Договор.ПрограммаРасчета.ИмяОбщегоМодуля + ".РассчитатьСписокПлатежей(Договор);");
	Иначе
		График = РасчетЗадолженностиМФО_БазоваяПрограмма.РассчитатьСписокПлатежей(Договор);
	КонецЕсли;
	Возврат График;	
КонецФункции

&НаСервере
Процедура РассчитатьГрафикПоЗайму(Займ, ДатаНачала) Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ДоговорМикрозайма.Ссылка КАК Договор,
	                      |	ВЫБОР
	                      |		КОГДА ДоговорМикрозайма.ОстаткиДата = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	                      |			ТОГДА ДоговорМикрозайма.ДатаВыдачиЗайма
	                      |		ИНАЧЕ ДоговорМикрозайма.ОстаткиДата
	                      |	КОНЕЦ КАК Дата
	                      |ПОМЕСТИТЬ ВТ
	                      |ИЗ
	                      |	Документ.ДоговорМикрозайма КАК ДоговорМикрозайма
	                      |ГДЕ
	                      |	ДоговорМикрозайма.Займ = &Займ
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	РеструктуризацияМикрозайма.Ссылка,
	                      |	РеструктуризацияМикрозайма.ДатаРеструктуризации
	                      |ИЗ
	                      |	Документ.РеструктуризацияМикрозайма КАК РеструктуризацияМикрозайма
	                      |ГДЕ
	                      |	РеструктуризацияМикрозайма.Займ = &Займ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ.Договор КАК Договор,
	                      |	ВТ.Дата КАК Дата
	                      |ИЗ
	                      |	ВТ КАК ВТ
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Дата");
	Запрос.УстановитьПараметр("Займ", Займ);
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		ДоговорСсылка = Результат.Договор;
		Договор = ДоговорСсылка.ПолучитьОбъект();
		попытка
			Договор.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Продолжить;
		КонецПопытки;	
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьСрез(Займ) Экспорт
	ДатаРасчета = РасчетЗадолженностиМФО.ПолучитьДатуРасчетаСУчетомГоризонта(НачалоДня(ТекущаяДатаСеанса()));
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ДоговорМикрозайма.Ссылка КАК Договор,
	                      |	ДоговорМикрозайма.ДатаВыдачиЗайма КАК Дата
	                      |ПОМЕСТИТЬ ВТ
	                      |ИЗ
	                      |	Документ.ДоговорМикрозайма КАК ДоговорМикрозайма
	                      |ГДЕ
	                      |	ДоговорМикрозайма.Займ = &Займ
	                      |	И ДоговорМикрозайма.Проведен = ИСТИНА
	                      |	И ДоговорМикрозайма.ПометкаУдаления = ЛОЖЬ
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	РеструктуризацияМикрозайма.Ссылка,
	                      |	РеструктуризацияМикрозайма.ДатаРеструктуризации
	                      |ИЗ
	                      |	Документ.РеструктуризацияМикрозайма КАК РеструктуризацияМикрозайма
	                      |ГДЕ
	                      |	РеструктуризацияМикрозайма.Займ = &Займ
	                      |	И РеструктуризацияМикрозайма.Проведен = ИСТИНА
	                      |	И РеструктуризацияМикрозайма.ПометкаУдаления = ЛОЖЬ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ.Договор КАК Договор,
	                      |	ВТ.Дата КАК Дата
	                      |ИЗ
	                      |	ВТ КАК ВТ
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Дата");
	Запрос.УстановитьПараметр("Займ", Займ);
	Результат = Запрос.Выполнить().Выгрузить();
	Для к = 0 по Результат.Количество() - 1 Цикл
		Договор = Результат[к].Договор;
		ТаблицаПлатежей = РасчетЗадолженностиМФО.ПолучитьИсториюПлатежей(Договор);
		Если к = Результат.Количество() - 1 Тогда
			Дата = Макс(ДатаРасчета, Договор.ДатаПогашения);
		Иначе
			Дата = Результат[к + 1].Договор.ДатаРеструктуризации;
		КонецЕсли;
		Если к = 0 Тогда
			РассчитанныйГрафик = РасчетЗадолженностиМФО.РасчитатьГрафикПлатежейИНачисленийНачальныеОстатки(Договор, Дата, ТаблицаПлатежей, Договор);
		Иначе
			НовыйГрафик = РасчетЗадолженностиМФО.РасчитатьГрафикПлатежейИНачисленийНачальныеОстатки(Договор, Дата, ТаблицаПлатежей, Договор);
			НовыйГрафик.Удалить(0);
			ЗагрузитьВТаблицуЗначений(НовыйГрафик, РассчитанныйГрафик);
		КонецЕсли;	
	КонецЦикла;
	Возврат РассчитанныйГрафик;	
КонецФункции

Процедура ПерерасчитатьСУчетомПлатежа(Займ, ДатаПлатежа, СуммаПлатежа, Проведение) Экспорт
	ТекущийДоговор = ПолучитьТекущийДоговор(Займ, НачалоДня(ТекущаяДатаСеанса()));
	Если ТекущийДоговор = Неопределено Или Не ЗначениеЗаполнено(ТекущийДоговор) Тогда
		Возврат;
	КонецЕсли;
	Если ДатаПлатежа <= ТекущийДоговор.ДатаВыдачиЗайма Тогда
		Сообщить("Ошибка!");
	Иначе
		
		ДокументОбъект = ТекущийДоговор.ПолучитьОбъект();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		
		Если Не ТекущийДоговор.ПрограммаРасчета.Автопролонгация Тогда
			Возврат;
		КонецЕсли;
		
		Если ТекущийДоговор.ДатаПогашения > ДатаПлатежа Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	РеструктуризацияМикрозайма.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	Документ.РеструктуризацияМикрозайма КАК РеструктуризацияМикрозайма
		                      |ГДЕ
		                      |	РеструктуризацияМикрозайма.Проведен = ИСТИНА
		                      |	И РеструктуризацияМикрозайма.Займ = &Займ
		                      |	И РеструктуризацияМикрозайма.ВидРеструктуризации = &ВидРеструктуризации");
		Запрос.УстановитьПараметр("Займ", Займ);
		Запрос.УстановитьПараметр("ВидРеструктуризации", ПЕречисления.ВидыРеструктуризацииЗадолженности.Автопролонгация);
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() >= ТекущийДоговор.ПрограммаРасчета.КоличествоАвтопролонгаций Тогда
			Возврат;
		КонецЕсли;
		
		Остатки = ПолучитьОстаткиПоДоговоруНаДату(ТекущийДоговор, ДатаПлатежа); 
		
		Если Остатки = Неопределено Тогда  
			Возврат;
		Иначе	
			Если Остатки.ОстаткиПроценты = 0 И Проведение Тогда
				ДокументОбъект = Документы.РеструктуризацияМикрозайма.СоздатьДокумент();
				ДокументОбъект.Займ = Займ;
				ДокументОбъект.ВидРеструктуризации = Перечисления.ВидыРеструктуризацииЗадолженности.Автопролонгация;
				ДокументОбъект.ДатаРеструктуризации = ДатаПлатежа;
				ДокументОбъект.ЗаполнитьДанныеПоЗайму();
				ДокументОбъект.Дата = ДатаПлатежа;
				
				ДокументОбъект.ДатаВыдачиЗайма = ДатаПлатежа;
				ДокументОбъект.ДатаПогашения = РасчетЗадолженностиМФО.ДобавитьПериодКДате(ДокументОбъект.ДатаВыдачиЗайма, документОбъект.ПериодичностьСрокаЗайма, ДокументОбъект.Срок);
				ДокументОбъект.ОстаткиОсновнойДолг = 0;
				
				Список = РасчетЗадолженностиМФО.РассчитатьСписокПлатежей(ДокументОбъект);
				График = РасчетЗадолженностиМФО.РассчитатьГрафикПлановыхПогашений(ДокументОбъект, Список);
				Для Каждого стр Из График Цикл
					стрТаб = ДокументОбъект.ГрафикПлатежей.Добавить();
					ЗаполнитьЗначенияСвойств(стрТаб, стр);
				КонецЦикла;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьДатуДопСоглашения(Договор) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	РеструктуризацияМикрозайма.Ссылка КАК Ссылка,
	                      |	РеструктуризацияМикрозайма.ДатаРеструктуризации КАК ДатаРеструктуризации
	                      |ИЗ
	                      |	Документ.РеструктуризацияМикрозайма КАК РеструктуризацияМикрозайма
	                      |ГДЕ
	                      |	РеструктуризацияМикрозайма.ТекущийДоговор = &ТекущийДоговор
	                      |	И РеструктуризацияМикрозайма.ПометкаУдаления = ЛОЖЬ
	                      |	И РеструктуризацияМикрозайма.Проведен = ИСТИНА
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ДатаРеструктуризации");
	Запрос.УстановитьПараметр("ТекущийДоговор", Договор);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.ДатаРеструктуризации;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьТекущийДоговор(Займ, Дата) Экспорт	
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//                      |	ДоговорМикрозайма.Ссылка КАК Договор,
	//                      |	ВЫБОР
	//                      |		КОГДА ДоговорМикрозайма.ОстаткиДата = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//                      |			ТОГДА ДоговорМикрозайма.ДатаВыдачиЗайма
	//                      |		ИНАЧЕ ДоговорМикрозайма.ОстаткиДата
	//                      |	КОНЕЦ КАК Дата
	//                      |ПОМЕСТИТЬ ВТ
	//                      |ИЗ
	//                      |	Документ.ДоговорМикрозайма КАК ДоговорМикрозайма
	//                      |ГДЕ
	//                      |	ДоговорМикрозайма.Займ = &Займ
	//                      |	И ДоговорМикрозайма.Проведен = ИСТИНА
	//                      |	И ДоговорМикрозайма.ПометкаУдаления = ЛОЖЬ
	//                      |
	//                      |ОБЪЕДИНИТЬ ВСЕ
	//                      |
	//                      |ВЫБРАТЬ
	//                      |	РеструктуризацияМикрозайма.Ссылка,
	//                      |	РеструктуризацияМикрозайма.ДатаВыдачиЗайма
	//                      |ИЗ
	//                      |	Документ.РеструктуризацияМикрозайма КАК РеструктуризацияМикрозайма
	//                      |ГДЕ
	//                      |	РеструктуризацияМикрозайма.Займ = &Займ
	//                      |	И РеструктуризацияМикрозайма.Проведен = ИСТИНА
	//                      |	И РеструктуризацияМикрозайма.ПометкаУдаления = ЛОЖЬ
	//                      |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ
	//                      |	МАКСИМУМ(ВТ.Дата) КАК Дата
	//                      |ПОМЕСТИТЬ МаксимальнаяДата
	//                      |ИЗ
	//                      |	ВТ КАК ВТ
	//                      |ГДЕ
	//                      |	ВТ.Дата < &Дата
	//                      |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ
	//                      |	ВТ.Договор КАК Договор,
	//                      |	МаксимальнаяДата.Дата КАК Дата
	//                      |ИЗ
	//                      |	ВТ КАК ВТ
	//                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальнаяДата КАК МаксимальнаяДата
	//                      |		ПО ВТ.Дата = МаксимальнаяДата.Дата");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ДоговорМикрозайма.Ссылка КАК Договор,
	                      |	ВЫБОР
	                      |		КОГДА ДоговорМикрозайма.ОстаткиДата = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	                      |			ТОГДА ДоговорМикрозайма.ДатаВыдачиЗайма
	                      |		ИНАЧЕ ДоговорМикрозайма.ОстаткиДата
	                      |	КОНЕЦ КАК Дата
	                      |ПОМЕСТИТЬ ВТ
	                      |ИЗ
	                      |	Документ.ДоговорМикрозайма КАК ДоговорМикрозайма
	                      |ГДЕ
	                      |	ДоговорМикрозайма.Займ = &Займ
	                      |	И ДоговорМикрозайма.Проведен = ИСТИНА
	                      |	И ДоговорМикрозайма.ПометкаУдаления = ЛОЖЬ
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	РеструктуризацияМикрозайма.Ссылка,
	                      |	РеструктуризацияМикрозайма.ДатаВыдачиЗайма
	                      |ИЗ
	                      |	Документ.РеструктуризацияМикрозайма КАК РеструктуризацияМикрозайма
	                      |ГДЕ
	                      |	РеструктуризацияМикрозайма.Займ = &Займ
	                      |	И РеструктуризацияМикрозайма.Проведен = ИСТИНА
	                      |	И РеструктуризацияМикрозайма.ПометкаУдаления = ЛОЖЬ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	МАКСИМУМ(ВТ.Договор) КАК Договор
	                      |ИЗ
	                      |	ВТ КАК ВТ");
	
	Запрос.УстановитьПараметр("Займ", Займ);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Договор;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция ДатаПоследнегоДопСоглашения(Займ) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЕСТЬNULL(МАКСИМУМ(РеструктуризацияМикрозайма.ДатаРеструктуризации), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРеструктуризации
	                      |ИЗ
	                      |	Документ.РеструктуризацияМикрозайма КАК РеструктуризацияМикрозайма
	                      |ГДЕ
	                      |	РеструктуризацияМикрозайма.Займ = &Займ
	                      |	И РеструктуризацияМикрозайма.ПометкаУдаления = ЛОЖЬ
	                      |	И РеструктуризацияМикрозайма.Проведен = ИСТИНА");
	Запрос.УстановитьПараметр("Займ", Займ);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.ДатаРеструктуризации;
	Иначе
		Возврат Дата(00010101);
	КонецЕсли;
КонецФункции

Процедура ОчиститьДвиженияПоДоговору(Договор, Дата) Экспорт
		
КонецПроцедуры

Процедура РассчитатьГрафикПоДоговору(Договор, ДатаРасчета, Остатки) Экспорт
	// удалено старый регистр
КонецПроцедуры

Функция ПолучитьАктуальныйГрафик(Займ, ДатаГрафика) Экспорт
	Возврат Неопределено;	
КонецФункции

Функция ПолучитьОстаткиНаДату(Займ, ДатаОстатков) Экспорт
	Договор = ПолучитьТекущийДоговор(Займ, ДатаОстатков);
	Если Договор = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "На данную дату не определен договор микрозайма!";
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецЕсли;
	Возврат ПолучитьОстаткиПоДоговоруНаДату(Договор, ДатаОстатков);
КонецФункции

Функция ПолучитьОстаткиПоДоговоруНаДату(Договор, ДатаОстатков) Экспорт	
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//                      |	ДолговыеОбязательства.Ссылка КАК Ссылка
	//                      |ПОМЕСТИТЬ вт_Займ
	//                      |ИЗ
	//                      |	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	//                      |ГДЕ
	//                      |	ДолговыеОбязательства.Ссылка = &Займ
	//                      |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ
	//                      |	вт_Займ.Ссылка КАК Займ,
	//                      |	&Дата КАК ОстаткиДата,
	//                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ОсновнойДолгОстаток, 0) КАК ОстаткиОсновнойДолг,
	//                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПроцентыОстаток, 0) КАК ОстаткиПроценты,
	//                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПроцентыНачисленныеВПериодПросрочкиОстаток, 0) КАК ОстаткиПросроченныеПроценты,
	//                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ШтрафыОстаток, 0) КАК ОстаткиШтрафы,
	//                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПениОстаток, 0) КАК ОстаткиПени,
	//                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ОсновнойДолгГрафикОстаток, 0) КАК ОстаткиОсновнойДолгГрафик,
	//                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПроцентыГрафикОстаток, 0) КАК ОстаткиПроцентыГрафик,
	//                      |	ЕСТЬNULL(РАЗНОСТЬДАТ(ПериодыПросрочкиСрезПоследних.Период, &Дата, ДЕНЬ), 0) КАК ДниПросрочки_ФИФО,
	//                      |	ЕСТЬNULL(РАЗНОСТЬДАТ(ПериодыПросрочкиСрезПоследних1.Период, &Дата, ДЕНЬ), 0) КАК ДниПросрочки,
	//                      |	РасчетыПоДоговорамОбороты.ПроцентыПриход + РасчетыПоДоговорамОбороты.ПроцентыНачисленныеВПериодПросрочкиПриход КАК ОстаткиПроцентыЗаВесьПериод,
	//                      |	РасчетыПоДоговорамОбороты1.ПроцентыПриход + РасчетыПоДоговорамОбороты1.ПроцентыНачисленныеВПериодПросрочкиПриход + РасчетыПоДоговорамОбороты1.ШтрафыПриход + РасчетыПоДоговорамОбороты1.ПениПриход КАК ОстаткиНачисленияЗаВесьПериод,
	//                      |	РасчетыПоДоговорамОстатки.ОсновнойДолгГрафикОстаток КАК ОстатокОДФактический,
	//                      |	РасчетыПоДоговорамОбороты2.ПроцентыНачисленныеВПериодПросрочкиПриход КАК СуммаПросроченныхПроцентов
	//                      |ИЗ
	//                      |	вт_Займ КАК вт_Займ
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыПоДоговорам.Остатки(&Период, ) КАК РасчетыПоДоговорамОстатки
	//                      |		ПО вт_Займ.Ссылка = РасчетыПоДоговорамОстатки.Займ
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыПросрочки.СрезПоследних(&Период, МетодРасчета = &ФИФО) КАК ПериодыПросрочкиСрезПоследних
	//                      |		ПО вт_Займ.Ссылка = ПериодыПросрочкиСрезПоследних.Займ
	//                      |			И (ПериодыПросрочкиСрезПоследних.ДатаПогашения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыПросрочки.СрезПоследних(&Период, МетодРасчета = &ЛИФО) КАК ПериодыПросрочкиСрезПоследних1
	//                      |		ПО вт_Займ.Ссылка = ПериодыПросрочкиСрезПоследних1.Займ
	//                      |			И (ПериодыПросрочкиСрезПоследних1.ДатаПогашения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыПоДоговорам.Обороты(, &Период, , ) КАК РасчетыПоДоговорамОбороты
	//                      |		ПО вт_Займ.Ссылка = РасчетыПоДоговорамОбороты.Займ
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыПоДоговорам.Обороты(, &Период, , ) КАК РасчетыПоДоговорамОбороты1
	//                      |		ПО вт_Займ.Ссылка = РасчетыПоДоговорамОбороты1.Займ
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыПоДоговорам.Обороты(&ПоследнийПлановыйПлатеж, &Период, , ) КАК РасчетыПоДоговорамОбороты2
	//                      |		ПО вт_Займ.Ссылка = РасчетыПоДоговорамОбороты2.Займ");
	//Запрос.УстановитьПараметр("Займ", Договор.Займ);
	//Запрос.УстановитьПараметр("Период", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	//Запрос.УстановитьПараметр("Дата", ДатаОстатков);
	//Запрос.УстановитьПараметр("ФИФО", Перечисления.МетодыРасчетаДнейПросрочки.FIFO);
	//Запрос.УстановитьПараметр("ЛИФО", Перечисления.МетодыРасчетаДнейПросрочки.LIFO);
	//Запрос.УстановитьПараметр("ПоследнийПлановыйПлатеж", );
	
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//                      |	ДолговыеОбязательства.Ссылка КАК Ссылка
	//                      |ПОМЕСТИТЬ вт_Займ
	//                      |ИЗ
	//                      |	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	//                      |ГДЕ
	//                      |	ДолговыеОбязательства.Ссылка = &Займ
	//                      |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ
	//                      |	ПериодыПросрочкиСрезПоследних.ДатаПросрочки КАК ДатаПросрочки,
	//                      |	ПериодыПросрочкиСрезПоследних.Займ КАК Займ,
	//                      |	ПериодыПросрочкиСрезПоследних.МетодРасчета КАК МетодРасчета,
	//                      |	ПериодыПросрочкиСрезПоследних.ДатаПогашения КАК ДатаПогашения
	//                      |ПОМЕСТИТЬ вт_ФИФО
	//                      |ИЗ
	//                      |	РегистрСведений.ПериодыПросрочки.СрезПоследних(
	//                      |			&Период,
	//                      |			Займ = &Займ
	//                      |				И МетодРасчета = &ФИФО) КАК ПериодыПросрочкиСрезПоследних
	//                      |ГДЕ
	//                      |	ПериодыПросрочкиСрезПоследних.ДатаПросрочки < &Дата
	//                      |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ
	//                      |	ПериодыПросрочкиСрезПоследних.ДатаПросрочки КАК ДатаПросрочки,
	//                      |	ПериодыПросрочкиСрезПоследних.Займ КАК Займ,
	//                      |	ПериодыПросрочкиСрезПоследних.МетодРасчета КАК МетодРасчета,
	//                      |	ПериодыПросрочкиСрезПоследних.ДатаПогашения КАК ДатаПогашения
	//                      |ПОМЕСТИТЬ вт_ЛИФО
	//                      |ИЗ
	//                      |	РегистрСведений.ПериодыПросрочки.СрезПоследних(
	//                      |			&Период,
	//                      |			Займ = &Займ
	//                      |				И МетодРасчета = &ЛИФО) КАК ПериодыПросрочкиСрезПоследних
	//                      |ГДЕ
	//                      |	ПериодыПросрочкиСрезПоследних.ДатаПросрочки < &Дата
	//                      |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ
	//                      |	МАКСИМУМ(вт_ФИФО.ДатаПросрочки) КАК ДатаПросрочки
	//                      |ПОМЕСТИТЬ вт_ФИФО_максимум
	//                      |ИЗ
	//                      |	вт_ФИФО КАК вт_ФИФО
	//                      |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ
	//                      |	МАКСИМУМ(вт_ЛИФО.ДатаПросрочки) КАК ДатаПросрочки
	//                      |ПОМЕСТИТЬ вт_ЛИФО_максимум
	//                      |ИЗ
	//                      |	вт_ЛИФО КАК вт_ЛИФО
	//                      |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ
	//                      |	вт_ФИФО.Займ КАК Займ,
	//                      |	вт_ФИФО.ДатаПогашения КАК ДатаПогашения,
	//                      |	вт_ФИФО.ДатаПросрочки КАК ДатаПросрочки
	//                      |ПОМЕСТИТЬ вт_ФИФО_ДатаПогашения
	//                      |ИЗ
	//                      |	вт_ФИФО КАК вт_ФИФО
	//                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_ФИФО_максимум КАК вт_ФИФО_максимум
	//                      |		ПО вт_ФИФО.ДатаПросрочки = вт_ФИФО_максимум.ДатаПросрочки
	//                      |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ
	//                      |	вт_ЛИФО.Займ КАК Займ,
	//                      |	вт_ЛИФО.ДатаПогашения КАК ДатаПогашения,
	//                      |	вт_ЛИФО.ДатаПросрочки КАК ДатаПросрочки
	//                      |ПОМЕСТИТЬ вт_ЛИФО_ДатаПогашения
	//                      |ИЗ
	//                      |	вт_ЛИФО КАК вт_ЛИФО
	//                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_ЛИФО_максимум КАК вт_ЛИФО_максимум
	//                      |		ПО вт_ЛИФО.ДатаПросрочки = вт_ЛИФО_максимум.ДатаПросрочки
	//                      |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ
	//                      |	вт_Займ.Ссылка КАК Ссылка,
	//                      |	ЕСТЬNULL(МАКСИМУМ(РасчетыПоДоговорам.Регистратор), ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК Регистратор
	//                      |ПОМЕСТИТЬ ДействующийДоговор
	//                      |ИЗ
	//                      |	вт_Займ КАК вт_Займ
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыПоДоговорам КАК РасчетыПоДоговорам
	//                      |		ПО вт_Займ.Ссылка = РасчетыПоДоговорам.Займ
	//                      |			И (РасчетыПоДоговорам.Период <= &Дата)
	//                      |
	//                      |СГРУППИРОВАТЬ ПО
	//                      |	вт_Займ.Ссылка
	//                      |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ
	//                      |	вт_Займ.Ссылка КАК Займ,
	//                      |	&Дата КАК ОстаткиДата,
	//                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ОсновнойДолгГрафикОстаток, 0) КАК ОстаткиОсновнойДолг,
	//                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПроцентыГрафикОстаток, 0) - ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПроцентыНачисленныеВПериодПросрочкиОстаток, 0) КАК ОстаткиПроценты,
	//                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПроцентыОстаток, 0) КАК ОстатокПроцентовФактический,
	//                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ОсновнойДолгОстаток, 0) КАК ОстатокОДФактический,
	//                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПроцентыНачисленныеВПериодПросрочкиОстаток, 0) КАК ОстаткиПросроченныеПроценты,
	//                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ШтрафыОстаток, 0) КАК ОстаткиШтрафы,
	//                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПениОстаток, 0) КАК ОстаткиПени,
	//                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ОсновнойДолгГрафикОстаток, 0) + ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПроцентыГрафикОстаток, 0) + ЕСТЬNULL(РасчетыПоДоговорамОстатки.ШтрафыОстаток, 0) + ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПениОстаток, 0) КАК Сумма,
	//                      |	ВЫБОР
	//                      |		КОГДА вт_ФИФО_ДатаПогашения.ДатаПогашения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//                      |			ТОГДА ЕСТЬNULL(РАЗНОСТЬДАТ(вт_ФИФО_ДатаПогашения.ДатаПросрочки, &Дата, ДЕНЬ), 0)
	//                      |		ИНАЧЕ 0
	//                      |	КОНЕЦ КАК ДниПросрочкиФИФО,
	//                      |	ВЫБОР
	//                      |		КОГДА вт_ЛИФО_ДатаПогашения.ДатаПогашения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//                      |			ТОГДА ЕСТЬNULL(РАЗНОСТЬДАТ(вт_ЛИФО_ДатаПогашения.ДатаПросрочки, &Дата, ДЕНЬ), 0)
	//                      |		ИНАЧЕ 0
	//                      |	КОНЕЦ КАК ДниПросрочки,
	//                      |	ДействующийДоговор.Регистратор КАК ДействующийДоговор,
	//                      |	СУММА(РасчетыПоДоговорам.ПроцентыГрафик) + СУММА(РасчетыПоДоговорам.Штрафы) + СУММА(РасчетыПоДоговорам.Пени) КАК ОстаткиНачисленияЗаВесьПериод,
	//                      |	СУММА(РасчетыПоДоговорам.ПроцентыГрафик) КАК ОстаткиПроцентыЗаВесьПериод
	//                      |ИЗ
	//                      |	вт_Займ КАК вт_Займ
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыПоДоговорам.Остатки(&Период, ) КАК РасчетыПоДоговорамОстатки
	//                      |		ПО вт_Займ.Ссылка = РасчетыПоДоговорамОстатки.Займ
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ вт_ФИФО_ДатаПогашения КАК вт_ФИФО_ДатаПогашения
	//                      |		ПО вт_Займ.Ссылка = вт_ФИФО_ДатаПогашения.Займ
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ вт_ЛИФО_ДатаПогашения КАК вт_ЛИФО_ДатаПогашения
	//                      |		ПО вт_Займ.Ссылка = вт_ЛИФО_ДатаПогашения.Займ
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ ДействующийДоговор КАК ДействующийДоговор
	//                      |		ПО вт_Займ.Ссылка = ДействующийДоговор.Ссылка
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыПоДоговорам КАК РасчетыПоДоговорам
	//                      |		ПО вт_Займ.Ссылка = РасчетыПоДоговорам.Займ
	//                      |			И (РасчетыПоДоговорам.ВидДвиженияЗадолженности = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПоРасчетам.Начисление))
	//                      |			И (РасчетыПоДоговорам.Период <= &Дата)
	//                      |
	//                      |СГРУППИРОВАТЬ ПО
	//                      |	вт_Займ.Ссылка,
	//                      |	ДействующийДоговор.Регистратор,
	//                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ОсновнойДолгГрафикОстаток, 0),
	//                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПроцентыГрафикОстаток, 0) - ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПроцентыНачисленныеВПериодПросрочкиОстаток, 0),
	//                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПроцентыОстаток, 0),
	//                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ОсновнойДолгОстаток, 0),
	//                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПроцентыНачисленныеВПериодПросрочкиОстаток, 0),
	//                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ШтрафыОстаток, 0),
	//                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПениОстаток, 0),
	//                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ОсновнойДолгГрафикОстаток, 0) + ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПроцентыГрафикОстаток, 0) + ЕСТЬNULL(РасчетыПоДоговорамОстатки.ШтрафыОстаток, 0) + ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПениОстаток, 0),
	//                      |	ВЫБОР
	//                      |		КОГДА вт_ФИФО_ДатаПогашения.ДатаПогашения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//                      |			ТОГДА ЕСТЬNULL(РАЗНОСТЬДАТ(вт_ФИФО_ДатаПогашения.ДатаПросрочки, &Дата, ДЕНЬ), 0)
	//                      |		ИНАЧЕ 0
	//                      |	КОНЕЦ,
	//                      |	ВЫБОР
	//                      |		КОГДА вт_ЛИФО_ДатаПогашения.ДатаПогашения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//                      |			ТОГДА ЕСТЬNULL(РАЗНОСТЬДАТ(вт_ЛИФО_ДатаПогашения.ДатаПросрочки, &Дата, ДЕНЬ), 0)
	//                      |		ИНАЧЕ 0
	//                      |	КОНЕЦ");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ДолговыеОбязательства.Ссылка КАК Ссылка
	                      |ПОМЕСТИТЬ вт_Займ
	                      |ИЗ
	                      |	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	                      |ГДЕ
	                      |	ДолговыеОбязательства.Ссылка = &Займ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ПериодыПросрочкиСрезПоследних.ДатаПросрочки КАК ДатаПросрочки,
	                      |	ПериодыПросрочкиСрезПоследних.Займ КАК Займ,
	                      |	ПериодыПросрочкиСрезПоследних.МетодРасчета КАК МетодРасчета,
	                      |	ПериодыПросрочкиСрезПоследних.ДатаПогашения КАК ДатаПогашения
	                      |ПОМЕСТИТЬ вт_ФИФО
	                      |ИЗ
	                      |	РегистрСведений.ПериодыПросрочки.СрезПоследних(
	                      |			&Период,
	                      |			Займ = &Займ
	                      |				И МетодРасчета = &ФИФО) КАК ПериодыПросрочкиСрезПоследних
	                      |ГДЕ
	                      |	ПериодыПросрочкиСрезПоследних.ДатаПросрочки < &Дата
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ПериодыПросрочкиСрезПоследних.ДатаПросрочки КАК ДатаПросрочки,
	                      |	ПериодыПросрочкиСрезПоследних.Займ КАК Займ,
	                      |	ПериодыПросрочкиСрезПоследних.МетодРасчета КАК МетодРасчета,
	                      |	ПериодыПросрочкиСрезПоследних.ДатаПогашения КАК ДатаПогашения
	                      |ПОМЕСТИТЬ вт_ЛИФО
	                      |ИЗ
	                      |	РегистрСведений.ПериодыПросрочки.СрезПоследних(
	                      |			&Период,
	                      |			Займ = &Займ
	                      |				И МетодРасчета = &ЛИФО) КАК ПериодыПросрочкиСрезПоследних
	                      |ГДЕ
	                      |	ПериодыПросрочкиСрезПоследних.ДатаПросрочки < &Дата
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	МАКСИМУМ(вт_ФИФО.ДатаПросрочки) КАК ДатаПросрочки
	                      |ПОМЕСТИТЬ вт_ФИФО_максимум
	                      |ИЗ
	                      |	вт_ФИФО КАК вт_ФИФО
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	МАКСИМУМ(вт_ЛИФО.ДатаПросрочки) КАК ДатаПросрочки
	                      |ПОМЕСТИТЬ вт_ЛИФО_максимум
	                      |ИЗ
	                      |	вт_ЛИФО КАК вт_ЛИФО
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	вт_ФИФО.Займ КАК Займ,
	                      |	вт_ФИФО.ДатаПогашения КАК ДатаПогашения,
	                      |	вт_ФИФО.ДатаПросрочки КАК ДатаПросрочки
	                      |ПОМЕСТИТЬ вт_ФИФО_ДатаПогашения
	                      |ИЗ
	                      |	вт_ФИФО КАК вт_ФИФО
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_ФИФО_максимум КАК вт_ФИФО_максимум
	                      |		ПО вт_ФИФО.ДатаПросрочки = вт_ФИФО_максимум.ДатаПросрочки
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	вт_ЛИФО.Займ КАК Займ,
	                      |	вт_ЛИФО.ДатаПогашения КАК ДатаПогашения,
	                      |	вт_ЛИФО.ДатаПросрочки КАК ДатаПросрочки
	                      |ПОМЕСТИТЬ вт_ЛИФО_ДатаПогашения
	                      |ИЗ
	                      |	вт_ЛИФО КАК вт_ЛИФО
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_ЛИФО_максимум КАК вт_ЛИФО_максимум
	                      |		ПО вт_ЛИФО.ДатаПросрочки = вт_ЛИФО_максимум.ДатаПросрочки
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	вт_Займ.Ссылка КАК Ссылка,
	                      |	ЕСТЬNULL(МАКСИМУМ(РасчетыПоДоговорам.Регистратор), ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК Регистратор
	                      |ПОМЕСТИТЬ ДействующийДоговор
	                      |ИЗ
	                      |	вт_Займ КАК вт_Займ
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыПоДоговорам КАК РасчетыПоДоговорам
	                      |		ПО вт_Займ.Ссылка = РасчетыПоДоговорам.Займ
	                      |			И (РасчетыПоДоговорам.Период <= &Дата)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	вт_Займ.Ссылка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	вт_Займ.Ссылка КАК Займ,
	                      |	&Дата КАК ОстаткиДата,
	                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ОсновнойДолгГрафикОстаток, 0) КАК ОстаткиОсновнойДолг,
	                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПроцентыГрафикОстаток, 0) - ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПроцентыНачисленныеВПериодПросрочкиОстаток, 0) КАК ОстаткиПроценты,
	                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПроцентыОстаток, 0) КАК ОстатокПроцентовФактический,
	                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ОсновнойДолгОстаток, 0) КАК ОстатокОДФактический,
	                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПроцентыНачисленныеВПериодПросрочкиОстаток, 0) КАК ОстаткиПросроченныеПроценты,
	                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ШтрафыОстаток, 0) КАК ОстаткиШтрафы,
	                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПениОстаток, 0) КАК ОстаткиПени,
	                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ОсновнойДолгГрафикОстаток, 0) + ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПроцентыГрафикОстаток, 0) + ЕСТЬNULL(РасчетыПоДоговорамОстатки.ШтрафыОстаток, 0) + ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПениОстаток, 0) КАК ОстаткиСумма,
	                      |	ВЫБОР
	                      |		КОГДА вт_ФИФО_ДатаПогашения.ДатаПогашения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	                      |			ТОГДА ЕСТЬNULL(РАЗНОСТЬДАТ(вт_ФИФО_ДатаПогашения.ДатаПросрочки, &Дата, ДЕНЬ), 0)
	                      |		ИНАЧЕ 0
	                      |	КОНЕЦ КАК ДниПросрочкиФИФО,
	                      |	ВЫБОР
	                      |		КОГДА вт_ЛИФО_ДатаПогашения.ДатаПогашения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	                      |			ТОГДА ЕСТЬNULL(РАЗНОСТЬДАТ(вт_ЛИФО_ДатаПогашения.ДатаПросрочки, &Дата, ДЕНЬ), 0)
	                      |		ИНАЧЕ 0
	                      |	КОНЕЦ КАК ДниПросрочки,
	                      |	ДействующийДоговор.Регистратор КАК ДействующийДоговор,
	                      |	РасчетыПоДоговорамОбороты.ПроцентыНачисленияОборот + РасчетыПоДоговорамОбороты.ШтрафыНачисленияОборот + РасчетыПоДоговорамОбороты.ПениНачисленияОборот КАК ОстаткиНачисленияЗаВесьПериод,
	                      |	РасчетыПоДоговорамОбороты.ПроцентыНачисленияОборот КАК ОстаткиПроцентыЗаВесьПериод
	                      |ИЗ
	                      |	вт_Займ КАК вт_Займ
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыПоДоговорам.Остатки(&Период) КАК РасчетыПоДоговорамОстатки
	                      |		ПО вт_Займ.Ссылка = РасчетыПоДоговорамОстатки.Займ
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ вт_ФИФО_ДатаПогашения КАК вт_ФИФО_ДатаПогашения
	                      |		ПО вт_Займ.Ссылка = вт_ФИФО_ДатаПогашения.Займ
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ вт_ЛИФО_ДатаПогашения КАК вт_ЛИФО_ДатаПогашения
	                      |		ПО вт_Займ.Ссылка = вт_ЛИФО_ДатаПогашения.Займ
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ДействующийДоговор КАК ДействующийДоговор
	                      |		ПО вт_Займ.Ссылка = ДействующийДоговор.Ссылка
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыПоДоговорам.Обороты(, &Период, , ) КАК РасчетыПоДоговорамОбороты
	                      |		ПО вт_Займ.Ссылка = РасчетыПоДоговорамОбороты.Займ
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	вт_Займ.Ссылка,
	                      |	ДействующийДоговор.Регистратор,
	                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ОсновнойДолгГрафикОстаток, 0),
	                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПроцентыГрафикОстаток, 0) - ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПроцентыНачисленныеВПериодПросрочкиОстаток, 0),
	                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПроцентыОстаток, 0),
	                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ОсновнойДолгОстаток, 0),
	                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПроцентыНачисленныеВПериодПросрочкиОстаток, 0),
	                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ШтрафыОстаток, 0),
	                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПениОстаток, 0),
	                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ОсновнойДолгГрафикОстаток, 0) + ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПроцентыГрафикОстаток, 0) + ЕСТЬNULL(РасчетыПоДоговорамОстатки.ШтрафыОстаток, 0) + ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПениОстаток, 0),
	                      |	ВЫБОР
	                      |		КОГДА вт_ФИФО_ДатаПогашения.ДатаПогашения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	                      |			ТОГДА ЕСТЬNULL(РАЗНОСТЬДАТ(вт_ФИФО_ДатаПогашения.ДатаПросрочки, &Дата, ДЕНЬ), 0)
	                      |		ИНАЧЕ 0
	                      |	КОНЕЦ,
	                      |	ВЫБОР
	                      |		КОГДА вт_ЛИФО_ДатаПогашения.ДатаПогашения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	                      |			ТОГДА ЕСТЬNULL(РАЗНОСТЬДАТ(вт_ЛИФО_ДатаПогашения.ДатаПросрочки, &Дата, ДЕНЬ), 0)
	                      |		ИНАЧЕ 0
	                      |	КОНЕЦ,
	                      |	РасчетыПоДоговорамОбороты.ПроцентыНачисленияОборот,
	                      |	РасчетыПоДоговорамОбороты.ПроцентыНачисленияОборот + РасчетыПоДоговорамОбороты.ШтрафыНачисленияОборот + РасчетыПоДоговорамОбороты.ПениНачисленияОборот");	
	
	Запрос.УстановитьПараметр("Займ", Договор.Займ);
	Запрос.УстановитьПараметр("Дата", ДатаОстатков);
	Запрос.УстановитьПараметр("Период", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ФИФО", Перечисления.МетодыРасчетаДнейПросрочки.FIFO);
	Запрос.УстановитьПараметр("ЛИФО", Перечисления.МетодыРасчетаДнейПросрочки.LIFO);	
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат;
	Иначе
		Сообщить("На данную дату не произведен расчет начислений");
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции

Функция ПолучитьИсториюПлатежей(Договор) Экспорт
	// пока не учитываем, что платежи могут быть сделаны ДО реструктуризации
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РеструктуризацияМикрозайма.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.РеструктуризацияМикрозайма КАК РеструктуризацияМикрозайма
	                      |ГДЕ
	                      |	РеструктуризацияМикрозайма.ТекущийДоговор = &ТекущийДоговор
	                      |	И РеструктуризацияМикрозайма.Проведен = ИСТИНА
	                      |	И РеструктуризацияМикрозайма.ПометкаУдаления = ЛОЖЬ");
	Запрос.УстановитьПараметр("ТекущийДоговор", Договор.Ссылка);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка.ИсторияПлатежей.Выгрузить();
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ИсторияПлатежей.Период КАК ДатаПлатежа,
	                      |	ИсторияПлатежей.Объект КАК Объект,
	                      |	СУММА(ИсторияПлатежей.Задолженность) КАК СуммаПлатежа
	                      |ИЗ
	                      |	РегистрНакопления.ИсторияПлатежей КАК ИсторияПлатежей
	                      |ГДЕ
	                      |	ИсторияПлатежей.Объект = &Объект
	                      |	И ИсторияПлатежей.Период > &Период
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ИсторияПлатежей.Объект,
	                      |	ИсторияПлатежей.Период");
	Запрос.УстановитьПараметр("Объект", Договор.Займ);
	Запрос.УстановитьПараметр("Период", Договор.ДатаВыдачиЗайма);
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;	
КонецФункции

Функция ПолучитьДатуРасчетаСУчетомГоризонта(ДатаРасчета) Экспорт
	ГоризонтРасчета = Константы.ГоризонтРасчетаНачисленийМикрозаймов.Получить();
	Если ГоризонтРасчета = Перечисления.ВидыГоризонтаРасчета.ДоТекущейДаты Тогда
		Дата = ДатаРасчета;
	ИначеЕсли ГоризонтРасчета = Перечисления.ВидыГоризонтаРасчета.ДоКонцаМесяца Тогда
		Дата = КонецМесяца(ДатаРасчета);
	ИначеЕсли ГоризонтРасчета = Перечисления.ВидыГоризонтаРасчета.ДоКонцаКвартала Тогда
		Дата = КонецКвартала(ДатаРасчета);
	ИначеЕсли ГоризонтРасчета = Перечисления.ВидыГоризонтаРасчета.ДоКонцаГода Тогда
		Дата = КонецГода(ДатаРасчета);
	ИначеЕсли ГоризонтРасчета = Перечисления.ВидыГоризонтаРасчета.ДоКонцаСледующегоМесяца Тогда
		Дата = КонецМесяца(ДобавитьМесяц(ДатаРасчета, 1));
	ИначеЕсли ГоризонтРасчета = Перечисления.ВидыГоризонтаРасчета.ДоКонцаСледующегоКвартала Тогда
		Дата = КонецКвартала(ДобавитьМесяц(ДатаРасчета, 3));
	ИначеЕсли ГоризонтРасчета = Перечисления.ВидыГоризонтаРасчета.ДоКонцаСледующегоГода Тогда
		Дата = КонецГода(ДобавитьМесяц(ДатаРасчета, 12));
	Иначе
		Дата = ДатаРасчета;
	КонецЕсли;
	Возврат НачалоДня(Дата);
КонецФункции

Функция ПолучитьОстаткиПоДоговору(Договор, ДатаОстатков) Экспорт
	Если ТипЗнч(Договор) = Тип("ДокументСсылка.ДоговорМикрозайма") Тогда
		Возврат ?(Договор.УчитыватьОстаткиНаДатуЦессии, Договор, Неопределено);
	ИначеЕсли ТипЗнч(Договор) = Тип("ДокументСсылка.РеструктуризацияМикрозайма") Тогда
		Если Договор.ВидРеструктуризации = Перечисления.ВидыРеструктуризацииЗадолженности.ДополнительноеСоглашение Тогда
			Возврат Договор;
		ИначеЕсли Договор.ВидРеструктуризации = Перечисления.ВидыРеструктуризацииЗадолженности.Новация Тогда
			Возврат Неопределено;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция РассчитатьГоспошлину(СуммаИска) Экспорт
    Если СуммаИска < 20000 Тогда
        Сумма = СуммаИска*0.04;
        Если Сумма < 400 Тогда
            Сумма = 400;
        КонецЕсли;
    ИначеЕсли СуммаИска >=20000 И СуммаИска < 100000 Тогда
        Сумма = 800 + (СуммаИска - 20000) * 0.03;
    ИначеЕсли СуммаИска >= 100000 и СуммаИска < 200000 Тогда
        Сумма = 3200 + (СуммаИска - 100000) * 0.02;
    ИначеЕсли СуммаИска >= 200000 и СуммаИска < 1000000 Тогда
        Сумма = 5200 + (СуммаИска - 200000)*0.01;
    ИначеЕсли СуммаИска >= 1000000 Тогда
        Сумма = 13200 + (СуммаИска - 1000000)*0.005;
        Если Сумма > 60000 Тогда
            Сумма = 60000;
        КонецЕсли;
    КонецЕсли;
    Возврат Сумма;
КонецФункции

Функция РассчитатьГоспошлинуЮр(СуммаИска) Экспорт

	Сумма = 0;
	
	Если СуммаИска < 100000 Тогда
		
		Сумма = СуммаИска*0.04;
		Если Сумма < 2000 Тогда
			Сумма = 2000;
		КонецЕсли;
		
	ИначеЕсли СуммаИска < 200000 Тогда
		Сумма = 4000 + (СуммаИска - 100000) * 0.03;
	ИначеЕсли СуммаИска < 1000000 Тогда
		Сумма = 7000 + (СуммаИска - 200000)*0.02;
	ИначеЕсли СуммаИска < 2000000 Тогда
		Сумма = 23000 + (СуммаИска - 1000000)*0.01;
	ИначеЕсли СуммаИска >= 2000000 Тогда
		Сумма = 33000 + (СуммаИска - 2000000)*0.005;
		Если Сумма > 200000 Тогда
			Сумма = 200000;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Сумма;

КонецФункции // ()


&НаСервере
Процедура РегламентноеЗаданиеПерерасчет() Экспорт

	Результат = РасчетЗадолженностиМФО_Переопределяемый.ПолучитьСписокМикрозаймов();
	Если  Результат.Количество() > 0 Тогда
		Для к = 0 по Результат.Количество() - 1 Цикл
			РасчетЗадолженностиМФО.РассчитатьГрафикПоЗайму(Результат[к].Займ, НачалоДня(ТекущаяДатаСеанса()));
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПересчетСпискаДО(СписокДО) Экспорт
	Для Каждого Элемент Из СписокДО Цикл
		РасчетЗадолженностиМФО.РассчитатьГрафикПоЗайму(Элемент, НачалоДня(ТекущаяДатаСеанса()));
	КонецЦикла;
КонецПроцедуры

Процедура АктуализацияХарактеристикСпискаМикрозаймов(СписокЗаймов)
	Для каждого стр из СписокЗаймов Цикл
		АктуализацияХарактеристикМикрозайма(стр.Займ);
	КонецЦикла;	

КонецПроцедуры

Процедура АктуализацияХарактеристикМикрозайма(Займ) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РасчетныеХарактеристики.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	                      |	РасчетныеХарактеристики.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	ПланВидовХарактеристик.РасчетныеХарактеристики КАК РасчетныеХарактеристики
	                      |ГДЕ
	                      |	РасчетныеХарактеристики.ПометкаУдаления = ЛОЖЬ");
	Характеристики = Запрос.Выполнить().Выгрузить();
	
	ДатаОстатков = НачалоДня(ТекущаяДатаСеанса());
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ДолговыеОбязательства.Ссылка КАК Ссылка
	                      |ПОМЕСТИТЬ вт_Займ
	                      |ИЗ
	                      |	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	                      |ГДЕ
	                      |	ДолговыеОбязательства.Ссылка = &Займ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ПериодыПросрочкиСрезПоследних.ДатаПросрочки КАК ДатаПросрочки,
	                      |	ПериодыПросрочкиСрезПоследних.Займ КАК Займ,
	                      |	ПериодыПросрочкиСрезПоследних.МетодРасчета КАК МетодРасчета,
	                      |	ПериодыПросрочкиСрезПоследних.ДатаПогашения КАК ДатаПогашения
	                      |ПОМЕСТИТЬ вт_ФИФО
	                      |ИЗ
	                      |	РегистрСведений.ПериодыПросрочки.СрезПоследних(
	                      |			&Период,
	                      |			Займ = &Займ
	                      |				И МетодРасчета = &ФИФО) КАК ПериодыПросрочкиСрезПоследних
	                      |ГДЕ
	                      |	ПериодыПросрочкиСрезПоследних.ДатаПросрочки < &Дата
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ПериодыПросрочкиСрезПоследних.ДатаПросрочки КАК ДатаПросрочки,
	                      |	ПериодыПросрочкиСрезПоследних.Займ КАК Займ,
	                      |	ПериодыПросрочкиСрезПоследних.МетодРасчета КАК МетодРасчета,
	                      |	ПериодыПросрочкиСрезПоследних.ДатаПогашения КАК ДатаПогашения
	                      |ПОМЕСТИТЬ вт_ЛИФО
	                      |ИЗ
	                      |	РегистрСведений.ПериодыПросрочки.СрезПоследних(
	                      |			&Период,
	                      |			Займ = &Займ
	                      |				И МетодРасчета = &ЛИФО) КАК ПериодыПросрочкиСрезПоследних
	                      |ГДЕ
	                      |	ПериодыПросрочкиСрезПоследних.ДатаПросрочки < &Дата
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	МАКСИМУМ(вт_ФИФО.ДатаПросрочки) КАК ДатаПросрочки
	                      |ПОМЕСТИТЬ вт_ФИФО_максимум
	                      |ИЗ
	                      |	вт_ФИФО КАК вт_ФИФО
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	МАКСИМУМ(вт_ЛИФО.ДатаПросрочки) КАК ДатаПросрочки
	                      |ПОМЕСТИТЬ вт_ЛИФО_максимум
	                      |ИЗ
	                      |	вт_ЛИФО КАК вт_ЛИФО
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	вт_ФИФО.Займ КАК Займ,
	                      |	вт_ФИФО.ДатаПогашения КАК ДатаПогашения,
	                      |	вт_ФИФО.ДатаПросрочки КАК ДатаПросрочки
	                      |ПОМЕСТИТЬ вт_ФИФО_ДатаПогашения
	                      |ИЗ
	                      |	вт_ФИФО КАК вт_ФИФО
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_ФИФО_максимум КАК вт_ФИФО_максимум
	                      |		ПО вт_ФИФО.ДатаПросрочки = вт_ФИФО_максимум.ДатаПросрочки
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	вт_ЛИФО.Займ КАК Займ,
	                      |	вт_ЛИФО.ДатаПогашения КАК ДатаПогашения,
	                      |	вт_ЛИФО.ДатаПросрочки КАК ДатаПросрочки
	                      |ПОМЕСТИТЬ вт_ЛИФО_ДатаПогашения
	                      |ИЗ
	                      |	вт_ЛИФО КАК вт_ЛИФО
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_ЛИФО_максимум КАК вт_ЛИФО_максимум
	                      |		ПО вт_ЛИФО.ДатаПросрочки = вт_ЛИФО_максимум.ДатаПросрочки
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	вт_Займ.Ссылка КАК Ссылка,
	                      |	ЕСТЬNULL(МАКСИМУМ(РасчетыПоДоговорам.Регистратор), ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК Регистратор
	                      |ПОМЕСТИТЬ ДействующийДоговор
	                      |ИЗ
	                      |	вт_Займ КАК вт_Займ
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыПоДоговорам КАК РасчетыПоДоговорам
	                      |		ПО вт_Займ.Ссылка = РасчетыПоДоговорам.Займ
	                      |			И (РасчетыПоДоговорам.Период <= &Дата)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	вт_Займ.Ссылка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	вт_Займ.Ссылка КАК Займ,
	                      |	&Дата КАК ОстаткиДата,
	                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ОсновнойДолгГрафикОстаток, 0) КАК ОсновнойДолг,
	                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПроцентыГрафикОстаток, 0) - ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПроцентыНачисленныеВПериодПросрочкиОстаток, 0) КАК Проценты,
	                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПроцентыОстаток, 0) КАК Проценты1,
	                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПроцентыНачисленныеВПериодПросрочкиОстаток, 0) КАК ПросроченныеПроценты,
	                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ШтрафыОстаток, 0) КАК Штрафы,
	                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПениОстаток, 0) КАК Пени,
	                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.РасчетныйСчетОстаток, 0) КАК Переплата,
	                      |	ЕСТЬNULL(РасчетыПоДоговорамОстатки.ОсновнойДолгГрафикОстаток, 0) + ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПроцентыГрафикОстаток, 0) + ЕСТЬNULL(РасчетыПоДоговорамОстатки.ШтрафыОстаток, 0) + ЕСТЬNULL(РасчетыПоДоговорамОстатки.ПениОстаток, 0) КАК Сумма,
	                      |	ВЫБОР
	                      |		КОГДА вт_ФИФО_ДатаПогашения.ДатаПогашения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	                      |			ТОГДА ЕСТЬNULL(РАЗНОСТЬДАТ(вт_ФИФО_ДатаПогашения.ДатаПросрочки, &Дата, ДЕНЬ), 0)
	                      |		ИНАЧЕ 0
	                      |	КОНЕЦ КАК ДниПросрочкиФИФО,
	                      |	ВЫБОР
	                      |		КОГДА вт_ЛИФО_ДатаПогашения.ДатаПогашения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	                      |			ТОГДА ЕСТЬNULL(РАЗНОСТЬДАТ(вт_ЛИФО_ДатаПогашения.ДатаПросрочки, &Дата, ДЕНЬ), 0)
	                      |		ИНАЧЕ 0
	                      |	КОНЕЦ КАК ДниПросрочки,
	                      |	РасчетыПоДоговорамОстатки.ОсновнойДолгГрафикОстаток КАК ОстатокОДФактический,
	                      |	ДействующийДоговор.Регистратор КАК ДействующийДоговор
	                      |ИЗ
	                      |	вт_Займ КАК вт_Займ
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыПоДоговорам.Остатки(&Период) КАК РасчетыПоДоговорамОстатки
	                      |		ПО вт_Займ.Ссылка = РасчетыПоДоговорамОстатки.Займ
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ вт_ФИФО_ДатаПогашения КАК вт_ФИФО_ДатаПогашения
	                      |		ПО вт_Займ.Ссылка = вт_ФИФО_ДатаПогашения.Займ
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ вт_ЛИФО_ДатаПогашения КАК вт_ЛИФО_ДатаПогашения
	                      |		ПО вт_Займ.Ссылка = вт_ЛИФО_ДатаПогашения.Займ
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ДействующийДоговор КАК ДействующийДоговор
	                      |		ПО вт_Займ.Ссылка = ДействующийДоговор.Ссылка");
	Запрос.УстановитьПараметр("Займ", Займ);
	Запрос.УстановитьПараметр("Дата", ДатаОстатков);
	Запрос.УстановитьПараметр("Период", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ФИФО", Перечисления.МетодыРасчетаДнейПросрочки.FIFO);
	Запрос.УстановитьПараметр("ЛИФО", Перечисления.МетодыРасчетаДнейПросрочки.LIFO);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.РасчетныеДанные.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Займ.Установить(Займ);
	Если Результат.Следующий() Тогда
		Если Результат.ДействующийДоговор = "" Тогда
			НаборЗаписей.Записать();
		Иначе
			Для Каждого Характеристика Из Характеристики Цикл
				Запись = НаборЗаписей.Добавить();
				Запись.Займ = Результат.Займ;
				Запись.Свойство = Характеристика.Ссылка;
				Запись.Значение = Результат[Характеристика.ИмяПредопределенныхДанных];
			КонецЦикла;		
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция СуммаПлановыхОстатков(Договор, Дата) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	График.Ссылка КАК Ссылка,
	                      |	График.НомерСтроки КАК НомерСтроки,
	                      |	График.Дата КАК Дата,
	                      |	График.СуммаПлатежа КАК СуммаПлатежа,
	                      |	График.ОплатаОсновнойДолг КАК ОплатаОсновнойДолг,
	                      |	График.ОплатаПроценты КАК ОплатаПроценты,
	                      |	График.ОстаткиОсновнойДолг КАК ОстаткиОсновнойДолг,
	                      |	График.Проценты КАК Проценты,
	                      |	График.ОстаткиПроценты КАК ОстаткиПроценты,
	                      |	График.КУплате КАК КУплате
	                      |ПОМЕСТИТЬ График
	                      |ИЗ
	                      |	Документ.ДоговорМикрозайма.ГрафикПлатежей КАК График
	                      |ГДЕ
	                      |	График.Ссылка = &Договор
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	РеструктуризацияМикрозаймаГрафикПлатежей.Ссылка,
	                      |	РеструктуризацияМикрозаймаГрафикПлатежей.НомерСтроки,
	                      |	РеструктуризацияМикрозаймаГрафикПлатежей.Дата,
	                      |	РеструктуризацияМикрозаймаГрафикПлатежей.СуммаПлатежа,
	                      |	РеструктуризацияМикрозаймаГрафикПлатежей.ОплатаОсновнойДолг,
	                      |	РеструктуризацияМикрозаймаГрафикПлатежей.ОплатаПроценты,
	                      |	РеструктуризацияМикрозаймаГрафикПлатежей.ОстаткиОсновнойДолг,
	                      |	РеструктуризацияМикрозаймаГрафикПлатежей.Проценты,
	                      |	РеструктуризацияМикрозаймаГрафикПлатежей.ОстаткиПроценты,
	                      |	РеструктуризацияМикрозаймаГрафикПлатежей.КУплате
	                      |ИЗ
	                      |	Документ.РеструктуризацияМикрозайма.ГрафикПлатежей КАК РеструктуризацияМикрозаймаГрафикПлатежей
	                      |ГДЕ
	                      |	РеструктуризацияМикрозаймаГрафикПлатежей.Ссылка = &Договор
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	МАКСИМУМ(График.Дата) КАК Дата
	                      |ПОМЕСТИТЬ МаксимальнаяДата
	                      |ИЗ
	                      |	График КАК График
	                      |ГДЕ
	                      |	График.Дата < &Дата
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ЕСТЬNULL(График.КУплате, НЕОПРЕДЕЛЕНО) КАК КУплате,
	                      |	МаксимальнаяДата.Дата КАК Дата
	                      |ИЗ
	                      |	МаксимальнаяДата КАК МаксимальнаяДата
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ График КАК График
	                      |		ПО МаксимальнаяДата.Дата = График.Дата");
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Договор", Договор);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.КУплате;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Процедура АктуализацияХарактеристикМикрозаймов() Экспорт
	АктуализацияХарактеристикСпискаМикрозаймов(РасчетЗадолженностиМФО_Переопределяемый.ПолучитьСписокМикрозаймов());
КонецПроцедуры

Функция СписокРеквизитовУсловияЗайма() Экспорт
	Массив = Новый Массив;
	
	Массив.Добавить("ПрограммаРасчета");
	Массив.Добавить("СуммаВыданногоЗайма");
	Массив.Добавить("ДатаДоговора");
	Массив.Добавить("ПроцентнаяСтавка");
	Массив.Добавить("ДатаВыдачиЗайма");
	Массив.Добавить("ДатаПогашения");
	
	Возврат Массив;
КонецФункции

Функция СписокРеквизитовОстатки() Экспорт
	Массив = Новый Массив;

	Массив.Добавить("ОстаткиОсновнойДолг");
	Массив.Добавить("ОстаткиПроценты");
	Массив.Добавить("ОстаткиПросроченныеПроценты");
	Массив.Добавить("ОстаткиШтрафы");
	Массив.Добавить("ОстаткиПени");
	Массив.Добавить("ОстаткиПроцентыЗаВесьПериод");
	Массив.Добавить("ОстаткиНачисленияЗаВесьПериод");
	Массив.Добавить("ОстатокОДФактический");
	Массив.Добавить("ОстатокПроцентовФактический");
	Массив.Добавить("ОстаткиСумма");
	
	Возврат Массив;
КонецФункции

Функция СписокРеквизитовДоговорМикрозайма() Экспорт
	Массив = Новый Массив;
	
	Для Каждого Реквизит Из Метаданные.Документы.ДоговорМикрозайма.Реквизиты Цикл//Метаданные.Обработки.КалькуляторПлановыхПлатежей.Реквизиты Цикл
		Массив.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	Возврат Массив;
КонецФункции


// Округляет число по заданному порядку.
// то число 123.37 при порядке округление 0.5 превратиться в 123.50, а число 0.1 
// при порядке округления 5 станет равным 5.
//
// Параметры:
//  Число                    - исходное число
//  ПорядокОкругления        - элемент перечисления Порядки округления: 
//                             "шаг" округления (0.01 (арифметическое), 0.01, 0.05, 0.1, 0.5, 1, 5, 10, 50, 100)
//
// Возвращаемое значение:
//  Округленное по заданному порядку значение
//
Функция ОкруглитьЧисло(Число, ПорядокОкругления) Экспорт
		
	Перем Результат;
	
	РежимОкр = "Арифметически";
	
	// Преобразуем порядок округления числа.
	// Если передали пустое значение порядка, то округлим до копеек. 
	Если НЕ ЗначениеЗаполнено(ПорядокОкругления) Тогда
		
		// По умолчанию значение "Перечисления.АЭ_ПорядкиОкругления.Окр0_01" (Арифметически).
		ИспользуемыйПорядокОкругления = "0.01"; 
		
	Иначе
		
		ИспользуемыйПорядокОкругления = Строка(ПорядокОкругления);
		
		Если СтрНайти(ИспользуемыйПорядокОкругления, "▲") <> 0 Тогда
			РежимОкр = "ВБольшую";
			ИспользуемыйПорядокОкругления = СтрЗаменить(ИспользуемыйПорядокОкругления, "▲", "");
		ИначеЕсли СтрНайти(ИспользуемыйПорядокОкругления, "▼") <> 0 Тогда 
			РежимОкр = "ВМеньшую";
			ИспользуемыйПорядокОкругления = СтрЗаменить(ИспользуемыйПорядокОкругления, "▼", "");
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ИспользуемыйПорядокОкругления = "0.01" И РежимОкр = "Арифметически" Тогда
		
		Результат = Окр(Число, 2);
		
	Иначе
		
		Порядок = Число(ИспользуемыйПорядокОкругления);
		
		// вычислим количество интервалов, входящих в число
		КоличествоИнтервал = Число / Порядок;
		
		// вычислим целое количество интервалов.
		КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервал);
		
		Если КоличествоИнтервал = КоличествоЦелыхИнтервалов Тогда
			
			// Числа поделились нацело. Округлять не нужно.
			Результат 	= Число;
			
		Иначе
			
			Если РежимОкр = "ВБольшую" Тогда
				
				// При порядке округления "0.05" 0.371 должно округлитья до 0.4
				Результат = Порядок * (КоличествоЦелыхИнтервалов + 1);
				
			ИначеЕсли РежимОкр = "ВМеньшую" Тогда 
				
				// При порядке округления "0.05" 0.399 должно округлитья до 0.35
				Результат = Порядок * (КоличествоЦелыхИнтервалов);
				
			Иначе // РежимОкр = "Арифметически" Тогда
				
				// При порядке округления "0.05" 0.374 должно округлитья до 0.35,
				// а 0.375 до 0.4
				Результат = Порядок * Окр(КоличествоИнтервал,0,РежимОкругления.Окр15как20);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РассчитатьДатуПогашения(Договор) Экспорт
	Дата = Договор.ДатаВыдачиЗайма;
	Для к = 1 По Договор.Срок Цикл
		Дата = ДобавитьПериодКДате(Дата, Договор.ПериодичностьСрокаЗайма, Договор.КоличествоПериодичностей);
	КонецЦикла;
	Возврат Дата;
КонецФункции

Функция ДобавитьПериодКДате(Дата, ПериодичностьСрокаЗайма, КоличествоПериодичностей) Экспорт
	//ПериодичностьСрокаЗайма = Договор.ПериодичностьСрокаЗайма;
	к = КоличествоПериодичностей;
	Если ПериодичностьСрокаЗайма = Перечисления.ПериодичностьСрокаЗайма.День Тогда
		Результат = Дата + к*24*3600;
	ИначеЕсли ПериодичностьСрокаЗайма = Перечисления.ПериодичностьСрокаЗайма.Неделя Тогда
		Результат = Дата + к*7*24*3600;		
	ИначеЕсли ПериодичностьСрокаЗайма = Перечисления.ПериодичностьСрокаЗайма.Месяц Тогда
		Результат = ДобавитьМесяц(Дата, к);	
	ИначеЕсли ПериодичностьСрокаЗайма = Перечисления.ПериодичностьСрокаЗайма.Год Тогда
		Результат = ДобавитьМесяц(Дата, к*12);	
	ИначеЕсли ПериодичностьСрокаЗайма = Перечисления.ПериодичностьСрокаЗайма.Период Тогда
		Результат = Дата + 24*3600;
	Иначе
		Результат = Дата;
	КонецЕсли;	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьДекорацииОбъекта(ФормаОбъекта) Экспорт
	Элементы = ФормаОбъекта.Элементы;
	МассивРеквизитов = Новый Массив;
	ОписаниеТипов = Новый ОписаниеТипов("ФорматированнаяСтрока");
	РеквизитДействДог = Новый РеквизитФормы("ДействующийДоговор", ОписаниеТипов, , "Действующий Договор");
	РеквизитНетПлан = Новый РеквизитФормы("НетПлан", ОписаниеТипов, , "Нет плановых платежей");
	РеквизитНетФакт = Новый РеквизитФормы("НетФакт", ОписаниеТипов, , "Нет фактических платежей");
	МассивРеквизитов.Добавить(РеквизитДействДог);
	МассивРеквизитов.Добавить(РеквизитНетПлан);
	МассивРеквизитов.Добавить(РеквизитНетФакт);
	
	ЗаполненыДниПросрочки = Истина;

	Попытка
		ФормаОбъекта.ИзменитьРеквизиты(МассивРеквизитов);
	Исключение
	КонецПопытки;
	
	ТекущийДоговорМикрозайма = Неопределено;
	
	//1. Заполнение декорации с условиями договора и с просроченной задолженностью
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РасчетныеДанные.Значение КАК Значение,
	                      |	РасчетныеДанные.Свойство КАК Свойство
	                      |ИЗ
	                      |	РегистрСведений.РасчетныеДанные КАК РасчетныеДанные
	                      |ГДЕ
	                      |	РасчетныеДанные.Займ = &Займ");
	Запрос.УстановитьПараметр("Займ",ФормаОбъекта.Объект.Ссылка);
	Рез = Запрос.Выполнить().Выбрать();
	
	Попытка
		ТекущаяГруппа = Элементы.ГруппаСсылкаНаДоговор;
		ПолеФормы = Элементы.Добавить("ДействующийДоговор", Тип("ПолеФормы"), ТекущаяГруппа);
		ПолеФормы.ПутьКДанным = "ДействующийДоговор";
		ПолеФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элементы.Переместить(ПолеФормы, ТекущаяГруппа, ФормаОбъекта.Элементы.ДекорацияДатаДоговора);
	Исключение
	КонецПопытки;

	Если Не Рез.Следующий() Тогда
		ЦветТекста = Новый Цвет(255, 0, 0); // красный
		ШрифтИсх = новый Шрифт;
		Шрифт = Новый Шрифт(ШрифтИсх, "Arial", 8, Истина, Ложь, Ложь, Ложь);
		ФормаОбъекта.ДействующийДоговор = Новый ФорматированнаяСтрока("Расчеты не произведены", Шрифт, ЦветТекста);
		ФормаОбъекта.Элементы.ГруппаДекорации.Видимость = Ложь;
		Возврат;
	Иначе
		ФормаОбъекта.Элементы.ГруппаДекорации.Видимость = Истина;
	КонецЕсли;
	
	Рез = Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл
		Если Рез.Свойство.Наименование = ПланыВидовХарактеристик.РасчетныеХарактеристики.ДействующийДоговор.Наименование Тогда
			Если Рез.Значение <> Неопределено И ЗначениеЗаполнено(Рез.Значение) Тогда
				ФормаОбъекта.ДействующийДоговор = Новый ФорматированнаяСтрока(Строка(Рез.Значение), , , ,ПолучитьНавигационнуюСсылку(Рез.Значение));
				ТекущийДоговорМикрозайма = Рез.Значение;
				ФормаОбъекта.Элементы.ДекорацияДатаДоговора.Заголовок = Строка(Формат(Рез.Значение.ДатаДоговора, "ДЛФ=Д"));
				ФормаОбъекта.Элементы.ДекорацияСуммаЗайма.Заголовок = Строка(Формат(Рез.Значение.СуммаВыданногоЗайма,"ЧДЦ=2"));
				ФормаОбъекта.Элементы.ДекорацияПроцентнаяСтавка.Заголовок = Строка(Рез.Значение.ПроцентнаяСтавка) +" "+ Строка(Рез.Значение.ПериодичностьПроцентнойСтавки);
				ФормаОбъекта.Элементы.ДекорацияДатаВыдачи.Заголовок = Строка(Формат(Рез.Значение.ДатаВыдачиЗайма, "ДЛФ=Д"));
				ФормаОбъекта.Элементы.ДекорацияДатаПогашения.Заголовок = Строка(Формат(Рез.Значение.ДатаПогашения, "ДЛФ=Д"));
				ФормаОбъекта.Элементы.ДекорацияПрограммаРасчета.Заголовок = Строка(Рез.Значение.ПрограммаРасчета);
				ФормаОбъекта.Элементы.ДекорацияНомерДоговора.Заголовок = Строка(Рез.Значение.НомерДоговора);
				ФормаОбъекта.Элементы.ДекорацияВидПлатежа.Заголовок = Строка(Рез.Значение.ВидПлатежа);
				СтрСрок = Строка(Рез.Значение.ПериодичностьСрокаЗайма);
				СтрСрокСокр = "";
				Если СтрСрок = "День" Тогда
					СтрСрокСокр = "дн.";
				ИначеЕсли СтрСрок = "Месяц" Тогда
					СтрСрокСокр = "мес.";
				ИначеЕсли СтрСрок = "Год" Тогда
					СтрСрокСокр = "г.";	
				КонецЕсли;		 
				ФормаОбъекта.Элементы.ДекорацияСрок.Заголовок = Строка(Рез.Значение.Срок)+ " "+ СтрСрокСокр;
				ФормаОбъекта.Элементы.ГруппаДекорации.Видимость = Истина;
				ПлановыеПлатежи = Рез.Значение.ГрафикПлатежей;
			Иначе
				ЦветТекста = Новый Цвет(255, 0, 0); // красный
				ШрифтИсх = новый шрифт;
				Шрифт = Новый Шрифт(ШрифтИсх,"Arial",8,Истина,Ложь,Ложь,Ложь);
				ФормаОбъекта.ДействующийДоговор = Новый ФорматированнаяСтрока("Расчеты не произведены",Шрифт,ЦветТекста);
				ФормаОбъекта.Элементы.ГруппаДекорации.Видимость = Ложь;
			КонецЕсли;
		ИначеЕсли Рез.Свойство.Наименование = ПланыВидовХарактеристик.РасчетныеХарактеристики.ОсновнойДолг.Наименование Тогда
			ФормаОбъекта.Элементы.ДекорацияОсновнойДолг.Заголовок = ?(Рез.Значение = 0,Строка("0,00"),Строка(Формат(Рез.Значение, "ЧДЦ=2")));
		ИначеЕсли Рез.Свойство.Наименование = ПланыВидовХарактеристик.РасчетныеХарактеристики.Пени.Наименование Тогда
			ФормаОбъекта.Элементы.ДекорацияПени.Заголовок = ?(Рез.Значение = 0,Строка("0,00"),Строка(Формат(Рез.Значение, "ЧДЦ=2")));
		ИначеЕсли Рез.Свойство.Наименование = ПланыВидовХарактеристик.РасчетныеХарактеристики.ПросроченныеПроценты.Наименование Тогда
			ФормаОбъекта.Элементы.ДекорацияПросроченныеПроценты.Заголовок = ?(Рез.Значение = 0,Строка("0,00"),Строка(Формат(Рез.Значение, "ЧДЦ=2")));
		ИначеЕсли Рез.Свойство.Наименование = ПланыВидовХарактеристик.РасчетныеХарактеристики.Проценты.Наименование Тогда
			ФормаОбъекта.Элементы.ДекорацияПроценты.Заголовок = ?(Рез.Значение = 0,Строка("0,00"),Строка(Формат(Рез.Значение, "ЧДЦ=2")));
		ИначеЕсли Рез.Свойство.Наименование = ПланыВидовХарактеристик.РасчетныеХарактеристики.Сумма.Наименование Тогда
			ФормаОбъекта.Элементы.ДекорацияИтого.Заголовок = ?(Рез.Значение = 0,Строка("0,00"),Строка(Формат(Рез.Значение, "ЧДЦ=2")));
		ИначеЕсли Рез.Свойство.Наименование = ПланыВидовХарактеристик.РасчетныеХарактеристики.Штрафы.Наименование Тогда
			ФормаОбъекта.Элементы.ДекорацияШтрафы.Заголовок = ?(Рез.Значение = 0,Строка("0,00"),Строка(Формат(Рез.Значение, "ЧДЦ=2")));	
		ИначеЕсли Рез.Свойство.Наименование = ПланыВидовХарактеристик.РасчетныеХарактеристики.ДниПросрочки.Наименование Тогда
			ФормаОбъекта.Элементы.ДекорацияДнипросрочки.Заголовок = Строка(Рез.Значение);
			Если Не ЗначениеЗаполнено(Рез.Значение) Тогда
				 ЗаполненыДниПросрочки = Ложь;
			КонецЕсли;	 
		ИначеЕсли Рез.Свойство.Наименование = ПланыВидовХарактеристик.РасчетныеХарактеристики.ДниПросрочкиФИФО.Наименование Тогда
			Если Не ЗаполненыДниПросрочки Тогда
				ФормаОбъекта.Элементы.ДекорацияДнипросрочки.Заголовок = Строка(Рез.Значение);
			КонецЕсли;	
		ИначеЕсли Рез.Свойство.Наименование = ПланыВидовХарактеристик.РасчетныеХарактеристики.Переплата.Наименование Тогда
			ФормаОбъекта.Элементы.ДекорацияНаСчете.Заголовок =?(Рез.Значение = 0,Строка("0,00"),Строка(Формат(Рез.Значение, "ЧДЦ=2")));
		КонецЕсли;
	КонецЦикла;
	
	
	//2. Заполнение декораций ближайший плановый платеж	
	НайденПлатежПлановый = Ложь;
	Если ПлановыеПлатежи <> Неопределено Тогда
		Для каждого Платеж из ПлановыеПлатежи Цикл
			Если Платеж.Дата >= ТекущаяДатаСеанса() И Платеж.СуммаПлатежа <> 0 тогда
				ФормаОбъекта.Элементы.ДекорацияДатаПлатежа.Заголовок = Строка(Формат(Платеж.Дата, "ДЛФ=Д"));
				ФормаОбъекта.Элементы.ДекорацияОДПлатежа.Заголовок = ?(Платеж.ОплатаОсновнойДолг = 0,Строка("0,00"),Строка(Формат(Платеж.ОплатаОсновнойДолг, "ЧДЦ=2")));
				ФормаОбъекта.Элементы.ДекорацияПроцентыПлатежа.Заголовок = ?(Платеж.ОплатаПроценты = 0,Строка("0,00"),Строка(Формат(Платеж.ОплатаПроценты, "ЧДЦ=2")));
				ФормаОбъекта.Элементы.ДекорацияИтогоПлатежа.Заголовок = ?(Платеж.СуммаПлатежа = 0,Строка("0,00"),Строка(Формат(Платеж.СуммаПлатежа, "ЧДЦ=2")));
				НайденПлатежПлановый = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если НЕ НайденПлатежПлановый Тогда
		ЦветТекста = Новый Цвет(255, 0, 0); // красный
		ШрифтИсх = новый шрифт;
		Шрифт = Новый Шрифт(ШрифтИсх,"Arial",8,Истина,Ложь,Ложь,Ложь);
		ФормаОбъекта.НетПлан = Новый ФорматированнаяСтрока("Нет плановых платежей", Шрифт, ЦветТекста);
		Попытка
			ТекущаяГруппа = Элементы.ГруппаПоляПлатеж;
			ПолеФормы = Элементы.Добавить("НетПлан", Тип("ПолеФормы"), ТекущаяГруппа);
			ПолеФормы.ПутьКДанным = "НетПлан";
			ПолеФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			Элементы.Переместить(ПолеФормы, ТекущаяГруппа);
		Исключение
		КонецПопытки;
	Иначе
		Попытка
			Элементы.Удалить(Элементы.Найти("НетПлан"));
		Исключение
		КонецПопытки;
	КонецЕсли;
	ФормаОбъекта.Элементы.ГруппаПлатежПланДатаПлатежа.Видимость = НайденПлатежПлановый;
	ФормаОбъекта.Элементы.ГруппаПлатежПланОД.Видимость = НайденПлатежПлановый;
	ФормаОбъекта.Элементы.ГруппаПлатежПланПроценты.Видимость = НайденПлатежПлановый;
	ФормаОбъекта.Элементы.ГруппаПлатежПланИтого.Видимость = НайденПлатежПлановый;
	//3.1. Заполнение декорации Последний поступивший платеж, Оплата
	НайденПлатежФактический = Ложь;

	Если ТипЗнч(ТекущийДоговорМикрозайма) = Тип("ДокументСсылка.ДоговорМикрозайма") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	РасчетыПоДоговорам.Период КАК Дата,
		|	РасчетыПоДоговорам.Регистратор КАК Регистратор,
		|	РасчетыПоДоговорам.НомерСтроки КАК НомерСтроки,
		|	РасчетыПоДоговорам.Активность КАК Активность,
		|	РасчетыПоДоговорам.ВидДвижения КАК ВидДвижения,
		|	РасчетыПоДоговорам.Займ КАК Займ,
		|	РасчетыПоДоговорам.ОсновнойДолг КАК ОсновнойДолг,
		|	РасчетыПоДоговорам.Проценты КАК Проценты,
		|	РасчетыПоДоговорам.ПроцентыНачисленныеВПериодПросрочки КАК ОплатаПросроченныеПроценты,
		|	РасчетыПоДоговорам.Штрафы КАК ОплатаШтрафы,
		|	РасчетыПоДоговорам.Пени КАК ОплатаПени,
		|	РасчетыПоДоговорам.ОсновнойДолгГрафик КАК ОплатаОсновнойДолг,
		|	РасчетыПоДоговорам.ПроцентыГрафик - РасчетыПоДоговорам.ПроцентыНачисленныеВПериодПросрочки КАК ОплатаПроценты,
		|	РасчетыПоДоговорам.РасчетныйСчет КАК РасчетныйСчет
		|ИЗ
		|	РегистрНакопления.РасчетыПоДоговорам КАК РасчетыПоДоговорам
		|ГДЕ
		|	РасчетыПоДоговорам.Период <= &Дата
		|	И РасчетыПоДоговорам.Займ = &Займ
		|	И РасчетыПоДоговорам.ВидДвижения = &ВидДвижения
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ");
		Запрос.УстановитьПараметр("Займ",ФормаОбъекта.Объект.Ссылка);
		Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДатаСеанса()));
		Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Расход);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Количество() > 0 Тогда
			НайденПлатежФактический = Истина;
			Пока Результат.Следующий() Цикл
				ФормаОбъекта.Элементы.ДекорацияДатаПлатежаФакт.Заголовок = Строка(Формат(Результат.Дата, "ДЛФ=Д"));
				ФормаОбъекта.Элементы.ДекорацияОДПлатежаФакт.Заголовок = ?(Результат.ОплатаОсновнойДолг = 0,Строка("0,00"),Строка(Формат(Результат.ОплатаОсновнойДолг, "ЧДЦ=2")));
				ФормаОбъекта.Элементы.ДекорацияПроцентыПлатежаФакт.Заголовок = ?(Результат.ОплатаПроценты = 0,Строка("0,00"),Строка(Формат(Результат.ОплатаПроценты, "ЧДЦ=2")));
				ФормаОбъекта.Элементы.ДекорацияПросроченныеПроцентыПлатежаФакт.Заголовок = ?(Результат.ОплатаПросроченныеПроценты = 0,Строка("0,00"),Строка(Формат(Результат.ОплатаПросроченныеПроценты, "ЧДЦ=2")));
				ФормаОбъекта.Элементы.ДекорацияШтрафыПлатежаФакт.Заголовок = ?(Результат.ОплатаШтрафы = 0,Строка("0,00"),Строка(Формат(Результат.ОплатаШтрафы, "ЧДЦ=2")));
				ФормаОбъекта.Элементы.ДекорацияПениПлатежаФакт.Заголовок = ?(Результат.ОплатаПени = 0,Строка("0,00"),Строка(Формат(Результат.ОплатаПени, "ЧДЦ=2")));
				ИтогоРекв = Результат.ОплатаОсновнойДолг 
				+Результат.ОплатаПроценты
				+Результат.ОплатаПросроченныеПроценты
				+Результат.ОплатаШтрафы
				+Результат.ОплатаПени;
				ФормаОбъекта.Элементы.ДекорацияИтогоПлатежаФакт.Заголовок = ?(ИтогоРекв = 0,Строка("0,00"),Строка(Формат(ИтогоРекв, "ЧДЦ=2")));
			КонецЦикла;
		КонецЕсли;
		
		Если Результат.Количество() = 0 Тогда
			ФормаОбъекта.Элементы.ДекорацияДатаПлатежаФакт.Заголовок = "";
			ФормаОбъекта.Элементы.ДекорацияОДПлатежаФакт.Заголовок = "";
			ФормаОбъекта.Элементы.ДекорацияПроцентыПлатежаФакт.Заголовок = "";
			ФормаОбъекта.Элементы.ДекорацияПросроченныеПроцентыПлатежаФакт.Заголовок = "";
			ФормаОбъекта.Элементы.ДекорацияШтрафыПлатежаФакт.Заголовок = "";
			ФормаОбъекта.Элементы.ДекорацияПениПлатежаФакт.Заголовок = "";
			ФормаОбъекта.Элементы.ДекорацияИтогоПлатежаФакт.Заголовок = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ТекущийДоговорМикрозайма) = Тип("ДокументСсылка.РеструктуризацияМикрозайма") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                      |	РасчетыПоДоговорам.Период КАК Дата,
		                      |	РасчетыПоДоговорам.Регистратор КАК Регистратор,
		                      |	РасчетыПоДоговорам.НомерСтроки КАК НомерСтроки,
		                      |	РасчетыПоДоговорам.Активность КАК Активность,
		                      |	РасчетыПоДоговорам.ВидДвижения КАК ВидДвижения,
		                      |	РасчетыПоДоговорам.Займ КАК Займ,
		                      |	РасчетыПоДоговорам.ОсновнойДолг КАК ОсновнойДолг,
		                      |	РасчетыПоДоговорам.Проценты КАК Проценты,
		                      |	РасчетыПоДоговорам.ПроцентыНачисленныеВПериодПросрочки КАК ОплатаПросроченныеПроценты,
		                      |	РасчетыПоДоговорам.Штрафы КАК ОплатаШтрафы,
		                      |	РасчетыПоДоговорам.Пени КАК ОплатаПени,
		                      |	РасчетыПоДоговорам.ОсновнойДолгГрафик КАК ОплатаОсновнойДолг,
		                      |	РасчетыПоДоговорам.ПроцентыГрафик - РасчетыПоДоговорам.ПроцентыНачисленныеВПериодПросрочки КАК ОплатаПроценты,
		                      |	РасчетыПоДоговорам.РасчетныйСчет КАК РасчетныйСчет,
		                      |	РасчетыПоДоговорам.ВидДвиженияЗадолженности КАК ВидДвиженияЗадолженности
		                      |ИЗ
		                      |	РегистрНакопления.РасчетыПоДоговорам КАК РасчетыПоДоговорам
		                      |ГДЕ
		                      |	РасчетыПоДоговорам.Займ = &Займ
		                      |	И РасчетыПоДоговорам.ВидДвиженияЗадолженности = &ВидДвиженияЗадолженности
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	Дата УБЫВ");
		Запрос.УстановитьПараметр("Займ",ФормаОбъекта.Объект.Ссылка);
		Запрос.УстановитьПараметр("ВидДвиженияЗадолженности", Перечисления.ВидыДвиженийПоРасчетам.Оплата);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Количество() > 0 Тогда
			НайденПлатежФактический = Истина;
			Пока Результат.Следующий() Цикл
				ФормаОбъекта.Элементы.ДекорацияДатаПлатежаФакт.Заголовок = Строка(Формат(Результат.Дата, "ДЛФ=Д"));
				ФормаОбъекта.Элементы.ДекорацияОДПлатежаФакт.Заголовок = ?(Результат.ОплатаОсновнойДолг = 0,Строка("0,00"),Строка(Формат(Результат.ОплатаОсновнойДолг, "ЧДЦ=2")));
				ФормаОбъекта.Элементы.ДекорацияПроцентыПлатежаФакт.Заголовок = ?(Результат.ОплатаПроценты = 0,Строка("0,00"),Строка(Формат(Результат.ОплатаПроценты, "ЧДЦ=2")));
				ФормаОбъекта.Элементы.ДекорацияПросроченныеПроцентыПлатежаФакт.Заголовок = ?(Результат.ОплатаПросроченныеПроценты = 0,Строка("0,00"),Строка(Формат(Результат.ОплатаПросроченныеПроценты, "ЧДЦ=2")));
				ФормаОбъекта.Элементы.ДекорацияШтрафыПлатежаФакт.Заголовок = ?(Результат.ОплатаШтрафы = 0,Строка("0,00"),Строка(Формат(Результат.ОплатаШтрафы, "ЧДЦ=2")));
				ФормаОбъекта.Элементы.ДекорацияПениПлатежаФакт.Заголовок = ?(Результат.ОплатаПени = 0,Строка("0,00"),Строка(Формат(Результат.ОплатаПени, "ЧДЦ=2")));
				ИтогоРекв = Результат.ОплатаОсновнойДолг 
				+Результат.ОплатаПроценты
				+Результат.ОплатаПросроченныеПроценты
				+Результат.ОплатаШтрафы
				+Результат.ОплатаПени;
				ФормаОбъекта.Элементы.ДекорацияИтогоПлатежаФакт.Заголовок = ?(ИтогоРекв = 0, Строка("0,00"), Строка(Формат(ИтогоРекв, "ЧДЦ=2")));
			КонецЦикла;
		КонецЕсли;
		
		Если Результат.Количество() = 0 Тогда
			ФормаОбъекта.Элементы.ДекорацияДатаПлатежаФакт.Заголовок = "";
			ФормаОбъекта.Элементы.ДекорацияОДПлатежаФакт.Заголовок = "";
			ФормаОбъекта.Элементы.ДекорацияПроцентыПлатежаФакт.Заголовок = "";
			ФормаОбъекта.Элементы.ДекорацияПросроченныеПроцентыПлатежаФакт.Заголовок = "";
			ФормаОбъекта.Элементы.ДекорацияШтрафыПлатежаФакт.Заголовок = "";
			ФормаОбъекта.Элементы.ДекорацияПениПлатежаФакт.Заголовок = "";
			ФормаОбъекта.Элементы.ДекорацияИтогоПлатежаФакт.Заголовок = "";
		КонецЕсли;
		
	КонецЕсли;


	
	//3.2 Заполнение декорации Последний поступивший платеж, платеж
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ИсторияПлатежей.Период КАК Дата,
	                      |	ИсторияПлатежей.Регистратор КАК Регистратор,
	                      |	ИсторияПлатежей.Объект КАК Объект,
	                      |	ИсторияПлатежей.Задолженность КАК СуммаПлатежа
	                      |ИЗ
	                      |	РегистрНакопления.ИсторияПлатежей КАК ИсторияПлатежей
	                      |ГДЕ
	                      |	ИсторияПлатежей.Объект = &Займ
	                      |	И ИсторияПлатежей.Период <= &Дата
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Дата УБЫВ");
	Запрос.УстановитьПараметр("Займ",ФормаОбъекта.Объект.Ссылка);
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДатаСеанса()));
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		НайденПлатежФактический = Истина;	
		ФормаОбъекта.Элементы.ДекорацияДатаПостПлатежаФакт.Заголовок = Строка(Формат(Результат.Дата, "ДЛФ=Д"));
		ФормаОбъекта.Элементы.ДекорацияСуммаПостПлатежаФакт.Заголовок = ?(Результат.СуммаПлатежа = 0,Строка("0,00"),Строка(Формат(Результат.СуммаПлатежа, "ЧДЦ=2")));
	КонецЕсли;
	
	Если НЕ НайденПлатежФактический Тогда
		ЦветТекста = Новый Цвет(255, 0, 0); // красный
		ШрифтИсх = новый шрифт;
		Шрифт = Новый Шрифт(ШрифтИсх,"Arial",8,Истина,Ложь,Ложь,Ложь);
		ФормаОбъекта.НетФакт = Новый ФорматированнаяСтрока("Нет фактических платежей и оплат",Шрифт,ЦветТекста);
		Попытка
			ТекущаяГруппа = Элементы.ГруппаПоляПлатежФактический;
			ПолеФормы = Элементы.Добавить("НетФакт", Тип("ПолеФормы"), ТекущаяГруппа);
			ПолеФормы.ПутьКДанным = "НетФакт";
			ПолеФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			Элементы.Переместить(ПолеФормы, ТекущаяГруппа);
		Исключение
		КонецПопытки;
	Иначе
		Попытка
			Элементы.Удалить(Элементы.Найти("НетФакт"));
		Исключение
		КонецПопытки;	
	КонецЕсли;
	ФормаОбъекта.Элементы.ГруппаПлатежФактДатаПлатежа.Видимость = НайденПлатежФактический;
	ФормаОбъекта.Элементы.ГруппаПлатежФактСуммаПлатежа.Видимость = НайденПлатежФактический;
	ФормаОбъекта.Элементы.ГруппаПлатежФактДатаОплаты.Видимость = НайденПлатежФактический;
	ФормаОбъекта.Элементы.ГруппаПлатежФактОД.Видимость = НайденПлатежФактический;
	ФормаОбъекта.Элементы.ГруппаПлатежФактПросроченныеПроценты.Видимость = НайденПлатежФактический;
	ФормаОбъекта.Элементы.ГруппаПлатежФактПроценты.Видимость = НайденПлатежФактический;
	ФормаОбъекта.Элементы.ГруппаПлатежФактШтрафы.Видимость = НайденПлатежФактический;
	ФормаОбъекта.Элементы.ГруппаПлатежФактПени.Видимость = НайденПлатежФактический;
	ФормаОбъекта.Элементы.ГруппаПлатежФактИтого.Видимость = НайденПлатежФактический;	
	
	//4. Заполнение декорации Исковые требования
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсковыеТребованияСрезПоследних.Период КАК Период,
		|	ИсковыеТребованияСрезПоследних.ВидТребований КАК ВидТребований,
		|	ИсковыеТребованияСрезПоследних.СуммаОсновнойДолг КАК СуммаОсновнойДолг,
		|	ИсковыеТребованияСрезПоследних.СуммаПроценты КАК СуммаПроценты,
		|	ИсковыеТребованияСрезПоследних.СуммаПросроченныеПроценты КАК СуммаПросроченныеПроценты,
		|	ИсковыеТребованияСрезПоследних.СуммаШтрафы КАК СуммаШтрафы,
		|	ИсковыеТребованияСрезПоследних.СуммаПени КАК СуммаПени,
		|	ИсковыеТребованияСрезПоследних.ЦенаИска КАК ЦенаИска,
		|	ИсковыеТребованияСрезПоследних.СуммаГоспошлина КАК СуммаГоспошлина
		|ИЗ
		|	РегистрСведений.УдалитьИсковыеТребования.СрезПоследних(&ТекущаяДата) КАК ИсковыеТребованияСрезПоследних
		|ГДЕ
		|	ИсковыеТребованияСрезПоследних.Займ = &Займ";
	
	Запрос.УстановитьПараметр("Займ", ФормаОбъекта.Объект.Ссылка);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = РезультатЗапроса.Выбрать();
	ЕстьИсковыеТребования = Истина;
	Если РезультатЗапроса.Пустой() Тогда
		ЕстьИсковыеТребования = Ложь;
	Иначе
		ЕстьИсковыеТребования = Истина;
		Пока Результат.Следующий() Цикл
			ФормаОбъекта.Элементы.ДекорацияДатаИсковыхТребований.Заголовок = Строка(Формат(Результат.Период, "ДЛФ=Д"));
			ФормаОбъекта.Элементы.ДекорацияСуммаОсновногоДолга.Заголовок = ?(Результат.СуммаОсновнойДолг = 0,Строка("0,00"),Строка(Формат(Результат.СуммаОсновнойДолг, "ЧДЦ=2")));
			ФормаОбъекта.Элементы.ДекорацияСуммаПроцентов.Заголовок = ?(Результат.СуммаПроценты = 0,Строка("0,00"),Строка(Формат(Результат.СуммаПроценты, "ЧДЦ=2")));
			ФормаОбъекта.Элементы.ДекорацияСуммаПросроченныхПроцентов.Заголовок = ?(Результат.СуммаПросроченныеПроценты = 0,Строка("0,00"),Строка(Формат(Результат.СуммаПросроченныеПроценты, "ЧДЦ=2")));
			ФормаОбъекта.Элементы.ДекорацияСуммаШтрафы.Заголовок = ?(Результат.СуммаШтрафы = 0,Строка("0,00"),Строка(Формат(Результат.СуммаШтрафы, "ЧДЦ=2")));
			ФормаОбъекта.Элементы.ДекорацияСуммаПени.Заголовок = ?(Результат.СуммаПени = 0,Строка("0,00"),Строка(Формат(Результат.СуммаПени, "ЧДЦ=2")));
			ФормаОбъекта.Элементы.ДекорацияЦенаИска.Заголовок = ?(Результат.ЦенаИска = 0,Строка("0,00"),Строка(Формат(Результат.ЦенаИска, "ЧДЦ=2")));
			ФормаОбъекта.Элементы.ДекорацияГоспошлина.Заголовок = ?(Результат.СуммаГоспошлина = 0,Строка("0,00"),Строка(Формат(Результат.СуммаГоспошлина, "ЧДЦ=2")));
			ФормаОбъекта.Элементы.ДекорацияВидИсковыхТребований.Заголовок = Строка(Результат.ВидТребований);
		КонецЦикла;	
	КонецЕсли;	 
	ФормаОбъекта.Элементы.ГруппаИсковыеТребования.Видимость = ЕстьИсковыеТребования;
КонецПроцедуры

// Добавляет в таблицу значений строки из другой таблицы значений и  
// в них значения колонок с совпадающими наименованиями. 
// Параметры: 
//  ТаблицаИсточник - таблица значений, откуда берутся значения. 
//  ТаблицаПриемник - таблица значений, куда добавляются строки. 
 Процедура ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник) Экспорт
   Для каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл
     СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
     ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
   КонецЦикла;
КонецПроцедуры// ЗагрузитьВТаблицуЗначений()

Функция ПолучитьПредставлениеПериодичностиПлатежа(ПериодичностьПлатежа) Экспорт
	
	// со первой, по предпоследнюю
	Если ПериодичностьПлатежа = Перечисления.ПериодичностьСрокаЗайма.Месяц Тогда 
		Представление = НСтр("ru = 'мес.'");
	ИначеЕсли ПериодичностьПлатежа = Перечисления.ПериодичностьСрокаЗайма.Год Тогда 
		Представление = НСтр("ru = 'г.'");
	ИначеЕсли ПериодичностьПлатежа = Перечисления.ПериодичностьСрокаЗайма.День Тогда 
		Представление = НСтр("ru = 'дн.'");
	//ИначеЕсли ПериодичностьПлатежа = Перечисления.ПериодичностьСрокаЗайма.Квартал Тогда 
	//	Представление = НСтр("ru = 'кв.'");
	ИначеЕсли ПериодичностьПлатежа = Перечисления.ПериодичностьСрокаЗайма.Неделя Тогда 
		Представление = НСтр("ru = 'нед.'");
	Иначе
		Представление = "";
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Формирование текста гиперссылки интервалов.
//
Процедура СформироватьТекстГиперссылкиИнтервалыПроцентнойСтавки(Форма, ДосрочноеРасторжение = Ложь) Экспорт 
	
	Объект 	  = Форма.Объект;
	Элементы  = Форма.Элементы;
	
	Если ДосрочноеРасторжение = Неопределено Тогда
		ИмяРеквизитаНадпись	= "ДекорацияИнтервалыПроцентнойСтавкиПослеДатыОкончания";
	ИначеЕсли ДосрочноеРасторжение Тогда 
		ИмяРеквизитаНадпись	= "ДекорацияИнтервалыПроцентнойСтавкиПриДосрочномРасторжении";
	Иначе
		ИмяРеквизитаНадпись = "ДекорацияИнтервалыПроцентнойСтавки";
	КонецЕсли;
	
	Элементы[ИмяРеквизитаНадпись].Заголовок = ПолучитьТекстИнтерваловПроцентнойСтавки(Объект, ДосрочноеРасторжение);
	
КонецПроцедуры

// Формирование текста интервалов.
//
Функция ПолучитьТекстИнтерваловПроцентнойСтавки(Объект, ДосрочноеРасторжение = Ложь) Экспорт 
	
	Если ДосрочноеРасторжение = Неопределено Тогда
		ТаблицаИнтервалыПроцентнойСтавки 				= Объект.ИнтервалыПроцентнойСтавкиПослеДатыОкончания;
		ИмяПоляПроцентнаяСтавкаПериодичностьИнтервалов 	= "ПроцентнаяСтавкаПослеДатыОкончанияПериодичностьИнтервалов";
	ИначеЕсли ДосрочноеРасторжение Тогда 
		ТаблицаИнтервалыПроцентнойСтавки 				= Объект.ИнтервалыПроцентнойСтавкиПриДосрочномРасторжении;		
		ИмяПоляПроцентнаяСтавкаПериодичностьИнтервалов 	= "ПроцентнаяСтавкаПериодичностьИнтерваловПриДосрочномЗакрытии";
	Иначе
		ТаблицаИнтервалыПроцентнойСтавки 				= Объект.ИнтервалыПроцентнойСтавки;		
		ИмяПоляПроцентнаяСтавкаПериодичностьИнтервалов 	= "ПериодичностьСрокаЗайма"; //"ПроцентнаяСтавкаПериодичностьИнтервалов";
	КонецЕсли;
	
	Если ТаблицаИнтервалыПроцентнойСтавки.Количество() = 0 Тогда 
		
		ТекстСообщения = НСтр("ru = 'Интервалы процентной ставки не указаны!'"); 
		
	Иначе
		
		Если ТаблицаИнтервалыПроцентнойСтавки.Количество() = 1 Тогда 
			
			СтрокаТЧ = ТаблицаИнтервалыПроцентнойСтавки[0];
			
			Если ДосрочноеРасторжение Тогда 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Фиксированная процентная ставка %1%. Подробнее...'"),
																			Формат(СтрокаТЧ.ПроцентнаяСтавка,"ЧЦ=15; ЧДЦ=2; ЧН=0"));

			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Фиксированная процентная ставка на весь срок %1%. Подробнее...'"),
																			Формат(СтрокаТЧ.ПроцентнаяСтавка,"ЧЦ=15; ЧДЦ=2; ЧН=0"));
			КонецЕсли;

		Иначе
			
			ТекстСообщения = "";
			ПредставлениеИнтервала = "";
			КолСтрок = ТаблицаИнтервалыПроцентнойСтавки.Количество(); 
			
			Если ОбъектСодержитСвойство(Объект, ИмяПоляПроцентнаяСтавкаПериодичностьИнтервалов) Тогда
				
				ПредставлениеИнтервала = ПолучитьПредставлениеПериодичностиПлатежа(Объект[ИмяПоляПроцентнаяСтавкаПериодичностьИнтервалов]);	
				
			ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.АЭ_ВидыНачисленийПоЗаймам") Тогда 	
				
				Если Объект.ВидПлатежа = ПредопределенноеЗначение("Перечисление.АЭ_ВидыПлатежейПоЗаймам.Пени") Тогда
					ПредставлениеИнтервала = НСтр("ru = 'дн.'");	
				ИначеЕсли Объект.ВидПлатежа 		= ПредопределенноеЗначение("Перечисление.АЭ_ВидыПлатежейПоЗаймам.Комиссии")	Тогда
					ПредставлениеИнтервала = Объект.Валюта.Наименование;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.АЭ_ПередачаПравТребованийЗаймаПредоставленного") Тогда
				
				ПредставлениеИнтервала = НСтр("ru = 'дн.'");	
				
			КонецЕсли; 
				
			ПерваяСтрока 		= Истина;
			СтрокаРазделитель 	= "";
			СтрокаС 			= НСтр("ru = 'от '");
			
			Для каждого СтрокаТЧ Из ТаблицаИнтервалыПроцентнойСтавки Цикл
				
				ЭтоПоследняяСтрока = (ТаблицаИнтервалыПроцентнойСтавки.Индекс(СтрокаТЧ) = ТаблицаИнтервалыПроцентнойСтавки.Количество() - 1);
				
				Если  ПерваяСтрока Тогда 
					
					ТекстСообщения = СтрШаблон(НСтр("ru = 'До %1 %2 %3%%; '"), СтрокаТЧ.ИнтервалДо,ПредставлениеИнтервала, СтрокаТЧ.ПроцентнаяСтавка);
					
					ПерваяСтрока = Ложь;
					Продолжить;
					
				КонецЕсли;
				
				Если СтрокаТЧ.ИнтервалОт <> 0 И СтрокаТЧ.ИнтервалДо <> 0 Тогда 
										
					ТекстСообщения = ТекстСообщения +  СтрШаблон(НСтр("ru = 'от %1 до %2 %3 %4%%'"),
										СтрокаТЧ.ИнтервалОт + 1, СтрокаТЧ.ИнтервалДо, ПредставлениеИнтервала, СтрокаТЧ.ПроцентнаяСтавка);
					
				ИначеЕсли СтрокаТЧ.ИнтервалОт = 0 И СтрокаТЧ.ИнтервалДо <> 0 Тогда					
					
					ТекстСообщения = ТекстСообщения + СтрШаблон(НСтр("ru = ' до %1 %2 %3%%'"),
											СтрокаТЧ.ИнтервалДо, ПредставлениеИнтервала, СтрокаТЧ.ПроцентнаяСтавка);
						
				ИначеЕсли СтрокаТЧ.ИнтервалОт <> 0 И СтрокаТЧ.ИнтервалДо = 0 Тогда
										
					ТекстСообщения = ТекстСообщения + СтрШаблон(НСтр("ru = ' от %1 и более %2 %3%%'"),
											СтрокаТЧ.ИнтервалОт + 1, ПредставлениеИнтервала, СтрокаТЧ.ПроцентнаяСтавка);
					
				КонецЕсли;
				
				Если ЭтоПоследняяСтрока Тогда
					СтрокаРазделитель 	= ".";	
				Иначе
					СтрокаРазделитель 	= "; ";
				КонецЕсли; 
								
				ТекстСообщения = ТекстСообщения + СтрокаРазделитель;
				
			КонецЦикла;
			
		КонецЕсли;				
	
	КонецЕсли;
		
	Возврат ТекстСообщения;
	
КонецФункции


// Проверяет есть ли у объекта необходимый реквизит.
//
Функция ОбъектСодержитСвойство(Объект, ИмяСвойства) Экспорт
	
	СтруктураПроверка = Новый Структура;
	СтруктураПроверка.Вставить(ИмяСвойства, NULL);
	
	ЗаполнитьЗначенияСвойств(СтруктураПроверка, Объект);
	
	Если СтруктураПроверка[ИмяСвойства] = NULL Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьПериодыПоИнтервалам(Договор, ИнтервалыПроцентнойСтавки) Экспорт
	Дата = Договор.ДатаВыдачиЗайма;
	Для Каждого Интервал Из ИнтервалыПроцентнойСтавки Цикл
		Интервал.НачалоИнтервала = ДобавитьПериодКДате(Дата + 86400, Договор.ПериодичностьСрокаЗайма, Интервал.ИнтервалОт);
		Интервал.КонецИнтервала = ДобавитьПериодКДате(Дата, Договор.ПериодичностьСрокаЗайма, Интервал.ИнтервалДо);
	КонецЦикла;
	к = ИнтервалыПроцентнойСтавки.Количество();
	Если к > 0 Тогда
		ИнтервалыПроцентнойСтавки[к-1].КонецИнтервала = Договор.ДатаПогашения;
	КонецЕсли;
КонецПроцедуры


Процедура ПечатнаяФормаРачетИсковыхТребованийГрафик(ТабДок, Договор) Экспорт
	Макет = РегистрыНакопления.РасчетыПоДоговорам.ПолучитьМакет("Макет");

	ОбластьШапка  = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.ДолжникФИОРП = СклонениеФИО.daСклонение(Договор.Займ.Должник.Наименование,"Р",,,);
	ОбластьШапка.Параметры.НомерДоговора = Договор.НомерДоговора;
	ОбластьШапка.Параметры.ДатаДоговора = Формат(Макс(Договор.ДатаДоговора,Договор.ДатаВыдачиЗайма), "ДЛФ=Д");
	ОбластьШапка.Параметры.СуммаЗаймаРубКоп = УЭДФункцииДляШаблонов.ЧислоВСтроку2(Договор.СуммаВыданногоЗайма);
	ОбластьШапка.Параметры.Срок = Договор.Срок; 
	СтрСрок = Строка(Договор.ПрограммаРасчета.ПериодичностьСрокаЗайма); 
	СтрСрокСокр = "";
	Если СтрСрок = "День" Тогда
		СтрСрокСокр = "дн.";
	ИначеЕсли СтрСрок = "Месяц" Тогда
		СтрСрокСокр = "мес.";
	ИначеЕсли СтрСрок = "Год" Тогда
		СтрСрокСокр = "г.";
	КонецЕсли;
	ОбластьШапка.Параметры.ПериодСрока = СтрСрокСокр;
	
	ОбластьШапка.Параметры.ТекущаяДата = Формат(ТекущаяДатаСеанса(), "ДЛФ=Д");

	ТабДок.Вывести(ОбластьШапка);
	// Строка
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");  
	
	РасчетИскТреб = РасчетЗадолженностиМФО.ПолучитьСрез(Договор.Займ);
	
	Для Каждого СтрокаТЧ из РасчетИскТреб Цикл
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		ОбластьСтрока.Параметры.ДатаРасчета = Формат(СтрокаТЧ.Дата, "ДЛФ=Д"); 
		ОбластьСтрока.Параметры.ОстатокОДФактический 	= Формат(СтрокаТЧ.ОстатокОДФактический, "ЧДЦ=2");  
		ОбластьСтрока.Параметры.Проценты 				= Формат(СтрокаТЧ.Проценты, "ЧДЦ=2");
		ОбластьСтрока.Параметры.ФлагПросрочки           =?(СтрокаТЧ.ФлагНаличияПросрочки,"Да","Нет");
		ОбластьСтрока.Параметры.ПросроченныеПроценты 	= Формат(СтрокаТЧ.ПросроченныеПроценты, "ЧДЦ=2");
		ОбластьСтрока.Параметры.ОстатокПроцентовФактический = Формат(СтрокаТЧ.ОстатокПроцентовФактический, "ЧДЦ=2");
		ОбластьСтрока.Параметры.ПениШтрафы			 	= Формат(СтрокаТЧ.Пени +  СтрокаТЧ.Штрафы, "ЧДЦ=2");
		ОбластьСтрока.Параметры.ОстаткиПениШтрафы		= Формат(СтрокаТЧ.ОстаткиПени +  СтрокаТЧ.ОстаткиШтрафы, "ЧДЦ=2");
        ОбластьСтрока.Параметры.СуммаПлатежа		 	= Формат(СтрокаТЧ.СуммаПлатежа, "ЧДЦ=2");  
		ОбластьСтрока.Параметры.ОДПлатеж 				= Формат(СтрокаТЧ.ОплатаОсновнойДолг, "ЧДЦ=2");
		ОбластьСтрока.Параметры.ПроцентыПлатеж 			= Формат(СтрокаТЧ.ОплатаПроценты, "ЧДЦ=2");
		ОбластьСтрока.Параметры.ПросроченныеПроцентыПлатеж 			= Формат(СтрокаТЧ.ОплатаПросроченныеПроценты, "ЧДЦ=2");
		ОбластьСтрока.Параметры.ШтрафыПлатеж 			= Формат(СтрокаТЧ.ОплатаШтрафы + СтрокаТЧ.ОплатаПени, "ЧДЦ=2");   
		ОбластьСтрока.Параметры.КУплате		 			= Формат(СтрокаТЧ.КУплате, "ЧДЦ=2");
		
		ТабДок.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	ОбластьИтого = Макет.ПолучитьОбласть("Итого");	
	З = РегистрыСведений.РасчетныеДанные.СоздатьМенеджерЗаписи();
	З.Займ = Договор.Займ;
	З.Свойство = ПланыВидовХарактеристик.РасчетныеХарактеристики.ДниПросрочки;
	З.Прочитать();    
	ОбластьИтого.Параметры.ДниПросрочки = З.Значение;
	ТабДок.Вывести(ОбластьИтого);
	
		
	//Подвал
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьПодвал.Параметры.ФИО = ПараметрыСеанса.ТекущийПользователь;
	ТабДок.Вывести(ОбластьПодвал);
	
	
	//КонецЕсли;
	
КонецПроцедуры

Функция ДатаПоследнегоПлановогоПлатежа(Договор, Дата)
	
КонецФункции


&НаСервере
Процедура ЗапуститьНормализациюНаСервере()  
	Если Объект.Объекты.Количество() = 0 Тогда 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Нужно выбрать хотя бы один объект для  нормализации!"; 
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;    
	
	ТаблицаПодготовкаДанных = Обработки.УЗ_НормализацияАдресов.ВернутьДанныеДляНормализацииПоОбъектам(Объект.Объекты.Выгрузить().ВыгрузитьКолонку("Объект"), Объект.РеквизитХраненияАдреса);
	
	Если Объект.СервисНормализации = "ПочтаРФ" Тогда 
		Объект.РезультатПочтаРФ.Загрузить(ТаблицаПодготовкаДанных);
		Для Каждого стр Из Объект.РезультатПочтаРФ Цикл   
			стрИдентификатор = ?(ЗначениеЗаполнено(стр.КодДО), стр.КодДО, стр.КодКонтрагента);
			стр.ИдентификаторЗапроса = МодульНормализацияПочтаРФ.ВернутьИдентификаторЗапроса(стрИдентификатор);
		КонецЦикла;
		мТелоЗапроса = МодульНормализацияПочтаРФ.СформироватьМассивАдресовНормализация(Объект.РезультатПочтаРФ.Выгрузить(, "ИдентификаторЗапроса, АдресДляНормализации"));
		JSРезультатНормализацииПочтаРФ = МодульНормализацияПочтаРФ.ГлавнаяНормализоватьАдресаПочтаРФ(мТелоЗапроса);
		тзОбъединение = Объект.РезультатПочтаРФ.Выгрузить();  
		тзОбъединение.Индексы.Добавить("ИдентификаторЗапроса");
		МодульНормализацияПочтаРФ.ЗаполнитьПользовательскуюТаблицуРезультатов(тзОбъединение, JSРезультатНормализацииПочтаРФ);
		Объект.РезультатПочтаРФ.Загрузить(тзОбъединение);
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Операция завершена";
		Сообщение.Сообщить();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьНормализацию(Команда)
	ЗапуститьНормализациюНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда) 
	
	Если Элементы.ГруппаШагиНормализации.ТекущаяСтраница = Элементы.ГруппаСервис Тогда
		Элементы.ГруппаШагиНормализации.ТекущаяСтраница = Элементы.ГруппаПодбор;
	ИначеЕсли Элементы.ГруппаШагиНормализации.ТекущаяСтраница = Элементы.ГруппаЗапускИРезультаты Тогда
		Элементы.ГруппаШагиНормализации.ТекущаяСтраница = Элементы.ГруппаСервис;  
	ИначеЕсли Элементы.ГруппаШагиНормализации.ТекущаяСтраница = Элементы.ГруппаЗапускИРезультатыAhunter Тогда
		Элементы.ГруппаШагиНормализации.ТекущаяСтраница = Элементы.ГруппаСервис;  
	ИначеЕсли Элементы.ГруппаШагиНормализации.ТекущаяСтраница = Элементы.ГруппаПодбор Тогда
		Элементы.ГруппаШагиНормализации.ТекущаяСтраница = ?(Элементы.ГруппаЗапускИРезультаты.Видимость,
															Элементы.ГруппаЗапускИРезультаты, 
															Элементы.ГруппаЗапускИРезультатыAhunter);
	Иначе	
		Элементы.ГруппаШагиНормализации.ТекущаяСтраница = Элементы.ГруппаПодбор;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДалее(Команда) 
	
	Если Элементы.ГруппаШагиНормализации.ТекущаяСтраница = Элементы.ГруппаПодбор Тогда
		Элементы.ГруппаШагиНормализации.ТекущаяСтраница = Элементы.ГруппаСервис;
	ИначеЕсли Элементы.ГруппаШагиНормализации.ТекущаяСтраница = Элементы.ГруппаСервис Тогда
		Элементы.ГруппаШагиНормализации.ТекущаяСтраница = ?(Элементы.ГруппаЗапускИРезультаты.Видимость,
															Элементы.ГруппаЗапускИРезультаты, 
															Элементы.ГруппаЗапускИРезультатыAhunter);
	Иначе
		Элементы.ГруппаШагиНормализации.ТекущаяСтраница = Элементы.ГруппаПодбор;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	Объект.Объекты.Очистить();
	ОбъектыКлиент.Подбор(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоНастройкам(Команда)
	Объект.Объекты.Очистить();
	ФормаПодбор = ПолучитьФорму("Обработка.ПодборДО.Форма.Форма",, ЭтаФорма); 
	ФормаПодбор.Объект.ТипИсточника = Неопределено;
	ОткрытьФорму(ФормаПодбор); 
КонецПроцедуры

&НаКлиенте
Процедура ПодборИзФайла(Команда)
	Объект.Объекты.Очистить();
	ОбъектыКлиент.ПодборИзДОК(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКИСтруктураАдреса(Команда) 
	
	Если НЕ ЗначениеЗаполнено(Объект.АдресКИ) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Нужно выбрать адрес КИ!"; 
		Сообщение.Поле = "Объект.АдресКИ";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	
	
	ТекстУведомления = "";
	
	ПараметрыЗапуска = Новый Структура();
	ПараметрыЗапуска.Вставить("ТипСервиса", Объект.СервисНормализации); 
	
	Если ПараметрыЗапуска.ТипСервиса = "Ahunter" Тогда
		Если НЕ ЭтаФорма.Суффиксы Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Нужно включить суффиксы и заполнить таблицу заново"; 
			Сообщение.Поле = "Суффиксы";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураФоновогоЗадания  = ВыполнитьФоновоеЗаданиеЗаписатьКИСтруктураАдресаНаСервере(ПараметрыЗапуска, УникальныйИдентификатор);
	ИДЗадания = СтруктураФоновогоЗадания.ИдентификаторЗадания;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);     
	
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.Интервал 	= 2;	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(СтруктураФоновогоЗадания, Новый ОписаниеОповещения("ОбработатьРезультатЗаписиКИСтруктураАдреса", ЭтотОбъект), ПараметрыОжидания); 
	
КонецПроцедуры    

&НаКлиенте
Процедура ОбработатьРезультатЗаписиКИСтруктураАдреса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Выполнено!";
		Сообщение.Сообщить();
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Статус задачи неопределен!";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция ВыполнитьФоновоеЗаданиеЗаписатьКИСтруктураАдресаНаСервере(ПараметрыЗапуска, УникальныйИдентификатор)
	НаименованиеЗадания = "ЗаписатьКИСтруктураАдресаНаСервере";

	ВыполняемыйМетод = "КредитныеИстории.ЗаполнитьСтруктуруАдресаИзНормализации";
		
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне 	= Истина;
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", УникальныйИдентификатор);
	
	ПараметрыЗапуска = ОпределитьПараметрыЗапуска(ПараметрыЗапуска);
	
	СтруктураФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыЗапуска, ПараметрыВыполнения);
	Возврат СтруктураФоновогоЗадания;

КонецФункции  

&НаСервере
Функция ОпределитьПараметрыЗапуска(ПараметрыЗапуска) 
	
	Если Объект.СервисНормализации = "ПочтаРФ" Тогда
		ТаблицаРезультат = Объект.РезультатПочтаРФ.Выгрузить();
	ИначеЕсли Объект.СервисНормализации = "Ahunter" Тогда
		ТаблицаРезультат = РеквизитФормыВЗначение("ТаблицаДанных");
	Иначе
		ТаблицаРезультат = Неопределено;
	КонецЕсли;  
	
	МассивТаблица = УдалитьОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаРезультат);		
	ПараметрыЗапуска.Вставить("МасстзДанныеНомализации", МассивТаблица);
	ПараметрыЗапуска.Вставить("ВидАдреса", Объект.АдресКИ); 
	ПараметрыЗапуска.Вставить("Перезаписывать", Объект.ПерезаписыватьСтруктуруАдресаКИ);
	Возврат ПараметрыЗапуска;
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Объект.СервисНормализации = "ПочтаРФ"; 
	Элементы.ДекорацияПочтаРФ.Видимость = (Объект.СервисНормализации = "ПочтаРФ");
	ПриОткрытииНаСервере();
	Параметры.СчетчикВкладок = 0;
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()
	
	ЗагрузкаСтартовойТаблицыAhunter();

КонецПроцедуры

&НаСервере
Процедура ЗагрузкаСтартовойТаблицыAhunter()
	
// Формируется програмно
	ТаблицаAhunterСтартовая = Новый ТаблицаЗначений;
	ТаблицаAhunterСтартовая.Колонки.Добавить("Region");
	ТаблицаAhunterСтартовая.Колонки.Добавить("Admin_area");
	ТаблицаAhunterСтартовая.Колонки.Добавить("Admin_okrug");
	ТаблицаAhunterСтартовая.Колонки.Добавить("District");
	ТаблицаAhunterСтартовая.Колонки.Добавить("City");
	ТаблицаAhunterСтартовая.Колонки.Добавить("Place");
	ТаблицаAhunterСтартовая.Колонки.Добавить("Site");
	ТаблицаAhunterСтартовая.Колонки.Добавить("Street");  
	ТаблицаAhunterСтартовая.Колонки.Добавить("House");
	ТаблицаAhunterСтартовая.Колонки.Добавить("Building");
	ТаблицаAhunterСтартовая.Колонки.Добавить("Structure");
	ТаблицаAhunterСтартовая.Колонки.Добавить("Flat");
	ТаблицаAhunterСтартовая.Колонки.Добавить("Zip");
	ТаблицаAhunterСтартовая.Колонки.Добавить("Okato");
	ТаблицаAhunterСтартовая.Колонки.Добавить("Quality");
	
	ПрограммныйВыводТаблицыЗначенийВТаблицуНаФорму(ТаблицаAhunterСтартовая, "ТаблицаДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура СервисНормализацииПриИзменении(Элемент)

	Элементы.ДекорацияПочтаРФ.Видимость = (Объект.СервисНормализации = "ПочтаРФ");
	Элементы.ГруппаЗапускИРезультаты.Видимость = (Объект.СервисНормализации = "ПочтаРФ");
	Элементы.ДекорацияAhunter.Видимость = (Объект.СервисНормализации = "Ahunter");
	Элементы.ГруппаЗапускИРезультатыAhunter.Видимость = (Объект.СервисНормализации = "Ahunter");
	
	СбросДопНастроекAhunter();
	ЗагрузкаСтартовойТаблицыAhunter();
	ОткрытьФормуAhunterЕслиТокенНеЗаполнен();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуAhunterЕслиТокенНеЗаполнен()
		
	Если Объект.СервисНормализации = "Ahunter" Тогда
		
		Токен = ПолучитьТокен();
		
		Если НЕ ЗначениеЗаполнено(Токен) Тогда
			ОткрытьФормуМодально("ОбщаяФорма.НастройкаКонстантAhunter");	
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьТокен()
	
	Токен = Константы.ТокенAhunter.Получить();
	Возврат Токен; 
	
КонецФункции

&НаСервере
Процедура СбросДопНастроекAhunter()
	
	Страна = Перечисления.ПараметрСтранаДляAhunter.Россия; // по умолчанию;
	Quality = Ложь;
	TimeZone = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьНормализациюAhunter(Команда)
	ЗапуститьНормализациюAhunterНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗапуститьНормализациюAhunterНаСервере()
	
	Если Объект.Объекты.Количество() = 0 Тогда 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Нужно выбрать хотя бы один объект для  нормализации!"; 
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;    
	
	// Проверяем выбранные натсройки с формы и передаем их дальше
	ДопНастройкиAhunter = Новый Структура;
	ДопНастройкиAhunter.Вставить("TimeZone", TimeZone);
	ДопНастройкиAhunter.Вставить("Quality", Quality);
	ДопНастройкиAhunter.Вставить("Суффиксы", Суффиксы);
	ДопНастройкиAhunter.Вставить("Страна", Страна);
	
	ТаблицаПодготовкаДанных = Обработки.УЗ_НормализацияАдресов.ВернутьДанныеДляНормализацииПоОбъектам(Объект.Объекты.Выгрузить().ВыгрузитьКолонку("Объект"), Объект.РеквизитХраненияАдреса);	
	ТаблицаНормализованныхАдресов =	МодульНормализацияAhunter.ПолучитьответОтСервиса(ТаблицаПодготовкаДанных, ДопНастройкиAhunter);
	ПрограммныйВыводТаблицыЗначенийВТаблицуНаФорму(ТаблицаНормализованныхАдресов, "ТаблицаДанных");
	
КонецПроцедуры

&НаСервере
Процедура ПрограммныйВыводТаблицыЗначенийВТаблицуНаФорму(ТаблицаЗначенийДляВывода, ИмяРеквизитаФормы, ИспользованиеКолонкиОтметка = Ложь, ТолькоКнопкаОткрытия = Истина)

   // Функционал данного механизма служит для программного вывода "Таблицы значений"
   // в реквизит управляемой  формы с типом "ДанныеФормыКоллекция". Может быть полезен
   // в задачах, где состав колонок выгружаемой таблицы значений может меняться.
   // Механизм предусматривает работу как с реквизитом объекта, так и с реквизитом формы.

   // Также реализована возможность быстрого добавления колонки «Отметка» и настройки доступности кнопок полей.
   // Процедура должна быть размещена в модуле формы.

   Попытка

       Если ТипЗнч(ТаблицаЗначенийДляВывода) = Тип("ТаблицаЗначений") Тогда
           Если ТипЗнч(ИмяРеквизитаФормы) = Тип("Строка") Тогда
               // Опрелеляем является заполняемый реквизит, реквизитом объекта или реквизитом формы
               Если Объект.Свойство(ИмяРеквизитаФормы) И ТипЗнч(Объект[ИмяРеквизитаФормы]) = Тип("ДанныеФормыКоллекция") Тогда
                   ПутьКДаннымФормыКоллекция = "Объект." + ИмяРеквизитаФормы;
                   ОбъектДляОтображенияНаФорме = РеквизитФормыВЗначение("Объект." + ИмяРеквизитаФормы);
                   ЭтоРеквизитОбъекта = Истина;
               ИначеЕсли ТипЗнч(ЭтаФорма[ИмяРеквизитаФормы]) = Тип("ДанныеФормыКоллекция") Тогда
                   ПутьКДаннымФормыКоллекция = ИмяРеквизитаФормы;
                   ОбъектДляОтображенияНаФорме = РеквизитФормыВЗначение(ИмяРеквизитаФормы ,Тип("ТаблицаЗначений"));
                   ЭтоРеквизитОбъекта = Ложь;
               КонецЕсли;
           КонецЕсли;

           МассивУдаляемыхРеквизитов = Новый Массив;
           МассивДобавляемыхРеквизитов = Новый Массив;
           МассивИсключаемыхРеквизитов = Новый Массив;

           // Формируем массив колонок для удаления
           Для Каждого Колонка Из ОбъектДляОтображенияНаФорме.Колонки Цикл
               МассивУдаляемыхРеквизитов.Добавить(ПутьКДаннымФормыКоллекция + "." + Колонка.Имя);
           КонецЦикла;

           // Удаляем колонки с формы
           Для Каждого Колонка Из ОбъектДляОтображенияНаФорме.Колонки Цикл
               ЭлементКолонки = Элементы.Найти(ИмяРеквизитаФормы + Колонка.Имя);
               Если НЕ ЭлементКолонки = Неопределено Тогда
                   Элементы.Удалить(ЭлементКолонки);
               КонецЕсли;
           КонецЦикла;

           // Добавляем колонку "Отметка"
           Если ИспользованиеКолонкиОтметка Тогда
               НоваяКолонка = Новый РеквизитФормы("Отметка", Новый ОписаниеТипов("Булево"),  ПутьКДаннымФормыКоллекция);
               МассивДобавляемыхРеквизитов.Добавить(НоваяКолонка);
           КонецЕсли;

           // Формируем массив колонок из таблицы значений
           Для Каждого Колонка Из ТаблицаЗначенийДляВывода.Колонки Цикл
               Если Колонка.ТипЗначения.Типы().Найти(Тип("Тип")) = Неопределено Тогда
                   НоваяКолонка = Новый РеквизитФормы(Колонка.Имя, Новый ОписаниеТипов(Колонка.ТипЗначения.Типы()), ПутьКДаннымФормыКоллекция);
                   МассивДобавляемыхРеквизитов.Добавить(НоваяКолонка);
               Иначе
                   Сообщить("Колонка " + Строка(Колонка.Имя) + " с типом:  не может быть выгружена");
                   МассивИсключаемыхРеквизитов.Добавить(Колонка);
               КонецЕсли;
           КонецЦикла;

           // Обновляем реквизиты формы
           ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);

           //Создаем элементы на форме для отображения колонок
           ЭлементТЗ = Элементы[ИмяРеквизитаФормы];

           // Добавляем колонку "Отметка"
           Если ИспользованиеКолонкиОтметка Тогда
               НовыйЭлементФормы = Элементы.Добавить(ИмяРеквизитаФормы + "Отметка", Тип("ПолеФормы"), ЭлементТЗ);
               НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
               НовыйЭлементФормы.ПутьКДанным = ПутьКДаннымФормыКоллекция + "." + "Отметка";
               НовыйЭлементФормы.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
           КонецЕсли;

           // Добавляем колонки из таблицы
           Для Каждого Колонка Из ТаблицаЗначенийДляВывода.Колонки Цикл
               Если МассивИсключаемыхРеквизитов.Найти(Колонка) = Неопределено Тогда
                   НовыйЭлементФормы = Элементы.Добавить(ИмяРеквизитаФормы + Колонка.Имя, Тип("ПолеФормы"), ЭлементТЗ);
                   НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
				
                   // Устанавливаем доступность кнопок
				   Если ТолькоКнопкаОткрытия Тогда
                       НовыйЭлементФормы.РедактированиеТекста = Истина;
                       НовыйЭлементФормы.ВыбиратьТип = Ложь;
                       НовыйЭлементФормы.КнопкаВыбора  = Ложь;
                       НовыйЭлементФормы.КнопкаВыпадающегоСписка = Ложь;
                       НовыйЭлементФормы.КнопкаОткрытия = Истина;
                       НовыйЭлементФормы.КнопкаОчистки = Ложь;
                   Иначе
                       НовыйЭлементФормы.РедактированиеТекста = Истина;
                       НовыйЭлементФормы.ВыбиратьТип = Истина;
                       НовыйЭлементФормы.КнопкаВыбора  = Истина;
                       НовыйЭлементФормы.КнопкаВыпадающегоСписка = Истина;
                       НовыйЭлементФормы.КнопкаОткрытия = Истина;
                       НовыйЭлементФормы.КнопкаОчистки = Истина;
                   КонецЕсли;
                   НовыйЭлементФормы.КнопкаРегулирования = Ложь;
                   НовыйЭлементФормы.КнопкаСоздания = Ложь;
                   НовыйЭлементФормы.КнопкаСпискаВыбора = Ложь;
                   НовыйЭлементФормы.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
                   НовыйЭлементФормы.БыстрыйВыбор = Ложь;
                   НовыйЭлементФормы.ПутьКДанным = ПутьКДаннымФормыКоллекция + "." + Колонка.Имя;
               КонецЕсли;
		   КонецЦикла;

		   // Загружаем таблицу значений в данные формы коллекцию
		   Если ЭтоРеквизитОбъекта Тогда
			   Объект[ИмяРеквизитаФормы].Загрузить(ТаблицаЗначенийДляВывода);
		   Иначе
			   ЭтаФорма[ИмяРеквизитаФормы].Загрузить(ТаблицаЗначенийДляВывода);	   
		   КонецЕсли;
		   
		   ПокраситьЯчейкиБезАдресов("ТаблицаДанных", ТаблицаЗначенийДляВывода);
		   
	   Иначе
		   Сообщить("Выводить можно только таблицу значений");
	   КонецЕсли;

   Исключение
       ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
   КонецПопытки;

КонецПроцедуры

// Проверка осуществляется по заполненности поля Region + House
// Если содержимое ячеек не заполнено то подкрашиваем всю строку
// Считая что адрес в ДО пустой
&НаСервере
Процедура ПокраситьЯчейкиБезАдресов(ИмяРеквизитаФормы, ТЗСКолонками)
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	Для каждого Элемент Из ТЗСКолонками.Колонки Цикл
	
		ОформляемоеПоле      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяРеквизитаФормы + Элемент.Имя);
	
	КонецЦикла;
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДанных.House");
	ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбора2 = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДанных.Region");
	ЭлементОтбора2.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.БледноКрасноФиолетовый);
	
КонецПроцедуры


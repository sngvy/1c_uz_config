

#Область ТехническийИнтерфейс

Функция ПолучитьДОПоДолжнику(ДолжникСсылка) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 2
	                      |	ДолговыеОбязательства.Ссылка
	                      |ИЗ
	                      |	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	                      |ГДЕ
	                      |	ДолговыеОбязательства.Владелец = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ДолжникСсылка);	
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() = 1 Тогда
		Возврат Таблица[0].Ссылка;
	Иначе
		Возврат Справочники.ДолговыеОбязательства.ПустаяСсылка();
	КонецЕсли;	
КонецФункции

Функция ПолучитьОтобранныеДолговыеОбязательства(КомпоновщикДС) Экспорт

	СКД = Справочники.ДолговыеОбязательства.ПолучитьМакет("ПодборДолговыхОбязательств");

	Отборы = СКД.ВариантыНастроек.Основной.Настройки.Отбор;
	Настройки = КомпоновщикДС.ПолучитьНастройки().Отбор;
	Для каждого Настройка Из Настройки.Элементы Цикл
	
		Если НЕ ОтборКорректен(Настройка) Тогда
		
			Возврат Новый Массив;
		
		КонецЕсли;
	
	КонецЦикла;
	
	КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(Отборы, Настройки, Ложь);
	
	ЭлементыОтбора = Отборы.Элементы;
	ОбработатьДополнительныеРеквизиты(СКД, ЭлементыОтбора);

	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Источник = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД);
	КомпоновщикНастроек.Инициализировать(Источник);
	
	ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, СКД.ВариантыНастроек.Основной.Настройки, , , ТипГенератора);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ДолговыеОбязательства = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ДолговыеОбязательства);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ДолговыеОбязательства.ВыгрузитьКолонку("Объект");

КонецФункции // ()

Функция ОрганизацияУчетаДляБизнесПроцесса(ДанныеУчета) Экспорт

	СтатусУчета = РегистрыНакопления.ОбъектыВРаботе.СтатусУчета(ДанныеУчета);
	
	Если СтатусУчета = "НаПодразделении" Тогда
	
		Ответ = Новый Структура;
		Ответ.Вставить("Результат", Истина);
		Ответ.Вставить("ТекстОшибки", "");
		Возврат Ответ;
	
	КонецЕсли;
	
	Если СтатусУчета = "НаОрганизации" Тогда
	
		Результат = ПринятьВРаботуПодразделенияИзБП(ДанныеУчета);
		
		Ответ = Новый Структура;
		Ответ.Вставить("Результат", Результат);
		Ответ.Вставить("ТекстОшибки", "Не удалось принять в работу подразделения");
		Возврат Ответ;
	
	КонецЕсли;
	
	Если СтатусУчета = "НеВРаботе" Тогда
	
		НачатьТранзакцию();
		Попытка
		
			Результат = ПринятьВРаботуОрганизацииИзБП(ДанныеУчета);
			Если Не Результат Тогда
			
				ВызватьИсключение "Не удалось принять в работу организации";
			
			КонецЕсли;
			
			Результат = ПринятьВРаботуПодразделенияИзБП(ДанныеУчета);
			Если Не Результат Тогда
			
				ВызватьИсключение "Не удалось принять в работу подразделения";
			
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		
		Исключение
			ОтменитьТранзакцию();
			Ответ = Новый Структура;
			Ответ.Вставить("Результат", Ложь);
			Ответ.Вставить("ТекстОшибки", "Не удалось принять в работу: " + КраткоеПредставлениеОшибки(ОписаниеОшибки()));
			Возврат Ответ;
		КонецПопытки;

	КонецЕсли;
	
	Ответ = Новый Структура;
	Ответ.Вставить("Результат", Истина);
	Ответ.Вставить("ТекстОшибки", "");
	Возврат Ответ;

КонецФункции // ()

Функция ПолучитьОтветственных(Элемент, ТипСотрудника) Экспорт

	Запрос = РегистрыСведений.ОтветственныеСотрудники.ЗапросДляОпределенияОтветственного();
	Запрос.УстановитьПараметр("Объект", Элемент);
	Запрос.УстановитьПараметр("ТипСотрудника", ТипСотрудника);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции // ()


#КонецОбласти

#Область ПринятиеВРаботу

Функция ПринятьВРаботуОрганизацииИзБП(ДанныеУчета)

	ДанныеПринятия = Новый Структура;
	ДанныеПринятия.Вставить("Организация", ДанныеУчета["Организация"]);
	ДанныеПринятия.Вставить("Автор", ДанныеУчета["БизнесПроцесс"]);
	ДанныеПринятия.Вставить("Комментарий", ДанныеУчета["Комментарий"]);
	
	ОбъектПринятия = ДанныеУчета["Объект"];
	Объекты = Новый Массив;
	Объекты.Добавить(ОбъектПринятия);
	
	Приниматель = Документы.ПринятиеВРаботуОрганизации;
	Документ = ПринятьВРаботуОрганизации(Приниматель, ДанныеПринятия, Объекты);
	
	// Первоначальная реализация ТекущаяДатаСеанса() - 1
	// Ставим документ ПринятияВРаботу(Дата - 2) перед АктомПередачи(Дата - 1)
	Документ.Дата = Документ.Дата - 2;
	
	Попытка
	
		Документ.Записать(РежимЗаписиДокумента.Проведение);
	
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции // ()

Функция ПринятьВРаботуПодразделенияИзБП(ДанныеУчета)

	Если ДанныеУчета["Подразделение"].Пустая() Тогда
	
		Возврат Истина;
	
	КонецЕсли;
	
	ДанныеПринятия = Новый Структура;
	ДанныеПринятия.Вставить("Организация", ДанныеУчета["Организация"]);
	ДанныеПринятия.Вставить("Автор", ДанныеУчета["БизнесПроцесс"]);
	ДанныеПринятия.Вставить("Комментарий", ДанныеУчета["Комментарий"]);
	ДанныеПринятия.Вставить("ПодразделениеПринимающее", ДанныеУчета["Подразделение"]);
	ДанныеПринятия.Вставить("НеНазначатьСотрудников", Истина);
	
	ОбъектПринятия = ДанныеУчета["Объект"];
	Объекты = Новый Массив;
	Объекты.Добавить(ОбъектПринятия);
	
	Приниматель = Документы.АктПередачи;
	Документ = ПринятьВРаботуОрганизации(Приниматель, ДанныеПринятия, Объекты);
	
	// Первоначальная реализация ТекущаяДатаСеанса() - 1
	Документ.Дата = Документ.Дата - 1;
	
	Попытка
	
		Документ.Записать(РежимЗаписиДокумента.Проведение);
	
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции // ()

Функция ПринятьВРаботуОрганизации(Приниматель, ДанныеПринятия, Объекты)

	Документ = Приниматель.Создать(ДанныеПринятия);
	Документ.ДобавитьОбъекты(Объекты);
	
	Возврат Документ;

КонецФункции // ()


#КонецОбласти

Процедура ИзменитьЗапрос(СКД, ИмяСвойстваТекст)

	ТекстЗапроса = СКД.НаборыДанных.НаборДанныхЗапроса.Запрос;
	ИмяСвойства = СтрЗаменить(ИмяСвойстваТекст, " ", "");
	
	ТаблицаСвойства = "ДолговыеОбязательстваДополнительныеРеквизиты" + ИмяСвойства;
	
	НовыйТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"~ЗначениеСвойства~",
		", " + ТаблицаСвойства + ".Значение КАК " + ИмяСвойства + "~ЗначениеСвойства~");
		
	НовыйТекстЗапроса = СтрЗаменить(
		НовыйТекстЗапроса,
		"~СоединениеСвойства~",
		"	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДолговыеОбязательства.ДополнительныеРеквизиты КАК " + ТаблицаСвойства + "
		|		ПО ОбъектыВРаботеОстатки.Объект = " + ТаблицаСвойства + ".Ссылка
		|		И " + ТаблицаСвойства + ".Свойство.Наименование = """ + ИмяСвойстваТекст + """~СоединениеСвойства~");
		
	СКД.НаборыДанных.НаборДанныхЗапроса.Запрос = НовыйТекстЗапроса;

КонецПроцедуры

Процедура ОчиститьТегиВЗапросе(СКД)

	ТекстЗапроса = СКД.НаборыДанных.НаборДанныхЗапроса.Запрос;
	НовыйТекстЗапроса = СтрЗаменить(ТекстЗапроса, "~ЗначениеСвойства~", "");
	НовыйТекстЗапроса = СтрЗаменить(НовыйТекстЗапроса, "~СоединениеСвойства~", "");
	СКД.НаборыДанных.НаборДанныхЗапроса.Запрос = НовыйТекстЗапроса;

КонецПроцедуры

Процедура ОбработатьДополнительныеРеквизиты(СКД, ЭлементыОтбора);

	ДляУдаления = Новый Массив;
	
	Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл
	
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		
			ОбработатьДополнительныеРеквизиты(СКД, ЭлементОтбора.Элементы);
			Продолжить;
		
		КонецЕсли;
		
		Значение = Строка(ЭлементОтбора.ЛевоеЗначение);
		ПозицияДополнительногоСвойства = СтрНайти(Значение, "[");
		Если ПозицияДополнительногоСвойства = 0 Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		ИмяСвойства = Сред(
			Значение,
			ПозицияДополнительногоСвойства + 1,
			СтрДлина(Значение) - ПозицияДополнительногоСвойства - 1);
	
		ЗаменитьЭлементДополнительногоСвойстваВОтборе(ЭлементыОтбора, ЭлементОтбора, ИмяСвойства);
		Если ЭлементОтбора.Использование Тогда
		
			ИзменитьЗапрос(СКД, ИмяСвойства);
		
		КонецЕсли;
		
		ДляУдаления.Добавить(ЭлементОтбора);
	
	КонецЦикла;
	ОчиститьТегиВЗапросе(СКД);
	Для каждого ЭлементУдаления Из ДляУдаления Цикл
	
		ЭлементыОтбора.Удалить(ЭлементУдаления);
	
	КонецЦикла;

КонецПроцедуры



Функция ОтборКорректен(Настройка)

	Если ТипЗнч(Настройка) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
	
		Возврат Истина;
	
	КонецЕсли;
	
	Значение = Строка(Настройка.ЛевоеЗначение);
	Состав = СтрРазделить(Значение, ".", Ложь);
	
	Если Состав.Количество() = 0 ИЛИ Состав[0] <> "Объект" Тогда
	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отбор для массовой печати делается по полю ОБЪЕКТ";
		Сообщение.Сообщить();
		Возврат Ложь;
	
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ()

Процедура ЗаменитьЭлементДополнительногоСвойстваВОтборе(ПриемникЭлементов, ЭлементОтбора, ИмяСвойстваТекст)

	//ГруппаДобавления = ЭлементОтбора.Родитель;
	//
	//НовыйОтбор = ГруппаДобавления.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Свойство");
	//НовыйОтбор.ПравоеЗначение = ИмяСвойства;
	//НовыйОтбор.Использование = ЭлементОтбора.Использование;

	//НовыйОтбор = ГруппаДобавления.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//НовыйОтбор.ВидСравнения = ЭлементОтбора.ВидСравнения;
	//НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Значение");
	//НовыйОтбор.ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
	//НовыйОтбор.Использование = ЭлементОтбора.Использование;
	
	ИмяСвойства = СтрЗаменить(ИмяСвойстваТекст, " ", "");
	
	ЭлементПриемник = ПриемникЭлементов.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементОтбора);
	ЭлементПриемник.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяСвойства);
	
КонецПроцедуры



//////////////////////////////////////////////////////////////
//
// ЯДРО (API) ДЛЯ РАБОТЫ С WEB-СЕРВИСОМ SMS4B
//
// Ядро включает в себя весь необходимый функционал для взаимодействия  с веб-сервисом SMS4B. 
// Оно независимо от конкретной конфигурации. Ядро реализует функциональность низшего уровня, поэтому 
// оно не содеражит обращений к метаданным конфигурации и вызовов методов других модулей.
//
// Для использования ядра необходимы следующие объекты метаданных:
//
// • WSСсылка «бит_СМС_SMS4B»,
// • WSСсылка «бит_СМС_SMS4BРезерв»,
// • Параметр сеанса «бит_СМС_НомерСессии»,
// • Параметр сеанса «бит_СМС_Пользователь»,
// • Параметр сеанса «бит_СМС_Пароль»,
// • Параметр сеанса «бит_СМС_ОсновнойСервер»,
// • Параметр сеанса «бит_СМС_КорректировкаUTC».

//////////////////////////////////////////////////////////////
// ОСНОВНЫЕ МЕТОДЫ ЯДРА

// Функция устанавливает на сервере в параметры сеанса имя пользователя и пароль.
//  
// Параметры:
//
//  ИмяПользователя(строка) - имя пользователя для подключения к SMS4B,
//  Пароль(строка) - пароль пользователя для подключения к SMS4B.
// 
Процедура УстановитьИмяПользователяИПароль(ИмяПользователя, Пароль) Экспорт 
	ПараметрыСеанса.бит_СМС_Пользователь = ИмяПользователя;
	ПараметрыСеанса.бит_СМС_Пароль		= Пароль;
КонецПроцедуры

// Функция предназначена для подключению к серверу SMS4B. Вызывается перед первой 
// попыткой обращения к функциям сервера 
// либо после разрыва сервером SMS4B открытой ранее сессии.
//
// Возвращаемое значение (число): Возвращает числовой код ошибки, 1 – если функция выполнена 
//								  успешно, и код ошибки < 0, если функция выполнена не успешно 
//								  (см описание функции ОписаниеОшибокВебСервиса ()). 
//
Функция Подключиться() Экспорт
	
	Отключиться(); //если вдуг сессия поднята
	
	КодОшибки = 1;
	
	// Устанавливаем GMT=0, т.к. всегда будем работать по UTC (как сервер SMS4B)
	GMT = 0;
	// Собираем информацию о конфигурации (для статистики на сервере SMS4B)
	ИмяКонфигурации 	= СтрЗаменить(Метаданные.Имя, " ", "_");
	КраткаяИнформация 	= СтрЗаменить(Метаданные.КраткаяИнформация," ","_");
	
	ИмяКонфигурации = ИмяКонфигурации + "("+КраткаяИнформация+")";
	
	Если СтрДлина(ИмяКонфигурации) > 425 Тогда
		ИмяКонфигурации = Лев(ИмяКонфигурации, 425);
	КонецЕсли;	
	СисИнфо = Новый СистемнаяИнформация;
	
	
	// Получаем имя пользователя и пароль
	Попытка
		ИмяПользователя = ПараметрыСеанса.бит_СМС_Пользователь;
		ПарольПользователя = ПараметрыСеанса.бит_СМС_Пароль;
	Исключение
		// Не были определены параметры сеанса имя и пароль пользователя
		КодОшибки = -1;
		Возврат КодОшибки;
	КонецПопытки;
	
	ВерсияЯдра = ВернутьВерсиюЯдра();
	
	Пользователь = ИмяПользователя;
	Пароль 		 = ПарольПользователя;
	
	// Всегда пробуем сначала подключиться на основной сервер
	ПараметрыСеанса.бит_СМС_ОсновнойСервер = Истина;
	ВебСервис = ПодключитьВебСервис();
	
	// Открываем сессию для работы с веб-сервисом
	Попытка
		РезультатПодключения = ВебСервис.StartSession(Пользователь, Пароль, GMT); 
	Исключение
		РезультатПодключения = Неопределено;
	КонецПопытки;
	
	// Запомним код ошибки
	КодОшибки = РезультатПодключения;

	// Проверям результат подключения первый раз
	// Если нет связи, либо ошибки от -1 до -19, то подключаемся на резервный сервер.
	Если РезультатПодключения = Неопределено ИЛИ (РезультатПодключения <= -1 И РезультатПодключения >= -19) Тогда
		// Подключаемся к резервному серверу
		ПараметрыСеанса.бит_СМС_ОсновнойСервер = Ложь;
		ВебСервис = ПодключитьВебСервис();
		Попытка
			РезультатПодключения = ВебСервис.StartSession(Пользователь, Пароль, GMT); 
		Исключение
			РезультатПодключения = Неопределено;
		КонецПопытки;
		// Запомним код ошибки
		КодОшибки = РезультатПодключения;
		
	КонецЕсли;
	
	// Проверям результат подключения второй раз
	Если НЕ РезультатПодключения = Неопределено Тогда // Успешно
		// Проверям РезультатПодключения на ошибки 
		Если РезультатПодключения < 1 Тогда // Есть ошибки
			ВывестиСообщениеИЗаписатьВЖурналРегистрации(ОписаниеОшибокВебСервиса(РезультатПодключения), СтатусСообщения.Важное, 
			"Подключение SMS", УровеньЖурналаРегистрации.Ошибка);
			
			Возврат РезультатПодключения; // Возвращаем код ошибки
		Иначе // Ошибок нет
			// Устанавливаем параметр сеанса НомерСессии
			ПараметрыСеанса.бит_СМС_НомерСессии = РезультатПодключения;
			
			// Вызываем функцию для установки параметра сеанса "бит_СМС_КорректировкаUTC"
			ПолучитьПараметрыСессии();
		КонецЕсли;
	Иначе
		// Проверяем код ошибки если не доступен резервный сервер
		Если КодОшибки = Неопределено Тогда
			КодОшибки = -99999; // Проблема с интернетом (сервис не ответил)
		КонецЕсли; 
	КонецЕсли;	
	
	// КодОшибки > 0 - получили код сессии, успешно подключились.
	Если КодОшибки > 0 Тогда
		КодОшибки = 1;
	КонецЕсли;
	
	// Возвращаем результат работы функции
	Возврат КодОшибки;	
	   
КонецФункции // Подключиться

// Функция предназначена для получения параметров пользователя. 
// Вызывается после подключения к серверу, и после отправки sms-сообщений,
// чтобы пользователь видел остаток sms-сообщений. 
//
// Параметры:
//
//  Параметры (структура) - Возвращаемый параметр. 
// 
// Возвращаемое значение (число):
// 
// Возвращает числовой код ошибки, 1 – если функция выполнена успешно, 
// и код ошибки < 0, если функция выполнена не успешно.
//
Функция ПолучитьПараметрыСессии(Параметры = Неопределено) Экспорт

	КодОшибки = 1;
	
	// Если параметр не передали, то создадим структуру
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли; 
	
	// Подключаем веб-сервис
	ВебСервис = ПодключитьВебСервис();
	// Получаем фабрику XDTO
	Если НЕ ВебСервис = Неопределено Тогда
		Фабрика = ВебСервис.ФабрикаXDTO;		
	Иначе
		КодОшибки = -9;
		Возврат КодОшибки;
	КонецЕсли; 
	
	Попытка
		// Получаем с веб-сервиса параметры сессии
		ПараметрыСессии = ВебСервис.ParamSMS(ПолучитьНомерСессии());
	Исключение
		ПараметрыСессии = Неопределено;
	КонецПопытки;
	
	// Проверяем результат выполнения
	Если НЕ ПараметрыСессии = Неопределено Тогда
		// Код ошибки при неуспешном выполнении метода
		КодОшибки = Число(ПараметрыСессии.Result);
		// Если сессия устарела или её нет
		Если КодОшибки = -1 ИЛИ КодОшибки = -2 Тогда
			// Подключаемся
			КодОшибкиПодкл = Подключиться();
			// Если не удалось подключится
			Если КодОшибкиПодкл < 1 Тогда
				Возврат КодОшибкиПодкл;
			Иначе
				// Пробуем получить ещё раз
				Попытка
					// Получаем с веб сервиса параметры сессии
					ПараметрыСессии = ВебСервис.ParamSMS(ПолучитьНомерСессии());
				Исключение
					ПараметрыСессии = Неопределено;
				КонецПопытки;
				Если НЕ ПараметрыСессии = Неопределено Тогда
					КодОшибки = Число(ПараметрыСессии.Result);
				КонецЕсли;							
			КонецЕсли;
		КонецЕсли;
		// Если ошибка, то возвращаем код ошибки
		Если КодОшибки < 0 Тогда 
			// Выводим текст с описанием ошибки
			ВывестиСообщениеИЗаписатьВЖурналРегистрации(ОписаниеОшибокВебСервиса(КодОшибки), СтатусСообщения.Важное, 
									"Подключение SMS", УровеньЖурналаРегистрации.Предупреждение);
			Возврат КодОшибки;
		Иначе
			Параметры.Вставить("Номера",      ПараметрыСессии.Addresses);
			Параметры.Вставить("ОстатокСМС",  ПараметрыСессии.Rest);
			Параметры.Вставить("КолНомеров",  ПараметрыСессии.AddrMask);
			// Получаем время веб-сервера в UTC, и считаем разницу в секундах с "нашим" временем.
			// Записываем его в параметр сеанса для дальнейшего использования.
			СтрВремяСервера = Сред(ПараметрыСессии.UTC, 1, 19);
			ВремяСервера = СтрокаВДату(СтрЗаменить(СтрВремяСервера, "T", " "));
			Параметры.Вставить("СмещениеUTC", ТекущаяДата() - ВремяСервера);
			Параметры.Вставить("МаксАктуальностьДоставки", ПараметрыСессии.Limit);
			Параметры.Вставить("МаксДлительностьДоставки", ПараметрыСессии.Duration);
			// Уберем "лишние" секунды от корректировки UTC
			ПараметрыСеанса.бит_СМС_КорректировкаUTC = Окр((ТекущаяДата() - ВремяСервера)/60/60) *60*60;
		КонецЕсли;
	Иначе
		КодОшибки = -99999;
		Возврат КодОшибки; // Проблема с интернетом (сервис не ответил)
	КонецЕсли;
	
	// КодОшибки > 0 - успешно получили параметры сессии.
	Если КодОшибки > 0 Тогда
		КодОшибки = 1;
	КонецЕсли;
	
	Возврат КодОшибки;

КонецФункции // ПолучитьПараметрыСессии()

// Функция предназначена для получения входящих sms-сообщений. Функция по возможности
// склеит части входящих сообщений в одно sms-сообщение. В случае, если в момент вызова
// какие то из частей сообщения еще не получены сервером SMS4B, в конец текста будет 
// вставлен специальный маркер. Формат маркера: «[…]». На основании маркера при получении 
// оставшихся частей сообщений можно будет «дособрать» его на стороне клиента.
//
// Параметры:
//
//  СписокСообщений (массив)- Возвращаемый параметр, содержит массив структур, содержащих 
//							  поля полученных sms-сообщений.
//							
//  ДатаПолученияСообщения (Дата и время) - Возвращаемый параметр. В метод передается дата, 
//											начиная с которой нужно получать сообщения, возвращается
//											дата последнего полученного сообщения. Если не передана
//											дата получения сообщений, то будут получены сообщения 
//											с начала дня текущей даты. В этом случае значение 
//											миллисекунд будет проигнорировано. 
//							
//  Миллисекунда (число(3)) - 	Возвращаемый параметр. В дополнение ко времени получения сообщений
//								передается миллисекунда, поскольку на сервере SMS4B время хранится
//								с точностью до миллисекунд. Возвращается миллисекунда времени 
//								последнего полученного сообщения.
//							
//  ПолучатьТолькоПолныеСМС (булево) - 	Необязательный параметр, по умолчанию Ложь. На сервере SMS4B
//										реализован механизм, позволяющий получать sms, состоящие из 
//										нескольких частей, только когда будут получены все ее части. 
//										Этот механизм будет использоваться,	если значение параметра 
//										равно Истина. Если значение равно Ложь, части sms будут 
//										возвращаться сразу по мере их прихода. Действия по склеиванию 
//										пришедших частей с полученными ранее необходимо выполнять на 
//										стороне клиента в предметной логике.
//										Следует понимать, что при использовании режима получения только
//										полных сообщений есть риск того, что некоторые сообщения никогда
//										не будут получены с сервера (если на сервер не дойдут какие то
//										части сообщений).
// 
// Возвращаемое значение (число):
// 
// Возвращает числовой код ошибки, 1 – если функция выполнена успешно,
// и код ошибки < 0, если функция выполнена не успешно.
//
Функция ПолучитьСообщения(СписокСообщений, ДатаПолученияСообщения, Миллисекунда = 0, ПолучатьТолькоПолныеСМС = Ложь) Экспорт
	
	КодОшибки = 1;
	Маркер = "[…]"; // Признак частично полученного сообщения, добавляется в конец сообщения,
					// если оно не было получено полностью с сервера
	
	// Если дата не заполнена, то получаем сообщения с начала дня текущей даты
	Если НЕ ЗначениеЗаполнено(ДатаПолученияСообщения) Тогда
		ДатаПолученияСообщения = НачалоДня(ТекущаяДата());
	КонецЕсли;
	
	// Переводим дату получения сообщений к времени по UTC
	ДатаПолученияСообщенияUTC = ПривестиДатуКUTC(ДатаПолученияСообщения);
	
	// Создаем структуру даты, с которой необходимо получить входящие  сообщения
	СтруктураДаты = Новый Структура;
	СтруктураДаты.Вставить("Дата", ДатаПолученияСообщенияUTC);
	СтруктураДаты.Вставить("Миллисекунда", Миллисекунда);
	
	// Переводим дату в строку
	МоментВремени = ДатаВСтроку(СтруктураДаты);
	
	// Создаем таблицу значений для полученных сообщений
	ПолученныеСообщения = Новый ТаблицаЗначений;
	ПолученныеСообщения.Колонки.Добавить("GUID");
	ПолученныеСообщения.Колонки.Добавить("ДатаПолучения"); 
	ПолученныеСообщения.Колонки.Добавить("Миллисекунда");
	ПолученныеСообщения.Колонки.Добавить("Отправитель");
	ПолученныеСообщения.Колонки.Добавить("Получатель");
	ПолученныеСообщения.Колонки.Добавить("ТекстСообщения");
	ПолученныеСообщения.Колонки.Добавить("ВсегоЧастей");
	ПолученныеСообщения.Колонки.Добавить("ТекущаяЧасть");
				
	ВебСервис = ПодключитьВебСервис();
	Если НЕ ВебСервис = Неопределено Тогда
		// Получаем фабрику XDTO 
		Фабрика = ВебСервис.ФабрикаXDTO;
	Иначе
		КодОшибки = -9;
		Возврат КодОшибки;
	КонецЕсли; 
	
	ЕстьСообщения = Истина;
	Пока ЕстьСообщения Цикл
		// Получаем сообщения с сервера
		Попытка
			НовыеСообщения = ВебСервис.LoadSMS(ПолучитьНомерСессии(), МоментВремени, ?(ПолучатьТолькоПолныеСМС, 1, 0));
		Исключение
			НовыеСообщения = Неопределено;
		КонецПопытки;
		Если НЕ НовыеСообщения = Неопределено Тогда
			КодОшибки = Число(НовыеСообщения.Result); // Код ошибки, если > 0, то есть сообщения
			// Если сессия устарела или её нет то надо подключится
			Если КодОшибки >= -19 И КодОшибки <= -1 Тогда
				
				// Возможно, что Основной сервер не доступен, пробудем переключится на резервный.
				КодОшибкиПодкл = 0;
				Если ПоменятьСервер(КодОшибкиПодкл) тогда
					Возврат -100000 + КодОшибки; 
				КонецЕсли;
				
				
				// Если есть ошибки при подключении то возвращаем код ошибки
				Если КодОшибкиПодкл < 1 Тогда
					Возврат КодОшибкиПодкл;
				Иначе
					// Пробуем получить ещё раз
					Попытка
						// Переводим дату получения сообщений к времени по UTC
						ДатаПолученияСообщенияUTC = ПривестиДатуКUTC(ДатаПолученияСообщения);
						// Создаем структуру даты с которой необходимо получить вх. сооб.
						СтруктураДаты = Новый Структура;
						СтруктураДаты.Вставить("Дата", ДатаПолученияСообщенияUTC);
						СтруктураДаты.Вставить("Миллисекунда", Миллисекунда);
						// Переводим дату в строку
						МоментВремени = ДатаВСтроку(СтруктураДаты);
						НовыеСообщения = ВебСервис.LoadSMS(ПолучитьНомерСессии(), МоментВремени, ?(ПолучатьТолькоПолныеСМС, 1, 0));
					Исключение
						НовыеСообщения = Неопределено;
					КонецПопытки;
					Если НЕ НовыеСообщения = Неопределено Тогда
						КодОшибки = Число(НовыеСообщения.Result); // Код ошибки
					Иначе
						Подключиться();
						КодОшибки = -199999;
						Возврат КодОшибки; // Проблема с интернетом
					КонецЕсли;							
				КонецЕсли;
			КонецЕсли; 
			Если КодОшибки < 0 Тогда // Есть ошибки при получении сообщений
				Возврат КодОшибки;
			КонецЕсли;
		Иначе
			Подключиться();
			КодОшибки = -199999;
			Возврат КодОшибки; // Проблема с интернетом
		КонецЕсли; 
		
		// Получаем список сообщений
		Попытка
			СписокВходящихСообщений = НовыеСообщения.List.SMSList;
		Исключение
		    СписокВходящихСообщений = Неопределено;
		КонецПопытки;
		
		// Обрабатываем полученные сообщения
		Если НЕ СписокВходящихСообщений = Неопределено Тогда
			КолПолученных = 0; // Сообщение
			Для Каждого Строка Из СписокВходящихСообщений Цикл
				// Пропускаем повторно полученные сообщения
				ИскомаяСтрока = ПолученныеСообщения.Найти(Строка.G);
				Если НЕ ИскомаяСтрока = Неопределено Тогда 
					Если ИскомаяСтрока.ТекущаяЧасть >= Строка.P И ИскомаяСтрока.ВсегоЧастей = Строка.A Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				КолПолученных = КолПолученных + 1; // Подсчет новых
				
				// Склеиваем сообщения только тогда когда получаем их частями
				Если НЕ ПолучатьТолькоПолныеСМС Тогда
					Если НЕ ИскомаяСтрока = Неопределено Тогда
						// Склеиваем сообщение, если сообщение не полное, то добавляем маркер
						// (признак того, что сообщение получено не полностью).
						Если ИскомаяСтрока.ВсегоЧастей = Строка.A И ИскомаяСтрока.ТекущаяЧасть < Число(Строка.P) Тогда
							ИскомаяСтрока.ТекстСообщения = СтрЗаменить(ИскомаяСтрока.ТекстСообщения, Маркер, "") 
							+ СтрокуВОбычноеПредставление(Строка.B, Строка.E) + ?(Число(Строка.P) = Число(Строка.A), "", Маркер);
							ИскомаяСтрока.ТекущаяЧасть      = Строка.P;
							// Запишем дату получения последней части сообщения
							ДатаСтрокой = СтрокаВДату(Лев(Строка.M, 19));
							ДатаUTC = ПривестиДатуКUTC(ДатаСтрокой, Ложь);
							ИскомаяСтрока.ДатаПолучения  = ДатаВСтроку(ДатаUTC);
							ИскомаяСтрока.Миллисекунда   = Прав(МоментВремени, СтрДлина(МоментВремени)-Найти(МоментВремени,"."));
							МоментВремени = Строка.M;
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				ТекСообщение = ПолученныеСообщения.Добавить();
				ТекСообщение.GUID 			= Строка.G;
				// Переводим время входящей БИТ_СМС_ из UTC в "наше"
				ДатаСтрокой = СтрокаВДату(Лев(Строка.M,19));
				ДатаUTC = ПривестиДатуКUTC(ДатаСтрокой, Ложь);
				ТекСообщение.ДатаПолучения  = ДатаВСтроку(ДатаUTC);
				ТекСообщение.Миллисекунда   = Прав(Строка.M, 3);
				ТекСообщение.Отправитель 	= Строка.S;
				ТекСообщение.Получатель 	= Строка.D;
				ТекстСообщения = СтрокуВОбычноеПредставление(Строка.B, Строка.E) + ?(Число(Строка.A) > 1 И Число(Строка.P) = 1, Маркер, "");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, Символ(0), "@");
				ТекСообщение.ТекстСообщения = СтрЗаменить(ТекстСообщения, Символ(2), "$");
				ТекСообщение.ВсегоЧастей 	= Строка.A;
				ТекСообщение.ТекущаяЧасть 	= Строка.P;
				МоментВремени = Строка.M;
			КонецЦикла;
			
			// Проверка что полученный пакет был полностью получен ранее 
			// (зациклились на одной миллисекунде).
			Если КолПолученных = 0 Тогда 
				ЕстьСообщения = Ложь;
			КонецЕсли;
		Иначе
			ЕстьСообщения = Ложь;
		КонецЕсли; 
	КонецЦикла;
	
	Если ПолученныеСообщения.Количество() > 0 Тогда
 		// Преобразуем таблицу значений в массив структур и записываем в возвращаемый параметр.
		СписокСообщений = ТаблицаЗначенийВМассивСтруктур(ПолученныеСообщения);
	КонецЕсли; 
	
	Если КодОшибки > 0 Тогда // КодОшибки = 0 - нет входящих сообщений, КодОшибки > 0 - повторный пакет.
		КодОшибки = 1;
	КонецЕсли; 
	
	Возврат КодОшибки;
	
КонецФункции // ПолучитьСообщения

// Функция предназначена для отправки группы sms-сообщений на сервер SMS4B. 
// Группу сообщений объединяют единые временные характеристики отправки 
// (дата отправки, актуальность и т.п.). В предметной реализации группой 
// можно считать отдельный документ рассылки либо, например, набор сообщений 
// с незаполненными временными характеристиками.
//							
// Параметры:
//							
//  СписокСообщений (массив) -	Обязательный параметр. Содержит массив структур, содержащих поля
//								sms-сообщений, предназначенных для отправки на сервер.
//							
// НомерОтправителя (строка) - 	Обязательный параметр. Номер, с которого отправляются сообщения.
//							
//  ТекстСообщенияПоУмолчанию (строка) - Необязательный параметр. Данный текст будет использоваться
//								для отправки тем получателям, для которых в списке сообщений не указан
//								текст сообщения. В случае групповой рассылки сообщений с одним общим
//								текстом достаточно заполнить данный параметр и в списке сообщений 
//								нигде не указывать текст сообщения. В случае если для получателя указан
//								персональный текст, текст по умолчанию не будет использоваться для
//								отправки сообщения данному получателю.
//							
//  ДатаОтправкиОпц (дата) - 	Необязательный параметр. Дата начала отправки sms-сообщения.
//							
//  АктуальностьОпц (дата) - 		Необязательный параметр. Дата, до которой сообщение будет пытаться
//								отправиться сервером sms4b.
//							
//  НачалоПериодаЗапрета (дата) - Необязательный параметр. Указывает, с какого времени начинается период,
//								в который сообщения не должны отправляться (например, чтобы они не 
//								приходили получателям ночью). Актуальным является только временная часть
//								даты (ЧЧ:ММ:СС). Сама дата (ДД.ММ,ГГГГ) не анализируется и может быть 
//								передана любая (в том числе пустая).
//							
// - КонецПериодаЗапрета (дата) - Необязательный параметр. Указывает время окончания периода, в который
//								сообщения не должны отправляться (например, чтобы они не приходили 
//								получателям ночью). Актуальным является только временная часть даты 
//								(ЧЧ:ММ:СС). Сама дата (ДД.ММ,ГГГГ) не анализируется и может быть передана 
//								любая (в том числе пустая).
//							
// - РавномернаяРассылка(булево) - Необязательный параметр. Содержит признак равномерной рассылки. При 
//								использовании равномерной рассылки сообщения группы будут отправляться
//								через равные промежутки времени пропорционально периоду рассылки. 
//								Значение по умолчанию – ложь.
//
// 
// Возвращаемое значение (число):
// 
// Возвращает числовой код ошибки, 1 – если функция выполнена успешно, 
// и код ошибки < 0, если функция выполнена не успешно.
//
Функция ОтправитьСообщения(СписокСообщений, НомерОтправителя, ТекстСообщенияПоУмолчанию = "",
							ДатаОтправкиОпц, АктуальностьОпц = '00010101',
							НачалоПериодаЗапрета = '00010101', КонецПериодаЗапрета = '00010101', РавномернаяРассылка = Ложь) Экспорт
										
	КодОшибки = 1;
	// Устанавливаем код группы равным 0
	КодГруппы = 0;
	// Количество отправляемых сообщений
	КолвоСообщений = СписокСообщений.Количество();
	// Размер пакета сообщений для отправки на сервер
	РазмерПакета = 100;
	// Все сообщения отправились успешно
	ЕстьНеОтправленныеСообщения = Ложь;
	// Создаем структуру с путой датой
	СтруктураДаты = Новый Структура();
	СтруктураДаты.Вставить("Дата", Дата('00010101'));
	СтруктураДаты.Вставить("Миллисекунда", 0);
	
	// Переводим дату отправки и дату актуальности к времени UTC
	ДатаОтправкиUTC = ПривестиДатуКUTC(ДатаОтправкиОпц);
	АктуальностьUTC = ПривестиДатуКUTC(АктуальностьОпц);
	
	// Переводим дату отправки и дату актуальности в строку
	СтруктураДаты.Дата = ДатаОтправкиUTC;
	ДатаОтправки       = ДатаВСтроку(СтруктураДаты); // Дата отправки СМС в формате "YYYYMMDD"
	
	СтруктураДаты.Дата = АктуальностьUTC;
	Актуальность	   = ДатаВСтроку(СтруктураДаты); // Дата жизни СМС в формате "YYYYMMDD"
	
	// Если указан период запрета отправки, то заполним его
	Если ЗначениеЗаполнено(НачалоПериодаЗапрета) И ЗначениеЗаполнено(КонецПериодаЗапрета) Тогда
		НачалоПериодаЗапретаUTC = ПривестиДатуКUTC(НачалоПериодаЗапрета);
		КонецПериодаЗапретаUTC  = ПривестиДатуКUTC(КонецПериодаЗапрета);
		Период = ПолучитьРазрешенныйПериодОтправки(НачалоПериодаЗапретаUTC, КонецПериодаЗапретаUTC);
	Иначе
		Период = "";
	КонецЕсли;	
	
	// Обработка таблицы сообщений
	СчетчикПакетаСообщений = 0;
	
	// Подключаем веб-сервис
	ВебСервис = ПодключитьВебСервис();
	Если НЕ ВебСервис = Неопределено Тогда
		// Получаем фабрику XDTO
		Фабрика  = ВебСервис.ФабрикаXDTO;
		МассивСообщений = Фабрика.Создать(Фабрика.Тип("SMS client", "ArrayOfGroupSMSList"));
	Иначе
		КодОшибки = -9;
		Возврат КодОшибки;
	КонецЕсли;
	
	// Если какие-то сообщения не удастся отправить с первого раза, отправим на второй итерации.
	КолвоОтправок = 2;
	Для Индекс = 1 По КолвоОтправок Цикл
		
		ТекущийИндекс = -1;
		Для Каждого Сообщение Из СписокСообщений Цикл
			ТекущийИндекс = ТекущийИндекс + 1;
			
			// Уже отправленное сообщение
			Если Сообщение.КодОшибки = 1 Тогда
				Продолжить;
			КонецЕсли; 
			СчетчикПакетаСообщений = СчетчикПакетаСообщений + 1;
			
			// Получаем кодировку сообщения, если русский текст то 1, иначе 0
			Кодировка = Использовать7БитСообщение(Сообщение.ТекстСообщения);
			
			// Создаем и заполняем строку массива сообщений
			СтрокаМассива = Фабрика.Создать(Фабрика.Тип("SMS client", "GroupSMSList"));
			СтрокаМассива.Установить("B", ?(ЗначениеЗаполнено(Сообщение.ТекстСообщения), СтрокуВШестнадцатеричноеПредставление(Сообщение.ТекстСообщения, Кодировка), ""));
			СтрокаМассива.Установить("D", Сообщение.НомерПолучателя);
			СтрокаМассива.Установить("E", Кодировка);
			СтрокаМассива.Установить("G", Сообщение.GUID);
			МассивСообщений.GroupSMSList.Добавить(СтрокаМассива);

			// Отправка пакета сообщений или остатка сообщений
			Если СчетчикПакетаСообщений = РазмерПакета ИЛИ СчетчикПакетаСообщений = КолвоСообщений Тогда
				КолвоСообщений = КолвоСообщений - РазмерПакета;
				
				Если ЗначениеЗаполнено(ТекстСообщенияПоУмолчанию) Тогда
					КодировкаСообщенияШапки = Использовать7БитСообщение(ТекстСообщенияПоУмолчанию);
				Иначе
					КодировкаСообщенияШапки = 0;
				КонецЕсли; 
				
				Попытка
					// Если первая отправка, то код группы = -2 если требуется равномерная рассылка, или -1 если не требуется.
					Cod = ?(КодГруппы = 0, ?(РавномернаяРассылка, -2, -1), КодГруппы); // КодГруппы
					
					// Переводим общий текст в шестнадцатеричное представление
					Bdy = ?(ЗначениеЗаполнено(ТекстСообщенияПоУмолчанию), СтрокуВШестнадцатеричноеПредставление(ТекстСообщенияПоУмолчанию, КодировкаСообщенияШапки), "");
					
					// Оправка сообщений на сервер
					РезультатОтправки = ВебСервис.GroupSMS(ПолучитьНомерСессии(), Cod, Строка(НомерОтправителя), КодировкаСообщенияШапки, 
								Bdy, Актуальность, ДатаОтправки, Период, МассивСообщений);
				Исключение
					РезультатОтправки = Неопределено;
				КонецПопытки;
				// Проверяем результат отправки
				Если НЕ РезультатОтправки = Неопределено Тогда
					// Получаем код ошибки
					КодОшибки = РезультатОтправки.Result;
					// Если сессия устарела или её нет
					Если КодОшибки >= -19 И КодОшибки <= -1 Тогда
						
						// Возможно, что Основной сервер не доступен, пробудем переключиться на резервный.
						КодОшибкиПодкл = 0;
						Если ПоменятьСервер(КодОшибкиПодкл) тогда
							Возврат -100000 + КодОшибки; 
						КонецЕсли;
						
						// Если ошибка подключения
						Если КодОшибкиПодкл < 1 Тогда
							Возврат КодОшибкиПодкл;
						Иначе
							Попытка
								// Пробуем отправить ещё раз
								РезультатОтправки = ВебСервис.GroupSMS(ПолучитьНомерСессии(), Cod, Строка(НомерОтправителя), КодировкаСообщенияШапки, 
											Bdy, Актуальность, ДатаОтправки, Период, МассивСообщений);
							Исключение
								РезультатОтправки = Неопределено;
							КонецПопытки;
							
							// Получим результат отправки
							Если НЕ РезультатОтправки = Неопределено Тогда
								КодОшибки = РезультатОтправки.Result;
								Если КодОшибки >= -19 И КодОшибки <= -1 Тогда
									Если ПоменятьСервер(КодОшибкиПодкл) тогда
										Возврат -100000 + КодОшибки; 
									КонецЕсли;
									Возврат КодОшибки;
								КонецЕсли;
							Иначе
								Подключиться();
								КодОшибки = -199999;
								Возврат КодОшибки; // Проблема с интернетом
							КонецЕсли;							
						КонецЕсли;
					КонецЕсли; 
					
					// Ошибка при отправке
					Если КодОшибки < 0 Тогда 
						// Проставляем всем сообщением код глобальной ошибки
						Для Счетчик = ТекущийИндекс - СчетчикПакетаСообщений + 1 по ТекущийИндекс Цикл
							СписокСообщений[Счетчик].КодОшибки = КодОшибки	
						КонецЦикла;
						Возврат КодОшибки;
					КонецЕсли; 
					
					// Запоминаем код созданной группы
					КодГруппы = РезультатОтправки.Group;
					
					// Записываем результат отправки каждого из сообщений
					КолвоОтправленных = РезультатОтправки.List.CheckSMSList.Количество();
					Для Счетчик = 1 По КолвоОтправленных Цикл
						ТекСообщение  = СписокСообщений.Получить((ТекущийИндекс-КолвоОтправленных) + Счетчик);
						ОтпрСообщение = РезультатОтправки.List.CheckSMSList.Получить(Счетчик-1);
						Если ТекСообщение.GUID = ОтпрСообщение.G Тогда
							ТекСообщение.КодОшибки = ОтпрСообщение.R;
						КонецЕсли;
						// Есть ли неотправленные сообщения
						Если ТекСообщение.КодОшибки < 0 Тогда 
							ЕстьНеОтправленныеСообщения = Истина;
						КонецЕсли;
					КонецЦикла; 
					
					// Очищаем список отправленных сообщений
					СчетчикПакетаСообщений = 0;
					МассивСообщений.GroupSMSList.Очистить();
				Иначе
					// Возможно, что Основной сервер не доступен, пробудем переключиться на резервный.
					Подключиться();
					КодОшибки = -199999;
					Возврат КодОшибки; // Проблема с интернетом
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Если есть не отправленные, то повторяем отправку ещё один раз
		Если НЕ ЕстьНеОтправленныеСообщения Тогда
			Прервать; // Прерываем освной цикл отправки
		КонецЕсли; 
	КонецЦикла;
	
	// Отправка прошла успешно (КодОшибки = Кол-во отправленных сообщений)
	Если КодОшибки > 1 Тогда
		КодОшибки = 1;
	КонецЕсли; 
	
	Возврат КодОшибки;
	
КонецФункции // ОтправитьСообщения    

// Функция предназначена для обновления статусов отправленных sms-сообщений. 
// Для получения статусов необходимо передать в метод массив структур, 
// содержащих GUID тех сообщений, которые необходимо проверить. При успешном 
// выполнении функции все переданные структуры в массиве будут дополнены 
// статусами соответствующих со-общений.
//
// Параметры:
//
//  СписокСообщений (массив) - 	В данный параметр при вызове метода помещается массив структур,
//								содержащих поля sms-сообщений, статус доставки которых необходимо
//								обновить. Статусы сообщений будут записываться при вызове метода 
// 								в поле структуры «СтатусСообщения» для каж-дого обрабатываемого
//								сообщения.
// 
// Возвращаемое значение (число):
// 
// Возвращает числовой код ошибки, 1 – если функция выполнена успешно, и 
// код ошибки < 0, если функция выполнена не успешно.
//
// Состояние сообщения с сервера возвращается в виде числа, представляющего собой бито-вую маску.
// Маска представляет собой сложение четырех наборов бит (всего 32 бита):
//
// Бит:	    31                            16 15 		   8 7             0
// Схема	|0|_|_|_|_|_|_|_|_|_|_|_|_|_|_|F|D|D|D|D|D|D|D|D|A|A|A|A|A|A|A|A| 
// Описание	        зарезервировано	      |   доставлено	|  всего частей.
//
// Где,
// - один младший бит F в старшем слове - флаг завершения жизни sms (достижения конечно-го состояния);
// - один байт D - количество частей, доставленных, если требовалось уведомление о доставке, либо 
//   отправленных, если не требовалось;
// - один младший байт A - количество частей, принятых к отправке/доставке;
//
// Описание возвращаемых статусов сообщений:
//  1 - Доставка,
//  2 - В очереди,
//  3 - Отправлено, 
//  4 - Не отправлено,
//  5 - Доставлено,
//  6 - Не доставлено,
//  7 - Ошибка отправки,
//  8 - Получено,
//  9 - Частично получено.
//
Функция ОбновитьСтатусы(СписокСообщений) Экспорт
	
	КодОшибки = 1;
	
	// Количество сообщений у которых необходимо обновить статус
	КолвоСообщений = СписокСообщений.Количество();
	
	// Обработка сообщений
	СчетчикПакетаСообщений = 0;
	
	// Создаем WS-ссылку
	ВебСервис = ПодключитьВебСервис();
	Если НЕ ВебСервис = Неопределено Тогда
		// Получаем фабрику XDTO
		Фабрика   = ВебСервис.ФабрикаXDTO;
		МассивСообщений = Фабрика.Создать(Фабрика.Тип("SMS client", "ArrayOfString"));
	Иначе
		КодОшибки = -9;
		Возврат КодОшибки;
	КонецЕсли;
	
	// Размер пакета сообщений
	РазмерПакета = 200;
	
	// Обрабатываем список сообщений
	Для Каждого Сообщение Из СписокСообщений Цикл
		СчетчикПакетаСообщений = СчетчикПакетаСообщений + 1;
		
		// Добавляем GUID сообщения в массив
		МассивСообщений.string.Добавить(Сообщение.GUID);
		
		// Отправка пакета размером "РазмерПакета" (или 1 пакета с количеством меньше "РазмерПакета"),
		// или остатка сообщений.
		Если СчетчикПакетаСообщений = РазмерПакета ИЛИ СчетчикПакетаСообщений = КолвоСообщений Тогда
			КолвоСообщений = КолвоСообщений - РазмерПакета;
			
			Попытка	
				// Запрос статусов сообщений на сервере
				РезультатОтправки = ВебСервис.CheckSMS(ПолучитьНомерСессии(), МассивСообщений);
			Исключение
				РезультатОтправки = Неопределено;
			КонецПопытки; 
			
			Если НЕ РезультатОтправки = Неопределено Тогда
				
				// Получаем код ошибки
				КодОшибки = РезультатОтправки.Result;
				
				
				// Ошибка при обновлении статусов
				Если КодОшибки < 0 Тогда 
					Если КодОшибки >= -19 И КодОшибки <= -1 Тогда
						// Возможно, что Основной сервер не доступен, пробудем переключиться на резервный.
						КодОшибкиПодкл = 0;
						Если ПоменятьСервер(КодОшибкиПодкл) тогда
							Возврат -100000 + КодОшибки; 
						КонецЕсли;
					КонецЕсли;
					
					Возврат КодОшибки;
				КонецЕсли;
				
				// Получаем список со статусами
				СписокСтатусов = РезультатОтправки.List.CheckSMSList;
				Если Тип(СписокСтатусов) = ТипЗнч("ОбъектXDTO") Тогда
					НовыйСписок = Новый ТаблицаЗначений;
					НовыйСписок.Колонки.Добавить("G");
					НовыйСписок.Колонки.Добавить("R");
					НовСтрока = НовыйСписок.Добавить();
					НовСтрока.G = СписокСтатусов.G;
					НовСтрока.R = СписокСтатусов.R;
					СписокСтатусов = НовыйСписок;
				КонецЕсли;
				
				// Обрабатываем таблицу со статусами
				Для Каждого Строка Из СписокСтатусов Цикл
					// статус возвращается в виде числа представляющего из себя битовую маску
					КодСтатуса = Строка.R;
					ТекСтатус = "";
					ГУИДСообщения = Строка.G;
					ИскомаяСтрока = МассивСтруктурНайти(СписокСообщений, ГУИДСообщения);
					Если ИскомаяСтрока = Неопределено Тогда
						Продолжить;
					КонецЕсли; 
					
					// Ошибка 
					Если Число(КодСтатуса) < 0 Тогда
						ИскомаяСтрока.СтатусСообщения = КодСтатуса;
						Продолжить;
					КонецЕсли; 
					
					// Раскладываем битовую маску статуса
					к3 = Цел(КодСтатуса / 65536); // если нечетное то статус окончательный, 
												  // если четное - то ещё идет обработка сообщения
					к2 = Цел((КодСтатуса - (к3 * 65536)) / 256);       // количество доставленных частей
					к1 = Цел(КодСтатуса - (к3 * 65536) - (к2 * 256));  // количество частей всего
					
					// Вычисляем статус сообщения
					Если НЕ к3/2 = Цел(к3/2) Тогда // нечетное
						Если к1 = к2 Тогда
							Если к2 = 0 Тогда
								ТекСтатус = 7; // Ошибка
							Иначе 
								ТекСтатус = 5; // Доставлено
							КонецЕсли;
						Иначе
							Если ИскомаяСтрока.СтатусСообщения = 2 Тогда // статус "В очереди"
								ТекСтатус = 4; // Не отправлено
							ИначеЕсли ИскомаяСтрока.СтатусСообщения = 3 Тогда // статус "Отправлено"
								ТекСтатус = 6; // Не доставлено
							КонецЕсли;	
							Если к2 > 0 Тогда // Обработана часть(и) сообщения
								Если ИскомаяСтрока.СтатусСообщения = 2 Тогда // статус "В очереди"
									// "Отправлено частей " + Строка(к2) + " из " + Строка(к1));
								ИначеЕсли ИскомаяСтрока.СтатусСообщения = 3 Тогда // статус "Отправлено"
									// "Доставлено частей " + Строка(к2) + " из " + Строка(к1));
								КонецЕсли;	
							КонецЕсли;
						КонецЕсли;	
					Иначе // четное !!!
						Если к1 = к2 И ИскомаяСтрока.СтатусСообщения = 2 Тогда // статус "В очереди"
							ТекСтатус = 3; // Отправлено
						ИначеЕсли к2 = 0 ИЛИ (к3 = 0 И к2 < к1) Тогда
							ТекСтатус = 3; // Отправлено
						КонецЕсли;
					КонецЕсли;
					
					Если НЕ ИскомаяСтрока = Неопределено Тогда
						ИскомаяСтрока.СтатусСообщения = ТекСтатус;
					КонецЕсли;
				КонецЦикла; 
				СчетчикПакетаСообщений = 0;
				МассивСообщений.string.Очистить();
			Иначе
				Подключиться();
				КодОшибки = -199999;
				Возврат КодОшибки; // Проблема с интернетом
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	// Обновление статусов прошло успешно
	Если КодОшибки >= 1 Тогда
		КодОшибки = 1;
	КонецЕсли; 
	
	Возврат КодОшибки;
	
КонецФункции // ОбновитьСтатусы

// Процедура выполняет отключение от SMS4B
//
// Возвращаемое значение (число):
// 
// Возвращает числовой код ошибки, 1 – если функция выполнена успешно, 
// и код ошибки < 0, если функция выполнена не успешно.
//
Функция Отключиться() Экспорт
	
	Попытка
		ВебСервис = ПодключитьВебСервис();
		// Закрываем текущую сессию
		КодОшибки = ВебСервис.CloseSession(ПолучитьНомерСессии());
		// Устанавливаем параметр сеанса номер сессии = 0
		ПараметрыСеанса.бит_СМС_НомерСессии = 0;
	Исключение
		КодОшибки = Неопределено;
	КонецПопытки;

	Если НЕ КодОшибки = Неопределено Тогда
		Возврат КодОшибки;
	КонецЕсли; 
	
КонецФункции // Отключиться()

// Функция выполняет транслитерацию переданного текста и возвращает результат этого преобразования.
// Для транслитерации используется последовательность GSM3.38.
// 
// Параметры:
//  Сообщение (строка) - Содержит текст для транслитерации.
//
// Возвращаемое значение (строка):
//  Преобразованный в транслит текст.
Функция Транслитерация(Текст) Экспорт
	
	// Заполняем список соответствий
	СписокСоответствийТранслитерации = Новый СписокЗначений;
	СписокСоответствийТранслитерации.Добавить("а", "a");
	СписокСоответствийТранслитерации.Добавить("б", "b");
	СписокСоответствийТранслитерации.Добавить("в", "v");
	СписокСоответствийТранслитерации.Добавить("г", "g");
	СписокСоответствийТранслитерации.Добавить("д", "d");
	СписокСоответствийТранслитерации.Добавить("е", "e");
	СписокСоответствийТранслитерации.Добавить("ё", "yo");
	СписокСоответствийТранслитерации.Добавить("ж", "zh");
	СписокСоответствийТранслитерации.Добавить("з", "z");
	СписокСоответствийТранслитерации.Добавить("и", "i");
	СписокСоответствийТранслитерации.Добавить("й", "j");
	СписокСоответствийТранслитерации.Добавить("к", "k");
	СписокСоответствийТранслитерации.Добавить("л", "l");
	СписокСоответствийТранслитерации.Добавить("м", "m");
	СписокСоответствийТранслитерации.Добавить("н", "n");
	СписокСоответствийТранслитерации.Добавить("о", "o");
	СписокСоответствийТранслитерации.Добавить("п", "p");
	СписокСоответствийТранслитерации.Добавить("р", "r");
	СписокСоответствийТранслитерации.Добавить("с", "s");
	СписокСоответствийТранслитерации.Добавить("т", "t");
	СписокСоответствийТранслитерации.Добавить("у", "u");
	СписокСоответствийТранслитерации.Добавить("ф", "f");
	СписокСоответствийТранслитерации.Добавить("х", "x"); 
	СписокСоответствийТранслитерации.Добавить("ц", "c"); 
	СписокСоответствийТранслитерации.Добавить("ч", "ch");
	СписокСоответствийТранслитерации.Добавить("ш", "sh");
	СписокСоответствийТранслитерации.Добавить("щ", "w"); 
	СписокСоответствийТранслитерации.Добавить("ъ", "''");
	СписокСоответствийТранслитерации.Добавить("Ъ", "''");
	СписокСоответствийТранслитерации.Добавить("ы", "y");
	СписокСоответствийТранслитерации.Добавить("Ы", "Y");
	СписокСоответствийТранслитерации.Добавить("ь", "'");
	СписокСоответствийТранслитерации.Добавить("Ь", "'");
	СписокСоответствийТранслитерации.Добавить("э", "eh");
	СписокСоответствийТранслитерации.Добавить("ю", "yu");
	СписокСоответствийТранслитерации.Добавить("я", "ya");
	СписокСоответствийТранслитерации.Добавить("А", "A");
	СписокСоответствийТранслитерации.Добавить("Б", "B");
	СписокСоответствийТранслитерации.Добавить("В", "V");
	СписокСоответствийТранслитерации.Добавить("Г", "G");
	СписокСоответствийТранслитерации.Добавить("Д", "D");
	СписокСоответствийТранслитерации.Добавить("Е", "E");
	СписокСоответствийТранслитерации.Добавить("Ё", "YO");
	СписокСоответствийТранслитерации.Добавить("Ж", "ZH");
	СписокСоответствийТранслитерации.Добавить("З", "Z");
	СписокСоответствийТранслитерации.Добавить("И", "I");
	СписокСоответствийТранслитерации.Добавить("Й", "J");
	СписокСоответствийТранслитерации.Добавить("К", "K");
	СписокСоответствийТранслитерации.Добавить("Л", "L");
	СписокСоответствийТранслитерации.Добавить("М", "M");
	СписокСоответствийТранслитерации.Добавить("Н", "N");
	СписокСоответствийТранслитерации.Добавить("О", "O");
	СписокСоответствийТранслитерации.Добавить("П", "P");
	СписокСоответствийТранслитерации.Добавить("Р", "R");
	СписокСоответствийТранслитерации.Добавить("С", "S");
	СписокСоответствийТранслитерации.Добавить("Т", "T");
	СписокСоответствийТранслитерации.Добавить("У", "U");
	СписокСоответствийТранслитерации.Добавить("Ф", "F");
	СписокСоответствийТранслитерации.Добавить("Х", "X");
	СписокСоответствийТранслитерации.Добавить("Ц", "C");
	СписокСоответствийТранслитерации.Добавить("Ч", "CH");
	СписокСоответствийТранслитерации.Добавить("Ш", "SH");
	СписокСоответствийТранслитерации.Добавить("Щ", "W");
	СписокСоответствийТранслитерации.Добавить("Э", "EH");
	СписокСоответствийТранслитерации.Добавить("Ю", "YU");
	СписокСоответствийТранслитерации.Добавить("Я", "YA");
	СписокСоответствийТранслитерации.Добавить("«", "<");
	СписокСоответствийТранслитерации.Добавить("»", ">");
	СписокСоответствийТранслитерации.Добавить("№", "N");
	СписокСоответствийТранслитерации.Добавить("{", "(");
	СписокСоответствийТранслитерации.Добавить("[", "(");
	СписокСоответствийТранслитерации.Добавить("}", ")");
	СписокСоответствийТранслитерации.Добавить("]", ")");
	СписокСоответствийТранслитерации.Добавить("\", "/");
	СписокСоответствийТранслитерации.Добавить("|", "I");
	СписокСоответствийТранслитерации.Добавить("^", "'");
	СписокСоответствийТранслитерации.Добавить("_", "-");
	СписокСоответствийТранслитерации.Добавить("~", "-");
	СписокСоответствийТранслитерации.Добавить("`", "'");
	СписокСоответствийТранслитерации.Добавить(Символы.НПП, " ");
	
	РезультирующийТекст = "";
	// Общая длина текста
	ДлинаТекста = СтрДлина(Текст);
	// Транслитирируем
	Для Сч = 1 По ДлинаТекста Цикл
		// Получаем код текущего символа
		КодСимвола = КодСимвола(Текст, Сч);
		// Проверяем что текущий символ заглавная буква
		РусскаяЗаглавная = Ложь;
		Если (КодСимвола > 1039 И КодСимвола < 1072) ИЛИ (КодСимвола = 1025) Тогда
			РусскаяЗаглавная = Истина;
		КонецЕсли;
		Символ = Сред(Текст, Сч, 1);
		// Ищем в таблице соответствие
		Соответствие = СписокСоответствийТранслитерации.НайтиПоЗначению(Символ);
		// Если нашли
		Если НЕ (Соответствие = Неопределено) Тогда
			// Меняем символ
			Символ = Соответствие.Представление;
			Если РусскаяЗаглавная Тогда
				ПервыйСимвол = Сред(Символ, 1, 1);
				Символ = СтрЗаменить(Символ, ПервыйСимвол, ВРег(ПервыйСимвол));
			КонецЕсли;
		Иначе
			// Остальные симоволы остаются без изменений 
			Если НЕ Найти(" !@#$%&'""()*+,-./0123456789:;<=>?ABCDEFGIKLMNJOPQRSTUVWXYZHabcdefgiklmnjopqrstuvwxyzh"+Символы.ПС+Символы.Таб+Символы.ВК, Символ) Тогда
				Символ = "?"; // Меняем неизвестный символ на "?"
			КонецЕсли;
		КонецЕсли;
		// Результат транслитерации
		РезультирующийТекст = РезультирующийТекст + Символ;
		
	КонецЦикла;
	
	Возврат РезультирующийТекст;
	
КонецФункции // Транслитерация()	

// Функция преобразует таблицу значений в массив структур 
Функция ТаблицаЗначенийВМассивСтруктур(ТаблицаЗначений) Экспорт
	
	Результат = Новый Массив;
	// Обходим таблицу значений
	Для Каждого Строка Из ТаблицаЗначений Цикл
		// Создаем структуру
		Свойства = Новый Структура;
		// Заполняем структуру колонками таблицы значений
		Для каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			Свойства.Вставить(Колонка.Имя, Строка[Колонка.Имя]);
		КонецЦикла;
		// Добавляем созданную структуру в таблицу значений
		Результат.Добавить(Свойства);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ТаблицаЗначенийВМассивСтруктур()

// Функция возвращает список доступных номеров отправителя из строки.
//
// Параметры:
//	НомерОтправителя - Строка, содержащая список номеров.
//
// Возвращаемое значение:
//	СписокЗначений	- Список номеров отправителя.
//
Функция ПолучитьСписокНомеровИзСтроки(НомерОтправителя) Экспорт
	// Создаем массив
	СписокВозврата = Новый Массив;
	// Берем строку с номерами
	ТекстКонстанты = СокрЛП(НомерОтправителя);
	Пока НЕ ПустаяСтрока(ТекстКонстанты) Цикл
		// Ищем позицию разделителя
		НомерРазделителя = Найти(ТекстКонстанты, Символы.ПС);
		Если НомерРазделителя = 0 Тогда // всего один номер
			СписокВозврата.Добавить(ТекстКонстанты);
			ТекстКонстанты = "";	
		Иначе // если больше одного
			// Получаем номер
			ЛевСтрокаНомера = Лев(ТекстКонстанты, НомерРазделителя - 1);
			// Добавляем в список
			СписокВозврата.Добавить(ЛевСтрокаНомера);
			Если НомерРазделителя = СтрДлина(ТекстКонстанты) Тогда
				ТекстКонстанты = "";	
			Иначе	
				ТекстКонстанты = Сред(ТекстКонстанты, НомерРазделителя + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат СписокВозврата;
КонецФункции // ПолучитьСписокНомеровИзСтроки()

// Функция получает описание ошибки по ее коду.
// 
// Параметры:
//	КодОшибки	- Число	- Код ошибки.
//
// Возвращаемое значение:
//	Строка	- Текст сообщения об ошибке.
//
Функция ОписаниеОшибокВебСервиса(КодОшибки) Экспорт
	
	Если КодОшибки = 0 Тогда
		ТекстСообщить = "ru = ""Превышен предел открытых сессий!""";
	ИначеЕсли КодОшибки = -1 Тогда
		ТекстСообщить = "ru = ""Неверный логин или пароль (Необходимо использовать пароль для доступа к SMS сервису из внешних программ)!""";
	ИначеЕсли КодОшибки = -2 Тогда
		ТекстСообщить = "ru = ""Сессия закрыта!""";
	ИначеЕсли КодОшибки = -9 Тогда
		ТекстСообщить = "ru = ""Отказ сервера!""";
	ИначеЕсли КодОшибки = -10 Тогда
		ТекстСообщить = "ru = ""Неизвестная ошибка сервера!""";
	ИначеЕсли КодОшибки = -20 Тогда
		ТекстСообщить = "ru = ""Сбой сеанса связи!""";
	ИначеЕсли КодОшибки = -21 Тогда
		ТекстСообщить = "ru = ""Сообщение не идентифицировано!""";
	ИначеЕсли КодОшибки = -22 Тогда
		ТекстСообщить = "ru = ""Неверный идентификатор сообщения!""";
	ИначеЕсли КодОшибки = -23 Тогда
		ТекстСообщить = "ru = ""Неверный параметр - GMT""";
	ИначеЕсли КодОшибки = -30 Тогда
		ТекстСообщить = "ru = ""Неизвестная кодировка сообщения! (не заполнен текст сообщения)""";
	ИначеЕсли КодОшибки = -31 Тогда
		ТекстСообщить = "ru = ""Неразрешенная зона тарификации!""";
	ИначеЕсли КодОшибки = -32 Тогда
		ТекстСообщить = "ru = ""Неверный параметр - дата начала или окончания доставки сообщения!""";
	ИначеЕсли КодОшибки = -33 Тогда
		ТекстСообщить = "ru = ""Превышение длительности доставки!""";
	ИначеЕсли КодОшибки = -34 Тогда
		ТекстСообщить = "ru = ""Превышение срока актуальности доставки!""";
	ИначеЕсли КодОшибки = -35 Тогда
		ТекстСообщить = "ru = ""Неверный параметр - период доставки сообщения!""";
	ИначеЕсли КодОшибки = -36 Тогда
		ТекстСообщить = "ru = ""Неизвестный код группы!""";
	ИначеЕсли КодОшибки = -50 Тогда
		ТекстСообщить = "ru = ""Неверный отправитель!""";
	ИначеЕсли КодОшибки = -51 Тогда
		ТекстСообщить = "ru = ""Неразрешенный получатель!""";
	ИначеЕсли КодОшибки = -52 Тогда
		ТекстСообщить = "ru = ""Недостаточно средств на Вашем счете!""";
	ИначеЕсли КодОшибки = -53 Тогда
		ТекстСообщить = "ru = ""Незарегистрированный отправитель!""";
	ИначеЕсли КодОшибки <= -54 и КодОшибки >= -59 Тогда
		ТекстСообщить = "ru = ""Таймаут изменения счета!""";
	ИначеЕсли КодОшибки = -66 Тогда
		ТекстСообщить = "ru = ""Не задан отправитель!""";
	ИначеЕсли КодОшибки = -67 Тогда
		ТекстСообщить = "ru = ""Превышение сроков отправки""";
	ИначеЕсли КодОшибки = -68 Тогда
		ТекстСообщить = "ru = ""Пользователь заблокирован!""";
	ИначеЕсли КодОшибки = -99999 Тогда
		ТекстСообщить = "ru = ""Ошибка соединения (нет доступа к интернету или не указаны настройки прокси-сервера)!""";
	Иначе
		ТекстСообщить = "ru = ""Неизвестная ошибка... код ошибки: " + Строка(КодОшибки) + "!""";
	КонецЕсли;
	
	Возврат НСтр(ТекстСообщить);
	
КонецФункции // ОписаниеОшибокРаботыСHTTP()

// Функция приводит переданную дату к времени UTC.
//
// Параметры
//  Дата - Дата которую корректируем,
//  Вычитать - Признак знака корректировки, для входящих сообщений указывать Ложь,
// 				для Исходящих Истина.
//
// Возвращаемое значение:
//	Дата - дата приведенная к UTC.
//
Функция ПривестиДатуКUTC(Дата, Вычитать = Истина) Экспорт
	
	// Получаем корректировку времени UTC
	Попытка
		КорректировкаUTC = ПараметрыСеанса.бит_СМС_КорректировкаUTC;
	Исключение
	    КорректировкаUTC = 0;
	КонецПопытки; 
	// Если сообщение входящее то время надо прибавить!
	Если Вычитать Тогда
		Возврат Дата - КорректировкаUTC;
	Иначе 
		Возврат Дата + КорректировкаUTC;
	КонецЕсли; 
	
КонецФункции

// Функция возвращает параметр сеанса "НомерСессии"
//
// Параметры
//
// Возвращаемое значение:
//	Число - номер текущей сессии
//
Функция ПолучитьНомерСессии() Экспорт
	
	Попытка
		НомерСессии = ПараметрыСеанса.бит_СМС_НомерСессии;
	Исключение
		НомерСессии = 0;
	КонецПопытки; 
	
	Возврат НомерСессии;
	
КонецФункции

// Функция определяет какую кодировку необходимо пременять к тексту сообщения.
//
// Параметры:
//	Сообщение - Строка - Текст сообщения.
//
// Возвращаемое значение:
//	Число - Вид кодировки - 0-латинский, 1-другие алфавиты, в т.ч. русский.
//
Функция Использовать7БитСообщение(Сообщение) Экспорт
	ДлинаСообщения = СтрДлина(Сообщение);
	Результат = 0;
	Для К = 1 По ДлинаСообщения Цикл
		ТекСимвол = Сред(Сообщение, К, 1);
		Если ТекСимвол = "@" Тогда
			Продолжить;
		ИначеЕсли ТекСимвол = "$" Тогда
			Продолжить;
		ИначеЕсли КодСимвола(ТекСимвол) > 122 Тогда
  			Результат = 1;
			Прервать;
		ИначеЕсли КодСимвола(ТекСимвол) > 96 Тогда
			Продолжить;
		ИначеЕсли  КодСимвола(ТекСимвол) > 91 Тогда
  			Результат = 1;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	Возврат Результат;
КонецФункции // Использовать7БитСообщение()

// Функция создает файл inetcfg.xml для работы с прокси.
//
// Параметры:
//  Адрес  - адрес прокси сервера,
//  Порт   - порт прокси сервера,
//  Имя    - Имя пользователя,
//  Пароль - Пароль пользователя.
//
Функция СоздатьФайлНастроекПрокси(Адрес, Порт, Имя, Пароль) Экспорт
	
	Попытка
		ЗаписьХМЛ = Новый ЗаписьXML;
		ЗаписьХМЛ.ОткрытьФайл(КаталогПрограммы() + "conf\inetcfg.xml");
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("InternetProxy");
			ЗаписьХМЛ.ЗаписатьАтрибут("protocols", Строка(Адрес) + ":" + Строка(Порт));
			ЗаписьХМЛ.ЗаписатьАтрибут("user", Строка(Имя));
			ЗаписьХМЛ.ЗаписатьАтрибут("password", Строка(Пароль));
			ЗаписьХМЛ.ЗаписатьАтрибут("bypassOnLocal", "true");
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		ЗаписьХМЛ.Закрыть();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Функция проверяет, есть ли в каталоге программы файл настроек прокси
//
Функция ЕстьФайлНастроекПрокси() Экспорт
	
	ФайлНастроек = Новый Файл(КаталогПрограммы() + "conf\inetcfg.xml");
    Если ФайлНастроек.Существует() Тогда
        Возврат Истина;
    Иначе
        Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Функция удаляет файл настрок прокси сервера
//
Функция УдалитьФайлНастроекПрокси() Экспорт 
	
	Попытка
		УдалитьФайлы(КаталогПрограммы() + "conf\inetcfg.xml");
		Возврат Истина;
	Исключение
	    Возврат Ложь;
	КонецПопытки; 
	
КонецФункции

// Прочитать файл настроек прокси
//
Процедура ПрочитатьФайлНастроек() Экспорт
	
	ОбъектXML = Новый ЧтениеXML;
	Попытка
		ОбъектXML.ОткрытьФайл(КаталогПрограммы() + "conf\inetcfg.xml");
	Исключение
		ОбъектXML.Закрыть();
		Возврат;
	КонецПопытки;
	
	Пока ОбъектXML.Прочитать() Цикл
		Если ОбъектXML.КоличествоАтрибутов() > 0 Тогда
			Пока ОбъектXML.ПрочитатьАтрибут() Цикл
				Если ОбъектXML.Имя = "protocols" Тогда 
					БИТ_СМС_ПроксиСервер = Лев(ОбъектXML.Значение, Найти(ОбъектXML.Значение, ":")-1);
					БИТ_СМС_ПроксиПорт   = Сред(ОбъектXML.Значение, Найти(ОбъектXML.Значение, ":")+1, 10);
				ИначеЕсли ОбъектXML.Имя = "user" Тогда
					БИТ_СМС_ПроксиПользователь = ОбъектXML.Значение;
				ИначеЕсли ОбъектXML.Имя = "password" Тогда
					БИТ_СМС_ПроксиПароль = ОбъектXML.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

//////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ МЕТОДЫ ЯДРА

// Функция осуществляет поиск значения в массиве структур
Функция МассивСтруктурНайти(Массив, Значение)
	
	Для каждого Строка Из Массив Цикл
		Если Строка.GUID = Значение Тогда
			Возврат Строка;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Функция подключения к ВебСервису.
// Возвращаемое значение: WS-ссылка.
//
Функция ПодключитьВебСервис()
	
	Попытка
		ОсновнойСервер = ПараметрыСеанса.бит_СМС_ОсновнойСервер;
	Исключение
	    ОсновнойСервер = Истина;
	КонецПопытки; 	
	
	Попытка
		Если ОсновнойСервер Тогда
			// Основной сервер
			ВебСервис = WSСсылки.бит_СМС_SMS4B.СоздатьWSПрокси("SMS client", "WSSM", "WSSMSoap12");
		Иначе
			// Резервный сервер
			ВебСервис = WSСсылки.бит_СМС_SMS4BРезерв.СоздатьWSПрокси("SMS client", "WSSM", "WSSMSoap12");
		КонецЕсли; 
	Исключение
		Возврат Неопределено;
	КонецПопытки; 
	
	Возврат ВебСервис;
	
КонецФункции // ПолучитьВебСервис()

// Функция, подключающаяся к другому серверу.
// Возвращает Истина если сервер поменялся.
Функция ПоменятьСервер(КодОшибкиПодкл)

	// Возможно, что Основной сервер не доступен, пробудем переключиться на резервный.
	Попытка
		ОсновнойСервер = ПараметрыСеанса.бит_СМС_ОсновнойСервер;
	Исключение
		ОсновнойСервер = Истина;
	КонецПопытки;
	
	// Подключаемся
	КодОшибкиПодкл = Подключиться();
	Возврат НЕ ОсновнойСервер = ПараметрыСеанса.бит_СМС_ОсновнойСервер;
	
КонецФункции //ПоменятьСервер()

// Функция возвращает версию ядра
//
Функция ВернутьВерсиюЯдра() Экспорт
	
	Возврат "1.0.0.0";
	
КонецФункции


// Функция переводит дату из текстовый формат вида 'YYYYMMDD hh:mm:ss' в канонический формат.
//
Функция СтрокаВДату(СтрокаДаты)
	
	Стр = СтрЗаменить(СтрокаДаты, "-", "");
	Стр = СтрЗаменить(Стр, ":", "");
	Стр = СтрЗаменить(Стр, " ", "");
	
	Возврат Дата(Стр)
	
КонецФункции

// Функция переводит дату в формате 1С в международный текстовый формат 
//  вида 'YYYYMMDD hh:mm:ss'.
//
// Параметры:
//	СтруктураДаты - Структура - Структура, сожержащая дату и количество миллисекунд.
//	
// Возвращаемое значение:
//	Строка	- Дата в международном текстовом формате.
//
Функция ДатаВСтроку(СтруктураДаты)
	
	Если ТипЗнч(СтруктураДаты) = Тип("Структура") Тогда 
		Дата1С			= СтруктураДаты.Дата;
		Миллисекунда1С	= СтруктураДаты.Миллисекунда;
	Иначе
		Дата1С			= СтруктураДаты;
		Миллисекунда1С	= 0;
	КонецЕсли;
	
	Если Дата1С = Дата('00010101') Тогда
		Результат = "";
	Иначе
		Результат = Формат(Год(Дата1С), "ЧГ=0") 
		+ ?(СтрДлина(Строка(Месяц(Дата1С))) < 2,"0" + Строка(Месяц(Дата1С)) , Строка(Месяц(Дата1С)))
		+ ?(СтрДлина(Строка(День(Дата1С))) < 2, "0" + Строка(День(Дата1С)), Строка(День(Дата1С))) + " "
		+ ?(СтрДлина(Строка(Час(Дата1С))) < 2, "0" + Строка(Час(Дата1С)), Строка(Час(Дата1С))) + ":" 
		+ ?(СтрДлина(Строка(Минута(Дата1С))) < 2, "0" + Строка(Минута(Дата1С)), Строка(Минута(Дата1С))) + ":"
		+ ?(СтрДлина(Строка(Секунда(Дата1С))) < 2, "0" + Строка(Секунда(Дата1С)), Строка(Секунда(Дата1С)))+ "."	
		+ Строка(Миллисекунда1С);
	КонецЕсли;	
	Возврат Результат;
КонецФункции // ДатаВСтроку()

// Процедура выводит переданное сообщение.
//
// Параметры:
//	Сообщение	- Строка					- Текст сообщения,
//	Статус		- СтатусСообщения			- Статус сообщения,
//	Заголовок	- Строка					- Событие для журнала регистрации,
//	Уровень		- УровеньЖурналаРегистрации	- Уровень для журнала регистрации.
//
Процедура ВывестиСообщениеИЗаписатьВЖурналРегистрации(Сообщение, Статус, Заголовок, Уровень)
	
	ЗаписьЖурналаРегистрации(Заголовок, Уровень,,, Сообщение);
	#Если Клиент Тогда
		КлиентСообщение = Новый СообщениеПользователю();
		КлиентСообщение.Текст = Сообщение;
		КлиентСообщение.Сообщить();
	#КонецЕсли
	
КонецПроцедуры	// ВывестиСообщениеИЗаписатьВЖурналРегистрации()

// Функция возвращает символьное представление разрешенного периода отправки.
//
// Параметры:
//	НачалоПериода	- Дата	- Дата начала разрешенного периода,
//	КонецПериода	- Дата	- Дата конца разрешенного периода.
//
// Возвращаемое значение:
//	Строка	- Символьное представление разрешенного периода отправки.
//
Функция ПолучитьРазрешенныйПериодОтправки(НачалоПериода, КонецПериода)
	
	СимволНачала	= Символ(65 + Час(КонецПериода));
	СимволКонца		= Символ(65 + Час(НачалоПериода-3600));
	СтрокаВозврата	= СимволНачала + СимволКонца;
	
	Если Найти("XWVUTSRQPONMLKJIHGFEDCBAX", СтрокаВозврата) > 0 Тогда
		СтрокаВозврата	= "";
	КонецЕсли;	
	
	Возврат СтрокаВозврата;
	
КонецФункции // ПолучитьРазрешенныйПериодОтправки()	

//////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СТРОКАМИ

// Функция дополняет строку до указаной длины определенным символов.
//
// Параметры:
//	Стр		- Строка	- Строка,
//	Длина	- Число		- Длина строки,
//	Чем		- Строка	- Символ для добавления.
//
// Возвращаемое значение:
//	Строка	- Строка, дополненная до указанной длины.
//
Функция ДополнитьСтроку(Знач Стр, Длина, Чем = " ")  // Padl
	СимволовДополнить = Длина - СтрДлина(Стр);
	Добавок = "";
	Для Н = 1 По СимволовДополнить Цикл
		Добавок = Добавок + Чем;
	КонецЦикла;
	Возврат  Добавок + Стр;
КонецФункции // Padl()

// Функция переводит десятичное число в шестнадцатеричное.
//
// Параметры:
//	Число	- Число	- Десятичное число.
//
// Возвращаемое значение:
//	Строка	- Шестнадцатеричное число.
//
Функция ДесятичноеВШестнадцатеричное(Знач ЧислоДес) // DecToHex
	База = 16;
	Результат = "";
	Пока ЧислоДес <> 0 Цикл
		Поз =ЧислоДес % База;
		Результат = Сред("0123456789ABCDEF", Поз + 1, 1) + Результат;
		ЧислоДес = Цел(ЧислоДес / База);
	КонецЦикла;
	Возврат Результат;
КонецФункции // DecToHex()

// Функция переводит шестнадцатеричное число в десятичное.
//
// Параметры:
//	_Hex	- Строка	- Шестнадцатеричное число.
//
// Возвращаемое значение:
//	Число	- Десятичное число.
//
Функция ШестнадцатеричноеЧислоВДесятичное(Знач Hex) // HexToDec
	База = 16;
	Hex = СокрЛП(Hex);
	СтаршаяСтепень = СтрДлина(Hex) - 1;
	Результат = 0;
	счСимволов = 1;
	Пока СтаршаяСтепень >=0 Цикл
		HexСимвол = Сред(Hex, счСимволов, 1);
		Представление = Найти("0123456789ABCDEF", HexСимвол) - 1;
		Результат = Результат + Представление * Pow(База, СтаршаяСтепень);
		СтаршаяСтепень = СтаршаяСтепень - 1;
		СчСимволов = СчСимволов + 1;
	КонецЦикла;	
	Возврат Результат;
КонецФункции // HexToDec()

// Функция переводит обычную cтроку в шестнадцатеричное представление.
//
// Параметры:
//	ТекстСообщения	- Строка	- Текст сообщения,
//	ТипКодировки	- Число		- Тип кодировки (1 - каждый символ 
//								  представляется 2 байтами, 0 - 1 байтом).
//
// Возвращаемое значение:
//	Строка	- Строка после перекодировки.
//
Функция СтрокуВШестнадцатеричноеПредставление(ТекстСообщения, ТипКодировки) // Str2Hex
	СтрокаЗнаков = "";
	Если ТипКодировки = 1 Тогда
		ДлинаКодаСимвола = 4;
	Иначе
		ДлинаКодаСимвола = 2;
	КонецЕсли;
	Для К = 1 По СтрДлина(ТекстСообщения) Цикл
		СтрокаЗнаков = СтрокаЗнаков + ДополнитьСтроку(ДесятичноеВШестнадцатеричное(КодСимвола(Сред(ТекстСообщения, К, 1))), ДлинаКодаСимвола, "0");
	КонецЦикла;
	Возврат СтрокаЗнаков;
КонецФункции // Str2Hex()

// Функция переводит cтроку из шестнадцатеричного представления в обычную строку.
//
// Параметры:
//	СтрокаСимволов	- Строка	- Текст в шестнадцатеричном виде,
//	ПризнакКода		- Строка	- Тип кодировки ("0" - каждый символ 
//								  представляется 1 байтами, "1" - 2 байтами).
//
// Возвращаемое значение:
//	Строка	- Строка после перекодировки.
//
Функция СтрокуВОбычноеПредставление(СтрокаСимволов, ПризнакКода) // StrHexToStr
	Если Число(ПризнакКода) = 0 Тогда
		КоличествоСимволов = 2;
	Иначе
		КоличествоСимволов = 4;
	КонецЕсли;
	к = 1;
	Результат = "";
	Пока к < СтрДлина(СтрокаСимволов) Цикл
		Строка = Сред(СтрокаСимволов, к, КоличествоСимволов);
		Результат = Результат + Символ(ШестнадцатеричноеЧислоВДесятичное(Строка));
		к = к + КоличествоСимволов;
	КонецЦикла;
	Возврат Результат;
КонецФункции // StrHexToStr()

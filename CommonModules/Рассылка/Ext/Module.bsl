

Процедура ЗапуститьРассылку() Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК УчетнаяЗапись
	                      |ИЗ
	                      |	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	                      |ГДЕ
	                      |	УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления = ЛОЖЬ");
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		// Рассылаем задания со статусом рассылки "Не определен", обновляем статусы
		НаборЗаписей = РегистрыСведений.УдалитьЗаданияДляРассылки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Отправитель.Установить(Результат.УчетнаяЗапись);
		НаборЗаписей.Отбор.Статус.Установить(Перечисления.СтатусыРассылки.НеОпределен);
		НаборЗаписей.Отбор.Выполнено.Установить(Ложь);
		НаборЗаписей.Отбор.Стартован.Установить(Ложь);
		НаборЗаписей.Прочитать(); 
		НаборЗаписейБуф = РегистрыСведений.УдалитьЗаданияДляРассылки.СоздатьНаборЗаписей();
		НаборЗаписейБуф.Отбор.Стартован.Установить(Истина);
		НаборЗаписейБуф.Отбор.Отправитель.Установить(Результат.УчетнаяЗапись);
		НаборЗаписейБуф.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			Почта = Справочники.ШаблоныТекстаДляАвтоинформирования.СоздатьОбъектПочта(Результат.УчетнаяЗапись);
			Если Почта = Неопределено Тогда
				//НаборСостояние.Сообщение = НаборСостояние.Сообщение + "Не удалось подключиться к учетной записи " + Результат.УчетнаяЗапись.Наименование + "!" + Символы.ПС;
				Продолжить;
			КонецЕсли;
			к = НаборЗаписей.Количество();
			Для с = 0 По к-1 Цикл
				Индекс = к-1 - с;
				Запись = НаборЗаписей[Индекс];
				Если Запись.Дата <= ТекущаяДата() Тогда
					МассивАдресов = Новый Массив();
					МассивАдресов.Добавить(Запись.Контакт);
					СписокАдресов = СтрЗаменить(Запись.Контакт, " ", Символы.ПС);
					Отправка = Справочники.ШаблоныТекстаДляАвтоинформирования.ОтправитьEMail(Почта, Запись.Отправитель, Запись.Шаблон, Запись.Текст, Запись.Объект, МассивАдресов, Ложь); 
					ЗаписьБуф = НаборЗаписейБуф.Добавить();
					ЗаполнитьЗначенияСвойств(ЗаписьБуф, Запись); 				
					Если Отправка Тогда
						ЗаписьБуф.Статус = Перечисления.СтатусыРассылки.Отправлено;
					Иначе
						ЗаписьБуф.Статус = Перечисления.СтатусыРассылки.НеОтправлено;		
					КонецЕсли; 
					ЗаписьБуф.Стартован = Истина;
					Если ТипЗнч(Запись.Автор) = Тип("ЗадачаСсылка.Мероприятие") И ВыполнитьМероприятие(ЗаписьБуф.Автор, ЗаписьБуф.Статус) Тогда
						ЗаписьБуф.Выполнено = Истина;
					КонецЕсли;
					
					Если ТипЗнч(Запись.Автор) = Тип("ДокументСсылка.Рассылка") И Не Запись.Шаблон.УведомитьОДоставке И Не Запись.Шаблон.УведомитьОПрочтении Тогда
						ЗаписьБуф.Выполнено = Истина;
					КонецЕсли;
					НаборЗаписей.Удалить(Индекс);
				Иначе
					//ЗаписьСМеньшейДатой = НаборЗаписейСМеньшейДатой.Добавить();
					//ЗаполнитьЗначенияСвойств(ЗаписьСМеньшейДатой, Запись);
				КонецЕсли;
			КонецЦикла;
			НаборЗаписей.Записать(Истина);
			НаборЗаписейБуф.Записать(Истина);
			//НаборЗаписейСМеньшейДатой.Записать(Истина);
		КонецЕсли;
		
		//// Проверяем статусы писем
		
		//НаборЗаписей = РегистрыСведений.УдалитьЗаданияДляРассылки.СоздатьНаборЗаписей();
		//НаборЗаписей.Отбор.Отправитель.Установить(Результат.УчетнаяЗапись);
		//НаборЗаписей.Отбор.Выполнено.Установить(Ложь);
		//НаборЗаписей.Прочитать(); 
		//НаборЗаписейБуф = РегистрыСведений.УдалитьЗаданияДляРассылки.СоздатьНаборЗаписей();
		//Если НаборЗаписей.Количество() > 0 Тогда
		//	Почта = Справочники.ШаблоныТекстаДляАвтоинформирования.СоздатьОбъектПочта(Результат.УчетнаяЗапись);
		//	
		//	ПараметрыОтбораIMAP = Новый Структура;
		//	ПараметрыОтбораIMAP.Вставить("Прочитанные", Истина);
		//	мЗаголовкиСообщения = Новый Массив;
		//	мЗаголовкиСообщения = Почта.ПолучитьЗаголовки(ПараметрыОтбораIMAP);
		//	
		//	Сообщения = Почта.Выбрать(Ложь);
		//	Для Каждого Элемент ИЗ Сообщения Цикл
		//		//ОбработатьПисьмо(Элемент);
		//	КонецЦикла;
		//КонецЕсли;
	КонецЦикла;
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	УчетныеЗаписиSMS4B.Ссылка КАК УчетнаяЗапись
	                      |ИЗ
	                      |	Справочник.УчетныеЗаписиSMS4B КАК УчетныеЗаписиSMS4B
	                      |ГДЕ
	                      |	УчетныеЗаписиSMS4B.ПометкаУдаления = ЛОЖЬ");
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Учетка = Результат.УчетнаяЗапись;
		
		
		НаборЗаписей = РегистрыСведений.УдалитьЗаданияДляРассылки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Статус.Установить(Перечисления.СтатусыРассылки.НеОпределен);
		НаборЗаписей.Отбор.Отправитель.Установить(Результат.УчетнаяЗапись);
		НаборЗаписей.Отбор.Стартован.Установить(Ложь);
		НаборЗаписей.Отбор.Выполнено.Установить(Ложь);
		НаборЗаписей.Прочитать();
		НаборЗаписейБуф = РегистрыСведений.УдалитьЗаданияДляРассылки.СоздатьНаборЗаписей();
		НаборЗаписейБуф.Отбор.Отправитель.Установить(Результат.УчетнаяЗапись);
		НаборЗаписейБуф.Отбор.Стартован.Установить(Истина);
		НаборЗаписейБуф.Прочитать();
		
		СписокСообщений = Новый Массив;
		Структура = Новый Структура;
		//
		Если НаборЗаписей.Количество() > 0 Тогда		
			Для Каждого Запись ИЗ НаборЗаписей Цикл
				Если Запись.Дата <= ТекущаяДата() Тогда		
					Структура.Очистить();
					Структура.Вставить("GUID", Запись.GUID);
					Структура.Вставить("НомерПолучателя", "8" + ОчиститьФорматНомера(Запись.Контакт));
					Структура.Вставить("ТекстСообщения",  Запись.Текст);
					Структура.Вставить("КодОшибки", 0);
					СписокСообщений.Добавить(Структура);
				КонецЕсли;
			КонецЦикла;
			Отправка = ОтправитьСМС(СписокСообщений, Учетка);
			//	Отправка = Истина;
			Если Не Отправка Тогда
				//НаборСостояние.Сообщение = НаборСостояние.Сообщение + "Не смогли подключиться к серверу SMS4B для отправки сообщений..." + Символы.ПС;
				Продолжить;
			КонецЕсли;		
			
			// меняем статусы у обработанных СМС
			к = НаборЗаписей.Количество();
			Для с = 0 По к-1 Цикл
				Индекс = к-1 - с;
				Запись = НаборЗаписей[Индекс]; 
				Если Запись.Дата <= ТекущаяДата() Тогда
					ЗаписьБуф = НаборЗаписейБуф.Добавить();
					ЗаполнитьЗначенияСвойств(ЗаписьБуф, Запись); 				
					ЗаписьБуф.Статус = Перечисления.СтатусыРассылки.НеОтправлено;
					ЗаписьБуф.Стартован = Истина;
					Если ТипЗнч(Запись.Автор) = Тип("ЗадачаСсылка.Мероприятие") И ВыполнитьМероприятие(ЗаписьБуф.Автор, ЗаписьБуф.Статус) Тогда
						ЗаписьБуф.Выполнено = Истина;
					КонецЕсли;
					
					Если ТипЗнч(Запись.Автор) = Тип("ДокументСсылка.Рассылка") Тогда
						ЗаписьБуф.Выполнено = Ложь;
					КонецЕсли;
					НаборЗаписей.Удалить(Индекс);	
				КонецЕсли;
			КонецЦикла;
			НаборЗаписей.Записать(Истина);
			НаборЗаписейБуф.Записать(Истина);		
		КонецЕсли;
		
		// Проверяем статусы по рассылке у невыполненных
		НаборЗаписей = РегистрыСведений.УдалитьЗаданияДляРассылки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Отправитель.Установить(Результат.УчетнаяЗапись);
		НаборЗаписей.Отбор.Выполнено.Установить(Ложь);
		НаборЗаписей.Отбор.Стартован.Установить(Истина);
		НаборЗаписей.Прочитать();
		НаборЗаписейБуф = РегистрыСведений.УдалитьЗаданияДляРассылки.СоздатьНаборЗаписей();
		НаборЗаписейБуф.Отбор.Отправитель.Установить(Результат.УчетнаяЗапись);
		НаборЗаписейБуф.Отбор.Выполнено.Установить(Истина);
		НаборЗаписейБуф.Прочитать();
		
		СМСЛогин = Учетка.Логин;
		СМСПароль = Учетка.Пароль;
		БИТ_СМС_Коммуникатор.УстановитьИмяПользователяИПароль(СМСЛогин, СМСПароль);
		СписокСообщений = Новый Массив;	
		Структура = Новый Структура;
		Если НаборЗаписей.Количество() > 0 Тогда
			Для Каждого Запись Из НаборЗаписей Цикл
			//	Если Запись.Дата <= ТекущаяДата() Тогда
					Структура.Очистить();
					Структура.Вставить("GUID", Запись.GUID);
					Структура.Вставить("СтатусСообщения", ПолучитьНомерСтатусаПоПеречислению(Запись.Статус));
					СписокСообщений.Добавить(Структура);
			//	КонецЕсли;
			КонецЦикла;
			
			// Лезем на SMS4B за новыми статусами сообщений
			//Статусы = БИТ_СМС_Коммуникатор.ОбновитьСтатусы(СписокСообщений);
			Статусы = ОбновитьСтатусы(СписокСообщений);
			
			// Перезаписываем новые статусы в регистр рассылки
			к = НаборЗаписей.Количество();
			п = СписокСообщений.Количество() - 1;
			Для с = 0 По к-1 Цикл
				Индекс = к-1 - с;
				Запись = НаборЗаписей[Индекс]; 
				//Если Запись.Дата <= ТекущаяДата() Тогда
				Если Запись.Статус <> СписокСообщений[п].СтатусСообщения Тогда
					Если ТипЗнч(Запись.Автор) = Тип("ДокументСсылка.Рассылка") ИЛИ (ТипЗнч(Запись.Автор) = Тип("ЗадачаСсылка.Мероприятие") И ВыполнитьМероприятие(Запись.Автор, СписокСообщений[п].СтатусСообщения)) Тогда
						ЗаписьБуф = НаборЗаписейБуф.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьБуф, Запись); 				
						ЗаписьБуф.Статус = ПолучитьЗначениеСтатусаПоНомеру(СписокСообщений[п].СтатусСообщения);
						ЗаписьБуф.Выполнено = Истина;
						НаборЗаписей.Удалить(Индекс);						
					Иначе
						Запись.Статус = ПолучитьЗначениеСтатусаПоНомеру(СписокСообщений[п].СтатусСообщения);
					КонецЕсли;
				КонецЕсли;	
				п = п-1;
				//КонецЕсли;
			КонецЦикла;
			НаборЗаписей.Записать(Истина);
			НаборЗаписейБуф.Записать(Истина);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ВыполнитьМероприятие(Мероприятие, Статус)
	МероприятиеОбъект = Мероприятие.ПолучитьОбъект();
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	НастройкаРассылкиИзБП.РезультатМероприятия
	                      |ИЗ
	                      |	РегистрСведений.НастройкаРассылкиИзБП КАК НастройкаРассылкиИзБП
	                      |ГДЕ
	                      |	НастройкаРассылкиИзБП.ТипМероприятия = &ТипМероприятия
	                      |	И НастройкаРассылкиИзБП.Статус = &Статус");
	Запрос.УстановитьПараметр("ТипМероприятия", МероприятиеОбъект.ТипМероприятия);
	Запрос.УстановитьПараметр("Статус", Статус);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		МероприятиеОбъект.Результат = Результат.РезультатМероприятия;
		МероприятиеОбъект.ДатаВыполнения = ТекущаяДата();
		Отказ = Ложь;
		МероприятиеОбъект.ВыполнитьМероприятие(Отказ);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ОбновитьСтатусы(СписокСообщений);
	Для Каждого Сообщение из СписокСообщений Цикл
		Сообщение.СтатусСообщения = Перечисления.СтатусыРассылки.Доставлено;
	КонецЦикла;
КонецФункции

&НаСервере
Процедура Обработка1()
КонецПроцедуры

&НаСервере
Процедура Обработка()
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Мероприятие1.Ссылка КАК Мероприятие,
	                      |	Мероприятие1.Объект КАК ДолговоеОбязательство,
	                      |	РеестрыСМС.Ссылка КАК Реестр,
	                      |	Мероприятие1.Комментарий
	                      |ИЗ
	                      |	Задача.Мероприятие КАК Мероприятие1
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РеестрыСМС КАК РеестрыСМС
	                      |		ПО Мероприятие1.Ссылка = РеестрыСМС.Мероприятие.Ссылка
	                      |			И (РеестрыСМС.ПометкаУдаления = ЛОЖЬ)
	                      |			И (РеестрыСМС.Завершено = ЛОЖЬ)
	                      |ГДЕ
	                      |	Мероприятие1.Выполнена = ЛОЖЬ
	                      |	И Мероприятие1.ПометкаУдаления = ЛОЖЬ
	                      |	И Мероприятие1.ТипМероприятия.Родитель = &СМСРассылка
	                      |	И (Мероприятие1.БизнесПроцесс = ЗНАЧЕНИЕ(БизнесПроцесс.БизнесПроцессы.ПустаяСсылка)
	                      |			ИЛИ Мероприятие1.БизнесПроцесс.ПометкаУдаления = ЛОЖЬ)");
	Запрос.УстановитьПараметр("СМСРассылка", Справочники.ТипыМероприятий.НайтиПоКоду("0338     "));
	Результат = Запрос.Выполнить().Выгрузить();
	Для Каждого Элемент Из Результат Цикл
		Если Элемент.Реестр = null Тогда
			Реестр = Справочники.РеестрыСМС.СоздатьЭлемент();
			Реестр.Мероприятие = Элемент.Мероприятие;
			Реестр.ДолговоеОбязательство = Элемент.ДолговоеОбязательство;
			Реестр.Текст = Элемент.Комментарий;
			Реестр.Наименование = Элемент.ДолговоеОбязательство.Наименование;
			Реестр.ДатаСоздания = ТекущаяДата();
			Для Каждого Телефон ИЗ Элемент.ДолговоеОбязательство.Должник.Телефоны Цикл
				НомерТелефона = Телефон.Представление;
				НомерТелефона = ОчиститьФорматНомера(НомерТелефона);
				
				Если Телефон.ТипТелефона = Справочники.ТипыТелефонов.НайтиПоКоду("000000003") 
						ИЛИ (Телефон.ТипТелефона <> Справочники.ТипыТелефонов.НайтиПоКоду("000000003") И ПроверитьКорректностьНомера(НомерТелефона)) Тогда
					GUID = Строка(Новый УникальныйИдентификатор);
					Статус = 0;
					Если Не ПроверитьКорректностьНомера(НомерТелефона) Тогда
						Строка = Реестр.Сообщения.Добавить();
						Строка.Статус = 0;
						Строка.НомерТелефона = НомерТелефона;
						Строка.ТекстовыйСтатус = "Некорректный телефонный номер";
						Строка.GUID = GUID;
					Иначе
						//Доставка = ОтправитьСМС(GUID, НомерТелефона, Элемент.Комментарий);
						Строка = Реестр.Сообщения.Добавить();
						Строка.GUID = GUID;
						Строка.НомерТелефона = НомерТелефона;
						Строка.Статус = 4;
					КонецЕсли;
					Строка.ТекстовыйСтатус = ПолучитьНаименованиеСтатусаПоНомеру(Строка.Статус);
				КонецЕсли;
			КонецЦикла;
			Реестр.Записать();
			
		Иначе
			Реестр = Элемент.Реестр.ПолучитьОбъект();
			Для Каждого Сообщение ИЗ Реестр.Сообщения Цикл
				Если Сообщение.Статус = 1 ИЛИ Сообщение.Статус = 2 ИЛИ Сообщение.Статус = 3 ИЛИ Сообщение.Статус = 4 Тогда
					Сообщение.Статус = ПроверитьСтатусСообщения(Сообщение.GUID, Сообщение.Статус);
					Сообщение.ТекстовыйСтатус = ПолучитьНаименованиеСтатусаПоНомеру(Сообщение.Статус);
				КонецЕсли;
			КонецЦикла;
			Определено = Истина;
			НекорректныйНомер = Истина;
			Доставлено = Ложь;
			ТекстОшибки = "";
			Для Каждого Сообщение ИЗ Реестр.Сообщения Цикл
				Если Сообщение.Статус = 1 ИЛИ Сообщение.Статус = 2 ИЛИ Сообщение.Статус = 3 ИЛИ Сообщение.Статус = 4 Тогда 
					Если ТекущаяДата() - Реестр.ДатаСоздания > 3600*32 Тогда
						ТекстОшибки = ТекстОшибки + "По номеру " + Сообщение.НомерТелефона + " истек срок доставки сообщения" + Символы.ПС;
					Иначе
						Определено = Ложь; 
					КонецЕсли;
				КонецЕсли;
				Если Сообщение.Статус = 5 ИЛИ Сообщение.Статус = 8 Тогда
					Доставлено = Истина;
				КонецЕсли;
				Если Сообщение.Статус = 0 Тогда
					ТекстОшибки = "Номер " + Сообщение.НомерТелефона + " имеет неверный формат" + Символы.ПС;
				Иначе
					НекорректныйНомер = Ложь;
				КонецЕсли;
				Если Сообщение.Статус = 6 Тогда
					ТекстОшибки = ТекстОшибки + "По номеру " + Сообщение.НомерТелефона + " сообщение не доставлено" + Символы.ПС;
				КонецЕсли;
				Если Сообщение.Статус = 7 Тогда
					ТекстОшибки = ТекстОшибки + "По номеру " + Сообщение.НомерТелефона + " произошла ошибка отправки" + Символы.ПС;
				КонецЕсли;
				Если Сообщение.Статус = 9 Тогда
					ТекстОшибки = "По номеру " + Сообщение.НомерТелефона + " сообщение получено частично" + Символы.ПС;
				КонецЕсли;
			КонецЦикла;
			Если Определено ИЛИ Доставлено Тогда
				Реестр.Завершено = Истина;
				Реестр.Доставлено = Доставлено;
				Мероприятие = Элемент.Мероприятие.ПолучитьОбъект();
				Если Доставлено Тогда 
					Мероприятие.Результат = Справочники.РезультатыМероприятий.НайтиПоНаименованию("Доставлено",,,Элемент.Мероприятие.ТипМероприятия);
				//	Мероприятие.Результат = Справочники.РезультатыМероприятий.НайтиПоКоду("0556     ");
				Иначе 
					Если НекорректныйНомер Тогда
						Мероприятие.Результат = Справочники.РезультатыМероприятий.НайтиПоНаименованию("Некорректный номер",,,Элемент.Мероприятие.ТипМероприятия);
					Иначе	
						Мероприятие.Результат = Справочники.РезультатыМероприятий.НайтиПоНаименованию("Не доставлено",,,Элемент.Мероприятие.ТипМероприятия);
					КонецЕсли;
					Мероприятие.Комментарий = ТекстОшибки;
					Мероприятие.КомментарийИзменен = Истина;
				КонецЕсли;
				Мероприятие.ДатаВыполнения = ТекущаяДата();
				Отказ = Ложь;
				Мероприятие.ВыполнитьМероприятие(Ложь);
			КонецЕсли;
			Реестр.Записать();
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ОтправитьСМС(СписокСообщений, Учетка)
	//Сообщить("Начинается отправка SMS сообщений...");
	//СМСЛогин = Учетка.Логин;
	//СМСПароль = Учетка.Пароль;
	//Отправитель = Учетка.Отправитель;
	//БИТ_СМС_Коммуникатор.УстановитьИмяПользователяИПароль(СМСЛогин, СМСПароль);
	//Результат = БИТ_СМС_Коммуникатор.Подключиться();
	//Если Результат < 0 Тогда
	//	Сообщить("Не смогли подключиться к серверу SMS4B для отправки сообщений...");
	//	Сообщить(БИТ_СМС_Коммуникатор.ОписаниеОшибокВебСервиса(Результат));
	//	Возврат Ложь;
	//КонецЕсли;
	//
	//Актуальность = ТекущаяДата() + (24 * 3600);
	//Результат = БИТ_СМС_Коммуникатор.ОтправитьСообщения(СписокСообщений, Отправитель, "", ТекущаяДата(), Актуальность);
	//          
	//Если Результат < 0 Тогда
	//	Сообщить("Отправка SMS сообщений НЕ выполнена ...");
	//	Сообщить(БИТ_СМС_Коммуникатор.ОписаниеОшибокВебСервиса(Результат));
	//	Результат = БИТ_СМС_Коммуникатор.Отключиться();
	//	Если Результат = Неопределено Тогда
	//		Сообщить("Не выполнено отключение от сервера!");
	//	КонецЕсли;
	// 	Возврат Ложь;
	//КонецЕсли;
	//
	//Сообщить("Отправка SMS сообщений успешно завершена ...");
	//
	//Результат = БИТ_СМС_Коммуникатор.Отключиться();
	//Если Результат = Неопределено Тогда
	//	Сообщить("Не выполнено отключение от сервера!");
	//КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция ПроверитьСтатусСообщения(СписокСообщений, Учетка)
	СМСЛогин = Константы.СМСЛогин.Получить(); //"MariaCollector";
	СМСПароль = Константы.СМСПароль.Получить();
	БИТ_СМС_Коммуникатор.УстановитьИмяПользователяИПароль(СМСЛогин, СМСПароль);

//	СписокСообщений = Новый Массив;
//	
//		Структура = Новый Структура;
//		Структура.Вставить("GUID",    GUID);
//		Структура.Вставить("СтатусСообщения", Статус);
//		//
//	СписокСообщений.Добавить(Структура);

	Статусы = БИТ_СМС_Коммуникатор.ОбновитьСтатусы(СписокСообщений);
	Статус = СписокСообщений[0].СтатусСообщения;
	Возврат Статус;
КонецФункции

&НаСервере
Функция ОчиститьФорматНомера(стрНомер) Экспорт
	код0	= 48;
	код9	= 57;
	кодЗв	= 42;
	кодРеш	= 35;
	стрОчищНомер = "";
	длинаНомера = СтрДлина(стрНомер);
	Для й=1 по длинаНомера Цикл
		кодСимв = КодСимвола(стрНомер, й);
		Если (кодСимв >= код0 И кодСимв <= код9) Тогда
			стрОчищНомер = стрОчищНомер + Символ(кодСимв);
		КонецЕсли;
	КонецЦикла;
	Возврат стрОчищНомер;
	//стр = СтрЗаменить(стрНомер, " ", "");
	//стр = СтрЗаменить(стр, "+", "");
	//стр = СтрЗаменить(стр, "(", "");
	//стр = СтрЗаменить(стр, ")", "");
	//стр = СтрЗаменить(стр, "-", "");
	//Если стрДлина(стр) > 10 Тогда
	//	стр = Прав(стр, 10);
	//КонецЕсли;
	//Возврат стр;
КонецФункции

&НаСервере
Функция ПроверитьКорректностьНомера(стрНомер)
	Если СтрДлина(стрНомер) = 11 Тогда
		Если Лев(стрНомер, 2) = "79" ИЛИ Лев(стрНомер, 2) = "89" Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли СтрДлина(стрНомер) = 10 Тогда
		Если Лев(стрНомер, 1) = "9" Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьНаименованиеСтатусаПоНомеру(Статус)
	// Описание возвращаемых статусов сообщений:
	//  1 - Доставка 
	//  2 - В очереди
	//  3 - Отправлено 
	//  4 - Не отправлено
	//  5 - Доставлено
	//  6 - Не доставлено 
	//  7 - Ошибка отправки 
	//  8 - Получено 
	//  9 - Частично получено
	Если Статус = 0 Тогда
		Возврат "Некорректный телефонный номер";
	ИначеЕсли Статус = 1 Тогда
		Возврат "Доставка";
	ИначеЕсли Статус = 2 Тогда
		Возврат "В очереди";
	ИначеЕсли Статус = 3 Тогда
		Возврат "Отправлено";
	ИначеЕсли Статус = 4 Тогда
		Возврат "Не отправлено";
	ИначеЕсли Статус = 5 Тогда
		Возврат "Доставлено";
	ИначеЕсли Статус = 6 Тогда
		Возврат "Не доставлено";
	ИначеЕсли Статус = 7 Тогда
		Возврат "Ошибка отправки";
	ИначеЕсли Статус = 8 Тогда
		Возврат "Получено";
	ИначеЕсли Статус = 9 Тогда
		Возврат "Частично получено";
	Иначе
		Возврат "Статус не определен";
	КонецЕсли;
КонецФункции

Функция ПолучитьНомерСтатусаПоПеречислению(Статус)
	Если Статус = Перечисления.СтатусыРассылки.Доставка Тогда
		Возврат 1;
	ИначеЕсли Статус = Перечисления.СтатусыРассылки.ВОчереди Тогда
		Возврат 2;
	ИначеЕсли Статус = Перечисления.СтатусыРассылки.Отправлено Тогда
		Возврат 3;
	ИначеЕсли Статус = Перечисления.СтатусыРассылки.НеОтправлено Тогда
		Возврат 4;
	ИначеЕсли Статус = Перечисления.СтатусыРассылки.Доставлено Тогда
		Возврат 5;
	ИначеЕсли Статус = Перечисления.СтатусыРассылки.НеДоставлено Тогда
		Возврат 6;
	ИначеЕсли Статус = Перечисления.СтатусыРассылки.ОшибкаОтправления Тогда
		Возврат 7;
	ИначеЕсли Статус = Перечисления.СтатусыРассылки.Получено Тогда
		Возврат 8;
	ИначеЕсли Статус = Перечисления.СтатусыРассылки.ЧастичноПолучено Тогда
		Возврат 9;
	ИначеЕсли Статус = Перечисления.СтатусыРассылки.НеОпределен Тогда
		Возврат 0;
	Иначе 
		Возврат 0;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьЗначениеСтатусаПоНомеру(Статус)
	// Описание возвращаемых статусов сообщений:
	//  1 - Доставка 
	//  2 - В очереди
	//  3 - Отправлено 
	//  4 - Не отправлено
	//  5 - Доставлено
	//  6 - Не доставлено 
	//  7 - Ошибка отправки 
	//  8 - Получено 
	//  9 - Частично получено
	Если Статус = 0 Тогда
		Возврат Перечисления.СтатусыРассылки.НеОпределен;
	ИначеЕсли Статус = 1 Тогда
		Возврат Перечисления.СтатусыРассылки.Доставка;
	ИначеЕсли Статус = 2 Тогда
		Возврат Перечисления.СтатусыРассылки.ВОчереди;
	ИначеЕсли Статус = 3 Тогда
		Возврат Перечисления.СтатусыРассылки.Отправлено;
	ИначеЕсли Статус = 4 Тогда
		Возврат Перечисления.СтатусыРассылки.НеОтправлено;
	ИначеЕсли Статус = 5 Тогда
		Возврат Перечисления.СтатусыРассылки.Доставлено;
	ИначеЕсли Статус = 6 Тогда
		Возврат Перечисления.СтатусыРассылки.НеДоставлено;
	ИначеЕсли Статус = 7 Тогда
		Возврат Перечисления.СтатусыРассылки.ОшибкаОтправления;
	ИначеЕсли Статус = 8 Тогда
		Возврат Перечисления.СтатусыРассылки.Получено;
	ИначеЕсли Статус = 9 Тогда
		Возврат Перечисления.СтатусыРассылки.ЧастичноПолучено;
	Иначе
		Возврат Перечисления.СтатусыРассылки.НеОпределен;
	КонецЕсли;
КонецФункции

//Лебедева, 14.10.2019

Процедура ЗаписьВРегистрЕмаилСообщения(СтруктураПисьма) Экспорт
	МенеджерЗаписи = РегистрыСведений.РСЕмаилСообщения.СоздатьМенеджерЗаписи();	
	МенеджерЗаписи.GUID = СтруктураПисьма.GUID;
	МенеджерЗаписи.Объект = СтруктураПисьма.Объект ;
	МенеджерЗаписи.ПочтаПолучателя = СтруктураПисьма.ПочтаПолучателя;
	МенеджерЗаписи.ПочтаОтправителя = СтруктураПисьма.ПочтаОтправителя;
	МенеджерЗаписи.ТекстПисьма = СтруктураПисьма.ТекстПисьма;
	МенеджерЗаписи.ДатаОтправки = СтруктураПисьма.ДатаОтправки;
	МенеджерЗаписи.Отправлено = СтруктураПисьма.Отправлено;
	МенеджерЗаписи.Записать();	
КонецПроцедуры

Процедура ОтправитьЕмаилПоДО(УчетнаяЗапись,ЕмаилКуда,Текст,Шаблон,Об) Экспорт
	СтруктураПисьма = Новый Структура;
	СтруктураПисьма.Вставить("GUID", Строка(Новый УникальныйИдентификатор));
	СтруктураПисьма.Вставить("Объект",Об);
	СтруктураПисьма.Вставить("ПочтаПолучателя",ЕмаилКуда);
	СтруктураПисьма.Вставить("ПочтаОтправителя",УчетнаяЗапись.Пользователь);
	СтруктураПисьма.Вставить("ТекстПисьма",Текст);
	
	МассивЕмаилов= Новый Массив;
	МассивЕмаилов.Добавить(ЕмаилКуда);
	Почта = Справочники.ШаблоныТекстаДляАвтоинформирования.СоздатьОбъектПочта(УчетнаяЗапись);
	Отправка = истина;
	Отправка = Справочники.ШаблоныТекстаДляАвтоинформирования.ОтправитьEMail(Почта,УчетнаяЗапись,Шаблон,Текст,Об,МассивЕмаилов,Ложь);
	Если отправка тогда
		Сообщить("E-mail успешно отправлен!");
		СтруктураПисьма.Вставить("ДатаОтправки",ТекущаяДата());
		СтруктураПисьма.Вставить("Отправлено",Истина);
		ЗаписьВРегистрЕмаилСообщения(СтруктураПисьма);
	Иначе
		Сообщить("При отправлении e-mail произошла ошибка!");
		СтруктураПисьма.Вставить("ДатаОтправки",Дата(1, 1, 1, 0, 0, 0));
		СтруктураПисьма.Вставить("Отправлено",Ложь);
		ЗаписьВРегистрЕмаилСообщения(СтруктураПисьма);
	КонецЕсли;	
	
	
КонецПроцедуры

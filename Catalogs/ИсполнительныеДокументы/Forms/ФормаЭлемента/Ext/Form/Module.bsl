
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЭтоНовыйОбъект = Объект.Ссылка.Пустая();
	
	Если Объект.Ссылка.Пустая() Тогда
		Пользователи.ЗаполнитьРеквизитыПоДаннымПользователя(Объект);
		Если Не ЗначениеЗаполнено(Объект.СтатусИД) Тогда
			Объект.СтатусИД = Справочники.СтатусыИсполнительногоДокумента.ВРаботе;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеРеквизиты.Загрузить(Объект.ДополнительныеРеквизиты.Выгрузить());
	УправлениеЗаполнением.ДобавитьДополнительныеРеквизиты(ЭтаФорма);
	
	ЗаполнитьТабличныйДокумент();
	
	УправлениеФормой();
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	Если Не Объект.Ссылка.Пустая() Тогда
		Менеджер = РегистрыСведений.ХарактеристикиИД.СоздатьМенеджерЗаписи();
		Менеджер.ИсполнительныйДокумент = Объект.Ссылка;
		Менеджер.Свойство = ПланыВидовХарактеристик.ХарактеристикиИД.СД_СуммаРешения;
		Менеджер.Прочитать();
		
		СуммаРешения = Менеджер.Значение;
		
		Менеджер = РегистрыСведений.ЗадолженностьПоИсполнительнымДокументамОстатки.СоздатьМенеджерЗаписи();
		Менеджер.Объект = Объект.Ссылка;
		Менеджер.ТипЗадолженности = ПланыВидовХарактеристик.ТипыЗадолженностиПоРешению.Сумма;
		Менеджер.Прочитать();
		
		ОстатокПоРешению = Менеджер.Сумма;
		
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличныйДокумент()
	ОбъектыСервер.ЗаполнитьОтчетОбъекта(Объект.Ссылка, ТабличныйДокумент, Константы.ОтчетДляИД);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Объект.НомерДела = ВРег(СокрЛП(Объект.НомерДела));
	Объект.СерияНомерИД = ВРег(СокрЛП(Объект.СерияНомерИД));
	СтрСимв = "0123456789ЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ №_-/():.";
	
	Стр = Объект.НомерДела;
	Для Номер = 1 По СтрДлина(Стр) Цикл
		Если Найти(СтрСимв, Сред(Стр, Номер, 1)) = 0 Тогда
			Сообщить("Недопустимые символы в номере дела!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Стр = Объект.СерияНомерИД;
	Для Номер = 1 По СтрДлина(Стр) Цикл
		Если Найти(СтрСимв, Сред(Стр, Номер, 1)) = 0 Тогда
			Сообщить("Недопустимые символы в серия/номер исполнительного документа!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	УправлениеСвойствами.ПередЗаписьюНаСервере2(ЭтаФорма, ТекущийОбъект, Отказ);
	//УправлениеСвойствами.КонтрольУникальности(Справочники.ИсполнительныеДокументы, ТекущийОбъект, "КодИД", ТекущийОбъект.КодИД, Отказ);
	КонтрольУникальности(Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Свойство = Неопределено;
	СвойствоВидСтроки = Неопределено;
	Код = Сред(Элемент.Имя, Найти(Элемент.Имя, "_") + 1);
	УправлениеСвойствами.ПолучитьСвойствоПоКоду(СтрЗаменить(Код, "_", " "), Свойство, СвойствоВидСтроки);
	
	Если СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Адрес") ИЛИ
			СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Телефон") Тогда
	    Строки = ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Свойство));
		ТекСтрокаПараметры = Строки[0].Параметры;
						
		СписокСтрок = СтрЗаменить(ТекСтрокаПараметры, ";", Символы.ПС);
		ЗначенияПолей = Новый СписокЗначений();
		Если СтрЧислоСтрок(СписокСтрок) > 1 Тогда
			Для Индекс = 1 По СтрЧислоСтрок(СписокСтрок) Цикл
				Стр = СтрПолучитьСтроку(СписокСтрок, Индекс);
				Если Стр <> "" Тогда 
					СписокПодстрок = СтрЗаменить(Стр, "=", Символы.ПС);
					ЗначенияПолей.Добавить(СтрПолучитьСтроку(СписокПодстрок, 2), СтрПолучитьСтроку(СписокПодстрок, 1));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;			
		Если СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Адрес") Тогда
			ИмяФормыРедактирования = "ОбщаяФорма.ВводАдреса";
		ИначеЕсли СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.Телефон") Тогда
			ИмяФормыРедактирования = "ОбщаяФорма.ВводТелефона";
		КонецЕсли;
			
		Пар = Новый Структура;
		Пар.Вставить("ЗначенияПолей",                ЗначенияПолей);
		Пар.Вставить("Вид",                          ""); //"Адрес");
		Пар.Вставить("БылиВнесеныИзменения",         Ложь);
		Пар.Вставить("Представление",                Элемент.ТекстРедактирования);
		Пар.Вставить("РедактированиеТолькоВДиалоге", Не Элемент.РедактированиеТекста);
		Пар.Вставить("АдресТолькоРоссийский",        Ложь);
			
		//Чуров
		Результат = ОткрытьФорму(ИмяФормыРедактирования, Пар);	
		//Результат = ОткрытьФормуМодально(ИмяФормыРедактирования, Пар);	
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Строки[0].Значение = Результат.Представление;
			ЭтаФорма[Элемент.Имя] = Результат.Представление;
			ЗначенияПолей = Результат.ЗначенияПолей;
			Модифицированность = Истина;
			
			РезультатЗначение = "";
			Для Каждого Элемент Из ЗначенияПолей Цикл
				РезультатЗначение = РезультатЗначение + Элемент.Представление + "=" + Элемент.Значение + ";"; 
			КонецЦикла;
			
			Строки[0].Параметры = РезультатЗначение;
		КонецЕсли;
		
	ИначеЕсли СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.АдресФИАС") Тогда 
		
		Строки = ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Свойство)); 
		ТекСтрока = Строки[0]; 
		
		ИмяФормыРедактирования = "Обработка.РасширенныйВводКонтактнойИнформации.Форма.ВводАдреса"; 
		Если ТекСтрока.Параметры = "" Тогда 
			ЗнПолей = ""; 
		Иначе 
			ЗнПолей = бит_АдресныйКлассификатор.ПолучитьJSONИзXML(ТекСтрока.Параметры); 
		КонецЕсли; 
		Пар = Новый Структура; 
		Пар.Вставить("ЗначенияПолей", ЗнПолей); 
		Пар.Вставить("Вид", ""); //"Адрес"); 
		Пар.Вставить("БылиВнесеныИзменения", Ложь); 
		Пар.Вставить("Представление", Элемент.ТекстРедактирования); 
		Пар.Вставить("РедактированиеТолькоВДиалоге", Не Элемент.РедактированиеТекста); 
		Пар.Вставить("АдресТолькоРоссийский", Ложь); 
		
		Результат = ОткрытьФормуМодально(ИмяФормыРедактирования, Пар); 
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда 
			Строки[0].Значение = Результат.Представление; 
			ЭтаФорма[Элемент.Имя] = Результат.Представление; 
			Модифицированность = Истина; 
			СтрокаJSON = Результат.Значение; 
			
			Если СтрокаJSON = "" Тогда 
				СтрокаJSON = бит_АдресныйКлассификатор.ПолучитьJSONИзXML(СтрокаJSON); 
			КонецЕсли; 
			
			Строки[0].Параметры = бит_АдресныйКлассификатор.ПолучитьСтрокуXML(СтрокаJSON); 
		КонецЕсли;
		
	ИначеЕсли СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.ПутьКФайлу") Тогда	
		#Если Не ВебКлиент Тогда
			СтандартнаяОбработка = Ложь;
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			Диалог.Заголовок = "Выберите файл";
			Диалог.ПолноеИмяФайла = ЭтаФорма[Элемент.Имя];
			Диалог.МножественныйВыбор = Ложь;
			Если Диалог.Выбрать() Тогда
				ЭтаФорма[Элемент.Имя] = Диалог.ПолноеИмяФайла;
			КонецЕсли;	
		#Иначе
			СтандартнаяОбработка = Ложь;
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			Диалог.Заголовок = "Выберите файл";
			Диалог.ПолноеИмяФайла = ЭтаФорма[Элемент.Имя];
			//Фильтр = "EXE (*.exe)|*.exe"; 
			//Диалог.Фильтр = Фильтр; 
			Диалог.МножественныйВыбор = Ложь;
			//Диалог.Каталог = "F:\";
			Диалог.Показать(Новый ОписаниеОповещения("ДополнительныеРеквизитыНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("Диалог, Элемент", Диалог, Элемент)));
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Стр = СтрЗаменить(Элемент.Имя, "Реквизит_", "РеквизитСвойство_");
	Строки = ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Вычислить(Стр)));
	СтрокаЗапуска = "";	
	Если Строки.Количество() > 0 Тогда
		СтрокаЗапуска = Строки[0].Значение;
	КонецЕсли;

	Попытка
		ЗапуститьПриложение(СтрокаЗапуска);
	Исключение
	//Чуров
	//ПоказатьЗначение(,СтрокаЗапуска);
		ОткрытьЗначение(СтрокаЗапуска);
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	//ОбъектыСервер.УдалитьПометкуОбИзменении(Отказ, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	Элемент = ДополнительныеПараметры.Элемент;
	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ЭтаФорма[Элемент.Имя] = Диалог.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НомерДелаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Должник) Тогда
		стрДолжник = ОбъектыСервер.РазыменоватьСсылку(Объект.Должник, "КодКонтрагента");
	Иначе
		стрДолжник = "";
	КонецЕсли;
	Объект.КодИД = Объект.НомерДела + " " + Формат(Объект.ДатаИД, "ДФ='dd.MM.yyyy'") + " " + стрДолжник;
КонецПроцедуры

&НаКлиенте
Процедура ДолговоеОбязательствоПриИзменении(Элемент)
	Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда
		#Если ТолстыйКлиентУправляемоеПриложение Тогда
			Объект.Должник = Объект.Владелец.Должник;
		#Иначе
			Владелец = Объект.Владелец;
			Объект.Должник = ПолучитьДолжникаДО(Владелец);
		#КонецЕсли
	ИначеЕсли ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Контрагенты")Тогда
		Объект.Должник = Объект.Владелец;
	КонецЕсли;		
	Объект.ВидОтветчика = ПредопределенноеЗначение("Перечисление.ВидыОтветчиков.Должник");
КонецПроцедуры

&НаСервере
Функция ПолучитьДолжникаДО(Владелец)
	Возврат Владелец.Должник;
КонецФункции	

&НаКлиенте
Процедура ДатаИДПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Должник) Тогда
		стрДолжник = ОбъектыСервер.РазыменоватьСсылку(Объект.Должник, "КодКонтрагента");
	Иначе
		стрДолжник = "";
	КонецЕсли;
	Объект.КодИД = Объект.НомерДела + " " + Формат(Объект.ДатаИД, "ДФ='dd.MM.yyyy'") + " " + стрДолжник;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("ДляСудебногоДелаСозданИД", Объект.Ссылка, ЭтаФорма);
	
	//Попытка
	//	//Если ЭтаФорма.ПредметИсполнения = "Госпошлина" Тогда
	//	//	ЭтаФорма.ВладелецФормы.Элементы.Решения.ТекущиеДанные.ИсполнительныйДокументГоспошлина = Объект.Ссылка;
	//	//ИначеЕсли ЭтаФорма.ПредметИсполнения = "Задолженность" Тогда
	//	//	ЭтаФорма.ВладелецФормы.Элементы.Решения.ТекущиеДанные.ИсполнительныйДокумент = Объект.Ссылка;
	//	//ИначеЕсли ЭтаФорма.ПредметИсполнения = "ОбращениеВзыскания" Тогда
	//	//	ЭтаФорма.ВладелецФормы.Элементы.Решения.ТекущиеДанные.ИсполнительныйДокументОбращениеВзыскания = Объект.Ссылка;
	//	//КонецЕсли;
	//	ЭтаФорма.ВладелецФормы.Элементы.ИД.ТекущиеДанные.ИсполнительныйДокумент = Объект.Ссылка;
	//	ЭтаФорма.ВладелецФормы.Модифицированность = Истина;
	//Исключение
	//КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ВидОтветчикаПриИзменении(Элемент)
	Элементы.Ответчик.РежимВыбораИзСписка = Истина;
	Элементы.Ответчик.СписокВыбора.Очистить();
	СписокОтветчиков = СписокОтветчиков(Объект.Владелец, Объект.ВидОтветчика);
	Для Каждого Ответчик Из СписокОтветчиков Цикл
		Элементы.Ответчик.СписокВыбора.Добавить(Ответчик);
	КонецЦикла;
	Если СписокОтветчиков.Количество() = 1 Тогда
		Объект.Должник = СписокОтветчиков[0];
	Иначе
		Объект.Должник = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СписокОтветчиков(Займ, ВидОтветчика)
	СписокОтветчиков = Новый Массив;
	Если ВидОтветчика = Перечисления.ВидыОтветчиков.Поручитель Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	Поручительства.Поручитель КАК Поручитель
		                      |ИЗ
		                      |	РегистрСведений.Поручительства КАК Поручительства
		                      |ГДЕ
		                      |	Поручительства.ДолговоеОбязательство = &ДолговоеОбязательство");
		Запрос.УстановитьПараметр("ДолговоеОбязательство", Займ);
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			СписокОтветчиков.Добавить(Результат.Поручитель);
		КонецЦикла;
	ИначеЕсли ВидОтветчика = Перечисления.ВидыОтветчиков.Наследник Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	Наследники.Наследник КАК Наследник
		                      |ИЗ
		                      |	РегистрСведений.Наследники КАК Наследники
		                      |ГДЕ
		                      |	Наследники.ДолговоеОбязательство = &ДолговоеОбязательство");
		Запрос.УстановитьПараметр("ДолговоеОбязательство", Займ);
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			СписокОтветчиков.Добавить(Результат.Наследник);
		КонецЦикла;		
	ИначеЕсли ВидОтветчика = Перечисления.ВидыОтветчиков.Должник Тогда
		СписокОтветчиков.Добавить(Займ.Должник);
	Иначе
	КонецЕсли;
	Возврат СписокОтветчиков;
КонецФункции


&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	//Элементы.ОтветчикФИО.СписокВыбора.Очистить();
	//Для Каждого ФИО из Объект.Должник.ФИО Цикл
	//	стр = Элементы.ОтветчикФИО.СписокВыбора.Добавить();
	//	стр.Значение = ФИО.ФИО;
	//	стр.Представление = ФИО.ФИО;
	//КонецЦикла;	
	
	ЗаполнитьХарактеристикиСД();
	СтадииПроизводства.ЗаполнитьИсполнительноеПроизводство(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОтветчикПриИзмененииНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновлениеИП" Тогда
		//ВывестиИП();
		ВывестиИПВкладки();
	ИначеЕсли ИмяСобытия = "ЗаписьСД" Тогда
		ОбновитьРешение();
		ЗаполнитьХарактеристикиСД();
		УправлениеФормой();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиИПВкладки()
	СтадииПроизводства.ЗаполнитьИсполнительноеПроизводство(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры


&НаСервере
Процедура ОтветчикПриИзмененииНаСервере()
	Объект.ОтветчикФИО = Объект.Должник.ФИО_Действующее;
	Элементы.ОтветчикФИО.СписокВыбора.Очистить();
	Для Каждого ФИО из Объект.Должник.ФИО Цикл
		стр = Элементы.ОтветчикФИО.СписокВыбора.Добавить();
		стр.Значение = ФИО.ФИО;
		стр.Представление = ФИО.ФИО;
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура ОтветчикПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Должник) Тогда
		стрДолжник = ОбъектыСервер.РазыменоватьСсылку(Объект.Должник, "КодКонтрагента");
	Иначе
		стрДолжник = "";
	КонецЕсли;
	Объект.КодИД = Объект.НомерДела + " " + Формат(Объект.ДатаИД, "ДФ='dd.MM.yyyy'") + " " + стрДолжник;	
	ОтветчикПриИзмененииНаСервере();
КонецПроцедуры

Процедура КонтрольУникальности(Отказ) 
	Если Объект.Ссылка.Пустая() Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ Первые 1
		                      |	ИсполнительныеДокументы.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	Справочник.ИсполнительныеДокументы КАК ИсполнительныеДокументы
		                      |ГДЕ
		                      |	ИсполнительныеДокументы.КодИД = &КодИД
		                      |	И ИсполнительныеДокументы.Должник = &Должник
		                      |	И ИсполнительныеДокументы.ТипИД = &ТипИД");
		Запрос.УстановитьПараметр("КодИД", Объект.КодИД);
		Запрос.УстановитьПараметр("Должник", Объект.Должник);
		Запрос.УстановитьПараметр("ТипИД", Объект.ТипИД);
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			Отказ = Истина;
			Сообщить("Значение поля КодИД не является уникальным!");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьХарактеристикиСД()
	Массив = РасчетЗадолженностиСудопроизводство.СписокРеквизитовСудебноеДело();
	Для Каждого стр из Массив Цикл
		Менеджер = РегистрыСведений.ХарактеристикиИД.СоздатьМенеджерЗаписи();
		Менеджер.ИсполнительныйДокумент = Объект.Ссылка;
		Менеджер.Свойство = ПланыВидовХарактеристик.ХарактеристикиИД["СД_" + стр];
		Менеджер.Прочитать();
		
		ЭтаФорма["СД_" + стр] = Менеджер.Значение;
		
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРешение()
	Попытка
		Если ЗначениеЗаполнено(Объект.Ссылка.СудебноеРешение) И Не ЗначениеЗаполнено(Объект.СудебноеРешение) Тогда
			Объект.СудебноеРешение = Объект.Ссылка.СудебноеРешение;
		КонецЕсли;
	Исключение
		
	КонецПопытки;
КонецПроцедуры



&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Массив = РасчетЗадолженностиСудопроизводство.СписокРеквизитовСудебноеДело();
	Для Каждого стр из Массив Цикл
		Менеджер = РегистрыСведений.ХарактеристикиИД.СоздатьМенеджерЗаписи();
		Менеджер.ИсполнительныйДокумент = Объект.Ссылка;
		Менеджер.Свойство = ПланыВидовХарактеристик.ХарактеристикиИД["СД_" + стр];
		Менеджер.Прочитать();
		
		Если Менеджер.Значение <> ЭтаФорма["СД_" + стр] Тогда
			Менеджер.ИсполнительныйДокумент = Объект.Ссылка;
			Менеджер.Свойство = ПланыВидовХарактеристик.ХарактеристикиИД["СД_" + стр];			
			Менеджер.Значение = ЭтаФорма["СД_" + стр];
			Менеджер.Записать();
		КонецЕсли;

	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура СоздатьКарточкуСудебногоДела(Команда)
	Форма = ПолучитьФорму("Документ.СудебноеДело.Форма.ФормаДокумента");
	Форма.Объект.Займ = Объект.Владелец;
	
	Массив = РасчетЗадолженностиСудопроизводство.СписокРеквизитовСудебноеДело();
	Для Каждого стр из Массив Цикл
		Форма.Объект[стр] = ЭтаФорма["СД_" + стр];
	КонецЦикла;
	
	Ответчик = Форма.Объект.Ответчики.Добавить();
	Ответчик.ВидОтветчика = Объект.ВидОтветчика;
	Ответчик.Значение = Объект.Должник;
		
	Форма.Объект.Истец = Объект.Взыскатель;
	Форма.Объект.РежимЗагрузки = ПредопределенноеЗначение("Перечисление.РежимыЗагрузкиСудебныхДел.ТолькоСуммаРешения");
	
	Форма.Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Форма.Открыть();
КонецПроцедуры


&НаСервере
Процедура ОтвязатьКарточкуСудбеногоДелаНаСервере()
	Объект.СудебноеРешение = Документы.СудебноеДело.ПустаяСсылка();
	Массив = РасчетЗадолженностиСудопроизводство.СписокРеквизитовСудебноеДело();
	Для Каждого стр из Массив Цикл
		Менеджер = РегистрыСведений.ХарактеристикиИД.СоздатьМенеджерЗаписи();
		Менеджер.ИсполнительныйДокумент = Объект.Ссылка;
		Менеджер.Свойство = ПланыВидовХарактеристик.ХарактеристикиИД["СД_" + стр];
		Менеджер.Значение = Неопределено;
		Менеджер.Записать();
	КонецЦикла;	
	ЗаполнитьХарактеристикиСД();
	УправлениеФормой();
КонецПроцедуры


&НаКлиенте
Процедура ОтвязатьКарточкуСудбеногоДела(Команда)
	ОтвязатьКарточкуСудбеногоДелаНаСервере();
КонецПроцедуры


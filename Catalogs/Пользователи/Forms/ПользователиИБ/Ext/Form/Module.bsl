// Поле ПользователиИБ.КодПроблемы
// 0 - пользовательИБ не записан в справочник
// 1 - ПолноеИмя отличается от Наименования
// 2 - пользовательИБ не найден
// 3 - пользовательИБ пустой УИД
// 4 - все в порядке
// для кодов 0,1 красная подсветка
// для кодов 2,3 серая   подсветка
// 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьПривилегированныйРежим(Истина);	
	Если НЕ Пользователи.ЭтоПолноправныйПользовательИБ() Тогда
		ВызватьИсключение(НСтр("ru = 'Нет полных прав доступа!'"));
	КонецЕсли;
	
	ЗаполнитьСписокПользователей(Истина);	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ДобавленПользовательИБ" ИЛИ ИмяСобытия = "ИзмененПользовательИБ" ИЛИ
	    	ИмяСобытия = "УдаленПользовательИБ" ИЛИ ИмяСобытия = "ОчищенаСвязьСНесуществущимПользователемИБ" Тогда	
		ЗаполнитьСписокПользователей();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПользователей(ПриСозданииФормы = Ложь)
	ПользователиИнфБазы.ТабличнаяЧастьПользователей.Очистить();
		
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();	
	Для Каждого ПользовательИБ Из ПользователиИБ Цикл	
		//Если ПользователиИнфБазы.ТабличнаяЧастьПользователей.НайтиСтроки(
		//		Новый Структура("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор))
		//		.Количество() = 0 Тогда
			// этого пользователя ИБ нет в справочнике
			НоваяСтрока = ПользователиИнфБазы.ТабличнаяЧастьПользователей.Добавить();
			НоваяСтрока.ПолноеИмя                   = ПользовательИБ.ПолноеИмя;
			НоваяСтрока.Имя                         = ПользовательИБ.Имя;
			НоваяСтрока.АутентификацияСтандартная   = ПользовательИБ.АутентификацияСтандартная;
			НоваяСтрока.АутентификацияОС            = ПользовательИБ.АутентификацияОС;
			НоваяСтрока.ПользовательОС              = ПользовательИБ.ПользовательОС;
			НоваяСтрока.ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
			НоваяСтрока.Ссылка = Справочники.Пользователи.НайтиПоКоду(ПользовательИБ.Имя);
			Если Не НоваяСтрока.Ссылка.Пустая() Тогда
				НоваяСтрока.КодПроблемы = 4;
			Иначе
				НоваяСтрока.КодПроблемы = 0;
			КонецЕсли;	
			НоваяСтрока.Картинка                    = ПолучитьНомерКартинкиПоСостоянию(НоваяСтрока.КодПроблемы, НоваяСтрока.ПометкаУдаления, Ложь);
		//КонецЕсли;	
	КонецЦикла;
				
	//ПользователиИнфБазы.ТабличнаяЧастьПользователей.Сортировать("ПометкаУдаления Возр, КодПроблемы Возр");
	ПользователиИнфБазы.ТабличнаяЧастьПользователей.Сортировать("Имя Возр");
КонецПроцедуры

&НаСервере
// заполнить список пользователей БД
Процедура ЗаполнитьСписокПользователейБД82()
	ПользователиИнфБазы.ТабличнаяЧастьПользователей.Очистить();	
	ВсеПользователи = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Для Каждого Пользователь Из ВсеПользователи Цикл	
		ТекущиеДанные = ПользователиИнфБазы.ТабличнаяЧастьПользователей.Добавить();
		ТекущиеДанные.Имя = Пользователь.Имя;
		ТекущиеДанные.ПолноеИмя = Пользователь.ПолноеИмя;	
		ТекущиеДанные.ПарольУстановлен = Пользователь.ПарольУстановлен;
		ТекущиеДанные.ПоказыватьВСпискеВыбора = Пользователь.ПоказыватьВСпискеВыбора;
		ТекущиеДанные.АутентификацияСтандартная = Пользователь.АутентификацияСтандартная;
		ТекущиеДанные.АутентификацияОС = Пользователь.АутентификацияОС;
		Попытка
			ТекущиеДанные.ПользовательОС = Пользователь.ПользовательОС;
		Исключение
			ТекущиеДанные.ПользовательОС = "<Неверные данные>";
		КонецПопытки; 
		
		Если Пользователь.Язык = Неопределено Тогда
			ТекущиеДанные.Язык = "";
			ТекущиеДанные.ЯзыкПредставление = "";
		Иначе
			ТекущиеДанные.Язык = Пользователь.Язык.Имя;
			ТекущиеДанные.ЯзыкПредставление = Пользователь.Язык;
		КонецЕсли; 
		
		Если Пользователь.ОсновнойИнтерфейс = Неопределено Тогда
			ТекущиеДанные.ОсновнойИнтерфейс = "";
			ТекущиеДанные.ОсновнойИнтерфейсПредставление = "";
		Иначе
			ТекущиеДанные.ОсновнойИнтерфейс = Пользователь.ОсновнойИнтерфейс.Имя;
			ТекущиеДанные.ОсновнойИнтерфейсПредставление = Пользователь.ОсновнойИнтерфейс;
		КонецЕсли; 
		
		РезультатРоли = Новый СписокЗначений;
		Для Каждого Роль Из Пользователь.Роли Цикл
			РезультатРоли.Добавить(Роль.Имя,Роль);
		КонецЦикла; 
		РезультатРоли.СортироватьПоЗначению();
		
		РезультатИмена         = "";
		РезультатПредставление = "";
		Для Каждого Роль Из РезультатРоли Цикл
			РезультатИмена         = РезультатИмена+Роль.Значение+", ";
			РезультатПредставление = РезультатПредставление+Роль.Представление+", ";
		КонецЦикла; 
		ТекущиеДанные.Роли = Сред(РезультатИмена,1,СтрДлина(РезультатИмена)-2);
		ТекущиеДанные.РолиПредставление = Сред(РезультатПредставление,1,СтрДлина(РезультатПредставление)-2);
		ТекущиеДанные.УникальныйИдентификатор = Пользователь.УникальныйИдентификатор;	
		
		//УстановитьОтборПоРолям(ТекущиеДанные, ОтборСтрок);
		ТекущиеДанные.ОтборПоРолям = Истина;								
	КонецЦикла; 
	
	ПользователиИнфБазы.ТабличнаяЧастьПользователей.Сортировать("Имя");		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИлиОткрытьТекущий(Команда)
	ПользователиИнфБазыВыбор(Элементы.ПользователиИнфБазы, Элементы.ПользователиИнфБазы.ТекущаяСтрока,
			Элементы.ПользователиИнфБазы.ТекущийЭлемент, Истина);
//	ОткрытьПользователяПоСсылке();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	ЗаполнитьСписокПользователей();	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьТекущийНаУдаление(Команда)
	Результат = УдалитьПользователяИБНаСервере(Элементы.ПользователиИнфБазы.ТекущиеДанные.Ссылка,
			Новый УникальныйИдентификатор(Элементы.ПользователиИнфБазы.ТекущиеДанные.ИдентификаторПользователяИБ));
	Если Результат Тогда
		ОбновитьСписок(Неопределено);		
	КонецЕсли;			
	//Отказ = Ложь;
	//Если НЕ Результат Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.СообщениеОбОшибке, , , , Отказ);
	//КонецЕсли;			
	//ПередУдалениемЭлемента();
КонецПроцедуры

&НаСервере
Функция УдалитьПользователяИБНаСервере(Знач ОбъектСсылка, Знач Идентификатор)	
	//Если СпециальныйРежимРедактирования Тогда
	//	УстановитьПривилегированныйРежим(Истина);
	//КонецЕсли;
	                     
	Результат = Пользователи.УдалитьПользователяИБ(Идентификатор);
	Если Результат И Не ОбъектСсылка.Пустая() Тогда
		ОбъектПользователи = Справочники.Пользователи.НайтиПоКоду(ОбъектСсылка.Код).ПолучитьОбъект();
		ОбъектПользователи.ИдентификаторПользователяИБ = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		ОбъектПользователи.Записать();	
	КонецЕсли;
			
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура СоздатьНовый(Команда)
	СоздатьНовогоПользователя();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйКопированием(Команда)
	ТекущиеДанные = Элементы.ПользователиИнфБазы.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Если ТекущиеДанные.КодПроблемы = 0 Тогда //2
	//	Предупреждение(НСтр("ru = 'Операция не поддерживается!'"));
	//Иначе
		ОткрытьФорму("Справочник.Пользователи.Форма.ФормаРедактированиеПользователяИБ",
				Новый Структура("Объект, ИДПользователяИБ, СоздатьКопированием", 
					Неопределено, ТекущиеДанные.ИдентификаторПользователяИБ, Истина), ЭтаФорма);
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПользователиИнфБазыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элементы.ПользователиИнфБазы.ТекущиеДанные.Ссылка.Пустая() Тогда
		ПередаваемыйОбъект = Неопределено;
	Иначе
		ПередаваемыйОбъект = Элементы.ПользователиИнфБазы.ТекущиеДанные.Ссылка;
	КонецЕсли; 
	   
	ОткрытьФорму("Справочник.Пользователи.Форма.ФормаРедактированиеПользователяИБ",
			Новый Структура("Объект, ИДПользователяИБ, СоздатьКопированием", 
				ПередаваемыйОбъект, 
				Элементы.ПользователиИнфБазы.ТекущиеДанные.ИдентификаторПользователяИБ, Ложь), ЭтаФорма);	
	//ОткрытьПользователяПоСсылке();	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиИнфБазыПередУдалением(Элемент, Отказ)
	Если Элементы.ПользователиИнфБазы.ТекущиеДанные.КодПроблемы = 0 Тогда
		Если Вопрос(НСтр("ru = 'Удалить пользователя информационной базы?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			УдалитьПользователяИБ(Элементы.ПользователиИнфБазы.ТекущиеДанные.ИдентификаторПользователяИБ, Отказ);
		Иначе
			Отказ = Истина;
		КонецЕсли;
	Иначе
		Отказ = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ПолучитьНомерКартинкиПоСостоянию(Знач КодПроблемы, Знач ПометкаУдаления, Знач ЭтоВнешнийПользователь)
	НомерКартинки = -1;
	
	Если КодПроблемы = 1 ИЛИ КодПроблемы = 0 Тогда
		НомерКартинки = 5;
	КонецЕсли;
		
	Если ПометкаУдаления Тогда
		Если КодПроблемы = 2 ИЛИ КодПроблемы = 3 ИЛИ КодПроблемы = 4 Тогда
			НомерКартинки = 0;
		КонецЕсли;
	Иначе
		Если КодПроблемы = 4 Тогда
			НомерКартинки = 1;
		ИначеЕсли КодПроблемы = 2 ИЛИ КодПроблемы = 3 Тогда
			НомерКартинки = 4;
		КонецЕсли;
	КонецЕсли;
	
	Если НомерКартинки >= 0 И ЭтоВнешнийПользователь Тогда
		НомерКартинки = НомерКартинки + 6;
	КонецЕсли;
	
	Возврат НомерКартинки;	
КонецФункции

&НаСервере
Процедура УдалитьПользователяИБ(ИдентификаторПользователяИБ, Отказ)
	ОписаниеОшибки = "";
	Если НЕ Пользователи.УдалитьПользователяИБ(ИдентификаторПользователяИБ, ОписаниеОшибки) Тогда
		УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки, , , , Отказ);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПользователяПоСсылке()
	ТекущиеДанные = Элементы.ПользователиИнфБазы.ТекущиеДанные;	
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.КодПроблемы = 0 Тогда Результат = Неопределено;
 		//Чуров
		ПоказатьВопрос(Новый ОписаниеОповещения("ОткрытьПользователяПоСсылкеЗавершение", ЭтаФорма, Новый Структура("ТекущиеДанные", ТекущиеДанные)), НСтр("ru = 'Данному пользователю информационной базы не сопоставлен элемент справочника.
				|Открыть форму редактирования нового пользователя, связанного с данным пользователем информационной базы?'"),
					РежимДиалогаВопрос.ДаНет);
		//Результат = Вопрос(НСтр("ru = 'Данному пользователю информационной базы не сопоставлен элемент справочника.
		//		|Открыть форму редактирования нового пользователя, связанного с данным пользователем информационной базы?'"),
		//			РежимДиалогаВопрос.ДаНет);
		//			
		//Если Результат = КодВозвратаДиалога.Да Тогда
		//	ОткрытьФорму("Справочник.Пользователи.Форма.ФормаРедактированиеПользователяИБ",
		//			Новый Структура("Объект, ИДПользователяИБ, СоздатьКопированием", 
		//				Неопределено, ТекущиеДанные.ИдентификаторПользователяИБ, Ложь), ЭтаФорма);
		//КонецЕсли;
	Иначе	
		ОткрытьФорму("Справочник.Пользователи.Форма.ФормаРедактированиеПользователяИБ",
				Новый Структура("Объект, ИДПользователяИБ, СоздатьКопированием", 
					ТекущиеДанные.Ссылка, ТекущиеДанные.ИдентификаторПользователяИБ, Ложь), ЭтаФорма); 
	КонецЕсли;	
КонецПроцедуры

//Чуров++
&НаКлиенте
Процедура ОткрытьПользователяПоСсылкеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	
	//2	
	Результат = РезультатВопроса;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОткрытьФорму("Справочник.Пользователи.Форма.ФормаРедактированиеПользователяИБ",
		Новый Структура("Объект, ИДПользователяИБ, СоздатьКопированием", 
		Неопределено, ТекущиеДанные.ИдентификаторПользователяИБ, Ложь), ЭтаФорма);
	КонецЕсли;

КонецПроцедуры
//Чуров--

&НаКлиенте
Процедура ПередУдалениемЭлемента()
	ТекущиеДанные = Элементы.ПользователиИнфБазы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	//ЧУров
	//Если ТекущиеДанные.КодПроблемы = 2 Тогда
	//	Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//						НСтр("ru = 'Внимание, будет удален пользователь информационной базы. Продолжить?'"), ТекущиеДанные.ПолноеИмя);
	//	Если Вопрос(Сообщение, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
	//		УдалитьПользователяИБИОбновитьСписок(ТекущиеДанные.ИдентификаторПользователяИБ)
	//	КонецЕсли;
	//Иначе
	//	Если ТекущиеДанные.ПометкаУдаления Тогда
	//		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//							НСтр("ru = 'Снять с ""%1"" пометку на удаление?'"), ТекущиеДанные.ПолноеИмя);
	//		Если Вопрос(Сообщение, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
	//			УстановитьПометкуНаУдаление(ТекущиеДанные.Ссылка, Ложь);
	//			ТекущиеДанные.ПометкаУдаления = Ложь;
	//			ТекущиеДанные.Картинка = ПолучитьНомерКартинкиПоСостоянию(ТекущиеДанные.КодПроблемы, ТекущиеДанные.ПометкаУдаления, Ложь);
	//		КонецЕсли;
	//	Иначе
	//		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//							НСтр("ru = 'Пометить элемент ""%1"" на удаление?'"), ТекущиеДанные.ПолноеИмя);
	//		Если Вопрос(Сообщение, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
	//			УстановитьПометкуНаУдаление(ТекущиеДанные.Ссылка, Истина);
	//			ТекущиеДанные.ПометкаУдаления = Истина;
	//			ТекущиеДанные.Картинка = ПолучитьНомерКартинкиПоСостоянию(ТекущиеДанные.КодПроблемы, ТекущиеДанные.ПометкаУдаления, Ложь);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура УдалитьПользователяИБИОбновитьСписок(ИдентификаторПользователяИБ)
	Пользователи.УдалитьПользователяИБ(ИдентификаторПользователяИБ);
	ЗаполнитьСписокПользователей();	
КонецПроцедуры // УдалитьПользователяИБИОбновитьСписок()

&НаСервереБезКонтекста
Процедура УстановитьПометкуНаУдаление(знач Ссылка, знач Пометка)
	ОбъектПользователь = Ссылка.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(ОбъектПользователь.Ссылка);
	ОбъектПользователь.ПометкаУдаления = Пометка;
	ОбъектПользователь.Записать();	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовогоПользователя()
	ТекущиеДанные = Элементы.ПользователиИнфБазы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.КодПроблемы = 2 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Операция не поддерживается!'"));
		//Предупреждение(НСтр("ru = 'Операция не поддерживается!'"));
	Иначе
		ОткрытьФорму("Справочник.Пользователи.Форма.ФормаРедактированиеПользователяИБ",
				Новый Структура("Объект, ИДПользователяИБ, СоздатьКопированием", 
					Неопределено, Неопределено, Ложь), ЭтаФорма);
	КонецЕсли;	
КонецПроцедуры


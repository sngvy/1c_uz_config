////////////////////////////////////////////////////////////////////////////////
// Клиентские процедуры общего назначения

// Процедура УстановитьПроизвольныйЗаголовокПриложения выполняет установку стандартного
// заголовка приложения, используя имя представление текущего пользователя и
// и строку в константе ЗаголовокПриложения (если задана) или
// текущий заголовок приложения ПолучитьЗаголовокПриложения() (если константа не установлена).
//
// Параметры:
//  ПредставлениеЗаголовка - Строка, необязательный параметр, позволяющий сформировать заголовок
//                 приложения из представления, заданного пользователем, вместо представления,
//                 заданного в константе (или полученного вызовом функции ПолучитьЗаголовокПриложения()).
//
Процедура УстановитьПроизвольныйЗаголовокПриложения() Экспорт
	
	//ПредставлениеЗаголовка = СтандартныеПодсистемыПереопределяемый.ПараметрыРаботыКлиента().ЗаголовокПриложения;
	//
	//ПредставлениеПользователя = СтандартныеПодсистемыПереопределяемый.ПараметрыРаботыКлиента().АвторизованныйПользователь;
	//
	//ШаблонЗаголовка = "%ОсновнойЗаголовок / %Пользователь /";
	//
	//Если ПустаяСтрока(СокрЛП(ПредставлениеЗаголовка)) Тогда
	//	ЗаголовокПриложения = СтрЗаменить(ШаблонЗаголовка, "%ОсновнойЗаголовок", СтандартныеПодсистемыПереопределяемый.ПараметрыРаботыКлиента().ПодробнаяИнформация);
	//Иначе
	//	ЗаголовокПриложения = СтрЗаменить(ШаблонЗаголовка, "%ОсновнойЗаголовок", СокрЛП(ПредставлениеЗаголовка));
	//КонецЕсли;
	//
	//ЗаголовокПриложения = СтрЗаменить(ЗаголовокПриложения, "%Пользователь", ПредставлениеПользователя);
	//
	//УстановитьЗаголовокПриложения(ЗаголовокПриложения);
	
КонецПроцедуры // УстановитьПроизвольныйЗаголовокПриложения()

// Процедура ПреобразоватьЗимнееВремяКТекущему изменяет переданное
// значение временти в местное время из зимнего к текущему с учетом NTFS коррекции.
//
// Параметры:
//  ДатаВремя    - Дата, преобразуемое время.
//
// Возвращаемое значение:
//  Дата - преобразованное время.
//
Процедура ПреобразоватьЗимнееВремяКТекущему(ДатаВремя) Экспорт
	
	ДатаВремя = МестноеВремя(ДатаВремя);
	
КонецПроцедуры // ПреобразоватьЗимнееВремяКТекущему()

// Предлагает пользователю установить расширение работы с файлами в веб-клиенте.
// При этом инициализирует параметр сеанса ПредлагатьУстановкуРасширенияРаботыСФайлами.
//
// Процедура предназначена для использования в начале участков кода, в которых ведется работа с файлами.
// Например:
//
//    ПредложитьУстановкуРасширенияРаботыСФайлами("Для печати документа необходимо установить расширение работы с файлами");
//    // далее располагается код печати документа
//    //...
//
// Параметры
//  Сообщение  - Строка - текст сообщения. Если не указан, то выводится текст по умолчанию.
//   
Процедура ПредложитьУстановкуРасширенияРаботыСФайлами(Сообщение = Неопределено) Экспорт
	
#Если Не ВебКлиент Тогда
	Возврат;  // только в веб клиенте этот код работает		
#КонецЕсли

	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	//ПодключитьРасширениеРаботыСФайламиАсинх()
	Если РасширениеПодключено Тогда
		Возврат; // если расширение и так уже есть, незачем про него спрашивать
	КонецЕсли;	

	ПредлагатьУстановку = УдалитьОбщегоНазначения.ПараметрыСеансаПредлагатьУстановкуРасширенияРаботыСФайлами();
	
	Если ПредлагатьУстановку = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	// тут надо показать диалог
	ПараметрыФормы = Новый Структура("Сообщение", Сообщение);
	//Чуров
	КодВозврата = ОткрытьФорму("ОбщаяФорма.ВопросОбУстановкеРасширенияРаботыСФайлами", ПараметрыФормы);
	//КодВозврата = ОткрытьФормуМодально("ОбщаяФорма.ВопросОбУстановкеРасширенияРаботыСФайлами", ПараметрыФормы);
	Если КодВозврата = Неопределено Тогда
		КодВозврата = Истина;
	КонецЕсли;
	
	ПредлагатьУстановку = КодВозврата;
	УдалитьОбщегоНазначения.СохранитьПредлагатьУстановкуРасширенияРаботыСФайлами(ПредлагатьУстановку);
	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры // ПредложитьУстановкуРасширенияРаботыСФайлами

// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
//	Параметры
//	ТекстСообщенияПользователю	- Строка - текст сообщения.
//	ОбъектИлиСсылка				- Ссылка на объект ИБ или объект
//	Поле						- Строка - наименование реквизита формы
//	ПутьКДанным					- Строка - путь к данным (путь к реквизиту формы)
//	Отказ						- Булево - Выходной параметр. 
//                                Устанавливается в этой процедуре в значение Истина.
//
//	Примеры использования:
//	1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ПолеВРеквизитеФормыОбъект",
//		"Объект");
//
//	Альтернативный вариант использования в форме объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"Объект.ПолеВРеквизитеФормыОбъект");
//
//	2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ИмяРеквизитаФормы");
//
//	3. Для вывода сообщения из кода на сервере:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"),СсылкаНаОбъект,,,Отказ);
//
Процедура СообщитьПользователю(	Знач ТекстСообщенияПользователю,
								Знач ОбъектИлиСсылка = Неопределено,
								Знач Поле = "",
								Знач ПутьКДанным = "",
								Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	Сообщение.ПутьКДанным = ПутьКДанным;
	
	Если ОбъектИлиСсылка <> Неопределено Тогда
		Сообщение.УстановитьДанные(ОбъектИлиСсылка);
#Если Сервер Тогда		
		Если ОбъектИлиСсылка.Ссылка = ОбъектИлиСсылка Тогда
			Сообщение.КлючДанных = ОбъектИлиСсылка;
		КонецЕсли;	
#КонецЕсли
	КонецЕсли;
	
	Сообщение.Сообщить();
	Отказ = Истина;
	
КонецПроцедуры

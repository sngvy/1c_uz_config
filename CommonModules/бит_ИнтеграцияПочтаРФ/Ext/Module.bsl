
Функция ПолучитьАдресДолжника(Должник) Экспорт
	ДопСведениеАдреса = Константы.УдалитьАдресПочтыРФ.Получить();
	КодСвойства = ДопСведениеАдреса.Код;
	АдресДолжникаФИАС  = ОбъектыСервер.ПолучитьЗначениеСвойства(Должник,КодСвойства);
	Если не ЗначениеЗаполнено(АдресДолжникаФИАС) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	Если ДопСведениеАдреса.ВидСтроки = Перечисления.ВидыТипаСтрока.АдресФИАС Тогда
		СтруктураJSON = ПолучитьСтруктуруАдреса(АдресДолжникаФИАС);
		Адрес = Строка(СтруктураJSON.value);
	КонецЕсли;
	Если ДопСведениеАдреса.ВидСтроки = Перечисления.ВидыТипаСтрока.Строка Тогда
		Адрес = АдресДолжникаФИАС;
	КонецЕсли;
	Возврат Адрес;
КонецФункции

Функция ПолучитьСтруктуруАдреса(АдресДолжникаФИАС) Экспорт
	СтруктураJSON = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтруктуруJSON(АдресДолжникаФИАС);
	Возврат СтруктураJSON;
КонецФункции	

Функция ПолучитьТокенИлиКлюч(ТокенИлиКлюч) Экспорт
	//Токен = "MsnESKxE5mC8p6c8DBB1HlSS0Xcp_dTC";
	//КлючАвторизации = "dm5ib2V2a2luQDFjYml0LnJ1OnFhenFhejE=";

	Пользователь = ПараметрыСеанса.ТекущийПользователь;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	УчетныеЗаписиПочтыРФДляПользователя.ПрофильПочтаРФ.Токен КАК ПрофильПочтаРФТокен,
	                      |	УчетныеЗаписиПочтыРФДляПользователя.ПрофильПочтаРФ.КлючАвторизации КАК ПрофильПочтаРФКлючАвторизации
	                      |ИЗ
	                      |	РегистрСведений.УчетныеЗаписиПочтыРФДляПользователя КАК УчетныеЗаписиПочтыРФДляПользователя
	                      |ГДЕ
	                      |	УчетныеЗаписиПочтыРФДляПользователя.Пользователь = &Пользователь");
	Запрос.УстановитьПараметр("Пользователь",Пользователь);
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Токен = Результат.ПрофильПочтаРФТокен;
		КлючАвторизации = Результат.ПрофильПочтаРФКлючАвторизации;
	КонецЦикла;	
	
	
	Если ТокенИлиКлюч = "токен" Тогда
		Значение = Токен;
	ИначеЕсли ТокенИлиКлюч = "ключ" Тогда
		Значение = КлючАвторизации;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат "";
	Иначе	
		Возврат Значение;
	Конецесли;
КонецФункции

Функция ПолучитьТипОбъектаКорреспонденции(ОбИсходящей) Экспорт
	ТипСтрока = "";
	Если ТипЗнч(ОбИсходящей) = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда
		ТипСтрока = "ДО";
	ИначеЕсли ТипЗнч(ОбИсходящей) = Тип("СправочникСсылка.Контрагенты") Тогда
		ТипСтрока = "КА";
	ИначеЕсли ТипЗнч(ОбИсходящей) = Тип("СправочникСсылка.Пользователи") Тогда
		ТипСтрока = "Пользователь";
	КонецЕсли;		
	Возврат ТипСтрока;
КонецФункции

Функция ПолучитьЛитеруИзДома(номердома) Экспорт
	Если ЗначениеЗаполнено(номердома) Тогда
		Буква = Прав(Строка(номердома),1);
		СтрокаСравнения = "абвгдеёжзийклмнопрстуфхцчшщъыьэюяАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ";
		Если стрнайти(СтрокаСравнения,Буква,,,) <> 0 тогда
			Возврат Буква;
		КонецЕсли;
	Иначе возврат "";
	КонецЕсли;
КонецФункции

Функция ПолучитьНомерДома(номердома)Экспорт
	Если ЗначениеЗаполнено(номердома) Тогда
		Буква = ПолучитьЛитеруИзДома(номердома);
		Если ЗначениеЗаполнено(Буква) Тогда
			ПозицияБуквы = СтрНайти(НомерДома,Буква,,,); 
			Если ПозицияБуквы <>0 Тогда
				НомерДомаБезБуквы = Лев(НомерДома,позицияБуквы-1);
				Возврат НомерДомаБезБуквы;
			Иначе
				Возврат номердома;
			КонецЕсли;
		Иначе 
			возврат номердома;
		КонецЕсли;	
	Иначе 
		возврат "";
	КонецЕсли;
КонецФункции

Функция НайтиГородИзАдреса(СтруктураJSON)Экспорт
	region = СтруктураJSON.area;
	city = СтруктураJSON.City;
	district = СтруктураJSON.district;
	settlement = СтруктураJSON.settlement;
	locality  = СтруктураJSON.locality;
	territory = СтруктураJSON.territory;
	
	Если ЗначениеЗаполнено(city) Тогда
		Возврат city;
	ИначеЕсли ЗначениеЗаполнено(region) И Не ЗначениеЗаполнено(city) и Не (ЗначениеЗаполнено(district) и ЗначениеЗаполнено(settlement))И Не ЗначениеЗаполнено(locality) И не ЗначениеЗаполнено(territory) Тогда
		Возврат region;
	ИначеЕсли ЗначениеЗаполнено(district) и ЗначениеЗаполнено(settlement) тогда
		Возврат settlement;
	КонецЕсли;	
КонецФункции

Функция ПолучитьЧастьПослеДроби(номердома)Экспорт
	Если ЗначениеЗаполнено(номердома) Тогда
		ПозицияДроби = СтрНайти(номердома,"/",,,);
		Если ПозицияДроби <> 0 Тогда 
			ДоДроби =Лев(номердома,ПозицияДроби-1);
			ПослеДроби = Сред(Строка(номердома),ПозицияДроби+1,СтрДлина(Строка(номердома)));
			номердома = ДоДроби;
			возврат ПослеДроби;
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ПолучитьАдресНастройкиТиповКорреспонденции(ИсхКорр, ЭтоСтруктура) Экспорт
	Адрес = "";
	
	сАдрес = Новый структура();
	
	Отбор = Новый структура();
	Отбор.Вставить("ТипИсходящегоПисьма", ИсхКорр.ТипПисьма);
	
	АдресатТип = РегистрыСведений.АдресатыПоТипуПисем.Получить(Отбор).Адресат;
	Реквизит = РегистрыСведений.АдресатыПоТипуПисем.Получить(Отбор).АдресИсходящий;
	НазначениеРеквизита = Реквизит.СправочникВладелец.ИмяПредопределенныхДанных;
	ОбъектПисьма = ИсхКорр.Объект;
	ТипОбъекта = ПолучитьТипОбъектаКорреспонденции(ОбъектПисьма);
	
	Если ТипОбъекта = "ДО" Тогда
		Если НазначениеРеквизита = "Справочник_Контрагенты" Тогда
			ОбъектПисьма = ИсхКорр.Объект.Должник;
		КонецЕсли;
	КонецЕсли;
	
	АдресЗначение = ОбъектыСервер.ПолучитьЗначениеСвойства(ОбъектПисьма, Реквизит.Код);

	
	Если Не ЗначениеЗаполнено(АдресЗначение) И АдресатТип <> Перечисления.АдресатыИсходящейКорреспонденции.ОтделСудебныхПриставов Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если АдресатТип = Перечисления.АдресатыИсходящейКорреспонденции.ДолговоеОбязательство Тогда
		Если Реквизит.ВидСтроки = Перечисления.ВидыТипаСтрока.АдресФИАС Тогда
			СтруктураJSON = ПолучитьСтруктуруАдреса(АдресЗначение);
			Адрес = ?(ЭтоСтруктура = Истина, СтруктураJSON, Строка(СтруктураJSON.value));
			сАдрес.Вставить("Адрес", Адрес);
			сАдрес.Вставить("ЭтоФИАС", Истина);
			сАдрес.Вставить("Адресат", ОбъектПисьма);
			Возврат сАдрес;
		КонецЕсли;
		Если Реквизит.ВидСтроки = Перечисления.ВидыТипаСтрока.Строка Тогда
			Адрес = АдресЗначение;
			сАдрес.Вставить("Адрес", Адрес);
			сАдрес.Вставить("ЭтоФИАС", Ложь);
			сАдрес.Вставить("Адресат", ОбъектПисьма);
			Возврат сАдрес;
		КонецЕсли;
		
	ИначеЕсли АдресатТип = Перечисления.АдресатыИсходящейКорреспонденции.Должник Тогда
		Если Реквизит.ВидСтроки = Перечисления.ВидыТипаСтрока.АдресФИАС Тогда
			СтруктураJSON = ПолучитьСтруктуруАдреса(АдресЗначение);
			Адрес = ?(ЭтоСтруктура = Истина, СтруктураJSON, Строка(СтруктураJSON.value));
			сАдрес.Вставить("Адрес",Адрес);
			сАдрес.Вставить("ЭтоФИАС",Истина);
			сАдрес.Вставить("Адресат",ОбъектПисьма);
			Возврат сАдрес;
		КонецЕсли;
		Если Реквизит.ВидСтроки = Перечисления.ВидыТипаСтрока.Строка Тогда
			Адрес = АдресЗначение;
			сАдрес.Вставить("Адрес", Адрес);
			сАдрес.Вставить("ЭтоФИАС", Ложь);
			сАдрес.Вставить("Адресат", ОбъектПисьма);
			Возврат сАдрес;
		КонецЕсли;
		
	ИначеЕсли АдресатТип = Перечисления.АдресатыИсходящейКорреспонденции.ОтделСудебныхПриставов Тогда
		ИспользоватьИнтеграциюФССП = Константы.ИспользоватьИнтеграциюФССП.Получить();
		Если Не ЗначениеЗаполнено(АдресЗначение) Тогда 
			Если ИспользоватьИнтеграциюФССП Тогда
				Владелец = ОбъектПисьма;
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ФССП_СостояниеИПСрезПоследних.ОтделСудебныхПриставов КАК ОтделСудебныхПриставов
				|ИЗ
				|	Справочник.ФССП_ИсполнительноеПроизводство КАК ФССП_ИсполнительноеПроизводство
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФССП_СостояниеИП.СрезПоследних(&ТекущаяДата) КАК ФССП_СостояниеИПСрезПоследних
				|		ПО (ФССП_СостояниеИПСрезПоследних.ИП = ФССП_ИсполнительноеПроизводство.Ссылка)
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсполнительныеДокументы КАК ИсполнительныеДокументы
				|		ПО ФССП_ИсполнительноеПроизводство.НомерИД = ИсполнительныеДокументы.Ссылка
				|ГДЕ
				|	ФССП_ИсполнительноеПроизводство.ПометкаУдаления = ЛОЖЬ
				|	И ИсполнительныеДокументы.Владелец = &Владелец";
				
				Запрос.УстановитьПараметр("Владелец", Владелец);
				Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Адрес = ВыборкаДетальныеЗаписи.ОтделСудебныхПриставов.ПочтовыйАдрес;
					Адресат = ВыборкаДетальныеЗаписи.ОтделСудебныхПриставов; 
				КонецЦикла;
				сАдрес.Вставить("Адрес", Адрес);
				сАдрес.Вставить("ЭтоФИАС", Ложь);
				сАдрес.Вставить("Адресат", Адресат);
				Возврат сАдрес;
				
			КонецЕсли;
		Иначе
			Если ТипЗнч(АдресЗначение) = Тип("СправочникСсылка.ФССП_СлужбыСудебныхПриставов") Тогда
				Адрес = АдресЗначение.ПочтовыйАдрес;
				сАдрес.Вставить("Адрес", Адрес);
				сАдрес.Вставить("ЭтоФИАС", Ложь);
				сАдрес.Вставить("Адресат", АдресЗначение);
				Возврат сАдрес;
			КонецЕсли;
			
			Если ТипЗнч(АдресЗначение) = Тип("СправочникСсылка.СудебныеПриставы") Тогда
				Адрес = АдресЗначение.Адрес;
				сАдрес.Вставить("Адрес", Адрес);
				сАдрес.Вставить("ЭтоФИАС", Ложь);
				сАдрес.Вставить("Адресат", АдресЗначение);
				Возврат сАдрес;
				
			КонецЕсли;

			Если Реквизит.ВидСтроки = Перечисления.ВидыТипаСтрока.АдресФИАС Тогда
				СтруктураJSON = ПолучитьСтруктуруАдреса(АдресЗначение);
				Адрес = ?(ЭтоСтруктура = Истина, СтруктураJSON, Строка(СтруктураJSON.value));
				сАдрес.Вставить("Адрес", Адрес);
				сАдрес.Вставить("ЭтоФИАС", Истина);
				сАдрес.Вставить("Адресат", ОбъектПисьма);
				Возврат сАдрес;
				
			КонецЕсли;
			
			Если Реквизит.ВидСтроки = Перечисления.ВидыТипаСтрока.Строка Тогда
				Адрес = АдресЗначение;
				сАдрес.Вставить("Адрес", Адрес);
				сАдрес.Вставить("ЭтоФИАС", Ложь);
				сАдрес.Вставить("Адресат", ОбъектПисьма);
				Возврат сАдрес;
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли АдресатТип = Перечисления.АдресатыИсходящейКорреспонденции.Пользователь Тогда
		Если Реквизит.ВидСтроки = Перечисления.ВидыТипаСтрока.АдресФИАС Тогда
			СтруктураJSON = ПолучитьСтруктуруАдреса(АдресЗначение);
			Адрес = ?(ЭтоСтруктура = Истина, СтруктураJSON, Строка(СтруктураJSON.value));
			сАдрес.Вставить("Адрес", Адрес);
			сАдрес.Вставить("ЭтоФИАС", Истина);
			сАдрес.Вставить("Адресат", ОбъектПисьма);
			Возврат сАдрес;
		КонецЕсли;
		Если Реквизит.ВидСтроки = Перечисления.ВидыТипаСтрока.Строка Тогда
			Адрес = АдресЗначение;
			сАдрес.Вставить("Адрес", Адрес);
			сАдрес.Вставить("ЭтоФИАС", Ложь);
			сАдрес.Вставить("Адресат", ОбъектПисьма);
			Возврат сАдрес;
		КонецЕсли;
		
	ИначеЕсли АдресатТип = Перечисления.АдресатыИсходящейКорреспонденции.СудебныйУчасток Тогда
		Если Реквизит.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СудебныеУчастки") Тогда
			Адрес = АдресЗначение.Адрес;
			сАдрес.Вставить("Адрес", Адрес);
			сАдрес.Вставить("ЭтоФИАС", Ложь);
			сАдрес.Вставить("Адресат", АдресЗначение);
			Возврат сАдрес;
		КонецЕсли;
		Если Реквизит.ВидСтроки = Перечисления.ВидыТипаСтрока.АдресФИАС Тогда
			СтруктураJSON = ПолучитьСтруктуруАдреса(АдресЗначение);
			Адрес = ?(ЭтоСтруктура = Истина, СтруктураJSON, Строка(СтруктураJSON.value));
			сАдрес.Вставить("Адрес", Адрес);
			сАдрес.Вставить("ЭтоФИАС", Истина);
			сАдрес.Вставить("Адресат", ОбъектПисьма);
			Возврат сАдрес;
		КонецЕсли;
		Если Реквизит.ВидСтроки = Перечисления.ВидыТипаСтрока.Строка Тогда
			Адрес = АдресЗначение;
			сАдрес.Вставить("Адрес", Адрес);
			сАдрес.Вставить("ЭтоФИАС", Ложь);
			сАдрес.Вставить("Адресат", ОбъектПисьма);
			Возврат сАдрес;
		КонецЕсли;
	ИначеЕсли АдресатТип = Перечисления.АдресатыИсходящейКорреспонденции.Иное Тогда
		Если Реквизит.ВидСтроки = Перечисления.ВидыТипаСтрока.АдресФИАС Тогда
			СтруктураJSON = ПолучитьСтруктуруАдреса(АдресЗначение);
			Адрес = ?(ЭтоСтруктура = Истина, СтруктураJSON, Строка(СтруктураJSON.value));
			сАдрес.Вставить("Адрес", Адрес);
			сАдрес.Вставить("ЭтоФИАС", Истина);
			сАдрес.Вставить("Адресат", ОбъектПисьма);
			Возврат сАдрес;
		КонецЕсли;
		Если Реквизит.ВидСтроки = Перечисления.ВидыТипаСтрока.Строка Тогда
			Адрес = АдресЗначение;
			сАдрес.Вставить("Адрес", Адрес);
			сАдрес.Вставить("ЭтоФИАС", Ложь); 
			сАдрес.Вставить("Адресат", ОбъектПисьма);
			Возврат сАдрес;
		КонецЕсли;
	КонецЕсли;
	
	Возврат сАдрес;
КонецФункции

Процедура СоздатьМассивЗаказовСГруппировкой(СписокИсходящейКорреспонденции) Экспорт
	ТЗСписокИсходящейКорреспонденции = СписокИсходящейКорреспонденции.Выгрузить();
	
	мПисьма = Новый массив;
	Для каждого Стр из СписокИсходящейКорреспонденции Цикл
		Если Стр.КорректностьАдреса = Истина Тогда
			мПисьма.Добавить(Стр.ИсходящаяКорреспонденция);
		КонецЕсли;
	КонецЦикла;
	
	Если мПисьма.Количество() = 0 Тогда 
		Сообщить("Нет ни одного отпавления с корректным адресом. Операция невозможна.");
		Возврат;
	КонецЕсли;	
	
	
	ТЗПараметрыПисем = ЗаполнитьПараметрыПисем(мПисьма);
	
	СписокИсхКорр = ОбъектыСервер.ОбъединитьТЗЗапросом(ТЗСписокИсходящейКорреспонденции,ТЗПараметрыПисем,"ИсходящаяКорреспонденция",);
	
	СписокИсхКоррБезГруппировки  = СписокИсхКорр.Скопировать();
	
	СписокИсхКорр.Свернуть("Адресат, ТипПисьма, КатегорияРПОПарам, ВидРПОПарам, ТипКонверта","ВесРПО,ОЦ");
	
	Для Каждого Стр Из СписокИсхКорр Цикл
		Если Не ЗначениеЗаполнено(Стр.Адресат) Тогда
			Продолжить;
		КонецЕсли;	
		ОтборКорр = Новый Структура();
		ОтборКорр.Вставить("Адресат",Стр.Адресат);
		ОтборКорр.Вставить("ТипПисьма",Стр.ТипПисьма);
		ОтборКорр.Вставить("КатегорияРПОПарам",Стр.КатегорияРПОПарам);
		ОтборКорр.Вставить("ВидРПОПарам",Стр.ВидРПОПарам);
		ОтборКорр.Вставить("ТипКонверта",Стр.ТипКонверта);
		МассивСтрок = СписокИсхКоррБезГруппировки.НайтиСтроки(ОтборКорр);
		Если МассивСтрок.Количество() <= 1 Тогда 
			Продолжить;
		КонецЕсли;
			
		ГруппаИсхКоррОб = Справочники.ГруппаИсходящейКорреспонденции.СоздатьЭлемент();
		ГруппаИсхКоррОб.Наименование ="Группа отправлений: "+ строка(Стр.ТипПисьма) +  " " + Строка(Стр.Адресат);
		//ГруппаИсхКоррОб.Дата = ТекущаяДата();
		
		ГруппаИсхКоррОб.Автор = ПараметрыСеанса.ТекущийПользователь;
		ГруппаИсхКоррОб.Организация = ПараметрыСеанса.ТекущийПользователь.Организация;
		ГруппаИсхКоррОб.Комментарий = "Автоматическое создание Группы Исходящей корреспонденции.";
		
		ГруппаИсхКоррОб.ТипПисьма = Стр.ТипПисьма;
		ГруппаИсхКоррОб.Адресат = Стр.Адресат;
		ГруппаИсхКоррОб.КатегорияРПО = Стр.КатегорияРПОПарам;
		ГруппаИсхКоррОб.ВидРПО = Стр.ВидРПОПарам;
		ГруппаИсхКоррОб.ТипКонверта = Стр.ТипКонверта;
		ГруппаИсхКоррОб.ВесРПО = Стр.ВесРПО;
		ГруппаИсхКоррОб.ОЦ = Стр.ОЦ;
		
		ПроверкаВесаГрупповогоРПО(ГруппаИсхКоррОб);
		
		Для каждого Строка из МассивСтрок Цикл
			ЗаполнитьЗначенияСвойств(ГруппаИсхКоррОб.СписокИсходящейКорреспонденции.Добавить(), Строка);
			Индекс = ?(Строка.НомерСтроки = 0,0,Строка.НомерСтроки - 1);						
			СтрокаНаУдаление = ТЗСписокИсходящейКорреспонденции.Найти(Строка.ИсходящаяКорреспонденция,"ИсходящаяКорреспонденция"); 
			ТЗСписокИсходящейКорреспонденции.Удалить(СтрокаНаУдаление);
		КонецЦикла;	
		
		ПроследнийЭлементМассива = МассивСтрок[МассивСтрок.Количество() - 1];
		
		ГруппаИсхКоррОб.Записать();
		НстрокаГруппа = ТЗСписокИсходящейКорреспонденции.Добавить();
		НстрокаГруппа.ИсходящаяКорреспонденция =  ГруппаИсхКоррОб.Ссылка;
		НстрокаГруппа.КорректностьАдреса = ПроследнийЭлементМассива.КорректностьАдреса;
		НстрокаГруппа.Адресат = ПроследнийЭлементМассива.Адресат;
		НстрокаГруппа.СтруктураАдреса = ПроследнийЭлементМассива.СтруктураАдреса;
		НстрокаГруппа.ФИАС = НстрокаГруппа.ФИАС; 
		
	КонецЦикла;	
	
	СписокИсходящейКорреспонденции.Очистить();
	СписокИсходящейКорреспонденции.Загрузить(ТЗСписокИсходящейКорреспонденции);
	
КонецПроцедуры

Функция ЗаполнитьПараметрыПисем(массивКорр)
  Запрос = Новый запрос;
  Запрос.Текст = "ВЫБРАТЬ
                 |	ИсходящаяКорреспонденция.Ссылка КАК ИсходящаяКорреспонденция,
                 |	ИсходящаяКорреспонденция.ВидРПО КАК ВидРПОПарам,
                 |	ИсходящаяКорреспонденция.КатегорияРПО КАК КатегорияРПОПарам,
                 |	ИсходящаяКорреспонденция.ТипКонверта КАК ТипКонверта,
                 |	ИсходящаяКорреспонденция.ОЦ КАК ОЦ,
                 |	ИсходящаяКорреспонденция.ВесРПО КАК ВесРПО,
                 |	ИсходящаяКорреспонденция.ТипПисьма КАК ТипПисьма
                 |ИЗ
                 |	Справочник.ИсходящаяКорреспонденция КАК ИсходящаяКорреспонденция
                 |ГДЕ
                 |	ИсходящаяКорреспонденция.Ссылка В(&МассивСсылок)";
  Запрос.УстановитьПараметр("МассивСсылок",массивКорр);
  РезультатТЗ = Запрос.Выполнить().Выгрузить();
  Возврат РезультатТЗ;   
КонецФункции

Функция ВернутьЗначениеСтруктуры(Структура,Ключ) Экспорт	
	ЗначениеПоиска = Неопределено;
	Структура.Свойство(Ключ,ЗначениеПоиска);
	Возврат ЗначениеПоиска;
КонецФункции

Функция СоздатьСтруктуру(Адресат, ОбъектИсхКорр) Экспорт
	ТипОбъектаКорреспонденции = бит_ИнтеграцияПочтаРФ.ПолучитьТипОбъектаКорреспонденции(ОбъектИсхКорр.Объект);
	//Адресат = ПолучитьДолжникаИзКорреспонденции(ОбъектИсхКорр,ТипОбъектаКорреспонденции);	
	ФИО = Строка(Адресат);
	Фамилия = Лев(ФИО, СтрНайти(ФИО, " ") - 1);
	Имя = Сред(ФИО, СтрНайти(ФИО, " ") + 1, СтрНайти(ФИО, " ", ,,2) -СтрНайти(ФИО, " ") );
	Имя = СтрЗаменить(Имя," ","");
	Отчество = СтрЗаменить(Сред(ФИО, СтрНайти(ФИО, " ", ,,2), стрДлина(ФИО) -СтрНайти(ФИО, " ", ,,2) + 1)," ","");
	
	//АдресСвойство = Константы.АдресПочтыРФ.Получить();
	сАдресДолжника  = бит_ИнтеграцияПочтаРФ.ПолучитьАдресНастройкиТиповКорреспонденции(ОбъектИсхКорр,Истина);
	АдресДолжникаФИАС = сАдресДолжника.Адрес;
	//СтруктураJSON = бит_ИнтеграцияПочтаРФ.ПолучитьСтруктуруАдреса(АдресДолжникаФИАС);
	СтруктураJSON = АдресДолжникаФИАС;
	Страна = СтруктураJSON.CountryCode;
	Район =  СтруктураJSON.district;
	Строение = "";
	Корпус = "";
	Попытка
		Если СтруктураJSON.buildings[0].type = "Строение" тогда  
			Строение = СтруктураJSON.buildings[0].number;
		КонецЕсли;
	Исключение
	КонецПопытки;
	Попытка
		Если СтруктураJSON.buildings[0].type = "Корпус" тогда  
			Корпус = СтруктураJSON.buildings[0].number;
		КонецЕсли;
	исключение
	Конецпопытки;
	Дом = бит_ИнтеграцияПочтаРФ.ПолучитьНомерДома(СтруктураJSON.houseNumber);
	Индекс = СтруктураJSON.ZIPCode;
	Буква = бит_ИнтеграцияПочтаРФ.ПолучитьЛитеруИзДома(СтруктураJSON.houseNumber);
	попытка
		Литера = ?(СтруктураJSON.buildings[0].type = "Литера",СтруктураJSON.buildings[0].number,Буква);
	Исключение
		Литера = Буква;
	Конецпопытки;
	Город = бит_ИнтеграцияПочтаРФ.НайтиГородИзАдреса(СтруктураJSON);
	Попытка
		Квартира = СтруктураJSON.apartments[0].number;
	Исключение
	Конецпопытки;
	Дробь = бит_ИнтеграцияПочтаРФ.ПолучитьЧастьПослеДроби(Дом);
	Регион =  СтруктураJSON.area;
	Улица = СтруктураJSON.street;
	Отель = "";
	Микрорайон = "";
	
	СтруктураДанныхАдресата = Новый Структура;
	СтруктураДанныхАдресата.Вставить("ФИО",ФИО);
	СтруктураДанныхАдресата.Вставить("Фамилия",Фамилия);
	СтруктураДанныхАдресата.Вставить("имя",Имя);
	СтруктураДанныхАдресата.Вставить("Отчество",Отчество);
	СтруктураДанныхАдресата.Вставить("Район",Район);
	СтруктураДанныхАдресата.Вставить("Строение",Строение);
	СтруктураДанныхАдресата.Вставить("Корпус",Корпус);
	СтруктураДанныхАдресата.Вставить("Дом",Дом);
	СтруктураДанныхАдресата.Вставить("Индекс",Индекс);
	СтруктураДанныхАдресата.Вставить("Литера",Литера);
	СтруктураДанныхАдресата.Вставить("Город",Город);
	СтруктураДанныхАдресата.Вставить("Квартира",Квартира);
	СтруктураДанныхАдресата.Вставить("Дробь",Дробь);
	СтруктураДанныхАдресата.Вставить("Регион",Регион);
	СтруктураДанныхАдресата.Вставить("Улица",Улица);
	СтруктураДанныхАдресата.Вставить("Отель",Отель);
	СтруктураДанныхАдресата.Вставить("Микрорайон",Микрорайон);
	СтруктураДанныхАдресата.Вставить("Страна",Страна);
	
	Возврат СтруктураДанныхАдресата;
КонецФункции

Функция СоздатьСтруктуруИзСтроки(Адресат, СтруктураАдресаСтрока) Экспорт
	ФИО = Строка(Адресат);
	Фамилия = Лев(ФИО, СтрНайти(ФИО, " ") - 1);
	Имя = Сред(ФИО, СтрНайти(ФИО, " ") + 1, СтрНайти(ФИО, " ", ,,2) -СтрНайти(ФИО, " ") );
	Имя = СтрЗаменить(Имя," ","");
	Отчество = СтрЗаменить(Сред(ФИО, СтрНайти(ФИО, " ", ,,2), стрДлина(ФИО) -СтрНайти(ФИО, " ", ,,2) + 1)," ","");
	Страна = 643;
	
	Район="";
	Строение = "";
	Корпус = "";
	Дом="";
	Индекс = "";
	Буква = "";
	Город = "";
	Квартира = "";
	Дробь = "";
	Регион = "";
	Улица = "";
	Отель= "";
	Микрорайон = "";
	
	
	Для ИндексСтроки = 1 По СтрЧислоСтрок(СтруктураАдресаСтрока) Цикл
		Подстрока = СтрПолучитьСтроку(СтруктураАдресаСтрока, ИндексСтроки);
		Если СтрНайти(Подстрока,"guid",,,) <> 0 Тогда
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Подстрока,"area",,,) <> 0 Тогда
			Позиция = СтрНайти(Подстрока," ",НаправлениеПоиска.СКонца,,);
			Район = Прав(Подстрока,СтрДлина(Подстрока)-Позиция);		
		КонецЕсли;
		Если СтрНайти(Подстрока,"building",,,) <> 0 Тогда
			Позиция = СтрНайти(Подстрока," ",НаправлениеПоиска.СКонца,,);
			Строение = Прав(Подстрока,СтрДлина(Подстрока)-Позиция);		
		КонецЕсли;
		Если СтрНайти(Подстрока,"corpus",,,) <> 0 Тогда
			Позиция = СтрНайти(Подстрока," ",НаправлениеПоиска.СКонца,,);
			Корпус = Прав(Подстрока,СтрДлина(Подстрока)-Позиция);		
		КонецЕсли;
		Если СтрНайти(Подстрока,"house",,,) <> 0 Тогда
			Позиция = СтрНайти(Подстрока," ",НаправлениеПоиска.СКонца,,);
			Дом = Прав(Подстрока,СтрДлина(Подстрока)-Позиция);		
		КонецЕсли;
		Если СтрНайти(Подстрока,"index",,,) <> 0 Тогда
			Позиция = СтрНайти(Подстрока," ",НаправлениеПоиска.СКонца,,);
			Индекс = Прав(Подстрока,СтрДлина(Подстрока)-Позиция);		
		КонецЕсли;
		Если СтрНайти(Подстрока,"letter",,,) <> 0 Тогда
			Позиция = СтрНайти(Подстрока," ",НаправлениеПоиска.СКонца,,);
			Буква = Прав(Подстрока,СтрДлина(Подстрока)-Позиция);		
		КонецЕсли;
		Если СтрНайти(Подстрока,"place",,,) <> 0 Тогда
			Позиция = СтрНайти(Подстрока," ",НаправлениеПоиска.СКонца,,);
			Город = Прав(Подстрока,СтрДлина(Подстрока)-Позиция);		
		КонецЕсли;
		Если СтрНайти(Подстрока,"room",,,) <> 0 Тогда
			Позиция = СтрНайти(Подстрока," ",НаправлениеПоиска.СКонца,,);
			Квартира = Прав(Подстрока,СтрДлина(Подстрока)-Позиция);		
		КонецЕсли;
		Если СтрНайти(Подстрока,"slash",,,) <> 0 Тогда
			Позиция = СтрНайти(Подстрока," ",НаправлениеПоиска.СКонца,,);
			Дробь = Прав(Подстрока,СтрДлина(Подстрока)-Позиция);		
		КонецЕсли;
		Если СтрНайти(Подстрока,"region",,,) <> 0 Тогда
			Позиция = СтрНайти(Подстрока," ",НаправлениеПоиска.СКонца,,);
			Регион = Прав(Подстрока,СтрДлина(Подстрока)-Позиция);		
		КонецЕсли;
			Если СтрНайти(Подстрока,"street",,,) <> 0 Тогда
			Позиция = СтрНайти(Подстрока," ",НаправлениеПоиска.СКонца,,);
			Улица = Прав(Подстрока,СтрДлина(Подстрока)-Позиция);		
		КонецЕсли;
		Если СтрНайти(Подстрока,"hotel",,,) <> 0 Тогда
			Позиция = СтрНайти(Подстрока," ",НаправлениеПоиска.СКонца,,);
			Отель = Прав(Подстрока,СтрДлина(Подстрока)-Позиция);		
		КонецЕсли;
		Если СтрНайти(Подстрока,"location",,,) <> 0 Тогда
			Позиция = СтрНайти(Подстрока," ",НаправлениеПоиска.СКонца,,);
			Микрорайон = Прав(Подстрока,СтрДлина(Подстрока)-Позиция);		
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДанныхАдресата = Новый Структура;
	СтруктураДанныхАдресата.Вставить("fullname",ФИО);
	СтруктураДанныхАдресата.Вставить("lastname",Фамилия);      
	СтруктураДанныхАдресата.Вставить("firstname",Имя);
	СтруктураДанныхАдресата.Вставить("fathername",Отчество);
	СтруктураДанныхАдресата.Вставить("area",Район);
	СтруктураДанныхАдресата.Вставить("building",Строение);
	СтруктураДанныхАдресата.Вставить("corpus",Корпус);
	СтруктураДанныхАдресата.Вставить("house",Дом);
	СтруктураДанныхАдресата.Вставить("index",Индекс);
	СтруктураДанныхАдресата.Вставить("letter",Буква);
	СтруктураДанныхАдресата.Вставить("place",Город);
	СтруктураДанныхАдресата.Вставить("room",Квартира);
	СтруктураДанныхАдресата.Вставить("slash",Дробь);
	СтруктураДанныхАдресата.Вставить("region",Регион);
	СтруктураДанныхАдресата.Вставить("street",Улица);
	СтруктураДанныхАдресата.Вставить("hotel",Отель);
	СтруктураДанныхАдресата.Вставить("location",Микрорайон);
	СтруктураДанныхАдресата.Вставить("rus",Страна);
	
	Возврат СтруктураДанныхАдресата;
КонецФункции

Функция ЗапросКТЗ(ТЗ1) Экспорт
		
	ЗапросТекст = "ВЫБРАТЬ *
		|ПОМЕСТИТЬ ВТЗ
		|ИЗ
		|	&ВТЗ КАК ВТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ *
		|ИЗ
		|	ВТЗ КАК ВТЗ
		|ИТОГИ
		|	СУММА(ВесРПО),
		|	СУММА(ОЦ)
		|ПО
		|	Адресат, ТипПисьма, КатегорияРПОПарам, ВидРПОПарам, ТипКонверта";
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ЗапросТекст;
	Запрос.УстановитьПараметр("ВТЗ", ТЗ1);
	
	Результат = Запрос.Выполнить();
	
				
	Возврат Результат; 
КонецФункции 

Процедура ПроверкаВесаГрупповогоРПО(Объект)
	Если Объект.ВесРПО >= 100 И (Объект.ВидРПО = "LETTER" Или Объект.ВидРПО = "LETTER_CLASS_1") Тогда
		Объект.Комментарий = Объект.Комментарий + " Группа весом более 100 граммов автоматически преобразована в Бандероль.";
		Если Объект.ВидРПО = "LETTER" Тогда
			Объект.ВидРПО = "BANDEROL";
		ИначеЕсли Объект.ВидРПО = "LETTER_CLASS_1" Тогда
			Объект.ВидРПО = "BANDEROL_CLASS_1";
		КонецЕсли;	
	КонецЕсли;	
	
	Вид = Объект.ВидРПО;
	Категория = объект.КатегорияРПО;
	Конверт = Объект.ТипКонверта;
	ТекстСообщения = " Несоответствующий тип конверта для данных категории и вида РПО, произошла автоматическая смена типа конверта на С4.";
	//Письмо 1-класса заказное
	Если Вид = "LETTER_CLASS_1" и Категория = "ORDERED" И  (Конверт = "A6" Или Конверт = "A7") Тогда
		Объект.Комментарий = Объект.Комментарий+ТекстСообщения;
		Объект.ТипКонверта = "C4";
	КонецЕсли;
	//Бандероль заказная
	Если Вид = "BANDEROL" и Категория = "ORDERED" И  (Конверт = "A6" Или Конверт = "DL") Тогда
		Объект.Комментарий = Объект.Комментарий+ТекстСообщения;
		Объект.ТипКонверта = "C4";
	КонецЕсли;
	//Бандероль 1-класса заказная
	Если Вид = "BANDEROL_CLASS_1" и Категория = "ORDERED" И  (Конверт = "A6" Или Конверт = "DL" или Конверт = "A7") Тогда
		Объект.Комментарий = Объект.Комментарий+ТекстСообщения;
		Объект.ТипКонверта = "C4";
	КонецЕсли;	


КонецПроцедуры 

Процедура РазгруппироватьОтправления(СписокИсходящейКорреспонденции) Экспорт
	
	КолВо = СписокИсходящейКорреспонденции.Количество()-1;
	ИндексСтроки = КолВо; 
	Для счетчик = 0 по КолВо Цикл 
		Запись = СписокИсходящейКорреспонденции.Получить(ИндексСтроки); 
		Если ТипЗнч(Запись.ИсходящаяКорреспонденция) = Тип("СправочникСсылка.ГруппаИсходящейКорреспонденции") тогда 
			ГруппаИсхКоррОб = Запись.ИсходящаяКорреспонденция.Ссылка.ПолучитьОбъект();
			ГруппаИсхКоррОб.ПометкаУдаления = Истина;     
			Для каждого Корр из ГруппаИсхКоррОб.СписокИсходящейКорреспонденции  Цикл
				НстрокаКорр = СписокИсходящейКорреспонденции.Добавить();
				НстрокаКорр.ИсходящаяКорреспонденция = Корр.ИсходящаяКорреспонденция;
				НстрокаКорр.КорректностьАдреса = Запись.КорректностьАдреса;
				НстрокаКорр.Адресат = Запись.Адресат;
				НстрокаКорр.СтруктураАдреса = Запись.СтруктураАдреса;
				НстрокаКорр.ФИАС = Запись.ФИАС; 
			КонецЦикла;
			ГруппаИсхКоррОб.Записать();
			СписокИсходящейКорреспонденции.Удалить(Запись); 
		КонецЕсли; 
		ИндексСтроки = ИндексСтроки - 1; 
	КонецЦикла; 
	
	
	//Для Каждого стр из СписокИсходящейКорреспонденции Цикл
	//	Если ТипЗнч(стр.ИсходящаяКорреспонденция) = Тип("СправочникСсылка.ГруппаИсходящейКорреспонденции") Тогда
	//		ГруппаИсхКоррОб = стр.ИсходящаяКорреспонденция.Ссылка.ПолучитьОбъект();
	//		ГруппаИсхКоррОб.ПометкаУдаления = Истина;     
	//		Для каждого Корр из ГруппаИсхКоррОб.СписокИсходящейКорреспонденции  Цикл
	//			НстрокаКорр = СписокИсходящейКорреспонденции.Добавить();
	//			НстрокаКорр.ИсходящаяКорреспонденция = Корр.ИсходящаяКорреспонденция;
	//			НстрокаКорр.КорректностьАдреса = стр.КорректностьАдреса;
	//			НстрокаКорр.Адресат = стр.Адресат;
	//			НстрокаКорр.СтруктураАдреса = стр.СтруктураАдреса;
	//			НстрокаКорр.ФИАС = стр.ФИАС; 
	//		КонецЦикла;
	//		ГруппаИсхКоррОб.Записать();
	//		СписокИсходящейКорреспонденции.Удалить(стр);
	//	Иначе 
	//		Продолжить;
	//	КонецЕсли;

	//	
	//КонецЦикла;
		
КонецПроцедуры

Функция ВернутьПараметрыПисем (ТипПисьма)Экспорт 
	СтруктураНастроек = Новый Структура; 
	СтруктураНастроек.Вставить("ВидРПО", "");
	СтруктураНастроек.Вставить("КатегорияРПО", "");
	СтруктураНастроек.Вставить("ТипКонверта", "");
	СтруктураНастроек.Вставить("ВесРПО", "");
	СтруктураНастроек.Вставить("ОЦ", "");
	
	ЗаписиНастройка = РегистрыСведений.БИТ_ПочтаРФ_ПараметрыПисем.СоздатьНаборЗаписей();
	ЗаписиНастройка.Отбор.ТипПисьма.Установить(ТипПисьма);
	ЗаписиНастройка.Прочитать();
	
	Для Каждого ЗаписьНастройка ИЗ ЗаписиНастройка Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураНастроек, ЗаписьНастройка);    
		
	КонецЦикла;
	
	Возврат СтруктураНастроек;
	
КонецФункции   

Процедура ЗаполнитьПараметрыИсходящейКорреспонденции(ОбъектИсхКорр, Настройка)Экспорт
	
	ОбъектИсхКорр.ВидРПО = Настройка.ВидРПО;
	ОбъектИсхКорр.КатегорияРПО = Настройка.КатегорияРПО;
	ОбъектИсхКорр.ТипКонверта = Настройка.ТипКонверта;
	ОбъектИсхКорр.ВесРПО = Настройка.ВесРПО;
	ОбъектИсхКорр.ОЦ = Настройка.ОЦ;
	
КонецПроцедуры

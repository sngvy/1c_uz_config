
Процедура ПолучитьВходящиеСМС() Экспорт 
	ДатаПолученияСМС = Константы.ДатаПоследнегоВходящегоСМС.Получить();
    СписокСообщений = Новый Массив;
	КодОшибки = SMS4B_ПолучитьСообщения(СписокСообщений, ДатаПолученияСМС, , ЛОЖЬ);	
	Если КодОшибки > 0 Тогда
		ОтборПоGUID				= Новый Структура("GUID", ""); 
		//МассивИменСправочников	= смсСписокИменСправочников.ВыгрузитьЗначения();
		Для Каждого Строка Из СписокСообщений Цикл
			ОтборПоGUID.GUID = Строка.GUID;
			НаборЗаписей = РегистрыСведений.СообщенияСМС.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.GUID.Установить(Строка.GUID);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				НовСтрока = НаборЗаписей.Добавить();
				//НовСтрока.Получатель		= Строка.Получатель;
				НовСтрока.Входящее = Истина;
				НовСтрока.НомерТелефона		= Строка.Отправитель;
				КороткийНомер = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(Строка.Отправитель);
				НовСтрока.Объект	= НайтиКонтрагентаПоНомеруВКонтактах(КороткийНомер);
				НовСтрока.ТекстСообщения	= Строка.ТекстСообщения;
				НовСтрока.Дата		= Строка.ДатаПолучения;
				НовСтрока.GUID				= Строка.GUID;
				Если Найти(НовСтрока.ТекстСообщения, "[…]") = 0 Тогда
					НовСтрока.Статус		= "Получено";
				Иначе
					НовСтрока.Статус		= "Получено частично";
				КонецЕсли;
				НаборЗаписей.Записать(Истина);
			КонецЕсли;	
		КонецЦикла; 
		Для Каждого Строка Из СписокСообщений Цикл
			Если Строка.ДатаПолучения > ДатаПолученияСМС Тогда
				ДатаПолученияСМС = Строка.ДатаПолучения; 
			КонецЕсли;	
		КонецЦикла;	
		Константы.ДатаПоследнегоВходящегоСМС.Установить(ДатаПолученияСМС);
	ИначеЕсли КодОшибки < 0 Тогда	
		SMS4B_ВывестиСообщение(SMS4B_ОписаниеОшибокВебСервиса(КодОшибки) + "(" + КодОшибки + ")'", СтатусСообщения.Важное);
	КонецЕсли; 	
КонецПроцедуры

&НаСервере
// Функция предназначена для подключению к серверу SMS4B. Вызывается перед первой 
// попыткой обращения к функциям сервера 
// либо после разрыва сервером SMS4B открытой ранее сессии.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Число	- НомерСессии > 0, если функция выполнена успешно,
//				или код ошибки < 0, если функция выполнена не успешно 
//				(см описание функции ОписаниеОшибокВебСервиса ()). 
//
Функция SMS4B_Подключиться(смсОсновнойСервер, смсНомерСессии)
	// Устанавливаем GMT=0, т.к. всегда будем работать по UTC (как сервер SMS4B)
	GMT = 0;
	// Собираем информацию о конфигурации (для статистики на сервере SMS4B)
	смсНомерЯдра = SMS4B_ВернутьВерсиюЯдра();

	ИмяКонфигурации 	= СтрЗаменить(Метаданные.Имя, " ", "_");
	КраткаяИнформация 	= СтрЗаменить(Метаданные.КраткаяИнформация," ","_");
	ИмяКонфигурации = ИмяКонфигурации + "(" + КраткаяИнформация + ")";
	Если СтрДлина(ИмяКонфигурации) > 425 Тогда
		ИмяКонфигурации = Лев(ИмяКонфигурации, 425);
	КонецЕсли;	
	ИнформацияОСистеме = Новый СистемнаяИнформация;
	// Дополняем имя пользователя сведениями о конфигурации
	Пользователь = " S_" + смсНомерЯдра + "_" + Метаданные.Версия + "_" + ИмяКонфигурации + "_" + ИнформацияОСистеме.ВерсияПриложения + " " + Константы.УчеткаSMSРассылок.Получить().Логин;
	Пароль 		 = Константы.УчеткаSMSРассылок.Получить().Пароль;
	ВебСервис = SMS4B_ПодключитьВебСервис(смсОсновнойСервер);
	Если ВебСервис = Неопределено Тогда
		SMS4B_ПоменятьСервер(смсОсновнойСервер);
		ВебСервис = SMS4B_ПодключитьВебСервис(смсОсновнойСервер);
		Если ВебСервис = Неопределено Тогда
			КодОшибки = -9;
			Возврат КодОшибки;
		КонецЕсли;	
	КонецЕсли; 
	// Открываем сессию для работы с веб-сервисом
	Попытка
		РезультатПодключения = ВебСервис.StartSession(Пользователь, Пароль, GMT); 
	Исключение
		РезультатПодключения = Неопределено;
	КонецПопытки;
	// Запомним код ошибки
	КодОшибки = РезультатПодключения;
	// Проверяем результат подключения первый раз
	// Если нет связи, либо ошибки от -1 до -19, то подключаемся на резервный сервер
	Если (РезультатПодключения = Неопределено) ИЛИ ((РезультатПодключения <= -1) И (РезультатПодключения >= -19)) Тогда
		// Подключаемся к резервному серверу
		SMS4B_ПоменятьСервер(смсОсновнойСервер);
		ВебСервис = SMS4B_ПодключитьВебСервис(смсОсновнойСервер);
		Если ВебСервис = Неопределено Тогда
			SMS4B_ПоменятьСервер(смсОсновнойСервер);
			ВебСервис = SMS4B_ПодключитьВебСервис(смсОсновнойСервер);
			Если ВебСервис = Неопределено Тогда
				КодОшибки = -9;
				Возврат КодОшибки;
			КонецЕсли;	
		КонецЕсли; 
		Попытка
			РезультатПодключения = ВебСервис.StartSession(Пользователь, Пароль, GMT); 
		Исключение
			РезультатПодключения = Неопределено;
		КонецПопытки;
		// Запомним код ошибки
		КодОшибки = РезультатПодключения;
	КонецЕсли;
	// Проверяем результат подключения второй раз
	Если РезультатПодключения = Неопределено Тогда
		Если КодОшибки = Неопределено Тогда
			КодОшибки = -99999; // Проблема с интернетом (сервис не ответил)
		КонецЕсли; 
	Иначе
		// Проверяем РезультатПодключения на ошибки 
		КодОшибки = РезультатПодключения;
		Если КодОшибки > 0 Тогда
			смсНомерСессии = КодОшибки;
		ИначеЕсли КодОшибки < 0 Тогда
			SMS4B_ВывестиСообщение( SMS4B_ОписаниеОшибокВебСервиса(РезультатПодключения), СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли;	
	// Возвращаем результат работы функции
	Возврат КодОшибки;	
КонецФункции // SMS4B_Подключиться()


&НаСервере
// Функция предназначена для получения входящих sms-сообщений. Функция по возможности
// склеит части входящих сообщений в одно sms-сообщение. В случае, если в момент вызова
// какие то из частей сообщения еще не получены сервером SMS4B, в конец текста будет 
// вставлен специальный маркер. Формат маркера: «[…]». На основании маркера при получении 
// оставшихся частей сообщений можно будет «дособрать» его на стороне клиента.
//
// Параметры:
//
//  СписокСообщений (массив)- Возвращаемый параметр, содержит массив структур, содержащих 
//							  поля полученных sms-сообщений.
//							
//  ДатаПолученияСообщения (Дата и время) - Возвращаемый параметр. В метод передается дата, 
//											начиная с которой нужно получать сообщения, возвращается
//											дата последнего полученного сообщения. Если не передана
//											дата получения сообщений, то будут получены сообщения 
//											с начала дня текущей даты. В этом случае значение 
//											миллисекунд будет проигнорировано. 
//							
//  Миллисекунда (число(3)) - 	Возвращаемый параметр. В дополнение ко времени получения сообщений
//								передается миллисекунда, поскольку на сервере SMS4B время хранится
//								с точностью до миллисекунд. Возвращается миллисекунда времени 
//								последнего полученного сообщения.
//							
//  ПолучатьТолькоПолныеСМС (булево) - 	Необязательный параметр, по умолчанию Ложь. На сервере SMS4B
//										реализован механизм, позволяющий получать sms, состоящие из 
//										нескольких частей, только когда будут получены все ее части. 
//										Этот механизм будет использоваться,	если значение параметра 
//										равно Истина. Если значение равно Ложь, части sms будут 
//										возвращаться сразу по мере их прихода. Действия по склеиванию 
//										пришедших частей с полученными ранее необходимо выполнять на 
//										стороне клиента в предметной логике.
//										Следует понимать, что при использовании режима получения только
//										полных сообщений есть риск того, что некоторые сообщения никогда
//										не будут получены с сервера (если на сервер не дойдут какие то
//										части сообщений).
// 
// Возвращаемое значение (число):
// 
// Возвращает числовой код ошибки, 1 - если функция выполнена успешно,
// и код ошибки < 0, если функция выполнена не успешно.
//
Функция SMS4B_ПолучитьСообщения(СписокСообщений, ДатаПолученияСообщения, Миллисекунда = 0, ПолучатьТолькоПолныеСМС = Ложь)
	смсНомерСессии = 0;
	КодОшибки = 1;
	Маркер = "[…]";	// Признак частично полученного сообщения, добавляется в конец сообщения,
							// если оно не было получено полностью с сервера
	// Если дата не заполнена, то получаем сообщения с начала дня текущей даты
	Если НЕ ЗначениеЗаполнено(ДатаПолученияСообщения) Тогда
		ДатаПолученияСообщения = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	// Переводим дату получения сообщений к времени по UTC
	ДатаПолученияСообщенияUTC = SMS4B_ПривестиДатуКUTC(ДатаПолученияСообщения);
	// Создаем структуру даты, с которой необходимо получить входящие  сообщения
	СтруктураДаты = Новый Структура;
	СтруктураДаты.Вставить("Дата", ДатаПолученияСообщенияUTC);
	СтруктураДаты.Вставить("Миллисекунда", Миллисекунда);
	// Переводим дату в строку
	МоментВремени = SMS4B_ДатаВСтроку(СтруктураДаты);
	// Боевкин
	смсОсновнойСервер = Истина;
	// Создаем таблицу значений для полученных сообщений
	ПолученныеСообщения = Новый ТаблицаЗначений;
	ПолученныеСообщения.Колонки.Добавить("GUID");
	ПолученныеСообщения.Колонки.Добавить("ДатаПолучения"); 
	ПолученныеСообщения.Колонки.Добавить("Миллисекунда");
	ПолученныеСообщения.Колонки.Добавить("Отправитель");
	ПолученныеСообщения.Колонки.Добавить("Получатель");
	ПолученныеСообщения.Колонки.Добавить("ТекстСообщения");
	ПолученныеСообщения.Колонки.Добавить("ВсегоЧастей");
	ПолученныеСообщения.Колонки.Добавить("ТекущаяЧасть");
	ВебСервис = SMS4B_ПодключитьВебСервис(смсОсновнойСервер);
	Если ВебСервис = Неопределено Тогда
		SMS4B_ПоменятьСервер(смсОсновнойСервер);
		ВебСервис = SMS4B_ПодключитьВебСервис(смсОсновнойСервер);
		Если ВебСервис = Неопределено Тогда
			КодОшибки = -9;
			Возврат КодОшибки;
		КонецЕсли;	
	КонецЕсли; 
	// Получаем фабрику XDTO 
	Фабрика = ВебСервис.ФабрикаXDTO;
	ЕстьСообщения = Истина;
	Пока ЕстьСообщения Цикл
		КолПолученных = 0;
		// Получаем сообщения с сервера
		Попытка
			НовыеСообщения = ВебСервис.LoadSMS(смсНомерСессии, МоментВремени, ?(ПолучатьТолькоПолныеСМС, 1, 0));
		Исключение
			НовыеСообщения = Неопределено;
		КонецПопытки;
		Если НовыеСообщения = Неопределено Тогда
			// Проблема с интернетом (сервис не ответил)
			КодОшибки = -99999;
		Иначе	
			КодОшибки = Число(НовыеСообщения.Result);
			Если (КодОшибки = -1) ИЛИ (КодОшибки = -2) Тогда
				// Если сессия устарела или её нет
				КодОшибки = SMS4B_Подключиться(смсОсновнойСЕрвер, смсНомерСессии);
				Если КодОшибки > 0 Тогда
					// Пробуем получить ещё раз
					смсНомерСессии = КодОшибки;
					// Получаем сообщения с сервера
					Попытка
						НовыеСообщения = ВебСервис.LoadSMS(смсНомерСессии, МоментВремени, ?(ПолучатьТолькоПолныеСМС, 1, 0));
					Исключение
						НовыеСообщения = Неопределено;
					КонецПопытки;
					Если НовыеСообщения = Неопределено Тогда
						// Проблема с интернетом (сервис не ответил)
						КодОшибки = -99999;
					Иначе	
						КодОшибки = Число(НовыеСообщения.Result);
					КонецЕсли;							
				КонецЕсли;							
			ИначеЕсли (КодОшибки > -20) И (КодОшибки < -2) Тогда
				// Возможно, что Основной сервер не доступен, пробуем переключится на резервный.
				SMS4B_ПоменятьСервер(смсОсновнойСервер);				
				// Пробуем получить ещё раз
				Попытка
					НовыеСообщения = ВебСервис.LoadSMS(смсНомерСессии, МоментВремени, ?(ПолучатьТолькоПолныеСМС, 1, 0));
				Исключение
					НовыеСообщения = Неопределено;
				КонецПопытки;
				Если НовыеСообщения = Неопределено Тогда
					КодОшибки = -199999;
					Возврат КодОшибки; // Проблема с интернетом
				Иначе	
					КодОшибки = Число(НовыеСообщения.Result); // Код ошибки
				КонецЕсли;							
			КонецЕсли; 
		КонецЕсли; 
		Если КодОшибки > 0 Тогда
			// Получаем список сообщений
			Попытка
				СписокВходящихСообщений = НовыеСообщения.List.SMSList;
			Исключение
			    СписокВходящихСообщений = Неопределено;
			КонецПопытки;
			// Обрабатываем полученные сообщения
			Если СписокВходящихСообщений = Неопределено Тогда
				ЕстьСообщения = Ложь;
			Иначе	
				Для Каждого Строка Из СписокВходящихСообщений Цикл
					// Пропускаем повторно полученные сообщения
					ИскомаяСтрока = ПолученныеСообщения.Найти(Строка.G);
					Если НЕ (ИскомаяСтрока = Неопределено) Тогда 
						Если (ИскомаяСтрока.ТекущаяЧасть >= Строка.P) И (ИскомаяСтрока.ВсегоЧастей = Строка.A) Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					КолПолученных = КолПолученных + 1; // Подсчет новых
					// Склеиваем сообщения только тогда, когда получаем их частями
					Если НЕ ПолучатьТолькоПолныеСМС Тогда
						Если НЕ (ИскомаяСтрока = Неопределено) Тогда
							// Склеиваем сообщение, если сообщение не полное, то добавляем маркер
							// (признак того, что сообщение получено не полностью)
							Если ИскомаяСтрока.ВсегоЧастей = Строка.A И ИскомаяСтрока.ТекущаяЧасть < Число(Строка.P) Тогда
								ИскомаяСтрока.ТекстСообщения = СтрЗаменить(ИскомаяСтрока.ТекстСообщения, Маркер, "") 
								+ SMS4B_СтрокуВОбычноеПредставление(Строка.B, Строка.E) + ?(Число(Строка.P) = Число(Строка.A), "", Маркер);
								ИскомаяСтрока.ТекущаяЧасть      = Строка.P;
								// Запишем дату получения последней части сообщения
								ДатаСтрокой = SMS4B_СтрокаВДату(Лев(Строка.M, 19));
								ДатаUTC = SMS4B_ПривестиДатуКUTC(ДатаСтрокой, Ложь);
								ИскомаяСтрока.ДатаПолучения  = ДатаUTC;
								ИскомаяСтрока.Миллисекунда   = Прав(МоментВремени, СтрДлина(МоментВремени) - Найти(МоментВремени,"."));
								Если Найти(ИскомаяСтрока.ТекстСообщения, Маркер) = 0 Тогда
									ИскомаяСтрока.Статус = "Получено";
								Иначе
									ИскомаяСтрока.Статус = "Получено частично";
								КонецЕсли;	
								МоментВремени = Строка.M;
								Продолжить;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					ТекСообщение = ПолученныеСообщения.Добавить();
					ТекСообщение.GUID 			= Строка.G;
					// Переводим время входящей смс из UTC в "наше"
					ДатаСтрокой = SMS4B_СтрокаВДату(Лев(Строка.M,19));
					ДатаUTC = SMS4B_ПривестиДатуКUTC(ДатаСтрокой, Ложь);
					ТекСообщение.ДатаПолучения  = ДатаUTC;
					ТекСообщение.Миллисекунда   = Прав(Строка.M, 3);
					ТекСообщение.Отправитель 	= Строка.S;
					ТекСообщение.Получатель 	= Строка.D;
					ТекстСообщения = SMS4B_СтрокуВОбычноеПредставление(Строка.B, Строка.E) + ?(Число(Строка.A) > 1 И Число(Строка.P) = 1, Маркер, "");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, Символ(0), "@");
					ТекСообщение.ТекстСообщения = СтрЗаменить(ТекстСообщения, Символ(2), "$");
					ТекСообщение.ВсегоЧастей 	= Строка.A;
					ТекСообщение.ТекущаяЧасть 	= Строка.P;
					МоментВремени = Строка.M;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли; 
		Если КолПолученных = 0 Тогда 
			ЕстьСообщения = Ложь;
		КонецЕсли;
	КонецЦикла;
	Если ПолученныеСообщения.Количество() > 0 Тогда
 		// Преобразуем таблицу значений в массив структур и записываем в возвращаемый параметр
		СписокСообщений = SMS4B_ТаблицаЗначенийВМассивСтруктур(ПолученныеСообщения);
	КонецЕсли; 
	SMS4B_Отключиться(смсОсновнойСервер, смсНомерСессии);
	Возврат КодОшибки;
КонецФункции // SMS4B_ПолучитьСообщения()

&НаСервере
// Функция приводит переданную дату к времени UTC  
//
// Параметры:
//  Дата		- ДатаВремя	- Дата которую корректируем
//  Вычитать	- Булево	- Признак знака корректировки, для входящих сообщений указывать Ложь, для Исходящих Истина
//
// Возвращаемое значение:
//	Дата	- Дата, приведенная к UTC
//
Функция SMS4B_ПривестиДатуКUTC(Дата, Вычитать = Истина)
	// Если сообщение входящее то время надо прибавить!
	Если Вычитать Тогда
		Возврат Дата - Константы.УчеткаSMSРассылок.Получить().КорректировкаUTC;
	Иначе 
		Возврат Дата + Константы.УчеткаSMSРассылок.Получить().КорректировкаUTC;
	КонецЕсли; 
КонецФункции // SMS4B_ПривестиДатуКUTC()


&НаСервере
// Функция переводит дату из текстовый формат вида 'YYYYMMDD hh:mm:ss' в канонический формат
//
// Параметры:
//	СтрокаДаты	- Строка	- Строка даты
//
// Возвращаемое значение:
//	Дата	- Дата
//
Функция SMS4B_СтрокаВДату(СтрокаДаты)
	Стр = СтрЗаменить(СтрокаДаты, "-", "");
	Стр = СтрЗаменить(Стр, ":", "");
	Стр = СтрЗаменить(Стр, " ", "");
	Возврат Дата(Стр);
КонецФункции // SMS4B_СтрокаВДату()


&НаСервере
// Функция переводит дату в формате 1С в международный текстовый формат 
// вида 'YYYYMMDD hh:mm:ss'
//
// Параметры:
//	СтруктураДаты - Структура - Структура, содержащая дату и количество миллисекунд
//	
// Возвращаемое значение:
//	Строка	- Дата в международном текстовом формате
//
Функция SMS4B_ДатаВСтроку(СтруктураДаты)
	Если ТипЗнч(СтруктураДаты) = Тип("Структура") Тогда 
		Дата1С			= СтруктураДаты.Дата;
		Миллисекунда1С	= СтруктураДаты.Миллисекунда;
	Иначе
		Дата1С			= СтруктураДаты;
		Миллисекунда1С	= 0;
	КонецЕсли;
	Если Дата1С = Дата('00010101') Тогда
		Результат = "";
	Иначе
		Результат = Формат(Год(Дата1С), "ЧГ=0") 
		+ ?(СтрДлина(Строка(Месяц(Дата1С))) < 2,"0" + Строка(Месяц(Дата1С)) , Строка(Месяц(Дата1С)))
		+ ?(СтрДлина(Строка(День(Дата1С))) < 2, "0" + Строка(День(Дата1С)), Строка(День(Дата1С))) + " "
		+ ?(СтрДлина(Строка(Час(Дата1С))) < 2, "0" + Строка(Час(Дата1С)), Строка(Час(Дата1С))) + ":" 
		+ ?(СтрДлина(Строка(Минута(Дата1С))) < 2, "0" + Строка(Минута(Дата1С)), Строка(Минута(Дата1С))) + ":"
		+ ?(СтрДлина(Строка(Секунда(Дата1С))) < 2, "0" + Строка(Секунда(Дата1С)), Строка(Секунда(Дата1С)))+ "."	
		+ Строка(Миллисекунда1С);
	КонецЕсли;	
	Возврат Результат;
КонецФункции // SMS4B_ДатаВСтроку()

&НаСервере
// Функция преобразует таблицу значений в массив структур 
Функция SMS4B_ТаблицаЗначенийВМассивСтруктур(ТаблицаЗначений)
	Результат = Новый Массив;
	// Обходим таблицу значений
	Для Каждого Строка Из ТаблицаЗначений Цикл
		// Создаем структуру
		Свойства = Новый Структура;
		// Заполняем структуру колонками таблицы значений
		Для каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			Свойства.Вставить(Колонка.Имя, Строка[Колонка.Имя]);
		КонецЦикла;
		// Добавляем созданную структуру в таблицу значений
		Результат.Добавить(Свойства);
	КонецЦикла;
	Возврат Результат;
КонецФункции // SMS4B_ТаблицаЗначенийВМассивСтруктур()

&НаСервере
// Функция переводит cтроку из шестнадцатеричного представления в обычную строку
//
// Параметры:
//	СтрокаСимволов	- Строка	- Текст в шестнадцатеричном виде
//	ПризнакКода		- Строка	- Тип кодировки ("0" - каждый символ 
//								  представляется 1 байтами, "1" - 2 байтами)
//
// Возвращаемое значение:
//	Строка	- Строка после перекодировки
//
Функция SMS4B_СтрокуВОбычноеПредставление(СтрокаСимволов, ПризнакКода) // StrHexToStr
	Если Число(ПризнакКода) = 0 Тогда
		КоличествоСимволов = 2;
	Иначе
		КоличествоСимволов = 4;
	КонецЕсли;
	к = 1;
	Результат = "";
	Пока к < СтрДлина(СтрокаСимволов) Цикл
		Строка = Сред(СтрокаСимволов, к, КоличествоСимволов);
		Результат = Результат + Символ(SMS4B_ШестнадцатеричноеЧислоВДесятичное(Строка));
		к = к + КоличествоСимволов;
	КонецЦикла;
	Возврат Результат;
КонецФункции // SMS4B_СтрокуВОбычноеПредставление()

&НаСервере
// Функция выполняет подключение к ВебСервису
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	WS-ссылка	- Ссылка на ВебСервис
//
Функция SMS4B_ПодключитьВебСервис(смсОсновнойСервер)
	смсИмяПользователя = Константы.УчеткаSMSРассылок.Получить().Логин;
	смсПарольПользователя = Константы.УчеткаSMSРассылок.Получить().Пароль;
	Попытка
		Если смсОсновнойСервер Тогда
			
			АдресСервера = "https://sms4b.ru/webservices/sms.asmx?WSDL";
			// Основной сервер
			//Определения = Новый WSОпределения(
			//	"https://sms4b.ru/webservices/sms.asmx?WSDL",
			//	смсИмяПользователя,
			//	смсПарольПользователя, ,
			//	Таймаут.ДляБыстройОперации());
			//
		Иначе
			АдресСервера = "https://s.sms4b.ru/webservices/sms.asmx?WSDL";
			// Резервный сервер
			//Определения = Новый WSОпределения(
			//	"https://s.sms4b.ru/webservices/sms.asmx?WSDL",
			//	смсИмяПользователя,
			//	смсПарольПользователя, ,
			//	Таймаут.ДляБыстройОперации());
			// ВебСервис = Новый WSПрокси(Определения, "SMS client", "WSSM", "WSSMSoap12", , Таймаут.ДляБыстройОперации());
		КонецЕсли;
		Определения = Новый WSОпределения(
			АдресСервера,
			смсИмяПользователя,
			смсПарольПользователя, ,
			ТаймаутСоединения.ДляБыстройОперации());
		ВебСервис = Новый WSПрокси(Определения, "SMS client", "WSSM", "WSSMSoap12", , ТаймаутСоединения.ДляБыстройОперации());
	Исключение
		Возврат Неопределено;
	КонецПопытки; 
	Возврат ВебСервис;
КонецФункции // SMS4B_ПодключитьВебСервис()

&НаСервере
// Процедура меняет основной сервер
//
// Параметры:
//	Нет.
//
Процедура SMS4B_ПоменятьСервер(смсОсновнойСервер)
	смсОсновнойСервер = НЕ смсОсновнойСервер;
КонецПроцедуры // SMS4B_ПоменятьСервер()

&НаСервере
// Функция переводит десятичное число в шестнадцатеричное
//
// Параметры:
//	Число	- Число	- Десятичное число
//
// Возвращаемое значение:
//	Строка	- Шестнадцатеричное число
//
Функция SMS4B_ДесятичноеВШестнадцатеричное(Знач _Число) // DecToHex
	База = 16;
	Результат = "";
	Пока _Число <> 0 Цикл
		Поз =_Число % База;
		Результат = Сред("0123456789ABCDEF", Поз + 1, 1) + Результат;
		_Число = Цел(_Число / База);
	КонецЦикла;
	Возврат Результат;
КонецФункции // SMS4B_ДесятичноеВШестнадцатеричное()

&НаСервере
// Функция переводит шестнадцатеричное число в десятичное
//
// Параметры:
//	_Hex	- Строка	- Шестнадцатеричное число
//
// Возвращаемое значение:
//	Число	- Десятичное число
//
Функция SMS4B_ШестнадцатеричноеЧислоВДесятичное(Знач _Hex) // HexToDec
	База = 16;
	_Hex = СокрЛП(_Hex);
	СтаршаяСтепень = СтрДлина(_Hex) - 1;
	Результат = 0;
	счСимволов = 1;
	Пока СтаршаяСтепень >=0 Цикл
		_HexСимвол = Сред(_Hex, счСимволов, 1);
		Представление = Найти("0123456789ABCDEF", _HexСимвол) - 1;
		Результат = Результат + Представление * Pow(База, СтаршаяСтепень);
		СтаршаяСтепень = СтаршаяСтепень - 1;
		СчСимволов = СчСимволов + 1;
	КонецЦикла;	
	Возврат Результат;
КонецФункции // SMS4B_ШестнадцатеричноеЧислоВДесятичное()

&НаСервере
// Функция возвращает версию ядра
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Строка	- Номер версии ядра
//
Функция SMS4B_ВернутьВерсиюЯдра()
	Возврат "2.0.2.1";
КонецФункции // SMS4B_ВернутьВерсиюЯдра()

&НаСервере
// Функция получает описание ошибки по ее коду
// 
// Параметры:
//	КодОшибки	- Число	- Код ошибки
//
// Возвращаемое значение:
//	Строка	- Текст сообщения об ошибке
//
Функция SMS4B_ОписаниеОшибокВебСервиса(КодОшибки)
	Если КодОшибки = 0 Тогда
		ТекстСообщить = "ru = ""Превышен предел открытых сессий!""";
	ИначеЕсли КодОшибки = -1 Тогда
		ТекстСообщить = "ru = ""Неверный логин или пароль (Необходимо использовать пароль для доступа к SMS сервису из внешних программ)!""";
	ИначеЕсли КодОшибки = -2 Тогда
		ТекстСообщить = "ru = ""Сессия закрыта!""";
	ИначеЕсли КодОшибки = -9 Тогда
		ТекстСообщить = "ru = ""Отказ сервера!""";
	ИначеЕсли КодОшибки = -10 Тогда
		ТекстСообщить = "ru = ""Неизвестная ошибка сервера!""";
	ИначеЕсли КодОшибки = -20 Тогда
		ТекстСообщить = "ru = ""Сбой сеанса связи!""";
	ИначеЕсли КодОшибки = -21 Тогда
		ТекстСообщить = "ru = ""Сообщение не идентифицировано!""";
	ИначеЕсли КодОшибки = -22 Тогда
		ТекстСообщить = "ru = ""Неверный идентификатор сообщения!""";
	ИначеЕсли КодОшибки = -23 Тогда
		ТекстСообщить = "ru = ""Неверный параметр - GMT""";
	ИначеЕсли КодОшибки = -30 Тогда
		ТекстСообщить = "ru = ""Неизвестная кодировка сообщения! (не заполнен текст сообщения)""";
	ИначеЕсли КодОшибки = -31 Тогда
		ТекстСообщить = "ru = ""Неразрешенная зона тарификации!""";
	ИначеЕсли КодОшибки = -32 Тогда
		ТекстСообщить = "ru = ""Неверный параметр - дата начала или окончания доставки сообщения!""";
	ИначеЕсли КодОшибки = -33 Тогда
		ТекстСообщить = "ru = ""Превышение длительности доставки!""";
	ИначеЕсли КодОшибки = -34 Тогда
		ТекстСообщить = "ru = ""Превышение срока актуальности доставки!""";
	ИначеЕсли КодОшибки = -35 Тогда
		ТекстСообщить = "ru = ""Неверный параметр - период доставки сообщения!""";
	ИначеЕсли КодОшибки = -36 Тогда
		ТекстСообщить = "ru = ""Неизвестный код группы!""";
	ИначеЕсли КодОшибки = -50 Тогда
		ТекстСообщить = "ru = ""Неверный отправитель!""";
	ИначеЕсли КодОшибки = -51 Тогда
		ТекстСообщить = "ru = ""Неразрешенный получатель!""";
	ИначеЕсли КодОшибки = -52 Тогда
		ТекстСообщить = "ru = ""Недостаточно средств на Вашем счете!""";
	ИначеЕсли КодОшибки = -53 Тогда
		ТекстСообщить = "ru = ""Незарегистрированный отправитель!""";
	ИначеЕсли (КодОшибки < -53) И (КодОшибки > -60) Тогда
		ТекстСообщить = "ru = ""Таймаут изменения счета!""";
	ИначеЕсли КодОшибки = -66 Тогда
		ТекстСообщить = "ru = ""Не задан отправитель!""";
	ИначеЕсли КодОшибки = -67 Тогда
		ТекстСообщить = "ru = ""Превышение сроков отправки""";
	ИначеЕсли КодОшибки = -68 Тогда
		ТекстСообщить = "ru = ""Пользователь заблокирован!""";
	ИначеЕсли КодОшибки = -99999 Тогда
		ТекстСообщить = "ru = ""Ошибка соединения (нет доступа к интернету или не указаны настройки прокси-сервера)!""";
	Иначе
		ТекстСообщить = "ru = ""Неизвестная ошибка... код ошибки: " + Строка(КодОшибки) + "!""";
	КонецЕсли;
	Возврат НСтр(ТекстСообщить);
КонецФункции // SMS4B_ОписаниеОшибокВебСервиса()

&НаСервере
// Процедура выводит переданное сообщение
//
// Параметры:
//	Сообщение	- Строка					- Текст сообщения
//	Статус		- СтатусСообщения			- Статус сообщения
//	Заголовок	- Строка					- Событие для журнала регистрации
//	Уровень		- УровеньЖурналаРегистрации	- Уровень для журнала регистрации
//
Процедура SMS4B_ВывестиСообщение(Сообщение, Статус)
	Сообщить(Сообщение, Статус);
КонецПроцедуры // SMS4B_ВывестиСообщение()

&НаСервере
Функция НайтиКонтрагентаПоНомеруВКонтактах(Знач КороткийНомер)
	Если НЕ ЗначениеЗаполнено(КороткийНомер) ИЛИ бит_БИТфонСервер.ПолучитьФлагНеИскатьКонтрагента() Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	НомерДляПоиска = КороткийНомер;
	//длинаНомера = СтрДлина(КороткийНомер);
	длинаВнешнегоНомера = 10;//БИТфонСервер.ПолучитьДлинуВнешнегоНомера();
	//Если длинаНомера >= длинаВнешнегоНомера Тогда
	//	НомерДляПоиска = Прав(КороткийНомер, длинаВнешнегоНомера);
	//КонецЕсли;
	
	// Из модуля телефонии
	длинаНомера = СтрДлина(НомерДляПоиска);
	стрПодобия = "%";
	Для й = 1 По длинаНомера Цикл
		стрПодобия = стрПодобия + Сред(НомерДляПоиска, й, 1) + "%";
	КонецЦикла;
	
	//
	//стрПодобия = "%" + НомерДляПоиска + "%";
	//
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//                      |	ДополнительныеРеквизитыИСведения.Ссылка
	//                      |ПОМЕСТИТЬ Таб
	//                      |ИЗ
	//                      |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	//                      |ГДЕ
	//                      |	ДополнительныеРеквизитыИСведения.ВидКИ = &ВидКИ
	//                      |	И НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления
	//                      |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ
	//                      |	КонтрагентыДополнительныеРеквизиты.Ссылка,
	//                      |	КонтрагентыДополнительныеРеквизиты.Значение КАК НомерТелефона
	//                      |ИЗ
	//                      |	Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
	//                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Таб КАК Таб
	//                      |		ПО КонтрагентыДополнительныеРеквизиты.Свойство = Таб.Ссылка
	//                      |ГДЕ
	//                      |	ВЫРАЗИТЬ(КонтрагентыДополнительныеРеквизиты.Значение КАК СТРОКА) ПОДОБНО &НомерТелефона
	//                      |
	//                      |ОБЪЕДИНИТЬ ВСЕ
	//                      |
	//                      |ВЫБРАТЬ
	//                      |	ДополнительныеСведения.Объект,
	//                      |	ДополнительныеСведения.Значение
	//                      |ИЗ
	//                      |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	//                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Таб КАК Таб
	//                      |		ПО ДополнительныеСведения.Свойство = Таб.Ссылка
	//                      |ГДЕ
	//                      |	ВЫРАЗИТЬ(ДополнительныеСведения.Значение КАК СТРОКА) ПОДОБНО &НомерТелефона
	//                      |
	//                      |ОБЪЕДИНИТЬ ВСЕ
	//                      |
	//                      |ВЫБРАТЬ
	//                      |	КонтрагентыТелефоны.Ссылка,
	//                      |	КонтрагентыТелефоны.Номер
	//                      |ИЗ
	//                      |	Справочник.Контрагенты.Телефоны КАК КонтрагентыТелефоны
	//                      |ГДЕ
	//                      |	ВЫРАЗИТЬ(КонтрагентыТелефоны.Номер КАК СТРОКА) ПОДОБНО &НомерТелефона");
	
	// Оптимизация запроса
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КонтрагентыТелефоны.Ссылка КАК Контрагент,
		|	КонтрагентыТелефоны.КонтактноеЛицо КАК КонтактноеЛицо,
		|	КонтрагентыТелефоны.Номер КАК НомерТелефона
		|ИЗ
		|	Справочник.Контрагенты.Телефоны КАК КонтрагентыТелефоны
		|ГДЕ
		|	КонтрагентыТелефоны.Номер ПОДОБНО &НомерТелефона";
	
	//Запрос.УстановитьПараметр("ВидКИ", Справочники.ВидыКИ.Телефон);
	// Удалить код оператора из строки подобия
	//Запрос.УстановитьПараметр("НомерТелефона", стрПодобия);
	Запрос.УстановитьПараметр("НомерТелефона", "%" + Сред(стрПодобия, 3) + "%");

	Результат = Запрос.Выполнить();
	
	найден = Ложь;
	Если Результат.Пустой() Тогда
		КонтрагентСсылка = Справочники.Контрагенты.ПустаяСсылка();
		КонтактноеЛицоСсылка = Справочники.КонтактныеЛицаПоДолжнику.ПустаяСсылка();
	Иначе
		табл = Результат.Выгрузить();
		Для Каждого строкаТ Из табл Цикл
			//НомерЦифр = строкаТ.НомерТелефона;
			НомерЦифр = Прав(строкаТ.НомерТелефона, 7);
			//длинаНомераЦифр = СтрДлина(НомерЦифр);
			//Если длинаНомераЦифр > длинаВнешнегоНомера Тогда
			//	НомерЦифр = Прав(НомерЦифр, длинаВнешнегоНомера);
			//КонецЕсли;
			// поиск полного соответствия
			//Если НомерЦифр = НомерДляПоиска Тогда
			Если НомерЦифр = Прав(НомерДляПоиска, 7) Тогда
				//КонтрагентСсылка = строкаТ.Ссылка;
				КонтрагентСсылка = строкаТ.Контрагент;
				найден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат КонтрагентСсылка;
КонецФункции

Процедура ОбновитьСтатусы() Экспорт
	СписокСообщений = Новый Массив;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СообщенияСМС.GUID КАК GUID,
	                      |	СообщенияСМС.Статус КАК Статус
	                      |ИЗ
	                      |	РегистрСведений.СообщенияСМС КАК СообщенияСМС
	                      |ГДЕ
	                      |	СообщенияСМС.Статус <> ""Доставлено""
	                      |	И СообщенияСМС.Статус <> ""Не доставлено""
	                      |	И СообщенияСМС.Статус <> ""Ошибка""
	                      |	И СообщенияСМС.Статус <> ""Получено""
	                      |	И СообщенияСМС.Статус <> ""Получено частично""
			      // Исключить служебные
			      |	И СообщенияСМС.Статус <> ""Служебное""
	                      |	И СообщенияСМС.Входящее = ЛОЖЬ");
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Структура = Новый Структура;
		Структура.Вставить("GUID",				Результат.GUID);
		Структура.Вставить("СтатусСообщения",	SMS4B_СтатусВКод(Результат.Статус));
		СписокСообщений.Добавить(Структура);	
	КонецЦикла;
	Если СписокСообщений.Количество() = 0 Тогда Возврат; КонецЕсли;
	КодОшибки = SMS4B_ОбновитьСтатусы(СписокСообщений);
	Если КодОшибки > 0 Тогда
		Для Каждого Строка Из СписокСообщений Цикл
			НаборЗаписей = РегистрыСведений.СообщенияСМС.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.GUID.Установить(Строка.GUID);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() > 0 Тогда
				Если Число(?(ЗначениеЗаполнено(Строка.СтатусСообщения), Строка.СтатусСообщения, 0)) < 0 Тогда
					НаборЗаписей[0].Статус			= SMS4B_КодВСтатус(7); 
					НаборЗаписей[0].ОписаниеОшибки	= SMS4B_ОписаниеОшибокВебСервиса(Строка.СтатусСообщения);
					НаборЗаписей[0].Дата	= ТекущаяДатаСеанса();
				Иначе
					НаборЗаписей[0].Статус			= SMS4B_КодВСтатус(Строка.СтатусСообщения);
					НаборЗаписей[0].ОписаниеОшибки	= "";
					НаборЗаписей[0].Дата	= ТекущаяДатаСеанса();
				КонецЕсли;
				НаборЗаписей.Записать(Истина);
			КонецЕсли; 
		КонецЦикла; 
	ИначеЕсли КодОшибки < 0 Тогда
		SMS4B_ВывестиСообщение(SMS4B_ОписаниеОшибокВебСервиса(КодОшибки) + "(" + КодОшибки + ")'", СтатусСообщения.Важное);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
// Функция предназначена для обновления статусов отправленных sms-сообщений. 
// Для получения статусов необходимо передать в метод массив структур, 
// содержащих GUID тех сообщений, которые необходимо проверить. При успешном 
// выполнении функции все переданные структуры в массиве будут дополнены 
// статусами соответствующих со-общений.
//
// Параметры:
//
//  СписокСообщений (массив) - 	В данный параметр при вызове метода помещается массив структур,
//								содержащих поля sms-сообщений, статус доставки которых необходимо
//								обновить. Статусы сообщений будут записываться при вызове метода 
// 								в поле структуры «СтатусСообщения» для каж-дого обрабатываемого
//								сообщения.
// 
// Возвращаемое значение (число):
// 
// Возвращает числовой код ошибки, 1 - если функция выполнена успешно, и 
// код ошибки < 0, если функция выполнена не успешно.
//
// Состояние сообщения с сервера возвращается в виде числа, представляющего собой бито-вую маску.
// Маска представляет собой сложение четырех наборов бит (всего 32 бита):
//
// Бит:	    31                            16 15 		   8 7             0
// Схема	|0|_|_|_|_|_|_|_|_|_|_|_|_|_|_|F|D|D|D|D|D|D|D|D|A|A|A|A|A|A|A|A| 
// Описание	        зарезервировано	      |   доставлено	|  всего частей
//
// Где,
// - один младший бит F в старшем слове - флаг завершения жизни sms (достижения конечно-го состояния);
// - один байт D - количество частей, доставленных, если требовалось уведомление о доставке, либо 
//   отправленных, если не требовалось;
// - один младший байт A - количество частей, принятых к отправке/доставке;
//
// Описание возвращаемых статусов сообщений:
//  1 - Доставка 
//  2 - В очереди
//  3 - Отправлено 
//  4 - Не отправлено
//  5 - Доставлено
//  6 - Не доставлено 
//  7 - Ошибка отправки 
//  8 - Получено 
//  9 - Частично получено
//
Функция SMS4B_ОбновитьСтатусы(СписокСообщений)
	смсОсновнойСервер = Истина;
	смсНомерСессии = 0;
	КодОшибки = 1;
	// Количество сообщений у которых необходимо обновить статус
	КолвоСообщений = СписокСообщений.Количество();
	// Обработка сообщений
	СчетчикПакетаСообщений = 0;
	// Создаем WS-ссылку
	ВебСервис = SMS4B_ПодключитьВебСервис(смсОсновнойСервер);
	Если ВебСервис = Неопределено Тогда
		SMS4B_ПоменятьСервер(смсОсновнойСервер);
		ВебСервис = SMS4B_ПодключитьВебСервис(смсОсновнойСервер);
		Если ВебСервис = Неопределено Тогда
			КодОшибки = -9;
			Возврат КодОшибки;
		КонецЕсли;	
	КонецЕсли;
	// Получаем фабрику XDTO
	Фабрика   = ВебСервис.ФабрикаXDTO;
	МассивСообщений = Фабрика.Создать(Фабрика.Тип("SMS client", "ArrayOfString"));
	// Размер пакета сообщений
	РазмерПакета = 200;
	// Обрабатываем список сообщений
	Для Каждого Сообщение Из СписокСообщений Цикл
		СчетчикПакетаСообщений = СчетчикПакетаСообщений + 1;
		// Добавляем GUID сообщения в массив
		МассивСообщений.string.Добавить(Сообщение.GUID);
		// Отправка пакета размером "РазмерПакета" (или 1 пакета с количеством меньше "РазмерПакета")
		// или остатка сообщений
		Если (СчетчикПакетаСообщений = РазмерПакета) ИЛИ (СчетчикПакетаСообщений = КолвоСообщений) Тогда
			КолвоСообщений = КолвоСообщений - РазмерПакета;
			Попытка	
				// Запрос статусов сообщений на сервере
				РезультатОтправки = ВебСервис.CheckSMS(смсНомерСессии, МассивСообщений);
			Исключение
				РезультатОтправки = Неопределено;
			КонецПопытки; 
			Если РезультатОтправки = Неопределено Тогда
				// Проблема с интернетом (сервис не ответил)
				КодОшибки = -99999;
			Иначе	
				// Получаем код ошибки
				КодОшибки = РезультатОтправки.Result;
				Если (КодОшибки = -1) ИЛИ (КодОшибки = -2) Тогда
					// Если сессия устарела или её нет
					КодОшибки = SMS4B_Подключиться(смсОсновнойСервер, смсНомерСессии);
					Если КодОшибки > 0 Тогда
						// Пробуем получить ещё раз
						смсНомерСессии = КодОшибки;
						Попытка	
							// Запрос статусов сообщений на сервере
							РезультатОтправки = ВебСервис.CheckSMS(смсНомерСессии, МассивСообщений);
						Исключение
							РезультатОтправки = Неопределено;
						КонецПопытки; 
						Если РезультатОтправки = Неопределено Тогда
							// Проблема с интернетом (сервис не ответил)
							КодОшибки = -99999;
						Иначе	
							// Получаем код ошибки
							КодОшибки = РезультатОтправки.Result;
						КонецЕсли;							
					КонецЕсли;							
				ИначеЕсли (КодОшибки > -20) И (КодОшибки < -2) Тогда
					// Возможно, что Основной сервер не доступен, пробудем переключится на резервный.
					SMS4B_ПоменятьСервер(смсОсновнойСервер);						
					Попытка	
						// Запрос статусов сообщений на сервере
						РезультатОтправки = ВебСервис.CheckSMS(смсНомерСессии, МассивСообщений);
					Исключение
						РезультатОтправки = Неопределено;
					КонецПопытки; 
					// Получим результат отправки
					Если РезультатОтправки = Неопределено Тогда
						// Проблема с интернетом (сервис не ответил)
						КодОшибки = -99999;
					Иначе	
						// Получаем код ошибки
						КодОшибки = РезультатОтправки.Result;
					КонецЕсли;							
				КонецЕсли;
				Если КодОшибки > 0 Тогда 
					// Получаем список со статусами
					СписокСтатусов = РезультатОтправки.List.CheckSMSList;
					Если Тип(СписокСтатусов) = ТипЗнч("ОбъектXDTO") Тогда
						НовыйСписок = Новый ТаблицаЗначений;
						НовыйСписок.Колонки.Добавить("G");
						НовыйСписок.Колонки.Добавить("R");
						НовСтрока = НовыйСписок.Добавить();
						НовСтрока.G = СписокСтатусов.G;
						НовСтрока.R = СписокСтатусов.R;
						СписокСтатусов = НовыйСписок;
					КонецЕсли;
					// Обрабатываем таблицу со статусами
					Для Каждого Строка Из СписокСтатусов Цикл
						// статус возвращается в виде числа представляющего из себя битовую маску
						КодСтатуса = Строка.R;
						ТекСтатус = "";
						ГУИДСообщения = Строка.G;
						ИскомаяСтрока = SMS4B_МассивСтруктурНайти(СписокСообщений, ГУИДСообщения);
						Если ИскомаяСтрока = Неопределено Тогда Продолжить; КонецЕсли; 
						// Ошибка 
						Если Число(КодСтатуса) < 0 Тогда
							ИскомаяСтрока.СтатусСообщения = КодСтатуса;
							Продолжить;
						КонецЕсли; 
						// Раскладываем битовую маску статуса
						к3 = Цел(КодСтатуса / 65536); // если нечетное то статус окончательный, 
													  // если четное - то ещё идет обработка сообщения
						к2 = Цел((КодСтатуса - (к3 * 65536)) / 256);       // количество доставленных частей
						к1 = Цел(КодСтатуса - (к3 * 65536) - (к2 * 256));  // количество частей всего
						// Вычисляем статус сообщения
						Если НЕ к3/2 = Цел(к3/2) Тогда // нечетное
							Если к1 = к2 Тогда
								Если к2 = 0 Тогда
									ТекСтатус = 7; // Ошибка
								Иначе 
									ТекСтатус = 5; // Доставлено
								КонецЕсли;
							Иначе
								Если ИскомаяСтрока.СтатусСообщения = 2 Тогда // статус "В очереди"
									ТекСтатус = 4; // Не отправлено
								ИначеЕсли ИскомаяСтрока.СтатусСообщения = 3 Тогда // статус "Отправлено"
									ТекСтатус = 6; // Не доставлено
								КонецЕсли;	
								Если к2 > 0 Тогда // Обработана часть(и) сообщения
									Если ИскомаяСтрока.СтатусСообщения = 2 Тогда // статус "В очереди"
										// "Отправлено частей " + Строка(к2) + " из " + Строка(к1));
									ИначеЕсли ИскомаяСтрока.СтатусСообщения = 3 Тогда // статус "Отправлено"
										// "Доставлено частей " + Строка(к2) + " из " + Строка(к1));
									КонецЕсли;	
								КонецЕсли;
							КонецЕсли;	
						Иначе // четное !!!
							Если к1 = к2 И ИскомаяСтрока.СтатусСообщения = 2 Тогда // статус "В очереди"
								ТекСтатус = 3; // Отправлено
							ИначеЕсли к2 = 0 ИЛИ (к3 = 0 И к2 < к1) Тогда
								ТекСтатус = 3; // Отправлено
							КонецЕсли;
						КонецЕсли;
						Если НЕ (ИскомаяСтрока = Неопределено) Тогда
							ИскомаяСтрока.СтатусСообщения = ТекСтатус;
						КонецЕсли;
					КонецЦикла; 
					СчетчикПакетаСообщений = 0;
					МассивСообщений.string.Очистить();
				Иначе
					Прервать;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	Возврат КодОшибки;
КонецФункции // SMS4B_ОбновитьСтатусы()

&НаСервере
// Функция осуществляет поиск значения в массиве структур
//
// Параметры:
//	Массив		- Массив	- Массив строк табличной части
//	Значение	- Строка	- Строка поиска
//
// Возвращаемое значение:
//	СтрокаТабличнойЧасти	- Найденная строка
//
Функция SMS4B_МассивСтруктурНайти(Массив, Значение)
	Для Каждого Строка Из Массив Цикл
		Если Строка.GUID = Значение Тогда
			Возврат Строка;
		КонецЕсли; 
	КонецЦикла;
	Возврат Неопределено;
КонецФункции // SMS4B_МассивСтруктурНайти()

// Функция предназначена для перевода числового кода статуса в перечисление 
//
// Параметры:
//	КодСтатуса	- Число	- Числовой код статуса.
// 
// Возвращаемое значение:
//	Строка	- Строковое представление статуса
//
Функция SMS4B_КодВСтатус(КодСтатуса)
	Если КодСтатуса = 1 Тогда
		Статус = "Доставка";
	ИначеЕсли КодСтатуса = 2 Тогда 
		Статус = "В очереди";
	ИначеЕсли КодСтатуса = 3 Тогда 
		Статус = "Отправлено";
	ИначеЕсли КодСтатуса = 4 Тогда 
		Статус = "Не отправлено";
	ИначеЕсли КодСтатуса = 5 Тогда 
		Статус = "Доставлено";
	ИначеЕсли КодСтатуса = 6 Тогда 
		Статус = "Не доставлено";
	ИначеЕсли КодСтатуса = 7 Тогда 
		Статус = "Ошибка";
	ИначеЕсли КодСтатуса = 8 Тогда 
		Статус = "Получено";
	ИначеЕсли КодСтатуса = 9 Тогда 
		Статус = "Получено частично";
	Иначе	
		Статус = "";
	КонецЕсли; 
	Возврат Статус;
КонецФункции // SMS4B_КодВСтатус()

// Функция предназначена для перевода статуса в числовое представление  
//
// Параметры:
//	Статус	- Строка	- Строковое представление статуса
// 
// Возвращаемое значение:
// 	Число	- Числовое представление статуса
//
Функция SMS4B_СтатусВКод(Статус)
	Если Статус = "Доставка" Тогда
		КодСтатуса = 1;
	ИначеЕсли Статус = "В очереди" Тогда
		КодСтатуса = 2;
	ИначеЕсли Статус = "Отправлено" Тогда
		КодСтатуса = 3;
	ИначеЕсли Статус = "Не отправлено" Тогда
		КодСтатуса = 4;
	ИначеЕсли Статус = "Доставлено" Тогда
		КодСтатуса = 5;
	ИначеЕсли Статус = "Не доставлено" Тогда
		КодСтатуса = 6;
	ИначеЕсли Статус = "Ошибка" Тогда
		КодСтатуса = 7;
	ИначеЕсли Статус = "Получено" Тогда
		КодСтатуса = 8;
	ИначеЕсли Статус = "Получено частично" Тогда
		КодСтатуса = 9;
	Иначе	
		КодСтатуса = 0;
	КонецЕсли; 
	Возврат КодСтатуса;
КонецФункции // SMS4B_СтатусВКод()


&НаСервере
// Функция предназначена для отправки группы sms-сообщений на сервер SMS4B. 
// Группу сообщений объединяют единые временные характеристики отправки 
// (дата отправки, актуальность и т.п.). В предметной реализации группой 
// можно считать отдельный документ рассылки либо, например, набор сообщений 
// с незаполненными временными характеристиками.
//							
// Параметры:
//							
//  СписокСообщений (массив) -	Обязательный параметр. Содержит массив структур, содержащих поля
//								sms-сообщений, предназначенных для отправки на сервер.
//							
// НомерОтправителя (строка) - 	Обязательный параметр. Номер, с которого отправляются сообщения.
//							
//  ТекстСообщенияПоУмолчанию (строка) - Необязательный параметр. Данный текст будет использоваться
//								для отправки тем получателям, для которых в списке сообщений не указан
//								текст сообщения. В случае групповой рассылки сообщений с одним общим
//								текстом достаточно заполнить данный параметр и в списке сообщений 
//								нигде не указывать текст сообщения. В случае если для получателя указан
//								персональный текст, текст по умолчанию не будет использоваться для
//								отправки сообщения данному получателю.
//							
//  ДатаОтправки (дата) - 		Необязательный параметр. Дата начала отправки sms-сообщения
//							
//  Актуальность (дата) - 		Необязательный параметр. Дата, до которой сообщение будет пытаться
//								отправиться сервером sms4b.
//							
//  НачалоПериодаЗапрета (дата) - Необязательный параметр. Указывает, с какого времени начинается период,
//								в который сообщения не должны отправляться (например, чтобы они не 
//								приходили получателям ночью). Актуальным является только временная часть
//								даты (ЧЧ:ММ:СС). Сама дата (ДД.ММ,ГГГГ) не анализируется и может быть 
//								передана любая (в том числе пустая).
//							
// - КонецПериодаЗапрета (дата) - Необязательный параметр. Указывает время окончания периода, в который
//								сообщения не должны отправляться (например, чтобы они не приходили 
//								получателям ночью). Актуальным является только временная часть даты 
//								(ЧЧ:ММ:СС). Сама дата (ДД.ММ,ГГГГ) не анализируется и может быть передана 
//								любая (в том числе пустая).
//							
// - РавномернаяРассылка(булево) - Необязательный параметр. Содержит признак равномерной рассылки. При 
//								использовании равномерной рассылки сообщения группы будут отправляться
//								через равные промежутки времени пропорционально периоду рассылки. 
//								Значение по умолчанию - ложь.
//
// 
// Возвращаемое значение (число):
// 
// Возвращает числовой код ошибки, 1 - если функция выполнена успешно, 
// и код ошибки < 0, если функция выполнена не успешно.
//
Функция SMS4B_ОтправитьСообщения(СписокСообщений, НомерОтправителя, ТекстСообщенияПоУмолчанию = "", _ДатаОтправки, _Актуальность = '00010101', НачалоПериодаЗапрета = '00010101', КонецПериодаЗапрета = '00010101', РавномернаяРассылка = Ложь)
	смсНомерСессии = 0;
	смсОсновнойСервер = Истина;
	
	КодОшибки = 1;
	// Устанавливаем код группы равным 0
	КодГруппы = 0;
	// Количество отправляемых сообщений
	КолвоСообщений = СписокСообщений.Количество();
	// Размер пакета сообщений для отправки на сервер
	РазмерПакета = 100;
	// Все сообщения отправились успешно
	ЕстьНеОтправленныеСообщения = Ложь;
	// Создаем структуру с путой датой
	СтруктураДаты = Новый Структура();
	СтруктураДаты.Вставить("Дата", Дата('00010101'));
	СтруктураДаты.Вставить("Миллисекунда", 0);
	// Переводим дату отправки и дату актуальности к времени UTC
	ДатаОтправкиUTC = SMS4B_ПривестиДатуКUTC(_ДатаОтправки);
	АктуальностьUTC = SMS4B_ПривестиДатуКUTC(_Актуальность);
	// Переводим дату отправки и дату актуальности в строку
	СтруктураДаты.Дата = ДатаОтправкиUTC;
	ДатаОтправки       = SMS4B_ДатаВСтроку(СтруктураДаты); // Дата отправки СМС в формате "YYYYMMDD"
	СтруктураДаты.Дата = АктуальностьUTC;
	Актуальность	   = SMS4B_ДатаВСтроку(СтруктураДаты); // Дата жизни СМС в формате "YYYYMMDD"
	// Если указан период запрета отправки, то заполним его
	Если ЗначениеЗаполнено(НачалоПериодаЗапрета) И ЗначениеЗаполнено(КонецПериодаЗапрета) Тогда
		НачалоПериодаЗапретаUTC = SMS4B_ПривестиДатуКUTC(НачалоПериодаЗапрета);
		КонецПериодаЗапретаUTC  = SMS4B_ПривестиДатуКUTC(КонецПериодаЗапрета);
		Период = SMS4B_ПолучитьРазрешенныйПериодОтправки(НачалоПериодаЗапретаUTC, КонецПериодаЗапретаUTC);
	Иначе
		Период = "";	
	КонецЕсли;	
	// Обработка таблицы сообщений
	СчетчикПакетаСообщений = 0;
	// Подключаем веб-сервис
	ВебСервис = SMS4B_ПодключитьВебСервис(смсОсновнойСервер);
	Если ВебСервис = Неопределено Тогда
		SMS4B_ПоменятьСервер(смсОсновнойСервер);
		ВебСервис = SMS4B_ПодключитьВебСервис(смсОсновнойСервер);
		Если ВебСервис = Неопределено Тогда
			КодОшибки = -9;
			Возврат КодОшибки;
		КонецЕсли;	
	КонецЕсли;
	// Получаем фабрику XDTO
	Фабрика  = ВебСервис.ФабрикаXDTO;
	МассивСообщений = Фабрика.Создать(Фабрика.Тип("SMS client", "ArrayOfGroupSMSList"));
	// Если какие то сообщения не удастся отправить с первого раза, отправим на второй итерации
	КолвоОтправок = 2;
	Для Индекс = 1 По КолвоОтправок Цикл
		ТекущийИндекс = -1;
		Для Каждого Сообщение Из СписокСообщений Цикл
			ТекущийИндекс = ТекущийИндекс + 1;
			// Уже отправленное сообщение
			Если Сообщение.КодОшибки = 1 Тогда Продолжить; КонецЕсли; 
			СчетчикПакетаСообщений = СчетчикПакетаСообщений + 1;
			// Получаем кодировку сообщения, если русский текст то 1, иначе 0
			Кодировка = SMS4B_Использовать7БитСообщение(Сообщение.ТекстСообщения);
			// Создаем и заполняем строку массива сообщений
			СтрокаМассива = Фабрика.Создать(Фабрика.Тип("SMS client", "GroupSMSList"));
			СтрокаМассива.Установить("B", ?(ЗначениеЗаполнено(Сообщение.ТекстСообщения), SMS4B_СтрокуВШестнадцатеричноеПредставление(Сообщение.ТекстСообщения, Кодировка), ""));
			СтрокаМассива.Установить("D", Сообщение.НомерПолучателя);
			СтрокаМассива.Установить("E", Кодировка);
			СтрокаМассива.Установить("G", Сообщение.GUID);
			МассивСообщений.GroupSMSList.Добавить(СтрокаМассива);
			// Отправка пакета сообщений или остатка сообщений
			Если (СчетчикПакетаСообщений = РазмерПакета) ИЛИ (СчетчикПакетаСообщений = КолвоСообщений) Тогда
				КолвоСообщений = КолвоСообщений - РазмерПакета;
				Если ЗначениеЗаполнено(ТекстСообщенияПоУмолчанию) Тогда
					КодировкаСообщенияШапки = SMS4B_Использовать7БитСообщение(ТекстСообщенияПоУмолчанию);
				Иначе
					КодировкаСообщенияШапки = 0;
				КонецЕсли; 
				Попытка
					// Если первая отправка, то код группы = -2 если требуется равномерная рассылка, или -1 если не требуется
					Cod = ?(КодГруппы = 0, ?(РавномернаяРассылка, -2, -1), КодГруппы); // КодГруппы
					// Переводим общий текст в шестнадцатеричное представление
					Bdy = ?(ЗначениеЗаполнено(ТекстСообщенияПоУмолчанию), SMS4B_СтрокуВШестнадцатеричноеПредставление(ТекстСообщенияПоУмолчанию, КодировкаСообщенияШапки), "");
					// Отправка сообщений на сервер
					РезультатОтправки = ВебСервис.GroupSMS(смсНомерСессии, Cod, Строка(НомерОтправителя), КодировкаСообщенияШапки, Bdy, Актуальность, ДатаОтправки, Период, МассивСообщений);
				Исключение
					РезультатОтправки = Неопределено;
				КонецПопытки;
				// Проверяем результат отправки
				Если РезультатОтправки = Неопределено Тогда
					// Проблема с интернетом (сервис не ответил)
					КодОшибки = -99999;
				Иначе
					// Получаем код ошибки
					КодОшибки = РезультатОтправки.Result;
					Если (КодОшибки = -1) ИЛИ (КодОшибки = -2) Тогда
						// Если сессия устарела или её нет
						КодОшибки = SMS4B_Подключиться(смсОсновнойСервер, смсНомерСессии);
						Если КодОшибки > 0 Тогда
							// Пробуем получить ещё раз
							смсНомерСессии = КодОшибки;
							Попытка
								// Пробуем отправить ещё раз
								РезультатОтправки = ВебСервис.GroupSMS(смсНомерСессии, Cod, Строка(НомерОтправителя), КодировкаСообщенияШапки, Bdy, Актуальность, ДатаОтправки, Период, МассивСообщений);
							Исключение
								РезультатОтправки = Неопределено;
							КонецПопытки;
							Если РезультатОтправки = Неопределено Тогда
								// Проблема с интернетом (сервис не ответил)
								КодОшибки = -99999;
							Иначе	
								// Получаем код ошибки
								КодОшибки = РезультатОтправки.Result;
							КонецЕсли;							
						КонецЕсли;							
					ИначеЕсли (КодОшибки > -20) И (КодОшибки < -2) Тогда
						// Возможно, что Основной сервер не доступен, пробудем переключится на резервный.
						SMS4B_ПоменятьСервер(смсОсновнойСервер);						
						Попытка
							// Пробуем отправить ещё раз
							РезультатОтправки = ВебСервис.GroupSMS(смсНомерСессии, Cod, Строка(НомерОтправителя), КодировкаСообщенияШапки, Bdy, Актуальность, ДатаОтправки, Период, МассивСообщений);
						Исключение
							РезультатОтправки = Неопределено;
						КонецПопытки;
						// Получим результат отправки
						Если РезультатОтправки = Неопределено Тогда
							// Проблема с интернетом (сервис не ответил)
							КодОшибки = -99999;
						Иначе	
							// Получаем код ошибки
							КодОшибки = РезультатОтправки.Result;
						КонецЕсли;							
					КонецЕсли;
					Если КодОшибки > 0 Тогда 
						// Запоминаем код созданной группы
						КодГруппы = РезультатОтправки.Group;
						// Записываем результат отправки каждого из сообщений
						КолвоОтправленных = РезультатОтправки.List.CheckSMSList.Количество();
						Для Счетчик = 1 По КолвоОтправленных Цикл
							ТекСообщение  = СписокСообщений.Получить((ТекущийИндекс - КолвоОтправленных) + Счетчик);
							ОтпрСообщение = РезультатОтправки.List.CheckSMSList.Получить(Счетчик - 1);
							Если ТекСообщение.GUID = ОтпрСообщение.G Тогда
								ТекСообщение.КодОшибки = ОтпрСообщение.R;
							КонецЕсли;
							// Есть ли неотправленные сообщения
							Если ТекСообщение.КодОшибки < 0 Тогда 
								ЕстьНеОтправленныеСообщения = Истина;
							КонецЕсли;
						КонецЦикла; 
						// Очищаем список отправленных сообщений
						СчетчикПакетаСообщений = 0;
						МассивСообщений.GroupSMSList.Очистить();
					Иначе	
						// Ошибка при отправке
						ЕстьНеОтправленныеСообщения = Ложь;
						Прервать;
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		// Если есть не отправленные, то повторяем отправку ещё один раз
		Если НЕ ЕстьНеОтправленныеСообщения Тогда Прервать; КонецЕсли; 
	КонецЦикла;
	SMS4B_Отключиться(смсОсновнойСервер, смсНомерСессии);
	Возврат КодОшибки;
КонецФункции // SMS4B_ОтправитьСообщения()



&НаСервере
// Функция переводит обычную строку в шестнадцатеричное представление
//
// Параметры:
//	ТекстСообщения	- Строка	- Текст сообщения
//	ТипКодировки	- Число		- Тип кодировки (1 - каждый символ 
//								  представляется 2 байтами, 0 - 1 байтом)
//
// Возвращаемое значение:
//	Строка	- Строка после перекодировки
//
Функция SMS4B_СтрокуВШестнадцатеричноеПредставление(ТекстСообщения, ТипКодировки) // Str2Hex
	СтрокаЗнаков = "";
	Если ТипКодировки = 1 Тогда
		ДлинаКодаСимвола = 4;
	Иначе
		ДлинаКодаСимвола = 2;
	КонецЕсли;
	Для К = 1 По СтрДлина(ТекстСообщения) Цикл
		СтрокаЗнаков = СтрокаЗнаков + SMS4B_ДополнитьСтроку(SMS4B_ДесятичноеВШестнадцатеричное(КодСимвола(Сред(ТекстСообщения, К, 1))), ДлинаКодаСимвола, "0");
	КонецЦикла;
	Возврат СтрокаЗнаков;
КонецФункции // SMS4B_СтрокуВШестнадцатеричноеПредставление()

&НаСервере
// Функция дополняет строку до указанной длины определенным символов
//
// Параметры:
//	Стр		- Строка	- Строка
//	Длина	- Число		- Длина строки
//	Чем		- Строка	- Символ для добавления
//
// Возвращаемое значение:
//	Строка	- Строка, дополненная до указанной длины
//
Функция SMS4B_ДополнитьСтроку(Знач Стр, Длина, Чем = " ")  // Padl
	СимволовДополнить = Длина - СтрДлина(Стр);
	Добавок = "";
	Для Н = 1 По СимволовДополнить Цикл
		Добавок = Добавок + Чем;
	КонецЦикла;
	Возврат  Добавок + Стр;
КонецФункции // SMS4B_ДополнитьСтроку()

&НаСервере
// Функция определяет какую кодировку необходимо пременять к тексту сообщения
//
// Параметры:
//	Сообщение	- Строка	- Текст сообщения
//
// Возвращаемое значение:
//	Число	- Вид кодировки	- 0 - латинский, 1 - другие алфавиты, в т.ч. русский
//
Функция SMS4B_Использовать7БитСообщение(Сообщение)
	ДлинаСообщения = СтрДлина(Сообщение);
	Результат = 0;
	Для К = 1 По ДлинаСообщения Цикл
		ТекСимвол = Сред(Сообщение, К, 1);
		Если ТекСимвол = "@" Тогда
			Продолжить;
		ИначеЕсли ТекСимвол = "$" Тогда
			Продолжить;
		ИначеЕсли КодСимвола(ТекСимвол) > 122 Тогда
  			Результат = 1;
			Прервать;
		ИначеЕсли КодСимвола(ТекСимвол) > 96 Тогда
			Продолжить;
		ИначеЕсли  КодСимвола(ТекСимвол) > 91 Тогда
  			Результат = 1;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	Возврат Результат;
КонецФункции // SMS4B_Использовать7БитСообщение()

&НаСервере
// Функция возвращает символьное представление разрешенного периода отправки
//
// Параметры:
//	НачалоПериода	- Дата	- Дата начала разрешенного периода
//	КонецПериода	- Дата	- Дата конца разрешенного периода
//
// Возвращаемое значение:
//	Строка	- Символьное представление разрешенного периода отправки
//
Функция SMS4B_ПолучитьРазрешенныйПериодОтправки(НачалоПериода, КонецПериода)
	СимволНачала	= Символ(65 + Час(КонецПериода));
	СимволКонца		= Символ(65 + Час(НачалоПериода-3600));
	СтрокаВозврата	= СимволНачала + СимволКонца;
	Если Найти("XWVUTSRQPONMLKJIHGFEDCBAX", СтрокаВозврата) > 0 Тогда
		СтрокаВозврата	= "";
	КонецЕсли;	
	Возврат СтрокаВозврата;
КонецФункции // SMS4B_ПолучитьРазрешенныйПериодОтправки()

Процедура ОтправитьОтложенныеСМС() Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОтложенныеСообщенияСМС.GUID,
	                      |	ОтложенныеСообщенияСМС.Объект,
	                      |	ОтложенныеСообщенияСМС.Дата,
	                      |	ОтложенныеСообщенияСМС.ТекстСообщения,
	                      |	ОтложенныеСообщенияСМС.НомерТелефона
	                      |ИЗ
	                      |	РегистрСведений.ОтложенныеСообщенияСМС КАК ОтложенныеСообщенияСМС
	                      |ГДЕ
	                      |	ОтложенныеСообщенияСМС.Дата <= &Дата");
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Результат = Запрос.Выполнить().Выбрать();
	СписокСообщений = Новый Массив;
	Пока Результат.Следующий() Цикл
		
		Структура = Новый Структура;
		Структура.Вставить("GUID",				Результат.GUID);
		Структура.Вставить("НомерПолучателя",	Результат.НомерТелефона);
		Структура.Вставить("КодОшибки",			0);
		Структура.Вставить("ТекстСообщения",	Результат.ТекстСообщения);
		Структура.Вставить("Объект", 			Результат.Объект);
		СписокСообщений.Добавить(Структура);
		
	КонецЦикла;
	Если СписокСообщений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Актуальность = ТекущаяДатаСеанса() + (24 * 3600);
	смсИмяПользователяПоУмолчанию = Константы.УчеткаSMSРассылок.Получить().Отправитель;
	КодОшибки = SMS4B_ОтправитьСообщения(СписокСообщений, смсИмяПользователяПоУмолчанию, "", ТекущаяДатаСеанса(), Актуальность);
	Если КодОшибки > 0 Тогда
		Для Каждого Строка Из СписокСообщений Цикл
			Если Строка.КодОшибки > 0 Тогда
				НачатьТранзакцию();
				Попытка
					НаборЗаписей = РегистрыСведений.СообщенияСМС.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.GUID.Установить(Строка.GUID);
					НаборЗаписей.Прочитать();
					Если НаборЗаписей.Количество() = 0 Тогда
						Запись = НаборЗаписей.Добавить();
						Запись.GUID = Строка.GUID;
						Запись.Статус = "В очереди";
						Запись.Дата = ТекущаяДатаСеанса();
						КороткийНомер = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(Строка.НомерПолучателя);
						Запись.Объект	= НайтиКонтрагентаПоНомеруВКонтактах(КороткийНомер);
						Запись.Входящее = Ложь;
						Запись.ТекстСообщения = Строка.ТекстСообщения;
						Запись.НомерТелефона = Строка.НомерПолучателя;
						Запись.ОписаниеОшибки = "";
						НаборЗаписей.Записать(Истина);
						
						НаборЗаписей = РегистрыСведений.ОтложенныеСообщенияСМС.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.GUID.Установить(Строка.GUID);
						НаборЗаписей.Записать(Истина);	
					КонецЕсли;
					ЗафиксироватьТранзакцию();	
				Исключение
					ОтменитьТранзакцию();
					Сообщить(ОписаниеОшибки());
				КонецПопытки;				
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли КодОшибки < 0 Тогда	
		SMS4B_ВывестиСообщение(SMS4B_ОписаниеОшибокВебСервиса(КодОшибки) + "(" + КодОшибки + ")'", СтатусСообщения.Важное);
	КонецЕсли;	
КонецПроцедуры

Процедура ОтправитьСписокСМС(СписокСообщений) Экспорт

	Если СписокСообщений.Количество() = 0 Тогда Возврат; КонецЕсли;
	Актуальность = ТекущаяДатаСеанса() + (24 * 3600);
	смсИмяПользователяПоУмолчанию = Константы.УчеткаSMSРассылок.Получить().Отправитель;
	КодОшибки = SMS4B_ОтправитьСообщения(СписокСообщений, смсИмяПользователяПоУмолчанию, "", ТекущаяДатаСеанса(), Актуальность);
	Если КодОшибки > 0 Тогда
		Для Каждого Строка Из СписокСообщений Цикл
			Если Строка.КодОшибки > 0 Тогда
				НачатьТранзакцию();
				Попытка
					НаборЗаписей = РегистрыСведений.СообщенияСМС.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.GUID.Установить(Строка.GUID);
					НаборЗаписей.Прочитать();
					Если НаборЗаписей.Количество() = 0 Тогда
						Запись = НаборЗаписей.Добавить();
						Запись.GUID = Строка.GUID;
						Запись.Статус = "В очереди";
						Запись.Дата = ТекущаяДатаСеанса();
						КороткийНомер = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(Строка.НомерПолучателя);
						Запись.Объект	= НайтиКонтрагентаПоНомеруВКонтактах(КороткийНомер);
						Запись.Входящее = Ложь;
						Запись.ТекстСообщения = Строка.ТекстСообщения;
						Запись.НомерТелефона = Строка.НомерПолучателя;
						Запись.ОписаниеОшибки = "";
						НаборЗаписей.Записать(Истина);	
					КонецЕсли;
					ЗафиксироватьТранзакцию();	
				Исключение
					ОтменитьТранзакцию();
					Сообщить(ОписаниеОшибки());
				КонецПопытки;				
			КонецЕсли;
		КонецЦикла;
		// Сообщить("Сообщения успешно отправлены!", СтатусСообщения.Важное);
	ИначеЕсли КодОшибки < 0 Тогда	
		SMS4B_ВывестиСообщение(SMS4B_ОписаниеОшибокВебСервиса(КодОшибки) + "(" + КодОшибки + ")'", СтатусСообщения.Важное);
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
// Процедура выполняет отключение от SMS4B
//
// Возвращаемое значение (число):
// 
// Возвращает числовой код ошибки, 1 - если функция выполнена успешно, 
// и код ошибки < 0, если функция выполнена не успешно.
//
Процедура SMS4B_Отключиться(смсОсновнойСервер, смсНомерСессии)
	ВебСервис = SMS4B_ПодключитьВебСервис(смсОсновнойСервер);
	Если ВебСервис = Неопределено Тогда
		SMS4B_ПоменятьСервер(смсОсновнойСервер);
		ВебСервис = SMS4B_ПодключитьВебСервис(смсОсновнойСервер);
		Если ВебСервис = Неопределено Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	Попытка
		ВебСервис.CloseSession(смсНомерСессии);
		смсНомерСессии = 0;
	Исключение
		Возврат;
	КонецПопытки;
	
КонецПроцедуры // SMS4B_Отключиться()

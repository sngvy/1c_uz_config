
Процедура ОбработатьRejectФайл() Экспорт 
	
	Если НЕ ЗначениеЗаполнено(ТекстФайлаОтказа) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Скопируйте текст или выберете файл отказа REJECTED!"; 
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(НастройкаВыгрузки) = Тип("СправочникСсылка.НастройкиВыгрузкиНБКИ_RUTDF") Тогда
		ОбработатьRejectФайлRUTDF();
	Иначе 
		ОбработатьRejectФайлXML();
	КонецЕсли;	 
КонецПроцедуры 

Процедура ОбработатьRejectФайлRUTDF() 	
	ТипФайлаОтказа = ОпределитьПолныйЧастичныйОтказ(ТекстФайлаОтказа);
	Если ТипФайлаОтказа = Перечисления.НБКИ_ТипыОтказов.Полный Тогда
		ПроставитьДокументуНеПринято();
	ИначеЕсли ТипФайлаОтказа =  Перечисления.НБКИ_ТипыОтказов.Частичный Тогда
		Успех = Истина;	
		ПроставитьЗаписямНепринятоПоЗаголовкамГрупХедер(Успех, ТекстФайлаОтказа); 
		Если НЕ Успех Тогда
			тзМассивДанных = СформироватьТаблицуОшибок(ТекстФайлаОтказа); 
			ПроставитьЗаписямНепринято(тзМассивДанных); 
		КонецЕсли;
	Иначе
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Ошибка чтения файла-отказа!"; 
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры 


Функция ОпределитьПолныйЧастичныйОтказ(RejectФайл) Экспорт  
	МассивСтрок = СтрРазделить(Строка(RejectФайл), Символы.ПС, Ложь);
	Для Каждого стр Из МассивСтрок Цикл  
		ТипОтказа =  Перечисления.НБКИ_ТипыОтказов.Частичный; 
		Если СтрНайти(стр, "ERROR	HEADER") > 0 ИЛИ СтрНайти(стр, "ERROR	0_GROUPHEADER	M") > 0 
				ИЛИ СтрНайти(стр, "ERROR	0_GROUPHEADER	NUM") > 0 ИЛИ СтрНайти(стр, "ERROR	TRAILER") > 0 Тогда 
			ТипОтказа = Перечисления.НБКИ_ТипыОтказов.Полный;
			Прервать;
		КонецЕсли; 
	КонецЦикла;     
	
	ЗаполнитьДатуИмяОтказа(МассивСтрок[0]);
	
	Возврат ТипОтказа;
КонецФункции  

Процедура ПроставитьДокументуНеПринято() Экспорт	
	Набор = РегистрыСведений.ЖурналВыгрузокНБКИRUTDF.СоздатьНаборЗаписей();
	Набор.Отбор.ДокументОтчет.Установить(ЭтотОбъект.Ссылка);
	Набор.Прочитать(); 
	Для Каждого Запись Из Набор Цикл  
		Запись.Принято = Перечисления.СтатусыОтчетаНБКИ.НеПринято;
	КонецЦикла;	
	
	Набор.Записать(); 
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = "Документ полностью НЕ принят!"; 
	Сообщение.Сообщить();
КонецПроцедуры 

Процедура ПроставитьЗаписямНепринято(тзИдентификаторовИСобытий) Экспорт
	Если тзИдентификаторовИСобытий  = Неопределено Тогда
		Возврат;
	КонецЕсли;    
	
	Набор = РегистрыСведений.ЖурналВыгрузокНБКИRUTDF.СоздатьНаборЗаписей();
	Набор.Отбор.ДокументОтчет.Установить(ЭтотОбъект.Ссылка); 
	Набор.Прочитать();
	Для Каждого Запись Из Набор Цикл  
		Запись.Принято = Перечисления.СтатусыОтчетаНБКИ.Принято;
	КонецЦикла;	
	Набор.Записать(); 
	
	
	Набор = РегистрыСведений.ЖурналВыгрузокНБКИRUTDF.СоздатьНаборЗаписей();
	Набор.Отбор.ДокументОтчет.Установить(ЭтотОбъект.Ссылка);
	Набор.Прочитать();
	
	Для каждого Стр из тзИдентификаторовИСобытий Цикл
		
		Для Каждого Запись Из Набор Цикл 
			Если Стр.Событие = Запись.Событие И Стр.Идентификатор = Запись.Идентификатор  И Стр.Операция = Запись.Операция и НачалоДня(Стр.ДатаСобытия) = НачалоДня(Запись.ДатаСобытия) Тогда
				Запись.Принято = Перечисления.СтатусыОтчетаНБКИ.НеПринято; 
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = "Не принято: " + Строка(Запись.ОбъектУчета) + " " + Строка(Запись.Событие); 
				Сообщение.Сообщить();
			КонецЕсли;	
		КонецЦикла;	 
		
	КонецЦикла;
	
	Набор.Записать();
КонецПроцедуры 

Функция СформироватьТаблицуОшибок(RejectФайл) Экспорт
	СтруктураМассивов = Новый Структура;
	ТаблицаОшибочныхЗаписей = Новый ТаблицаЗначений;
	ТаблицаОшибочныхЗаписей.Колонки.Добавить("Идентификатор");
	ТаблицаОшибочныхЗаписей.Колонки.Добавить("Событие");
	ТаблицаОшибочныхЗаписей.Колонки.Добавить("Операция");
	ТаблицаОшибочныхЗаписей.Колонки.Добавить("ДатаСобытия");
	МассивСтрок = СтрРазделить(Строка(RejectФайл), Символы.ПС, Ложь);
	Для Каждого стр Из МассивСтрок Цикл 
		Если СтрНайти(стр, "0_GROUPHEADER") > 0 Тогда  
			Подстроки = СтрРазделить(стр, Символы.Таб, Ложь);
			ПодстрокаСобытие = Подстроки[2];
			ПодстрокаОперация = Подстроки[3];
			Попытка
				ПодстрокаДата = Дата(Подстроки[4] + " 00:00:00");
			Исключение
				ПодстрокаДата = Дата(Подстроки[5] + " 00:00:00");
			КонецПопытки;
			Событие = Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", ПодстрокаСобытие);
			Если Не ЗначениеЗаполнено(Событие) Тогда
				Событие = Справочники.КредитныеИсторииСобытияСубъекта.НайтиПоРеквизиту("КодНБКИ", ПодстрокаСобытие);
			КонецЕсли;
			
			Операция = Перечисления.ВидыОперацийОтчетаRUTDF[ПодстрокаОперация];
			
			Нстр = ТаблицаОшибочныхЗаписей.Добавить();
			Нстр.Событие = Событие;
			Нстр.Операция = Операция; 
			Нстр.ДатаСобытия = ПодстрокаДата;
			Продолжить;
		Иначе	
			Если СтрНайти(стр, "C4_ID") > 0 Тогда  
				Если СтрНайти(стр, "ERROR") = 0 Тогда
					АЙДИ = СтрЗаменить(стр, Символы.Таб, ""); 
					АЙДИ = СтрЗаменить(АЙДИ, "C4_ID", "");
					Идентификатор  = Лев(АЙДИ, 38);
					Нстр.Идентификатор = СокрЛП(Идентификатор);  
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрНайти(стр, "B3_REGNUM") > 0 Тогда 
				Идентификатор = СтрЗаменить(стр, "B3_REGNUM	", "");
				Идентификатор = СтрЗаменить(Идентификатор, Символы.Таб, " "); 
				Если СтрНайти(Идентификатор, "ERROR") = 0 Тогда
					Нстр.Идентификатор = СокрЛП(Идентификатор); 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрНайти(стр, "C17_UID") > 0 ИЛИ СтрНайти(стр, "B10_UID") > 0 Тогда 
				Идентификатор = СтрЗаменить(стр, "C17_UID	", "");
				Идентификатор = СтрЗаменить(Идентификатор, "B10_UID	", "");
				Если СтрНайти(Идентификатор, "ERROR") = 0 Тогда
					Нстр.Идентификатор = СокрЛП(Идентификатор);
					Продолжить;
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЕсли;
	КонецЦикла; 
	
	Возврат ТаблицаОшибочныхЗаписей;
КонецФункции  	

Функция СформироватьФайлыВыгрузкиRUTDF(ТекстСообщения) Экспорт 
	Если ЭтотОбъект.Ссылка.Пустая() Тогда
		ДокОтчетСсылка = Документы.НБКИДокументRUTDF.ПустаяСсылка(); 
		ЭтотОбъект.УстановитьСсылкуНового(ДокОтчетСсылка);   
		ЭтотОбъект.УстановитьНовыйНомер();
		ЭтотОбъект.Записать();
	КонецЕсли;	    
	
	СсылкаНаДокумент = ЭтотОбъект.Ссылка;

	ДатаОтчета = Дата; 
	
	ТекстовыйДок = Новый ТекстовыйДокумент;
	СтрокаЗаголовок = КредитныеИстории.СформироватьТекстЗаголовкаHEADER(НастройкаВыгрузки, ИмяФайла, ДатаОтчета, НепринятыйДокумент);
	ТекстовыйДок.ДобавитьСтроку(СтрокаЗаголовок);
	
	КоличествоОбъектовУчета = 0;
	КоличествоГруппБлоков = 0; 
	
	ЭтоКорректировка = ЗначениеЗаполнено(ЭтотОбъект.НепринятыйДокумент);
		
	Если тчНовыеЗаписиА.Количество() > 0 и Операция = Перечисления.ВидыОперацийОтчетаRUTDF.A Тогда
		ОперацияЗнач = "A";  
		Если ЭтоКорректировка Тогда
			МассивВыборокИзменений = КредитныеИстории.ПолучитьНепринятыеЗаписиПоОбъектамУчета(тчНовыеЗаписиА, ЭтотОбъект.НепринятыйДокумент);
		Иначе
			МассивВыборокИзменений = КредитныеИстории.ПолучитьИзмененияПоОбъектамУчета(тчНовыеЗаписиА, ДатаОтчета); 
		КонецЕсли;
		МассивТитульныеЗаписи = КредитныеИстории.СформироватьТитульныеЗаписиПоДолжникам(тчНовыеЗаписиА.ВыгрузитьКолонку("Должник"));
		МассивПоручители = КредитныеИстории.СформироватьТитульныеЗаписиПоПоручителям(тчНовыеЗаписиА.ВыгрузитьКолонку("ОбъектУчета"));
		МассивНаследники = КредитныеИстории.СформироватьТитульныеЗаписиПоНаследникам(тчНовыеЗаписиА.ВыгрузитьКолонку("ОбъектУчета"));
		
		ПараметрыТитульники = новый Структура;
		ПараметрыТитульники.Вставить("ТитульныеЗаписиДолжника", МассивТитульныеЗаписи);
		ПараметрыТитульники.Вставить("ТитульныеЗаписиПоручителя", МассивПоручители);
		ПараметрыТитульники.Вставить("ТитульныеЗаписиНаследника", МассивНаследники);
		
		ТаблицаСтрок = КредитныеИстории.СформироватьТелоОтчета(КоличествоОбъектовУчета, КоличествоГруппБлоков, НастройкаВыгрузки, ОперацияЗнач, МассивВыборокИзменений, ПараметрыТитульники, ДатаОтчета, СсылкаНаДокумент); 
		
		Для каждого стр из ТаблицаСтрок Цикл 
			ТекстовыйДок.ДобавитьСтроку(стр.Строка);	
		КонецЦикла;	   
		КоличествоГруппБлоков = КоличествоГруппБлоков - 1;
		// КоличествоОбъектовУчета = КоличествоОбъектовУчета + тчНовыеЗаписиА.Количество() * 2; 
				
		ТекстСообщения = ТекстСообщения + " Новых событий А: " + Строка(КоличествоГруппБлоков) + Символы.ПС; 
		
	КонецЕсли;
	
	Если тчОбновляемыеЗаписиB.Количество() > 0 и Операция = Перечисления.ВидыОперацийОтчетаRUTDF.B Тогда
		ОперацияЗнач = "B"; 
		Если ЭтоКорректировка Тогда
			МассивВыборокИзменений = КредитныеИстории.ПолучитьНепринятыеЗаписиПоОбъектамУчета(тчОбновляемыеЗаписиB, ЭтотОбъект.НепринятыйДокумент);
		Иначе       
			КредитныеИстории.ФиксированиеОбязательнойВыгрузки(тчОбновляемыеЗаписиB, ДатаОтчета);
			МассивВыборокИзменений = КредитныеИстории.ПолучитьИзмененияПоОбъектамУчета(тчОбновляемыеЗаписиB, ДатаОтчета);  
		КонецЕсли;
		МассивТитульныеЗаписи = КредитныеИстории.СформироватьТитульныеЗаписиПоДолжникам(тчОбновляемыеЗаписиB.ВыгрузитьКолонку("Должник"));
		МассивПоручители = КредитныеИстории.СформироватьТитульныеЗаписиПоПоручителям(тчОбновляемыеЗаписиB.ВыгрузитьКолонку("ОбъектУчета"));
		МассивНаследники = КредитныеИстории.СформироватьТитульныеЗаписиПоНаследникам(тчОбновляемыеЗаписиB.ВыгрузитьКолонку("ОбъектУчета"));
		
		ПараметрыТитульники = новый Структура;
		ПараметрыТитульники.Вставить("ТитульныеЗаписиДолжника", МассивТитульныеЗаписи);
		ПараметрыТитульники.Вставить("ТитульныеЗаписиПоручителя", МассивПоручители);
		ПараметрыТитульники.Вставить("ТитульныеЗаписиНаследника", МассивНаследники);
		
		ТаблицаСтрок = КредитныеИстории.СформироватьТелоОтчета(КоличествоОбъектовУчета, КоличествоГруппБлоков, НастройкаВыгрузки, ОперацияЗнач, МассивВыборокИзменений, ПараметрыТитульники, ДатаОтчета, СсылкаНаДокумент); 
		
		Для каждого стр из ТаблицаСтрок Цикл 
			ТекстовыйДок.ДобавитьСтроку(стр.Строка);	
		КонецЦикла;	
		КоличествоГруппБлоков = КоличествоГруппБлоков - 1;
		// КоличествоОбъектовУчета = КоличествоОбъектовУчета + тчОбновляемыеЗаписиB.Количество() * 2; 
		
		ТекстСообщения = ТекстСообщения + " Обновленных событий В: " + Строка(КоличествоГруппБлоков) + Символы.ПС; 
	КонецЕсли;	 
	
	Если тчИсправляемыеЗаписиC.Количество() > 0 и Операция = Перечисления.ВидыОперацийОтчетаRUTDF.C Тогда
		ОперацияЗнач = "C"; 
		
		МассивВыборокИзменений = Неопределено;
		
		МассивТитульныеЗаписи = КредитныеИстории.СформироватьТитульныеЗаписиПоДолжникам(тчИсправляемыеЗаписиC.ВыгрузитьКолонку("Должник"));
		МассивПоручители = КредитныеИстории.СформироватьТитульныеЗаписиПоПоручителям(тчИсправляемыеЗаписиC.ВыгрузитьКолонку("ОбъектУчета"));
		МассивНаследники = КредитныеИстории.СформироватьТитульныеЗаписиПоНаследникам(тчИсправляемыеЗаписиC.ВыгрузитьКолонку("ОбъектУчета"));
		
		ПараметрыТитульники = новый Структура;
		ПараметрыТитульники.Вставить("ТитульныеЗаписиДолжника", МассивТитульныеЗаписи);
		ПараметрыТитульники.Вставить("ТитульныеЗаписиПоручителя", МассивПоручители);
		ПараметрыТитульники.Вставить("ТитульныеЗаписиНаследника", МассивНаследники);

		ТаблицаСтрок = КредитныеИстории.СформироватьТелоОтчета(КоличествоОбъектовУчета, КоличествоГруппБлоков, НастройкаВыгрузки, ОперацияЗнач, МассивВыборокИзменений, ПараметрыТитульники, ДатаОтчета, СсылкаНаДокумент); 
		
		Для каждого стр из ТаблицаСтрок Цикл 
			ТекстовыйДок.ДобавитьСтроку(стр.Строка);	
		КонецЦикла;	
		КоличествоГруппБлоков = КоличествоГруппБлоков - 1; 
		// КоличествоОбъектовУчета = КоличествоОбъектовУчета + тчИсправляемыеЗаписиC.Количество() * 2; 
		
		ТекстСообщения = ТекстСообщения + " Исправленных событий C: " + Строка(КоличествоГруппБлоков) + Символы.ПС; 
		
	КонецЕсли;    
	
	Если тчАннулируемыеЗаписиD.Количество() > 0 и Операция = Перечисления.ВидыОперацийОтчетаRUTDF.D Тогда
		ОперацияЗнач = "D";
		МассивВыборокИзменений = Неопределено;
		МассивТитульныеЗаписи = КредитныеИстории.СформироватьТитульныеЗаписиПоДолжникам(тчАннулируемыеЗаписиD.ВыгрузитьКолонку("Должник"));
		МассивПоручители = КредитныеИстории.СформироватьТитульныеЗаписиПоПоручителям(тчАннулируемыеЗаписиD.ВыгрузитьКолонку("ОбъектУчета"));
		МассивНаследники = КредитныеИстории.СформироватьТитульныеЗаписиПоНаследникам(тчОбновляемыеЗаписиB.ВыгрузитьКолонку("ОбъектУчета"));
		
		ПараметрыТитульники = новый Структура;
		ПараметрыТитульники.Вставить("ТитульныеЗаписиДолжника", МассивТитульныеЗаписи);
		ПараметрыТитульники.Вставить("ТитульныеЗаписиПоручителя", МассивПоручители);
		ПараметрыТитульники.Вставить("ТитульныеЗаписиНаследника", МассивНаследники);
		
		ТаблицаСтрок = КредитныеИстории.СформироватьТелоОтчета(КоличествоОбъектовУчета, КоличествоГруппБлоков, НастройкаВыгрузки, ОперацияЗнач, МассивВыборокИзменений, ПараметрыТитульники, ДатаОтчета, СсылкаНаДокумент); 
		
		Для каждого стр из ТаблицаСтрок Цикл 
			ТекстовыйДок.ДобавитьСтроку(стр.Строка);	
		КонецЦикла;	 
		КоличествоГруппБлоков = КоличествоГруппБлоков - 1; 
		// КоличествоОбъектовУчета =  КоличествоОбъектовУчета + тчАннулируемыеЗаписиD.Количество() * 2; 
		
		ТекстСообщения = ТекстСообщения + " Удаляемых событий D: " + Строка(КоличествоГруппБлоков) + Символы.ПС; 
		
	КонецЕсли;  
	
	СтрокаПодвал = "TRAILER" + Символы.Таб + СтрЗаменить(Строка(КоличествоОбъектовУчета), Символы.НПП, "") + Символы.Таб + СтрЗаменить(Строка(КоличествоГруппБлоков), Символы.НПП, "");
	ТекстовыйДок.ДобавитьСтроку(СтрокаПодвал);    
	
		
	Возврат ТекстовыйДок;
КонецФункции  

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если ЭтотОбъект.Операция = Перечисления.ВидыОперацийОтчетаRUTDF.TUTDF Тогда 	
		Набор = РегистрыСведений.ЖурналВыгрузокНБКИRUTDF.СоздатьНаборЗаписей();
		Набор.Отбор.ДокументОтчет.Установить(ЭтотОбъект.Ссылка);  
		
		Набор.Прочитать(); 
		ОчиститьВосстановленныеЗаписиКИTUTDF(Набор);
		
		Набор = РегистрыСведений.ЖурналВыгрузокНБКИRUTDF.СоздатьНаборЗаписей();
		Набор.Отбор.ДокументОтчет.Установить(ЭтотОбъект.Ссылка); 
		Набор.Записать();
	ИначеЕсли ЭтотОбъект.Операция = Перечисления.ВидыОперацийОтчетаRUTDF.RUTDF Тогда 	
		Набор = РегистрыСведений.ЖурналВыгрузокНБКИRUTDF.СоздатьНаборЗаписей();
		Набор.Отбор.ДокументОтчет.Установить(ЭтотОбъект.Ссылка);  
		
		Набор.Прочитать(); 
		ОчиститьВосстановленныеЗаписиКИRUTDF(Набор);
		
		Набор = РегистрыСведений.ЖурналВыгрузокНБКИRUTDF.СоздатьНаборЗаписей();
		Набор.Отбор.ДокументОтчет.Установить(ЭтотОбъект.Ссылка); 
		Набор.Записать();
	Иначе

		Набор = РегистрыСведений.ЖурналВыгрузокНБКИRUTDF.СоздатьНаборЗаписей();
		Набор.Отбор.ДокументОтчет.Установить(ЭтотОбъект.Ссылка); 
		Набор.Записать();
	КонецЕсли;		
	 
	
КонецПроцедуры 

Процедура ПроставитьЗаписямСтатус() Экспорт
	Если ЭтотОбъект.Принято = Перечисления.СтатусыОтчетаНБКИ.Принято Тогда
		Набор = РегистрыСведений.ЖурналВыгрузокНБКИRUTDF.СоздатьНаборЗаписей();
		Набор.Отбор.ДокументОтчет.Установить(ЭтотОбъект.Ссылка); 
		Набор.Прочитать();
		Для Каждого Запись Из Набор Цикл  
			Запись.Принято = Перечисления.СтатусыОтчетаНБКИ.Принято;
		КонецЦикла;	
		Набор.Записать(); 
	КонецЕсли;	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.НБКИДокументRUTDF") Тогда
		// Заполнение шапки
		НастройкаВыгрузки = ДанныеЗаполнения.НастройкаВыгрузки;
		Операция = ДанныеЗаполнения.Операция;
		Принято = Перечисления.СтатусыОтчетаНБКИ.ВОбработке;
		НепринятыйДокумент = ДанныеЗаполнения.Ссылка;
		ЭтоЕдиныйФормат = ТипЗнч(НастройкаВыгрузки) = Тип("СправочникСсылка.НастройкиВыгрузкиКредитныхИсторий");
		ИмяПользователя = ?(ЭтоЕдиныйФормат, НастройкаВыгрузки.ИдентификаторИсточника, НастройкаВыгрузки.ИмяПользователяНБКИ);
		ИмяФайла = ЭтотОбъект.СформироватьИмяФайлаПоБКИ();
		ЭтоКорректировкаРанееОтправленогоДокумента = Истина;
		Для Каждого ТекСтрокаОбъекты Из ДанныеЗаполнения.Объекты Цикл
			НоваяСтрока = Объекты.Добавить();
			НоваяСтрока.Объект = ТекСтрокаОбъекты.Объект;
		КонецЦикла;
		Для Каждого ТекСтрокатчАннулируемыеЗаписиD Из ДанныеЗаполнения.тчАннулируемыеЗаписиD Цикл
			НоваяСтрока = тчАннулируемыеЗаписиD.Добавить();
			НоваяСтрока.Должник = ТекСтрокатчАннулируемыеЗаписиD.Должник;
			НоваяСтрока.ОбъектУчета = ТекСтрокатчАннулируемыеЗаписиD.ОбъектУчета;
		КонецЦикла;
		Для Каждого ТекСтрокатчИсправляемыеЗаписиC Из ДанныеЗаполнения.тчИсправляемыеЗаписиC Цикл
			НоваяСтрока = тчИсправляемыеЗаписиC.Добавить();
			НоваяСтрока.Должник = ТекСтрокатчИсправляемыеЗаписиC.Должник;
			НоваяСтрока.ОбъектУчета = ТекСтрокатчИсправляемыеЗаписиC.ОбъектУчета;
		КонецЦикла;
		Для Каждого ТекСтрокатчНовыеЗаписиА Из ДанныеЗаполнения.тчНовыеЗаписиА Цикл
			НоваяСтрока = тчНовыеЗаписиА.Добавить();
			НоваяСтрока.Должник = ТекСтрокатчНовыеЗаписиА.Должник;
			НоваяСтрока.ОбъектУчета = ТекСтрокатчНовыеЗаписиА.ОбъектУчета;
		КонецЦикла;
		Для Каждого ТекСтрокатчОбновляемыеЗаписиB Из ДанныеЗаполнения.тчОбновляемыеЗаписиB Цикл
			НоваяСтрока = тчОбновляемыеЗаписиB.Добавить();
			НоваяСтрока.Должник = ТекСтрокатчОбновляемыеЗаписиB.Должник;
			НоваяСтрока.ОбъектУчета = ТекСтрокатчОбновляемыеЗаписиB.ОбъектУчета;
		КонецЦикла;
	КонецЕсли;
	//}}__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
КонецПроцедуры

Процедура ЗаполнитьДатуИмяОтказа(СтрокаЗаголовокОтказа) Экспорт 
	
	МассивСловЗаголовка = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаЗаголовокОтказа, Символы.Таб, Ложь, Ложь);
	
	Если МассивСловЗаголовка.Количество() > 0 Тогда
		ДатаФайлаОтказа = МассивСловЗаголовка[4];
		ИмяФайлаОтказа =  МассивСловЗаголовка[3];
	КонецЕсли;
КонецПроцедуры 
	
Процедура ОчиститьВосстановленныеЗаписиКИTUTDF(НаборЗаписейЖурналаДокумента) Экспорт
	КредитныеИсторииИзменения.ОчиститьВосстановленныеСобытия(НаборЗаписейЖурналаДокумента);
КонецПроцедуры

Процедура ПроставитьЗаписямНепринятоПоЗаголовкамГрупХедер(Успех, RejectФайл) Экспорт 
	
	Набор = РегистрыСведений.ЖурналВыгрузокНБКИRUTDF.СоздатьНаборЗаписей();
	Набор.Отбор.ДокументОтчет.Установить(ЭтотОбъект.Ссылка);
	Набор.Прочитать();
	
	Для Каждого Запись Из Набор Цикл  
		Если Не ЗначениеЗаполнено(Запись.ЗаголовокGroupHeader) Тогда
			Успех = Ложь;
			Возврат;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	 
	
	
	Набор = РегистрыСведений.ЖурналВыгрузокНБКИRUTDF.СоздатьНаборЗаписей();
	Набор.Отбор.ДокументОтчет.Установить(ЭтотОбъект.Ссылка); 
	Набор.Прочитать();
	Для Каждого Запись Из Набор Цикл  
		Запись.Принято = Перечисления.СтатусыОтчетаНБКИ.Принято;
	КонецЦикла;	
	Набор.Записать(); 
	
	
	Набор = РегистрыСведений.ЖурналВыгрузокНБКИRUTDF.СоздатьНаборЗаписей();
	Набор.Отбор.ДокументОтчет.Установить(ЭтотОбъект.Ссылка);
	Набор.Прочитать();     
	
	МассивСтрок = СтрРазделить(Строка(RejectФайл), Символы.ПС, Ложь);    
	Для Каждого стр Из МассивСтрок Цикл 
		Если СтрНайти(стр, "0_GROUPHEADER") > 0 Тогда
			Для Каждого Запись Из Набор Цикл 
				Если стр =  Запись.ЗаголовокGroupHeader Тогда
					Запись.Принято = Перечисления.СтатусыОтчетаНБКИ.НеПринято; 
					Сообщение = Новый СообщениеПользователю();
					Сообщение.Текст = "Не принято: " + Строка(Запись.ОбъектУчета) + " " + Строка(Запись.Событие); 
					Сообщение.Сообщить(); 
				КонецЕсли;	
			КонецЦикла;	 
		КонецЕсли;
	КонецЦикла;
	
	Набор.Записать();
	
КонецПроцедуры 


Процедура ОчиститьВосстановленныеЗаписиКИRUTDF(НаборЗаписейЖурналаДокумента) Экспорт
	КредитныеИсторииИзменения.ОчиститьВосстановленныеСобытия(НаборЗаписейЖурналаДокумента);
КонецПроцедуры


Функция СформироватьФайлВыгрузкиXML(ТекстСообщения) Экспорт 
	Если ЭтотОбъект.Ссылка.Пустая() Тогда
		ДокОтчетСсылка = Документы.НБКИДокументRUTDF.ПустаяСсылка(); 
		ЭтотОбъект.УстановитьСсылкуНового(ДокОтчетСсылка);   
		ЭтотОбъект.УстановитьНовыйНомер();
		ЭтотОбъект.Записать();
	КонецЕсли;	    
	
	СсылкаНаДокумент = ЭтотОбъект.Ссылка;

	ДатаОтчета = Дата; 
	
	ДокументXML = Новый ТекстовыйДокумент;  
	
	КоличествоСобытий = 0;
	
	ЭтоКорректировка = ЗначениеЗаполнено(ЭтотОбъект.НепринятыйДокумент);
		
	Если тчНовыеЗаписиА.Количество() > 0 и Операция = Перечисления.ВидыОперацийОтчетаRUTDF.A Тогда
		ОперацияЗнач = "A";  
		Если ЭтоКорректировка Тогда
			МассивВыборокИзменений = КредитныеИстории.ПолучитьНепринятыеЗаписиПоОбъектамУчета(тчНовыеЗаписиА, ЭтотОбъект.НепринятыйДокумент);
		Иначе
			МассивВыборокИзменений = КредитныеИстории.ПолучитьИзмененияПоОбъектамУчета(тчНовыеЗаписиА, ДатаОтчета); 
		КонецЕсли;
		МассивТитульныеЗаписи = КредитныеИстории.СформироватьТитульныеЗаписиПоДолжникам(тчНовыеЗаписиА.ВыгрузитьКолонку("Должник"));
		МассивПоручители = КредитныеИстории.СформироватьТитульныеЗаписиПоПоручителям(тчНовыеЗаписиА.ВыгрузитьКолонку("ОбъектУчета"));
		МассивНаследники = КредитныеИстории.СформироватьТитульныеЗаписиПоНаследникам(тчНовыеЗаписиА.ВыгрузитьКолонку("ОбъектУчета"));
		
		ПараметрыТитульники = новый Структура;
		ПараметрыТитульники.Вставить("ТитульныеЗаписиДолжника", МассивТитульныеЗаписи);
		ПараметрыТитульники.Вставить("ТитульныеЗаписиПоручителя", МассивПоручители);
		ПараметрыТитульники.Вставить("ТитульныеЗаписиНаследника", МассивНаследники);
		
		КредитныеИсторииXML.СформироватьФайлВФорматеXML(ДокументXML, КоличествоСобытий, НастройкаВыгрузки, ОперацияЗнач, МассивВыборокИзменений, ПараметрыТитульники, ДатаОтчета, СсылкаНаДокумент);		
								
		ТекстСообщения = ТекстСообщения + " Новых событий А: " + Строка(КоличествоСобытий) + Символы.ПС; 
		
	КонецЕсли;
	
	Если тчОбновляемыеЗаписиB.Количество() > 0 и Операция = Перечисления.ВидыОперацийОтчетаRUTDF.B Тогда
		ОперацияЗнач = "B"; 
		Если ЭтоКорректировка Тогда
			МассивВыборокИзменений = КредитныеИстории.ПолучитьНепринятыеЗаписиПоОбъектамУчета(тчОбновляемыеЗаписиB, ЭтотОбъект.НепринятыйДокумент);
		Иначе       
			КредитныеИстории.ФиксированиеОбязательнойВыгрузки(тчОбновляемыеЗаписиB, ДатаОтчета);
			МассивВыборокИзменений = КредитныеИстории.ПолучитьИзмененияПоОбъектамУчета(тчОбновляемыеЗаписиB, ДатаОтчета);  
		КонецЕсли;
		МассивТитульныеЗаписи = КредитныеИстории.СформироватьТитульныеЗаписиПоДолжникам(тчОбновляемыеЗаписиB.ВыгрузитьКолонку("Должник"));
		МассивПоручители = КредитныеИстории.СформироватьТитульныеЗаписиПоПоручителям(тчОбновляемыеЗаписиB.ВыгрузитьКолонку("ОбъектУчета"));
		МассивНаследники = КредитныеИстории.СформироватьТитульныеЗаписиПоНаследникам(тчОбновляемыеЗаписиB.ВыгрузитьКолонку("ОбъектУчета"));
		
		ПараметрыТитульники = новый Структура;
		ПараметрыТитульники.Вставить("ТитульныеЗаписиДолжника", МассивТитульныеЗаписи);
		ПараметрыТитульники.Вставить("ТитульныеЗаписиПоручителя", МассивПоручители);
		ПараметрыТитульники.Вставить("ТитульныеЗаписиНаследника", МассивНаследники);
		
		КредитныеИсторииXML.СформироватьФайлВФорматеXML(ДокументXML, КоличествоСобытий, НастройкаВыгрузки, ОперацияЗнач, МассивВыборокИзменений, ПараметрыТитульники, ДатаОтчета, СсылкаНаДокумент); 
						
		ТекстСообщения = ТекстСообщения + " Обновленных событий В: " + Строка(КоличествоСобытий) + Символы.ПС; 
	КонецЕсли;
	
	Возврат ДокументXML;

	
КонецФункции 


Процедура ОбработатьRejectФайлXML() 
	
	ТипФайлаОтказа = ОпределитьПолныйЧастичныйОтказXML(ТекстФайлаОтказа);
	Если ТипФайлаОтказа = Перечисления.НБКИ_ТипыОтказов.Полный Тогда
		ПроставитьДокументуНеПринято();
	ИначеЕсли ТипФайлаОтказа = Перечисления.НБКИ_ТипыОтказов.Частичный Тогда
		ПроставитьЗаписямНепринятоПоЗаголовкамИвентов(ТекстФайлаОтказа); 
	Иначе
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Ошибка чтения файла-отказа!"; 
		Сообщение.Сообщить();
	КонецЕсли;
		
КонецПроцедуры   

Функция ОпределитьПолныйЧастичныйОтказXML(RejectФайл) Экспорт
	
	ТипОтказа = Перечисления.НБКИ_ТипыОтказов.Полный;

	ЯкорьЗаписи = "orderNum";
	
	Если СтрНайти(RejectФайл, ЯкорьЗаписи) <> 0 Тогда
		ТипОтказа =  Перечисления.НБКИ_ТипыОтказов.Частичный;
	КонецЕсли;
			
	Возврат ТипОтказа;
КонецФункции  

Процедура ПроставитьЗаписямНепринятоПоЗаголовкамИвентов(RejectФайл) Экспорт 
		
	Набор = РегистрыСведений.ЖурналВыгрузокНБКИRUTDF.СоздатьНаборЗаписей();
	Набор.Отбор.ДокументОтчет.Установить(ЭтотОбъект.Ссылка); 
	Набор.Прочитать();
	Для Каждого Запись Из Набор Цикл  
		Запись.Принято = Перечисления.СтатусыОтчетаНБКИ.Принято;
	КонецЦикла;	
	Набор.Записать(); 	
	
	Набор = РегистрыСведений.ЖурналВыгрузокНБКИRUTDF.СоздатьНаборЗаписей();
	Набор.Отбор.ДокументОтчет.Установить(ЭтотОбъект.Ссылка);
	Набор.Прочитать();     
	
	МассивСтрок = СтрРазделить(Строка(RejectФайл), Символы.ПС, Ложь);    
	Для Каждого стр Из МассивСтрок Цикл 
		Для Каждого Запись Из Набор Цикл 
			СтрокаСравнение = СтрЗаменить(Запись.ЗаголовокGroupHeader, Символы.НПП, "");
			СтрокаСравнение = СтрЗаменить(СтрокаСравнение, " ", "");
			Если СтрНайти(стр, СтрокаСравнение) > 0 Тогда 
				Если Запись.Принято = Перечисления.СтатусыОтчетаНБКИ.НеПринято Тогда
					Продолжить;
				КонецЕсли;	
				Запись.Принято = Перечисления.СтатусыОтчетаНБКИ.НеПринято; 
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = "Не принято: " + Строка(Запись.ОбъектУчета) + " " + Строка(Запись.Событие); 
				Сообщение.Сообщить(); 
			КонецЕсли;	
		КонецЦикла;	 
	КонецЦикла;
	
	Набор.Записать();
	
КонецПроцедуры 



&НаСервере
Функция СформироватьИмяФайлаПоБКИ()Экспорт
	
	Если ЗначениеЗаполнено(НастройкаВыгрузки) Тогда
				
		ЭтоЕдиныйФормат = ТипЗнч(НастройкаВыгрузки) = Тип("СправочникСсылка.НастройкиВыгрузкиКредитныхИсторий");
		
		ИмяПользователя = ?(ЭтоЕдиныйФормат, НастройкаВыгрузки.ИдентификаторИсточника, НастройкаВыгрузки.ИмяПользователяНБКИ);  
		
		ДатаОтчета = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
		
		Если Не ЭтоЕдиныйформат Тогда
			сИмяФайла = Строка(ИмяПользователя) + "_" + КредитныеИстории.СформироватьСтрокуДаты(ДатаОтчета);
		Иначе
			Если НастройкаВыгрузки.ВерсияФормата.БКИ = Перечисления.КредитныеИстории_БКИ.НБКИ Тогда
				сИмяФайла = Строка(ИмяПользователя) + "_" + КредитныеИстории.СформироватьСтрокуДаты(ДатаОтчета);
			ИначеЕсли НастройкаВыгрузки.ВерсияФормата.БКИ = Перечисления.КредитныеИстории_БКИ.ОБКИ Тогда
				сИмяФайла = "CHP_" + Строка(ИмяПользователя) + "_UCH_" + СформироватьИмяФайлаОБКИ(ДатаОтчета);
			ИначеЕсли НастройкаВыгрузки.ВерсияФормата.БКИ = Перечисления.КредитныеИстории_БКИ.СкорингБюро Тогда
				сИмяФайла = Строка(ИмяПользователя) + "_FCH_" + КредитныеИстории.СформироватьСтрокуДаты(ДатаОтчета); 
			Иначе  
				сИмяФайла = "НЕ УДАЛОСЬ ОПРЕДЕЛИТЬ БКИ ИЗ НАСТРОЕК!";
			КонецЕсли; 
		КонецЕсли;  
	Иначе   
		сИмяФайла = "НЕ УДАЛОСЬ ОПРЕДЕЛИТЬ БКИ ИЗ НАСТРОЕК!";
	КонецЕсли;
	
	Возврат сИмяФайла;
	
КонецФункции  

&НаСервере
Функция СформироватьИмяФайлаОБКИ(ДатаОтчета) Экспорт 
	
	ВерсияОБКИ = Формат(НастройкаВыгрузки.ВерсияФормата.НомерВерсии, "ЧЦ=4; ЧДЦ=2; ЧРД=-; ЧН=Ноль; ЧВН=");
		
	ДатаСтрока = Формат(ДатаОтчета, "ДФ=ггггММддЧЧммсс");  
	ДатаСтрока = ДатаСтрока + "000";
		
	Возврат ВерсияОБКИ + "_" + ДатаСтрока;
	
КонецФункции    


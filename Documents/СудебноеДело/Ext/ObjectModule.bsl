
#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьСуммыРешения() Экспорт
	ЭтотОбъект.СуммаРешения = ЭтотОбъект.РешениеОсновнойДолг + ЭтотОбъект.РешениеПроценты + ЭтотОбъект.РешениеШтрафы + ЭтотОбъект.РешениеПени + ЭтотОбъект.РешениеСуммаИндексации208 + ЭтотОбъект.РешениеНачисленныеПроценты395 + ЭтотОбъект.РешениеГоспошлина;
КонецПроцедуры

Процедура ЗаполнитьЧастиРешения() Экспорт
	
	ЭтотОбъект.ЧастиРешения.Очистить();
	ЭтотОбъект.ИД.Очистить();
	НомерРешения = 0;
	Если ЭтотОбъект.ВидИска = Перечисления.ВидыИска.ВзысканиеПросроченнойЗадолженности ИЛИ ЭтотОбъект.ВидИска = Перечисления.ВидыИска.ВзысканиеПроцентов395 ИЛИ ЭтотОбъект.ВидИска = Перечисления.ВидыИска.Индексация208 Тогда
		Если ЭтотОбъект.Отдельный_ИД_По_ГП Тогда
			Если ЭтотОбъект.СолидарноеВзысканиеЗадолженности Тогда				
				ДобавитьИДСолидарноеВзыскание(Справочники.ТипыИсполнительныхЛистов.ОВзысканииДолга);				
			Иначе
				ДобавитьИДДолевоеВзыскание(Справочники.ТипыИсполнительныхЛистов.ОВзысканииДолга);
			КонецЕсли;	
			
			Если ЭтотОбъект.СолидарноеВзысканиеГоспошлины Тогда				
				ДобавитьИДСолидарноеВзыскание(Справочники.ТипыИсполнительныхЛистов.ОВзысканииГоспошлины);				
			Иначе
				ДобавитьИДДолевоеВзыскание(Справочники.ТипыИсполнительныхЛистов.ОВзысканииГоспошлины);
			КонецЕсли;				
		Иначе
			Если ЭтотОбъект.СолидарноеВзысканиеЗадолженности Тогда				
				ДобавитьИДСолидарноеВзыскание(Справочники.ТипыИсполнительныхЛистов.ОВзысканииДолгаВключаяИздержки);				
			Иначе
				ДобавитьИДДолевоеВзыскание(Справочники.ТипыИсполнительныхЛистов.ОВзысканииДолгаВключаяИздержки);
			КонецЕсли;	
		КонецЕсли;
		
	ИначеЕсли ЭтотОбъект.ВидИска = Перечисления.ВидыИска.ОбращениеВзыскания Тогда
		Если ЭтотОбъект.Отдельный_ИД_По_ГП Тогда
			Если ЭтотОбъект.СолидарноеВзысканиеЗадолженности Тогда				
				ДобавитьИДСолидарноеВзыскание(Справочники.ТипыИсполнительныхЛистов.ОбОбращенииВзысканияНаЗалог);				
			Иначе
				ДобавитьИДДолевоеВзыскание(Справочники.ТипыИсполнительныхЛистов.ОбОбращенииВзысканияНаЗалог);
			КонецЕсли;	
			
			Если ЭтотОбъект.СолидарноеВзысканиеГоспошлины Тогда				
				ДобавитьИДСолидарноеВзыскание(Справочники.ТипыИсполнительныхЛистов.ОВзысканииГоспошлины);				
			Иначе
				ДобавитьИДДолевоеВзыскание(Справочники.ТипыИсполнительныхЛистов.ОВзысканииГоспошлины);
			КонецЕсли;				
		Иначе
			Если ЭтотОбъект.СолидарноеВзысканиеЗадолженности Тогда				
				ДобавитьИДСолидарноеВзыскание(Справочники.ТипыИсполнительныхЛистов.ОбОбращенииВзысканияНаЗалогВключаяИздержки);				
			Иначе
				ДобавитьИДДолевоеВзыскание(Справочники.ТипыИсполнительныхЛистов.ОбОбращенииВзысканияНаЗалогВключаяИздержки);
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;	
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ИсполнительныеДокументы.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.ИсполнительныеДокументы КАК ИсполнительныеДокументы
	                      |ГДЕ
	                      |	ИсполнительныеДокументы.ПометкаУдаления = ЛОЖЬ
	                      |	И ИсполнительныеДокументы.СудебноеРешение = &СудебноеРешение
	                      |	И ИсполнительныеДокументы.ЧастьРешения = &ЧастьРешения
	                      |	И ИсполнительныеДокументы.ТипИД = &ТипИД
	                      |	И ИсполнительныеДокументы.Должник = &Должник
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ИсполнительныеДокументы.Ссылка УБЫВ");
	Для Каждого СтрИД из ЭтотОбъект.ИД Цикл
		Запрос.УстановитьПараметр("СудебноеРешение", ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("ЧастьРешения", стрИД.ЧастьРешения);
		Запрос.УстановитьПараметр("ТипИД", стрИД.ВидРешения);
		Запрос.УстановитьПараметр("Должник", стрИД.Ответчик);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			стрИД.ИсполнительныйДокумент = Результат.Ссылка;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура РассчитатьГоспошлину() Экспорт

	База = ПолучитьСуммуДляРасчетаГоспошлины();
	Госпошлина = Документы.СудебноеДело.РасчитатьСуммуГоспошлины(
		База,
		ЭтотОбъект.ВидТребований
	);
	ЭтотОбъект.ГоспошлинаКНачислению = Госпошлина;

КонецПроцедуры

Функция ПолучитьСуммуДляРасчетаГоспошлины() Экспорт

	Если ЭтотОбъект.ВидИска = Перечисления.ВидыИска.ВзысканиеПросроченнойЗадолженности Тогда
		База = ЦенаИска;
	ИначеЕсли ЭтотОбъект.ВидИска = Перечисления.ВидыИска.Правопреемство Тогда
		База = ЦенаИска;
	ИначеЕсли ЭтотОбъект.ВидИска = Перечисления.ВидыИска.Индексация208 Тогда
		База = ИскСуммаИндексации208;
	ИначеЕсли ЭтотОбъект.ВидИска = Перечисления.ВидыИска.ВзысканиеПроцентов395 Тогда
		База = ИскНачисленныеПроценты395;
	Иначе
		База = 0;
	КонецЕсли;
	
	Возврат База;

КонецФункции // ()

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ПроверитьЗаполнение();
	ОбработатьЗаполнениеГоспошлиныКНачислению();
	
	Если Решение = Перечисления.СтатусыСудебногоДела.Удовлетворено Тогда
		
		Для Каждого Стр Из ЧастиРешения Цикл
			ОбновитьХарактеристикиСД(ЭтотОбъект.Ссылка, Стр.ЧастьРешения);
		КонецЦикла;
		
	КонецЕсли; 
	
	Менеджер = РегистрыСведений.СудебныеДанные.СоздатьМенеджерЗаписи();
	Менеджер.Займ = Займ;
	Менеджер.Свойство = ПланыВидовХарактеристик.ДО_СудебныеДела.СудебноеДело;
	Менеджер.Значение = Ссылка;
	Менеджер.Записать();
	
		
	
	Если РежимЗагрузки = Перечисления.РежимыЗагрузкиСудебныхДел.Обычный Тогда
		Движения.ИсковыеТребования.Записывать = Истина;		
		Если Не ЗначениеЗаполнено(Решение) И Не ЗначениеЗаполнено(ДатаВступленияВЗаконнуюСилу) Тогда
			Движение = Движения.ИсковыеТребования.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = ДатаИска;
			Движение.Займ = Займ;
			Движение.СуммаОсновнойДолг = ИскОсновнойДолг;
			Движение.СуммаПроценты = ИскПроценты + ИскНачисленныеПроценты395 + ИскСуммаИндексации208;
			Движение.СуммаШтрафы = ИскШтрафы;
			Движение.СуммаПени = ИскПени;
			Движение.ЦенаИска = ЦенаИска;
			Движение.СуммаГоспошлина = ИскГоспошлина;
			Движение.ВидТребований = ВидТребований;
		КонецЕсли;
				
	КонецЕсли;
	
	СпособНачисления = Константы.ДатаНачисленияПросуженнойЗадолженности.Получить();
	
	Период = ?(СпособНачисления = Перечисления.ДатыНачисленияПросуженнойЗадолженности.НаДатуРешения, ЭтотОбъект.ДатаРешения, ЭтотОбъект.ДатаВступленияВЗаконнуюСилу); 
	
	Если ЗначениеЗаполнено(Период) Тогда	
	
		Движения.ЗадолженностьПоСудебнымРешениям.Записывать = Истина;
		
		
		Массив = РасчетЗадолженностиСудопроизводство.СписокСоставляющихДолгаПоРешению();
		
		Для Каждого ЧастьРешения Из ЧастиРешения Цикл
			Для Каждого Стр из Массив Цикл
				Если ЧастьРешения["Сумма" + Стр] > 0 Тогда
					Движение = Движения.ЗадолженностьПоСудебнымРешениям.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
					Движение.ВидДвиженияЗадолженности = Перечисления.ВидДвиженияЗадолженности.СудебноеРешение;
					Движение.ТипЗадолженности = ПланыВидовХарактеристик.ТипыЗадолженностиПоРешению[Стр];
					Движение.Период = Период;
					Движение.Займ = Займ;
					Движение.Решение = ЭтотОбъект.Ссылка;
					Движение.ЧастьРешения = ЧастьРешения.ЧастьРешения;
					Движение.Сумма = ЧастьРешения["Сумма" + Стр];
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;  
				
			
		Движения.ЗадолженностьПоСудебнымРешениям.Записать();  
		
		ЕстьДоговорМикрозайма = РасчетЗадолженностиМФО.ПолучитьТекущийДоговор(Займ, ТекущаяДатаСеанса());
		
		Если РежимЗагрузки = Перечисления.РежимыЗагрузкиСудебныхДел.Обычный И НЕ ЗначениеЗаполнено(ЕстьДоговорМикрозайма) Тогда
			Движения.ЗадолженностьПоОбъектамВнесудебная.Записывать = Истина;  
			Движение = Движения.ЗадолженностьПоОбъектамВнесудебная.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.ВидДвиженияЗадолженности = Перечисления.ВидДвиженияЗадолженности.СудебноеРешение;
			Движение.Период = ДатаВступленияВЗаконнуюСилу;
			Движение.Объект = Займ;
			Движение.ОсновнойДолгДО = ЭтотОбъект.РешениеОсновнойДолг;
			Движение.ПроцентыДО = ЭтотОбъект.РешениеПроценты + ЭтотОбъект.РешениеНачисленныеПроценты395 + ЭтотОбъект.РешениеСуммаИндексации208;
			Движение.ШтрафыДО = ЭтотОбъект.РешениеШтрафы;
			Движение.ПениДО = ЭтотОбъект.РешениеПени;
			Движение.СуммаДО = ЭтотОбъект.РешениеОсновнойДолг + ЭтотОбъект.РешениеПроценты + ЭтотОбъект.РешениеНачисленныеПроценты395 + ЭтотОбъект.РешениеСуммаИндексации208 + ЭтотОбъект.РешениеШтрафы + ЭтотОбъект.РешениеПени;
			
			Движение.ОсновнойДолгРегл = ЭтотОбъект.РешениеОсновнойДолг;
			Движение.ПроцентыРегл = ЭтотОбъект.РешениеПроценты + ЭтотОбъект.РешениеНачисленныеПроценты395 + ЭтотОбъект.РешениеСуммаИндексации208;
			Движение.ШтрафыРегл = ЭтотОбъект.РешениеШтрафы;
			Движение.ПениРегл = ЭтотОбъект.РешениеПени;
			Движение.СуммаРегл = ЭтотОбъект.РешениеОсновнойДолг + ЭтотОбъект.РешениеПроценты + ЭтотОбъект.РешениеНачисленныеПроценты395 + ЭтотОбъект.РешениеСуммаИндексации208 + ЭтотОбъект.РешениеШтрафы + ЭтотОбъект.РешениеПени;
			
		КонецЕсли;
		Движения.ЗадолженностьПоОбъектамВнесудебная.Записать()
	КонецЕсли;
	
	Если РежимЗагрузки = Перечисления.РежимыЗагрузкиСудебныхДел.Обычный Тогда
		Движения.НачисленияПоГоспошлине.Записывать = Истина;
		Движение = Движения.НачисленияПоГоспошлине.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = ДатаИска;
		Движение.Объект = Займ;
		Движение.Сумма = ГоспошлинаКНачислению;
		
		//Движения.ЗадолженностьПоОбъектамВнесудебная.Записать();
	КонецЕсли;
	
	
	
	СобытиеЗафиксировано = КредитныеИстории.СобытиеСделкиЗафиксированоИсточником(Займ, ССылка, "2.6");
	
	Если Не СобытиеЗафиксировано Тогда
		ДатаСобытия = ?(ЗначениеЗаполнено(ДатаИска), ДатаИска, ДатаРешения);
		КредитныеИстории.ЗаписатьСобытиеСделки(Займ, ДатаСобытия, Ссылка, "2.6");
	КонецЕсли;
	
	Если ЭтотОбъект.Отменено и ЗначениеЗаполнено(ЭтотОбъект.ДатаОтмены) Тогда
		ДатаСобытия = ЭтотОбъект.ДатаОтмены; 
		КредитныеИстории.ЗаписатьСобытиеСделки(Займ, ДатаСобытия, Ссылка, "2.6");
		КредитныеИстории.УдалитьСобытияСвязанныхИД(ЭтотОбъект.ИД.ВыгрузитьКолонку("ИсполнительныйДокумент"));
	КонецЕсли;
	
	Документы.СудебноеДело.ПровестиПоследовательность(ЭтотОбъект);
		
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)  
	// КредитныеИстории.УдалитьСобытияИсточника(Займ, Ссылка); 
	Если ЭтотОбъект.Отменено И ЗначениеЗаполнено(ЭтотОбъект.ДатаОтмены) Тогда
		ДатаСобытия = ЭтотОбъект.ДатаОтмены;
		КредитныеИстории.ЗаписатьСобытиеСделки(Займ, ДатаСобытия, Ссылка, "2.6");
	Иначе
		ДатаСобытияНаличиеДела = ?(ЗначениеЗаполнено(ДатаИска), ДатаИска, ДатаРешения);
		СобытиеНаличияДелаПринято = КредитныеИстории.СобытиеСделкиПринятоВНБКИ(Займ, ДатаСобытияНаличиеДела, "2.6"); 
		ДатаСобытияОтменыДела = ЭтотОбъект.ДатаОтмены;
		СобытиеОтменыДелаПринято = КредитныеИстории.СобытиеСделкиПринятоВНБКИ(Займ, ДатаСобытияОтменыДела, "2.6"); 
		Если НЕ СобытиеНаличияДелаПринято ИЛИ НЕ СобытиеОтменыДелаПринято Тогда
			КредитныеИстории.УдалитьСобытияИсточника(Займ, Ссылка);
		КонецЕсли;	
	КонецЕсли;
	
	Движения.ЗадолженностьПоОбъектамВнесудебная.Записывать = Истина;
	Движения.ЗадолженностьПоСудебнымРешениям.Записывать = Истина;
	
	Движения.ЗадолженностьПоОбъектамВнесудебная.Записать();
	Движения.ЗадолженностьПоСудебнымРешениям.Записать();
	
	ОбъектыСервер.УдалитьСтадииОтменаПроведения(ЭтотОбъект);
	
	Документы.СудебноеДело.ПровестиПоследовательность(ЭтотОбъект);
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ОбработатьЗаполнениеГоспошлиныКНачислению();
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда
			Займ = ДанныеЗаполнения;
			ВидОтветчика = Перечисления.ВидыОтветчиков.Должник;
			Ответчик = Займ.Должник;
			Стр = Ответчики.Добавить();
			Стр.ВидОтветчика = Перечисления.ВидыОтветчиков.Должник;
			стр.Значение = Займ.Должник;
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	Поручительства.Поручитель КАК Поручитель
			                      |ИЗ
			                      |	РегистрСведений.Поручительства КАК Поручительства
			                      |ГДЕ
			                      |	Поручительства.ДолговоеОбязательство = &ДолговоеОбязательство");
			Запрос.УстановитьПараметр("ДолговоеОбязательство", Займ);
			Результат = Запрос.Выполнить().Выбрать();
			Пока Результат.Следующий() Цикл
				стр = Ответчики.Добавить();
				стр.ВидОтветчика = Перечисления.ВидыОтветчиков.Поручитель;
				стр.Значение = Результат.Поручитель;
			КонецЦикла;
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	Наследники.Наследник КАК Наследник
			                      |ИЗ
			                      |	РегистрСведений.Наследники КАК Наследники
			                      |ГДЕ
			                      |	Наследники.ДолговоеОбязательство = &ДолговоеОбязательство");
			Запрос.УстановитьПараметр("ДолговоеОбязательство", Займ);
			Результат = Запрос.Выполнить().Выбрать();
			Пока Результат.Следующий() Цикл
				стр = Ответчики.Добавить();
				стр.ВидОтветчика = Перечисления.ВидыОтветчиков.Наследник;
				стр.Значение = Результат.Наследник;
			КонецЦикла;

		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СудебноеДело") Тогда
			Займ = ДанныеЗаполнения.Займ;
			ВидОтветчика = Перечисления.ВидыОтветчиков.Должник;
			Ответчик = Займ.Должник;
			Ответчики.Загрузить(ДанныеЗаполнения.Ответчики.Выгрузить());
			СудебноеРешение = ДанныеЗаполнения;
			ВидИска = Перечисления.ВидыИска.Индексация208;
		КонецЕсли;
		Истец = ПараметрыСеанса.ТекущийПользователь.Организация;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	УжеНачисленнаяГП = 0;
	Если ДоначислятьГоспошлину
		И ЗначениеЗаполнено(ОснованиеДоначисления) Тогда
	
		УжеНачисленнаяГП = ОснованиеДоначисления.ГоспошлинаКНачислению;
	
	КонецЕсли;
	
	Если ИскГоспошлина - УжеНачисленнаяГП < 0 Тогда
	
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ранее начисленная госпошлина не может быть больше текущей";
		Сообщение.Сообщить();
		
		Возврат;
	
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ГоспошлинаКНачислению", ИскГоспошлина - УжеНачисленнаяГП);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьЗаполнениеГоспошлиныКНачислению()

	ГоспошлинаКНачислению = ИскГоспошлина;
	Если ДополнительныеСвойства.Свойство("ГоспошлинаКНачислению") Тогда
	
		ГоспошлинаКНачислению = ДополнительныеСвойства["ГоспошлинаКНачислению"];
	
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьХарактеристикиСД(СД, ЧастьРешения)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ИсполнительныеДокументы.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.ИсполнительныеДокументы КАК ИсполнительныеДокументы
	                      |ГДЕ
	                      |	ИсполнительныеДокументы.СудебноеРешение = &СудебноеРешение
	                      |	И ИсполнительныеДокументы.ЧастьРешения = &ЧастьРешения");
	Запрос.УстановитьПараметр("СудебноеРешение", СД);
	Запрос.УстановитьПараметр("ЧастьРешения", ЧастьРешения);
	Результат = Запрос.Выполнить().Выбрать();
	
	//Массив = РасчетЗадолженностиСудопроизводство.СписокРеквизитовДокументаСудебноеДело();	
	
	Пока Результат.Следующий() Цикл
		ИсполДок = Результат.Ссылка;
	
	
		//Для Каждого стр из Массив Цикл
		//	Менеджер = РегистрыСведений.ХарактеристикиИД.СоздатьМенеджерЗаписи();
		//	Менеджер.ИсполнительныйДокумент = ИД;
		//	Менеджер.Свойство = ПланыВидовХарактеристик.ХарактеристикиИД["СД_" + стр];
		//	Менеджер.Прочитать();
		//	
		//	Если Менеджер.Значение <> СД[стр] Тогда
		//		Менеджер.ИсполнительныйДокумент = ИД;
		//		Менеджер.Свойство = ПланыВидовХарактеристик.ХарактеристикиИД["СД_" + стр];
		//		Менеджер.Значение = СД[стр];
		//		Менеджер.Записать();
		//	КонецЕсли;
		//	
		//КонецЦикла;	
		
		Менеджер = РегистрыСведений.ХарактеристикиИД.СоздатьМенеджерЗаписи();
		Менеджер.ИсполнительныйДокумент = ИсполДок;
		Менеджер.Свойство = ПланыВидовХарактеристик.ХарактеристикиИД.СД_СуммаРешения;
		Менеджер.Прочитать();
		
		стр = Новый Структура("ЧастьРешения", ИсполДок.ЧастьРешения);
		СтрРешения = СД.ЧастиРешения.НайтиСтроки(стр);
		Если СтрРешения.Количество() = 1 Тогда
			СтрРешение = СтрРешения[0];
			
			Если Менеджер.Значение <> СуммаРешения Тогда
				Менеджер.ИсполнительныйДокумент = ИсполДок;
				Менеджер.Свойство = ПланыВидовХарактеристик.ХарактеристикиИД.СД_СуммаРешения;
				Менеджер.Значение = СтрРешение.СуммаРешения;
				Менеджер.Записать();
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьИДДолевоеВзыскание(ВидРешения)
	кол = ЭтотОбъект.ЧастиРешения.Количество();
	Если кол = 0 Тогда
		НомерРешения = 0;
	Иначе
		НомерРешения = ЭтотОбъект.ЧастиРешения[кол-1].ЧастьРешения;
	КонецЕсли;
	
	КоличествоОтветчиков = ЭтотОбъект.Ответчики.Количество();
	
	ДоляОсновнойДолг = Цел(ЭтотОбъект.РешениеОсновнойДолг/КоличествоОтветчиков);
	ОстатокОсновнойДолг = ЭтотОбъект.РешениеОсновнойДолг%КоличествоОтветчиков;
	
	СуммаПроценты = ЭтотОбъект.РешениеПроценты + ЭтотОбъект.РешениеНачисленныеПроценты395 + ЭтотОбъект.РешениеСуммаИндексации208;
	ДоляПроценты = Цел(СуммаПроценты/КоличествоОтветчиков);
	ОстатокПроценты = ЭтотОбъект.РешениеПроценты%КоличествоОтветчиков;
	
	ДоляШтрафы = Цел(ЭтотОбъект.РешениеШтрафы/КоличествоОтветчиков);
	ОстатокШтрафы = ЭтотОбъект.РешениеШтрафы%КоличествоОтветчиков;
	
	ДоляПени = Цел(ЭтотОбъект.РешениеПени/КоличествоОтветчиков);
	ОстатокПени = ЭтотОбъект.РешениеПени%КоличествоОтветчиков;
	
	ДоляГоспошлина = Цел(ЭтотОбъект.РешениеГоспошлина/КоличествоОтветчиков);
	ОстатокГоспошлина = ЭтотОбъект.РешениеГоспошлина%КоличествоОтветчиков;
	
	Массив = РасчетЗадолженностиСудопроизводство.СписокСоставляющихДолгаПоРешению();	
	
	Для Каждого стрОтветчик Из ЭтотОбъект.Ответчики Цикл
		НомерРешения = НомерРешения + 1;
		стр = ЭтотОбъект.ЧастиРешения.Добавить();
		стр.ЧастьРешения = НомерРешения;
		стр.ВидРешения = ВидРешения;
		
		Если ВидРешения = Справочники.ТипыИсполнительныхЛистов.ОВзысканииДолга Тогда
			стр.СуммаОсновнойДолг = ДоляОсновнойДолг;
			стр.СуммаПроценты = ДоляПроценты;
			стр.СуммаШтрафы = ДоляШтрафы;
			стр.СуммаПени = ДоляПени;
		ИначеЕсли ВидРешения = Справочники.ТипыИсполнительныхЛистов.ОВзысканииДолгаВключаяИздержки Тогда
			стр.СуммаОсновнойДолг = ДоляОсновнойДолг;
			стр.СуммаПроценты = ДоляПроценты;
			стр.СуммаШтрафы = ДоляШтрафы;
			стр.СуммаПени = ДоляПени;
			стр.СуммаГоспошлина = ДоляГоспошлина;
		ИначеЕсли ВидРешения = Справочники.ТипыИсполнительныхЛистов.ОбОбращенииВзысканияНаЗалогВключаяИздержки Тогда
		    стр.СуммаГоспошлина = ДоляГоспошлина;
		ИначеЕсли ВидРешения = Справочники.ТипыИсполнительныхЛистов.ОВзысканииГоспошлины Тогда
			стр.СуммаГоспошлина = ДоляГоспошлина;
		КонецЕсли;	
		
		Сумма = 0;
		Для Каждого Элемент Из Массив Цикл
			Попытка
				Сумма = Сумма + стр["Сумма" + Элемент];
			Исключение
				
			КонецПопытки;
		КонецЦикла;
		Стр.СуммаРешения = Сумма;
		
		
		стрИД = ЭтотОбъект.ИД.Добавить();
		стрИД.ЧастьРешения = стр.ЧастьРешения;
		стрИД.ВидРешения = ВидРешения;
		стрИД.Ответчик = стрОтветчик.Значение;
		стрИД.ВидОтветчика = стрОтветчик.ВидОтветчика;
	КонецЦикла;
	
	Если ВидРешения = Справочники.ТипыИсполнительныхЛистов.ОВзысканииДолга Тогда
		стр.СуммаОсновнойДолг = ДоляОсновнойДолг + ОстатокОсновнойДолг;
		стр.СуммаПроценты = ДоляПроценты + ОстатокПроценты;
		стр.СуммаШтрафы = ДоляШтрафы + ОстатокШтрафы;
		стр.СуммаПени = ДоляПени + ОстатокПени;
	ИначеЕсли ВидРешения = Справочники.ТипыИсполнительныхЛистов.ОВзысканииДолгаВключаяИздержки Тогда
		стр.СуммаОсновнойДолг = ДоляОсновнойДолг + ОстатокОсновнойДолг;
		стр.СуммаПроценты = ДоляПроценты + ОстатокПроценты;
		стр.СуммаШтрафы = ДоляШтрафы + ОстатокШтрафы;
		стр.СуммаПени = ДоляПени + ОстатокПени;
		стр.СуммаГоспошлина = ДоляГоспошлина + ОстатокГоспошлина;
	ИначеЕсли ВидРешения = Справочники.ТипыИсполнительныхЛистов.ОбОбращенииВзысканияНаЗалогВключаяИздержки Тогда
		стр.СуммаГоспошлина = ДоляГоспошлина + ОстатокГоспошлина;		
	ИначеЕсли ВидРешения = Справочники.ТипыИсполнительныхЛистов.ОВзысканииГоспошлины Тогда
		стр.СуммаГоспошлина = ДоляГоспошлина + ОстатокГоспошлина;
	КонецЕсли;	
	
	Сумма = 0;
	Для Каждого Элемент Из Массив Цикл
		Сумма = Сумма + стр["Сумма" + Элемент];
	КонецЦикла;
	Стр.СуммаРешения = Сумма;

КонецПроцедуры

Процедура ДобавитьИДСолидарноеВзыскание(ВидРешения)
	кол = ЭтотОбъект.ЧастиРешения.Количество();
	Если кол = 0 Тогда
		НомерРешения = 0;
	Иначе
		НомерРешения = ЭтотОбъект.ЧастиРешения[кол-1].ЧастьРешения;
	КонецЕсли;
	
	стр = ЭтотОбъект.ЧастиРешения.Добавить();
	стр.ЧастьРешения = НомерРешения + 1;
	стр.ВидРешения = ВидРешения;
	Если ВидРешения = Справочники.ТипыИсполнительныхЛистов.ОВзысканииДолга Тогда
		стр.СуммаОсновнойДолг = ЭтотОбъект.РешениеОсновнойДолг;
		стр.СуммаПроценты = ЭтотОбъект.РешениеПроценты + ЭтотОбъект.РешениеНачисленныеПроценты395 + ЭтотОбъект.РешениеСуммаИндексации208;
		стр.СуммаШтрафы = ЭтотОбъект.РешениеШтрафы;
		стр.СуммаПени = ЭтотОбъект.РешениеПени;
	ИначеЕсли ВидРешения = Справочники.ТипыИсполнительныхЛистов.ОВзысканииДолгаВключаяИздержки Тогда
		стр.СуммаОсновнойДолг = ЭтотОбъект.РешениеОсновнойДолг;
		стр.СуммаПроценты = ЭтотОбъект.РешениеПроценты + ЭтотОбъект.РешениеНачисленныеПроценты395 + ЭтотОбъект.РешениеСуммаИндексации208;
		стр.СуммаШтрафы = ЭтотОбъект.РешениеШтрафы;
		стр.СуммаПени = ЭтотОбъект.РешениеПени;
		стр.СуммаГоспошлина = ЭтотОбъект.РешениеГоспошлина;
	ИначеЕсли ВидРешения = Справочники.ТипыИсполнительныхЛистов.ОбОбращенииВзысканияНаЗалогВключаяИздержки Тогда
		стр.СуммаГоспошлина = ЭтотОбъект.РешениеГоспошлина;		
	ИначеЕсли ВидРешения = Справочники.ТипыИсполнительныхЛистов.ОВзысканииГоспошлины Тогда
		стр.СуммаГоспошлина = ЭтотОбъект.РешениеГоспошлина;
	КонецЕсли;	
	
	Массив = РасчетЗадолженностиСудопроизводство.СписокСоставляющихДолгаПоРешению();
	Сумма = 0;
	Для Каждого Элемент Из Массив Цикл
		Попытка
			Сумма = Сумма + стр["Сумма" + Элемент];
		Исключение
			
		КонецПопытки;
	КонецЦикла;
	Стр.СуммаРешения = Сумма;
	
	
	Для Каждого стрОтветчик Из ЭтотОбъект.Ответчики Цикл
		стрИД = ЭтотОбъект.ИД.Добавить();
		стрИД.ЧастьРешения = стр.ЧастьРешения;
		стрИД.ВидРешения = ВидРешения;
		стрИД.Ответчик = стрОтветчик.Значение;
		стрИД.ВидОтветчика = стрОтветчик.ВидОтветчика; 
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

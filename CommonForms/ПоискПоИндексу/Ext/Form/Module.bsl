//Процедура КнопкаВыполнитьНажатие(Кнопка)
//	ОсуществитьВыбор();
//КонецПроцедуры

//Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
//	
//	ЭлементыФормы.НадписьОРегионеИРайоне.Заголовок = "" + НайденныйРегион + ?(ЗначениеЗаполнено(НайденныйРегион) И ЗначениеЗаполнено(НайденныйРайон), ", ", "") + НайденныйРайон;
//	
//	ЕстьОписание = Ложь;
//	Для Каждого Стр Из НайденныеЗаписиПоИндексу Цикл
//		Если Не ПустаяСтрока(Стр.Описание) Тогда
//			ЕстьОписание = Истина;
//			Прервать;
//		КонецЕсли;
//	КонецЦикла;
//	
//	ЭлементыФормы.ТабНайденные.Колонки.Описание.Видимость = ЕстьОписание;
//КонецПроцедуры

//Процедура ТабНайденныеВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
//	ОсуществитьВыбор();
//КонецПроцедуры

//Процедура ОсуществитьВыбор()

//	текСтр = ЭлементыФормы.ТабНайденные.ТекущаяСтрока;
//	Если текСтр <> Неопределено Тогда
//		Закрыть(текСтр.Код);
//	КонецЕсли;

//КонецПроцедуры

Функция ЕстьНеЦифры(Знач СтрокаПроверки) Экспорт

	СписокКодовЧисел = Новый СписокЗначений;
	Для а = 48 По 57 Цикл
		СписокКодовЧисел.Добавить(а);
	КонецЦикла; 
	
	СтрокаПроверки = СокрЛП(СтрокаПроверки);
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		
		Возврат Истина;
		
	Иначе
		
		Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
			Если СписокКодовЧисел.НайтиПоЗначению(КодСимвола(Сред(СтрокаПроверки, а, 1))) = Неопределено Тогда
				Возврат Истина;
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли; 

	Возврат Ложь;
	
КонецФункции


Функция ПолучитьМаскуПоТипу(ТипАдресногоЭлемента) Экспорт

	Если ТипАдресногоЭлемента = 1 Тогда
		Возврат МаскаРегиона();

	ИначеЕсли ТипАдресногоЭлемента = 2 Тогда
		Возврат МаскаРайона();

	ИначеЕсли ТипАдресногоЭлемента = 3 Тогда
		Возврат МаскаГорода();

	ИначеЕсли ТипАдресногоЭлемента = 4 Тогда
		Возврат МаскаНасПункта();

	ИначеЕсли ТипАдресногоЭлемента = 5 Тогда
		Возврат МаскаУлицы();

	ИначеЕсли ТипАдресногоЭлемента = 6 Тогда
		Возврат МаскаДома();

	Иначе
		Возврат МаскаКвартиры();

	КонецЕсли;

КонецФункции

Процедура НайтиЗаписиВКИПоИндексу(Индекс, НайденныйРегион, НайденныйРайон) Экспорт
	
	// Очистим таблицу
	НайденныеЗаписиПоИндексу.Очистить();
	
	// Проверим правильность ввода индекса
	Если (СтрДлина(Индекс) <> 6) ИЛИ (ЕстьНеЦифры(Индекс)) Тогда
		Возврат;
	КонецЕсли;
	
	// Найдем записи по индексу
	Запрос = Новый Запрос;
	Запрос.Текст = 	"ВЫБРАТЬ
	               	|	АдресныйКлассификатор.ТипАдресногоЭлемента,
	               	|	АдресныйКлассификатор.Код,
	               	|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение Как Наименование
	               	|ИЗ
	               	|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	               	|ГДЕ
	               	|	АдресныйКлассификатор.Индекс = &Индекс";
	Запрос.УстановитьПараметр("Индекс", Индекс);
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Если ничего не нашли
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Запомним наименования найденных записей 
	ТипПоКоду = Новый Соответствие;
	ИмяПоКоду = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		ТипАдресногоЭлемента = Выборка.ТипАдресногоЭлемента;
		Код = Выборка.Код;
		
		Если ТипАдресногоЭлемента < 6 Тогда
			// не дом
			ИмяПоКоду.Вставить(Код, СокрП(Выборка.Наименование));
		КонецЕсли;
		
		ТипПоКоду.Вставить(Код, ТипАдресногоЭлемента);
	КонецЦикла;
	
	// Определим коды объектов, наименования которых нужно найти
	мНужноИскать = Новый Массив;
	сНужноИскать = Новый Соответствие;
	
	Для Каждого Найденный Из ТипПоКоду Цикл
		ТипАдресногоЭлемента = Найденный.Значение;
		Код = Найденный.Ключ;
		
		Пока ТипАдресногоЭлемента > 1 Цикл
			ТипАдресногоЭлемента = ТипАдресногоЭлемента - 1;
			Маска = ПолучитьМаскуПоТипу(ТипАдресногоЭлемента);
			Код = Код - (Код % Маска);
			
			Если (ТипПоКоду.Получить(Код) = Неопределено) И (сНужноИскать.Получить(Код) = Неопределено) Тогда
				сНужноИскать.Вставить(Код, ТипАдресногоЭлемента);
				мНужноИскать.Добавить(Код);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Получим недостающие наименования
	Если мНужноИскать.Количество() <> 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	АдресныйКлассификатор.ТипАдресногоЭлемента,
		               |	АдресныйКлассификатор.Код,
		               |	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение Как Наименование
		               |ИЗ
		               |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		               |ГДЕ
		               |	АдресныйКлассификатор.Код В(&масКодов)";
		Запрос.УстановитьПараметр("масКодов", мНужноИскать);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ИмяПоКоду.Вставить(Выборка.Код, СокрП(Выборка.Наименование));
			ТипПоКоду.Вставить(Выборка.Код, Выборка.ТипАдресногоЭлемента);
		КонецЦикла;
	КонецЕсли;
	
	// Определим какие не нужно выводить записи и какие есть различные регионы и районы
	ВсеРегионы = Новый Соответствие;
	ВсеРайоны  = Новый Соответствие;
	НеВыводитьВТаблицу = Новый Соответствие;

	Для Каждого Элемент Из ТипПоКоду Цикл
		ТипАдресногоЭлемента = Элемент.Значение;
		Код = Элемент.Ключ;
		
		Если ТипАдресногоЭлемента = 1 Тогда
			ВсеРегионы.Вставить(Код, Истина);
			НайденныйРегион = Код;
			
		ИначеЕсли ТипАдресногоЭлемента = 2 Тогда
			ВсеРайоны.Вставить(Код, Истина);
			НайденныйРайон = Код;
			
		КонецЕсли;
		
		Если ТипАдресногоЭлемента = 6 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ТипАдресногоЭлемента > 1 Цикл
			ТипАдресногоЭлемента = ТипАдресногоЭлемента - 1;
			Маска = ПолучитьМаскуПоТипу(ТипАдресногоЭлемента);
			Код = Код - (Код % Маска);
			НеВыводитьВТаблицу.Вставить(Код, Истина);
		КонецЦикла;
	КонецЦикла;
	
	НайденныйРегион = ?(ВсеРегионы.Количество() = 1, ИмяПоКоду.Получить(НайденныйРегион), "");
	НайденныйРайон  = ?(ВсеРайоны.Количество()  = 1, ИмяПоКоду.Получить(НайденныйРайон),  "");
	
	// Определим уровень детализации выводимой информации о городе / населенном пункте
	Если ВсеРегионы.Количество() > 1 Тогда
		ДетализацияДоУровня = 1;
	ИначеЕсли ВсеРайоны.Количество() > 1 Тогда
		ДетализацияДоУровня = 2;
	Иначе
		ДетализацияДоУровня = 3;
	КонецЕсли;
	
	// Заполним таблицу с найденными записями
	Для Каждого Элемент Из ТипПоКоду Цикл
		ТипАдресногоЭлемента = Элемент.Значение;
		Код = Элемент.Ключ;
		
		Если (ТипАдресногоЭлемента = 6) ИЛИ (НеВыводитьВТаблицу.Получить(Код) <> Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		новСтр = НайденныеЗаписиПоИндексу.Добавить();
		новСтр.Улица    = ?(ТипАдресногоЭлемента = 5, ИмяПоКоду.Получить(Код), "< Без улицы >");
		новСтр.Код      = Код;
		новСтр.Описание = "";
		
		// Получим описание
		ТипАдресногоЭлемента = ?(ТипАдресногоЭлемента = 5, 4, ТипАдресногоЭлемента);
		Пока ТипАдресногоЭлемента >= ДетализацияДоУровня Цикл
			Код = Код - (Код % ПолучитьМаскуПоТипу(ТипАдресногоЭлемента));
			Если ПолучитьТипАдресногоЭлемента(Код) = ТипАдресногоЭлемента Тогда
				новСтр.Описание = новСтр.Описание + ?(новСтр.Описание = "", "", ", ") + ИмяПоКоду.Получить(Код);
			КонецЕсли;
			
			ТипАдресногоЭлемента = ТипАдресногоЭлемента - 1;
		КонецЦикла;
	КонецЦикла;
	
	НайденныеЗаписиПоИндексу.Сортировать("Улица, Код");
	
КонецПроцедуры

// Функция ставит в соответствие типу адресного элемента маску,
// через которую выделяется его значимый код
//
// Параметры:
//  ТипАдресногоЭлемента -  число - тип адресного элемента.
//
// Возвращаемое значение:
// Число - маска, при делении на которую выделяется значимый код
// адресного элемента
//
Функция ПолучитьТипАдресногоЭлемента(КодЭлемента) Экспорт
	
	Если КодЭлемента = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если КодЭлемента % МаскаРегиона() < 100  Тогда // регион 21 ноль и АА
		Возврат 1;
		
	ИначеЕсли КодЭлемента % МаскаРайона() < 100 Тогда // район 18 ноль и АА
		Возврат 2;
		
	ИначеЕсли КодЭлемента % МаскаГорода() < 100 Тогда // город 15 ноль и АА
		Возврат 3;
		
	ИначеЕсли КодЭлемента % МаскаНасПункта() < 100 Тогда // населнный пункт 12 ноль и АА
		Возврат 4;
		
	ИначеЕсли КодЭлемента % МаскаУлицы() < 100 Тогда // улица 8 ноль и АА
		Возврат 5;
		
	ИначеЕсли КодЭлемента % МаскаДома() < 100 Тогда // дом 4 ноль и АА
		Возврат 6;
		
	Иначе // квартира
		Возврат 7;
		
	КонецЕсли;
	
КонецФункции

 
// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаРегиона() Экспорт
	Возврат 100000000000000000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаРайона() Экспорт
	Возврат 100000000000000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаГорода() Экспорт
	Возврат 100000000000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаНасПункта() Экспорт
	Возврат 100000000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаУлицы() Экспорт
	Возврат 10000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаДома() Экспорт
	Возврат 1000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаКвартиры() Экспорт
	Возврат 100;
КонецФункции



&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//НайтиЗаписиВКИПоИндексу(ЭтаФорма.Параметры.Индекс, ЭтаФорма.Параметры.НайденныйРегион, ЭтаФорма.Параметры.НайденныйРайон)
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	НайтиЗаписиВКИПоИндексу(ЭтаФорма.Параметры.Индекс, ЭтаФорма.Параметры.НайденныйРегион, ЭтаФорма.Параметры.НайденныйРайон);	
КонецПроцедуры

&НаКлиенте
Процедура Выбрать(Команда)
	ОсуществитьВыбор();
КонецПроцедуры

&НаКлиенте
Процедура ОсуществитьВыбор()

	текСтр = Элементы.НайденныеЗаписиПоИндексу.ТекущиеДанные;
	Если текСтр <> Неопределено Тогда
		Закрыть(текСтр.Код);
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура НайденныеЗаписиПоИндексуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОсуществитьВыбор();
КонецПроцедуры


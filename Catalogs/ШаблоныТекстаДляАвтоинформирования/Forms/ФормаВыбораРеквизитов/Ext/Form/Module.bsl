
Перем ВыборкаПВХНазначениеСвойств;
Перем ВыборкаПВХСвойстваИЗначения;
Перем УстановитьФокус;
Перем Уровень;
Перем Найден;
Перем КоллекцияСтрок;
Перем СтрокаКоллекцииДерева;

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПриОткрытииНаСервере();
	// разворачиваем тек строку
	Элементы.тзМетаданные.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
КонецПроцедуры	

&НаСервере
Процедура ПолучитьДопРеквизитыДолжника()
    Запрос = Новый Запрос("ВЫБРАТЬ
                          |	НаборыСвойствДополнительныеРеквизиты.Свойство КАК Свойство,
                          |	ЕСТЬNULL(ДолжникиДополнительныеРеквизиты.Значение, """") КАК Значение
                          |ИЗ
                          |	Справочник.НаборыСвойств.ДополнительныеРеквизиты КАК НаборыСвойствДополнительныеРеквизиты
                          |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Должники.ДополнительныеРеквизиты КАК ДолжникиДополнительныеРеквизиты
                          |		ПО НаборыСвойствДополнительныеРеквизиты.Свойство = ДолжникиДополнительныеРеквизиты.Свойство
                          |			И (ДолжникиДополнительныеРеквизиты.Ссылка = &Объект)
                          |ГДЕ
                          |	НаборыСвойствДополнительныеРеквизиты.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.НаборыСвойств.Справочник_Должники)
                          |	И НаборыСвойствДополнительныеРеквизиты.Ссылка.Код = &Код");
	Запрос.УстановитьПараметр("Объект", Должник);
	Запрос.УстановитьПараметр("Код", Должник.ЮрФизЛицо.Код);
	ДопРеквизитыД.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры	

&НаСервере
Процедура ПолучитьДопРеквизитыДО()
    Запрос = Новый Запрос("ВЫБРАТЬ
                          |	НаборыСвойствДополнительныеРеквизиты.Свойство КАК Свойство,
                          |	ЕСТЬNULL(ДолговыеОбязательстваДополнительныеРеквизиты.Значение, """") КАК Значение
                          |ИЗ
                          |	Справочник.НаборыСвойств.ДополнительныеРеквизиты КАК НаборыСвойствДополнительныеРеквизиты
                          |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДолговыеОбязательства.ДополнительныеРеквизиты КАК ДолговыеОбязательстваДополнительныеРеквизиты
                          |		ПО НаборыСвойствДополнительныеРеквизиты.Свойство = ДолговыеОбязательстваДополнительныеРеквизиты.Свойство
                          |			И (ДолговыеОбязательстваДополнительныеРеквизиты.Ссылка = &Объект)
                          |ГДЕ
                          |	НаборыСвойствДополнительныеРеквизиты.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.НаборыСвойств.Справочник_ДолговыеОбязательства)
                          |	И НаборыСвойствДополнительныеРеквизиты.Ссылка.Код = &Код");
	Запрос.УстановитьПараметр("Объект", ДолговоеОбязательство);
	Запрос.УстановитьПараметр("Код", ДолговоеОбязательство.ТипДолговогоОбязательства.Код);
	ДопРеквизитыДО.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

&НаСервере
Процедура ПолучитьДопСведенияДолжника()
    Запрос = Новый Запрос("ВЫБРАТЬ
                          |	НаборыСвойствДополнительныеСведения.Свойство КАК Свойство,
                          |	ЕСТЬNULL(ДополнительныеСведения.Значение, """") КАК Значение,
                          |	НаборыСвойствДополнительныеСведения.Свойство.Родитель КАК Группа
                          |ИЗ
                          |	Справочник.НаборыСвойств.ДополнительныеСведения КАК НаборыСвойствДополнительныеСведения
                          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
                          |		ПО НаборыСвойствДополнительныеСведения.Свойство = ДополнительныеСведения.Свойство
                          |			И (ДополнительныеСведения.Объект = &Объект)
                          |ГДЕ
                          |	НаборыСвойствДополнительныеСведения.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.НаборыСвойств.Справочник_Должники)
                          |	И НаборыСвойствДополнительныеСведения.Ссылка.Код = &Код");
	Запрос.УстановитьПараметр("Объект", Должник);
	Запрос.УстановитьПараметр("Код", Должник.ЮрФизЛицо.Код);
	ДопСведенияД.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	НаборыСвойствДополнительныеСведения.Свойство.Родитель КАК Свойство
	               |ИЗ
	               |	Справочник.НаборыСвойств.ДополнительныеСведения КАК НаборыСвойствДополнительныеСведения
	               |ГДЕ
	               |	НаборыСвойствДополнительныеСведения.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.НаборыСвойств.Справочник_Должники)
	               |	И НаборыСвойствДополнительныеСведения.Ссылка.Код = &Код";
	ГруппыДСД.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

&НаСервере
Процедура ПолучитьДопСведенияДО()
    Запрос = Новый Запрос("ВЫБРАТЬ
                          |	НаборыСвойствДополнительныеСведения.Свойство КАК Свойство,
                          |	ЕСТЬNULL(ДополнительныеСведения.Значение, """") КАК Значение,
                          |	НаборыСвойствДополнительныеСведения.Свойство.Родитель КАК Группа
                          |ИЗ
                          |	Справочник.НаборыСвойств.ДополнительныеСведения КАК НаборыСвойствДополнительныеСведения
                          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
                          |		ПО НаборыСвойствДополнительныеСведения.Свойство = ДополнительныеСведения.Свойство
                          |			И (ДополнительныеСведения.Объект = &Объект)
                          |ГДЕ
                          |	НаборыСвойствДополнительныеСведения.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.НаборыСвойств.Справочник_ДолговыеОбязательства)
                          |	И НаборыСвойствДополнительныеСведения.Ссылка.Код = &Код");
	Запрос.УстановитьПараметр("Объект", ДолговоеОбязательство);
	Запрос.УстановитьПараметр("Код", ДолговоеОбязательство.ТипДолговогоОбязательства.Код);
	ДопСведенияДО.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	НаборыСвойствДополнительныеСведения.Свойство.Родитель КАК Свойство
	               |ИЗ
	               |	Справочник.НаборыСвойств.ДополнительныеСведения КАК НаборыСвойствДополнительныеСведения
	               |ГДЕ
	               |	НаборыСвойствДополнительныеСведения.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.НаборыСвойств.Справочник_ДолговыеОбязательства)
	               |	И НаборыСвойствДополнительныеСведения.Ссылка.Код = &Код";
	ГруппыДСДО.Загрузить(Запрос.Выполнить().Выгрузить());					  
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере();
	ПолучитьДопРеквизитыДолжника();
	ПолучитьДопРеквизитыДО();
	ПолучитьДопСведенияДолжника();
	ПолучитьДопСведенияДО();
			
	ТаблицаМатаданных();		
	//Устанавливаем начальное значение переменных
	УстановитьФокус = Истина;
	Если ЗначениеЗаполнено(ХранилищеЗначРекв) Тогда
		МсвРеквСтрок = ХранилищеЗначРекв.Получить();		
		Если МсвРеквСтрок <> неопределено тогда
			КолСтрМсв = МсвРеквСтрок.Количество();					
			Если КолСтрМсв > 1 тогда				
				Уровень = КолСтрМсв - 2;                                  
			Иначе
				УстановитьФокус = Ложь;			
			КонецЕсли;
		Иначе
			УстановитьФокус = Ложь;		
		КонецЕсли;
	Иначе
		УстановитьФокус = Ложь
	КонецЕсли;
	Найден = Ложь;
	СтрКолДер = тзМетаданные.ПолучитьЭлементы()[0];
	КоллекцияСтрок = СтрКолДер.ПолучитьЭлементы();
КонецПроцедуры

// Формирует дерево реквизитов и их значений.
&НаСервере
Процедура ТаблицаМатаданных();
	ТекСтрока = ДобавитьНулевойУровень(Организация);
	СоздатьДерево(Организация, ТекСтрока, 2);		
	ТекСтрока = ДобавитьНулевойУровень(Должник);
	СоздатьДерево(Должник, ТекСтрока, 2);			
	ТекСтрока = ДобавитьНулевойУровень(ДолговоеОбязательство);
	СоздатьДерево(ДолговоеОбязательство, ТекСтрока, 2);
КонецПроцедуры

&НаСервере
// Добавляет первым уровнем сам объект.
//
// Параметры
//  Документ  		- Объект который и добавляется,
//	тзМетаданные	- Формируемое дерево значений.
//
// Возвращаемое значение:
//   Текущая строка нулевого уровня.
//
Функция ДобавитьНулевойУровень(Документ)
	ТекСтрока = тзМетаданные.ПолучитьЭлементы().Добавить(); 
	ТекСтрока.Синоним = Документ.Метаданные().Синоним;
	ТекСтрока.Имя = "Ссылка";
	ТекСтрока.Значение = Документ;
	ТекСтрока.Тип = ТипЗнч(Документ);  
	Возврат ТекСтрока;
КонецФункции // ()

&НаСервере
// Проверяет, годится ли переданный тип для извлечения реквизитов.
//
// Параметры
//	ПроверяемыйТип  		– Тип – Проверяемый тип.
//
// Возвращаемое значение:
//  Булево   	– истина если подходит.
//
Функция ПроверкаТипНужныйОбъект(ПроверяемыйТип)
	Если Не Строка(ПроверяемыйТип) = "Число" И Не Строка(ПроверяемыйТип) = "Дата" И Не Строка(ПроверяемыйТип) = "Булево" И 
			Не Строка(ПроверяемыйТип) = "Строка" И Не Строка(ПроверяемыйТип) = "Неопределено" И
			Не Найти(ПроверяемыйТип, "Перечисление ссылка") > 0 И Не Найти(ПроверяемыйТип, "Хранилище значения") > 0 И
			Не Строка(ПроверяемыйТип) = "Уникальный идентификатор" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции // ПроверкаТипНужныйОбъект()

// Создает дерево реквизитов.
//
// Параметры:
//	Документ			– СправочникСсылка или ДокументСсылка – Документ
//              		на основании разворачивается дерево,
//  ТекСтрока			– строка дерева значений,
// 	КолВложений 		- уровень вложений,             
//  ВладелецЧерезОдин 	- СправочникСсылка	- контроль повторяемости
// 						одинаковоого владельца,
//	ПараметрВлож  		- Булево, если ложь, то уровень дерева заполняем 
//						пустыми значениями. 
&НаСервере
Процедура СоздатьДерево(Документ, ТекСтрока, Знач КолВложений, ПараметрВлож = Истина)
	Если ПараметрВлож = ложь Тогда
		КолВложений = 1;
	КонецЕсли;  
	 
	КолВложенийИсх = КолВложений;
	КолВложений = КолВложений - 1;
	Если КолВложений < 0 Тогда
		Возврат;
	КонецЕсли;
	                   
	Попытка
	 	КолМетаданных = Документ.Метаданные().Реквизиты.Количество();
	Исключение
		КолМетаданных = Документ.Метаданные().ЗначенияПеречисления.Количество();
	КонецПопытки;	
	КолДляВывода = КолМетаданных;
	СчетчикМетаданных = -1;
	 
	//ОтФильтрТипов - фильтр типов
	// если значение заполнено, проверям на соответствие типу текущих данных	 
	Если ПроверкаТипНужныйОбъект(ТипЗнч(Документ)) Тогда	 
		Если не ЗначениеЗаполнено(ОтФильтрТипов) или не ПараметрВлож Тогда	 
			// Дополнение дерева внутренними реквизитами.     			 	 
			//Если Найти(Строка(ТипЗнч(Документ)), "Справочник ссылка:") Тогда
			Если Метаданные.Справочники.Найти(Документ.Метаданные().Имя) = Документ.Метаданные() Тогда
				Если ЗначениеЗаполнено(ОтФильтрТипов) Тогда
					Если СоздатьВложенность(Документ.Метаданные().Реквизиты,Документ) Тогда 
						ТекСтрока3 = ТекСтрока.ПолучитьЭлементы().Добавить(); 
						Если ОтФильтрТипов.СодержитТип(ТипЗнч(Документ.Код)) Тогда 
							ЗаполнитьОбъектДерева("Код",Документ,ТекСтрока3);
						КонецЕсли;
					КонецЕсли;			 
				ИначеЕсли ВыводитьТЧ Тогда 
					// Добавление ТЧ.
					КоличествоТЧ = Документ.Метаданные().ТабличныеЧасти.Количество();
					Если КоличествоТЧ > 0 Тогда
						Для ТекТЧ=0 По КоличествоТЧ - 1 Цикл
							ТекСтрока3 = ТекСтрока.ПолучитьЭлементы().Добавить(); 
							ЗаполнитьОбъектДерева("Табличная Часть",Документ,ТекСтрока3,ТекТЧ);
 						КонецЦикла;				
					КонецЕсли;	 
					Если не ПараметрВлож и СоздатьВложенность(Документ.Метаданные().Реквизиты,Документ) Тогда
						ТекСтрока3 = ТекСтрока.ПолучитьЭлементы().Добавить();
					КонецЕсли;			 
				Иначе	 
					ТекСтрока3 = ТекСтрока.ПолучитьЭлементы().Добавить();
					ЗаполнитьОбъектДерева("Код",Документ,ТекСтрока3); 
				КонецЕсли;
			//ИначеЕсли Найти(Строка(ТипЗнч(Документ)), "Документ ссылка:") или 
			ИначеЕсли Метаданные.Документы.Найти(Документ.Метаданные().Имя) = Документ.Метаданные() ИЛИ	
					//Найти(Строка(ТипЗнч(Документ)), "Задача ссылка:") Тогда
					Метаданные.Задачи.Найти(Документ.Метаданные().Имя) = Документ.Метаданные() Тогда
				Задача = Найти(Строка(ТипЗнч(Документ)), "Задача ссылка:");
				Если ЗначениеЗаполнено(ОтФильтрТипов) Тогда
					Если СоздатьВложенность(Документ.Метаданные().Реквизиты,Документ) Тогда 		 
						ТекСтрока3 = ТекСтрока.ПолучитьЭлементы().Добавить();
						ДобавитьЕщеСтроку = Ложь;
						 Если ОтФильтрТипов.СодержитТип(ТипЗнч(Документ.Номер)) Тогда 
							 ЗаполнитьОбъектДерева("Номер",Документ,ТекСтрока3);
							 ДобавитьЕщеСтроку = Истина;
						 КонецЕсли;	 	 
						 Если ДобавитьЕщеСтроку Тогда
							 ТекСтрока3 = ТекСтрока.ПолучитьЭлементы().Добавить();
						 КонецЕсли; 
						 Если ОтФильтрТипов.СодержитТип(ТипЗнч(Документ[ТекСтрока3.Имя])) Тогда 
							 ЗаполнитьОбъектДерева("Дата",Документ,ТекСтрока3);
						 КонецЕсли;
						 Если Задача Тогда
							 Если ОтФильтрТипов.СодержитТип(ТипЗнч(Документ[ТекСтрока3.Имя])) Тогда 
								 ТекСтрока3 = ТекСтрока.ПолучитьЭлементы().Добавить();
								 ЗаполнитьОбъектДерева("Наименование",Документ,ТекСтрока3) ;
							 КонецЕсли;
						 КонецЕсли;	 
					 КонецЕсли;
				 ИначеЕсли ВыводитьТЧ Тогда 
					 // Добавление ТЧ.
					 КоличествоТЧ = Документ.Метаданные().ТабличныеЧасти.Количество();
					 Если КоличествоТЧ > 0 Тогда
						 Для ТекТЧ=0 По КоличествоТЧ - 1 Цикл
							 ТекСтрока3 = ТекСтрока.ПолучитьЭлементы().Добавить(); 
							 ЗаполнитьОбъектДерева("Табличная Часть",Документ,ТекСтрока3,ТекТЧ) ;
                         КонецЦикла;
					 КонецЕсли; 		 
					 Если не ПараметрВлож и СоздатьВложенность(Документ.Метаданные().Реквизиты,Документ) Тогда
						 ТекСтрока3 = ТекСтрока.ПолучитьЭлементы().Добавить();
					 КонецЕсли;		     					 
				 Иначе		 
					 ТекСтрока3 = ТекСтрока.ПолучитьЭлементы().Добавить();
					 ЗаполнитьОбъектДерева("Номер",Документ,ТекСтрока3) ;
					 ТекСтрока3 = ТекСтрока.ПолучитьЭлементы().Добавить();
					 ЗаполнитьОбъектДерева("Дата",Документ,ТекСтрока3) ;
					 Если Задача Тогда
						 ТекСтрока3 = ТекСтрока.ПолучитьЭлементы().Добавить();
					 	 ЗаполнитьОбъектДерева("Наименование",Документ,ТекСтрока3) ;
    				 КонецЕсли; 
				 КонецЕсли;
			КонецЕсли;
		 КонецЕсли;		 
	 КонецЕсли;
	 
	 // Добавление владельца и разворачивание дерева реквизитов.
	 Для СчетчикМетаданных=-1 По КолМетаданных-1 Цикл
		 //ОбработкаПрерыванияПользователя();
		 Объект = Неопределено;
		 Если ПараметрВлож Тогда	 
			 Если СчетчикМетаданных <> -1 Тогда		
				 Объект = Документ.Метаданные().Реквизиты[СчетчикМетаданных];
				 ОбъектТип = Объект.Тип.Типы()[0];
				 ЕстьСчетаХозНалог = (Найти(Строка(ОбъектТип),"ПланСчетов")>0); 
				 Если ЗначениеЗаполнено(ОтФильтрТипов) Тогда
					 ИдемДальше = Ложь;
					 Если ПроверкаТипНужныйОбъект(ОбъектТип) Тогда
						 ТекОбъект = Документ[Объект.Имя];
						 Если ТекОбъект <> Неопределено Тогда
							Попытка
							 	ИдемДальше = СоздатьВложенность(ТекОбъект.Метаданные().Реквизиты,ТекОбъект);
							Исключение
								ИдемДальше = СоздатьВложенность(ТекОбъект.Метаданные().ЗначенияПеречисления,
										ТекОбъект);
							КонецПопытки;
						 КонецЕсли; 
					 КонецЕсли; 
					 Если (ОтФильтрТипов.СодержитТип(ОбъектТип)или ИдемДальше) и 
						 не ЕстьСчетаХозНалог Тогда
						 
						 ТекСтрока2 = ТекСтрока.ПолучитьЭлементы().Добавить();
						 ТекСтрока2.Синоним = Объект.Синоним;
						 
						 ТекСтрока2.Имя = Объект.Имя;
						 ТекСтрока2.Значение = Документ[Объект.Имя];
						 ТекСтрока2.Тип = Объект.Тип;
					 ИначеЕсли ЕстьСчетаХозНалог и ОтФильтрТипов.СодержитТип(ОбъектТип) Тогда 
						 
						 ТекСтрока2 = ТекСтрока.ПолучитьЭлементы().Добавить();
						 ТекСтрока2.Синоним = Объект.Синоним;
						 
						 ТекСтрока2.Имя = Объект.Имя;
						 ТекСтрока2.Значение = Документ[Объект.Имя];
						 ТекСтрока2.Тип = Объект.Тип;
					 КонецЕсли;		 
				 Иначе
					 ТекОбъект = Документ[Объект.Имя];
					 ОбъектНайден = ?(не ТекОбъект = Неопределено,Истина,Ложь);
					 //Это условие получает истину если наш элемент спр или док и у него есть вложденные элементы
					 Условие1 = Ложь;
					 Если ОбъектТип = Тип("ХранилищеЗначения") Тогда 
						 Если ТипЗнч(ТекОбъект.Получить()) = Тип("ТаблицаЗначений") Тогда
							 Условие1 = Истина;
						 ИначеЕсли ПроверкаТипНужныйОбъект(ОбъектТип) И ОбъектНайден Тогда
							Попытка
							 	Условие1 = СоздатьВложенность(ТекОбъект.Метаданные().Реквизиты,ТекОбъект);
							Исключение
								Условие1 = СоздатьВложенность(ТекОбъект.Метаданные().ЗначенияПеречисления,ТекОбъект);
							КонецПопытки;
						 КонецЕсли;
					 ИначеЕсли ПроверкаТипНужныйОбъект(ОбъектТип) И ОбъектНайден Тогда
						Попытка
						 	Условие1 = СоздатьВложенность(ТекОбъект.Метаданные().Реквизиты,ТекОбъект);
						Исключение
							Условие1 = СоздатьВложенность(ТекОбъект.Метаданные().ЗначенияПеречисления,ТекОбъект);
						КонецПопытки;	
					 КонецЕсли;
					 //Условие определяет нужно ли выводить по отборуТЧ минус СчетаХозНалог строку
					 Условие2 = Условие1 и ВыводитьТЧ и не ЕстьСчетаХозНалог;
					 ЗаполнитьСтроку = ?(Условие2 или не ВыводитьТЧ,Истина,Ложь);
					 				 					 					 
					 Если ЗаполнитьСтроку Тогда //И ПроверкаТипНужныйОбъект(Объект.Тип) Тогда 
						 ТекСтрока2 = ТекСтрока.ПолучитьЭлементы().Добавить();
						 ТекСтрока2.Синоним = Объект.Синоним;
						 ТекСтрока2.Имя = Объект.Имя;
						 ТекСтрока2.Значение = Документ[Объект.Имя];
						 ТекСтрока2.Тип = Объект.Тип;
					 КонецЕсли;
				 КонецЕсли;
			 КонецЕсли; 		 
		 КонецЕсли;
		 
		 Если Объект = Неопределено ИЛИ ТекСтрока2 = Неопределено Тогда
			 Продолжить;		
		 КонецЕсли;	 
		 Если ПроверкаТипНужныйОбъект(Объект.Тип) Тогда	 
			 ТекОбъект = Документ[Объект.Имя];
			 Если ТекОбъект = Неопределено Тогда						
				 Продолжить;
			 КонецЕсли;
			 Если ПараметрВлож Тогда
				 ПараметрВлож = Ложь;	
			 КонецЕсли;
			 СоздатьДерево(ТекОбъект, ТекСтрока2, КолВложений, ПараметрВлож);			
			 ПараметрВлож = Истина;		
		 КонецЕсли;
	 КонецЦикла; 
	Если КолДляВывода = 0 И ТекСтрока3 <> Неопределено Тогда
		ТекСтрока3.ПолучитьЭлементы().Очистить();
	КонецЕсли;	
	 
	//
	Если ТипЗнч(Документ) = Тип("СправочникСсылка.Контрагенты") Тогда
		ДопСтрока = ТекСтрока.ПолучитьЭлементы().Добавить();
		ДопСтрока.Синоним = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_Контрагенты.Наименование;
		ДопСтрока.Значение = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_Контрагенты;
		ДопСтрока.НеВыбирать = Истина;
		ДопСтрока.Тип = ТипЗнч(ДопРеквизитыД);
		Если ДопРеквизитыД.Количество() > 0 Тогда
			ДопСтрока.ПолучитьЭлементы().Добавить();
		КонецЕсли;
		
		ДопСтрока = ТекСтрока.ПолучитьЭлементы().Добавить();
		ДопСтрока.Синоним = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_Контрагенты.Наименование;
		ДопСтрока.Значение = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_Контрагенты;
		ДопСтрока.НеВыбирать = Истина;
		ДопСтрока.Тип = ТипЗнч(ДопРеквизитыД);
		Если ДопСведенияД.Количество() > 0 Тогда
			ДопСтрока.ПолучитьЭлементы().Добавить();
		КонецЕсли;
	ИначеЕсли ТипЗнч(Документ) = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда
		ДопСтрока = ТекСтрока.ПолучитьЭлементы().Добавить();
		ДопСтрока.Синоним = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_ДолговыеОбязательства.Наименование;
		ДопСтрока.Значение = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_ДолговыеОбязательства;
		ДопСтрока.НеВыбирать = Истина;
		ДопСтрока.Тип = ТипЗнч(ДопРеквизитыД);
		Если ДопРеквизитыДО.Количество() > 0 Тогда
			ДопСтрока.ПолучитьЭлементы().Добавить();
		КонецЕсли;
		
		ДопСтрока = ТекСтрока.ПолучитьЭлементы().Добавить();
		ДопСтрока.Синоним = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_ДолговыеОбязательства.Наименование;
		ДопСтрока.Значение = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_ДолговыеОбязательства;
		ДопСтрока.НеВыбирать = Истина;
		ДопСтрока.Тип = ТипЗнч(ДопРеквизитыД);
		Если ДопСведенияДО.Количество() > 0 Тогда
			ДопСтрока.ПолучитьЭлементы().Добавить();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Создает дерево реквизитов.
//
// Параметры:
//	Документ			– СправочникСсылка или ДокументСсылка – Документ
//              		на основании разворачивается дерево,
//  ТекСтрока			– строка дерева значений,
// 	КолВложений 		- уровень вложений,             
//  ВладелецЧерезОдин 	- СправочникСсылка	- контроль повторяемости
// 						одинаковоого владельца,
//	ПараметрВлож  		- Булево, если ложь, то уровень дерева заполняем 
//						пустыми значениями. 
&НаСервере
Процедура СоздатьДеревоДопРекИСвед(ДопРекИСвед, ТекСтрока, Знач КолВложений)
	Для Каждого Элемент Из ДопРекИСвед Цикл  
		//Элемент.Свойство
		ДопСтрока = ТекСтрока.ПолучитьЭлементы().Добавить();
		ДопСтрока.Значение = Элемент.Значение;	
		ДопСтрока.Синоним = Элемент.Свойство.Наименование;
		ДопСтрока.Тип = Элемент.Свойство.ТипЗначения;
		//ДопСтрока.Имя = Элемент.Свойство.Наименование;
		
		Если ТипЗнч(Элемент.Свойство) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") И
				Элемент.Свойство.ЭтоГруппа Тогда
			ДопСтрока.Значение = Элемент.Свойство;
			ДопСтрока.Тип = ТипЗнч(ДопРекИСвед);	
			ДопСтрока.НеВыбирать = Истина;
			ТекСтрокаНовая = ДопСтрока.ПолучитьЭлементы().Добавить();
			
		ИначеЕсли Элемент.Свойство.ТипЗначения.Типы().Количество() = 1 И 
				ПроверкаТипНужныйОбъект(Элемент.Свойство.ТипЗначения.Типы()[0]) 
				И Элемент.Значение <> Неопределено Тогда
			Попытка
				Условие = СоздатьВложенность(Элемент.Значение.Метаданные().Реквизиты, Элемент.Значение);
			Исключение
				Попытка
					Условие = СоздатьВложенность(Элемент.Значение.Метаданные().ЗначенияПеречисления, Элемент.Значение);
				Исключение
					Условие = Ложь;
				КонецПопытки;	
			КонецПопытки;
			Если Условие И Элемент.Значение <> Неопределено Тогда		
				ТекСтрокаНовая = ДопСтрока.ПолучитьЭлементы().Добавить();
			КонецЕсли;
		КонецЕсли;	 
	КонецЦикла;	 
КонецПроцедуры

&НаСервере
// Обеспечивает создание вложенности.
//
// Параметры
//  Реквизиты  		- Коллекция реквизитов,
//  Документ  		- Объект для которого создается вложенность,
//	Уровень		- Число		- Уровень вложенности.
//
Функция СоздатьВложенность(Реквизиты,Документ,Уровень = 0)
	КолРекв = Реквизиты.Количество();
	СоздатьВозврат = Ложь;
	Если КолРекв = 0 Тогда
		Возврат Ложь;	    		
	КонецЕсли; 
	ё = 0;
	Пока ё <= КолРекв-1 Цикл
		Попытка
			РеквизитТип = Реквизиты[ё].Тип;
		Исключение
			Возврат СоздатьВозврат;	
		КонецПопытки;
		
		Если ПроверкаТипНужныйОбъект(Реквизиты[ё].Тип) Тогда
			//Проверяем вложенность		
			Если Уровень = 2 тогда
				Создать = Истина;
			Иначе	
				Создать = ?(ВыводитьТЧ,Истина,ОтФильтрТипов.СодержитТип(Реквизиты[ё].Тип.Типы()[0]));	
				Если не Создать или ВыводитьТЧ Тогда 
					Объект = Реквизиты[ё];
					ТекОбъект = Документ[Объект.Имя];
					Если ТекОбъект = Неопределено Тогда
						Создать = Ложь;				
					Иначе 
						Попытка
							Создать = СоздатьВложенность(ТекОбъект.Метаданные().Реквизиты, ТекОбъект, Уровень+1);
						Исключение
							Создать = СоздатьВложенность(ТекОбъект.Метаданные().ЗначенияПеречисления, ТекОбъект, 
									Уровень+1);
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Создать = ?(ВыводитьТЧ,Ложь,ОтФильтрТипов.СодержитТип(Реквизиты[ё].Тип.Типы()[0]));			
		КонецЕсли;
		СоздатьВозврат = Создать или СоздатьВозврат;
		ё = ё+1;	
	КонецЦикла;
	Возврат СоздатьВозврат;	
КонецФункции

&НаСервере
// Заполняет строку дерева
//
// Параметры:
// ИмяСтроки 		- Строка, по этому параметру определяется какая часть кода выполняется	
// Документ			– СправочникСсылка или ДокументСсылка – Документ
//              		на основании разворачивается дерево,
//  ТекСтрока3		– строка дерева значений,
// 	ТекТЧ           - число, используется, если заполняется строка ТЧ             
//	
Процедура ЗаполнитьОбъектДерева(ИмяСтроки,Документ,ТекСтрока3,ТекТЧ = 0)
	ИмяСтроки = СокрЛП(ИмяСтроки);	
	Если ИмяСтроки = "Код" Тогда  
		ТекСтрока3.Синоним = "Код";
		ТекСтрока3.Имя = "Код";
		ТекСтрока3.Значение = Документ[ТекСтрока3.Имя];
		ТекСтрока3.Тип = ТипЗнч(Документ[ТекСтрока3.Имя]);
	ИначеЕсли  ИмяСтроки = "Табличная Часть" Тогда 
		НомерТЧ = ТекТЧ+1;
		ТекСтрока3.Значение = "Табличная Часть "+ НомерТЧ;
		ТекСтрока3.Тип	= Строка(ТипЗНЧ(Документ[Документ.Метаданные().ТабличныеЧасти[ТекТЧ].имя]));	
		ТекСтрока3.Имя   = Документ.Метаданные().ТабличныеЧасти[ТекТЧ].имя;
		ТекСтрока3.Синоним = Документ.Метаданные().ТабличныеЧасти[ТекТЧ].Синоним;
	ИначеЕсли  ИмяСтроки = "Номер" Тогда 
		ТекСтрока3.Синоним = "Номер";
		ТекСтрока3.Имя = "Номер";
		ТекСтрока3.Значение = Документ[ТекСтрока3.Имя];
		ТекСтрока3.Тип = ТипЗнч(Документ[ТекСтрока3.Имя]); 
	ИначеЕсли  ИмяСтроки = "Дата" Тогда 
		ТекСтрока3.Синоним = "Дата";
		ТекСтрока3.Имя = "Дата";
		ТекСтрока3.Значение = Документ[ТекСтрока3.Имя];
		ТекСтрока3.Тип = ТипЗнч(Документ[ТекСтрока3.Имя]); 
	ИначеЕсли  ИмяСтроки = "Наименование" Тогда 
		ТекСтрока3.Синоним = "Наименование";
		ТекСтрока3.Имя = "Наименование";
		ТекСтрока3.Значение = Документ[ТекСтрока3.Имя];
		ТекСтрока3.Тип = ТипЗнч(Документ[ТекСтрока3.Имя]); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тзМетаданныеПередРазворачиванием(Элемент, Строка, Отказ)
	ДеревоПередРазворачиванием(Строка);
КонецПроцедуры

&НаСервере
Процедура ДеревоПередРазворачиванием(Строка)
	ТекСтрока = тзМетаданные.НайтиПоИдентификатору(Строка);      
	Если ПроверкаТипНужныйОбъект(ТекСтрока.Тип) Тогда
		Если ТекСтрока.НеВыбирать Тогда
			ТекСтрока.ПолучитьЭлементы().Очистить();
			Если ТекСтрока.Значение = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_Контрагенты Тогда
				СоздатьДеревоДопРекИСвед(ДопРеквизитыД, ТекСтрока, 1);
			ИначеЕсли ТекСтрока.Значение = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_Контрагенты Тогда
				СоздатьДеревоДопРекИСвед(ГруппыДСД, ТекСтрока, 1);			
			ИначеЕсли ТекСтрока.Значение = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_ДолговыеОбязательства Тогда
				СоздатьДеревоДопРекИСвед(ДопРеквизитыДО, ТекСтрока, 1);
			ИначеЕсли ТекСтрока.Значение = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеСведения_ДолговыеОбязательства Тогда
				СоздатьДеревоДопРекИСвед(ДопСведенияДО, ТекСтрока, 1);
				
			ИначеЕсли ГруппыДСД.НайтиСтроки(Новый Структура("Свойство", ТекСтрока.Значение)).Количество() <> 0 Тогда
				Строки = ДопСведенияД.НайтиСтроки(Новый Структура("Группа", ТекСтрока.Значение));
				СоздатьДеревоДопРекИСвед(Строки, ТекСтрока, 1);
			ИначеЕсли ГруппыДСДО.НайтиСтроки(Новый Структура("Свойство", ТекСтрока.Значение)).Количество() <> 0 Тогда
		        Строки = ДопСведенияДО.НайтиСтроки(Новый Структура("Группа", ТекСтрока.Значение));
				СоздатьДеревоДопРекИСвед(Строки, ТекСтрока, 1);
			КонецЕсли;
		Иначе
			ТекОбъект = ТекСтрока.Значение;
			ТекСтрока.ПолучитьЭлементы().Очистить();
			СоздатьДерево(ТекОбъект, ТекСтрока, 1);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура тзМетаданныеВыбор(Элемент, ВыбраннаяСтрока0, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыбраннаяСтрока = тзМетаданные.НайтиПоИдентификатору(ВыбраннаяСтрока0);
	Если ВыбраннаяСтрока.НеВыбирать Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыводитьТЧ Тогда 		
		СтруктураРеквизита = Новый Структура;				
		Массив = Новый Массив;
		Массив.Добавить(ВыбраннаяСтрока.Имя);
		Если ТипЗнч(ВыбраннаяСтрока.Значение) = Тип("ХранилищеЗначения") Тогда
			Если ТипЗнч(ВыбраннаяСтрока.Значение.Получить()) <> Тип("ТаблицаЗначений") Тогда
				Сообщить("Поле ("+ВыбраннаяСтрока.Синоним + ") не является табличной частью!");
				ПризнакЗакрытия = Ложь;
				СтандартнаяОбработка = Ложь;
			Иначе
				ПризнакЗакрытия = Истина;
			КонецЕсли;
		ИначеЕсли Найти(Строка(ВыбраннаяСтрока.Тип), "табличная часть: ") <= 0 Тогда
			Сообщить("Поле ("+ВыбраннаяСтрока.Синоним + ") не является табличной частью!");
			ПризнакЗакрытия = Ложь;
			СтандартнаяОбработка = Ложь;
		Иначе 
			ПризнакЗакрытия = Истина;
		КонецЕсли; 		
		ТекСтр=ВыбраннаяСтрока;
		Уровень = ВыбраннаяСтрока.Уровень();
		СтрокаДляДЗначения="["+ВыбраннаяСтрока.Синоним+"]";
		СтрокаДляПолученияЗначения = ВыбраннаяСтрока.Имя;
		Для ТекУр=1 По Уровень Цикл
			ТекСтр = ТекСтр.Родитель;
			
			Массив.Добавить(ТекСтр.Имя);
			СтрокаДляДЗначения = СтрокаДляДЗначения+".["+ТекСтр.Синоним+"]";
			СтрокаДляПолученияЗначения = ВыбраннаяСтрока.Имя + "." + СтрокаДляПолученияЗначения;
		КонецЦикла;  		
		//Хранилище = Новый ХранилищеЗначения(Массив); 		
		СтруктураРеквизита.Вставить("Синоним", СтрокаДляДЗначения);
		СтруктураРеквизита.Вставить("СтрокаДляПолученияЗначения", СтрокаДляПолученияЗначения);
		//СтруктураРеквизита.Вставить("Хранилище", Хранилище);			
	Иначе		
		ПризнакЗакрытия = Истина;
		Если ЗначениеЗаполнено(ОтФильтрТипов) Тогда 			
			Если не ОтФильтрТипов.СодержитТип(ТипЗнч(ВыбраннаяСтрока.Значение)) Тогда
				Сообщить("Поле ("+ВыбраннаяСтрока.Синоним + ") не соответствует отбору");
				ПризнакЗакрытия = Ложь;
				СтандартнаяОбработка = Ложь;
			Иначе
				ПризнакЗакрытия = Истина;
			КонецЕсли;		
		КонецЕсли;		
		СтруктураРеквизита = Новый Структура;				
		Массив = Новый Массив;
		ТекСтр = ВыбраннаяСтрока;	
		Если ТекСтр.ЭтоСвойство Тогда
			СтруктураРеквизита.Вставить("Свойство", ТекСтр.Имя);
			//СтруктураРеквизита.Вставить("ВидСтроки", ПредопределенноеЗначение("Перечисление.тсВидыСтрокШаблонов.Свойство"));
		Иначе
			Массив.Добавить(ТекСтр.Имя);
			//СтруктураРеквизита.Вставить("ВидСтроки", ПредопределенноеЗначение("Перечисление.тсВидыСтрокШаблонов.Реквизит"));
			//СтруктураРеквизита.Вставить("Свойство", ПланыВидовХарактеристик.тсСвойстваОбъектов.ПустаяСсылка());
			СтруктураРеквизита.Вставить("Свойство", Неопределено);     
		КонецЕсли;	
				
		СтрокаДляДЗначения = ""; 
		СтрокаДляПолученияЗначения = "";
		Пока ТекСтр <> Неопределено Цикл		
			Массив.Добавить(ТекСтр.Имя);
			Родитель = ТекСтр.ПолучитьРодителя();
			Если Не (ТипЗнч(ТекСтр.Значение) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") И
					ТекСтр.Значение.ЭтоГруппа) Тогда
				Если Родитель <> Неопределено Тогда
					Если ТипЗнч(Родитель.Значение) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") И	
							Родитель.Значение.ЭтоГруппа Тогда
			        	Код = ПолучитьКодДополнительногоРеквизитаИлиСведения(ТекСтр.Синоним, Родитель.Значение);
						СтрокаДляДЗначения = "[" + Код + "-" + ТекСтр.Синоним + "]." + СтрокаДляДЗначения;
						СтрокаДляПолученияЗначения = ".." + СтрокаДляПолученияЗначения;
					Иначе
						СтрокаДляДЗначения = "[" + ТекСтр.Синоним + "]." + СтрокаДляДЗначения;
						СтрокаДляПолученияЗначения = ТекСтр.Имя + "." + СтрокаДляПолученияЗначения;
					КонецЕсли;		
				Иначе
					СтрокаДляДЗначения = "[" + ТекСтр.Синоним + "]." + СтрокаДляДЗначения;
					Если ТекСтр.Синоним = Должник.Метаданные().Синоним Тогда
						СтрокаДляПолученияЗначения = "Должник." + СтрокаДляПолученияЗначения;
					ИначеЕсли ТекСтр.Синоним = ДолговоеОбязательство.Метаданные().Синоним Тогда
						СтрокаДляПолученияЗначения = "ДолговоеОбязательство." + СтрокаДляПолученияЗначения;
					ИначеЕсли ТекСтр.Синоним = Организация.Метаданные().Синоним Тогда
						СтрокаДляПолученияЗначения = "Организация." + СтрокаДляПолученияЗначения;
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЕсли;
			ТекСтр = Родитель;	
		КонецЦикла;  	
		СтрокаДляДЗначения = Лев(СтрокаДляДЗначения, СтрДлина(СтрокаДляДЗначения) - 1);
		СтрокаДляПолученияЗначения = Лев(СтрокаДляПолученияЗначения, СтрДлина(СтрокаДляПолученияЗначения) - 1);
		//Хранилище = Новый ХранилищеЗначения(Массив); 
		СтруктураРеквизита.Вставить("Синоним", СтрокаДляДЗначения);
		СтруктураРеквизита.Вставить("СтрокаДляПолученияЗначения", СтрокаДляПолученияЗначения);
		//СтруктураРеквизита.Вставить("Хранилище", Хранилище);
	КонецЕсли;	
	Если ПризнакЗакрытия = Истина Тогда
		ЭтаФорма.Закрыть(СтруктураРеквизита);	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьКодДополнительногоРеквизитаИлиСведения(Наименование, Родитель)
	Возврат ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(Наименование, Истина, 
			Родитель).Код;
КонецФункции

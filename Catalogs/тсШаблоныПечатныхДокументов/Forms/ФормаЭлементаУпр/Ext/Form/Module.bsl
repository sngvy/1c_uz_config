
&НаКлиенте
Перем ТекущийUIDСтрокиТаблицы;

&НаКлиенте
Функция ЭтоУниверсальныйФормат()

	Возврат Объект.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыЭлДок.Универсальный");

КонецФункции // ()

&НаСервере
Функция ЭтоУниверсальныйФорматСервер()

	Возврат Объект.ТипДокумента = Перечисления.ТипыЭлДок.Универсальный;

КонецФункции

&НаКлиенте
Процедура ПутьКШаблонуWordНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекФайл = Новый Файл (Элемент.ВыделенныйТекст);
	ТекКаталог = ТекФайл.Путь;      
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл шаблона Microsoft Word";
	Диалог.ПолноеИмяФайла = "";
	Диалог.ПредварительныйПросмотр = Ложь;
	Диалог.Каталог = ТекКаталог;
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Фильтр =  "Шаблон документа (*.dot;*.dotx;*.ott)|*.dot;*.dotx;*.ott|";
	
	Если Диалог.Выбрать() Тогда
		Объект.ПутьКШаблонуWord = Диалог.ПолноеИмяФайла; 	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКШаблонуWordОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если УЭДСервер.ПроверитьСуществованияФайлаИлиКаталога(Объект.ПутьКШаблонуWord) = ложь Тогда
		Возврат;	
	КонецЕсли;
	
	
	СтандартнаяОбработка = Ложь; 	
	Word = Новый COMОбъект("Word.Application"); 
	Word.Visible = Ложь;
	
	ИмяФайла = Объект.ПутьКШаблонуWord;
	Попытка
		Документ = Word.Documents.Open(ИмяФайла); 		
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;          
	Word.Visible = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНаПримереДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//Если ТипЗнч(ВыбранноеЗначение) = Тип ("Тип") Тогда
	//	АнализируемыйТип = ВыбранноеЗначение;
	//Иначе
	//	АнализируемыйТип = ТипЗнч(ВыбранноеЗначение);
	//КонецЕсли;
	//
	//Если Не ЭлементыФормы.Назначение.Значение.СодержитТип(АнализируемыйТип) Тогда        		
	//	Если ТекущийТип <> Элемент.Значение Тогда
	//		Ответ = Вопрос("Обнаружена смена Назначения. Будут очищены пути к реквизитам во всех таблицах. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
	//		Если Ответ = КодВозвратаДиалога.Отмена Тогда
	//			СтандартнаяОбработка = Ложь;
	//			Возврат;  
	//		Иначе
	//			//ОчисткаЗначений(, Истина); 
	//		КонецЕсли; 
	//	КонецЕсли;
		
	Объект.ПоказыватьНаПримереДокумента = ВыбранноеЗначение;
		
	//	Если Не ВыбранноеЗначение = Неопределено Тогда
	//		
	//		тсРаботаСДокументами.ПривестиНазначениеКНаПримере(ВыбранноеЗначение, ЭлементыФормы.Назначение);	
	//		ЗаполнитьСписокТЧ(ВыбранноеЗначение);
	//		
	//	КонецЕсли;     		
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНаПримереДокументаОчистка(Элемент, СтандартнаяОбработка)
	Элементы.ПоказыватьНаПримереДокумента.ВыбиратьТип = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыИСвойстваЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//СтруктураПараметров = ОткрытьФормуВыбораРеквизитов(Объект.ПоказыватьНаПримереДокумента,ЭтаФорма,,,
	//		Элементы.РеквизитыИСвойства.ТекущиеДанные);	
	//		
	//Чуров
	ВызывающийДокумент = Объект.ПоказыватьНаПримереДокумента;
	ОтфильтрТипов = Неопределено;

	Если ВызывающийДокумент = Неопределено Тогда
		Сообщить("Поле ""На примере документа"" должно быть заполнено!", СтатусСообщения.Внимание); 
		Возврат;	
	КонецЕсли; 
			
	Форма = ПолучитьФорму("Справочник.тсШаблоныПечатныхДокументов.Форма.ФормаВыбораРеквизитовУпр");
	Форма.ВладелецФормы = ЭтаФорма;
	Если ЗначениеЗаполнено(ОтФильтрТипов) Тогда	
		ЗаголовогПлюс = " по типу """ + Строка(ОтФильтрТипов) + """";	
	КонецЕсли; 
	форма.Заголовок = "Выбор реквизитов" + ЗаголовогПлюс;
	Форма.ЗакрыватьПриЗакрытииВладельца = Истина;
	Форма.Документ = ВызывающийДокумент;
	Форма.ОтФильтрТипов = ОтФильтрТипов;
	Форма.Элементы.ТабМетаданныеДерево.ПодчиненныеЭлементы.тзМетаданныеЗначение.Видимость = Истина;
	
	ОткрытьФорму(Форма);
	//--
	
	
	//ТекущиеДанные = Элементы.РеквизитыИСвойства.ТекущиеДанные;
	//Если Не СтруктураПараметров = Неопределено Тогда
	//	//ТекущиеДанные.Значение 	= СтруктураПараметров.Синоним;
	//	//МассивХранилища = ОбъектыСервер.РазыменоватьСсылку(СтруктураПараметров, "Хранилище.Получить()"); 	
	//	//
	//	//ТекущиеДанные.КодДопСвойства = СтруктураПараметров.КодДопСвойства;
	//	//ТекущиеДанные.ОбъектДопСвойства = СтруктураПараметров.ОбъектДопСвойства;
	//	//
	//	//Список = Новый СписокЗначений;
	//	//Для Каждого Стр Из МассивХранилища Цикл
	//	//	Список.Добавить(Стр);
	//	//КонецЦикла;
	//	//ТекущиеДанные.Хранилище1 = Список;
	//	//РеквизитВЗначение(ТекущиеДанные.НомерСтроки, СтруктураПараметров.Хранилище);
	//	
	//	ТекущиеДанные.Значение 	= СтруктураПараметров.Синоним;
	//	МассивДанных = СтруктураПараметров.МассивДанных; 	
	//	
	//	ТекущиеДанные.КодДопСвойства = СтруктураПараметров.КодДопСвойства;
	//	ТекущиеДанные.ОбъектДопСвойства = СтруктураПараметров.ОбъектДопСвойства;
	//	
	//	Список = Новый СписокЗначений;
	//	Для Каждого Стр Из МассивДанных Цикл
	//		Список.Добавить(Стр);
	//	КонецЦикла;
	//	ТекущиеДанные.Хранилище1 = Список;
	//	ЗаписатьДанныеВСтрокуХранилище(ТекущиеДанные.НомерСтроки, МассивДанных);	
	//КонецЕсли;
КонецПроцедуры

//Чуров++
&НаКлиенте
Процедура РеквизитыИСвойстваЗначениеЗаполнение(СтруктураПараметров) 
	
	ТекущиеДанные = Элементы.РеквизитыИСвойства.ТекущиеДанные;
	Если Не СтруктураПараметров = Неопределено Тогда	
		ТекущиеДанные.Значение 	= СтруктураПараметров.Синоним;
		МассивДанных = СтруктураПараметров.МассивДанных; 	
		
		ТекущиеДанные.КодДопСвойства = СтруктураПараметров.КодДопСвойства;
		ТекущиеДанные.ОбъектДопСвойства = СтруктураПараметров.ОбъектДопСвойства;
		
		Список = Новый СписокЗначений;
		Для Каждого Стр Из МассивДанных Цикл
			Список.Добавить(Стр);
		КонецЦикла;
		ТекущиеДанные.Хранилище1 = Список;
		ЗаписатьДанныеВСтрокуХранилище(ТекущиеДанные.НомерСтроки, МассивДанных);	
	КонецЕсли;
КонецПроцедуры
//Чуров--


&НаСервере
Процедура ЗаписатьДанныеВСтрокуХранилище(НомерСтроки, МассивДанных)
	
	Рекв = РеквизитФормыВЗначение("Объект");
	Рекв.Записать_СтрокаХранилище(НомерСтроки, МассивДанных);
	ЗначениеВРеквизитФормы(Рекв, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура _РеквизитВЗначение(НомерСтроки, Хранилище)
	Рекв = РеквизитФормыВЗначение("Объект");
	Рекв.ЗаписатьХранилищеЗначений(НомерСтроки, Хранилище);
	ЗначениеВРеквизитФормы(Рекв, "Объект");
КонецПроцедуры

&НаКлиенте
Функция ОткрытьФормуВыбораРеквизитов(ВызывающийДокумент, ФормаВладелец = Неопределено,
		ПоказыватьЗначение = Истина, ОтФильтрТипов = Неопределено, ТекущиеДанныеПередОткрытием = Неопределено) Экспорт	
		
	Если ВызывающийДокумент = Неопределено Тогда
		Сообщить("Поле ""На примере документа"" должно быть заполнено!", СтатусСообщения.Внимание); 
		Возврат Неопределено;	
	КонецЕсли; 
	
	Форма = ПолучитьФорму("Справочник.тсШаблоныПечатныхДокументов.Форма.ФормаВыбораРеквизитовУпр");
	Форма.ВладелецФормы = ФормаВладелец;
	Если ЗначениеЗаполнено(ОтФильтрТипов) Тогда	
		ЗаголовогПлюс = " по типу """ + Строка(ОтФильтрТипов) + """";	
	КонецЕсли; 
	форма.Заголовок = "Выбор реквизитов" + ЗаголовогПлюс;
	Форма.ЗакрыватьПриЗакрытииВладельца = Истина;
	Форма.Документ = ВызывающийДокумент;
	Форма.ОтФильтрТипов = ОтФильтрТипов;
	Форма.Элементы.ТабМетаданныеДерево.ПодчиненныеЭлементы.тзМетаданныеЗначение.Видимость = ПоказыватьЗначение;	
	 	
	//Если Не  ТекущиеДанныеПередОткрытием = Неопределено Тогда
	//	Форма.ХранилищеЗначРекв = ТекущиеДанныеПередОткрытием.Хранилище;	
	//КонецЕсли;
		
	СтруктураПараметров = Форма.ОткрытьМодально();
	
	Возврат СтруктураПараметров;
	
КонецФункции // ()

&НаКлиенте
Процедура ТаблицаТаблицПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Элементы.ТаблицаВыбораТаблиц.ТекущиеДанные = Неопределено Тогда
		Отказ=Истина;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТаблицПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
		
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Поле = "<>";	
		Элемент.ТекущиеДанные.UID = Элементы.ТаблицаВыбораТаблиц.ТекущиеДанные.UID;
		Элемент.ТекущиеДанные.Используется = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбораТаблицПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда		
		Элемент.ТекущиеДанные.UID = Строка(Новый УникальныйИдентификатор);
		Элемент.ТекущиеДанные.ПолеТаблицы = "<>";
		Элемент.ТекущиеДанные.Используется = Истина;
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбораТаблицПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Отбор = Новый Структура;
	Отбор.Вставить("UID", Элемент.ТекущиеДанные.UID); 
	//ОтборСтрокоПоUID = 
	Элементы.ТаблицаТаблиц.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	//ОтборСтрокоПоUID.UID.Установить(Элемент.ТекущиеДанные.UID);
	Элементы.ТаблицаТаблиц.Обновить();
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТаблицЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаТаблиц.ТекущиеДанные;
	МассивКолонокФункции = Новый Массив;
	Элементы.ТаблицаТаблицЗначение.СписокВыбора.Очистить();
	ФункцияСсылка = Элементы.ТаблицаВыбораТаблиц.ТекущиеДанные.Функция; 
	СформироватьСписокКолонокФункции(ФункцияСсылка,МассивКолонокФункции);
	
	Для каждого Колонка Из МассивКолонокФункции Цикл
		Элементы.ТаблицаТаблицЗначение.СписокВыбора.Добавить(Колонка);
	КонецЦикла; 

	
	//
	//Для каждого Колонка Из Элементы.ТаблицаВыбораТаблиц.ТекущиеДанные.Функция.ВозвращаемыеКолонки Цикл
	//	Элементы.ТаблицаТаблицЗначение.СписокВыбора.Добавить(Колонка.Наименование);
	//КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокКолонокФункции(Ф,Массив)
	
	Для каждого Колонка Из ф.ВозвращаемыеКолонки Цикл
		Массив.Добавить(Колонка.Наименование);
	КонецЦикла; 
	
КонецПроцедуры


&НаСервере
Функция СформироватьНазваниеТЧ(ВызывающийДокумент, Хранилище, ДокументОснование = Неопределено) Экспорт
	
	//Хранилище = Новый ХранилищеЗначения(,);
	//СтруктураДерева = Хранилище.Получить();
	СтруктураДерева = Неопределено;
	ДокументВложенный = ВызывающийДокумент;				
					
	// Формируем путь.
	ГраницаМассива = СтруктураДерева.ВГраница();
	Счет = 0;
	Для Счет = 0 По ГраницаМассива Цикл
		НомерСКонца = ГраницаМассива - Счет;
			
		Если ГраницаМассива = Счет Тогда
			ДокументОснование = Неопределено;
			ДокументОснование = ДокументВложенный; 		
		КонецЕсли;      	
		
		СтрокаМассива = СтруктураДерева[НомерСКонца];
		ДокументВложенный = ДокументВложенный[СтрокаМассива];

	КонецЦикла;
	Значение = ДокументВложенный;
	 
	Возврат Значение;
КонецФункции // СформироватьНазваниеТЧ()

&НаКлиенте
Процедура РеквизитыИСвойстваПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Поле = "<>";	
		Элемент.ТекущиеДанные.Используется = Истина;
		Элемент.ТекущиеДанные.ТипПоля = ПредопределенноеЗначение("Перечисление.ТипыПолейУЭД.Реквизит");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыИСвойстваПередНачаломИзменения(Элемент, Отказ)
	Если Элементы.РеквизитыИСвойства.ТекущиеДанные.ТипПоля = ПредопределенноеЗначение(
			"Перечисление.ТипыПолейУЭД.Реквизит") Тогда 
		Элементы.РеквизитыИСвойстваЗначение.РедактированиеТекста = Ложь;
		Элементы.РеквизитыИСвойстваЗначение.КнопкаВыбора = Истина;
	ИначеЕсли Элементы.РеквизитыИСвойства.ТекущиеДанные.ТипПоля = ПредопределенноеЗначение(
			"Перечисление.ТипыПолейУЭД.Текст") Тогда
		Элементы.РеквизитыИСвойстваЗначение.РедактированиеТекста = Истина;
		Элементы.РеквизитыИСвойстваЗначение.КнопкаВыбора = Ложь;
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыИСвойстваПриАктивизацииЯчейки(Элемент)
	Если Элементы.РеквизитыИСвойства.ТекущиеДанные <> Неопределено Тогда
		Если Элементы.РеквизитыИСвойства.ТекущиеДанные.ТипПоля = ПредопределенноеЗначение(
				"Перечисление.ТипыПолейУЭД.Реквизит") Тогда 
			Элементы.РеквизитыИСвойстваЗначение.РедактированиеТекста = Ложь;
			Элементы.РеквизитыИСвойстваЗначение.КнопкаВыбора = Истина;
		ИначеЕсли Элементы.РеквизитыИСвойства.ТекущиеДанные.ТипПоля = ПредопределенноеЗначение(
				"Перечисление.ТипыПолейУЭД.Текст") Тогда
			Элементы.РеквизитыИСвойстваЗначение.РедактированиеТекста = Истина;
			Элементы.РеквизитыИСвойстваЗначение.КнопкаВыбора = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьИндикаторЗагрузкиШаблона();
	Элементы.ГруппаИсходящаяКорреспонденция.Видимость = Константы.АвторегистрацияПечатныхФорм.Получить();
	Элементы.РегистрироватьИсходящуюКорреспонденцию.Видимость = Константы.АвторегистрацияПечатныхФорм.Получить();
	Элементы.ГруппаИсходящаяКорреспонденция.Доступность = Объект.РегистрироватьИсходящуюКорреспонденцию;
КонецПроцедуры

&НаСервере
Процедура ОбластиШаблонаТипОбластиПриИзмененииНаСервере(ТекущиеДанные)
	
	Если ТекущиеДанные.ТипОбласти <> "СтрокаТаблицы" Тогда
	
		Возврат;
	
	КонецЕсли;
	
	Если ЕстьНастройкаТаблицы(ТекущиеДанные.ИмяОбласти) Тогда
	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Уже существует настроенная таблица!";
		Сообщение.Сообщить();
		Возврат;
	
	КонецЕсли;
	
	БинДанные = ПолучитьДанныеШаблона();

	Макет = УправлениеПечатью.ИнициализироватьМакетОфисногоДокумента(БинДанные, "");
	ОбластьМакета = УправлениеПечатью.ОбластьМакета(Макет, ТекущиеДанные);
	
	ПараметрыОбласти = ВыделитьПараметрыОбласти(ОбластьМакета);
	
	ЗаполнитьВкладкуТаблиц(ТекущиеДанные, ПараметрыОбласти);
	
КонецПроцедуры

&НаСервере
Функция ЕстьНастройкаТаблицы(ИмяТаблицы)

	НастроенныеТаблицы = Объект.ТаблицаВыбораТаблиц.Выгрузить(, "ПолеТаблицы");
	Если НастроенныеТаблицы.Найти(ИмяТаблицы) = Неопределено Тогда
	
		Возврат Ложь;
	
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ()

&НаСервере
Процедура ЗаполнитьВкладкуТаблиц(ТекущаяОбласть, ПараметрыОбласти)

	НоваяТаблица = Объект.ТаблицаВыбораТаблиц.Добавить();
	НоваяТаблица.Используется = Истина;
	НоваяТаблица.ПолеТаблицы = ТекущаяОбласть.ИмяОбласти;
	НоваяТаблица.UID = Строка(Новый УникальныйИдентификатор);
	
	Для каждого Тег Из ПараметрыОбласти Цикл
	
		НоваяКолонка = Объект.ТаблицаТаблиц.Добавить();
		НоваяКолонка.Используется = Истина;
		НоваяКолонка.UID = НоваяТаблица.UID;
		НоваяКолонка.Поле = Тег;
	
	КонецЦикла;

КонецПроцедуры


&НаСервере
Функция ПолучитьПараметрыОбласти(Макет, Область)

	ТекущаяОбласть = Новый Структура;
	ТекущаяОбласть.Вставить("ИмяОбласти", Область.Ключ);
	ТекущаяОбласть.Вставить("ТипОбласти", "Общая");
	ОбластьМакета = УправлениеПечатью.ОбластьМакета(Макет, ТекущаяОбласть);
	
	Возврат ВыделитьПараметрыОбласти(ОбластьМакета);

КонецФункции // ()

&НаСервере
Функция ВыделитьПараметрыОбласти(ОбластьМакета)

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ОбластьМакета.Текст);
	ЧтениеXML.ИгнорироватьПробелы = Ложь;

	ПараметрыИзТекста = Новый Массив;
	Пока ЧтениеXML.Прочитать() Цикл
	
		Если ЧтениеXML.ТипУзла <> ТипУзлаXML.Текст Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		ТекстУзла = ЧтениеXML.Значение;

		Справочники.тсШаблоныПечатныхДокументов.ВыделитьПараметры(ПараметрыИзТекста, ТекстУзла);
	
	КонецЦикла;
	
	Возврат ПараметрыИзТекста;

КонецФункции // ()


&НаСервере
Процедура ЗаполнитьПараметрыИзУниверсальногоФормата()

	БинДанные = ПолучитьДанныеШаблона();

	Макет = УправлениеПечатью.ИнициализироватьМакетОфисногоДокумента(БинДанные, "");

	ПараметрыОбластей = Новый Структура;
	Для каждого Область Из Макет.СтруктураДокумента.ОбластиДокумента Цикл
	
		ПараметрыОбластей.Вставить(
			Область.Ключ,
			ПолучитьПараметрыОбласти(Макет, Область));
	
	КонецЦикла;
	
	Объект.ОбластиШаблона.Очистить();
	
	Для каждого ПараметрыОбласти Из ПараметрыОбластей Цикл
	
		НоваяОбласть = Объект.ОбластиШаблона.Добавить();
		НоваяОбласть.ИмяОбласти = ПараметрыОбласти.Ключ;
		
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("ИмяОбласти", НоваяОбласть.ИмяОбласти);
		ТаблицаПараметров = Объект.РеквизитыИСвойства.Выгрузить(ОтборСтрок, "Поле");
		
		ПараметрыТекущейОбласти = ПараметрыОбласти.Значение;
		Для каждого ПараметрОбласти Из ПараметрыТекущейОбласти Цикл
		
			Если ТаблицаПараметров.Найти(ПараметрОбласти, "Поле") <> Неопределено Тогда
			
				Продолжить;
			
			КонецЕсли;
			
			НовыйПараметр = Объект.РеквизитыИСвойства.Добавить();
			НовыйПараметр.Используется = Истина;
			НовыйПараметр.Поле = ПараметрОбласти;
			НовыйПараметр.ТипПоля = Перечисления.ТипыПолейУЭД.Реквизит;
			НовыйПараметр.ИмяОбласти = НоваяОбласть.ИмяОбласти;
			
			ВременноеЗначение = ТаблицаПараметров.Добавить();
			ВременноеЗначение.Поле = ПараметрОбласти;
		
		КонецЦикла;
	
	КонецЦикла;

КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьИзШаблона(Команда)

	Если ЭтоУниверсальныйФормат() Тогда
	
		ЗаполнитьПараметрыИзУниверсальногоФормата();
		Возврат;
	
	КонецЕсли;
	
	СтрокаФайл = Объект.Шаблон;
	СтрокаРасширение = Объект.РасширениеФайлаШаблона;
	
	ДвоичныйАдрес =  УЭДСервер.ПолучитьФайлИзДвоичныхДанных(СтрокаФайл, СтрокаРасширение);
	
	#Если НЕ ВебКлиент Тогда
		ИмяВремФайла = ПолучитьИмяВременногоФайла(СтрокаРасширение);
		ДвоичныйАдрес.Записать(ИмяВремФайла);
		
		ТекущийДок = ОбъектыСервер.ПолучитьЗначениеКонстанты("ТипШаблонаДляПечати");
		Если Строка(ТекущийДок) = "Word" Тогда
			
			// Получием текст из Word
			Ворд = Новый COMОбъект("Word.Application");
			//--Ворд.Documents.Open(Объект.ПутьКШаблонуWord,,Истина);
			Ворд.Documents.Open(ИмяВремФайла,,Истина);
			Ворд.Selection.WholeStory();
			ТекстВорда = Ворд.Selection.Text;   
			Ворд.Quit();	
			Ворд = "";
			// Получаем все теги из текста и помещаем в СписокЗначений
			ТекстВорда = СокрЛП(ТекстВорда);
			СписокТегов = Новый СписокЗначений;
			Пока СтрДлина(ТекстВорда) > 0 Цикл
				НачТега = Найти(ТекстВорда, Объект.НачалоТега);
				КонТега = Найти(ТекстВорда, Объект.КонецТега);
				Если НачТега = 0  И КонТега = 0 Тогда
					Прервать;	
				КонецЕсли;
				ИмяТега = Сред(ТекстВорда, НачТега, КонТега - НачТега + 1); 
				ТекстВорда =  Сред(ТекстВорда, КонТега + 1);
				Если СписокТегов.НайтиПоЗначению(ИмяТега) = Неопределено Тогда
					СписокТегов.Добавить(ИмяТега);	
				КонецЕсли;
			КонецЦикла;
			// В цикле по СЗ ищем значения в ТЧ и добавляем новые, если их нету.
			РеквизитыОбъект = Объект.РеквизитыИСвойства;
			Для Каждого Эл Из СписокТегов Цикл
				ПараметрыОтбора = Новый Структура("Поле", Эл.Значение);	
				НайденныеТеги = РеквизитыОбъект.НайтиСтроки(ПараметрыОтбора); 
				Если НайденныеТеги.Количество() = 0 Тогда
					Нов              = РеквизитыОбъект.Добавить();
					Нов.Используется = Истина;
					Нов.Поле         = Эл.Значение;   	
					Нов.ТипПоля      = ПредопределенноеЗначение("Перечисление.ТипыПолейУЭД.Реквизит");				
				КонецЕсли;	
			КонецЦикла;	
		ИначеЕсли Строка(ТекущийДок) = "OpenOffice" Тогда
			ИзвлечениеТекстаИзФайла = Новый ИзвлечениеТекста(ИмяВремФайла);
			ТекстОпенОффис = ИзвлечениеТекстаИзФайла.ПолучитьТекст();
			ТекстОпенОффис = СокрЛП(ТекстОпенОффис);
			СписокТегов = Новый СписокЗначений;
			Пока СтрДлина(ТекстОпенОффис) > 0 Цикл
				НачТега = Найти(ТекстОпенОффис, Объект.НачалоТега);
				КонТега = Найти(ТекстОпенОффис, Объект.КонецТега);
				Если НачТега = 0  И КонТега = 0 Тогда
					Прервать;	
				КонецЕсли;
				ИмяТега = Сред(ТекстОпенОффис, НачТега, КонТега - НачТега + 1); 
				ТекстОпенОффис =  Сред(ТекстОпенОффис, КонТега + 1);
				Если СписокТегов.НайтиПоЗначению(ИмяТега) = Неопределено Тогда
					СписокТегов.Добавить(ИмяТега);	
				КонецЕсли;
			КонецЦикла;
			// В цикле по СЗ ищем значения в ТЧ и добавляем новые, если их нету.
			РеквизитыОбъект = Объект.РеквизитыИСвойства;
			Для Каждого Эл Из СписокТегов Цикл
				ПараметрыОтбора = Новый Структура("Поле", Эл.Значение);	
				НайденныеТеги = РеквизитыОбъект.НайтиСтроки(ПараметрыОтбора); 
				Если НайденныеТеги.Количество() = 0 Тогда
					Нов              = РеквизитыОбъект.Добавить();
					Нов.Используется = Истина;
					Нов.Поле         = Эл.Значение;
					Нов.ТипПоля      = ПредопределенноеЗначение("Перечисление.ТипыПолейУЭД.Реквизит");				
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
		
		Попытка
		
			УдалитьФайлы(ИмяВремФайла);
		
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОписаниеОшибки();
			Сообщение.Сообщить();
		КонецПопытки;
		
	#Иначе
		Файл = Новый Файл(
			КаталогВременныхФайлов()
			+ ПолучитьРазделительПути()
			+ ОбщегоНазначенияКлиент.ДатаСеанса()
			+ СтрокаРасширение);
		ФайлИмя = Файл.ПолноеИмя;
		ДвоичныйАдрес.Записать(ФайлИмя);
		// Получием текст из Word
		Ворд = Новый COMОбъект("Word.Application");
		Ворд.Documents.Open(ФайлИмя, , Истина);
		Ворд.Selection.WholeStory();
		ТекстВорда = Ворд.Selection.Text;
		Ворд.Quit();	
		Ворд = "";
		// Получаем все теги из текста и помещаем в СписокЗначений
		ТекстВорда = СокрЛП(ТекстВорда);
		СписокТегов = Новый СписокЗначений;
		Пока СтрДлина(ТекстВорда) > 0 Цикл
			НачТега = Найти(ТекстВорда, Объект.НачалоТега);
			КонТега = Найти(ТекстВорда, Объект.КонецТега);
			Если НачТега = 0  И КонТега = 0 Тогда
				Прервать;	
			КонецЕсли;
			ИмяТега = Сред(ТекстВорда, НачТега, КонТега - НачТега + 1); 
			ТекстВорда =  Сред(ТекстВорда, КонТега + 1);
			Если СписокТегов.НайтиПоЗначению(ИмяТега) = Неопределено Тогда
				СписокТегов.Добавить(ИмяТега);	
			КонецЕсли;
		КонецЦикла;
		// В цикле по СЗ ищем значения в ТЧ и добавляем новые, если их нету.
		РеквизитыОбъект = Объект.РеквизитыИСвойства;
		Для Каждого Эл Из СписокТегов Цикл
			ПараметрыОтбора = Новый Структура("Поле", Эл.Значение);	
			НайденныеТеги = РеквизитыОбъект.НайтиСтроки(ПараметрыОтбора); 
			Если НайденныеТеги.Количество() = 0 Тогда
				Нов              = РеквизитыОбъект.Добавить();
				Нов.Используется = Истина;
				Нов.Поле         = Эл.Значение;
				Нов.ТипПоля      = ПредопределенноеЗначение("Перечисление.ТипыПолейУЭД.Реквизит");
			КонецЕсли;	
		КонецЦикла;	
		
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьШаблон(Команда)

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл шаблона";
	Диалог.ПолноеИмяФайла = "";
	Диалог.ПредварительныйПросмотр = Ложь;
	Диалог.МножественныйВыбор = Ложь;
	
	Попытка
		Тест_ = Тест;
	Исключение
		Тест_ = "";
	КонецПопытки;
	
	Если НЕ ЭтоУниверсальныйФормат() Тогда
	
		Диалог.Фильтр = ШаблоныДокументовКлиент.РасширенияШаблоновWordOpenOffice();
		
		Диалог.Показать(Новый ОписаниеОповещения("ЗагрузитьШаблонЗавершение", ЭтаФорма, Новый Структура("Диалог, Тест_", Диалог, Тест_)));
		Возврат;
	
	КонецЕсли;
	
	Диалог.Фильтр = ШаблоныДокументовКлиент.РасширенияШаблоновУниверсальное();
	
	Если Диалог.Выбрать() Тогда
	
		БинДанные = Новый ДвоичныеДанные(Диалог.ПолноеИмяФайла);

		АдресВременногоХранилища = ПоместитьВоВременноеХранилище(БинДанные, ЭтаФорма.УникальныйИдентификатор);
		ЗагрузитьФайлШаблона(АдресВременногоХранилища);
		УстановитьИндикаторЗагрузкиШаблона();
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьФайлШаблона(АдресВременногоХранилища)

	ШаблонОбъект = РеквизитФормыВЗначение("Объект");
	ШаблонОбъект.Шаблон = АдресВременногоХранилища;
	ШаблонОбъект.ЗагрузитьМакет(АдресВременногоХранилища);
	ЗначениеВРеквизитФормы(ШаблонОбъект, "Объект");

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьШаблонЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Диалог = ДополнительныеПараметры.Диалог;
	Тест_ = ДополнительныеПараметры.Тест_;
	
	Если Тест_ <> "" ИЛИ (ВыбранныеФайлы <> Неопределено) Тогда
		Путь = ?(Тест_ <> "", Тест_, Диалог.ПолноеИмяФайла);	
		//ДвоичныйАдрес = Новый ДвоичныеДанные(Путь);
		Файл = Новый Файл(Путь);
		ДопПараметры = Новый Структура("Файл", Файл);
		//Файл = Новый Файл(Путь);
		//Расширение = Файл.Расширение;
		//НачатьСозданиеДвоичныхДанныхИзФайла(Новый ОписаниеОповещения("КонецСозданияДД",ЭтаФорма,ДопПараметры),Путь);
		НачатьСозданиеДвоичныхДанныхИзФайла(Новый ОписаниеОповещения("КонецСозданияДД",ЭтаФорма,ДопПараметры),Путь);
		//ЗагрузитьШаблон_НаСервере(ДвоичныйАдрес, Расширение);	
		//УстановитьИндикаторЗагрузкиШаблона();
		//ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры


&НаСервере
Процедура ЗагрузитьШаблон_НаСервере(ДвоичныйАдрес, Расширение)
	ДанныеСтрока = ЗначениеВСтрокуВнутр(ДвоичныйАдрес);
	Объект.Шаблон = ДанныеСтрока;
	Объект.РасширениеФайлаШаблона = Расширение;	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьШаблонВСтаромФормате()

	#Если НЕ ВебКлиент Тогда

		ДвоичныйАдрес = ПолучитьДвоичныеДанные(Объект.Шаблон);
		ИмяВремФайла = ПолучитьИмяВременногоФайла(Объект.РасширениеФайлаШаблона);
		ДвоичныйАдрес.Записать(ИмяВремФайла);
		
		ИмяФайла = ИмяВремФайла;
		ФайлОткрыт = Ложь;
		
		ТекущийДок = Объект.ТипДокумента;
		Если Строка(ТекущийДок) = "Word" Тогда
			//ЗапуститьПриложение(ИмяВремФайла);
			Word = Новый COMОбъект("Word.Application");
			Word.Visible = Ложь;
			
			Попытка
				Документ = Word.Documents.Open(ИмяФайла);
				ФайлОткрыт = Истина;
			Исключение
				Сообщить(ОписаниеОшибки());
				Возврат;
			КонецПопытки;
			Word.Visible = Истина;

		ИначеЕсли Строка(ТекущийДок) = "OpenOffice" Тогда
			
			Попытка
			
				ServiceManager = Новый COMОбъект("com.sun.star.ServiceManager");
				Desktop        = ServiceManager.createInstance("com.sun.star.frame.Desktop");
				ОбъектОО = Новый COMОбъект("MSScriptControl.ScriptControl");
				ОбъектОО.Language="javascript";
				ОбъектОО.Eval("Args=new Array()");
				Args = ОбъектОО.Eval("Args");
				ОбъектОО.AddObject("ServiceManager", ServiceManager);
				
				PropertyValue = ServiceManager.Bridge_GetStruct("com.sun.star.beans.PropertyValue");
				PropertyValue.Name = "Hidden";
				PropertyValue.Value = Ложь;
				Args = Новый COMSafeArray("VT_VARIANT", 1);
				Args.SetValue(0, PropertyValue);
				origDocument = Desktop.LoadComponentFromURL(ПреобразоватьВURL(ИмяФайла), "_blank", 0, Args);
				
				ФайлОткрыт = Истина;
			
			Исключение
				Сообщить(ОписаниеОшибки());
				Возврат;
			КонецПопытки;

		КонецЕсли;
		
		Если ФайлОткрыт Тогда
		
			ВременныеФайлы.Добавить(ИмяФайла);
		
		КонецЕсли;
		
		
	#Иначе

		НачатьПолучениеКаталогаВременныхФайлов (Новый ОписаниеОповещения("КонецПолученияКаталогаВФ", ЭтаФорма));

	#КонецЕсли

КонецПроцедуры


&НаКлиенте
Процедура ПрочитатьОткрытьШаблон(Команда)

	Если НЕ ЭтоУниверсальныйФормат() Тогда

		ОткрытьШаблонВСтаромФормате();
		Возврат;
	
	КонецЕсли;
	
	ИмяВременныйФайл = ПолучитьВременныйФайлШаблона();
	
	Данные = Новый Структура;
	Данные.Вставить("ВременныйФайл", ИмяВременныйФайл);
	НачатьЗапускПриложения(
		Новый ОписаниеОповещения("ЗаписатьИмяФайла", ЭтаФорма, Данные),
		ИмяВременныйФайл,
		,
		Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИмяФайла(КодОтвета, ПереданныеПараметры) Экспорт

	ИмяВременныйФайл = ПереданныеПараметры.ВременныйФайл;
	ВременныеФайлы.Добавить(ИмяВременныйФайл);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьВременныйФайлШаблона()

	БинДанные = ПолучитьДанныеШаблона();
	ИмяВременныйФайл = ПолучитьИмяВременногоФайла(ШаблоныДокументовКлиент.ФорматУниверсальногоФайла());
	БинДанные.Записать(ИмяВременныйФайл);
	
	Возврат ИмяВременныйФайл;

КонецФункции // ()

&НаСервере
Функция ПолучитьДанныеШаблона()

	ШаблонОбъект = РеквизитФормыВЗначение("Объект");
	БинДанные = ШаблонОбъект.МакетШаблона();
	
	Возврат БинДанные;

КонецФункции

&НаКлиенте
Процедура КонецПолученияКаталогаВФ(КаталогВФ, ДопПарам) Экспорт

	ДвоичныйАдрес = ПолучитьДвоичныеДанные(Объект.Шаблон);
	ДатаДляИмениФайла = Строка(ОбщегоНазначенияКлиент.ДатаСеанса());
	ДатаДляИмениФайла = СтрЗаменить(ДатаДляИмениФайла, ":", "");
	ДатаДляИмениФайла = СтрЗаменить(ДатаДляИмениФайла, ".", "");
	ДатаДляИмениФайла = СтрЗаменить(ДатаДляИмениФайла, " ", "");
	Файл = Новый Файл(КаталогВФ + ПолучитьРазделительПути() + Строка(ДатаДляИмениФайла)+ Объект.РасширениеФайлаШаблона);// + ПолучитьРазделительПути()
	ФайлИмя = Файл.ПолноеИмя;
	ДопПарам = Новый Структура("ФайлИмя", ФайлИмя);
	ДвоичныйАдрес.НачатьЗапись(Новый ОписаниеОповещения("КонецЗаписиДД", этаформа, ДопПарам), ФайлИмя);

КонецПроцедуры

&НаКлиенте
Процедура КонецЗаписиДД(ДопПарам) Экспорт
	ФайлИмя = ДопПарам.ФайлИмя;
	ЗапуститьПриложение(ФайлИмя);
	
	ВременныеФайлы.Добавить(ФайлИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапускПриложения(КодВозврата, ДополнительныйПараметр) Экспорт
 //Заглушка
КонецПроцедуры

&НаКлиенте
Процедура КонецСозданияДД(ДвоичныйАдрес, ДопПараметры) Экспорт
	Файл = ДопПараметры.Файл;
	Расширение = Файл.Расширение;
	ЗагрузитьШаблон_НаСервере(ДвоичныйАдрес, Расширение);	
	УстановитьИндикаторЗагрузкиШаблона();
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры


&НаСервере
Функция ПолучитьДвоичныеДанные(АдресШаблона)
	
	ДвоичныйАдрес = ЗначениеИзСтрокиВнутр(АдресШаблона);	
	Возврат ДвоичныйАдрес;
	
КонецФункции

&НаСервере
Процедура УстановитьИндикаторЗагрузкиШаблона()

	ШаблонЗагружен = ЗначениеЗаполнено(Объект.Шаблон);

	Элементы.Декорация_ШаблонЗагружен.Видимость = ШаблонЗагружен;
	Элементы.Декорация_ШаблонНеЗагружен.Видимость = НЕ ШаблонЗагружен;

КонецПроцедуры

&НаКлиенте
Процедура РегистрироватьИсходящуюКорреспонденциюПриИзменении(Элемент)
	Элементы.ГруппаИсходящаяКорреспонденция.Доступность = Объект.РегистрироватьИсходящуюКорреспонденцию;
КонецПроцедуры

//Чуров++
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ШаблоныПечФормВыборРеквизита" Тогда
		РеквизитыИСвойстваЗначениеЗаполнение(Параметр);	
	КонецЕсли;
КонецПроцедуры
//--
&НаКлиенте
Функция ПреобразоватьВURL(ИмяФайла)   
	Возврат "file:///" + СтрЗаменить(ИмяФайла, "\", "/"); 
КонецФункции


&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ЗначенияВременныхФайлов = ВременныеФайлы.ВыгрузитьЗначения();
	Для каждого ВременныйФайл Из ЗначенияВременныхФайлов Цикл
	
		Попытка
		
			УдалитьФайлы(ВременныйФайл);
			ЭлементФайл = ВременныеФайлы.НайтиПоЗначению(ВременныйФайл);
			ВременныеФайлы.Удалить(ЭлементФайл);
		
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = 
				"Форму нельзя закрыть, пока открыты временные файлы"
				+ Символы.ПС
				+ ОписаниеОшибки();
			Сообщение.Сообщить();

			Отказ = Истина;
		КонецПопытки;
	
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбластиШаблонаТипОбластиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбластиШаблона.ТекущиеДанные;
	ТекущаяОбласть = Новый Структура;
	ТекущаяОбласть.Вставить("ИмяОбласти", ТекущиеДанные.ИмяОбласти);
	ТекущаяОбласть.Вставить("ТипОбласти", ТекущиеДанные.ТипОбласти);
	
	ОбластиШаблонаТипОбластиПриИзмененииНаСервере(ТекущаяОбласть);
	
КонецПроцедуры


&НаКлиенте
Процедура ОбластиШаблонаПриАктивизацииСтроки(Элемент)
	
	Отбор = Новый Структура;
	Если Элемент.ТекущиеДанные <> Неопределено И Элемент.ТекущиеДанные.ИмяОбласти <> "Абзац" Тогда

		Отбор.Вставить("ИмяОбласти", Элемент.ТекущиеДанные.ИмяОбласти);

	КонецЕсли;

	
	
	Элементы.РеквизитыИСвойства.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	Элементы.РеквизитыИСвойства.Обновить();
	
КонецПроцедуры


&НаКлиенте
Процедура ПрименитьТеги(СтарыйТег, НовыйТег, Смещение)
	
	Настройка = Объект.РеквизитыИСвойства;
	
	Для каждого НастройкаСтрока Из Настройка Цикл
	

		Если Смещение = "П" Тогда
		
			ТемпНеизменяемый = Сред(НастройкаСтрока.Поле, 0, СтрДлина(НастройкаСтрока.Поле) - 3);
			ТемпИзменяемый = Сред(НастройкаСтрока.Поле, СтрДлина(НастройкаСтрока.Поле) - 2);
			Если СтарыйТег = "" Тогда
			
				ТемпИзменяемый = ТемпИзменяемый + НовыйТег;
			
			КонецЕсли;
			НастройкаСтрока.Поле = ТемпНеизменяемый + СтрЗаменить(ТемпИзменяемый, СтарыйТег, НовыйТег);
		
		КонецЕсли;
		Если Смещение = "Л" Тогда
			
			ТемпНеизменяемый = Сред(НастройкаСтрока.Поле, 3);
			ТемпИзменяемый = Сред(НастройкаСтрока.Поле, 0, 2);
			Если СтарыйТег = "" Тогда
			
				ТемпИзменяемый = НовыйТег + ТемпИзменяемый;
			
			КонецЕсли;
			НастройкаСтрока.Поле = СтрЗаменить(ТемпИзменяемый, СтарыйТег, НовыйТег) + ТемпНеизменяемый;
		
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура КонецТегаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтарыйТег = Объект.КонецТега;
	НовыйТег = Элементы.КонецТега.ТекстРедактирования;
	
	ПрименитьТеги(СтарыйТег, НовыйТег, "П");
	
	Объект.КонецТега = НовыйТег;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоТегаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтарыйТег = Объект.НачалоТега;
	НовыйТег = Элементы.НачалоТега.ТекстРедактирования;
	
	ПрименитьТеги(СтарыйТег, НовыйТег, "Л");
	
	Объект.НачалоТега = НовыйТег;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Объект.Наименование = ЗаменитьЗапрещенныеСимволыВиндовс(Объект.Наименование);
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Убраны символы: \ / : * ? "" < > | +";
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Функция ЗаменитьЗапрещенныеСимволыВиндовс(Знач Текст)

	// \ / : * ? " < > | +
	ЗапрещенныеСимволы = Новый Массив;
	ЗапрещенныеСимволы.Добавить("/");
	ЗапрещенныеСимволы.Добавить("\");
	ЗапрещенныеСимволы.Добавить(":");
	ЗапрещенныеСимволы.Добавить("*");
	ЗапрещенныеСимволы.Добавить("?");
	ЗапрещенныеСимволы.Добавить("""");
	ЗапрещенныеСимволы.Добавить("<");
	ЗапрещенныеСимволы.Добавить(">");
	ЗапрещенныеСимволы.Добавить("|");
	ЗапрещенныеСимволы.Добавить("+");
	
	Для каждого ЗапрещенныйСимвол Из ЗапрещенныеСимволы Цикл
	
		Текст = СтрЗаменить(Текст, ЗапрещенныйСимвол, " ");
	
	КонецЦикла;
	
	Текст = СокрЛП(Текст);
	Если Сред(Текст, СтрДлина(Текст), 1) = "." Тогда
	
		Текст = Сред(Текст, 0, СтрДлина(Текст) - 1);
	
	КонецЕсли;
	
	Возврат Текст;

КонецФункции // ()


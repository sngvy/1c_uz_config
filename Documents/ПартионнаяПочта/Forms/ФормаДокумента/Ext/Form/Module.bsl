
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЭлементОтбора = РС_СписокИсходящейКорреспонденции.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Партия"); 	
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 	
	ЭлементОтбора.Использование = Истина; 
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный; 
	ЭлементОтбора.ПравоеЗначение = Объект.Ссылка; 
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДатуОтправки(Команда)
	ИзменитьДатуОтправкиСервер();	
КонецПроцедуры

&НаСервере
Процедура ИзменитьДатуОтправкиСервер()
	тЗаписьJSON = Новый ЗаписьJSON;
	тПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);  
	тЗаписьJSON.УстановитьСтроку(тПараметрыJSON);   
	token = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("токен");
	Logkey = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("ключ");
	
	имяПартии = Объект.ИмяПартии;
	тЗапрос = имяПартии;
		
	ЗаписатьJSON(тЗаписьJSON, тЗапрос);
	НоваяДатаПартии = ?(ЗначениеЗаполнено(Объект.ДатаПартииЗаданная), Объект.ДатаПартииЗаданная, ТекущаяДатаСеанса());
	Год = СтрЗаменить(Строка(Год(НоваяДатаПартии)), Символы.НПП, "");
	Месяц = Строка(Месяц(НоваяДатаПартии));
	День = Строка(День(НоваяДатаПартии));
	strJSON = тЗаписьJSON.Закрыть();
	Сервер = "otpravka-api.pochta.ru";      
	Ресурс = "/1.0/batch/";
	
	HTTPЗапрос = Новый HTTPЗапрос;
	
	HTTPЗапрос.АдресРесурса = Ресурс + тЗапрос + "/sending/"+Год+"/"+Месяц+"/"+День;
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL;
	
	HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);   
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
	
	HTTPЗапрос.Заголовки.Вставить("Authorization","AccessToken "+ token);
	
	HTTPЗапрос.Заголовки.Вставить("X-User-Authorization","Basic "+ Logkey );
	
	ОтветHTTP = HTTP.ОтправитьДляОбработки(HTTPЗапрос);
	СтрокаОтвет  = ОтветHTTP.ПолучитьТелоКакСтроку();
	Если СтрНайти(СтрокаОтвет, "error") <> 0 Тогда
		Сообщить(СтрокаОтвет);
	Иначе
		Сообщить("Дата отправки изменена на: " + Строка(НоваяДатаПартии));
	КонецЕсли;	
КонецПроцедуры	


&НаКлиенте
Процедура ЗарегистрироватьВОПС(Команда)
	ЗарегистрироватьВОПСНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьВОПСНаСервере()
	тЗаписьJSON = Новый ЗаписьJSON;
	тПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);  
	тЗаписьJSON.УстановитьСтроку(тПараметрыJSON);   
	token = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("токен");
	Logkey = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("ключ");
	
	ИмяПартии = Объект.ИмяПартии; 
	тЗапрос = Объект.ИмяПартии;
	
	
	ЗаписатьJSON(тЗаписьJSON, тЗапрос);
	strJSON = тЗаписьJSON.Закрыть();
	Сервер = "otpravka-api.pochta.ru";      
	Ресурс = "/1.0/batch/";
	
	HTTPЗапрос = Новый HTTPЗапрос;
	
	HTTPЗапрос.АдресРесурса = Ресурс + тЗапрос + "/checkin";  
	
	Если Константы.ПочтаРФОнлайнБаланс.Получить() Тогда 
		HTTPЗапрос.АдресРесурса = HTTPЗапрос.АдресРесурса + "?useOnlineBalance=true";
	КонецЕсли;
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL;
	
	HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);   
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
	
	HTTPЗапрос.Заголовки.Вставить("Authorization","AccessToken "+ token);
	
	HTTPЗапрос.Заголовки.Вставить("X-User-Authorization","Basic "+ Logkey );
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();
	
	Попытка
		СчетчикПопыток = 1;
		Пока СчетчикПопыток<20 Цикл
			Попытка
				ОтветHTTP = HTTP.ОтправитьДляОбработки(HTTPЗапрос,ИмяВыходногоФайла);
				Прервать;
			Исключение
				Сообщить("Попытка получения ответа: " + СчетчикПопыток);
				СчетчикПопыток  = СчетчикПопыток + 1;
			КонецПопытки;	
		КонецЦикла;		
	Исключение
		СтрокаСообщения = ОписаниеОшибки();
		Сообщить(СтрокаСообщения, СтатусСообщения.Важное);
		УдалитьФайлы(имяВыходногоФайла);
	КонецПопытки;	
	
	ЧтениеJSON = Новый ЧтениеJSON;
	
	ЧтениеJSON.ОткрытьФайл(имяВыходногоФайла);
	
	СтруктураJSON = ПрочитатьJSON(ЧтениеJSON,Истина);
	Для каждого элемент из СтруктураJSON цикл
		Если элемент.Ключ = "error-code" Тогда
			Если Элемент.Значение = "PAST_DUE_DATE" Тогда
				Сообщить("Партия № " + имяПартии + " устарела. Поробнее: " + элемент.Значение + ". Измените дату отправки партии.");
			КонецЕсли;
		КонецЕсли;
		Если элемент.Ключ = "f103-sent" Тогда
			Если Элемент.Значение = Ложь Тогда
				Сообщить("Ошибка регистрации партии № " + имяПартии + " по причине: " + элемент.Значение);
			Иначе
				Сообщить("Партия № " + имяПартии + " успешно зарегистрирована.");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЧтениеJSON.Закрыть();
	
	//удаляем файл после использования
	УдалитьФайлы(имяВыходногоФайла);

КонецПроцедуры


&НаКлиенте
Процедура ПолучитьФорму103(Команда)
	ДД_Файла = "";
	Получена103 = Ложь;
	ПолучитьФорму103Сервер(Объект.ИмяПартии, получена103, ДД_Файла);
	Если получена103 Тогда
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		Если Диалог.Выбрать() Тогда
			ИмяКаталога = Диалог.Каталог;
		КонецЕсли;
		ИмяФайла = "\Форма103Партия_" + Объект.ИмяПартии;
		Форма103ПДФ = Новый Файл(ИмяКаталога + ИмяФайла  + ".pdf");
		ДД_Файла.Записать(Форма103ПДФ.ПолноеИмя);
		ПрикрепитьФорму103(Объект.Ссылка, Форма103ПДФ.ПолноеИмя, ДД_Файла);
		ИзменитьСтатусШПИ(Объект.Ссылка);
		Сообщить("Для партии № " + Объект.ИмяПартии + " получен файл формы 103");
	Иначе
		Сообщить ("Произошла ошибка получения файла формы 103 для партии № "+ Объект.ИмяПартии);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПолучитьФорму103Сервер(ИмяПартии, Получено, ДД_Ответ)
	тЗаписьJSON = Новый ЗаписьJSON;
	тПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);  
	тЗаписьJSON.УстановитьСтроку(тПараметрыJSON);
	
	token = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("токен");
	Logkey = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("ключ");
	
	тЗапрос = имяПартии;
		
	ЗаписатьJSON(тЗаписьJSON, тЗапрос);
	
	strJSON = тЗаписьJSON.Закрыть();
	Сервер = "otpravka-api.pochta.ru";      
	Ресурс = "/1.0/forms/";
	
	HTTPЗапрос = Новый HTTPЗапрос;
	
	HTTPЗапрос.АдресРесурса = Ресурс + тЗапрос + "/f103pdf";
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL;
	
	HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);   
	
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
	
	HTTPЗапрос.Заголовки.Вставить("Authorization","AccessToken "+ token);
	
	HTTPЗапрос.Заголовки.Вставить("X-User-Authorization","Basic "+ Logkey );
	
	ИмяФайла = "Форма103Партия_"+ тЗапрос;
	
	Попытка
		СчетчикПопыток = 1;
		Пока СчетчикПопыток<20 Цикл
			Попытка
				ОтветHTTP = HTTP.Получить(HTTPЗапрос);
				Прервать;
			Исключение
				Сообщить("Попытка получения ответа: "+СчетчикПопыток);
				СчетчикПопыток = СчетчикПопыток+1;
			КонецПопытки;	
		КонецЦикла;		
	Исключение
		СтрокаСообщения = ОписаниеОшибки();
		Сообщить(СтрокаСообщения, СтатусСообщения.Важное);
		УдалитьФайлы(имяВыходногоФайла);
		Возврат;
	КонецПопытки;	
	
	Если ОтветHTTP.КодСостояния = 400 Тогда
		СтрокаОтвет =  ОтветHTTP.ПолучитьТелоКакСтроку();
		Сообщить(СтрокаОтвет);
		Получено = Ложь;
	ИначеЕсли ОтветHTTP.КодСостояния = 200 Тогда
		ДД_Ответ = ОтветHTTP.ПолучитьТелоКакДвоичныеДанные();
		Получено = Истина;
	КонецЕсли;
	Если Получено = Ложь Тогда
		Возврат;
	КонецЕсли;	
КонецПроцедуры


&НаСервере
Процедура ИзменитьСтатусШПИ(ДокументПартия)
	ДокИзменениеСтатуса = Документы.ИзменениеСтатусаШПИРегистрация.СоздатьДокумент();
	ДокИзменениеСтатуса.Дата = ТекущаяДатаСеанса();
	ДокИзменениеСтатуса.Организация = параметрыСеанса.ТекущийПользователь.Организация;
	ДокИзменениеСтатуса.Автор = параметрыСеанса.ТекущийПользователь;
	
	Для Каждого Корр из ДокументПартия.СписокИсходящейКорреспонденции Цикл
		Нстрока = ДокИзменениеСтатуса.ШПИ.Добавить();
		Нстрока.ШПИ = Корр.ШПИ;
		НСтрока.Корреспонденция = Корр.ИсходящаяКорреспонденция;
		НСтрока.ИдентификаторПочты = Корр.ИдентификаторПочты;
		НСтрока.Статус = Перечисления.СтатусыШПИРегистрация.ПолученаФорма103;
	КонецЦикла;
	ДокИзменениеСтатуса.Записать(РежимЗаписиДокумента.Проведение);	
КонецПроцедуры	

&НаСервере
Процедура ПрикрепитьФорму103(ДокПартия,Файл103Путь,ДД)
	
	Файл103 = Новый Файл(Файл103Путь);
	Если Файл103.Существует() тогда
		Документ = Документы.ПрикрепитьФайлы.СоздатьДокумент();
		Документ.Организация = ПараметрыСеанса.ТекущийПользователь.Организация;
		Документ.Автор = ПараметрыСеанса.ТекущийПользователь;
		Документ.Объект = ДокПартия;
		Документ.Дата = ТекущаяДатаСеанса();
		Документ.Комментарий = "Автоматическое прикрепление формы 103";
		Стр = Документ.Файлы.Добавить();
		Стр.Загружен = Ложь;  
		Стр.Путь = Файл103.ПолноеИмя;
		Стр.УИД = Новый УникальныйИдентификатор();
		Стр.ТипФайла = Справочники.ТипыПрикрепляемыхФайлов.Форма103;
		Стр.Размер = ОкруглитьРазмерФайла(Строка(Файл103.Размер()));
		МассивДанных = Новый Массив;
		МассивДанных.Добавить(ДД);
		Документ.ПоместитьВХранилище(МассивДанных);
		Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОкруглитьРазмерФайла(СтрРазмер)
	Размер = Число(СтрРазмер);
	Если Размер > 1024 Тогда
		Размер = Окр(Размер/1024, 0);
		Стр = Строка(Размер) + " Кб";
	КонецЕсли;
	Если Размер > 1024 Тогда
		Размер = Окр(Размер/1024, 1);
		Стр = Строка(Размер) + " Мб";
	КонецЕсли;	
	Возврат Стр;		
КонецФункции


&НаКлиенте
Процедура ПолучитьВсеДокументыПартии(Команда)
	ДД_Файла = "";
	Получена103 = Ложь;
	ПолучитьВсеДокументыПартииАПИ(Объект.ИмяПартии, получена103, ДД_Файла);
	Если получена103 Тогда
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		Если Диалог.Выбрать() Тогда
			ИмяКаталога = Диалог.Каталог;
		КонецЕсли;
		ИмяФайла = "\АрхивПартия_" + Объект.ИмяПартии;
		ЗИПАрхив = Новый Файл(ИмяКаталога + ИмяФайла  + ".zip");
		ДД_Файла.Записать(ЗИПАрхив.ПолноеИмя);
		ИзвлечьИзАрхиваИПрикрепитьФайлы(Объект.Ссылка, ЗИПАрхив.ПолноеИмя);
		ИзменитьСтатусШПИ(Объект.Ссылка);
		Сообщить("Для партии № " + Объект.ИмяПартии + " получен архив документов");
	Иначе
		Сообщить ("Произошла ошибка получения Архива № "+ Объект.ИмяПартии);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПолучитьВсеДокументыПартииАПИ(ИмяПартии, Получено, ДД_Ответ)
	тЗаписьJSON = Новый ЗаписьJSON;
	тПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);  
	тЗаписьJSON.УстановитьСтроку(тПараметрыJSON);
	
	token = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("токен");
	Logkey = бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("ключ");
	
	тЗапрос = имяПартии;
	
	ЗаписатьJSON(тЗаписьJSON, тЗапрос);
	
	strJSON = тЗаписьJSON.Закрыть();
	Сервер = "otpravka-api.pochta.ru";      
	Ресурс = "/1.0/forms/";
	
	HTTPЗапрос = Новый HTTPЗапрос;
	
	HTTPЗапрос.АдресРесурса = Ресурс + тЗапрос + "/zip-all";
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL;
	
	HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);   
	
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
	
	HTTPЗапрос.Заголовки.Вставить("Authorization","AccessToken "+ token);
	
	HTTPЗапрос.Заголовки.Вставить("X-User-Authorization","Basic "+ Logkey );
	
	ИмяФайла = "АрхивПартия_" + тЗапрос;
	
	Попытка
		СчетчикПопыток = 1;
		Пока СчетчикПопыток<20 Цикл
			Попытка
				ОтветHTTP = HTTP.Получить(HTTPЗапрос);
				Прервать;
			Исключение
				Сообщить("Попытка получения ответа: "+СчетчикПопыток);
				СчетчикПопыток = СчетчикПопыток+1;
			КонецПопытки;	
		КонецЦикла;		
	Исключение
		СтрокаСообщения = ОписаниеОшибки();
		Сообщить(СтрокаСообщения, СтатусСообщения.Важное);
		УдалитьФайлы(имяВыходногоФайла);
		Возврат;
	КонецПопытки;	
	
	Если ОтветHTTP.КодСостояния = 400 Тогда
		СтрокаОтвет =  ОтветHTTP.ПолучитьТелоКакСтроку();
		Сообщить(СтрокаОтвет);
		Получено = Ложь;
	ИначеЕсли ОтветHTTP.КодСостояния = 200 Тогда
		ДД_Ответ = ОтветHTTP.ПолучитьТелоКакДвоичныеДанные();
		Получено = Истина;
	КонецЕсли;
	Если Получено = Ложь Тогда
		Возврат;
	КонецЕсли;	

КонецПроцедуры


&НаСервере
Процедура ИзвлечьИзАрхиваИПрикрепитьФайлы(ДокПартия, ФайлАрхивПуть)
	
	ФайлАрхив = Новый Файл(ФайлАрхивПуть);
	Если НЕ ФайлАрхив.Существует() тогда
		Возврат;
	КонецЕсли;
	
	// Откроем файл для чтения
	ЧтениеZIP = Новый ЧтениеZipФайла(ФайлАрхив.ПолноеИмя);
	
	
	// Распакуем все файлы из архива
	ПапкаРаспаковка = ФайлАрхив.Путь + ФайлАрхив.ИмяБезРасширения;
	ЧтениеZIP.ИзвлечьВсе(ПапкаРаспаковка, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	
	ЧтениеZIP.Закрыть();	
	
	Документ = Документы.ПрикрепитьФайлы.СоздатьДокумент();
	Документ.Организация = ПараметрыСеанса.ТекущийПользователь.Организация;
	Документ.Автор = ПараметрыСеанса.ТекущийПользователь;
	Документ.Объект = ДокПартия;
	Документ.Дата = ТекущаяДатаСеанса();
	Документ.Комментарий = "Автоматическое прикрепление Архива документов";
	
	МассивФайловАрхива = НайтиФайлы(ПапкаРаспаковка,"*.*");
	МассивДанных = Новый Массив;

	Для Каждого ФайлАрхива Из МассивФайловАрхива Цикл
		Стр = Документ.Файлы.Добавить();
		Стр.Загружен = Истина;
		Стр.Путь = ФайлАрхива.ПолноеИмя;
		Стр.УИД = Новый УникальныйИдентификатор();
		Если СтрНайти(ФайлАрхива.Имя, "F103") > 0 Тогда
			ТипПрикрепляемогоФайла = Справочники.ТипыПрикрепляемыхФайлов.Форма103;
		Иначе
			ТипПрикрепляемогоФайла = "";
		КонецЕсли;	
		Стр.ТипФайла = ТипПрикрепляемогоФайла;
		Стр.Размер = ОкруглитьРазмерФайла(Строка(ФайлАрхива.Размер()));
		ДД = Новый ДвоичныеДанные(ФайлАрхива.ПолноеИмя);
		МассивДанных.Добавить(ДД);
		Документ.ПоместитьВХранилище(МассивДанных);
	КонецЦикла;
	Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);

КонецПроцедуры


&НаКлиенте
Процедура ПереводПартииВАрхив(Команда)
	
	Если Объект.ИмяПартии <> "" Тогда
		
		СообщениеПользователю = ПереводПартииВАрхивНаСервере();
		Сообщение(СообщениеПользователю);
		
	Иначе
		
		Сообщение("Поле ""Имя Партии"" не заполнено!");
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПереводПартииВАрхивНаСервере()
	
	Попытка
		ДанныеВыполнения = Документы.ПартионнаяПочта.НастройкиПереводаПартииВАрхив(Объект.ИмяПартии);
		
		Если НЕ ДанныеВыполнения.Результат Тогда
			
			Возврат ДанныеВыполнения.Данные;	
			
		КонецЕсли;  
		
		ОбъектJSON = ПолучитьОбъектИзJSON(ДанныеВыполнения.Данные); 
		Ответ = ОбъектJSON[0];
		
		ОшибкаПочтыРФ = Ответ.Получить("error-code");
		Если ОшибкаПочтыРФ <> Неопределено Тогда
			
			Возврат ОбработкаОшибокПочтыРФ.ОписаниеОшибкиПотыРФ(ОшибкаПочтыРФ);	
			
		КонецЕсли;
		
		Объект.ДатаПереносаВАрхив = ТекущаяДатаСеанса();
  
	Исключение
		Возврат СтрШаблон(
		"Не удалось получить настройки пользователя Почты РФ! 
		| по причине: %1",
		ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Сообщение("Партия успешно переведена в архив!");
	Возврат ДанныеВыполнения.Данные;
	
КонецФункции

&НаКлиенте
Процедура ВозвратПартииИзАрхива(Команда)
	
	Ответ = ВозвратПартииИзАрхиваНаСервере();
	Сообщение(Ответ);
	
КонецПроцедуры

&НаСервере
Функция ВозвратПартииИзАрхиваНаСервере()
	
	Попытка
		ОтветHTTP = Документы.ПартионнаяПочта.НастройкиВозвратаПартииИзАрхива(Объект.ИмяПартии);
		Объект.ДатаПереносаВАрхив = Дата(1, 1, 1);
	Исключение
		Возврат СтрШаблон(
		"Не удалось получить настройки пользователя Почты РФ! 
		| по причине: %1",
		ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;	

	Возврат ОтветHTTP.Данные; 
	
КонецФункции

&НаСервере
Функция ПолучитьОбъектИзJSON(JSON)

	Возврат КоннекторHTTP.JsonВОбъект(JSON);  

КонецФункции

Функция Сообщение(Текст) 
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = Текст;
	Сообщение.Сообщить();	
	
КонецФункции






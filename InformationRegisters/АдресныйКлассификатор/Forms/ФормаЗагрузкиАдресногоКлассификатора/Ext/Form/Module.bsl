
////////////////////////////////////////////////////////////////////////////////
// БЛОК ОБРАБОТЧИКОВ СОБЫТИЙ
//

// Обработчик события "при создании на сервере" формы.
// Заполняет список выбора адресных объектов для загрузки.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	АдресныеОбъектыПереданные = ?(Параметры.Свойство("АдресныеОбъекты"), Параметры.АдресныеОбъекты, Неопределено);
	
	ЗаполнитьТаблицуАдресныхОбъектов(АдресныеОбъектыПереданные);
	
	ИсточникДанныхДляЗагрузки = 0;
	ПутьКФайламДанныхНаДиске = "";
	ДискИТС = "";
	
	Если АдресныеОбъектыПереданные = Неопределено Тогда
		ЗагрузитьСохраненныеПараметрыЗагрузки();
	Иначе
		ИсточникДанныхДляЗагрузки = 1;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "при открытии" формы
// Вызывает функциональность обновления интерфейса
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		//Чуров
		ПоказатьПредупреждение(,НСтр("ru = 'Классификатор не может быть загружен в Веб клиенте'"),, НСтр("ru = 'Загрузка адресного классификатора'"));
		//Предупреждение(НСтр("ru = 'Классификатор не может быть загружен в Веб клиенте'"),, НСтр("ru = 'Загрузка адресного классификатора'"));
		Закрыть();
	#КонецЕсли
	
	УстановитьИзмененияВИнтерфейсе();
	
КонецПроцедуры

// Обработчик нажатия на "кнопку "ВыделитьВсе"
// командной панели элемента управления "АдресныеОбъектыДляЗагрузки"
// Выделяет все адресные объекты в списке адресных объектов для загрузки
//
&НаКлиенте
Процедура ВыделитьВсеВыполнить()
	
	Для Каждого ЭлементАдресныйОбъект Из АдресныеОбъектыДляЗагрузки Цикл
		ЭлементАдресныйОбъект.Пометка = Истина;
	КонецЦикла;
	
	УстановитьИзмененияВИнтерфейсе();
	
КонецПроцедуры

// Обработчик нажатия на "кнопку "ОтменитьВыделитьВсе"
// командной панели элемента управления "АдресныеОбъектыДляЗагрузки"
// Снимает выделение со всех адресных объектов в списке
// адресных объектов для загрузки
//
&НаКлиенте
Процедура ОтменитьВыделитьВсеВыполнить()
	
	Для Каждого ЭлементАдресныйОбъект Из АдресныеОбъектыДляЗагрузки Цикл
		ЭлементАдресныйОбъект.Пометка = Ложь;
	КонецЦикла;
	
	УстановитьИзмененияВИнтерфейсе();
	
КонецПроцедуры

// Обработчик события НачалоВыбора поля ввода формы ПутьКФайламДанныхНаДиске.
// Вызывает диалог выбора  директории, после выбора проверяет, существуют
// ли в выбранной директории файлы данных.
//
&НаКлиенте
Процедура ПутьКФайламДанныхНаДискеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
#Если Не ВебКлиент Тогда
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выбор каталога с файлами данных'");
	ДиалогОткрытияФайла.Каталог = ПутьКФайламДанныхНаДиске;
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ПутьКФайламДанныхНаДиске = ДиалогОткрытияФайла.Каталог;
		
		ОчиститьСообщения();
		
		Если УдалитьАдресныйКлассификаторКлиент.ПроверитьНаличиеФайловДанныхВКаталоге(ПутьКФайламДанныхНаДиске) Тогда
			УстановитьИзмененияВИнтерфейсе ();
		Иначе
			УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						УдалитьСтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Файлы данных не найдены в каталоге ""%1"".'"),
							ПутьКФайламДанныхНаДиске), ,
						"ПутьКФайламДанныхНаДиске");
		КонецЕсли;
	КонецЕсли;
#Иначе
	//Чуров
	ПоказатьПредупреждение(,НСтр("ru = 'Функциональность не поддерживается на веб клиенте'"));
	//Предупреждение(НСтр("ru = 'Функциональность не поддерживается на веб клиенте'"));
#КонецЕсли
	
КонецПроцедуры

// Обработчик события НачалоВыбора поля ввода формы ДискИТС.
// Вызывает диалог выбора директории, после выбора проверяет, существуют
// ли в выбранной директории файлы архивов данных.
//
&НаКлиенте
Процедура ДискИТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
#Если Не ВебКлиент Тогда
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогОткрытияФайла.Заголовок = "Выбор пути к диску ИТС";
	ДиалогОткрытияФайла.Каталог = ДискИТС;
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ДискИТС = ДиалогОткрытияФайла.Каталог;
		
		ФайлыСуществуют = УдалитьАдресныйКлассификаторКлиент.ПроверитьНаличиеФайловНаДискеИТС(ДискИТС);
		
		ОчиститьСообщения();
		
		Если ФайлыСуществуют Тогда
			УстановитьИзмененияВИнтерфейсе();
		Иначе
			УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				УдалитьСтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Файлы данных КЛАДР не найдены: ""%1"".
										|Проверьте правильность указанного пути к Диску ИТС.'"),
							ДискИТС), ,
				"ДискИТС");
		КонецЕсли;
	КонецЕсли;
#Иначе
	//Чуров
	ПоказатьПредупреждение(,НСтр("ru = 'Функциональность не поддерживается на веб клиенте.'"));
	//Предупреждение(НСтр("ru = 'Функциональность не поддерживается на веб клиенте.'"));
#КонецЕсли
	
КонецПроцедуры

// Обработчик события выбора поля таблицы "ЭлементАдресныйОбъект"
// Изменяет статус загрузки адресного объекта поля на противоположный
//
&НаКлиенте
Процедура ТаблицаАдресныхОбъектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Элемент.ТекущиеДанные.Пометка = НЕ Элемент.ТекущиеДанные.Пометка;
	
КонецПроцедуры

// Обработчик события ПриИзменении поля переключателя ИсточникДанныхДляЗагрузки
// Устанавливает параметры видимости элементов (параметров вида загрузки) 
// в зависимости от значения переключателя.
//
&НаКлиенте
Процедура СпособЗагрузкиПриИзменении(Элемент)
	
	УстановитьИзмененияВИнтерфейсе();
	
КонецПроцедуры

// Обработчик нажатия на кнопку "Загрузить" командной панели формы
//
&НаКлиенте
Процедура ЗагрузитьВыполнить()
	
	ОчиститьСообщения();
	
	Если ЗагрузитьКЛАДР() Тогда
		Состояние(НСтр("ru = 'Адресный классификатор успешно загружен'"));
		Оповестить("ИзменениеАдресногоКлассификатора");
		СохранитьПараметрыЗагрузки();
		Закрыть(Истина);
	КонецЕсли;
	
	УстановитьСтатусЗагрузки("");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Управление мастером загрузки

// Обработчик нажатия на кнопку "Далее"
//
&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ОчиститьСообщения();
	
	Если      Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыборАдресныхОбъектов Тогда
		Если КоличествоОтмеченныхАдресныхОбъектов() = 0 Тогда
			УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru = 'Требуется выбрать хотя бы один адресный объект.'"), ,
						"АдресныеОбъектыДляЗагрузки");
			Возврат;
		КонецЕсли;
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыборИсточника;
	ИначеЕсли Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыборИсточника Тогда
		Если ИсточникДанныхДляЗагрузки = 2
			И (ПустаяСтрока(ДискИТС)
				ИЛИ НЕ УдалитьАдресныйКлассификаторКлиент.ПроверитьНаличиеФайловНаДискеИТС(ДискИТС))Тогда
				УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							НСтр("ru = 'Проверьте правильность указания пути к диску ИТС.'"), ,
							"ДискИТС");
			Возврат;
		ИначеЕсли  ИсточникДанныхДляЗагрузки = 3
			И (ПустаяСтрока(ПутьКФайламДанныхНаДиске)
				ИЛИ НЕ УдалитьАдресныйКлассификаторКлиент.ПроверитьНаличиеФайловДанныхВКаталоге(ПутьКФайламДанныхНаДиске))Тогда
				УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							НСтр("ru = 'Проверьте правильность указания пути к файлам КЛАДР, а так же состав файлов.'"), ,
							"ПутьКФайламДанныхНаДиске");
			Возврат;
		КонецЕсли;
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаЗагрузка;
	КонецЕсли;
	
	УстановитьИзмененияВИнтерфейсе();
	
КонецПроцедуры

// Обработчик нажатия на кнопку "Назад"
//
&НаКлиенте
Процедура КомандаНазад(Команда)
	
	Если Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыборИсточника Тогда
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыборАдресныхОбъектов;
	ИначеЕсли Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаЗагрузка Тогда
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыборИсточника;
	КонецЕсли;
	
	УстановитьИзмененияВИнтерфейсе();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// БЛОК СЕРВИСНЫХ ФУНКЦИЙ
//

&НаСервере
Процедура СохранитьПараметрыЗагрузки()
	
	МассивЗагружаемыхАО = Новый Массив;
	
	Для Каждого ЭлементАО Из АдресныеОбъектыДляЗагрузки Цикл
		Если ЭлементАО.Пометка Тогда
			МассивЗагружаемыхАО.Добавить(Лев(ЭлементАО.НаименованиеАдресногоОбъекта, 2));
		КонецЕсли;
	КонецЦикла;
	
	ХранилищеОбщихНастроек.Сохранить("ПараметрыЗагрузкиАдресногоКлассификатора", "ЗагружаемыеРегионы", МассивЗагружаемыхАО);
	
	ИсточникКЛАДР = Новый Структура("ИсточникДанныхДляЗагрузки");
	ИсточникКЛАДР.ИсточникДанныхДляЗагрузки = ИсточникДанныхДляЗагрузки;
	
	Если      ИсточникДанныхДляЗагрузки = 2 Тогда
		ИсточникКЛАДР.Вставить("ДискИТС", ДискИТС);
	ИначеЕсли ИсточникДанныхДляЗагрузки = 3 Тогда
		ИсточникКЛАДР.Вставить("ПутьКФайламДанныхНаДиске", ПутьКФайламДанныхНаДиске);
	КонецЕсли;
	
	ХранилищеОбщихНастроек.Сохранить("ПараметрыЗагрузкиАдресногоКлассификатора", "ИсточникКЛАДР", ИсточникКЛАДР);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСохраненныеПараметрыЗагрузки()
	
	ИсточникКЛАДР = ЗагрузитьНастройкуЗагрузкиКЛАДР("ИсточникКЛАДР");
	
	Если ИсточникКЛАДР <> Неопределено Тогда
		ИсточникДанныхДляЗагрузки = ИсточникКЛАДР.ИсточникДанныхДляЗагрузки;
		Если ИсточникДанныхДляЗагрузки = 2 Тогда
			ДискИТС = ИсточникКЛАДР.ДискИТС;
		ИначеЕсли ИсточникДанныхДляЗагрузки = 3 Тогда
			ПутьКФайламДанныхНаДиске = ИсточникКЛАДР.ПутьКФайламДанныхНаДиске;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получает значение из системного хранилища настроек ИБ
//
&НаСервереБезКонтекста
Функция ЗагрузитьНастройкуЗагрузкиКЛАДР(КлючНастроек)
	
	Возврат ХранилищеОбщихНастроек.Загрузить("ПараметрыЗагрузкиАдресногоКлассификатора", КлючНастроек);
	
КонецФункции

// Устанавливает текст статус загрузки
//
&НаКлиенте
Процедура УстановитьСтатусЗагрузки(знач Сообщение = "")
	
	СтатусЗагрузки = Сообщение;
	
	Если ПустаяСтрока(Сообщение) Тогда
		Элементы.СтраницыЗагрузки.ТекущаяСтраница = Элементы.ГруппаПустаяГруппа;
	Иначе
		Элементы.СтраницыЗагрузки.ТекущаяСтраница = Элементы.СтраницаСтатусЗагрузки;
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

// Релизация загрузки классификатора
//
&НаКлиенте
Функция ЗагрузитьКЛАДР()
	
	// Требуется для аутентификации на пользовательском сайте
	Перем ЗапросФормыАутентификации, ДанныеАутентификации, ПутьКДанным;
	
	ИндикаторЗагрузки = 0;
	
	ВозвращаемоеЗначение = Истина;
	
	Если ИсточникДанныхДляЗагрузки = 2 Тогда // загрузка с диска ИТС
		Если Прав(ДискИТС, 1) <> "\" Тогда
			ДискИТС = ДискИТС + "\";
		КонецЕсли;
	ИначеЕсли ИсточникДанныхДляЗагрузки = 3 Тогда // загрузка из файлов на диске
		Если Прав(ПутьКФайламДанныхНаДиске, 1) <> "\" Тогда
			ПутьКФайламДанныхНаДиске = ПутьКФайламДанныхНаДиске + "\";
		КонецЕсли;
	КонецЕсли;
	
	// Подготавливаем массив адресных объектов для загрузки
	АдресныеОбъекты = Новый Массив;
	
	Для Каждого ЭлементАдресныйОбъект Из АдресныеОбъектыДляЗагрузки Цикл
		Если ЭлементАдресныйОбъект.Пометка Тогда
			АдресныеОбъекты.Добавить(Лев(ЭлементАдресныйОбъект.НаименованиеАдресногоОбъекта, 2));
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		// Первый этап - загрузка адаптированной базы данных КЛАДР на сервер.
		// В зависимости от выбора метода загрузка осуществляется по разному.
		
		Если      ИсточникДанныхДляЗагрузки = 1 Тогда // загрузка с пользовательского сайта 1С
			Если Не ПолучитьДанныеАутентификации(ДанныеАутентификации, ЗапросФормыАутентификации) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Состояние(НСтр("ru = 'Загружается адресный классификатор...'"));
			
			Результат = ЗагрузитьАдресныеОбъектыССервера(АдресныеОбъекты, ДанныеАутентификации, ПутьКДанным);
			
			Если Не Результат.Статус И Не ЗапросФормыАутентификации Тогда
				Если Не ПолучитьДанныеАутентификации(ДанныеАутентификации, ЗапросФормыАутентификации, Истина) Тогда
					Возврат Ложь;
				КонецЕсли;
				Результат = ЗагрузитьАдресныеОбъектыССервера(АдресныеОбъекты, ДанныеАутентификации, ПутьКДанным);
			КонецЕсли;
			
			Если Не Результат.Статус Тогда
				ВызватьИсключение Результат.СообщениеОбОшибке;
			КонецЕсли;
			
			Если Прав(ПутьКДанным, 1) <> "\" Тогда
				ПутьКДанным = ПутьКДанным + "\";
			КонецЕсли;
			
		ИначеЕсли ИсточникДанныхДляЗагрузки = 2 Тогда // загрузка с диска ИТС
			Состояние(НСтр("ru = 'Загружается адресный классификатор...'"));
			УстановитьСтатусЗагрузки(НСтр("ru = 'Приведение файлов с диска ИТС к требуемому формату'"));
			ПутьКДанным = УдалитьАдресныйКлассификаторКлиент.ПреобразоватьФайлыКЛАДРEXEВZIP(ДискИТС);
			Если ПутьКДанным = Неопределено Тогда
				УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Загрузка адресного классификатора была отменена.'"));
				Возврат Ложь;
			КонецЕсли;
			ИндикаторЗагрузки = 25;
		ИначеЕсли ИсточникДанныхДляЗагрузки = 3 Тогда // загрузка из файлов на диске
			Состояние(НСтр("ru = 'Загружается адресный классификатор...'"));
			УстановитьСтатусЗагрузки(НСтр("ru = 'Сжатие файлов перед передачей на сервер'"));
			МассивФайловДляЗагрузки = УдалитьАдресныйКлассификаторКлиент.СписокФайловДанных();
			Для Каждого ИмяФайла Из МассивФайловДляЗагрузки Цикл
				УдалитьАдресныйКлассификаторКлиент.СжатьФайл(ПутьКФайламДанныхНаДиске, ИмяФайла, ПутьКДанным);
				ИндикаторЗагрузки = (МассивФайловДляЗагрузки.Найти(ИмяФайла)+1) * 25 / МассивФайловДляЗагрузки.Количество();
				ОбновитьОтображениеДанных();
			КонецЦикла;
		КонецЕсли;
		
		ОбновитьОтображениеДанных();
		
		// Второй этап - передача файлов на сервер 1с:Предприятия
		УстановитьСтатусЗагрузки(НСтр("ru = 'Передача файлов на сервер 1С:Предприятия'"));
		
		Если ИсточникДанныхДляЗагрузки = 1 Тогда
			ПутьКДаннымНаСервере = Неопределено;
			Для Каждого АдресныйОбъект Из АдресныеОбъекты Цикл
				УдалитьАдресныйКлассификаторКлиент.ПередатьФайлыНаСерверПоАдреснымОбъектам(
				           ПутьКДанным, ПутьКДаннымНаСервере, АдресныйОбъект,
				           ? (АдресныеОбъекты.Найти(АдресныйОбъект) > 0, Ложь, Истина));
			ИндикаторЗагрузки = 25 + (АдресныеОбъекты.Найти(АдресныйОбъект)+1) * 25 / АдресныеОбъекты.Количество();
			ОбновитьОтображениеДанных();
			КонецЦикла;
		Иначе
			ПутьКДаннымНаСервере = Неопределено;
			МассивФайловДляЗагрузки = УдалитьАдресныйКлассификаторКлиент.СписокФайловДанных();
			Для Каждого ИмяФайла Из МассивФайловДляЗагрузки Цикл
				УдалитьАдресныйКлассификаторКлиент.ПередатьФайлНаСервер(ПутьКДанным, ИмяФайла, ПутьКДаннымНаСервере);
				ИндикаторЗагрузки = 25 + (МассивФайловДляЗагрузки.Найти(ИмяФайла)+1) * 25 / МассивФайловДляЗагрузки.Количество();
				ОбновитьОтображениеДанных();
			КонецЦикла;
		КонецЕсли;
		
		// Третий этап - загрузка адресных сведений в регистр сведений.
		// Предполагается что к текущему моменту на сервере в каталоге ПутьКДаннымНаСервере
		// содержатся все необходимые файлы данных
		
		Для Каждого АдресныйОбъект Из АдресныеОбъекты Цикл
			
			АдресныеСведения = УдалитьАдресныйКлассификатор.ИнформацияПоАдресномуОбъекту(АдресныйОбъект);
			
			УстановитьСтатусЗагрузки(
					УдалитьСтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Загружаются сведения по объекту: %1 %2'"),
						АдресныеСведения.Наименование,
						АдресныеСведения.Сокращение));
			УдалитьАдресныйКлассификатор.ЗагрузитьКлассификаторПоАдресномуОбъекту(	АдресныйОбъект,
																			ПутьКДаннымНаСервере,
																			ИсточникДанныхДляЗагрузки = 1);
			ИндикаторЗагрузки = 50 + (АдресныеОбъекты.Найти(АдресныйОбъект)+1) * 50 / АдресныеОбъекты.Количество();
			ОбновитьОтображениеДанных();
		КонецЦикла;
		
		Если ИсточникДанныхДляЗагрузки = 1 Тогда
			УдалитьАдресныйКлассификаторКлиентСервер.ПолучитьФайлВерсийИОбновитьВерсиюАдресныхСведений(АдресныеОбъекты);
		КонецЕсли;
	
	Исключение
		УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Ошибка при загрузке адресных сведений: '")
				+ ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВозвращаемоеЗначение = Ложь;
	КонецПопытки;
	
	УдалитьОбщегоНазначенияКлиентСервер.УдалитьКаталогСФайлами(ПутьКДанным);
	
	УдалитьОбщегоНазначения.УдалитьФайлыНаСервере1СПредприятие(ПутьКДаннымНаСервере);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаКлиенте
Функция ПолучитьДанныеАутентификации(ДанныеАутентификации, ЗапросФормыАутентификации, знач ЗапросКПользователю = Ложь)
	
	Перем КодПользователя, Пароль;
	
	ЗапросФормыАутентификации = Ложь;
	
	Если ЗапросКПользователю Или Не УдалитьАдресныйКлассификатор.ПолучитьПараметрыАутентификации(КодПользователя, Пароль) Тогда
		ЗапросФормыАутентификации = Истина;
		УстановитьСтатусЗагрузки(НСтр("ru = 'Аутентификация на пользовательском сайте 1С'"));
		//Чуров А.И.
		Результат = ОткрытьФорму("РегистрСведений.АдресныйКлассификатор.Форма.АутентификацияНаПользовательскомСайте");
		//Результат = ОткрытьФормуМодально("РегистрСведений.АдресныйКлассификатор.Форма.АутентификацияНаПользовательскомСайте");
		Если Результат = Неопределено ИЛИ ТипЗнч(Результат) = Тип("КодВозвратаДиалога") Тогда
			Возврат Ложь;
		Иначе
			КодПользователя = Результат.КодПользователя;
			Пароль          = Результат.Пароль;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеАутентификации = Новый Структура("КодПользователя ,Пароль", КодПользователя, Пароль);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьАдресныеОбъектыССервера(знач АдресныеОбъекты, знач ДанныеАутентификации, ПутьКДанным)
	
	Для Каждого АдресныйОбъект Из АдресныеОбъекты Цикл
		АдресныеСведения = УдалитьАдресныйКлассификатор.ИнформацияПоАдресномуОбъекту(АдресныйОбъект);
		УстановитьСтатусЗагрузки(
		    УдалитьСтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		            НСтр("ru = 'Загрузка файлов с Веб сервера 1С: %1 %2'"),
		                АдресныеСведения.Наименование,
		                АдресныеСведения.Сокращение));
		
		Результат = УдалитьАдресныйКлассификаторКлиент.ЗагрузитьКЛАДРСВебСервера(
		                АдресныйОбъект,
		                ДанныеАутентификации,
		                ПутьКДанным);
		Если Не Результат.Статус Тогда
			Прервать;
		КонецЕсли;
		ИндикаторЗагрузки = (АдресныеОбъекты.Найти(АдресныйОбъект)+1) * 25 / АдресныеОбъекты.Количество();
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Заполняет переданную таблицу значений по значениям таблицы адресных объектов.
// Выбирается код, наименование и сокращение типа объекта.
//
&НаСервере
Процедура ЗаполнитьТаблицуАдресныхОбъектов(ЗаданныеРегионыДляЗагрузки)
	
	МассивЗагружаемыхАО = ЗагрузитьНастройкуЗагрузкиКЛАДР("ЗагружаемыеРегионы");
	
	АдресныеОбъектыДляЗагрузки.Очистить();
	
	КлассификаторАдресныхОбъектовXML =
		РегистрыСведений.АдресныйКлассификатор.ПолучитьМакет("КлассификаторАдресныхОбъектовРоссии").ПолучитьТекст();
	
	КлассификаторТаблица = УдалитьОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторАдресныхОбъектовXML).Данные;
	
	Для Каждого АдресныйОбъект Из КлассификаторТаблица Цикл
		
		Наименование = Лев(АдресныйОбъект.Code, 2) + " - " + АдресныйОбъект.Name + " " + АдресныйОбъект.Socr;
		
		НоваяСтрока = АдресныеОбъектыДляЗагрузки.Добавить();
		НоваяСтрока.НаименованиеАдресногоОбъекта = Наименование;
		
		Если      ЗаданныеРегионыДляЗагрузки <> Неопределено Тогда
			Если ЗаданныеРегионыДляЗагрузки.Найти(Лев(АдресныйОбъект.Code, 2)) <> Неопределено Тогда
				НоваяСтрока.Пометка = Истина;
			Иначе
				НоваяСтрока.Пометка = Ложь;
			КонецЕсли;
		ИначеЕсли МассивЗагружаемыхАО <> Неопределено Тогда
			Если МассивЗагружаемыхАО.Найти(Лев(АдресныйОбъект.Code, 2)) <> Неопределено Тогда
				НоваяСтрока.Пометка = Истина;
			Иначе
				НоваяСтрока.Пометка = Ложь;
			КонецЕсли;
		Иначе
			НоваяСтрока.Пометка = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает количество помеченных адресных объектов
//
&НаКлиенте
Функция КоличествоОтмеченныхАдресныхОбъектов()
	
	КоличествоОтмеченныхАдресныхОбъектов = 0;
	
	Для Каждого ЭлементАдресныйОбъект Из АдресныеОбъектыДляЗагрузки Цикл
		Если ЭлементАдресныйОбъект.Пометка Тогда
			КоличествоОтмеченныхАдресныхОбъектов = КоличествоОтмеченныхАдресныхОбъектов + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоличествоОтмеченныхАдресныхОбъектов;
	
КонецФункции

// В зависимости от текущей страницы устанавливает доступность тех или иных полей для пользователя
//
&НаКлиенте
Процедура УстановитьИзмененияВИнтерфейсе()
	
	ИсточникДанныхДляЗагрузкиВыбран = ИсточникДанныхДляЗагрузкиВыбран();
	КоличествоОтмеченныхАдресныхОбъектов = КоличествоОтмеченныхАдресныхОбъектов();
	
	Если Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыборАдресныхОбъектов Тогда
		Элементы.Назад.Доступность = Ложь;
		Элементы.Далее.Доступность = Истина;
	ИначеЕсли Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыборИсточника Тогда
		Элементы.Назад.Доступность = Истина;
		Элементы.Далее.Доступность = Истина;
		
		Если ИсточникДанныхДляЗагрузки = 0 Тогда
			ИсточникДанныхДляЗагрузки = 1;
		КонецЕсли;
		
		Если		ИсточникДанныхДляЗагрузки = 2 Тогда
			Элементы.СтраницыСпособаЗагрузки.ТекущаяСтраница = Элементы.СтраницаЗагрузкаСДискаИТС;
		ИначеЕсли	ИсточникДанныхДляЗагрузки = 3 Тогда
			Элементы.СтраницыСпособаЗагрузки.ТекущаяСтраница = Элементы.СтраницаЗагрузкаФайлов;
		Иначе
			Элементы.СтраницыСпособаЗагрузки.ТекущаяСтраница = Элементы.ПустаяСтраница;
		КонецЕсли;
	ИначеЕсли Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаЗагрузка Тогда
		Элементы.Назад.Доступность = Истина;
		Элементы.Далее.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ИсточникДанныхДляЗагрузкиВыбран()
	
	ИсточникВыбран = Ложь;
	
	Если     ИсточникДанныхДляЗагрузки = 1 Тогда
		ИсточникВыбран = Истина;
	ИначеЕсли ИсточникДанныхДляЗагрузки = 2 Тогда
		Если УдалитьАдресныйКлассификаторКлиент.ПроверитьНаличиеФайловНаДискеИТС(ДискИТС) Тогда
			ИсточникВыбран = Истина;
		КонецЕсли;
	ИначеЕсли ИсточникДанныхДляЗагрузки = 3 Тогда
		Если УдалитьАдресныйКлассификаторКлиент.ПроверитьНаличиеФайловДанныхВКаталоге(ПутьКФайламДанныхНаДиске) Тогда
			ИсточникВыбран = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИсточникВыбран;
	
КонецФункции


Функция ОбщиеСведения(Соответствие) Экспорт

	Данные = Новый Структура;
	Данные.Вставить("Дата", Неопределено);
	Данные.Вставить("Комментарий", Неопределено);
	
	Возврат Данные;

КонецФункции

Процедура ОбработатьНастройку(Соответствие, ОбщиеСведения, ТабличныйДокумент) Экспорт

	СведенияООшибках = Проверить(ТабличныйДокумент, Соответствие);
	Если СведенияООшибках.Количество() = 0 Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ТекстОшибок = Новый Массив;
	ТекстОшибок.Добавить("Время проверки: ");
	ТекстОшибок.Добавить(ОбщиеСведения["Дата"]);
	ТекстОшибок.Добавить(Символы.ПС);
	ТекстОшибок.Добавить("Проверяемый реестр: ");
	ТекстОшибок.Добавить(Символы.ПС);
	ТекстОшибок.Добавить(ОбщиеСведения["Комментарий"]);
	
	Для каждого ОшибкиПоКолонке Из СведенияООшибках Цикл
	
		ТекстОшибок.Добавить(Символы.ПС);
		ТекстОшибок.Добавить("В колонке номер: ");
		ТекстОшибок.Добавить(ОшибкиПоКолонке["НомерКолонки"]);
		ТекстОшибок.Добавить(Символы.ПС);
		ТекстОшибок.Добавить("ОШИБКИ: ");
		
		Ошибки = ОшибкиПоКолонке["Ошибки"];
		Для каждого ОшибкаВСтроке Из Ошибки Цикл
		
			ТекстОшибок.Добавить(Символы.ПС);
			ТекстОшибок.Добавить("В строке номер: ");
			ТекстОшибок.Добавить(ОшибкаВСтроке["НомерСтроки"]);
			ТекстОшибок.Добавить(Символы.ПС);
			ТекстОшибок.Добавить("С текстовым значением: ");
			ТекстОшибок.Добавить(ОшибкаВСтроке["ЗначениеЯчейки"]);
			ТекстОшибок.Добавить(Символы.ПС);
			ТекстОшибок.Добавить("Не возможно получить правильный результат");
			ТекстОшибок.Добавить(Символы.ПС);
			ТекстОшибок.Добавить("Полученный результат: ");
			ТекстОшибок.Добавить(ОшибкаВСтроке["Значение"]);
			ТекстОшибок.Добавить(Символы.ПС);
		
		КонецЦикла;
	
	КонецЦикла;
	
	Текст = СтрСоединить(ТекстОшибок, " ");
	
	ВызватьИсключение Текст;

КонецПроцедуры

Функция ОбработатьОшибку(ИнформацияОбОшибке) Экспорт

	ОписаниеОшибки = УправленияСообщениями.СформироватьТекстОшибки(
		ИнформацияОбОшибке,
		"Ошибки при проверке"
	);
	
	Данные = Новый Массив;
	Данные.Добавить(ОписаниеОшибки["Выражение"]);
	
	Возврат Данные;

КонецФункции // ()

Функция Проверить(Реестр, Настройка) Экспорт

	Соответствия = Настройка["СоответствияСРеестром"];
	
	ПозицияШапки = Настройка["ПозицияШапки"];
	ШапкаРеестра = ПолучитьШапкуРеестра(Реестр, ПозицияШапки);
	ОпределятьПоИмени = Настройка["ПоИмени"];
	
	ПроверяемыеКолонки = ПриготовитьСоответствия(
		Соответствия,
		ШапкаРеестра,
		ОпределятьПоИмени
	);
	
	ТекстЗначенийКолонок = ПолучитьТекстПроверяемыхКолонок(
		Реестр,
		ПроверяемыеКолонки,
		ПозицияШапки + 1
	);
	
	ПроверяемыеЗначения = СгруппироватьКолонкиПоПроверкам(
		ТекстЗначенийКолонок
	);
	
	СведенияООшибках = ПроверитьЗначения(
		ПроверяемыеЗначения,
		ПозицияШапки + 1
	);
	
	Возврат СведенияООшибках;

КонецФункции // ()

#Область Техническая

Функция ПриготовитьСоответствия(Соответствия, ШапкаРеестра, ОпределятьПоИмени)

	Настройки = Новый Массив;

	Для каждого Соответствие Из Соответствия Цикл
	
		НомерКолонки = Соответствие.НомерКолонки;
		Если ОпределятьПоИмени Тогда
		
			НомерКолонки = ПолучитьНомерКолонкиВТекущемРеестре(ШапкаРеестра, 1, Соответствие.ИмяКолонки);
		
		КонецЕсли;
		
		ПредставлениеТипа = Соответствие.ТипКолонки;

		ОписаниеТипа = Новый ОписаниеТипов(ПредставлениеТипа);

		Настройка = СобратьСоответствие(НомерКолонки, ОписаниеТипа);
		Настройки.Добавить(Настройка);
	
	КонецЦикла;
	
	Возврат Настройки;

КонецФункции // ()

Функция ПолучитьНомерКолонкиВТекущемРеестре(ТаблицаПроверки, НомерСтрокиШапки, ИскомаяКолонка)

	Для НомерКолонки = 1 По ТаблицаПроверки.ШиринаТаблицы Цикл
	
		ИмяКолонки = УправлениеЗагрузкойСервер.ТекстЯчейки(ТаблицаПроверки, НомерСтрокиШапки, НомерКолонки);
		// TODO - Ввести опцию для выбора не учета регистра, тк основная загрузка не учитывает,
		//   и тут не учитываем.
		// ИмяКолонкиДляСравнения = ВидСтрокиДляСравнения(ИмяКолонки);
		// ИскомаяКолонкаДляСравнения = ВидСтрокиДляСравнения(ИскомаяКолонка);
		Если СтрСравнить(ИмяКолонки, ИскомаяКолонка) = 0 Тогда
		
			Возврат НомерКолонки;
		
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

Функция ВидСтрокиДляСравнения(Текст)

	Возврат НРег(СокрЛП(Текст));

КонецФункции // ()

Функция СобратьСоответствие(НомерКолонки, ОписаниеТипа)

	Настройка = Новый Структура;
	Настройка.Вставить("Номер", НомерКолонки);
	Настройка.Вставить("ОписаниеТипа", ОписаниеТипа);
	
	Возврат Настройка;

КонецФункции // ()

Функция ОпределитьМенеджер(ОписаниеТипа)

	Если ОписаниеТипа.СодержитТип(Тип("Число")) Тогда
	
		Возврат Проверка_ПолученияЧисла;
	
	КонецЕсли;
	Если ОписаниеТипа.СодержитТип(Тип("Дата")) Тогда
	
		Возврат Проверка_ПолученияДаты;
	
	КонецЕсли;
	
	Возврат Проверка_ПолученияКодаСправочника;

КонецФункции // ()

Функция СобратьОписаниеПроверки(ОписаниеТипа, ЗначенияКолонки, НомерКолонки)

	Настройка = Новый Структура;
	Настройка.Вставить("ОписаниеТипа", ОписаниеТипа);
	Настройка.Вставить("ЗначенияКолонки", ЗначенияКолонки);
	Настройка.Вставить("НомерКолонки", НомерКолонки);
	
	МенеджерПроверки = ОпределитьМенеджер(ОписаниеТипа);
	Настройка.Вставить("Менеджер", МенеджерПроверки);
	
	Возврат Настройка;

КонецФункции // ()

Функция ПолучитьТекстПроверяемыхКолонок(Реестр, ПроверяемыеКолонки, НачалоДанных)

	Наборы = Новый Массив;
	Для каждого ПроверяемаяКолонка Из ПроверяемыеКолонки Цикл
	
		НомерКолонки = ПроверяемаяКолонка["Номер"];
		ЗначенияКолонки = ПолучитьЗначенияКолонки(
			Реестр,
			НомерКолонки,
			НачалоДанных
		);
		
		ОписаниеПроверки = СобратьОписаниеПроверки(
			ПроверяемаяКолонка["ОписаниеТипа"],
			ЗначенияКолонки,
			НомерКолонки
		);
		
		Наборы.Добавить(ОписаниеПроверки);
	
	КонецЦикла;
	
	Возврат Наборы;

КонецФункции // ()

Функция СгруппироватьКолонкиПоПроверкам(ТекстЗначенийКолонок)

	Настройки = Новый Массив;
	Группировка = Новый Соответствие;
	Для каждого ТекстЗначенийКолонки Из ТекстЗначенийКолонок Цикл
	
		Настройка = Новый Структура;
		Настройка.Вставить("ОписаниеТипа", ТекстЗначенийКолонки["ОписаниеТипа"]);
		Настройка.Вставить("НомерКолонки", ТекстЗначенийКолонки["НомерКолонки"]);
		Настройка.Вставить("Менеджер", ТекстЗначенийКолонки["Менеджер"]);
		Настройка.Вставить("ЗначенияЯчеек", ТекстЗначенийКолонки["ЗначенияКолонки"]);
		
		Если УправлениеДанными.ЭтоОписаниеПримитива(ТекстЗначенийКолонки["ОписаниеТипа"]) Тогда
		
			Настройки.Добавить(Настройка);
			Продолжить;
		
		КонецЕсли;
		
		ОписаниеТипа = ТекстЗначенийКолонки["ОписаниеТипа"];
		Колонки = Группировка.Получить(ОписаниеТипа);
		Если Колонки = Неопределено Тогда
		
			Колонки = Новый Массив;
		
		КонецЕсли;
		
		Колонки.Добавить(Настройка);
		Группировка.Вставить(ОписаниеТипа, Колонки);
	
	КонецЦикла;
	
	Для каждого ГруппаТипа Из Группировка Цикл
	
		Группа = ГруппаТипа.Значение;
		
		Настройка = Новый Структура;
		Настройка.Вставить("ОписаниеТипа", Группа[0]["ОписаниеТипа"]);
		Настройка.Вставить("Менеджер", Группа[0]["Менеджер"]);
		
		Колонки = Новый Массив;
		НомераКолонок = "";
		Для каждого ЗначенияКолонки Из Группа Цикл
		
			Колонки.Добавить(ЗначенияКолонки["ЗначенияЯчеек"]);
			НомераКолонок = НомераКолонок + " | " + ЗначенияКолонки["НомерКолонки"];
		
		КонецЦикла;
		Настройка.Вставить("ЗначенияЯчеек", Колонки);
		Настройка.Вставить("НомерКолонки", НомераКолонок);
		Настройки.Добавить(Настройка);
	
	КонецЦикла;
	
	Возврат Настройки;

КонецФункции // ()

Функция ПолучитьШапкуРеестра(Реестр, ПозицияШапки)

	Возврат Реестр.Область(ПозицияШапки, , ПозицияШапки);

КонецФункции // ()

Функция ПолучитьЗначенияКолонки(Реестр, НомерКолонки, НачалоДанных)

	Значения = Новый Массив;
	Для НомерСтроки = НачалоДанных По Реестр.ВысотаТаблицы Цикл
	
		Текст = УправлениеЗагрузкойСервер.ТекстЯчейки(
			Реестр,
			НомерСтроки,
			НомерКолонки
		);
		
		Значения.Добавить(Текст);
	
	КонецЦикла;
	
	Возврат Значения;

КонецФункции // ()

Функция ПроверитьЗначения(ПроверяемыеЗначения, НачалоДанных)

	ОписаниеОшибок = Новый Массив;
	
	Для каждого ПроверяемаяКолонка Из ПроверяемыеЗначения Цикл
	
		МенеджерПроверки = ПроверяемаяКолонка["Менеджер"];
		ПолученныеОшибки = МенеджерПроверки.Исполнить(
			ПроверяемаяКолонка,
			НачалоДанных
		);
		Если ПолученныеОшибки.Количество() = 0 Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		ОшибкиКолонки = СобратьОписаниеОшибки(
			ПолученныеОшибки,
			ПроверяемаяКолонка["НомерКолонки"]
		);
		
		ОписаниеОшибок.Добавить(ОшибкиКолонки);
	
	КонецЦикла;
	
	Возврат ОписаниеОшибок;

КонецФункции // ()

Функция СобратьОписаниеОшибки(ПолученныеОшибки, НомерКолонки)

	Данные = Новый Структура;
	Данные.Вставить("НомерКолонки", НомерКолонки);
	Данные.Вставить("Ошибки", ПолученныеОшибки);
	
	Возврат Данные;

КонецФункции // ()

#КонецОбласти
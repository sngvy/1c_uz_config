////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если УдалитьОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ВызватьИсключение НСтр("ru = 'Настройка параметров серверной ИБ доступна только в клиент-серверном режиме работы.'");
		Возврат;
	КонецЕсли;
		
	Элементы.ГруппаАдминистрирование.Доступность = ?(ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() > 0, Истина, Ложь);
	
	ПараметрыАдминистрирования = СоединенияИБ.ПолучитьПараметрыАдминистрированияИБ();
	
	ИдентификаторАдминистратораИБ = ПользователиИнформационнойБазы.НайтиПоИмени(
		ПараметрыАдминистрирования.ИмяАдминистратораИБ).УникальныйИдентификатор;
	АдминистраторИБ				= Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ИдентификаторАдминистратораИБ);
	ПарольАдминистратораИБ		= ПараметрыАдминистрирования.ПарольАдминистратораИБ;
	ИмяАдминистратораКластера	= ПараметрыАдминистрирования.ИмяАдминистратораКластера;
	ПарольАдминистратораКластера= ПараметрыАдминистрирования.ПарольАдминистратораКластера;
	ПортАгентаСервера			= ПараметрыАдминистрирования.ПортАгентаСервера;
	ПортКластераСерверов		= ПараметрыАдминистрирования.ПортКластераСерверов;
	
	НестандартныеПорты			= ПортКластераСерверов <> 0 ИЛИ ПортАгентаСервера <> 0;
	КластерТребуетАвторизации	= НЕ ПустаяСтрока(ИмяАдминистратораКластера);
		
	Элементы.ГруппаПорты.Доступность = НестандартныеПорты;
	Элементы.ГруппаАвторизацияКластера.Доступность = КластерТребуетАвторизации;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	Если ЗначениеЗаполнено(АдминистраторИБ) Тогда
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(АдминистраторИБ.ИдентификаторПользователяИБ);
		Если ПользовательИБ = Неопределено Тогда
			УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Указан пользователь, у которого нет доступа к информационной базе.'"),,
				"АдминистраторИБ",,Отказ);
			Возврат;
		КонецЕсли;
		Если НЕ ПравоДоступа("Администрирование", Метаданные, ПользовательИБ) Тогда
			УдалитьОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Указан пользователь без административных прав.'"),,
				"АдминистраторИБ",,Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура Записать(Команда)
	
	ОчиститьСообщения();
	ПараметрыПодключения = СохранитьПараметрыПодключения(АдминистраторИБ, ПарольАдминистратораИБ, КластерТребуетАвторизации,
		ИмяАдминистратораКластера, ПарольАдминистратораКластера, НестандартныеПорты,
		ПортАгентаСервера, ПортКластераСерверов);
	
	Если ПараметрыПодключения = Неопределено Тогда
		Возврат;
	КонецЕсли;							
	
	Оповестить("ОбновленыПараметрыПодключенияКИнформационнойБазе", ПараметрыПодключения);
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КластерТребуетАвторизацииПриИзменении(Элемент)
	
	УстановитьСостояниеПолей()
	
КонецПроцедуры

&НаКлиенте
Процедура НестандартныеПортыПриИзменении(Элемент)
	
	УстановитьСостояниеПолей();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура УстановитьСостояниеПолей()
	
	Элементы.ГруппаПорты.Доступность = НестандартныеПорты;
	Элементы.ГруппаАвторизацияКластера.Доступность = КластерТребуетАвторизации;
	
КонецПроцедуры

&НаСервере
Функция СохранитьПараметрыПодключения(АдминистраторИБ, ПарольАдминистратораИБ, КластерТребуетАвторизации,
	ИмяАдминистратораКластера, ПарольАдминистратораКластера, НестандартныеПорты,
	ПортАгентаСервера, ПортКластераСерверов)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат Неопределено;	
	КонецЕсли;
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(АдминистраторИБ.ИдентификаторПользователяИБ);
	Если ПользовательИБ <> Неопределено Тогда
		ИмяАдминистратораИБ = ПользовательИБ.Имя;
	Иначе	
		ИмяАдминистратораИБ = "";
	КонецЕсли;
	ПараметрыАдминистрирования = СоединенияИБ.ПолучитьПараметрыАдминистрированияИБ();
	
	ПараметрыАдминистрирования.ИмяАдминистратораИБ = ИмяАдминистратораИБ;
	ПараметрыАдминистрирования.ПарольАдминистратораИБ = ПарольАдминистратораИБ;
	
	Если КластерТребуетАвторизации Тогда
		ПараметрыАдминистрирования.ИмяАдминистратораКластера = ИмяАдминистратораКластера;
		ПараметрыАдминистрирования.ПарольАдминистратораКластера = ПарольАдминистратораКластера;
	Иначе	
		ПараметрыАдминистрирования.ИмяАдминистратораКластера = "";
		ПараметрыАдминистрирования.ПарольАдминистратораКластера = "";
	КонецЕсли;
	
	Если НестандартныеПорты Тогда
		ПараметрыАдминистрирования.ПортКластераСерверов = ПортКластераСерверов;
		ПараметрыАдминистрирования.ПортАгентаСервера = ПортАгентаСервера;
	Иначе	
		ПараметрыАдминистрирования.ПортКластераСерверов = 0;
		ПараметрыАдминистрирования.ПортАгентаСервера = 0;
	КонецЕсли;	
	
	Константы.ПараметрыАдминистрированияИБ.Установить(Новый ХранилищеЗначения(ПараметрыАдминистрирования));
	
	СоединенияИБ.ЗаписатьПараметрыАдминистрированияИБ(ПараметрыАдминистрирования);
	
	Возврат ПараметрыАдминистрирования;
	
КонецФункции



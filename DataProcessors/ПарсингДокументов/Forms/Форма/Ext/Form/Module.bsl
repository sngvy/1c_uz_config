&НаКлиенте
Перем ОтветПередЗакрытием;

&НаСервере
Процедура РаспознатьНаСервере()
	Объект.ТЧ.Очистить();
	ImageMagickConvert = Константы.ImageMagickConvert.Получить();
	Tesseract = Константы.Tesseract.Получить();		
	ПутьВременныеКаталоги = ПутьВременныеКаталогиНаСервере();
	УдаленыВременныеКаталоги = УдалитьВременныеКаталогиПередВыполнениемНаСервере(ПутьВременныеКаталоги);
	ВременныеКаталоги = СоздатьВременныеКаталогиНаСервере(ПутьВременныеКаталоги);
	ПроверкаНаДубли = ПроверкаНаДублиНаСервере();
	Если УдаленыВременныеКаталоги И ЗначениеЗаполнено(Настройка) И ПроверкаНаДубли И ВременныеКаталоги <> Неопределено 
		И ЗначениеЗаполнено(ImageMagickConvert) И ЗначениеЗаполнено(Tesseract) Тогда
		сНастройка = ПолучитьНастройкиНаСервере(Настройка); 
		ЗаполитьТчИКонвертироватьВордВПдфНаСервере(ВременныеКаталоги, сНастройка);
		СоздатьFilesToJpegНаСервере(ВременныеКаталоги, ImageMagickConvert, сНастройка);
		СоздатьJpegToTxtНаСервере(ВременныеКаталоги, Tesseract);
		ОбходТХТНаСервере(ВременныеКаталоги, сНастройка);
			Если сНастройка.СжиматьИзображаниеДляПросмотра Тогда
			СоздатьДляПросмотраFilesToJPEGНаСервере(ВременныеКаталоги, ImageMagickConvert, сНастройка);
			КаталогПросмотра = ВременныеКаталоги.Получить("TempJpeg");
		Иначе
			КаталогПросмотра = ВременныеКаталоги.Получить("jpeg");	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РаспознатьНаКлиенте()
	Объект.ТЧ.Очистить();
	сНастройка = ПолучитьНастройкиНаСервере(Настройка); 
	ImageMagickConvert = сНастройка.ImageMagickConvert;
	Tesseract = сНастройка.Tesseract;		
	ПутьВременныеКаталоги = ПутьВременныеКаталогиНаСервере();
	УдаленыВременныеКаталоги = УдалитьВременныеКаталогиПередВыполнениемНаКлиенте(ПутьВременныеКаталоги);
	ВременныеКаталоги = СоздатьВременныеКаталогиНаКлиенте(ПутьВременныеКаталоги);
	Если УдаленыВременныеКаталоги И ЗначениеЗаполнено(Настройка) И ВременныеКаталоги <> Неопределено 
		И ЗначениеЗаполнено(ImageMagickConvert) И ЗначениеЗаполнено(Tesseract) Тогда
		ЗаполитьТчИКонвертироватьВордВПдфНаКлиенте(ВременныеКаталоги, сНастройка);
		СоздатьFilesToJpegНаКлиенте(ВременныеКаталоги, ImageMagickConvert, сНастройка);
		СоздатьJpegToTxtНаКлиенте(ВременныеКаталоги, Tesseract);
		ОбходТХТНаКлиенте(ВременныеКаталоги, сНастройка);
			Если сНастройка.СжиматьИзображаниеДляПросмотра Тогда
			СоздатьДляПросмотраFilesToJPEGНаКлиенте(ВременныеКаталоги, ImageMagickConvert, сНастройка);
			КаталогПросмотра = ВременныеКаталоги.Получить("TempJpeg");
		Иначе
			КаталогПросмотра = ВременныеКаталоги.Получить("jpeg");	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция РеквизитыНастройки()
	мРеквизитов = Новый Массив();	
	Для Каждого Реквизит Из Настройка.Метаданные().Реквизиты Цикл
		мРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	Возврат мРеквизитов;
КонецФункции // РеквизитыНастройки()

&НаСервере
Функция ПоискДО(мСлова, мДаты, Контрагент = Неопределено, сНастройка)
	
	Если ЗначениеЗаполнено(сНастройка.ДОСодержит) Тогда
		мСловаПоиска = Новый Массив;
		Счетчик = мСлова.Количество() - 1;     
		Пока Счетчик >= 0 Цикл
			Если Найти(мСлова[Счетчик],сНастройка.ДОСодержит) Тогда
				мСловаПоиска.Добавить(мСлова[Счетчик]);	
			КонецЕсли;
			Счетчик = Счетчик - 1;
		КонецЦикла;	 
	Иначе
		мСловаПоиска = мСлова;	
	КонецЕсли;	
	
	ДопРеквДата = сНастройка.ДОДата;
	ДОДатаДМ = сНастройка.ДОДатаДМ;
	ДООдин = сНастройка.ДООдин;
	ДОЧерезКонтрагента = сНастройка.ДОЧерезКонтрагента;
	
	Если ДОЧерезКонтрагента И ЗначениеЗаполнено(Контрагент) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДолговыеОбязательства.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
		|ГДЕ
		|	ДолговыеОбязательства.Должник = &Контрагент
		|	И ДолговыеОбязательства.Наименование В(&Наименование)";
		
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("Наименование", мСловаПоиска);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка;	
		КонецЦикла;		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДолговыеОбязательства.Ссылка КАК Ссылка,
	|	ДоговорМикрозайма.ДатаДоговора КАК ДатаДоговора
	|ИЗ
	|	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорМикрозайма КАК ДоговорМикрозайма
	|		ПО ДолговыеОбязательства.Ссылка = ДоговорМикрозайма.Займ
	|ГДЕ
	|	ДолговыеОбязательства.Наименование В(&Наименование)";
	
	Запрос.УстановитьПараметр("Наименование", мСловаПоиска);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДО = Выборка.Ссылка;
		ДатаДоговора = Выборка.ДатаДоговора;
				
		Если ЗначениеЗаполнено(ДопРеквДата) Тогда	
			ДатаДО = ОбъектыСервер.ПолучитьЗначениеСвойства(ДО,ДопРеквДата.Код);
			Для Каждого стрДата Из мДаты Цикл
				Если стрДата = ДатаДО Тогда
					Возврат ДО;		
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
				
		Если ДОДатаДМ Тогда	
			Для Каждого стрДата Из мДаты Цикл
				Если стрДата = ДатаДоговора Тогда
					Возврат ДО;		
				КонецЕсли;
			КонецЦикла;;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДопРеквДата) И НЕ ДОДатаДМ Тогда
			Возврат ДО;	
		КонецЕсли;
		
		Если ДООдин И Выборка.Количество() = 1 Тогда
			Возврат ДО;	
		КонецЕсли;

	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

&НаСервере
Функция ПоискКА(мСлова, мДаты, сНастройка)
	ДопРеквДата = сНастройка.КАДатаРождения;
	ДопИннСнилс = сНастройка.КаИннСнилс;

	Условия = Новый Структура;
	
	Условия.Вставить("мСлова", мСлова);
	Условия.Вставить("мДаты", мДаты);
	Условия.Вставить("КАОдин", сНастройка.КАОдин);
	Условия.Вставить("ДопРеквДата", ДопРеквДата);
	Условия.Вставить("ДопИннСнилс", ДопИннСнилс);
	
	Для Индекс = 0 по мСлова.ВГраница()-2 Цикл
		
		//фамилия от 3 симвалов , ИО 1 симвал
		Если СтрДлина(мСлова[Индекс]) > 3 И СтрДлина(мСлова[Индекс+1]) = 1 И СтрДлина(мСлова[Индекс+2]) = 1 Тогда
		
			ЭтоПолноеФИО = Ложь;
			ФИО = мСлова[Индекс];
			Инициалы = мСлова[Индекс+1] + " " + мСлова[Индекс+2];
			
			Условия.Вставить("ЭтоПолноеФИО", ЭтоПолноеФИО);
			
			Контрагент = РегистрыСведений.СклонениеФИО.ПоискКонтрагентаПоФИО(ФИО, Инициалы, Условия);
			Если ЗначениеЗаполнено(Контрагент) Тогда
			
				Возврат Контрагент;
			
			КонецЕсли;
			
		КонецЕсли;
		
		//фамилия от 3 симвалов , ИО 2 симвала слитно
		Если СтрДлина(мСлова[Индекс]) > 3 И СтрДлина(мСлова[Индекс + 1]) = 2 Тогда
		
			ЭтоПолноеФИО = Ложь;
			ФИО = мСлова[Индекс];
			
			ИО = мСлова[Индекс + 1];
			Инициалы = Сред(ИО, 1, 1) + " " + Сред(ИО, 2, 1);
			
			Условия.Вставить("ЭтоПолноеФИО", ЭтоПолноеФИО);
			
			Контрагент = РегистрыСведений.СклонениеФИО.ПоискКонтрагентаПоФИО(ФИО, Инициалы, Условия);
			Если ЗначениеЗаполнено(Контрагент) Тогда
			
				Возврат Контрагент;
			
			КонецЕсли;
			
		КонецЕсли;
		
		//фамилия от 3 симвалов
		Если СтрДлина(мСлова[Индекс]) > 3 Тогда
			
			ЭтоПолноеФИО = Истина;
			ФИО = мСлова[Индекс] + " " + мСлова[Индекс+1] + " " + мСлова[Индекс+2];
			
			Условия.Вставить("ЭтоПолноеФИО", ЭтоПолноеФИО);
			
			Контрагент = РегистрыСведений.СклонениеФИО.ПоискКонтрагентаПоФИО(ФИО, Инициалы, Условия);
			Если ЗначениеЗаполнено(Контрагент) Тогда
			
				Возврат Контрагент;
			
			КонецЕсли;

		КонецЕсли;
		

		

		
		//Запрос = Новый Запрос;
		//Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	СклонениеФИО.Контрагент КАК Контрагент
		//|ИЗ
		//|	РегистрСведений.СклонениеФИО КАК СклонениеФИО
		//|ГДЕ
		//|	ВЫБОР
		//|			КОГДА &ЭтоПолноеФИО = ИСТИНА
		//|				ТОГДА СклонениеФИО.Именительный = &ФИО
		//|						ИЛИ СклонениеФИО.Родительный = &ФИО
		//|						ИЛИ СклонениеФИО.Творительный = &ФИО
		//|						ИЛИ СклонениеФИО.Предолжный = &ФИО
		//|						ИЛИ СклонениеФИО.Дательный = &ФИО
		//|			ИНАЧЕ СклонениеФИО.Именительный ПОДОБНО ""%"" + &ФИО + ""%""
		//|						И СклонениеФИО.Инициалы = &Инициалы
		//|					ИЛИ СклонениеФИО.Родительный ПОДОБНО ""%"" + &ФИО + ""%""
		//|						И СклонениеФИО.Инициалы = &Инициалы
		//|					ИЛИ СклонениеФИО.Творительный ПОДОБНО ""%"" + &ФИО + ""%""
		//|						И СклонениеФИО.Инициалы = &Инициалы
		//|					ИЛИ СклонениеФИО.Предолжный ПОДОБНО ""%"" + &ФИО + ""%""
		//|						И СклонениеФИО.Инициалы = &Инициалы
		//|					ИЛИ СклонениеФИО.Дательный ПОДОБНО ""%"" + &ФИО + ""%""
		//|						И СклонениеФИО.Инициалы = &Инициалы
		//|		КОНЕЦ";
		//
		//Запрос.УстановитьПараметр("ЭтоПолноеФИО", ЭтоПолноеФИО);
		//Запрос.УстановитьПараметр("ФИО", ФИО);
		//Запрос.УстановитьПараметр("Инициалы", Инициалы);
		//
		//Выборка = Запрос.Выполнить().Выбрать();
		//
		//Пока Выборка.Следующий() Цикл
		//	Контрагент = Выборка.Контрагент;
		//	Если сНастройка.КАОдин И Выборка.Количество() = 1 Тогда
		//		Возврат Контрагент;	
		//	КонецЕсли;
		//	
		//	Если ЗначениеЗаполнено(ДопРеквДата) Тогда
		//		ДатаРождения = ОбъектыСервер.ПолучитьЗначениеСвойства(Контрагент,ДопРеквДата.Код);	
		//		Для Каждого Стр Из мДаты Цикл
		//			Если ДатаРождения = Стр Тогда
		//				Возврат Контрагент;	
		//			КонецЕсли;
		//		КонецЦикла;
		//	КонецЕсли;
		//	
		//	Если ЗначениеЗаполнено(ДопИннСнилс) Тогда
		//		ИннСнилс = ОбъектыСервер.ПолучитьЗначениеСвойства(Контрагент,ДопИннСнилс.Код);	
		//		Для Каждого Стр Из мСлова Цикл
		//			Если ИннСнилс = Стр Тогда
		//				Возврат Контрагент;	
		//			КонецЕсли;
		//		КонецЦикла;
		//	КонецЕсли;
		//	
		//	Если НЕ ЗначениеЗаполнено(ДопРеквДата) И НЕ ЗначениеЗаполнено(ДопИннСнилс) Тогда
		//		Возврат Контрагент;			
		//	КонецЕсли;
		//КонецЦикла;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

&НаСервере
Функция ПоискИД(Контрагент, мСлова, мДаты, сНастройка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсполнительныеДокументы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ИсполнительныеДокументы КАК ИсполнительныеДокументы
		|ГДЕ
		|	ИсполнительныеДокументы.Должник = &Контрагент
		|	И ИсполнительныеДокументы.ДатаИД В(&ДатаИД)
		|	И ИсполнительныеДокументы.НомерДела В(&НомерДела)";
	
	Запрос.УстановитьПараметр("ДатаИД", мДаты);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("НомерДела", мСлова);
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СудебноеДелоОтветчики.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СудебноеДело.Ответчики КАК СудебноеДелоОтветчики
		|ГДЕ
		|	СудебноеДелоОтветчики.Значение = &Контрагент
		|	И СудебноеДелоОтветчики.Ссылка.НомерДела В(&НомерДела)
		|	И СудебноеДелоОтветчики.Ссылка.ДатаРешения В(&ДатаРешения)";
	
	Запрос.УстановитьПараметр("ДатаРешения", мДаты);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("НомерДела", мСлова);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции // ПоискИД()

&НаСервере
Функция ПоискИП(Контрагент, мСлова, мДаты, сНастройка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ФССП_ИсполнительноеПроизводство.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФССП_ИсполнительноеПроизводство КАК ФССП_ИсполнительноеПроизводство
		|ГДЕ
		|	ФССП_ИсполнительноеПроизводство.Наименование В(&Наименование)
		|	И ФССП_ИсполнительноеПроизводство.Владелец = &Контрагент
		|	И ФССП_ИсполнительноеПроизводство.ДатаВозбуждения В(&ДатаВозбуждения)";
	
	Запрос.УстановитьПараметр("ДатаВозбуждения", мДаты);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Наименование", мСлова);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции // ПоискИП()

&НаСервере
Функция ПроверкаНаДублиНаСервере()
	ТЗДубли = Новый ТаблицаЗначений;
	ТЗДубли.Колонки.Добавить("ИмяБезРасширения",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024)));
	ТЗДубли.Колонки.Добавить("ПолноеИмя",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024)));
	Файлы = НайтиФайлы(КаталогДокументов,"*.*",Ложь);
	Для Каждого Файл Из Файлы Цикл
		СтрокаТЗ = ТЗДубли.Добавить();
		ИмяБезРасширения = СтрЗаменить(Файл.ИмяБезРасширения," ","");
		СтрокаТЗ.ИмяБезРасширения = СтрЗаменить(ИмяБезРасширения,"-","");	
		СтрокаТЗ.ПолноеИмя = Файл.ПолноеИмя;	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗДубли.ИмяБезРасширения КАК ИмяБезРасширения,
	|	ТЗДубли.ПолноеИмя КАК ПолноеИмя
	|ПОМЕСТИТЬ ВТ_ТЗДубли
	|ИЗ
	|	&ТЗДубли КАК ТЗДубли
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЗДубли.ИмяБезРасширения КАК ИмяБезРасширения,
	|	КОЛИЧЕСТВО(ВТ_ТЗДубли.ИмяБезРасширения) КАК ИмяБезРасширения1,
	|	ВТ_ТЗДубли1.ПолноеИмя КАК ПолноеИмя
	|ИЗ
	|	ВТ_ТЗДубли КАК ВТ_ТЗДубли
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТЗДубли КАК ВТ_ТЗДубли1
	|		ПО ВТ_ТЗДубли.ИмяБезРасширения = ВТ_ТЗДубли1.ИмяБезРасширения
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТЗДубли.ИмяБезРасширения,
	|	ВТ_ТЗДубли1.ПолноеИмя
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ВТ_ТЗДубли.ИмяБезРасширения) > 1";
	
	Запрос.УстановитьПараметр("ТЗДубли",ТЗДубли);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = Объект.ТЧ.Добавить();
		СтрокаТЧ.ОригиналСкана = Выборка.ПолноеИмя;
		СтрокаТЧ.Ошибка = Истина;
	КонецЦикла;
	
	Если Объект.ТЧ.Количество() = 0 Тогда
		Возврат Истина;
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Присутсвуют дубли файлов по имени без учета расширения файла или дубли файлов без учета пробелов в имени. Необходимо исправить имена файлов выделенные красным.";
		Сообщение.Сообщить();
		Возврат Ложь
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура Распознать(Команда)

	Если Не УправлениеДоступами.ЕстьДоступНаПарсинг() Тогда
	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Нужны права на парсинг!";
		Сообщение.Сообщить();
		Возврат;
	
	КонецЕсли;
	
	ОчиститьСообщения();  
	ВыполнятьНа = ВыполнятьНа();
	Если ВыполнятьНа = "2" Тогда
		РаспознатьНаКлиенте();
	Иначе
		РаспознатьНаСервере();
	КонецЕсли;
	ОформитьТЧНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОформитьТЧНаСервере()

	РеквизитыОформления = Новый ТаблицаЗначений;
	РеквизитыОформления.Колонки.Добавить("ЛевоеЗначение");
	РеквизитыОформления.Колонки.Добавить("ПравоеЗначение");
	
	Если Элементы.ТЧКонтрагент.Видимость Тогда
		Стр = РеквизитыОформления.Добавить();
		Стр.ЛевоеЗначение = Элементы.ТЧКонтрагент.ПутьКДанным;
		Стр.ПравоеЗначение = Справочники.Контрагенты.ПустаяСсылка();	
	КонецЕсли;
	
	Если Элементы.ТЧДолговоеОбязательство.Видимость Тогда
		Стр = РеквизитыОформления.Добавить();
		Стр.ЛевоеЗначение = Элементы.ТЧКонтрагент.ПутьКДанным;
		Стр.ПравоеЗначение = Справочники.ДолговыеОбязательства.ПустаяСсылка();	
	КонецЕсли;
	
	Если Элементы.ТЧИсполнительноеПроизводство.Видимость Тогда
		Стр = РеквизитыОформления.Добавить();
		Стр.ЛевоеЗначение = Элементы.ТЧКонтрагент.ПутьКДанным;
		Стр.ПравоеЗначение = Справочники.ФССП_ИсполнительноеПроизводство.ПустаяСсылка();		
	КонецЕсли;
	
	Если Элементы.ТЧИсполнительныйДокументу.Видимость Тогда
		Стр = РеквизитыОформления.Добавить();
		Стр.ЛевоеЗначение = Элементы.ТЧКонтрагент.ПутьКДанным;
		Стр.ПравоеЗначение = Справочники.ИсполнительныеДокументы.ПустаяСсылка();	
	КонецЕсли;
	
	Для Каждого рОформления Из РеквизитыОформления Цикл
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Использование = Истина;
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",  WebЦвета.БледноКрасноФиолетовый);		
		ГруппаУсловия = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаУсловия.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ЭлементУсловия = ГруппаУсловия.Элементы.Добавить(     Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементУсловия.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(рОформления.ЛевоеЗначение);
		ЭлементУсловия.ПравоеЗначение = рОформления.ПравоеЗначение; 
		ЭлементУсловия.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементУсловия.Использование  = Истина;		
		ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТЧ");
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция СоздатьВременныеКаталогиНаСервере(ПутьВременныеКаталоги)
	Попытка		
		Cmd = Новый Файл(ПутьВременныеКаталоги.Получить("Cmd"));
		Если Cmd.Существует() = Ложь Тогда
			СоздатьКаталог(Cmd.ПолноеИмя);
		КонецЕсли;
		ПутьCmd = Cmd.ПолноеИмя + "\";
		
		WordToPDF = Новый Файл(ПутьВременныеКаталоги.Получить("WordToPDF"));
		Если WordToPDF.Существует() = Ложь Тогда
			СоздатьКаталог(WordToPDF.ПолноеИмя);
		КонецЕсли;
		ПутьWordToPDF = WordToPDF.ПолноеИмя + "\";
		
		jpeg = Новый Файл(ПутьВременныеКаталоги.Получить("jpeg"));
		Если jpeg.Существует() = Ложь Тогда
			СоздатьКаталог(jpeg.ПолноеИмя);
		КонецЕсли;
		Путьjpeg = jpeg.ПолноеИмя + "\";
		КлиентПутьjpeg = Путьjpeg;
		
		TXT = Новый Файл(ПутьВременныеКаталоги.Получить("TXT"));
		Если TXT.Существует() = Ложь Тогда
			СоздатьКаталог(TXT.ПолноеИмя);
		КонецЕсли;		
		ПутьTXT = TXT.ПолноеИмя + "\";
		
		TempJpeg = Новый Файл(ПутьВременныеКаталоги.Получить("TempJpeg"));
		Если TempJpeg.Существует() = Ложь Тогда
			СоздатьКаталог(TempJpeg.ПолноеИмя);
		КонецЕсли;
		ПутьTempJpeg = TempJpeg.ПолноеИмя + "\";
	
		ВременныеКаталоги = Новый Соответствие;
		ВременныеКаталоги.Вставить("КаталогДокументов",КаталогДокументов);
		ВременныеКаталоги.Вставить("Cmd",ПутьCmd);
		ВременныеКаталоги.Вставить("WordToPDF",ПутьWordToPDF);
		ВременныеКаталоги.Вставить("jpeg",Путьjpeg);
		ВременныеКаталоги.Вставить("TXT",ПутьTXT);
		ВременныеКаталоги.Вставить("TempJpeg",ПутьTempJpeg);
		Возврат ВременныеКаталоги;
	Исключение
		Ошибка = ОписаниеОшибки();
		ЗаписатьВЖурналРегистрации(Ошибка);
		Возврат Неопределено;
	КонецПопытки;
КонецФункции // СоздатьВременныеКаталогиНаСервере()

&НаКлиенте
Функция СоздатьВременныеКаталогиНаКлиенте(ПутьВременныеКаталоги)
	Попытка		
		Cmd = Новый Файл(ПутьВременныеКаталоги.Получить("Cmd"));
		Если Cmd.Существует() = Ложь Тогда
			СоздатьКаталог(Cmd.ПолноеИмя);
		КонецЕсли;
		ПутьCmd = Cmd.ПолноеИмя + "\";
		
		WordToPDF = Новый Файл(ПутьВременныеКаталоги.Получить("WordToPDF"));
		Если WordToPDF.Существует() = Ложь Тогда
			СоздатьКаталог(WordToPDF.ПолноеИмя);
		КонецЕсли;
		ПутьWordToPDF = WordToPDF.ПолноеИмя + "\";
		
		jpeg = Новый Файл(ПутьВременныеКаталоги.Получить("jpeg"));
		Если jpeg.Существует() = Ложь Тогда
			СоздатьКаталог(jpeg.ПолноеИмя);
		КонецЕсли;
		Путьjpeg = jpeg.ПолноеИмя + "\";
		КлиентПутьjpeg = Путьjpeg;
		
		TXT = Новый Файл(ПутьВременныеКаталоги.Получить("TXT"));
		Если TXT.Существует() = Ложь Тогда
			СоздатьКаталог(TXT.ПолноеИмя);
		КонецЕсли;		
		ПутьTXT = TXT.ПолноеИмя + "\";
		
		TempJpeg = Новый Файл(ПутьВременныеКаталоги.Получить("TempJpeg"));
		Если TempJpeg.Существует() = Ложь Тогда
			СоздатьКаталог(TempJpeg.ПолноеИмя);
		КонецЕсли;
		ПутьTempJpeg = TempJpeg.ПолноеИмя + "\";
	
		ВременныеКаталоги = Новый Соответствие;
		ВременныеКаталоги.Вставить("КаталогДокументов",КаталогДокументов);
		ВременныеКаталоги.Вставить("Cmd",ПутьCmd);
		ВременныеКаталоги.Вставить("WordToPDF",ПутьWordToPDF);
		ВременныеКаталоги.Вставить("jpeg",Путьjpeg);
		ВременныеКаталоги.Вставить("TXT",ПутьTXT);
		ВременныеКаталоги.Вставить("TempJpeg",ПутьTempJpeg);
		Возврат ВременныеКаталоги;
	Исключение
		Ошибка = ОписаниеОшибки();
		ЗаписатьВЖурналРегистрации(Ошибка);
		Возврат Неопределено;
	КонецПопытки;
КонецФункции // СоздатьВременныеКаталогиНаСервере()

&НаСервере
Функция ПутьВременныеКаталогиНаСервере()
	ПутьCmd = КаталогДокументов + "\Cmd\";	
	ПутьWordToPDF = КаталогДокументов + "\WordToPDF\";		
	Путьjpeg = КаталогДокументов + "\jpeg\";
	КлиентПутьjpeg = Путьjpeg;		
	ПутьTXT = КаталогДокументов + "\TXT\";
	ПутьTempJpeg = КаталогДокументов + "\TempJpeg\";
	
	ВременныеКаталоги = Новый Соответствие;
	ВременныеКаталоги.Вставить("КаталогДокументов",КаталогДокументов);
	ВременныеКаталоги.Вставить("Cmd",ПутьCmd);
	ВременныеКаталоги.Вставить("WordToPDF",ПутьWordToPDF);
	ВременныеКаталоги.Вставить("jpeg",Путьjpeg);
	ВременныеКаталоги.Вставить("TXT",ПутьTXT);
	ВременныеКаталоги.Вставить("TempJpeg",ПутьTempJpeg);
	Возврат ВременныеКаталоги;	
КонецФункции // ПутьВременныеКаталогиНаСервере()

&НаСервере
Процедура УдалитьВременныеКаталогиНаСервере(ВременныеКаталоги)
	Попытка
		WordToPDF = ВременныеКаталоги.Получить("WordToPDF");
		ФайлWordToPDF = Новый Файл(WordToPDF);
		Если ФайлWordToPDF.Существует() Тогда
			УдалитьФайлы(WordToPDF);
		КонецЕсли;
		
		Cmd = ВременныеКаталоги.Получить("Cmd");
		ФайлCmd = Новый Файл(Cmd);
		Если ФайлCmd.Существует() Тогда
			УдалитьФайлы(Cmd);
		КонецЕсли;
		
		jpeg = ВременныеКаталоги.Получить("jpeg");
		Файлjpeg = Новый Файл(jpeg);
		Если Файлjpeg.Существует() Тогда
			УдалитьФайлы(jpeg);
		КонецЕсли;
		
		TXT = ВременныеКаталоги.Получить("TXT");
		ФайлTXT = Новый Файл(TXT);
		Если ФайлTXT.Существует() Тогда
			УдалитьФайлы(TXT);
		КонецЕсли;
		
		TempJpeg = ВременныеКаталоги.Получить("TempJpeg");
		ФайлTXT = Новый Файл(TempJpeg);
		Если ФайлTXT.Существует() Тогда
			УдалитьФайлы(TempJpeg);
		КонецЕсли;
	Исключение
		Ошибка = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("НедопустимаяОперация", УровеньЖурналаРегистрации.Ошибка,,,Ошибка);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Ошибка;
		Сообщение.Сообщить();
	КонецПопытки;
КонецПроцедуры

&НаСервере
Функция УдалитьВременныеКаталогиПередВыполнениемНаСервере(ВременныеКаталоги)
	Попытка
		WordToPDF = ВременныеКаталоги.Получить("WordToPDF");
		ФайлWordToPDF = Новый Файл(WordToPDF);
		Если ФайлWordToPDF.Существует() Тогда
			УдалитьФайлы(WordToPDF);
		КонецЕсли;
		
		Cmd = ВременныеКаталоги.Получить("Cmd");
		ФайлCmd = Новый Файл(Cmd);
		Если ФайлCmd.Существует() Тогда
			УдалитьФайлы(Cmd);
		КонецЕсли;
		
		jpeg = ВременныеКаталоги.Получить("jpeg");
		Файлjpeg = Новый Файл(jpeg);
		Если Файлjpeg.Существует() Тогда
			УдалитьФайлы(jpeg);
		КонецЕсли;
		
		TXT = ВременныеКаталоги.Получить("TXT");
		ФайлTXT = Новый Файл(TXT);
		Если ФайлTXT.Существует() Тогда
			УдалитьФайлы(TXT);
		КонецЕсли;
		
		Возврат Истина;
	Исключение
		Ошибка = ОписаниеОшибки();
		ЗаписатьВЖурналРегистрации(Ошибка);
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаКлиенте
Функция УдалитьВременныеКаталогиПередВыполнениемНаКлиенте(ВременныеКаталоги)
	Попытка
		WordToPDF = ВременныеКаталоги.Получить("WordToPDF");
		ФайлWordToPDF = Новый Файл(WordToPDF);
		Если ФайлWordToPDF.Существует() Тогда
			УдалитьФайлы(WordToPDF);
		КонецЕсли;
		
		Cmd = ВременныеКаталоги.Получить("Cmd");
		ФайлCmd = Новый Файл(Cmd);
		Если ФайлCmd.Существует() Тогда
			УдалитьФайлы(Cmd);
		КонецЕсли;
		
		jpeg = ВременныеКаталоги.Получить("jpeg");
		Файлjpeg = Новый Файл(jpeg);
		Если Файлjpeg.Существует() Тогда
			УдалитьФайлы(jpeg);
		КонецЕсли;
		
		TXT = ВременныеКаталоги.Получить("TXT");
		ФайлTXT = Новый Файл(TXT);
		Если ФайлTXT.Существует() Тогда
			УдалитьФайлы(TXT);
		КонецЕсли;
		
		Возврат Истина;
	Исключение
		Ошибка = ОписаниеОшибки();
		ЗаписатьВЖурналРегистрации(Ошибка);
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаСервереБезКонтекста
Функция МассивРасширенийWord()

	мДокТипов = Новый Массив;
	мДокТипов.Добавить(".doc");
	мДокТипов.Добавить(".docx");
	мДокТипов.Добавить(".odt");
	мДокТипов.Добавить(".rtf");
	Возврат мДокТипов;

КонецФункции

&НаСервере
Процедура ЗаполитьТчИКонвертироватьВордВПдфНаСервере(ВременныеКаталоги, сНастройка)
	мДокТипов = МассивРасширенийWord();
	Файлы = НайтиФайлы(КаталогДокументов,"*.*",сНастройка.ВключатьВложенныеКаталоги);
	Для Каждого Файл Из Файлы Цикл
		Если Файл.ПолучитьНевидимость() ИЛИ ВременныеКаталоги.Получить(Файл.Имя) <> Неопределено Тогда
			Продолжить;
		ИначеЕсли ЗначениеЗаполнено(мДокТипов.Найти(Файл.Расширение)) Тогда
			СтрокаТЧ = Объект.ТЧ.Добавить();
			Наименование = Файл.ИмяБезРасширения;
			ФайлКопия = ВременныеКаталоги.Получить("WordToPDF") + Наименование + ".pdf";
			Попытка
				Если сНастройка.ТипыЭлДок = Перечисления.ТипыЭлДок.Word Тогда
					MSWordApp = Новый COMОбъект("Word.Application");
					MSWordApp.Visible = False;                     
					MSWordApp.Documents.Open(Файл.ПолноеИмя);				
					WordDocument = MSWordApp.Application.Documents(1);
					WordDocument.Activate();
					WordDocument.SaveAs(ФайлКопия, 17);				
					MSWordApp.Application.Quit();
					СтрокаТЧ.ОригиналСкана = Файл.ПолноеИмя;
					СтрокаТЧ.СокрОригиналСкана = ФайлКопия;
					СтрокаТЧ.Наименование = Наименование;
					СтрокаТЧ.Расширение = ".pdf"; 
				ИначеЕсли сНастройка.ТипыЭлДок = Перечисления.ТипыЭлДок.OpenOffice Тогда
					ServiceManager    = Новый COMОбъект("com.sun.star.ServiceManager");       
					
					Скрипт             = Новый COMОбъект("MSScriptControl.ScriptControl");
					Скрипт.language    = "javascript";
					Скрипт.AddObject("OpenOffice", ServiceManager);
					
					Скрипт.eval("Массив=new Array()");       
					Массив = Скрипт.eval("Массив");   
					Скрипт.eval("Массив[0] = OpenOffice.Bridge_GetStruct('com.sun.star.beans.PropertyValue')");
					Скрипт.eval("Массив[0].Name     = 'Hidden'");
					Скрипт.eval("Массив[0].Value = true");
					
					Скрипт.AddCode("function SetItem(ind,val){Массив[ind]=val}");       
					Скрипт.AddObject("ServiceManager",ServiceManager);
					Desktop = ServiceManager.createInstance("com.sun.star.frame.Desktop");       
					Document = Desktop.LoadComponentFromURL(ПреобразоватьВURL(Файл.ПолноеИмя), "_blank", 0, Массив);
					
					Скрипт.eval("Массив2=new Array()");       
					Массив2 = Скрипт.eval("Массив2");       
					Скрипт.eval("Массив2[0] = OpenOffice.Bridge_GetStruct('com.sun.star.beans.PropertyValue')");       
					Скрипт.eval("Массив2[0].Name  = 'FilterName'");
					Скрипт.eval("Массив2[0].Value = 'writer_pdf_Export'");
					
					ПолноеИмяФайлаPDF = ПреобразоватьВURL(ФайлКопия); 
					Document.storeToURL(ПолноеИмяФайлаPDF, Массив2);
					Document.close(-1);        //Закрыть документ
					
					//Контрольная очистка переменных
					Document    = Неопределено;
					Desktop     = Неопределено;	
					СтрокаТЧ.ОригиналСкана = Файл.ПолноеИмя;
					СтрокаТЧ.СокрОригиналСкана = ФайлКопия;
					СтрокаТЧ.Наименование = Наименование;
					СтрокаТЧ.Расширение = ".pdf"; 
				Иначе
					СтрокаТЧ.ОригиналСкана = Файл.ПолноеИмя;
					СтрокаТЧ.Ошибка = Истина;
					СтрокаТЧ.ТекстОшибки = "не заполнена настройка Чтение текстовых файлов"; 
					Ошибка = ОписаниеОшибки();
					ЗаписатьВЖурналРегистрации(Ошибка);
				КонецЕсли;
			Исключение
				СтрокаТЧ.ОригиналСкана = Файл.ПолноеИмя;
				СтрокаТЧ.Ошибка = Истина;
				СтрокаТЧ.ТекстОшибки = "не удалось преобразовать документ в pdf или сохранить во временный каталог, возможно отсутствует программа Word или OpenOffice"; 
				Ошибка = ОписаниеОшибки();
				ЗаписатьВЖурналРегистрации(Ошибка);
			КонецПопытки;
		ИначеЕсли ЗначениеЗаполнено(Файл.Расширение) Тогда
			СтрокаТЧ = Объект.ТЧ.Добавить();
			СтрокаТЧ.ОригиналСкана = Файл.ПолноеИмя;
			СтрокаТЧ.СокрОригиналСкана = Файл.ПолноеИмя;
			СтрокаТЧ.Наименование = Файл.ИмяБезРасширения;
			СтрокаТЧ.Расширение = Файл.Расширение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполитьТчИКонвертироватьВордВПдфНаКлиенте(ВременныеКаталоги, сНастройка)
	мДокТипов = МассивРасширенийWord();
	Файлы = НайтиФайлы(КаталогДокументов,"*.*",сНастройка.ВключатьВложенныеКаталоги);
	Для Каждого Файл Из Файлы Цикл
		Если Файл.ПолучитьНевидимость() ИЛИ ВременныеКаталоги.Получить(Файл.Имя) <> Неопределено Тогда
			Продолжить;
		ИначеЕсли ЗначениеЗаполнено(мДокТипов.Найти(Файл.Расширение)) Тогда
			СтрокаТЧ = Объект.ТЧ.Добавить();
			Наименование = Файл.ИмяБезРасширения;
			ФайлКопия = ВременныеКаталоги.Получить("WordToPDF") + Наименование + ".pdf";
			Попытка
				Если сНастройка.ТипыЭлДок = ПредопределенноеЗначение("Перечисление.ТипыЭлДок.Word") Тогда
					MSWordApp = Новый COMОбъект("Word.Application");
					MSWordApp.Visible = False;                     
					MSWordApp.Documents.Open(Файл.ПолноеИмя);				
					WordDocument = MSWordApp.Application.Documents(1);
					WordDocument.Activate();
					WordDocument.SaveAs(ФайлКопия, 17);				
					MSWordApp.Application.Quit();
					СтрокаТЧ.ОригиналСкана = Файл.ПолноеИмя;
					СтрокаТЧ.СокрОригиналСкана = ФайлКопия;
					СтрокаТЧ.Наименование = Наименование;
					СтрокаТЧ.Расширение = ".pdf"; 
				ИначеЕсли сНастройка.ТипыЭлДок = ПредопределенноеЗначение("Перечисление.ТипыЭлДок.OpenOffice") Тогда
					ServiceManager    = Новый COMОбъект("com.sun.star.ServiceManager");       
					
					Скрипт             = Новый COMОбъект("MSScriptControl.ScriptControl");
					Скрипт.language    = "javascript";
					Скрипт.AddObject("OpenOffice", ServiceManager);
					
					Скрипт.eval("Массив=new Array()");       
					Массив = Скрипт.eval("Массив");   
					Скрипт.eval("Массив[0] = OpenOffice.Bridge_GetStruct('com.sun.star.beans.PropertyValue')");
					Скрипт.eval("Массив[0].Name     = 'Hidden'");
					Скрипт.eval("Массив[0].Value = true");
					
					Скрипт.AddCode("function SetItem(ind,val){Массив[ind]=val}");       
					Скрипт.AddObject("ServiceManager",ServiceManager);
					Desktop = ServiceManager.createInstance("com.sun.star.frame.Desktop");       
					Document = Desktop.LoadComponentFromURL(ПреобразоватьВURL(Файл.ПолноеИмя), "_blank", 0, Массив);
					
					Скрипт.eval("Массив2=new Array()");       
					Массив2 = Скрипт.eval("Массив2");       
					Скрипт.eval("Массив2[0] = OpenOffice.Bridge_GetStruct('com.sun.star.beans.PropertyValue')");       
					Скрипт.eval("Массив2[0].Name  = 'FilterName'");
					Скрипт.eval("Массив2[0].Value = 'writer_pdf_Export'");
					
					ПолноеИмяФайлаPDF = ПреобразоватьВURL(ФайлКопия); 
					Document.storeToURL(ПолноеИмяФайлаPDF, Массив2);
					Document.close(-1);        //Закрыть документ
					
					//Контрольная очистка переменных
					Document    = Неопределено;
					Desktop     = Неопределено;	
					СтрокаТЧ.ОригиналСкана = Файл.ПолноеИмя;
					СтрокаТЧ.СокрОригиналСкана = ФайлКопия;
					СтрокаТЧ.Наименование = Наименование;
					СтрокаТЧ.Расширение = ".pdf"; 
				Иначе
					СтрокаТЧ.ОригиналСкана = Файл.ПолноеИмя;
					СтрокаТЧ.Ошибка = Истина;
					СтрокаТЧ.ТекстОшибки = "не заполнена настройка Чтение текстовых файлов"; 
					Ошибка = ОписаниеОшибки();
					ЗаписатьВЖурналРегистрации(Ошибка);
				КонецЕсли;
			Исключение
				СтрокаТЧ.ОригиналСкана = Файл.ПолноеИмя;
				СтрокаТЧ.Ошибка = Истина;
				СтрокаТЧ.ТекстОшибки = "не удалось преобразовать документ в pdf или сохранить во временный каталог, возможно отсутствует программа Word или OpenOffice"; 
				Ошибка = ОписаниеОшибки();
				ЗаписатьВЖурналРегистрации(Ошибка);
			КонецПопытки;
		ИначеЕсли ЗначениеЗаполнено(Файл.Расширение) Тогда
			СтрокаТЧ = Объект.ТЧ.Добавить();
			СтрокаТЧ.ОригиналСкана = Файл.ПолноеИмя;
			СтрокаТЧ.СокрОригиналСкана = Файл.ПолноеИмя;
			СтрокаТЧ.Наименование = Файл.ИмяБезРасширения;
			СтрокаТЧ.Расширение = Файл.Расширение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПреобразоватьВURL(ИмяФайла)   
	Возврат "file:///" + СтрЗаменить(ИмяФайла, "\", "/"); 
КонецФункции

&НаСервере
Процедура СоздатьFilesToJpegНаСервере(ВременныеКаталоги, ImageMagickConvert, сНастройка)	
	ПутьCmd = ВременныеКаталоги.Получить("Cmd");
	ТекстДок = ТекстFilesToJpeg(ВременныеКаталоги, ImageMagickConvert, сНастройка);
	
Попытка
		//ТекстДок.ДобавитьСтроку("PAUSE");
		ТекстДок.Записать(ПутьCmd + "\FilesToJpeg.cmd", КодировкаТекста.OEM);
		ЗапуститьПриложение(ПутьCmd + "\FilesToJpeg.cmd",,Истина);
	Исключение
		Ошибка = ОписаниеОшибки();
		ЗаписатьВЖурналРегистрации(Ошибка);
	КонецПопытки;		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьFilesToJpegНаКлиенте(ВременныеКаталоги, ImageMagickConvert, сНастройка)	
	ПутьCmd = ВременныеКаталоги.Получить("Cmd");
	ТекстДок = ТекстFilesToJpeg(ВременныеКаталоги, ImageMagickConvert, сНастройка);
	
	Попытка
		//ТекстДок.ДобавитьСтроку("PAUSE");
		ТекстДок.Записать(ПутьCmd + "\FilesToJpeg.cmd", КодировкаТекста.OEM);
		ЗапуститьПриложение(ПутьCmd + "\FilesToJpeg.cmd",,Истина);
	Исключение
		Ошибка = ОписаниеОшибки();
		ЗаписатьВЖурналРегистрации(Ошибка);
	КонецПопытки;	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВЖурналРегистрации(Ошибка)

	ЗаписьЖурналаРегистрации("НедопустимаяОперация", УровеньЖурналаРегистрации.Ошибка,,,Ошибка);
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Ошибка;
	Сообщение.Сообщить();

КонецПроцедуры

&НаСервере
Функция ТекстFilesToJpeg(ВременныеКаталоги, ImageMagickConvert, сНастройка)

	КаталогДокументов = ВременныеКаталоги.Получить("КаталогДокументов");
	ПутьCmd = ВременныеКаталоги.Получить("Cmd");
	Путьjpeg = ВременныеКаталоги.Получить("jpeg");
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.ДобавитьСтроку("@ECHO OFF");
	ТекстДок.ДобавитьСтроку("@chcp 866");
	ДоСтраницы = сНастройка.ДоСтраницы-1;
	Для Каждого СтрокаТЧ Из Объект.ТЧ Цикл	
		Если Не СтрокаТЧ.Ошибка Тогда
			Файл = СтрокаТЧ.СокрОригиналСкана; 
			jpeg = Путьjpeg + СтрокаТЧ.Наименование  + ".jpeg";
			ТекстДок.ДобавитьСтроку(""""+ ImageMagickConvert + """" + " -density 300 -trim " + """"+ Файл + """" + "[0-" + ДоСтраницы + "] -quality 100 -background White " + " " + """" + jpeg + """");
		КонецЕсли;
	КонецЦикла;

	Возврат ТекстДок;
КонецФункции

&НаСервере
Функция ТекстСоздатьДляПросмотраFilesToJPEG(ВременныеКаталоги, ImageMagickConvert, сНастройка)	
	КаталогДокументов = ВременныеКаталоги.Получить("КаталогДокументов");
	ПутьCmd = ВременныеКаталоги.Получить("Cmd");
	Путьjpeg = ВременныеКаталоги.Получить("TempJpeg");
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.ДобавитьСтроку("@ECHO OFF");
	ТекстДок.ДобавитьСтроку("@chcp 866");
	ДоСтраницы = сНастройка.ДоСтраницы-1;
	Для Каждого СтрокаТЧ Из Объект.ТЧ Цикл	
		Если Не СтрокаТЧ.Ошибка Тогда
			Файл = СтрокаТЧ.СокрОригиналСкана; 
			jpeg = Путьjpeg + СтрокаТЧ.Наименование  + ".jpeg";
			ТекстДок.ДобавитьСтроку(""""+ ImageMagickConvert + """" + " -density 300 " + """"+ Файл + """" + "[0-" + ДоСтраницы + "] -resize " + сНастройка.Ширина + "x" + сНастройка.Высота + " " + """" + jpeg + """");
		КонецЕсли;
	КонецЦикла;

	Возврат ТекстДок;
	
КонецФункции

&НаСервере
Процедура СоздатьДляПросмотраFilesToJPEGНаСервере(ВременныеКаталоги, ImageMagickConvert, сНастройка)	
	ПутьCmd = ВременныеКаталоги.Получить("Cmd");
	ТекстДок = ТекстСоздатьДляПросмотраFilesToJPEG(ВременныеКаталоги, ImageMagickConvert, сНастройка);
	
	Попытка
		//ТекстДок.ДобавитьСтроку("PAUSE");
		ТекстДок.Записать(ПутьCmd + "\FilesToTempJpeg.cmd", КодировкаТекста.OEM);
		ЗапуститьПриложение(ПутьCmd + "\FilesToTempJpeg.cmd",,Истина);
	Исключение
		Ошибка = ОписаниеОшибки();
		ЗаписатьВЖурналРегистрации(Ошибка);
	КонецПопытки;	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДляПросмотраFilesToJPEGНаКлиенте(ВременныеКаталоги, ImageMagickConvert, сНастройка)	
	ПутьCmd = ВременныеКаталоги.Получить("Cmd");
	ТекстДок = ТекстСоздатьДляПросмотраFilesToJPEG(ВременныеКаталоги, ImageMagickConvert, сНастройка);
	
	Попытка
		//ТекстДок.ДобавитьСтроку("PAUSE");
		ТекстДок.Записать(ПутьCmd + "\FilesToTempJpeg.cmd", КодировкаТекста.OEM);
		ЗапуститьПриложение(ПутьCmd + "\FilesToTempJpeg.cmd",,Истина);
	Исключение
		Ошибка = ОписаниеОшибки();
		ЗаписатьВЖурналРегистрации(Ошибка);
	КонецПопытки;	
КонецПроцедуры

&НаСервере
Процедура СоздатьJpegToTxtНаСервере(ВременныеКаталоги, Tesseract)
	ПутьCmd = ВременныеКаталоги.Получить("Cmd");
	ТекстДок = ТекстJpegToTxtНаСервере(ВременныеКаталоги, Tesseract);
	
	Попытка
		ТекстДок.Записать(ПутьCmd + "\JpegToTxt.cmd", КодировкаТекста.OEM);
		ЗапуститьПриложение(ПутьCmd + "\JpegToTxt.cmd",,Истина);
	Исключение
		Ошибка = ОписаниеОшибки();
		ЗаписатьВЖурналРегистрации(Ошибка);
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьJpegToTxtНаКлиенте(ВременныеКаталоги, Tesseract)
	ПутьCmd = ВременныеКаталоги.Получить("Cmd");
	ТекстДок = ТекстJpegToTxtНаКлиенте(ВременныеКаталоги, Tesseract);
	
	Попытка
		ТекстДок.Записать(ПутьCmd + "\JpegToTxt.cmd", КодировкаТекста.OEM);
		ЗапуститьПриложение(ПутьCmd + "\JpegToTxt.cmd",,Истина);
	Исключение
		Ошибка = ОписаниеОшибки();
		ЗаписатьВЖурналРегистрации(Ошибка);
	КонецПопытки;
КонецПроцедуры

&НаСервере
Функция ТекстJpegToTxtНаСервере(ВременныеКаталоги, Tesseract)

	ПутьTXT = ВременныеКаталоги.Получить("TXT");
	Путьjpeg = ВременныеКаталоги.Получить("jpeg");
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.ДобавитьСтроку("@ECHO OFF");
	ТекстДок.ДобавитьСтроку("@chcp 866");
	Для Каждого СтрокаТЧ Из Объект.ТЧ Цикл	
		Если Не СтрокаТЧ.Ошибка Тогда
			Наименование = СтрокаТЧ.Наименование;
			НесколькоСтраницСкана = НайтиФайлы(Путьjpeg, "*" + Наименование + "-*");
			НКолВо = НесколькоСтраницСкана.Количество();
			Если НКолВо = 0 Тогда
				ТекстДок.ДобавитьСтроку("""" + Tesseract + """ """ + Путьjpeg + Наименование + ".jpeg" + """ " + """" + ПутьTXT  + Наименование +  """" + " -l rus+eng ");
			Иначе 
				НКолВо = НКолВо - 1;
				ТекСтраница = 0;
				Пока ТекСтраница <= НКолВо Цикл    
					Наименование = СтрокаТЧ.Наименование + "-" + ТекСтраница;
					ТекстДок.ДобавитьСтроку("""" + Tesseract + """ """ + Путьjpeg + Наименование + ".jpeg" + """ " + """" + ПутьTXT  + Наименование +  """" + " -l rus+eng ");			
					ТекСтраница = ТекСтраница + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстДок;

КонецФункции // ТекстJpegToTxt()

&НаКлиенте
Функция ТекстJpegToTxtНаКлиенте(ВременныеКаталоги, Tesseract)

	ПутьTXT = ВременныеКаталоги.Получить("TXT");
	Путьjpeg = ВременныеКаталоги.Получить("jpeg");
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.ДобавитьСтроку("@ECHO OFF");
	ТекстДок.ДобавитьСтроку("@chcp 866");
	Для Каждого СтрокаТЧ Из Объект.ТЧ Цикл	
		Если Не СтрокаТЧ.Ошибка Тогда
			Наименование = СтрокаТЧ.Наименование;
			НесколькоСтраницСкана = НайтиФайлы(Путьjpeg, "*" + Наименование + "-*");
			НКолВо = НесколькоСтраницСкана.Количество();
			Если НКолВо = 0 Тогда
				ТекстДок.ДобавитьСтроку("""" + Tesseract + """ """ + Путьjpeg + Наименование + ".jpeg" + """ " + """" + ПутьTXT  + Наименование +  """" + " -l rus+eng ");
			Иначе 
				НКолВо = НКолВо - 1;
				ТекСтраница = 0;
				Пока ТекСтраница <= НКолВо Цикл    
					Наименование = СтрокаТЧ.Наименование + "-" + ТекСтраница;
					ТекстДок.ДобавитьСтроку("""" + Tesseract + """ """ + Путьjpeg + Наименование + ".jpeg" + """ " + """" + ПутьTXT  + Наименование +  """" + " -l rus+eng ");			
					ТекСтраница = ТекСтраница + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстДок;

КонецФункции // ТекстJpegToTxt()

&НаСервере
Процедура ОбходТХТНаСервере(ВременныеКаталоги, сНастройка)
	ПутьTXT = ВременныеКаталоги.Получить("TXT");
	ПДДлинаСловаВСимволах = сНастройка.ДлинаСловаВСимволах;
	ТЗПадежиМесяцов = ПадежиМесяцов();
	Для Каждого СтрокаТЧ Из Объект.ТЧ Цикл	
		Если Не СтрокаТЧ.Ошибка Тогда
			Наименование = СтрокаТЧ.Наименование;
			НесколькоСтраницСкана = НайтиФайлы(ПутьTXT, "*" + Наименование + "-*");
			НКолВо = НесколькоСтраницСкана.Количество();
			Если НКолВо = 0 Тогда
				TXT = ПутьTXT + Наименование + ".txt"; 
				ФайлTXT = Новый Файл(TXT);
				Если ФайлTXT.Существует() Тогда
					ТекстДок = Новый ТекстовыйДокумент;
					ТекстДок.Прочитать(TXT, КодировкаТекста.UTF8); 
					Текст = ТекстДок.ПолучитьТекст();
					ПарсингТХТ(Текст, ПДДлинаСловаВСимволах, СтрокаТЧ.НомерСтроки, сНастройка);
				Иначе         
					СтрокаТЧ.Ошибка = Истина;
					СтрокаТЧ.ТекстОшибки = "текстовый файл не найден";	
				КонецЕсли;
			Иначе 
				НКолВо = НКолВо - 1;
				ТекСтраница = 0;
				Пока ТекСтраница <= НКолВо Цикл  
					Наименование = СтрокаТЧ.Наименование + "-" + ТекСтраница;
					TXT = ПутьTXT + Наименование + ".txt"; 
					ФайлTXT = Новый Файл(TXT);
					Если ФайлTXT.Существует() Тогда
						ТекстДок = Новый ТекстовыйДокумент;
						ТекстДок.Прочитать(TXT, КодировкаТекста.UTF8); 
						Текст = ТекстДок.ПолучитьТекст();
						ПарсингТХТ(Текст, ПДДлинаСловаВСимволах, СтрокаТЧ.НомерСтроки, сНастройка);
						ТекСтраница = ТекСтраница + 1;
					Иначе         
						СтрокаТЧ.Ошибка = Истина;
						СтрокаТЧ.ТекстОшибки = "текстовый файл не найден";	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбходТХТ()

&НаКлиенте
Процедура ОбходТХТНаКлиенте(ВременныеКаталоги, сНастройка)
	ПутьTXT = ВременныеКаталоги.Получить("TXT");
	ПДДлинаСловаВСимволах = сНастройка.ДлинаСловаВСимволах;
	Для Каждого СтрокаТЧ Из Объект.ТЧ Цикл	
		Если Не СтрокаТЧ.Ошибка Тогда
			Наименование = СтрокаТЧ.Наименование;
			НесколькоСтраницСкана = НайтиФайлы(ПутьTXT, "*" + Наименование + "-*");
			НКолВо = НесколькоСтраницСкана.Количество();
			Если НКолВо = 0 Тогда
				TXT = ПутьTXT + Наименование + ".txt"; 
				ФайлTXT = Новый Файл(TXT);
				Если ФайлTXT.Существует() Тогда
					ТекстДок = Новый ТекстовыйДокумент;
					ТекстДок.Прочитать(TXT, КодировкаТекста.UTF8); 
					Текст = ТекстДок.ПолучитьТекст();
					ПарсингТХТ(Текст, ПДДлинаСловаВСимволах, СтрокаТЧ.НомерСтроки, сНастройка);
				Иначе         
					СтрокаТЧ.Ошибка = Истина;
					СтрокаТЧ.ТекстОшибки = "текстовый файл не найден";	
				КонецЕсли;
			Иначе 
				НКолВо = НКолВо - 1;
				ТекСтраница = 0;
				Пока ТекСтраница <= НКолВо Цикл  
					Наименование = СтрокаТЧ.Наименование + "-" + ТекСтраница;
					TXT = ПутьTXT + Наименование + ".txt"; 
					ФайлTXT = Новый Файл(TXT);
					Если ФайлTXT.Существует() Тогда
						ТекстДок = Новый ТекстовыйДокумент;
						ТекстДок.Прочитать(TXT, КодировкаТекста.UTF8); 
						Текст = ТекстДок.ПолучитьТекст();
						ПарсингТХТ(Текст, ПДДлинаСловаВСимволах, СтрокаТЧ.НомерСтроки, сНастройка);
						ТекСтраница = ТекСтраница + 1;
					Иначе         
						СтрокаТЧ.Ошибка = Истина;
						СтрокаТЧ.ТекстОшибки = "текстовый файл не найден";	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбходТХТ()

&НаСервере
Функция ПарсингТХТ(Текст, ПДДлинаСловаВСимволах, НомерСтроки, сНастройка)
		СтрокаТЧ = Объект.ТЧ[НомерСтроки-1];
		ТЗПадежиМесяцов = ПадежиМесяцов();
		Текст = УбратьЛишниеСимволы(Текст, сНастройка);
		Если Найти(Текст,"ИСПОЛНИТЕЛЬНЫЙ ЛИСТ") > 0 ИЛИ Найти(Текст,"СУДЕБНЫЙ ПРИКАЗ") > 0 Тогда
			СтрокаТЧ.ТипФайла = Справочники.ТипыПрикрепляемыхФайлов.ИсполнительныйДокумент;	
		Иначе
			СтрокаТЧ.ТипФайла = сНастройка.ТипыПрикрепляемыхФайлов;
		КонецЕсли;
		мСлова = СтрРазделить(Текст, " ", Ложь);
		мСловаПоиска = Новый Массив;
		мДатыПоиска = Новый Массив;
		Для Индекс = 0 По мСлова.ВГраница() Цикл
			Слово = мСлова[Индекс];
			Если СтрДлина(Слово) >= ПДДлинаСловаВСимволах Тогда
				Месяц = ТЗПадежиМесяцов.Найти(Слово, "Месяц");
				дСлово = СтроковыеФункцииКлиентСервер.СтрокаВДату(Слово);
				Если Месяц <> Неопределено Тогда
					дСлово = СтроковыеФункцииКлиентСервер.СтрокаВДату(мСлова[Индекс-1] + "." + Месяц.Номер + "." + мСлова[Индекс+1]);
					Если ТипЗнч(дСлово) = Тип("Дата") И дСлово < Дата(2077,1,1) Тогда
						мДатыПоиска.Добавить(дСлово);		
					КонецЕсли;
				ИначеЕсли ТипЗнч(дСлово) = Тип("Дата") И дСлово <> Дата(1,1,1) И дСлово < Дата(2077,1,1) Тогда
					мДатыПоиска.Добавить(дСлово);		
				ИначеЕсли сНастройка.ЗаглавныеБуквыЦифры Тогда
					пСлово = ЗаглавныеБуквыЦифрыСлова(Слово);
					Если пСлово <> Неопределено Тогда 
						мСловаПоиска.Добавить(пСлово);	
					КонецЕсли;
				Иначе
					мСловаПоиска.Добавить(Слово);	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если сНастройка.Контрагенты Тогда
			Контрагент = ПоискКА(мСловаПоиска, мДатыПоиска, сНастройка);	
			Если ЗначениеЗаполнено(Контрагент) Тогда
				СтрокаТЧ.Контрагент = Контрагент;
				СтрокаТЧ.ОтметкаКА = Истина;		
			КонецЕсли;
			
			Если сНастройка.ИсполнительныеДокументы И ЗначениеЗаполнено(Контрагент) Тогда
				ИсполнительныйДокумент = ПоискИД(Контрагент, мСловаПоиска, мДатыПоиска, сНастройка);
				Если ЗначениеЗаполнено(ИсполнительныйДокумент) Тогда
					СтрокаТЧ.ИсполнительныйДокумент = ИсполнительныйДокумент;
					СтрокаТЧ.ОтметкаИД = Истина;		
				КонецЕсли;
			КонецЕсли;
			
			Если сНастройка.ИсполнительноеПроизводство И ЗначениеЗаполнено(Контрагент) Тогда
				ИсполнительноеПроизводство = ПоискИП(Контрагент, мСловаПоиска, мДатыПоиска, сНастройка);
				Если ЗначениеЗаполнено(ИсполнительноеПроизводство) Тогда
					СтрокаТЧ.ИсполнительноеПроизводство = ИсполнительноеПроизводство;
					СтрокаТЧ.ОтметкаИП = Истина;		
				КонецЕсли;
			КонецЕсли;		
		КонецЕсли;
		
		Если сНастройка.ДолговыеОбязательства Тогда
			ДолговоеОбязательство = ПоискДО(мСловаПоиска, мДатыПоиска, СтрокаТЧ.Контрагент, сНастройка); 
			Если ЗначениеЗаполнено(ДолговоеОбязательство) Тогда
				СтрокаТЧ.ДолговоеОбязательство = ДолговоеОбязательство;
				СтрокаТЧ.ОтметкаДО = Истина;		
			КонецЕсли;
		КонецЕсли;
		
		ИсключитьКонтрагент = сНастройка.ИсключитьКонтрагент;
		Если ИсключитьКонтрагент И СтрокаТЧ.ОтметкаДО
			ИЛИ ИсключитьКонтрагент И СтрокаТЧ.ОтметкаИП 
			ИЛИ ИсключитьКонтрагент И СтрокаТЧ.ОтметкаИД Тогда
			СтрокаТЧ.ОтметкаКА = Ложь;	 
		КонецЕсли;
		
		ИсключитьДО = сНастройка.ИсключитьДО;
		Если ИсключитьДО И СтрокаТЧ.ОтметкаКА
			ИЛИ ИсключитьДО И СтрокаТЧ.ОтметкаИП 
			ИЛИ ИсключитьДО И СтрокаТЧ.ОтметкаИД Тогда
			СтрокаТЧ.ОтметкаДО = Ложь;	 
		КонецЕсли;
	
	
КонецФункции // ПарсингТХТ()

&НаСервере
Функция ПадежиМесяцов()

	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Месяц");
	ТЗ.Колонки.Добавить("Номер");
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "январь";
	нСтр.Номер = "01";  
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "января";
	нСтр.Номер = "01";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "февраль";
	нСтр.Номер = "02";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "февраля";
	нСтр.Номер = "02";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "март";
	нСтр.Номер = "03";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "марта";
	нСтр.Номер = "03";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "апрель";
	нСтр.Номер = "04";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "апреля";
	нСтр.Номер = "04";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "май";
	нСтр.Номер = "05";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "мая";
	нСтр.Номер = "05";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "июнь";
	нСтр.Номер = "06";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "июня";
	нСтр.Номер = "06";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "июль";
	нСтр.Номер = "07";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "июля";
	нСтр.Номер = "07";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "август";
	нСтр.Номер = "08";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "августа";
	нСтр.Номер = "08";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "сентябрь";
	нСтр.Номер = "09";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "сентября";
	нСтр.Номер = "09";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "октябрь";
	нСтр.Номер = "10";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "октября";
	нСтр.Номер = "10";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "ноябрь";
	нСтр.Номер = "11";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "ноября";
	нСтр.Номер = "11";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "декабрь";
	нСтр.Номер = "12";
	нСтр = ТЗ.Добавить();
	нСтр.Месяц = "декабря";
	нСтр.Номер = "12";

	Возврат ТЗ;
КонецФункции // ПадежиМесяцов()

&НаСервере
Функция ЗаглавныеБуквыЦифрыСлова(Слово)
	Если Лев(Слово,1) = ВРег(Лев(Слово,1)) Тогда
		Возврат Слово;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции // ЗаглавныеБуквыЦифры()

&НаСервере
Функция ЗаглавныеБуквыЦифры(мСлова)
	мСловаПоиска = Новый Массив;
	Для Каждого Слово Из мСлова Цикл
		Если Лев(Слово,1) = ВРег(Лев(Слово,1)) Тогда
			мСловаПоиска.Добавить(Слово);	
		КонецЕсли;
	КонецЦикла;
	
	Возврат мСловаПоиска;
КонецФункции // ЗаглавныеБуквыЦифры()

&НаСервере
Функция УбратьЛишниеСимволы(Строка, сНастройка)
	
	
	Возврат ФункцииРазбораТекста.УбратьЛишниеСимволы(
		Строка,
		сНастройка.ЧитаемыеСимволы,
		сНастройка.НомерМожетСодержатьТочку
	);
	
	//зСтрока = Строка;
	//зСтрока = СтрЗаменить(зСтрока,Символы.ПС," ");
	//зСтрока = СтрЗаменить(зСтрока,"ё","е");
	//НомерМожетСодержатьТочку = сНастройка.НомерМожетСодержатьТочку;
	//НоваяСтрока = "";
	//ЧитаемыеСимволы = сНастройка.ЧитаемыеСимволы;
	//Для Сч = 1 по СтрДлина(зСтрока) Цикл
	//	Символ = Сред(зСтрока, Сч, 1);
	//	Если Найти(ЧитаемыеСимволы, Символ) > 0 Тогда
	//		НоваяСтрока = НоваяСтрока + Символ;
	//	ИначеЕсли Сч > 1 И Символ = "." И СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Сред(зСтрока, Сч - 1, 1)) <> Неопределено Тогда // если точка и предущий символ число , то предпологаем что это дата через точку
	//		НоваяСтрока = НоваяСтрока + Символ;	
	//	ИначеЕсли НомерМожетСодержатьТочку И Сч < СтрДлина(зСтрока) И Символ = "." И Сред(зСтрока, Сч + 1, 1) = " " Тогда //если точка и далее пробел, то предпологаем это конец строки 
	//		Продолжить;	
	//	ИначеЕсли НомерМожетСодержатьТочку И Символ = "." Тогда
	//		НоваяСтрока = НоваяСтрока + Символ;	
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Возврат НоваяСтрока;
	
КонецФункции

&НаКлиенте
Процедура КаталогСкановНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Если Диалог.Выбрать() Тогда
		КаталогДокументов = Диалог.Каталог;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТЧОригиналСканаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗапуститьПриложение(Элемент.ТекстРедактирования);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	КаталогДокументов = Настройка.КаталогДокументовПоУмолчанию; 
	Если Настройка.ДолговыеОбязательства Тогда
		Элементы.ТЧДолговоеОбязательство.Видимость = Истина;
		Элементы.ТЧОтметкаДО.Видимость = Истина;
	КонецЕсли;
	
	Если Настройка.Контрагенты Тогда
		Элементы.ТЧКонтрагент.Видимость = Истина;
		Элементы.ТЧОтметкаКА.Видимость = Истина;
	КонецЕсли;
	
	Если Настройка.ИсполнительноеПроизводство Тогда
		Элементы.ТЧИсполнительноеПроизводство.Видимость = Истина;
		Элементы.ТЧОтметкаИП.Видимость = Истина;
	КонецЕсли;
	
	Если Настройка.ИсполнительныеДокументы Тогда
		Элементы.ТЧИсполнительныйДокументу.Видимость = Истина;
		Элементы.ТЧОтметкаИД.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиНаСервере(Настройка)
	РеквизитыНастройки = РеквизитыНастройки();
	сНастройка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Настройка,РеквизитыНастройки);
	НеУдалятьВременныеФайлы = Настройка.НеУдалятьВременныеФайлы;
	
	Возврат сНастройка;
КонецФункции

&НаКлиенте
Процедура НастройкаПриИзменении(Элемент)

	НастройкиПоУмолчанию = ПолучитьНастройкиНаСервере(Настройка);
	КаталогДокументовПоУмолчанию = НастройкиПоУмолчанию.КаталогДокументовПоУмолчанию; 
	Если ЗначениеЗаполнено(КаталогДокументовПоУмолчанию) Тогда
		КаталогДокументов = КаталогДокументовПоУмолчанию; 	
	КонецЕсли;
	
	Если НастройкиПоУмолчанию.ДолговыеОбязательства Тогда
		Элементы.ТЧДолговоеОбязательство.Видимость = Истина;
		Элементы.ТЧОтметкаДО.Видимость = Истина;
	Иначе
		Элементы.ТЧДолговоеОбязательство.Видимость = Ложь;
		Элементы.ТЧОтметкаДО.Видимость = Ложь;
	КонецЕсли;
	
	Если НастройкиПоУмолчанию.Контрагенты Тогда
		Элементы.ТЧКонтрагент.Видимость = Истина;
		Элементы.ТЧОтметкаКА.Видимость = Истина;
	Иначе
		Элементы.ТЧКонтрагент.Видимость = Ложь;
		Элементы.ТЧОтметкаКА.Видимость = Ложь;	
	КонецЕсли;
	
	Если НастройкиПоУмолчанию.ИсполнительноеПроизводство Тогда
		Элементы.ТЧИсполнительноеПроизводство.Видимость = Истина;
		Элементы.ТЧОтметкаИП.Видимость = Истина;
	Иначе
		Элементы.ТЧИсполнительноеПроизводство.Видимость = Ложь;
		Элементы.ТЧОтметкаИП.Видимость = Ложь;
	КонецЕсли;
	
	Если НастройкиПоУмолчанию.ИсполнительныеДокументы Тогда
		Элементы.ТЧИсполнительныйДокументу.Видимость = Истина;
		Элементы.ТЧОтметкаИД.Видимость = Истина;
	Иначе
		Элементы.ТЧИсполнительныйДокументу.Видимость = Ложь;
		Элементы.ТЧОтметкаИД.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьДокумент = НастройкиПоУмолчанию.ПоказатьДокумент;
	ПоказыватьСкрытьДокумент = ПоказатьДокумент;
	Элементы.ГруппаПраво.Видимость = ПоказатьДокумент;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВПрекрепляемыеФайлыНаСервере()
	ТипФайла = ТипПрикрепляемогоФайла();
	ДетализацияПоИд = ДетализацияПоИд();
	ХранитьПрикрепляемыеФайлыНаСервере = ХранитьПрикрепляемыеФайлыНаСервере();
	Каталог =  КаталогХраненияПрикрепляемыхФайловНаСервере();
	ВидыОтметки = Новый Массив;
	ВидыОтметки.Добавить("ОтметкаДО");
	ВидыОтметки.Добавить("ОтметкаКА");
	ВидыОтметки.Добавить("ОтметкаИД");
	ВидыОтметки.Добавить("ОтметкаИП");	
	Для Каждого ВидОтметки Из ВидыОтметки Цикл 
		мСтрок = Объект.ТЧ.НайтиСтроки(Новый Структура(ВидОтметки,Истина));
		Для Каждого Стр Из мСтрок Цикл
			ПрикрепитьФайлы = Документы.ПрикрепитьФайлы.СоздатьДокумент();
			ПрикрепитьФайлы.Дата = ТекущаяДатаСеанса();
			Пользователи.ЗаполнитьРеквизитыПоДаннымПользователя(ПрикрепитьФайлы);
			ПрикрепитьФайлы.Комментарий = "Автоматически Парсинг документов";
			Если ВидОтметки = "ОтметкаКА" Тогда
				ПрикрепитьФайлы.Объект = Стр.Контрагент;
			ИначеЕсли ВидОтметки = "ОтметкаДО" Тогда
				ПрикрепитьФайлы.Объект = Стр.ДолговоеОбязательство;
			ИначеЕсли ВидОтметки = "ОтметкаИП" Тогда
				Попытка
					ПрикрепитьФайлы.Объект = Стр.ИсполнительноеПроизводство.НомерИД.Владелец;
				Исключение
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "у документа " + Стр.ИсполнительноеПроизводство + " не найден ИД или Владелец ИД";
					Сообщение.Сообщить();	
				КонецПопытки;
			ИначеЕсли ВидОтметки = "ОтметкаИД" И ДетализацияПоИД Тогда	
				Если ТипЗнч(Стр.ИсполнительныйДокумент) = Тип("СправочникСсылка.ИсполнительныеДокументы") Тогда
					ПрикрепитьФайлы.Объект = Стр.ИсполнительныйДокумент;	
				ИначеЕсли ТипЗнч(Стр.ИсполнительныйДокумент) = Тип("ДокументСсылка.СудебноеДело") Тогда
					Попытка
						ПрикрепитьФайлы.Объект = Стр.ИсполнительныйДокумент.Займ;
					Исключение
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = "у документа " + Стр.ИсполнительныйДокумент + " не найден Владелец";
						Сообщение.Сообщить();		
					КонецПопытки;
				КонецЕсли;
			ИначеЕсли ВидОтметки = "ОтметкаИД" Тогда
				Если ТипЗнч(Стр.ИсполнительныйДокумент) = Тип("СправочникСсылка.ИсполнительныеДокументы") Тогда
					Попытка
						ПрикрепитьФайлы.Объект = Стр.ИсполнительныйДокумент.Владелец;	
					Исключение
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = "у документа " + Стр.ИсполнительныйДокумент + " не найден Владелец";
						Сообщение.Сообщить();		
					КонецПопытки;
				ИначеЕсли ТипЗнч(Стр.ИсполнительныйДокумент) = Тип("ДокументСсылка.СудебноеДело") Тогда
					Попытка
						ПрикрепитьФайлы.Объект = Стр.ИсполнительныйДокумент.Займ;
					Исключение
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = "у документа " + Стр.ИсполнительныйДокумент + " не найден Владелец";
						Сообщение.Сообщить();		
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			СтрПФ = ПрикрепитьФайлы.Файлы.Добавить();
			Если ХранитьПрикрепляемыеФайлыНаСервере Тогда
				Файл = Новый Файл(Стр.ОригиналСкана);
				СтрПФ.УИД = Новый УникальныйИдентификатор();
				ДвДанные = Новый ДвоичныеДанные(Стр.ОригиналСкана);
				ДвДанные.Записать(Каталог + "\" + Строка(СтрПФ.УИД) + Файл.Расширение);
				СтрПФ.Путь = Стр.ОригиналСкана;
				СтрПФ.Размер = ОкруглитьРазмерФайла(Строка(Файл.Размер()));
				СтрПФ.Загружен = Истина;
				Если ВидОтметки = "ОтметкаИД" И ЗначениеЗаполнено(Стр.ТипФайла) Тогда
					СтрПФ.ТипФайла = Стр.ТипФайла;	
				Иначе
					СтрПФ.ТипФайла = ТипФайла;
				КонецЕсли;
			Иначе
				СтрПФ.Загружен = Истина;  
				СтрПФ.Путь = Стр.ОригиналСкана;
				СтрПФ.УИД = Новый УникальныйИдентификатор();
				Если ВидОтметки = "ОтметкаИД" И ЗначениеЗаполнено(Стр.ТипФайла) Тогда
					СтрПФ.ТипФайла = Стр.ТипФайла;
				Иначе
					СтрПФ.ТипФайла = ТипФайла;
				КонецЕсли;
				Файл = Новый Файл(Стр.ОригиналСкана);
				СтрПФ.Размер = ОкруглитьРазмерФайла(Строка(Файл.Размер()));
				МассивДанных = Новый Массив;
				Данные = Новый ДвоичныеДанные(СтрПФ.Путь);
				МассивДанных.Добавить(Данные);
				ПрикрепитьФайлы.ПоместитьВХранилище(МассивДанных);	
			КонецЕсли;
			Если ЗначениеЗаполнено(ПрикрепитьФайлы.Объект) Тогда
				ПрикрепитьФайлы.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере                        
Функция ОкруглитьРазмерФайла(СтрРазмер)
	Размер = Число(СтрРазмер);
	Если Размер > 1024 Тогда
		Размер = Окр(Размер/1024, 0);
		Стр = Строка(Размер) + " Кб";
	КонецЕсли;
	Если Размер > 1024 Тогда
		Размер = Окр(Размер/1024, 1);
		Стр = Строка(Размер) + " Мб";
	КонецЕсли;	
	Возврат Стр;		
КонецФункции

&НаСервере
Процедура ДобавитьВПрекрепляемыеФайлыСКлиент(ВидОтметки,
											ИндексСтроки,
											ФайлДвДанные,
											Расширение,
											Размер,
											ТипФайла,
											ДетализацияПоИд,
											ХранитьПрикрепляемыеФайлыНаСервере,
											Каталог)
	Стр = Объект.ТЧ[ИндексСтроки];
	ПрикрепитьФайлы = Документы.ПрикрепитьФайлы.СоздатьДокумент();
	ПрикрепитьФайлы.Дата = ТекущаяДатаСеанса();
	Пользователи.ЗаполнитьРеквизитыПоДаннымПользователя(ПрикрепитьФайлы);
	ПрикрепитьФайлы.Комментарий = "Автоматически Парсинг документов";
	Если ВидОтметки = "ОтметкаКА" Тогда
		ПрикрепитьФайлы.Объект = Стр.Контрагент;
	ИначеЕсли ВидОтметки = "ОтметкаДО" Тогда
		ПрикрепитьФайлы.Объект = Стр.ДолговоеОбязательство;
	ИначеЕсли ВидОтметки = "ОтметкаИП" Тогда
		Попытка
			ПрикрепитьФайлы.Объект = Стр.ИсполнительноеПроизводство.НомерИД.Владелец;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "у документа " + Стр.ИсполнительноеПроизводство + " не найден ИД или Владелец ИД";
			Сообщение.Сообщить();	
		КонецПопытки;
	ИначеЕсли ВидОтметки = "ОтметкаИД" И ДетализацияПоИД Тогда	
		Если ТипЗнч(Стр.ИсполнительныйДокумент) = Тип("СправочникСсылка.ИсполнительныеДокументы") Тогда
			ПрикрепитьФайлы.Объект = Стр.ИсполнительныйДокумент;	
		ИначеЕсли ТипЗнч(Стр.ИсполнительныйДокумент) = Тип("ДокументСсылка.СудебноеДело") Тогда
			Попытка
				ПрикрепитьФайлы.Объект = Стр.ИсполнительныйДокумент.Займ;
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "у документа " + Стр.ИсполнительныйДокумент + " не найден Владелец";
				Сообщение.Сообщить();		
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли ВидОтметки = "ОтметкаИД" Тогда
		Если ТипЗнч(Стр.ИсполнительныйДокумент) = Тип("СправочникСсылка.ИсполнительныеДокументы") Тогда
			Попытка
				ПрикрепитьФайлы.Объект = Стр.ИсполнительныйДокумент.Владелец;	
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "у документа " + Стр.ИсполнительныйДокумент + " не найден Владелец";
				Сообщение.Сообщить();		
			КонецПопытки;
		ИначеЕсли ТипЗнч(Стр.ИсполнительныйДокумент) = Тип("ДокументСсылка.СудебноеДело") Тогда
			Попытка
				ПрикрепитьФайлы.Объект = Стр.ИсполнительныйДокумент.Займ;
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "у документа " + Стр.ИсполнительныйДокумент + " не найден Владелец";
				Сообщение.Сообщить();		
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	СтрПФ = ПрикрепитьФайлы.Файлы.Добавить();
	Если ХранитьПрикрепляемыеФайлыНаСервере Тогда
		СтрПФ.УИД = Новый УникальныйИдентификатор();
		ДвДанные = ФайлДвДанные;
		ДвДанные.Записать(Каталог + "\" + Строка(СтрПФ.УИД) + Расширение);
		СтрПФ.Путь = Стр.ОригиналСкана;
		СтрПФ.Размер = Размер;
		СтрПФ.Загружен = Истина;
		Если ВидОтметки = "ОтметкаИД" И ЗначениеЗаполнено(Стр.ТипФайла) Тогда
			СтрПФ.ТипФайла = Стр.ТипФайла;	
		Иначе
			СтрПФ.ТипФайла = ТипФайла;
		КонецЕсли;
	Иначе
		СтрПФ.Загружен = Истина;  
		СтрПФ.Путь = Стр.ОригиналСкана;
		СтрПФ.УИД = Новый УникальныйИдентификатор();
		Если ВидОтметки = "ОтметкаИД" И ЗначениеЗаполнено(Стр.ТипФайла) Тогда
			СтрПФ.ТипФайла = Стр.ТипФайла;
		Иначе
			СтрПФ.ТипФайла = ТипФайла;
		КонецЕсли;
		СтрПФ.Размер = Размер;
		МассивДанных = Новый Массив;
		Данные = ФайлДвДанные;
		МассивДанных.Добавить(Данные);
		ПрикрепитьФайлы.ПоместитьВХранилище(МассивДанных);	
	КонецЕсли;
	Если ЗначениеЗаполнено(ПрикрепитьФайлы.Объект) Тогда
		ПрикрепитьФайлы.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВПрекрепляемыеФайлы(Команда)
	ВыполнятьНа = ВыполнятьНа();
	Если ВыполнятьНа = "2" Тогда
		ТипФайла = ТипПрикрепляемогоФайла();
		ДетализацияПоИд = ДетализацияПоИд();
		ХранитьПрикрепляемыеФайлыНаСервере = ХранитьПрикрепляемыеФайлыНаСервере();
		КаталогХраненияПрикрепляемыхФайловНаСервере =  КаталогХраненияПрикрепляемыхФайловНаСервере();
		ВидыОтметки = Новый Массив;
		ВидыОтметки.Добавить("ОтметкаДО");
		ВидыОтметки.Добавить("ОтметкаКА");
		ВидыОтметки.Добавить("ОтметкаИД");
		ВидыОтметки.Добавить("ОтметкаИП");
		Для Каждого ВидОтметки Из ВидыОтметки Цикл 
			мСтрок = Объект.ТЧ.НайтиСтроки(Новый Структура(ВидОтметки,Истина));
			Для Каждого Стр Из мСтрок Цикл
				ИндексСтроки = Стр.НомерСтроки - 1;
				Файл = Новый Файл(Стр.ОригиналСкана);
				Расширение = Файл.Расширение;
				Размер = ОкруглитьРазмерФайла(Строка(Файл.Размер()));
				ФайлДвДанные = Новый ДвоичныеДанные(Стр.ОригиналСкана);
				ДобавитьВПрекрепляемыеФайлыСКлиент(ВидОтметки,ИндексСтроки,ФайлДвДанные,Расширение,Размер,
					ТипФайла,ДетализацияПоИд,ХранитьПрикрепляемыеФайлыНаСервере,КаталогХраненияПрикрепляемыхФайловНаСервере);	
			КонецЦикла;
		КонецЦикла;
	Иначе // по умолчанию всегда на сервере, даже если не заполнена настройка т.к. ранее выполнялось только на сервере
		ДобавитьВПрекрепляемыеФайлыНаСервере();
	КонецЕсли;
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Прикрепление документов завершено";
	Сообщение.Сообщить();
КонецПроцедуры

&НаСервере 
Функция ТипПрикрепляемогоФайла()

	Возврат Настройка.ТипыПрикрепляемыхФайлов;

КонецФункции // ТипПрикрепляемогоФайла()

&НаСервере
Функция ДетализацияПоИд()

	Возврат Константы.ДетализацияПоИД.Получить();

КонецФункции // ДетализацияПоИд()

&НаСервере
Функция ХранитьПрикрепляемыеФайлыНаСервере()

	Возврат Константы.ХранитьПрикрепляемыеФайлыНаСервере.Получить();

КонецФункции // ХранитьПрикрепляемыеФайлыНаСервере()

&НаСервере
Функция КаталогХраненияПрикрепляемыхФайловНаСервере()

	Возврат Константы.КаталогХраненияПрикрепляемыхФайловНаСервере.Получить();

КонецФункции // КаталогХраненияПрикрепляемыхФайловНаСервере()

&НаСервере
Функция ВыполнятьНа()

	Возврат Настройка.ВыполнятьНа;

КонецФункции // ВыполнятьНа()

&НаКлиенте
Процедура ТЧПриАктивизацииСтроки(Элемент)
	Если ПоказыватьСкрытьДокумент Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено И НЕ ЗначениеЗаполнено(ТекущиеДанные.Страница) Тогда
			ОднаКартинка = КаталогПросмотра + ТекущиеДанные.Наименование + ".jpeg";
			ПерваяКартинка = КаталогПросмотра + ТекущиеДанные.Наименование + "-0" + ".jpeg";
			ФайлОднаКартинка = Новый Файл(ОднаКартинка);
			ФайлПерваяКартинка = Новый Файл(ПерваяКартинка);
			Если ФайлОднаКартинка.Существует() Тогда
				СсылкаНаКартинку = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ОднаКартинка));
				ТекущиеДанные.Страница = 0;
				Элементы.СсылкаНаКартинку.Заголовок = "Страница номер 1";
			ИначеЕсли ФайлПерваяКартинка.Существует() Тогда
				СсылкаНаКартинку = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПерваяКартинка));
				ТекущиеДанные.Страница = 0;
				Элементы.СсылкаНаКартинку.Заголовок = "Страница номер 1";
			КонецЕсли;
		ИначеЕсли ТекущиеДанные <> Неопределено И ТекущиеДанные.Страница = -1 Тогда
			ОднаКартинка = КаталогПросмотра + ТекущиеДанные.Наименование + ".jpeg";
			СсылкаНаКартинку = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ОднаКартинка));
			Элементы.СсылкаНаКартинку.Заголовок = "Страница номер 1";
		ИначеЕсли ТекущиеДанные <> Неопределено И ТекущиеДанные.Страница > -1 Тогда
			ПерваяКартинка = КаталогПросмотра + ТекущиеДанные.Наименование + "-" + ТекущиеДанные.Страница + ".jpeg";
			СсылкаНаКартинку = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПерваяКартинка));
			Элементы.СсылкаНаКартинку.Заголовок = "Страница номер " + (ТекущиеДанные.Страница + 1);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СледующаяСтраница(Команда)
	Если ПоказыватьСкрытьДокумент Тогда
		ТекущиеДанные = Элементы.ТЧ.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ПерваяКартинка = КаталогПросмотра + ТекущиеДанные.Наименование + "-" + (ТекущиеДанные.Страница + 1) + ".jpeg";
			ФайлПерваяКартинка = Новый Файл(ПерваяКартинка);
			Если ФайлПерваяКартинка.Существует() Тогда			
				ТекущиеДанные.Страница = ТекущиеДанные.Страница + 1;
				Элементы.СсылкаНаКартинку.Заголовок = "Страница номер " + (ТекущиеДанные.Страница + 1);
				СсылкаНаКартинку = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПерваяКартинка));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущаяСтраница(Команда)
	Если ПоказыватьСкрытьДокумент Тогда
		ТекущиеДанные = Элементы.ТЧ.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ПерваяКартинка = КаталогПросмотра + ТекущиеДанные.Наименование + "-" + (ТекущиеДанные.Страница - 1) + ".jpeg";
			ФайлПерваяКартинка = Новый Файл(ПерваяКартинка);
			Если ФайлПерваяКартинка.Существует() Тогда
				СсылкаНаКартинку = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПерваяКартинка));
				ТекущиеДанные.Страница = ТекущиеДанные.Страница - 1;
				Элементы.СсылкаНаКартинку.Заголовок = "Страница номер " + (ТекущиеДанные.Страница - 1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДокумент(Команда)
	Если Элементы.ГруппаПраво.Видимость Тогда
		Элементы.ГруппаПраво.Видимость = Ложь;
		ПоказыватьСкрытьДокумент = Ложь;
	Иначе
		Элементы.ГруппаПраво.Видимость = Истина; 
		ПоказыватьСкрытьДокумент = Истина;
		ТекущиеДанные = Элементы.ТЧ.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ОднаКартинка = КаталогПросмотра + ТекущиеДанные.Наименование + ".jpeg";
			ПерваяКартинка = КаталогПросмотра + ТекущиеДанные.Наименование + "-0" + ".jpeg";
			ФайлОднаКартинка = Новый Файл(ОднаКартинка);
			ФайлПерваяКартинка = Новый Файл(ПерваяКартинка);
			Если ФайлОднаКартинка.Существует() Тогда
				СсылкаНаКартинку = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ОднаКартинка));
			ИначеЕсли ФайлПерваяКартинка.Существует() Тогда
				СсылкаНаКартинку = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПерваяКартинка));
				ТекущиеДанные.Страница = 0;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если НеУдалятьВременныеФайлы = Ложь Тогда      
		Попытка
			ПутьВременныеКаталоги = ПутьВременныеКаталогиНаСервере();
			УдалитьВременныеКаталогиНаСервере(ПутьВременныеКаталоги); 
		Исключение
			а = 1; 	
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)	
	Если НЕ ЗавершениеРаботы Тогда
		Если ОтветПередЗакрытием <> Истина Тогда
			Отказ = Истина;
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОповещениеОЗакрытии, "Вы хотите закрыть форму?", РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	Иначе	
		Отказ = Истина;
		ТекстПредупреждения = "При закрытии формы все не сохраненные данные будут утеряны. Продолжить?";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда		
		ОтветПередЗакрытием = Истина;		
		Закрыть();			
	Иначе		
		ОтветПередЗакрытием = Неопределено;		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметки(Команда)
	СнятьПоВидуОтметки("ОтметкаДО");
	СнятьПоВидуОтметки("ОтметкаКА");
	СнятьПоВидуОтметки("ОтметкаИД");
	СнятьПоВидуОтметки("ОтметкаИП");
КонецПроцедуры

&НаКлиенте
Процедура СнятьПоВидуОтметки(ВидОтметки)
	мСтрок = Объект.ТЧ.НайтиСтроки(Новый Структура(ВидОтметки,Истина));
	Для Каждого Стр Из мСтрок Цикл
		Стр[ВидОтметки] = Ложь;		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметки(Команда)
	Для Каждого Стр Из Объект.ТЧ Цикл
		Если ЗначениеЗаполнено(Стр.ИсполнительныйДокумент) Тогда
			Стр.ОтметкаИД = Истина;
		ИначеЕсли ЗначениеЗаполнено(Стр.ИсполнительноеПроизводство) Тогда
			Стр.ОтметкаИП = Истина;
		ИначеЕсли ЗначениеЗаполнено(Стр.ДолговоеОбязательство) Тогда
			Стр.ОтметкаДО = Истина;
		ИначеЕсли ЗначениеЗаполнено(Стр.Контрагент) Тогда
			Стр.ОтметкаКА = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбработатьБезПодгатовкиНаСервере()
	сНастройка = ПолучитьНастройкиНаСервере(Настройка);
	ПутьВременныеКаталоги = ПутьВременныеКаталогиНаСервере();
	ОбходТХТНаСервере(ПутьВременныеКаталоги, сНастройка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьБезПодгатовкиНаКлиенте()
	сНастройка = ПолучитьНастройкиНаСервере(Настройка);
	ПутьВременныеКаталоги = ПутьВременныеКаталогиНаСервере();
	ОбходТХТНаКлиенте(ПутьВременныеКаталоги, сНастройка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьБезПодгатовки(Команда)

	Если Не УправлениеДоступами.ЕстьДоступНаПарсинг() Тогда
	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Нужны права на парсинг!";
		Сообщение.Сообщить();
		Возврат;
	
	КонецЕсли;
	
	ВыполнятьНа = ВыполнятьНа();
	Если ВыполнятьНа = "2" Тогда
		ОбработатьБезПодгатовкиНаКлиенте();	
	Иначе
		ОбработатьБезПодгатовкиНаСервере();
	КонецЕсли;
	ОформитьТЧНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТЧОтметкаКАПриИзменении(Элемент)
	ОформитьТЧНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТЧОтметкаДОПриИзменении(Элемент)
	ОформитьТЧНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТЧОтметкаИДПриИзменении(Элемент)
	ОформитьТЧНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТЧОтметкаИППриИзменении(Элемент)
	ОформитьТЧНаСервере();
КонецПроцедуры


Процедура ПровестиПоследовательность(ЭтотОбъект) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ 
	                      |	ПоступлениеПлатежа.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.ПоступлениеПлатежа КАК ПоступлениеПлатежа
	                      |ГДЕ
	                      |	ПоступлениеПлатежа.Займ = &Займ
	                      |	И ПоступлениеПлатежа.ДатаПлатежа >= &МоментВремени
	                      |	И ПоступлениеПлатежа.Проведен = ИСТИНА
	                      |	И ПоступлениеПлатежа.Ссылка <> &Ссылка
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ПоступлениеПлатежа.ДатаПлатежа,
	                      |	Ссылка");
	Запрос.УстановитьПараметр("Займ", ЭтотОбъект.Займ);
	Запрос.УстановитьПараметр("МоментВремени", ЭтотОбъект.ДатаПлатежа);
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("МоментВремениДок", ЭтотОбъект.МоментВремени());
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Для Каждого стр Из Результат Цикл
		ДокументОбъект = стр.Ссылка.ПолучитьОбъект();
		
		Для Каждого Движение ИЗ ДокументОбъект.Движения Цикл
			Если Движение.Количество() > 0 Тогда
				Точка = Найти(Строка(Движение), ".");
				ВидРегистра = "РегистрНакопления";
				РегистрИмя = СокрП(Сред(Строка(Движение), Точка + 1));
				НаборЗаписей = РегистрыНакопления[РегистрИмя].СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);            
			Иначе
				НаборЗаписей = Движение;
			КонецЕсли;
			Попытка
				НаборЗаписей.Записать();
			Исключение
				//Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
		
		ДокументОбъект.Проведен = Ложь;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		//ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Стадия = ОбъектыСервер.ОпределитьВариантУчетаЗадолженности2(ЭтотОбъект.Займ,ДокументОбъект.ДатаПлатежа);
		Если Стадия = Перечисления.СтадииЗадолженности.Судебная Тогда 
			ДокументОбъект.РаспределитьПоСудебнымРешениям();
			ДокументОбъект.Движения.ЗадолженностьПоСудебнымРешениям.Записывать = Истина;
			Для Каждого ТекСтрокаРазнесениеПоСудебнымРешениям Из ДокументОбъект.РазнесениеПоСудебнымРешениям Цикл
				Движение = ДокументОбъект.Движения.ЗадолженностьПоСудебнымРешениям.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
				Движение.ВидДвиженияЗадолженности = Перечисления.ВидДвиженияЗадолженности.Оплата;
				Движение.Период = ДокументОбъект.ДатаПлатежа;
				Движение.Займ = ДокументОбъект.Займ;
				Движение.Решение = ТекСтрокаРазнесениеПоСудебнымРешениям.Решение;
				Движение.ЧастьРешения = ТекСтрокаРазнесениеПоСудебнымРешениям.ЧастьРешения;
				Движение.ТипЗадолженности = ТекСтрокаРазнесениеПоСудебнымРешениям.ТипЗадолженности;
				Движение.Сумма = ТекСтрокаРазнесениеПоСудебнымРешениям.Сумма;
			КонецЦикла;	
			ДокументОбъект.Движения.ЗадолженностьПоСудебнымРешениям.Записать();
			ДокументОбъект.Проведен = Истина;
			
		Иначе
			ДокументОбъект.РаспределитьПоВнесудебке();
			ДокументОбъект.Движения.ЗадолженностьПоОбъектамВнесудебная.Записывать = Истина;
			Если ДокументОбъект.РазнесениеПоВнесудебке.Количество() > 0 Тогда
				Движение = ДокументОбъект.Движения.ЗадолженностьПоОбъектамВнесудебная.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
				Движение.ВидДвиженияЗадолженности = Перечисления.ВидДвиженияЗадолженности.Оплата;
				Движение.Период = ДокументОбъект.ДатаПлатежа;
				Движение.Объект = ДокументОбъект.Займ;
				
				Для Каждого ТекСтрокаРазнесениеПоВнесудебке Из ДокументОбъект.РазнесениеПоВнесудебке Цикл
					Движение[ТекСтрокаРазнесениеПоВнесудебке.ТипЗадолженности.ИмяПредопределенныхДанных + "ДО"] = Движение[ТекСтрокаРазнесениеПоВнесудебке.ТипЗадолженности.ИмяПредопределенныхДанных + "ДО"] + ТекСтрокаРазнесениеПоВнесудебке.Сумма;	
					Движение[ТекСтрокаРазнесениеПоВнесудебке.ТипЗадолженности.ИмяПредопределенныхДанных + "Регл"] = Движение[ТекСтрокаРазнесениеПоВнесудебке.ТипЗадолженности.ИмяПредопределенныхДанных + "Регл"] + ТекСтрокаРазнесениеПоВнесудебке.Сумма;
				КонецЦикла;
				
			КонецЕсли;  
			
			ДокументОбъект.ПосчитатьОбщуюСуммуПоВнесудебке(Движение, ДокументОбъект.РазнесениеПоВнесудебке);
			
			
			Если ДокументОбъект.НеразнесеннаяСумма > 0 Тогда
				Движение = ДокументОбъект.Движения.ЗадолженностьПоОбъектамВнесудебная.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
				Движение.ВидДвиженияЗадолженности = Перечисления.ВидДвиженияЗадолженности.Оплата;
				Движение.Период = ДокументОбъект.ДатаПлатежа;	
				Движение.Объект = ДокументОбъект.Займ;
				
				СоставляющаяСписания = РасчетЗадолженностиВнесудебка.СоставляющаяСписанияПриПереплате();
				Движение[СоставляющаяСписания.ИмяПредопределенныхДанных + "ДО"] = ДокументОбъект.НеразнесеннаяСумма;
				Движение[СоставляющаяСписания.ИмяПредопределенныхДанных + "Регл"] = ДокументОбъект.НеразнесеннаяСумма;
				Движение.СуммаДО = ДокументОбъект.НеразнесеннаяСумма;
				Движение.СуммаРегл = ДокументОбъект.НеразнесеннаяСумма;		
			КонецЕсли;
			
			// Проводить документы в отдельной транзакции
			НачатьТранзакцию();
			ДокументОбъект.Движения.ЗадолженностьПоОбъектамВнесудебная.Записать();
			ЗафиксироватьТранзакцию();
			ДокументОбъект.Проведен = Истина;
		КонецЕсли;
		
		// Проводить документы в отдельной транзакции
		НачатьТранзакцию();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		ЗафиксироватьТранзакцию();
		
		//ДокументОбъект.РаспределитьПоСудебнымРешениям();
		//ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	КонецЦикла;
КонецПроцедуры

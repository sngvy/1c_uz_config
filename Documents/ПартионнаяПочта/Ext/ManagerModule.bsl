
#Область ПрограммныйИнтерфейс

Функция НастройкиПереводаПартииВАрхив(РеквизитИмяПартии) Экспорт

	ДанныеПодключения = ПолучитьДанныеТокенИлиКлюч();
	
	Токен = ДанныеПодключения.Токен; 
	Ключ = ДанныеПодключения.Ключ; 
	
	СерверПочтыРФ = ПолучитьСерверПочтаРФ();      
	РесурсПочтаРФ = АдресПереводПартииВАрхив();
	
	СтрокаJSON = ПолучитьStrJSON(РеквизитИмяПартии);
	Если ПустаяСтрока(СтрокаJSON) Тогда
	
		Ответ = Новый Структура;
		Ответ.Вставить("Результат", Ложь);
		Ответ.Вставить("Данные", "Нет данных для запроса");
		
		Возврат Ответ;
	
	КонецЕсли;
	
	HTTPЗапрос = ЗапросПоАдресуКПочтеРФ(Токен, Ключ, РесурсПочтаРФ, СтрокаJSON); 
	HTTP = СоздатьЗащищенноеСоединение(СерверПочтыРФ);  
	ОтветHTTP = ПолучитьОтветJSONДляПередачиВАрхив(HTTP, HTTPЗапрос);
	
	Возврат ОтветHTTP;
	
КонецФункции 

Функция НастройкиВозвратаПартииИзАрхива(РеквизитИмяПартии) Экспорт

	ДанныеПодключения = ПолучитьДанныеТокенИлиКлюч();
	
	Токен = ДанныеПодключения.Токен; 
	Ключ = ДанныеПодключения.Ключ; 
	
	СерверПочтыРФ = ПолучитьСерверПочтаРФ();      
	РесурсПочтаРФ = АдресВозвратаПартииИзАрхива();
	
	СтрокаJSON = ПолучитьStrJSON(РеквизитИмяПартии);
	Если ПустаяСтрока(СтрокаJSON) Тогда
	
		Ответ = Новый Структура;
		Ответ.Вставить("Результат", Ложь);
		Ответ.Вставить("Данные", "Нет данных для запроса");
		
		Возврат Ответ;
	
	КонецЕсли;
	
	HTTPЗапрос = ЗапросПоАдресуКПочтеРФ(Токен, Ключ, РесурсПочтаРФ, СтрокаJSON); 
	HTTP = СоздатьЗащищенноеСоединение(СерверПочтыРФ);  
	ОтветHTTP = ПолучитьОтветJSONДляВозвратаИзАрхива(HTTP, HTTPЗапрос);

	Возврат ОтветHTTP;
	
КонецФункции 

#КонецОбласти

#Область Конфигурация

Функция ПолучитьСерверПочтаРФ() Экспорт
	
	Сервер = "otpravka-api.pochta.ru";
	Возврат Сервер;	
	
КонецФункции 

Функция АдресПереводПартииВАрхив() Экспорт
	
	Ресурс = "/1.0/archive";
	Возврат Ресурс;	
	
КонецФункции 

Функция АдресВозвратаПартииИзАрхива() Экспорт
	
	Ресурс = "/1.0/archive/revert";
	Возврат Ресурс;	
	
КонецФункции 

#КонецОбласти

Функция ПолучитьStrJSON(РеквизитИмяПартии)

	Партии = ПолучитьМассивСИменемПартии(РеквизитИмяПартии);
	Если Партии.Количество() = 0 Тогда
	
		Возврат "";
	
	КонецЕсли;
	
	тЗаписьJSON = Новый ЗаписьJSON;
	тПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);
	тЗаписьJSON.УстановитьСтроку(тПараметрыJSON);
	ЗаписатьJSON(тЗаписьJSON, Партии);
	strJSON = тЗаписьJSON.Закрыть();
	
	Возврат strJSON; 

КонецФункции

Функция ПолучитьОтветJSONДляПередачиВАрхив(HTTP, HTTPЗапрос) 

	ОтветАрхив = Новый Структура();
	ОтветАрхив.Вставить("Результат", Ложь);
	ОтветАрхив.Вставить("Данные", "");
	
	СчетчикПопыток = 1;
	Пока СчетчикПопыток < 20 Цикл

		Попытка

			Ответ = HTTP.Записать(HTTPЗапрос);	
			
			Если Ответ.КодСостояния <> 200 Тогда
		
				ОтветАрхив.Данные = ОшибкаОтрицательныйОтветСервиса(Ответ.КодСостояния);
				Возврат ОтветАрхив;
			
			КонецЕсли;
			
			ОтветАрхив.Результат = Истина; 
			ОтветАрхив.Данные = Ответ.ПолучитьТелоКакСтроку("UTF-8");
			
			Прервать;
			
		Исключение
			
			СчетчикПопыток = СчетчикПопыток + 1;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если СчетчикПопыток >= 20 Тогда	
		
		ОтветАрхив.Данные = ОшибкаПревышенЛимитПопыток();
		Возврат ОтветАрхив.Данные; 	
		
	КонецЕсли;
	
	Возврат ОтветАрхив;
	
КонецФункции

Функция ПолучитьОтветJSONДляВозвратаИзАрхива(HTTP, HTTPЗапрос) 
	
	ОтветАрхив = Новый Структура();
	ОтветАрхив.Вставить("Результат", Ложь);
	ОтветАрхив.Вставить("Данные", "");
	
	СчетчикПопыток = 1;
	Пока СчетчикПопыток < 20 Цикл
		Попытка
			
			Ответ = HTTP.ОтправитьДляОбработки(HTTPЗапрос); 
			
			Если Ответ.КодСостояния <> 200 Тогда
								
				ОтветАрхив.Данные = ОшибкаОтрицательныйОтветСервиса(Ответ.КодСостояния);

				Возврат ОтветАрхив;
			
			КонецЕсли;
			
			ОтветАрхив.Результат = Истина;
			ОтветАрхив.Данные = Ответ.ПолучитьТелоКакСтроку("UTF-8");
	
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Партия успешно возвращена из архив!";
			Сообщение.Сообщить();
			
			Возврат ОтветАрхив;
			
		Исключение
			СчетчикПопыток = СчетчикПопыток + 1;
		КонецПопытки; 
		
	КонецЦикла;
	
	Если СчетчикПопыток >= 20 Тогда
		
		ОтветАрхив.Данные = ОшибкаПревышенЛимитПопыток();
		Возврат ОтветАрхив.Данные; 	
		
	КонецЕсли;
			
КонецФункции

Функция СоздатьЗащищенноеСоединение(Сервер)
	
	SSL = Новый ЗащищенноеСоединениеOpenSSL;
	HTTP = Новый HTTPСоединение(Сервер, 443, , , , , SSL);  
	Возврат HTTP;
	
КонецФункции

Функция БазовыйЗапросКПочтеРФ(Токен, Ключ, strJSON)
	
	Запрос = Новый HTTPЗапрос;
	Запрос.Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
	Запрос.Заголовки.Вставить("Authorization", "AccessToken " + Токен);
	Запрос.Заголовки.Вставить("X-User-Authorization", "Basic " + Ключ);
	Запрос.УстановитьТелоИзСтроки(strJSON);
	Возврат Запрос;
	
КонецФункции

// Массив требует сервис Почта РФ
Функция ПолучитьМассивСИменемПартии(ИмяПартии)
	
	Партии = Новый Массив();
	Если ПустаяСтрока(ИмяПартии) Тогда
	
		Возврат Партии;
	
	КонецЕсли;
	
	Партии.Добавить(ИмяПартии);
	
	Возврат Партии;
	
КонецФункции 

Функция ЗапросПоАдресуКПочтеРФ(Токен, Ключ, Ресурс, strJSON)
	
 	БазовыйЗапрос = БазовыйЗапросКПочтеРФ(Токен, Ключ, strJSON);
	БазовыйЗапрос.АдресРесурса = Ресурс;
	Возврат БазовыйЗапрос;
	
КонецФункции

Функция ПолучитьДанныеТокенИлиКлюч()
	
	Данные = Новый Структура();
	Данные.Вставить("Токен", бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("токен")); 
	Данные.Вставить("Ключ", бит_ИнтеграцияПочтаРФ.ПолучитьТокенИлиКлюч("ключ")); 	
	Возврат Данные;
	
КонецФункции 

#Область ОшибкиОбращенияКПочте

Функция ОшибкаОтрицательныйОтветСервиса(КодСостояния)

	Возврат СтрШаблон("Что-то пошло не так, код ошибки HTTP %1", КодСостояния);

КонецФункции 

Функция ОшибкаПревышенЛимитПопыток()

	Возврат "Закончился лимит попыток получения ответа от сервиса Почта РФ. Ответ не получен";

КонецФункции // ()

#КонецОбласти

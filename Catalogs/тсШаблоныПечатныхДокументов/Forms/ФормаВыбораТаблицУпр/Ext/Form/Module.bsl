&НаСервере
Перем ТекущаяТабличнаяЧасть1 Экспорт;


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВыборПЛ = Элементы.ВыборПЛ.СписокВыбора[0].Значение;
	
	Если Не ТекущаяТабличнаяЧасть = Неопределено Тогда
		//ВыборПЛ = ТекущаяТабличнаяЧасть;
		Элементы.ВыборПЛ.Доступность = Ложь;
	КонецЕсли;
	//Название = Параметры.НазваниеТаблици1;
	ВыборПЛОбработкаВыбора1(, ВыборПЛ,);

	//ПоказыватьДополнительныеУсловияОтбора = Константы.тсПоказыватьДополнительныеУсловияОтбора.Получить();
	ПоказыватьДополнительныеУсловияОтбора = Ложь;
	
	Если НЕ ПоказыватьДополнительныеУсловияОтбора Тогда
		Элементы.ТабМетаданные.ПодчиненныеЭлементы.тзМетаданныеДополнительныйОтбор.Видимость = Ложь;
		Элементы.ТабМетаданные.ПодчиненныеЭлементы.тзМетаданныеСвязьСоСтрокойПоПолю.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыборПЛОбработкаВыбора1(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//Параметры.НазваниеТаблици1
	ПриСозданииНаСервере(,,Истина);	
	
	//тзМетаданные = Неопределено;
	НомерСтроки = 0;
	
	// Отображаемые колонки.
	//тзМетаданные.Колонки.Добавить("Номер",, "№", );
	//тзМетаданные.Колонки.Добавить("Синоним");
	//тзМетаданные.Колонки.Добавить("ПутьКРеквизиту");      
	//тзМетаданные.Колонки.Добавить("ДополнительныйОтбор");
	//тзМетаданные.Колонки.Добавить("СвязьСоСтрокойПоПолю");
	//
	////Не отображаемые колонки. 
	////тзМетаданные.Колонки.Добавить("Значение");
	//тзМетаданные.Колонки.Добавить("Имя");
	//   тзМетаданные.Колонки.Добавить("Хранилище");
	//тзМетаданные.Колонки.Добавить("ХранилищеДополнительногоОтбора");
	//
	//тзМетаданные.Колонки.Добавить("Свойство");
	//тзМетаданные.Колонки.Добавить("ВидСтроки");

	
	// Сначало добавляем номер строки.
	ТекСтрока = тзМетаданные.Добавить();
	НомерСтроки = НомерСтроки+1;
	ТекСтрока.Номер = НомерСтроки;
	ТекСтрока.Синоним = "Номер строки";
	ТекСтрока.Имя = "НомерСтроки";
	ТекСтрока.ПутьКРеквизиту = "[Номер строки]"; 	
	Список = Новый СписокЗначений;
	Список.Добавить(ТекСтрока.Имя);
	ТекСтрока.Хранилище = Список;
	//сзРеквизитовТЧ = Новый СписокЗначений;
	//сзРеквизитовТЧ.Добавить(ТекСтрока.Имя, ТекСтрока.Синоним);
	Элементы.ТабМетаданные.ПодчиненныеЭлементы.тзМетаданныеСвязьСоСтрокойПоПолю.СписокВыбора.Добавить(ТекСтрока.Имя, ТекСтрока.Синоним);
	//отИзмеренияИндекс = ПолучитьТипыИзмеренияИндекс();
    отИзмеренияИндекс = Неопределено;
    СтрокаСовпадения = Неопределено;
	
	ТипТекТЧ = Тип(Документ[ТекущаяТабличнаяЧасть1.Имя]);
	ЭтоХранилищеТЗ = ТипТекТЧ = Тип("ХранилищеЗначения");
	
	Для каждого  Объект из ?(ЭтоХранилищеТЗ, Документ[ТекущаяТабличнаяЧасть1.Имя].Получить().Колонки, ТекущаяТабличнаяЧасть1.Реквизиты) Цикл
		
		ОбъектСиноним = Объект[?(ЭтоХранилищеТЗ, "Заголовок", "Синоним")];
		ТекСтрока = тзМетаданные.Добавить();
		НомерСтроки = НомерСтроки+1;
		ТекСтрока.Номер = НомерСтроки;
		ТекСтрока.Синоним = ОбъектСиноним;
		//ТекСтрока.Значение = Документ[ВыборПЛ][Объект.Имя];			
		ТекСтрока.Имя = Объект.Имя;	
		ТекСтрока.ПутьКРеквизиту = "["+ОбъектСиноним+"]";
		Список = Новый СписокЗначений;
		Список.Добавить(ТекСтрока.Имя);
		ТекСтрока.Хранилище = Список;

		
		Если ТекСтрока.Имя = РеквизитТЧ Тогда
			Если Не ПустаяСтрока(ПутьКРеквизиту) Тогда
				ТекСтрока.ПутьКРеквизиту = ПутьКРеквизиту;
			Иначе
				ТекСтрока.ПутьКРеквизиту = "["+Объект.Синоним+"]"; 	
			КонецЕсли;
			//Список = Новый СписокЗначений;
			//Список.Добавить(ТекСтрока.Имя);
			//ТекСтрока.Хранилище = Список;
			//ТекСтрока.ХранилищеДополнительногоОтбора = ХранилищеДополнительногоОтбора;
		    //ТекСтрока.Свойство =  Свойство;
			//ТекСтрока.ВидСтроки =  ВидСтроки;
			ТекСтрока.СвязьСоСтрокойПоПолю = СвязьСоСтрокойПоПолю;
            ТекСтрока.ДополнительныйОтбор = ДополнительныйОтбор;
            СтрокаСовпадения =  ТекСтрока;
		Иначе	
			ТекСтрока.ПутьКРеквизиту = "["+ОбъектСиноним+"]"; 				
		КонецЕсли;

		ОбъектТип = Объект[?(ЭтоХранилищеТЗ, "ТипЗначения", "Тип")];
		
		//Для каждого Тип  Из ОбъектТип.Типы() Цикл
		//	Если отИзмеренияИндекс.СодержитТип(Тип) Тогда
		//		Если Найти (Объект.Имя, "Номер") Или Найти (Объект.Имя, "UID") Или Найти (Объект.Имя, "Индекс") Тогда
		//			сзРеквизитовТЧ.Вставить(1, Объект.Имя, ОбъектСиноним);	 
		//		Иначе
		//			сзРеквизитовТЧ.Добавить(Объект.Имя, ОбъектСиноним);		
		//		КонецЕсли;
		//	КонецЕсли;		
		//КонецЦикла; 
		
	КонецЦикла;	 						
	
		
	//Если Не СтрокаСовпадения = Неопределено Тогда
	//	Элементы.ТабМетаданные.ТекущаяСтрока = СтрокаСовпадения;
	//КонецЕсли;
	
	//Элементы.ТабМетаданные.ПодчиненныеЭлементы.тзМетаданныеСвязьСоСтрокойПоПолю.СписокВыбора = сзРеквизитовТЧ;	
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьСписокОбъектов ()
	
	//СписокПЛ = Новый Массив;
		
	НомерСтроки = 0;
	ТекОбъект = Неопределено;

	
	//Для каждого  Объект из Документ.Метаданные().ТабличныеЧасти Цикл
	НомерСтроки = НомерСтроки + 1;
	//
	//СписокПЛ.Добавить(ТекущаяТабличнаяЧасть1.Имя, "№ "+НомерСтроки+".  "+ТекущаяТабличнаяЧасть1.Синоним);	
	//КонецЦикла;
	
	
	Элементы.ВыборПЛ.СписокВыбора.Добавить(ТекущаяТабличнаяЧасть1.Имя, "№ "+НомерСтроки+".  "+ТекущаяТабличнаяЧасть1.Синоним);

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ВнешнийВызов = Ложь)
	
	Название = ЭтаФорма.Параметры.НазваниеТаблици1;
	ПолучитьТекТабЧасть(Название);	
	Если ВнешнийВызов = Ложь Тогда 
		ПодготовитьСписокОбъектов();
	Конецесли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТекТабЧасть(НазваниеТаблПолное)
    
	//НазваниеТаблПолное = ЭтаФорма.Параметры.НазваниеТаблици1;
	
	Название = НазваниеТаблПолное;
	Точка = Найти(Название, ".");
	НазваниеДокумента = Сред(НазваниеТаблПолное, Точка+1);
	ТочкаДок1 = Найти(НазваниеДокумента, ".");
	Если ТочкаДок1 > 0 Тогда
		НазваниеДокумента = Лев(НазваниеДокумента, ТочкаДок1-1);
	КонецЕсли;
	НазваниеДокумента = СтрЗаменить(НазваниеДокумента, "[", "");
	НазваниеДокумента = СтрЗаменить(НазваниеДокумента, "]", "");
	ДокументПоиска = УЭДСервер.ПолучитьТипИзСтроки(НазваниеДокумента);
	ПоискДокумента = Метаданные.НайтиПоТипу(ДокументПоиска);
	Если Точка > 0 Тогда
		Название = Лев(Название, Точка-1);
	КонецЕсли;
	Название = СтрЗаменить(Название, "[", "");
	Название = СтрЗаменить(Название, "]", "");
	ТаблЧасть = ПоискДокумента.ТабличныеЧасти;
	Для Каждого Стр Из ПоискДокумента.ТабличныеЧасти Цикл
		Если Стр.Синоним = Название Тогда
			ТекущаяТабличнаяЧасть1 = Стр;
			ЭтаФорма.Параметры.ИмяТаблици = Стр.Имя;
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПолучитьТекТабЧасть()


&НаКлиенте
Процедура ВыборПЛОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
		
	
	//тзМетаданные = Неопределено;
	НомерСтроки = 0;
	
	// Отображаемые колонки.
	//тзМетаданные.Колонки.Добавить("Номер",, "№", );
	//тзМетаданные.Колонки.Добавить("Синоним");
	//тзМетаданные.Колонки.Добавить("ПутьКРеквизиту");      
	//тзМетаданные.Колонки.Добавить("ДополнительныйОтбор");
	//тзМетаданные.Колонки.Добавить("СвязьСоСтрокойПоПолю");
	//
	////Не отображаемые колонки. 
	////тзМетаданные.Колонки.Добавить("Значение");
	//тзМетаданные.Колонки.Добавить("Имя");
	//   тзМетаданные.Колонки.Добавить("Хранилище");
	//тзМетаданные.Колонки.Добавить("ХранилищеДополнительногоОтбора");
	//
	//тзМетаданные.Колонки.Добавить("Свойство");
	//тзМетаданные.Колонки.Добавить("ВидСтроки");

	
	// Сначало добавляем номер строки.
	ТекСтрока = тзМетаданные.Добавить();
	НомерСтроки = НомерСтроки+1;
	ТекСтрока.Номер = НомерСтроки;
	ТекСтрока.Синоним = "Номер строки";
	ТекСтрока.Имя = "НомерСтроки";
    ТекСтрока.ПутьКРеквизиту = "[Номер строки]"; 	
	
	сзРеквизитовТЧ = Новый СписокЗначений;
	сзРеквизитовТЧ.Добавить(ТекСтрока.Имя, ТекСтрока.Синоним);
	
	//отИзмеренияИндекс = ПолучитьТипыИзмеренияИндекс();
    отИзмеренияИндекс = Неопределено;
    СтрокаСовпадения = Неопределено;
	
	ТипТекТЧ = Тип(Документ[ТекущаяТабличнаяЧасть.Имя]);
	ЭтоХранилищеТЗ = ТипТекТЧ = Тип("ХранилищеЗначения");
	
	Для каждого  Объект из ?(ЭтоХранилищеТЗ, Документ[ТекущаяТабличнаяЧасть.Имя].Получить().Колонки, ТекущаяТабличнаяЧасть.Реквизиты) Цикл
		
		ОбъектСиноним = Объект[?(ЭтоХранилищеТЗ, "Заголовок", "Синоним")];
		ТекСтрока = тзМетаданные.Добавить();
		НомерСтроки = НомерСтроки+1;
		ТекСтрока.Номер = НомерСтроки;
		ТекСтрока.Синоним = ОбъектСиноним;
		//ТекСтрока.Значение = Документ[ВыборПЛ][Объект.Имя];			
		ТекСтрока.Имя = Объект.Имя;	
		ТекСтрока.ПутьКРеквизиту = "["+ОбъектСиноним+"]"; 	
		
		Если ТекСтрока.Имя = РеквизитТЧ Тогда
			Если Не ПустаяСтрока(ПутьКРеквизиту) Тогда
				ТекСтрока.ПутьКРеквизиту = ПутьКРеквизиту;
			Иначе
				ТекСтрока.ПутьКРеквизиту = "["+Объект.Синоним+"]"; 	
			КонецЕсли;
			
			ТекСтрока.Хранилище = Хранилище;
			ТекСтрока.ХранилищеДополнительногоОтбора = ХранилищеДополнительногоОтбора;
		    ТекСтрока.Свойство =  Свойство;
			ТекСтрока.ВидСтроки =  ВидСтроки;
			ТекСтрока.СвязьСоСтрокойПоПолю = СвязьСоСтрокойПоПолю;
            ТекСтрока.ДополнительныйОтбор = ДополнительныйОтбор;
            СтрокаСовпадения =  ТекСтрока;
		Иначе	
			ТекСтрока.ПутьКРеквизиту = "["+ОбъектСиноним+"]"; 				
		КонецЕсли;

		ОбъектТип = Объект[?(ЭтоХранилищеТЗ, "ТипЗначения", "Тип")];
		
		Для каждого Тип  Из ОбъектТип.Типы() Цикл
			Если отИзмеренияИндекс.СодержитТип(Тип) Тогда
		    	Если Найти (Объект.Имя, "Номер") Или Найти (Объект.Имя, "UID") Или Найти (Объект.Имя, "Индекс") Тогда
					сзРеквизитовТЧ.Вставить(1, Объект.Имя, ОбъектСиноним);	 
				Иначе
					сзРеквизитовТЧ.Добавить(Объект.Имя, ОбъектСиноним);		
				КонецЕсли;
			КонецЕсли;		
		КонецЦикла; 
		
		КонецЦикла;	 						
	
		
	Если Не СтрокаСовпадения = Неопределено Тогда
		Элементы.ТабМетаданные.ТекущаяСтрока = СтрокаСовпадения;
	КонецЕсли;
	
	Элементы.ТабМетаданные.Колонки.СвязьСоСтрокойПоПолю.ЭлементУправления.СписокВыбора = сзРеквизитовТЧ;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабМетаданныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтруктураТаблиц = Новый Структура;
    СтруктураТаблиц.Вставить("ЕстьИсточник", Истина);
    	
	СтруктураТаблиц.Вставить("Синоним", Элемент.ТекущиеДанные.ПутьКРеквизиту); 
	//ЭтаФорма.Параметры.НазваниеТаблици1
	СтруктураТаблиц.Вставить("ТабличнаяЧасть", ЭтаФорма.Параметры.ИмяТаблици);
	СтруктураТаблиц.Вставить("РеквизитТЧ", Элемент.ТекущиеДанные.Имя);
	
	ХранилищеЗначений = ПолучитьХранилище(Элемент.ТекущиеДанные.Хранилище);
	СтруктураТаблиц.Вставить("Хранилище", ХранилищеЗначений);
	СтруктураТаблиц.Вставить("ДополнительныйОтбор", Элемент.ТекущиеДанные.ДополнительныйОтбор);
    //СтруктураТаблиц.Вставить("ХранилищеДополнительногоОтбора", Элемент.ТекущиеДанные.ХранилищеДополнительногоОтбора);
	СтруктураТаблиц.Вставить("СвязьСоСтрокойПоПолю", Элемент.ТекущиеДанные.СвязьСоСтрокойПоПолю);
    //СтруктураТаблиц.Вставить("Свойство", Элемент.ТекущиеДанные.Свойство);
    //СтруктураТаблиц.Вставить("ВидСтроки", Элемент.ТекущиеДанные.ВидСтроки);
    
	ЭтаФорма.Закрыть(СтруктураТаблиц);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьХранилище(СписокЗначений);
	МассивХранилища = СписокЗначений;
	Если ТипЗнч(МассивХранилища) = Тип("СписокЗначений") Тогда
		Массив = Новый Массив;
		Для Каждого Стр из МассивХранилища Цикл
			Массив.Добавить(Стр);
		КонецЦикла;
		МассивХранилища = Массив;
	КонецЕсли;
	ХранилищеЗначений = Новый ХранилищеЗначения(МассивХранилища);
	Возврат ХранилищеЗначений;
КонецФункции

&НаКлиенте
Процедура тзМетаданныеПутьКРеквизитуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.ТабМетаданные.ТекущиеДанные.Имя = "НомерСтроки" Тогда
		Сообщить("Значение в колонке не является документом или справочником"); 
		Возврат; 
	КонецЕсли;
	
	ТипТекТЧ = Тип(Документ[Параметры.ИмяТаблици]);
	ЭтоХранилищеТЗ = ТипТекТЧ = Тип("ХранилищеЗначения");
	
	ИмяРеквизита = Элементы.ТабМетаданные.ТекущиеДанные.Имя;
	Реквизит = ?(ЭтоХранилищеТЗ, Документ[Параметры.ИмяТаблици].Получить().Колонки[ИмяРеквизита], Документ[Параметры.ИмяТаблици].Получить(0)[ИмяРеквизита]);
	//РеквизитТип = Реквизит[?(ЭтоХранилищеТЗ, "ТипЗначения", "Тип")];
	////Реквизит = ТекущаяТабличнаяЧасть.Реквизиты[ЭлементыФормы.ТабМетаданные.ТекущиеДанные.Имя];
	//Если РеквизитТип.Типы().Количество() < 1 Тогда
	//	Сообщить("Неопределен тип");
	//	Возврат;	
	//КонецЕсли; 
	
	СсылкаОбъекта = ПолучитьСсылку(Реквизит);
	//Если УЭД.ПолучитьТипОбъекта(РеквизитТип) = "Документ" Тогда
	//	СсылкаОбъекта = Документы[Метаданные.НайтиПоТипу(РеквизитТип.Типы()[0]).Имя].ПустаяСсылка();
	//ИначеЕсли УЭД.ПолучитьТипОбъекта(РеквизитТип) = "Справочник" Тогда
	//		//СсылкаОбъекта = Справочники[Метаданные.НайтиПоТипу(Прав(РеквизитТип, 12).Типы()[0]).Имя].ПустаяСсылка();
	//	Если Найти (Строка(РеквизитТип),  "Номенклатура") Тогда	
	//		СсылкаОбъекта = Справочники.Номенклатура.ПустаяСсылка();
	//	Иначе
	//		СсылкаОбъекта = Справочники[Метаданные.НайтиПоТипу(РеквизитТип.Типы()[0]).Имя].ПустаяСсылка();
	//	КонецЕсли;
	//ИначеЕсли Найти (Строка(РеквизитТип), "Задача ссылка:") > 0 Тогда
	//	СсылкаОбъекта = Справочники.Номенклатура.ПустаяСсылка();
	//Иначе
	//	Сообщить("Значение в колонке не является документом или справочником", СтатусСообщения.Внимание); 
	//	Возврат; 
	//КонецЕсли;

	//СтруктураПараметров = ЭтотОбъкт.ОткрытьФормуВыбораРеквизитов (СсылкаОбъекта, ЭтаФорма, Ложь); 
	
	//Форма = Справочники.тсШаблоныПечатныхДокументов.ПолучитьФорму("ФормаВыбораРеквизитов");
	//Форма.ВладелецФормы = ЭтаФорма;
	//форма.Заголовок = "Выбор реквизитов";
	//Форма.ЗакрыватьПриЗакрытииВладельца = Истина;
	
		
	//Если Документ[ТекущаяТабличнаяЧасть.Имя].количество() < 1 Тогда
	//	Сообщить("В выбираемое таблице для выбора реквизита необходима хотя бы одна запись", СтатусСообщения.Внимание); 
	//	Возврат;	
	//КонецЕсли;
	
	
	//ТЧОбъекта = тсРаботаСДокументами.СформироватьНазваниеТЧ(Объект, Выборка.Хранилище);
	 //СформироватьНазваниеТЧ(ВызывающийДокумент, Хранилище) 

	//Форма.Документ = СсылкаОбъекта;
	//СтруктураПараметров = Форма.ОткрытьМодально();
	
	//   
	ТекущиеДанные = Элементы.ТабМетаданные.ТекущиеДанные;

    //Если Не СтруктураПараметров = Неопределено Тогда
	  //ТекущиеДанные.ЕстьИсточник = СтруктураПараметров.ЕстьИсточник;
		//Элементыформы.ТабМетаданные.ТекущиеДанные.ДополнительныйОтбор = СтруктураПараметров.Синоним+".["+ЭлементыФормы.ТабМетаданные.текущиеданные.Имя+"]";
		//Элементыформы.ТабМетаданные.ТекущиеДанные.Хранилище = СтруктураПараметров.Хранилище.Получить(); 
		
	СтруктураПараметров = ОткрытьФормуВыбораРеквизитов(СсылкаОбъекта, ЭтаФорма, Ложь);	
	
	Если Не СтруктураПараметров = Неопределено Тогда
		ТекущиеДанные.ПутьКРеквизиту = СтруктураПараметров.Синоним;
		Если ТипЗнч(СтруктураПараметров.Хранилище) = Тип("ХранилищеЗначения") Тогда
			ХранилищеЗнч = СтруктураПараметров.Хранилище.Получить();
			Список = Новый СписокЗначений;
			Для Каждого Стр Из ХранилищеЗнч Цикл
				Список.Добавить(Стр);
			КонецЦикла;
		Иначе
			Список = СтруктураПараметров.Хранилище;
		КонецЕсли;
		ТекущиеДанные.Хранилище = Список; 	
		//ТекущиеДанные.Свойство	= СтруктураПараметров.Свойство;
		//ТекущиеДанные.ВидСтроки = СтруктураПараметров.ВидСтроки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ОткрытьФормуВыбораРеквизитов(ВызывающийДокумент, ФормаВладелец = Неопределено, ПоказыватьЗначение=Истина, отФильтрТипов=Неопределено,ТекущиеДанныеПередОткрытием = Неопределено) Экспорт
	
	Если ВызывающийДокумент = Неопределено Тогда
		Сообщить("Поле На примере документа должно быть заполнено", СтатусСообщения.Внимание); 
		Возврат Неопределено;	
	КонецЕсли; 
	
	//Форма = Справочники.тсШаблоныПечатныхДокументов.ПолучитьФорму("ФормаВыбораРеквизитовУпр");
	Форма = ПолучитьФорму("Справочник.тсШаблоныПечатныхДокументов.Форма.ФормаВыбораРеквизитовУпр");
	Форма.ВладелецФормы = ФормаВладелец;
	Если ЗначениеЗаполнено(отФильтрТипов) Тогда
	
		ЗаголовогПлюс = " по типу " + """"+Строка(отФильтрТипов)+"""";
	
	КонецЕсли; 
	форма.Заголовок = "Выбор реквизитов"+ЗаголовогПлюс;
	Форма.ЗакрыватьПриЗакрытииВладельца = Истина;                      
	Форма.Документ = ВызывающийДокумент;
	Форма.отФильтрТипов = отФильтрТипов;

	Если ПоказыватьЗначение=Ложь Тогда
		Форма.Элементы.ТабМетаданныеДерево.ПодчиненныеЭлементы.тзМетаданныеЗначение.Видимость = Ложь;	
	Иначе
		Форма.Элементы.ТабМетаданныеДерево.ПодчиненныеЭлементы.тзМетаданныеЗначение.Видимость = Истина;	
	КонецЕсли;
	
 	
	//Если Не  ТекущиеДанныеПередОткрытием = Неопределено Тогда
	//	Форма.ХранилищеЗначРекв = ТекущиеДанныеПередОткрытием.Хранилище;	
	//КонецЕсли;
		
	//Чуров
	СтруктураПараметров = ОткрытьФорму(Форма);
	//СтруктураПараметров = Форма.ОткрытьМодально();
	
	Возврат СтруктураПараметров;
	
КонецФункции // ()

&НаСервере
Функция ПолучитьСсылку(РеквизитТип)

	Если УЭДСервер.ПолучитьТипОбъекта(РеквизитТип) = "Документ" Тогда
		СсылкаОбъекта = Документы[Метаданные.НайтиПоТипу(ТипЗнч(РеквизитТип)).Имя].ПустаяСсылка();
	ИначеЕсли УЭДСервер.ПолучитьТипОбъекта(РеквизитТип) = "Справочник" Тогда
			//СсылкаОбъекта = Справочники[Метаданные.НайтиПоТипу(Прав(РеквизитТип, 12).Типы()[0]).Имя].ПустаяСсылка();
		Если Найти (Строка(ТипЗнч(РеквизитТип)),  "Номенклатура") Тогда	
			СсылкаОбъекта = Справочники.Номенклатура.ПустаяСсылка();
		Иначе
			СсылкаОбъекта = Справочники[Метаданные.НайтиПоТипу(ТипЗнч(РеквизитТип)).Имя].ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли Найти (Строка(РеквизитТип), "Задача ссылка:") > 0 Тогда
		СсылкаОбъекта = Справочники.Номенклатура.ПустаяСсылка();
	Иначе
		Сообщить("Значение в колонке не является документом или справочником", СтатусСообщения.Внимание); 
		Возврат Неопределено; 
	КонецЕсли;

	Возврат СсылкаОбъекта;
	
КонецФункции // ПолучитьСсылку(РеквизитТип)()

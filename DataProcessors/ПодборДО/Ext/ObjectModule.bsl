
Функция ВидСравнения(Вид) Экспорт
	Если Вид = "Больше" Тогда
		Возврат ВидСравненияКомпоновкиДанных.Больше;
	ИначеЕсли Вид = "БольшеИлиРавно" Тогда
		Возврат ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ИначеЕсли Вид = "ВИерархии" Тогда
		Возврат ВидСравненияКомпоновкиДанных.ВИерархии;
	ИначеЕсли Вид = "ВСписке" Тогда
		Возврат ВидСравненияКомпоновкиДанных.ВСписке;
	ИначеЕсли Вид = "ВСпискеПоИерархии" Тогда
		Возврат ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
	ИначеЕсли Вид = "Заполнено" Тогда
		Возврат ВидСравненияКомпоновкиДанных.Заполнено;
	ИначеЕсли Вид = "Меньше" Тогда
		Возврат ВидСравненияКомпоновкиДанных.Меньше;
	ИначеЕсли Вид = "МеньшеИлиРавно" Тогда
		Возврат ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ИначеЕсли Вид = "НеВИерархии" Тогда
		Возврат ВидСравненияКомпоновкиДанных.НеВИерархии;
	ИначеЕсли Вид = "НеВСписке" Тогда
		Возврат ВидСравненияКомпоновкиДанных.НеВСписке;
	ИначеЕсли Вид = "НеВСпискеПоИерархии" Тогда
		Возврат ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии;
	ИначеЕсли Вид = "НеЗаполнено" Тогда
		Возврат ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ИначеЕсли Вид = "НеРавно" Тогда
		Возврат ВидСравненияКомпоновкиДанных.НеРавно;
	ИначеЕсли Вид = "НеСодержит" Тогда
		Возврат ВидСравненияКомпоновкиДанных.НеСодержит;
	ИначеЕсли Вид = "Равно" Тогда
		Возврат ВидСравненияКомпоновкиДанных.Равно;
	ИначеЕсли Вид = "Содержит" Тогда
		Возврат ВидСравненияКомпоновкиДанных.Содержит;
	КонецЕсли;
КонецФункции

Функция СоздатьТаблицуОтборов() Экспорт
	ТаблицаОтборов = Новый ТаблицаЗначений;
	ТаблицаОтборов.Колонки.Добавить("Имя");
	ТаблицаОтборов.Колонки.Добавить("Значение");
	ТаблицаОтборов.Колонки.Добавить("ВидСравнения");
	Возврат ТаблицаОтборов;	
КонецФункции

&НаСервере
Процедура ОтобратьСервер(Объекты, Подбор) Экспорт
    //Объекты.Очистить();
	//Подбор = Справочники.НастройкиПодборДО.СоздатьЭлемент();
	//Дерево = Новый ДеревоЗначений();
	//Дерево.Колонки.Добавить("Поле")
//		ТекстЗапроса = "ВЫБРАТЬ
//		               |	Таб1.Объект,
//		               |	ВЫБОР ТИПЗНАЧЕНИЯ(Таб1.Объект)
//		               |		КОГДА ТИП(Справочник.Контрагенты)
//		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.Контрагенты)
//		               |		КОГДА ТИП(Справочник.ДоговорыКонтрагентов)
//		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.ДоговорыКонтрагентов)
//		               |		КОГДА ТИП(Справочник.УслугиПоДоговору)
//		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.УслугиПоДоговорам)
//		               |		КОГДА ТИП(Справочник.ДолговыеОбязательства)
//		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.ДолговыеОбязательства)
//		               |		КОГДА ТИП(Справочник.ИсполнительныеДокументы)
//		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.ИсполнительныеДокументы)
//		               |		КОГДА ТИП(Справочник.Залоги)
//		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.Залоги)
//		               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОбъектыУчета.ПустаяСсылка)
//		               |	КОНЕЦ КАК ТипЭлемента
//		               |ПОМЕСТИТЬ Таблица
//		               |ИЗ
//		               |	РегистрНакопления.ОбъектыВРаботе.Остатки(, Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Таб1
//		               |;
//		               |
//		               |////////////////////////////////////////////////////////////////////////////////
//		               |ВЫБРАТЬ
//		               |	Таблица.Объект,
//		               |	Таблица.ТипЭлемента,
//		               |	ИСТИНА КАК Пометка
//		               |ИЗ
//		               |	Таблица КАК Таблица
//		               |ГДЕ
//		               |	ИСТИНА";
//	
//	
//	Запрос = Новый Запрос();		
//	СписокПолей = Новый СписокЗначений();
//	Стр = "ГДЕ ";	
//	Если Не СкомпоноватьСтрокуДляЗапроса(Стр, Дерево.ПолучитьЭлементы()[0], Запрос, СписокПолей) Тогда
//		Стр = "";
//		Запрос.Текст = ТекстЗапроса;
//		
//	Иначе
//		Стр = СтрЗаменить(Стр, "(Объект ", "(Таблица.Объект ");
//		Стр = СтрЗаменить(Стр, "(Объект.", "(Таблица.Объект.");
//		Стр = СтрЗаменить(Стр, " Объект ", " Таблица.Объект ");
//		Стр = СтрЗаменить(Стр, " Объект.", " Таблица.Объект.");
//		
//		Для Номер = 0 По СписокПолей.Количество() - 1 Цикл
//			Элемент = СписокПолей[Номер];
//			СинонимТаблицы = "";
//			АдресТаблицы = "";
//			СинонимПервойТаблицы = "";
//			РезультатБезКодаПВХ = "";
//			ИмяОбъектаДляСвязи = "";
//			ИмяСвойстваДляСвязи = "";
//			СвойствоСсылка = Неопределено;
//			ИмяРеквизитаДляЗначения = "";
//			
//			Результат = ПолучитьНаличиеПВХ(Элемент.Значение, СинонимТаблицы, АдресТаблицы, 
//					СинонимПервойТаблицы, РезультатБезКодаПВХ, ИмяОбъектаДляСвязи, ИмяСвойстваДляСвязи, СвойствоСсылка,
//					ИмяРеквизитаДляЗначения);
//			Если Результат <> "" Тогда
//				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " КАК " + СинонимПервойТаблицы + Символы.ПС, " КАК " + СинонимПервойТаблицы + Символы.ПС + 
//						"ЛЕВОЕ СОЕДИНЕНИЕ " + АдресТаблицы + " КАК " + СинонимТаблицы + Символы.ПС + 
//						"ПО " + РезультатБезКодаПВХ + " = " + СинонимТаблицы + "." + ИмяОбъектаДляСвязи + " И " + 
//							СинонимТаблицы + "." + ИмяСвойстваДляСвязи + " = &" + СинонимТаблицы + Символы.ПС);
//							
//				Стр = СтрЗаменить(Стр, Результат, СинонимТаблицы + "." + ИмяРеквизитаДляЗначения);			
//				Элемент.Значение = СтрЗаменить(Элемент.Значение, Результат, СинонимТаблицы + "." + ИмяРеквизитаДляЗначения);			
//				Запрос.УстановитьПараметр(СинонимТаблицы, СвойствоСсылка); 			
//				Номер = Номер - 1;
//			КонецЕсли;
//		КонецЦикла;   
//		
//		Запрос.Текст = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 6) + Сред(Стр, 5);
//	КонецЕсли;
//	    
//	
//	Объекты.Загрузить(Запрос.Выполнить().Выгрузить());
////    ОбъектыСервер.РасширитьТабличнуюЧасть(Объекты);
КонецПроцедуры


// Общая интерфейсная функция для получения файла из Интернет по протоколу http(s)
// либо ftp и сохранения его во временное хранилище.
//
// Параметры:
// ПутьДляСохранения  - строка - путь на сервере (включая имя файла), для сохранения скачанного файла
// URL           - строка - url файла в формате:
//                 [Протокол://]<Сервер>/<Путь к файлу на сервере>
// Пользователь  - строка - пользователь от имени которого установлено соединение
// Пароль        - строка - пароль пользователя от которого установлено соединение
// Порт          - число  - порт сервера с которым установлено соединение
// ЗащищенноеСоединение - Булево - для случая http загрузки флаг указывает,
//                 что соединение должно производиться через https
// ПассивноеСоединение -  - Булево - для случая ftp загрузки флаг указывает,
//                 что соединение должно пассивным (или активным)
//
// Возвращаемое значение:
// структура
// Статус - Булево - ключ присутствует в структуре всегда, значения
//                   Истина - вызов функции успешно завершен
//                   Ложь   - вызов функции завершен неудачно
// Путь - Строка - путь к файлу на сервере, ключ используется только
//                 если статус Истина
// СообщениеОбОшибке - Строка - сообщение об ошибке, если статус Ложь
//
Функция СкачатьФайлНаСервере(знач URL,
                             знач ПараметрыПолучения = Неопределено) Экспорт
	
	// Объявление переменных перед первым использованием в качестве
	// параметра метода Свойство, при анализе параметров получения файлов
	// из ПараметрыПолучения. Содержат значения переданных параметров получения файла
	Перем ПутьДляСохранения, Пользователь, Пароль, Порт,
	      ЗащищенноеСоединение, ПассивноеСоединение;
	
	// Получаем параметры получения файла
	
	Если ПараметрыПолучения = Неопределено Тогда
		ПараметрыПолучения = Новый Структура;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("ПутьДляСохранения", ПутьДляСохранения) Тогда
		ПутьДляСохранения = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Пользователь", Пользователь) Тогда
		Пользователь = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Пароль", Пароль) Тогда
		Пароль = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Порт", Порт) Тогда
		Порт = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("ЗащищенноеСоединение", ЗащищенноеСоединение) Тогда
		ЗащищенноеПассивноеСоединение = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("ПассивноеСоединение", ПассивноеСоединение) Тогда
		ЗащищенноеПассивноеСоединение = Неопределено;
	КонецЕсли;
	
	НастройкаСохранения = Новый Соответствие;
	НастройкаСохранения.Вставить("МестоХранения", "Сервер");
	НастройкаСохранения.Вставить("Путь", ПутьДляСохранения);
	
	Результат = УдалитьПолучениеФайловИзИнтернетаКлиентСервер.ПодготовитьПолучениеФайла(
	                 URL,
	                 Пользователь,
	                 Пароль,
	                 Порт,
	                 ЗащищенноеСоединение,
	                 ПассивноеСоединение,
	                 НастройкаСохранения);
	
	Возврат Результат;
	
КонецФункции

// Общая интерфейсная функция для получения файла из Интернет по протоколу http(s)
// либо ftp и сохранения его во временное хранилище.
//
// Параметры:
// URL           - строка - url файла в формате:
//                 [Протокол://]<Сервер>/<Путь к файлу на сервере>
// Пользователь  - строка - пользователь от имени которого установлено соединение
// Пароль        - строка - пароль пользователя от которого установлено соединение
// Порт          - число  - порт сервера с которым установлено соединение
// ЗащищенноеСоединение - Булево - для случая http загрузки флаг указывает,
//                          что соединение должно производиться через https
// ПассивноеСоединение -  - Булево - для случая ftp загрузки флаг указывает,
//                          что соединение должно пассивным (или активным)
//
// Возвращаемое значение:
// структура
// Статус - Булево - ключ присутствует в структуре всегда, значения
//                   Истина - вызов функции успешно завершен
//                   Ложь   - вызов функции завершен неудачно
// Путь - Строка - путь к файлу во временном хранилище,
//                 ключ используется только если статус Истина
// СообщениеОбОшибке - Строка - сообщение об ошибке, если статус Ложь
//
Функция СкачатьФайлВоВременноеХранилище(знач URL,
                                        знач ПараметрыПолучения = Неопределено) Экспорт
	
	// Объявление переменных перед первым использованием в качестве
	// параметра метода Свойство, при анализе параметров получения файлов
	// из ПараметрыПолучения. Содержат значения переданных параметров получения файла
	Перем ПутьДляСохранения, Пользователь, Пароль, Порт,
	      ЗащищенноеСоединение, ПассивноеСоединение;
	// Получаем параметры получения файла
	
	Если ПараметрыПолучения = Неопределено Тогда
		ПараметрыПолучения = Новый Структура;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("ПутьДляСохранения", ПутьДляСохранения) Тогда
		ПутьДляСохранения = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Пользователь", Пользователь) Тогда
		Пользователь = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Пароль", Пароль) Тогда
		Пароль = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Порт", Порт) Тогда
		Порт = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("ЗащищенноеСоединение", ЗащищенноеСоединение) Тогда
		ЗащищенноеПассивноеСоединение = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("ПассивноеСоединение", ПассивноеСоединение) Тогда
		ЗащищенноеПассивноеСоединение = Неопределено;
	КонецЕсли;
	
	НастройкаСохранения = Новый Соответствие;
	НастройкаСохранения.Вставить("МестоХранения", "ВременноеХранилище");
	
	Результат = УдалитьПолучениеФайловИзИнтернетаКлиентСервер.ПодготовитьПолучениеФайла(
	                 URL,
	                 Пользователь,
	                 Пароль,
	                 Порт,
	                 ЗащищенноеСоединение,
	                 ПассивноеСоединение,
	                 НастройкаСохранения);
	
	Возврат Результат;
	
КонецФункции

// Записывает двоичные данные в файл, хранящийся во временном хранилище
//
// Параметры:
// АдресВоВременномХранилище - строка - адрес двоичных данных файла 
//                 во временном хранилище
// ИмяФайла      - строка - путь по которому файл необходимо сохранить
//               на сервере
//
Функция СохранитьФайлИзВременногоХранилищаНаСервере(АдресВоВременномХранилище, ИмяФайла) Экспорт
	
	ДанныеФайла = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	ДанныеФайла.Записать(ИмяФайла);
	
	Возврат Истина;
	
КонецФункции

// Получает имя временного файла вызовом одноименной системной функции на сервере
//
Функция ПолучитьИмяВременногоФайлаНаСервере() Экспорт

	Возврат ПолучитьИмяВременногоФайла();

КонецФункции

// Возвращает параметры настройки прокси сервера на стороне сервера 1С:Предприятие
//
Функция ПолучитьНастройкиПроксиНаСервере1СПредприятие() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Константы.НастройкаПроксиСервера.Получить().Получить();
	
КонецФункции

// Возвращает параметры настройки прокси сервера на стороне сервера 1С:Предприятие
//
Процедура СохранитьНастройкиПроксиНаСервере1СПредприятие(знач Настройки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Константы.НастройкаПроксиСервера.Установить(Новый ХранилищеЗначения(Настройки));
	
КонецПроцедуры

// Возвращает настройку прокси сервера для доступа к интернет со стороны
// клиента по конкретному пользователю
Функция ПолучитьНастройкуПроксиСервера() Экспорт
	
	Возврат ХранилищеОбщихНастроек.Загрузить("НастройкаПроксиСервера");
	
КонецФункции

Процедура ЗаписатьОшибкуВЖурналРегистрации(знач СообщениеОбОшибке) Экспорт
	
	ЗаписьЖурналаРегистрации(НСтр("ru='Получение файлов из интернет'"), 
		УровеньЖурналаРегистрации.Ошибка, , , СообщениеОбОшибке);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Изменение настроек прокси - к настройкам добавлено новое свойство "ИспользоватьПрокси"
//
Процедура ОбновлениеХранимыхНастроекПрокси() Экспорт
	
	МассивПользователейИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Для Каждого ПользовательИБ Из МассивПользователейИБ Цикл
		НастройкаПроксиСервера = ХранилищеОбщихНастроек.Загрузить("НастройкаПроксиСервера",,, ПользовательИБ.Имя);
		Если ТипЗнч(НастройкаПроксиСервера) = Тип("Соответствие") Тогда
			Если НастройкаПроксиСервера.Получить("ИспользоватьПрокси") = Неопределено Тогда
				НастройкаПроксиСервера.Вставить("ИспользоватьПрокси", Истина);
				ХранилищеОбщихНастроек.Сохранить("НастройкаПроксиСервера", , НастройкаПроксиСервера, , ПользовательИБ.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НастройкаПроксиСервера = УдалитьПолучениеФайловИзИнтернета.ПолучитьНастройкиПроксиНаСервере1СПредприятие();
	
	Если ТипЗнч(НастройкаПроксиСервера) = Тип("Соответствие") Тогда
		Если НастройкаПроксиСервера.Получить("ИспользоватьПрокси") = Неопределено Тогда
			НастройкаПроксиСервера.Вставить("ИспользоватьПрокси", Истина);
			УдалитьПолучениеФайловИзИнтернета.СохранитьНастройкиПроксиНаСервере1СПредприятие(НастройкаПроксиСервера);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


Функция ПолучитьВерсиюВнешнейКомпоненты() ЭКСПОРТ
	Возврат "1.1.74.0";
КонецФункции

///////////////////////////////////////////////////////////////////////////////
Процедура ЗаполнитьНастройкиПоУмолчаниюТекущегоПользователя(настройки) ЭКСПОРТ
	настройки.Пользователь					= бит_ТелефонияСервер.ПолучитьТекущегоПользователя();
	настройки.ИнтервалОбновления			= 2;
	настройки.ТаймаутЗвонка					= 15;
	настройки.ПрефиксВыходаНаВнешнююЛинию	= бит_ТелефонияСервер.ПолучитьПрефиксВыходаНаВнешнююЛиниюПоУмолчанию();
	настройки.СерверЛицензийАдрес			= "127.0.0.1";
	настройки.СерверЛицензийПорт			= 10601;
КонецПроцедуры

Функция ПолучитьНастройкиТелефонии()
	СтруктураОтбора = Новый Структура("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Возврат РегистрыСведений.бит_БитАТСНастройки.Получить(СтруктураОтбора);
КонецФункции

Процедура УстановитьНастройку(стрНастройка, значениеНастройки)
	бит_ТелефонияСервер.УстановитьНастройкуТекущегоПользователя("бит_БитАТСНастройки", "бит_АТССервер", стрНастройка, значениеНастройки);
КонецПроцедуры

Функция ПолучитьВерсиюВнешнейКомпонентыТекущегоПользователя() ЭКСПОРТ
	настрВерсия = ПолучитьНастройкиТелефонии().ВерсияКомпонентыПанелиУправления;
	Возврат настрВерсия;
КонецФункции

Процедура УстановитьВерсиюВнешнейКомпонентыТекущегоПользователя(стрВерсия) ЭКСПОРТ
	УстановитьНастройку("ВерсияКомпонентыПанелиУправления", стрВерсия);
КонецПроцедуры

Функция ПолучитьАТС() ЭКСПОРТ
	настрАТС = ПолучитьНастройкиТелефонии().АТС;
	Возврат настрАТС;
КонецФункции

Функция ПолучитьНомерСвязанногоТелефона() ЭКСПОРТ
	настрНомер = ПолучитьНастройкиТелефонии().НомерСвязанногоТелефона;
	Возврат настрНомер;
КонецФункции

Функция ПолучитьИнтервалОбновления() ЭКСПОРТ
	настрИнтервал = ПолучитьНастройкиТелефонии().ИнтервалОбновления;
	Возврат настрИнтервал;
КонецФункции

Функция ПолучитьПараметрыОткрытияФормыНастроек() ЭКСПОРТ
	Возврат бит_ТелефонияСервер.ПолучитьПараметрыОткрытияФормыНастроек("бит_БитАТСНастройки", "бит_АТССервер");
КонецФункции

Функция ПолучитьФлагЗаголовокАвтоподнятия() ЭКСПОРТ
	флаг = ПолучитьНастройкиТелефонии().ЗаголовокАвтоподнятия;
	Возврат флаг;
КонецФункции

Функция ПолучитьТаймаутЗвонка() ЭКСПОРТ
	таймаут = ПолучитьНастройкиТелефонии().ТаймаутЗвонка;
	Возврат таймаут;
КонецФункции

Функция ПолучитьПрефиксВыходаНаВнешнююЛинию() ЭКСПОРТ
	префикс = ПолучитьНастройкиТелефонии().ПрефиксВыходаНаВнешнююЛинию;
	Возврат префикс;
КонецФункции

Функция ПолучитьФлагИспользоватьПрямойНабор() ЭКСПОРТ
	флаг = ПолучитьНастройкиТелефонии().ИспользоватьПрямойНабор;
	Возврат флаг;
КонецФункции

Функция ПолучитьФлагСоздаватьСобытиеВходящийЗвонок() ЭКСПОРТ
	флаг = ПолучитьНастройкиТелефонии().СоздаватьСобытиеПриВходящемЗвонке;
	Возврат флаг;
КонецФункции

Функция ПолучитьФлагСоздаватьСобытиеИсходящийЗвонок() ЭКСПОРТ
	флаг = ПолучитьНастройкиТелефонии().СоздаватьСобытиеПриИсходящемЗвонке;
	Возврат флаг;
КонецФункции

Функция ПолучитьФлагСоздаватьСобытияПриВнутреннихЗвонках() ЭКСПОРТ
	флаг = ПолучитьНастройкиТелефонии().СоздаватьСобытияПриВнутреннихЗвонках;
	Возврат флаг;
КонецФункции

Функция ПолучитьАдресСервераЛицензий() ЭКСПОРТ
	адрес = ПолучитьНастройкиТелефонии().СерверЛицензийАдрес;
	Возврат адрес;
КонецФункции

Функция ПолучитьПортСервераЛицензий() ЭКСПОРТ
	порт = ПолучитьНастройкиТелефонии().СерверЛицензийПорт;
	Возврат порт;
КонецФункции

Функция ПолучитьФлагСервераЛицензийНеИспользоватьПрокси() ЭКСПОРТ
	флаг = ПолучитьНастройкиТелефонии().СерверЛицензийНеИспользоватьПрокси;
	Возврат флаг;
КонецФункции

Функция ПолучитьФлагАвтостартаПриЗапускеСистемы() ЭКСПОРТ
	Если НЕ бит_ТелефонияСерверПереопределяемый.ЕстьВозможностьАвтозапуска() Тогда
		Возврат Ложь;
	КонецЕсли;
	флаг = ПолучитьНастройкиТелефонии().АвтозапускПриСтартеСистемы;
	Возврат флаг;
КонецФункции	

Функция ПолучитьФлагНеИскатьКонтрагента() ЭКСПОРТ
	флаг = ПолучитьНастройкиТелефонии().НеИскатьКонтрагента;
	Возврат флаг;
КонецФункции

Функция ПроверитьПраваАдминистрировать() ЭКСПОРТ
	АдминистраторАТС = (РольДоступна(Метаданные.Роли.бит_АдминистраторБитАТС) ИЛИ РольДоступна("ПолныеПрава"));
	Возврат АдминистраторАТС;
КонецФункции

Функция ПроверитьПраваИспользовать() ЭКСПОРТ
	Возврат РольДоступна(Метаданные.Роли.бит_ПользовательБитАТС);
КонецФункции

Функция ПроверитьПраваОткрытьМонитор() ЭКСПОРТ
	Возврат (ПроверитьПраваАдминистрировать() ИЛИ ПроверитьПраваИспользовать());
КонецФункции

///////////////////////////////////////////////////////////////////////////////
Функция ПолучитьНомераАТС(АТССсылка, РодительНомеров) ЭКСПОРТ
	массивНомеров = Новый Массив;
	ЗапросНомеров = Новый Запрос;
	ЗапросНомеров.Текст = "ВЫБРАТЬ
	                      |	бит_НомераБитАТС.Код,
	                      |	бит_НомераБитАТС.Наименование,
	                      |	бит_НомераБитАТС.Номер,
	                      |	бит_НомераБитАТС.ГруппаДоступа
	                      |ИЗ
	                      |	Справочник.бит_НомераБитАТС КАК бит_НомераБитАТС
	                      |ГДЕ
	                      |	бит_НомераБитАТС.ЭтоГруппа = ЛОЖЬ
	                      |	И бит_НомераБитАТС.Владелец = &Владелец
	                      |	И (бит_НомераБитАТС.Родитель В ИЕРАРХИИ (&Родитель)
	                      |			ИЛИ бит_НомераБитАТС.Родитель = &Родитель)
	                      |	И бит_НомераБитАТС.ПометкаУдаления = ЛОЖЬ";
	//
	ЗапросНомеров.УстановитьПараметр("Владелец", АТССсылка);
	ЗапросНомеров.УстановитьПараметр("Родитель", РодительНомеров);
	таблНомера = ЗапросНомеров.Выполнить().Выгрузить();
	Для Каждого строкаВыборкиНомеров Из таблНомера Цикл
		экстеншн = Новый Структура;
		экстеншн.Вставить("Имя", строкаВыборкиНомеров.Наименование);
		экстеншн.Вставить("Номер", строкаВыборкиНомеров.Номер);
		экстеншн.Вставить("ГруппаДоступа", строкаВыборкиНомеров.ГруппаДоступа);
		массивНомеров.Добавить(экстеншн);
	КонецЦикла;
	Возврат массивНомеров;
КонецФункции

Функция ПолучитьПараметрыАТС(АТССсылка, СписокНомеровХоста, СоответствиеНомеровХоста) ЭКСПОРТ
	АТСструктура = Новый Структура("Код, Наименование, Адрес, Пользователь, Пароль");
	ЗаполнитьЗначенияСвойств(АТСструктура, АТССсылка);
	
	соотвКрасныхГрупп = Новый Соответствие;
	Для Каждого краснаяГр Из АТССсылка.КрасныеГруппы Цикл
		соотвКрасныхГрупп.Вставить(краснаяГр.Номер, краснаяГр.Номер);
	КонецЦикла;
	АТСструктура.Вставить("КрасныеГруппы", соотвКрасныхГрупп);
	
	массивНомеров = ПолучитьНомераАТС(АТССсылка, ПредопределенноеЗначение("Справочник.бит_НомераБитАТС.ПустаяСсылка"));
	АТСструктура.Вставить("Номера", массивНомеров);
	
	// Тип - Соответствие (Map)
	// Ключ - внутренний номер, значение - Строка, имя внутреннего абонента.
	СоответствиеНомеровХоста = Новый Соответствие;
	Для Каждого Экстеншен Из массивНомеров Цикл
		Если ЗначениеЗаполнено(Экстеншен.Номер) Тогда
			СписокНомеровХоста = СписокНомеровХоста + Экстеншен.Номер + ";";
			СоответствиеНомеровХоста.Вставить(Экстеншен.Номер, Экстеншен.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат АТСструктура;
КонецФункции


#Область ПрограммныйИнтерфейс

// Подгатавливает данные для запросов через Робот ФССП
//
// Возвращаемое значение:
//   Структура   - Данные для запроса через Робот ФССП
//
Функция ДанныеДляЗапроса() Экспорт

	Производства = ПолучитьИсполнительныеПроизводства();
	
	Возврат ПолучитьДанныеДляЗапроса(Производства);

КонецФункции // ()

// Подгатавливает ИП заданные для запросов в ФССП
//
// Возвращаемое значение:
//   Массив   - Уникальные ИП заданные для запросов в ФССП
//
Функция ИсполнительныеПроизводства() Экспорт

	Результат = ПолучитьИсполнительныеПроизводства();
	
	Возврат Результат.ВыгрузитьКолонку("Значение");

КонецФункции // ()

// Проводит документы, отмечая их обработанными
//  тем самым исключаются документы из последующих запросов
//
Процедура ОтметитьОбработанными() Экспорт

	ОтметитьДокументы();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЭтоОбработчик() Тогда
	
		Отказ = Истина;
		
		Возврат;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Получает документы по которым будут делаться запросы
//   Отмечает обработчик как не записываемый
//
// Возвращаемое значение:
//   ДокументСсылка.ИсполнительноеПроизводствоДляЗапросовФССП   - Обработчик
//
Функция ИнициализироватьДокументыЗапросов() Экспорт

	УстановитьОтметкуОбработчик();
	
	ПолучитьДокументы();
	
	Возврат ЭтотОбъект;

КонецФункции // ()

Функция ЕстьНеНормализованныеИП() Экспорт

	Если Все Тогда
	
		Возврат ЕстьНеНормализованныеСредиВсехИП();
	
	КонецЕсли;

	Возврат ЕстьНеНормализованныеСредиВыбранныхИП();

КонецФункции // ()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Конфигурация

Функция Обработчик()

	Возврат "ЭтоОбработчик";

КонецФункции // ()

Процедура УстановитьОтметкуОбработчик()

	ДополнительныеСвойства.Вставить(Обработчик(), Истина);

КонецПроцедуры

Функция ЭтоОбработчик()

	Результат = Неопределено;
	ДополнительныеСвойства.Свойство(Обработчик(), Результат);
	
	Возврат Результат = Истина;

КонецФункции // ()

Функция ДокументыЗапросов()

	Возврат "Документы";

КонецФункции // ()

Процедура УстановитьДокументыЗапросов(Выгрузка)

	ДополнительныеСвойства.Вставить(ДокументыЗапросов(), Выгрузка);

КонецПроцедуры

Функция ПолучитьДокументыЗапросов()

	Выгрузка = Неопределено;
	ДополнительныеСвойства.Свойство(ДокументыЗапросов(), Выгрузка);
	
	Если Выгрузка = Неопределено Тогда
	
		ВызватьИсключение "Не было инициализации, получение данных не возможно";
	
	КонецЕсли;
	
	Возврат Выгрузка;

КонецФункции // ()

#КонецОбласти

Процедура ПолучитьДокументы()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсполнительноеПроизводствоДляЗапросовФССП.Ссылка КАК Ссылка,
		|	ИсполнительноеПроизводствоДляЗапросовФССП.Все КАК Все
		|ИЗ
		|	Документ.ИсполнительноеПроизводствоДляЗапросовФССП КАК ИсполнительноеПроизводствоДляЗапросовФССП
		|ГДЕ
		|	ИсполнительноеПроизводствоДляЗапросовФССП.Проведен = ЛОЖЬ
		|	И ИсполнительноеПроизводствоДляЗапросовФССП.ПометкаУдаления = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выгрузка = РезультатЗапроса.Выгрузить();
	
	УстановитьДокументыЗапросов(Выгрузка);

КонецПроцедуры

Процедура ОтметитьДокументы()

	ДокументыКЗапросу = ПолучитьДокументыЗапросов();
	
	Для каждого ДокументКЗапросу Из ДокументыКЗапросу Цикл
	
		Объект = ДокументКЗапросу.Ссылка.ПолучитьОбъект();
		Объект.Записать(РежимЗаписиДокумента.Проведение);
	
	КонецЦикла;

КонецПроцедуры

Функция ЕстьДокументыСОтметкойВсе()

	ДокументыКЗапросу = ПолучитьДокументыЗапросов();
	
	ПоискВсех = Новый Структура;
	ПоискВсех.Вставить("Все", Истина);
	
	Результат = ДокументыКЗапросу.НайтиСтроки(ПоискВсех);
	
	Возврат Результат.Количество() > 0;

КонецФункции // ()

Функция ПолучитьИсполнительныеПроизводства()

	Если ЕстьДокументыСОтметкойВсе() Тогда
	
		Возврат ВсеИП();
	
	КонецЕсли;
	
	Возврат ОтобранныеИП();

КонецФункции // ()

Функция ВсеИП()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФССП_ИсполнительноеПроизводство.Ссылка КАК Значение
		|ИЗ
		|	Справочник.ФССП_ИсполнительноеПроизводство КАК ФССП_ИсполнительноеПроизводство
		|ГДЕ
		|	ФССП_ИсполнительноеПроизводство.ПометкаУдаления = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();

КонецФункции // ()

Функция ОтобранныеИП()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтобранныеДокументы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втДокументыДляЗапроса
	|ИЗ
	|	&ОтобранныеДокументы КАК ОтобранныеДокументы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсполнительноеПроизводствоДляЗапросовФССПИсполнительноеПроизводство.Значение КАК Значение
	|ИЗ
	|	Документ.ИсполнительноеПроизводствоДляЗапросовФССП.Объекты КАК ИсполнительноеПроизводствоДляЗапросовФССПИсполнительноеПроизводство
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДокументыДляЗапроса КАК втДокументыДляЗапроса
	|		ПО ИсполнительноеПроизводствоДляЗапросовФССПИсполнительноеПроизводство.Ссылка = втДокументыДляЗапроса.Ссылка";

	ОтобранныеДокументы = ПолучитьДокументыЗапросов();
	Запрос.УстановитьПараметр("ОтобранныеДокументы", ОтобранныеДокументы);

	РезультатЗапроса = Запрос.Выполнить();

	Возврат РезультатЗапроса.Выгрузить();

КонецФункции // ()

Функция ПолучитьДанныеДляЗапроса(Производства)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсполнительныеПроизводства.Значение КАК Ссылка
		|ПОМЕСТИТЬ втОтобранныеИП
		|ИЗ
		|	&ИсполнительныеПроизводства КАК ИсполнительныеПроизводства
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФССП_ИсполнительноеПроизводство.НормализованныйНомер КАК ИсполнительноеПроизводство,
		|	ФССП_ИсполнительноеПроизводство.Владелец КАК Контрагент,
		|	0 КАК Ресурс
		|ИЗ
		|	втОтобранныеИП КАК втОтобранныеИП
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФССП_ИсполнительноеПроизводство КАК ФССП_ИсполнительноеПроизводство
		|		ПО втОтобранныеИП.Ссылка = ФССП_ИсполнительноеПроизводство.Ссылка
		|ГДЕ
		|	ДЛИНАСТРОКИ(ФССП_ИсполнительноеПроизводство.НормализованныйНомер) <> 0";
	
	Запрос.УстановитьПараметр("ИсполнительныеПроизводства", Производства);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();

КонецФункции // ()

Функция ЕстьНеНормализованныеСредиВсехИП()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФССП_ИсполнительноеПроизводство.НормализованныйНомер КАК НормализованныйНомер
		|ИЗ
		|	Справочник.ФССП_ИсполнительноеПроизводство КАК ФССП_ИсполнительноеПроизводство
		|ГДЕ
		|	ДЛИНАСТРОКИ(ФССП_ИсполнительноеПроизводство.НормализованныйНомер) = 0
		|	И ФССП_ИсполнительноеПроизводство.ПометкаУдаления = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();

КонецФункции // ()

Функция ЕстьНеНормализованныеСредиВыбранныхИП()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсполнительноеПроизводство.Значение КАК Значение
		|ПОМЕСТИТЬ втВыбранныеИП
		|ИЗ
		|	&ИсполнительноеПроизводство КАК ИсполнительноеПроизводство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втИП.Значение КАК Значение
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	втВыбранныеИП КАК втИП
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФССП_ИсполнительноеПроизводство КАК ФССП_ИсполнительноеПроизводство
		|		ПО втИП.Значение = ФССП_ИсполнительноеПроизводство.Ссылка
		|			И (ДЛИНАСТРОКИ(ФССП_ИсполнительноеПроизводство.НормализованныйНомер) = 0)";
	
	Запрос.УстановитьПараметр("ИсполнительноеПроизводство", Объекты.Выгрузить());

	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции // ()

#КонецОбласти
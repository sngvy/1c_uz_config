  
&НаКлиенте
Перем ТекущийУИДАбонента;
&НаКлиенте
Перем КомпонентаОбъект;
&НаКлиенте
Перем ТекущийIPАдрес;
&НаКлиенте
Перем ФормаМероприятия;

&НаСервере
Процедура УстановитьПараметрОтбораДолжников(Параметр, Значение, Использование = Истина)
	ПараметрДанных = Должники.Параметры.Элементы.Найти(Параметр);
	ПараметрДанных.Значение = Значение;
	ПараметрДанных.Использование = Использование;	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрОтбораКатегорий(Параметр, Значение, Использование = Истина)
	ПараметрДанных = Категории.Параметры.Элементы.Найти(Параметр);
	ПараметрДанных.Значение = Значение;
	ПараметрДанных.Использование = Использование;	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСобытийПоПолю(Поле, Значение)
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(Поле);	
	Для Каждого ЭлементОтбораСобытий Из События.Отбор.Элементы Цикл		
		Если ЭлементОтбораСобытий.ЛевоеЗначение = ПолеКомпоновки Тогда
			ЭлементОтбораСобытий.ПравоеЗначение = Значение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ДобавитьВсехСотрудников()
	ОтборСотрудник = Новый СписокЗначений;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Сотрудник
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи";
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда 
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОтборСотрудник.Добавить(Выборка.Сотрудник);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОтборСотрудник;	
КонецФункции

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	УстановитьОтбор();
	//////Если ЗначениеЗаполнено(Пользователь) Тогда
	//////	УстановитьПараметрОтбораДолжников("Ответственный", Пользователь);
	//////	//Если НЕ РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда // ИЛИ ПустаяСтрока(ПользователиИнформационнойБазы.ТекущийПользователь().Имя) 
	//////	//	УстановитьОтборСобытийПоПолю("Ответственный", Сотрудник);
	//////	//КонецЕсли;
	//////Иначе
	//////	УстановитьПараметрОтбораДолжников("Ответственный", ДобавитьВсехСотрудников());
	//////КонецЕсли;

	//ДолжникиПриАктивизацииЯчейки(Элементы.Должники);
	ДолжникиПриАктивизацииСтроки(Элементы.Должники);	
КонецПроцедуры

&НаКлиенте
Процедура СобытияОтборПередНачаломИзменения(Элемент, Отказ)
	
	ПолеКомпоновкиДолжника = Новый ПолеКомпоновкиДанных("Должник");
	
	Если Элемент.ТекущиеДанные.ЛевоеЗначение = ПолеКомпоновкиДолжника Тогда
		Сообщить("Отбор по должнику не подлежит редактированию.");
		Отказ = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СобытияОтборПередУдалением(Элемент, Отказ)
	
	ПолеКомпоновкиДолжника = Новый ПолеКомпоновкиДанных("Должник");
	
	Если Элемент.ТекущиеДанные.ЛевоеЗначение = ПолеКомпоновкиДолжника Тогда
		Сообщить("Отбор по должнику удалять нельзя.");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КЦАдресIPЦКТ = Константы.АдресIPЦКТ.Получить();
	//Организация = ПараметрыСеанса.ТекущийПользователь.Организация;
	//Подразделение = ПараметрыСеанса.ТекущийПользователь.Подразделение;
	//Пользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Элементы.Организация.Доступность = ПараметрыСеанса.ТекущийПользователь.ЭтоРуководитель;
	Элементы.Подразделение.Доступность = ПараметрыСеанса.ТекущийПользователь.ЭтоРуководитель;	
	Элементы.БезОтветственного.Видимость = ПараметрыСеанса.ТекущийПользователь.ЭтоРуководитель;
	Элементы.РаспределитьДолжников.Видимость = ПараметрыСеанса.ТекущийПользователь.ЭтоРуководитель;
    Элементы.НастройкаАвтораспределения.Видимость = ПараметрыСеанса.ТекущийПользователь.ЭтоРуководитель;

	
	//ОБЫЧНЫЙ ИНТЕРФЕЙС//
	//Если НЕ РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда // ИЛИ ПустаяСтрока(ПользователиИнформационнойБазы.ТекущийПользователь().Имя) 
	Попытка
		ПараметрыСеанса.РабочийСтолСотрудник = ПараметрыСеанса.РабочийСтолСотрудник;
	Исключение
		ПараметрыСеанса.РабочийСтолСотрудник = ПараметрыСеанса.ТекущийПользователь;
	КонецПопытки;
	Организация = ПараметрыСеанса.РабочийСтолСотрудник.Организация;
	Подразделение = ПараметрыСеанса.РабочийСтолСотрудник.Подразделение;
    Пользователь = ПараметрыСеанса.РабочийСтолСотрудник;	
	//УстановитьПараметрОтбораДолжников("Ответственный", Пользователь);	
	УстановитьОтбор();
	
	
	//ИНТЕРФЕЙС КОНТАКТ-ЦЕНТРА//
	КЦСтатусОператора = Перечисления.СтатусыОператора.Выключен;
	КЦСостояниеОператора = Перечисления.СостоянияОператора.ВходящийЗвонок;
	
	УстановитьОтборКампанийОбзвона("Оператор", Пользователь);
    УстановитьОтборМероприятийПоПолю("Исполнитель", Пользователь);
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПП(Команда)
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПП(Команда)
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрПодготовкаП(Команда)
	
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрПретензииДляОтправки(Команда)
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	ОткрытьЗначение(Элемент.ТекущиеДанные[Сред(Поле.Имя, СтрДлина(Элемент.Имя) + 1)]);
КонецПроцедуры
	
&НаКлиенте
Процедура СоздатьМероприятие(Команда)
	Форма = ПолучитьФорму("Задача.Мероприятие.Форма.ФормаМероприятия",,Элементы.События);
	Если Элементы.Должники.ТекущиеДанные <> Неопределено Тогда	
		Форма.Объект.Должник = Элементы.Должники.ТекущиеДанные.Должник; 
		Форма.Объект.ДолговоеОбязательство = Элементы.Должники.ТекущиеДанные.ДолговоеОбязательство;
	КонецЕсли;	
	Форма.Объект.Ответственный = УдалитьОбщегоНазначения.ТекущийПользователь();
	Форма.Объект.Подразделение = ПолучитьПодразделение();

 	//Чуров
	ОткрытьФорму(Форма);	

КонецПроцедуры

&НаСервере
Функция ПолучитьПодразделение()
	Возврат ПараметрыСеанса.ТекущийПользователь.Подразделение;
КонецФункции

&НаКлиенте
Процедура СобытияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьЗначение(Элемент.ТекущиеДанные[Поле.Имя]);
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьДолжников(Команда)
	//ОтмеченныеДолжники.Очистить();
	//Для Каждого Элемент Из Элементы.События.ВыделенныеСтроки
	//НоваяСтрокаОтмеченные = ОтмеченныеДолжники.Добавить();
	//НоваяСтрокаОтмеченные.Должник = Элемент.ТекущиеДанные.Должник;
	//НоваяСтрокаОтмеченные.ДолговоеОбязательство = Элемент.ТекущиеДанные.ДолговоеОбязательство;
	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ответственный", УдалитьОбщегоНазначения.ТекущийПользователь());
	ПараметрыФормы.Вставить("СписокДолжников", ОтмеченныеДолжники);
		
	ОткрытьФорму("Обработка.РаспределениеОбъектов.Форма.Форма", ПараметрыФормы);	
КонецПроцедуры

&НаКлиенте
Процедура ДолжникиПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда	
		Если Элемент.ВыделенныеСтроки.Количество() = 1 Тогда
			ОтмеченныеДолжники.Очистить();	
		КонецЕсли;		
		НоваяСтрокаОтмеченные = ОтмеченныеДолжники.Добавить();
		НоваяСтрокаОтмеченные.Должник = Элемент.ТекущиеДанные.Должник;
		НоваяСтрокаОтмеченные.ДолговоеОбязательство = Элемент.ТекущиеДанные.ДолговоеОбязательство;
	КонецЕсли;	
	
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		УстановитьОтборСобытийПоПолю("Должник", Элемент.ТекущиеДанные.Должник);
		УстановитьОтборСобытийПоПолю("ДолговоеОбязательство", Элемент.ТекущиеДанные.ДолговоеОбязательство);
		
		УстановитьПараметрОтбораКатегорий("Должник", Элемент.ТекущиеДанные.Должник);
		УстановитьПараметрОтбораКатегорий("ДолговоеОбязательство", Элемент.ТекущиеДанные.ДолговоеОбязательство);
	Иначе
		УстановитьОтборСобытийПоПолю("Должник", Неопределено);
		УстановитьОтборСобытийПоПолю("ДолговоеОбязательство", Неопределено);
		
		УстановитьПараметрОтбораКатегорий("Должник", Неопределено);
		УстановитьПараметрОтбораКатегорий("ДолговоеОбязательство", Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсходящийЗвонок()
	Если Элементы.Должники.ТекущиеДанные = Неопределено Тогда	
	 	Возврат;
	КонецЕсли; 
		
	Форма = ПолучитьФорму("Задача.Мероприятие.Форма.ФормаМероприятия",, Элементы.События);
	Форма.Объект.ТипМероприятия = ПредопределенноеЗначение("Справочник.ТипыМероприятий.ТелефонныйЗвонокИсходящий");
	Форма.Объект.Ответственный = УдалитьОбщегоНазначения.ТекущийПользователь();
	Форма.Объект.Должник = Элементы.Должники.ТекущиеДанные.Должник; 
	Форма.Объект.Подразделение = ПолучитьПодразделение();
	Форма.Объект.ДолговоеОбязательство = Элементы.Должники.ТекущиеДанные.ДолговоеОбязательство;
	Форма.Объект.ПланируемаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
    Форма.Объект.ПланируемоеВремя = ОбщегоНазначенияКлиент.ДатаСеанса();
	//Чуров
	ОткрытьФорму(Форма);
	//Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ДолжникиВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОтладкаЗапускРеглЗад(Команда)
	ВыполнитьОбработкуЗаданий();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаАвтораспределения(Команда)
	Форма = ПолучитьФорму("РегистрСведений.НастройкиАвтораспределения.Форма.ФормаНастройки",, ЭтаФорма);
	Форма.ОткрытьМодально();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет; //приводит к сообщению об ошибке
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОсновная;
	
	Если РаботаСЦКТСервер.ТекущийIPАдрес() = "" Тогда
		РаботаСЦКТСервер.ТекущийIPАдрес(РаботаСЦКТКлиент.ПолучитьIpАдрес());
	КонецЕсли;
	Если РаботаСЦКТСервер.АдресОбъектаЦКТ() = "" Тогда
		//////РаботаСЦКТСервер.АдресОбъектаЦКТ(РаботаСЦКТКлиент.СоздатьОбъектЦКТ());	
	КонецЕсли;	
	ТекущийIPАдрес = РаботаСЦКТСервер.ТекущийIPАдрес();	
	ГруппаСтраницыПриСменеСтраницы(Неопределено, Элементы.ГруппаСтраницы.ТекущаяСтраница);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКЦ Тогда
		ПриУходеСоВкладкиКЦ();
	КонецЕсли;	
	
	УстановитьПараметрСеанса();
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрСеанса()
	ПараметрыСеанса.РабочийСтолСотрудник = Пользователь;	
	//ПараметрыСеанса.КонтролированиеПоследовательностиДО = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ГотовПринятьЗвонок(Команда)
	//ОбъектЦКТ = ПолучитьИзВременногоХранилища(РаботаСЦКТСервер.АдресОбъектаЦКТ());
	//Если ОбъектЦКТ <> Неопределено Тогда
	//	Результат = ОбъектЦКТ.КонтактЦентрВС.ПодключитьОператора(ПолучитьНомерОператора(), РаботаСЦКТСервер.ТекущийIPАдрес());
	//	Если Результат <> "" Тогда
	//		Сообщить(Результат);		
	//	КонецЕсли;		
	//КонецЕсли;
	
	Если КомпонентаОбъект <> Неопределено Тогда
		КомпонентаОбъект.ПослатьУдаленноеСообщение(КЦАдресIPЦКТ, 5090, 5091, "ВключитьОператора" + ":" + 
				ПолучитьНомерОператора() + "_" + ТекущийIPАдрес);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтказПринятьЗвонок(Команда)
	//ОбъектЦКТ = ПолучитьИзВременногоХранилища(РаботаСЦКТСервер.АдресОбъектаЦКТ());
	//Если ОбъектЦКТ <> Неопределено Тогда
	//	ОбъектЦКТ.КонтактЦентрВС.ОтключитьОператора(ПолучитьНомерОператора());
	//	
	//	//Набор = ОбъектЦКТ.РегистрыСведений.Операторы.СоздатьМенеджерЗаписи();
	//	//Набор.ИДОператора = ПолучитьНомерОператора();
	//	//Набор.Прочитать();
	//	//Набор.Удалить();
	//КонецЕсли;
	
	Если КомпонентаОбъект <> Неопределено Тогда
		КомпонентаОбъект.ПослатьУдаленноеСообщение(КЦАдресIPЦКТ, 5090, 5091, "ВыключитьОператора" + ":" +
				ПолучитьНомерОператора());
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьНомерОператора()
    Возврат Формат(ПараметрыСеанса.ТекущийПользователь.НомерОператора, "ЧГ=");	
КонецФункции

&НаКлиенте
Процедура ОтладкаКоманда1(Команда)
	//Если КомпонентаОбъект = Неопределено Тогда
	//   	КомпонентаОбъект = РаботаСЦКТКлиент.ЗагрузитьОбъектКомпоненты();
	//	КомпонентаОбъект.ЗапуститьSocketServer(5090);
	//КонецЕсли;
	//Если КомпонентаОбъект <> Неопределено Тогда			    
	//	КомпонентаОбъект.ПослатьУдаленноеСообщение(ТекущийIPАдрес, 5090, 5091, "АБВ");	
	//КонецЕсли;
	
	ОбъектЦКТ = ПолучитьИзВременногоХранилища(РаботаСЦКТСервер.АдресОбъектаЦКТ());
	obr = ОбъектЦКТ.ВнешниеОбработки.Создать("c:\TEMP\Обработка1.epf");
	obr.ААА();
КонецПроцедуры

&НаКлиенте
Процедура ОтладкаКоманда2(Команда)
	КомпонентаОбъект.ПослатьУдаленноеСообщение(РаботаСЦКТСервер.ТекущийIPАдрес(), 5090, 5091, 
			//Метаданные.Перечисления.ПараметрыКомпоненты.ЗначенияПеречисления.КоммутацияОператора.Имя);
			"QUIT_SOCKET_SERVER");
			//ПредопределенноеЗначение("Перечисление.ПараметрыКомпоненты.КоммутацияОператора").Метаданные().Имя;
КонецПроцедуры

&НаКлиенте
Процедура ОтладкаКоманда3(Команда)
	//КомпонентаОбъект.ПослатьУдаленноеСообщение(ТекущийIPАдрес, 5090, 5091, "АБВ");	
	КомпонентаОбъект.ЗапуститьSocketServer(5090);	
КонецПроцедуры

&НаКлиенте
Процедура Планировщик(Команда)
	ОткрытьФорму("Обработка.ПланированиеМероприятий.Форма.Форма", Новый Структура("Пользователь", Пользователь), ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КонтактЦентр(Команда)
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.ГруппаОсновная Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОсновная;
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКЦ;
	КонецЕсли;
	ГруппаСтраницыПриСменеСтраницы(Неопределено, Элементы.ГруппаСтраницы.ТекущаяСтраница);
КонецПроцедуры

&НаКлиенте
Процедура БезОтветственногоПриИзменении(Элемент)
	Элементы.Пользователь.Доступность = Не БезОтветственного;
	Если БезОтветственного Тогда
		УстановитьОтборБезОтветственного();
	Иначе
		УстановитьОтбор();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборБезОтветственного()
	Запрос = Новый Запрос();
	Если Организация.Пустая() Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	Организации.Ссылка
		               |ИЗ
		               |	Справочник.Организации КАК Организации";
		Значение = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе
		Значение = Организация;
	КонецЕсли;
	УстановитьПараметрОтбораДолжников("Организация", Значение);
	
	
	Если Подразделение.Пустая() Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПодразделенияОрганизаций.Ссылка
		               |ИЗ
		               |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		               |ГДЕ
		               |	ПодразделенияОрганизаций.Владелец В (&Организации)";
		Запрос.УстановитьПараметр("Организации", Значение);
		Значение = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");		
	Иначе
		Значение = Подразделение;
	КонецЕсли;
	УстановитьПараметрОтбораДолжников("Подразделение", Значение);
	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Пользователи.Ссылка
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	Пользователи.Подразделение В (&Подразделение)";
	Запрос.УстановитьПараметр("Подразделение", Значение);
	Значение = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Значение.Добавить(Справочники.Пользователи.ПустаяСсылка());
	УстановитьПараметрОтбораДолжников("Ответственный", Значение);
	
	УстановитьОтборДолжниковПоПолю("КоличествоОстаток", 1, Истина);	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДолжниковПоПолю(Поле, Значение, Использование)
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(Поле);	
	Для Каждого ЭлементОтбораСобытий Из Должники.Отбор.Элементы Цикл		
		Если ЭлементОтбораСобытий.ЛевоеЗначение = ПолеКомпоновки Тогда
			ЭлементОтбораСобытий.ПравоеЗначение = Значение;
			ЭлементОтбораСобытий.Использование = Использование;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//&НаКлиенте
//Процедура ПолучениеСобытийЦКТ()
//	Если Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя <> "ГруппаКЦ" Тогда
//		Возврат;
//	КонецЕсли;
//	ОбъектЦКТ = ПолучитьИзВременногоХранилища(РаботаСЦКТСервер.АдресОбъектаЦКТ());
//	Если ОбъектЦКТ <> Неопределено Тогда
//		Запись = ОбъектЦКТ.РегистрыСведений.Операторы.СоздатьМенеджерЗаписи();
//		Запись.ИДОператора = ПолучитьНомерОператора();
//		Запись.Прочитать();
//		Если Запись.ИДОператора > 0 И Запись.Включен И Не Запись.Выключен Тогда
//			//Оператор включен
//			КЦСтатусОператора = ПредопределенноеЗначение("Перечисление.СтатусыОператора.Включен");
//			//Разыменование ссылки
//			////ЗадачаАктивна = ОбъектЦКТ.Задачи.ЗадачаДозвона.ЗадачаАктивна(Запись.ТекущаяЗадача);
//			ЗадачаАктивна = ОбъектЦКТ.КонтактЦентрВС.ЗадачаАктивна(Запись.ТекущаяЗадача);
//			
//			Если ЗадачаАктивна Тогда	
//				//Идет разговор
//				Если ТекущийУИДАбонента = Неопределено Тогда	
//					КЦСостояниеОператора = ПредопределенноеЗначение("Перечисление.СостоянияОператора.ИсходящийЗвонок");
//					
//					ТекущийУИДАбонента = Новый УникальныйИдентификатор(Запись.ТекущаяЗадача.БизнесПроцесс.УИАбонента);
//					ТекущееДО = ПолучитьДОПоУИДАбонента(ТекущийУИДАбонента);
//					Если ТекущееДО <> Неопределено Тогда
//						Форма = ПолучитьФорму("Задача.Мероприятие.Форма.ФормаМероприятия",,Элементы.События);
//						Форма.Объект.ТипМероприятия = ПредопределенноеЗначение("Справочник.ТипыМероприятий.ТелефонныйЗвонокИсходящий");
//						Форма.Объект.Ответственный = ОбщегоНазначения.ТекущийПользователь();
//						Форма.Объект.Должник = ТекущееДО.Владелец; 
//						Форма.Объект.Подразделение = ПолучитьПодразделение();
//						Форма.Объект.ДолговоеОбязательство = ТекущееДО;
//						Форма.Объект.ПланируемаяДата = ТекущаяДата();
//						Форма.Объект.ПланируемоеВремя = ТекущаяДата();
//						Форма.Открыть();
//					Иначе
//						Сообщить("Исходящий звонок не числится в кампании обзвона УВДЗ!");
//					КонецЕсли;
//				КонецЕсли;
//			Иначе
//				//Не идет разговор
//				КЦСостояниеОператора = Неопределено;
//				ТекущийУИДАбонента = Неопределено;
//			КонецЕсли;
//		Иначе
//			//Оператор выключен
//			КЦСтатусОператора = ПредопределенноеЗначение("Перечисление.СтатусыОператора.Выключен");
//			КЦСостояниеОператора = Неопределено;
//			ТекущийУИДАбонента = Неопределено;
//		КонецЕсли;		
//	КонецЕсли;
//КонецПроцедуры

&НаСервере
Функция ПолучитьДОПоУИДАбонента(УИДАбонента)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КампанииОбзвонаДолговыеОбязательства.ДолговоеОбязательство
	                      |ИЗ
	                      |	БизнесПроцесс.КампанииОбзвона.ДолговыеОбязательства КАК КампанииОбзвонаДолговыеОбязательства
	                      |ГДЕ
	                      |	КампанииОбзвонаДолговыеОбязательства.УИД = &УИД");
	Запрос.УстановитьПараметр("УИД", УИДАбонента); 
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.ДолговоеОбязательство;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура УстановитьОтборКампанийОбзвона(Параметр, Значение, Использование = Истина)
	ПараметрДанных = КЦКампании.Параметры.Элементы.Найти(Параметр);
	ПараметрДанных.Значение = Значение;
	ПараметрДанных.Использование = Использование;
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборМероприятийПоПолю(Поле, Значение)
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(Поле);	
	Для Каждого Элемент Из КЦМероприятия.Отбор.Элементы Цикл		
		Если Элемент.ЛевоеЗначение = ПолеКомпоновки Тогда
			Элемент.ПравоеЗначение = Значение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Номер = Найти(Событие, ":");
	Если Номер > 0 Тогда
		Данные = Сред(Событие, Номер + 1);
		Событие = Лев(Событие, Номер - 1);
	Иначе
		Данные = "";
	КонецЕсли;
	
	Если Событие = "ТекущаяЗадача" Тогда
		Должник = Неопределено;
		ДО = Неопределено;
		ПолучитьДолжникаИДОПоУИДТекущейЗадачи(Должник, ДО, Данные);
		
		ФормаМероприятия = Неопределено;
		Если Должник <> Неопределено Тогда
			//Создать форму
			ФормаМероприятия = ПолучитьФорму("Задача.Мероприятие.Форма.ФормаМероприятия",, Элементы.События);
			ФормаМероприятия.Объект.ТипМероприятия = 
					ПредопределенноеЗначение("Справочник.ТипыМероприятий.ТелефонныйЗвонокИсходящий");
			ФормаМероприятия.Объект.Исполнитель = УдалитьОбщегоНазначения.ТекущийПользователь();
			ФормаМероприятия.Объект.Должник = Должник; 
			ФормаМероприятия.Объект.Подразделение = ПолучитьПодразделение();
			ФормаМероприятия.Объект.ДолговоеОбязательство = ДО;
			ФормаМероприятия.Объект.ПланируемаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
			ФормаМероприятия.Объект.ПланируемоеВремя = ОбщегоНазначенияКлиент.ДатаСеанса();
		КонецЕсли;
		
	ИначеЕсли Событие = "Коммутация" Тогда
		//Открыть форму
		Если ФормаМероприятия <> Неопределено Тогда
			ФормаМероприятия.ОткрытьМодально();
			ФормаМероприятия = Неопределено;
		КонецЕсли;
		
	ИначеЕсли Событие = "ОператорВключен" Тогда
		КЦСтатусОператора = ПредопределенноеЗначение("Перечисление.СтатусыОператора.Включен");
		
	ИначеЕсли Событие = "ОператорВыключен" Тогда
		КЦСтатусОператора = ПредопределенноеЗначение("Перечисление.СтатусыОператора.Выключен");
		КЦСостояниеОператора = Неопределено;
		ТекущийУИДАбонента = Неопределено;
		
	ИначеЕсли Событие = "ТестЗапрос" Тогда
		Если КомпонентаОбъект <> Неопределено Тогда
			КомпонентаОбъект.ПослатьУдаленноеСообщение(КЦАдресIPЦКТ, 5090, 5091, "ТестОтвет" + ":" + 
					ПолучитьНомерОператора());
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.ГруппаОсновная Тогда
		ПриУходеСоВкладкиКЦ();
	Иначе
		ПриВходеНаВкладкуКЦ();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриВходеНаВкладкуКЦ()
	Если КомпонентаОбъект = Неопределено Тогда
   		КомпонентаОбъект = РаботаСЦКТКлиент.ЗагрузитьОбъектКомпоненты();		
	КонецЕсли;
	Если КомпонентаОбъект <> Неопределено Тогда
		КомпонентаОбъект.ЗапуститьSocketServer(5090);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриУходеСоВкладкиКЦ()
	Если КомпонентаОбъект <> Неопределено Тогда
		ОтказПринятьЗвонок(Неопределено);
		КомпонентаОбъект.ПослатьУдаленноеСообщение(ТекущийIPАдрес, 5090, 5091, "QUIT_SOCKET_SERVER");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьДолжникаИДОПоУИДТекущейЗадачи(Должник, ДО, УИД)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КампанииОбзвонаДолговыеОбязательства.Должник,
	                      |	КампанииОбзвонаДолговыеОбязательства.ДолговоеОбязательство
	                      |ИЗ
	                      |	БизнесПроцесс.КампанииОбзвона.ДолговыеОбязательства КАК КампанииОбзвонаДолговыеОбязательства
	                      |ГДЕ
	                      |	КампанииОбзвонаДолговыеОбязательства.УИД = &УИД");
	Запрос.УстановитьПараметр("УИД", Новый УникальныйИдентификатор(УИД));					  
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Должник = Результат.Должник;
		ДО = Результат.ДолговоеОбязательство;
	Иначе
		Должник = Неопределено;
		ДО = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	УстановитьОтбор();
КонецПроцедуры

&НаСервере
Процедура УстановитьОтбор()
	Запрос = Новый Запрос();
	Если Организация.Пустая() Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	Организации.Ссылка
		               |ИЗ
		               |	Справочник.Организации КАК Организации";
		Значение = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе
		Значение = Организация;
	КонецЕсли;
	УстановитьПараметрОтбораДолжников("Организация", Значение);
	
	
	Если Подразделение.Пустая() Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПодразделенияОрганизаций.Ссылка
		               |ИЗ
		               |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		               |ГДЕ
		               |	ПодразделенияОрганизаций.Владелец В (&Организации)";
		Запрос.УстановитьПараметр("Организации", Значение);
		Значение = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");		
	Иначе
		Значение = Подразделение;
	КонецЕсли;
	УстановитьПараметрОтбораДолжников("Подразделение", Значение);
	
	
	Если Пользователь.Пустая() Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Пользователи.Ссылка
		               |ИЗ
		               |	Справочник.Пользователи КАК Пользователи
		               |ГДЕ
		               |	Пользователи.Подразделение В(&Подразделение)";
		Запрос.УстановитьПараметр("Подразделение", Значение);
		Значение = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");		
	Иначе
		Значение = Пользователь;
	КонецЕсли;
	УстановитьПараметрОтбораДолжников("Ответственный", Значение);	
	
	УстановитьОтборДолжниковПоПолю("КоличествоОстаток", 1, Ложь);
КонецПроцедуры

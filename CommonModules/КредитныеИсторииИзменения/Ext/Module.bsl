#Область RUTDFv5  

Процедура ОбновитьТекущиеЗаписиКредитнойИстории(Параметры, АдресРезультата) Экспорт 
	Настройка = Параметры.Настройка;
	Если КонтрольВерсий(Настройка.ВерсияRUTDF) Тогда
		Возврат;
	КонецЕсли;	
	
	СписокИзменений = ПолучитьСписокИзменений(Настройка.ВерсияRUTDF); 
	Если СписокИзменений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПрогрессВыполнения = 0; 
	ВсегоОбъектов = 0;
	
	ОбновитьТекущиеЗаписиСделки(Настройка, СписокИзменений.Сделка, ПрогрессВыполнения, ВсегоОбъектов);
	ОбновитьТекущиеЗаписиФЛ(Настройка, СписокИзменений.ФЛ, ПрогрессВыполнения, ВсегоОбъектов);  
	ОбновитьКонфигурационныйРегистр(Настройка.ВерсияRUTDF);
	
	ЗаписьКонтроляВерсий = РегистрыСведений.КредитныеИсторииКонтрольВерсий.СоздатьМенеджерЗаписи();
	ЗаписьКонтроляВерсий.Версия = Настройка.ВерсияRUTDF;
	ЗаписьКонтроляВерсий.ПереходВыполнен = Истина; 
	
	ЗаписьКонтроляВерсий.Записать();
	
КонецПроцедуры

Процедура ОбновитьТекущиеЗаписиСделки(Настройка, МассивСделка, ПрогрессВыполнения, ВсегоОбъектов) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	КредитныеИсторииДанныеСделки.Сделка КАК Сделка,
	|	КредитныеИсторииДанныеСделки.ДатаСобытия КАК ДатаСобытия,
	|	КредитныеИсторииДанныеСделки.Событие КАК Событие,
	|	КредитныеИсторииДанныеСделки.ДокументСобытие КАК ДокументСобытие,
	|	КредитныеИсторииДанныеСделки.UID КАК UID,
	|	КредитныеИсторииДанныеСделки.ДатаНачалаСделки КАК ДатаНачалаСделки,
	|	КредитныеИсторииДанныеСделки.ДатаОкончанияСделки КАК ДатаОкончанияСделки,
	|	КредитныеИсторииДанныеСделки.ДатаВыходаНаПросрочку КАК ДатаВыходаНаПросрочку,
	|	КредитныеИсторииДанныеСделки.ДатаПередачиФинансирования КАК ДатаПередачиФинансирования,
	|	КредитныеИсторииДанныеСделки.ДатаРасчетаСрочнойЗадолженности КАК ДатаРасчетаСрочнойЗадолженности,
	|	КредитныеИсторииДанныеСделки.ДатаРасчетаПросроченнойЗадолженности КАК ДатаРасчетаПросроченнойЗадолженности,
	|	КредитныеИсторииДанныеСделки.СуммаСделки КАК СуммаСделки,
	|	КредитныеИсторииДанныеСделки.СолидарныйДоговор КАК СолидарныйДоговор,
	|	КредитныеИсторииДанныеСделки.ДоговорМКЗ КАК ДоговорМКЗ,
	|	КредитныеИсторииДанныеСделки.РеструктуризацияМКЗ КАК РеструктуризацияМКЗ,
	|	КредитныеИсторииДанныеСделки.Обеспечительство КАК Обеспечительство,
	|	КредитныеИсторииДанныеСделки.СудебноеДело КАК СудебноеДело,
	|	КредитныеИсторииДанныеСделки.ПрекращениеОбязательства КАК ПрекращениеОбязательства,
	|	КредитныеИсторииДанныеСделки.НеденежноеОбязательство КАК НеденежноеОбязательство,
	|	КредитныеИсторииДанныеСделки.Продан КАК Продан,
	|	КредитныеИсторииДанныеСделки.Просрочка90плюс КАК Просрочка90плюс,
	|	КредитныеИсторииДанныеСделки.ПризнакПотребительскогоКредита КАК ПризнакПотребительскогоКредита,
	|	КредитныеИсторииДанныеСделки.ПризнакПлатежнойКарты КАК ПризнакПлатежнойКарты,
	|	КредитныеИсторииДанныеСделки.КодНБКИВидКредита КАК КодНБКИВидКредита,
	|	КредитныеИсторииДанныеСделки.КодНБКИТипКредита КАК КодНБКИТипКредита,
	|	КредитныеИсторииДанныеСделки.КодНБКИЦельКредита КАК КодНБКИЦельКредита,
	|	КредитныеИсторииДанныеСделки.Прощение КАК Прощение,
	|	КредитныеИсторииДанныеСделки.Банкротство КАК Банкротство,
	|	КредитныеИсторииДанныеСделки.БезнадежныйДолг КАК БезнадежныйДолг,
	|	КредитныеИсторииДанныеСделки.ВидЗаимодавца КАК ВидЗаимодавца,
	|	КредитныеИсторииДанныеСделки.ЧастичноеПравопреемство КАК ЧастичноеПравопреемство,
	|	КредитныеИсторииДанныеСделки.ПризнакКредитнойЛинии КАК ПризнакКредитнойЛинии,
	|	КредитныеИсторииДанныеСделки.КодНБКИТипКредититнойЛинии КАК КодНБКИТипКредититнойЛинии,
	|	КредитныеИсторииДанныеСделки.ПризнакПлавающейПроцентнойСтавки КАК ПризнакПлавающейПроцентнойСтавки,
	|	КредитныеИсторииДанныеСделки.ДатаВозникновенияОбязательстваСубъекта КАК ДатаВозникновенияОбязательстваСубъекта,
	|	КредитныеИсторииДанныеСделки.ПорядковыйНомерТранша КАК ПорядковыйНомерТранша,
	|	КредитныеИсторииДанныеСделки.ПроцентнаяСтавкаПоУсловиям КАК ПроцентнаяСтавкаПоУсловиям
	|ИЗ
	| РегистрСведений.КредитныеИсторииДанныеСделки КАК КредитныеИсторииДанныеСделки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	КоличествоОбъектов = 2;
	
	ВсегоОбъектов = ВыборкаДетальныеЗаписи.Количество() * КоличествоОбъектов;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
		
		ТЗ = Настройка.Сделка.Выгрузить();
		Строки = УдалитьОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗ); 
		Результат = Новый Массив();
		Для Каждого Элемент Из Строки Цикл  
			Индекс = МассивСделка.Найти(Элемент.НаименованиеПоляРегистраКИ);
			Если Индекс <> Неопределено Тогда
				Результат.Добавить(Новый Структура("ИмяТаблицы, Поле, НБКИФЛ, НБКИЮЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение, Функция, СтрокаДляПолученияЗначения, КодДопСвойства,
				| ОбъектДопСвойства, СтрокаХранилище","Сделка", Элемент.Поле, Элемент.НомерПоказателяНБКИФЛ, Элемент.НомерПоказателяНБКИЮЛ,  Элемент.НаименованиеПоляРегистраКИ, Элемент.ЗаполнятьПоУмолчанию, Элемент.Значение, Элемент.Функция,
				Элемент.СтрокаДляПолученияЗначения, Элемент.КодДопСвойства, Элемент.ОбъектДопСвойства, Элемент.СтрокаХранилище));	
			КонецЕсли;	
		КонецЦикла;
		
		мсЗначения = Новый Массив;
		Для Каждого ТекСтрокаПодстановки Из Результат Цикл 
			ТекНастройка = Новый Структура("Поле, НБКИФЛ, НБКИЮЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение",
			ТекСтрокаПодстановки.Поле, ТекСтрокаПодстановки.НБКИФЛ, ТекСтрокаПодстановки.НБКИЮЛ, ТекСтрокаПодстановки.НаименованиеПоляРегистраКИ, ТекСтрокаПодстановки.ЗаполнятьПоУмолчанию); 
			
			Значение = УЭДСервер.ГенерацияЗначениия(ТекСтрокаПодстановки, Ложь, ВыборкаДетальныеЗаписи.Сделка, ВыборкаДетальныеЗаписи.Сделка);
			ФункцияОпределена = УЭДСервер.ФункцияУспешноОпределена(ТекСтрокаПодстановки);
			Если ФункцияОпределена Тогда
				Значение = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(ТекСтрокаПодстановки.Функция, ВыборкаДетальныеЗаписи.Сделка, Значение);
				Если ТипЗнч(Значение) <> Тип("ТаблицаЗначений") Тогда
					Значение = СокрЛП(Значение);
				КонецЕсли;	
				ТекНастройка.Значение = Значение;
				мсЗначения.Добавить(ТекНастройка);
			Иначе 	
				Значение = СокрЛП(Значение);
				ТекНастройка.Значение = Значение;
				мсЗначения.Добавить(ТекНастройка);
			КонецЕсли; 
		КонецЦикла;	
		
		НаборКИ = РегистрыСведений.КредитныеИсторииДанныеСделки.СоздатьНаборЗаписей();
		НаборКИ.Отбор.Сделка.Установить(ВыборкаДетальныеЗаписи.Сделка);  
		НаборКИ.Отбор.ДатаСобытия.Установить(ВыборкаДетальныеЗаписи.ДатаСобытия);
		НаборКИ.Отбор.Событие.Установить(ВыборкаДетальныеЗаписи.Событие);
		НаборКИ.Отбор.ДокументСобытие.Установить(ВыборкаДетальныеЗаписи.ДокументСобытие);
		НаборКИ.Прочитать();
		
		
		Для Каждого структура Из мсЗначения Цикл
			
			Если ЗначениеЗаполнено(Структура.НаименованиеПоляРегистраКИ) Тогда
				НаименованиеПоляРегистраКИ = Структура.НаименованиеПоляРегистраКИ;
				ЗначениеВРегистр = Структура.Значение;
				Если Структура.ЗаполнятьПоУмолчанию И НЕ ЗначениеЗаполнено(Структура.Значение) Тогда
					ЗначениеВРегистр = КредитныеИстории.ВычислитьПараметрПоУмолчанию(Структура.НБКИФЛ, ВыборкаДетальныеЗаписи, ВыборкаДетальныеЗаписи.Сделка);
				КонецЕсли;
				ЗначениеВРегистр = КредитныеИстории.ОбработатьЗначенияПризнаков(ЗначениеВРегистр);  
				Если Структура.НБКИФЛ = "C25.8" Тогда 
					Продолжить;
				Иначе 
					Для каждого Запись из НаборКИ Цикл						
						Запись.ЧастичнаяПродажа = "0";
						Если НаименованиеПоляРегистраКИ = "КодНБКИВидКредита" Тогда
							ЗаменитьНеиспользуемыеКодыВидаКредита(ЗначениеВРегистр);
							Запись[НаименованиеПоляРегистраКИ] = ЗначениеВРегистр;
						ИначеЕсли НаименованиеПоляРегистраКИ = "КодНБКИТипКредита" Тогда
							ЗаменитьНеиспользуемыеКодыТипаКредита(ЗначениеВРегистр); 
							Запись[НаименованиеПоляРегистраКИ] = ЗначениеВРегистр;
						Иначе
							Запись[НаименованиеПоляРегистраКИ] = ЗначениеВРегистр;
						КонецЕсли;
					КонецЦикла;	 
				КонецЕсли; 
				
			Иначе
				Продолжить;
			КонецЕсли;
					
		КонецЦикла;	
		
		НаборКИ.Записать(); 
		
		СтоПроцентов = 100;
		
		ПроцентВыполнения = (ПрогрессВыполнения / ВсегоОбъектов) * СтоПроцентов;
		ПроцентВыполнения = Окр(ПроцентВыполнения, 0);    
		
		ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, СокрЛП(ВыборкаДетальныеЗаписи.Сделка));
		
		ПрогрессВыполнения = ПрогрессВыполнения + 1;
		
		
	КонецЦикла;  
	
	
КонецПроцедуры  

Процедура ОбновитьТекущиеЗаписиФЛ(Настройка, МассивФЛ, ПрогрессВыполнения, ВсегоОбъектов) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КредитныеИсторииДанныеФизЛица.Должник КАК Должник
	|ИЗ
	|	РегистрСведений.КредитныеИсторииДанныеФизЛица КАК КредитныеИсторииДанныеФизЛица";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
		
		ТЗ = Настройка.СубъектФизическоеЛицо.Выгрузить();
		Строки = УдалитьОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗ); 
		Результат = Новый Массив();
		Для Каждого Элемент Из Строки Цикл  
			Индекс = МассивФЛ.Найти(Элемент.НаименованиеПоляРегистраКИ);
			Если Индекс <> Неопределено Тогда
				Результат.Добавить(Новый Структура("ИмяТаблицы, Поле, НБКИФЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение, Функция, СтрокаДляПолученияЗначения, КодДопСвойства,
				| ОбъектДопСвойства, СтрокаХранилище","СубъектФизическоеЛицо", Элемент.Поле, Элемент.НомерПоказателяНБКИФЛ, Элемент.НаименованиеПоляРегистраКИ, Элемент.ЗаполнятьПоУмолчанию, Элемент.Значение, Элемент.Функция,
				Элемент.СтрокаДляПолученияЗначения, Элемент.КодДопСвойства, Элемент.ОбъектДопСвойства, Элемент.СтрокаХранилище));	
			КонецЕсли;	
		КонецЦикла;
		
		мсЗначения = Новый Массив;
		Для Каждого ТекСтрокаПодстановки Из Результат Цикл 
			ТекНастройка = Новый Структура("Поле, НБКИФЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение",
			ТекСтрокаПодстановки.Поле, ТекСтрокаПодстановки.НБКИФЛ, ТекСтрокаПодстановки.НаименованиеПоляРегистраКИ, ТекСтрокаПодстановки.ЗаполнятьПоУмолчанию); 
			
			Значение = УЭДСервер.ГенерацияЗначениия(ТекСтрокаПодстановки, Ложь, ВыборкаДетальныеЗаписи.Должник, ВыборкаДетальныеЗаписи.Должник);
			ФункцияОпределена = УЭДСервер.ФункцияУспешноОпределена(ТекСтрокаПодстановки);
			Если ФункцияОпределена Тогда
				Значение = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(ТекСтрокаПодстановки.Функция, ВыборкаДетальныеЗаписи.Должник, Значение);
				Если ТипЗнч(Значение) <> Тип("ТаблицаЗначений") Тогда
					Значение = СокрЛП(Значение);
				КонецЕсли;	
				ТекНастройка.Значение = Значение;
				мсЗначения.Добавить(ТекНастройка);
			Иначе 	
				Значение = СокрЛП(Значение);
				ТекНастройка.Значение = Значение;
				мсЗначения.Добавить(ТекНастройка);
			КонецЕсли; 
		КонецЦикла;	
		
		НаборКИ = РегистрыСведений.КредитныеИсторииДанныеФизЛица.СоздатьНаборЗаписей();
		НаборКИ.Отбор.Должник.Установить(ВыборкаДетальныеЗаписи.Должник);  
		НаборКИ.Прочитать();
		
		Для Каждого структура Из мсЗначения Цикл
			
			Если ЗначениеЗаполнено(Структура.НаименованиеПоляРегистраКИ) Тогда
				НаименованиеПоляРегистраКИ = Структура.НаименованиеПоляРегистраКИ;
				ЗначениеВРегистр = Структура.Значение;
				ЗначениеВРегистр = КредитныеИстории.ОбработатьЗначенияПризнаков(ЗначениеВРегистр); 		
				Для каждого Запись из НаборКИ Цикл     
					Запись[НаименованиеПоляРегистраКИ] = ЗначениеВРегистр;
				КонецЦикла;		
			Иначе
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;	
		
		НаборКИ.Записать();   
		СтоПроцентов = 100;
		ПроцентВыполнения = (ПрогрессВыполнения / ВсегоОбъектов) * СтоПроцентов;
		ПроцентВыполнения = Окр(ПроцентВыполнения, 0);    
		
		ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, СокрЛП(ВыборкаДетальныеЗаписи.Должник));
		
		ПрогрессВыполнения = ПрогрессВыполнения + 1;
		
	КонецЦикла;  
	
	
КонецПроцедуры 

Процедура ЗаменитьНеиспользуемыеКодыТипаКредита(ЗначениеПоказателя) Экспорт 
	Если  ЗначениеПоказателя = "3" Тогда
		ЗначениеПоказателя = "6";
	КонецЕсли;	
	
	Если  ЗначениеПоказателя = "4" Тогда
		ЗначениеПоказателя = "9";
	КонецЕсли;	
	
КонецПроцедуры 

Процедура ЗаменитьНеиспользуемыеКодыВидаКредита(ЗначениеПоказателя) Экспорт  
	Если ЗначениеПоказателя = "1" Тогда
		ЗначениеПоказателя = "99";
	КонецЕсли;	 
	
	Если ЗначениеПоказателя = "3" Тогда
		ЗначениеПоказателя = "13";
	КонецЕсли;	
	
КонецПроцедуры 


Функция ПолучитьСписокИзменений(Версия) Экспорт
	
	Если Версия = Перечисления.ВерсияRUTDF.v5 Тогда
		Возврат СписокИзмененийВерсия5(); 
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции  

Функция СписокИзмененийВерсия5() Экспорт 
	СтруктураИзменений = Новый Структура;
	МассивИзмененийСделка = Новый Массив;
	МассивИзмененийСделка.Добавить("ВидЗаимодавца");
	МассивИзмененийСделка.Добавить("ЧастичноеПравопреемство");
	МассивИзмененийСделка.Добавить("ПризнакКредитнойЛинии");
	МассивИзмененийСделка.Добавить("КодНБКИТипКредититнойЛинии");
	МассивИзмененийСделка.Добавить("ПризнакПлавающейПроцентнойСтавки");  
	МассивИзмененийСделка.Добавить("ДатаВозникновенияОбязательстваСубъекта");
	МассивИзмененийСделка.Добавить("ПорядковыйНомерТранша");  
	МассивИзмененийСделка.Добавить("ПроцентнаяСтавкаПоУсловиям");  
	МассивИзмененийСделка.Добавить("КодНБКИВидКредита");
    МассивИзмененийСделка.Добавить("КодНБКИТипКредита");
	МассивИзмененийСделка.Добавить("ДатаПередачиФинансирования");
	
	СтруктураИзменений.Вставить("Сделка", МассивИзмененийСделка);
	
	МассивИзмененийФЛ = Новый Массив;
	МассивИзмененийФЛ.Добавить("СпециальныйНалоговыйРежим");
	СтруктураИзменений.Вставить("ФЛ", МассивИзмененийФЛ);
	
	Возврат СтруктураИзменений;
КонецФункции 

Процедура ИсторияКонтроляВерсий() Экспорт 
	// Для обновления
	Записьv3 = РегистрыСведений.КредитныеИсторииКонтрольВерсий.СоздатьМенеджерЗаписи();
	Записьv3.Версия = Перечисления.ВерсияRUTDF.v3;
	Записьv3.ПереходВыполнен = Истина;      
	Записьv3.Записать();
	
	Записьv4 = РегистрыСведений.КредитныеИсторииКонтрольВерсий.СоздатьМенеджерЗаписи();
	Записьv4.Версия = Перечисления.ВерсияRUTDF.v4;
	Записьv4.ПереходВыполнен = Истина;
	Записьv4.Записать();
	
	
КонецПроцедуры

Функция КонтрольВерсий(Версия) Экспорт
	
	НаборЗаписейКонтроль = РегистрыСведений.КредитныеИсторииКонтрольВерсий.СоздатьНаборЗаписей();
	
	НаборЗаписейКонтроль.Отбор.Версия.Установить(Версия);
	НаборЗаписейКонтроль.Прочитать();
	Если НаборЗаписейКонтроль.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Для Каждого Запись Из НаборЗаписейКонтроль Цикл
			Возврат Запись.ПереходВыполнен;
		КонецЦикла;
	КонецЕсли;		 
	
КонецФункции   

Процедура ОбновитьКонфигурационныйРегистр(Версия) Экспорт
	
	Если Версия = Перечисления.ВерсияRUTDF.v5 Тогда  
		Запись = РегистрыСведений.КредитныеИстории_СобытияИГруппыБлоков.СоздатьМенеджерЗаписи();
		Запись.Событие = Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", "2.5");
		Запись.ИмяПроцедурыУЗ = "СформироватьБлок54_44";
		Запись.Записать(); 
		
		СобытиеПравопреемство = Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", "2.11.2");
		СобытиеПравопреемствоОб = СобытиеПравопреемство.ПолучитьОбъект();
		СобытиеПравопреемствоОб.Наименование = "Правопреемство от другого лица";
		СобытиеПравопреемствоОб.Записать();
		
		Если ЗначениеЗаполнено(СобытиеПравопреемство) Тогда
			НаборЗаписей = РегистрыСведений.КредитныеИстории_СобытияИГруппыБлоков.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Событие.Установить(СобытиеПравопреемство);
			НаборЗаписей.Записать();
			
			Запись = НаборЗаписей.Добавить();  
			Запись.Событие = СобытиеПравопреемство;
			Запись.ИмяПроцедурыУЗ = "СформироватьБлок17_10";
			Запись.ФормироватьПриКорректировке = Истина;  
			
			Запись = НаборЗаписей.Добавить();
			Запись.Событие = СобытиеПравопреемство;
			Запись.ИмяПроцедурыУЗ = "СформироватьБлок18_11";
			
			Запись = НаборЗаписей.Добавить();
			Запись.Событие = СобытиеПравопреемство;
			Запись.ИмяПроцедурыУЗ = "СформироватьБлок19_12"; 
			
			Запись = НаборЗаписей.Добавить();
			Запись.Событие = СобытиеПравопреемство;
			Запись.ИмяПроцедурыУЗ = "СформироватьБлок20_13";
			
			Запись = НаборЗаписей.Добавить();
			Запись.Событие = СобытиеПравопреемство;
			Запись.ИмяПроцедурыУЗ = "СформироватьБлок21_14";  
			
			Запись = НаборЗаписей.Добавить();
			Запись.Событие = СобытиеПравопреемство;
			Запись.ИмяПроцедурыУЗ = "СформироватьБлок22_Х";
			
			Запись = НаборЗаписей.Добавить();
			Запись.Событие = СобытиеПравопреемство;
			Запись.ИмяПроцедурыУЗ = "СформироватьБлок24_16";
			
			Запись = НаборЗаписей.Добавить();
			Запись.Событие = СобытиеПравопреемство;
			Запись.ИмяПроцедурыУЗ = "СформироватьБлок252627_171819";
			
			Запись = НаборЗаписей.Добавить();
			Запись.Событие = СобытиеПравопреемство;
			Запись.ИмяПроцедурыУЗ = "СформироватьБлок28_20";
			
			Запись = НаборЗаписей.Добавить();
			Запись.Событие = СобытиеПравопреемство;
			Запись.ИмяПроцедурыУЗ = "СформироватьБлок29";  
			
			Запись = НаборЗаписей.Добавить();
			Запись.Событие = СобытиеПравопреемство;
			Запись.ИмяПроцедурыУЗ = "СформироватьБлок31_22";
			
			Запись = НаборЗаписей.Добавить();
			Запись.Событие = СобытиеПравопреемство;
			Запись.ИмяПроцедурыУЗ = "СформироватьБлок54_44"; 
			
			Запись = НаборЗаписей.Добавить();
			Запись.Событие = СобытиеПравопреемство;
			Запись.ИмяПроцедурыУЗ = "СформироватьБлок56_46"; 
			НаборЗаписей.Записать();   	
			
		КонецЕсли;		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДобавитьИзмененияHeader(ТекстЗаголовка, Настройка, ИмяФайла, ДатаОтчета, НепринятыйОтчет) Экспорт
	ДобавитьИзмененияHeaderv5(ТекстЗаголовка, Настройка, ИмяФайла, ДатаОтчета, НепринятыйОтчет);	
КонецПроцедуры 

Процедура ДобавитьИзмененияHeaderv5(ТекстЗаголовка, Настройка, ИмяФайла, ДатаОтчета, НепринятыйОтчет) Экспорт
	КредитныеИстории.ДобавитьКСтроке(ТекстЗаголовка, Строка(Формат(ДатаОтчета,"ДФ=dd.MM.yyyy")));
	Если ЗначениеЗаполнено(НепринятыйОтчет) Тогда
		КредитныеИстории.ДобавитьКСтроке(ТекстЗаголовка, НепринятыйОтчет.ИмяФайлаОтказа);
		КредитныеИстории.ДобавитьКСтроке(ТекстЗаголовка, НепринятыйОтчет.ДатаФайлаОтказа);
	Иначе 
		КредитныеИстории.ДобавитьКСтроке(ТекстЗаголовка, "");
		КредитныеИстории.ДобавитьКСтроке(ТекстЗаголовка, "");
	КонецЕсли; 
	
	
	
КонецПроцедуры 


Процедура ДобавитьИзмененияТитульныхЗаписей(Настройка, Запись, ИмяСтрокиОтчета, СтрокаОтчета) Экспорт
	ДобавитьИзмененияТитульныхЗаписейv5(Настройка, Запись, ИмяСтрокиОтчета, СтрокаОтчета);	
КонецПроцедуры 

Процедура ДобавитьИзмененияТитульныхЗаписейv5(Настройка, Запись, ИмяСтрокиОтчета, СтрокаОтчета) Экспорт
	Если ИмяСтрокиОтчета = "C6_REGNUM" Тогда 
		СпецРежим = ?(ЗначениеЗаполнено(Запись.СпециальныйНалоговыйРежим), Запись.СпециальныйНалоговыйРежим, "0");
		КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, СпецРежим);
	КонецЕсли;
КонецПроцедуры 


Процедура ДобавитьИзмененияБлок17_10(Настройка, Запись, ИмяСтрокиОтчета, СтрокаОтчета) Экспорт
	ДобавитьИзмененияБлок17_10v5(Настройка, Запись, ИмяСтрокиОтчета, СтрокаОтчета) 
КонецПроцедуры

Процедура ДобавитьИзмененияБлок17_10v5(Настройка, Запись, ИмяСтрокиОтчета, СтрокаОтчета) Экспорт
	Если Не ЗначениеЗаполнено(Запись.UID) Тогда
		КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, Запись.Сделка.Наименование);
	Иначе
		КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, "");
	КонецЕсли;		 
	
КонецПроцедуры    


Процедура ДобавитьИзмененияБлок18_11(Настройка, Запись, Префикс, СтрокаОтчета) Экспорт
	ДобавитьИзмененияБлок18_11v5(Настройка, Запись, Префикс, СтрокаОтчета) 
КонецПроцедуры

Процедура ДобавитьИзмененияБлок18_11v5(Настройка, Запись, Префикс, СтрокаОтчета) Экспорт
	Если Префикс = "C" Тогда
		КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, Запись.ВидЗаимодавца);
	КонецЕсли; 
	
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, Запись.ЧастичноеПравопреемство);
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, Запись.ПризнакКредитнойЛинии);
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, ?(Запись.ПризнакКредитнойЛинии = "1", Запись.КодНБКИТипКредититнойЛинии, "")); 
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, Запись.ПризнакПлавающейПроцентнойСтавки);                   
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, ?(Запись.ЧастичнаяПродажа = "", "0", Запись.ЧастичнаяПродажа)); 
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, ?(Запись.ЧастичнаяПродажа = "1", Запись.UID, ""));
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, КредитныеИстории.киФорматДаты(Запись.ДатаВозникновенияОбязательстваСубъекта));  
		
КонецПроцедуры   


Процедура ДобавитьИзмененияБлок19_12(Настройка, Запись, Префикс, СтрокаОтчета) Экспорт
	ДобавитьИзмененияБлок19_12v5(Настройка, Запись, Префикс, СтрокаОтчета) 
КонецПроцедуры

Процедура ДобавитьИзмененияБлок19_12v5(Настройка, Запись, Префикс, СтрокаОтчета) Экспорт
	// Обеспечение
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, "");
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, "");
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, КредитныеИстории.киФорматДаты(Запись.ДатаСобытия)); 
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, "");
	
КонецПроцедуры   


Процедура ДобавитьИзмененияБлок24_16(Настройка, Запись, Префикс, СтрокаОтчета) Экспорт
	ДобавитьИзмененияБлок24_16v5(Настройка, Запись, Префикс, СтрокаОтчета); 
КонецПроцедуры

Процедура ДобавитьИзмененияБлок24_16v5(Настройка, Запись, Префикс, СтрокаОтчета) Экспорт
	// Обеспечение
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, ?(ЗначениеЗаполнено(Запись.ПорядковыйНомерТранша), Запись.ПорядковыйНомерТранша, ""));
	
КонецПроцедуры 


Процедура ДобавитьИзмененияБлок30_21НО(НеденежноеОбязательство, СтрокаОтчета) Экспорт
	ДобавитьИзмененияБлок30_21НОv5(НеденежноеОбязательство, СтрокаОтчета);
КонецПроцедуры

Процедура ДобавитьИзмененияБлок30_21НОv5(НеденежноеОбязательство, СтрокаОтчета) Экспорт
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, НеденежноеОбязательство.Описание);
КонецПроцедуры


Процедура ДобавитьИзмененияБлок31_22НО(НеденежноеОбязательство, СтрокаОтчета) Экспорт
	ДобавитьИзмененияБлок31_22НОv5(НеденежноеОбязательство, СтрокаОтчета);
КонецПроцедуры

Процедура ДобавитьИзмененияБлок31_22НОv5(НеденежноеОбязательство, СтрокаОтчета) Экспорт
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, НеденежноеОбязательство.ОбъектПредоставления.КодНБКИ);
КонецПроцедуры


Процедура ДобавитьИзмененияБлокОбеспечительстваЗалог(Обеспечительство, СтрокаОтчета) Экспорт 
	ДобавитьИзмененияБлокОбеспечительстваЗалогv5(Обеспечительство, СтрокаОтчета);
КонецПроцедуры

Процедура ДобавитьИзмененияБлокОбеспечительстваЗалогv5(Обеспечительство, СтрокаОтчета) Экспорт 
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, Строка(Обеспечительство.ВидСтоимостиПредметаЗалога));
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, КредитныеИстории.киФорматЧисла(Обеспечительство.СуммаВсехОбеспеченныхДоговоров));
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, Обеспечительство.КоличествоВсехОбеспеченныхДоговоров);
КонецПроцедуры  


Процедура ДобавитьИзмененияБлокОбеспечительстваСтрахование(Обеспечительство, СтрокаОтчета) Экспорт 
	ДобавитьИзмененияБлокОбеспечительстваСтрахованиеv5(Обеспечительство, СтрокаОтчета);
КонецПроцедуры

Процедура ДобавитьИзмененияБлокОбеспечительстваСтрахованиеv5(Обеспечительство, СтрокаОтчета) Экспорт 
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, Строка(Обеспечительство.ИдентификаторПредметаСтрахования));
КонецПроцедуры


Процедура ДобавитьИзмененияБлок37_28Обеспечение(Запись, СтрокаОтчета) Экспорт
	ДобавитьИзмененияБлок37_28Обеспечениеv5(Запись, СтрокаОтчета);
КонецПроцедуры

Процедура ДобавитьИзмененияБлок37_28Обеспечениеv5(Запись, СтрокаОтчета) Экспорт
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, КредитныеИстории.киФорматДаты(Запись.ДатаСобытия));
КонецПроцедуры


Процедура ДобавитьИзмененияБлок54_44(Запись, ДопПараметры, СтрокаОтчета) Экспорт
	ДобавитьИзмененияБлок54_44v5(Запись, ДопПараметры, СтрокаОтчета);
КонецПроцедуры

Процедура ДобавитьИзмененияБлок54_44v5(Запись, ДопПараметры, СтрокаОтчета) Экспорт
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, ?(ЗначениеЗаполнено(Запись.ПроцентнаяСтавкаПоУсловиям), КредитныеИстории.киФорматЧисла(Запись.ПроцентнаяСтавкаПоУсловиям), "-"));
	Если ТипЗнч(Запись.ДокументСобытие) = Тип("ДокументСсылка.ПродажаОбъектовУчета") Тогда
		Если Запись.ДокументСобытие.Цессия Тогда
			КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, КредитныеИстории.киФорматЧисла(ДопПараметры.ТекущаяЗадолженность));
		Иначе    
			КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, "");
		КонецЕсли;	 
	Иначе
		КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДопПараметры.ЗаписьОГосПоддержке) Тогда
		КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, "1"); 
		КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, ДопПараметры.ЗаписьОГосПоддержке);
	Иначе 
		КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, "0"); 
		КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, "");
	КонецЕсли;	
КонецПроцедуры 


Процедура ДобавитьИзмененияБлок55_45(Запись, ДопПараметры, СтрокаОтчета) Экспорт
	ДобавитьИзмененияБлок55_45v5(Запись, ДопПараметры, СтрокаОтчета);
КонецПроцедуры

Процедура ДобавитьИзмененияБлок55_45v5(Запись, ДопПараметры, СтрокаОтчета) Экспорт  
	Если ТипЗнч(Запись.ДокументСобытие) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(Запись.Прощение) Тогда 
		Если ДопПараметры.Настройка.НеФормироватьОбращения Тогда
			Возврат;
		Иначе	
			ДобавитьИзмененияБлок55_45Наследованиеv5(Запись, СтрокаОтчета);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Запись.ДокументСобытие) = Тип("ДокументСсылка.ДоговорМикрозайма") ИЛИ ТипЗнч(Запись.ДокументСобытие) = Тип("ДокументСсылка.РеструктуризацияМикрозайма") Тогда
		ДобавитьИзмененияБлок55_45МКЗv5(Запись, Запись.ДокументСобытие, СтрокаОтчета)
	ИначеЕсли ТипЗнч(Запись.ДокументСобытие) = Тип("СправочникСсылка.НеденежныеОбязательства") Тогда   
		ДобавитьИзмененияБлок55_45НОv5(Запись, Запись.НеденежноеОбязательство, СтрокаОтчета); 
	Иначе 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры 


Процедура ДобавитьИзмененияБлок55_45МКЗv5(Запись, Микрозайм, СтрокаОтчета) Экспорт
	ЕстьРеструктуризация = ЗначениеЗаполнено(Запись.РеструктуризацияМКЗ); 
	ДатаОкончанияСрокаРассмотренияОбращения = ?(ЗначениеЗаполнено(Микрозайм.ДатаОкончанияСрокаРассмотренияОбращения), КредитныеИстории.киФорматДаты(Микрозайм.ДатаОкончанияСрокаРассмотренияОбращения), "-"); 
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, ДатаОкончанияСрокаРассмотренияОбращения);
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, ?(ЕстьРеструктуризация, Микрозайм.ТекущийДоговор.КодНБКИЦельКредита, Микрозайм.КодНБКИЦельКредита));
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, ВернутьСтадиюРассмотренияОбязательстваПоСобытию(Запись.Событие.КодНБКИ));
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, КредитныеИстории.киФорматДаты(Запись.ДатаСобытия)); 
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, "98");
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, Строка(Микрозайм.НомерДоговора)); 
КонецПроцедуры   

Процедура ДобавитьИзмененияБлок55_45Наследованиеv5(Запись, СтрокаОтчета) Экспорт
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, ЗначениеЗаполнено(Запись.Прощение.ДатаВступленияИзменения), КредитныеИстории.киФорматДаты(Запись.Прощение.ДатаВступленияИзменения), "-");
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, Запись.КодНБКИЦельКредита);
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, ВернутьСтадиюРассмотренияОбязательстваПоСобытию(Запись.Событие.КодНБКИ));
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, КредитныеИстории.киФорматДаты(Запись.ДатаСобытия)); 
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, "98");
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, Строка(Запись.Сделка.Наименование)); 		
КонецПроцедуры 

Процедура ДобавитьИзмененияБлок55_45НОv5(Запись, НеденежноеОбязательство, СтрокаОтчета) Экспорт 
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, ЗначениеЗаполнено(НеденежноеОбязательство.ДатаОкончанияСрокаРассмотренияОбращения), КредитныеИстории.киФорматДаты(НеденежноеОбязательство.ДатаОкончанияСрокаРассмотренияОбращения), "-");
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, Запись.КодНБКИЦельКредита);
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, ВернутьСтадиюРассмотренияОбязательстваПоСобытию(Запись.Событие.КодНБКИ));
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, КредитныеИстории.киФорматДаты(Запись.ДатаСобытия)); 
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, "98");
	КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, Строка(Запись.Сделка.Наименование)); 
КонецПроцедуры 


Функция ВернутьСтадиюРассмотренияОбязательстваПоСобытию(КодСобытияНБКИ) Экспорт 
	КодСтадииРассмотрения = "";
	
	Если КодСобытияНБКИ = "1.1" Тогда
		КодСтадииРассмотрения = "1";
	ИначеЕсли  КодСобытияНБКИ = "1.2" Тогда
		КодСтадииРассмотрения = "2";  
	ИначеЕсли  КодСобытияНБКИ = "1.4" Тогда
		КодСтадииРассмотрения = "5";
	ИначеЕсли  КодСобытияНБКИ = "1.3" Тогда
		КодСтадииРассмотрения = "3";
	Иначе
		КодСтадииРассмотрения = "4";
	КонецЕсли;	 
	
	Возврат КодСтадииРассмотрения; 	
КонецФункции 


Процедура ОчиститьНеиспользуемыеПоля(СтрокаОтчета, Версия) Экспорт  
	Если Версия <> Перечисления.ВерсияRUTDF.v3 и Версия <> Перечисления.ВерсияRUTDF.v5 Тогда    
		Если СтрНайти(СтрокаОтчета, "SOURCENONMONETOBLIG") > 0 Тогда
			МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаОтчета, Символы.Таб);
			МассивСтрок[3] = "";
			СтрСоединить(МассивСтрок, Символы.Таб);
		КонецЕсли;	
		
		Если СтрНайти(СтрокаОтчета, "SUBJECTNONMONETOBLIG") > 0 Тогда
			МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаОтчета, Символы.Таб);
			МассивСтрок[2] = "";
			СтрСоединить(МассивСтрок, Символы.Таб);
		КонецЕсли; 
		
		Если СтрНайти(СтрокаОтчета, "COLLATERAL") > 0 Тогда
			МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаОтчета, Символы.Таб);
			МассивСтрок[8] = "";
			СтрСоединить(МассивСтрок, Символы.Таб);
		КонецЕсли; 
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьЗаписиОГосПоддержке(ЗаписиСделки) Экспорт 
	ЗаписиОГосподдержке = Новый таблицаЗначений;
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЛьготноеФинансированиеСГосПоддержкойОбъектыЛьготногоФинансирования.ОбъектУчета КАК ОбъектУчета,
		|	ЛьготноеФинансированиеСГосПоддержкойОбъектыЛьготногоФинансирования.Ссылка.РегистрационныйНомерПрограммы + "" "" + СТРОКА(ДЕНЬ(ЛьготноеФинансированиеСГосПоддержкойОбъектыЛьготногоФинансирования.Ссылка.ДатаУтвержденияПрограммы)) + ""."" + СТРОКА(МЕСЯЦ(ЛьготноеФинансированиеСГосПоддержкойОбъектыЛьготногоФинансирования.Ссылка.ДатаУтвержденияПрограммы)) + ""."" + СТРОКА(ГОД(ЛьготноеФинансированиеСГосПоддержкойОбъектыЛьготногоФинансирования.Ссылка.ДатаУтвержденияПрограммы)) + "" "" + ЛьготноеФинансированиеСГосПоддержкойОбъектыЛьготногоФинансирования.Ссылка.НаименованиеНормативногоАктаПрограммы КАК ЗаписьОГосподдержке
		|ИЗ
		|	Справочник.ЛьготноеФинансированиеСГосПоддержкой.ОбъектыЛьготногоФинансирования КАК ЛьготноеФинансированиеСГосПоддержкойОбъектыЛьготногоФинансирования
		|ГДЕ
		|	НЕ ЛьготноеФинансированиеСГосПоддержкойОбъектыЛьготногоФинансирования.Ссылка.ПометкаУдаления
		|	И ЛьготноеФинансированиеСГосПоддержкойОбъектыЛьготногоФинансирования.ОбъектУчета В(&ОбъектУчета)";
	
	Запрос.УстановитьПараметр("ОбъектУчета", ЗаписиСделки.ВыгрузитьКолонку("Сделка"));
	
	ЗаписиОГосподдержке = Запрос.Выполнить().Выгрузить();
	
	
	Возврат ЗаписиОГосподдержке;
	
КонецФункции

Функция СформироватьТелоОтчетаКорректировка(КоличествоОбъектовУчета, КоличествоГруппБлоков, НастройкаВыгрузки, ТаблицаОснование, МассивТитульныхЗаписей, ДатаОтчета, СсылкаНаДокумент) Экспорт  
	ТитульныеЗаписиДолжника = МассивТитульныхЗаписей.ТитульныеЗаписиДолжника;
	ТитульныеЗаписиПоручителя = МассивТитульныхЗаписей.ТитульныеЗаписиПоручителя;
	ТитульныеЗаписиНаследника = МассивТитульныхЗаписей.ТитульныеЗаписиНаследника;
	
	
	ПараметрыФункций = Новый Структура;
	ПараметрыФункций.Вставить("Настройка", НастройкаВыгрузки);
	ПараметрыФункций.Вставить("ПСК", 0); 
	ПараметрыФункций.Вставить("ЕстьЗадолженность", Истина);
	ПараметрыФункций.Вставить("ТекущаяЗадолженность", 0);
	ПараметрыФункций.Вставить("Поручитель", "1");
	ПараметрыФункций.Вставить("Наследник", "1"); 
	ПараметрыФункций.Вставить("строкаТекущаяЗадолженность", Неопределено);
	ПараметрыФункций.Вставить("строкиПлатежи", Неопределено); 
	ПараметрыФункций.Вставить("ЗаписьОГосПоддержке", Неопределено); 

	
	КоличествоГруппБлоков = 1;
	тТелоОтчета = Новый ТаблицаЗначений;
	тТелоОтчета.Колонки.Добавить("Строка");
		
	ЗаписиКИСделок = СформироватьЗаписиДействующейКИ(ТаблицаОснование.ВыгрузитьКолонку("ОбъектУчета"));
	КоличествоОбъектовУчета = ТаблицаОснование.Количество();
	
	Для Каждого СтрокаОснование из ТаблицаОснование Цикл 
		ОперацияВОтчет = ОбработатьЗначениеПеречисленияОперацийКорректировки(СтрокаОснование.Операция);		
		ТитульнаяЗапись = КредитныеИстории.НайтиЗаписьДолжникаДляЗаголовка(ТитульныеЗаписиДолжника, СтрокаОснование.Должник);
		Если СтрокаОснование.ЧастьКИ <> Перечисления.ЧастиКИДляКорректировкиRUTDF.ДинамическаяИнформацияСделкиСубъекта Тогда
			КредитныеИстории.СформироватьТекстГруппыGROUPHEADER(КоличествоГруппБлоков, тТелоОтчета, ОперацияВОтчет, ДатаОтчета, СтрокаОснование.Событие.КодНБКИ, "", "", "");
			КредитныеИстории.СформироватьБлокиТитульныхЗаписей(ТитульнаяЗапись, тТелоОтчета, НастройкаВыгрузки);
		КонецЕсли; 
		
		Если СтрокаОснование.ЧастьКИ = Перечисления.ЧастиКИДляКорректировкиRUTDF.БлокТитульнойЧастиСубъекта Тогда 
			КредитныеИстории.ДобавитьКТелуОтчета(тТелоОтчета, "DELETE");
			СтрокаНаИсправление = СформироватьСтрокуИсправлениеТитульныхЗаписейДолжника(ТитульнаяЗапись, СтрокаОснование.НомерБлока, СтрокаОснование.ПолеБлока, СтрокаОснование.СтрокаНаКорректировку);      
			КредитныеИстории.ДобавитьКТелуОтчета(тТелоОтчета, СтрокаНаИсправление);
		КонецЕсли;
		
		Если СтрокаОснование.ЧастьКИ = Перечисления.ЧастиКИДляКорректировкиRUTDF.БлокДополнительнойЧастиСубъекта Тогда   
			СтрокаНаИсправление = СформироватьСтрокуИсправлениеБлокаДополнительнойЧастиДолжника(СтрокаОснование.Операция, НастройкаВыгрузки, ТитульнаяЗапись, СтрокаОснование.НомерБлока, СтрокаОснование.ПолеБлока, СтрокаОснование.СтрокаНаКорректировку);      
			КредитныеИстории.ДобавитьКТелуОтчета(тТелоОтчета, СтрокаНаИсправление);
		КонецЕсли; 
		
		Если СтрокаОснование.ЧастьКИ = Перечисления.ЧастиКИДляКорректировкиRUTDF.СделкаСубъекта Тогда  
			Попытка
				ДР = ТитульнаяЗапись.ДатаРождения;
				Префикс = "C";  
				ПараметрыФункций.Вставить("Дееспособность", ТитульнаяЗапись.Дееспособность); 
				ПараметрыФункций.Вставить("ЛицоНеСуществует", Неопределено);
			Исключение
				Префикс = "B";
				ПараметрыФункций.Вставить("Дееспособность", Неопределено); 
				ПараметрыФункций.Вставить("ЛицоНеСуществует", ТитульнаяЗапись.ЛиквидацияЮЛ);
			КонецПопытки;  
			
			ЗаписьСделка = КредитныеИсторииИзменения.НайтиЗаписьСделкиКИ(ЗаписиКИСделок, СтрокаОснование.ОбъектУчета);
			Если Не ЗначениеЗаполнено(ЗаписьСделка) Тогда  
				КредитныеИстории.ДобавитьКТелуОтчета(тТелоОтчета, "Произошла ошибка формирования информации о сделке Должника!");
				Продолжить;
			КонецЕсли;	
			КредитныеИстории.ДобавитьКТелуОтчета(тТелоОтчета, "DELETE");
			РезультатФункции = КредитныеИстории.СформироватьБлок17_10(ЗаписьСделка, Префикс, ПараметрыФункций);
			КредитныеИстории.ДобавитьКТелуОтчета(тТелоОтчета, РезультатФункции);
			РезультатФункции = КредитныеИстории.СформироватьБлок18_11(ЗаписьСделка, Префикс, ПараметрыФункций);
			КредитныеИстории.ДобавитьКТелуОтчета(тТелоОтчета, РезультатФункции);
			РезультатФункции = КредитныеИстории.СформироватьБлок19_12(ЗаписьСделка, Префикс, ПараметрыФункций); 
			КредитныеИстории.ДобавитьКТелуОтчета(тТелоОтчета, РезультатФункции);
		КонецЕсли; 
		
		Если СтрокаОснование.ЧастьКИ = Перечисления.ЧастиКИДляКорректировкиRUTDF.ВсеСделкиСубъекта Тогда  
			КредитныеИстории.ДобавитьКТелуОтчета(тТелоОтчета, "DELETE_ALL");
		КонецЕсли;

		
		Если СтрокаОснование.ЧастьКИ = Перечисления.ЧастиКИДляКорректировкиRUTDF.ИнформативныйБлокСделкиСубъекта Тогда 
			 СтрокаНаИсправление = СформироватьСтрокуИсправлениеБлокаИнформационнойЧастиСделки(СтрокаОснование.Операция, ПараметрыФункций, ТитульнаяЗапись, СтрокаОснование.ОбъектУчета, СтрокаОснование.НомерБлока, СтрокаОснование.ПолеБлока, СтрокаОснование.СтрокаНаКорректировку);      
			 КредитныеИстории.ДобавитьКТелуОтчета(тТелоОтчета, СтрокаНаИсправление);              	
		КонецЕсли;   
		
		Если СтрокаОснование.ЧастьКИ = Перечисления.ЧастиКИДляКорректировкиRUTDF.ДинамическаяИнформацияСделкиСубъекта Тогда
			ИсторическиеЗаписиСделки = ВернутьИсторическиеДанныеПоНомеруБлока(СтрокаОснование.ОбъектУчета, СтрокаОснование.НомерБлока);	
			Если ИсторическиеЗаписиСделки = Неопределено Тогда 
				КредитныеИстории.ДобавитьКТелуОтчета(тТелоОтчета, "Произошла ошибка формирования Исторических принятых событий по сделке!");
				Продолжить;
			КонецЕсли;			
			ТаблицаСостоянияЗадолженности = Новый ТаблицаЗначений;  
			
			ЗаписиОГосПоддержке = КредитныеИсторииИзменения.ПолучитьЗаписиОГосПоддержке(ИсторическиеЗаписиСделки);						
			Для каждого Запись из ИсторическиеЗаписиСделки Цикл
				//Запись.ДатаСобытия??????
				КредитныеИстории.СформироватьТекстГруппыGROUPHEADER(КоличествоГруппБлоков, тТелоОтчета, ОперацияВОтчет, Запись.ДатаСобытия, СтрокаОснование.Событие.КодНБКИ, "", "", "");	  
  				ПоручительСобытия = КредитныеИстории.ВычислитьПоручителяСобытия(Запись.ДокументСобытие);
				НаследникСобытия = КредитныеИстории.ВычислитьНаследника(Запись.Сделка, Запись.ДокументСобытие);
				
				Если ЗначениеЗаполнено(НаследникСобытия) Тогда
					Если ТипЗнч(Запись.ДокументСобытие) = Тип("СправочникСсылка.Контрагенты") И Запись.Событие.КодНБКИ = "2.5" Тогда
						ТитульнаяЗапись = КредитныеИстории.НайтиЗаписьДолжникаДляЗаголовка(ТитульныеЗаписиДолжника, Запись.Сделка.Должник);
					Иначе
						ТитульнаяЗапись = КредитныеИстории.НайтиЗаписьДолжникаДляЗаголовка(ТитульныеЗаписиНаследника, НаследникСобытия);
					КонецЕсли;
				Иначе
					Если ЗначениеЗаполнено(ПоручительСобытия) Тогда
						ТитульнаяЗапись = КредитныеИстории.НайтиЗаписьДолжникаДляЗаголовка(ТитульныеЗаписиПоручителя, ПоручительСобытия);	
					Иначе
						ТитульнаяЗапись = КредитныеИстории.НайтиЗаписьДолжникаДляЗаголовка(ТитульныеЗаписиДолжника, Запись.Сделка.Должник);
					КонецЕсли;	
				КонецЕсли; 
				
				Если Не ЗначениеЗаполнено(ТитульнаяЗапись) Тогда
					Сообщение = Новый СообщениеПользователю();
					Сообщение.Текст = "Для договора " + Запись.Сделка + "не определен субъект события! Проверьте все связанные документы, Наследников и Поручителей.";
					Сообщение.Сообщить();
					Продолжить;
				КонецЕсли;  
				
				КредитныеИстории.СформироватьБлокиТитульныхЗаписей(ТитульнаяЗапись, тТелоОтчета, НастройкаВыгрузки);  

				Попытка
					ДР = ТитульнаяЗапись.ДатаРождения;
					Префикс = "C";  
					ПараметрыФункций.Вставить("Дееспособность", ТитульнаяЗапись.Дееспособность); 
					ПараметрыФункций.Вставить("ЛицоНеСуществует", Неопределено);
				Исключение
					Префикс = "B";
					ПараметрыФункций.Вставить("Дееспособность", Неопределено); 
					ПараметрыФункций.Вставить("ЛицоНеСуществует", ТитульнаяЗапись.ЛиквидацияЮЛ);
				КонецПопытки; 
				
				Если Запись.Событие.КодНБКИ = "1.4" Или Запись.Событие.КодНБКИ = "2.11.2" Тогда 
					//блоки 8 -12
					БлокИнформацииОтДолжника = КредитныеИстории.СформироватьИнфоДолжникСобытие1_4(ТитульнаяЗапись, Префикс, ПараметрыФункций);
					Для Каждого Элемент из БлокИнформацииОтДолжника Цикл
						КредитныеИстории.ДобавитьКТелуОтчета(тТелоОтчета, Элемент);
					КонецЦикла;
				КонецЕсли;
								
				НЗСоставОтчета = РегистрыСведений.КредитныеИстории_СобытияИГруппыБлоков.СоздатьНаборЗаписей();
				НЗСоставОтчета.Отбор.Событие.Установить(Запись.Событие);
				НЗСоставОтчета.Прочитать();  
				
				стрЗаписьОГосПоддержке =  ЗаписиОГосПоддержке.Найти(Запись.Сделка, "ОбъектУчета");
				
				Если ЗначениеЗаполнено(стрЗаписьОГосПоддержке) Тогда
					ПараметрыФункций.ЗаписьОГосПоддержке = стрЗаписьОГосПоддержке.ЗаписьОГосподдержке;
				Иначе   
					ПараметрыФункций.ЗаписьОГосПоддержке = "";
				КонецЕсли;	 
				
				//ПараметрыФункций.строкиПлатежей = ТаблицаСостоянияЗадолженности.НайтиСтроки(Новый Структура("ОбъектУчета", Запись.Сделка));
				Для Каждого ЗаписьСостава ИЗ НЗСоставОтчета Цикл
					
					РезультатФункции = Вычислить("КредитныеИстории." + ЗаписьСостава.ИмяПроцедурыУЗ + "(Запись, Префикс, ПараметрыФункций)");
					Если ТипЗнч(РезультатФункции) = Тип("Строка") Тогда
						Если ЗначениеЗаполнено(РезультатФункции) Тогда
							КредитныеИстории.ДобавитьКТелуОтчета(тТелоОтчета, РезультатФункции); 
						КонецЕсли;
					ИначеЕсли ТипЗнч(РезультатФункции) = Тип("Массив") Тогда
						Для Каждого Значение Из РезультатФункции Цикл
							Если ЗначениеЗаполнено(Значение) Тогда
								КредитныеИстории.ДобавитьКТелуОтчета(тТелоОтчета, Значение);
							КонецЕсли;
						КонецЦикла;	
					Иначе
						КредитныеИстории.ДобавитьКТелуОтчета(тТелоОтчета, "Ошибка формирования группы блоков! " + Строка(Запись.Сделка));
					КонецЕсли;
				КонецЦикла;
				
				//Изм 5.02 - 5.03
				КредитныеИстории.ДобавитьКТелуОтчета(тТелоОтчета, "DELETE");
				РезультатФункции = КредитныеИстории.СформироватьБлок17_10(Запись, Префикс, ПараметрыФункций);
				КредитныеИстории.ДобавитьКТелуОтчета(тТелоОтчета, РезультатФункции);
				
			КонецЦикла;			
			
		КонецЕсли;
		
		Если СтрокаОснование.ЧастьКИ = Перечисления.ЧастиКИДляКорректировкиRUTDF.ОбращениеСубъекта Тогда 
			
			Попытка
				ДР = ТитульнаяЗапись.ДатаРождения;
				Префикс = "C";  
				ПараметрыФункций.Вставить("Дееспособность", ТитульнаяЗапись.Дееспособность); 
				ПараметрыФункций.Вставить("ЛицоНеСуществует", Неопределено);
			Исключение
				Префикс = "B";
				ПараметрыФункций.Вставить("Дееспособность", Неопределено); 
				ПараметрыФункций.Вставить("ЛицоНеСуществует", ТитульнаяЗапись.ЛиквидацияЮЛ);
			КонецПопытки;  
			
			ЗаписьСделка = КредитныеИсторииИзменения.НайтиЗаписьСделкиКИ(ЗаписиКИСделок, СтрокаОснование.ОбъектУчета);    
			Если Не ЗначениеЗаполнено(ЗаписьСделка) Тогда  
				КредитныеИстории.ДобавитьКТелуОтчета(тТелоОтчета, "Произошла ошибка формирования файла Корректировки!");
				Продолжить;
			КонецЕсли;	
			КредитныеИстории.ДобавитьКТелуОтчета(тТелоОтчета, "DELETE");
			РезультатФункции = КредитныеИстории.СформироватьБлок55_45(ЗаписьСделка, Префикс, ПараметрыФункций);
			
		КонецЕсли;	
	КонецЦикла;		
	Возврат тТелоОтчета;
КонецФункции	

Функция НайтиЗаписьСделкиКИ(ТаблицаКИ, Сделка) Экспорт 
	СтрокаСделка = ТаблицаКИ.Найти(Сделка, "Сделка");
	Возврат СтрокаСделка;
КонецФункции  

Функция ОбработатьЗначениеПеречисленияОперацийКорректировки(перечОперация) Экспорт  
	ЗначениеПеречисления = перечОперация;	
	ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;	
	ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);	
	ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	
	СтрокаОперация = СтрЗаменить(Строка(ИмяЗначенияПеречисления), "_", ".");
	Возврат СтрокаОперация;
КонецФункции 

Функция СформироватьЗаписиДействующейКИ(МассивОбъектовУчета) Экспорт  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КредитныеИсторииДанныеСделки.Сделка КАК Сделка,
		|	МАКСИМУМ(КредитныеИсторииДанныеСделки.ДатаСобытия) КАК ДатаСобытия
		|ПОМЕСТИТЬ МаксСобытие
		|ИЗ
		|	РегистрСведений.КредитныеИсторииДанныеСделки КАК КредитныеИсторииДанныеСделки
		|
		|СГРУППИРОВАТЬ ПО
		|	КредитныеИсторииДанныеСделки.Сделка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сделка,
		|	ДатаСобытия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаксСобытие.Сделка КАК Сделка,
		|	МаксСобытие.ДатаСобытия КАК ДатаСобытия,
		|	КредитныеИсторииДанныеСделки.Событие КАК Событие,
		|	КредитныеИсторииДанныеСделки.ДокументСобытие КАК ДокументСобытие,
		|	КредитныеИсторииДанныеСделки.UID КАК UID,
		|	КредитныеИсторииДанныеСделки.ДатаНачалаСделки КАК ДатаНачалаСделки,
		|	КредитныеИсторииДанныеСделки.ДатаОкончанияСделки КАК ДатаОкончанияСделки,
		|	КредитныеИсторииДанныеСделки.ДатаВыходаНаПросрочку КАК ДатаВыходаНаПросрочку,
		|	КредитныеИсторииДанныеСделки.ДатаПередачиФинансирования КАК ДатаПередачиФинансирования,
		|	КредитныеИсторииДанныеСделки.ДатаРасчетаСрочнойЗадолженности КАК ДатаРасчетаСрочнойЗадолженности,
		|	КредитныеИсторииДанныеСделки.ДатаРасчетаПросроченнойЗадолженности КАК ДатаРасчетаПросроченнойЗадолженности,
		|	КредитныеИсторииДанныеСделки.СуммаСделки КАК СуммаСделки,
		|	КредитныеИсторииДанныеСделки.СолидарныйДоговор КАК СолидарныйДоговор,
		|	КредитныеИсторииДанныеСделки.ДоговорМКЗ КАК ДоговорМКЗ,
		|	КредитныеИсторииДанныеСделки.РеструктуризацияМКЗ КАК РеструктуризацияМКЗ,
		|	КредитныеИсторииДанныеСделки.Обеспечительство КАК Обеспечительство,
		|	КредитныеИсторииДанныеСделки.СудебноеДело КАК СудебноеДело,
		|	КредитныеИсторииДанныеСделки.ПрекращениеОбязательства КАК ПрекращениеОбязательства,
		|	КредитныеИсторииДанныеСделки.НеденежноеОбязательство КАК НеденежноеОбязательство,
		|	КредитныеИсторииДанныеСделки.Продан КАК Продан,
		|	КредитныеИсторииДанныеСделки.Просрочка90плюс КАК Просрочка90плюс,
		|	КредитныеИсторииДанныеСделки.ПризнакПотребительскогоКредита КАК ПризнакПотребительскогоКредита,
		|	КредитныеИсторииДанныеСделки.ПризнакПлатежнойКарты КАК ПризнакПлатежнойКарты,
		|	КредитныеИсторииДанныеСделки.КодНБКИВидКредита КАК КодНБКИВидКредита,
		|	КредитныеИсторииДанныеСделки.КодНБКИТипКредита КАК КодНБКИТипКредита,
		|	КредитныеИсторииДанныеСделки.КодНБКИЦельКредита КАК КодНБКИЦельКредита,
		|	КредитныеИсторииДанныеСделки.Прощение КАК Прощение,
		|	КредитныеИсторииДанныеСделки.Банкротство КАК Банкротство,
		|	КредитныеИсторииДанныеСделки.БезнадежныйДолг КАК БезнадежныйДолг,
		|	КредитныеИсторииДанныеСделки.ВидЗаимодавца КАК ВидЗаимодавца,
		|	КредитныеИсторииДанныеСделки.ЧастичноеПравопреемство КАК ЧастичноеПравопреемство,
		|	КредитныеИсторииДанныеСделки.ПризнакКредитнойЛинии КАК ПризнакКредитнойЛинии,
		|	КредитныеИсторииДанныеСделки.КодНБКИТипКредититнойЛинии КАК КодНБКИТипКредититнойЛинии,
		|	КредитныеИсторииДанныеСделки.ПризнакПлавающейПроцентнойСтавки КАК ПризнакПлавающейПроцентнойСтавки,
		|	КредитныеИсторииДанныеСделки.ДатаВозникновенияОбязательстваСубъекта КАК ДатаВозникновенияОбязательстваСубъекта,
		|	КредитныеИсторииДанныеСделки.ПорядковыйНомерТранша КАК ПорядковыйНомерТранша,
		|	КредитныеИсторииДанныеСделки.ПроцентнаяСтавкаПоУсловиям КАК ПроцентнаяСтавкаПоУсловиям,
		|	КредитныеИсторииДанныеСделки.ЧастичнаяПродажа КАК ЧастичнаяПродажа
		|ИЗ
		|	МаксСобытие КАК МаксСобытие
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КредитныеИсторииДанныеСделки КАК КредитныеИсторииДанныеСделки
		|		ПО МаксСобытие.Сделка = КредитныеИсторииДанныеСделки.Сделка
		|			И МаксСобытие.ДатаСобытия = КредитныеИсторииДанныеСделки.ДатаСобытия
		|ГДЕ
		|	МаксСобытие.Сделка В(&Сделка)";
	
	Запрос.УстановитьПараметр("Сделка", МассивОбъектовУчета);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
КонецФункции 

Функция СформироватьСтрокуИсправлениеТитульныхЗаписейДолжника(Запись, НомерБлока, ПолеБлока, СтрокаНаКорректировку) Экспорт  		
	 
	НомерБлока = СокрЛП(НомерБлока);
	
	Если НомерБлока = "C1" Тогда
		НомерДвойнойСтроки = "C3";
	ИначеЕсли НомерБлока = "C3"	Тогда
		НомерДвойнойСтроки = "C1";
	Иначе 
		НомерДвойнойСтроки = Неопределено;
	КонецЕсли;	 
	Попытка
		ДР = Запись.ДатаРождения;
		Префикс = "C";
	Исключение
		Префикс = "B";
	КонецПопытки;	
	
	СтрокаОтчета = "";
	ДвойнаяСтрока = ""; 
	
	//Основная Часть КИ
	
	Если Префикс = "C" Тогда
		Если НомерБлока = "C1" Тогда
			ИмяСтрокиОтчета = "C1_NAME"; 
			ФИОТекущее = Запись.Должник.ФИО[Запись.Должник.ФИО.Количество() - 1]; 
			СтрокаОтчета = ИмяСтрокиОтчета;
			КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, ФИОТекущее.Фамилия);
			КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, ФИОТекущее.Имя);
			КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, ФИОТекущее.Отчество);
		ИначеЕсли НомерДвойнойСтроки = "C3" Тогда
			ИмяСтрокиОтчета = "C1_NAME"; 
			ФИОТекущее = Запись.Должник.ФИО[Запись.Должник.ФИО.Количество() - 1]; 
			ДвойнаяСтрока = ИмяСтрокиОтчета;
			КредитныеИстории.ДобавитьКСтроке(ДвойнаяСтрока, ФИОТекущее.Фамилия);
			КредитныеИстории.ДобавитьКСтроке(ДвойнаяСтрока, ФИОТекущее.Имя);
			КредитныеИстории.ДобавитьКСтроке(ДвойнаяСтрока, ФИОТекущее.Отчество); 
		Иначе
			СтрокаОтчета = "";
			ДвойнаяСтрока = "";
		КонецЕсли;	
		
		Если НомерБлока = "C2" Тогда
			Попытка
				ФИОПредыдущее = Запись.Должник.ФИО[Запись.Должник.ФИО.Количество() - 2];
			Исключение
				ФИОПредыдущее = Неопределено;
			КонецПопытки;
			
			Если ЗначениеЗаполнено(ФИОПредыдущее) Тогда
				ИмяСтрокиОтчета = "C2_PREVNAME";
				СтрокаОтчета = ИмяСтрокиОтчета; 
				ДатаВыдачиДокумента = ?(ЗначениеЗаполнено(Запись.ДатаВыдачиДокумента), Запись.ДатаВыдачиДокумента, ТекущаяДатаСеанса()); 
				ДатаВыдачиДокумента = КредитныеИстории.киФорматДаты(ДатаВыдачиДокумента);
				КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, "1");
				КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, ФИОПредыдущее.Фамилия);
				КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, ФИОПредыдущее.Имя);
				КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, ФИОПредыдущее.Отчество);
				КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, ДатаВыдачиДокумента);
			Иначе
				ИмяСтрокиОтчета = "C2_PREVNAME"; 	
				СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + "0" + Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб;
			КонецЕсли;	
		КонецЕсли;   
		
		Если НомерБлока = "C3" ИЛИ ЗначениеЗаполнено(НомерДвойнойСтроки) Тогда
			ИмяСтрокиОтчета = "C3_BIRTH"; 
			Если ЗначениеЗаполнено(НомерДвойнойСтроки) Тогда 
				ДвойнаяСтрока = ИмяСтрокиОтчета; 
				КредитныеИстории.ДобавитьКСтроке(ДвойнаяСтрока, КредитныеИстории.киФорматДаты(Запись.ДатаРождения));
				КредитныеИстории.ДобавитьКСтроке(ДвойнаяСтрока, ?(Врег(Запись.КодСтраны) = "РОССИЯ", "643", Запись.КодСтраны));		
				КредитныеИстории.ДобавитьКСтроке(ДвойнаяСтрока, Запись.МестоРождения);
				ДвойнаяСтрока = КредитныеИстории.ОчисткаСтроки(ДвойнаяСтрока);
			Иначе	
				СтрокаОтчета = ИмяСтрокиОтчета; 
				КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, КредитныеИстории.киФорматДаты(Запись.ДатаРождения));
				КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, ?(Врег(Запись.КодСтраны) = "РОССИЯ", "643", Запись.КодСтраны));		
				КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, Запись.МестоРождения);
				СтрокаОтчета = КредитныеИстории.ОчисткаСтроки(СтрокаОтчета);	
			КонецЕсли;
		КоНецЕсли;
		
		Если НомерБлока = "C4" Тогда
			ИмяСтрокиОтчета = "C4_ID";
			СтрокаОтчета = ИмяСтрокиОтчета;    
			КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, ?(Врег(Запись.КодСтраныДокумента) = "РОССИЯ", "643", Запись.КодСтраныДокумента));
			КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, ?(СтрНайти(Запись.КодСтраныДокумента, "999") > 0, Запись.НаименованиеИнойСтраныДокумента, ""));
			КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, Запись.КодНБКИДокумента);
			КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, ?(СтрНайти(Запись.КодНБКИДокумента, "999") > 0, Запись.НаименованиеИногоДокумента, ""));
			КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, Запись.СерияДокумента);
			КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, Запись.НомерДокумента);
			КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, КредитныеИстории.киФорматДаты(Запись.ДатаВыдачиДокумента));
			КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, Запись.КемВыданДокумент);
			КодПодразделения = КредитныеИстории.ПроверкаФорматаКодаПодразделения(Запись.КодПодразделенияРФ);
			КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, ?(Запись.КодНБКИДокумента = "21", КодПодразделения, ""));
			КредитныеИстории.ДобавитьКСтроке(СтрокаОтчета, КредитныеИстории.киФорматДаты(Запись.ДатаОкончанияДействияДокумента));
			СтрокаОтчета = КредитныеИстории.ОчисткаСтроки(СтрокаОтчета);
		КонецЕсли;

		Если НомерБлока = "C5" Тогда
			ИмяСтрокиОтчета = "C5_PREVID";
			СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + "0" + Символы.Таб + Символы.Таб 
			+ Символы.Таб +  Символы.Таб + Символы.Таб + Символы.Таб 
			+ Символы.Таб + Символы.Таб +  Символы.Таб + Символы.Таб; 
		КонецЕсли;		
		
		Если НомерБлока = "C6" Тогда
			ИмяСтрокиОтчета = "C6_REGNUM"; 
			КодИНН = ""; 
			Если ЗначениеЗаполнено(Запись.ИНН) Тогда
				КодИНН = ?(СтрДлина(Запись.ИНН) = 12, "1", "2");
			КонецЕсли;
			СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + КодИНН + Символы.Таб + Запись.ИНН 
			+ Символы.Таб + ?(ЗначениеЗаполнено(Запись.ИНН_ИП), Запись.ИНН_ИП, "") + Символы.Таб + Запись.СпециальныйНалоговыйРежим;
		КонецЕсли;
		
		Если НомерБлока = "C7" Тогда
			ИмяСтрокиОтчета = "C7_SNILS";
			СНИЛС = СтрЗаменить(Запись.СНИЛС, "-", "");
			СНИЛС = СтрЗаменить(СНИЛС, " ", "");
			СНИЛС = СтрЗаменить(СНИЛС, Символы.НПП, "");
			СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + СНИЛС;		
		КонецЕсли;		
	Иначе 
		Если НомерБлока = "B1" Тогда
			ИмяСтрокиОтчета = "B1_NAME";  
			СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + Запись.ПолноеНаименование + Символы.Таб + Запись.Должник.Наименование 
			+ Символы.Таб + Запись.ИноеНаименование + Символы.Таб + "" + Символы.Таб;
		КонецЕсли;	
		
		Если НомерБлока = "B2" Тогда
			ИмяСтрокиОтчета = "B2_ADDR";  
			СтрокаОтчета = КредитныеИстории.ЗаполнитьАдресаДолжникаЮЛ(Запись.Должник, Запись.ЭлПочта);
		КонецЕсли;
		
		Если НомерБлока = "B3" Тогда
			ИмяСтрокиОтчета = "B3_REGNUM";
			СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + Запись.ОГРН + Символы.Таб + Запись.ИдентификаторLEI;
		КонецЕсли;
		
		Если НомерБлока = "B4" Тогда
			ИмяСтрокиОтчета = "B4_TAXPAYERID";
			СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + ?(СтрДлина(Запись.ИНН) = 10, "1", "2") + Символы.Таб + Запись.ИНН;
		КонецЕсли;
		
		Если НомерБлока = "B5" Тогда
			ИмяСтрокиОтчета = "B5_REORG";
			СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + "0" + Символы.Таб + "0" 
			+ Символы.Таб + "" + Символы.Таб + "" 
			+ Символы.Таб + "" + Символы.Таб + ""; 
		КонецЕсли;
	КонецЕсли;    
	
		
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаОтчета, Символы.Таб, Ложь, Ложь);
	
	МассивПодстрок[Число(ПолеБлока)] = Врег(СтрокаНаКорректировку);
	
	СтрокаОтчета = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(МассивПодстрок, Символы.Таб, Ложь);
	
	Если НомерДвойнойСтроки = "C1" Тогда
		СтрокаОтчета = ДвойнаяСтрока + Символы.ПС + СтрокаОтчета;
	ИначеЕсли НомерДвойнойСтроки = "C3" Тогда
		СтрокаОтчета =  СтрокаОтчета + Символы.ПС + ДвойнаяСтрока;
	Иначе
		СтрокаОтчета = СтрокаОтчета;
	КонецЕсли;
	
	Возврат СтрокаОтчета;
КонецФункции 

Функция СформироватьСтрокуИсправлениеБлокаДополнительнойЧастиДолжника(Операция, Настройка, Запись, НомерБлока, ПолеБлока, СтрокаНаКорректировку) Экспорт 
	
	ЗаписьДолжник = Запись;	
	НомерБлока = СокрЛП(НомерБлока);
	Попытка
		ДР = ЗаписьДолжник.ДатаРождения;
		Префикс = "C";
	Исключение
		Префикс = "B";
	КонецПопытки;	
	
	СтрокаОтчета = "";
	
	Если Префикс = "C" Тогда 
		Если НомерБлока = "C8" ИЛИ НомерБлока = "C9" Тогда	
			ПараметрыРегистрации = Новый Структура;
			ПараметрыРегистрации.Вставить("ДатаРегистрацииПоДокументу", ЗаписьДолжник.ДатаРегистрацииПоДокументу);
			ПараметрыРегистрации.Вставить("НаименованиеРегистрирующегоОргана", ЗаписьДолжник.НаименованиеРегистрирующегоОргана);
			ПараметрыРегистрации.Вставить("КодПодразделенияРегистрацииРФ", ЗаписьДолжник.КодПодразделенияРегистрацииРФ);
			ПараметрыРегистрации.Вставить("ДатаВыдачиДокумента", ЗаписьДолжник.ДатаВыдачиДокумента);
			
			МассивСтрок = КредитныеИстории.ЗаполнитьАдресаДолжникаФЛ(ЗаписьДолжник.Должник, ПараметрыРегистрации);
			Для каждого Строка из МассивСтрок Цикл  
				Если СтрНайти(Строка, НомерБлока, НаправлениеПоиска.СНачала, 1, 1) > 0 Тогда
					СтрокаОтчета = Строка;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	 
		КонецЕсли;    
		
		Если НомерБлока = "C10" Тогда
			ИмяСтрокиОтчета = "C10_CONTACTINFO";  
			ТелНомер = СтрЗаменить(ЗаписьДолжник.Должник.Телефоны[0].Номер, " ", "");
			Комментарий = Строка(ЗаписьДолжник.Должник.Телефоны[0].ВидНомера) + " " + Строка(ЗаписьДолжник.Должник.Телефоны[0].Комментарий); 
			Комментарий = ?(ЗначениеЗаполнено(Комментарий), Комментарий, "Телефон должника"); 
			СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + ТелНомер + Символы.Таб + Комментарий + Символы.Таб + ЗаписьДолжник.ЭлПочта;  
		КонецЕсли;	
		
		Если НомерБлока = "C11" Тогда
			ИмяСтрокиОтчета = "C11_ENTREP";	
			СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + ?(ЗначениеЗаполнено(ЗаписьДолжник.ЭтоИП), ЗаписьДолжник.ЭтоИП, 0) 
			+ Символы.Таб + ЗаписьДолжник.ИНН_ИП + Символы.Таб + КредитныеИстории.киФорматДаты(ЗаписьДолжник.ДатаРегистрацииИП);
		КонецЕсли;   
		
		Если НомерБлока = "C12" Тогда
			ИмяСтрокиОтчета = "C12_CAPABILITY";
			ВозрастСек = ТекущаяДатаСеанса() - ЗаписьДолжник.ДатаРождения;
			СовершеннолетиеСек = 567993600;
			КодДееспособности = ?(ВозрастСек >= СовершеннолетиеСек, "1", "2");
			НеСудебнаяДееспособность = ИмяСтрокиОтчета + Символы.Таб + КодДееспособности + Символы.Таб 
			+ Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб;			
			Если ТипЗнч(ЗаписьДолжник.Дееспособность) = Тип("СправочникСсылка.ДелоОНедееспособностиСубъекта") Тогда 
				СтрокаОтчета = КредитныеИстории.СформироватьБлокДееспособность(ЗаписьДолжник.Дееспособность);
				СтрокаОтчета = ИмяСтрокиОтчета + СтрокаОтчета;	
			Иначе
				СтрокаОтчета = КредитныеИстории.СформироватьБлокПоНастройкам(ЗаписьДолжник.Должник, Настройка, ИмяСтрокиОтчета, "СубъектФизическоеЛицо");
				ЭтоСудебнаяДееспособность = ?(ЗначениеЗаполнено(СтрокаОтчета), Истина, Ложь);
				СтрокаОтчета = ?(ЭтоСудебнаяДееспособность, ИмяСтрокиОтчета + Символы.Таб + СтрокаОтчета, НеСудебнаяДееспособность);		
			КонецЕсли;
		КонецЕсли;
		
	Иначе 
		Если НомерБлока = "B8" Тогда 
			ИмяСтрокиОтчета = "B8_PREVCRED";		
			СтрокаОтчета = ИмяСтрокиОтчета + Символы.Таб + ЗаписьДолжник.НаличиеПравопредшественника + Символы.Таб + ЗаписьДолжник.ПравопредшественникИзРФ + Символы.Таб + ЗаписьДолжник.ПолноеНаименованиеПравопредшественника 
			+ Символы.Таб + ЗаписьДолжник.ОГРНПравопредшественника;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаНаВозврат = ?(Операция = Перечисления.ВидыОперацийИсправленияИУдаленияRUTDF.C_1, (СтрокаОтчета + Символы.ПС + "DELETE" + Символы.ПС), ("DELETE" + Символы.ПС));
  	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаОтчета, Символы.Таб, Ложь, Ложь);
	
	МассивПодстрок[Число(ПолеБлока)] = СтрокаНаКорректировку;
	
	СтрокаОтчета = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(МассивПодстрок, Символы.Таб, Ложь);	
	
	СтрокаНаВозврат = СтрокаНаВозврат + СтрокаОтчета;
	
	Возврат СтрокаНаВозврат;

	
КонецФункции  

Функция ВернутьИсторическиеДанныеПоНомеруБлока(Сделка, НомерБлока) Экспорт
	
	
	мСобытияФормирующиеБлок = ВернутьСобытияФормирующиеБлок(НомерБлока);
	
	Если Не ЗначениеЗаполнено(мСобытияФормирующиеБлок) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	ЗапросДанныеСделки = Новый Запрос;
	ЗапросДанныеСделки.Текст = 	 
		"ВЫБРАТЬ
		|	КредитныеИсторииДанныеСделки.Сделка КАК Сделка,
		|	КредитныеИсторииДанныеСделки.ДатаСобытия КАК ДатаСобытия,
		|	КредитныеИсторииДанныеСделки.Событие КАК Событие,
		|	КредитныеИсторииДанныеСделки.ДокументСобытие КАК ДокументСобытие,
		|	КредитныеИсторииДанныеСделки.UID КАК UID,
		|	КредитныеИсторииДанныеСделки.ДатаНачалаСделки КАК ДатаНачалаСделки,
		|	КредитныеИсторииДанныеСделки.ДатаОкончанияСделки КАК ДатаОкончанияСделки,
		|	КредитныеИсторииДанныеСделки.ДатаПередачиФинансирования КАК ДатаПередачиФинансирования,
		|	КредитныеИсторииДанныеСделки.ДатаРасчетаСрочнойЗадолженности КАК ДатаРасчетаСрочнойЗадолженности,
		|	КредитныеИсторииДанныеСделки.ДатаРасчетаПросроченнойЗадолженности КАК ДатаРасчетаПросроченнойЗадолженности,
		|	КредитныеИсторииДанныеСделки.СуммаСделки КАК СуммаСделки,
		|	КредитныеИсторииДанныеСделки.СолидарныйДоговор КАК СолидарныйДоговор,
		|	КредитныеИсторииДанныеСделки.ДоговорМКЗ КАК ДоговорМКЗ,
		|	КредитныеИсторииДанныеСделки.РеструктуризацияМКЗ КАК РеструктуризацияМКЗ,
		|	КредитныеИсторииДанныеСделки.Обеспечительство КАК Обеспечительство,
		|	КредитныеИсторииДанныеСделки.СудебноеДело КАК СудебноеДело,
		|	КредитныеИсторииДанныеСделки.ПрекращениеОбязательства КАК ПрекращениеОбязательства,
		|	КредитныеИсторииДанныеСделки.НеденежноеОбязательство КАК НеденежноеОбязательство,
		|	КредитныеИсторииДанныеСделки.Продан КАК Продан,
		|	КредитныеИсторииДанныеСделки.Просрочка90плюс КАК Просрочка90плюс,
		|	КредитныеИсторииДанныеСделки.ПризнакПотребительскогоКредита КАК ПризнакПотребительскогоКредита,
		|	КредитныеИсторииДанныеСделки.ПризнакПлатежнойКарты КАК ПризнакПлатежнойКарты,
		|	КредитныеИсторииДанныеСделки.КодНБКИВидКредита КАК КодНБКИВидКредита,
		|	КредитныеИсторииДанныеСделки.КодНБКИТипКредита КАК КодНБКИТипКредита,
		|	КредитныеИсторииДанныеСделки.КодНБКИЦельКредита КАК КодНБКИЦельКредита,
		|	КредитныеИсторииДанныеСделки.Прощение КАК Прощение,
		|	КредитныеИсторииДанныеСделки.Банкротство КАК Банкротство,
		|	КредитныеИсторииДанныеСделки.БезнадежныйДолг КАК БезнадежныйДолг,
		|	ЕСТЬNULL(ЖурналВыгрузокНБКИRUTDF.Принято, ""БезСтатуса"") КАК Принято,
		|	ЖурналВыгрузокНБКИRUTDF.ДатаПоследнейВыгрузки КАК ДатаПоследнейВыгрузки,
		|	КредитныеИсторииДанныеСделки.ДатаВыходаНаПросрочку КАК ДатаВыходаНаПросрочку,
		|	КредитныеИсторииДанныеСделки.ВидЗаимодавца КАК ВидЗаимодавца,
		|	КредитныеИсторииДанныеСделки.ЧастичноеПравопреемство КАК ЧастичноеПравопреемство,
		|	КредитныеИсторииДанныеСделки.ПризнакКредитнойЛинии КАК ПризнакКредитнойЛинии,
		|	КредитныеИсторииДанныеСделки.КодНБКИТипКредититнойЛинии КАК КодНБКИТипКредититнойЛинии,
		|	КредитныеИсторииДанныеСделки.ПризнакПлавающейПроцентнойСтавки КАК ПризнакПлавающейПроцентнойСтавки,
		|	КредитныеИсторииДанныеСделки.ДатаВозникновенияОбязательстваСубъекта КАК ДатаВозникновенияОбязательстваСубъекта,
		|	КредитныеИсторииДанныеСделки.ПорядковыйНомерТранша КАК ПорядковыйНомерТранша,
		|	КредитныеИсторииДанныеСделки.ПроцентнаяСтавкаПоУсловиям КАК ПроцентнаяСтавкаПоУсловиям,
		|	КредитныеИсторииДанныеСделки.ЧастичнаяПродажа КАК ЧастичнаяПродажа
		|ПОМЕСТИТЬ СобытияИСтатусы
		|ИЗ
		|	РегистрСведений.КредитныеИсторииДанныеСделки КАК КредитныеИсторииДанныеСделки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналВыгрузокНБКИRUTDF КАК ЖурналВыгрузокНБКИRUTDF
		|		ПО КредитныеИсторииДанныеСделки.Сделка = ЖурналВыгрузокНБКИRUTDF.ОбъектУчета
		|			И КредитныеИсторииДанныеСделки.Событие = ЖурналВыгрузокНБКИRUTDF.Событие
		|			И КредитныеИсторииДанныеСделки.ДатаСобытия = ЖурналВыгрузокНБКИRUTDF.ДатаСобытия
		|ГДЕ
		|	КредитныеИсторииДанныеСделки.Сделка В(&ОбъектУчета)
		|	И КредитныеИсторииДанныеСделки.Событие В(&СобытияФормирующиеБлок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СобытияИСтатусы.Сделка КАК Сделка,
		|	СобытияИСтатусы.ДатаСобытия КАК ДатаСобытия,
		|	СобытияИСтатусы.Событие КАК Событие,
		|	СобытияИСтатусы.ДокументСобытие КАК ДокументСобытие,
		|	СобытияИСтатусы.UID КАК UID,
		|	СобытияИСтатусы.ДатаНачалаСделки КАК ДатаНачалаСделки,
		|	СобытияИСтатусы.ДатаОкончанияСделки КАК ДатаОкончанияСделки,
		|	СобытияИСтатусы.ДатаПередачиФинансирования КАК ДатаПередачиФинансирования,
		|	СобытияИСтатусы.ДатаРасчетаСрочнойЗадолженности КАК ДатаРасчетаСрочнойЗадолженности,
		|	СобытияИСтатусы.ДатаРасчетаПросроченнойЗадолженности КАК ДатаРасчетаПросроченнойЗадолженности,
		|	СобытияИСтатусы.СуммаСделки КАК СуммаСделки,
		|	СобытияИСтатусы.СолидарныйДоговор КАК СолидарныйДоговор,
		|	СобытияИСтатусы.ДоговорМКЗ КАК ДоговорМКЗ,
		|	СобытияИСтатусы.РеструктуризацияМКЗ КАК РеструктуризацияМКЗ,
		|	СобытияИСтатусы.Обеспечительство КАК Обеспечительство,
		|	СобытияИСтатусы.СудебноеДело КАК СудебноеДело,
		|	СобытияИСтатусы.ПрекращениеОбязательства КАК ПрекращениеОбязательства,
		|	СобытияИСтатусы.НеденежноеОбязательство КАК НеденежноеОбязательство,
		|	СобытияИСтатусы.Продан КАК Продан,
		|	СобытияИСтатусы.Просрочка90плюс КАК Просрочка90плюс,
		|	СобытияИСтатусы.ПризнакПотребительскогоКредита КАК ПризнакПотребительскогоКредита,
		|	СобытияИСтатусы.ПризнакПлатежнойКарты КАК ПризнакПлатежнойКарты,
		|	СобытияИСтатусы.КодНБКИВидКредита КАК КодНБКИВидКредита,
		|	СобытияИСтатусы.КодНБКИТипКредита КАК КодНБКИТипКредита,
		|	СобытияИСтатусы.КодНБКИЦельКредита КАК КодНБКИЦельКредита,
		|	СобытияИСтатусы.Прощение КАК Прощение,
		|	СобытияИСтатусы.Банкротство КАК Банкротство,
		|	СобытияИСтатусы.БезнадежныйДолг КАК БезнадежныйДолг,
		|	СобытияИСтатусы.Принято КАК Принято,
		|	СобытияИСтатусы.ДатаПоследнейВыгрузки КАК ДатаПоследнейВыгрузки,
		|	СобытияИСтатусы.ДатаВыходаНаПросрочку КАК ДатаВыходаНаПросрочку,
		|	СобытияИСтатусы.ВидЗаимодавца КАК ВидЗаимодавца,
		|	СобытияИСтатусы.ЧастичноеПравопреемство КАК ЧастичноеПравопреемство,
		|	СобытияИСтатусы.ПризнакКредитнойЛинии КАК ПризнакКредитнойЛинии,
		|	СобытияИСтатусы.КодНБКИТипКредититнойЛинии КАК КодНБКИТипКредититнойЛинии,
		|	СобытияИСтатусы.ПризнакПлавающейПроцентнойСтавки КАК ПризнакПлавающейПроцентнойСтавки,
		|	СобытияИСтатусы.ДатаВозникновенияОбязательстваСубъекта КАК ДатаВозникновенияОбязательстваСубъекта,
		|	СобытияИСтатусы.ПорядковыйНомерТранша КАК ПорядковыйНомерТранша,
		|	СобытияИСтатусы.ПроцентнаяСтавкаПоУсловиям КАК ПроцентнаяСтавкаПоУсловиям,
		|	СобытияИСтатусы.ЧастичнаяПродажа КАК ЧастичнаяПродажа
		|ИЗ
		|	СобытияИСтатусы КАК СобытияИСтатусы
		|ГДЕ
		|	СобытияИСтатусы.Принято = &Принято";
	
	ЗапросДанныеСделки.УстановитьПараметр("Принято", Перечисления.СтатусыОтчетаНБКИ.Принято);
	ЗапросДанныеСделки.УстановитьПараметр("ОбъектУчета", Сделка); 
	ЗапросДанныеСделки.УстановитьПараметр("СобытияФормирующиеБлок", мСобытияФормирующиеБлок);
   	
	РезультатЗапроса = ЗапросДанныеСделки.Выполнить();
	ВыборкаДанныеСделки = РезультатЗапроса.Выгрузить();
	
	Возврат ВыборкаДанныеСделки;
	
КонецФункции  

Функция ВернутьСобытияФормирующиеБлок(НомерБлока) Экспорт   
	Если СтрНайти(НомерБлока, "C") > 0 Тогда
		Если СтрНайти(НомерБлока, "25") > 0 ИЛИ СтрНайти(НомерБлока, "26") > 0 ИЛИ СтрНайти(НомерБлока, "27") > 0 Тогда
			ТехническаяСтрокаПоиска = "%252627_171819%";
		Иначе
			ТехническаяСтрокаПоиска = "%" + СтрЗаменить(НомерБлока, "C", "") + "_%";
		КонецЕсли;
	ИначеЕсли СтрНайти(НомерБлока, "B") > 0 Тогда
		Если СтрНайти(НомерБлока, "17") > 0 ИЛИ СтрНайти(НомерБлока, "18") > 0 ИЛИ СтрНайти(НомерБлока, "19") > 0 Тогда
			ТехническаяСтрокаПоиска = "%252627_171819%";
		Иначе
			ТехническаяСтрокаПоиска = "%_" + СтрЗаменить(НомерБлока, "B", "");
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КредитныеИстории_СобытияИГруппыБлоков.Событие КАК Событие
	|ИЗ
	|	РегистрСведений.КредитныеИстории_СобытияИГруппыБлоков КАК КредитныеИстории_СобытияИГруппыБлоков
	|ГДЕ
	|	КредитныеИстории_СобытияИГруппыБлоков.ИмяПроцедурыУЗ ПОДОБНО &ИмяПроцедурыУЗ";
	
	Запрос.УстановитьПараметр("ИмяПроцедурыУЗ", ТехническаяСтрокаПоиска);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Событие"); 		  
	Возврат РезультатЗапроса;
КонецФункции   

Функция СформироватьСтрокуИсправлениеБлокаИнформационнойЧастиСделки(Операция, ПараметрыФункций, ТитульнаяЗапись, Сделка, НомерБлока, ПолеБлока, СтрокаНаКорректировку) Экспорт 
	
	ЭтоДинимическийБлок = ВернутьПризнакДинамическогоБлока(НомерБлока);
	Если ЭтоДинимическийБлок Тогда
		СтрокаНаВозврат = "Корректировка указанного блока не предуспотрена в отрыве от других записей КИ, рекомендуем Вам воспользоваться настройкой" + 
		" Динамическая информация Сделки Субъекта. Отчет не сформирован!";
		Возврат СтрокаНаВозврат;
	КонецЕсли;	
	
	Попытка
		ДР = ТитульнаяЗапись.ДатаРождения;
		Префикс = "C";  
		ПараметрыФункций.Вставить("Дееспособность", ТитульнаяЗапись.Дееспособность); 
		ПараметрыФункций.Вставить("ЛицоНеСуществует", Неопределено);
	Исключение
		Префикс = "B";
		ПараметрыФункций.Вставить("Дееспособность", Неопределено); 
		ПараметрыФункций.Вставить("ЛицоНеСуществует", ТитульнаяЗапись.ЛиквидацияЮЛ);
	КонецПопытки; 
	
	Если СтрНайти(НомерБлока, "C") > 0 Тогда
		Если СтрНайти(НомерБлока, "25") > 0 ИЛИ СтрНайти(НомерБлока, "26") > 0 ИЛИ СтрНайти(НомерБлока, "27") > 0 Тогда
			ТехническаяСтрокаПоиска = "%252627_171819%";
		Иначе
			ТехническаяСтрокаПоиска = "%" + СтрЗаменить(НомерБлока, "C", "") + "_%";
		КонецЕсли;
	ИначеЕсли СтрНайти(НомерБлока, "B") > 0 Тогда
		Если СтрНайти(НомерБлока, "17") > 0 ИЛИ СтрНайти(НомерБлока, "18") > 0 ИЛИ СтрНайти(НомерБлока, "19") > 0 Тогда
			ТехническаяСтрокаПоиска = "%252627_171819%";
		Иначе
			ТехническаяСтрокаПоиска = "%_" + СтрЗаменить(НомерБлока, "B", "");
		КонецЕсли;
	Иначе
		ТехническаяСтрокаПоиска = "";
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КредитныеИстории_СобытияИГруппыБлоков.ИмяПроцедурыУЗ КАК ИмяПроцедурыУЗ
	|ИЗ
	|	РегистрСведений.КредитныеИстории_СобытияИГруппыБлоков КАК КредитныеИстории_СобытияИГруппыБлоков
	|ГДЕ
	|	КредитныеИстории_СобытияИГруппыБлоков.ИмяПроцедурыУЗ ПОДОБНО &ИмяПроцедурыУЗ";
	
	Запрос.УстановитьПараметр("ИмяПроцедурыУЗ", ТехническаяСтрокаПоиска);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ИмяПроцедурыУЗ = ВыборкаДетальныеЗаписи.ИмяПроцедурыУЗ
	КонецЦикла;  
	
	Если Не ЗначениеЗаполнено(ИмяПроцедурыУЗ) Тогда 
		СтрокаНаВозврат =  "Произошла ошибка формирования блока сделки!";
		Возврат СтрокаНаВозврат;
	КонецЕсли;
	
	
	СтрокаОтчета = "";
	Запись = ПолучитьПараметрыСделки(Сделка);
	УИД = КредитныеИстории.СформироватьБлок17_10(Запись, Префикс, ПараметрыФункций);
	РезультатФункции = Вычислить("КредитныеИстории." + ИмяПроцедурыУЗ + "(Запись, Префикс, ПараметрыФункций)");
	Если ТипЗнч(РезультатФункции) = Тип("Строка") Тогда
		Если ЗначениеЗаполнено(РезультатФункции) Тогда
			СтрокаОтчета =  РезультатФункции; 
		КонецЕсли;
	ИначеЕсли ТипЗнч(РезультатФункции) = Тип("Массив") Тогда
		Для Каждого Значение Из РезультатФункции Цикл
			Если ЗначениеЗаполнено(Значение) Тогда
				СтрокаОтчета = СтрокаОтчета + Значение;
			КонецЕсли;
		КонецЦикла;	
	Иначе
		СтрокаОтчета = "Ошибка формирования группы блоков! " + Строка(Сделка);
	КонецЕсли;
	
	СтрокаНаВозврат = ?(Операция = Перечисления.ВидыОперацийИсправленияИУдаленияRUTDF.C_1, (УИД + Символы.ПС + СтрокаОтчета + Символы.ПС + "DELETE" + Символы.ПС), ("DELETE" + Символы.ПС));
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаОтчета, Символы.Таб, Ложь, Ложь);
	
	МассивПодстрок[Число(ПолеБлока)] = СтрокаНаКорректировку;
	
	СтрокаОтчета = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(МассивПодстрок, Символы.Таб, Ложь);	
	
	СтрокаНаВозврат = СтрокаНаВозврат + СтрокаОтчета;
	
	Возврат СтрокаНаВозврат;
		
КонецФункции 

Функция ВернутьПризнакДинамическогоБлока(НомерБлока) Экспорт  
	СтрокаДинамическихБлоков = "C21 B14 C25 B17 C26 B18 C27 B19 C28 B20 C29 C32 B23 C33 B24 C34 B25 C35 B26 C36 B27 C37 B28 C39 B30";	
	ЭтоДинамическийБлок = СтрНайти(СтрокаДинамическихБлоков, НомерБлока) > 0;
	Возврат ЭтоДинамическийБлок;
КонецФункции   

Функция ПолучитьПараметрыСделки(Сделка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КредитныеИсторииДанныеСделки.Сделка КАК Сделка,
	|	МАКСИМУМ(КредитныеИсторииДанныеСделки.ДатаСобытия) КАК ДатаСобытия
	|ПОМЕСТИТЬ ДатаПоследнегоСобытия
	|ИЗ
	|	РегистрСведений.КредитныеИсторииДанныеСделки КАК КредитныеИсторииДанныеСделки
	|ГДЕ
	|	КредитныеИсторииДанныеСделки.Сделка = &Сделка
	|
	|СГРУППИРОВАТЬ ПО
	|	КредитныеИсторииДанныеСделки.Сделка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатаПоследнегоСобытия.Сделка КАК Сделка,
	|	ДатаПоследнегоСобытия.ДатаСобытия КАК ДатаСобытия,
	|	КредитныеИсторииДанныеСделки.Событие КАК Событие,
	|	КредитныеИсторииДанныеСделки.ДокументСобытие КАК ДокументСобытие,
	|	КредитныеИсторииДанныеСделки.UID КАК UID,
	|	КредитныеИсторииДанныеСделки.ДатаНачалаСделки КАК ДатаНачалаСделки,
	|	КредитныеИсторииДанныеСделки.ДатаОкончанияСделки КАК ДатаОкончанияСделки,
	|	КредитныеИсторииДанныеСделки.ДатаПередачиФинансирования КАК ДатаПередачиФинансирования,
	|	КредитныеИсторииДанныеСделки.СуммаСделки КАК СуммаСделки,
	|	КредитныеИсторииДанныеСделки.СолидарныйДоговор КАК СолидарныйДоговор,
	|	КредитныеИсторииДанныеСделки.ДоговорМКЗ КАК ДоговорМКЗ,
	|	КредитныеИсторииДанныеСделки.РеструктуризацияМКЗ КАК РеструктуризацияМКЗ,
	|	КредитныеИсторииДанныеСделки.Обеспечительство КАК Обеспечительство,
	|	КредитныеИсторииДанныеСделки.СудебноеДело КАК СудебноеДело,
	|	КредитныеИсторииДанныеСделки.ПрекращениеОбязательства КАК ПрекращениеОбязательства,
	|	КредитныеИсторииДанныеСделки.Продан КАК Продан,
	|	КредитныеИсторииДанныеСделки.Просрочка90плюс КАК Просрочка90плюс,
	|	КредитныеИсторииДанныеСделки.ПризнакПотребительскогоКредита КАК ПризнакПотребительскогоКредита,
	|	КредитныеИсторииДанныеСделки.ПризнакПлатежнойКарты КАК ПризнакПлатежнойКарты,
	|	КредитныеИсторииДанныеСделки.НеденежноеОбязательство КАК НеденежноеОбязательство,
	|	КредитныеИсторииДанныеСделки.КодНБКИВидКредита КАК КодНБКИВидКредита,
	|	КредитныеИсторииДанныеСделки.КодНБКИТипКредита КАК КодНБКИТипКредита,
	|	КредитныеИсторииДанныеСделки.КодНБКИЦельКредита КАК КодНБКИЦельКредита,
	|	КредитныеИсторииДанныеСделки.Прощение КАК Прощение,
	|	КредитныеИсторииДанныеСделки.Банкротство КАК Банкротство,
	|	КредитныеИсторииДанныеСделки.БезнадежныйДолг КАК БезнадежныйДолг,
	|	КредитныеИсторииДанныеСделки.ДатаРасчетаСрочнойЗадолженности КАК ДатаРасчетаСрочнойЗадолженности,
	|	КредитныеИсторииДанныеСделки.ДатаРасчетаПросроченнойЗадолженности КАК ДатаРасчетаПросроченнойЗадолженности,
	|	КредитныеИсторииДанныеСделки.ДатаВыходаНаПросрочку КАК ДатаВыходаНаПросрочку,
	|	КредитныеИсторииДанныеСделки.ВидЗаимодавца КАК ВидЗаимодавца,
	|	КредитныеИсторииДанныеСделки.ЧастичноеПравопреемство КАК ЧастичноеПравопреемство,
	|	КредитныеИсторииДанныеСделки.ПризнакКредитнойЛинии КАК ПризнакКредитнойЛинии,
	|	КредитныеИсторииДанныеСделки.КодНБКИТипКредититнойЛинии КАК КодНБКИТипКредититнойЛинии,
	|	КредитныеИсторииДанныеСделки.ПризнакПлавающейПроцентнойСтавки КАК ПризнакПлавающейПроцентнойСтавки,
	|	КредитныеИсторииДанныеСделки.ДатаВозникновенияОбязательстваСубъекта КАК ДатаВозникновенияОбязательстваСубъекта,
	|	КредитныеИсторииДанныеСделки.ПорядковыйНомерТранша КАК ПорядковыйНомерТранша,
	|	КредитныеИсторииДанныеСделки.ПроцентнаяСтавкаПоУсловиям КАК ПроцентнаяСтавкаПоУсловиям,
	|	КредитныеИсторииДанныеСделки.ЧастичнаяПродажа КАК ЧастичнаяПродажа
	|ИЗ
	|	ДатаПоследнегоСобытия КАК ДатаПоследнегоСобытия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КредитныеИсторииДанныеСделки КАК КредитныеИсторииДанныеСделки
	|		ПО ДатаПоследнегоСобытия.Сделка = КредитныеИсторииДанныеСделки.Сделка
	|			И ДатаПоследнегоСобытия.ДатаСобытия = КредитныеИсторииДанныеСделки.ДатаСобытия";
	
	Запрос.УстановитьПараметр("Сделка", Сделка);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();  
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаписьСПараметрами =  ВыборкаДетальныеЗаписи;
	КонецЦикла;	
	
	Возврат ЗаписьСПараметрами;
КонецФункции 

#КонецОбласти

#Область СобытияTUTDF 

Процедура ГлавнаяВосстановитьСобытияTUTDF(Параметры, АдресРезультата) Экспорт
	//Параметры:
	//Настройка
	//ТЗ объект, должник 
	
	СсылкаНаОтчет = Параметры.ДокОтчетСсылка;
	ТЗОбъектов = СсылкаНаОтчет.тчЗаписиTUTDF.Выгрузить();
	Настройка = СсылкаНаОтчет.НастройкаВыгрузки;
	
	//Возврщаем и Восстанавливаем 2.11.2 или 0.0
	ТаблициПервичныхСобытий = ВернутьПервичноеСобытие(ТЗОбъектов, Настройка);  
	
	//Восстанавливаем 1.4 - неденежное или ДоговорМкз 
	ВосстановитьСовершениеСделкиTUTDF(ТаблициПервичныхСобытий, ТЗОбъектов, Настройка, СсылкаНаОтчет);
	
	// Восстанавливаем Обеспечительства 2.4
	ВосстановитьОбеспечительстваTUTDF(ТаблициПервичныхСобытий, ТЗОбъектов, Настройка, СсылкаНаОтчет);
	
	// Восстанавливаем Реструктуризации или изменения (НЕ С ТИПОМ Наследство) 2.1  
	ВосстановитьИзмененияСделкиTUTDF(ТаблициПервичныхСобытий, ТЗОбъектов, Настройка, СсылкаНаОтчет);
	
	// Восстанавливаем Судебные дела или ИД 2.6 
	ВосстановитьСудопроизводствоTUTDF(ТаблициПервичныхСобытий, ТЗОбъектов, Настройка, СсылкаНаОтчет);
	
	// Восстанивливаем Наследство - 2.1 с типом наследство и цепочку событий Должника 
	ВосстановитьНаследованиеTUTDF(ТаблициПервичныхСобытий, ТЗОбъектов, Настройка, СсылкаНаОтчет);
	
	// Восстанавливаем Фактические платежи 2.3  
	ВосстановитьПлатежиTUTDF(ТаблициПервичныхСобытий, ТЗОбъектов, Настройка, СсылкаНаОтчет);
	
	// Рассчитываем отсутствие событий в течение 30 дней 2.3   
	Рассчитать30ДнейПоВосстановленнымСобытиямTUTDF(ТЗОбъектов, СсылкаНаОтчет); 
	
	ДокОбъект =  СсылкаНаОтчет.Получитьобъект();
	ДокОбъект.ПроставитьЗаписямСтатус(); 
	
	ОкончаниеВосстановления = 100; 
	ДлительныеОперации.СообщитьПрогресс(ОкончаниеВосстановления, "Завершение операции восстановления");	
	
КонецПроцедуры 

Функция ВернутьПервичноеСобытие(ТЗОбъектов, Настройка) Экспорт  
	
	ПсевдоСобытие = Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", "0.0");
	Правопреемство = Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", "2.11.2");
	ПрогрессВыполнения = 0;  
 	Событие = Новый Массив;
	Событие.Добавить(ПсевдоСобытие); 
	Событие.Добавить(Правопреемство);
	//ТЗОбъектов = Новый ТаблицаЗначений();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	РегистрСведений.КредитныеИсторииДанныеСделки КАК КредитныеИсторииДанныеСделки
		|ГДЕ
		|	КредитныеИсторииДанныеСделки.Сделка В(&Сделка)
		|	И КредитныеИсторииДанныеСделки.Событие В(&Событие)";
	
	//Запрос.УстановитьПараметр("ДокументСобытие", Настройка);
	Запрос.УстановитьПараметр("Сделка", ТЗОбъектов.ВыгрузитьКолонку("ОбъектУчета"));
	Запрос.УстановитьПараметр("Событие", Событие);
	
	
	ВыборкаПервичныхСобытий = Запрос.Выполнить().Выбрать(); 
	Если Настройка.ПисатьСобытиеПравопреемства И ЗначениеЗаполнено(Настройка.ПризнакЦессии) Тогда  
		//Заменяем псевдо - перичное событие 0.0 на событие НБКИ 2.11.2
		Пока ВыборкаПервичныхСобытий.Следующий() Цикл 
			Если ВыборкаПервичныхСобытий.Событие = ПсевдоСобытие Тогда
				Замена = РегистрыСведений.КредитныеИсторииДанныеСделки.СоздатьМенеджерЗаписи();
				Замена.Сделка = ВыборкаПервичныхСобытий.Сделка; 
				Замена.Событие = ПсевдоСобытие;
				Замена.датаСобытия = ВыборкаПервичныхСобытий.ДатаСобытия; 
				Замена.ДокументСобытие = ВыборкаПервичныхСобытий.ДокументСобытие;
				
				Замена.Прочитать(); 
				Если Замена.Выбран() Тогда
					Замена.Событие = Правопреемство;  
					Замена.ДатаСобытия = ?(ЗначениеЗаполнено(Замена.ДатаРасчетаПросроченнойЗадолженности), Замена.ДатаРасчетаПросроченнойЗадолженности, Замена.ДатаРасчетаСрочнойЗадолженности);
					Замена.Записать();	
				КонецЕсли;
			КонецЕсли;
			
			КредитныеИсторииДлительнаяОперация(ПрогрессВыполнения, ВыборкаПервичныхСобытий.Количество(), "Анализ первичного события...");
			
		КонецЦикла;	
	КонецЕсли;	
	
	

	РезультатЗапроса = Запрос.Выполнить().Выгрузить();  
	
	ОбъединениеТаблиц = РезультатЗапроса.Скопировать();
	ТаблицаВосстановленныхПервичныхСобытий = РезультатЗапроса.СкопироватьКолонки();
	
	Для Каждого стрСделка ИЗ ТЗОбъектов Цикл
		Если РезультатЗапроса.Найти(стрСделка.ОбъектУчета, "Сделка") = Неопределено Тогда
			Запись = ВосстановитьПервичноеСобытие(стрСделка.ОбъектУчета, Настройка);
			ЗаполнитьЗначенияСвойств(ТаблицаВосстановленныхПервичныхСобытий.Добавить(), Запись);			
		КонецЕсли; 
		КредитныеИсторииДлительнаяОперация(ПрогрессВыполнения, ТЗОбъектов.Количество(), "Восстановление первичного события...");
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаВосстановленныхПервичныхСобытий Цикл 
		ЗаполнитьЗначенияСвойств(ОбъединениеТаблиц.Добавить(), Строка);
		КредитныеИсторииДлительнаяОперация(ПрогрессВыполнения, ТЗОбъектов.Количество(), "Восстановление первичного события...");
	КонецЦикла;
	
	Возврат ОбъединениеТаблиц;  
	
			
КонецФункции

Процедура ВосстановитьСовершениеСделкиTUTDF(ТаблициПервичныхСобытий, ТЗОбъектов, Настройка, ДокОтчет) Экспорт
		
	//Восстанавливаем 1.4 - неденежное или ДоговорМкз   
	//Если есть Первичное 2.11.2 - не нужно восстанавливать 1.4 
	ПрогрессВыполнения = 0;
	Событие = Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", "1.4");
	
	ТипДокументаСобытия = "Справочник";
	ИмяДокументаСобытия = "НеденежныеОбязательства";
	ИмяОбъектаУчетаВДокументе = "ОбъектОбязательства";
	
	ТекстЗапроса = ТекстЗапросаСобытий(ТипДокументаСобытия, ИмяДокументаСобытия, ИмяОбъектаУчетаВДокументе);  
	Результат = ВыполнитьЗапросСобытий(ТекстЗапроса, ТЗОбъектов);
	Если НЕ Результат.Пустой() Тогда 
		Выборка = Результат.Выбрать(); 
		Пока Выборка.Следующий() Цикл   
			Если Не ЗначениеЗаполнено(Выборка.ДокументСобытие) Тогда	
				ЗаписьПервичноеСобытие = ТаблициПервичныхСобытий.Найти(Выборка.ОбъектУЗ);
				Если ЗаписьПервичноеСобытие = Неопределено Тогда
					Продолжить;  
				ИначеЕсли ЗаписьПервичноеСобытие.Событие.КодНБКИ = "2.11.2" Тогда
					Продолжить;
				Иначе 
					Если ЭтоСобытиеИсточника(ЗаписьПервичноеСобытие, Выборка.ДокументУЗ.ДатаОбращенияСубъекта) Тогда
						ЗаписьКИ = ВернутьЗаписьРегистраКИ(ЗаписьПервичноеСобытие);
						ЗаписьКИ.ДатаСобытия = Выборка.ДокументУЗ.ДатаОбращенияСубъекта;
						ЗаписьКИ.Событие = Событие;
						ЗаписьКИ.ДокументСобытие = Выборка.ДокументУЗ;
						КредитныеИстории.ОбработатьСобытиеПоИсточнику(ЗаписьКИ, Выборка.ДокументУЗ);
						ЗаписьКИ.Записать();
						КредитныеИстории.ЗанестиЗаписьВЖурналRUTDF(ЗаписьКИ, ДокОтчет.Дата, Строка(ДокОтчет.Операция), ДокОтчет, ЗаписьКИ.UID); 
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
			КредитныеИсторииДлительнаяОперация(ПрогрессВыполнения, Выборка.Количество(), "Восстановление совершение сделки...");
		КонецЦикла;
	КонецЕсли;	
	
	ТипДокументаСобытия = "Документ";
	ИмяДокументаСобытия = "ДоговорМикрозайма";
	ИмяОбъектаУчетаВДокументе = "Займ";

	ТекстЗапроса = ТекстЗапросаСобытий(ТипДокументаСобытия, ИмяДокументаСобытия, ИмяОбъектаУчетаВДокументе);
	Результат = ВыполнитьЗапросСобытий(ТекстЗапроса, ТЗОбъектов);
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл 
			Если НЕ ЗначениеЗаполнено(Выборка.ДокументСобытие) Тогда
				ЗаписьПервичноеСобытие = ТаблициПервичныхСобытий.Найти(Выборка.ОбъектУЗ);
				Если ЗаписьПервичноеСобытие = Неопределено Тогда
					Продолжить;  
				ИначеЕсли ЗаписьПервичноеСобытие.Событие.КодНБКИ = "2.11.2" Тогда
					Продолжить;
				Иначе 
					Если ЭтоСобытиеИсточника(ЗаписьПервичноеСобытие, Выборка.ДокументУЗ.ДатаВыдачиЗайма) Тогда
						ЗаписьКИ = ВернутьЗаписьРегистраКИ(ЗаписьПервичноеСобытие);
						ЗаписьКИ.ДатаСобытия = Выборка.ДокументУЗ.ДатаВыдачиЗайма;
						ЗаписьКИ.Событие = Событие;
						ЗаписьКИ.ДокументСобытие = Выборка.ДокументУЗ;
						КредитныеИстории.ОбработатьСобытиеПоИсточнику(ЗаписьКИ, Выборка.ДокументУЗ);
						ЗаписьКИ.Записать(); 
						КредитныеИстории.ЗанестиЗаписьВЖурналRUTDF(ЗаписьКИ, ДокОтчет.Дата, Строка(ДокОтчет.Операция), ДокОтчет, ЗаписьКИ.UID);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли; 
			КредитныеИсторииДлительнаяОперация(ПрогрессВыполнения, Выборка.Количество(), "Восстановление правопреемства сделки...");
		КонецЦикла;	
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ВосстановитьОбеспечительстваTUTDF(ТаблициПервичныхСобытий, ТЗОбъектов, Настройка, ДокОтчет) Экспорт
	
	// Восстанавливаем Обеспечительства 2.4  
	ПрогрессВыполнения = 0;
	Событие = Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", "2.4");

	ТипДокументаСобытия = "Документ";
	ИмяДокументаСобытия = "Обеспечительства";
	ИмяОбъектаУчетаВДокументе = "ОбъектОбеспечительства";
	
	ТекстЗапроса = ТекстЗапросаСобытий(ТипДокументаСобытия, ИмяДокументаСобытия, ИмяОбъектаУчетаВДокументе);
	Результат = ВыполнитьЗапросСобытий(ТекстЗапроса, ТЗОбъектов);
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();	
		Пока Выборка.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(Выборка.ДокументСобытие) Тогда
				ЗаписьПервичноеСобытие = ТаблициПервичныхСобытий.Найти(Выборка.ОбъектУЗ);
				Если ЗаписьПервичноеСобытие = Неопределено Тогда
					Продолжить;  
				Иначе  
					Если ЭтоСобытиеИсточника(ЗаписьПервичноеСобытие, Выборка.ДокументУЗ.ДатаЗаключенияДоговора) Тогда
						ЗаписьКИ = ВернутьЗаписьРегистраКИ(ЗаписьПервичноеСобытие);
						ЗаписьКИ.ДатаСобытия = Выборка.ДокументУЗ.ДатаЗаключенияДоговора;
						ЗаписьКИ.Событие = Событие;
						ЗаписьКИ.ДокументСобытие = Выборка.ДокументУЗ;
						КредитныеИстории.ОбработатьСобытиеПоИсточнику(ЗаписьКИ, Выборка.ДокументУЗ);
						ЗаписьКИ.Записать();
						КредитныеИстории.ЗанестиЗаписьВЖурналRUTDF(ЗаписьКИ, ДокОтчет.Дата, Строка(ДокОтчет.Операция), ДокОтчет, ЗаписьКИ.UID); 
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
			КредитныеИсторииДлительнаяОперация(ПрогрессВыполнения, Выборка.Количество(), "Восстановление Обеспечительства сделки...");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьИзмененияСделкиTUTDF(ТаблициПервичныхСобытий, ТЗОбъектов, Настройка, ДокОтчет) Экспорт
		
	//  Восстанавливаем Реструктуризации или изменения (НЕ С ТИПОМ Наследство) 2.1 
	ПрогрессВыполнения = 0;
	Событие = Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", "2.1");
	ПрогрессВыполненния = 0;
	ТипДокументаСобытия = "Документ";
	ИмяДокументаСобытия = "РеструктуризацияМикрозайма";
	ИмяОбъектаУчетаВДокументе = "Займ";
	ТекстЗапроса = ТекстЗапросаСобытий(ТипДокументаСобытия, ИмяДокументаСобытия, ИмяОбъектаУчетаВДокументе); 
	Результат = ВыполнитьЗапросСобытий(ТекстЗапроса, ТЗОбъектов);
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл 
			Если НЕ ЗначениеЗаполнено(Выборка.ДокументСобытие) Тогда	
				ЗаписьПервичноеСобытие = ТаблициПервичныхСобытий.Найти(Выборка.ОбъектУЗ);
				Если ЗаписьПервичноеСобытие = Неопределено Тогда
					Продолжить;  
				Иначе
					Если ЭтоСобытиеИсточника(ЗаписьПервичноеСобытие, Выборка.ДокументУЗ.ДатаВыдачиЗайма) Тогда
						ЗаписьКИ = ВернутьЗаписьРегистраКИ(ЗаписьПервичноеСобытие);
						ЗаписьКИ.ДатаСобытия = Выборка.ДокументУЗ.ДатаВыдачиЗайма;
						ЗаписьКИ.Событие = Событие;
						ЗаписьКИ.ДокументСобытие = Выборка.ДокументУЗ;
						КредитныеИстории.ОбработатьСобытиеПоИсточнику(ЗаписьКИ, Выборка.ДокументУЗ);
						ЗаписьКИ.Записать(); 
						КредитныеИстории.ЗанестиЗаписьВЖурналRUTDF(ЗаписьКИ, ДокОтчет.Дата, Строка(ДокОтчет.Операция), ДокОтчет, ЗаписьКИ.UID);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;  
			КредитныеИсторииДлительнаяОперация(ПрогрессВыполнения, Выборка.Количество(), "Восстановление изменений сделки...");
		КонецЦикла;
	КонецЕсли;   
	
	// НЕ наследство 
	ТипДокументаСобытия = "Документ";
	ИмяДокументаСобытия = "СведенияОбИзмененииДоговора";
	ИмяОбъектаУчетаВДокументе = "ОбъектУчета";
	ТекстЗапроса = ТекстЗапросаСобытий(ТипДокументаСобытия, ИмяДокументаСобытия, ИмяОбъектаУчетаВДокументе);
	
	Результат = ВыполнитьЗапросСобытий(ТекстЗапроса, ТЗОбъектов);
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл  
			Если НЕ ЗначениеЗаполнено(Выборка.ДокументСобытие) Тогда
				ЗаписьПервичноеСобытие = ТаблициПервичныхСобытий.Найти(Выборка.ОбъектУЗ);
				Если ЗаписьПервичноеСобытие = Неопределено Тогда
					Продолжить;  
				ИначеЕсли Выборка.ДокументУЗ.ТипИзменения = Перечисления.НБКИ_ТипыИзмененияДоговора.НаследованиеДоговора Тогда
					Продолжить;
				Иначе     
					Если ЭтоСобытиеИсточника(ЗаписьПервичноеСобытие, Выборка.ДокументУЗ.ДатаИзмененияДоговора) Тогда
						ЗаписьКИ = ВернутьЗаписьРегистраКИ(ЗаписьПервичноеСобытие);
						ЗаписьКИ.ДатаСобытия = Выборка.ДокументУЗ.ДатаИзмененияДоговора;
						ЗаписьКИ.Событие = Событие;
						ЗаписьКИ.ДокументСобытие = Выборка.ДокументУЗ;
						КредитныеИстории.ОбработатьСобытиеПоИсточнику(ЗаписьКИ, Выборка.ДокументУЗ);
						ЗаписьКИ.Записать();
						КредитныеИстории.ЗанестиЗаписьВЖурналRUTDF(ЗаписьКИ, ДокОтчет.Дата, Строка(ДокОтчет.Операция), ДокОтчет, ЗаписьКИ.UID);
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;	
			КредитныеИсторииДлительнаяОперация(ПрогрессВыполнения, Выборка.Количество(), "Восстановление изменений сделки...");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьСудопроизводствоTUTDF(ТаблициПервичныхСобытий, ТЗОбъектов, Настройка, ДокОтчет) Экспорт
		
	// Восстанавливаем Судебные дела или ИД 2.6 
	// Если есть ИД, то событие по Документу-делу не пишем, должна быть одна запись 2.6 на сделку  
	Событие = Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", "2.6"); 
	ПрогрессВыполнения = 0;
	ТипДокументаСобытия = "Документ";
	ИмяДокументаСобытия = "СудебноеДело";
	ИмяОбъектаУчетаВДокументе = "Займ";
	ТекстЗапроса = ТекстЗапросаСобытий(ТипДокументаСобытия, ИмяДокументаСобытия, ИмяОбъектаУчетаВДокументе);
	
	Результат = ВыполнитьЗапросСобытий(ТекстЗапроса, ТЗОбъектов);
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл   
			Если НЕ ЗначениеЗаполнено(Выборка.ДокументСобытие) Тогда	
				ЗаписьПервичноеСобытие = ТаблициПервичныхСобытий.Найти(Выборка.ОбъектУЗ);
				Если ЗаписьПервичноеСобытие = Неопределено Тогда
					Продолжить;  
				Иначе 
					Если Выборка.ДокументУЗ.ИД.Количество() > 1 Тогда
						//Заполняем по ИД
						Для Каждого стрИД ИЗ Выборка.ДокументУЗ.ИД Цикл
							Если ЭтоСобытиеИсточника(ЗаписьПервичноеСобытие, СтрИД.ИсполнительныйДокумент.ДатаИД) Тогда
								ЗаписьКИ = ВернутьЗаписьРегистраКИ(ЗаписьПервичноеСобытие);
								ЗаписьКИ.ДатаСобытия = СтрИД.ИсполнительныйДокумент.ДатаИД;
								ЗаписьКИ.Событие = Событие;
								ЗаписьКИ.ДокументСобытие = СтрИД.ИсполнительныйДокумент;
								КредитныеИстории.ОбработатьСобытиеПоИсточнику(ЗаписьКИ, СтрИД.ИсполнительныйДокумент);
								ЗаписьКИ.Записать(); 
								КредитныеИстории.ЗанестиЗаписьВЖурналRUTDF(ЗаписьКИ, ДокОтчет.Дата, Строка(ДокОтчет.Операция), ДокОтчет, ЗаписьКИ.UID);
							КонецЕсли;
						КонецЦикла;	
					Иначе 
						ДатаСобытия = ?(ЗначениеЗаполнено(Выборка.ДокументУЗ.ДатаОтмены), Выборка.ДокументУЗ.ДатаОтмены, Выборка.ДокументУЗ.ДатаИска);
						Если ЭтоСобытиеИсточника(ЗаписьПервичноеСобытие, ДатаСобытия) Тогда
							ЗаписьКИ = ВернутьЗаписьРегистраКИ(ЗаписьПервичноеСобытие);
							ЗаписьКИ.ДатаСобытия = ДатаСобытия;
							ЗаписьКИ.Событие = Событие;
							ЗаписьКИ.ДокументСобытие = Выборка.ДокументУЗ; 
							КредитныеИстории.ОбработатьСобытиеПоИсточнику(ЗаписьКИ, Выборка.ДокументУЗ);
							ЗаписьКИ.Записать();  
							КредитныеИстории.ЗанестиЗаписьВЖурналRUTDF(ЗаписьКИ, ДокОтчет.Дата, Строка(ДокОтчет.Операция), ДокОтчет, ЗаписьКИ.UID);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			КредитныеИсторииДлительнаяОперация(ПрогрессВыполнения, Выборка.Количество(), "Восстановление судебных дел сделки...");
		КонецЦикла;
		
	КонецЕсли;
	
		
КонецПроцедуры

Процедура ВосстановитьНаследованиеTUTDF(ТаблициПервичныхСобытий, ТЗОбъектов, Настройка, ДокОтчет) Экспорт 
	// Восстанивливаем Наследство - 2.1 с типом наследство и цепочку событий Должника 
	ПрогрессВыполнения = 0;
	Событие = Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", "2.1");
	ТипДокументаСобытия = "Документ";
	ИмяДокументаСобытия = "СведенияОбИзмененииДоговора";
	ИмяОбъектаУчетаВДокументе = "ОбъектУчета";
	//Наследство - через документ  СведенияОбИзмененииДоговора с типом НаследованиеДоговора
	ТекстЗапроса = ТекстЗапросаСобытий(ТипДокументаСобытия, ИмяДокументаСобытия, ИмяОбъектаУчетаВДокументе);	
	Результат = ВыполнитьЗапросСобытий(ТекстЗапроса, ТЗОбъектов); 
	
	Часы = 12;
	Секунды = 3600; 
	
	МассивСобытий = Новый Массив;
	
	МассивСобытий.Добавить("2.5");
	МассивСобытий.Добавить("1.4");
	МассивСобытий.Добавить("2.2");
	МассивСобытий.Добавить("2.3");

	
	Если НЕ Результат.Пустой() Тогда 
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл 
			Если НЕ ЗначениеЗаполнено(Выборка.ДокументСобытие) Тогда
				ЗаписьПервичноеСобытие = ТаблициПервичныхСобытий.Найти(Выборка.ОбъектУЗ);
				Если ЗаписьПервичноеСобытие = Неопределено Тогда
					Продолжить;  
				ИначеЕсли Выборка.ДокументУЗ.ТипИзменения <> Перечисления.НБКИ_ТипыИзмененияДоговора.НаследованиеДоговора Тогда
					Продолжить;
				Иначе 
					//Получить наследника 
					Наследник = Выборка.ДокументУЗ.Наследник;
					Если ЗначениеЗаполнено(Наследник) Тогда
												
						ДатаСобытияИзменения = ?(ЗначениеЗаполнено(Выборка.ДокументУЗ.ДатаИзмененияДоговора), Выборка.ДокументУЗ.ДатаИзмененияДоговора, НачалоДня(ТекущаяДатаСеанса())); 
						ДатаСобытияИзменения =  ДатаСобытияИзменения + (Часы * Секунды);
						Для Каждого НБКИСобытие из МассивСобытий Цикл
							Если НБКИСобытие = "2.5" Тогда
								ДатаСобытия = НачалоДня(ДатаСобытияИзменения);
							ИначеЕсли НБКИСобытие = "2.2" Тогда 
								ДатаСобытия = ДатаСобытияИзменения + 2;
							Иначе
								ДатаСобытия = ДатаСобытия + 2;
							КонецЕсли;	
							ЭтоСобытиеИсточника(ЗаписьПервичноеСобытие, Выборка.ДокументУЗ.ДатаИзмененияДоговора);
							ЗаписьКИ = ВернутьЗаписьРегистраКИ(ЗаписьПервичноеСобытие);
							ЗаписьКИ.ДатаСобытия = Выборка.ДокументУЗ.ДатаИзмененияДоговора;
							ЗаписьКИ.Событие = Событие;
							ЗаписьКИ.ДокументСобытие = Выборка.ДокументУЗ;  
							КредитныеИстории.ОбработатьСобытиеПоИсточнику(ЗаписьКИ, Выборка.ДокументУЗ);
							ЗаписьКИ.Записать();
							КредитныеИстории.ЗанестиЗаписьВЖурналRUTDF(ЗаписьКИ, ДокОтчет.Дата, Строка(ДокОтчет.Операция), ДокОтчет, ЗаписьКИ.UID); 
							
						КонецЦикла;	
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			КредитныеИсторииДлительнаяОперация(ПрогрессВыполнения, Выборка.Количество(), "Восстановление изменений сделки...");
		КонецЦикла;	
	КонецЕсли;

		
КонецПроцедуры 

Процедура ВосстановитьПлатежиTUTDF(ТаблициПервичныхСобытий, ТЗОбъектов, Настройка, ДокОтчет) Экспорт
		
	// Восстанавливаем Фактические платежи 2.3
	ПрогрессВыполнения = 0;
	Событие = Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", "2.3");
	Закрытие = Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", "2.5");
	
	ТекстЗапроса = ТекстЗапросаПлатежей(); 
	Результат = ВыполнитьЗапросСобытий(ТекстЗапроса, ТЗОбъектов);
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл 
			Если НЕ ЗначениеЗаполнено(Выборка.ДокументСобытие) Тогда
				ЗаписьПервичноеСобытие = ТаблициПервичныхСобытий.Найти(Выборка.ОбъектУЗ);
				Если ЗаписьПервичноеСобытие = Неопределено Тогда
					Продолжить; 			
				Иначе 
					Если ЭтоСобытиеИсточника(ЗаписьПервичноеСобытие, Выборка.ДокументУЗ.ДатаПлатежа) Тогда
						ЗаписьКИ = ВернутьЗаписьРегистраКИ(ЗаписьПервичноеСобытие);
						ЗаписьКИ.ДатаСобытия = Выборка.ДокументУЗ.ДатаПлатежа;
						ЗаписьКИ.Событие = ?(Выборка.СтадияЗадолженности = Перечисления.СтадииЗадолженности.Пустая, Закрытие, Событие);
						ЗаписьКИ.ДокументСобытие = Выборка.ДокументУЗ;
						КредитныеИстории.ОбработатьСобытиеПоИсточнику(ЗаписьКИ, Выборка.ДокументУЗ);
						ЗаписьКИ.Записать();
						КредитныеИстории.ЗанестиЗаписьВЖурналRUTDF(ЗаписьКИ, ДокОтчет.Дата, Строка(ДокОтчет.Операция), ДокОтчет, ЗаписьКИ.UID);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			КредитныеИсторииДлительнаяОперация(ПрогрессВыполнения, Выборка.Количество(), "Восстановление платежей сделки...");
		КонецЦикла;	
	КонецЕсли;	
			
КонецПроцедуры

Процедура Рассчитать30ДнейПоВосстановленнымСобытиямTUTDF(ТЗОбъектов, ДокОтчет) Экспорт
	// Рассчитываем отсутствие событий в течение 30 дней 2.3      
	ПрогрессВыполнения = 0;
	Событие = Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", "2.3");
    Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	РегистрСведений.КредитныеИсторииДанныеСделки КАК КредитныеИсторииДанныеСделки
		|ГДЕ
		|	КредитныеИсторииДанныеСделки.Сделка В(&Сделка)
		|	И КредитныеИсторииДанныеСделки.ДатаСобытия <= &ДатаРУТДФ
		|	УПОРЯДОЧИТЬ ПО
		|	Сделка,
		|	ДатаСобытия";
	
	Запрос.УстановитьПараметр("Сделка", ТЗОбъектов.ВыгрузитьКолонку("ОбъектУчета"));
	Запрос.УстановитьПараметр("ДатаРУТДФ", КонецДня(Дата("20221101")));
   
	
	Период = 30;
	Секунды = 86400;
	ОбязательнаяВыгрузка = Период * Секунды;     
	
	ВыборкаПервичноеСобытие = Запрос.Выполнить().Выбрать(); 
	ПервичноеСобытие = Справочники.КредитныеИсторииСобытияСделки.НайтиПоРеквизиту("КодНБКИ", "0.0");
	 	
	ВыборкаТекущаяСтрока = Запрос.Выполнить().Выбрать(); 
	ВыборкаСледующаяСтрока = Запрос.Выполнить().Выбрать();
	
	ВыборкаСледующаяСтрока.Следующий();
	
	Пока ВыборкаТекущаяСтрока.Следующий() Цикл
		Сделка = ВыборкаТекущаяСтрока.Сделка;
		Если ВыборкаТекущаяСтрока.Событие = ПервичноеСобытие Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаПервичноеСобытие.НайтиСледующий(Новый Структура("Сделка, Событие", Сделка, ПервичноеСобытие)) Тогда
			ДатаРасчета = ?(ЗначениеЗаполнено(ВыборкаПервичноеСобытие.ДатаРасчетаПросроченнойЗадолженности), ВыборкаПервичноеСобытие.ДатаРасчетаПросроченнойЗадолженности, ВыборкаПервичноеСобытие.ДатаРасчетаСрочнойЗадолженности); 
			РазностьДатСек = ВыборкаТекущаяСтрока.ДатаСобытия - ДатаРасчета; 
			КоличествоСобытий = Цел(РазностьДатСек / ОбязательнаяВыгрузка);
			Если КоличествоСобытий > 0 И РазностьДатСек > ОбязательнаяВыгрузка Тогда
				ДатаСобытия = ДатаРасчета + ОбязательнаяВыгрузка;
				Для счСобытие = 1 по КоличествоСобытий Цикл
					ЗаписьКИ = ВернутьЗаписьРегистраКИ(ВыборкаПервичноеСобытие);
					ЗаписьКИ.ДатаСобытия = ДатаСобытия;
					ЗаписьКИ.Событие = Событие;
					ЗаписьКИ.ДокументСобытие = Сделка;
					КредитныеИстории.ОбработатьСобытиеПоИсточнику(ЗаписьКИ, Сделка);
					ЗаписьКИ.Записать();
					КредитныеИстории.ЗанестиЗаписьВЖурналRUTDF(ЗаписьКИ, ДокОтчет.Дата, Строка(ДокОтчет.Операция), ДокОтчет, ЗаписьКИ.UID);
					ДатаСобытия = ДатаСобытия + ОбязательнаяВыгрузка;
				КонецЦикла;
			КонецЕсли;		
		КонецЕсли;	

		
		Если ВыборкаСледующаяСтрока.НайтиСледующий(Новый Структура("Сделка", Сделка)) Тогда
			РазностьДатСек = ВыборкаСледующаяСтрока.ДатаСобытия - ВыборкаТекущаяСтрока.ДатаСобытия; 
			КоличествоСобытий = Цел(РазностьДатСек / ОбязательнаяВыгрузка);
			Если КоличествоСобытий > 0 И РазностьДатСек > ОбязательнаяВыгрузка Тогда
				ДатаСобытия = ВыборкаТекущаяСтрока.ДатаСобытия + ОбязательнаяВыгрузка;
				Для счСобытие = 1 по КоличествоСобытий Цикл
					ЗаписьКИ = ВернутьЗаписьРегистраКИ(ВыборкаТекущаяСтрока);
					ЗаписьКИ.ДатаСобытия = ДатаСобытия;
					ЗаписьКИ.Событие = Событие;
					ЗаписьКИ.ДокументСобытие = Сделка;
					КредитныеИстории.ОбработатьСобытиеПоИсточнику(ЗаписьКИ, Сделка);
					ЗаписьКИ.Записать();
					КредитныеИстории.ЗанестиЗаписьВЖурналRUTDF(ЗаписьКИ, ДокОтчет.Дата, Строка(ДокОтчет.Операция), ДокОтчет, ЗаписьКИ.UID);
					ДатаСобытия = ДатаСобытия + ОбязательнаяВыгрузка;
				КонецЦикла;
			КонецЕсли;	
		Иначе
			ВыборкаСледующаяСтрока.Следующий();
		КонецЕсли;	 
		КредитныеИсторииДлительнаяОперация(ПрогрессВыполнения, ВыборкаТекущаяСтрока.Количество(), "Расчет событий обязательной выгрузки...");
	КонецЦикла;	
			
КонецПроцедуры 

Функция ТекстЗапросаСобытий(ТипДокументаСобытия, ИмяДокументаСобытия, ИмяОбъектаУчетаВДокументе) Экспорт 
	ИмяТаблицы = ИмяДокументаСобытия; 
	ИмяТаблицы = ?(СтрНайти(ИмяДокументаСобытия, "Объекты") > 0, (СтрЗаменить(ИмяТаблицы, "Объекты", "") + ".Объекты"), ИмяТаблицы); 
	
 
	ТекстЗапросаСобытий = 
	"ВЫБРАТЬ 
	 |	" + ИмяДокументаСобытия + ".Ссылка КАК ДокументУЗ, 
	 |	" + ИмяДокументаСобытия + "." + ИмяОбъектаУчетаВДокументе + " КАК ОбъектУЗ,
	 |	КредитныеИсторииДанныеСделки.Сделка КАК Сделка,
	 |	КредитныеИсторииДанныеСделки.ДатаСобытия КАК ДатаСобытия,
	 |	КредитныеИсторииДанныеСделки.Событие КАК Событие,
	 |	КредитныеИсторииДанныеСделки.ДокументСобытие КАК ДокументСобытие
	 |ИЗ
	 |	" + ТипДокументаСобытия + "." + ИмяТаблицы + " КАК " + ИмяДокументаСобытия + "
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КредитныеИсторииДанныеСделки КАК КредитныеИсторииДанныеСделки
	 |		ПО " + ИмяДокументаСобытия + ".Ссылка = КредитныеИсторииДанныеСделки.ДокументСобытие
	 |ГДЕ
	 |	" + ИмяДокументаСобытия + "." + ИмяОбъектаУчетаВДокументе + " В(&ОбъектУчета)
	 |	И НЕ " + ИмяДокументаСобытия + ".ПометкаУдаления";
	 //|	И ПоступлениеПлатежа.Проведен"  
	 
	 Если СтрНайти(ТипДокументаСобытия, "Документ") > 0 Тогда
		 ТекстЗапросаСобытий = ТекстЗапросаСобытий + Символы.ПС + "	И " + ИмяДокументаСобытия + ".Проведен"; 
		 Если СтрНайти(ИмяДокументаСобытия, "Объекты") > 0 Тогда
			 ТекстЗапросаСобытий = СтрЗаменить(ТекстЗапросаСобытий, ".ПометкаУдаления", ".Ссылка.ПометкаУдаления"); 
			 ТекстЗапросаСобытий = СтрЗаменить(ТекстЗапросаСобытий, ".Проведен", ".Ссылка.Проведен");
		 КонецЕсли;
	 КонецЕсли;
	 
	 Если СтрНайти(ИмяДокументаСобытия, "СудебноеДело") > 0 Тогда
		 ТекстЗапросаСобытий = СтрЗаменить(ТекстЗапросаСобытий, "СудебноеДело", "СД"); 
		 ТекстЗапросаСобытий = СтрЗаменить(ТекстЗапросаСобытий, "Документ.СД", "Документ.СудебноеДело");
	 КонецЕсли;   
	 
	 Возврат ТекстЗапросаСобытий;	
КонецФункции   
 
Функция ТекстЗапросаПлатежей() Экспорт 
	ТекстЗапросаПлатежей = 
		"ВЫБРАТЬ
		|	ПоступлениеПлатежейОбъекты.Ссылка КАК ДокументУЗ,
		|	ПоступлениеПлатежейОбъекты.ДатаПлатежа КАК ДатаПлатежа,
		|	ПоступлениеПлатежейОбъекты.Объект КАК Сделка
		|ПОМЕСТИТЬ ФактическиеПлатежи
		|ИЗ
		|	Документ.ПоступлениеПлатежей.Объекты КАК ПоступлениеПлатежейОбъекты
		|ГДЕ
		|	ПоступлениеПлатежейОбъекты.Объект В(&ОбъектУчета)
		|	И НЕ ПоступлениеПлатежейОбъекты.Ссылка.ПометкаУдаления
		|	И ПоступлениеПлатежейОбъекты.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗагрузкаИсторииПлатежейОбъекты.Ссылка,
		|	ЗагрузкаИсторииПлатежейОбъекты.ДатаПлатежа,
		|	ЗагрузкаИсторииПлатежейОбъекты.Объект
		|ИЗ
		|	Документ.ЗагрузкаИсторииПлатежей.Объекты КАК ЗагрузкаИсторииПлатежейОбъекты
		|ГДЕ
		|	ЗагрузкаИсторииПлатежейОбъекты.Объект В(&ОбъектУчета)
		|	И ЗагрузкаИсторииПлатежейОбъекты.Ссылка.Проведен
		|	И НЕ ЗагрузкаИсторииПлатежейОбъекты.Ссылка.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеПлатежа.Ссылка,
		|	ПоступлениеПлатежа.ДатаПлатежа,
		|	ПоступлениеПлатежа.Займ
		|ИЗ
		|	Документ.ПоступлениеПлатежа КАК ПоступлениеПлатежа
		|ГДЕ
		|	ПоступлениеПлатежа.Займ В(&ОбъектУчета)
		|	И НЕ ПоступлениеПлатежа.ПометкаУдаления
		|	И ПоступлениеПлатежа.Проведен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сделка,
		|	ДокументУЗ,
		|	ДатаПлатежа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФактическиеПлатежи.ДатаПлатежа КАК ДатаПлатежа,
		|	ФактическиеПлатежи.Сделка КАК Сделка,
		|	МАКСИМУМ(ФактическиеПлатежи.ДокументУЗ) КАК ДокументУЗ
		|ПОМЕСТИТЬ УникальныеДатыОплат
		|ИЗ
		|	ФактическиеПлатежи КАК ФактическиеПлатежи
		|
		|СГРУППИРОВАТЬ ПО
		|	ФактическиеПлатежи.ДатаПлатежа,
		|	ФактическиеПлатежи.Сделка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДатаПлатежа,
		|	Сделка,
		|	ДокументУЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УникальныеДатыОплат.ДокументУЗ КАК ДокументУЗ,
		|	УникальныеДатыОплат.Сделка КАК ОбъектУЗ,
		|	КредитныеИсторииДанныеСделки.Сделка КАК Сделка,
		|	КредитныеИсторииДанныеСделки.ДатаСобытия КАК ДатаСобытия,
		|	КредитныеИсторииДанныеСделки.Событие КАК Событие,
		|	КредитныеИсторииДанныеСделки.ДокументСобытие КАК ДокументСобытие,
		|	СтадииЗадолженностиСрезПоследних.СтадияЗадолженности КАК СтадияЗадолженности
		|ИЗ
		|	УникальныеДатыОплат КАК УникальныеДатыОплат
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КредитныеИсторииДанныеСделки КАК КредитныеИсторииДанныеСделки
		|		ПО УникальныеДатыОплат.ДокументУЗ = КредитныеИсторииДанныеСделки.ДокументСобытие
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтадииЗадолженности.СрезПоследних КАК СтадииЗадолженностиСрезПоследних
		|		ПО УникальныеДатыОплат.Сделка = СтадииЗадолженностиСрезПоследних.ОбъектУчета
		|			И УникальныеДатыОплат.ДатаПлатежа = СтадииЗадолженностиСрезПоследних.Период";
	
	Возврат ТекстЗапросаПлатежей;	
КонецФункции
 
Функция ВыполнитьЗапросСобытий(ТекстЗапроса, тзОбъектыУчета) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;	
	Запрос.УстановитьПараметр("ОбъектУчета", тзОбъектыУчета.ВыгрузитьКолонку("ОбъектУчета"));	
	РезультатЗапроса = Запрос.Выполнить();	
	Возврат РезультатЗапроса;
КонецФункции  

Функция ВернутьЗаписьРегистраКИ(СтрокаЗаполнения) Экспорт
	
	НоваяЗаписьКИ = РегистрыСведений.КредитныеИсторииДанныеСделки.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(НоваяЗаписьКИ, СтрокаЗаполнения); 
	Возврат НоваяЗаписьКИ;
	
КонецФункции

Функция ЭтоСобытиеИсточника(ЗаписьРС, ДатаСобытия) Экспорт
	
	Если ЗначениеЗаполнено(ЗаписьРС.ДатаРасчетаСрочнойЗадолженности) Тогда
		Возврат ЗаписьРС.ДатаРасчетаСрочнойЗадолженности < ДатаСобытия;
	ИначеЕсли ЗначениеЗаполнено(ЗаписьРС.ДатаРасчетаПросроченнойЗадолженности) Тогда
		Возврат ЗаписьРС.ДатаРасчетаПросроченнойЗадолженности < ДатаСобытия; 
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции 

Функция ВосстановитьПервичноеСобытие(Сделка, Настройка) Экспорт 
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВРаботе.Ссылка КАК Обязательство,
	               |	ВРаботе.Должник КАК Должник,
	               |	НеденежныеОбязательства.Ссылка КАК НеденежноеОбязательство,
	               |	ДелоОНедееспособностиСубъекта.Ссылка КАК Дееспособность,
	               |	ДелоОБанкротстве.Ссылка КАК Банкротство,
	               |	ДоговорМикрозайма.Ссылка КАК ДоговорМКЗ,
	               |	РеструктуризацияМикрозайма.Ссылка КАК РеструктуризацияМКЗ,
	               |	СудебноеДело.Ссылка КАК СудебноеДело,
	               |	Обеспечительства.Ссылка КАК Обеспечительство,
	               |	СведенияОбИзмененииДоговора.Ссылка КАК СведенияОбИзмененииДоговора,
	               |	ИсполнительныеДокументы.Ссылка КАК ИсполДок
	               |ИЗ
	               |	Справочник.ДолговыеОбязательства КАК ВРаботе
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НеденежныеОбязательства КАК НеденежныеОбязательства
	               |		ПО ВРаботе.Ссылка = НеденежныеОбязательства.ОбъектОбязательства
	               |			И (НеденежныеОбязательства.ПометкаУдаления = ЛОЖЬ)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДелоОНедееспособностиСубъекта КАК ДелоОНедееспособностиСубъекта
	               |		ПО ВРаботе.Должник = ДелоОНедееспособностиСубъекта.Владелец
	               |			И (ДелоОНедееспособностиСубъекта.ПометкаУдаления = ЛОЖЬ)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДелоОБанкротстве КАК ДелоОБанкротстве
	               |		ПО ВРаботе.Должник = ДелоОБанкротстве.Контрагент
	               |			И (ДелоОБанкротстве.ПометкаУдаления = ЛОЖЬ)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорМикрозайма КАК ДоговорМикрозайма
	               |		ПО ВРаботе.Ссылка = ДоговорМикрозайма.Займ
	               |			И (ДоговорМикрозайма.ПометкаУдаления = ЛОЖЬ)
	               |			И (ДоговорМикрозайма.Проведен)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеструктуризацияМикрозайма КАК РеструктуризацияМикрозайма
	               |		ПО ВРаботе.Ссылка = РеструктуризацияМикрозайма.Займ
	               |			И (РеструктуризацияМикрозайма.ПометкаУдаления = ЛОЖЬ)
	               |			И (РеструктуризацияМикрозайма.Проведен)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СудебноеДело КАК СудебноеДело
	               |		ПО ВРаботе.Ссылка = СудебноеДело.Займ
	               |			И (СудебноеДело.ПометкаУдаления = ЛОЖЬ)
	               |			И (СудебноеДело.Проведен)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Обеспечительства КАК Обеспечительства
	               |		ПО ВРаботе.Ссылка = Обеспечительства.ОбъектОбеспечительства
	               |			И (Обеспечительства.ПометкаУдаления = ЛОЖЬ)
	               |			И (Обеспечительства.Проведен)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОбИзмененииДоговора КАК СведенияОбИзмененииДоговора
	               |		ПО ВРаботе.Ссылка = СведенияОбИзмененииДоговора.ОбъектУчета
	               |			И (СведенияОбИзмененииДоговора.ПометкаУдаления = ЛОЖЬ)
	               |			И (СведенияОбИзмененииДоговора.Проведен)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсполнительныеДокументы КАК ИсполнительныеДокументы
	               |		ПО (НЕ ИсполнительныеДокументы.ПометкаУдаления)
	               |			И ВРаботе.Ссылка = ИсполнительныеДокументы.Владелец
	               |ГДЕ
	               |	ВРаботе.Ссылка =(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", Сделка);
	ИсточникСобытия = Настройка;
	ДатаСобытия = Дата("19950126");
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл  
		ДатаИзРеквизита = "";
		НоваяЗапись = РегистрыСведений.КредитныеИсторииДанныеСделки.СоздатьМенеджерЗаписи();
		Если НачалоДня(ДатаСобытия) = Дата("19950126") Тогда
			ДатаИзРеквизита = ОбъектыСервер.ПолучитьЗначениеСвойства(ВыборкаДетальныеЗаписи.Обязательство, Настройка.РеквизитДатаПервичногоЗаполнения.Код);
			НоваяЗапись.ДатаСобытия = ?(ЗначениеЗаполнено(ДатаИзРеквизита), ДатаИзРеквизита, ТекущаяДатаСеанса());
		Иначе  
			НоваяЗапись.ДатаСобытия = ДатаСобытия;
		КонецЕсли;
		НоваяЗапись.Сделка = ВыборкаДетальныеЗаписи.Обязательство;
		НоваяЗапись.Событие = КредитныеИстории.ВыбратьПервоеСобытиеСделки(ВыборкаДетальныеЗаписи.Обязательство, ИсточникСобытия);
		НоваяЗапись.ДокументСобытие = ИсточникСобытия;
		Настройка = ИсточникСобытия;
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
		ТЗ = Настройка.Сделка.Выгрузить();
		Строки = УдалитьОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗ); 
		Результат = Новый Массив();
		Для Каждого Элемент Из Строки Цикл
			Результат.Добавить(Новый Структура("ИмяТаблицы, Поле, НБКИФЛ, НБКИЮЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение, Функция, СтрокаДляПолученияЗначения, КодДопСвойства,
			| ОбъектДопСвойства, СтрокаХранилище","Сделка", Элемент.Поле, Элемент.НомерПоказателяНБКИФЛ, Элемент.НомерПоказателяНБКИЮЛ,  Элемент.НаименованиеПоляРегистраКИ, Элемент.ЗаполнятьПоУмолчанию, Элемент.Значение, Элемент.Функция,
			Элемент.СтрокаДляПолученияЗначения, Элемент.КодДопСвойства, Элемент.ОбъектДопСвойства, Элемент.СтрокаХранилище));	
		КонецЦикла;
		
		НоваяЗапись.Продан = "0";
        НоваяЗапись.ЧастичнаяПродажа = "0";
		мсЗначения = Новый Массив;
		Для Каждого ТекСтрокаПодстановки Из Результат Цикл 
			ТекНастройка = Новый Структура("Поле, НБКИФЛ, НБКИЮЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение",
			ТекСтрокаПодстановки.Поле, ТекСтрокаПодстановки.НБКИФЛ, ТекСтрокаПодстановки.НБКИЮЛ, ТекСтрокаПодстановки.НаименованиеПоляРегистраКИ, ТекСтрокаПодстановки.ЗаполнятьПоУмолчанию); 
			
			Значение = УЭДСервер.ГенерацияЗначениия(ТекСтрокаПодстановки, Ложь, НоваяЗапись.Сделка, НоваяЗапись.Сделка);
			ФункцияОпределена = УЭДСервер.ФункцияУспешноОпределена(ТекСтрокаПодстановки);
			Если ФункцияОпределена Тогда
				Значение = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(ТекСтрокаПодстановки.Функция, НоваяЗапись.Сделка, Значение);
				Если ТипЗнч(Значение) <> Тип("ТаблицаЗначений") Тогда
					Значение = СокрЛП(Значение);
				КонецЕсли;	
				ТекНастройка.Значение = Значение;
				мсЗначения.Добавить(ТекНастройка);
			Иначе 	
				Значение = СокрЛП(Значение);
				ТекНастройка.Значение = Значение;
				мсЗначения.Добавить(ТекНастройка);
			КонецЕсли; 
		КонецЦикла;	  
		
		Для Каждого структура Из мсЗначения Цикл
			
			Если ЗначениеЗаполнено(Структура.НаименованиеПоляРегистраКИ) Тогда
				НаименованиеПоляРегистраКИ = Структура.НаименованиеПоляРегистраКИ;
				ЗначениеВРегистр = Структура.Значение;
				Если Структура.ЗаполнятьПоУмолчанию И НЕ ЗначениеЗаполнено(Структура.Значение) Тогда
					ЗначениеВРегистр = КредитныеИстории.ВычислитьПараметрПоУмолчанию(Структура.НБКИФЛ, ВыборкаДетальныеЗаписи, НоваяЗапись.Сделка);
				КонецЕсли;
				ЗначениеВРегистр = КредитныеИстории.ОбработатьЗначенияПризнаков(ЗначениеВРегистр);  
				Если Структура.НБКИФЛ = "C25.8" Тогда 
					ДатаРасчета = ?(ЗначениеЗаполнено(Структура.Значение), Структура.Значение, ТекущаяДатаСеанса());
				Иначе
					НоваяЗапись[НаименованиеПоляРегистраКИ] = ЗначениеВРегистр;
				КонецЕсли; 
				
			Иначе
				Продолжить;
			КонецЕсли;
		
			
		КонецЦикла;	
		
		Если Не ЗначениеЗаполнено(НоваяЗапись.ДатаПередачиФинансирования) Тогда
			НоваяЗапись.ДатаПередачиФинансирования = НоваяЗапись.ДатаНачалаСделки;
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(НоваяЗапись.ДатаВыходаНаПросрочку) Тогда
			НоваяЗапись.ДатаВыходаНаПросрочку = НоваяЗапись.ДатаОкончанияСделки;
		КонецЕсли; 
		
				
		Если Не ЗначениеЗаполнено(НоваяЗапись.ДатаРасчетаСрочнойЗадолженности) Тогда
			НоваяЗапись.ДатаРасчетаСрочнойЗадолженности = ДатаРасчета;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НоваяЗапись.ДатаРасчетаПросроченнойЗадолженности) Тогда
			НоваяЗапись.ДатаРасчетаПросроченнойЗадолженности = ДатаРасчета;
		КонецЕсли;  
		
		Если Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v3 И Настройка.ВерсияRUTDF <> Перечисления.ВерсияRUTDF.v4 Тогда
			КредитныеИсторииИзменения.ЗаменитьНеиспользуемыеКодыВидаКредита(НоваяЗапись.КодНБКИВидКредита); 
			КредитныеИсторииИзменения.ЗаменитьНеиспользуемыеКодыТипаКредита(НоваяЗапись.КодНБКИТипКредита);
		КонецЕсли;
	
		НоваяЗапись.Записать();
		РезультатЗаполнения = НоваяЗапись; 
		НоваяЗапись = Неопределено;
		 		
		ЭтоФизЛицо = "";
		Если ВыборкаДетальныеЗаписи.Должник.ЮрФизЛицо = Справочники.ЮрФизЛицо.ФизЛицо Тогда
			ЭтоФизЛицо  = Истина;
		ИначеЕсли ВыборкаДетальныеЗаписи.Должник.ЮрФизЛицо = Справочники.ЮрФизЛицо.ЮрЛицо Тогда
			ЭтоФизЛицо  = Ложь;
		Иначе
			ТипДолжника = ВыборкаДетальныеЗаписи.Должник.ЮрФизЛицо;  
			НаборЗаписей = РегистрыСведений.ТипДолжникаПризнак.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ТипКонтрагента.Установить(ТипДолжника);
			НаборЗаписей.Прочитать();
			Для каждого Запись из НаборЗаписей Цикл
				Если Запись.ФизическоеЛицо Тогда 
					ЭтоФизЛицо = Истина;
				Конецесли;
				
				Если Запись.ЮридическоеЛицо Тогда 
					ЭтоФизЛицо = Ложь;
				Конецесли;
				
				Если Запись.ИндивидуальныйПредприниматель Тогда 
					ЭтоФизЛицо  = Истина;
				Конецесли;
				
			КонецЦикла;			
		КонецЕсли;	 
		
		
		Если ЭтоФизЛицо Тогда 		
			НоваяЗапись = РегистрыСведений.КредитныеИсторииДанныеФизЛица.СоздатьМенеджерЗаписи();
			НоваяЗапись.ДатаСобытия = ?(ЗначениеЗаполнено(ДатаИзРеквизита), ДатаИзРеквизита, ДатаСобытия); 
			НоваяЗапись.Должник = ВыборкаДетальныеЗаписи.Должник;
			НоваяЗапись.Событие = Справочники.КредитныеИсторииСобытияСубъекта.НайтиПоРеквизиту("КодНБКИ", "0.0"); 
			НоваяЗапись.ДокументСобытие = ИсточникСобытия;
			Настройка = ИсточникСобытия;
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
			ТЗ = Настройка.СубъектФизическоеЛицо.Выгрузить();
			Строки = УдалитьОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗ); 
			Результат = Новый Массив();
			Для Каждого Элемент Из Строки Цикл
				Результат.Добавить(Новый Структура("ИмяТаблицы, Поле, НБКИФЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение, Функция, СтрокаДляПолученияЗначения, КодДопСвойства,
				| ОбъектДопСвойства, СтрокаХранилище","СубъектФизическоеЛицо", Элемент.Поле, Элемент.НомерПоказателяНБКИФЛ, Элемент.НаименованиеПоляРегистраКИ, Элемент.ЗаполнятьПоУмолчанию, Элемент.Значение, Элемент.Функция,
				Элемент.СтрокаДляПолученияЗначения, Элемент.КодДопСвойства, Элемент.ОбъектДопСвойства, Элемент.СтрокаХранилище));	
			КонецЦикла;
			
			
			
			мсЗначения = Новый Массив;
			Для Каждого ТекСтрокаПодстановки Из Результат Цикл 
				ТекНастройка = Новый Структура("Поле, НБКИФЛ, НаименованиеПоляРегистраКИ ,ЗаполнятьПоУмолчанию, Значение",
				ТекСтрокаПодстановки.Поле, ТекСтрокаПодстановки.НБКИФЛ, ТекСтрокаПодстановки.НаименованиеПоляРегистраКИ, ТекСтрокаПодстановки.ЗаполнятьПоУмолчанию); 
				
				Значение = УЭДСервер.ГенерацияЗначениия(ТекСтрокаПодстановки, Ложь, ВыборкаДетальныеЗаписи.Обязательство, ВыборкаДетальныеЗаписи.Обязательство);
				ФункцияОпределена = УЭДСервер.ФункцияУспешноОпределена(ТекСтрокаПодстановки);
				Если ФункцияОпределена Тогда
					Значение = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(ТекСтрокаПодстановки.Функция, НоваяЗапись.Должник, Значение);
					Если ТипЗнч(Значение) <> Тип("ТаблицаЗначений") Тогда
						Значение = СокрЛП(Значение);
					КонецЕсли;	
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				Иначе 	
					Значение = СокрЛП(Значение);
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				КонецЕсли; 
			КонецЦикла;	  
			
			МассивАдрес = Новый Массив;
			Для Каждого структура Из мсЗначения Цикл   
				Если ЗначениеЗаполнено(Структура.НаименованиеПоляРегистраКИ) Тогда
					НаименованиеПоляРегистраКИ = Структура.НаименованиеПоляРегистраКИ;
					ЗначениеВРегистр = Структура.Значение;
					//Если Структура.ЗаполнятьПоУмолчанию Тогда
					//	ЗначениеВРегистр = ВычислитьПараметрПоУмолчанию(Структура.НБКИФЛ, ВыборкаДетальныеЗаписи, НоваяЗапись.Сделка);
					//КонецЕсли;
					ЗначениеВРегистр = КредитныеИстории.ОбработатьЗначенияПризнаков(ЗначениеВРегистр); 
					
					Если Структура.НБКИФЛ = "C3.2" Тогда   
						Если Не ЗначениеЗаполнено(ЗначениеВРегистр) Тогда 
							ЗначениеВРегистр = Справочники.СтраныМира.Россия;
						Иначе
							ЗначениеВРегистр = ФЗ_230.ВычислитьЗначениеСтраныОКСМ(Структура.Значение).ОКСМ;   
						КонецЕсли;
					КонецЕсли; 
					
					Если Структура.НБКИФЛ = "C4.1.2" Тогда
						структСтрана = ФЗ_230.ВычислитьЗначениеСтраныОКСМ(Структура.Значение);
						НоваяЗапись.КодСтраныДокумента = структСтрана.ОКСМ;	
						НоваяЗапись.НаименованиеИнойСтраныДокумента = структСтрана.Наименование;  
					ИначеЕсли Структура.НБКИФЛ = "C4.3.4" Тогда
						НоваяЗапись.КодНБКИДокумента = Структура.Значение;  
						Если СтрНайти(Структура.Значение, "999") > 0 Тогда 
							НоваяЗапись.НаименованиеИногоДокумента = Структура.Значение;
						КонецЕсли;	
					Иначе
						НоваяЗапись[НаименованиеПоляРегистраКИ] = ЗначениеВРегистр;
					КонецЕсли; 
				ИначеЕсли СтрНайти(Структура.НБКИФЛ, "C8.") > 0 ИЛИ СтрНайти(Структура.НБКИФЛ, "C9.") > 0 Тогда
					МассивАдрес.Добавить(Структура); 
					Продолжить;
				Иначе
					Продолжить;
				КонецЕсли; 
				
			КонецЦикла;	 
			
			Если СтрНайти(НоваяЗапись.КодНБКИДокумента, "999") > 0 и НЕ ЗначениеЗаполнено(НоваяЗапись.НаименованиеИногоДокумента) Тогда 
				НоваяЗапись.НаименованиеИногоДокумента = НоваяЗапись.КодНБКИДокумента;
			КонецЕсли;	 
			
			Если Не ЗначениеЗаполнено(НоваяЗапись.Дееспособность)  Тогда 
				СовершеннолетиеСек = 567648000;
				НоваяЗапись.Дееспособность = ?(ТекущаяДатаСеанса() - НоваяЗапись.ДатаРождения >= СовершеннолетиеСек, "1", "2");
			КонецЕсли;
			НоваяЗапись.Записать();
			НоваяЗапись = Неопределено;
			КредитныеИстории.ЗаписатьАдресОбъекта(МассивАдрес, ВыборкаДетальныеЗаписи.Должник, ЭтоФизЛицо, Настройка.СтроковыеАдреса);
		Иначе  
			НоваяЗапись = РегистрыСведений.КредитныеИсторииДанныеЮрЛица.СоздатьМенеджерЗаписи();
			НоваяЗапись.ДатаСобытия = ?(ЗначениеЗаполнено(ДатаИзРеквизита), ДатаИзРеквизита, ДатаСобытия);  
			НоваяЗапись.Должник = ВыборкаДетальныеЗаписи.Должник;
			НоваяЗапись.Событие = Справочники.КредитныеИсторииСобытияСубъекта.НайтиПоРеквизиту("КодНБКИ", "0.0");
			НоваяЗапись.ДокументСобытие = ИсточникСобытия;
			Настройка = ИсточникСобытия;
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
			ТЗ = Настройка.СубъектЮридическоеЛицо.Выгрузить();
			Строки = УдалитьОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗ); 
			Результат = Новый Массив();
			Для Каждого Элемент Из Строки Цикл
				Результат.Добавить(Новый Структура("ИмяТаблицы, Поле, НБКИЮЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение, Функция, СтрокаДляПолученияЗначения, КодДопСвойства,
				| ОбъектДопСвойства, СтрокаХранилище","СубъектЮридическоеЛицо", Элемент.Поле, Элемент.НомерПоказателяНБКИЮЛ, Элемент.НаименованиеПоляРегистраКИ, Элемент.ЗаполнятьПоУмолчанию, Элемент.Значение, Элемент.Функция,
				Элемент.СтрокаДляПолученияЗначения, Элемент.КодДопСвойства, Элемент.ОбъектДопСвойства, Элемент.СтрокаХранилище));	
			КонецЦикла;	
			
			мсЗначения = Новый Массив;
			Для Каждого ТекСтрокаПодстановки Из Результат Цикл 
				ТекНастройка = Новый Структура("Поле, НБКИЮЛ, НаименованиеПоляРегистраКИ, ЗаполнятьПоУмолчанию, Значение",
				ТекСтрокаПодстановки.Поле, ТекСтрокаПодстановки.НБКИЮЛ, ТекСтрокаПодстановки.НаименованиеПоляРегистраКИ, ТекСтрокаПодстановки.ЗаполнятьПоУмолчанию); 
				
				Значение = УЭДСервер.ГенерацияЗначениия(ТекСтрокаПодстановки, Ложь, ВыборкаДетальныеЗаписи.Обязательство, ВыборкаДетальныеЗаписи.Обязательство);
				ФункцияОпределена = УЭДСервер.ФункцияУспешноОпределена(ТекСтрокаПодстановки);
				Если ФункцияОпределена Тогда
					Значение = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(ТекСтрокаПодстановки.Функция, НоваяЗапись.Должник, Значение);
					Если ТипЗнч(Значение) <> Тип("ТаблицаЗначений") Тогда
						Значение = СокрЛП(Значение);
					КонецЕсли;	
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				Иначе 	
					Значение = СокрЛП(Значение);
					ТекНастройка.Значение = Значение;
					мсЗначения.Добавить(ТекНастройка);
				КонецЕсли; 
			КонецЦикла;	  
			
			МассивАдрес = Новый Массив;
			Для Каждого структура Из мсЗначения Цикл
				
				Если ЗначениеЗаполнено(Структура.НаименованиеПоляРегистраКИ) Тогда
					НаименованиеПоляРегистраКИ = Структура.НаименованиеПоляРегистраКИ;
					ЗначениеВРегистр = Структура.Значение;
					//Если Структура.ЗаполнятьПоУмолчанию Тогда
					//	ЗначениеВРегистр = ВычислитьПараметрПоУмолчанию(Структура.НБКИФЛ, ВыборкаДетальныеЗаписи, НоваяЗапись.Сделка);
					//КонецЕсли;
					ЗначениеВРегистр = КредитныеИстории.ОбработатьЗначенияПризнаков(ЗначениеВРегистр); 
					НоваяЗапись[НаименованиеПоляРегистраКИ] = ЗначениеВРегистр;				
				ИначеЕсли СтрНайти(Структура.НБКИЮЛ, "B2.") > 0 Тогда
					МассивАдрес.Добавить(Структура); 
					Продолжить;
				Иначе
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;	
			НоваяЗапись.Записать();
			НоваяЗапись = Неопределено;
			
            КредитныеИстории.ЗаписатьАдресОбъекта(МассивАдрес, ВыборкаДетальныеЗаписи.Должник, ЭтоФизЛицо, Настройка.СтроковыеАдреса);
			
		КонецЕсли;		
	КонецЦикла;  
	
	Возврат РезультатЗаполнения;
	
КонецФункции	

Процедура ОчиститьВосстановленныеСобытия(НаборЗаписейЖурналВыгрузкиНБКИ) Экспорт
	
	
	РегистрыСведений.КредитныеИсторииДанныеСделки.СоздатьНаборЗаписей();
	
	Для Каждого Запись ИЗ НаборЗаписейЖурналВыгрузкиНБКИ Цикл
		КИНаУдаление =  РегистрыСведений.КредитныеИсторииДанныеСделки.СоздатьНаборЗаписей();
		КИНаУдаление.Отбор.Сделка.Установить(Запись.ОбъектУчета); 
		КИНаУдаление.Отбор.Событие.Установить(Запись.Событие);
		КИНаУдаление.Отбор.ДатаСобытия.Установить(Запись.ДатаСобытия);	
		КИНаУдаление.Записать();  
	КонецЦикла;	
	
КонецПроцедуры

Функция КредитныеИсторииДлительнаяОперация(ПрогрессВыполнения, ВсегоОбъектов, Сообщение) Экспорт
	СтопроЦентов = 100;
	ПроцентВыполнения = (ПрогрессВыполнения / ВсегоОбъектов) * СтопроЦентов;
	ПроцентВыполнения = Окр(ПроцентВыполнения, 0);    
	
	ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, Сообщение);
	
	ПрогрессВыполнения = ПрогрессВыполнения + 1;
КонецФункции 

#КонецОбласти
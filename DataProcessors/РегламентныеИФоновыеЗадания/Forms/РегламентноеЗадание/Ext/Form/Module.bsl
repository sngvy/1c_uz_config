
///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ МЕТОДЫ
//

// Процедура ЗаписатьРегламентноеЗадание записывает
// значения реквизитов из формы в информационную базу.
//
&НаСервере
Процедура ЗаписатьРегламентноеЗадание()
	
	Если Действие = "Изменить" Тогда
		Задание = УдалитьРегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание(Идентификатор);
	Иначе
		Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания[ИмяМетаданных]);
		Идентификатор = Строка(Задание.УникальныйИдентификатор);
		Действие = "Изменить";
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Задание, ЭтаФорма, "Ключ, Наименование, Использование, ИмяПользователя, ИнтервалПовтораПриАварийномЗавершении, КоличествоПовторовПриАварийномЗавершении");
	Задание.Расписание = Расписание;
	Задание.Записать();
	
	Модифицированность = Ложь;
	
КонецПроцедуры // ЗаписатьРегламентноеЗадание()

//
&НаКлиенте
Процедура ОбновитьЗаголовокФормы()
	
	Если НЕ ПустаяСтрока(Наименование) Тогда
		Представление = Наименование;
	ИначеЕсли НЕ ПустаяСтрока(СинонимМетаданных) Тогда
		Представление = СинонимМетаданных;
	Иначе
		Представление = ИмяМетаданных;
	КонецЕсли;
	Заголовок = УдалитьСтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (Регламентное задание)'"), Представление);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТЧИКИ СОБЫТИЙ
//
// Источники: форма, панели, команды, элементы панелей, элементы формы,
//            поля, элементы полей

// Обработчик события ПриСозданииНаСервере формы выполняет заполнение
// реквизитов формы из информационной базы, используя параметр формы
// Идентификатор (регламентного задания).
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Действие = Параметры.Действие;
	
	Если Найти(", Добавить, Скопировать, Изменить,", ", " + Действие + ",") = 0 Тогда
		ВызватьИсключение(НСтр("ru = 'Неверные параметры в форме ""Регламентное задание"" !'"));
	КонецЕсли;
	Элементы.ИмяПользователя.Доступность = НЕ УдалитьОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	Если Действие = "Добавить" Тогда
		Расписание = Новый РасписаниеРегламентногоЗадания;
		Для каждого РегламентноеЗаданиеМетаданные ИЗ Метаданные.РегламентныеЗадания Цикл
			ОписанияМетаданныхРегламентныхЗаданий.Добавить
			(РегламентноеЗаданиеМетаданные.Имя + "
			 |" + РегламентноеЗаданиеМетаданные.Синоним + "
			 |" + РегламентноеЗаданиеМетаданные.ИмяМетода,
			 ?(ПустаяСтрока(РегламентноеЗаданиеМетаданные.Синоним),
			   РегламентноеЗаданиеМетаданные.Имя,
			   РегламентноеЗаданиеМетаданные.Синоним) );
		КонецЦикла;
	Иначе
		Задание = УдалитьРегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание(Параметры.Идентификатор);
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Задание, "Ключ, Наименование, Использование, ИмяПользователя, ИнтервалПовтораПриАварийномЗавершении, КоличествоПовторовПриАварийномЗавершении");
		Идентификатор        = Строка(Задание.УникальныйИдентификатор);
		ИмяМетаданных        = ?(Задание.Метаданные <> Неопределено, Задание.Метаданные.Имя,       НСтр("ru = '<нет метаданных>'"));
		СинонимМетаданных    = ?(Задание.Метаданные <> Неопределено, Задание.Метаданные.Синоним,   НСтр("ru = '<нет метаданных>'"));
		ИмяМетодаМетаданных  = ?(Задание.Метаданные <> Неопределено, Задание.Метаданные.ИмяМетода, НСтр("ru = '<нет метаданных>'"));
		Расписание = Задание.Расписание;
		СообщенияПользователюИОписаниеИнформацииОбОшибке = УдалитьРегламентныеЗаданияСервер.СообщенияИОписанияОшибокРегламентногоЗадания(Задание);
	КонецЕсли;
	
	Если Действие <> "Изменить" Тогда
		Модифицированность = Истина;
		Идентификатор = НСтр("ru = '<будет создан при записи>'");
		Использование = Ложь;
		Наименование = ?(Действие = "Добавить", "", УдалитьРегламентныеЗаданияСервер.ПредставлениеРегламентногоЗадания(Задание));
	КонецЕсли;
	
	// Заполним список выбора имени пользователя.
	УдалитьРегламентныеЗаданияСервер.ДобавитьВСписокЗначенийИменаПользователей(Элементы.ИмяПользователя.СписокВыбора);
	
КонецПроцедуры // ПриСозданииНаСервере()

// Обработчик события ПриОткрытии формы проверяет корректность выполнения
// обработчика события ПриСозданииНаСервере формы, через параметр формы
// Отказ и предупреждает пользователя содержимым параметра ОписаниеОшибки.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Действие = "Добавить" Тогда
		// Выберем шаблон регламентного задания (метаданные).
		ЭлементСписка = ОписанияМетаданныхРегламентныхЗаданий.ВыбратьЭлемент(НСтр("ru = 'Выберите предопределенный шаблон регламентного задания'"));
		Если ЭлементСписка = Неопределено Тогда
			Отказ = Истина;
			Возврат;
		Иначе
			ИмяМетаданных       = СтрПолучитьСтроку(ЭлементСписка.Значение, 1);
			СинонимМетаданных   = СтрПолучитьСтроку(ЭлементСписка.Значение, 2);
			ИмяМетодаМетаданных = СтрПолучитьСтроку(ЭлементСписка.Значение, 3);
			Наименование        = ЭлементСписка.Представление;
		КонецЕсли;
	КонецЕсли;
	
	мЗаданиеЗаписано = Ложь;
	ОбновитьЗаголовокФормы();

КонецПроцедуры // ПриОткрытии()

// Обработчик события ПередЗакрытием формы уведомляет о модифицированности
// формы, если есть и предлагает выполнить запись изменений.
&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		КодВозврата = Вопрос(НСтр("ru = 'Записать изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
		Если КодВозврата = КодВозвратаДиалога.Да Тогда
			ЗаписатьРегламентноеЗадание();
			Закрыть(Истина);
		ИначеЕсли КодВозврата = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()

// Обработчик события Выполнить команды ЗаписатьИЗакрыть выполняет
// попытку записи значений реквизитов из формы в информационную базу,
// устанавливает параметр формы ЗаданиеЗаписано и закрывает форму.
//
&НаКлиенте
Процедура ЗаписатьИЗакрытьВыполнить()
	
	ЗаписатьРегламентноеЗадание();
	Закрыть(Истина);
	
КонецПроцедуры // ЗаписатьИЗакрытьВыполнить()

// Обработчик события Выполнить команды ОткрытьРасписание выполняет
// попытку записи значений реквизитов из формы в информационную базу,
// устанавливает параметр формы ЗаданиеЗаписано и закрывает форму.
//
&НаКлиенте
Процедура ОткрытьРасписаниеВыполнить()

	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	Если Диалог.ОткрытьМодально() Тогда
		Расписание = Диалог.Расписание;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ОткрытьРасписаниеВыполнить()

// Обработчик события ПриИзменении элемента Наименование обновляет
// заголовок формы.
//
&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

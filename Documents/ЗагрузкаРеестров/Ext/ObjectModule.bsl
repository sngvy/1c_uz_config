
Процедура ОбработкаПроведения(Отказ, РежимПроведения)	
	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	// регистр ЗагруженныеОбъекты
	Движения.ЗагруженныеОбъекты.Записывать = Истина;
	Для Каждого ТекСтрокаСозданныеОбъекты Из СозданныеОбъекты Цикл
		Движение = Движения.ЗагруженныеОбъекты.Добавить();
		Движение.Объект = ТекСтрокаСозданныеОбъекты.Объект;
	КонецЦикла;

	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
КонецПроцедуры

// Получает значение реквизита хранилища "ТаблицаЗначений"
//
Функция ВернутьСодержимоеХранилищаТЗДанных() Экспорт
 	Возврат ТаблицаЗначений.Получить();	
КонецФункции

Процедура ЗаписатьСодержимоеХранилищаТЗДанных(ЗаписываемаяТаблица) Экспорт
	Хранилище = Новый ХранилищеЗначения(ЗаписываемаяТаблица, Новый СжатиеДанных(5));	
	ТаблицаЗначений = Хранилище;
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗагрузку(ТекущаяСтрока) Экспорт
	Контрагент = ЗаписатьКонтрагента(ТекущаяСтрока, Перечисления.ВидыНазначенийСвойств.Контрагенты, "КодКонтрагента", "Контрагенты_", Ложь);
	ТекущаяСтрока.СозданныйОбъектКонтрагент = ТекущаяСтрока.СозданныйОбъект;
	ТекущаяСтрока.ИзмененныйОбъектКонтрагент = ТекущаяСтрока.ИзмененныйОбъект;
	
	Кредитор = ЗаписатьКонтрагента(ТекущаяСтрока, Перечисления.ВидыНазначенийСвойств.Кредиторы, "КодКонтрагента", "Кредиторы_", Ложь);	
		ТекущаяСтрока.СозданныйОбъектКредитор = ТекущаяСтрока.СозданныйОбъект;
	ТекущаяСтрока.ИзмененныйОбъектКредитор = ТекущаяСтрока.ИзмененныйОбъект;
	
	Должник = ЗаписатьКонтрагента(ТекущаяСтрока, Перечисления.ВидыНазначенийСвойств.Должники, "КодКонтрагента", "Должники_", Истина);
		ТекущаяСтрока.СозданныйОбъектДолжник = ТекущаяСтрока.СозданныйОбъект;
	ТекущаяСтрока.ИзмененныйОбъектДолжник = ТекущаяСтрока.ИзмененныйОбъект;
	ТекущаяСтрока.СсылкаДолжник = Должник;

	ДолговоеОбязательство = ЗаписатьДолговоеОбязательство(ТекущаяСтрока, Перечисления.ВидыНазначенийСвойств.ДолговыеОбязательства, "КодДО", "Долговыеобязательства_", Должник, Контрагент, Кредитор);
	//	ТекущаяСтрока.СозданныйОбъектДО = ТекущаяСтрока.СозданныйОбъект;
	//ТекущаяСтрока.ИзмененныйОбъектДО = ТекущаяСтрока.ИзмененныйОбъект;

	ИсполнительныйДокумент = ЗаписатьИсполнительныйДокумент(ТекущаяСтрока, Перечисления.ВидыНазначенийСвойств.ИсполнительныеДокументы, "КодИД", "Исполнительныедокументы_", Контрагент, ДолговоеОбязательство);
		ТекущаяСтрока.СозданныйОбъектИД = ТекущаяСтрока.СозданныйОбъект;
	ТекущаяСтрока.ИзмененныйОбъектИД = ТекущаяСтрока.ИзмененныйОбъект;

	Залог = ЗаписатьЗалог(ТекущаяСтрока, Перечисления.ВидыНазначенийСвойств.Залоги, "НомерЗалога", "Залоги_", ДолговоеОбязательство);
		ТекущаяСтрока.СозданныйОбъектЗ = ТекущаяСтрока.СозданныйОбъект;
	ТекущаяСтрока.ИзмененныйОбъектЗ = ТекущаяСтрока.ИзмененныйОбъект;

	
	Договор = ЗаписатьДоговор(ТекущаяСтрока, Перечисления.ВидыНазначенийСвойств.ДоговорыКонтрагентов, "КодДоговора", "Договорыконтрагентов_", Контрагент);
		ТекущаяСтрока.СозданныйОбъектДоговор = ТекущаяСтрока.СозданныйОбъект;
	ТекущаяСтрока.ИзмененныйОбъектДоговор = ТекущаяСтрока.ИзмененныйОбъект;

	Услуга = ЗаписатьУслугу(ТекущаяСтрока, Перечисления.ВидыНазначенийСвойств.Услуги, "КодУслуги", "Услуги_", Контрагент, Договор);
	ТекущаяСтрока.СозданныйОбъектУ = ТекущаяСтрока.СозданныйОбъект;
	ТекущаяСтрока.ИзмененныйОбъектУ = ТекущаяСтрока.ИзмененныйОбъект;
	
	ТекущаяСтрока.СсылкаДО = ДолговоеОбязательство;
	
	ТекущаяСтрока.СсылкаКредитор = Кредитор;
	ТекущаяСтрока.СсылкаКонтрагент = Контрагент;
	ТекущаяСтрока.СсылкаИД = ИсполнительныйДокумент;
	ТекущаяСтрока.СсылкаЗ = Залог;
	ТекущаяСтрока.СсылкаУ = Услуга;
	ТекущаяСтрока.СсылкаДоговор = Договор;
КонецПроцедуры

&НаСервере
Функция ЗаписатьКонтрагента(ТекущаяСтрока, Назначение, ИмяКлюча, ИмяКлючаВТаблице, ЗаписыватьТелефоны) Экспорт	
	ТекущаяСтрока.СозданныйОбъект = Ложь;
	ТекущаяСтрока.ИзмененныйОбъект = Ложь;	
	ОбновлятьРанееЗаписанные = ЭтотОбъект.ОбновлятьРанееЗаписанные;
	Отбор = Новый Структура;
	Отбор.Вставить("Назначение", Назначение);
	Отбор.Вставить("ВидРеквизита", Перечисления.ВидыРеквизитов.Код);  
	СправочникМенеджер = Справочники.Контрагенты;
	Если ЭтотОбъект.НастройкаСоответствий.НайтиСтроки(Отбор).Количество() > 0 И ТекущаяСтрока[ИмяКлючаВТаблице + "Код_"] <> "" Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	Контрагенты.Ссылка,
		                      |	Контрагенты.Наименование,
		                      |	Контрагенты.КодКонтрагента
		                      |ИЗ
		                      |	Справочник.Контрагенты КАК Контрагенты
		                      |ГДЕ
		                      |	Контрагенты.ПометкаУдаления = ЛОЖЬ
		                      |	И Контрагенты.КодКонтрагента = &КодКонтрагента");
		Запрос.УстановитьПараметр(ИмяКлюча, ТекущаяСтрока[ИмяКлючаВТаблице + "Код_"]);
		Результат = Запрос.Выполнить().Выбрать();
		Если Не Результат.Следующий() Тогда
			ОбъектСсылка = СправочникМенеджер.ПустаяСсылка();
		Иначе
			ОбъектСсылка = Результат.Ссылка;
		КонецЕсли;
		
		ОбновитьРеквизиты = Ложь; 
		ОбновитьНаименование = Ложь;
		ОбновитьТип = Ложь;

		Если ОбъектСсылка = СправочникМенеджер.ПустаяСсылка() Тогда
			НовыйЭлемент = СправочникМенеджер.СоздатьЭлемент();
			ОбъектСсылка = СправочникМенеджер.ПолучитьСсылку();
			НовыйЭлемент.УстановитьСсылкуНового(ОбъектСсылка);
			ОбновитьРеквизиты = Истина;
			ОбновитьНаименование = Истина;
			ОбновитьТип = Истина;
			стр = ЭтотОбъект.СозданныеОбъекты.Добавить();
			стр.Объект = ОбъектСсылка; стр.Назначение = Назначение;
			ТекущаяСтрока.СозданныйОбъект = Истина;
			//КоличествоЗаписанныхДО = КоличествоЗаписанныхДО + 1;
		Иначе
			Если ОбновлятьРанееЗаписанные Тогда
				//МассивСообщений.Добавить(Новый Структура("Текст, Объект, Поле, Путь",
				//		"Заемщик уже существует. КлиентскийНомер = " + ТекущаяСтрока.Идентификатор + ". Данные обновлены.",
				//		НайденнаяСсылкаК, Неопределено, Неопределено));
				//Если ВыводитьСообщения Тогда
				//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заемщик уже существует. КлиентскийНомер = " + 
				//	ТекущаяСтрока.Идентификатор + ". Данные обновлены.", НайденнаяСсылкаК,,,);
				//КонецЕсли;		
				НовыйЭлемент = ОбъектСсылка.ПолучитьОбъект();
				стр = ЭтотОбъект.ИзмененныеОбъекты.Добавить();
				стр.Объект = ОбъектСсылка; стр.Назначение = Назначение;
				ОбновитьРеквизиты = Истина;
				Отбор = Новый Структура;
				Отбор.Вставить("Назначение", Назначение);
				Отбор.Вставить("ВидРеквизита", Перечисления.ВидыРеквизитов.Наименование);				
				ОбновитьНаименование = ЭтотОбъект.НастройкаСоответствий.НайтиСтроки(Отбор)[0].Обновлять;
				Отбор = Новый Структура;
				Отбор.Вставить("Назначение", Назначение);
				Отбор.Вставить("ВидРеквизита", Перечисления.ВидыРеквизитов.ТипОбъекта);				
				ОбновитьТип = ЭтотОбъект.НастройкаСоответствий.НайтиСтроки(Отбор)[0].Обновлять;
				ТекущаяСтрока.ИзмененныйОбъект = Истина;
			Иначе
				//МассивСообщений.Добавить(Новый Структура("Текст, Объект, Поле, Путь",
				//		"Заемщик уже существует. КлиентскийНомер = " + ТекущаяСтрока.Идентификатор + ".",
				//		НайденнаяСсылкаК, Неопределено, Неопределено));
				//Если ВыводитьСообщения Тогда
				//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заемщик уже существует. КлиентскийНомер = " + 
				//	ТекущаяСтрока.Идентификатор + ".", НайденнаяСсылкаК,,,);
				//КонецЕсли;
			КонецЕсли;		
		КонецЕсли;
		
		ЗаписатьДопРеквизиты(ТекущаяСтрока, НовыйЭлемент, Назначение, ОбновитьРеквизиты);
		//Контакты
		ЗаписатьДопСведения(ТекущаяСтрока, ОбъектСсылка, Назначение, ОбновитьРеквизиты);
		
		Если ОбновитьРеквизиты Тогда
			
			Если ОбновитьНаименование Тогда НовыйЭлемент.Наименование = ТекущаяСтрока[ИмяКлючаВТаблице + "Наименование_"]; КонецЕсли;
			НовыйЭлемент.КодКонтрагента = ТекущаяСтрока[ИмяКлючаВТаблице + "Код_"];
			НовыйЭлемент.Организация = ЭтотОбъект.Организация;
			Если ОбновитьТип Тогда НовыйЭлемент.ЮрФизЛицо = ТекущаяСтрока[ИмяКлючаВТаблице + "Типобъекта_"]; КонецЕсли;
			//НовыйЭлемент.ПроверкаДвойников();
			Если НЕ ТекущаяСтрока[ИмяКлючаВТаблице + "Наименование_"] = "" Тогда
				НовыйЭлемент.ПроверкаДвойников();
			КонецЕсли; 				
			НовыйЭлемент.ОбменДанными.Загрузка = Истина;
			
			Если НовыйЭлемент.ЮрФизЛицо = Справочники.ЮрФизЛицо.ФизЛицо Тогда
				
				ФИО = НовыйЭлемент.Наименование;
				СписокСтрок = СтрЗаменить(ФИО, " ", Символы.ПС);
				стрФИО = НовыйЭлемент.ФИО.Добавить();
				СтрФИО.Фамилия = СтрПолучитьСтроку(СписокСтрок, 1);
				СтрФИО.Имя = СтрПолучитьСтроку(СписокСтрок, 2);
				СтрФИО.Отчество = СтрПолучитьСтроку(СписокСтрок, 3);
				СтрФИО.ФИО = ФИО;
				НовыйЭлемент.ФИО_Действующее = ФИО;
				НовыйЭлемент.ФИО_ПФ = ФИО;
				НовыйЭлемент.ФИО_Реестр = ФИО;
				
				НовыйЭлемент.ФИО.Свернуть("ФИО, Фамилия, Имя,Отчество");
				
			КонецЕсли;
			
			
			НовыйЭлемент.Записать();
			//Контакты Чуров
			Если ЗаписыватьТелефоны Тогда
				ЗаписатьКонтакты(ТекущаяСтрока, НовыйЭлемент, Назначение, ОбновитьРеквизиты);
		    КонецЕсли;
		КонецЕсли;
		ВыполнитьПроцедурыЗагрузкиДанных(ТекущаяСтрока, ОбъектСсылка, Назначение, ОбновитьРеквизиты);
		Возврат ОбъектСсылка;
	Иначе 
		Возврат СправочникМенеджер.ПустаяСсылка();	
	КонецЕсли;	
КонецФункции

&НаСервере
Функция ЗаписатьДолговоеОбязательство(ТекущаяСтрока, Назначение, ИмяКлюча, ИмяКлючаВТаблице, Должник, Контрагент, Кредитор) Экспорт
	ТекущаяСтрока.СозданныйОбъектДО = Ложь;
	ТекущаяСтрока.ИзмененныйОбъектДО = Ложь;
	ОбновлятьРанееЗаписанные = ЭтотОбъект.ОбновлятьРанееЗаписанные;
	Отбор = Новый Структура;
	Отбор.Вставить("Назначение", Назначение);
	Отбор.Вставить("ВидРеквизита", Перечисления.ВидыРеквизитов.Код); 
	СправочникМенеджер = Справочники.ДолговыеОбязательства;
	Если ЭтотОбъект.НастройкаСоответствий.НайтиСтроки(Отбор).Количество() > 0 И ТекущаяСтрока[ИмяКлючаВТаблице + "Код_"] <> "" Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ДолговыеОбязательства.Наименование,
		                      |	ДолговыеОбязательства.Ссылка,
		                      |	ДолговыеОбязательства.КодДО
		                      |ИЗ
		                      |	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
		                      |ГДЕ
		                      |	ДолговыеОбязательства.КодДО = &КодДО
		                      |	И ДолговыеОбязательства.ПометкаУдаления = ЛОЖЬ");
		Запрос.УстановитьПараметр(ИмяКлюча, ТекущаяСтрока[ИмяКлючаВТаблице + "Код_"]);
		Результат = Запрос.Выполнить().Выбрать();
		Если Не Результат.Следующий() Тогда
			ОбъектСсылка = СправочникМенеджер.ПустаяСсылка();
		Иначе
			ОбъектСсылка = Результат.Ссылка;
		КонецЕсли;
		
		ОбновитьРеквизиты = Ложь; 
		ОбновитьНаименование = Ложь;
		ОбновитьТип = Ложь;
		Если ОбъектСсылка = СправочникМенеджер.ПустаяСсылка() Тогда
			НовыйЭлемент = СправочникМенеджер.СоздатьЭлемент();
			ОбъектСсылка = СправочникМенеджер.ПолучитьСсылку();
			НовыйЭлемент.УстановитьСсылкуНового(ОбъектСсылка);
			ОбновитьРеквизиты = Истина;
			ОбновитьНаименование = Истина;
			ОбновитьТип = Истина;
			стр = ЭтотОбъект.СозданныеОбъекты.Добавить();
			стр.Объект = ОбъектСсылка; стр.Назначение = Назначение;
			ТекущаяСтрока.СозданныйОбъектДО = Истина;
			//КоличествоЗаписанныхДО = КоличествоЗаписанныхДО + 1;
		Иначе
			Если ОбновлятьРанееЗаписанные Тогда
				//МассивСообщений.Добавить(Новый Структура("Текст, Объект, Поле, Путь",
				//		"Заемщик уже существует. КлиентскийНомер = " + ТекущаяСтрока.Идентификатор + ". Данные обновлены.",
				//		НайденнаяСсылкаК, Неопределено, Неопределено));
				//Если ВыводитьСообщения Тогда
				//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заемщик уже существует. КлиентскийНомер = " + 
				//	ТекущаяСтрока.Идентификатор + ". Данные обновлены.", НайденнаяСсылкаК,,,);
				//КонецЕсли;		
				НовыйЭлемент = ОбъектСсылка.ПолучитьОбъект();
				стр = ЭтотОбъект.ИзмененныеОбъекты.Добавить();
				стр.Объект = ОбъектСсылка; стр.Назначение = Назначение;
				ОбновитьРеквизиты = Истина;
				Отбор = Новый Структура;
				Отбор.Вставить("Назначение", Назначение);
				Отбор.Вставить("ВидРеквизита", Перечисления.ВидыРеквизитов.Наименование);				
				ОбновитьНаименование = ЭтотОбъект.НастройкаСоответствий.НайтиСтроки(Отбор)[0].Обновлять;
				Отбор = Новый Структура;
				Отбор.Вставить("Назначение", Назначение);
				Отбор.Вставить("ВидРеквизита", Перечисления.ВидыРеквизитов.ТипОбъекта);				
				ОбновитьТип = ЭтотОбъект.НастройкаСоответствий.НайтиСтроки(Отбор)[0].Обновлять;
				ТекущаяСтрока.ИзмененныйОбъектДО = Истина;
			Иначе
				//МассивСообщений.Добавить(Новый Структура("Текст, Объект, Поле, Путь",
				//		"Заемщик уже существует. КлиентскийНомер = " + ТекущаяСтрока.Идентификатор + ".",
				//		НайденнаяСсылкаК, Неопределено, Неопределено));
				//Если ВыводитьСообщения Тогда
				//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заемщик уже существует. КлиентскийНомер = " + 
				//	ТекущаяСтрока.Идентификатор + ".", НайденнаяСсылкаК,,,);
				//КонецЕсли;
			КонецЕсли;	  
		КонецЕсли;

		
		ЗаписатьДопРеквизиты(ТекущаяСтрока, НовыйЭлемент, Назначение, ОбновитьРеквизиты);
		ЗаписатьДопСведения(ТекущаяСтрока, ОбъектСсылка, Назначение, ОбновитьРеквизиты);
		
		Если ОбновитьРеквизиты Тогда
			
			Если ОбновитьНаименование Тогда НовыйЭлемент.Наименование = ТекущаяСтрока[ИмяКлючаВТаблице + "Наименование_"]; КонецЕсли;
			НовыйЭлемент.КодДО = ТекущаяСтрока[ИмяКлючаВТаблице + "Код_"];
			НовыйЭлемент.Организация = ЭтотОбъект.Организация;
			Если ОбновитьТип Тогда НовыйЭлемент.ТипДолговогоОбязательства = ТекущаяСтрока[ИмяКлючаВТаблице + "Типобъекта_"]; КонецЕсли;
		
			Если Должник <> Справочники.Контрагенты.ПустаяСсылка() И НовыйЭлемент.Контрагенты.НайтиСтроки(Новый Структура("Значение, ВидКонтрагента", 
				Должник, Перечисления.ВидыКонтрагентов.Должник)).Количество() = 0 Тогда
				Нов = НовыйЭлемент.Контрагенты.Добавить();
				Нов.Значение = Должник;
				Нов.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Должник;
			КонецЕсли;	
						
			Если Контрагент <> Справочники.Контрагенты.ПустаяСсылка() И НовыйЭлемент.Контрагенты.НайтиСтроки(Новый Структура("Значение, ВидКонтрагента", 
				Контрагент, Перечисления.ВидыКонтрагентов.Контрагент)).Количество() = 0 Тогда
				Нов = НовыйЭлемент.Контрагенты.Добавить();
				Нов.Значение = Контрагент;
				Нов.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Контрагент;
			КонецЕсли;	
			
			Если Кредитор <> Справочники.Контрагенты.ПустаяСсылка() И НовыйЭлемент.Контрагенты.НайтиСтроки(Новый Структура("Значение, ВидКонтрагента", 
				Кредитор, Перечисления.ВидыКонтрагентов.Кредитор)).Количество() = 0 Тогда
				Нов = НовыйЭлемент.Контрагенты.Добавить();
				Нов.Значение = Кредитор;
				Нов.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Кредитор;
			КонецЕсли;	
			
			НовыйЭлемент.Записать();			
		КонецЕсли;
		ВыполнитьПроцедурыЗагрузкиДанных(ТекущаяСтрока, ОбъектСсылка, Назначение, ОбновитьРеквизиты);
		Если ТекущаяСтрока["Должники_Код_"] = "" Тогда
			ТекущаяСтрока["Должники_Код_"] = ОбъектСсылка.Должник.КодКонтрагента;
			Должник = ЗаписатьКонтрагента(ТекущаяСтрока, Перечисления.ВидыНазначенийСвойств.Должники, "КодКонтрагента", "Должники_", Истина);
			ТекущаяСтрока.СсылкаДолжник = Должник;
			ТекущаяСтрока.СозданныйОбъектДолжник = ТекущаяСтрока.СозданныйОбъект;
			ТекущаяСтрока.ИзмененныйОбъектДолжник = ТекущаяСтрока.ИзмененныйОбъект;			
		КонецЕсли;
		
		Возврат ОбъектСсылка;
	Иначе 
		Возврат СправочникМенеджер.ПустаяСсылка();	
	КонецЕсли;	
КонецФункции

Функция ЗаписатьИсполнительныйДокумент(ТекущаяСтрока, Назначение, ИмяКлюча, ИмяКлючаВТаблице, Контрагент, ДолговоеОбязательство) Экспорт
	ТекущаяСтрока.СозданныйОбъект = Ложь;
	ТекущаяСтрока.ИзмененныйОбъект = Ложь;
	ОбновлятьРанееЗаписанные = ЭтотОбъект.ОбновлятьРанееЗаписанные;
	Отбор = Новый Структура;
	Отбор.Вставить("Назначение", Назначение);
	Отбор.Вставить("ВидРеквизита", Перечисления.ВидыРеквизитов.Код); 
	СправочникМенеджер = Справочники.ИсполнительныеДокументы;
	Если ЭтотОбъект.НастройкаСоответствий.НайтиСтроки(Отбор).Количество() > 0 И ТекущаяСтрока[ИмяКлючаВТаблице + "Код_"] <> "" Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ИсполнительныеДокументы.Ссылка,
		                      |	ИсполнительныеДокументы.НомерДела,
		                      |	ИсполнительныеДокументы.КодИД
		                      |ИЗ
		                      |	Справочник.ИсполнительныеДокументы КАК ИсполнительныеДокументы
		                      |ГДЕ
		                      |	ИсполнительныеДокументы.КодИД = &КодИД
		                      |	И ИсполнительныеДокументы.ПометкаУдаления = ЛОЖЬ");
		Запрос.УстановитьПараметр(ИмяКлюча, ТекущаяСтрока[ИмяКлючаВТаблице + "Код_"]);
		Результат = Запрос.Выполнить().Выбрать();
		Если Не Результат.Следующий() Тогда
			ОбъектСсылка = СправочникМенеджер.ПустаяСсылка();
		Иначе
			ОбъектСсылка = Результат.Ссылка;
		КонецЕсли;
		
		ОбновитьРеквизиты = Ложь;
		Если ОбъектСсылка = СправочникМенеджер.ПустаяСсылка() Тогда
			НовыйЭлемент = СправочникМенеджер.СоздатьЭлемент();
			ОбъектСсылка = СправочникМенеджер.ПолучитьСсылку();
			НовыйЭлемент.УстановитьСсылкуНового(ОбъектСсылка);
			ОбновитьРеквизиты = Истина;
			стр = ЭтотОбъект.СозданныеОбъекты.Добавить();
			стр.Объект = ОбъектСсылка; стр.Назначение = Назначение;
			ТекущаяСтрока.СозданныйОбъект = Истина;
			//КоличествоЗаписанныхДО = КоличествоЗаписанныхДО + 1;
		Иначе
			Если ОбновлятьРанееЗаписанные Тогда
				//МассивСообщений.Добавить(Новый Структура("Текст, Объект, Поле, Путь",
				//		"Заемщик уже существует. КлиентскийНомер = " + ТекущаяСтрока.Идентификатор + ". Данные обновлены.",
				//		НайденнаяСсылкаК, Неопределено, Неопределено));
				//Если ВыводитьСообщения Тогда
				//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заемщик уже существует. КлиентскийНомер = " + 
				//	ТекущаяСтрока.Идентификатор + ". Данные обновлены.", НайденнаяСсылкаК,,,);
				//КонецЕсли;		
				НовыйЭлемент = ОбъектСсылка.ПолучитьОбъект();
				стр = ЭтотОбъект.ИзмененныеОбъекты.Добавить();
				стр.Объект = ОбъектСсылка; стр.Назначение = Назначение;
				ОбновитьРеквизиты = Истина;
				ТекущаяСтрока.ИзмененныйОбъект = Истина;
			Иначе
				//МассивСообщений.Добавить(Новый Структура("Текст, Объект, Поле, Путь",
				//		"Заемщик уже существует. КлиентскийНомер = " + ТекущаяСтрока.Идентификатор + ".",
				//		НайденнаяСсылкаК, Неопределено, Неопределено));
				//Если ВыводитьСообщения Тогда
				//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заемщик уже существует. КлиентскийНомер = " + 
				//	ТекущаяСтрока.Идентификатор + ".", НайденнаяСсылкаК,,,);
				//КонецЕсли;
			КонецЕсли;	  
		КонецЕсли;

		
		ЗаписатьДопРеквизиты(ТекущаяСтрока, НовыйЭлемент, Назначение, ОбновитьРеквизиты);
		ЗаписатьДопСведения(ТекущаяСтрока, ОбъектСсылка, Назначение, ОбновитьРеквизиты);
		
		Если ОбновитьРеквизиты Тогда
			
			НовыйЭлемент.Наименование = ТекущаяСтрока[ИмяКлючаВТаблице + "Наименование_"];
			НовыйЭлемент.НомерДела = ТекущаяСтрока[ИмяКлючаВТаблице + "Наименование_"];
			НовыйЭлемент.КодИД = ТекущаяСтрока[ИмяКлючаВТаблице + "Код_"];
			НовыйЭлемент.Организация = ЭтотОбъект.Организация;
			НовыйЭлемент.ТипИД = ТекущаяСтрока[ИмяКлючаВТаблице + "Типобъекта_"];
			НовыйЭлемент.Должник = Контрагент;
			НовыйЭлемент.Владелец = ДолговоеОбязательство;
			
			НовыйЭлемент.Записать();			
		КонецЕсли;
		ВыполнитьПроцедурыЗагрузкиДанных(ТекущаяСтрока, ОбъектСсылка, Назначение, ОбновитьРеквизиты);
		Возврат ОбъектСсылка;
	Иначе 
		Возврат СправочникМенеджер.ПустаяСсылка();	
	КонецЕсли;	
КонецФункции

Функция ЗаписатьЗалог(ТекущаяСтрока, Назначение, ИмяКлюча, ИмяКлючаВТаблице, ДолговоеОбязательство) Экспорт
	ТекущаяСтрока.СозданныйОбъект = Ложь;
	ТекущаяСтрока.ИзмененныйОбъект = Ложь;
	ОбновлятьРанееЗаписанные = ЭтотОбъект.ОбновлятьРанееЗаписанные;
	Отбор = Новый Структура;
	Отбор.Вставить("Назначение", Назначение);
	Отбор.Вставить("ВидРеквизита", Перечисления.ВидыРеквизитов.Код); 
	СправочникМенеджер = Справочники.Залоги;
	Если ЭтотОбъект.НастройкаСоответствий.НайтиСтроки(Отбор).Количество() > 0 И ТекущаяСтрока[ИмяКлючаВТаблице + "Код_"] <> "" Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	Залоги.Ссылка,
		                      |	Залоги.НомерЗалога,
		                      |	Залоги.Наименование
		                      |ИЗ
		                      |	Справочник.Залоги КАК Залоги
		                      |ГДЕ
		                      |	Залоги.ПометкаУдаления = ЛОЖЬ
		                      |	И Залоги.НомерЗалога = &НомерЗалога");
		Запрос.УстановитьПараметр(ИмяКлюча, ТекущаяСтрока[ИмяКлючаВТаблице + "Код_"]);
		Результат = Запрос.Выполнить().Выбрать();
		Если Не Результат.Следующий() Тогда
			ОбъектСсылка = СправочникМенеджер.ПустаяСсылка();
		Иначе
			ОбъектСсылка = Результат.Ссылка;
		КонецЕсли;
		
		ОбновитьРеквизиты = Ложь;
		Если ОбъектСсылка = СправочникМенеджер.ПустаяСсылка() Тогда
			НовыйЭлемент = СправочникМенеджер.СоздатьЭлемент();
			ОбъектСсылка = СправочникМенеджер.ПолучитьСсылку();
			НовыйЭлемент.УстановитьСсылкуНового(ОбъектСсылка);
			ОбновитьРеквизиты = Истина;
			стр = ЭтотОбъект.СозданныеОбъекты.Добавить();
			стр.Объект = ОбъектСсылка; стр.Назначение = Назначение;
			ТекущаяСтрока.СозданныйОбъект = Истина;
			//КоличествоЗаписанныхДО = КоличествоЗаписанныхДО + 1;
		Иначе
			Если ОбновлятьРанееЗаписанные Тогда
				//МассивСообщений.Добавить(Новый Структура("Текст, Объект, Поле, Путь",
				//		"Заемщик уже существует. КлиентскийНомер = " + ТекущаяСтрока.Идентификатор + ". Данные обновлены.",
				//		НайденнаяСсылкаК, Неопределено, Неопределено));
				//Если ВыводитьСообщения Тогда
				//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заемщик уже существует. КлиентскийНомер = " + 
				//	ТекущаяСтрока.Идентификатор + ". Данные обновлены.", НайденнаяСсылкаК,,,);
				//КонецЕсли;		
				НовыйЭлемент = ОбъектСсылка.ПолучитьОбъект();
				стр = ЭтотОбъект.ИзмененныеОбъекты.Добавить();
				стр.Объект = ОбъектСсылка; стр.Назначение = Назначение;
				ОбновитьРеквизиты = Истина;
				ТекущаяСтрока.ИзмененныйОбъект = Истина;
			Иначе
				//МассивСообщений.Добавить(Новый Структура("Текст, Объект, Поле, Путь",
				//		"Заемщик уже существует. КлиентскийНомер = " + ТекущаяСтрока.Идентификатор + ".",
				//		НайденнаяСсылкаК, Неопределено, Неопределено));
				//Если ВыводитьСообщения Тогда
				//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заемщик уже существует. КлиентскийНомер = " + 
				//	ТекущаяСтрока.Идентификатор + ".", НайденнаяСсылкаК,,,);
				//КонецЕсли;
			КонецЕсли;	  
		КонецЕсли;

		
		ЗаписатьДопРеквизиты(ТекущаяСтрока, НовыйЭлемент, Назначение, ОбновитьРеквизиты);
		ЗаписатьДопСведения(ТекущаяСтрока, ОбъектСсылка, Назначение, ОбновитьРеквизиты);
		
		Если ОбновитьРеквизиты Тогда
			
			НовыйЭлемент.Наименование = ТекущаяСтрока[ИмяКлючаВТаблице + "Наименование_"];
			НовыйЭлемент.НомерЗалога = ТекущаяСтрока[ИмяКлючаВТаблице + "Код_"];
			НовыйЭлемент.Организация = ЭтотОбъект.Организация;
			НовыйЭлемент.ТипЗалога = ТекущаяСтрока[ИмяКлючаВТаблице + "Типобъекта_"];
			НовыйЭлемент.Владелец = ДолговоеОбязательство;
			
			НовыйЭлемент.Записать();			
		КонецЕсли;
		ВыполнитьПроцедурыЗагрузкиДанных(ТекущаяСтрока, ОбъектСсылка, Назначение, ОбновитьРеквизиты);
		Возврат ОбъектСсылка;
	Иначе 
		Возврат СправочникМенеджер.ПустаяСсылка();	
	КонецЕсли;	
КонецФункции

Функция ЗаписатьДоговор(ТекущаяСтрока, Назначение, ИмяКлюча, ИмяКлючаВТаблице, Контрагент) Экспорт
	ТекущаяСтрока.СозданныйОбъект = Ложь;
	ТекущаяСтрока.ИзмененныйОбъект = Ложь;
	ОбновлятьРанееЗаписанные = ЭтотОбъект.ОбновлятьРанееЗаписанные;
	Отбор = Новый Структура;
	Отбор.Вставить("Назначение", Назначение);
	Отбор.Вставить("ВидРеквизита", Перечисления.ВидыРеквизитов.Код); 
	СправочникМенеджер = Справочники.ДоговорыКонтрагентов;
	Если ЭтотОбъект.НастройкаСоответствий.НайтиСтроки(Отбор).Количество() > 0 И ТекущаяСтрока[ИмяКлючаВТаблице + "Код_"] <> "" Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ДоговорыКонтрагентов.Ссылка,
		                      |	ДоговорыКонтрагентов.Наименование,
		                      |	ДоговорыКонтрагентов.КодДоговора
		                      |ИЗ
		                      |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		                      |ГДЕ
		                      |	ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
		                      |	И ДоговорыКонтрагентов.КодДоговора = &КодДоговора");
		Запрос.УстановитьПараметр(ИмяКлюча, ТекущаяСтрока[ИмяКлючаВТаблице + "Код_"]);
		Результат = Запрос.Выполнить().Выбрать();
		Если Не Результат.Следующий() Тогда
			ОбъектСсылка = СправочникМенеджер.ПустаяСсылка();
		Иначе
			ОбъектСсылка = Результат.Ссылка;
		КонецЕсли;
		
		ОбновитьРеквизиты = Ложь;
		Если ОбъектСсылка = СправочникМенеджер.ПустаяСсылка() Тогда
			НовыйЭлемент = СправочникМенеджер.СоздатьЭлемент();
			ОбъектСсылка = СправочникМенеджер.ПолучитьСсылку();
			НовыйЭлемент.УстановитьСсылкуНового(ОбъектСсылка);
			ОбновитьРеквизиты = Истина;
			стр = ЭтотОбъект.СозданныеОбъекты.Добавить();
			стр.Объект = ОбъектСсылка; стр.Назначение = Назначение;
			ТекущаяСтрока.СозданныйОбъект = Истина;
			//КоличествоЗаписанныхДО = КоличествоЗаписанныхДО + 1;
		Иначе
			Если ОбновлятьРанееЗаписанные Тогда
				//МассивСообщений.Добавить(Новый Структура("Текст, Объект, Поле, Путь",
				//		"Заемщик уже существует. КлиентскийНомер = " + ТекущаяСтрока.Идентификатор + ". Данные обновлены.",
				//		НайденнаяСсылкаК, Неопределено, Неопределено));
				//Если ВыводитьСообщения Тогда
				//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заемщик уже существует. КлиентскийНомер = " + 
				//	ТекущаяСтрока.Идентификатор + ". Данные обновлены.", НайденнаяСсылкаК,,,);
				//КонецЕсли;		
				НовыйЭлемент = ОбъектСсылка.ПолучитьОбъект();
				стр = ЭтотОбъект.ИзмененныеОбъекты.Добавить();
				стр.Объект = ОбъектСсылка; стр.Назначение = Назначение;
				ОбновитьРеквизиты = Истина;
				ТекущаяСтрока.ИзмененныйОбъект = Истина;
			Иначе
				//МассивСообщений.Добавить(Новый Структура("Текст, Объект, Поле, Путь",
				//		"Заемщик уже существует. КлиентскийНомер = " + ТекущаяСтрока.Идентификатор + ".",
				//		НайденнаяСсылкаК, Неопределено, Неопределено));
				//Если ВыводитьСообщения Тогда
				//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заемщик уже существует. КлиентскийНомер = " + 
				//	ТекущаяСтрока.Идентификатор + ".", НайденнаяСсылкаК,,,);
				//КонецЕсли;
			КонецЕсли;	  
		КонецЕсли;

		
		ЗаписатьДопРеквизиты(ТекущаяСтрока, НовыйЭлемент, Назначение, ОбновитьРеквизиты);
		ЗаписатьДопСведения(ТекущаяСтрока, ОбъектСсылка, Назначение, ОбновитьРеквизиты);
		
		Если ОбновитьРеквизиты Тогда
			
			НовыйЭлемент.Наименование = ТекущаяСтрока[ИмяКлючаВТаблице + "Наименование_"];

			НовыйЭлемент.КодДоговора = ТекущаяСтрока[ИмяКлючаВТаблице + "Код_"];
			НовыйЭлемент.Организация = ЭтотОбъект.Организация;
			НовыйЭлемент.ТипДоговора = ТекущаяСтрока[ИмяКлючаВТаблице + "Типобъекта_"];
			
			Если Контрагент <> Справочники.Контрагенты.ПустаяСсылка() И НовыйЭлемент.Контрагенты.НайтиСтроки(Новый Структура("Контрагент", 
				Контрагент)).Количество() = 0 Тогда
				Нов = НовыйЭлемент.Контрагенты.Добавить();
				Нов.Контрагент = Контрагент; 	
			КонецЕсли;
			
			НовыйЭлемент.Записать();			
		КонецЕсли;
		ВыполнитьПроцедурыЗагрузкиДанных(ТекущаяСтрока, ОбъектСсылка, Назначение, ОбновитьРеквизиты);
		Возврат ОбъектСсылка;		
	Иначе 
		Возврат СправочникМенеджер.ПустаяСсылка();	
	КонецЕсли;	
КонецФункции


Функция ЗаписатьУслугу(ТекущаяСтрока, Назначение, ИмяКлюча, ИмяКлючаВТаблице, Контрагент, Договор) Экспорт
	ТекущаяСтрока.СозданныйОбъект = Ложь;
	ТекущаяСтрока.ИзмененныйОбъект = Ложь;
	ОбновлятьРанееЗаписанные = ЭтотОбъект.ОбновлятьРанееЗаписанные;
	Отбор = Новый Структура;
	Отбор.Вставить("Назначение", Назначение);
	Отбор.Вставить("ВидРеквизита", Перечисления.ВидыРеквизитов.Код); 
	СправочникМенеджер = Справочники.УслугиПоДоговору;
	Если ЭтотОбъект.НастройкаСоответствий.НайтиСтроки(Отбор).Количество() > 0 И ТекущаяСтрока[ИмяКлючаВТаблице + "Код_"] <> "" Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	УслугиПоДоговору.Ссылка,
		                      |	УслугиПоДоговору.Наименование,
		                      |	УслугиПоДоговору.КодУслуги
		                      |ИЗ
		                      |	Справочник.УслугиПоДоговору КАК УслугиПоДоговору
		                      |ГДЕ
		                      |	УслугиПоДоговору.ПометкаУдаления = ЛОЖЬ
		                      |	И УслугиПоДоговору.КодУслуги = &КодУслуги");
		Запрос.УстановитьПараметр(ИмяКлюча, ТекущаяСтрока[ИмяКлючаВТаблице + "Код_"]);
		Результат = Запрос.Выполнить().Выбрать();
		Если Не Результат.Следующий() Тогда
			ОбъектСсылка = СправочникМенеджер.ПустаяСсылка();
		Иначе
			ОбъектСсылка = Результат.Ссылка;
		КонецЕсли;
		
		ОбновитьРеквизиты = Ложь;
		Если ОбъектСсылка = СправочникМенеджер.ПустаяСсылка() Тогда
			НовыйЭлемент = СправочникМенеджер.СоздатьЭлемент();
			ОбъектСсылка = СправочникМенеджер.ПолучитьСсылку();
			НовыйЭлемент.УстановитьСсылкуНового(ОбъектСсылка);
			ОбновитьРеквизиты = Истина;
			стр = ЭтотОбъект.СозданныеОбъекты.Добавить();
			стр.Объект = ОбъектСсылка; стр.Назначение = Назначение;
			ТекущаяСтрока.СозданныйОбъект = Истина;
			//КоличествоЗаписанныхДО = КоличествоЗаписанныхДО + 1;
		Иначе
			Если ОбновлятьРанееЗаписанные Тогда
				//МассивСообщений.Добавить(Новый Структура("Текст, Объект, Поле, Путь",
				//		"Заемщик уже существует. КлиентскийНомер = " + ТекущаяСтрока.Идентификатор + ". Данные обновлены.",
				//		НайденнаяСсылкаК, Неопределено, Неопределено));
				//Если ВыводитьСообщения Тогда
				//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заемщик уже существует. КлиентскийНомер = " + 
				//	ТекущаяСтрока.Идентификатор + ". Данные обновлены.", НайденнаяСсылкаК,,,);
				//КонецЕсли;		
				НовыйЭлемент = ОбъектСсылка.ПолучитьОбъект();
				стр = ЭтотОбъект.ИзмененныеОбъекты.Добавить();
				стр.Объект = ОбъектСсылка; стр.Назначение = Назначение;
				ОбновитьРеквизиты = Истина;
				ТекущаяСтрока.ИзмененныйОбъект = Истина;
			Иначе
				//МассивСообщений.Добавить(Новый Структура("Текст, Объект, Поле, Путь",
				//		"Заемщик уже существует. КлиентскийНомер = " + ТекущаяСтрока.Идентификатор + ".",
				//		НайденнаяСсылкаК, Неопределено, Неопределено));
				//Если ВыводитьСообщения Тогда
				//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заемщик уже существует. КлиентскийНомер = " + 
				//	ТекущаяСтрока.Идентификатор + ".", НайденнаяСсылкаК,,,);
				//КонецЕсли;
			КонецЕсли;	  
		КонецЕсли;

		
		ЗаписатьДопРеквизиты(ТекущаяСтрока, НовыйЭлемент, Назначение, ОбновитьРеквизиты);
		ЗаписатьДопСведения(ТекущаяСтрока, ОбъектСсылка, Назначение, ОбновитьРеквизиты);
		
		Если ОбновитьРеквизиты Тогда
			
			НовыйЭлемент.Наименование = ТекущаяСтрока[ИмяКлючаВТаблице + "Наименование_"];

			НовыйЭлемент.КодУслуги = ТекущаяСтрока[ИмяКлючаВТаблице + "Код_"];
			НовыйЭлемент.Организация = ЭтотОбъект.Организация;
			НовыйЭлемент.ТипУслуги = ТекущаяСтрока[ИмяКлючаВТаблице + "Типобъекта_"];
			
			НовыйЭлемент.Контрагент = Контрагент;
			НовыйЭлемент.Владелец = Договор;
			НовыйЭлемент.Записать();			
		КонецЕсли;
		ВыполнитьПроцедурыЗагрузкиДанных(ТекущаяСтрока, ОбъектСсылка, Назначение, ОбновитьРеквизиты);		
		Возврат ОбъектСсылка;
	Иначе 
		Возврат СправочникМенеджер.ПустаяСсылка();	
	КонецЕсли;	
КонецФункции

&НаСервере
Процедура ЗаписатьДопРеквизиты(ТекущаяСтрока, ТекущийОбъект, Назначение, Обновлять) Экспорт
	//	ТекущийОбъект = Справочники.Контрагенты.СоздатьЭлемент();
	Если Обновлять Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Назначение", Назначение);
		Отбор.Вставить("ВидРеквизита", Перечисления.ВидыРеквизитов.ДополнительныйРеквизит);
		Строки = ЭтотОбъект.НастройкаСоответствий.НайтиСтроки(Отбор);	
		Для Каждого Элемент ИЗ Строки Цикл  
			Если Элемент.Обновлять Тогда
				ИмяРеквизита = СтрЗаменить(Строка(Элемент.Назначение)," ", "") + "_" + СтрЗаменить(Строка(Элемент.ВидРеквизита), " ", "") + "_" + СтрЗаменить(Строка(Элемент.КодСвойства), " ", "_");
				Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоКоду(Элемент.КодСвойства);
				Значение = ТекущаяСтрока[ИмяРеквизита];
				Отбор1 = Новый Структура;
				Отбор1.Вставить("Свойство", Свойство);
				ДопРеквизит = ТекущийОбъект.ДополнительныеРеквизиты.НайтиСтроки(Отбор1);
				Если ДопРеквизит.Количество() = 0 Тогда
					НовыйДопРеквизит = ТекущийОбъект.ДополнительныеРеквизиты.Добавить();
					НовыйДопРеквизит.Свойство = Свойство;
					НовыйДопРеквизит.Значение = Значение;
				Иначе
					ДопРеквизит[0].Значение = Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

//20170704 Чуров
&НаСервере
Процедура ЗаписатьКонтакты(ТекущаяСтрока, ТекущийОбъект, Назначение, Обновлять) Экспорт
	Если Обновлять Тогда
		Строки = ЭтотОбъект.НастройкаСоответствийКонтакты;	
		Для Каждого Элемент ИЗ Строки Цикл  			
			ИмяВидТелефона = "Должники" + "_" + "ВидТелефона" + Элемент.НомерСтроки;
			ИмяВидНомер = "Должники" + "_" + "Номер" + Элемент.НомерСтроки;
			ИмяКонтактноеЛицо = "Должники" + "_" + "КонтактноеЛицо" + Элемент.НомерСтроки;
			
			НомерТел = СокрЛП(ТекущаяСтрока[ИмяВидНомер]);
			НомерТел = Рассылка.ОчиститьФорматНомера(НомерТел);
			
			Если НомерТел = "" Тогда
				Продолжить;	
			КонецЕсли;
			
			ВидТелефона = СокрЛП(ТекущаяСтрока[ИмяВидТелефона]);
			КонтактноеЛицо = СокрЛП(ТекущаяСтрока[ИмяКонтактноеЛицо]);
			
			НайденнаяСтрока = ТекущийОбъект.Телефоны.Найти(Прав(НомерТел, 10), "НомерДляПоиска");
			Если НайденнаяСтрока = Неопределено Тогда			
				НовСтр = ТекущийОбъект.Телефоны.Добавить();
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ВидыТелефонов.Ссылка
				|ИЗ
				|	Справочник.ВидыТелефонов КАК ВидыТелефонов
				|ГДЕ
				|	ВидыТелефонов.Наименование = &Наименование";
				
				Запрос.УстановитьПараметр("Наименование", ВидТелефона);
				 
				РезультатЗапроса = Запрос.Выполнить();
				
				Если Не РезультатЗапроса.Пустой() Тогда
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();					
					ВыборкаДетальныеЗаписи.Следующий();
					НовВидТелефона = ВыборкаДетальныеЗаписи.Ссылка;
				Иначе
					НовВидТелефона = Справочники.ВидыТелефонов.СоздатьЭлемент();
					НовВидТелефона.Наименование = ВидТелефона;
					НовВидТелефона.Записать();
					НовВидТелефона = НовВидТелефона.Ссылка;
				КонецЕсли;
				НовСтр.ВидТелефона = НовВидТелефона;							
				
				НовСтр.Номер = НомерТел;
				УдалитьУправлениеКонтактнойИнформацией.РазбитьНомерТелефонаНаСоставляющие(НовСтр, НомерТел);
				
				Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	КонтактныеЛицаПоДолжнику.Ссылка
					|ИЗ
					|	Справочник.КонтактныеЛицаПоДолжнику КАК КонтактныеЛицаПоДолжнику
					|ГДЕ
					|	КонтактныеЛицаПоДолжнику.Наименование = &Наименование
					|	И КонтактныеЛицаПоДолжнику.Владелец = &Владелец";
					
					Запрос.УстановитьПараметр("Владелец", ТекущийОбъект.Ссылка);
					Запрос.УстановитьПараметр("Наименование", КонтактноеЛицо);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					Если Не РезультатЗапроса.Пустой() Тогда
						ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();					
						ВыборкаДетальныеЗаписи.Следующий();
						НовКонтактноеЛицо = ВыборкаДетальныеЗаписи.Ссылка;
					Иначе
						НовКонтактноеЛицо = Справочники.КонтактныеЛицаПоДолжнику.СоздатьЭлемент();
						НовКонтактноеЛицо.Владелец = ТекущийОбъект.Ссылка;
						НовКонтактноеЛицо.Наименование = КонтактноеЛицо;
						НовКонтактноеЛицо.Записать();
						НовКонтактноеЛицо = НовКонтактноеЛицо.Ссылка;
					КонецЕсли;	
					
					КонтактноеЛицо = НовКонтактноеЛицо;
					НовСтр.КонтактноеЛицо = НовКонтактноеЛицо;	
					
				КонецЕсли;
			КонецЕсли;			
		КонецЦикла;
		ТекущийОбъект.Записать();
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ЗаписатьДопСведения(ТекущаяСтрока, ОбъектСсылка, Назначение, Обновлять) Экспорт
	Если Обновлять Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Назначение", Назначение);
		Отбор.Вставить("ВидРеквизита", Перечисления.ВидыРеквизитов.ДополнительноеСведение);
		Строки = ЭтотОбъект.НастройкаСоответствий.НайтиСтроки(Отбор);	
		Для Каждого Элемент ИЗ Строки Цикл
			Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоКоду(Элемент.КодСвойства);
			ИмяРеквизита = СтрЗаменить(Строка(Элемент.Назначение)," ", "") + "_" + СтрЗаменить(Строка(Элемент.ВидРеквизита), " ", "") + "_" + СтрЗаменить(Строка(Элемент.КодСвойства), " ", "_");
			Значение = ТекущаяСтрока[ИмяРеквизита];
			Если Элемент.Обновлять Тогда
				Если Свойство.ВидСтроки = Перечисления.ВидыТипаСтрока.АдресФИАС Тогда
					Значение = бит_АдресныйКлассификатор.ПреобразоватьАдресКЛАДРВФИАС(Значение, ОбъектСсылка, Свойство);					
				КонецЕсли;  
				ЗаписатьДополнительноеСведение(ОбъектСсылка, Свойство,Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ЗаписатьДополнительноеСведение(ОбъектСсылка, Свойство, Значение) 
	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ОбъектСсылка);
	НаборЗаписей.Отбор.Свойство.Установить(Свойство);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		Запись = НаборЗаписей.Добавить();
		Запись.Объект = ОбъектСсылка;
		Запись.Свойство = Свойство;
		Запись.Значение = Значение;
	Иначе
		НаборЗаписей[0].Значение = Значение;
	КонецЕсли;
	НаборЗаписей.Записать(Истина);	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПроцедурыЗагрузкиДанных(ТекущаяСтрока, ОбъектСсылка, Назначение, Обновлять) Экспорт
	Если Обновлять Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Назначение", Назначение);
		Отбор.Вставить("ВидРеквизита", Перечисления.ВидыРеквизитов.Процедура);
		Строки = ЭтотОбъект.НастройкаСоответствий.НайтиСтроки(Отбор);	
		Для Каждого Элемент ИЗ Строки Цикл
			ИмяРеквизита = СтрЗаменить(Строка(Элемент.Назначение)," ", "") + "_" + СтрЗаменить(Строка(Элемент.ВидРеквизита), " ", "") + "_" + СтрЗаменить(Строка(Элемент.КодСвойства), " ", "_");
			ПроцедураЗагрузки = Справочники.ПроцедурыЗагрузкиДанных.НайтиПоКоду(Элемент.КодСвойства);
			//ПроцедураОбъект = Справочники.ПроцедурыЗагрузкиДанных.СоздатьЭлемент();
			ПроцедураОбъект = ПроцедураЗагрузки.ПолучитьОбъект();
			ПроцедураОбъект.ВыполнитьПроцедуру(ПроцедураОбъект.Функция, ОбъектСсылка, Обновлять, ТекущаяСтрока[ИмяРеквизита]);
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
КонецПроцедуры

&НаСервере
Процедура ПроизвестиЗагрузку() Экспорт
	ЭтотОбъект.СозданныеОбъекты.Очистить();
	ЭтотОбъект.ИзмененныеОбъекты.Очистить();
	тзДанные = ВернутьСодержимоеХранилищаТЗДанных();
	//тзДанные = Новый ТаблицаЗначений;
	тзДанные.Колонки.Добавить("СсылкаДО", Новый ОписаниеТипов("СправочникСсылка.ДолговыеОбязательства"));
	тзДанные.Колонки.Добавить("СсылкаДолжник", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	тзДанные.Колонки.Добавить("СсылкаКонтрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	тзДанные.Колонки.Добавить("СсылкаКредитор", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	тзДанные.Колонки.Добавить("СсылкаИД", Новый ОписаниеТипов("СправочникСсылка.ИсполнительныеДокументы"));
	тзДанные.Колонки.Добавить("СсылкаУ", Новый ОписаниеТипов("СправочникСсылка.УслугиПоДоговору"));
	тзДанные.Колонки.Добавить("СсылкаЗ", Новый ОписаниеТипов("СправочникСсылка.Залоги"));
	тзДанные.Колонки.Добавить("СсылкаДоговор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	
	тзДанные.Колонки.Добавить("СозданныйОбъект", Новый ОписаниеТипов("Булево"));
	тзДанные.Колонки.Добавить("ИзмененныйОбъект", Новый ОписаниеТипов("Булево"));
	
	тзДанные.Колонки.Добавить("СозданныйОбъектДО", Новый ОписаниеТипов("Булево"));
	тзДанные.Колонки.Добавить("ИзмененныйОбъектДО", Новый ОписаниеТипов("Булево"));
	
	тзДанные.Колонки.Добавить("СозданныйОбъектДоговор", Новый ОписаниеТипов("Булево"));
	тзДанные.Колонки.Добавить("ИзмененныйОбъектДоговор", Новый ОписаниеТипов("Булево"));
	
	тзДанные.Колонки.Добавить("СозданныйОбъектДолжник", Новый ОписаниеТипов("Булево"));
	тзДанные.Колонки.Добавить("ИзмененныйОбъектДолжник", Новый ОписаниеТипов("Булево"));
	
	тзДанные.Колонки.Добавить("СозданныйОбъектКонтрагент", Новый ОписаниеТипов("Булево"));
	тзДанные.Колонки.Добавить("ИзмененныйОбъектКонтрагент", Новый ОписаниеТипов("Булево"));
	
	тзДанные.Колонки.Добавить("СозданныйОбъектКредитор", Новый ОписаниеТипов("Булево"));
	тзДанные.Колонки.Добавить("ИзмененныйОбъектКредитор", Новый ОписаниеТипов("Булево"));
	
	тзДанные.Колонки.Добавить("СозданныйОбъектИД", Новый ОписаниеТипов("Булево"));
	тзДанные.Колонки.Добавить("ИзмененныйОбъектИД", Новый ОписаниеТипов("Булево"));
	
	тзДанные.Колонки.Добавить("СозданныйОбъектУ", Новый ОписаниеТипов("Булево"));
	тзДанные.Колонки.Добавить("ИзмененныйОбъектУ", Новый ОписаниеТипов("Булево"));
	
	тзДанные.Колонки.Добавить("СозданныйОбъектЗ", Новый ОписаниеТипов("Булево"));
	тзДанные.Колонки.Добавить("ИзмененныйОбъектЗ", Новый ОписаниеТипов("Булево"));
	Для Каждого Строка ИЗ тзДанные Цикл
		ВыполнитьЗагрузку(Строка);	
	КонецЦикла;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТаблицаОбъектов.Объект,
	                      |	ТаблицаОбъектов.Назначение
	                      |ПОМЕСТИТЬ Табл
	                      |ИЗ
	                      |	&ТаблицаОбъектов КАК ТаблицаОбъектов
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Табл.Объект КАК Объект,
	                      |	Табл.Назначение КАК Назначение
	                      |ИЗ
	                      |	Табл КАК Табл
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	Табл.Объект,
	                      |	Табл.Назначение
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Назначение,
	                      |	Объект");
	Запрос.УстановитьПараметр("ТаблицаОбъектов", ЭтотОбъект.ИзмененныеОбъекты.Выгрузить());
	ЭтотОбъект.ИзмененныеОбъекты.Очистить();
	ЭтотОбъект.ИзмененныеОбъекты.Загрузить(Запрос.Выполнить().Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаОбъектов", ЭтотОбъект.СозданныеОбъекты.Выгрузить());
	ЭтотОбъект.СозданныеОбъекты.Очистить();
	ЭтотОбъект.СозданныеОбъекты.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ПринятьВРаботу(тзДанные);
	АктуализироватьЗадолженность(тзДанные);
	ПередатьСотрудникам(тзДанные);
КонецПроцедуры

&НаСервере
Процедура ПринятьВРаботу(тзДанные) Экспорт
	Документ = Документы.ПринятиеВРаботуОрганизации.СоздатьДокумент();
	Документ.Организация = ЭтотОбъект.Организация;
	Документ.Автор = ЭтотОбъект.Автор;
	Документ.Дата = ТекущаяДатаСеанса();
	
	Для Каждого Строка из тзДанные Цикл
		Если Константы.УчетПоДО.Получить() Тогда
			Если Строка.СозданныйОбъектДО И Строка.СсылкаДО <> Справочники.ДолговыеОбязательства.ПустаяСсылка() Тогда
				стр = Документ.Объекты.Добавить();
				стр.Объект = Строка.СсылкаДО;
			КонецЕсли;
		Иначе
			Если Строка.СозданныйОбъектДолжник И Строка.СсылкаДолжник <> Справочники.Контрагенты.ПустаяСсылка() Тогда
				стр = Документ.Объекты.Добавить();
				стр.Объект = Строка.СсылкаДолжник;
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	Если Документ.Объекты.Количество() > 0 Тогда
		Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура АктуализироватьЗадолженность(тзДанные) Экспорт
	ВыполнитьАктуализацию(тзДанные, "СсылкаДО", "СозданныйОбъектДО", "ИзмененныйОбъектДО", Перечисления.ВидыНазначенийСвойств.ДолговыеОбязательства, Справочники.ДолговыеОбязательства);
	ВыполнитьАктуализацию(тзДанные, "СсылкаДоговор", "СозданныйОбъектДоговор", "ИзмененныйОбъектДоговор",Перечисления.ВидыНазначенийСвойств.ДоговорыКонтрагентов, Справочники.ДоговорыКонтрагентов);
	ВыполнитьАктуализацию(тзДанные, "СсылкаДолжник", "СозданныйОбъектДолжник", "ИзмененныйОбъектДолжник",Перечисления.ВидыНазначенийСвойств.Должники, Справочники.Контрагенты);
	ВыполнитьАктуализацию(тзДанные, "СсылкаКонтрагент", "СозданныйОбъектКонтрагент", "ИзмененныйОбъектКонтрагент",Перечисления.ВидыНазначенийСвойств.Контрагенты, Справочники.Контрагенты);
	ВыполнитьАктуализацию(тзДанные, "СсылкаКредитор", "СозданныйОбъектКредитор", "ИзмененныйОбъектКредитор",Перечисления.ВидыНазначенийСвойств.Кредиторы, Справочники.Контрагенты);
	ВыполнитьАктуализацию(тзДанные, "СсылкаУ", "СозданныйОбъектУ", "ИзмененныйОбъектУ",Перечисления.ВидыНазначенийСвойств.Услуги, Справочники.УслугиПоДоговору);
	ВыполнитьАктуализацию(тзДанные, "СсылкаИД", "СозданныйОбъектИД", "ИзмененныйОбъектИД",Перечисления.ВидыНазначенийСвойств.ИсполнительныеДокументы, Справочники.ИсполнительныеДокументы);
	ВыполнитьАктуализацию(тзДанные, "СсылкаЗ", "СозданныйОбъектЗ", "ИзмененныйОбъектЗ",Перечисления.ВидыНазначенийСвойств.Залоги, Справочники.Залоги);	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьАктуализацию(тзДанные, ИмяРеквизита, ИмяС, ИмяИ, Назначение, СправочникМенеджер) Экспорт
	Отбор = Новый Структура;
	Отбор.Вставить("Назначение", Назначение);
	Отбор.Вставить("ВидРеквизита", Перечисления.ВидыРеквизитов.ТипЗадолженности);
	Если ЭтотОбъект.НастройкаСоответствий.НайтиСтроки(Отбор).Количество() > 0 Тогда
		Документ = Документы.АктуализацияЗадолженности.СоздатьДокумент();
		Документ.Организация = ЭтотОбъект.Организация;
		Документ.Автор = ЭтотОбъект;
		Документ.Дата = ?(ЗначениеЗаполнено(ЭтотОбъект.ДатаАктуализацииЗадолженности), ЭтотОбъект.ДатаАктуализацииЗадолженности, ТекущаяДатаСеанса());
		
		Для Каждого Строка Из тзДанные Цикл
			Отбор1 = Новый Структура;
			Отбор1.Вставить("Объект", Строка[ИмяРеквизита]);
			Если (Строка[ИмяИ] ИЛИ Строка[ИмяС]) И Строка[ИмяРеквизита] <> СправочникМенеджер.ПустаяСсылка() И Документ.Объекты.НайтиСтроки(Отбор1).Количество() = 0 Тогда
				стр = Документ.Объекты.Добавить();
				стр.Объект = Строка[ИмяРеквизита];
				Имя = СтрЗаменить(Строка(Назначение)," ", "") + "_" + СтрЗаменить(Строка(Перечисления.ВидыРеквизитов.ТипЗадолженности), " ", "") + "_";
				
				стр.ВалютаЗагрузки = Строка[Имя];
				стр.ОсновнойДолг = Строка[Имя + СтрЗаменить(Строка(ПланыВидовХарактеристик.ТипыЗадолженности.ОсновнойДолг.Код), " ", "_")];
				стр.Проценты = Строка[Имя + СтрЗаменить(Строка(ПланыВидовХарактеристик.ТипыЗадолженности.Проценты.Код), " ", "_")];
				стр.Штрафы = Строка[Имя + СтрЗаменить(Строка(ПланыВидовХарактеристик.ТипыЗадолженности.Штрафы.Код), " ", "_")];
				стр.Пени = Строка[Имя + СтрЗаменить(Строка(ПланыВидовХарактеристик.ТипыЗадолженности.Пени.Код), " ", "_")];
				стр.Составляющая1 = Строка[Имя + СтрЗаменить(Строка(ПланыВидовХарактеристик.ТипыЗадолженности.Составляющая1.Код), " ", "_")];
				стр.Составляющая2 = Строка[Имя + СтрЗаменить(Строка(ПланыВидовХарактеристик.ТипыЗадолженности.Составляющая2.Код), " ", "_")];
				стр.Составляющая3 = Строка[Имя + СтрЗаменить(Строка(ПланыВидовХарактеристик.ТипыЗадолженности.Составляющая3.Код), " ", "_")];
				стр.Составляющая4 = Строка[Имя + СтрЗаменить(Строка(ПланыВидовХарактеристик.ТипыЗадолженности.Составляющая4.Код), " ", "_")];
				стр.Составляющая5 = Строка[Имя + СтрЗаменить(Строка(ПланыВидовХарактеристик.ТипыЗадолженности.Составляющая5.Код), " ", "_")];
				стр.Составляющая6 = Строка[Имя + СтрЗаменить(Строка(ПланыВидовХарактеристик.ТипыЗадолженности.Составляющая6.Код), " ", "_")];
				стр.Составляющая7 = Строка[Имя + СтрЗаменить(Строка(ПланыВидовХарактеристик.ТипыЗадолженности.Составляющая7.Код), " ", "_")];
				стр.Составляющая8 = Строка[Имя + СтрЗаменить(Строка(ПланыВидовХарактеристик.ТипыЗадолженности.Составляющая8.Код), " ", "_")];
			КонецЕсли;
		КонецЦикла;
		Если Документ.Объекты.Количество() > 0 Тогда
			Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередатьСотрудникам(тзДанные) Экспорт
	ВыполнитьПередачу(тзДанные, "СсылкаДО", "СозданныйОбъектДО", "ИзмененныйОбъектДО", Перечисления.ВидыНазначенийСвойств.ДолговыеОбязательства, Справочники.ДолговыеОбязательства);
	ВыполнитьПередачу(тзДанные, "СсылкаДоговор", "СозданныйОбъектДоговор", "ИзмененныйОбъектДоговор",Перечисления.ВидыНазначенийСвойств.ДоговорыКонтрагентов, Справочники.ДоговорыКонтрагентов);
	ВыполнитьПередачу(тзДанные, "СсылкаДолжник", "СозданныйОбъектДолжник", "ИзмененныйОбъектДолжник",Перечисления.ВидыНазначенийСвойств.Должники, Справочники.Контрагенты);
	ВыполнитьПередачу(тзДанные, "СсылкаКонтрагент", "СозданныйОбъектКонтрагент", "ИзмененныйОбъектКонтрагент",Перечисления.ВидыНазначенийСвойств.Контрагенты, Справочники.Контрагенты);
	ВыполнитьПередачу(тзДанные, "СсылкаКредитор", "СозданныйОбъектКредитор", "ИзмененныйОбъектКредитор",Перечисления.ВидыНазначенийСвойств.Кредиторы, Справочники.Контрагенты);
	ВыполнитьПередачу(тзДанные, "СсылкаУ", "СозданныйОбъектУ", "ИзмененныйОбъектУ",Перечисления.ВидыНазначенийСвойств.Услуги, Справочники.УслугиПоДоговору);
	ВыполнитьПередачу(тзДанные, "СсылкаИД", "СозданныйОбъектИД", "ИзмененныйОбъектИД",Перечисления.ВидыНазначенийСвойств.ИсполнительныеДокументы, Справочники.ИсполнительныеДокументы);
	ВыполнитьПередачу(тзДанные, "СсылкаЗ", "СозданныйОбъектЗ", "ИзмененныйОбъектЗ",Перечисления.ВидыНазначенийСвойств.Залоги, Справочники.Залоги);	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПередачу(тзДанные, ИмяРеквизита, ИмяС, ИмяИ, Назначение, СправочникМенеджер) Экспорт
	Отбор = Новый Структура;
	Отбор.Вставить("Назначение", Назначение);
	Отбор.Вставить("ВидРеквизита", Перечисления.ВидыРеквизитов.ОтветственныйСотрудник);
	ВидыОтветственных = ЭтотОбъект.НастройкаСоответствий.НайтиСтроки(Отбор);
	Для Каждого Ответственный из ВидыОтветственных Цикл

		Имя = СтрЗаменить(Строка(Назначение)," ", "") + "_" + СтрЗаменить(Строка(Перечисления.ВидыРеквизитов.ОтветственныйСотрудник), " ", "") + "_" + СтрЗаменить(Строка(Ответственный.КодСвойства), " ", "_");
		
		Для Каждого Строка из тзДанные Цикл
			Если (Строка[ИмяС] ИЛИ Строка[ИмяИ]) И Строка[ИмяРеквизита] <> СправочникМенеджер.ПустаяСсылка() И Строка[Имя] <> Справочники.Пользователи.ПустаяСсылка() Тогда
				Документ = Документы.АктПередачи.СоздатьДокумент();
				Документ.Организация = ЭтотОбъект.Организация;
				Документ.Автор = ЭтотОбъект.Автор;
				Документ.Дата = ТекущаяДатаСеанса();
				Документ.ТипСотрудникаПринимающего = ПланыВидовХарактеристик.ТипыСотрудников.НайтиПоКоду(Ответственный.КодСвойства);
				Документ.СотрудникПринимающий = Строка[Имя];
				Документ.ПодразделениеПринимающее = Документ.СотрудникПринимающий.Подразделение;
				стр = Документ.Объекты.Добавить();
				стр.Объект = Строка[ИмяРеквизита];
				Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры
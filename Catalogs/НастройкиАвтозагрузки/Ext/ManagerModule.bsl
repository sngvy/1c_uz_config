
Функция Используемые() Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	НастройкиАвтозагрузки.Ссылка КАК Ссылка,
	                      |	НастройкиАвтозагрузки.Организация КАК Организация,
	                      |	НастройкиАвтозагрузки.Автор КАК Автор,
	                      |	НастройкиАвтозагрузки.НастройкаСоответствий КАК НастройкаСоответствий,
	                      |	НастройкиАвтозагрузки.КаталогФайловДляОбработки КАК КаталогФайловДляОбработки,
	                      |	НастройкиАвтозагрузки.КаталогПеремещенныхФайлов КАК КаталогПеремещенныхФайлов,
	                      |	НастройкиАвтозагрузки.КаталогОшибочныхФайлов КАК КаталогОшибочныхФайлов,
	                      |	НастройкиАвтозагрузки.ОбновлятьРанееЗаписанные КАК ОбновлятьРанееЗаписанные
	                      |ИЗ
	                      |	Справочник.НастройкиАвтозагрузки КАК НастройкиАвтозагрузки
	                      |ГДЕ
	                      |	НастройкиАвтозагрузки.ПометкаУдаления = ЛОЖЬ
	                      |	И НастройкиАвтозагрузки.Используется = ИСТИНА
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	НастройкиАвтозагрузки.Приоритет");
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Возврат Результат;

КонецФункции // ()

Функция МаскиРеестров() Экспорт

	МаскаРеестров = Новый Массив(3);
	МаскаРеестров[0] = "*.xls";
	МаскаРеестров[1] =  "*.xlsx"; 
	МаскаРеестров[2] = "*.ods";
	
	Возврат МаскаРеестров;

КонецФункции // ()

Функция НайтиРеестры(КаталогФайловДляОбработки, Маска) Экспорт

	Возврат НайтиФайлы(КаталогФайловДляОбработки, Маска, Истина);

КонецФункции // ()

Функция ПрочитатьРеестрВТабличныйДокумент(Реестр) Экспорт

	ДанныеФайла = Новый Структура;
	ДанныеФайла.Вставить("Расширение", Реестр.Расширение);
	
	ДвоичныеДанные = Новый ДвоичныеДанные(Реестр.ПолноеИмя);
	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	ДанныеФайла.Вставить("АдресХранилища", АдресХранилища);
	
	Ответ = Новый Структура;
	Ответ.Вставить("Результат", Истина);
	Ответ.Вставить("Таблица", Неопределено);
	
	Попытка
	
		ПолеИсходнойТаблицы = УправлениеЗагрузкойСервер.ПрочитатьФайлВТабличныйДокумент(
			ДанныеФайла
		);
		
		Ответ["Таблица"] = ПолеИсходнойТаблицы;
	
	Исключение
		Ответ["Результат"] = Ложь;
		ОписаниеОшибки = УправленияСообщениями.СформироватьТекстОшибки(
			ИнформацияОбОшибке(),
			"Не удалось прочитать файл"
		);
		
		Ответ["Ошибка"] = ОписаниеОшибки["Выражение"];
		Ответ["СтекОшибки"] = ОписаниеОшибки["Стек"];
	КонецПопытки;
	
	Возврат Ответ;

КонецФункции // ()

Функция ОбщиеНастройки(НастройкаСоответствий, Источник) Экспорт

	Менеджер = МенеджерСоответствий(НастройкаСоответствий);
	Данные = Менеджер.ОбщиеСведения(НастройкаСоответствий);
	ЗаполнитьЗначенияСвойств(Данные, Источник);
	
	Возврат Данные;

КонецФункции // ()

Процедура ОбработатьНастройку(НастройкаСоответствий, НастройкаЗагрузки, ТабличныйДокумент) Экспорт

	Менеджер = МенеджерСоответствий(НастройкаСоответствий);
	Менеджер.ОбработатьНастройку(
		НастройкаСоответствий,
		НастройкаЗагрузки,
		ТабличныйДокумент
	);

КонецПроцедуры

Функция ОбработатьОшибку(НастройкаСоответствий, ИнформацияОбОшибке) Экспорт

	Менеджер = МенеджерСоответствий(НастройкаСоответствий);
	Возврат Менеджер.ОбработатьОшибку(ИнформацияОбОшибке);

КонецФункции // ()


#Область Техническая

Функция МенеджерСоответствий(НастройкаСоответствий)

	ИмяСоответствия = НастройкаСоответствий.Метаданные().Имя;
	Возврат Справочники[ИмяСоответствия];

КонецФункции // ()


#КонецОбласти

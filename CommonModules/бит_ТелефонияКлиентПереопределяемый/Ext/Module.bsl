///////////////////////////////////////////////////////////////////////////////
// Общий клиентский модуль телефонии БИТ
// Содержит функции, реализация которых зависит от конфигурации.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// === УТ 11 ===

Процедура ОткрытьФормуДокументаСобытие(ссылкаДокумент) ЭКСПОРТ
	Если ссылкаДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	параметрыОткрытияФормы = Новый Структура("Ключ", ссылкаДокумент);
	формаДокумента = ПолучитьФорму("Задача.Мероприятие.ФормаОбъекта", параметрыОткрытияФормы);
	формаДокумента.Элементы.ГруппаЗаписьРазговора.Видимость = Истина;
	Если ФормаДокумента.Объект.ТипМероприятия = ПредопределенноеЗначение("Справочник.ТипыМероприятий.ТелефонныйЗвонокВходящий") И НЕ ЗначениеЗаполнено(ФормаДокумента.Объект.Объект) Тогда
		// Заглушка для ручного добавления номеров
		// ФормаДокумента.Элементы.ГруппаНеизвестныйНомер.Видимость = Истина;
		//
	КонецЕсли;
	//Чуров
	ОткрытьФорму(формаДокумента);
	//формаДокумента.Открыть();

	Оповестить("ИзменениеПредметаВзаимодействий"); // для отображения в журнале взаимодействий
КонецПроцедуры

Процедура ОткрытьКарточкуКлиента(Контрагент) ЭКСПОРТ
	форма = Неопределено;
	типКонтакта = ТипЗнч(контрагент);
	парам = Новый Структура("Ключ", контрагент);
    //
	Если типКонтакта = Тип("СправочникСсылка.Контрагенты") Тогда
		форма = ПолучитьФорму("Справочник.Контрагенты.ФормаОбъекта", парам);
	ИначеЕсли типКонтакта = Тип("СправочникСсылка.КонтактныеЛицаПоДолжнику") Тогда
		форма = ПолучитьФорму("Справочник.КонтактныеЛицаПоДолжнику.ФормаОбъекта", парам);
	ИначеЕсли типКонтакта = Тип("Строка") Тогда
		форма = Неопределено;
	КонецЕсли;
	//
	Если форма <> Неопределено Тогда
		//Чуров
		ОткрытьФорму(форма);
		//форма.Открыть();
	Иначе
		Предупреждение("Номер неизвестен");
	КонецЕсли;
КонецПроцедуры


Процедура СоздатьНовогоКонтрагента(стрНомер) ЭКСПОРТ
	флагПомощникСоздания = Истина;
	стрИмяСправочника = бит_ТелефонияСерверПереопределяемый.ПолучитьИмяСправочникаКонтрагентов();
	парамОткр = Неопределено;
	Если флагПомощникСоздания Тогда
		парамОткр = Новый Структура();
		парамОткр.Вставить("РежимВыбора", Истина);
	КонецЕсли;
	форма = ПолучитьФорму("Справочник." + стрИмяСправочника + ".ФормаОбъекта", парамОткр);
	парам = Новый Структура();
	парам.Вставить("Номер", стрНомер);
	//Если флагПомощникСоздания Тогда
		//форма.ТелефонПартнера = стрНомер;
	//Иначе
		парам.Вставить("Форма", форма);	// циклическая ссылка!
	//КонецЕсли;
	ОткрытьМодальноФормуВнутр(форма, "СоздатьНовогоКонтрагентаЗавершение", парам, Истина);
КонецПроцедуры

Процедура СоздатьНовогоКонтрагентаЗавершение(Результат, Параметры) ЭКСПОРТ
	контрагентСсылка = Результат;
	Если ЗначениеЗаполнено(контрагентСсылка)  Тогда
		ЗадатьНомерТелефонаКонтрагента(контрагентСсылка, Параметры.Номер);
	Иначе
		форма = Параметры.Форма;
		контрагент = форма.Объект;
		контрагентСсылка = контрагент.Ссылка;
		Параметры.Форма = Неопределено;	// разрушение циклической ссылки
		Если ЗначениеЗаполнено(контрагентСсылка)  Тогда
			ЗадатьНомерТелефонаКонтрагента(контрагентСсылка, Параметры.Номер);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОткрытьМодальноФормуВыбораКонтрагента(ИмяПроцедурыОповещения, ПараметрыПроцедурыОповещения)
	форма = ПолучитьФорму("Справочник." + бит_ТелефонияСерверПереопределяемый.ПолучитьИмяСправочникаКонтрагентов() + ".ФормаВыбора");
	ОткрытьМодальноФормуВнутр(форма, ИмяПроцедурыОповещения, ПараметрыПроцедурыОповещения, Истина);
КонецПроцедуры

// Выводит форму выбора контрагента и задает ему номер телефона.
//
// Параметры:
//  стрНомер - Строка - номер телефона.
//
Функция ВыбратьКонтрагентаЗадатьНомер(стрНомер) ЭКСПОРТ
	ОткрытьМодальноФормуВыбораКонтрагента("ВыбратьКонтрагентаЗадатьНомерЗавершение", стрНомер);
КонецФункции

Процедура ВыбратьКонтрагентаЗадатьНомерЗавершение(Результат, Параметр) ЭКСПОРТ
	Если ЗначениеЗаполнено(Результат) Тогда
		ЗадатьНомерТелефонаКонтрагента(Результат, Параметр);
	КонецЕсли;
КонецПроцедуры

// Задает номер телефона контрагенту, с выбором вида телефона.
//
// Параметры:
//  Контрагент - ссылка на контрагента,
//  НомерТел - Строка - номер телефона.
//
Процедура ЗадатьНомерТелефонаКонтрагента(Контрагент, НомерТел) ЭКСПОРТ
	Если Контрагент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	//
	массВидовКонтактнойИнформации = бит_ТелефонияСерверПереопределяемый.ПолучитьВидыКонтактнойИнформацииКонтрагента();
	видыКонтактнойИнформации = массВидовКонтактнойИнформации;
	ПараметрыОповещенияКонт = Новый Структура();
	ПараметрыОповещенияКонт.Вставить("Контрагент", Контрагент);
	ПараметрыОповещенияКонт.Вставить("Номер", НомерТел);
	Если видыКонтактнойИнформации.Количество() = 1 Тогда
		ЗадатьНомерТелефонаКонтрагентаПослеВыбораВидаКонтактнойИнформации(видыКонтактнойИнформации[0], ПараметрыОповещенияКонт);
	Иначе
		оповещ = Новый ОписаниеОповещения("ЗадатьНомерТелефонаКонтрагентаПослеВыбораВидаКонтактнойИнформации", бит_ТелефонияКлиентПереопределяемый, ПараметрыОповещенияКонт);
		видыКонтактнойИнформации.ПоказатьВыборЭлемента(оповещ, "Выберите вид телефона");
	КонецЕсли;
КонецПроцедуры

Процедура ЗадатьНомерТелефонаКонтрагентаПослеВыбораВидаКонтактнойИнформации(ВидКонтактнойИнформации, Параметр) ЭКСПОРТ
	Если ВидКонтактнойИнформации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	видКонтИнф	= ВидКонтактнойИнформации.Значение;
	Контрагент	= Параметр.Контрагент;
	НомерТел	= Параметр.Номер;
	текущийНомерТелефона = бит_ТелефонияСерверПереопределяемый.НайтиНомерКонтрагента(Контрагент, видКонтИнф);
	//
	ПараметрыВопроса = Новый Структура("Контрагент,Номер");
	ЗаполнитьЗначенияСвойств(ПараметрыВопроса, Параметр);
	ПараметрыВопроса.Вставить("ВидКонтактнойИнформации", видКонтИнф);
	//
	//Если ЗначениеЗаполнено(текущийНомерТелефона) Тогда
	//	ПоказатьВопрос(Новый ОписаниеОповещения("ЗадатьНомерТелефонаКонтрагентаЗавершение", бит_ТелефонияКлиентПереопределяемый, ПараметрыВопроса),
	//		"Контрагент " + Строка(Контрагент) + " уже имеет " + Строка(видКонтИнф) + " " + текущийНомерТелефона + ". Заменить?",
	//		РежимДиалогаВопрос.ДаНет);
	//Иначе
		ЗадатьНомерТелефонаКонтрагентаЗавершение(КодВозвратаДиалога.Да, ПараметрыВопроса);
	//КонецЕсли;
КонецПроцедуры

Процедура ЗадатьНомерТелефонаКонтрагентаЗавершение(Заменить, Параметр) ЭКСПОРТ
	видКонтИнф	= Параметр.ВидКонтактнойИнформации;
	Контрагент	= Параметр.Контрагент;
	НомерТел	= Параметр.Номер;
	//Если Заменить Тогда
	//	бит_телефонияСерверПереопределяемый.ЗаписатьНомерТелефонаКонтрагентаЗамена(Контрагент, видКонтИнф, НомерТел);
	//Иначе
		бит_ТелефонияСерверПереопределяемый.ЗаписатьНомерТелефонаКонтрагента(Контрагент, видКонтИнф, НомерТел);
//	КонецЕсли;
	ОткрытьКарточкуКлиента(контрагент);
КонецПроцедуры

Процедура ОткрытьДокументыПродаж(КонтрагентСсылка) ЭКСПОРТ
	ОткрытьФормуСпискаДокументаСФильтромПоКонтрагенту("РеализацияТоваровУслуг", КонтрагентСсылка);
КонецПроцедуры

Процедура ОткрытьДокументыПоступления(КонтрагентСсылка) ЭКСПОРТ
	ОткрытьФормуСпискаДокументаСФильтромПоКонтрагенту("ПоступлениеТоваровУслуг", КонтрагентСсылка);
КонецПроцедуры

Процедура ОткрытьЗаказыПокупателя(КонтрагентСсылка) ЭКСПОРТ
	ОткрытьФормуСпискаДокументаСФильтромПоКонтрагенту("ЗаказКлиента", КонтрагентСсылка);
КонецПроцедуры

Процедура ОткрытьЗаказыПоставщику(КонтрагентСсылка) ЭКСПОРТ
	ОткрытьФормуСпискаДокументаСФильтромПоКонтрагенту("ЗаказПоставщику", КонтрагентСсылка);
КонецПроцедуры

Процедура ОткрытьСчетаНаОплатуПокупателя(КонтрагентСсылка) ЭКСПОРТ
	ОткрытьФормуСпискаДокументаСФильтромПоКонтрагенту("СчетНаОплатуКлиенту", КонтрагентСсылка);
КонецПроцедуры

Процедура ОткрытьФормуСпискаДокументаСФильтромПоКонтрагенту(стрИмяДокумента, КонтрагентСсылка)
	парамКонтрагент = Новый Структура("Партнер", КонтрагентСсылка);
	парам = Новый Структура("Отбор", парамКонтрагент);
	форма = ПолучитьФорму("Документ." + стрИмяДокумента + ".ФормаСписка", парам);
	форма.Открыть();
КонецПроцедуры

//
// вызовы с блокировкой интерфейса
//
Процедура ОповещениеПриЗавершенииОперации(Результат, Параметры) ЭКСПОРТ
	Если ЗначениеЗаполнено(Параметры) Тогда
		Если ЗначениеЗаполнено(Параметры.ИмяСобытияОповещения) Тогда
			ПараметрСобытия = Новый Структура;
			ПараметрСобытия.Вставить("Результат", Результат);
			ПараметрСобытия.Вставить("ПараметрОповещения", Параметры.ПараметрОповещения);
			Оповестить(Параметры.ИмяСобытияОповещения, ПараметрСобытия);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОповещениеПриЗавершенииПредупреждения(Параметры) ЭКСПОРТ
	ОповещениеПриЗавершенииОперации(Неопределено, Параметры);
КонецПроцедуры

Функция СформироватьПараметрыОповещ(ИмяСобытияОповещения="", ПараметрОповещения=Неопределено)
	параметрыОповещ = Неопределено;
	Если ЗначениеЗаполнено(ИмяСобытияОповещения) Тогда
		параметрыОповещ = Новый Структура;
		параметрыОповещ.Вставить("ИмяСобытияОповещения", ИмяСобытияОповещения);
		параметрыОповещ.Вставить("ПараметрОповещения", ПараметрОповещения);
	КонецЕсли;
	Возврат параметрыОповещ;
КонецФункции

Функция ИмяОперацииОповещенияВнутр()
	Возврат "ОповещениеПриЗавершенииОперации";
КонецФункции

Функция СформироватьОписаниеОповещ(ИмяСобытияОповещения="", ПараметрОповещения=Неопределено)
	оповещ = Новый ОписаниеОповещения(ИмяОперацииОповещенияВнутр(), бит_ТелефонияКлиентПереопределяемый, СформироватьПараметрыОповещ(ИмяСобытияОповещения, ПараметрОповещения));
	Возврат оповещ;
КонецФункции

Процедура ОткрытьМодальноФормуВнутр(форма, ИмяПроцедурыОповещения, ПараметрыПроцедурыОповещения, БлокироватьВесьИнтерфейс=Ложь)
	форма.РежимОткрытияОкна = ? (БлокироватьВесьИнтерфейс, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	форма.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(ИмяПроцедурыОповещения, бит_ТелефонияКлиентПереопределяемый, ПараметрыПроцедурыОповещения);
	форма.Открыть();
КонецПроцедуры

Процедура ОткрытьФормуСБлокировкойВладельца(форма, ИмяСобытияОповещения="", ПараметрОповещения=Неопределено, БлокироватьВесьИнтерфейс=Ложь) ЭКСПОРТ
	ОткрытьМодальноФормуВнутр(форма,
		ИмяОперацииОповещенияВнутр(),
		СформироватьПараметрыОповещ(ИмяСобытияОповещения, ПараметрОповещения),
		БлокироватьВесьИнтерфейс);
КонецПроцедуры

Процедура ПоказПредупреждение(ТекстПредупреждения, Таймаут=0, Заголовок=Неопределено, ИмяСобытияОповещения="", ПараметрОповещения=Неопределено) ЭКСПОРТ
	оповещ = Новый ОписаниеОповещения("ОповещениеПриЗавершенииПредупреждения", бит_ТелефонияКлиентПереопределяемый, СформироватьПараметрыОповещ(ИмяСобытияОповещения, ПараметрОповещения));
	ПоказатьПредупреждение(оповещ, ТекстПредупреждения, Таймаут, Заголовок);
КонецПроцедуры

Процедура ПоказВопрос(ТекстВопроса, Кнопки, Таймаут=0, КнопкаПоУмолчанию, Заголовок, ИмяСобытияОповещения="", ПараметрОповещения=Неопределено) ЭКСПОРТ
	ПоказатьВопрос(СформироватьОписаниеОповещ(ИмяСобытияОповещения, ПараметрОповещения), ТекстВопроса, Кнопки, Таймаут, КнопкаПоУмолчанию, Заголовок);
КонецПроцедуры

Процедура ПоказВводСтроки(СтрокаВвод, Подсказка, ИмяСобытияОповещения="", ПараметрОповещения=Неопределено) ЭКСПОРТ
	ПоказатьВводСтроки(СформироватьОписаниеОповещ(ИмяСобытияОповещения, ПараметрОповещения), СтрокаВвод, Подсказка);
КонецПроцедуры

Процедура ПоказВыборФайла(диалог, ИмяСобытияОповещения="", ПараметрОповещения=Неопределено) ЭКСПОРТ
	диалог.Показать(СформироватьОписаниеОповещ(ИмяСобытияОповещения, ПараметрОповещения));
КонецПроцедуры

Процедура ПоказЗначение(Значение, ИмяСобытияОповещения="", ПараметрОповещения=Неопределено) ЭКСПОРТ
	ПоказатьЗначение(СформироватьОписаниеОповещ(ИмяСобытияОповещения, ПараметрОповещения), Значение);
КонецПроцедуры

Процедура ЗапускПрограммы(Путь, ИмяСобытияОповещения="", ПараметрОповещения=Неопределено) ЭКСПОРТ
	НачатьЗапускПриложения(СформироватьОписаниеОповещ(ИмяСобытияОповещения, ПараметрОповещения), Путь);
КонецПроцедуры

//
Процедура УдалениеИсторииЗвонковКонтрагентаЗавершение(Результат, Параметры) ЭКСПОРТ
	контрагент = Результат;
	Если ЗначениеЗаполнено(контрагент) Тогда
		записейУдалено = бит_ТелефонияСервер.УдалитьИсториюЗвонковКонтрагента(контрагент);
		бит_ТелефонияКлиент.ВывестиСообщение("Удалено записей: " + Строка(записейУдалено));
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьИсториюЗвонковКонтрагента() ЭКСПОРТ
	ОткрытьМодальноФормуВыбораКонтрагента("УдалениеИсторииЗвонковКонтрагентаЗавершение", Неопределено);
КонецПроцедуры

// Выбор номера телефона контрагента или контактного лица, если они имеют несколько номеров,
//  и оповещение формы выбранным номером.
//
// Параметры:
//  Контакт - ссылка на контрагента, контактное лицо, документ взаимодействия, или Строка,
//  ИмяФормы - Строка, имя формы для оповещения,
//  ИмяСобытияОповещения - Строка, имя события оповещения.
//
Процедура ВыбратьНомерКонтактаИОповестить(Контакт, ИмяФормы, ИмяСобытияОповещения) ЭКСПОРТ
	массивНомераТелефонов = Новый Массив;
	//
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка." + бит_ТелефонияСерверПереопределяемый.ПолучитьИмяСправочникаКонтрагентов()) Тогда
		массивНомераТелефонов = бит_ТелефонияСерверПереопределяемый.НайтиНомераКонтрагента(Контакт);
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка." + бит_ТелефонияСерверПереопределяемый.ПолучитьИмяСправочникаКонтактныхЛиц()) Тогда
		массивНомераТелефонов = бит_ТелефонияСерверПереопределяемый.НайтиНомераКонтактногоЛица(Контакт);
	ИначеЕсли ТипЗнч(Контакт) = Тип("ДокументСсылка." + бит_ТелефонияСерверПереопределяемый.ПолучитьИмяДокументаСобытие()) Тогда
		стрСообщениеОбОшибке = "";
		контактСобытия = бит_ТелефонияСерверПереопределяемый.ПолучитьКонтактСобытия(Контакт, стрСообщениеОбОшибке);
		Если ЗначениеЗаполнено(стрСообщениеОбОшибке) Тогда
			бит_ТелефонияКлиент.ВывестиСообщение(стрСообщениеОбОшибке);
		Иначе
			ВыбратьНомерКонтактаИОповестить(контактСобытия, ИмяФормы, ИмяСобытияОповещения);
		КонецЕсли;
		Возврат;
	ИначеЕсли ТипЗнч(Контакт) = Тип("Строка") Тогда
		массивНомераТелефонов.Добавить(Контакт);
	КонецЕсли;
	//
	ПараметрыОповещенияНом = Новый Структура();
	ПараметрыОповещенияНом.Вставить("ИмяФормы", ИмяФормы);
	ПараметрыОповещенияНом.Вставить("ИмяСобытияОповещения", ИмяСобытияОповещения);
	//
	списокНомеровТелефонов = Новый СписокЗначений;
	списокНомеровТелефонов.ЗагрузитьЗначения(массивНомераТелефонов);
	Если массивНомераТелефонов.Количество() = 1 Тогда
		ВыбратьНомерКонтактаИОповеститьЗавершение(списокНомеровТелефонов[0], ПараметрыОповещенияНом);
	ИначеЕсли массивНомераТелефонов.Количество() > 1 Тогда
		оповещ = Новый ОписаниеОповещения("ВыбратьНомерКонтактаИОповеститьЗавершение", бит_ТелефонияКлиентПереопределяемый, ПараметрыОповещенияНом);
		списокНомеровТелефонов.ПоказатьВыборЭлемента(оповещ, "Выберите номер");
	КонецЕсли;
КонецПроцедуры

Процедура ВыбратьНомерКонтактаИОповеститьЗавершение(выбранныйЭлементСпискаНомеров, Параметры) ЭКСПОРТ
	Если выбранныйЭлементСпискаНомеров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НомерВызова = выбранныйЭлементСпискаНомеров.Значение;
	бит_ТелефонияКлиент.ОткрытьФормуВыполнитьДействие(Параметры.ИмяФормы, Параметры.ИмяСобытияОповещения, НомерВызова);
КонецПроцедуры

//
// Установка внешней компоненты.
//
Процедура УстановкаКомпонентыТелефонии(Знач стрВК, стрИмяФайлаСокр, Параметры, флагОбновлениеПутиВК, ИмяПроцедурыОповещения)

	стрПолноеИмяФайлаВК = бит_ТелефонияКлиент.УдалениеФайлаВнешнейКомпонентыТелефонии(стрИмяФайлаСокр);
	
	Если флагОбновлениеПутиВК Тогда
		Параметры.Вставить("МакетВК", стрПолноеИмяФайлаВК);
	КонецЕсли;
	
	оповещ = Новый ОписаниеОповещения(ИмяПроцедурыОповещения, бит_ТелефонияКлиентПереопределяемый, Параметры);
	НачатьУстановкуВнешнейКомпоненты(оповещ, стрВК);
	
КонецПроцедуры

Процедура УстановкаКомпонентыТелефонииПроверкаВерсии(Параметры) ЭКСПОРТ
	ОбщийМодуль = Параметры.ОбщийМодуль;
	ОбщийМодуль.УстановитьВерсиюВнешнейКомпонентыТекущегоПользователя(Параметры.ВерсияКомпонентыОжидаемая);
	ПодключениеВнешнейКомпонентыПослеПроверкиВерсииВКПользователя(Параметры);
КонецПроцедуры

Процедура УстановкаКомпонентыТелефонииПроверкаПодключенияВК(Параметры) ЭКСПОРТ
	Подключен = ПодключитьВнешнююКомпоненту(Параметры.МакетВК, Параметры.ИмяВнешнейКомпоненты, ТипВнешнейКомпоненты.Native);
	Если НЕ Подключен Тогда 
		бит_ТелефонияКлиент.ВывестиСообщение(Параметры.ЗаголовокСообщения + " - Ошибка! Не удалось подключить внешнюю компоненту " + Параметры.ИмяФайлаВК + ".");
	Иначе
		ПодключениеВнешнейКомпонентыЗавершение(Параметры);
	КонецЕсли;
КонецПроцедуры

// Подключение внешней компоненты
Процедура ПодключениеВнешнейКомпоненты(стрМакетВК, стрИмяФайлаВК, стрИмяМодуля, стрИмяКлассаВК, стрЗаголовокСообщения, ИмяСобытияОповещения, ПараметрОповещения=Неопределено) ЭКСПОРТ
	
	ОбщийМодуль = Вычислить(стрИмяМодуля);
	
	стрВерсияКомпонентыОжидаемая = ОбщийМодуль.ПолучитьВерсиюВнешнейКомпоненты();
	стрВерсияКомпонентыПользователя = ОбщийМодуль.ПолучитьВерсиюВнешнейКомпонентыТекущегоПользователя();
	
	допПараметры = Новый Структура();
	допПараметры.Вставить("ОбщийМодуль", ОбщийМодуль);
	допПараметры.Вставить("МакетВК", стрМакетВК);
	допПараметры.Вставить("ИмяФайлаВК", стрИмяФайлаВК);
	допПараметры.Вставить("ИмяКлассаВК", стрИмяКлассаВК);
	допПараметры.Вставить("ВерсияКомпонентыОжидаемая", стрВерсияКомпонентыОжидаемая);
	допПараметры.Вставить("ЗаголовокСообщения", стрЗаголовокСообщения);
	допПараметры.Вставить("ИмяСобытияОповещения", ИмяСобытияОповещения);
	допПараметры.Вставить("ПараметрОповещения", ПараметрОповещения);
	
	стрСимволИмя = "BIT_" + стрИмяКлассаВК;
	допПараметры.Вставить("ИмяВнешнейКомпоненты", стрСимволИмя);
	
	Если стрВерсияКомпонентыОжидаемая <> стрВерсияКомпонентыПользователя Тогда
		УстановкаКомпонентыТелефонии(стрМакетВК, стрИмяФайлаВК, допПараметры, Ложь, "УстановкаКомпонентыТелефонииПроверкаВерсии");
	Иначе
		ПодключениеВнешнейКомпонентыПослеПроверкиВерсииВКПользователя(допПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодключениеВнешнейКомпонентыПослеПроверкиВерсииВКПользователя(Параметры)
	
	Подключен = ПодключитьВнешнююКомпоненту(Параметры.МакетВК, Параметры.ИмяВнешнейКомпоненты, ТипВнешнейКомпоненты.Native);
	Если НЕ Подключен Тогда 
		УстановкаКомпонентыТелефонии(Параметры.МакетВК, Параметры.ИмяФайлаВК, Параметры, Истина, "УстановкаКомпонентыТелефонииПроверкаПодключенияВК");
	Иначе
		ПодключениеВнешнейКомпонентыЗавершение(Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодключениеВнешнейКомпонентыЗавершение(Параметры)
	
	стрИмяТипаВК = "AddIn." + Параметры.ИмяВнешнейКомпоненты + "." + Параметры.ИмяКлассаВК;
	обВК = Новый (стрИмяТипаВК);
	
	Попытка
		стрВерсияКомпоненты = обВК.GetVersion();
		// Если версия отличается от ожидаемой, нужно заново установить внешнюю компоненту.
		Если стрВерсияКомпоненты <> Параметры.ВерсияКомпонентыОжидаемая Тогда
			бит_ТелефонияКлиент.ВывестиСообщение(Параметры.ЗаголовокСообщения + " - Ошибка! Неправильная версия внешней компоненты " + Параметры.ИмяФайлаВК + ". Перезапустите 1С для установки нужной версии.");
			Параметры.ОбщийМодуль.УстановитьВерсиюВнешнейКомпонентыТекущегоПользователя(стрВерсияКомпоненты);
		Иначе
			стрРазрядностьПлатформы = ? (бит_ТелефонияКлиент.Клиент64бит(), "x64", "x86");
			// ПоказатьОповещениеПользователя(Параметры.ЗаголовокСообщения, , "Версия внешней компоненты " + стрВерсияКомпоненты + " " + стрРазрядностьПлатформы);
			ПоказатьОповещениеПользователя("БИТ.Phone",,"Вы на линии",БиблиотекаКартинок.NC_Онлайн);
			Параметры.ОбщийМодуль.УстановитьВерсиюВнешнейКомпонентыТекущегоПользователя(Параметры.ВерсияКомпонентыОжидаемая);
			ОповещениеПриЗавершенииОперации(обВК, Параметры);
		КонецЕсли;
	Исключение
		бит_ТелефонияКлиент.ВывестиСообщение(Параметры.ЗаголовокСообщения + " - Ошибка! Не удалось получить версию внешней компоненты " + Параметры.ИмяФайлаВК + ". " + ОписаниеОшибки());
		Параметры.ОбщийМодуль.УстановитьВерсиюВнешнейКомпонентыТекущегоПользователя("");
	КонецПопытки;
	
КонецПроцедуры
	
//
Функция ПроверкаВерсийКонф(массВерсия, массМинВерсия)
	проверкаВерсияБольшеРавна = Ложь;
	Для й=0 По 2 Цикл
		Если (массВерсия[й] > массМинВерсия[й]) Тогда
			проверкаВерсияБольшеРавна = Истина;
			Прервать;
		ИначеЕсли (массВерсия[й] < массМинВерсия[й]) Тогда
			проверкаВерсияБольшеРавна = Ложь;
			Прервать;
		Иначе
			// версии равны,нужно проверять дальше
			проверкаВерсияБольшеРавна = Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат проверкаВерсияБольшеРавна;
КонецФункции

Функция ПроверкаНовыйИнтерфейсТакси() ЭКСПОРТ
	минВерсия = Новый Массив();
	минВерсия.Добавить(8);
	минВерсия.Добавить(3);
	минВерсия.Добавить(8);
	
	массВерсПлатф = бит_ТелефонияКлиент.ПолучитьВерсиюПлатформы();
	
	// проверка версии платформы
	платформаБольшеРавна838 = ПроверкаВерсийКонф(массВерсПлатф, минВерсия);

	Если НЕ платформаБольшеРавна838 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// проверка режима совместимости
	массРежимСовм = бит_ТелефонияСервер.ПолучитьРежимСовместимостиКонфигурации();
	
	проверитьВариантИнтерфейсаКл = Ложь;
	
	Если (массРежимСовм = Неопределено) Тогда
		проверитьВариантИнтерфейсаКл = Истина;
	Иначе
		проверитьВариантИнтерфейсаКл = ПроверкаВерсийКонф(массРежимСовм, минВерсия);
	КонецЕсли;
	
	вариантКлТакси = Ложь;
	
	Если проверитьВариантИнтерфейсаКл Тогда
		вариантКлТакси = (ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Такси);
	КонецЕсли;
	
	Возврат вариантКлТакси;
КонецФункции

Функция ЗадатьНомерКонтрагентаМер(стрНомер, контрагент) ЭКСПОРТ
	стрИмяСправочника = бит_ТелефонияСерверПереопределяемый.ПолучитьИмяСправочникаКонтрагентов();
	видыТелефонов = бит_ТелефонияСерверПереопределяемый.ПолучитьВидыТелефонныхНомеров();

	элементВидовТелефонов = видыТелефонов.ВыбратьЭлемент("Выберите вид телефона");
	Если элементВидовТелефонов = Неопределено Тогда
		//видТел = ПредопределенноеЗначение("Справочник.ВидыТелефонов.Мобильный");
	Иначе
		видТел = элементВидовТелефонов.Значение;	
		форма = ПолучитьФорму("Справочник." + стрИмяСправочника + ".Форма.ФормаВыбора");
	Контрагент = форма.ОткрытьМодально();
	Если ЗначениеЗаполнено(Контрагент) Тогда
		бит_ТелефонияСерверПереопределяемый.ЗадатьНомерТелефонаКонтрагентаМер(Контрагент, стрНомер, видТел);
	КонецЕсли;
	
	КонецЕсли;
	Возврат Контрагент;
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуМероприятия(ФормаМероприятия, стр) Экспорт
	Если ФормаМероприятия = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Окно Из ПолучитьОкна() Цикл
		Для Каждого СодержимоеОкна Из Окно.Содержимое Цикл
			Если ТипЗнч(СодержимоеОкна) = Тип("УправляемаяФорма")И СодержимоеОкна.КлючУникальности = ФормаМероприятия Тогда
				СодержимоеОкна.Объект.бтЗаписьРазговора = стр; 
				СодержимоеОкна.Элементы.ГруппаЗаписьРазговора.Видимость = Истина;
				ОткрытьФорму(СодержимоеОкна);
				Попытка
					СодержимоеОкна.Записать();
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	
	
	//Форма = ПолучитьФорму("Задача.Мероприятие.Форма.ФормаМероприятия", ,,ФормаМероприятия);
	//Форма.Объект.бтЗаписьРазговора = стр;
	//форма.Элементы.ГруппаЗаписьРазговора.Видимость = Истина;
	//ОткрытьФорму(Форма);
	//Попытка
	//	форма.Записать();
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//КонецПопытки;
			
	//Если Форма = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//Форма.Объект.бтЗаписьРазговора = стр;
	//форма.Элементы.ГруппаЗаписьРазговора.Видимость = Истина;
	//ОткрытьФорму(Форма);
	//Попытка
	//	форма.Записать();
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовогоКонтрагентаМер(стрНомер, контрагентссылка) ЭКСПОРТ
	стрИмяСправочника = бит_ТелефонияСерверПереопределяемый.ПолучитьИмяСправочникаКонтрагентов();
	видыТелефонов = бит_ТелефонияСерверПереопределяемый.ПолучитьВидыТелефонныхНомеров();
		
	элементВидовТелефонов = видыТелефонов.ВыбратьЭлемент("Выберите вид телефона");
	Если элементВидовТелефонов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	видТел = элементВидовТелефонов.Значение;

	
	форма = ПолучитьФорму("Справочник." + стрИмяСправочника + ".ФормаОбъекта", );
	//форма.ОткрытьМодально();
	контрагент = форма.Объект;
	
	контрагентСсылка = Форма.ОткрытьМодально();
	контрагентСсылка = Форма.Объект.Ссылка;
	Если ЗначениеЗаполнено(контрагентСсылка)  Тогда
		
		бит_ТелефонияСерверПереопределяемый.ЗадатьНомерТелефонаКонтрагентаМер(КонтрагентСсылка, стрНомер, видТел);
	КонецЕсли;
КонецПроцедуры
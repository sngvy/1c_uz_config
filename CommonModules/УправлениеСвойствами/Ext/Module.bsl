///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ФУНКЦИИ И ПРОЦЕДУРЫ

// Вызывается из обработчика ПриСозданииНаСервере формы объекта со свойствами
Процедура ПриСозданииНаСервере(Форма, Объект, ИмяЭлементаДляРазмещения) Экспорт	
	//Возврат;
	
	
	
	//////Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//////	НаборСвойствОбъекта = ПолучитьДоступныеНаборыСвойств(Объект.Ссылка);
	//////Иначе
	//////	ИмяТипа = ОбщегоНазначения.ВидОбъектаПоСсылке(Объект.Ссылка) + "Объект." + Объект.Ссылка.Метаданные().Имя;
	//////	НаборСвойствОбъекта = ПолучитьДоступныеНаборыСвойств(ДанныеФормыВЗначение(Объект, Тип(ИмяТипа)));
	//////КонецЕсли;	
	Если Объект.Ссылка.Метаданные() = Метаданные.Справочники.Контрагенты Тогда
		Если Объект.ЮрФизЛицо.Пустая() Тогда
			НаборСвойствОбъекта = Неопределено;
		Иначе
			//НаборСвойствОбъекта = Справочники.НаборыСвойств.НайтиПоНаименованию(Объект.ЮрФизЛицо);
			НаборСвойствОбъекта = Справочники.НаборыСвойств.НайтиПоКоду(Объект.ЮрФизЛицо.Код,,
					Справочники.НаборыСвойств.Справочник_Контрагенты);
		КонецЕсли;
				
	ИначеЕсли Объект.Ссылка.Метаданные() = Метаданные.Справочники.ДолговыеОбязательства Тогда
		Если Объект.ТипДолговогоОбязательства.Пустая() Тогда
			НаборСвойствОбъекта = Неопределено;
		Иначе
			НаборСвойствОбъекта = Справочники.НаборыСвойств.НайтиПоКоду(Объект.ТипДолговогоОбязательства.Код,,
					Справочники.НаборыСвойств.Справочник_ДолговыеОбязательства);
		КонецЕсли;
	КонецЕсли;
		
	// Создадим основные объекты на форме
	СоздатьОсновныеОбъектыФормы(Форма, ИмяЭлементаДляРазмещения, НаборСвойствОбъекта);
	
	// Если функциональной опцией использование доп.реквизитов отключено, то больше ничего не делаем
	Если Не Форма.__Свойства_ИспользоватьСвойства Тогда
		Возврат;
	КонецЕсли;
	
	//////// Получим набор свойств объекта
	//////Если НаборСвойствОбъекта = НеОпределено Тогда
	//////	НаборСвойствОбъекта = ПолучитьОсновнойНаборСвойствДляОбъекта(Объект.Ссылка);
	//////КонецЕсли;
	Форма.__Свойства_ОсновнойНабор = НаборСвойствОбъекта;
	
	// Создадим остальные реквизиты и разместим их на форме
	ЗаполнитьДополнительныеРеквизитыНаФорме(Форма, Объект, НаборСвойствОбъекта);	
КонецПроцедуры

// Вызывается из обработчика ПередЗаписьюНаСервере формы объекта со свойствами
Процедура ПередЗаписьюНаСервере(Форма, ТекущийОбъект) Экспорт	
	Если Форма.__Свойства_ИспользоватьСвойства Тогда
		// Перенесем значения доп.реквизитов из реквизитов форм в объект
		ПеренестиЗначенияСвойствИзРеквизитовФормы(Форма, ТекущийОбъект);
	КонецЕсли;	
КонецПроцедуры

// Обновить отображаемые данные на форме объекта со свойствами
Процедура ОбновитьЭлементыДополнительныхРеквизитов(Форма, Объект) Экспорт
	Если НЕ Форма.__Свойства_ИспользоватьСвойства Тогда
		Возврат;
	КонецЕсли;
	
	//////НаборСвойствОбъекта = ПолучитьДоступныеНаборыСвойств(Объект);
	Если Объект.Ссылка.Метаданные() = Метаданные.Справочники.Контрагенты Тогда
		Если Объект.ЮрФизЛицо.Пустая() Тогда
			НаборСвойствОбъекта = Неопределено;
		Иначе
			//НаборСвойствОбъекта = Справочники.НаборыСвойств.НайтиПоНаименованию(Объект.ЮрФизЛицо);
			НаборСвойствОбъекта = Справочники.НаборыСвойств.НайтиПоКоду(Объект.ЮрФизЛицо.Код,,
					Справочники.НаборыСвойств.Справочник_Контрагенты);
		КонецЕсли;
	КонецЕсли;
	Если Объект.Ссылка.Метаданные() = Метаданные.Справочники.ДолговыеОбязательства Тогда
		Если Объект.ТипДолговогоОбязательства.Пустая() Тогда
			НаборСвойствОбъекта = Неопределено;
		Иначе
			НаборСвойствОбъекта = Справочники.НаборыСвойств.НайтиПоКоду(Объект.ТипДолговогоОбязательства.Код,,
					Справочники.НаборыСвойств.Справочник_ДолговыеОбязательства);
		КонецЕсли;
	КонецЕсли;
	
	Форма.__Свойства_ОсновнойНабор = НаборСвойствОбъекта;	
	// Перенесем значения доп.реквизитов из реквизитов форм в объект
	ПеренестиЗначенияСвойствИзРеквизитовФормы(Форма, Объект);	
	// Создадим реквизиты и разместим их на форме
	ЗаполнитьДополнительныеРеквизитыНаФорме(Форма, Объект, НаборСвойствОбъекта)	
КонецПроцедуры

// Получить заполненную таблицу значений свойств объекта
Функция ПолучитьТаблицуЗначенийСвойств(ДополнительныеСвойстваОбъекта, Набор, ЭтоДополнительноеСведение) Экспорт	
	масСвойств = ДополнительныеСвойстваОбъекта.ВыгрузитьКолонку("Свойство");
	
	ТекстЗапроса = 
	//Запрос 1 - ВсеСвойстваНабора
	"ВЫБРАТЬ
	|	НаборыСвойствДополнительныеРеквизиты.Свойство КАК Свойство,
	|	НаборыСвойствДополнительныеРеквизиты.Свойство.ПорядковыйНомер КАК Порядок
	|ПОМЕСТИТЬ ВсеСвойстваНабора
	|ИЗ
	|	Справочник.НаборыСвойств.ДополнительныеРеквизиты КАК НаборыСвойствДополнительныеРеквизиты
	|ГДЕ	
	|	НаборыСвойствДополнительныеРеквизиты.Ссылка В(&Набор)
	|	И (НЕ НаборыСвойствДополнительныеРеквизиты.Ссылка.ПометкаУдаления)
	|	И (НЕ &ЭтоДополнительноеСведение)	
	|СГРУППИРОВАТЬ ПО
	|	НаборыСвойствДополнительныеРеквизиты.Свойство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НаборыСвойствДополнительныеСведения.Свойство,
	|	МИНИМУМ(НаборыСвойствДополнительныеСведения.НомерСтроки)
	|ИЗ
	|	Справочник.НаборыСвойств.ДополнительныеСведения КАК НаборыСвойствДополнительныеСведения
	|ГДЕ
	|	НаборыСвойствДополнительныеСведения.Ссылка В(&Набор)
	|	И (НЕ НаборыСвойствДополнительныеСведения.Ссылка.ПометкаУдаления)
	|	И &ЭтоДополнительноеСведение
	|
	|СГРУППИРОВАТЬ ПО
	|	НаборыСвойствДополнительныеСведения.Свойство
	|;
	
	//Запрос 2 - ЗаполненныеСвойства
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство
	|ПОМЕСТИТЬ ЗаполненныеСвойства
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Ссылка В(&масСвойств)
	|;
	
	//Запрос 3 - ВсеСвойства (по ВсеСвойстваНабора, ЗаполненныеСвойства)
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеСвойстваНабора.Свойство,
	|	ВсеСвойстваНабора.Порядок,
	|	ЛОЖЬ КАК Удалено
	|ПОМЕСТИТЬ ВсеСвойства
	|ИЗ
	|	ВсеСвойстваНабора КАК ВсеСвойстваНабора 
	|;
	
	//Запрос 4 - 
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеСвойства.Свойство,
	|	ДополнительныеРеквизитыИСведения.Наименование,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения,
	|	ВсеСвойства.Удалено КАК Удалено
	|ИЗ
	|	ВсеСвойства КАК ВсеСвойства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО ВсеСвойства.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Удалено,
	|	ВсеСвойства.Порядок";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ЭтоДополнительноеСведение", ЭтоДополнительноеСведение);
	Запрос.УстановитьПараметр("масСвойств", масСвойств);
	Запрос.УстановитьПараметр("Набор", Набор);
	
	ТабСвойства = Запрос.Выполнить().Выгрузить();
	ТабСвойства.Индексы.Добавить("Свойство");
	ТабСвойства.Колонки.Добавить("Значение");
	
	Для Каждого Стр Из ДополнительныеСвойстваОбъекта Цикл
		СтрСвойства = ТабСвойства.Найти(Стр.Свойство, "Свойство");
		Если СтрСвойства <> Неопределено Тогда
			СтрСвойства.Значение = Стр.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТабСвойства;	
КонецФункции

// По объекту или ссылке на объект получить набор или список наборов доступных ему свойств
// Параметры:
//	ВладелецСвойств - ссылка на объект или сам объект
Функция ПолучитьДоступныеНаборыСвойств(ВладелецСвойств) Экспорт	
	Возврат ПолучитьОсновнойНаборСвойствДляОбъекта(ВладелецСвойств);	
КонецФункции

// Используется при записи элементов справочников, которые являются видами объектов со свойствами
// Если есть справочник Сущности к которому применяется подсистема Свойства, для него создан 
// справочник ВидыСущностей, то при записи элемента ВидыСущностей необходимо вызывать эту процедуру
//
// Параметры:
//	ВидОбъекта - объект, запись которого выполняется
//	ИмяОбъектаСоСвойствами - имя объекта со свойствами вид которого записывается
Процедура ПередЗаписьюВидаОбъекта(ВидОбъекта, ИмяОбъектаСоСвойствами) Экспорт
	Если Не ЗначениеЗаполнено(ВидОбъекта.НаборСвойств) Тогда
		ОбъектНабора = Справочники.НаборыСвойств.СоздатьЭлемент();
	Иначе
		Если Не НаборСвойствНужноИзменить(ВидОбъекта) Тогда
			Возврат;
		КонецЕсли;
		
		ОбъектНабора = ВидОбъекта.НаборСвойств.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ОбъектНабора.Ссылка);
	КонецЕсли;
	
	ОбъектНабора.Наименование    = ВидОбъекта.Наименование;
	ОбъектНабора.Родитель        = Справочники.НаборыСвойств[ИмяОбъектаСоСвойствами];
	ОбъектНабора.ПометкаУдаления = ВидОбъекта.ПометкаУдаления;
	ОбъектНабора.Записать();
	ВидОбъекта.НаборСвойств = ОбъектНабора.Ссылка;
	
КонецПроцедуры

// По объекту или по ссылке на объект и по имени реквизита, содержащего вид объекта
// получает основной набор свойств.
// Для ссылки на справочник "Сущности" функция вернет
// предопределенный элемент справочника НаборыСвойств "Справочник_Сущности".
// Если передан параметр ВидОбъектаИмяРеквизита, функция вернет ссылку на 
// набор свойств, содержащийся в Ссылка.<ВидОбъектаИмяРеквизита>
//
Функция ПолучитьОсновнойНаборСвойствДляОбъекта(ВладелецСвойств) Экспорт
	
	МетаданныеОбъекта = ВладелецСвойств.Метаданные();
	ИмяОбъекта = МетаданныеОбъекта.Имя;
	
	ПереданОбъект = Ложь;
	Если УдалитьОбщегоНазначения.ЗначениеСсылочногоТипа(ВладелецСвойств) Тогда
		Ссылка = ВладелецСвойств;
	Иначе
		ПереданОбъект = Истина;
		Ссылка = ВладелецСвойств.Ссылка;
	КонецЕсли;
	
	ВидОбъекта = УдалитьОбщегоНазначения.ВидОбъектаПоСсылке(Ссылка);

	Если ВидОбъекта = "Справочник" или ВидОбъекта = "ПланВидовХарактеристик" Тогда
		Если ОбъектЯвляетсяГруппой(ВладелецСвойств) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	ИмяЭлемента = ВидОбъекта + "_" + ИмяОбъекта;
	Возврат Справочники.НаборыСвойств[ИмяЭлемента];				
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ФУНКЦИИ И ПРОЦЕДУРЫ

// Является ли объект группой
// В качестве параметра может принимать только справочник или ПВХ
Функция ОбъектЯвляетсяГруппой(Объект)
	МетаданныеОбъекта = Объект.Метаданные();
	Если НЕ (МетаданныеОбъекта.Иерархический И МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если УдалитьОбщегоНазначения.ЗначениеСсылочногоТипа(Объект) Тогда
		Возврат Объект.ЭтоГруппа;
	КонецЕсли;
	
	Ссылка = Объект.Ссылка;
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат УдалитьОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "ЭтоГруппа");
	
КонецФункции

// Создать основные объекты (реквизиты, команды, элементы) на форме объекта со свойствами
Процедура СоздатьОсновныеОбъектыФормы(Форма, ИмяЭлементаДляРазмещения, НаборСвойствОбъекта)
	масРеквизитов = Новый Массив;
	
	// Проверим значение функциональной опции "Использование свойств"
	РеквизитИспользоватьСвойства = Новый РеквизитФормы("__Свойства_ИспользоватьСвойства", Новый ОписаниеТипов("Булево"));
	масРеквизитов.Добавить(РеквизитИспользоватьСвойства);
	
	// Добавим реквизит "ОсновнойНабор"
	ИмяТипа = ?(ТипЗнч(НаборСвойствОбъекта) = Тип("СписокЗначений"), "СписокЗначений", "СправочникСсылка.НаборыСвойств");
	РеквизитОсновнойНабор = Новый РеквизитФормы("__Свойства_ОсновнойНабор", Новый ОписаниеТипов(ИмяТипа));
	масРеквизитов.Добавить(РеквизитОсновнойНабор);
	
	// Добавим реквизит таблицу значений "ОписаниеДополнительныхРеквизитов" с колонками
	ИмяОписания = "__Свойства_ОписаниеДополнительныхРеквизитов";
	РеквизитОписание_0 = Новый РеквизитФормы(ИмяОписания,            Новый ОписаниеТипов("ТаблицаЗначений"));
	РеквизитОписание_1 = Новый РеквизитФормы("ИмяРеквизитаЗначение", Новый ОписаниеТипов("Строка"), ИмяОписания);
	РеквизитОписание_2 = Новый РеквизитФормы("ИмяРеквизитаСвойство", Новый ОписаниеТипов("Строка"), ИмяОписания);
	РеквизитОписание_3 = Новый РеквизитФормы("Свойство",             Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"), ИмяОписания);
	масРеквизитов.Добавить(РеквизитОписание_0);
	масРеквизитов.Добавить(РеквизитОписание_1);
	масРеквизитов.Добавить(РеквизитОписание_2);
	масРеквизитов.Добавить(РеквизитОписание_3);
	
	// Добавим реквизит с именем элемента в котором будут размещаться поля ввода
	РеквизитИмяЭлемента = Новый РеквизитФормы("__Свойства_ИмяЭлементаДляРазмещения", Новый ОписаниеТипов("Строка"));
	масРеквизитов.Добавить(РеквизитИмяЭлемента);
	
	Форма.ИзменитьРеквизиты(масРеквизитов);
	Форма.__Свойства_ИспользоватьСвойства = Истина;
	Форма.__Свойства_ИмяЭлементаДляРазмещения = ИмяЭлементаДляРазмещения;	
КонецПроцедуры

// Создадим реквизиты с значениями свойств и разместить их на форме
Процедура ЗаполнитьДополнительныеРеквизитыНаФорме(Форма, Объект, НаборСвойствОбъекта)
	Если НаборСвойствОбъекта = Неопределено Тогда
		Набор = Форма.__Свойства_ОсновнойНабор;
	Иначе
		Набор = НаборСвойствОбъекта;
	КонецЕсли;
	
	Таблица = ПолучитьТаблицуЗначенийСвойств(Объект.ДополнительныеРеквизиты.Выгрузить(), Набор, Ложь);
	Таблица.Колонки.Добавить("ИмяРеквизитаЗначение");
	Таблица.Колонки.Добавить("ИмяРеквизитаСвойство");
	Таблица.Колонки.Добавить("Булево");
	
	УдалитьСтарыеРеквизиты(Форма);
	Форма.__Свойства_ОписаниеДополнительныхРеквизитов.Очистить();
	
	// Создадим реквизиты
	Номер = 0;
	ДобавляемыеРеквизиты = Новый Массив();
	Для Каждого СтрРеквизит Из Таблица Цикл	
		Номер = Номер + 1;
		ТипЗначенияСвойства = СтрРеквизит.ТипЗначения;
		
		СтрРеквизит.ИмяРеквизитаЗначение = "ДополнительныйРеквизитЗначение" + Формат(Номер, "ЧГ=0");
		Реквизит = Новый РеквизитФормы(СтрРеквизит.ИмяРеквизитаЗначение, ТипЗначенияСвойства, , СтрРеквизит.Наименование, Истина);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		СтрРеквизит.ИмяРеквизитаСвойство = "";
		Если ТипЗначенияСодержитЗначенияСвойств(ТипЗначенияСвойства) Тогда
			СтрРеквизит.ИмяРеквизитаСвойство = "ДополнительныйРеквизитСвойство" + Формат(Номер, "ЧГ=0");
			Реквизит = Новый РеквизитФормы(СтрРеквизит.ИмяРеквизитаСвойство, Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"), , , Истина);
			ДобавляемыеРеквизиты.Добавить(Реквизит);
		КонецЕсли;	
		СтрРеквизит.Булево = УдалитьОбщегоНазначения.ОписаниеТипаСостоитИзТипа(ТипЗначенияСвойства, Тип("Булево"));	
	КонецЦикла;
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Создадим элементы формы
	Для Каждого СтрРеквизит Из Таблица Цикл	
		новСтр = Форма.__Свойства_ОписаниеДополнительныхРеквизитов.Добавить();
		новСтр.ИмяРеквизитаЗначение = СтрРеквизит.ИмяРеквизитаЗначение;
		новСтр.ИмяРеквизитаСвойство = СтрРеквизит.ИмяРеквизитаСвойство;
		новСтр.Свойство             = СтрРеквизит.Свойство;
		
		Форма[СтрРеквизит.ИмяРеквизитаЗначение] = СтрРеквизит.Значение;
		
		ИмяЭлементаДляРазмещения = Форма.__Свойства_ИмяЭлементаДляРазмещения;
		Родитель = ?(ИмяЭлементаДляРазмещения = "", Неопределено, Форма.Элементы[ИмяЭлементаДляРазмещения]);
		Элемент = Форма.Элементы.Добавить(СтрРеквизит.ИмяРеквизитаЗначение, Тип("ПолеФормы"), Родитель);
		Элемент.Вид = ?(СтрРеквизит.Булево, ВидПоляФормы.ПолеФлажка, ВидПоляФормы.ПолеВвода);
		Элемент.ПутьКДанным = СтрРеквизит.ИмяРеквизитаЗначение;
		
		Если СтрРеквизит.Удалено Тогда
			Элемент.ЦветТекстаЗаголовка = ЦветаСтиля.УдаленныйДополнительныйРеквизитЦвет;
			Элемент.ШрифтЗаголовка = ШрифтыСтиля.УдаленныйДополнительныйРеквизитШрифт;
		КонецЕсли;
		
		Если СтрРеквизит.ИмяРеквизитаСвойство <> "" Тогда
			Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", СтрРеквизит.ИмяРеквизитаСвойство);
			масСвязи = Новый Массив;
			масСвязи.Добавить(Связь);
			Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(масСвязи);
			Форма[СтрРеквизит.ИмяРеквизитаСвойство] = СтрРеквизит.Свойство;
		КонецЕсли;
		
		//Если Строка(СтрРеквизит.ТипЗначения) = "Строка" И
		//		(СтрРеквизит.Свойство.ВидСтроки = Перечисления.ВидыТипаСтрока.Адрес ИЛИ
		//			СтрРеквизит.Свойство.ВидСтроки = Перечисления.ВидыТипаСтрока.Телефон) Тогда
		//	ЭлементФормы = Форма.Элементы.Найти(СтрРеквизит.ИмяРеквизитаЗначение);
		//	ЭлементФормы.РедактированиеТекста = Ложь;
		//	ЭлементФормы.КнопкаВыбора = Истина;
		//	ЭлементФормы.УстановитьДействие("НачалоВыбора", "ДополнительныеРеквизитыНачалоВыбора");
		//	
		//	Номер = Найти(Форма[СтрРеквизит.ИмяРеквизитаЗначение], ";");
		//	Форма[СтрРеквизит.ИмяРеквизитаЗначение] = Сред(Форма[СтрРеквизит.ИмяРеквизитаЗначение], 1, Номер - 1);
		//КонецЕсли;
		
		Если Строка(СтрРеквизит.ТипЗначения) = "Строка" И 
				СтрРеквизит.Свойство.ВидСтроки <> Перечисления.ВидыТипаСтрока.Строка Тогда					
				
			Если СтрРеквизит.Свойство.ВидСтроки = Перечисления.ВидыТипаСтрока.Адрес ИЛИ
					СтрРеквизит.Свойство.ВидСтроки = Перечисления.ВидыТипаСтрока.Телефон Тогда
                ЭлементФормы = Форма.Элементы.Найти(СтрРеквизит.ИмяРеквизитаЗначение);
				ЭлементФормы.РедактированиеТекста = Ложь;
				ЭлементФормы.КнопкаВыбора = Истина;
				ЭлементФормы.УстановитьДействие("НачалоВыбора", "ДополнительныеРеквизитыНачалоВыбора");
				
				Номер = Найти(Форма[СтрРеквизит.ИмяРеквизитаЗначение], ";");
				Форма[СтрРеквизит.ИмяРеквизитаЗначение] = Сред(Форма[СтрРеквизит.ИмяРеквизитаЗначение], 1, Номер - 1);
	
			ИначеЕсли СтрРеквизит.Свойство.ВидСтроки = Перечисления.ВидыТипаСтрока.ПутьКФайлу Тогда
                ЭлементФормы = Форма.Элементы.Найти(СтрРеквизит.ИмяРеквизитаЗначение);
				ЭлементФормы.КнопкаВыбора = Истина;
				ЭлементФормы.КнопкаОткрытия = Истина;
				ЭлементФормы.УстановитьДействие("НачалоВыбора", "ДополнительныеРеквизитыНачалоВыбора");
				ЭлементФормы.УстановитьДействие("Открытие", "ДополнительныеРеквизитыОткрытие");			
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Перенести значения свойств из реквизитов формы в табличную часть объекта
Процедура ПеренестиЗначенияСвойствИзРеквизитовФормы(Форма, Объект)
	СписокНаУдаление = Новый СписокЗначений();
	Для Каждого Стр Из Объект.ДополнительныеРеквизиты Цикл
		Если Не (Строка(Стр.Свойство.ТипЗначения) = "Строка" И 
				(Стр.Свойство.ВидСтроки = Перечисления.ВидыТипаСтрока.Адрес ИЛИ
					Стр.Свойство.ВидСтроки = Перечисления.ВидыТипаСтрока.Телефон)) Тогда
			СписокНаУдаление.Добавить(Стр.Свойство);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из СписокНаУдаление Цикл
		Строки = Объект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Стр.Значение));
		Если Строки.Количество() > 0 Тогда
	    	Объект.ДополнительныеРеквизиты.Удалить(Строки[0]);
		КонецЕсли;
	КонецЦикла;	
		
	//Объект.ДополнительныеРеквизиты.Очистить();	
	Для Каждого Стр Из Форма.__Свойства_ОписаниеДополнительныхРеквизитов Цикл
		Если Строка(Стр.Свойство.ТипЗначения) = "Строка" И 
				(Стр.Свойство.ВидСтроки = Перечисления.ВидыТипаСтрока.Адрес ИЛИ
					Стр.Свойство.ВидСтроки = Перечисления.ВидыТипаСтрока.Телефон) Тогда	
		    Продолжить;
		КонецЕсли;
		
		Значение = Форма[Стр.ИмяРеквизитаЗначение];
		Если ЗначениеЗаполнено(Значение) Тогда
			Если ТипЗнч(Значение) = Тип("Булево") И Значение = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			новСтр = Объект.ДополнительныеРеквизиты.Добавить();
			новСтр.Свойство = Стр.Свойство;
			новСтр.Значение = Значение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Удалить старые реквизиты и элементы формы
Процедура УдалитьСтарыеРеквизиты(Форма)
	
	// Удалим старые реквизиты и элементы
	масУдалять = Новый Массив;
	Для Каждого СтрРеквизит Из Форма.__Свойства_ОписаниеДополнительныхРеквизитов Цикл
		
		масУдалять.Добавить(СтрРеквизит.ИмяРеквизитаЗначение);
		Если Не ПустаяСтрока(СтрРеквизит.ИмяРеквизитаСвойство) Тогда
			масУдалять.Добавить(СтрРеквизит.ИмяРеквизитаСвойство);
		КонецЕсли;
		
		Форма.Элементы.Удалить(Форма.Элементы[СтрРеквизит.ИмяРеквизитаЗначение]);
		
	КонецЦикла;
	
	Если масУдалять.Количество() Тогда
		Форма.ИзменитьРеквизиты(, масУдалять);
	КонецЕсли;
	
КонецПроцедуры

// Проверить, что тип значения свойства содержит ссылку на справочник ЗначенияСвойствОбъектов
Функция ТипЗначенияСодержитЗначенияСвойств(ТипЗначения)
	
	Возврат ТипЗначения.Типы().Найти(Тип("СправочникСсылка.тсЗначенияСвойствОбъектов")) <> Неопределено;
	
КонецФункции

// проверка того, что элемент набора свойств нужно изменить из-за изменений в виде объекта
Функция НаборСвойствНужноИзменить(ВидОбъекта)
	Результат = УдалитьОбщегоНазначения.ПолучитьЗначенияРеквизитов(ВидОбъекта.НаборСвойств, "Наименование,ПометкаУдаления");
	Возврат (Результат.Наименование <> ВидОбъекта.Наименование) ИЛИ (Результат.ПометкаУдаления <> ВидОбъекта.ПометкаУдаления);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОБНОВЛЕНИЯ ИНФОРМАЦИОННОЙ БАЗЫ

Процедура ОбновитьСписокДополнительныхСвойств() Экспорт
	
	НаборыСвойств = Справочники.НаборыСвойств.Выбрать();
	
	Пока НаборыСвойств.Следующий() Цикл
		
		ДопСведения = Новый Массив;
		
		НаборСвойствОбъект = НаборыСвойств.Ссылка.ПолучитьОбъект();
		
		Для Каждого Запись Из НаборСвойствОбъект.ДополнительныеРеквизиты Цикл
			Если Запись.Свойство.ЭтоДополнительноеСведение Тогда
				ДопСведения.Добавить(Запись);
			КонецЕсли;
		КонецЦикла;
		
		Если ДопСведения.Количество() > 0 Тогда
			
			Для Каждого ДопСведение Из ДопСведения Цикл
				НоваяСтрока = НаборСвойствОбъект.ДополнительныеСведения.Добавить();
				НоваяСтрока.Свойство = ДопСведение.Свойство;
				НаборСвойствОбъект.ДополнительныеРеквизиты.Удалить(
					НаборСвойствОбъект.ДополнительныеРеквизиты.Индекс(ДопСведение));
				
			КонецЦикла;
			НаборСвойствОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДополнительныеРеквизиты(ЭтаФорма) Экспорт
	
	Массив_ГруппыТекПольз = ПараметрыСеанса.ТекущийПользователь.ГруппыПользователей.ВыгрузитьКолонку("Группа");
	
	Элементы = ЭтаФорма.Элементы;
	Объект = ЭтаФорма.Объект;	
	ДополнительныеРеквизиты = ЭтаФорма.ДополнительныеРеквизиты;
	
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	Для Каждого Элемент Из ДополнительныеРеквизиты Цикл
		Если (Элемент.Свойство.ВидСтроки = Перечисления.ВидыТипаСтрока.Адрес ИЛИ 
				Элемент.Свойство.ВидСтроки = Перечисления.ВидыТипаСтрока.Телефон) И Элемент.Параметры = "" Тогда
			Номер = Найти(Элемент.Значение, ";");
			Элемент.Параметры = Сред(Элемент.Значение, Номер + 1);	
			Элемент.Значение = Сред(Элемент.Значение, 1, Номер - 1);	
			//+Protas 17.12.18 Разбивка строки ФИАС из значения в параметры и значение
		ИначеЕсли Элемент.Свойство.ВидСтроки = Перечисления.ВидыТипаСтрока.АдресФИАС Тогда
			Элемент.Параметры       = Элемент.Значение;
			Элемент.Значение        =
			бит_АдресныйКлассификатор.ПолучитьПредставлениеИзXML(Элемент.Значение);			
			//-Protas			
		КонецЕсли;
	КонецЦикла;
	
	// Подготовка
	ТЧ = ДополнительныеРеквизиты.Выгрузить();
	ТЧ.ЗаполнитьЗначения(Истина, "НеобходимоУдалить");
	ТЧ.ЗаполнитьЗначения(0, "НомерСтроки");
	ДополнительныеРеквизиты.Загрузить(ТЧ);
		
	Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		ОбъектВид = Объект.ЮрФизЛицо;
		ВидТЧ = Объект.ЮрФизЛицо.ДополнительныеРеквизиты;
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда
		ОбъектВид = Объект.ТипДолговогоОбязательства;
		ВидТЧ = Объект.ТипДолговогоОбязательства.ДополнительныеРеквизиты;
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.Залоги") Тогда
		ОбъектВид = Объект.ТипЗалога;
		ВидТЧ = Объект.ТипЗалога.ДополнительныеРеквизиты;
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ЗадачаСсылка.Мероприятие") Тогда
		ОбъектВид = Объект.Результат;
		ВидТЧ = ?(Не Объект.Результат.Пустая(), Объект.Результат.ДополнительныеРеквизиты, Новый Массив());
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ОбъектВид = Объект.ТипДоговора;
		ВидТЧ = Объект.ТипДоговора.ДополнительныеРеквизиты;
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ВходящаяКорреспонденция") ИЛИ ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ИсходящаяКорреспонденция") Тогда
		ОбъектВид = Объект.ТипПисьма;
		ВидТЧ = Объект.ТипПисьма.ДополнительныеРеквизиты;
	Иначе
		ОбъектВид = "_";
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство,
		                      |	"""" КАК Заголовок,
		                      |	ЛОЖЬ КАК Обязательное,
		                      |	ДополнительныеРеквизитыИСведения.ПорядковыйНомер КАК НомерСтроки
		                      |ИЗ
		                      |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		                      |ГДЕ
		                      |	НЕ ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение
		                      |	И ДополнительныеРеквизитыИСведения.Родитель = &РодительПВХ
		                      |	И НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления");
		РодительПВХ = Неопределено;
		Выполнить("РодительПВХ = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДополнительныеРеквизиты_" + 
				Объект.Ссылка.Метаданные().Имя + ";");
		Запрос.УстановитьПараметр("РодительПВХ", РодительПВХ);
		ВидТЧ = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ОбъектВид) Тогда
		Для Каждого Элемент Из ВидТЧ Цикл

			
			ОтборПоГруппе = Истина;
			ГруппаСвойства = Элемент.Свойство.ГруппаПользователей;
			Если ЗначениеЗаполнено(ГруппаСвойства) = Ложь Тогда
				ОтборПоГруппе = Истина;
			Иначе
				Если Массив_ГруппыТекПольз.Найти(ГруппаСвойства) <> Неопределено Тогда
					ОтборПоГруппе = Истина;
				Иначе
					ОтборПОГруппе = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Попытка
				Флаг = Элемент.Функция.Пустая();
			Исключение
				Флаг = Истина;
			КонецПопытки;
			
			Если Флаг ИЛИ ВычислитьФункциюВидимости(Элемент.Функция.Функция, Объект) Тогда
				Строки = ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Элемент.Свойство));			
				Если Строки.Количество() > 0 И ОтборПоГруппе Тогда
					Строки[0].НеобходимоУдалить = Ложь;
					Строки[0].НомерСтроки = Элемент.НомерСтроки;
					Строки[0].Обязательное = Элемент.Обязательное;
					Строки[0].Заголовок = ?(Элемент.Заголовок <> "", Элемент.Заголовок, Элемент.Свойство.Наименование);
				ИначеЕсли Строки.Количество() = 0 И ОтборПоГруппе Тогда
					НоваяСтрока = ДополнительныеРеквизиты.Добавить();
					НоваяСтрока.Заголовок = ?(Элемент.Заголовок <> "", Элемент.Заголовок, Элемент.Свойство.Наименование);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент, "НомерСтроки, Свойство, Обязательное");
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Очистка группы	
	МассивРеквизитов = Новый Массив();
	Для Каждого Элемент Из ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("НеобходимоУдалить", Истина)) Цикл 
		Если Элемент.Свойство.ТипЗначения.СодержитТип(Тип("СправочникСсылка.тсЗначенияСвойствОбъектов")) Тогда
			Попытка
				ТестНаНаличие = ЭтаФорма["РеквизитСвойство_" + СтрЗаменить(Элемент.Свойство.Код, " ", "_")];
				МассивРеквизитов.Добавить("РеквизитСвойство_" + СтрЗаменить(Элемент.Свойство.Код, " ", "_"));
			Исключение
			КонецПопытки;
		КонецЕсли;
				
		ЭлементФормы = Элементы.Найти("Реквизит_" + СтрЗаменить(Элемент.Свойство.Код, " ", "_"));
		Если ЭлементФормы <> Неопределено Тогда		
			Элементы.Удалить(ЭлементФормы); 
			МассивРеквизитов.Добавить("Реквизит_" + СтрЗаменить(Элемент.Свойство.Код, " ", "_"));
		КонецЕсли;
		ДополнительныеРеквизиты.Удалить(Элемент);
	КонецЦикла;
	ЭтаФорма.ИзменитьРеквизиты(, МассивРеквизитов);
		
	// Заполнение
	Для Каждого Элемент Из ДополнительныеРеквизиты Цикл
		Если Элементы.Найти("Реквизит_" + СтрЗаменить(Элемент.Свойство.Код, " ", "_")) = Неопределено Тогда
			МассивРеквизитов.Очистить();
			Реквизит = Новый РеквизитФормы("Реквизит_" + СтрЗаменить(Элемент.Свойство.Код, " ", "_"), Элемент.Свойство.ТипЗначения,, 
					Элемент.Свойство.Наименование);
	
			МассивРеквизитов.Добавить(Реквизит);
			Если Элемент.Свойство.ТипЗначения.СодержитТип(Тип("СправочникСсылка.тсЗначенияСвойствОбъектов")) Тогда
				Реквизит = Новый РеквизитФормы("РеквизитСвойство_" + СтрЗаменить(Элемент.Свойство.Код, " ", "_"), 
						Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"),, 
						Элемент.Свойство.Наименование);
				МассивРеквизитов.Добавить(Реквизит);
			КонецЕсли;
			
			ЭтаФорма.ИзменитьРеквизиты(МассивРеквизитов);
			Выполнить("ЭтаФорма.Реквизит_" + СтрЗаменить(Элемент.Свойство.Код, " ", "_") + " = Элемент.Значение;");
			
			ПолеФормы = Элементы.Добавить("Реквизит_" + СтрЗаменить(Элемент.Свойство.Код, " ", "_"), Тип("ПолеФормы"), 
			Элементы.ГруппаДополнительныеРеквизиты);
			Если Элемент.Свойство.ТипЗначения = ОписаниеТиповБулево Тогда
				ПолеФормы.Вид = ВидПоляФормы.ПолеФлажка;
			Иначе 
				ПолеФормы.Вид = ВидПоляФормы.ПолеВвода;  
				ПолеФормы.ВыбиратьТип = Ложь;
				ПолеФормы.УстановитьДействие("НачалоВыбора", "ДополнительныеРеквизитыНачалоВыбора");
				ПолеФормы.УстановитьДействие("Открытие", "ДополнительныеРеквизитыОткрытие");	
				ПолеФормы.АвтоМаксимальнаяШирина = Ложь;
				ПолеФормы.АвтоМаксимальнаяВысота = Ложь;				
			КонецЕсли;
			
			Если Элемент.Свойство.СписокДоступныхЗначений Тогда
				ПолеФормы.РежимВыбораИзСписка = Истина;
				//МассивЗначений = Новый Массив;
				Для Каждого ЭлСписка из Элемент.Свойство.СписокЗначений Цикл
					ПолеФормы.СписокВыбора.Добавить(ЭлСписка.Значение);
				КонецЦикла;
				
			КонецЕсли;
			
			ПолеФормы.ПутьКДанным = "Реквизит_" + СтрЗаменить(Элемент.Свойство.Код, " ", "_");
			ПолеФормы.ТолькоПросмотр = ПолучитьТолькоПросмотр(Элемент.Свойство);
			
			ПолеФормы.УстановитьДействие("ПриИзменении", "ДополнительныеРеквизитыПриИзменении");

			
			Если Элемент.Свойство.ТипЗначения.СодержитТип(Тип("СправочникСсылка.тсЗначенияСвойствОбъектов")) Тогда
				ЭтаФорма["РеквизитСвойство_" + СтрЗаменить(Элемент.Свойство.Код, " ", "_")] = Элемент.Свойство;
				Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", "РеквизитСвойство_" + СтрЗаменить(Элемент.Свойство.Код, " ", "_"));
				масСвязи = Новый Массив;
				масСвязи.Добавить(Связь);
				ПолеФормы.СвязиПараметровВыбора = Новый ФиксированныйМассив(масСвязи);	
				
			ИначеЕсли Элемент.Свойство.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ИсполнительныеДокументы")) Тогда
				Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Объект");
				масСвязи = Новый Массив;
				масСвязи.Добавить(Связь);
				ПолеФормы.СвязиПараметровВыбора = Новый ФиксированныйМассив(масСвязи);
				
			ИначеЕсли Элемент.Свойство.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
				//+Protas 17.12.18 Открытие формы адреса в формате ФИАС
				//Если Элемент.Свойство.ВидСтроки = Перечисления.ВидыТипаСтрока.Адрес ИЛИ
				//      Элемент.Свойство.ВидСтроки = Перечисления.ВидыТипаСтрока.Телефон Тогда
				Если Элемент.Свойство.ВидСтроки = Перечисления.ВидыТипаСтрока.Адрес ИЛИ
					Элемент.Свойство.ВидСтроки = Перечисления.ВидыТипаСтрока.АдресФИАС ИЛИ
					Элемент.Свойство.ВидСтроки = Перечисления.ВидыТипаСтрока.Телефон Тогда
					//+Protas
					ПолеФормы.КнопкаВыбора = Истина;	
					
					ПолеФормы.РедактированиеТекста = Ложь;
					
				ИначеЕсли Элемент.Свойство.ВидСтроки = Перечисления.ВидыТипаСтрока.ПутьКФайлу Тогда
					ПолеФормы.КнопкаВыбора = Истина;
					ПолеФормы.КнопкаОткрытия = Истина;
				КонецЕсли;
				
				Если Не Элемент.Свойство.РедактируемоеЗначение.Пустая() Тогда
					ПолеФормы.КнопкаСпискаВыбора = Истина;
					ЗапросСЗ = Новый Запрос("ВЫБРАТЬ
					                        |	тсЗначенияСвойствОбъектов.Наименование КАК Наименование
					                        |ИЗ
					                        |	Справочник.тсЗначенияСвойствОбъектов КАК тсЗначенияСвойствОбъектов
					                        |ГДЕ
					                        |	тсЗначенияСвойствОбъектов.Владелец = &Владелец
					                        |	И НЕ тсЗначенияСвойствОбъектов.ПометкаУдаления
					                        |
					                        |УПОРЯДОЧИТЬ ПО
					                        |	Наименование");
					ЗапросСЗ.УстановитьПараметр("Владелец", Элемент.Свойство.РедактируемоеЗначение);
					РезультатСЗ = ЗапросСЗ.Выполнить().Выбрать();
					Пока РезультатСЗ.Следующий() Цикл
						ПолеФормы.СписокВыбора.Добавить(РезультатСЗ.Наименование, РезультатСЗ.Наименование);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Элементы["Реквизит_" + СтрЗаменить(Элемент.Свойство.Код, " ", "_")].Заголовок = Элемент.Заголовок;
	КонецЦикла;
	
	//Сортировка
	ДополнительныеРеквизиты.Сортировать("НомерСтроки Убыв, Заголовок Убыв");
	ПолеФормыСлед = Неопределено;
	Для Каждого Элемент Из ДополнительныеРеквизиты Цикл		
		ПолеФормы = Элементы.Найти("Реквизит_" + СтрЗаменить(Элемент.Свойство.Код, " ", "_"));
		Если Элемент.Свойство.ТипЗначения <> ОписаниеТиповБулево Тогда
			ПолеФормы.АвтоОтметкаНезаполненного = ?(Элемент.Обязательное, Истина, Неопределено);
		КонецЕсли;
		
		Элементы.Переместить(ПолеФормы, Элементы.ГруппаДополнительныеРеквизиты, ПолеФормыСлед);
		ПолеФормыСлед = ПолеФормы;
	КонецЦикла;
	ДополнительныеРеквизиты.Сортировать("НомерСтроки, Заголовок");	
КонецПроцедуры

Функция ПолучитьТолькоПросмотр(Свойство)
	//Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
	Если Свойство.ГруппаПользователейДоступность = Справочники.ГруппыПользователей.ПустаяСсылка() Тогда
		Возврат Ложь;
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ПользователиГруппыПользователей.Ссылка
		                      |ИЗ
		                      |	Справочник.Пользователи.ГруппыПользователей КАК ПользователиГруппыПользователей
		                      |ГДЕ
		                      |	ПользователиГруппыПользователей.Ссылка = &Пользователь
		                      |	И ПользователиГруппыПользователей.Группа = &Группа");
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
		Запрос.УстановитьПараметр("Группа", Свойство.ГруппаПользователейДоступность);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ВычислитьФункциюВидимости(ТекстФункции, ОбъектВх, ВидКонтрагента = Неопределено) Экспорт
	Попытка
		Значение = Неопределено;
		Выполнить(ТекстФункции);
		Возврат Значение;
	Исключение
		Возврат Неопределено;
	КонецПопытки;	 	
КонецФункции

Процедура ПередЗаписьюНаСервере2(ЭтаФорма, ТекущийОбъект, Отказ, МероприятиеВыполнено = Истина) Экспорт
	//Для Каждого Элемент Из ЭтаФорма.ДополнительныеРеквизиты Цикл
	//	Выполнить("Элемент.Значение = ЭтаФорма.Реквизит_" + СтрЗаменить(Элемент.Свойство.Код, " ", "_") + ";");
	//КонецЦикла;
	//
	//ТекущийОбъект.ДополнительныеРеквизиты.Очистить();
	//Для Каждого Элемент Из ЭтаФорма.ДополнительныеРеквизиты Цикл
	//	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
	//        НоваяСтрока = ТекущийОбъект.ДополнительныеРеквизиты.Добавить();
	//		НоваяСтрока.Свойство = Элемент.Свойство;
	//		Если Элемент.Свойство.ВидСтроки = Перечисления.ВидыТипаСтрока.Адрес ИЛИ
	//				Элемент.Свойство.ВидСтроки = Перечисления.ВидыТипаСтрока.Телефон Тогда
	//			НоваяСтрока.Значение = Элемент.Значение + ";" + Элемент.Параметры;
	//		Иначе
	//			НоваяСтрока.Значение = Элемент.Значение;	
	//		КонецЕсли;			
	//	ИначеЕсли Элемент.Обязательное И МероприятиеВыполнено Тогда
	//		Отказ = Истина;		
	//		Сообщить("Не заполнены обязательные реквизиты!");
	//	КонецЕсли;
	//КонецЦикла;
	
	Для Каждого Элемент Из ЭтаФорма.ДополнительныеРеквизиты Цикл
		Выполнить("Элемент.Значение = ЭтаФорма.Реквизит_" + СтрЗаменить(Элемент.Свойство.Код, " ", "_") + ";");
	КонецЦикла;
	//ТекущийОбъект.ДополнительныеРеквизиты.Очистить();
	Для Каждого Элемент Из ЭтаФорма.ДополнительныеРеквизиты Цикл
		
		Если Элемент.Обязательное И МероприятиеВыполнено Тогда
			Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
				Отказ = Истина; 
				Сообщить("Не заполнены обязательные реквизиты!");
			КонецЕсли;
		КонецЕсли;
		
		Строки = ТекущийОбъект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Элемент.Свойство));
		Если Строки.Количество() > 0 Тогда
			НоваяСтрока = Строки[0];
		Иначе
			НоваяСтрока = ТекущийОбъект.ДополнительныеРеквизиты.Добавить(); 
		КонецЕсли;
		НоваяСтрока.Свойство = Элемент.Свойство;
		Если Элемент.Свойство.ВидСтроки = Перечисления.ВидыТипаСтрока.Адрес ИЛИ
			Элемент.Свойство.ВидСтроки = Перечисления.ВидыТипаСтрока.Телефон Тогда
			НоваяСтрока.Значение = Элемент.Значение + ";" + Элемент.Параметры;
			//+Protas 17.12.18 Открытие формы строки ФИАС из доп реквизитов
		ИначеЕсли Элемент.Свойство.ВидСтроки = Перечисления.ВидыТипаСтрока.АдресФИАС Тогда
			НоваяСтрока.Значение     = Элемент.Параметры;
			//-Protas			
		Иначе
			НоваяСтрока.Значение = Элемент.Значение; 
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры


Процедура КонтрольУникальности(СправочникМенеджер, ТекущийОбъект, КлючевоеПолеИмя, КлючевоеПолеЗначение, Отказ) Экспорт
	Если ТекущийОбъект.Ссылка = СправочникМенеджер.ПустаяСсылка() Тогда
		Если СправочникМенеджер = Справочники.ДолговыеОбязательства Тогда
			НайденныйЭлемент = СправочникМенеджер.НайтиПоНаименованию(КлючевоеПолеЗначение);
		Иначе
			НайденныйЭлемент = СправочникМенеджер.НайтиПоРеквизиту(КлючевоеПолеИмя, КлючевоеПолеЗначение);
		КонецЕсли;
		Если НайденныйЭлемент <> СправочникМенеджер.ПустаяСсылка() Тогда
			Отказ = Истина;
			Сообщить("Значение поля " + КлючевоеПолеИмя + " не является уникальным!");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПолучитьСвойствоПоКоду(Код, Свойство, СвойствоВидСтроки) Экспорт
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоКоду(Код);
	СвойствоВидСтроки = Свойство.ВидСтроки;
КонецПроцедуры

Функция ПолучитьТекстЗапроса(ВидЗапроса, ВидСправочника) Экспорт
	Если Не ЗначениеЗаполнено(ВидЗапроса) Тогда
		ВидЗапроса = Перечисления.ВидыПодбораОбъектов.ТолькоОбъектыВРаботе;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВидСправочника) Тогда
		ВидСправочника = Перечисления.ВидыСправочникаДляПодбора.ОбъектыВРаботе;
	КонецЕсли;
	Если ВидЗапроса = Перечисления.ВидыПодбораОбъектов.ТолькоОбъектыВРаботе Тогда
		Если ВидСправочника = Перечисления.ВидыСправочникаДляПодбора.ОбъектыВРаботе Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ОбъектыВРаботеОстатки.Объект КАК Объект,
			               |	ВЫРАЗИТЬ(ОбъектыВРаботеОстатки.Объект КАК Справочник.Контрагенты) КАК Контрагенты,
			               |	ВЫРАЗИТЬ(ОбъектыВРаботеОстатки.Объект КАК Справочник.ДоговорыКонтрагентов) КАК ДоговорыКонтрагентов,
			               |	ВЫРАЗИТЬ(ОбъектыВРаботеОстатки.Объект КАК Справочник.УслугиПоДоговору) КАК УслугиПоДоговору,
			               |	ВЫРАЗИТЬ(ОбъектыВРаботеОстатки.Объект КАК Справочник.ДолговыеОбязательства) КАК ДолговыеОбязательства,
			               |	ВЫРАЗИТЬ(ОбъектыВРаботеОстатки.Объект КАК Справочник.ИсполнительныеДокументы) КАК ИсполнительныеДокументы,
			               |	ОбъектыВРаботеОстатки.Организация КАК Организация,
			               |	ОбъектыВРаботеОстатки.Подразделение КАК Подразделение,
			               |	ОбъектыВРаботеОстатки.Сотрудник КАК Сотрудник,
			               |	ОбъектыВРаботеОстатки.КоличествоОстаток КАК КоличествоОстаток,
			               |	ЗадолженностьПоОбъектамОстатки.СуммаРеглОстаток КАК СуммаРеглОстаток,
			               |	ИСТИНА КАК Пометка
			               |ИЗ
			               |	РегистрНакопления.ОбъектыВРаботе.Остатки(
			               |			,
			               |			(Организация = &Организация
			               |				ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
			               |				И (Подразделение = &Подразделение
			               |					ИЛИ &Подразделение = НЕОПРЕДЕЛЕНО)
			               |				И Сотрудник = &Сотрудник) КАК ОбъектыВРаботеОстатки
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗадолженностьПоОбъектам.Остатки(, ) КАК ЗадолженностьПоОбъектамОстатки
			               |		ПО ОбъектыВРаботеОстатки.Объект = ЗадолженностьПоОбъектамОстатки.Объект";
		ИначеЕсли ВидСправочника = Перечисления.ВидыСправочникаДляПодбора.ДолговыеОбязательства Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ВЫРАЗИТЬ(ОбъектыВРаботеОстатки.Объект КАК Справочник.ДолговыеОбязательства) КАК ДолговыеОбязательства
			               |ПОМЕСТИТЬ вт
			               |ИЗ
			               |	РегистрНакопления.ОбъектыВРаботе.Остатки(
			               |			,
			               |			(Организация = &Организация
			               |				ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
			               |				И (Подразделение = &Подразделение
			               |					ИЛИ &Подразделение = НЕОПРЕДЕЛЕНО)
			               |				И Сотрудник = &Сотрудник) КАК ОбъектыВРаботеОстатки
			               |ГДЕ
			               |	ТИПЗНАЧЕНИЯ(ОбъектыВРаботеОстатки.Объект) = ТИП(Справочник.ДолговыеОбязательства)
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	вт.ДолговыеОбязательства КАК Объект,
			               |	вт.ДолговыеОбязательства КАК ДолговыеОбязательства,
			               |	ИСТИНА КАК Пометка
			               |ИЗ
			               |	вт КАК вт
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Задача.Мероприятие КАК Мероприятие
			               |		ПО вт.ДолговыеОбязательства = Мероприятие.Объект
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсполнительныеДокументы КАК ИсполнительныеДокументы
			               |		ПО вт.ДолговыеОбязательства = ИсполнительныеДокументы.Владелец
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СудебноеДело КАК СудебноеДело
			               |		ПО вт.ДолговыеОбязательства = СудебноеДело.Займ
			               |{ГДЕ
			               |	Мероприятие.Ссылка.* КАК Мероприятие,
			               |	ИсполнительныеДокументы.Ссылка.* КАК ИсполнительныйДокумент,
			               |	СудебноеДело.Ссылка.* КАК СудебноеДело}";

		ИначеЕсли ВидСправочника = Перечисления.ВидыСправочникаДляПодбора.ИсполнительныеДокументы Тогда
			//ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			//               |	ВЫРАЗИТЬ(ОбъектыВРаботеОстатки.Объект КАК Справочник.ИсполнительныеДокументы) КАК ИсполнительныеДокументы
			//               |ПОМЕСТИТЬ вт
			//               |ИЗ
			//               |	РегистрНакопления.ОбъектыВРаботе.Остатки(
			//               |			,
			//               |			(Организация = &Организация
			//               |				ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
			//               |				И (Подразделение = &Подразделение
			//               |					ИЛИ &Подразделение = НЕОПРЕДЕЛЕНО)
			//               |				И Сотрудник = &Сотрудник) КАК ОбъектыВРаботеОстатки
			//               |ГДЕ
			//               |	ТИПЗНАЧЕНИЯ(ОбъектыВРаботеОстатки.Объект) = ТИП(Справочник.ИсполнительныеДокументы)
			//               |;
			//               |
			//               |////////////////////////////////////////////////////////////////////////////////
			//               |ВЫБРАТЬ РАЗЛИЧНЫЕ
			//               |	вт.ИсполнительныеДокументы КАК Объект,
			//               |	вт.ИсполнительныеДокументы КАК ИсполнительныеДокументы,
			//               |	ИСТИНА КАК Пометка
			//               |ИЗ
			//               |	вт КАК вт
			//               |		ЛЕВОЕ СОЕДИНЕНИЕ Задача.Мероприятие КАК Мероприятие
			//               |		ПО вт.ИсполнительныеДокументы = Мероприятие.Объект
			//               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФССП_ИсполнительноеПроизводство КАК ФССП_ИсполнительноеПроизводство
			//               |		ПО вт.ИсполнительныеДокументы.Ссылка = ФССП_ИсполнительноеПроизводство.НомерИД
			//               |{ГДЕ
			//               |	Мероприятие.Ссылка.* КАК Мероприятие,
			//               |	ФССП_ИсполнительноеПроизводство.Ссылка.* КАК ИсполнительноеПроизводство}";
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ВЫРАЗИТЬ(ОбъектыВРаботеОстатки.Объект КАК Справочник.ИсполнительныеДокументы) КАК ИсполнительныеДокументы
			               |ПОМЕСТИТЬ вт
			               |ИЗ
			               |	РегистрНакопления.ОбъектыВРаботе.Остатки(
			               |			,
			               |			(Организация = &Организация
			               |				ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
			               |				И (Подразделение = &Подразделение
			               |					ИЛИ &Подразделение = НЕОПРЕДЕЛЕНО)
			               |				И Сотрудник = &Сотрудник) КАК ОбъектыВРаботеОстатки
			               |ГДЕ
			               |	ТИПЗНАЧЕНИЯ(ОбъектыВРаботеОстатки.Объект) = ТИП(Справочник.ИсполнительныеДокументы)
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	МАКСИМУМ(ФССП_ИсполнительноеПроизводство.Ссылка) КАК Ссылка,
			               |	вт.ИсполнительныеДокументы КАК ИсполнительныеДокументы
			               |ПОМЕСТИТЬ вт_ИП
			               |ИЗ
			               |	вт КАК вт
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФССП_ИсполнительноеПроизводство КАК ФССП_ИсполнительноеПроизводство
			               |		ПО вт.ИсполнительныеДокументы = ФССП_ИсполнительноеПроизводство.НомерИД
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	вт.ИсполнительныеДокументы
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ФССП_СостояниеИПСрезПоследних.ИП КАК ИП,
			               |	вт_ИП.ИсполнительныеДокументы КАК ИсполнительныеДокументы,
			               |	вт_ИП.ИсполнительныеДокументы КАК Объект,
			               |	вт_ИП.Ссылка.СПИ КАК Реестр_СПИ,
			               |	вт_ИП.Ссылка.ОтделССП КАК Реестр_ОтделССП,
			               |	вт_ИП.Ссылка.НаличиеИП КАК Реестр_НаличиеИП,
			               |	вт_ИП.Ссылка.ОграничениеВыезда КАК Реестр_ОграничениеВыезда,
			               |	вт_ИП.Ссылка.ОтветчикФИО КАК Реестр_ФИООтветчика,
			               |	ФССП_СостояниеИПСрезПоследних.СтатусИП КАК ИсполнительноеПроизводство_Статус,
			               |	ФССП_СостояниеИПСрезПоследних.ОтделСудебныхПриставов КАК ИсполнительноеПроизводство_ОтделСудебныхПриставов,
			               |	ФССП_СостояниеИПСрезПоследних.СудебныйПриставИсполнитель КАК ИсполнительноеПроизводство_СудебныйПриставИсполнитель,
			               |	ФССП_СостояниеИПСрезПоследних.ПричинаОкончания КАК ИсполнительноеПроизводство_ПричинаОкончания,
			               |	ФССП_СостояниеИПСрезПоследних.ДатаОкончания КАК ИсполнительноеПроизводство_ДатаОкончания,
			               |	ФССП_СостояниеИПСрезПоследних.НомерСД КАК ИсполнительноеПроизводство_НомерСД,
			               |	ФССП_СостояниеИПСрезПоследних.ДатаВозбуждения КАК ИсполнительноеПроизводство_ДатаВозбуждения
			               |ИЗ
			               |	вт_ИП КАК вт_ИП
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФССП_СостояниеИП.СрезПоследних КАК ФССП_СостояниеИПСрезПоследних
			               |		ПО вт_ИП.Ссылка = ФССП_СостояниеИПСрезПоследних.ИП";
			
		ИначеЕсли ВидСправочника = Перечисления.ВидыСправочникаДляПодбора.СудебныеДела Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ВЫРАЗИТЬ(ОбъектыВРаботеОстатки.Объект КАК Справочник.ИсполнительныеДокументы) КАК ИсполнительныеДокументы
			               |ПОМЕСТИТЬ вт
			               |ИЗ
			               |	РегистрНакопления.ОбъектыВРаботе.Остатки(
			               |			,
			               |			(Организация = &Организация
			               |				ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
			               |				И (Подразделение = &Подразделение
			               |					ИЛИ &Подразделение = НЕОПРЕДЕЛЕНО)
			               |				И Сотрудник = &Сотрудник) КАК ОбъектыВРаботеОстатки
			               |ГДЕ
			               |	ТИПЗНАЧЕНИЯ(ОбъектыВРаботеОстатки.Объект) = ТИП(Справочник.ИсполнительныеДокументы)
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	вт.ИсполнительныеДокументы КАК Объект,
			               |	вт.ИсполнительныеДокументы КАК ИсполнительныеДокументы,
			               |	ИСТИНА КАК Пометка
			               |ИЗ
			               |	вт КАК вт
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Задача.Мероприятие КАК Мероприятие
			               |		ПО вт.ИсполнительныеДокументы = Мероприятие.Объект
			               |{ГДЕ
			               |	Мероприятие.Ссылка.* КАК Мероприятие}";
		

		КонецЕсли;
	КонецЕсли;	
	Возврат ТекстЗапроса;
КонецФункции

Функция ПолучитьТекстЗапроса1(ВидЗапроса, ВидСправочника) Экспорт
	Если Не ПараметрыСеанса.ТекущийПользователь.ЭтоРуководитель Тогда
		Возврат ПолучитьТекстЗапросаПодбораСотрудник(ВидСправочника);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидЗапроса) Тогда
		ВидЗапроса = Перечисления.ВидыПодбораОбъектов.ТолькоОбъектыВРаботе;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВидСправочника) Тогда
		ВидСправочника = Перечисления.ВидыСправочникаДляПодбора.ОбъектыВРаботе;
	КонецЕсли;
	
	Если ВидЗапроса = Перечисления.ВидыПодбораОбъектов.ТолькоОбъектыВРаботе Тогда
		Если ВидСправочника = Перечисления.ВидыСправочникаДляПодбора.ОбъектыВРаботе Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ОбъектыВРаботеОстатки.Объект КАК Объект,
			               |	ВЫРАЗИТЬ(ОбъектыВРаботеОстатки.Объект КАК Справочник.Контрагенты) КАК Контрагенты,
			               |	ВЫРАЗИТЬ(ОбъектыВРаботеОстатки.Объект КАК Справочник.ДолговыеОбязательства) КАК ДолговыеОбязательства,
			               |	ВЫРАЗИТЬ(ОбъектыВРаботеОстатки.Объект КАК Справочник.ИсполнительныеДокументы) КАК ИсполнительныеДокументы,
			               |	ОбъектыВРаботеОстатки.Сотрудник КАК Сотрудник,
			               |	ОбъектыВРаботеОстатки.КоличествоОстаток КАК КоличествоОстаток,
			               |	ИСТИНА КАК Пометка
			               |ИЗ
			               |	РегистрНакопления.ОбъектыВРаботе.Остатки(, ) КАК ОбъектыВРаботеОстатки";
		ИначеЕсли ВидСправочника = Перечисления.ВидыСправочникаДляПодбора.ДолговыеОбязательства Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ВЫРАЗИТЬ(ОбъектыВРаботеОстатки.Объект КАК Справочник.ДолговыеОбязательства) КАК ДолговыеОбязательства
			               |ПОМЕСТИТЬ вт
			               |ИЗ
			               |	РегистрНакопления.ОбъектыВРаботе.Остатки(, ) КАК ОбъектыВРаботеОстатки
			               |ГДЕ
			               |	ТИПЗНАЧЕНИЯ(ОбъектыВРаботеОстатки.Объект) = ТИП(Справочник.ДолговыеОбязательства)
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	вт.ДолговыеОбязательства КАК Объект,
			               |	NULL КАК Контрагенты,
			               |	вт.ДолговыеОбязательства КАК ДолговыеОбязательства,
			               |	NULL КАК ИсполнительныеДокументы,
			               |	ИСТИНА КАК Пометка
			               |ИЗ
			               |	вт КАК вт
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Задача.Мероприятие КАК Мероприятие
			               |		ПО вт.ДолговыеОбязательства = Мероприятие.Объект
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсполнительныеДокументы КАК ИсполнительныеДокументы
			               |		ПО вт.ДолговыеОбязательства = ИсполнительныеДокументы.Владелец
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СудебноеДело КАК СудебноеДело
			               |		ПО вт.ДолговыеОбязательства = СудебноеДело.Займ
			               |{ГДЕ
			               |	Мероприятие.Ссылка.* КАК Мероприятие,
			               |	СудебноеДело.Ссылка.* КАК СудебноеДело}";
		ИначеЕсли ВидСправочника = Перечисления.ВидыСправочникаДляПодбора.ИсполнительныеДокументы Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ВЫРАЗИТЬ(ОбъектыВРаботеОстатки.Объект КАК Справочник.ИсполнительныеДокументы) КАК ИсполнительныеДокументы
			               |ПОМЕСТИТЬ вт
			               |ИЗ
			               |	РегистрНакопления.ОбъектыВРаботе.Остатки(, ) КАК ОбъектыВРаботеОстатки
			               |ГДЕ
			               |	ТИПЗНАЧЕНИЯ(ОбъектыВРаботеОстатки.Объект) = ТИП(Справочник.ИсполнительныеДокументы)
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	МАКСИМУМ(ФССП_ИсполнительноеПроизводство.Ссылка) КАК Ссылка,
			               |	вт.ИсполнительныеДокументы КАК ИсполнительныеДокументы
			               |ПОМЕСТИТЬ вт_ИП
			               |ИЗ
			               |	вт КАК вт
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФССП_ИсполнительноеПроизводство КАК ФССП_ИсполнительноеПроизводство
			               |		ПО вт.ИсполнительныеДокументы = ФССП_ИсполнительноеПроизводство.НомерИД
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	вт.ИсполнительныеДокументы
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ФССП_СостояниеИПСрезПоследних.ИП КАК ИП,
			               |	вт_ИП.ИсполнительныеДокументы КАК ИсполнительныеДокументы,
			               |	вт_ИП.ИсполнительныеДокументы КАК Объект,
			               |	вт_ИП.Ссылка.СПИ КАК Реестр_СПИ,
			               |	вт_ИП.Ссылка.ОтделССП КАК Реестр_ОтделССП,
			               |	вт_ИП.Ссылка.НаличиеИП КАК Реестр_НаличиеИП,
			               |	вт_ИП.Ссылка.ОграничениеВыезда КАК Реестр_ОграничениеВыезда,
			               |	вт_ИП.Ссылка.ОтветчикФИО КАК Реестр_ФИООтветчика,
			               |	ФССП_СостояниеИПСрезПоследних.СтатусИП КАК ИсполнительноеПроизводство_Статус,
			               |	ФССП_СостояниеИПСрезПоследних.ОтделСудебныхПриставов КАК ИсполнительноеПроизводство_ОтделСудебныхПриставов,
			               |	ФССП_СостояниеИПСрезПоследних.СудебныйПриставИсполнитель КАК ИсполнительноеПроизводство_СудебныйПриставИсполнитель,
			               |	ФССП_СостояниеИПСрезПоследних.ПричинаОкончания КАК ИсполнительноеПроизводство_ПричинаОкончания,
			               |	ФССП_СостояниеИПСрезПоследних.ДатаОкончания КАК ИсполнительноеПроизводство_ДатаОкончания,
			               |	ФССП_СостояниеИПСрезПоследних.НомерСД КАК ИсполнительноеПроизводство_НомерСД,
			               |	ФССП_СостояниеИПСрезПоследних.ДатаВозбуждения КАК ИсполнительноеПроизводство_ДатаВозбуждения
			               |ИЗ
			               |	вт_ИП КАК вт_ИП
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФССП_СостояниеИП.СрезПоследних КАК ФССП_СостояниеИПСрезПоследних
			               |		ПО вт_ИП.Ссылка = ФССП_СостояниеИПСрезПоследних.ИП";

		КонецЕсли;
		
	ИначеЕсли ВидЗапроса = Перечисления.ВидыПодбораОбъектов.ПолнаяВыгрузка Тогда
		Если ВидСправочника = Перечисления.ВидыСправочникаДляПодбора.ОбъектыВРаботе Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ДолговыеОбязательства.Ссылка КАК Объект,
			               |	NULL КАК Контрагенты,
			               |	ДолговыеОбязательства.Ссылка КАК ДолговыеОбязательства,
			               |	NULL КАК ИсполнительныеДокументы,
			               |	ИСТИНА КАК Пометка
			               |ИЗ
			               |	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	ИсполнительныеДокументы.Ссылка,
			               |	NULL,
			               |	NULL,
			               |	ИсполнительныеДокументы.Ссылка,
			               |	ИСТИНА
			               |ИЗ
			               |	Справочник.ИсполнительныеДокументы КАК ИсполнительныеДокументы";

		ИначеЕсли ВидСправочника = Перечисления.ВидыСправочникаДляПодбора.ДолговыеОбязательства Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ДолговыеОбязательства.Ссылка КАК Объект,
			               |	NULL КАК Контрагенты,
			               |	ДолговыеОбязательства.Ссылка КАК ДолговыеОбязательства,
			               |	NULL КАК ИсполнительныеДокументы,
			               |	ИСТИНА КАК Пометка
			               |ИЗ
			               |	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства";
		ИначеЕсли ВидСправочника = Перечисления.ВидыСправочникаДляПодбора.ИсполнительныеДокументы Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ИсполнительныеДокументы.Ссылка КАК Объект,
			               |	NULL КАК Контрагенты,
			               |	NULL КАК ДолговыеОбязательства,
			               |	ИсполнительныеДокументы.Ссылка КАК ИсполнительныеДокументы,
			               |	ИСТИНА КАК Пометка
			               |ПОМЕСТИТЬ вт
			               |ИЗ
			               |	Справочник.ИсполнительныеДокументы КАК ИсполнительныеДокументы
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	МАКСИМУМ(ФССП_ИсполнительноеПроизводство.Ссылка) КАК Ссылка,
			               |	вт.ИсполнительныеДокументы КАК ИсполнительныеДокументы
			               |ПОМЕСТИТЬ вт_ИП
			               |ИЗ
			               |	вт КАК вт
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФССП_ИсполнительноеПроизводство КАК ФССП_ИсполнительноеПроизводство
			               |		ПО вт.ИсполнительныеДокументы = ФССП_ИсполнительноеПроизводство.НомерИД
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	вт.ИсполнительныеДокументы
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ФССП_СостояниеИПСрезПоследних.ИП КАК ИП,
			               |	вт_ИП.ИсполнительныеДокументы КАК ИсполнительныеДокументы,
			               |	вт_ИП.ИсполнительныеДокументы КАК Объект,
			               |	вт_ИП.Ссылка.СПИ КАК Реестр_СПИ,
			               |	вт_ИП.Ссылка.ОтделССП КАК Реестр_ОтделССП,
			               |	вт_ИП.Ссылка.НаличиеИП КАК Реестр_НаличиеИП,
			               |	вт_ИП.Ссылка.ОграничениеВыезда КАК Реестр_ОграничениеВыезда,
			               |	вт_ИП.Ссылка.ОтветчикФИО КАК Реестр_ФИООтветчика,
			               |	ФССП_СостояниеИПСрезПоследних.СтатусИП КАК ИсполнительноеПроизводство_Статус,
			               |	ФССП_СостояниеИПСрезПоследних.ОтделСудебныхПриставов КАК ИсполнительноеПроизводство_ОтделСудебныхПриставов,
			               |	ФССП_СостояниеИПСрезПоследних.СудебныйПриставИсполнитель КАК ИсполнительноеПроизводство_СудебныйПриставИсполнитель,
			               |	ФССП_СостояниеИПСрезПоследних.ПричинаОкончания КАК ИсполнительноеПроизводство_ПричинаОкончания,
			               |	ФССП_СостояниеИПСрезПоследних.ДатаОкончания КАК ИсполнительноеПроизводство_ДатаОкончания,
			               |	ФССП_СостояниеИПСрезПоследних.НомерСД КАК ИсполнительноеПроизводство_НомерСД,
			               |	ФССП_СостояниеИПСрезПоследних.ДатаВозбуждения КАК ИсполнительноеПроизводство_ДатаВозбуждения
			               |ИЗ
			               |	вт_ИП КАК вт_ИП
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФССП_СостояниеИП.СрезПоследних КАК ФССП_СостояниеИПСрезПоследних
			               |		ПО вт_ИП.Ссылка = ФССП_СостояниеИПСрезПоследних.ИП";
			
			
		КонецЕсли;
		
	ИначеЕсли ВидЗапроса = Перечисления.ВидыПодбораОбъектов.ТолькоОбъектыНеВРаботе Тогда
		Если ВидСправочника = Перечисления.ВидыСправочникаДляПодбора.ОбъектыВРаботе Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ОбъектыВРаботеОстатки.Объект КАК Объект,
			               |	ВЫРАЗИТЬ(ОбъектыВРаботеОстатки.Объект КАК Справочник.Контрагенты) КАК Контрагенты,
			               |	ВЫРАЗИТЬ(ОбъектыВРаботеОстатки.Объект КАК Справочник.ДолговыеОбязательства) КАК ДолговыеОбязательства,
			               |	ВЫРАЗИТЬ(ОбъектыВРаботеОстатки.Объект КАК Справочник.ИсполнительныеДокументы) КАК ИсполнительныеДокументы,
			               |	ОбъектыВРаботеОстатки.Сотрудник КАК Сотрудник,
			               |	ОбъектыВРаботеОстатки.КоличествоОстаток КАК КоличествоОстаток,
			               |	ИСТИНА КАК Пометка
			               |ПОМЕСТИТЬ вт_вработе
			               |ИЗ
			               |	РегистрНакопления.ОбъектыВРаботе.Остатки(, ) КАК ОбъектыВРаботеОстатки
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ДолговыеОбязательства.Ссылка КАК Объект,
			               |	NULL КАК Контрагенты,
			               |	ДолговыеОбязательства.Ссылка КАК ДолговыеОбязательства,
			               |	NULL КАК ИсполнительныеДокументы
			               |ПОМЕСТИТЬ вт_Полная
			               |ИЗ
			               |	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	ИсполнительныеДокументы.Ссылка,
			               |	NULL,
			               |	NULL,
			               |	ИсполнительныеДокументы.Ссылка
			               |ИЗ
			               |	Справочник.ИсполнительныеДокументы КАК ИсполнительныеДокументы
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	вт_Полная.Объект КАК Объект,
			               |	вт_Полная.Контрагенты КАК Контрагенты,
			               |	вт_Полная.ДолговыеОбязательства КАК ДолговыеОбязательства,
			               |	вт_Полная.ИсполнительныеДокументы КАК ИсполнительныеДокументы
			               |ИЗ
			               |	вт_Полная КАК вт_Полная
			               |		ЛЕВОЕ СОЕДИНЕНИЕ вт_вработе КАК вт_вработе
			               |		ПО вт_Полная.Объект = вт_вработе.Объект
			               |ГДЕ
			               |	вт_вработе.Объект ЕСТЬ NULL";
		ИначеЕсли ВидСправочника = Перечисления.ВидыСправочникаДляПодбора.ДолговыеОбязательства Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ВЫРАЗИТЬ(ОбъектыВРаботеОстатки.Объект КАК Справочник.ДолговыеОбязательства) КАК ДолговыеОбязательства
			               |ПОМЕСТИТЬ вт_вработе
			               |ИЗ
			               |	РегистрНакопления.ОбъектыВРаботе.Остатки(, ) КАК ОбъектыВРаботеОстатки
			               |ГДЕ
			               |	ТИПЗНАЧЕНИЯ(ОбъектыВРаботеОстатки.Объект) = ТИП(Справочник.ДолговыеОбязательства)
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	ДолговыеОбязательства.Ссылка КАК Объект,
			               |	NULL КАК Контрагенты,
			               |	ДолговыеОбязательства.Ссылка КАК ДолговыеОбязательства,
			               |	NULL КАК ИсполнительныеДокументы
			               |ПОМЕСТИТЬ вт_Полная
			               |ИЗ
			               |	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	вт_Полная.Объект КАК Объект,
			               |	вт_Полная.Контрагенты КАК Контрагенты,
			               |	вт_Полная.ДолговыеОбязательства КАК ДолговыеОбязательства,
			               |	вт_Полная.ИсполнительныеДокументы КАК ИсполнительныеДокументы
			               |ИЗ
			               |	вт_Полная КАК вт_Полная
			               |		ЛЕВОЕ СОЕДИНЕНИЕ вт_вработе КАК вт_вработе
			               |		ПО вт_Полная.Объект = вт_вработе.ДолговыеОбязательства
			               |ГДЕ
			               |	вт_вработе.ДолговыеОбязательства ЕСТЬ NULL";
		ИначеЕсли ВидСправочника = Перечисления.ВидыСправочникаДляПодбора.ИсполнительныеДокументы Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ВЫРАЗИТЬ(ОбъектыВРаботеОстатки.Объект КАК Справочник.ИсполнительныеДокументы) КАК ИсполнительныеДокументы
			               |ПОМЕСТИТЬ вт_вработе
			               |ИЗ
			               |	РегистрНакопления.ОбъектыВРаботе.Остатки(, ) КАК ОбъектыВРаботеОстатки
			               |ГДЕ
			               |	ТИПЗНАЧЕНИЯ(ОбъектыВРаботеОстатки.Объект) = ТИП(Справочник.ИсполнительныеДокументы)
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	ИсполнительныеДокументы.Ссылка КАК Объект,
			               |	NULL КАК Контрагенты,
			               |	NULL КАК ДолговыеОбязательства,
			               |	ИсполнительныеДокументы.Ссылка КАК ИсполнительныеДокументы
			               |ПОМЕСТИТЬ вт_Полная
			               |ИЗ
			               |	Справочник.ИсполнительныеДокументы КАК ИсполнительныеДокументы
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	вт_Полная.Объект КАК Объект,
			               |	вт_Полная.Контрагенты КАК Контрагенты,
			               |	вт_Полная.ДолговыеОбязательства КАК ДолговыеОбязательства,
			               |	вт_Полная.ИсполнительныеДокументы КАК ИсполнительныеДокументы
			               |ПОМЕСТИТЬ вт
			               |ИЗ
			               |	вт_Полная КАК вт_Полная
			               |		ЛЕВОЕ СОЕДИНЕНИЕ вт_вработе КАК вт_вработе
			               |		ПО вт_Полная.Объект = вт_вработе.ИсполнительныеДокументы
			               |ГДЕ
			               |	вт_вработе.ИсполнительныеДокументы ЕСТЬ NULL
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	МАКСИМУМ(ФССП_ИсполнительноеПроизводство.Ссылка) КАК Ссылка,
			               |	вт.ИсполнительныеДокументы КАК ИсполнительныеДокументы
			               |ПОМЕСТИТЬ вт_ИП
			               |ИЗ
			               |	вт КАК вт
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФССП_ИсполнительноеПроизводство КАК ФССП_ИсполнительноеПроизводство
			               |		ПО вт.ИсполнительныеДокументы = ФССП_ИсполнительноеПроизводство.НомерИД
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	вт.ИсполнительныеДокументы
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ФССП_СостояниеИПСрезПоследних.ИП КАК ИП,
			               |	вт_ИП.ИсполнительныеДокументы КАК ИсполнительныеДокументы,
			               |	вт_ИП.ИсполнительныеДокументы КАК Объект,
			               |	вт_ИП.Ссылка.СПИ КАК Реестр_СПИ,
			               |	вт_ИП.Ссылка.ОтделССП КАК Реестр_ОтделССП,
			               |	вт_ИП.Ссылка.НаличиеИП КАК Реестр_НаличиеИП,
			               |	вт_ИП.Ссылка.ОграничениеВыезда КАК Реестр_ОграничениеВыезда,
			               |	вт_ИП.Ссылка.ОтветчикФИО КАК Реестр_ФИООтветчика,
			               |	ФССП_СостояниеИПСрезПоследних.СтатусИП КАК ИсполнительноеПроизводство_Статус,
			               |	ФССП_СостояниеИПСрезПоследних.ОтделСудебныхПриставов КАК ИсполнительноеПроизводство_ОтделСудебныхПриставов,
			               |	ФССП_СостояниеИПСрезПоследних.СудебныйПриставИсполнитель КАК ИсполнительноеПроизводство_СудебныйПриставИсполнитель,
			               |	ФССП_СостояниеИПСрезПоследних.ПричинаОкончания КАК ИсполнительноеПроизводство_ПричинаОкончания,
			               |	ФССП_СостояниеИПСрезПоследних.ДатаОкончания КАК ИсполнительноеПроизводство_ДатаОкончания,
			               |	ФССП_СостояниеИПСрезПоследних.НомерСД КАК ИсполнительноеПроизводство_НомерСД,
			               |	ФССП_СостояниеИПСрезПоследних.ДатаВозбуждения КАК ИсполнительноеПроизводство_ДатаВозбуждения
			               |ИЗ
			               |	вт_ИП КАК вт_ИП
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФССП_СостояниеИП.СрезПоследних КАК ФССП_СостояниеИПСрезПоследних
			               |		ПО вт_ИП.Ссылка = ФССП_СостояниеИПСрезПоследних.ИП";
		
		КонецЕсли;
	КонецЕсли;	
	Возврат ТекстЗапроса;
КонецФункции

Функция ПолучитьТекстЗапросаПодбораСотрудник(ВидСправочника)
	Если ВидСправочника = Перечисления.ВидыСправочникаДляПодбора.ДолговыеОбязательства Тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ДолговыеОбязательства.Ссылка КАК Объект,
		               |	ДолговыеОбязательства.Ссылка КАК ДолговыеОбязательства
		               |ИЗ
		               |	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства";
	ИначеЕсли ВидСправочника = Перечисления.ВидыСправочникаДляПодбора.ИсполнительныеДокументы Тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ИсполнительныеДокументы.Ссылка КАК Объект,
		               |	ИсполнительныеДокументы.Ссылка КАК ИсполнительныеДокументы
		               |ИЗ
		               |	Справочник.ИсполнительныеДокументы КАК ИсполнительныеДокументы";
	ИначеЕсли ВидСправочника = Перечисления.ВидыСправочникаДляПодбора.СудебныеДела Тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	СудебноеДело.Ссылка КАК Объект,
		               |	СудебноеДело.Ссылка КАК СудебныеДела
		               |ИЗ
		               |	Документ.СудебноеДело КАК СудебноеДело";
	ИначеЕсли ВидСправочника = Перечисления.ВидыСправочникаДляПодбора.ИсполнительныеПроизводства Тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ФССП_ИсполнительноеПроизводство.Ссылка КАК Объект,
		               |	ФССП_ИсполнительноеПроизводство.Ссылка КАК ИсполнительныеПроизводства
		               |ИЗ
		               |	Справочник.ФССП_ИсполнительноеПроизводство КАК ФССП_ИсполнительноеПроизводство";
	КонецЕсли;
	Возврат ТекстЗапроса;
КонецФункции
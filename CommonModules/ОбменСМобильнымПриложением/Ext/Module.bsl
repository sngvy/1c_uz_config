Функция ПолучитьПрефиксНомера() Экспорт
	
	Возврат ПланыОбмена.Мобильные.ЭтотУзел().Код + "-";
	
КонецФункции

Процедура ЗарегистрироватьИзмененияДанных(УзелОбмена) Экспорт

	СоставПланаОбмена = УзелОбмена.Метаданные().Состав;
	Для Каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена,ЭлементСоставаПланаОбмена.Метаданные);
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьПакетОбмена(УзелОбмена) Экспорт
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	 	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбмена);	
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/data");
	
	
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбмена, ЗаписьСообщения.НомерСообщения);
	ВыборкаМероприятий = новый Массив;
	ВыборкаФайлов = новый массив;

	ОбъектыВРаботеСотрудника = ПолучитьТаблицуРегистрируемыхОбъектов(УзелОбмена.ОтветственныйВыезднойСотрудник);
	МаршрутыСотрудника = ПолучитьТаблицуМаршрутов(УзелОбмена.ОтветственныйВыезднойСотрудник);
	ОтсутствияСотрудника  = ПолучитьТаблицуОтсутствий(УзелОбмена.ОтветственныйВыезднойСотрудник);
	ОбещанныеПлатежиСотрудника = ПолучитьТаблицуОбещанныхПлатежей(ОбъектыВРаботеСотрудника);
	МероприятияСотрудника = ПолучитьТаблицуМероприятий(УзелОбмена.ОтветственныйВыезднойСотрудник,ОбъектыВРаботеСотрудника);
	ТипыМероприятий = ПолучитьТаблицуТиповМероприятий(МероприятияСотрудника);
	РезультатыМероприятий = ПолучитьТаблицуРезультатов(ТипыМероприятий);
	ПрикрепляемыеФайлы = ПолучитьТаблицуПрикрепляемыхФайлов(ОбъектыВРаботеСотрудника);
	Пока ВыборкаИзменений.Следующий() Цикл
		Данные = ВыборкаИзменений.Получить();
		РучноеУдаление = Ложь;
		Если Не НуженПереносДанных(Данные,УзелОбмена,ОбъектыВРаботеСотрудника,МаршрутыСотрудника,ОтсутствияСотрудника,ОбещанныеПлатежиСотрудника,МероприятияСотрудника,ТипыМероприятий,РезультатыМероприятий,ПрикрепляемыеФайлы) Тогда
			УдалениеДанных(Данные,ЗаписьXML,РучноеУдаление);
		КонецЕсли;
		Если Не РучноеУдаление Тогда  
			Если ТипЗнч(Данные) = Тип("ЗадачаОбъект.Мероприятие") Тогда
				ВыборкаМероприятий.Добавить(Данные);
			ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ПрикрепитьФайлы")  Тогда
				ВыборкаФайлов.Добавить(Данные);
			Иначе	
				ЗаписатьДанные(ЗаписьXML, Данные);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Эл Из ВыборкаФайлов Цикл
		ЗаписатьДанные(ЗаписьXML, Эл);
	КонецЦикла;	

	
	Для Каждого Эл Из ВыборкаМероприятий Цикл
		ЗаписатьДанные(ЗаписьXML, Эл);
	КонецЦикла;	
		
	ЗаписьСообщения.ЗакончитьЗапись();
	
	Возврат Новый ХранилищеЗначения(ЗаписьXML.Закрыть(), Новый СжатиеДанных(9));
КонецФункции

Процедура ЗаписатьДанные(ЗаписьXML, Данные) Экспорт
	Если ТипЗнч(Данные) = Тип("СправочникОбъект.ДолговыеОбязательства") Тогда
		// Записываем элемент справочника вручную.		
		ЗаписатьXMLДолговыеОбязательства(ЗаписьXML, Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Контрагенты") Тогда
		// Записываем элемент справочника вручную.
		ЗаписатьXMLКонтрагенты(ЗаписьXML, Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ЮрФизЛицо") Тогда
		// Записываем элемент справочника вручную.
		ЗаписатьXMLЮрФизЛицо(ЗаписьXML, Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ТипыДолговыхОбязательств") Тогда
		// Записываем элемент справочника вручную.
		ЗаписатьXMLТипыДО(ЗаписьXML, Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Категории") Тогда
		// Записываем элемент справочника вручную.
		ЗаписатьXMLКатегории(ЗаписьXML, Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("ЗадачаОбъект.Мероприятие") Тогда
		// Записываем элемент справочника вручную.
		ЗаписатьXMLМероприятие(ЗаписьXML, Данные);	
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ТипыМероприятий") Тогда
		// Записываем элемент справочника вручную.
		ЗаписатьXMLТипыМероприятий(ЗаписьXML, Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.РезультатыМероприятий") Тогда
		// Записываем элемент справочника вручную.
		ЗаписатьXMLРезультаты(ЗаписьXML, Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ПрикрепитьФайлы") Тогда
		// Записываем элемент справочника вручную.
		ЗаписатьXMLФайлы(ЗаписьXML, Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ОбещанныеПлатежи") Тогда
		// Записываем элемент справочника вручную.
		ЗаписатьXMLОбещанныеПлатежи(ЗаписьXML, Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ЧекЛистыМероприятий") Тогда
		// Записываем элемент справочника вручную.
		ЗаписатьXMLЧеклисты(ЗаписьXML, Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ТипыПрикрепляемыхФайлов") Тогда
		// Записываем элемент справочника вручную.
		ЗаписатьXMLТипыПрикрепляемыхФайлов(ЗаписьXML, Данные);	
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ТрекСотрудника") Тогда
		// Записываем элемент справочника вручную.
		ЗаписатьXMLТрекСотрудника(ЗаписьXML, Данные);	
	Иначе	
		// Записываем данные с помощью стандартного метода.
		ЗаписатьXML(ЗаписьXML, Данные);
	КонецЕсли;

КонецПроцедуры

Процедура ПринятьПакетОбмена(УзелОбмена, ДанныеОбмена) Экспорт
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ДанныеОбмена.Получить());
	
	////ТД = новый ТекстовыйДокумент();
	////ТД.Прочитать("C:\Users\LAD\Desktop\mess.txt");
	////ТД.Очистить();
	////ТД.УстановитьТекст(ДанныеОбмена.Получить());
	////ТД.Записать("C:\Users\LAD\Desktop\mess.txt");
	//
	//ЧтениеXML.УстановитьСтроку(ДанныеОбмена);	
	//
	АвторИсполнитель = УзелОбмена.ОтветственныйВыезднойСотрудник;
	СсылкаМП = "";
	
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();	
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);	
	ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
	НачатьТранзакцию();	
	
	Пока ВозможностьЧтенияДанных(ЧтениеXML) Цикл
		Данные = ПрочитатьДанные(ЧтениеXML,АвторИсполнитель,СсылкаМП);
		Если Не Данные = Неопределено Тогда
			
			// Не переносим изменение, полученное от планшета, если есть регистрация изменения в офисе.
			Если Не ПринятьИзменения(ЧтениеСообщения.Отправитель, Данные) Тогда
				Возврат;	
			КонецЕсли;
			
			Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
			Данные.ОбменДанными.Загрузка = Истина;	
			Если ТипЗнч(Данные) = Тип("ДокументОбъект.ПрикрепитьФайлы") или ТипЗнч(Данные) = Тип("ДокументОбъект.ОбещанныеПлатежи") Тогда
				//Данные.Записать();
				Данные.ОбменДанными.Загрузка = Ложь;
				Если ТипЗнч(Данные) = Тип("ДокументОбъект.ПрикрепитьФайлы") Тогда
					Данные.Движения.ПрикрепляемыеФайлы.Записывать = Истина;
				КонецЕсли;	
				Данные.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				Если ТипЗнч(Данные) = Тип("ДокументОбъект.ПрикрепитьФайлы") Тогда
					ЗаписатьСсылкуИзМобильногоПриложения(Данные.Ссылка,СсылкаМП);
				КонецЕсли;	
			ИначеЕсли
				ТипЗнч(Данные) = Тип("ЗадачаОбъект.Мероприятие") Тогда
				Отказ = Ложь;
				Если Данные.Выполнена Тогда
					Данные.ВыполнитьМероприятие(Отказ);
				КонецЕсли;
				Данные.Записать();
				ЗаписатьСсылкуИзМобильногоПриложения(Данные.Ссылка,СсылкаМП);
			ИначеЕсли
				ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ТрекСотрудника") Тогда
				Данные.Записать();
			Иначе	
				Данные.Записать();	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	ЧтениеСообщения.ЗакончитьЧтение();
	ЧтениеXML.Закрыть();	
КонецПроцедуры

Функция ПрочитатьДанные(ЧтениеXML,ПользовательУЗ,СсылкаМП) Экспорт	
	ТипXML = ПолучитьXMLТип(ЧтениеXML);	
	Если ТипXML = Неопределено Тогда	
		Возврат Неопределено;
	КонецЕсли;	
	
	Если ТипXML.ИмяТипа = "CatalogObject.ДолговыеОбязательства" Тогда
		Возврат ПрочитатьXMLДолговыеОбязательства(ЧтениеXML);	
	КонецЕсли;
	
	Если ТипXML.ИмяТипа = "CatalogObject.Контрагенты" Тогда
		Возврат ПрочитатьXMLКонтрагенты(ЧтениеXML);
	КонецЕсли;
	
	Если ТипXML.ИмяТипа = "CatalogObject.ЮрФизЛицо" Тогда
		Возврат ПрочитатьXMLЮрФизЛицо(ЧтениеXML);
	КонецЕсли;	
	
	Если ТипXML.ИмяТипа = "CatalogObject.ТипыДолговыхОбязательств" Тогда	
		Возврат ПрочитатьXMLТипыДолговыхОбязательств(ЧтениеXML);
	КонецЕсли;
	
	Если ТипXML.ИмяТипа = "CatalogObject.Категории" Тогда	
		Возврат ПрочитатьXMLКатегории(ЧтениеXML);
	КонецЕсли;
	
	Если ТипXML.ИмяТипа = "CatalogObject.РезультатыМероприятий" Тогда	
		Возврат ПрочитатьXMLРезультаты(ЧтениеXML);
	КонецЕсли;
	
	Если ТипXML.ИмяТипа = "Мероприятие" Тогда
		Возврат ПрочитатьXMLМероприятие(ЧтениеXML,ПользовательУЗ,СсылкаМП);
	КонецЕсли;
	
	Если ТипXML.ИмяТипа = "CatalogObject.ТипыМероприятий" Тогда
		Возврат ПрочитатьXMLТипыМероприятий(ЧтениеXML);
	КонецЕсли;
	
	Если ТипXML.ИмяТипа = "ПрикрепитьФайлы" Тогда
		Возврат ПрочитатьXMLФайлы(ЧтениеXML,ПользовательУЗ,СсылкаМП);
	КонецЕсли;

	Если ТипXML.ИмяТипа = "DocumentObject.ОбещанныеПлатежи" Тогда
		Возврат ПрочитатьXMLОбещанныеПлатежи(ЧтениеXML,ПользовательУЗ);
	КонецЕсли;
	
	Если ТипXML.ИмяТипа = "ТрекиСотрудника" Тогда
		Возврат ПрочитатьXMLТрекСотрудника(ЧтениеXML,ПользовательУЗ);
	КонецЕсли;
	
	Если ТипXML.ИмяТипа = "CatalogObject.ЧекЛистыМероприятий" Тогда
		Возврат ПрочитатьXMLЧекЛист(ЧтениеXML);
	КонецЕсли;
	
	Если ТипXML.ИмяТипа = "CatalogObject.ТипыПрикрепляемыхФайлов" Тогда
		Возврат ПрочитатьXMLТипПрикрепляемыхФайлов(ЧтениеXML);
	КонецЕсли;
	

	// Пытаемся прочесть значение из объекта ЧтениеXML стандартным образом.	
	Возврат ПрочитатьXML(ЧтениеXML);
КонецФункции 

Функция ПринятьИзменения(Отправитель, Данные) Экспорт	
	Прием = Истина;	
	//Если НЕ ПланыОбмена.ИзменениеЗарегистрировано(Отправитель, Данные) Тогда
	//	Прием = Ложь;
	//КонецЕсли;
	Возврат Прием;
КонецФункции

Функция ВозможностьЧтенияДанных(ЧтениеXML) Экспорт
	 	
	ТипXML = ПолучитьXMLТип(ЧтениеXML);
	
	Если ТипXML = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Если ТипXML.ИмяТипа = "Мероприятие" или  ТипXML.ИмяТипа = "ПрикрепитьФайлы" или ТипXML.ИмяТипа = "ТрекиСотрудника" Тогда
			Возврат Истина;
		Иначе
			Возврат ВозможностьЧтенияXML(ЧтениеXML);
		КонецЕсли;
	КонецЕсли;		
	
КонецФункции


Функция НуженПереносДанных(Данные, УзелОбмена, ОбъектыВРаботеСотрудника, МаршрутыСотрудника,ОтсутствияСотрудника,
							ОбещанныеПлатежиСотрудника,МероприятияСотрудника,ТипыМероприятий,РезультатыМероприятий,ПрикрепляемыеФайлы) Экспорт
	Перенос = Истина;
	
	Если ТипЗнч(Данные) = Тип("СправочникОбъект.ДолговыеОбязательства") Тогда
		ЕстьВТаблицеОбъектов = ОбъектыВРаботеСотрудника.Найти(Данные.Ссылка,"Объект");
		Если Не УзелОбмена.ОтветственныйВыезднойСотрудник.Пустая() и ЕстьВТаблицеОбъектов = Неопределено Тогда
			Перенос = Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Контрагенты") Тогда
		ЕстьВТаблицеОбъектов = ОбъектыВРаботеСотрудника.Найти(Данные.Ссылка,"Объект,Кредитор,Контрагент,Должник");
		Если Не УзелОбмена.ОтветственныйВыезднойСотрудник.Пустая() и ЕстьВТаблицеОбъектов = Неопределено Тогда
			Перенос = Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Маршруты") Тогда 
		ЕстьВТаблицеМаршуртов = МаршрутыСотрудника.Найти(Данные.Ссылка,"Ссылка");
		Если Не УзелОбмена.ОтветственныйВыезднойСотрудник.Пустая() и ЕстьВТаблицеМаршуртов = Неопределено Тогда
			Перенос = Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ОтсутствиеСотрудника") Тогда
		ЕстьВТаблицеОтсутствий = ОтсутствияСотрудника.Найти(Данные.Ссылка,"Ссылка");
		Если Не УзелОбмена.ОтветственныйВыезднойСотрудник.Пустая() и ЕстьВТаблицеОтсутствий = Неопределено Тогда
			Перенос = Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ОбещанныеПлатежи") Тогда
		ЕстьВТаблицеОбещанныхПлатежей = ОбещанныеПлатежиСотрудника.Найти(Данные.Ссылка,"Ссылка");
		Если Не УзелОбмена.ОтветственныйВыезднойСотрудник.Пустая() и ЕстьВТаблицеОбещанныхПлатежей = Неопределено Тогда
			Перенос = Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.КонтактныеЛицаПоДолжнику") Тогда
		ЕстьВТаблицеОбъектов = ОбъектыВРаботеСотрудника.Найти(Данные.Ссылка.Владелец,"Объект,Кредитор,Контрагент,Должник");
		Если Не УзелОбмена.ОтветственныйВыезднойСотрудник.Пустая() и ЕстьВТаблицеОбъектов = Неопределено Тогда
			Перенос = Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ТрекСотрудника") Тогда
		Перенос = Истина;
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрНакопленияНаборЗаписей.СобытияПоОбъектам") Тогда
		Если ОбещанныеПлатежиСотрудника = Неопределено Тогда
			Перенос = Ложь;
		Иначе
			Перенос = Ложь;
			Для Каждого ОбПлатеж из ОбещанныеПлатежиСотрудника Цикл
				НаборЗаписей = Данные;
				Если НаборЗаписей.Отбор.Регистратор.Значение = ОбПлатеж.Ссылка Тогда
					Перенос = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Данные) = Тип("ЗадачаОбъект.Мероприятие") Тогда
		ЕстьВТаблицеЗадач = МероприятияСотрудника.Найти(Данные.Ссылка,"Ссылка");
		Если Не УзелОбмена.ОтветственныйВыезднойСотрудник.Пустая() и ЕстьВТаблицеЗадач = Неопределено Тогда
			Перенос = Ложь;
		КонецЕсли;		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ТипыМероприятий") Тогда
		ЕстьВТаблицеТипов = ТипыМероприятий.Найти(Данные.Ссылка,"Ссылка");
		Если Не УзелОбмена.ОтветственныйВыезднойСотрудник.Пустая() и ЕстьВТаблицеТипов = Неопределено Тогда
			Перенос = Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.РезультатыМероприятий") Тогда
		ЕстьВТаблицеРезультатов = РезультатыМероприятий.Найти(Данные.Ссылка,"Ссылка");
		Если Не УзелОбмена.ОтветственныйВыезднойСотрудник.Пустая() и ЕстьВТаблицеРезультатов = Неопределено Тогда
			Перенос = Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ПрикрепитьФайлы") Тогда
		ЕстьВТаблицеФайлов = ПрикрепляемыеФайлы.Найти(Данные.Ссылка,"Ссылка");
		Если Не УзелОбмена.ОтветственныйВыезднойСотрудник.Пустая() и ЕстьВТаблицеФайлов = Неопределено Тогда
			Перенос = Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
		Если ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.ПрикрепитьФайлы") ИЛИ ТипЗнч(Данные.Ссылка) = Тип("ЗадачаСсылка.Мероприятие") Тогда
			Перенос = Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	
	Возврат Перенос;
	                                     
КонецФункции

Процедура УдалениеДанных(Данные,ЗаписьXML,РучноеУдаление) Экспорт
	// Получаем объект описания метаданного, соответствующий данным.
	ОбъектМетаданных = ?(ТипЗнч(Данные) = Тип("УдалениеОбъекта"), Данные.Ссылка.Метаданные(), Данные.Метаданные());
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных) ИЛИ Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		// Перенос удаления объекта для объектных.
		Если ОбъектМетаданных.Синоним = "Прикрепить файлы" Тогда
			ЗаписатьУдалениеПрикрепитьФайлы(Данные.Ссылка,ЗаписьXML);
			РучноеУдаление = Истина;
		Иначе
			Данные = Новый УдалениеОбъекта(Данные.Ссылка);
		КонецЕсли;	
	ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
		ЗаписатьУдалениеМероприятие(Данные.Ссылка,ЗаписьXML);
		РучноеУдаление = Истина;
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) ИЛИ Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
		// Очищаем данные.
		Данные.Очистить();
	КонецЕсли;
КонецПроцедуры


Функция ПолучитьТаблицуРегистрируемыхОбъектов(Ответственный) Экспорт
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//                      |	ОбъектыВРаботеОстатки.Объект КАК Объект
	//                      |ИЗ
	//                      |	РегистрНакопления.ОбъектыВРаботе.Остатки КАК ОбъектыВРаботеОстатки
	//                      |ГДЕ
	//                      |	ОбъектыВРаботеОстатки.Сотрудник = &Сотрудник");
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОбъектыВРаботеОстатки.Объект КАК Объект,
	                      |	ЕСТЬNULL(ДолговыеОбязательства.Контрагент, ""Нет"") КАК Контрагент,
	                      |	ЕСТЬNULL(ДолговыеОбязательства.Кредитор, ""Нет"") КАК Кредитор,
	                      |	ЕСТЬNULL(ДолговыеОбязательства.Должник, ""Нет"") КАК Должник
	                      |ИЗ
	                      |	РегистрНакопления.ОбъектыВРаботе.Остатки(, Сотрудник = &Сотрудник) КАК ОбъектыВРаботеОстатки
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	                      |		ПО ОбъектыВРаботеОстатки.Объект = ДолговыеОбязательства.Ссылка");
	Запрос.УстановитьПараметр("Сотрудник",Ответственный);
	//Результат = Запрос.Выполнить().Выбрать();
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат; 
	
КонецФункции

Функция ПолучитьТаблицуМаршрутов(Ответственный) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Маршруты.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.Маршруты КАК Маршруты
	                      |ГДЕ
	                      |	Маршруты.ПометкаУдаления = ЛОЖЬ
	                      |	И Маршруты.Сотрудник = &Сотрудник");
	Запрос.УстановитьПараметр("Сотрудник",Ответственный);
	//Результат = Запрос.Выполнить().Выбрать();
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат; 
КонецФункции

Функция ПолучитьТаблицуОтсутствий(Ответственный) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОтсутствиеСотрудника.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.ОтсутствиеСотрудника КАК ОтсутствиеСотрудника
	                      |ГДЕ
	                      |	ОтсутствиеСотрудника.ПометкаУдаления = ЛОЖЬ
	                      |	И ОтсутствиеСотрудника.Проведен = ИСТИНА
	                      |	И ОтсутствиеСотрудника.Сотрудник = &Сотрудник");
	Запрос.УстановитьПараметр("Сотрудник",Ответственный);
	//Результат = Запрос.Выполнить().Выбрать();
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат; 
КонецФункции

Функция ПолучитьТаблицуОбещанныхПлатежей(ОбъектыОтветственного) Экспорт
	//Если ОбъектыОтветственного = Неопределено Тогда
	//	Возврат Неопределено;
	//КонецЕсли;	
	//МассивОбъектов = Новый Массив;
	//Пока ОбъектыОтветственного.Следующий() Цикл
	//	 МассивОбъектов.Добавить(ОбъектыОтветственного.Объект);
	//КонецЦикла; 
		
	МассивОбъектов = ОбъектыОтветственного.ВыгрузитьКолонку("Объект");
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОбещанныеПлатежи.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.ОбещанныеПлатежи КАК ОбещанныеПлатежи
	                      |ГДЕ
	                      |	ОбещанныеПлатежи.Объект В(&СписокОбъектов)");
	Запрос.УстановитьПараметр("СписокОбъектов",МассивОбъектов);
	//Результат = Запрос.Выполнить().Выбрать();
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат; 
КонецФункции

Функция ПолучитьТаблицуМероприятий(Ответственный,ОбъектыОтветственного) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ Различные
	                      |	ОтветственныеСотрудники.ТипСотрудника КАК ТипСотрудника
	                      |ИЗ
	                      |	РегистрСведений.ОтветственныеСотрудники КАК ОтветственныеСотрудники
	                      |ГДЕ
	                      |	ОтветственныеСотрудники.Объект В(&Объект)
	                      |	И ОтветственныеСотрудники.Пользователь = &Пользователь");
	Запрос.УстановитьПараметр("Пользователь",Ответственный);
	Запрос.УстановитьПараметр("Объект",ОбъектыОтветственного);
	ТипыОтветственного = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТипСотрудника");
	ТипыОтветственного.Добавить(Ответственный);	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Мероприятие.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Задача.Мероприятие КАК Мероприятие
	                      |ГДЕ
	                      |	Мероприятие.Объект В(&Объект)
	                      |	И НЕ Мероприятие.ПометкаУдаления
	                      |	И Мероприятие.Ответственный В(&Ответственный)");
	Запрос.УстановитьПараметр("Ответственный",ТипыОтветственного);
	Запрос.УстановитьПараметр("Объект",ОбъектыОтветственного);
	//Результат = Запрос.Выполнить().Выбрать();
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат; 
КонецФункции

Функция ПолучитьТаблицуТиповМероприятий(Мероприятия) Экспорт
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("Ссылка");
	Для каждого Мероприятие из Мероприятия Цикл
		Нстр = Результат.Добавить();
		Нстр.Ссылка = Мероприятие.Ссылка.ТипМероприятия;
	КонецЦикла;	
	Возврат Результат; 
КонецФункции

Функция ПолучитьТаблицуРезультатов(ТипыМероприятий) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РезультатыМероприятий.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.РезультатыМероприятий КАК РезультатыМероприятий
	                      |ГДЕ
	                      |	РезультатыМероприятий.Владелец В(&Владелец)");
	Запрос.УстановитьПараметр("Владелец",ТипыМероприятий);
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат; 	 
КонецФункции

Функция ПолучитьТаблицуПрикрепляемыхФайлов(ОбъектыОтветственного) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПрикрепитьФайлы.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.ПрикрепитьФайлы КАК ПрикрепитьФайлы
	                      |ГДЕ
	                      |	ПрикрепитьФайлы.Объект В(&Объект)");
	Запрос.УстановитьПараметр("Объект",ОбъектыОтветственного);
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат; 	 
КонецФункции

Функция ПолучитьТаблицуПрикрепляемыхФайловВыезда(ОбъектыОтветственного,ТипыФайлов) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрикрепитьФайлыФайлы.Ссылка КАК Ссылка,
		|	КОЛИЧЕСТВО(ПрикрепитьФайлыФайлы.НомерСтроки) КАК КоличествоФайловДокумента
		|ПОМЕСТИТЬ КоличествоФайлов
		|ИЗ
		|	Документ.ПрикрепитьФайлы.Файлы КАК ПрикрепитьФайлыФайлы
		|ГДЕ
		|	ПрикрепитьФайлыФайлы.Ссылка.Объект В (&Объект)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПрикрепитьФайлыФайлы.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КоличествоФайлов.Ссылка КАК Ссылка
		|ИЗ
		|	КоличествоФайлов КАК КоличествоФайлов
		|ГДЕ
		|	КоличествоФайлов.КоличествоФайловДокумента = 1
		|	И КоличествоФайлов.Ссылка.Файлы.ТипФайла В (&ТипФайла)";
	
	Запрос.УстановитьПараметр("Объект", ОбъектыОтветственного);
	Запрос.УстановитьПараметр("ТипФайла", ТипыФайлов);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат; 	 
КонецФункции


Функция ПолучитьРеквизитыТипаМероприятия(ТипМероприятия) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТипыВыездныхМероприятий.ВыездноеМероприятие КАК ВыездноеМероприятие,
	                      |	ТипыВыездныхМероприятий.КнопкаЗаписиВидео КАК КнопкаЗаписиВидео,
	                      |	ТипыВыездныхМероприятий.КнопкаЗаписиАудио КАК КнопкаЗаписиАудио,
	                      |	ТипыВыездныхМероприятий.КнопкаФото КАК КнопкаФото,
	                      |	ТипыВыездныхМероприятий.КнопкаГеопозиции КАК КнопкаГеопозиции,
	                      |	ТипыВыездныхМероприятий.ТипАдресаВыезда КАК ТипАдресаВыезда
	                      |ИЗ
	                      |	РегистрСведений.ТипыВыездныхМероприятий КАК ТипыВыездныхМероприятий
	                      |ГДЕ
	                      |	ТипыВыездныхМероприятий.ТипМероприятия = &ТипМероприятия");
	Запрос.УстановитьПараметр("ТипМероприятия",ТипМероприятия);
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат; 	 
КонецФункции



Процедура ЗаписатьXMLДолговыеОбязательства(ЗаписьXML, ДолговоеОбязательство) Экспорт
	
	// Записываем начало элемента XML.
	ЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.ДолговыеОбязательства");
	// Ссылка.
	ЗаписатьXML(ЗаписьXML, ДолговоеОбязательство.Ссылка, "Ref", НазначениеТипаXML.Явное);
	//ЗаписатьXML(ЗаписьXML, ДолговоеОбязательство.Код, "Code", НазначениеТипаXML.Явное);
	// ЭтоГруппа.
	//ЗаписатьXML(ЗаписьXML, ДолговоеОбязательство.ЭтоГруппа, "IsFolder", НазначениеТипаXML.Явное);	
	// Наименование.
	ЗаписатьXML(ЗаписьXML, ДолговоеОбязательство.Наименование, "Description", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ДолговоеОбязательство.ТипДолговогоОбязательства, "ТипДолговогоОбязательства", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ДолговоеОбязательство.Должник, "Должник", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ДолговоеОбязательство.Контрагент, "Контрагент", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ДолговоеОбязательство.Кредитор, "Кредитор", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ДолговоеОбязательство.ДатаСоздания, "ДатаСоздания", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ДолговоеОбязательство.КодДО, "КодДО", НазначениеТипаXML.Явное);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ЗаписатьXMLКонтрагенты(ЗаписьXML, Контрагент) Экспорт
	// Записываем начало элемента XML.
	ЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.Контрагенты");
	// Ссылка.
	ЗаписатьXML(ЗаписьXML, Контрагент.Ссылка, "Ref", НазначениеТипаXML.Явное);
	// ЭтоГруппа.
	ЗаписатьXML(ЗаписьXML, Контрагент.ЭтоГруппа, "IsFolder", НазначениеТипаXML.Явное);	
	// Родитель.
	ЗаписатьXML(ЗаписьXML, Контрагент.Родитель, "Parent", НазначениеТипаXML.Явное);
	//ЗаписатьXML(ЗаписьXML, Контрагент.Код, "Code", НазначениеТипаXML.Явное);

	// Наименование.
	ЗаписатьXML(ЗаписьXML, Контрагент.Наименование, "Description", НазначениеТипаXML.Явное);
	Если Не Контрагент.ЭтоГруппа Тогда
		ЗаписатьXML(ЗаписьXML, Контрагент.ЮрФизЛицо, "ЮрФизЛицо", НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, Контрагент.КодКонтрагента, "КодКонтрагента", НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, Контрагент.ОтзывПерсональныхДанных, "ОтзывПерсональныхДанных", НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, Контрагент.ЧасовойПояс, "ЧасовойПояс", НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, Контрагент.ДатаСоздания, "ДатаСоздания", НазначениеТипаXML.Явное);
		
		//ЗаписатьXML(ЗаписьXML, Контрагент.Телефоны, "Телефоны", НазначениеТипаXML.Явное);
		ТЧ = Контрагент.Метаданные().ТабличныеЧасти.Телефоны;
		ЗаписьXML.ЗаписатьНачалоЭлемента("ТабличнаяЧасть");
		ЗаписьXML.ЗаписатьАтрибут("Имя", ТЧ.Имя);
		Попытка
			Для Каждого СтрокаТЧ из Контрагент[ТЧ.Имя] Цикл
				ЗаписьXML.ЗаписатьНачалоЭлемента("Row");
				Для Каждого РеквизитТЧ Из ТЧ.Реквизиты Цикл
					ЗаписьXML.ЗаписатьНачалоЭлемента("Реквизит");
					ЗаписьXML.ЗаписатьАтрибут("Имя", РеквизитТЧ.Имя);
					ТипЗначения = ТипЗнч(СтрокаТЧ[РеквизитТЧ.Имя]);
					Если Не ТипЗначения = Тип("Неопределено") Тогда
						ЗаписьXML.ЗаписатьАтрибут("ИмяТипа", XMLТип(ТипЗначения).ИмяТипа);
						ЗаписьXML.ЗаписатьАтрибут("URI", XMLТип(ТипЗначения).URIПространстваИмен);
					КонецЕсли;
					ЗаписьXML.ЗаписатьТекст(XMLСтрока(СтрокаТЧ[РеквизитТЧ.Имя]));
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЦикла;
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЦикла;
		Исключение
			ЗаписьXML.ЗаписатьНачалоЭлемента("Row");
			ЗаписьXML.ЗаписатьКонецЭлемента();			
		КонецПопытки;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	// Записываем конец элемента.
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ЗаписатьXMLЮрФизЛицо(ЗаписьXML, ЮрФизЛицо) Экспорт
	
	// Записываем начало элемента XML.
	ЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.ЮрФизЛицо");
	// Ссылка.
	ЗаписатьXML(ЗаписьXML, ЮрФизЛицо.Ссылка, "Ref", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ЮрФизЛицо.Наименование, "Description", НазначениеТипаXML.Явное);
	
	// Записываем конец элемента.
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ЗаписатьXMLКатегории(ЗаписьXML, Категория) Экспорт
	
	// Записываем начало элемента XML.
	ЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.Категории");
	// Ссылка.
	ЗаписатьXML(ЗаписьXML, Категория.Ссылка, "Ref", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, Категория.Наименование, "Description", НазначениеТипаXML.Явное);
	
	// Записываем конец элемента.
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ЗаписатьXMLТипыДО(ЗаписьXML, ТипДО) Экспорт
	
	// Записываем начало элемента XML.
	ЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.ТипыДолговыхОбязательств");
	// Ссылка.
	ЗаписатьXML(ЗаписьXML, ТипДО.Ссылка, "Ref", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ТипДО.Наименование, "Description", НазначениеТипаXML.Явное);

	
	// Записываем конец элемента.
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ЗаписатьXMLРезультаты(ЗаписьXML, Результат) Экспорт
	
	// Записываем начало элемента XML.
	ЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.РезультатыМероприятий");
	// Ссылка.
	ЗаписатьXML(ЗаписьXML, Результат.Ссылка, "Ref", НазначениеТипаXML.Явное);
	
	ЗаписатьXML(ЗаписьXML, Результат.Наименование, "Description", НазначениеТипаXML.Явное);
	
	ЗаписатьXML(ЗаписьXML, Результат.ПрикрепитьФайл, "ПрикрепитьФайл", НазначениеТипаXML.Явное);
	
	ЗаписатьXML(ЗаписьXML, Результат.СвязанныйДокумент, "СвязанныйДокумент", НазначениеТипаXML.Явное);
	
	ЗаписатьXML(ЗаписьXML, Результат.ЗаполнитьКомментарий, "ЗаполнитьКомментарий", НазначениеТипаXML.Явное);
	
	ЗаписатьXML(ЗаписьXML, Результат.РезультативныйКонтакт, "РезультативныйКонтакт", НазначениеТипаXML.Явное);
	
	ЗаписатьXML(ЗаписьXML, Результат.ТипФайла, "ТипФайла", НазначениеТипаXML.Явное);
	
	ЗаписатьXML(ЗаписьXML, Результат.ПрикреплятьФайлВМероприятие, "ПрикреплятьФайлВМероприятие", НазначениеТипаXML.Явное);
	
	ЗаписатьXML(ЗаписьXML, Результат.Владелец, "Owner", НазначениеТипаXML.Явное);

	
	// Записываем конец элемента.
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ЗаписатьXMLМероприятие(ЗаписьXML, Мероприятие) Экспорт
	ЗаписьXML.ЗаписатьНачалоЭлемента("Мероприятие");
	ЗаписатьXML(ЗаписьXML, Мероприятие.Наименование, "Наименование", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, Мероприятие.ДатаВыполнения, "ДатаВыполнения", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, Мероприятие.Комментарий, "Комментарий", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, Мероприятие.Объект, "Объект", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, Мероприятие.ПланируемаяДата, "ПланируемаяДата", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, Мероприятие.ПланируемоеВремя, "ПланируемоеВремя", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, Мероприятие.ПланируемоеВремяКонца, "ПланируемоеВремяКонца", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, Мероприятие.Результат, "Результат", НазначениеТипаXML.Явное);
	СвязДок = ?(ТипЗнч(Мероприятие.СвязанныйДокумент) = Тип("ДокументСсылка.ПрикрепитьФайлы"),Строка(Мероприятие.СвязанныйДокумент.УникальныйИдентификатор()),Мероприятие.СвязанныйДокумент);
	
	ЗаписатьXML(ЗаписьXML, СвязДок, "СвязанныйДокумент", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, Мероприятие.ТипМероприятия, "ТипМероприятия", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, Мероприятие.ФактическаяДата, "ФактическаяДата", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, Мероприятие.Выполнена, "Выполнена", НазначениеТипаXML.Явное);
	
	Если ЗначениеЗаполнено(Мероприятие.СвязанныйДокумент) тогда
		ЗаписатьXML(ЗаписьXML, Мероприятие.СвязанныйДокумент.Номер, "КодСвязДок", НазначениеТипаXML.Явное);
	Иначе
		ЗаписатьXML(ЗаписьXML, "00", "КодСвязДок", НазначениеТипаXML.Явное);
	КонецЕсли;
	
	ЗаписатьXML(ЗаписьXML, Строка(Мероприятие.Ссылка.УникальныйИдентификатор()), "УЗ_Ссылка", НазначениеТипаXML.Явное);
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

Процедура ЗаписатьXMLТипыМероприятий(ЗаписьXML, Тип) Экспорт
	ТаблицаРеквизитовДляМП = ПолучитьРеквизитыТипаМероприятия(Тип.Ссылка);
	ЕстьРеквизиты = ?(ТаблицаРеквизитовДляМП.Количество() > 0,Истина,Ложь);
	// Записываем начало элемента XML.
	ЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.ТипыМероприятий");
	
	ЗаписатьXML(ЗаписьXML, Тип.Ссылка, "Ref", НазначениеТипаXML.Явное);
	
	ЗаписатьXML(ЗаписьXML, Тип.Наименование, "Description", НазначениеТипаXML.Явное);
	
	Если ЕстьРеквизиты Тогда
		ЗаписатьXML(ЗаписьXML, ТаблицаРеквизитовДляМП[0].ВыездноеМероприятие, "ВыездноеМероприятие", НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, ТаблицаРеквизитовДляМП[0].КнопкаЗаписиВидео, "КнопкаЗаписиВидео", НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, ТаблицаРеквизитовДляМП[0].КнопкаЗаписиАудио, "КнопкаЗаписиАудио", НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, ТаблицаРеквизитовДляМП[0].КнопкаФото, "КнопкаФото", НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, ТаблицаРеквизитовДляМП[0].КнопкаГеопозиции, "КнопкаГеопозиции", НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, ОбщегоНазначения.ИмяЗначенияПеречисления(ТаблицаРеквизитовДляМП[0].ТипАдресаВыезда), "ТипАдресаВыезда", НазначениеТипаXML.Явное);
	Иначе
		ЗаписатьXML(ЗаписьXML, Ложь, "ВыездноеМероприятие", НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, Ложь, "КнопкаЗаписиВидео", НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, Ложь, "КнопкаЗаписиАудио", НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, Ложь, "КнопкаФото", НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, Ложь, "КнопкаГеопозиции", НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, Ложь, "ТипАдресаВыезда", НазначениеТипаXML.Явное);
	КонецЕсли;
	
	// Записываем конец элемента.
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

Процедура ЗаписатьXMLФайлы(ЗаписьXML, Файл) Экспорт
	к = 1;
	Для каждого стр из Файл.Файлы Цикл 	
		ЗаписьXML.ЗаписатьНачалоЭлемента("ПрикрепитьФайлы");
		ЗаписатьXML(ЗаписьXML, Файл.Объект, "Объект", НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, Файл.Номер, "Номер", НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, Стр.Путь, "ИмяФайла", НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, Стр.Хранилище, "ДанныеФайла", НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, Файл.Комментарий, "Комментарий", НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, Стр.ТипФайла, "ТипФайла", НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, Стр.Путь, "Путь", НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, Строка(Файл.Ссылка.УникальныйИдентификатор()), "УЗ_Ссылка", НазначениеТипаXML.Явное);
		ЗаписатьXML(ЗаписьXML, к, "counter", НазначениеТипаXML.Явное);	
		ЗаписатьXML(ЗаписьXML, Стр.ТипФайла.Наименование, "КодТипаФайла", НазначениеТипаXML.Явное);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		к = к  + 1;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписатьXMLОбещанныеПлатежи(ЗаписьXML, ОбПлатеж) Экспорт
	ЗаписьXML.ЗаписатьНачалоЭлемента("DocumentObject.ОбещанныеПлатежи");
	ЗаписатьXML(ЗаписьXML, ОбПлатеж.Ссылка, "Ref", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ОбПлатеж.ПометкаУдаления, "DeletionMark", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ОбПлатеж.Дата, "Date", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ОбПлатеж.Проведен, "Posted", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ОбПлатеж.Объект, "ОбъектПлатежа", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ОбПлатеж.Комментарий, "Комментарий", НазначениеТипаXML.Явное);
	
	ТЧ = ОбПлатеж.Метаданные().ТабличныеЧасти.ДатыИСуммы;
	ЗаписьXML.ЗаписатьНачалоЭлемента("ДатыИСуммы");
	ЗаписьXML.ЗаписатьАтрибут("Имя", ТЧ.Имя);
	Попытка
		Для Каждого СтрокаТЧ из ОбПлатеж[ТЧ.Имя] Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("Row");
			Для Каждого РеквизитТЧ Из ТЧ.Реквизиты Цикл
				ЗаписьXML.ЗаписатьНачалоЭлемента("Реквизит");
				ЗаписьXML.ЗаписатьАтрибут("Имя", РеквизитТЧ.Имя);
				ТипЗначения = ТипЗнч(СтрокаТЧ[РеквизитТЧ.Имя]);
				Если Не ТипЗначения = Тип("Неопределено") Тогда
					ЗаписьXML.ЗаписатьАтрибут("ИмяТипа", XMLТип(ТипЗначения).ИмяТипа);
					ЗаписьXML.ЗаписатьАтрибут("URI", XMLТип(ТипЗначения).URIПространстваИмен);
				КонецЕсли;
				ЗаписьXML.ЗаписатьТекст(XMLСтрока(СтрокаТЧ[РеквизитТЧ.Имя]));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЦикла;
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
	Исключение
		ЗаписьXML.ЗаписатьНачалоЭлемента("Row");
		ЗаписьXML.ЗаписатьКонецЭлемента();			
	КонецПопытки;
	ЗаписьXML.ЗаписатьКонецЭлемента();

	
	// Записываем конец элемента.
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ЗаписатьУдалениеПрикрепитьФайлы(Ссылка,ЗаписьXML) Экспорт
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ПрикрепитьФайлыУдаление");
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

Процедура ЗаписатьУдалениеМероприятие(Ссылка,ЗаписьXML) Экспорт
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("МероприятиеУдаление");
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

Процедура ЗаписатьXMLЧеклисты(ЗаписьXML, ЧекЛист) Экспорт
	ЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.ЧекЛистыМероприятий");
	ЗаписатьXML(ЗаписьXML, ЧекЛист.Ссылка, "Ref", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ЧекЛист.ПометкаУдаления, "DeletionMark", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ЧекЛист.Наименование, "Description", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, Строка(ЧекЛист.Мероприятие.Ссылка.УникальныйИдентификатор()), "МероприятиеСсылка", НазначениеТипаXML.Явное);
	ТЧ = ЧекЛист.Метаданные().ТабличныеЧасти.СписокПунктов;
	ЗаписьXML.ЗаписатьНачалоЭлемента("СписокПунктов");
	ЗаписьXML.ЗаписатьАтрибут("Имя", ТЧ.Имя);
	Попытка
		Для Каждого СтрокаТЧ из ЧекЛист[ТЧ.Имя] Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("Row");
			Для Каждого РеквизитТЧ Из ТЧ.Реквизиты Цикл
				ЗаписьXML.ЗаписатьНачалоЭлемента("Реквизит");
				ЗаписьXML.ЗаписатьАтрибут("Имя", РеквизитТЧ.Имя);
				ТипЗначения = ТипЗнч(СтрокаТЧ[РеквизитТЧ.Имя]);
				Если Не ТипЗначения = Тип("Неопределено") Тогда
					ЗаписьXML.ЗаписатьАтрибут("ИмяТипа", XMLТип(ТипЗначения).ИмяТипа);
					ЗаписьXML.ЗаписатьАтрибут("URI", XMLТип(ТипЗначения).URIПространстваИмен);
				КонецЕсли;
				ЗаписьXML.ЗаписатьТекст(XMLСтрока(СтрокаТЧ[РеквизитТЧ.Имя]));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЦикла;
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
	Исключение
		ЗаписьXML.ЗаписатьНачалоЭлемента("Row");
		ЗаписьXML.ЗаписатьКонецЭлемента();			
	КонецПопытки;
	ЗаписьXML.ЗаписатьКонецЭлемента();

	
	// Записываем конец элемента.
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ЗаписатьXMLТипыПрикрепляемыхФайлов(ЗаписьXML, ТипФайла) Экспорт
	// Записываем начало элемента XML.
	ЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.ТипыПрикрепляемыхФайлов");
	
	ЗаписатьXML(ЗаписьXML, ТипФайла.Ссылка, "Ref", НазначениеТипаXML.Явное);
	
	ЗаписатьXML(ЗаписьXML, ТипФайла.Наименование, "Description", НазначениеТипаXML.Явное);
	
	ЗаписатьXML(ЗаписьXML, ТипФайла.АктуаленПоследний, "АктуаленПоследний", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ТипФайла.ПовторнаяРегистрация, "ПовторнаяРегистрация", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ТипФайла.Конверт, "Конверт", НазначениеТипаXML.Явное);	
	// Записываем конец элемента.
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

Процедура ЗаписатьXMLТрекСотрудника(ЗаписьXML, НаборЗаписей) Экспорт
	// Записываем начало элемента XML.	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ТрекиСотрудника"); 
	//Для каждого Трек из НаборЗаписей Цикл 
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("ТрекСотрудника");
	//	ЗаписатьXML(ЗаписьXML, Трек.ДатаПолученияКоординат, "ДатаПолученияКоординат", НазначениеТипаXML.Явное);
	//	ЗаписатьXML(ЗаписьXML, Строка(Трек.Мероприятие.Ссылка.УникальныйИдентификатор()), "МероприятиеСтрокаСсылка", НазначениеТипаXML.Явное);
	//	ЗаписатьXML(ЗаписьXML, Трек.ТипПолученияКоординат, "ТипПолученияКоординат", НазначениеТипаXML.Явное);
	//	ЗаписатьXML(ЗаписьXML, Трек.ДолготаТочкиТрека, "ДолготаТочкиТрека", НазначениеТипаXML.Явное);
	//	ЗаписатьXML(ЗаписьXML, Трек.ШиротаТочкиТрека, "ШиротаТочкиТрека", НазначениеТипаXML.Явное);
	//	ЗаписьXML.ЗаписатьКонецЭлемента();
	//КонецЦикла;
	
	// Записываем конец элемента.
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры




Функция ПрочитатьXMLЮрФизЛицо(ЧтениеXML) Экспорт
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Чтение следующего узла.
	ЧтениеXML.Прочитать();
	// Чтение ссылки на элемент справочника.
	ТипКАСсылка = ПрочитатьXML(ЧтениеXML);
	Если ТипЗнч(ТипКАСсылка) <> Тип("СправочникСсылка.ЮрФизЛицо") Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Пытаемся создать объект по полученной ссылке.
	ТипКА = ТипКАСсылка.ПолучитьОбъект();
	Если ТипКА = Неопределено Тогда
		// Создаем элемент справочника.
		ТипКА = Справочники.ЮрФизЛицо.СоздатьЭлемент();
		// Устанавливаем значение ссылки для нового объекта.
		ТипКА.УстановитьСсылкуНового(ТипКАСсылка);
		ТипКА.УстановитьНовыйКод();
	КонецЕсли;
		
	// Наименование.
	ТипКА.Наименование = ПрочитатьXML(ЧтениеXML);
	// Проверяем, что текущим узлом является "КонецЭлемента".
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Чтение следующего узла для завершения чтения элемента.
	ЧтениеXML.Прочитать();
	Возврат ТипКА;
КонецФункции

Функция ПрочитатьXMLТипыДолговыхОбязательств(ЧтениеXML) Экспорт
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Чтение следующего узла.
	ЧтениеXML.Прочитать();
	// Чтение ссылки на элемент справочника.
	ТипДОСсылка = ПрочитатьXML(ЧтениеXML);
	Если ТипЗнч(ТипДОСсылка) <> Тип("СправочникСсылка.ТипыДолговыхОбязательств") Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Пытаемся создать объект по полученной ссылке.
	ТипДО = ТипДОСсылка.ПолучитьОбъект();
	Если ТипДО = Неопределено Тогда
		// Создаем элемент справочника.
		ТипДО = Справочники.ТипыДолговыхОбязательств.СоздатьЭлемент();
		// Устанавливаем значение ссылки для нового объекта.
		ТипДО.УстановитьСсылкуНового(ТипДОСсылка);
		ТипДО.УстановитьНовыйКод();
	КонецЕсли; 
	
	
	// Наименование.
	ТипДО.Наименование = ПрочитатьXML(ЧтениеXML);
	// Проверяем, что текущим узлом является "КонецЭлемента".
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Чтение следующего узла для завершения чтения элемента.
	ЧтениеXML.Прочитать();
	Возврат ТипДО;
КонецФункции

Функция ПрочитатьXMLКонтрагенты(ЧтениеXML) Экспорт
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Чтение следующего узла.
	ЧтениеXML.Прочитать();
	// Чтение ссылки на элемент справочника.
	КонтрагентСсылка = ПрочитатьXML(ЧтениеXML);
	Если ТипЗнч(КонтрагентСсылка) <> Тип("СправочникСсылка.Контрагенты") Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Пытаемся создать объект по полученной ссылке.
	Контрагент = КонтрагентСсылка.ПолучитьОбъект();
	// Чтение признака группы.
	ЭтоГруппа = ПрочитатьXML(ЧтениеXML);
	Если Контрагент <> Неопределено Тогда
		Если Контрагент.ЭтоГруппа <> ЭтоГруппа Тогда
			ВызватьИсключение "Некорректные данные";
		КонецЕсли;
	Иначе
		// Создаем элемент справочника.
		Если ЭтоГруппа = Истина Тогда
			Контрагент = Справочники.Контрагенты.СоздатьГруппу();
		Иначе
			Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		КонецЕсли;
		// Устанавливаем значение ссылки для нового объекта.
		Контрагент.УстановитьСсылкуНового(КонтрагентСсылка);
		Контрагент.УстановитьНовыйКод();
	КонецЕсли;
	
	// Родитель.
	Контрагент.Родитель = ПрочитатьXML(ЧтениеXML);
		
	// Наименование.
	Контрагент.Наименование = ПрочитатьXML(ЧтениеXML);
	// Реквизиты, загружаемые только для элемента справочника.
	Если Не Контрагент.ЭтоГруппа Тогда
		Контрагент.ЮрФизЛицо= ПрочитатьXML(ЧтениеXML);
		Контрагент.КодКонтрагента= ПрочитатьXML(ЧтениеXML);
		Контрагент.ОтзывПерсональныхДанных = ПрочитатьXML(ЧтениеXML);
		Контрагент.ЧасовойПояс = ПрочитатьXML(ЧтениеXML);
		Контрагент.ДатаСоздания = ПрочитатьXML(ЧтениеXML);
		ЗагрузитьТабличнуюЧасть(Контрагент,ЧтениеXML);
		ЧтениеXML.Прочитать();
		//Контрагент.Телефоны = ПрочитатьXML(ЧтениеXML);
	КонецЕсли;
	// Проверяем, что текущим узлом является "КонецЭлемента".
	Контрагент.Организация = ПараметрыСеанса.ТекущийПользователь.Организация;
	
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Чтение следующего узла для завершения чтения элемента.
	ЧтениеXML.Прочитать();
	Возврат Контрагент;
КонецФункции

Функция ПрочитатьXMLДолговыеОбязательства(ЧтениеXML) Экспорт
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Чтение следующего узла.
	ЧтениеXML.Прочитать();
	// Чтение ссылки на элемент справочника.
	ДОСсылка = ПрочитатьXML(ЧтениеXML);
	Если ТипЗнч(ДОСсылка) <> Тип("СправочникСсылка.ДолговыеОбязательства") Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Пытаемся создать объект по полученной ссылке.
	ДО = ДОСсылка.ПолучитьОбъект();
	// Чтение признака группы.
	//ЭтоГруппа = ПрочитатьXML(ЧтениеXML);
	Если ДО = Неопределено Тогда
		ДО = Справочники.ДолговыеОбязательства.СоздатьЭлемент();
		ДО.УстановитьСсылкуНового(ДОСсылка);
		ДО.УстановитьНовыйКод();
	КонецЕсли;
	// Наименование.
	ДО.Наименование = ПрочитатьXML(ЧтениеXML);
	// Реквизиты, загружаемые только для элемента справочника.
	//Если Не ДО.ЭтоГруппа Тогда
	ДО.ТипДолговогоОбязательства = ПрочитатьXML(ЧтениеXML);
	ДО.Должник = ПрочитатьXML(ЧтениеXML);
	ДО.Контрагент = ПрочитатьXML(ЧтениеXML);
	ДО.Кредитор = ПрочитатьXML(ЧтениеXML);
	ДО.ДатаСоздания = ПрочитатьXML(ЧтениеXML);
	ДО.КодДО = ПрочитатьXML(ЧтениеXML);
	ДО.Организация = ПараметрыСеанса.ТекущийПользователь.Организация;
	ДО.ВалютаДоговора = Справочники.Валюты.RUB;
	ЗаполнитьТЧКонтрагенты(ДО);
	//КонецЕсли;
	// Проверяем, что текущим узлом является "КонецЭлемента".
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Чтение следующего узла для завершения чтения элемента.
	ЧтениеXML.Прочитать();
	Возврат ДО;
КонецФункции

Функция ПрочитатьXMLКатегории(ЧтениеXML) Экспорт
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Чтение следующего узла.
	ЧтениеXML.Прочитать();
	// Чтение ссылки на элемент справочника.
	КатегорияСсылка = ПрочитатьXML(ЧтениеXML);
	Если ТипЗнч(КатегорияСсылка) <> Тип("СправочникСсылка.Категории") Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Пытаемся создать объект по полученной ссылке.
	Категория = КатегорияСсылка.ПолучитьОбъект();
	Если Категория = Неопределено Тогда
		// Создаем элемент справочника.
		Категория = Справочники.Категории.СоздатьЭлемент();
		// Устанавливаем значение ссылки для нового объекта.
		Категория.УстановитьСсылкуНового(КатегорияСсылка);
		Категория.УстановитьНовыйКод();
	КонецЕсли;
		
	// Наименование.
	Категория.Наименование = ПрочитатьXML(ЧтениеXML);
	// Проверяем, что текущим узлом является "КонецЭлемента".
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Чтение следующего узла для завершения чтения элемента.
	ЧтениеXML.Прочитать();
	Возврат Категория;
КонецФункции

Функция ПрочитатьXMLРезультаты(ЧтениеXML) Экспорт
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Чтение следующего узла.
	ЧтениеXML.Прочитать();
	// Чтение ссылки на элемент справочника.
	РезультатСсылка = ПрочитатьXML(ЧтениеXML);
	Если ТипЗнч(РезультатСсылка) <> Тип("СправочникСсылка.РезультатыМероприятий") Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Пытаемся создать объект по полученной ссылке.
	Результат = РезультатСсылка.ПолучитьОбъект();
	// Чтение признака группы.
	//ЭтоГруппа = ПрочитатьXML(ЧтениеXML);
	Если Результат = Неопределено Тогда
		Результат = Справочники.РезультатыМероприятий.СоздатьЭлемент();
		Результат.УстановитьСсылкуНового(РезультатСсылка);
		Результат.УстановитьНовыйКод();
	КонецЕсли;
	
	//Код
	// Наименование.
	Результат.Наименование = ПрочитатьXML(ЧтениеXML);
	Результат.ПрикрепитьФайл = ПрочитатьXML(ЧтениеXML);
	Результат.СвязанныйДокумент = ПрочитатьXML(ЧтениеXML);
	Результат.ЗаполнитьКомментарий = ПрочитатьXML(ЧтениеXML);
	Результат.РезультативныйКонтакт = ПрочитатьXML(ЧтениеXML);
	Результат.ТипФайла = ПрочитатьXML(ЧтениеXML);
	Результат.ПрикреплятьФайлВМероприятие = ПрочитатьXML(ЧтениеXML);
	Результат.Владелец = ПрочитатьXML(ЧтениеXML);
	//КонецЕсли;
	// Проверяем, что текущим узлом является "КонецЭлемента".
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Чтение следующего узла для завершения чтения элемента.
	ЧтениеXML.Прочитать();
	Возврат Результат;
КонецФункции

Функция ПрочитатьXMLМероприятие(ЧтениеXML,ПользовательУЗ,СсылкаМП) Экспорт
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Чтение следующего узла.
	ЧтениеXML.Прочитать();
		
	Наименование = ПрочитатьXML(ЧтениеXML); 
	ДатаВыполнения = ПрочитатьXML(ЧтениеXML);
	Комментарий = ПрочитатьXML(ЧтениеXML);
	Объект = ПрочитатьXML(ЧтениеXML);
 	ПланируемаяДата = ПрочитатьXML(ЧтениеXML);
	ПланируемоеВремя = ПрочитатьXML(ЧтениеXML);	
	ПланируемоеВремяКонца = ПрочитатьXML(ЧтениеXML);  
	Результат = ПрочитатьXML(ЧтениеXML);
	СвязанныйДокумент = ПрочитатьXML(ЧтениеXML); 
	СвязанныйДокументСсылка = СвязанныйДокумент;
	ТипМероприятия = ПрочитатьXML(ЧтениеXML);
	ФактическаяДата = ПрочитатьXML(ЧтениеXML);
	Выполнена = ПрочитатьXML(ЧтениеXML);
	КодПрикрепленногоДокумента = ПрочитатьXML(ЧтениеXML);
	СсылкаУЗ = ПрочитатьXML(ЧтениеXML);
	СсылкаМП = ПрочитатьXML(ЧтениеXML);

	Если ТипЗнч(СвязанныйДокумент) = Тип("Строка") Тогда
		ФайлСсылкаУЗ_ГУИД = Новый УникальныйИдентификатор(СвязанныйДокумент);
		ФайлСсылкаУЗ = Документы.ПрикрепитьФайлы.ПолучитьСсылку(ФайлСсылкаУЗ_ГУИД);
		СвязанныйДокументСсылка = ФайлСсылкаУЗ;
	КонецЕсли;	
	
	Если ТипЗнч(СвязанныйДокумент) = Тип("ДокументСсылка.ОбещанныеПлатежи") Тогда
		СвязанныйДокументСсылка = СвязанныйДокумент;
	КонецЕсли;	
	

	
	Если ЗначениеЗаполнено(СсылкаУЗ) Тогда
		МероприятиеСсылкаУЗ_ГУИД = Новый УникальныйИдентификатор(СсылкаУЗ);
		МероприятиеЗадачаСсылка = Задачи.Мероприятие.ПолучитьСсылку(МероприятиеСсылкаУЗ_ГУИД);
	Иначе
		МероприятиеЗадачаСсылка = ПоискОбъектаПоСсылкеИзМП(СсылкаМП);
	КонецЕсли;	 

		
	
	Если МероприятиеЗадачаСсылка = Неопределено Или МероприятиеЗадачаСсылка = Задачи.Мероприятие.ПустаяСсылка() Тогда
		// Создаем элемент Задача.
		МероприятиеЗадачаСсылка = Задачи.Мероприятие.ПустаяСсылка();
		МероприятиеЗадача = Задачи.Мероприятие.СоздатьЗадачу();
		МероприятиеЗадача.Автор = ПользовательУЗ;
		МероприятиеЗадача.Исполнитель = ПользовательУЗ;
		МероприятиеЗадача.Дата = ТекущаяДатаСеанса();
		МероприятиеЗадача.Организация = ПользовательУЗ.Организация;
		МероприятиеЗадача.Подразделение = ПользовательУЗ.Подразделение;
		МероприятиеЗадача.УстановитьСсылкуНового(МероприятиеЗадачаСсылка);
		МероприятиеЗадача.УстановитьНовыйНомер();
	Иначе
		МероприятиеЗадача = МероприятиеЗадачаСсылка.ПолучитьОбъект();
		Если ЗначениеЗаполнено(МероприятиеЗадача.Исполнитель) Тогда
			Исполнитель = ?(ПользовательУЗ = МероприятиеЗадача.Исполнитель,ПользовательУЗ,МероприятиеЗадача.Исполнитель);
			МероприятиеЗадача.Исполнитель = Исполнитель;
		Иначе
			МероприятиеЗадача.Исполнитель = ПользовательУЗ;
		КонецЕсли;	
	КонецЕсли;
	 
	
	МероприятиеЗадача.Наименование = Наименование;
	МероприятиеЗадача.ДатаВыполнения = ДатаВыполнения;
	МероприятиеЗадача.Комментарий = Комментарий;
	МероприятиеЗадача.Объект = Объект;
	МероприятиеЗадача.ПланируемаяДата = ПланируемаяДата;
	МероприятиеЗадача.ПланируемоеВремя = ПланируемоеВремя;
	МероприятиеЗадача.ПланируемоеВремяКонца = ПланируемоеВремяКонца;
	МероприятиеЗадача.Результат = Результат;
	МероприятиеЗадача.СвязанныйДокумент = СвязанныйДокументСсылка;
	
	ТипСвязанногоДокумента = Результат.СвязанныйДокумент;
	Если ТипСвязанногоДокумента = Перечисления.ВидыСвязанныхДокументов.ПрикрепитьФайлы тогда 
		Если Найти(Строка(СвязанныйДокументСсылка),"<Объект не найден>") <> 0 Тогда
			МероприятиеЗадача.СвязанныйДокумент = ПоискОбъектаПоСсылкеИзМП(СвязанныйДокумент);
		Иначе
			МероприятиеЗадача.СвязанныйДокумент = СвязанныйДокументСсылка;
		КонецЕсли;
	КонецЕсли;

	МероприятиеЗадача.ТипМероприятия = ТипМероприятия;
	МероприятиеЗадача.ФактическаяДата = ФактическаяДата;
	МероприятиеЗадача.Выполнена = Выполнена;
	
	// Проверяем, что текущим узлом является "КонецЭлемента".
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	
	// Чтение следующего узла для завершения чтения элемента.
	ЧтениеXML.Прочитать();
	Возврат МероприятиеЗадача;

КонецФункции

Функция ПрочитатьXMLТипыМероприятий(ЧтениеXML) Экспорт
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Чтение следующего узла.
	ЧтениеXML.Прочитать();
	// Чтение ссылки на элемент справочника.
	ТипСсылка = ПрочитатьXML(ЧтениеXML);
	Если ТипЗнч(ТипСсылка) <> Тип("СправочникСсылка.ТипыМероприятий") Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Пытаемся создать объект по полученной ссылке.
	Тип = ТипСсылка.ПолучитьОбъект();
	Если Тип = Неопределено Тогда
		Тип = Справочники.ТипыПрикрепляемыхФайлов.СоздатьЭлемент();	
		Попытка
			Тип.УстановитьСсылкуНового(ТипСсылка);
			Тип.УстановитьНовыйКод();
		Исключение
			
		КонецПопытки;
	КонецЕсли;
	
	Тип.Наименование = ПрочитатьXML(ЧтениеXML);
	
	МЗ = РегистрыСведений.ТипыВыездныхМероприятий.СоздатьМенеджерЗаписи();
	МЗ.ТипМероприятия = ТипСсылка;
	
	МЗ.ВыездноеМероприятие = ПрочитатьXML(ЧтениеXML);
	МЗ.КнопкаЗаписиВидео = ПрочитатьXML(ЧтениеXML);
	МЗ.КнопкаЗаписиАудио = ПрочитатьXML(ЧтениеXML);
	МЗ.КнопкаФото = ПрочитатьXML(ЧтениеXML);
	МЗ.КнопкаГеопозиции = ПрочитатьXML(ЧтениеXML); 
	ТипАдресаВыезда = ПрочитатьXML(ЧтениеXML);
	Если ТипАдресаВыезда = Ложь Тогда
		МЗ.ТипАдресаВыезда = Перечисления.ТипыАдресовВыезда.ПустаяСсылка();
	Иначе
		МЗ.ТипАдресаВыезда = Перечисления.ТипыАдресовВыезда[СтрЗаменить(ТипАдресаВыезда, " ", "")];	
	КонецЕсли;	
	МЗ.Записать();
	// Проверяем, что текущим узлом является "КонецЭлемента".
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Чтение следующего узла для завершения чтения элемента.
	ЧтениеXML.Прочитать();
	Возврат Тип;
КонецФункции

Функция ПрочитатьXMLФайлы(ЧтениеXML,ПользовательУЗ,СсылкаМП) Экспорт
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Чтение следующего узла.
	ЧтениеXML.Прочитать();
	
	Об = ПрочитатьXML(ЧтениеXML);
	ИмяФайла = ПрочитатьXML(ЧтениеXML);
	ДанныеФайла = ПрочитатьXML(ЧтениеXML);
	Комментарий = ПрочитатьXML(ЧтениеXML);
	ТипФайла = ПрочитатьXML(ЧтениеXML);
	Путь = ПрочитатьXML(ЧтениеXML);
	ФайлСсылкаУЗСтрока = ПрочитатьXML(ЧтениеXML);
	КодТипаФайла = ПрочитатьXML(ЧтениеXML);
	НомерФайла = ПрочитатьXML(ЧтениеXML);
	СсылкаМП = ПрочитатьXML(ЧтениеXML);
	
	ТипФайлаБаза = Неопределено;
	
	Если КодТипаФайла = "Аудиозапись" или КодТипаФайла = "Видеозапись"  или КодТипаФайла = "Фотография" Тогда
		ТипФайлаБаза = Справочники.ТипыПрикрепляемыхФайлов.НайтиПоНаименованию(КодТипаФайла); 
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ФайлСсылкаУЗСтрока) Тогда
		ФайлСсылкаУЗ_ГУИД = Новый УникальныйИдентификатор(ФайлСсылкаУЗСтрока);
		ФайлСсылкаУЗ = Документы.ПрикрепитьФайлы.ПолучитьСсылку(ФайлСсылкаУЗ_ГУИД);
	Иначе
		ФайлСсылкаУЗ = ПоискОбъектаПоСсылкеИзМП(СсылкаМП);
	КонецЕсли;	 
	
	Если ФайлСсылкаУЗ = Неопределено Или ФайлСсылкаУЗ = Документы.ПрикрепитьФайлы.ПустаяСсылка() Тогда
		ФайлСсылкаУЗ = Документы.ПрикрепитьФайлы.ПустаяСсылка();
		Документ = Документы.ПрикрепитьФайлы.СоздатьДокумент();
		КолВоФайлов = 0;
		Документ.Организация = ПараметрыСеанса.ТекущийПользователь.Организация;
		Документ.Автор = ПользовательУЗ;
		Документ.Объект = Об;
		Документ.Дата = ТекущаяДатаСеанса();
		Документ.Комментарий = Комментарий;
		Документ.УстановитьНовыйНомер();
		Документ.УстановитьСсылкуНового(ФайлСсылкаУЗ);
	Иначе
		Документ = ФайлСсылкаУЗ.ПолучитьОбъект();
		КолВоФайлов = Документ.Файлы.Количество();
	КонецЕсли;
	Если КолВоФайлов = 0  Тогда
		Стр = Документ.Файлы.Добавить();
		Стр.Загружен = Ложь;  
		Стр.Путь = Путь;
		Стр.УИД = Новый УникальныйИдентификатор();
		
		Стр.ТипФайла = ?(ТипФайлаБаза = Неопределено,ТипФайла,ТипФайлаБаза);
		Стр.Размер = ОкруглитьРазмерФайла(Строка(ДанныеФайла.Размер()));
		МассивДанных = Новый Массив;
		МассивДанных.Добавить(ДанныеФайла);
		Документ.ПоместитьВХранилище(МассивДанных);	
	КонецЕсли;
	
	Если КолВоФайлов > 0  Тогда
		Индекс = ?(НомерФайла = 0,0,НомерФайла-1);
		Стр = Документ.Файлы[Индекс];
		Стр.Загружен = Ложь;  
		Стр.Путь = Путь;
		Стр.ТипФайла = ?(ТипФайлаБаза = Неопределено, ТипФайла, ТипФайлаБаза);
		Стр.Размер = ОкруглитьРазмерФайла(Строка(ДанныеФайла.Размер()));
		МассивДанных = Новый Массив;
		МассивДанных.Добавить(ДанныеФайла);
		Документ.ПоместитьВХранилище(МассивДанных);
	КонецЕсли;
	
	// Проверяем, что текущим узлом является "КонецЭлемента".
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	
	// Чтение следующего узла для завершения чтения элемента.
	ЧтениеXML.Прочитать();

	Возврат Документ;
КонецФункции

Функция ПрочитатьXMLОбещанныеПлатежи(ЧтениеXML,ПользовательУЗ) Экспорт       
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Чтение следующего узла.
	ЧтениеXML.Прочитать();
	// Чтение ссылки на элемент справочника.
	ОбПлатежСсылка = ПрочитатьXML(ЧтениеXML);
	Если ТипЗнч(ОбПлатежСсылка) <> Тип("ДокументСсылка.ОбещанныеПлатежи") Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Пытаемся создать объект по полученной ссылке.
	ОбПлатеж = ОбПлатежСсылка.ПолучитьОбъект();
	
	Если ОбПлатеж = Неопределено Тогда
		ОбПлатеж = Документы.ОбещанныеПлатежи.СоздатьДокумент();
		// Устанавливаем значение ссылки для нового объекта.
		ОбПлатеж.УстановитьСсылкуНового(ОбПлатежСсылка);
		ОбПлатеж.УстановитьНовыйНомер();
		ОбПлатеж.Автор = ПользовательУЗ;
	КонецЕсли;
	ОбПлатеж.ПометкаУдаления = ПрочитатьXML(ЧтениеXML); 
	ОбПлатеж.Дата = ПрочитатьXML(ЧтениеXML);
	ОбПлатеж.Проведен = ПрочитатьXML(ЧтениеXML);
	ОбПлатеж.Объект = ПрочитатьXML(ЧтениеXML);
	ОбПлатеж.Комментарий = ПрочитатьXML(ЧтениеXML);
	ОбПлатеж.ДатыИСуммы.Очистить();
	ЗагрузитьТабличнуюЧасть(ОбПлатеж,ЧтениеXML);
	ЧтениеXML.Прочитать();
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Чтение следующего узла для завершения чтения элемента.
	ЧтениеXML.Прочитать();
	Возврат ОбПлатеж;
КонецФункции

Функция ПрочитатьXMLТрекСотрудника(ЧтениеXML,ПользовательУЗ) Экспорт
	//ЗаписьРС = ПрочитатьXML(ЧтениеXML);
	//Для каждого Запись из ЗаписьРС Цикл 
	//	Запись.Сотрудник = ПользовательУЗ;
	//КонецЦикла;
	
	
	
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Чтение следующего узла.
	//ЧтениеXML.Прочитать();
	
		
	
	НЗ = РегистрыСведений.ТрекСотрудника.СоздатьНаборЗаписей();
	ЧтениеXML.Прочитать();
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "ТрекиСотрудника"  Тогда
			Прервать;
		КонецЕсли;	
		
		Если (ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента или ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента)  И ЧтениеXML.Имя = "ТрекСотрудника"  Тогда
			Продолжить;
		КонецЕсли;	

		
		ДатаГеолокации = ПрочитатьXML(ЧтениеXML);
		МероприятиеСсылкаМП = ПрочитатьXML(ЧтениеXML);
		ТипПолученияКоординат = ПрочитатьXML(ЧтениеXML);
		ДолготаГеолокации  =  ПрочитатьXML(ЧтениеXML);
		ШиротаГеолокации  =  ПрочитатьXML(ЧтениеXML);
		
		НЗ.Отбор.ДатаПолученияКоординат.Установить(ДатаГеолокации);
		НЗ.Отбор.Сотрудник.Установить(ПользовательУЗ);
		НЗ.Записать();

		
		Мероприятие = ПоискОбъектаПоСсылкеИзМП(МероприятиеСсылкаМП);
		
		МЗ = НЗ.Добавить();
		МЗ.ДатаПолученияКоординат = ДатаГеолокации;
		МЗ.Сотрудник = ПользовательУЗ;
		МЗ.Мероприятие = Мероприятие;
		МЗ.ТипПолученияКоординат = ТипПолученияКоординат;
		МЗ.ДолготаТочкиТрека = ДолготаГеолокации;
		МЗ.ШиротаТочкиТрека = ШиротаГеолокации;
	КонецЦикла;
	ЧтениеXML.Прочитать();
	
	Возврат НЗ;
КонецФункции

Функция ПрочитатьXMLЧекЛист(ЧтениеXML) Экспорт
		
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Чтение следующего узла.
	ЧтениеXML.Прочитать();
	// Чтение ссылки на элемент справочника.
	ЧеклистСсылка = ПрочитатьXML(ЧтениеXML);
	Если ТипЗнч(ЧеклистСсылка) <> Тип("СправочникСсылка.ЧекЛистыМероприятий") Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Пытаемся создать объект по полученной ссылке.
	ЧекЛист = ЧеклистСсылка.ПолучитьОбъект();
	
	Если ЧекЛист = Неопределено Тогда
		ЧекЛист = Справочники.ЧекЛистыМероприятий.СоздатьЭлемент();
		// Устанавливаем значение ссылки для нового объекта.
		ЧекЛист.УстановитьСсылкуНового(ЧеклистСсылка);
		ЧекЛист.УстановитьНовыйКод();
	КонецЕсли;
	ЧекЛист.ПометкаУдаления = ПрочитатьXML(ЧтениеXML);
	ЧекЛист.Наименование = ПрочитатьXML(ЧтениеXML);
	СвязанноеМероприятие = ПрочитатьXML(ЧтениеXML);
	ЗагрузитьТабличнуюЧасть(ЧекЛист,ЧтениеXML);
	ЧтениеXML.Прочитать();
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Чтение следующего узла для завершения чтения элемента.
	ЧтениеXML.Прочитать();
	СвязанноеМероприятие = ПоискОбъектаПоСсылкеИзМП(СвязанноеМероприятие) ;
	ЧекЛист.Мероприятие = СвязанноеМероприятие;
	Возврат ЧекЛист;
	
КонецФункции

Функция ПрочитатьXMLТипПрикрепляемыхФайлов(ЧтениеXML) Экспорт
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Чтение следующего узла.
	ЧтениеXML.Прочитать();
	// Чтение ссылки на элемент справочника.
	ТипСсылка = ПрочитатьXML(ЧтениеXML);
	Если ТипЗнч(ТипСсылка) <> Тип("СправочникСсылка.ТипыПрикрепляемыхФайлов") Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Наименование.
	Наименование = ПрочитатьXML(ЧтениеXML);
		
	АктуаленПоследний = ПрочитатьXML(ЧтениеXML);
	ПовторнаяРегистрация = ПрочитатьXML(ЧтениеXML);
	Конверт = ПрочитатьXML(ЧтениеXML);
	
	ТипФайла = ТипСсылка.ПолучитьОбъект();
		
	Если ТипФайла = Неопределено Тогда
		ТипФайла = Справочники.ТипыПрикрепляемыхФайлов.СоздатьЭлемент();
		// Устанавливаем значение ссылки для нового объекта.
		ТипФайла.УстановитьСсылкуНового(ТипСсылка);
		ТипФайла.УстановитьНовыйКод();
	КонецЕсли;

	
	ТипФайла.Наименование = Наименование;
	ТипФайла.АктуаленПоследний = АктуаленПоследний;
	ТипФайла.ПовторнаяРегистрация = ПовторнаяРегистрация;
	ТипФайла.Конверт = Конверт;
	Сообщить(ТипСсылка);
	Сообщить(Наименование);
	Сообщить(АктуаленПоследний);
	Сообщить(ПовторнаяРегистрация);
	Сообщить(Конверт);
	

	
	
	// Проверяем, что текущим узлом является "КонецЭлемента".
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Тогда
		ВызватьИсключение "Ошибка чтения XML";
	КонецЕсли;
	// Чтение следующего узла для завершения чтения элемента.
	ЧтениеXML.Прочитать();
	Возврат ТипФайла;
КонецФункции

Процедура ЗагрузитьТабличнуюЧасть(Объект, ЧтениеXML) Экспорт
	Попытка
		ЗагрузитьОбъектРекурсивно(ЧтениеXML, Объект.Телефоны, ЧтениеXML.Имя);
	Исключение
		Попытка
			ЗагрузитьОбъектРекурсивно(ЧтениеXML, Объект.ДатыИСуммы, ЧтениеXML.Имя);
		Исключение
			ЗагрузитьОбъектРекурсивно(ЧтениеXML, Объект.СписокПунктов, ЧтениеXML.Имя);
		КонецПопытки;	
	КонецПопытки;	
	//Пока ЧтениеXML.Прочитать() Цикл
	//	Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
	//		ЗагрузитьОбъектРекурсивно(ЧтениеXML, Объект, ЧтениеXML.Имя);
	//	ИначеЕсли ЧтениеXML.Имя = "ТабличнаяЧасть" и ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
	//		Возврат;
	//	КонецЕсли;
	//КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьОбъектРекурсивно(ФайлXML, Объект, знач ИмяУзла)
    ИмяТипа = "";
    ПространствоИмен = "";
    Пока ФайлXML.ПрочитатьАтрибут() Цикл
        Если ФайлXML.Имя = "ИмяТипа" Тогда
            ИмяТипа = ФайлXML.Значение;
        ИначеЕсли ФайлXML.Имя = "URI" Тогда
            ПространствоИмен = ФайлXML.Значение;
        КонецЕсли;
    КонецЦикла;
    Пока ФайлXML.Прочитать() Цикл
        Если ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ФайлXML.Имя = ИмяУзла Тогда
            Возврат;
        ИначеЕсли ФайлXML.ТипУзла = ТипУзлаXML.Текст Тогда
            ТипОбъекта = ИзXMLТипа(ИмяТипа, ПространствоИмен);
            Если НЕ ТипОбъекта = Неопределено тогда
                Объект = XMLЗначение(ТипОбъекта, ФайлXML.Значение);
            КонецЕсли;
        ИначеЕсли ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
            ИмяТекУзла = ФайлXML.Имя;
            Если ФайлXML.Имя = "Row" Тогда
                ЗагрузитьОбъектРекурсивно(ФайлXML, Объект.Добавить(), ИмяТекУзла);
            Иначе
                Если ФайлXML.ПрочитатьАтрибут() Тогда
                    ЗагрузитьОбъектРекурсивно(ФайлXML, Объект[ФайлXML.Значение], ИмяТекУзла);
                КонецЕсли;
            КонецЕсли;
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры

Функция ОкруглитьРазмерФайла(СтрРазмер) Экспорт  
	Размер = Число(СтрРазмер);
	Если Размер > 1024 Тогда
		Размер = Окр(Размер/1024, 0);
		Стр = Строка(Размер) + " Кб";
	КонецЕсли;
	Если Размер > 1024 Тогда
		Размер = Окр(Размер/1024, 1);
		Стр = Строка(Размер) + " Мб";
	КонецЕсли;
	
	Возврат Стр;		
КонецФункции

Процедура ЗаполнитьТЧКонтрагенты(Долговое)
	ТЧКА = Долговое.Контрагенты;
	Если ТЧКА.Количество() > 0 Тогда 
		Возврат;
	КонецЕсли;	
	Если ЗначениеЗаполнено(Долговое.Должник) Тогда
		НСтр = ТЧКА.Добавить();
		НСтр.Значение = Долговое.Должник;
		Нстр.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Должник;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Долговое.Контрагент) Тогда
		НСтр = ТЧКА.Добавить();
		НСтр.Значение = Долговое.Контрагент;
		Нстр.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Контрагент;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Долговое.Кредитор) Тогда
		НСтр = ТЧКА.Добавить();
		НСтр.Значение = Долговое.Кредитор;
		Нстр.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Кредитор;
	КонецЕсли;	

		
КонецПроцедуры

Функция ПоискОбъектаПоСсылкеИзМП(СтрокаСсылка)
	Об = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрацияОбъектовИзМобильногоПриложения.ПолученныйОбъект КАК ПолученныйОбъект
		|ИЗ
		|	РегистрСведений.РегистрацияОбъектовИзМобильногоПриложения КАК РегистрацияОбъектовИзМобильногоПриложения
		|ГДЕ
		|	РегистрацияОбъектовИзМобильногоПриложения.МП_Ref = &МП_Ref";
	
	Запрос.УстановитьПараметр("МП_Ref", СтрокаСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Об  = Неопределено;
	КонецЕсли;	
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Об = ВыборкаДетальныеЗаписи.ПолученныйОбъект; 	
	КонецЕсли;
	
	Возврат Об;
	
КонецФункции

Процедура ЗаписатьСсылкуИзМобильногоПриложения(Об,СтрокаСсылка)
	МЗ = РегистрыСведений.РегистрацияОбъектовИзМобильногоПриложения.СоздатьМенеджерЗаписи();
	МЗ.ПолученныйОбъект = Об;
	МЗ.МП_Ref = СтрокаСсылка;
	МЗ.Записать(Истина);
КонецПроцедуры	
	

Функция СформироватьАдресаВыездаОбъектов(ТЗКодовОбъектов) Экспорт
	//Примеры строковых адресов
	//г. Москва, ул. Автозаводская, д.37, корп.2, кв.17
	//Московская обл., Ногинский р-н, пос. Черноголовка, Институтский пр-т, д.8

	
	МассивСокращенийУлиц = Новый Массив;
	ЗаполнитьМассивСокращенийУлиц(МассивСокращенийУлиц);
	МассивСокращенийДомов = Новый Массив;
	ЗаполнитьМассивСокращенийДомов(МассивСокращенийДомов);        
	МассивСокращенийГородов = Новый Массив;
	ЗаполнитьМассивСокращенийГородов(МассивСокращенийГородов);
	
	//КодОбъекта
	//ТипОбъекта ДО, КА
	ТЗОбъектовСАдресами = Новый ТаблицаЗначений;
	ТзОбъектовСАдресами.Колонки.Добавить("КодОбъекта");
	ТзОбъектовСАдресами.Колонки.Добавить("ТипОбъекта");
	ТЗОбъектовСАдресами.Колонки.Добавить("ТипАдресаВыезда");
	ТЗОбъектовСАдресами.Колонки.Добавить("АдресПредставление");
	ТЗОбъектовСАдресами.Колонки.Добавить("Индекс");
	ТЗОбъектовСАдресами.Колонки.Добавить("Страна");
	ТЗОбъектовСАдресами.Колонки.Добавить("Регион");
	ТЗОбъектовСАдресами.Колонки.Добавить("Город");
	ТЗОбъектовСАдресами.Колонки.Добавить("Улица");
	ТЗОбъектовСАдресами.Колонки.Добавить("Дом");
	
	
	АдресДолжникаСвойство = Константы.МП_АдресВыездаДолжника.Получить();
	АдресСудаСвойство = Константы.МП_АдресВыездаСуд.Получить();
	АдресОСПСвойство = Константы.МП_АдресВыездаОСП.Получить();
	ЕстьИнтеграцияСФССП = Константы.ИспользоватьИнтеграциюФССП.Получить();
	
	Для каждого стр из ТЗКодовОбъектов Цикл
		ОбСсылка = ?(Стр.ТипОбъекта = "ДО",
					Справочники.ДолговыеОбязательства.НайтиПоРеквизиту("КодДО",Стр.КодОбъекта,,),
					Справочники.Контрагенты.НайтиПоРеквизиту("КодКонтрагента",Стр.КодОбъекта,,));		
		ЗаполнитьАдресДолжника(ТЗОбъектовСАдресами,ОбСсылка,АдресДолжникаСвойство,Стр.КодОбъекта,Стр.ТипОбъекта,МассивСокращенийУлиц,МассивСокращенийДомов,МассивСокращенийГородов);
		ЗаполнитьАдресСуда(ТЗОбъектовСАдресами,ОбСсылка,АдресСудаСвойство,Стр.КодОбъекта,Стр.ТипОбъекта,МассивСокращенийУлиц,МассивСокращенийДомов,МассивСокращенийГородов);
		ЗаполнитьАдресОСП(ТЗОбъектовСАдресами,ОбСсылка,АдресОСПСвойство,Стр.КодОбъекта,Стр.ТипОбъекта,МассивСокращенийУлиц,МассивСокращенийДомов,МассивСокращенийГородов,ЕстьИнтеграцияСФССП);		
	КонецЦикла;	
	
	Возврат ТЗОбъектовСАдресами;
	

КонецФункции

Процедура ЗаполнитьАдресДолжника(ТЗ,ОбСсылка,АдресДолжникаСвойство,КодОбъекта,ТипОбъекта,МассивСокращенийУлиц,МассивСокращенийДомов,МассивСокращенийГородов)
	Если ЗначениеЗаполнено(АдресДолжникаСвойство) Тогда
		Адрес = ОбъектыСервер.ПолучитьЗначениеСвойства(ОбСсылка,АдресДолжникаСвойство.Код);
		Если ЗначениеЗаполнено(Адрес) Тогда
			
			Если Адрес = Неопределено Тогда 
				Возврат;
			КонецЕсли;	
			
			Если АдресДолжникаСвойство.ВидСтроки = Перечисления.ВидыТипаСтрока.АдресФИАС Тогда
				СтруктураJSON = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтруктуруJSON(Адрес);
				АдресПредставление = Строка(СтруктураJSON.value);
				НСтр = ТЗ.Добавить();
				Нстр.КодОбъекта = КодОбъекта;
				Нстр.ТипОбъекта = ТипОбъекта;
				Нстр.ТипАдресаВыезда = ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ТипыАдресовВыезда.АдресДолжника);
				Нстр.АдресПредставление = АдресПредставление;
				Нстр.Страна = "Россия";
				ЗаполнитьАдресФИАС(Адрес,Нстр);
			КонецЕсли;
			
			Если АдресДолжникаСвойство.ВидСтроки = Перечисления.ВидыТипаСтрока.Адрес Тогда
				АдресПредставление = бит_АдресныйКлассификатор.ПолучитьЧастьАдресаИзКЛАДР(Адрес,"Представление");
				НСтр = ТЗ.Добавить();
				Нстр.КодОбъекта = КодОбъекта;
				Нстр.ТипОбъекта = ТипОбъекта;
				Нстр.ТипАдресаВыезда = ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ТипыАдресовВыезда.АдресДолжника);
				Нстр.АдресПредставление = АдресПредставление;
				Нстр.Страна = "Россия";
				ЗаполнитьАдресКЛАДР(Адрес,Нстр);
			КонецЕсли;
			
			Если АдресДолжникаСвойство.ВидСтроки = Перечисления.ВидыТипаСтрока.Строка Тогда
				АдресПредставление = Адрес;
				НСтр = ТЗ.Добавить();
				Нстр.КодОбъекта = КодОбъекта;
				Нстр.ТипОбъекта = ТипОбъекта;
				Нстр.ТипАдресаВыезда = ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ТипыАдресовВыезда.АдресДолжника);
				Нстр.АдресПредставление = АдресПредставление;
				Нстр.Страна = "Россия";
				ЗаполнитьСтроковыйАдрес(АдресПредставление,Нстр,МассивСокращенийУлиц,МассивСокращенийДомов,МассивСокращенийГородов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
Конецпроцедуры	

Процедура ЗаполнитьАдресСуда(ТЗ,ОбСсылка,АдресСудаСвойство,КодОбъекта,ТипОбъекта,МассивСокращенийУлиц,МассивСокращенийДомов,МассивСокращенийГородов)
	АдресСтрокой = Ложь;
	Если ЗначениеЗаполнено(АдресСудаСвойство) Тогда
		Адрес = ОбъектыСервер.ПолучитьЗначениеСвойства(ОбСсылка,АдресСудаСвойство.Код);
		Если ЗначениеЗаполнено(Адрес) Тогда
			
			Если Адрес = Неопределено Тогда 
				Возврат;
			КонецЕсли;
			
			Если ТипЗнч(Адрес) = Тип("СправочникСсылка.СудебныеУчастки") Или ТипЗнч(Адрес) = Тип("СправочникСсылка.Судьи") Тогда
				АдресПредставление = Адрес.Адрес;
				АдресСтрокой = Истина;
			КонецЕсли;
			
			Если АдресСудаСвойство.ВидСтроки = Перечисления.ВидыТипаСтрока.АдресФИАС Тогда
				СтруктураJSON = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтруктуруJSON(Адрес);
				АдресПредставление = Строка(СтруктураJSON.value);
				НСтр = ТЗ.Добавить();
				Нстр.КодОбъекта = КодОбъекта;
				Нстр.ТипОбъекта = ТипОбъекта;
				Нстр.ТипАдресаВыезда = ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ТипыАдресовВыезда.АдресСуда);
				Нстр.АдресПредставление = АдресПредставление;
				Нстр.Страна = "Россия";
				ЗаполнитьАдресФИАС(Адрес, Нстр);
			КонецЕсли;
			
			Если АдресСудаСвойство.ВидСтроки = Перечисления.ВидыТипаСтрока.Адрес Тогда
				АдресПредставление = бит_АдресныйКлассификатор.ПолучитьЧастьАдресаИзКЛАДР(Адрес,"Представление");
				НСтр = ТЗ.Добавить();
				Нстр.КодОбъекта = КодОбъекта;
				Нстр.ТипОбъекта = ТипОбъекта;
				Нстр.ТипАдресаВыезда = ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ТипыАдресовВыезда.АдресСуда);
				Нстр.АдресПредставление = АдресПредставление;
				Нстр.Страна = "Россия";
				ЗаполнитьАдресКЛАДР(Адрес,Нстр);
			КонецЕсли;
			
			Если АдресСудаСвойство.ВидСтроки = Перечисления.ВидыТипаСтрока.Строка Или АдресСтрокой Тогда
				НСтр = ТЗ.Добавить();
				Нстр.КодОбъекта = КодОбъекта;
				Нстр.ТипОбъекта = ТипОбъекта;
				Нстр.ТипАдресаВыезда = ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ТипыАдресовВыезда.АдресСуда);
				Нстр.АдресПредставление = АдресПредставление;
				Нстр.Страна = "Россия";
				ЗаполнитьСтроковыйАдрес(АдресПредставление,Нстр,МассивСокращенийУлиц,МассивСокращенийДомов,МассивСокращенийГородов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗаполнитьАдресОСП(ТЗ,ОбСсылка,АдресОСПСвойство,КодОбъекта,ТипОбъекта,МассивСокращенийУлиц,МассивСокращенийДомов,МассивСокращенийГородов,ЕстьИнтеграцияСФССП)
	АдресСтрокой = Ложь;
	Если ЗначениеЗаполнено(АдресОСПСвойство) Тогда
		Адрес = ОбъектыСервер.ПолучитьЗначениеСвойства(ОбСсылка,АдресОСПСвойство.Код);
		Если ЗначениеЗаполнено(Адрес) Тогда
			
			Если Адрес = Неопределено Тогда 
				Возврат;
			КонецЕсли;
			
			Если ТипЗнч(Адрес) = Тип("СправочникСсылка.ФССП_СлужбыСудебныхПриставов") Тогда
				АдресПредставление = Адрес.ПочтовыйАдрес;
				АдресСтрокой = Истина;
			КонецЕсли;
			
			Если ТипЗнч(Адрес) = Тип("СправочникСсылка.СудебныеПриставы") Тогда
				АдресПредставление = Адрес.Адрес;
				АдресСтрокой = Истина;
			КонецЕсли;
			
			Если АдресОСПСвойство.ВидСтроки = Перечисления.ВидыТипаСтрока.АдресФИАС Тогда
				СтруктураJSON = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтруктуруJSON(Адрес);
				АдресПредставление = Строка(СтруктураJSON.value);
				НСтр = ТЗ.Добавить();
				Нстр.КодОбъекта = КодОбъекта;
				Нстр.ТипОбъекта = ТипОбъекта;
				Нстр.ТипАдресаВыезда = ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ТипыАдресовВыезда.АдресОСП);
				Нстр.АдресПредставление = АдресПредставление;
				Нстр.Страна = "Россия";
				ЗаполнитьАдресФИАС(Адрес,Нстр);
			КонецЕсли;
			
			Если АдресОСПСвойство.ВидСтроки = Перечисления.ВидыТипаСтрока.Адрес Тогда
				АдресПредставление = бит_АдресныйКлассификатор.ПолучитьЧастьАдресаИзКЛАДР(Адрес,"Представление");
				НСтр = ТЗ.Добавить();
				Нстр.КодОбъекта = КодОбъекта;
				Нстр.ТипОбъекта = ТипОбъекта;
				Нстр.ТипАдресаВыезда = ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ТипыАдресовВыезда.АдресОСП);
				Нстр.АдресПредставление = АдресПредставление;
				Нстр.Страна = "Россия";
				ЗаполнитьАдресКЛАДР(Адрес,Нстр);
			КонецЕсли;
			
			Если АдресОСПСвойство.ВидСтроки = Перечисления.ВидыТипаСтрока.Строка Или АдресСтрокой Тогда
				НСтр = ТЗ.Добавить();
				Нстр.КодОбъекта = КодОбъекта;
				Нстр.ТипОбъекта = ТипОбъекта;
				Нстр.ТипАдресаВыезда = ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ТипыАдресовВыезда.АдресОСП);
				Нстр.АдресПредставление = АдресПредставление;
				Нстр.Страна = "Россия";
				ЗаполнитьСтроковыйАдрес(АдресПредставление,Нстр,МассивСокращенийУлиц,МассивСокращенийДомов,МассивСокращенийГородов);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если ЕстьИнтеграцияСФССП Тогда
			Владелец = ОбСсылка;
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ФССП_СостояниеИПСрезПоследних.ОтделСудебныхПриставов КАК ОтделСудебныхПриставов
			|ИЗ
			|	Справочник.ФССП_ИсполнительноеПроизводство КАК ФССП_ИсполнительноеПроизводство
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФССП_СостояниеИП.СрезПоследних(&ТекущаяДата) КАК ФССП_СостояниеИПСрезПоследних
			|		ПО (ФССП_СостояниеИПСрезПоследних.ИП = ФССП_ИсполнительноеПроизводство.Ссылка)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсполнительныеДокументы КАК ИсполнительныеДокументы
			|		ПО ФССП_ИсполнительноеПроизводство.НомерИД = ИсполнительныеДокументы.Ссылка
			|ГДЕ
			|	ФССП_ИсполнительноеПроизводство.ПометкаУдаления = ЛОЖЬ
			|	И ИсполнительныеДокументы.Владелец = &Владелец";
			
			Запрос.УстановитьПараметр("Владелец", Владелец);
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				НСтр = ТЗ.Добавить();
				Нстр.КодОбъекта = КодОбъекта;
				Нстр.ТипОбъекта = ТипОбъекта;
				Нстр.ТипАдресаВыезда = ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ТипыАдресовВыезда.АдресОСП);
				Нстр.АдресПредставление = ВыборкаДетальныеЗаписи.ОтделСудебныхПриставов.ПочтовыйАдрес;
				Нстр.Страна = "Россия";
				ЗаполнитьСтроковыйАдрес(Нстр.АдресПредставление,Нстр,МассивСокращенийУлиц,МассивСокращенийДомов,МассивСокращенийГородов);
			КонецЦикла;			
			
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры	

Процедура ЗаполнитьМассивСокращенийУлиц(Массив)
	
	Массив.Добавить("Улица");
	Массив.Добавить("улица");
	Массив.Добавить("Ул.");
	Массив.Добавить("ул.");
	Массив.Добавить("Ул ");
	Массив.Добавить("ул ");
	
	Массив.Добавить("Проспект");
	Массив.Добавить("проспект");
	Массив.Добавить("Просп ");
	Массив.Добавить("просп ");
	Массив.Добавить("Просп.");
	Массив.Добавить("просп.");

	Массив.Добавить("пр-т");
	Массив.Добавить("Пр-т");
	Массив.Добавить("пр-кт");
	Массив.Добавить("Пр-кт");
	
	
	Массив.Добавить("Проезд");
	Массив.Добавить("проезд");
	Массив.Добавить("Пр.");
	Массив.Добавить("пр.");
	Массив.Добавить("Пр ");
	Массив.Добавить("пр ");
	
	Массив.Добавить("Переулок");
	Массив.Добавить("переулок");
	Массив.Добавить("Пер ");
	Массив.Добавить("пер ");
	Массив.Добавить("Пер.");
	Массив.Добавить("пер.");

	
	Массив.Добавить("Набережная");
	Массив.Добавить("набережная");
	Массив.Добавить("Наб ");
	Массив.Добавить("наб ");
	Массив.Добавить("Наб.");
	Массив.Добавить("наб.");
	
	Массив.Добавить("Площадь");
	Массив.Добавить("площадь");
	Массив.Добавить("пл ");
	Массив.Добавить("Пл ");
	Массив.Добавить("пл.");
	Массив.Добавить("Пл.");
	
	
	Массив.Добавить("Бульвар");
	Массив.Добавить("бульвар");
	Массив.Добавить("Бул.");
	Массив.Добавить("бул.");
	Массив.Добавить("Бул ");
	Массив.Добавить("бул ");
	Массив.Добавить("б-р");
	Массив.Добавить("Б-р");
	
	Массив.Добавить("Линия");
	Массив.Добавить("линия");
	Массив.Добавить("Л ");
	Массив.Добавить("л ");
	Массив.Добавить("Л.");
	Массив.Добавить("л.");
	Массив.Добавить("Лин ");
	Массив.Добавить("лин ");
	Массив.Добавить("Лин.");
	Массив.Добавить("лин.");

	
	Массив.Добавить("шоссе");
	Массив.Добавить("Шоссе");
	Массив.Добавить("ш.");
	Массив.Добавить("Ш.");
	Массив.Добавить("ш ");
	Массив.Добавить("Ш ");
	Массив.Добавить("Шос ");
	Массив.Добавить("шос ");
	Массив.Добавить("Шос.");
	Массив.Добавить("шос.");

	

		
КонецПроцедуры	

Процедура ЗаполнитьМассивСокращенийГородов(Массив)
	
	Массив.Добавить("Г.");
	Массив.Добавить("г.");
	Массив.Добавить("Гор.");
	Массив.Добавить("гор.");
	Массив.Добавить("р.п.");
	Массив.Добавить("Р.п.");
	
	Массив.Добавить("рп.");
	Массив.Добавить("Рп.");
	
	Массив.Добавить("Пгт.");
	Массив.Добавить("пгт.");
	Массив.Добавить("Пос.");
	Массив.Добавить("пос.");
	Массив.Добавить("П.");
	Массив.Добавить("п.");
	Массив.Добавить("с.");
	Массив.Добавить("С.");
	Массив.Добавить("Ст.");
	Массив.Добавить("ст.");
	Массив.Добавить("Дер.");
	Массив.Добавить("дер.");
	Массив.Добавить("Д.");
	Массив.Добавить("д.");

	
	Массив.Добавить("Г ");
	Массив.Добавить("г ");
	Массив.Добавить("П ");
	Массив.Добавить("п ");
	Массив.Добавить("с ");
	Массив.Добавить("С ");
	Массив.Добавить("Ст ");
	Массив.Добавить("ст ");
	Массив.Добавить("Д ");
	Массив.Добавить("д ");
	
	Массив.Добавить("Пгт ");
	Массив.Добавить("пгт ");
	Массив.Добавить("рп ");
	Массив.Добавить("Рп ");


	Массив.Добавить("Ст-ца ");
	Массив.Добавить("ст-ца ");
	Массив.Добавить("Дер ");
	Массив.Добавить("дер ");
	Массив.Добавить("Гор ");
	Массив.Добавить("гор ");
	Массив.Добавить("Пос ");
	Массив.Добавить("пос ");

	
	Массив.Добавить("Город");
	Массив.Добавить("город");
	Массив.Добавить("Поселок");
	Массив.Добавить("поселок");
	Массив.Добавить("Село");
	Массив.Добавить("село");
	Массив.Добавить("Станица");
	Массив.Добавить("станица");
	Массив.Добавить("Деревня");
	Массив.Добавить("деревня");
КонецПроцедуры

Процедура ЗаполнитьМассивСокращенийДомов(Массив)
	
	Массив.Добавить("Дом");
	Массив.Добавить("Корпус");
	Массив.Добавить("Строение");
	Массив.Добавить("дом");
	Массив.Добавить("корпус");
	Массив.Добавить("строение");

	Массив.Добавить("Д ");
	Массив.Добавить("д ");
	Массив.Добавить("К ");
	Массив.Добавить("к ");
	Массив.Добавить("Корп ");
	Массив.Добавить("корп ");
	Массив.Добавить("Стр ");
	Массив.Добавить("стр ");
	
	Массив.Добавить("Д.");
	Массив.Добавить("д.");
	Массив.Добавить("К.");
	Массив.Добавить("к.");
	Массив.Добавить("Корп.");
	Массив.Добавить("корп.");
	Массив.Добавить("Стр.");
	Массив.Добавить("стр.");
	
КонецПроцедуры

Процедура ЗаполнитьАдресКЛАДР(АдресКЛАДР,СтрокаТЗ)
	ЧастиАдресаКЛАДР = Новый Массив;
	ЧастиАдресаКЛАДР.Добавить("Индекс");
	ЧастиАдресаКЛАДР.Добавить("Регион");
	ЧастиАдресаКЛАДР.Добавить("Район");
	ЧастиАдресаКЛАДР.Добавить("Город");
	ЧастиАдресаКЛАДР.Добавить("Улица");
	ЧастиАдресаКЛАДР.Добавить("Дом");
	ЧастиАдресаКЛАДР.Добавить("ТипДома");
	ЧастиАдресаКЛАДР.Добавить("НаселенныйПункт");
	ЧастиАдресаКЛАДР.Добавить("Корпус");
	ЧастиАдресаКЛАДР.Добавить("Квартира");
	ЧастиАдресаКЛАДР.Добавить("Офис");

	СтруктураАдресаКЛАДР = Бит_АдресныйКлассификатор.ПолучитьЧастиАдресаИзКЛАДР(АдресКЛАДР,ЧастиАдресаКЛАДР);
	
	Для Каждого Элемент Из СтруктураАдресаКЛАДР Цикл
		Если Элемент.Ключ = "Индекс" Тогда
			СтрокаТЗ.Индекс = Элемент.Значение;
		КонецЕсли;	
		Если Элемент.Ключ = "Регион" Или Элемент.Ключ = "Район" Тогда
			СтрокаТЗ.Регион = СтрокаТЗ.Регион+ " "+Элемент.Значение;
		КонецЕсли;
		
		Если Элемент.Ключ = "Город"  Тогда
			СтрокаТЗ.Город = Элемент.Значение;
		КонецЕсли;
		
		Если Элемент.Ключ = "Улица"  Тогда
			СтрокаТЗ.Улица = Элемент.Значение;
		КонецЕсли;
				
		Если Элемент.Ключ = "Дом" Тогда
			СтрокаТЗ.Дом = Элемент.Значение;
		КонецЕсли;
		
		Если Элемент.Ключ = "Корпус" Тогда
			СтрокаТЗ.Дом = СтрокаТЗ.Дом + " "+Элемент.Значение;
		КонецЕсли;

	КонецЦикла;
	
	Для Каждого Элемент Из СтруктураАдресаКЛАДР Цикл
		Если Элемент.Ключ <> "НаселенныйПункт" Тогда
			Продолжить;
		Иначе	
			Если Не ЗначениеЗаполнено(СтрокаТЗ.Город) Тогда
				СтрокаТЗ.Город = Элемент.Значение;
			КонецЕсли;	
			Если Не ЗначениеЗаполнено(СтрокаТЗ.Улица) Тогда
				СтрокаТЗ.Улица = Элемент.Значение;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;

		
КонецПроцедуры

Процедура ЗаполнитьАдресФИАС(АдресФИАС, СтрокаТЗ)
	ЧастиАдресаФИАС = Новый Массив;
	ЧастиАдресаФИАС.Добавить("Индекс");
	ЧастиАдресаФИАС.Добавить("Регион");
	ЧастиАдресаФИАС.Добавить("Район");
	ЧастиАдресаФИАС.Добавить("Город");
	ЧастиАдресаФИАС.Добавить("Улица");
	ЧастиАдресаФИАС.Добавить("Дом");
	ЧастиАдресаФИАС.Добавить("ТипДома");
	ЧастиАдресаФИАС.Добавить("НаселенныйПункт");
	ЧастиАдресаФИАС.Добавить("Корпус");
	ЧастиАдресаФИАС.Добавить("Квартира");
	
	Для Каждого ЧастьАдреса Из ЧастиАдресаФИАС Цикл
		ЧастьАдресаСтр = Бит_АдресныйКлассификатор.ПолучитьЧастьАдресаИзФИАС(АдресФИАС, ЧастьАдреса);
		Попытка
			СтрокаТЗ[ЧастьАдреса] = ЧастьАдресаСтр;
		Исключение
		КонецПопытки;
		Если ЧастьАдреса = "НаселенныйПункт" Тогда
			ГородСтр = ЧастьАдресаСтр;
		КонецЕсли;	
		Если ЧастьАдреса = "Корпус" Тогда
			КорпСтр = ЧастьАдресаСтр;
			СтрокаТЗ.Дом = СтрокаТЗ.Дом + " " + КорпСтр;
		КонецЕсли;
	КонецЦикла;	
	
	Если Не ЗначениеЗаполнено(СтрокаТЗ.Город) Тогда
		СтрокаТЗ.Город = ГородСтр;
	КонецЕсли;	
	Если Не ЗначениеЗаполнено(СтрокаТЗ.Улица) Тогда
		СтрокаТЗ.Улица = ГородСтр;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьСтроковыйАдрес(АдресСтрока,СтрокаТЗ,СокращенияУлиц,СокращенияДомов,СокращенияГородов)
	МассивАдреса = УдалитьСтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(АдресСтрока);
	Для каждого ЧастьАдреса из МассивАдреса Цикл
		бит_ФССП_ИнтеграцияФССП.УдалитьПробелыСКраев(ЧастьАдреса);
		ТипСлова = бит_ФССП_ИнтеграцияФССП.ПолучитьТипСлова(ЧастьАдреса);
		Если ТипСлова = "Число" и СтрДлина(ЧастьАдреса) = 6 Тогда
			СтрокаТЗ.Индекс = ЧастьАдреса;
			Продолжить;
		КонецЕсли;
		
		ПоискЧастиАдреса(ЧастьАдреса,СтрокаТЗ,СокращенияУлиц,СокращенияДомов,СокращенияГородов);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(СтрокаТЗ.Улица) Тогда
		СтрокаТЗ.Улица = СтрокаТЗ.Город;
	КонецЕсли;
	
	

	
КонецПроцедуры

Процедура ПоискЧастиАдреса(ЧастьАдреса,СтрокаТЗ,СокращенияУлиц,СокращенияДомов,СокращенияГородов)
		
	Для Каждого сокращение из СокращенияГородов Цикл
		Если стрНайти(ЧастьАдреса,Сокращение,,,) > 0 Тогда
			//ПозицияРазделителя =?(СтрНайти(ЧастьАдреса,".")=0,Стрнайти(ЧастьАдреса," "),СтрНайти(ЧастьАдреса,"."));
			//Прав("ст. Павловская", СтрДлина("ст. Павловская")-ПозицияРазделителя)
			//ЧастьАдресаБезСокращений = Прав(ЧастьАдреса,СтрДлина(ЧастьАдреса)-ПозицияРазделителя);
			ЧастьАдресаБезСокращений = СтрЗаменить(ЧастьАдреса,Сокращение,"");
			ТипСлова = бит_ФССП_ИнтеграцияФССП.ПолучитьТипСлова(ЧастьАдресаБезСокращений);
			Если ТипСлова = "Слово" Тогда
				СтрокаТЗ.Город = Строка(СтрокаТЗ.Город)+" "+ Строка(ЧастьАдресаБезСокращений);
				бит_ФССП_ИнтеграцияФССП.УдалитьПробелыСКраев(СтрокаТЗ.Город);
			Иначе
				Если Сокращение = "рп." или Сокращение = "рп " Тогда 
					Прервать;
				КонецЕсли;
				СтрокаТЗ.Дом = Строка(СтрокаТЗ.Дом) +" "+Строка(ЧастьАдресаБезСокращений);
				бит_ФССП_ИнтеграцияФССП.УдалитьПробелыСКраев(СтрокаТЗ.Дом);
			КонецЕсли;	
			Возврат;
		КонецЕсли;			
	КонецЦикла;	
	
	
	Для Каждого сокращение из СокращенияУлиц Цикл
		Если стрНайти(ЧастьАдреса,Сокращение,,,) > 0 Тогда
			//ПозицияРазделителя =?(СтрНайти(ЧастьАдреса,".")=0,Стрнайти(ЧастьАдреса," "),СтрНайти(ЧастьАдреса,"."));
			//ЧастьАдресаБезСокращений = Прав(ЧастьАдреса,СтрДлина(ЧастьАдреса)-ПозицияРазделителя);
			ЧастьАдресаБезСокращений = СтрЗаменить(ЧастьАдреса,Сокращение,"");
			СтрокаТЗ.Улица = ЧастьАдресаБезСокращений;
			бит_ФССП_ИнтеграцияФССП.УдалитьПробелыСКраев(СтрокаТЗ.Улица);
			Возврат;
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого сокращение из СокращенияДомов Цикл
		Если стрНайти(ЧастьАдреса,Сокращение,,,) > 0 Тогда
			ЧастьАдресаБезСокращений = СтрЗаменить(ЧастьАдреса,Сокращение,"");
			СтрокаТЗ.Дом = Строка(СтрокаТЗ.Дом) +" "+Строка(ЧастьАдресаБезСокращений);
			бит_ФССП_ИнтеграцияФССП.УдалитьПробелыСКраев(СтрокаТЗ.Дом);
			Возврат;
		КонецЕсли;
	КонецЦикла;	
	
	ТипСлова = бит_ФССП_ИнтеграцияФССП.ПолучитьТипСлова(ЧастьАдреса);
	
	Если ТипСлова = "Число" Или ТипСлова = "Номер" и стрДлина(ЧастьАдреса) < 6 Тогда		
		СтрокаТЗ.Дом = Строка(СтрокаТЗ.Дом) +" "+Строка(ЧастьАдреса);
		бит_ФССП_ИнтеграцияФССП.УдалитьПробелыСКраев(СтрокаТЗ.Дом);
	КонецЕсли;	
		
КонецПроцедуры

Функция СформироватьАдресаЭлектроннойПочтыОбъектов(ТЗКодовОбъектов) Экспорт
	
	
	ТЗОбъектовСАдресами = Новый ТаблицаЗначений;
	ТзОбъектовСАдресами.Колонки.Добавить("КодОбъекта");
	ТзОбъектовСАдресами.Колонки.Добавить("ТипОбъекта");
	ТзОбъектовСАдресами.Колонки.Добавить("Email");
	
	АккаунтКомпании = Константы.УчеткаEMailРассылок.Получить();
	
	ЕмаилКомпании = АккаунтКомпании.АдресЭлектроннойПочты;
	
	
	ЕмаилСвойство = Константы.МП_АдресЭлектроннойПочты.Получить();
	
	Для каждого стр из ТЗКодовОбъектов Цикл
		Если Стр.ТипОбъекта = "Пользователь" Тогда
			НСтр = ТЗОбъектовСАдресами.Добавить();
			Нстр.КодОбъекта = Стр.КодОбъекта;
			Нстр.ТипОбъекта = Стр.ТипОбъекта;
			Нстр.Email = ЕмаилКомпании;
			Продолжить;
		КонецЕсли;
		
		
		
		ОбСсылка = ?(Стр.ТипОбъекта = "ДО",
		Справочники.ДолговыеОбязательства.НайтиПоРеквизиту("КодДО",Стр.КодОбъекта,,),
		Справочники.Контрагенты.НайтиПоРеквизиту("КодКонтрагента",Стр.КодОбъекта,,));
		АдресЕмаил = ОбъектыСервер.ПолучитьЗначениеСвойства(ОбСсылка,ЕмаилСвойство.Код);
		Если ЗначениеЗаполнено(АдресЕмаил) Тогда
			НСтр = ТЗОбъектовСАдресами.Добавить();
			Нстр.КодОбъекта = Стр.КодОбъекта;
			Нстр.ТипОбъекта = Стр.ТипОбъекта;
			Нстр.Email = АдресЕмаил;
		КонецЕсли;
		
		
	КонецЦикла;	
	
	
	
	Возврат ТЗОбъектовСАдресами;
	

КонецФункции

Функция СформироватьПакетОбменаВФайл(УзелОбмена,ЗаписьXML) Экспорт
	//ЗаписьXML = Новый ЗаписьXML;
	//ЗаписьXML.УстановитьСтроку("UTF-8");
	//ЗаписьXML.ЗаписатьОбъявлениеXML();
	// 	
	//ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	//ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбмена);	
	//
	//ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	//ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/data");
	//
	//
	//ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбмена, ЗаписьСообщения.НомерСообщения);
	//ОбъектыВРаботеСотрудника = ПолучитьТаблицуРегистрируемыхОбъектов(УзелОбмена.ОтветственныйВыезднойСотрудник);
	//МаршрутыСотрудника = ПолучитьТаблицуМаршрутов(УзелОбмена.ОтветственныйВыезднойСотрудник);
	//ОтсутствияСотрудника  = ПолучитьТаблицуОтсутствий(УзелОбмена.ОтветственныйВыезднойСотрудник);
	//ОбещанныеПлатежиСотрудника = ПолучитьТаблицуОбещанныхПлатежей(ОбъектыВРаботеСотрудника);
	//МероприятияСотрудника = ПолучитьТаблицуМероприятий(УзелОбмена.ОтветственныйВыезднойСотрудник,ОбъектыВРаботеСотрудника);
	//ТипыМероприятий = ПолучитьТаблицуТиповМероприятий(МероприятияСотрудника);
	//РезультатыМероприятий = ПолучитьТаблицуРезультатов(ТипыМероприятий);
	//ПрикрепляемыеФайлы = ПолучитьТаблицуПрикрепляемыхФайлов(ОбъектыВРаботеСотрудника);
	//
	//Пока ВыборкаИзменений.Следующий() Цикл
	//	Данные = ВыборкаИзменений.Получить();
	//	Если Не НуженПереносДанных(Данные,УзелОбмена,ОбъектыВРаботеСотрудника,МаршрутыСотрудника,ОтсутствияСотрудника,ОбещанныеПлатежиСотрудника,МероприятияСотрудника,ТипыМероприятий,РезультатыМероприятий,ПрикрепляемыеФайлы) Тогда
	//		УдалениеДанных(Данные,ЗаписьXML);
	//	КонецЕсли;
	//	Если ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ТрекСотрудника") Тогда
	//		НаборЗаписейСотрудника = Данные.Отбор.Установить(УзелОбмена.ОтветственныйВыезднойСотрудник);
	//		НаборЗаписейСотрудника.Прочитать();
	//		ЗаписатьДанные(ЗаписьXML, НаборЗаписейСотрудника);
	//		Продолжить;
	//	КонецЕсли;
	//	Если ТипЗнч(Данные) = Тип("РегистрНакопленияНаборЗаписей.СобытияПоОбъектам") Тогда
	//		Если ОбещанныеПлатежиСотрудника = Неопределено Тогда
	//			Продолжить;
	//		КонецЕсли;	
	//		Для Каждого ОбПлатеж из ОбещанныеПлатежиСотрудника Цикл
	//			НаборЗаписей = Данные;
	//			НаборЗаписей.Отбор.Регистратор.Значение = ОбПлатеж.Ссылка;
	//			НаборЗаписей.Прочитать();
	//			ЗаписатьДанные(ЗаписьXML, НаборЗаписейСотрудника);
	//		КонецЦикла;	
	//		Продолжить;
	//	КонецЕсли;

	//	
	//	// Записываем данные в сообщение
	//	ЗаписатьДанные(ЗаписьXML, Данные);
	//КонецЦикла;
	// 
	//ЗаписьСообщения.ЗакончитьЗапись();
	//
	//Возврат Новый ХранилищеЗначения(ЗаписьXML.Закрыть(), Новый СжатиеДанных(9));
КонецФункции



////////////////////////////////////////////////////////////////////////////////
// Для взаимодействия

#Область Интерфейс

// Получение строкового значения из ячейки Табличного документа
//
// Параметры:
//  ПолеИсходнойТаблицы  - ТабличныйДокумент - Область табличного документа
//                 
//  НомерСтроки  - Число - Порядковый номер строки
//                 
//  НомерКолонки  - Число - Порядковый номер колонки
//
// Возвращаемое значение:
//   Строка   - Текст из ячейки табличного документа
//
Функция ТекстЯчейки(ПолеИсходнойТаблицы, НомерСтроки, НомерКолонки) Экспорт

	Возврат ПолеИсходнойТаблицы.Область(НомерСтроки, НомерКолонки).Текст;

КонецФункции // ()

// Заполняет Табличный документ из файла (.xls, .xlsx, .ods)
//
// Параметры:
//  ДанныеФайла  - Структура - 
//                 - Расширение  - Строка - Расширение передаваемого файла
//                 - АдресХранилища  - Строка - Адрес файла во временном хранилище
// Возвращаемое значение:
//   ДанныеИзФайла  - ТабличныйДокумент - Табличный документ заполненный данными из импортируемого файла
//
Функция ПрочитатьФайлВТабличныйДокумент(ДанныеФайла) Экспорт

	Если Не ЭтоТабличныйДокумент(ДанныеФайла["Расширение"]) Тогда
	
		ВызватьИсключение "Не подходящее расширение файла: " + ДанныеФайла["Расширение"];
	
	КонецЕсли;
	
	ИмяФайла = ЗадатьИмяВременногоФайла(ДанныеФайла);
	Адрес = ДанныеФайла["АдресХранилища"];
	
	ИмяФайла = ЗаполнитьВременныйФайлПоАдресуВХранилище(ИмяФайла, Адрес);
	
	Возврат ПолучитьТабличныйДокументИзФайлаХранилища(ИмяФайла);

КонецФункции// ()

Функция ПолучитьТабличныйДокументИзФайлаХранилища(ИмяФайла) Экспорт

	ДанныеИзФайла = Новый ТабличныйДокумент;
	Попытка
	
		ДанныеИзФайла.Прочитать(ИмяФайла);
	
	Исключение
		ВызватьИсключение "Не удалось прочитать файл: " + ИмяФайла + Символы.ПС + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат ДанныеИзФайла;

КонецФункции // ()

// ДанныеФайла - Структура
//   Расширение - Строка - Расширение создаваемого файла
//   Имя        - Строка, Неопределено -
//     Если неопределено, или нет свойства, имя файла присваивается автоматически,
//     Иначе переданное имя
Функция ЗадатьИмяВременногоФайла(ДанныеФайла) Экспорт

	Расширение = ДанныеФайла["Расширение"];

	ИмяФайла = ПолучитьИмяВременногоФайла(Расширение);
	
	ПереданноеИмя = Неопределено;
	Если ДанныеФайла.Свойство("Имя", ПереданноеИмя)
		И ПереданноеИмя <> Неопределено Тогда
	
		ИмяФайла = СформироватьИмяФайлаПоПереданномуИмени(
			ПереданноеИмя,
			Расширение
		);
	
	КонецЕсли;
	
	Возврат ИмяФайла;

КонецФункции // ()

// Пытается в файл записать данные из хранилища, если не получается падает
Функция ЗаполнитьВременныйФайлПоАдресуВХранилище(ИмяФайла, Адрес) Экспорт

	Если Не ЭтоАдресВременногоХранилища(Адрес) Тогда
	
		ВызватьИсключение "Не существует переданного адреса в хранилище";
	
	КонецЕсли;
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	Если ДвоичныеДанные = Неопределено Тогда
	
		ВызватьИсключение "Не удалось получить данные по переданному адресу!" + Адрес;
	
	КонецЕсли;
	Попытка
	
		ДвоичныеДанные.Записать(ИмяФайла);
	
	Исключение
		ВызватьИсключение "Не удалось записать временный файл: " + ИмяФайла + Символы.ПС + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат ИмяФайла;

КонецФункции // ()

// По Имени файла и Адресу в хранилище возвращает заполненный данными ТабличныйДокумент
//
// Параметры:
//   ФайлИмпорта      - Строка - Имя файла с расширением
//   АдресФайлИмпорта - Адрес во временном хранилище
//
// Возвращаемое значение:
//   Структура - Данные о загруженном ТабличномДокументе
//     Ошибка            - Строка, Неопределено - Описание ошибки
//     ИмяФайла          - Строка - Имя временного файла
//     Сообщение         - Строка - Сообщение о результате, если была ошибка, то расширенное описание
//     ТабличныйДокумент - ТабличныйДокумент, Неопределено - Если была ошибка, то Неопределено
Функция ЗаполнитьТабличныйДокументИзАрхива(ФайлИмпорта, АдресФайлИмпорта) Экспорт

	ДанныеТабличногоДокумента = Новый Структура;
	ЗаполнитьДанныеФайла(ДанныеТабличногоДокумента, ФайлИмпорта, Истина);
	ДанныеТабличногоДокумента.Вставить("Адрес", АдресФайлИмпорта);
	Ответ = ПолучитьВременныйФайл(ДанныеТабличногоДокумента);
	Ответ.Вставить("ТабличныйДокумент", Неопределено);
	Если Ответ["Ошибка"] <> Неопределено Тогда
	
		Ответ.Вставить("Сообщение", Ответ["Ошибка"]);
		Возврат Ответ;
	
	КонецЕсли;
	
	Попытка
	
		ПолеИсходнойТаблицы = ПолучитьТабличныйДокументИзФайлаХранилища(
			Ответ["ИмяФайла"]
		);
	
	Исключение
		ФайловаяСистема.УдалитьВременныйФайл(Ответ["ИмяФайла"]);
		Ответ.Вставить("Ошибка", ОписаниеОшибки());
		Ответ.Вставить("Сообщение", "Ошибка при востановлении файла: " + ОписаниеОшибки());
		Возврат Ответ;
	КонецПопытки;
	
	Ответ.Вставить("Сообщение", "Выведена таблица");
	Ответ.Вставить("ТабличныйДокумент", ПолеИсходнойТаблицы);
	
	Возврат Ответ;

КонецФункции

#КонецОбласти

#Область ВнутренняяЧасть

Функция СформироватьИмяФайлаПоПереданномуИмени(Имя, Расширение)

	НормализованноеРасширение = Новый Файл(Расширение);
	НормализованноеИмя = Новый Файл(Имя);
	
	Каталог = КаталогВременныхФайлов();
	
	ВременныйФайл = Новый Файл(
		Каталог
		+ НормализованноеИмя.ИмяБезРасширения
		+ НормализованноеРасширение.Расширение
	);
	
	Возврат ВременныйФайл.ПолноеИмя;

КонецФункции // ()

Функция ЭтоТабличныйДокумент(Расширение)

	ДоступныеРасширения = РасширенияДляТабличногоДокумента();
	Если ДоступныеРасширения.Найти(Расширение) = Неопределено Тогда
	
		Возврат Ложь;
	
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ()

// Возвращает набор допустимых расширений для считывания в Табличный документ
//
// Возвращаемое значение:
//   Массив   - Массив строк содержащий расширения файлов вида: .<Расширение>
//
Функция РасширенияДляТабличногоДокумента()

	Расширения = Новый Массив;
	Расширения.Добавить(".xls");
	Расширения.Добавить(".xlsx");
	Расширения.Добавить(".ods");
	
	Возврат Расширения;

КонецФункции // ()

Функция ПолучитьВременныйФайл(ДанныеФайла)

	ИмяФайла = ЗадатьИмяВременногоФайла(ДанныеФайла);
	
	Ответ = Новый Структура;
	Ответ.Вставить("Ошибка", Неопределено);
	Ответ.Вставить("ИмяФайла", Неопределено);
	
	Попытка
	
		ИмяФайла = ЗаполнитьВременныйФайлПоАдресуВХранилище(
			ИмяФайла,
			ДанныеФайла["Адрес"]
		);
	
	Исключение
		ФайловаяСистема.УдалитьВременныйФайл(ИмяФайла);
		Ответ.Вставить("Ошибка", ОписаниеОшибки());
		Возврат Ответ;
	КонецПопытки;
	
	Ответ.Вставить("ИмяФайла", ИмяФайла);
	
	Возврат Ответ;

КонецФункции // ()

Функция ЗаполнитьДанныеФайла(Данные, ПутьФайла, ТолькоРасширение = Ложь)

	Файл = Новый Файл(ПутьФайла);
	Если Не ТолькоРасширение Тогда
	
		Данные.Вставить("Имя", Файл.ИмяБезРасширения);
	
	КонецЕсли;
	Данные.Вставить("Расширение", Файл.Расширение);
	
	Возврат Истина;

КонецФункции // ()

#КонецОбласти

#Область НаУдаление

// Заполняет Табличный документ из файла (.xls, .xlsx, .ods)
//
// Параметры:
//  ДанныеФайла  - Структура - 
//                 - Расширение  - Строка - Расширение передаваемого файла
//                 - АдресХранилища  - Строка - Адрес файла во временном хранилище
// Возвращаемое значение:
//   ДанныеИзФайла  - ТабличныйДокумент - Табличный документ заполненный данными из импортируемого файла
//
Функция Старый_ПрочитатьФайлВТабличныйДокумент(ДанныеФайла) Экспорт

	Расширение = ДанныеФайла["Расширение"];
	Если НЕ ЭтоТабличныйДокумент(Расширение) Тогда
	
		ВызватьИсключение "Не подходящее расширение файла: " + Расширение;
	
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла(Расширение);
	Адрес = ДанныеФайла["АдресХранилища"];
	Если НЕ ЭтоАдресВременногоХранилища(Адрес) Тогда
	
		ВызватьИсключение "Не существует переданного адреса в хранилище";
	
	КонецЕсли;
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	Если ДвоичныеДанные = Неопределено Тогда
	
		ВызватьИсключение "Не удалось получить данные по переданному адресу!";
	
	КонецЕсли;
	Попытка
	
		ДвоичныеДанные.Записать(ИмяФайла);
	
	Исключение
		ВызватьИсключение "Не удалось записать временный файл: " + ИмяФайла + Символы.ПС + ОписаниеОшибки();
	КонецПопытки;
	
	ДанныеИзФайла = Новый ТабличныйДокумент;
	Попытка
	
		ДанныеИзФайла.Прочитать(ИмяФайла);
	
	Исключение
		ФайловаяСистема.УдалитьВременныйФайл(ИмяФайла);
		ВызватьИсключение "Не удалось прочитать файл: " + ИмяФайла + Символы.ПС + ОписаниеОшибки();
	КонецПопытки;
	
	ФайловаяСистема.УдалитьВременныйФайл(ИмяФайла);
	
	Возврат ДанныеИзФайла;

КонецФункции// ()

#КонецОбласти

Процедура ЗаполнитьПредопределенныеЭлементы() Экспорт
	
	ИнициализацияПредопределеннойСтруктуры();

КонецПроцедуры

Процедура ИнициализацияПредопределеннойСтруктуры() Экспорт

	Конфиг = КонфигурацияСтруктуры();

	// Не нашел способа, что то узнать до создания
	КоличествоЗаданныхРеквизитов = КоличествоЗаданныхРеквизитов();
	ПроверкаКонфигурации(Конфиг, КоличествоЗаданныхРеквизитов);
	
	Инициализировать(Конфиг);

КонецПроцедуры


#Область Конфигурация

#Область ЗаданныеНастройки

// Суффикс в пердопределенном наименовании Групп, соответствует -
//   Имени метаданных ( Объект.Ссылка.Метаданные().Имя // Пример из кода добавления реквизитов)
Функция КонфигурацияСтруктуры()

	// Заложился на то, что в Структуре сохраняется порядок
	Группы = Новый Структура;
	
	Контрагенты = ОпределенияГруппы(
		Группы,
		"Справочник_Контрагенты",
		"Справочник: Контрагенты",
		,
		"     0001"
	);
	ДолговыеОбязательства = ОпределенияГруппы(
		Группы,
		"Справочник_ДолговыеОбязательства",
		"Справочник: Долговые обязательства",
		,
		"     0002"
	);
	ОпределенияГруппы(
		Группы,
		"ДополнительныеРеквизиты_Контрагенты",
		"Дополнительные реквизиты",
		Контрагенты,
		"     0003"
	);
	ОпределенияГруппы(
		Группы,
		"ДополнительныеСведения_Контрагенты",
		"Дополнительные сведения",
		Контрагенты,
		"     0004"
	);
	ОпределенияГруппы(
		Группы,
		"ДополнительныеРеквизиты_ДолговыеОбязательства",
		"Дополнительные реквизиты",
		ДолговыеОбязательства,
		"     0005"
	);
	ОпределенияГруппы(
		Группы,
		"ДополнительныеСведения_ДолговыеОбязательства",
		"Дополнительные сведения",
		ДолговыеОбязательства,
		"     0006"
	);

	Организации = ОпределенияГруппы(
		Группы,
		"Справочник_Организации",
		"Справочник: Организации",
		,
		"     0008"
	);
	ОпределенияГруппы(
		Группы,
		"ДополнительныеРеквизиты_Организации",
		"Дополнительные реквизиты",
		Организации,
		"     0009"
	);
	ОпределенияГруппы(
		Группы,
		"ДополнительныеСведения_Организации",
		"Дополнительные сведения",
		Организации,
		"     0010"
	);
	
	Подразделения = ОпределенияГруппы(
		Группы,
		"Справочник_ПодразделенияОрганизаций",
		"Справочник: Подразделения",
		,
		"     0011"
	);
	ОпределенияГруппы(
		Группы,
		"ДополнительныеРеквизиты_ПодразделенияОрганизаций",
		"Дополнительные реквизиты",
		Подразделения,
		"     0012"
	);
	ОпределенияГруппы(
		Группы,
		"ДополнительныеСведения_ПодразделенияОрганизаций",
		"Дополнительные сведения",
		Подразделения,
		"     0013"
	);
	
	ИсполнительныеДокументы = ОпределенияГруппы(
		Группы,
		"Справочник_ИсполнительныеДокументы",
		"Справочник: Исполнительные документы",
		,
		"     0014"
	);
	ОпределенияГруппы(
		Группы,
		"ДополнительныеРеквизиты_ИсполнительныеДокументы",
		"Дополнительные реквизиты",
		ИсполнительныеДокументы,
		"     0015"
	);
	ОпределенияГруппы(
		Группы,
		"ДополнительныеСведения_ИсполнительныеДокументы",
		"Дополнительные сведения",
		ИсполнительныеДокументы,
		"     0016"
	);
	
	УслугиПоДоговору = ОпределенияГруппы(
		Группы,
		"Справочник_УслугиПоДоговору",
		"Справочник: Услуги по договору",
		,
		"     0017"
	);
	ОпределенияГруппы(
		Группы,
		"ДополнительныеРеквизиты_УслугиПоДоговору",
		"Дополнительные реквизиты",
		УслугиПоДоговору,
		"     0018"
	);
	ОпределенияГруппы(
		Группы,
		"ДополнительныеСведения_УслугиПоДоговору",
		"Дополнительные сведения",
		УслугиПоДоговору,
		"     0019"
	);
	
	ДоговорыКонтрагентов = ОпределенияГруппы(
		Группы,
		"Справочник_ДоговорыКонтрагентов",
		"Справочник: Договоры контрагентов",
		,
		"     0020"
	);
	ОпределенияГруппы(
		Группы,
		"ДополнительныеРеквизиты_ДоговорыКонтрагентов",
		"Дополнительные реквизиты",
		ДоговорыКонтрагентов,
		"     0021"
	);
	ОпределенияГруппы(
		Группы,
		"ДополнительныеСведения_ДоговорыКонтрагентов",
		"Дополнительные сведения",
		ДоговорыКонтрагентов,
		"     0022"
	);
	
	Мероприятия = ОпределенияГруппы(
		Группы,
		"Задача_Мероприятие",
		"Задача: Мероприятие",
		,
		"     0023"
	);
	ОпределенияГруппы(
		Группы,
		"ДополнительныеРеквизиты_Мероприятие",
		"Дополнительные реквизиты",
		Мероприятия,
		"     0024"
	);
	
	ГруппаПользователи = ОпределенияГруппы(
		Группы,
		"Справочник_Пользователи",
		"Справочник: Пользователи",
		,
		"     0025"
	);
	ОпределенияГруппы(
		Группы,
		"ДополнительныеРеквизиты_Пользователи",
		"Дополнительные реквизиты",
		ГруппаПользователи,
		"     0026"
	);
	ОпределенияГруппы(
		Группы,
		"ДополнительныеСведения_Пользователи",
		"Дополнительные сведения",
		ГруппаПользователи,
		"     0027"
	);
	
	Залоги = ОпределенияГруппы(
		Группы,
		"Справочник_Залоги",
		"Справочник: Залоги",
		,
		"     0028"
	);
	ОпределенияГруппы(
		Группы,
		"ДополнительныеРеквизиты_Залоги",
		"Дополнительные реквизиты",
		Залоги,
		"     0029"
	);
	ОпределенияГруппы(
		Группы,
		"ДополнительныеСведения_Залоги",
		"Дополнительные сведения",
		Залоги,
		"     0030"
	);
	
	ГруппаРегистрацияКорреспонденции = ОпределенияГруппы(
		Группы,
		"Справочник_РегистрацияКорреспонденции",
		"Справочник: Регистрация корреспонденции",
		,
		"     0031"
	);
	ОпределенияГруппы(
		Группы,
		"ДополнительныеРеквизиты_РегистрацияКорреспонденции",
		"Дополнительные реквизиты",
		ГруппаРегистрацияКорреспонденции,
		"     0032"
	);
	
	СообщениеБанкротства = ОпределенияГруппы(
		Группы,
		"Документы_СообщениеБанкротства",
		"Документы: Сообщение банкротства",
		,
		"     0033"
	);
	ОпределенияГруппы(
		Группы,
		"ДополнительныеРеквизиты_СообщениеБанкротства",
		"Дополнительные реквизиты",
		СообщениеБанкротства,
		"     0034"
	);
	
	ДелоОБанкротстве = ОпределенияГруппы(
		Группы,
		"Справочник_ДелоОБанкротстве",
		"Справочник: Дело о банкротстве",
		,
		"     0035"
	);
	ОпределенияГруппы(
		Группы,
		"ДополнительныеРеквизиты_ДелоОБанкротстве",
		"Дополнительные реквизиты",
		ДелоОБанкротстве,
		"     0036"
	);
	ОпределенияГруппы(
		Группы,
		"ДополнительныеСведения_ДелоОБанкротстве",
		"Дополнительные сведения",
		ДелоОБанкротстве,
		"     0037"
	);
	
	Возврат Группы;

КонецФункции // ()

Функция КоличествоЗаданныхРеквизитов()

	Возврат ПолучитьТипыПредопределенныхКонтрагентов().Количество();

КонецФункции // ()

#КонецОбласти

#Область ПроцесИнициализации

Процедура ПроверкаКонфигурации(Конфиг, КоличествоЗаданныхРеквизитов)

	Результат = КонфигурацияСоответветствуетДанным(Конфиг, КоличествоЗаданныхРеквизитов);
	Если Не Результат Тогда
	
		ВызватьИсключение УправленияСообщениями.ПредупреждениеОшибкаСистемы(
			"Конфигурация настройки Дополнительных реквизитов не соответствует схеме предопределенных данных!"
		);
	
	КонецЕсли;

КонецПроцедуры

Процедура Инициализировать(Конфиг)

	Для каждого Элемент Из Конфиг Цикл
	
		Настройка = Элемент.Значение;
		ИмяРодителя = Настройка["Родитель"];
		Родитель = Неопределено;
		Если ЗначениеЗаполнено(ИмяРодителя) Тогда
		
			// TODO см.СвойстваИмущества.ПредопределенныйЭлементСуществует
			Попытка
			
				Родитель = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения[ИмяРодителя];
			
			Исключение
				ВызватьИсключение УправленияСообщениями.ПредупреждениеОшибкаСистемы(
					"Не нашелся родитель Группы: " + Настройка["Наименование"]
				);
			КонецПопытки;
		
		КонецЕсли;
		
		// TODO см.СвойстваИмущества.ПредопределенныйЭлементСуществует
		Попытка
		
			Темп = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения[Настройка["ИмяПредопределенныхДанных"]];
		
		Исключение
		
			НоваяГруппа = СоздатьГруппу();
			ЗаполнитьЗначенияСвойств(НоваяГруппа, Настройка);
			НоваяГруппа.Родитель = Родитель;
			НоваяГруппа.Записать();
		
		КонецПопытки;
	
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

Функция ОпределенияГруппы(Группы, ПредопределенноеИмя, Наименование, Родитель = Неопределено, Код)

	Группа = Новый Структура;

	Группа.Вставить("Код", Код);
	Группа.Вставить("ИмяПредопределенныхДанных", ПредопределенноеИмя);
	
	ОписаниеРодителя = "";
	ИмяРодитьеля = "";
	Если ЗначениеЗаполнено(Родитель) Тогда
	
		ОписаниеРодителя = " (" + Родитель["Наименование"] + ")";
		ИмяРодитьеля = Родитель["ИмяПредопределенныхДанных"];
	
	КонецЕсли;
	Группа.Вставить("Наименование", Наименование + ОписаниеРодителя);
	
	Группа.Вставить("Родитель", ИмяРодитьеля);
	
	Группы.Вставить(ПредопределенноеИмя, Группа);
	
	Возврат Группа;

КонецФункции // ()

Функция КонфигурацияСоответветствуетДанным(Конфиг, КоличествоЗаданныхРеквизитов)

	ПредопределенныеИмена = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьИменаПредопределенных();
	КоличествоГрупп = ПредопределенныеИмена.Количество() - КоличествоЗаданныхРеквизитов;
	Если Конфиг.Количество() <> КоличествоГрупп Тогда
	
		Возврат Ложь;
	
	КонецЕсли;
	
	КоличествоНеНайденных = 0;
	Для каждого Имя Из ПредопределенныеИмена Цикл
	
		Если Не Конфиг.Свойство(Имя) Тогда
		
			КоличествоНеНайденных = КоличествоНеНайденных + 1;
		
		КонецЕсли;
	
	КонецЦикла;
	
	Если КоличествоНеНайденных <> КоличествоЗаданныхРеквизитов Тогда
	
		Возврат Ложь;
	
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ()

Функция ПолучитьПредопределенныеГруппы()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеРеквизитыИСведения.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|ГДЕ
		|	ДополнительныеРеквизитыИСведения.Предопределенный = ИСТИНА
		|	И ДополнительныеРеквизитыИСведения.ЭтоГруппа = ИСТИНА";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ИмяПредопределенныхДанных");

КонецФункции // ()

Функция ПолучитьТипыПредопределенныхКонтрагентов()

	Данные = Новый Соответствие;
	
	ДлинаСтроки = Новый КвалификаторыСтроки(1024, ДопустимаяДлина.Переменная);
	ОписаниеСтроки = Новый ОписаниеТипов("Строка",,,, ДлинаСтроки);
	
	Данные.Вставить("ИНН", ОписаниеСтроки);
	Данные.Вставить("МестоРаботы", ОписаниеСтроки);
	Данные.Вставить("ПаспортНомер", ОписаниеСтроки);
	Данные.Вставить("ПаспортСерия", ОписаниеСтроки);
	Данные.Вставить("СНИЛС", ОписаниеСтроки);
	Данные.Вставить("ОтметкаОСмерти", Новый ОписаниеТипов("Булево"));
	Данные.Вставить("Пенсия", Новый ОписаниеТипов("Булево"));
	Данные.Вставить("АдресРегистрации", ОписаниеСтроки);
	Данные.Вставить("ФактическийАдрес", ОписаниеСтроки);
	Данные.Вставить("АдресМестаРаботыФактический", ОписаниеСтроки);
	Данные.Вставить("АдресМестаРаботыЮридический", ОписаниеСтроки);
	
	Возврат Данные;

КонецФункции // ()

Процедура СоздатьПредопределенныеРеквизиты(Логер, ДанныеРеквизитов, Родитель)

	НачатьТранзакцию();
	
	Попытка
	
		Для каждого ОписаниеРеквизита Из ДанныеРеквизитов Цикл
		
			Если Не ПредопределенныйСуществует(ОписаниеРеквизита.Ключ) Тогда
			
				СоздатьПредопределенныйРеквизит(
					Логер,
					ОписаниеРеквизита.Ключ,
					ОписаниеРеквизита.Значение,
					Родитель
				);

				Прервать;
			
			КонецЕсли;
		
		КонецЦикла;
	
	Исключение
		ОтменитьТранзакцию();
		
		Ошибка = УправленияСообщениями.СформироватьСтекОшибки(
			ИнформацияОбОшибке(),
			"Создание предопределеных реквизитов отменено"
		);
		Залогировать(Логер, Ошибка);
		ВызватьИсключение(Ошибка["Выражение"]);

	КонецПопытки;
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры


#КонецОбласти

Функция КонфигурацияНастроена() Экспорт

	Конфиг = КонфигурацияСтруктуры();
	КоличествоЗаданныхРеквизитов = КоличествоЗаданныхРеквизитов();
	Результат = КонфигурацияСоответветствуетДанным(Конфиг, КоличествоЗаданныхРеквизитов);
	Если Не Результат Тогда
	
		Возврат Ложь;
	
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Процедура НазначитьПредопределенным(Элемент, ИмяПредопределенного) Экспорт

	ПереопределениеПредопределенного(Элемент, ИмяПредопределенного);

КонецПроцедуры

Функция ПредопределенныйСуществует(ИмяПредопределенного) Экспорт

	Возврат УправлениеДанными.ПредопределенныйСуществует(
		ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения,
		ИмяПредопределенного
	);

КонецФункции // ()

Функция ПолучитьПредопределенныеИменаЭлементов() Экспорт

	ВсеИмена = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьИменаПредопределенных();
	ИменаГрупп = КонфигурацияСтруктуры();
	
	ИменаЭлементов = Новый Массив;
	Для каждого Имя Из ВсеИмена Цикл
	
		Если ИменаГрупп.Свойство(Имя) Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		ИменаЭлементов.Добавить(Имя);
	
	КонецЦикла;
	
	Возврат ИменаЭлементов;

КонецФункции // ()

Функция ПроверитьХарактеристику(ИмяПредопределенного, ТекущийТип) Экспорт

	ТипыДляПроверки = ПолучитьТипыПредопределенныхКонтрагентов();
	ТипПроверки = ТипыДляПроверки.Получить(ИмяПредопределенного);
	Если ТипПроверки = Неопределено Тогда
	
		Возврат "";
	
	КонецЕсли;

	Если ТипПроверки.СодержитТип(ТекущийТип) Тогда
	
		Возврат ""
	
	КонецЕсли;
	
	Результат = "";
	Для каждого Элемент Из ТипПроверки.Типы() Цикл
	
		Результат = Результат + Элемент;
	
	КонецЦикла;
	
	Возврат Результат;

КонецФункции // ()


#Область Техническая

Процедура ПереопределениеПредопределенного(Элемент, ИмяПредопределенного)

	Если ПредопределенныйСуществует(ИмяПредопределенного) Тогда
	
		СнятьПредопределенностьСТекущего(ИмяПредопределенного);
	
	КонецЕсли;
	
	УстановитьПредопределенность(Элемент, ИмяПредопределенного);

КонецПроцедуры

Процедура СнятьПредопределенностьСТекущего(ИмяПредопределенного)

	Элемент = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения[ИмяПредопределенного];
	Объект = Элемент.ПолучитьОбъект();
	
	Объект.ИмяПредопределенныхДанных = "";
	Объект.Записать();

КонецПроцедуры

Процедура УстановитьПредопределенность(Элемент, ИмяПредопределенного)

	Объект = Элемент.ПолучитьОбъект();

	Объект.ИмяПредопределенныхДанных = ИмяПредопределенного;
	Объект.Записать();

КонецПроцедуры

Процедура СоздатьПредопределенныйРеквизит(Логер, ПредопределенноеИмя, ТипРеквизита, Родитель)

	Элемент = СоздатьЭлемент();
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ИмяПредопределенныхДанных", ПредопределенноеИмя);
	ДанныеЗаполнения.Вставить("ТипЗначения", ТипРеквизита);
	ДанныеЗаполнения.Вставить("Родитель", Родитель);
	
	Элемент.Заполнить(ДанныеЗаполнения);
	
	Попытка
	
		Элемент.ПроверитьЗаполнение();
	
	Исключение
		Ошибка = УправленияСообщениями.СформироватьСтекОшибки(
			ИнформацияОбОшибке(),
			"Не прошла проверка заполнения для: " + ПредопределенноеИмя
			+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		Залогировать(Логер, Ошибка);
		ВызватьИсключение(Ошибка["Выражение"]);
	КонецПопытки;
	
	Элемент.Записать();

КонецПроцедуры

Процедура Залогировать(Логер, Ошибка)

	БЛогер_Логирование.Добавить(
		Логер,
		Ошибка["Выражение"],
		Перечисления.БЛогер_Уровни.Выключен
	);
	БЛогер_Логирование.Добавить(
		Логер,
		Ошибка["Стек"],
		Перечисления.БЛогер_Уровни.Ошибка
	);

КонецПроцедуры


#КонецОбласти

Процедура ИнициализацияПредопределенныхЭлементов(Логер, Родитель) Экспорт

	Если Родитель = ДополнительныеРеквизиты_Контрагенты Тогда
	
		ДанныеРеквизитов = ПолучитьТипыПредопределенныхКонтрагентов();
		СоздатьПредопределенныеРеквизиты(Логер, ДанныеРеквизитов, Родитель);
	
	КонецЕсли;

КонецПроцедуры

// Помещает выбранную табличную часть в регистр  "ХранилищеДанныхТабличныхДокументов".
  //
  // Параметры
  //  <Параметр1>  - <Тип.Вид> - <описание параметра>
  //                 <продолжение описания параметра>
  //  <Параметр2>  - <Тип.Вид> - <описание параметра>
  //                 <продолжение описания параметра>
  //
&НаСервере
Процедура ПоместитьТабличнуюЧастьВХранилище(ПолеИсходнойТаблицы, Регистратор) Экспорт
	  ХранилищеИмпорта = Новый ХранилищеЗначения(ПолеИсходнойТаблицы, Новый СжатиеДанных(5));	
	  НаборЗаписейТПИмпорта = РегистрыСведений.ХранилищеДанныхТабличныхДокументов.СоздатьНаборЗаписей();
	  НаборЗаписейТПИмпорта.Отбор.Регистратор.Установить(Регистратор);
	  НаборЗаписейТПИмпорта.Очистить();
	  Запись = НаборЗаписейТПИмпорта.Добавить();
	  Запись.Документ = Регистратор;
	  Запись.ХранилищеПоляИмпорта = ХранилищеИмпорта;
	  НаборЗаписейТПИмпорта.Записать(); 	 
КонецПроцедуры // ПоместитьТабличнуюЧастьВХранилище()
  
// Помещает выбранную табличную часть из регистра  "ХранилищеДанныхТабличныхДокументов"
  // и помещает в элемент формы.
  //
  // Параметры
  //  <Параметр1>  - <Тип.Вид> - <описание параметра>
  //                 <продолжение описания параметра>
  //  <Параметр2>  - <Тип.Вид> - <описание параметра>
  //                 <продолжение описания параметра>
  //
&НаСервере
Процедура ИзвлечьТабличнуюЧастьВЭлементИзХранилища(ПолеИсходнойТаблицы, Регистратор) Экспорт
	  Запрос = Новый Запрос;
	  Запрос.Текст = "ВЫБРАТЬ
			  |	ХранилищеДанныхТабличныхДокументов.ХранилищеПоляИмпорта
			  |ИЗ
			  |	РегистрСведений.ХранилищеДанныхТабличныхДокументов КАК ХранилищеДанныхТабличныхДокументов
			  |ГДЕ
			  |	ХранилищеДанныхТабличныхДокументов.Регистратор = &Регистратор";
	  
	  Запрос.УстановитьПараметр("Регистратор", Регистратор);
	  Результат = Запрос.Выполнить();
	  Выборка = Результат.Выбрать();
	  
	  Если Выборка.Следующий() Тогда
		  ПолеИсходнойТаблицы.Вывести(Выборка.ХранилищеПоляИмпорта.Получить());  	
		  ИсходныеДанныеТПИмпортаУжеПолучены=Истина;
	  КонецЕсли;     
КонецПроцедуры // ИзвлечьТабличнуюЧастьВЭлементИзХранилища()

// Помещает выбранную табличную часть из реквизита-хранилища  в элемент формы.
&НаСервере
Функция ИзвлечьТабличнуюЧастьВЭлементИзРеквизитаЗДД(ПолеИсходнойТаблицы, тзДанныеХранилища) Экспорт
	Если тзДанныеХранилища = Неопределено Тогда
		тзДанные = Новый ТаблицаЗначений();
		 
		//колонки для Должника
		ТипНомерСтроки = Новый ОписаниеТипов("Число",, Новый КвалификаторыЧисла(8, 0));
		ТипНаименования = Новый ОписаниеТипов("Строка",, 
				Новый КвалификаторыСтроки(Метаданные.Справочники.Контрагенты.ДлинаНаименования));
		ТипКода = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50));		
				
		тзДанные.Колонки.Добавить("НомерСтроки", ТипНомерСтроки, "N", 35); //!		
		тзДанные.Колонки.Добавить("Наименование", ТипНаименования, "Наименование/ФИО", 150); //!
		тзДанные.Колонки.Добавить("НаименованиеКА", ТипНаименования, "ФИО контрагента", 150); //!
		тзДанные.Колонки.Добавить("НаименованиеКР", ТипНаименования, "ФИО кредитора", 150); //!
		Если Константы.УчетПоУслугам.Получить() Тогда
			тзДанные.Колонки.Добавить("НаименованиеУ", ТипКода, "Наименование услуги");
		КонецЕсли;
		Если Константы.УчетПоИД.Получить() Тогда
			тзДанные.Колонки.Добавить("НаименованиеИД", ТипКода, "Исполнительный документ");
		КонецЕсли;
		Если Константы.УчетПоДоговорам.Получить() Тогда
			тзДанные.Колонки.Добавить("НаименованиеД", ТипКода, "Договор");
		КонецЕсли;

		тзДанные.Колонки.Добавить("Идентификатор", ТипКода, "Код должника");
		тзДанные.Колонки.Добавить("ИдентификаторКА", ТипКода, "Код контрагента");
		тзДанные.Колонки.Добавить("ИдентификаторКР", ТипКода, "Код кредитора");
		Если Константы.УчетПоУслугам.Получить() Тогда
			тзДанные.Колонки.Добавить("ИдентификаторУ", ТипКода, "Код услуги");
		КонецЕсли;
		Если Константы.УчетПоИД.Получить() Тогда
			тзДанные.Колонки.Добавить("ИдентификаторИД", ТипКода, "Код исполнительного документа");
		КонецЕсли;
		Если Константы.УчетПоДоговорам.Получить() Тогда
			тзДанные.Колонки.Добавить("ИдентификаторД", ТипКода, "Код договора");
		КонецЕсли;
		 
		//колонки для ДО
		ТипНомера = Новый ОписаниеТипов("Строка",, 
				Новый КвалификаторыСтроки(Метаданные.Справочники.ДолговыеОбязательства.ДлинаНаименования));
		
		КолонкаВалютаДоговора = тзДанные.Колонки.Добавить("ВалютаДоговора", 
				Новый ОписаниеТипов("СправочникСсылка.Валюты"), "Валюта договора", 150);	
		НомерДО = тзДанные.Колонки.Добавить("НомерДО", ТипНомера, "Номер долгового обязательства", 150);
		 
		//vk
		тзДанные.Колонки.Добавить("СсылкаДО", 
				Новый ОписаниеТипов("СправочникСсылка.ДолговыеОбязательства"), "Ссылка на договор", 150);	
		тзДанные.Колонки.Добавить("ТипКА", 
				Новый ОписаниеТипов("СправочникСсылка.ЮрФизЛицо"), "Тип контрагента", 150);
		тзДанные.Колонки.Добавить("ТипДОЛ", 
				Новый ОписаниеТипов("СправочникСсылка.ЮрФизЛицо"), "Тип должника", 150);
		тзДанные.Колонки.Добавить("ТипКР", 
				Новый ОписаниеТипов("СправочникСсылка.ЮрФизЛицо"), "Тип кредитора", 150);
		тзДанные.Колонки.Добавить("ТипДО", 
				Новый ОписаниеТипов("СправочникСсылка.ТипыДолговыхОбязательств"), "Тип договора", 150);		
												
		Возврат тзДанные;
	Иначе
		ПолеИсходнойТаблицы.Вывести(тзДанныеХранилища);  	
		//ИсходныеДанныеТПИмпортаУжеПолучены=Истина;
		Возврат тзДанныеХранилища;
	КонецЕсли;	
КонецФункции// ИзвлечьТабличнуюЧастьВЭлементИзХранилища()

// Помещает выбранную табличную часть из реквизита-хранилища  в элемент формы.
&НаСервере
Функция ИзвлечьТабличнуюЧастьВЭлементИзРеквизитаЗД(ПолеИсходнойТаблицы, тзДанныеХранилища) Экспорт
	Если тзДанныеХранилища = Неопределено Тогда
		тзДанные = Новый ТаблицаЗначений();
		 
		//колонки для Должника
		ТипНомерСтроки = Новый ОписаниеТипов("Число",, Новый КвалификаторыЧисла(8, 0));
		ТипНаименования = Новый ОписаниеТипов("Строка",, 
				Новый КвалификаторыСтроки(Метаданные.Справочники.Контрагенты.ДлинаНаименования));
		ТипКода = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50));		
				
		тзДанные.Колонки.Добавить("НомерСтроки", ТипНомерСтроки, "N", 35); //!		
		тзДанные.Колонки.Добавить("Наименование", ТипНаименования, "Наименование/ФИО", 150); //!
		тзДанные.Колонки.Добавить("НаименованиеКА", ТипНаименования, "ФИО контрагента", 150); //!
		тзДанные.Колонки.Добавить("НаименованиеКР", ТипНаименования, "ФИО кредитора", 150); //!
		Если Константы.УчетПоУслугам.Получить() Тогда
			тзДанные.Колонки.Добавить("НаименованиеУ", ТипКода, "Наименование услуги");
		КонецЕсли;
		Если Константы.УчетПоИД.Получить() Тогда
			тзДанные.Колонки.Добавить("НаименованиеИД", ТипКода, "Исполнительный документ");
		КонецЕсли;
		Если Константы.УчетПоДоговорам.Получить() Тогда
			тзДанные.Колонки.Добавить("НаименованиеД", ТипКода, "Договор");
		КонецЕсли;
		тзДанные.Колонки.Добавить("Идентификатор", ТипКода, "Код должника");
		тзДанные.Колонки.Добавить("ИдентификаторКА", ТипКода, "Код контрагента");
		тзДанные.Колонки.Добавить("ИдентификаторКР", ТипКода, "Код кредитора");
		Если Константы.УчетПоУслугам.Получить() Тогда
			тзДанные.Колонки.Добавить("ИдентификаторУ", ТипКода, "Код услуги");
		КонецЕсли;
		Если Константы.УчетПоИД.Получить() Тогда
			тзДанные.Колонки.Добавить("ИдентификаторИД", ТипКода, "Код исполнительного документа");
		КонецЕсли;
		Если Константы.УчетПоДоговорам.Получить() Тогда
			тзДанные.Колонки.Добавить("ИдентификаторД", ТипКода, "Код договора");
		КонецЕсли;

		//колонки для ДО
		ТипНомера = Новый ОписаниеТипов("Строка",, 
				Новый КвалификаторыСтроки(Метаданные.Справочники.ДолговыеОбязательства.ДлинаНаименования));
		
		КолонкаВалютаДоговора = тзДанные.Колонки.Добавить("ВалютаДоговора", 
				Новый ОписаниеТипов("СправочникСсылка.Валюты"), "Валюта договора", 150);	
		НомерДО = тзДанные.Колонки.Добавить("НомерДО", ТипНомера, "Номер долгового обязательства", 150);
		 
		//vk
		тзДанные.Колонки.Добавить("СсылкаДО", 
				Новый ОписаниеТипов("СправочникСсылка.ДолговыеОбязательства"), "Ссылка на договор", 150);				
		тзДанные.Колонки.Добавить("ТипДОЛ", 
				Новый ОписаниеТипов("СправочникСсылка.ЮрФизЛицо"), "Тип должника", 150);
		тзДанные.Колонки.Добавить("ТипКА", 
				Новый ОписаниеТипов("СправочникСсылка.ЮрФизЛицо"), "Тип контрагента", 150);
		тзДанные.Колонки.Добавить("ТипКР", 
				Новый ОписаниеТипов("СправочникСсылка.ЮрФизЛицо"), "Тип кредитора", 150);

		тзДанные.Колонки.Добавить("ТипДО", 
				Новый ОписаниеТипов("СправочникСсылка.ТипыДолговыхОбязательств"), "Тип договора", 150);		
				
		//Задолженность
		ТипЧисла = Метаданные.Документы.АктуализацияЗадолженности.ТабличныеЧасти.Объекты.Реквизиты.ОсновнойДолг.Тип;
		тзДанные.Колонки.Добавить("ЗадолженностьВалютаЗагрузки", 
				Новый ОписаниеТипов("СправочникСсылка.Валюты"), "Валюта загрузки", 100);
		тзДанные.Колонки.Добавить("ЗадолженностьОсновнойДолг", ТипЧисла, "Основной долг", 100);
		тзДанные.Колонки.Добавить("ЗадолженностьПроценты", ТипЧисла, "Проценты", 100);
		тзДанные.Колонки.Добавить("ЗадолженностьШтрафы", ТипЧисла, "Штрафы", 100);		
		
		тзДанные.Колонки.Добавить("ЗадолженностьПени", ТипЧисла, "Пени", 100);	
		тзДанные.Колонки.Добавить("ЗадолженностьСоставляющая1", ТипЧисла, "Составляющая1", 100);	
		тзДанные.Колонки.Добавить("ЗадолженностьСоставляющая2", ТипЧисла, "Составляющая2", 100);	
		тзДанные.Колонки.Добавить("ЗадолженностьСоставляющая3", ТипЧисла, "Составляющая3", 100);	
				
		//ТипыСотрудников
        Запрос = Новый Запрос("ВЫБРАТЬ
                              |	ТипыСотрудников.Ссылка,
                              |	ТипыСотрудников.Код,
                              |	ТипыСотрудников.Наименование
                              |ИЗ
                              |	ПланВидовХарактеристик.ТипыСотрудников КАК ТипыСотрудников
                              |ГДЕ
                              |	НЕ ТипыСотрудников.ПометкаУдаления
                              |
                              |УПОРЯДОЧИТЬ ПО
                              |	ТипыСотрудников.Наименование");
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл	
			тзДанные.Колонки.Добавить("ТС" + СтрЗаменить(Результат.Код, " ", "_"), 
					Новый ОписаниеТипов("СправочникСсылка.Пользователи"), Результат.Наименование, 150);
		КонецЦикла;
				
		Возврат тзДанные;
	Иначе
		ПолеИсходнойТаблицы.Вывести(тзДанныеХранилища);  	
		//ИсходныеДанныеТПИмпортаУжеПолучены=Истина;
		Возврат тзДанныеХранилища;
	КонецЕсли;	
КонецФункции// ИзвлечьТабличнуюЧастьВЭлементИзХранилища()
    
// Получает перечень значений колонок первой строки табличного документа.
  //
Функция ЗаполнитьСписокИменКолонокЗаголовкаПоляИсходнойТаблицы(ПолеИсходнойТаблицы) Экспорт
	СписокРеквизитов = Новый СписокЗначений();
	Для Счетчик = 1 По ПолеИсходнойТаблицы.ШиринаТаблицы Цикл
		НовСтрока = СписокРеквизитов.Добавить();
		НовСтрока.Значение = ПолеИсходнойТаблицы.Область("R1C" + Счетчик).Текст;
	КонецЦикла;
	
	Возврат СписокРеквизитов;	
КонецФункции //ЗаполнитьСписокРеквизитовПоляИмпорта()

// Загружает таблицу значений из хранилища.
//
// Параметры:
//  Данные - таблица значений;
//  ТаблицаХранилище - таблица значений;
//  тзДанные    - таблица значений Данные.
//
Процедура ЗагрузитьТаблицуИзХранилища(Данные, ТаблицаХранилище, тзДанные) Экспорт
	Если НЕ ТаблицаХранилище.Получить() =  Неопределено Тогда
		тзДанные = ТаблицаХранилище.Получить();
	Иначе
		//колонки для Должника
		ТипНомерСтроки = Новый ОписаниеТипов("Число",, Новый КвалификаторыЧисла(8, 0));
		ТипНаименования = Новый ОписаниеТипов("Строка",, 
				Новый КвалификаторыСтроки(Метаданные.Справочники.Контрагенты.ДлинаНаименования));
		ТипКода = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50));		
				
		тзДанные.Колонки.Добавить("НомерСтроки", ТипНомерСтроки, "N", 35); //!	
		тзДанные.Колонки.Добавить("Наименование", ТипНаименования, "Наименование", 150);		
		тзДанные.Колонки.Добавить("Идентификатор", ТипКода, "Идентификатор");
		
		//колонки для ДО
		ТипНомера = Новый ОписаниеТипов("Строка",, 
				Новый КвалификаторыСтроки(Метаданные.Справочники.ДолговыеОбязательства.ДлинаНаименования));
		тзДанные.Колонки.Добавить("ВалютаДоговора", 
				Новый ОписаниеТипов("СправочникСсылка.Валюты"), "Валюта ДО", 150);	
		тзДанные.Колонки.Добавить("НомерДО", ТипНомера, "Номер ДО", 150);
		
		//vk
		тзДанные.Колонки.Добавить("СсылкаДО", 
				Новый ОписаниеТипов("СправочникСсылка.ДолговыеОбязательства"), "Ссылка ДО", 150);			
		тзДанные.Колонки.Добавить("ТипКА", 
				Новый ОписаниеТипов("СправочникСсылка.ЮрФизЛицо"), "Тип контрагента", 150);
		тзДанные.Колонки.Добавить("ТипДО", 
				Новый ОписаниеТипов("СправочникСсылка.ТипыДолговыхОбязательств"), "Тип договора", 150);	
				
		//Задолженность
		ТипЧисла = Метаданные.Документы.АктуализацияЗадолженности.ТабличныеЧасти.Объекты.Реквизиты.ОсновнойДолг.Тип;
		тзДанные.Колонки.Добавить("ЗадолженностьВалютаЗагрузки", 
				Новый ОписаниеТипов("СправочникСсылка.Валюты"), "Валюта загрузки", 100);
		тзДанные.Колонки.Добавить("ЗадолженностьОсновнойДолг", ТипЧисла, "Основной долг", 100);
		тзДанные.Колонки.Добавить("ЗадолженностьПроценты", ТипЧисла, "Проценты", 100);
		тзДанные.Колонки.Добавить("ЗадолженностьШтрафы", ТипЧисла, "Штрафы", 100);
		
		//ТипыСотрудников
		Запрос = Новый Запрос("ВЫБРАТЬ
                              |	ТипыСотрудников.Ссылка,
                              |	ТипыСотрудников.Код,
                              |	ТипыСотрудников.Наименование
                              |ИЗ
                              |	ПланВидовХарактеристик.ТипыСотрудников КАК ТипыСотрудников
                              |ГДЕ
                              |	НЕ ТипыСотрудников.ПометкаУдаления
                              |
                              |УПОРЯДОЧИТЬ ПО
                              |	ТипыСотрудников.Наименование");
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл	
			тзДанные.Колонки.Добавить("ТС" + СтрЗаменить(Результат.Код, " ", "_"), 
					Новый ОписаниеТипов("СправочникСсылка.Пользователи"), Результат.Наименование, 150);
		КонецЦикла;
				
	КонецЕсли;
	//ДобавитьКолонкиКТабличномуПолю(Данные, тзДанные);	
КонецПроцедуры  //ЗагрузитьТаблицуИзХранилища()

// Добавляет колонки к табличному полю.
//
// Параметры:
//  Данные - таблица значений;
//  тзДанные    - таблица значений Данные.
//
&НаСервере
Процедура ДобавитьКолонкиКТабличномуПолю(Форма, Элементы, Колонки, Родитель) Экспорт
	Для Каждого Колонка Из Колонки Цикл
		Реквизит = Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "тзДанные", Колонка.Заголовок);
		КолонкиТаблицыЦенДоб = Новый Массив;
		КолонкиТаблицыЦенДоб.Добавить(Реквизит);
		
		ПолеФормы = Элементы.Добавить("тзДанные" + Колонка.Имя, Тип("ПолеФормы"), Родитель);
		ПолеФормы.Заголовок = Колонка.Заголовок;
		Форма.ИзменитьРеквизиты(КолонкиТаблицыЦенДоб);
		  
		Попытка		
			ПолеФормы.ПутьКДанным = "тзДанные." + Колонка.Имя;			
		Исключение
			Сообщить(ОписаниеОшибки());		
		КонецПопытки;
		ПолеФормы.Вид = ВидПоляФормы.ПолеВвода; 
	КонецЦикла;	
КонецПроцедуры

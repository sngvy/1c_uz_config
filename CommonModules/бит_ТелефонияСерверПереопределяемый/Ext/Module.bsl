///////////////////////////////////////////////////////////////////////////////
// Общий серверный модуль телефонии БИТ
// Содержит функции, реализация которых зависит от конфигурации.
///////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

//-----------------------------------------------------------------------------
// === УТ 10.3 ===

// Возвращает булево - признак хранения контактной информации в регистре сведений (иначе в табличной части справочников контрагентов и контактных лиц).
Функция КонтактнаяИнформацияВРегистреСведений() ЭКСПОРТ
	Возврат Ложь;
КонецФункции

// Возвращает строку, имя справочника контрагентов
Функция ПолучитьИмяСправочникаКонтрагентов() ЭКСПОРТ
	Возврат "Контрагенты";
КонецФункции

// Возвращает строку, имя справочника контактных лиц
Функция ПолучитьИмяСправочникаКонтактныхЛиц() ЭКСПОРТ
	Возврат "КонтактныеЛицаПоДолжнику";
КонецФункции

// Возвращает строку, имя справочника сотрудников
Функция ПолучитьИмяСправочникаСотрудников() ЭКСПОРТ
	Возврат "Пользователи";
КонецФункции

// Возвращает строку, имя документа - события взаимодействия.
Функция ПолучитьИмяДокументаСобытие() ЭКСПОРТ
	Возврат "ТелефонныйЗвонок";
КонецФункции

// Возвращает таблицу значений с полями контрагентов и контактных лиц.
Функция НайтиКонтрагентовПоНомеруВКонтактах(НомерДляПоиска, флагТолькоПервый) ЭКСПОРТ
	//таблК = Новый ТаблицаЗначений;
	//таблК.Колонки.Добавить("Контрагент");
	//таблК.Колонки.Добавить("КонтактноеЛицо");
	//
	Если НЕ ЗначениеЗаполнено(НомерДляПоиска) ИЛИ бит_БИТфонСервер.ПолучитьФлагНеИскатьКонтрагента() Тогда
		КонтрагентСсылка = Справочники.Контрагенты.ПустаяСсылка();
		таблК = Новый ТаблицаЗначений;
		таблК.Колонки.Добавить("Контрагент");
		таблК.Колонки.Добавить("КонтактноеЛицо");
		
		ПустаяСтрока = таблК.Добавить();
		ПустаяСтрока.Контрагент = КонтрагентСсылка;
		
		Возврат таблК;

	КонецЕсли;

	
	длинаНомера = СтрДлина(НомерДляПоиска);
	стрПодобия = "%";
	Для й = 1 ПО длинаНомера Цикл
		стрПодобия = стрПодобия + Сред(НомерДляПоиска, й, 1) + "%";
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрагентыТелефоны.Ссылка КАК Контрагент,
		|	ВЫБОР
		|		КОГДА КонтрагентыТелефоны.КонтактноеЛицо = ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПоДолжнику.ПустаяСсылка)
		|			ТОГДА КонтрагентыТелефоны.Ссылка
		|		ИНАЧЕ КонтрагентыТелефоны.КонтактноеЛицо.Ссылка
		|	КОНЕЦ КАК КонтактноеЛицо
		|ИЗ
		|	Справочник.Контрагенты.Телефоны КАК КонтрагентыТелефоны
		|ГДЕ
		|	ВЫРАЗИТЬ(КонтрагентыТелефоны.НомерДляПоиска КАК СТРОКА) ПОДОБНО &НомерТелефона";
	
	Запрос.УстановитьПараметр("НомерТелефона", "%" + стрПодобия + "%");
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
КонецФункции

// Возвращает массив строк номеров контрагента
Функция НайтиНомераКонтрагента(КонтрагентСсылка) ЭКСПОРТ
	Возврат НайтиКонтактнуюИнформацию(КонтрагентСсылка, Неопределено);
КонецФункции

// Возвращает строку - номер контрагента по виду контактной информации
Функция НайтиНомерКонтрагента(КонтрагентСсылка, ВидКонтактнойИнформации) ЭКСПОРТ
	номер = "";
	массивНомеров = НайтиКонтактнуюИнформацию(КонтрагентСсылка, ВидКонтактнойИнформации);
	Если массивНомеров.Количество() > 0 Тогда
		номер = массивНомеров[0];
	КонецЕсли;
	Возврат номер;
КонецФункции

// Возвращает массив видов телефонов
Функция ПолучитьВидыКонтактнойИнформацииКонтрагента() ЭКСПОРТ
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВидыТелефонов.Ссылка КАК Вид
	|ИЗ
	|	Справочник.ВидыТелефонов КАК ВидыТелефонов");
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Вид");
	
КонецФункции

// Возвращает массив строк номеров контрактного лица
Функция НайтиНомераКонтактногоЛица(КонтактноеЛицоСсылка) ЭКСПОРТ
	Возврат НайтиКонтактнуюИнформацию(КонтактноеЛицоСсылка, Неопределено);
КонецФункции

// Возвращает ссылку на контрагента по его контактному лицу
Функция ПолучитьКонтрагентаКонтактногоЛица(КонтактноеЛицоСсылка) ЭКСПОРТ
	Если ТипЗнч(КонтактноеЛицоСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат КонтактноеЛицоСсылка;
	Иначе	
		Возврат КонтактноеЛицоСсылка.Владелец;
	КонецЕсли;
КонецФункции

// Возвращает массив ссылок на контактных лиц контрагента
Функция НайтиКонтактныеЛицаКонтрагента(КонтрагентСсылка) ЭКСПОРТ
	массКонтактныеЛица = Новый Массив();
	Если ЗначениеЗаполнено(КонтрагентСсылка) Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					   |	КонтактныеЛицаКонтрагентов.Ссылка
					   |ИЗ
					   |	Справочник." + ПолучитьИмяСправочникаКонтактныхЛиц() + " КАК КонтактныеЛицаКонтрагентов
					   |ГДЕ
					   |	КонтактныеЛицаКонтрагентов.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", КонтрагентСсылка);
		массКонтактныеЛица = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	Возврат массКонтактныеЛица;
КонецФункции

// Возвращает массив строк номеров сотрудника
Функция НайтиНомераСотрудника(СотрудникСсылка) ЭКСПОРТ
	Возврат НайтиКонтактнуюИнформацию(СотрудникСсылка, Неопределено);
КонецФункции

// Возвращает ссылку на элемент справочника Пользователи
Функция ПолучитьОсновногоМенеджераКонтрагента(контрагентСсылка) ЭКСПОРТ
	менеджерСсылка = Неопределено;
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ОтветственныеСотрудники.Пользователь КАК Пользователь
	                      |ИЗ
	                      |	РегистрСведений.ОтветственныеСотрудники КАК ОтветственныеСотрудники
	                      |ГДЕ
	                      |	ОтветственныеСотрудники.Объект = &Объект
	                      |	И ОтветственныеСотрудники.ТипСотрудника = &ТипСотрудника");
	Запрос.УстановитьПараметр("ТипСотрудника", Константы.ТипСотрудникаКлиентМенеджер.Получить());
	Запрос.УстановитьПараметр("Объект", Справочники.ДолговыеОбязательства.НайтиПоРеквизиту("Должник", контрагентСсылка));
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		менеджерСсылка =  Результат.Пользователь;
	Иначе
		менеджерСсылка =  ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;

	Возврат менеджерСсылка;
КонецФункции

Функция ПолучитьКонтактСобытия(ссылкаСобытие, стрСообщениеОбОшибкеВозвращ) ЭКСПОРТ
	стрСообщениеОбОшибкеВозвращ = "";
	контакт = "";
	Если ЗначениеЗаполнено(ссылкаСобытие) Тогда
		Если (ссылкаСобытие.ВидСобытия = Перечисления.ВидыСобытий.ТелефонныйЗвонок) Тогда
			Если ЗначениеЗаполнено(ссылкаСобытие.КонтактноеЛицо) Тогда
				контакт = ссылкаСобытие.КонтактноеЛицо;
			Иначе
				контакт = ссылкаСобытие.Контрагент;
				Если ТипЗнч(контакт) = Тип("Строка") Тогда
					// проверка Избранного
					индИзбр = Найти(контакт, " (избранное)");
					Если индИзбр > 0 Тогда
						наименИзбр = Лев(контакт, индИзбр-1);
						контакт = бит_ТелефонияСервер.ИзбранноеНайтиНомер(наименИзбр);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			стрСообщениеОбОшибкеВозвращ = "Вид события должен быть Телефонный звонок";
		КонецЕсли;
	Иначе
		стрСообщениеОбОшибкеВозвращ = "Документ должен быть записан перед вызовом команды";
	КонецЕсли;
	Возврат контакт;
КонецФункции

Процедура ЗаписатьНомерТелефонаКонтрагента(контрагентСсылка, видКонтактнойИнформацииСсылка, стрНомер) ЭКСПОРТ
		
	Если НЕ ЗначениеЗаполнено(контрагентСсылка) Тогда
		Возврат;
	КонецЕсли;

	обКонтрагент = контрагентСсылка.ПолучитьОбъект();
	строка = обКонтрагент.Телефоны.Добавить();
	строка.ВидТелефона = видКонтактнойИнформацииСсылка;
	строка.Номер = стрНомер;
	УдалитьУправлениеКонтактнойИнформацией.РазбитьНомерТелефонаНаСоставляющие(строка, стрНомер);
	обКонтрагент.Записать();
КонецПроцедуры

// Возвращает ссылку на новый созданный документ события взаимодействия
Функция СоздатьСобытиеЗвонка(структПараметры) ЭКСПОРТ
	
	// Необновляемая область
	
	ДокументСобытие = Задачи.Мероприятие.СоздатьЗадачу();	
	
	// Выбрать актуальное ДО в случае совпадений по кредитору
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДолговыеОбязательства.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	|ГДЕ
	|	ДолговыеОбязательства.Должник = &Должник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка УБЫВ";
	//
		
	Запрос.УстановитьПараметр("Должник", структПараметры.Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ДокументСобытие.Объект = ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		ДокументСобытие.Объект = структПараметры.Контрагент;
	КонецЕсли;
	
	//
	
	Если ЗначениеЗаполнено(структПараметры.КонтактноеЛицо) Тогда
		ДокументСобытие.КонтактноеЛицо = структПараметры.КонтактноеЛицо;
	КонецЕсли;
			
	ДокументСобытие.Дата = ТекущаяДата();
	ДокументСобытие.ПланируемаяДата = ТекущаяДата();
	ДокументСобытие.ПланируемоеВремя = ТекущаяДата();
	ДокументСобытие.Контакт = структПараметры.Номер;


	
	ДокументСобытие.Комментарий = "";
	Если структПараметры.Входящий Тогда //ДокументСобытие.Входящий Тогда
		ДокументСобытие.ТипМероприятия = Справочники.ТипыМероприятий.ТелефонныйЗвонокВходящий;
		// ДокументСобытие.Комментарий = "Входящий звонок с " + структПараметры.Номер;
		// Передать в комментарий номер вхоядщего звонка
		ДокументСобытие.Комментарий = структПараметры.Номер;
	Иначе
		ДокументСобытие.ТипМероприятия = Справочники.ТипыМероприятий.ТелефонныйЗвонокИсходящий;
		// ДокументСобытие.Комментарий = "Исходящий звонок на " + структПараметры.Номер;
	КонецЕсли;
	
	ДокументСобытие.бтЗаписьРазговора = структПараметры.ЗаписьРазговора;
	//++КазанцевЯА-БП
	Если Константы.КонтрольСроковМероприятий.Получить() И ДокументСобытие.ТипМероприятия.СрокВыполнения > 0 Тогда 
		ДокументСобытие.СрокВыполнения =  ТекущаяДата() + ДокументСобытие.ТипМероприятия.СрокВыполнения * 60;
		ОсновнойКалендарьПредприятия = Константы.ОсновнойКалендарьПредприятия.Получить();
		Если Константы.ПереноситьВыходныеИПраздникиМероприятий.Получить() И ЗначениеЗаполнено(ОсновнойКалендарьПредприятия) Тогда
			УстановитьПривилегированныйРежим(Истина);
			ПроизводственныйКалендарь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнойКалендарьПредприятия, "ПроизводственныйКалендарь");
			ПараметрыПолучения = КалендарныеГрафики.ПараметрыПолученияБлижайшихРабочихДат();
			ПараметрыПолучения.ПолучатьПредшествующие = Ложь;
			ПараметрыПолучения.ВызыватьИсключение = Ложь;
			свДата = НачалоДня(ДокументСобытие.СрокВыполнения);
			свВремя =  ДокументСобытие.СрокВыполнения - свДата;
			мСрокВыполнения = Новый Массив;
			мСрокВыполнения.Добавить(свДата);
			ДниКалендаря = КалендарныеГрафики.БлижайшиеРабочиеДаты(ПроизводственныйКалендарь, мСрокВыполнения, ПараметрыПолучения);
			Если ЗначениеЗаполнено(ДниКалендаря) Тогда
				ДокументСобытие.СрокВыполнения = ДниКалендаря.Получить(свДата) + свВремя;  
			Иначе
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не удалось установить срок мероприятия, возможно не заполнен календарь";
				Сообщение.Сообщить();  
			КонецЕсли;
			УстановитьПривилегированныйРежим(Ложь);	
		КонецЕсли;
	КонецЕсли;
	//--КазанцевЯА-БП

	//Лебедева
	ДокументСобытие.Ответственный = ПараметрыСеанса.ТекущийПользователь;

	ДокументСобытие.Записать();

	Возврат ДокументСобытие.Ссылка;
	
КонецФункции

// Проверяет возможность автозапуска при начале работы системы
Функция ЕстьВозможностьАвтозапуска() ЭКСПОРТ
	Возврат Истина;
КонецФункции

// проверяет что заданный контрагент является покупателем
Функция ПроверкаКонтрагентПокупатель(контрагентСсылка) ЭКСПОРТ
	покупатель = Ложь;
	Если ТипЗнч(контрагентСсылка) = Тип("СправочникСсылка." + ПолучитьИмяСправочникаКонтрагентов()) Тогда
		покупатель = контрагентСсылка.Покупатель;
	КонецЕсли;
	Возврат покупатель;
КонецФункции

// проверяет что заданный контрагент является поставщиком
Функция ПроверкаКонтрагентПоставщик(контрагентСсылка) ЭКСПОРТ
	поставщик = Ложь;
	Если ТипЗнч(контрагентСсылка) = Тип("СправочникСсылка." + ПолучитьИмяСправочникаКонтрагентов()) Тогда
		поставщик = контрагентСсылка.Поставщик;
	КонецЕсли;
	Возврат поставщик;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НайтиКонтактнуюИнформацию(СсылкаНаОбъект, ВидКонтактнойИнформации)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КонтрагентыТелефоны.Ссылка,
	                      |	КонтрагентыТелефоны.Номер КАК НомерТелефона
	                      |ИЗ
	                      |	Справочник.Контрагенты.Телефоны КАК КонтрагентыТелефоны
	                      |ГДЕ
	                      |	КонтрагентыТелефоны.Ссылка = &Ссылка
	                      |	И КонтрагентыТелефоны.ВидТелефона = &ДопСвойство");
	
	Если ВидКонтактнойИнформации = Неопределено Тогда
		Запрос.Текст = ("ВЫБРАТЬ
		                |	КонтрагентыДополнительныеРеквизиты.Значение КАК НомерТелефона
		                |ПОМЕСТИТЬ Таб
		                |ИЗ
		                |	Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
		                |ГДЕ
		                |	КонтрагентыДополнительныеРеквизиты.Ссылка = &Ссылка
		                |	И КонтрагентыДополнительныеРеквизиты.Свойство.ВидКИ = &Тип
		                |
		                |ОБЪЕДИНИТЬ ВСЕ
		                |
		                |ВЫБРАТЬ
		                |	ДополнительныеСведения.Значение
		                |ИЗ
		                |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		                |ГДЕ
		                |	ДополнительныеСведения.Объект = &Ссылка
		                |	И ДополнительныеСведения.Свойство.ВидКИ = &Тип
		                |
		                |ОБЪЕДИНИТЬ ВСЕ
		                |
		                |ВЫБРАТЬ
		                |	КонтрагентыТелефоны.Номер
		                |ИЗ
		                |	Справочник.Контрагенты.Телефоны КАК КонтрагентыТелефоны
		                |ГДЕ
		                |	КонтрагентыТелефоны.Ссылка = &Ссылка
		                |;
		                |
		                |////////////////////////////////////////////////////////////////////////////////
		                |ВЫБРАТЬ
		                |	Таб.НомерТелефона
		                |ИЗ
		                |	Таб КАК Таб
		                |ГДЕ
		                |	Таб.НомерТелефона <> """"");
			
	КонецЕсли;
	
	Если  ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Пользователи") Тогда
		  ВидКонтактнойИнформации = Константы.ТелефонныйНомерПользователя.Получить();
		  Запрос.Текст = ("ВЫБРАТЬ
		                  |	ДополнительныеСведения.Значение КАК НомерТелефона,
		                  |	ДополнительныеСведения.Объект КАК Объект
		                  |ИЗ
		                  |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		                  |ГДЕ
		                  |	ДополнительныеСведения.Свойство = &допСвойство
		                  |	И ДополнительныеСведения.Объект = &Ссылка
		                  |
		                  |ОБЪЕДИНИТЬ
		                  |
		                  |ВЫБРАТЬ
		                  |	ПользователиДополнительныеРеквизиты.Значение,
		                  |	ПользователиДополнительныеРеквизиты.Ссылка
		                  |ИЗ
		                  |	Справочник.Пользователи.ДополнительныеРеквизиты КАК ПользователиДополнительныеРеквизиты
		                  |ГДЕ
		                  |	ПользователиДополнительныеРеквизиты.Свойство = &допСвойство
		                  |	И ПользователиДополнительныеРеквизиты.Ссылка = &Ссылка");
	КонецЕсли;	
	
		
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("допСвойство", ВидКонтактнойИнформации);
	Запрос.УстановитьПараметр("Тип", Справочники.ВидыКИ.Телефон);
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НомерТелефона");

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейсУЗ

//-----------------------------------------------------------------------------
// === Управление Задолженностью ===

Функция ПолучитьВидТелефонии() ЭКСПОРТ
	Пользователь = бит_ТелефонияСервер.ПолучитьТекущегоПользователя();
	СтруктураОтбора = Новый Структура("Пользователь", Пользователь);
	Возврат РегистрыСведений.бит_БитТелефонияНастройкиУЗ.Получить(СтруктураОтбора).ЗвонокИзКарточкиМероприятия;	
КонецФункции

&НаСервере
Функция ПолучитьВидыКонтрагентов() ЭКСПОРТ
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЮрФизЛицо.Ссылка КАК Вид
	                      |ИЗ
	                      |	Справочник.ЮрФизЛицо КАК ЮрФизЛицо");
	списокВидовКонтрагентов = Новый СписокЗначений();
	списокВидовКонтрагентов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Вид"));
	Возврат списокВидовКонтрагентов;
КонецФункции

&НаСервере
Функция ПолучитьВидыТелефонныхНомеров() ЭКСПОРТ
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВидыТелефонов.Ссылка КАК Вид
	                      |ИЗ
	                      |	Справочник.ВидыТелефонов КАК ВидыТелефонов
	                      |ГДЕ
	                      |	ВидыТелефонов.ПометкаУдаления = ЛОЖЬ");
	списокВидовТелефонов = Новый СписокЗначений();
	списокВидовТелефонов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Вид"));
	Возврат списокВидовТелефонов;
КонецФункции


&НаСервере
Функция ПолучитьСписокРеквизитовКонтрагента(типКонтрагента) ЭКСПОРТ
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЮрФизЛицоДополнительныеРеквизиты.Свойство КАК Вид
	                      |ИЗ
	                      |	Справочник.ЮрФизЛицо.ДополнительныеРеквизиты КАК ЮрФизЛицоДополнительныеРеквизиты
	                      |ГДЕ
	                      |	ЮрФизЛицоДополнительныеРеквизиты.Ссылка = &типКонтрагента
	                      |	И ЮрФизЛицоДополнительныеРеквизиты.Свойство.ВидКИ = &ВидКИ");
	Запрос.УстановитьПараметр("типКонтрагента", типКонтрагента);
	Запрос.УстановитьПараметр("ВидКИ", Справочники.ВидыКИ.Телефон);
	списокВидовКонтактнойИнформации = Новый СписокЗначений();
	списокВидовКонтактнойИнформации.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Вид"));
	Возврат списокВидовКонтактнойИнформации;
КонецФункции

Функция ПолучитьФлагБлокироватьВводНомераБитМонитор() ЭКСПОРТ
	Пользователь = бит_ТелефонияСервер.ПолучитьТекущегоПользователя();
	СтруктураОтбора = Новый Структура("Пользователь", Пользователь);
	Возврат РегистрыСведений.бит_БитТелефонияНастройкиУЗ.Получить(СтруктураОтбора).БлокироватьВводНомераБитМонитор;
КонецФункции

Функция ПолучитьФлагБлокироватьВводНомераБитФон() ЭКСПОРТ
	Пользователь = бит_ТелефонияСервер.ПолучитьТекущегоПользователя();
	СтруктураОтбора = Новый Структура("Пользователь", Пользователь);
	Возврат РегистрыСведений.бит_БитТелефонияНастройкиУЗ.Получить(СтруктураОтбора).БлокироватьВводНомераБитФон;
КонецФункции

Процедура ЗадатьНомерТелефонаКонтрагентаМер(контрагент, НомерТел, ВидТел) ЭКСПОРТ
	Если НЕ ЗначениеЗаполнено(контрагент) Тогда
		Возврат;
	КонецЕсли;

	обКонтрагент = контрагент.ПолучитьОбъект();
	строка = обКонтрагент.Телефоны.Добавить();
	строка.ВидТелефона = ВидТел;
	строка.Номер = НомерТел;
	УдалитьУправлениеКонтактнойИнформацией.РазбитьНомерТелефонаНаСоставляющие(строка, НомерТел);
	обКонтрагент.Записать();
КонецПроцедуры

#КонецОбласти

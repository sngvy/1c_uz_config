
Процедура РегламентноеЗадание(НаборСостояние) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК УчетнаяЗапись
	                      |ИЗ
	                      |	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	                      |ГДЕ
	                      |	УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления = ЛОЖЬ");
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		// Рассылаем задания со статусом рассылки "Не определен", обновляем статусы
		НаборЗаписей = РегистрыСведений.УдалитьЗаданияДляРассылки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Отправитель.Установить(Результат.УчетнаяЗапись);
		НаборЗаписей.Отбор.Статус.Установить(Перечисления.СтатусыРассылки.НеОпределен);
		НаборЗаписей.Отбор.Выполнено.Установить(Ложь);
		НаборЗаписей.Отбор.Стартован.Установить(Ложь);
		НаборЗаписей.Прочитать(); 
		НаборЗаписейБуф = РегистрыСведений.УдалитьЗаданияДляРассылки.СоздатьНаборЗаписей();
		НаборЗаписейБуф.Отбор.Стартован.Установить(Истина);
		НаборЗаписейБуф.Отбор.Отправитель.Установить(Результат.УчетнаяЗапись);
		НаборЗаписейБуф.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			Почта = Справочники.ШаблоныТекстаДляАвтоинформирования.СоздатьОбъектПочта(Результат.УчетнаяЗапись);
			Если Почта = Неопределено Тогда
				НаборСостояние.Сообщение = НаборСостояние.Сообщение + "Не удалось подключиться к учетной записи " + Результат.УчетнаяЗапись.Наименование + "!" + Символы.ПС;
				Продолжить;
			КонецЕсли;
			к = НаборЗаписей.Количество();
			Для с = 0 По к-1 Цикл
				Индекс = к-1 - с;
				Запись = НаборЗаписей[Индекс];
				Если Запись.Дата <= ТекущаяДата() Тогда
					МассивАдресов = Новый Массив();
					МассивАдресов.Добавить(Запись.Контакт);
					СписокАдресов = СтрЗаменить(Запись.Контакт, " ", Символы.ПС);
					Отправка = Справочники.ШаблоныТекстаДляАвтоинформирования.ОтправитьEMail(Почта, Запись.Отправитель, Запись.Шаблон, Запись.Объект, МассивАдресов, Ложь); 
					ЗаписьБуф = НаборЗаписейБуф.Добавить();
					ЗаполнитьЗначенияСвойств(ЗаписьБуф, Запись); 				
					Если Отправка Тогда
						ЗаписьБуф.Статус = Перечисления.СтатусыРассылки.Отправлено;
					Иначе
						ЗаписьБуф.Статус = Перечисления.СтатусыРассылки.НеОтправлено;		
					КонецЕсли; 
					ЗаписьБуф.Стартован = Истина;
					Если ТипЗнч(Запись.Автор) = Тип("ЗадачаСсылка.Мероприятие") И ВыполнитьМероприятие(ЗаписьБуф.Автор, ЗаписьБуф.Статус) Тогда
						ЗаписьБуф.Выполнено = Истина;
					КонецЕсли;
					
					Если ТипЗнч(Запись.Автор) = Тип("ДокументСсылка.УдалитьРассылка") И Не Запись.Шаблон.УведомитьОДоставке И Не Запись.Шаблон.УведомитьОПрочтении Тогда
						ЗаписьБуф.Выполнено = Истина;
					КонецЕсли;
					НаборЗаписей.Удалить(Индекс);
				Иначе
					//ЗаписьСМеньшейДатой = НаборЗаписейСМеньшейДатой.Добавить();
					//ЗаполнитьЗначенияСвойств(ЗаписьСМеньшейДатой, Запись);
				КонецЕсли;
			КонецЦикла;
			НаборЗаписей.Записать(Истина);
			НаборЗаписейБуф.Записать(Истина);
			//НаборЗаписейСМеньшейДатой.Записать(Истина);
		КонецЕсли;
		
		//// Проверяем статусы писем
		
		//НаборЗаписей = РегистрыСведений.ЗаданияДляРассылки.СоздатьНаборЗаписей();
		//НаборЗаписей.Отбор.Отправитель.Установить(Результат.УчетнаяЗапись);
		//НаборЗаписей.Отбор.Выполнено.Установить(Ложь);
		//НаборЗаписей.Прочитать(); 
		//НаборЗаписейБуф = РегистрыСведений.ЗаданияДляРассылки.СоздатьНаборЗаписей();
		//Если НаборЗаписей.Количество() > 0 Тогда
		//	Почта = Справочники.ШаблоныТекстаДляАвтоинформирования.СоздатьОбъектПочта(Результат.УчетнаяЗапись);
		//	
		//	ПараметрыОтбораIMAP = Новый Структура;
		//	ПараметрыОтбораIMAP.Вставить("Прочитанные", Истина);
		//	мЗаголовкиСообщения = Новый Массив;
		//	мЗаголовкиСообщения = Почта.ПолучитьЗаголовки(ПараметрыОтбораIMAP);
		//	
		//	Сообщения = Почта.Выбрать(Ложь);
		//	Для Каждого Элемент ИЗ Сообщения Цикл
		//		//ОбработатьПисьмо(Элемент);
		//	КонецЦикла;
		//КонецЕсли;
	КонецЦикла;
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	УчетныеЗаписиSMS4B.Ссылка КАК УчетнаяЗапись
	                      |ИЗ
	                      |	Справочник.УчетныеЗаписиSMS4B КАК УчетныеЗаписиSMS4B
	                      |ГДЕ
	                      |	УчетныеЗаписиSMS4B.ПометкаУдаления = ЛОЖЬ");
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Учетка = Результат.УчетнаяЗапись;
		
		
		НаборЗаписей = РегистрыСведений.УдалитьЗаданияДляРассылки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Статус.Установить(Перечисления.СтатусыРассылки.НеОпределен);
		НаборЗаписей.Отбор.Отправитель.Установить(Результат.УчетнаяЗапись);
		НаборЗаписей.Отбор.Стартован.Установить(Ложь);
		НаборЗаписей.Отбор.Выполнено.Установить(Ложь);
		НаборЗаписей.Прочитать();
		НаборЗаписейБуф = РегистрыСведений.УдалитьЗаданияДляРассылки.СоздатьНаборЗаписей();
		НаборЗаписейБуф.Отбор.Отправитель.Установить(Результат.УчетнаяЗапись);
		НаборЗаписейБуф.Отбор.Стартован.Установить(Истина);
		НаборЗаписейБуф.Прочитать();
		
		СписокСообщений = Новый Массив;
		//Структура = Новый Структура;
		//
		Если НаборЗаписей.Количество() > 0 Тогда		
			Для Каждого Запись ИЗ НаборЗаписей Цикл
				Если Запись.Дата <= ТекущаяДата() Тогда		
					Структура = Новый Структура;
					Структура.Вставить("GUID", Запись.GUID);
					Структура.Вставить("НомерПолучателя", ОчиститьФорматНомера(Запись.Контакт));
					Структура.Вставить("ТекстСообщения",  Запись.Текст);
					Структура.Вставить("КодОшибки", 0);
					Структура.Вставить("IDMobizon", Запись.IDMobizon);
					СписокСообщений.Добавить(Структура);
				КонецЕсли;
			КонецЦикла;
			Отправка = ОтправитьСМС(Учетка.СервисСМС, СписокСообщений, Учетка);
			//	Отправка = Истина;
			Если Не Отправка Тогда
				НаборСостояние.Сообщение = НаборСостояние.Сообщение + "Не смогли подключиться к серверу SMS4B для отправки сообщений..." + Символы.ПС;
				Продолжить;
			КонецЕсли;		
			
			// меняем статусы у обработанных СМС
			к = НаборЗаписей.Количество();
			п = СписокСообщений.Количество() - 1;
			Для с = 0 По к-1 Цикл
				Индекс = к-1 - с;
				Запись = НаборЗаписей[Индекс]; 
				Если Запись.Дата <= ТекущаяДата() Тогда
					ЗаписьБуф = НаборЗаписейБуф.Добавить();
					ЗаполнитьЗначенияСвойств(ЗаписьБуф, Запись);
					
					ЗаписьБуф.Стартован = Истина;
					ЗаписьБуф.IDMobizon = СписокСообщений[п].IDMobizon;
					Если ЗаписьБуф.IDMobizon = "Не отправлено" Тогда
						ЗаписьБуф.Статус = Перечисления.СтатусыРассылки.ОшибкаОтправления;
					Иначе
						ЗаписьБуф.Статус = Перечисления.СтатусыРассылки.НеОпределен;
					КонецЕсли;
					Если ТипЗнч(Запись.Автор) = Тип("ЗадачаСсылка.Мероприятие") И ВыполнитьМероприятие(ЗаписьБуф.Автор, ЗаписьБуф.Статус) Тогда
						ЗаписьБуф.Выполнено = Истина;
					КонецЕсли;
					
					Если ТипЗнч(Запись.Автор) = Тип("ДокументСсылка.УдалитьРассылка") Тогда
						ЗаписьБуф.Выполнено = Ложь;
					КонецЕсли;
					Если ЗаписьБуф.IDMobizon = "Не отправлено" Тогда
						ЗаписьБуф.Выполнено = Истина;	
					КонецЕсли;
					НаборЗаписей.Удалить(Индекс);	
				КонецЕсли;
				п = п - 1;
			КонецЦикла;
			НаборЗаписей.Записать(Истина);
			НаборЗаписейБуф.Записать(Истина);		
		КонецЕсли;
		
		// Проверяем статусы по рассылке у невыполненных
		НаборЗаписей = РегистрыСведений.УдалитьЗаданияДляРассылки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Отправитель.Установить(Результат.УчетнаяЗапись);
		НаборЗаписей.Отбор.Выполнено.Установить(Ложь);
		НаборЗаписей.Отбор.Стартован.Установить(Истина);
		НаборЗаписей.Прочитать();
		НаборЗаписейБуф = РегистрыСведений.УдалитьЗаданияДляРассылки.СоздатьНаборЗаписей();
		НаборЗаписейБуф.Отбор.Отправитель.Установить(Результат.УчетнаяЗапись);
		НаборЗаписейБуф.Отбор.Выполнено.Установить(Истина);
		НаборЗаписейБуф.Прочитать();
		
		СМСЛогин = Учетка.Логин;
		СМСПароль = Учетка.Пароль;
		БИТ_СМС_Коммуникатор.УстановитьИмяПользователяИПароль(СМСЛогин, СМСПароль);
		СписокСообщений = Новый Массив;	
				Если НаборЗаписей.Количество() > 0 Тогда
			Для Каждого Запись Из НаборЗаписей Цикл
			//	Если Запись.Дата <= ТекущаяДата() Тогда
					Структура = Новый Структура;
					Структура.Вставить("GUID", Запись.GUID);
					Структура.Вставить("IDMobizon", Запись.IDMobizon);
					Структура.Вставить("СтатусСообщения", Запись.Статус);
					СписокСообщений.Добавить(Структура);
			//	КонецЕсли;
			КонецЦикла;
			
			// Лезем на SMS4B за новыми статусами сообщений
			//Статусы = БИТ_СМС_Коммуникатор.ОбновитьСтатусы(СписокСообщений);
			Статусы = ОбновитьСтатусы(Учетка.СервисСМС, СписокСообщений, Учетка);
			
			// Перезаписываем новые статусы в регистр рассылки
			к = НаборЗаписей.Количество();
			п = СписокСообщений.Количество() - 1;
			Для с = 0 По к-1 Цикл
				Индекс = к-1 - с;
				Запись = НаборЗаписей[Индекс]; 
				//Если Запись.Дата <= ТекущаяДата() Тогда
				Если Запись.Статус <> СписокСообщений[п].СтатусСообщения Тогда
					Если ЭтоОкончательныйСтатус(СписокСообщений[п].СтатусСообщения) Тогда
						ЗаписьБуф = НаборЗаписейБуф.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьБуф, Запись); 				
						ЗаписьБуф.Статус = СписокСообщений[п].СтатусСообщения;	
						НаборЗаписей.Удалить(Индекс);
					Иначе
						Запись.Статус = СписокСообщений[п].СтатусСообщения;
					КонецЕсли;
					//Если ТипЗнч(Запись.Автор) = Тип("ДокументСсылка.Рассылка") ИЛИ (ТипЗнч(Запись.Автор) = Тип("ЗадачаСсылка.Мероприятие") И ВыполнитьМероприятие(Запись.Автор, СписокСообщений[п].СтатусСообщения)) Тогда
					//	ЗаписьБуф = НаборЗаписейБуф.Добавить();
					//	ЗаполнитьЗначенияСвойств(ЗаписьБуф, Запись); 				
					//	ЗаписьБуф.Статус = СписокСообщений[п].СтатусСообщения;
					//	Если ЗаписьБуф.Статус = Перечисления.СтатусыРассылки.ВОчереди ИЛИ ЗаписьБуф.Статус = Перечисления.СтатусыРассылки.Доставка ИЛИ ЗаписьБуф.Статус = Перечисления.СтатусыРассылки.ЧастичноПолучено ИЛИ ЗаписьБуф.Статус = Перечисления.СтатусыРассылки.НеОтправлено ИЛИ ЗаписьБуф.Статус = Перечисления.СтатусыРассылки.Отправлено  ИЛИ ЗаписьБуф.Статус = Перечисления.СтатусыРассылки.НеОпределен Тогда
					//	Иначе	
					//		ЗаписьБуф.Выполнено = Истина;  
					//		НаборЗаписей.Удалить(Индекс);
					//	КонецЕсли;												
					//Иначе
					//	Запись.Статус = СписокСообщений[п].СтатусСообщения;
					//КонецЕсли;
				КонецЕсли;	
				п = п-1;
				//КонецЕсли;
			КонецЦикла;
			НаборЗаписей.Записать(Истина);
			НаборЗаписейБуф.Записать(Истина);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ЭтоОкончательныйСтатус(Статус)
	Если Статус = Перечисления.СтатусыРассылки.ВОчереди 
		ИЛИ Статус = Перечисления.СтатусыРассылки.Доставка 
		ИЛИ Статус = Перечисления.СтатусыРассылки.Отправлено
		ИЛИ Статус = Перечисления.СтатусыРассылки.НеОтправлено
		ИЛИ Статус = Перечисления.СтатусыРассылки.ЧастичноПолучено 
		ИЛИ Статус = Перечисления.СтатусыРассылки.НеОпределен Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ВыполнитьМероприятие(Мероприятие, Статус)
	МероприятиеОбъект = Мероприятие.ПолучитьОбъект();
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	НастройкаРассылкиИзБП.РезультатМероприятия
	                      |ИЗ
	                      |	РегистрСведений.НастройкаРассылкиИзБП КАК НастройкаРассылкиИзБП
	                      |ГДЕ
	                      |	НастройкаРассылкиИзБП.ТипМероприятия = &ТипМероприятия
	                      |	И НастройкаРассылкиИзБП.Статус = &Статус");
	Запрос.УстановитьПараметр("ТипМероприятия", МероприятиеОбъект.ТипМероприятия);
	Запрос.УстановитьПараметр("Статус", Статус);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		МероприятиеОбъект.Результат = Результат.РезультатМероприятия;
		МероприятиеОбъект.ДатаВыполнения = ТекущаяДата();
		Отказ = Ложь;
		МероприятиеОбъект.ВыполнитьМероприятие(Отказ);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ОбновитьСтатусы(СМССервис, СписокСообщений, Учетка);
	Если СМССервис = Перечисления.СервисыРассылкиСМС.SMS4B Тогда
		Статусы = БИТ_СМС_Коммуникатор.ОбновитьСтатусы(СписокСообщений);
	ИначеЕсли СМССервис = Перечисления.СервисыРассылкиСМС.Mobizon Тогда
		ssl = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено);
		HTTPЗапрос = Новый HTTPСоединение("api.mobizon.com",,,,,5,ssl);

		Для Каждого Сообщение из СписокСообщений Цикл
			ИмяФайла = Учетка.Каталог + "\" + "Статус_" + Сообщение.GUID + ".txt";
			IDСообщения = Сообщение.IDMobizon;
			Ответ = HTTPЗапрос.Получить("/service/message/getsmsstatus?apiKey=" + Учетка.API + "&ids=" + IDСообщения, ИмяФайла);
			Сообщение.СтатусСообщения = ПолучитьЗначениеСтатусаПоНомеру(ПолучитьСтатусМобизон(ИмяФайла));
		КонецЦикла;                                                        
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьIDМобизон(ИмяФайла)
	Попытка
		Док = Новый ТекстовыйДокумент;
		Док.Прочитать(ИмяФайла,,);
		Текст = Док.ПолучитьТекст();
		Если Найти(Текст, "messageId") > 0 Тогда
			
			ID = Лев(Прав(Текст, Стрдлина(Текст) - Найти(Текст, "messageId") - 11), Найти(Прав(Текст, Стрдлина(Текст) - Найти(Текст, "messageId") -11), """")-1)
		Иначе 
			ID = "Не отправлено";
		КонецЕсли;
	Исключение
		ID = "Не отправлено";
	КонецПопытки;
	Возврат ID;	
КонецФункции


&НаСервере
Функция ОтправитьСМС(СМССервис, СписокСообщений, Учетка)
	Если СМССЕрвис = Перечисления.СервисыРассылкиСМС.SMS4B Тогда
		Сообщить("Начинается отправка SMS сообщений...");
		СМСЛогин = Учетка.Логин;
		СМСПароль = Учетка.Пароль;
		Отправитель = Учетка.Отправитель;
		БИТ_СМС_Коммуникатор.УстановитьИмяПользователяИПароль(СМСЛогин, СМСПароль);
		Результат = БИТ_СМС_Коммуникатор.Подключиться();
		Если Результат < 0 Тогда
			Сообщить("Не смогли подключиться к серверу SMS4B для отправки сообщений...");
			Сообщить(БИТ_СМС_Коммуникатор.ОписаниеОшибокВебСервиса(Результат));
			Возврат Ложь;
		КонецЕсли;
		
		Актуальность = ТекущаяДата() + (24 * 3600);
		Результат = БИТ_СМС_Коммуникатор.ОтправитьСообщения(СписокСообщений, Отправитель, "", ТекущаяДата(), Актуальность);
		
		Если Результат < 0 Тогда
			Сообщить("Отправка SMS сообщений НЕ выполнена ...");
			Сообщить(БИТ_СМС_Коммуникатор.ОписаниеОшибокВебСервиса(Результат));
			Результат = БИТ_СМС_Коммуникатор.Отключиться();
			Если Результат = Неопределено Тогда
				Сообщить("Не выполнено отключение от сервера!");
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
		
		Сообщить("Отправка SMS сообщений успешно завершена ...");
		
		Результат = БИТ_СМС_Коммуникатор.Отключиться();
		Если Результат = Неопределено Тогда
			Сообщить("Не выполнено отключение от сервера!");
		КонецЕсли;
		
		Возврат Истина;
	ИначеЕсли СМССервис = Перечисления.СервисыРассылкиСМС.Mobizon Тогда  
		ssl = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено);
		HTTPЗапрос = Новый HTTPСоединение("api.mobizon.com",,,,,5,ssl);
		
		Для Каждого Сообщение из СписокСообщений Цикл
			
			ИмяФайла = Учетка.Каталог + "\" + Сообщение.GUID + ".txt";
			Ответ = HTTPЗапрос.Получить("/service/message/sendsmsmessage?apiKey=" + Учетка.API + "&recipient=" + Сообщение.НомерПолучателя + "&from=" + Учетка.Логин + "&text=" + Сообщение.ТекстСообщения, ИмяФайла);
			Док = Новый ТекстовыйДокумент;
			Док.Прочитать(ИмяФайла,,);
			Сообщение.IDMobizon = ПолучитьIDМобизон(ИмяФайла);
			
		КонецЦикла;
		Возврат Истина;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьСтатусМобизон(ИмяФайла)
	//Для Мобизона
	//статус 	окончательный 	описание
	//NEW 		нет 	Новое сообщение, еще не было отправлено
	//ENQUEUD 	нет 	Прошло модерацию и поставлено в очередь на отправку
	//ACCEPTD 	нет 	Отправлено из системы и принято оператором для дальнейшей пересылки получателю
	//UNDELIV 	да 		Не доставлено получателю
	//REJECTD 	да 		Отклонено оператором по одной из множества причин - неверный номер получателя, запрещенный текст и т.д.
	//PDLIVRD 	нет 	Не все сегменты сообщения доставлены получателю, некоторые операторы возвращают отчет только о первом доставленном сегменте, поэтому такое сообщение после истечения срока жизни перейдет в статус DELIVRD
	//DELIVRD 	да 		Доставлено получателю полностью
	//EXPIRED 	да 		Доставка не удалась так как истек срок жизни сообщения (по умолчанию 3 суток)
	//DELETED 	да 		Удалено из-за ограничений и не доставлено до получателя		

	// Описание возвращаемых статусов сообщений:
	//  1 - Доставка 
	//  2 - В очереди
	//  3 - Отправлено 
	//  4 - Не отправлено
	//  5 - Доставлено
	//  6 - Не доставлено 
	//  7 - Ошибка отправки 
	//  8 - Получено 
	//  9 - Частично получено

	Попытка
		Док = Новый ТекстовыйДокумент;
		Док.Прочитать(ИмяФайла,,);
		Текст = Док.ПолучитьТекст();
		Если Найти(Текст, "NEW") > 0 Тогда
			Статус = 4;
		ИначеЕсли Найти(Текст, "ENQUEUD") > 0 Тогда
			Статус = 2;
		ИначеЕсли Найти(Текст, "ACCEPTD") > 0 Тогда
			Статус = 3;
		ИначеЕсли Найти(Текст, "UNDELIV") > 0 Тогда
			Статус = 6;
		ИначеЕсли Найти(Текст, "REJECTD") > 0 Тогда
			Статус = 7;
		ИначеЕсли Найти(Текст, "PDLIVRD") > 0 Тогда
			Статус = 9;
		ИначеЕсли Найти(Текст, "DELIVRD") > 0 Тогда
			Статус = 5;
		ИначеЕсли Найти(Текст, "EXPIRED") > 0 Тогда
			Статус = 6;
		ИначеЕсли Найти(Текст, "DELETED") > 0 Тогда	
			Статус = 6;
		Иначе 
			Статус = 0;
		КонецЕсли;
	Исключение
		Статус = 0;
	КонецПопытки;
	Возврат Статус;
КонецФункции

&НаСервере
Функция ПроверитьСтатусСообщения(СервисСМС, СписокСообщений, Учетка)
	Если СервисСМС = Перечисления.СервисыРассылкиСМС.SMS4B Тогда
		СМСЛогин = Константы.СМСЛогин.Получить(); //"MariaCollector";
		СМСПароль = Константы.СМСПароль.Получить();
		БИТ_СМС_Коммуникатор.УстановитьИмяПользователяИПароль(СМСЛогин, СМСПароль);
		
		//	СписокСообщений = Новый Массив;
		//	
		//		Структура = Новый Структура;
		//		Структура.Вставить("GUID",    GUID);
		//		Структура.Вставить("СтатусСообщения", Статус);
		//		//
		//	СписокСообщений.Добавить(Структура);
		
		Статусы = БИТ_СМС_Коммуникатор.ОбновитьСтатусы(СписокСообщений);
		Статус = СписокСообщений[0].СтатусСообщения;
		Возврат Статус;
	ИначеЕсли СервисСМС = Перечисления.СервисыРассылкиСМС.Mobizon Тогда
		Возврат 3;
	КонецЕсли;
КонецФункции


&НаСервере
Функция ОчиститьФорматНомера(стрНомер)
	код0	= 48;
	код9	= 57;
	кодЗв	= 42;
	кодРеш	= 35;
	стрОчищНомер = "";
	длинаНомера = СтрДлина(стрНомер);
	Для й=1 по длинаНомера Цикл
		кодСимв = КодСимвола(стрНомер, й);
		Если (кодСимв >= код0 И кодСимв <= код9) Тогда
			стрОчищНомер = стрОчищНомер + Символ(кодСимв);
		КонецЕсли;
	КонецЦикла;
	Возврат стрОчищНомер;
	//стр = СтрЗаменить(стрНомер, " ", "");
	//стр = СтрЗаменить(стр, "+", "");
	//стр = СтрЗаменить(стр, "(", "");
	//стр = СтрЗаменить(стр, ")", "");
	//стр = СтрЗаменить(стр, "-", "");
	//Если стрДлина(стр) > 10 Тогда
	//	стр = Прав(стр, 10);
	//КонецЕсли;
	//Возврат стр;
КонецФункции

&НаСервере
Функция ПроверитьКорректностьНомера(стрНомер)
	Если СтрДлина(стрНомер) = 11 Тогда
		Если Лев(стрНомер, 2) = "79" ИЛИ Лев(стрНомер, 2) = "89" Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли СтрДлина(стрНомер) = 10 Тогда
		Если Лев(стрНомер, 1) = "9" Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьНаименованиеСтатусаПоНомеру(Статус)
	// Описание возвращаемых статусов сообщений:
	//  1 - Доставка 
	//  2 - В очереди
	//  3 - Отправлено 
	//  4 - Не отправлено
	//  5 - Доставлено
	//  6 - Не доставлено 
	//  7 - Ошибка отправки 
	//  8 - Получено 
	//  9 - Частично получено
	Если Статус = 0 Тогда
		Возврат "Некорректный телефонный номер";
	ИначеЕсли Статус = 1 Тогда
		Возврат "Доставка";
	ИначеЕсли Статус = 2 Тогда
		Возврат "В очереди";
	ИначеЕсли Статус = 3 Тогда
		Возврат "Отправлено";
	ИначеЕсли Статус = 4 Тогда
		Возврат "Не отправлено";
	ИначеЕсли Статус = 5 Тогда
		Возврат "Доставлено";
	ИначеЕсли Статус = 6 Тогда
		Возврат "Не доставлено";
	ИначеЕсли Статус = 7 Тогда
		Возврат "Ошибка отправки";
	ИначеЕсли Статус = 8 Тогда
		Возврат "Получено";
	ИначеЕсли Статус = 9 Тогда
		Возврат "Частично получено";
	Иначе
		Возврат "Статус не определен";
	КонецЕсли;
КонецФункции

Функция ПолучитьНомерСтатусаПоПеречислению(Статус)
	Если Статус = Перечисления.СтатусыРассылки.Доставка Тогда
		Возврат 1;
	ИначеЕсли Статус = Перечисления.СтатусыРассылки.ВОчереди Тогда
		Возврат 2;
	ИначеЕсли Статус = Перечисления.СтатусыРассылки.Отправлено Тогда
		Возврат 3;
	ИначеЕсли Статус = Перечисления.СтатусыРассылки.НеОтправлено Тогда
		Возврат 4;
	ИначеЕсли Статус = Перечисления.СтатусыРассылки.Доставлено Тогда
		Возврат 5;
	ИначеЕсли Статус = Перечисления.СтатусыРассылки.НеДоставлено Тогда
		Возврат 6;
	ИначеЕсли Статус = Перечисления.СтатусыРассылки.ОшибкаОтправления Тогда
		Возврат 7;
	ИначеЕсли Статус = Перечисления.СтатусыРассылки.Получено Тогда
		Возврат 8;
	ИначеЕсли Статус = Перечисления.СтатусыРассылки.ЧастичноПолучено Тогда
		Возврат 9;
	ИначеЕсли Статус = Перечисления.СтатусыРассылки.НеОпределен Тогда
		Возврат 0;
	Иначе 
		Возврат 0;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьЗначениеСтатусаПоНомеру(Статус)
	//Для Мобизона
	//статус 	окончательный 	описание
	//NEW 		нет 	Новое сообщение, еще не было отправлено
	//ENQUEUD 	нет 	Прошло модерацию и поставлено в очередь на отправку
	//ACCEPTD 	нет 	Отправлено из системы и принято оператором для дальнейшей пересылки получателю
	//UNDELIV 	да 		Не доставлено получателю
	//REJECTD 	да 		Отклонено оператором по одной из множества причин - неверный номер получателя, запрещенный текст и т.д.
	//PDLIVRD 	нет 	Не все сегменты сообщения доставлены получателю, некоторые операторы возвращают отчет только о первом доставленном сегменте, поэтому такое сообщение после истечения срока жизни перейдет в статус DELIVRD
	//DELIVRD 	да 		Доставлено получателю полностью
	//EXPIRED 	да 		Доставка не удалась так как истек срок жизни сообщения (по умолчанию 3 суток)
	//DELETED 	да 		Удалено из-за ограничений и не доставлено до получателя		
	
	
	// Описание возвращаемых статусов сообщений:
	//  1 - Доставка 
	//  2 - В очереди
	//  3 - Отправлено 
	//  4 - Не отправлено
	//  5 - Доставлено
	//  6 - Не доставлено 
	//  7 - Ошибка отправки 
	//  8 - Получено 
	//  9 - Частично получено
	Если Статус = 0 Тогда
		Возврат Перечисления.СтатусыРассылки.НеОпределен;
	ИначеЕсли Статус = 1 Тогда
		Возврат Перечисления.СтатусыРассылки.Доставка;
	ИначеЕсли Статус = 2 Тогда
		Возврат Перечисления.СтатусыРассылки.ВОчереди;
	ИначеЕсли Статус = 3 Тогда
		Возврат Перечисления.СтатусыРассылки.Отправлено;
	ИначеЕсли Статус = 4 Тогда
		Возврат Перечисления.СтатусыРассылки.НеОтправлено;
	ИначеЕсли Статус = 5 Тогда
		Возврат Перечисления.СтатусыРассылки.Доставлено;
	ИначеЕсли Статус = 6 Тогда
		Возврат Перечисления.СтатусыРассылки.НеДоставлено;
	ИначеЕсли Статус = 7 Тогда
		Возврат Перечисления.СтатусыРассылки.ОшибкаОтправления;
	ИначеЕсли Статус = 8 Тогда
		Возврат Перечисления.СтатусыРассылки.Получено;
	ИначеЕсли Статус = 9 Тогда
		Возврат Перечисления.СтатусыРассылки.ЧастичноПолучено;
	Иначе
		Возврат Перечисления.СтатусыРассылки.НеОпределен;
	КонецЕсли;
КонецФункции

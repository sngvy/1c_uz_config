
Перем бит_сл_глФормаКлиентаЛицензирования Экспорт;


// Информация о доступном обновлении конфигурации, обнаруженном в Интернете
// при запуске программы.
Перем ДоступноеОбновлениеКонфигурации Экспорт;
// СписокЗначений для накапливания пакета сообщений в журнал регистрации, 
// формируемых в клиентской бизнес-логике подсистемы.
Перем СообщенияДляЖурналаРегистрации Экспорт; 
// Структура с параметрами помощника обновления конфигурации.
Перем НастройкиОбновленияКонфигурации Экспорт; 

// Конец ОбновлениеКонфигурации

// РаботаСФайлами
Перем КомпонентаTwain Экспорт;			// Twain компонента для работы со сканером
// Конец РаботаСФайлами

//{{MRG[ <-> ]
// Конец СтандартныеПодсистемы
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//Процедура ПередНачаломРаботыСистемы()
//}}MRG[ <-> ]

Процедура ПередНачаломРаботыСистемы(Отказ)
	
	// СтандартныеПодсистемы
//{{MRG[ <-> ]
//	СтандартныеПодсистемыКлиент.ПередНачаломРаботыСистемы();
//}}MRG[ <-> ]
	// ОбновлениеВерсииИБ
	////Отказ = НЕ ОбновлениеИнформационнойБазыКлиент.ВозможноВыполнитьОбновлениеИнформационнойБазы();
	// Конец ОбновлениеВерсииИБ
	
//{{MRG[ <-> ]
	// Конец СтандартныеПодсистемы
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	// Конец СтандартныеПодсистемы
//	// ИнтернетПоддержкаПользователей
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	ИнтернетПоддержкаПользователейКлиент.ПередНачаломРаботыСистемы();
//	// Конец ИнтернетПоддержкаПользователей
//}}MRG[ <-> ]
	
КонецПроцедуры

Процедура ПриНачалеРаботыСистемы()
	// Инициализация клиента лицензирования
	бит_сл_клиент.ИнициализацияКлиентаЛицензирования();
	
	
	// СтандартныеПодсистемы
//{{MRG[ <-> ]
	УдалитьОбщегоНазначенияКлиент.УстановитьПроизвольныйЗаголовокПриложения();
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	СтандартныеПодсистемыКлиент.ПриНачалеРаботыСистемы();
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	// Конец СтандартныеПодсистемы
//}}MRG[ <-> ]
	
	// ОбновлениеВерсииИБ
	////ОбновлениеИнформационнойБазыКлиент.ВыполнитьОбновлениеИнформационнойБазы();
	// Конец ОбновлениеВерсииИБ

	// отработка параметров запуска системы
	Если ОбработатьПараметрыЗапуска(ПараметрЗапуска) Тогда
		Возврат;
	КонецЕсли;
	
	// ЗавершениеРаботыПользователей
	СоединенияИБКлиент.УстановитьКонтрольРежимаЗавершенияРаботыПользователей();
	// Конец ЗавершениеРаботыПользователей
	
	// ОбновлениеКонфигурации
	////ОбновлениеКонфигурацииКлиент.ПроверитьОбновлениеКонфигурации();
	// Конец ОбновлениеКонфигурации
	
	// РаботаСФайлами
	////РаботаСФайламиКлиент.ПриНачалеРаботыСистемы();
	// Конец РаботаСФайлами
	
	// РегламентныеЗадания
	// Прим.: подсистема КонтрольДинамическогоОбновленияКонфигурации
	//        должна настраиваться после подсистемы РегламентныеЗадания, т.к. в режиме запуска отдельного
	//        сеанса обработки регламентных заданий, управление не будет и не должно быть передано далее.
	////РегламентныеЗаданияКлиент.ПриНачалеРаботыСистемы();
	// Конец РегламентныеЗадания
	
	// КонтрольДинамическогоОбновленияКонфигурации
	////КонтрольДинамическогоОбновленияКонфигурацииКлиент.ПриНачалеРаботыСистемы();
	// Конец КонтрольДинамическогоОбновленияКонфигурации
	
	// Конец СтандартныеПодсистемы	
КонецПроцедуры

// Обработать параметр запуска программы.
// Реализация функции может быть расширена для обработки новых параметров.
//
// Параметры
//  ПараметрЗапуска  - Строка - параметр запуска, переданный в конфигурацию 
//                              с помощью ключа командной строки /C.
//
// Возвращаемое значение:
//   Булево   - Истина, если необходимо прервать выполнение процедуры ПриНачалеРаботыСистемы.
//
Функция ОбработатьПараметрыЗапуска(Знач ПараметрЗапуска)

	// СтандартныеПодсистемы
	
	// Есть ли параметры запуска
	Если ПустаяСтрока(ПараметрЗапуска) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Параметр может состоять из частей, разделенных символом ";".
	// Первая часть - главное значение параметра запуска. 
	// Наличие дополнительных частей определяется логикой обработки главного параметра.
	ПараметрыЗапуска = УдалитьСтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска, ";");
	ЗначениеПараметраЗапуска = Врег(ПараметрыЗапуска[0]);
	
	// ЗавершениеРаботыПользователей
	Результат = СоединенияИБКлиент.ОбработатьПараметрыЗапуска(ЗначениеПараметраЗапуска, ПараметрыЗапуска);
	// Конец ЗавершениеРаботыПользователей

	// Конец СтандартныеПодсистемы
	
	// Код конфигурации
	// ...
	// Конец кода конфигурации

	// СтандартныеПодсистемы
	Возврат Результат;
	// Конец СтандартныеПодсистемы

КонецФункции


// Выполняет "Отложенную активацию продукта"
// "Отложенная активация продукта" настраивается в окне системы лицензирования 1.6
Процедура бит_сл_ОтложеннаяАктивация() Экспорт	
	Если Не бит_сл_сервер.НетОшибок(бит_сл_сервер.ПолучитьЛицензиюДляТекущегоПродукта()) Тогда		
		// Обработка ошибки при получении лицензии
		бит_сл_клиент.ОткрытьФормуКлиентаЛицензирования();		
	КонецЕсли;
КонецПроцедуры

// Поддерживает хранимое на сервере значение в актуальном виде
Процедура бит_сл_ПоддержкаВременногоХранилища() Экспорт
	бит_сл_сервер.ОбновитьЗначениеВременногоХранилища();
	
КонецПроцедуры

Процедура ПриЗавершенииРаботыСистемы()
	// Процедура для штатного отсоединения от сервера лицензий
	бит_сл_сервер.ОтключитьсяОтСервера();	
	
КонецПроцедуры
#Область ОписаниеПеременных

// СтандартныеПодсистемы

// Хранилище глобальных переменных.
//
// ПараметрыПриложения - Соответствие - хранилище переменных, где:
//   * Ключ - Строка - имя переменной в формате "ИмяБиблиотеки.ИмяПеременной";
//   * Значение - Произвольный - значение переменной.
//
// Инициализация (на примере СообщенияДляЖурналаРегистрации):
//   ИмяПараметра = "СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации";
//   Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
//     ПараметрыПриложения.Вставить(ИмяПараметра, Новый СписокЗначений);
//   КонецЕсли;
//  
// Использование (на примере СообщенияДляЖурналаРегистрации):
//   ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"].Добавить(...);
//   ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"] = ...;
Перем ПараметрыПриложения Экспорт;

// Конец СтандартныеПодсистемы

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗавершениемРаботыСистемы(Отказ, ТекстПредупреждения)
	
	// СтандартныеПодсистемы
	СтандартныеПодсистемыКлиент.ПередЗавершениемРаботыСистемы(Отказ, ТекстПредупреждения);
	// Конец СтандартныеПодсистемы
	
КонецПроцедуры

#КонецОбласти

Функция GetUSBKeyComponentLocation()
    СистемнаяИнформация = Новый СистемнаяИнформация;
    
    Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 тогда
        Постфикс = "Win32";
    ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 тогда
        Постфикс = "Win64";
    КонецЕсли;
    
    ВызватьИсключение("Макет с образом компоненты защиты не найден");
КонецФункции

Функция ПолучитьТокен() Экспорт
	Пользователь = бит_ФССП_Переопределяемый.ПолучитьТекущегоПользователя();
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ФССП_ПрофильПодключенияДляПользователя.Пользователь КАК Пользователь,
	                      |	ФССП_ПрофильПодключенияДляПользователя.ПрофильФССП КАК ПрофильФССП
	                      |ИЗ
	                      |	РегистрСведений.ФССП_ПрофильПодключенияДляПользователя КАК ФССП_ПрофильПодключенияДляПользователя
	                      |ГДЕ
	                      |	ФССП_ПрофильПодключенияДляПользователя.Пользователь = &Пользователь");
	Запрос.УстановитьПараметр("Пользователь",Пользователь);
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		ТокенКонстанта = Результат.ПрофильФССП.Токен;
		ДатаОкончания = Результат.ПрофильФССП.ДатаОкончания;
	КонецЦикла;
	Если не ЗначениеЗаполнено(ТокенКонстанта) Тогда
		Возврат "";
	ИначеЕсли Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		Сообщить("Проверьте заполнение даты окончания токена в настройках!");
		Возврат ТокенКонстанта;
	Иначе
		Возврат ТокенКонстанта;
	КонецЕсли;
КонецФункции

Функция СоздатьЕдиничныйЗапрос(Должник, Фамилия, Имя, Отчество, ДатаРождения,Регион) Экспорт
	Если Не бит_сл_тс.ПолучитьЛицензию(Истина) Тогда 
		Возврат Неопределено;
	Иначе
		Версия = Константы.ВерсияПрограммы.Получить();
		Если Версия = Перечисления.ВерсииПрограммы.Стандарт Тогда
			ВызватьИсключение "Функционал не доступен для данной версии программы!";
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	token = ПолучитьТокен();
	token = СтрЗаменить(token," ","");
	
	//ФИО = Должник.Наименование;
	//Фамилия = Лев(ФИО, СтрНайти(ФИО, " ") - 1);
	//Имя = Сред(ФИО, СтрНайти(ФИО, " ") + 1, СтрНайти(ФИО, " ", ,,2) -СтрНайти(ФИО, " ") );
	//Отчество = Сред(ФИО, СтрНайти(ФИО, " ", ,,2), стрДлина(ФИО) -СтрНайти(ФИО, " ", ,,2) + 1);
	//Регион = ПолучитьКодРегионаПоДолжнику(Должник);
	//ДатаРождения = ОбъектыСервер.ПолучитьЗначениеСвойства(Должник, "0047");
	стрДата = Лев(Строка(ДатаРождения), 10);
	
	Фамилия = стрЗаменить(Фамилия, "ё", "е");
	Имя = стрЗаменить(Имя, "ё", "е");
	Отчество = стрЗаменить(Отчество, "ё", "е");
	
	//Сервер = "api-ip.fssprus.ru";
	Сервер = ПолучитьЗначениеСервера();
	Ресурс = "/api/v1.0/search/physical";
	СтрокаПараметров = "?token=" + token + "&region=" + Регион + "&firstname=" + Имя + "&secondname=" + Отчество + "&lastname=" + Фамилия + "&birthdate=" + стрДата;
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаПараметров);
	HTTPЗапрос.АдресРесурса = Ресурс + СтрокаПараметров;
	ssl = Новый ЗащищенноеСоединениеOpenSSL;
	HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();
	Попытка
		ОтветHTTP = HTTP.Получить(HTTPЗапрос, ИмяВыходногоФайла);
	Исключение
		Сообщить("Проверьте подключение к интернету!");
		УдалитьФайлы(имяВыходногоФайла);
		Возврат Неопределено;
	КонецПопытки;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(имяВыходногоФайла);
	
	Попытка
		СтруктураJSON = ПрочитатьJSON(ЧтениеJSON);
		
		Если СтруктураJSON.status = "error" тогда
			Сообщить("Ошибка при выполнении запроса! Код ошибки: "+СтруктураJSON.code+", причина ошибки: "+СтруктураJSON.exception);
			Возврат Неопределено;
		ИначеЕсли СтруктураJSON.status = "success" тогда
			//СоздатьЗадание(СтруктураJSON.response.task,
			//Перечисления.ВидыЗаданийФССП.physical);
			Возврат СтруктураJSON.response.task;
		КонецЕсли;
	Исключение
		Сообщить("Ошибка при выполнении запроса!");
		Возврат Неопределено;
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	УдалитьФайлы(имяВыходногоФайла);
КонецФункции

Функция ОбработатьЕдиничноеЗадание(НомерЗадания) Экспорт
	//Сервер = "api-ip.fssprus.ru";
	Сервер = ПолучитьЗначениеСервера();
	Ресурс = "/api/v1.0/result";
	СтрокаПараметров = "?token=" + ПолучитьТокен() + "&task=" + НомерЗадания;
	//ca7d41a2-080a-4e4f-a8f7-7c0140107924
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаПараметров);
	HTTPЗапрос.АдресРесурса = Ресурс + СтрокаПараметров;
	ssl = Новый ЗащищенноеСоединениеOpenSSL;
	HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();
	Попытка
		ОтветHTTP = HTTP.Получить(HTTPЗапрос, ИмяВыходногоФайла);
	Исключение
		Сообщить("Проверьте подключение к интернету!");
		УдалитьФайлы(имяВыходногоФайла);
		Возврат Неопределено;
	КонецПопытки;

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(имяВыходногоФайла);
	
	Попытка
		//Попытка
		//      СтруктураJSON = ПрочитатьJSON(ЧтениеJSON,,"birthdate",ФорматДатыJson.ISO);
		//Исключение
		СтруктураJSON = ПрочитатьJSON(ЧтениеJSON);
		//КонецПопытки;
		Если СтруктураJSON.status = "error" тогда
			Сообщить("Ошибка при выполнении запроса-ответа! Код ошибки: "+СтруктураJSON.code+" , причина ошибки: "+СтруктураJSON.exception);
			Возврат Неопределено;
		ИначеЕсли СтруктураJSON.status = "success" и
			Число(СтруктураJSON.response.status) <= 1 тогда
			Сообщить("Данные по заданию загружены!");
			Возврат СтруктураJSON.response.result;
		ИначеЕсли СтруктураJSON.status = "success" и
			Число(СтруктураJSON.response.status) > 1 тогда
			Сообщить("Задание еще не обработано!");
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		Сообщить("Ошибка при выполнении запроса-ответа!");
		Возврат Неопределено;
	КонецПопытки;
	
	ЧтениеJSON.Закрыть();
	//
	// удаляем файл после использования
	УдалитьФайлы(имяВыходногоФайла);
	
КонецФункции

Функция ПолучитьТокенПоНомеруЗадания(НомерЗадания)
	
	//МенеджерЗаписи =
	//РегистрыСведений.ЛогированиеЗапросовФССП.СоздатьМенеджерЗаписи();
	//МенеджерЗаписи.task = НомерЗадания;
	//МенеджерЗаписи.Прочитать();
	//Если МенеджерЗаписи.Учетка =
	//	Справочники.УчетныеЗаписиФССП.ПустаяСсылка() Тогда
	//	Учетка = Константы.УчеткаФССП.Получить();
	//Иначе
	//	Учетка = МенеджерЗаписи.Учетка;
	//КонецЕсли;
	//Возврат Учетка.token;
КонецФункции

Процедура СоздатьДокументЗагрузкаИП(Задание, Должник, МассивИППервичный) Экспорт
	МассивИП = бит_ФССП_ИнтеграцияФССП.ЗаполнитьДанныеДокумента(МассивИППервичный,Должник,Ложь);
		
	ДокументОбъект = Документы.ФССП_ЗагрузкаИсполнительногоПроизводства.СоздатьДокумент();
	ДокументОбъект.Должник = Должник;
	ДокументОбъект.Автор = бит_ФССП_Переопределяемый.ПолучитьТекущегоПользователя();
	ДокументОбъект.task = Задание;
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	
	Для Каждого ип из МассивИП Цикл
		стр =ДокументОбъект.Объект.тчИсполнительныеПроизводства.Добавить();
		ЗаполнитьЗначенияСвойств(стр,ИП);
	КонецЦикла;
	Для Каждого стр из ДокументОбъект.тчИсполнительныеПроизводства Цикл 
		стр.bailiff = стрЗаменить(стр.bailiff, "<br>", " ");
		стр.bailiff= стрЗаменить(стр.bailiff, "<br/>", " ");
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьНомерОт(СтрокаИП) Экспорт
	ПозицияОТ = СтрНайти(СтрокаИП," от ",НаправлениеПоиска.СНачала,,);
	НомерИП = Лев(СтрокаИП,ПозицияОТ-1);
	Возврат(НомерИП);
КонецФункции

Функция ПолучитьДатуОт(СтрокаИП) Экспорт
	ПозицияОТ = СтрНайти(СтрокаИП,"от ",НаправлениеПоиска.СНачала,,);
	СтрДата = Сред(СтрокаИП,ПозицияОТ + 3,10);
	Попытка
		ДатаИП = Дата(СтрДата+ " 00:00:00");
		Если Год(ДатаИП) > 3999 Тогда
			
			Возврат Дата(1,1,1);
		Иначе
			Возврат(ДатаИП);
		КонецЕсли;
	Исключение
		Возврат Дата(1,1,1);
	КонецПопытки;	
КонецФункции

Процедура СоздатьЭлементИП(ДанныеИП,Должник,Документ) Экспорт
	НовоеИП = Справочники.ФССП_ИсполнительноеПроизводство.СоздатьЭлемент();
	НовоеИП.Наименование = ДанныеИП.Идентификатор;
	НовоеИП.Владелец = Должник;
	НовоеИП.Записать();
	НовоеИПСсыль = НовоеИП.Ссылка;
	НаборЗаписей = РегистрыСведений.ФССП_СостояниеИП.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Документ);
	ИнформацияОбИП = НаборЗаписей.Добавить();
	ИнформацияОбИП.bailiff = ДанныеИП.bailiff;
	ИнформацияОбИП.department = ДанныеИП.department;
	ИнформацияОбИП.details = ДанныеИП.details;
	ИнформацияОбИП.exe_production = ДанныеИП.exe_production;
	ИнформацияОбИП.ip_end = ДанныеИП.ip_end;
	ИнформацияОбИП.name = ДанныеИП.name;
	ИнформацияОбИП.subject = ДанныеИП.subject;
	ИнформацияОбИП.ИП = НовоеИПСсыль;
	ИнформацияОбИП.Регистратор = Документ;
	ИнформацияОбИП.Период = Документ.Дата;
	Если ЗначениеЗаполнено(ДанныеИП.ip_end) Тогда
		ИнформацияОбИП.Завершено = Истина;
		ИнформацияОбИП.СтатусИП = Перечисления.ФССП_СтатусыИП.ОконченоИсполнением;
	Иначе
		ИнформацияОбИП.Завершено = Ложь;
		ИнформацияОбИП.СтатусИП = Перечисления.ФССП_СтатусыИП.Действующее;
	КонецЕсли;
	НаборЗаписей.Записать();
	
КонецПроцедуры

процедура ЗавершитьБезИсполнения(ДанныеИП,Должник,Документ) Экспорт
	НаборЗаписей = РегистрыСведений.ФССП_СостояниеИП.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Документ);
	
	ИнформацияОбИП = НаборЗаписей.Добавить();
	ИнформацияОбИП.bailiff = ДанныеИП.bailiff;
	ИнформацияОбИП.department = ДанныеИП.department;
	ИнформацияОбИП.details = ДанныеИП.details;
	ИнформацияОбИП.exe_production = ДанныеИП.exe_production;
	ИнформацияОбИП.ip_end = ДанныеИП.ip_end;
	ИнформацияОбИП.name = ДанныеИП.name;
	ИнформацияОбИП.subject = ДанныеИП.subject;
	ИнформацияОбИП.ИП = ДанныеИП.Ссылка;
	ИнформацияОбИП.Регистратор = Документ;
	ИнформацияОбИП.Период = Документ.Дата;
	ИнформацияОбИП.Завершено = Истина;
	ИнформацияОбИП.СтатусИП = Перечисления.ФССП_СтатусыИП.ОконченоБезИсполнения;
	НаборЗаписей.Записать();
	
КонецПроцедуры

процедура ЗаписатьИзмененияВ_ИП(ДанныеИП,ИпССылка,Должник,Документ) Экспорт
	НаборЗаписей = РегистрыСведений.ФССП_СостояниеИП.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Документ);
	ИнформацияОбИП = НаборЗаписей.Добавить();
	ИнформацияОбИП.bailiff = ДанныеИП.bailiff;
	ИнформацияОбИП.department = ДанныеИП.department;
	ИнформацияОбИП.details = ДанныеИП.details;
	ИнформацияОбИП.exe_production = ДанныеИП.exe_production;
	ИнформацияОбИП.ip_end = ДанныеИП.ip_end;
	ИнформацияОбИП.name = ДанныеИП.name;
	ИнформацияОбИП.subject = ДанныеИП.subject;
	ИнформацияОбИП.ИП = ИпССылка;
	ИнформацияОбИП.Регистратор = Документ;
	ИнформацияОбИП.Период = Документ.Дата;
	Если ЗначениеЗаполнено(ДанныеИП.ip_end) Тогда
		ИнформацияОбИП.Завершено = Истина;
		ИнформацияОбИП.СтатусИП = Перечисления.ФССП_СтатусыИП.ОконченоИсполнением;
	Иначе
		ИнформацияОбИП.Завершено = Ложь;
		ИнформацияОбИП.СтатусИП = Перечисления.ФССП_СтатусыИП.Действующее;
	КонецЕсли;
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция мПрочитатьТабличныйДокументИзExcel(ТабличныйДокумент, ИмяФайла, НомерЛистаExcel = 1) Экспорт
	
	xlLastCell = 11;
	Если Найти(ИмяФайла, "$") > 0 Тогда
		Сообщить("Временный файл!");
		Возврат Ложь;
	КонецЕсли;
	Попытка
		
		ВыбФайл = Новый Файл(ИмяФайла); 
	Исключение 		
		Сообщить("Файл не существует!");
		Возврат Ложь;
		
	КонецПопытки;
	
	Если НЕ ВыбФайл.Существует() Тогда
		Сообщить("Файл не существует!");
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		Excel.WorkBooks.Open(ИмяФайла);
		//Состояние("Обработка файла Microsoft Excel...");
		Лист = Excel.Sheets(НомерЛистаExcel);
	Исключение
		Сообщить("Ошибка. Возможно неверно указан номер листа книги Excel.");
		Сообщить(ОписаниеОшибки());
		Возврат ложь;
		
	КонецПопытки;
	
	ОчиститьТабличныйДокумент(ТабличныйДокумент);
	
	ActiveCell = Excel.ActiveCell.SpecialCells(xlLastCell);
	КлСтрок = ActiveCell.Row;
	КлСтолбцов = ActiveCell.Column;
	Для р = 1 По КлСтрок Цикл
		Если Не ЗначениеЗаполнено(Лист.Cells(р, 1).Value) Тогда
			р = р - 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	КолСтрок = р;
	
	Для с = 1 По КлСтолбцов Цикл
		Если Не ЗначениеЗаполнено(Лист.Cells(1, с).Value) Тогда
			с = с - 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	КолСтолбцов = с;
	
	//Для Column = 1 По ColumnCount Цикл
	//	ТабличныйДокумент.Область("C" + Формат(Column, "ЧГ=")).ШиринаКолонки = ExcelЛист.Columns(Column).ColumnWidth;
	//КонецЦикла;
	Область = Лист.Range(Лист.Cells(1,1), Лист.Cells(КолСтрок, КолСтолбцов));
	Данные = Область.Value.Выгрузить();
	НомСтл = 1;
	Для Каждого Элемент из Данные Цикл
		НомСтр = 1;
		Для Каждого Стр из Элемент Цикл
			ТабличныйДокумент.Область("R" + Формат(НомСтр, "ЧГ=") + "C" + Формат(НомСтл, "ЧГ=")).Текст = Стр;
			НомСтр = НомСтр + 1;
		КонецЦикла;
		НомСтл = НомСтл + 1;
	КонецЦикла;

	Excel.DisplayAlerts = False;
	Excel.WorkBooks.Close();
	Excel = 0;
	
	Возврат Истина;
	
КонецФункции // ()

Процедура ОчиститьТабличныйДокумент(ТаблДок) Экспорт
	ТаблДок.Очистить();
КонецПроцедуры

Функция ЗаполнитьДанныеДокумента(МассивДанных, ДокументДолжник, ГрупповойЗапрос) Экспорт
	Если Не бит_сл_тс.ПолучитьЛицензию(Истина) Тогда 
		Возврат Неопределено;
	Иначе
		Версия = Константы.ВерсияПрограммы.Получить();
		Если Версия = Перечисления.ВерсииПрограммы.Стандарт Тогда
			ВызватьИсключение "Функционал не доступен для данной версии программы!";
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИмяСправочникаПриставы = бит_ФССП_Переопределяемый.ПолучитьИмяСправочникаСудебныеПриставы();
	МассивИП = Новый Массив;
	
	Параметры = МассивДанных.query.params;
	ФИО = Строка(Параметры.lastname) + " " + Строка(Параметры.firstname) + " " + (Параметры.secondname);
	Попытка
		Если ГрупповойЗапрос Тогда
			ДатаРождения = Дата(Параметры.birthdate + " 00:00:00");
		Иначе
			//ДатаРождения = Параметры.birthdate;
			ДатаРождения = Дата(Параметры.birthdate + " 00:00:00");
			//ДатаРождения = Дата(Параметры.birthdate);
		КонецЕсли;
	Исключение
		//Попытка
		//      ДатаРождения = Дата(сред(ИП.name, СтрНайти(ИП.name, " ",, ,3)+1, 10) + " 00:00:00");
		//Исключение
		//      ДатаРождения = Неопределено;
		//КонецПопытки;
	КонецПопытки;
	Должник = бит_ФССП_Переопределяемый.ПолучитьДолжника(ФИО, ДатаРождения);
	ДокументДолжник = Должник;
	
	Для Каждого ИП из МассивДанных.result Цикл
		Попытка
			стр = Новый Структура;
			стр.Вставить("name",                   ИП.name);
			стр.Вставить("exe_production", ИП.exe_production);
			стр.Вставить("details",                ИП.details);
			стр.Вставить("subject",                ИП.subject);
			стр.Вставить("department",             ИП.department);
			стр.Вставить("bailiff",                ИП.bailiff);
			стр.Вставить("ip_end",                 ИП.ip_end);
		Исключение
			Продолжить;
		КонецПопытки;
			
		ДатаВозбужденияИП = ПолучитьДатуОт(ИП.exe_production);
		
		НомерСД = ПолучитьНомерСД(ИП.exe_production);
		стр.Вставить("НомерСД", НомерСД);
		стр.Вставить("ДатаВозбуждения", ДатаВозбужденияИП);  
		
		МассивПредметов = Новый Массив;
		
		Предмет = ИП.subject;
		
		подстрокиПредмет = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Предмет, "руб.",Истина,Истина);
		
		Для каждого строкаПредмет из подстрокиПредмет Цикл 
			стрПредмет = Новый Структура("Предмет, Сумма", "",0);
			ПолучитьСуммуИПредмет(стрПредмет.Предмет, стрПредмет.Сумма,строкаПредмет);
			МассивПредметов.Добавить(стрПредмет);
		КонецЦикла;	
								
		
		
		колвоПредметов = 1; 
		
		
		Для каждого Пред из МассивПредметов Цикл 
			спрПредмет = ПолучитьСправочникПредмет(Пред.Предмет);
			стр.Вставить("Предмет" + строка(колвоПредметов), спрПредмет);
			стр.Вставить("Сумма"+ строка(колвоПредметов),Пред.Сумма);
			колвоПредметов = колвоПредметов + 1;
		КонецЦикла;   
		
			
		Детали = ИП.details;
		Детали = СтрЗаменить(Детали, " ", " ");
		ВидИДСтрока = ПолучитьНомерОт(ИП.details);
		ДатаИД = ПолучитьДатуОт(ИП.details);
		Предложение = Детали;
		Для к = 1 по 99 Цикл
			Слово = ПолучитьПервоеСлово(Предложение);
			Если ПолучитьТипСлова(Слово) = "Слово" Тогда
				Слово = ОтрезатьПервоеСлово(Предложение);
			Иначе
				ааа = ааа;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Слово = ОтрезатьПервоеСлово(Предложение);
		ТипСлова1 = ПолучитьТипСлова(Слово);
		Если ТипСлова1 = "Дата" Тогда
			НачалоНомераИД = СтрНайти(Детали, Слово) + СтрДлина(Слово) + 1;
		Иначе
			НачалоНомераИД = СтрНайти(Детали, Слово);
		КонецЕсли;
		
		Для к = 1 по 99 Цикл
			Слово = ПолучитьПервоеСлово(Предложение);
			ТипСлова2 = ПолучитьТипСлова(Слово);
			Если ТипСлова2 = "Слово" И ТипСлова1 <> "Символ" Тогда
				ааа = ааа;
				Прервать;
			Иначе
				Слово = ОтрезатьПервоеСлово(Предложение);
				ТипСлова1 = ТипСлова2;
				ТипСлова2 = "";
			КонецЕсли;
		КонецЦикла;
		
		НомерИД = Сред(Детали, НачалоНомераИД, СтрНайти(Детали,Предложение) - НачалоНомераИД);
		НомерИД = СтрЗаменить(НомерИД, "№", "");
		НомерИД = СтрЗаменить(НомерИД, " ", " ");
		УдалитьПробелыСКраев(НомерИД);
		
		ОрганВыдающийИД = Предложение;
		ОрганВыдающийИД = СтрЗаменить(ОрганВыдающийИД, "Постановление о взыскании исполнительского сбора", "");
		ОрганВыдающийИД = СтрЗаменить(ОрганВыдающийИД, "Постановление о взыскании расходов по совершению исполнительных действий", "");
		ОрганВыдающийИД = СтрЗаменить(ОрганВыдающийИД, " ", " ");
		УдалитьПробелыСКраев(ОрганВыдающийИД);
		
		
		НомерИД = НомерИД;
		ОрганВыдавшийИД = ОрганВыдающийИД;
		
		ВидИД = ПолучитьСправочникВидИД(ВидИДСтрока);
		
		Стр.Вставить("НомерИД", НомерИД);
		Стр.Вставить("ДатаИД", ДатаИД);
		стр.Вставить("ОрганВыдавшийИД", ОрганВыдавшийИД);
		Стр.Вставить("ВидИД",ВидИД);
	
		ip_end = ИП.ip_end;
		ДатаОкончанияИП = ПолучитьДатуОкончанияИП(ip_end);
		ПричинаОкончанияИП = ПолучитьПричинуОкончанияИП(ip_end);
		
		стр.Вставить("ДатаОкончания", ДатаОкончанияИП);
		стр.Вставить("ПричинаОкончания", ПричинаОкончанияИП);

		
		Департамент = ИП.department;
		ОтделСудебныхПриставов = "";
		ТипСловаДепартамент = ПолучитьТипСлова(Департамент);
		Если ТипСловаДепартамент = "Число" или типзнч(Департамент) = Тип("Число") Тогда
			ОтделСудебныхПриставов = ПоискДепартаментаПоЧисловомуЗначению(Департамент);
		Иначе	
			СтрокаИндекс = ПолучитьИндексИзСтроки(Департамент);
			СтрокаРосп = Лев(Департамент, Найти(Департамент,	СтрокаИндекс)-1);
			УдалитьПробелыСКраев(СтрокаРОСП);
			ОтделСудебныхПриставовСтрока = СтрокаРОСП;
			ОтделСудебныхПриставовИндекс = СтрокаИндекс;
			КодРегиона = Строка(бит_ФССП_Переопределяемый.ПолучитьКодРегионаПоИндексу(СтрокаИндекс));
			Если ЗначениеЗаполнено(СтрокаРОСП) И ЗначениеЗаполнено(КодРегиона) Тогда
				ОтделСудебныхПриставов = бит_ФССП_Переопределяемый.ПолучитьРОСП(СтрокаРОСП, КодРегиона);
			КонецЕсли;	
			
			Если Не ЗначениеЗаполнено(ОтделСудебныхПриставов) Тогда
				ОтделСудебныхПриставов = ПолучитьТекущееРОСП(ИП.exe_production);
			КонецЕсли;
		КонецЕсли;
		
		стр.Вставить("ОтделСудебныхПриставов", ОтделСудебныхПриставов);
		
		Если ЗначениеЗаполнено(ОтделСудебныхПриставов) Тогда
			Пристав = ИП.bailiff;
			Пристав = стрЗаменить(Пристав, "<br>", " ");
			Пристав = стрЗаменить(Пристав, "<br/>", " ");				
			Пристав = СтрЗаменить(Пристав, " ", " ");
			Пристав = СтрЗаменить(Пристав, " ", Символы.ПС);
			ЧислоСтрок = СтрЧислоСтрок(Пристав);
			Если ЧислоСтрок = 0 Тогда
				СтрокаПристав = "";
			ИначеЕсли ЧислоСтрок = 1 Тогда
				СтрокаПристав = СтрПолучитьСтроку(Пристав, 1);
			Иначе
				СтрокаПристав = СтрПолучитьСтроку(Пристав, 1);
				Для к = 2 по ЧислоСтрок Цикл
					ТипСлова = ПолучитьТипСлова(СтрПолучитьСтроку(Пристав, к));
					Если ТипСлова = "Число" ИЛИ ТипСлова = "Номер" Тогда
						Прервать;
					Иначе
						СтрокаПристав = СтрокаПристав + " " + СтрПолучитьСтроку(Пристав, к);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			СтрПристав = СтрЗаменить(СтрокаПристав, " ", "_");
			СтрПристав = СтрЗаменить(СтрПристав, ".", "");
			
			Если КодРегиона = Неопределено Тогда
				Попытка
					КодРегиона = Строка(ОтделСудебныхПриставов.КодРегиона);
				Исключение
					КодРегиона = "0";
				КонецПопытки;	
			КонецЕсли;	
				
			СудебныйПриставИсполнитель = Бит_ФССП_Переопределяемый.ПоискПриставаВБазе(КодРегиона,СтрПристав,ОтделСудебныхПриставов.НаименованиеПолное);
			Если СудебныйПриставИсполнитель = Справочники[ИмяСправочникаПриставы].ПустаяСсылка() Тогда
				Попытка
					ПапкаРегион = Бит_ФССП_Переопределяемый.ПоискПапкиРегион(КодРегиона);
					ПриставОбъект = Справочники[ИмяСправочникаПриставы].СоздатьЭлемент();
					ПриставОбъект.Наименование = СтрокаПристав;
					ПриставОбъект.ФамилияИО = СтрПристав;
					ПриставОбъект.Родитель = Бит_ФССП_Переопределяемый.ПоискПапкиОСП(ОтделСудебныхПриставов.Наименование, ПапкаРегион);
					ПриставОбъект.Записать();
					СудебныйПриставИсполнитель = ПриставОбъект.Ссылка;	
				Исключение
					
				КонецПопытки;
			КонецЕсли;
			
			стр.Вставить("СудебныйПриставИсполнитель",СудебныйПриставИсполнитель);
			
			Если ЗначениеЗаполнено(СудебныйПриставИсполнитель) Тогда
				Попытка
					ПриставОб = СудебныйПриставИсполнитель.ПолучитьОбъект();
					Телефон1 = "";
					Телефон2 = "";
					Телефон3 = "";
					СтрокаОстаток = Прав(ИП.bailiff, стрДлина(ИП.bailiff) - стрДлина(СтрокаПристав));
					СтрокаОстаток = СтрЗаменить(СтрокаОстаток, " ", "");
					СтрокаОстаток = стрЗаменить(СтрокаОстаток, "<br>", " ");
					СтрокаОстаток = стрЗаменить(СтрокаОстаток, "<br/>", " ");
					СтрокаОстаток = СтрЗаменить(СтрокаОстаток, " ", " ");
					УдалитьПробелыСКраев(СтрокаОстаток);
					СтрокаОстаток = стрЗаменить(СтрокаОстаток, " ", Символы.ПС);
					к = мин(стрчислоСтрок(СтрокаОстаток),3);
					Для п = 1 по к Цикл
						тел = СтрПолучитьСтроку(СтрокаОстаток, п);
						ТипСлова = бит_ФССП_ИнтеграцияФССП.ПолучитьТипСлова(тел);
						Если ТипСлова = "Число" Тогда
							стрКоманда = "Телефон" + строка(п) + " = бит_ФССП_ИнтеграцияФССП.ПреобразоватьТелефон(тел)";
							Выполнить(стрКоманда);
						КонецЕсли;
					КонецЦикла;
					Если ЗначениеЗаполнено(Телефон1) Тогда
						ТелефонПристава1 = ПриставОб.Телефоны.Добавить();
						ТелефонПристава1.ВидТелефона = бит_ФССП_Переопределяемый.ПолучитьВидТелефонаРабочий();
						бит_ФССП_Переопределяемый.ОбработатьНомерТелефона(ТелефонПристава1,Телефон1);
					КонецЕсли;
					Если ЗначениеЗаполнено(Телефон2) Тогда
						ТелефонПристава2 = ПриставОб.Телефоны.Добавить();
						ТелефонПристава2.ВидТелефона = бит_ФССП_Переопределяемый.ПолучитьВидТелефонаРабочий();
						бит_ФССП_Переопределяемый.ОбработатьНомерТелефона(ТелефонПристава2,Телефон2);
					КонецЕсли;
					Если ЗначениеЗаполнено(Телефон3) Тогда
						ТелефонПристава3 = ПриставОб.Телефоны.Добавить();
						ТелефонПристава3.ВидТелефона = бит_ФССП_Переопределяемый.ПолучитьВидТелефонаРабочий();
						бит_ФССП_Переопределяемый.ОбработатьНомерТелефона(ТелефонПристава3,Телефон3);
					КонецЕсли;		
					бит_ФССП_Переопределяемый.СвернутьДублиТЧтелефоны(ПриставОб.Телефоны);
					ПриставОб.Записать();
				Исключение;
				КонецПопыткИ;
			КонецЕсли;
		КонецЕсли;
		МассивИП.Добавить(стр);
	КонецЦикла;
	Возврат МассивИП;
КонецФункции

Функция ПолучитьИндексИзСтроки(стр)
	Значение = стр;
	стрцифры = "0123456789";
	стриндекс = "";
	Для к = 1 по стрДлина(Значение) Цикл
		Буква = Сред(Значение, к, 1);
		Если Найти(стрЦифры, Буква) > 0 Тогда
			стрИндекс = стрИндекс + Буква;
			Если стрДлина(стрИндекс) = 6 Тогда
				Прервать;
			КонецЕсли;
		Иначе
			стрИндекс = "";
		КонецЕсли;
	КонецЦикла;
	
	
	Если СтрИндекс = "" Тогда
		Для к = 1 по стрДлина(Значение) Цикл
			Буква = Сред(Значение, к, 1);
			Если Найти(стрЦифры, Буква) > 0 Тогда
				стрИндекс = стрИндекс + Буква;
				Если стрДлина(стрИндекс) = 5 Тогда
					Прервать;
				КонецЕсли;
			Иначе
				стрИндекс = "";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтрИндекс;
КонецФункции

Функция ПолучитьТекущееРОСП(ИД)
	ИмяСправочникаССП = бит_ФССП_Переопределяемый.ПолучитьИмяСправочникаСлужбыСудебныхПриставов();
	Запрос = Новый Запрос( "ВЫБРАТЬ
	|	ФССП_СостояниеИПСрезПоследних.ОтделСудебныхПриставов КАК ОтделСудебныхПриставов
	|ИЗ
	|	РегистрСведений.ФССП_СостояниеИП.СрезПоследних(, ИП = &ИД) КАК ФССП_СостояниеИПСрезПоследних"
	);
	Запрос.УстановитьПараметр("ИД", ИД);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.ОтделСудебныхПриставов;
	Иначе
		Возврат Справочники[ИмяСправочникаССП].ПустаяСсылка();
	КонецЕсли;
КонецФункции   

Функция ПолучитьТипСлова(Слово) Экспорт
	
	
	//Попытка
	//      ДатаИП = Дата(Слово + " 00:00:00");
	//      Возврат "Дата";
	//Исключение
	//КонецПопытки;
	
	Если Врег(Слово) = "СЕРИЯ" Тогда
		Возврат "Символ";
	КонецЕсли;
	
	СтрокаЦифры = "0123456789";
	СтрокаБуквы = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЫЬЪЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ";
	
	
	ЕстьБуквы = Ложь;
	стр = Слово;
	Пока СтрДлина(стр) > 0 Цикл
		Буква = Лев(стр, 1);
		стр = Прав(стр, стрДлина(стр) - 1);
		Если СтрНайти(СтрокаБуквы, врег(Буква)) > 0 Тогда
			ЕстьБуквы = Истина;
			//Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьЦифры = Ложь;
	стр = Слово;
	Пока СтрДлина(стр) > 0 Цикл
		Буква = Лев(стр, 1);
		стр = Прав(стр, стрДлина(стр) - 1);
		Если СтрНайти(СтрокаЦифры, Буква) > 0 Тогда
			ЕстьЦифры = Истина;
			//Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьЦифры И Не ЕстьБуквы Тогда
		Попытка
			ДатаИП = Дата(Слово + " 00:00:00");
			Возврат "Дата";
		Исключение
			Возврат "Число";
		КонецПопытки;
	ИначеЕсли ЕстьЦифры и ЕстьБуквы Тогда
		Возврат "Номер";
	ИначеЕсли Не ЕстьЦифры и ЕстьБуквы Тогда
		Возврат "Слово";
	ИначеЕсли Не ЕстьЦифры и Не ЕстьБуквы Тогда
		Возврат "Символ";
	КонецЕсли;
КонецФункции

Процедура УдалитьПробелыСКраев(Предложение) Экспорт
	Пока Лев(Предложение, 1) = " " Цикл
		Предложение = Прав(Предложение, СтрДлина(Предложение) - 1);
	КонецЦикла;
	Пока Прав(Предложение, 1) = " " Цикл
		Предложение = Лев(Предложение, СтрДлина(Предложение) - 1)
	КонецЦикла;
КонецПроцедуры

Функция ПреобразоватьТелефон(СтрТелефон) Экспорт
	УдалитьСкобки=СтрЗаменить(СтрТелефон,"(","");
	УдалитьСкобки=СтрЗаменить(УдалитьСкобки,")","");
	УдалитьТире = СтрЗаменить(УдалитьСкобки,"-","");
	УдалитьРавно = СтрЗаменить(УдалитьСкобки,"=","");
	УдалитьПлюс = стрЗаменить(УдалитьТире,"+","");
	
	ДлинаСтроки= СтрДлина(УдалитьПлюс);
	ТелефонМассив = Новый Массив;
	строкаПроверки = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЫЬЪЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ";
	
	Для СчетчикЦифр = 1 по ДлинаСтроки Цикл
		ТелефонМассив.Добавить(Сред(УдалитьПлюс,СчетчикЦифр,1));
	КонецЦикла;
	
	ОчиститьТелефон = Новый Массив;
	
	Для каждого символ из ТелефонМассив Цикл
		Если СтрНайти(СтрокаПроверки,символ,,,) = 0 Тогда
			ОчиститьТелефон.Добавить(Символ);
		КонецЕсли;
	КонецЦикла;	
	
	Если ОчиститьТелефон.Количество() = 11 и ОчиститьТелефон[0] ="8" Тогда
		Для каждого Символ из ОчиститьТелефон Цикл
			СтрокаТелефонбезСимволов =
			Строка(СтрокаТелефонбезСимволов) + Символ;
		КонецЦикла;
		Возврат СтрокаТелефонбезСимволов;
	ИначеЕсли ОчиститьТелефон.Количество() = 11 и ОчиститьТелефон[0] ="7" Тогда
		ОчиститьТелефон[0] ="8";
		Для каждого Символ из ОчиститьТелефон Цикл
			СтрокаТелефонбезСимволов = Строка(СтрокаТелефонбезСимволов) + Символ;
		КонецЦикла;
		Возврат СтрокаТелефонбезСимволов;
	ИначеЕсли ОчиститьТелефон.Количество() = 10 Тогда
		СтрокаТелефонбезСимволов = "8";
		Для каждого Символ из ОчиститьТелефон Цикл
			СтрокаТелефонбезСимволов = Строка(СтрокаТелефонбезСимволов) + Символ;
		КонецЦикла;
		Возврат СтрокаТелефонбезСимволов;
	ИначеЕсли ОчиститьТелефон.Количество() < 10 Тогда
		Для каждого Символ из ОчиститьТелефон Цикл
			СтрокаТелефонбезСимволов =Строка(СтрокаТелефонбезСимволов) + Символ;
		КонецЦикла;
		Возврат СтрокаТелефонбезСимволов;
	КонецЕсли;	
КонецФункции

Функция ПолучитьПричинуОкончанияИП(СтрокаОкончаниеИП)
	Если СтрокаОкончаниеИП = "" Тогда
		Причина = "";
	Иначе
		ПозицияДата = СтрНайти(СтрокаОкончаниеИП,",",НаправлениеПоиска.СНачала,,1);
		СтрДата = Лев(СтрокаОкончаниеИП,ПозицияДата);
		СтрПричина = СтрЗаменить(СтрокаОкончаниеИП,СтрДата,"ст.");
		Запятая1 = СтрНайти(СтрПричина,",",,1);
		СтрСтатья = Лев(СтрПричина,Запятая1);
		СтрЧасть = СтрСтатья + " ч.";
		СтрПричина = СтрЗаменить(СтрПричина,СтрСтатья,СтрЧасть);
		//Запятая2 = СтрНайти(СтрПричина,",",,2);
		СтрСтатьяЧасть = Лев(СтрПричина,13);
		СтрПункт = СтрСтатьяЧасть + " п.";
		СтрПричина = СтрЗаменить(СтрПричина,СтрСтатьяЧасть,СтрПункт);
		Причина = СтрПричина;
	КонецЕсли;
	Возврат Причина;
КонецФункции

Функция ПолучитьДатуОкончанияИП(СтрокаОкончаниеИП)
	Если СтрокаОкончаниеИП = "" Тогда
		Возврат Дата(1,1,1);
	Иначе
		//++КазанцевЯА
		//ПозицияДата = СтрНайти(СтрокаОкончаниеИП,",",НаправлениеПоиска.СНачала,,1);
		//СтрДата = Лев(СтрокаОкончаниеИП,ПозицияДата-1);
		//СтрДата = СтрЗаменить(СтрДата,"-","");
		//СтрДата = Сред(СтрДата,7,8)+"."+Сред(СтрДата,5,2)+"."+Сред(СтрДата,1,4);
		//СтрДата = СтрДата + " 00:00:00";
		СтрДата = Лев(СтрокаОкончаниеИП,10) + " 0:00:00";
		//--КазанцевЯА
		Попытка
			ДатаОкончанияИП = Дата(СтрДата);
			Если Год(ДатаОкончанияИП) > 3999 Тогда
				Возврат Дата(1,1,1);
			Иначе
				Возврат(ДатаОкончанияИП);
			КонецЕсли;
		Исключение
			Возврат Дата(1,1,1);
		КонецПопытки;
	КонецЕсли;
КонецФункции

Функция ПолучитьСправочникПредмет(Предмет) Экспорт
	Если Предмет = "" Тогда
		Возврат Справочники.ФССП_ПредметыИП.ПустаяСсылка();
	Иначе
		//ПредметСсылка = Справочники.ФССП_ПредметыИП.НайтиПоНаименованию(Предмет, Истина);
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ФССП_ПредметыИП.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	Справочник.ФССП_ПредметыИП КАК ФССП_ПредметыИП
		                      |ГДЕ
		                      |	ФССП_ПредметыИП.ПометкаУдаления = ЛОЖЬ
		                      |	И ФССП_ПредметыИП.НаименованиеПолное = &НаименованиеПолное");
		Запрос.УстановитьПараметр("НаименованиеПолное",Строка(Предмет));
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			ПредметСсылка = Результат.Ссылка;
		КонецЦикла;	
		
		Если ПредметСсылка = Неопределено Тогда
			ПредметОбъект = Справочники.ФССП_ПредметыИП.СоздатьЭлемент();
			ПредметОбъект.Наименование = Предмет;
			ПредметОбъект.НаименованиеПолное = Предмет;
			ПредметОбъект.Записать();
			Возврат ПредметОбъект.Ссылка;
		Иначе
			Возврат ПредметСсылка;
		КонецЕсли;
	КонецЕсли;
КонецФункции

Процедура ПолучитьСуммуИПредмет(ПредметЗначение, СуммаЗначение, СтрокаЗначение) Экспорт
	Предмет = СтрокаЗначение;
	мСтроки = стрРазделить(СтрокаЗначение,":",Ложь);
	
	Если мСтроки.Количество() > 1 Тогда	
		//++КазанцевЯА
		//ПредметЗначение = СокрЛП(мСтроки[0]);
		Предмет = мСтроки[0];
		Предмет = СтрЗаменить(Предмет,"руб.","");
		Предмет = СтрЗаменить(Предмет,"руб","");
		ПредметЗначение = СокрЛП(Предмет);	
		//СуммаЗначение = Число(СокрЛП(мСтроки[1]));
		СтрСумма = мСтроки[1];
		Сумма = ПолучитьСуммуИзСтрокиПредмета(СтрСумма);
		Если Сумма <> Неопределено Тогда 
			СуммаЗначение = Сумма;
		КонецЕсли;
		//--КазанцевЯА
	Иначе
		ПредметЗначение = Предмет;
		СуммаЗначение = 0;
	КонецЕсли;
	
	//ПозицияДвоеточие = СтрНайти(Предмет, ":") -1;
	//Если ПозицияДвоеточие = 0 Тогда
	//	ПредметЗначение = Предмет;
	//	СуммаЗначение = 0;
	//Иначе
	//	Предмет1 = Лев(Предмет, ПозицияДвоеточие);
	//	Предмет = Прав(Предмет, стрДлина(Предмет) - ПозицияДвоеточие -1);
	//	ПозицияРуб = СтрНайти(Предмет, "руб");
	//	Если ПозицияРуб = 0 Тогда
	//		ПредметЗначение = Предмет;
	//		СуммаЗначение = 0;
	//	Иначе
	//		Сумма1Стр = Лев(Предмет, ПозицияРуб-1);
	//		Сумма1Стр = Сумма1Стр;
	//		Предмет = Прав(Предмет, СтрДлина(Предмет) - ПозицияРуб -2);
	//		СуммаЗначение = Число(Сумма1Стр);
	//		ПредметЗначение = Предмет1;
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

Функция ПолучитьПервоеСлово(Предложение) Экспорт
	Номер = Найти(Предложение, " ");
	Если Номер > 0 Тогда
		Стр = Лев(Предложение, Номер-1);
		Возврат Стр;
	Иначе
		Возврат Предложение;
	КонецЕсли;
КонецФункции

Функция ОтрезатьПервоеСлово(Предложение) Экспорт
	Номер = Найти(Предложение, " ");
	Если Номер > 0 Тогда
		Стр = Лев(Предложение, Номер-1);
		Предложение = Прав(Предложение, СтрДлина(Предложение) - Номер);
		Возврат Стр;
	Иначе
		Слово = Предложение;
		Предложение = "";
		Возврат Слово;
	КонецЕсли;
КонецФункции

Функция ПолучитьСправочникВидИД(ВидИД)
	Если ВидИД = "" Тогда
		Возврат Справочники.ФССП_ТипыИсполнительныхДокументов.ПустаяСсылка();
	Иначе
		ВидИДСсылка = Справочники.ФССП_ТипыИсполнительныхДокументов.НайтиПоНаименованию(ВидИД, Истина);
		Если ВидИДССылка = Справочники.ФССП_ТипыИсполнительныхДокументов.ПустаяСсылка() Тогда
			ВидИДОбъект = Справочники.ФССП_ТипыИсполнительныхДокументов.СоздатьЭлемент();
			ВидИДОбъект.Наименование = ВидИД;
			ВидИДОбъект.Записать();
			Возврат ВидИДОбъект.Ссылка;
		Иначе
			Возврат ВидИДСсылка;
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ПолучитьНомерСД(СтрокаИП)
	Предложение = СтрокаИП;
	НомерИП = ОтрезатьПервоеСлово(Предложение);
	НомерСД = "";
	для к = 1 по 999 Цикл
		стр = ОтрезатьПервоеСлово(Предложение);
		Если ПолучитьТипСлова(стр) = "Номер" Тогда
			НомерСД = стр;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат НомерСД;
КонецФункции

Функция ПроверитьПредыдущиеЗначенияИП(ИП, стр)
	Запрос = Новый Запрос("ВЫБРАТЬ
	| СостоянияИПСрезПоследних.Период КАК Период,
	| СостоянияИПСрезПоследних.Регистратор КАК Регистратор,
	| СостоянияИПСрезПоследних.НомерСтроки КАК НомерСтроки,
	| СостоянияИПСрезПоследних.Активность КАК Активность,
	| СостоянияИПСрезПоследних.ID КАК ID,
	| СостоянияИПСрезПоследних.Должник КАК Должник,
	| СостоянияИПСрезПоследних.НомерИП КАК НомерИП,
	| СостоянияИПСрезПоследних.ДатаВозбужденияИП КАК ДатаВозбужденияИП,
	| СостоянияИПСрезПоследних.НомерСД КАК НомерСД,
	| СостоянияИПСрезПоследних.ВидИД КАК ВидИД,
	| СостоянияИПСрезПоследних.ДатаИД КАК ДатаИД,
	| СостоянияИПСрезПоследних.НомерИД КАК НомерИД,
	| СостоянияИПСрезПоследних.ОрганВыдавшийИД КАК ОрганВыдавшийИД,
	| СостоянияИПСрезПоследних.ДатаОкончанияИП КАК ДатаОкончанияИП,
	| СостоянияИПСрезПоследних.ПричинаОкончанияИП КАК ПричинаОкончанияИП,
	| СостоянияИПСрезПоследних.ОтделСудебныхПриставов КАК ОтделСудебныхПриставов,
	|СостоянияИПСрезПоследних.ОтделСудебныхПриставовСтрока КАК ОтделСудебныхПриставовСтрока,
	|СостоянияИПСрезПоследних.ОтделСудебныхПриставовИндекс КАК ОтделСудебныхПриставовИндекс,
	|СостоянияИПСрезПоследних.СудебныйПриставИсполнитель КАК СудебныйПриставИсполнитель,
	|СостоянияИПСрезПоследних.ТелефонПристава1 КАК	ТелефонПристава1,
	| СостоянияИПСрезПоследних.ТелефонПристава2 КАК ТелефонПристава2,
	| СостоянияИПСрезПоследних.ТелефонПристава3 КАК ТелефонПристава3,
	| СостоянияИПСрезПоследних.ПривязкаКДО КАК ПривязкаКДО,                                         
	| СостоянияИПСрезПоследних.ДолговоеОбязательство КАК ДолговоеОбязательство,
	|   СостоянияИПСрезПоследних.task КАК task,
	|   СостоянияИПСрезПоследних.Предмет1 КАК Предмет1,
	|   СостоянияИПСрезПоследних.Предмет2 КАК Предмет2,
	|   СостоянияИПСрезПоследних.Предмет3 КАК Предмет3,
	|   СостоянияИПСрезПоследних.Сумма1 КАК Сумма1,
	|   СостоянияИПСрезПоследних.Сумма2 КАК Сумма2,
	|   СостоянияИПСрезПоследних.Сумма3 КАК Сумма3,
	|   СостоянияИПСрезПоследних.Завершено КАК Завершено,
	| СостоянияИПСрезПоследних.Статус КАК Статус,
	| СостоянияИПСрезПоследних.name КАК name,
	| СостоянияИПСрезПоследних.exe_production КАК exe_production,
	| СостоянияИПСрезПоследних.details КАК details,
	| СостоянияИПСрезПоследних.subject КАК subject,
	| СостоянияИПСрезПоследних.department КАК department,
	| СостоянияИПСрезПоследних.bailiff КАК bailiff,
	| СостоянияИПСрезПоследних.ip_end КАК ip_end
	|ПОМЕСТИТЬ ПоследнееСостояниеИП
	|ИЗ
	| РегистрСведений.СостоянияИП.СрезПоследних(, ID = &ИД) КАК СостоянияИПСрезПоследних
	|;
	|	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	| ПоследнееСостояниеИП.Период КАК Период,
	| ПоследнееСостояниеИП.Регистратор КАК Регистратор,
	| ПоследнееСостояниеИП.НомерСтроки КАК НомерСтроки,
	| ПоследнееСостояниеИП.Активность КАК Активность,
	| ПоследнееСостояниеИП.ID КАК ID,
	| ПоследнееСостояниеИП.Должник КАК Должник,
	| ПоследнееСостояниеИП.НомерИП КАК НомерИП,
	| ПоследнееСостояниеИП.ДатаВозбужденияИП КАК ДатаВозбужденияИП,
	| ПоследнееСостояниеИП.НомерСД КАК НомерСД,
	| ПоследнееСостояниеИП.ВидИД КАК ВидИД,
	| ПоследнееСостояниеИП.ДатаИД КАК ДатаИД,
	| ПоследнееСостояниеИП.НомерИД КАК НомерИД,
	| ПоследнееСостояниеИП.ОрганВыдавшийИД КАК ОрганВыдавшийИД,
	| ПоследнееСостояниеИП.ДатаОкончанияИП КАК ДатаОкончанияИП,
	| ПоследнееСостояниеИП.ПричинаОкончанияИП КАК ПричинаОкончанияИП,
	| ПоследнееСостояниеИП.ОтделСудебныхПриставов КАК ОтделСудебныхПриставов,
	|ПоследнееСостояниеИП.ОтделСудебныхПриставовСтрока КАК ОтделСудебныхПриставовСтрока,
	|ПоследнееСостояниеИП.ОтделСудебныхПриставовИндекс КАК ОтделСудебныхПриставовИндекс,
	| ПоследнееСостояниеИП.СудебныйПриставИсполнитель КАК СудебныйПриставИсполнитель,
	| ПоследнееСостояниеИП.ТелефонПристава1 КАК ТелефонПристава1,
	| ПоследнееСостояниеИП.ТелефонПристава2 КАК ТелефонПристава2,
	| ПоследнееСостояниеИП.ТелефонПристава3 КАК ТелефонПристава3,
	| ПоследнееСостояниеИП.ПривязкаКДО КАК ПривязкаКДО,
	| ПоследнееСостояниеИП.ДолговоеОбязательство КАК ДолговоеОбязательство,
	| ПоследнееСостояниеИП.task КАК task,
	| ПоследнееСостояниеИП.Предмет1 КАК Предмет1,
	| ПоследнееСостояниеИП.Предмет2 КАК Предмет2,
	| ПоследнееСостояниеИП.Предмет3 КАК Предмет3,
	| ПоследнееСостояниеИП.Сумма1 КАК Сумма1,
	| ПоследнееСостояниеИП.Сумма2 КАК Сумма2,
	| ПоследнееСостояниеИП.Сумма3 КАК Сумма3,
	| ПоследнееСостояниеИП.Завершено КАК Завершено,
	| ПоследнееСостояниеИП.Статус КАК Статус,
	| ПоследнееСостояниеИП.name КАК name,
	| ПоследнееСостояниеИП.exe_production КАК exe_production,
	| ПоследнееСостояниеИП.details КАК details,
	| ПоследнееСостояниеИП.subject КАК subject,
	| ПоследнееСостояниеИП.department КАК department,
	| ПоследнееСостояниеИП.bailiff КАК bailiff,
	| ПоследнееСостояниеИП.ip_end КАК ip_end
	|ИЗ
	| ПоследнееСостояниеИП КАК ПоследнееСостояниеИП
	|ГДЕ
	| ПоследнееСостояниеИП.name ПОДОБНО &name
	| И ПоследнееСостояниеИП.exe_production ПОДОБНО &exe_production
	| И ПоследнееСостояниеИП.details ПОДОБНО &details
	| И ПоследнееСостояниеИП.subject ПОДОБНО &subject
	| И ПоследнееСостояниеИП.department ПОДОБНО &department
	| И ПоследнееСостояниеИП.bailiff ПОДОБНО &bailiff
	| И ПоследнееСостояниеИП.ip_end ПОДОБНО &ip_end");
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//                      |        СостоянияИПСрезПоследних.Период КАК Период,
	//                      |       СостоянияИПСрезПоследних.Регистратор КАК Регистратор,
	//                      |       СостоянияИПСрезПоследних.НомерСтроки КАК НомерСтроки,
	//                      |       СостоянияИПСрезПоследних.Активность КАК Активность,
	//                      |       СостоянияИПСрезПоследних.ID КАК ID,
	//                      |       СостоянияИПСрезПоследних.Должник КАК Должник,
	//                      |       СостоянияИПСрезПоследних.НомерИП КАК НомерИП,
	//                      |       СостоянияИПСрезПоследних.ДатаВозбужденияИП КАК ДатаВозбужденияИП,
	//                      |       СостоянияИПСрезПоследних.НомерСД КАК НомерСД,
	//                      |       СостоянияИПСрезПоследних.ВидИД КАК ВидИД,
	//                      |       СостоянияИПСрезПоследних.ДатаИД КАК ДатаИД,
	//                      |       СостоянияИПСрезПоследних.НомерИД КАК НомерИД,
	//                      |       СостоянияИПСрезПоследних.ОрганВыдавшийИД КАК ОрганВыдавшийИД,
	//                      |       СостоянияИПСрезПоследних.ДатаОкончанияИП КАК ДатаОкончанияИП,
	//                      | СостоянияИПСрезПоследних.ПричинаОкончанияИП КАК ПричинаОкончанияИП,
	//                      | СостоянияИПСрезПоследних.ОтделСудебныхПриставов КАК ОтделСудебныхПриставов,
	//                      | СостоянияИПСрезПоследних.ОтделСудебныхПриставовСтрока КАК ОтделСудебныхПриставовСтрока,
	//                      | СостоянияИПСрезПоследних.ОтделСудебныхПриставовИндекс КАК ОтделСудебныхПриставовИндекс,
	//                      | СостоянияИПСрезПоследних.СудебныйПриставИсполнитель КАК СудебныйПриставИсполнитель,
	//                      | СостоянияИПСрезПоследних.ТелефонПристава1 КАК ТелефонПристава1,
	//                      | СостоянияИПСрезПоследних.ТелефонПристава2 КАК ТелефонПристава2,
	//                      |СостоянияИПСрезПоследних.ТелефонПристава3 КАК ТелефонПристава3,
	//                      |       СостоянияИПСрезПоследних.ПривязкаКДО КАК ПривязкаКДО,
	//                      | СостоянияИПСрезПоследних.ДолговоеОбязательство КАК ДолговоеОбязательство,
	//                      |        СостоянияИПСрезПоследних.task КАК task,
	//                      |        СостоянияИПСрезПоследних.Предмет1 КАК Предмет1,
	//                      |        СостоянияИПСрезПоследних.Предмет2 КАК Предмет2,
	//                      |        СостоянияИПСрезПоследних.Предмет3 КАК Предмет3,
	//                      |        СостоянияИПСрезПоследних.Сумма1 КАК Сумма1,
	//                      |        СостоянияИПСрезПоследних.Сумма2 КАК Сумма2,
	//                      |        СостоянияИПСрезПоследних.Сумма3 КАК Сумма3,
	//                      |        СостоянияИПСрезПоследних.Завершено КАК Завершено,
	//                      |        СостоянияИПСрезПоследних.Статус КАК Статус,
	//                      |        СостоянияИПСрезПоследних.name КАК name,
	//                      |        СостоянияИПСрезПоследних.exe_production КАК exe_production,
	//                      |        СостоянияИПСрезПоследних.details КАК details,
	//                      |        СостоянияИПСрезПоследних.subject КАК subject,
	//                      |        СостоянияИПСрезПоследних.department КАК department,
	//                      |        СостоянияИПСрезПоследних.bailiff КАК bailiff,
	//                      |        СостоянияИПСрезПоследних.ip_end КАК ip_end
	//                      |ИЗ
	//                      |РегистрСведений.СостоянияИП.СрезПоследних(, ID = &ИД) КАК СостоянияИПСрезПоследних");
	Запрос.УстановитьПараметр("ИД", стр.ID);
	Запрос.УстановитьПараметр("name", стр.name);
	Запрос.УстановитьПараметр("exe_production", стр.exe_production);
	Запрос.УстановитьПараметр("details", стр.details);
	Запрос.УстановитьПараметр("subject", стр.subject);
	Запрос.УстановитьПараметр("department", стр.department);
	Запрос.УстановитьПараметр("bailiff", стр.bailiff);
	Запрос.УстановитьПараметр("ip_end", стр.ip_end);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		//Если Результат.name = стр.name
		//      И Результат.exe_production = стр.exe_production
		//      И Результат.details = стр.details
		//      И Результат.subject = стр.subject
		//      И Результат.department = стр.department
		//       И Результат.bailiff = стр.bailiff
		//       И Результат.ip_end = стр.ip_end
		
		
		
		
		стр.Вставить("НомерИП", Результат.НомерИП);
		стр.Вставить("ДатаВозбужденияИП", Результат.ДатаВозбужденияИП);
		стр.Вставить("НомерСД", Результат.НомерСД);
		стр.Вставить("ВидИД", Результат.ВидИД);
		стр.Вставить("ДатаИД", Результат.ДатаИД);
		стр.Вставить("НомерИД", Результат.НомерИД);
		стр.Вставить("ОрганВыдавшийИД", Результат.ОрганВыдавшийИД);
		стр.Вставить("ДатаОкончанияИП", Результат.ДатаОкончанияИП);
		стр.Вставить("ПричинаОкончанияИП",
		Результат.ПричинаОкончанияИП);
		стр.Вставить("ОтделСудебныхПриставов",
		Результат.ОтделСудебныхПриставов);
		стр.Вставить("СудебныйПриставИсполнитель",
		Результат.СудебныйПриставИсполнитель);
		стр.Вставить("ТелефонПристава1", Результат.ТелефонПристава1);
		стр.Вставить("ТелефонПристава2", Результат.ТелефонПристава2);
		стр.Вставить("ТелефонПристава3", Результат.ТелефонПристава3);
		стр.Вставить("ПривязкаКДО", Результат.ПривязкаКДО);
		стр.Вставить("ДолговоеОбязательство",
		Результат.ДолговоеОбязательство);
		стр.Вставить("Предмет1", Результат.Предмет1);
		стр.Вставить("Предмет2", Результат.Предмет2);
		стр.Вставить("Предмет3", Результат.Предмет3);
		стр.Вставить("Сумма1", Результат.Сумма1);
		стр.Вставить("Сумма2", Результат.Сумма2);
		стр.Вставить("Сумма3", Результат.Сумма3);
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ПоискДепартаментаПоЧисловомуЗначению(ЧислоДепартамент)
	СтрокаДепартемент = Строка(ЧислоДепартамент);
	СтрокаДепартамент = СтрЗаменить(СтрокаДепартемент," ","");
	СтрокаДепартамент = СтрЗаменить(СтрокаДепартамент,Символы.НПП,"");
	СтрокаРегион = Лев(СтрокаДепартамент,2);
	СтрокаКодТерриториальногоАгенства = прав(СтрокаДепартамент,3);
	Если Лев(СтрокаКодТерриториальногоАгенства,1) = Строка("0") тогда
		СтрокаКодТерриториальногоАгенства = Прав(СтрокаКодТерриториальногоАгенства,2);
	ИначеЕсли Лев(СтрокаКодТерриториальногоАгенства,2) = Строка("00") Тогда
		 СтрокаКодТерриториальногоАгенства = Прав(СтрокаКодТерриториальногоАгенства,1);
	КонецЕсли;	 	 
	ЧислоРегион = Число(СтрокаРегион);
	Департамент = бит_ФССП_Переопределяемый.ПолучитьРОСПКодТерриториальногоАгенства(СтрокаКодТерриториальногоАгенства,ЧислоРегион);
	Возврат Департамент; 
КонецФункции

Процедура ПолныйЦикл() Экспорт
	Если Не бит_сл_тс.ПолучитьЛицензию(Истина) Тогда 
		//Возврат Неопределено;
	Иначе
		Версия = Константы.ВерсияПрограммы.Получить();
		Если Версия = Перечисления.ВерсииПрограммы.Стандарт Тогда
			ВызватьИсключение "Функционал не доступен для данной версии программы!";
			//Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЕстьНезавершенныеЗадания() Тогда
		НомерОчереди = Константы.НомерОчередиФССП.Получить();
		Константы.НомерОчередиФССП.Установить(НомерОчереди + 1);
		СформироватьДанныеДляВыгрузки();
	КонецЕсли;
	
	Пока ЕстьНезавершенныеЗадания() Цикл
		Попытка
			ОсуществитьВыгрузку();
			//ЗагрузитьДанные();                     
			ОбработатьДанные();
			УдалитьОчередь();
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			//Сообщить(ТекстОшибки);
			СообщитьОбОшибке(ТекстОшибки);
			Прервать;
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьНомерОчереди() Экспорт
	Возврат Константы.НомерОчередиФССП.Получить();
КонецФункции

Функция ПолучитьНомерТекущейОчереди() Экспорт
	Возврат Константы.НомерОчередиФССП.Получить();
КонецФункции

Функция ЕстьНезавершенныеЗадания()
	НомерОчереди = Константы.НомерОчередиФССП.Получить();
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	| ЗапросыПоИП.Ссылка КАК Ссылка
	|ИЗ
	| Документ.ФССП_ЗапросыПоИП КАК ЗапросыПоИП
	|ГДЕ
	| ЗапросыПоИП.Статус <> &Статус
	| И ЗапросыПоИП.НомерОчереди = &НомерОчереди
	| И ЗапросыПоИП.ПометкаУдаления = ЛОЖЬ");
	Запрос.УстановитьПараметр("Статус", Перечисления.ФССП_СтатусыЗаданийИП.ДокументыСформированы);
	Запрос.УстановитьПараметр("НомерОчереди", НомерОчереди);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Процедура СформироватьДанныеДляВыгрузки() Экспорт
	token = ПолучитьТокен();
	token = СтрЗаменить(token," ","");
	
	НомерОчереди = ПолучитьНомерОчереди();
	
	Результат = Бит_фССП_Переопределяемый.СформироватьСписокДолжников();
	
	
	
	//Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	//| ОбъектыВРаботеОстатки.Объект.Должник КАК ОбъектДолжник
	//|ИЗ
	//| РегистрНакопления.ОбъектыВРаботе.Остатки КАК ОбъектыВРаботеОстатки
	//|ГДЕ
	//| ЕСТЬNULL(ОбъектыВРаботеОстатки.Объект.Должник,0) <> 0
	//| И ОбъектыВРаботеОстатки.Объект.Должник.ЮрФизЛицо= &ЮрФизЛицо
	//| ИОбъектыВРаботеОстатки.Объект.Должник.ПометкаУдаления = ЛОЖЬ
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|ОбъектыВРаботеОстатки.Объект.Должник.Наименование");
	//Запрос.УстановитьПараметр("ЮрФизЛицо", Справочники.ЮрФизЛицо.ФизЛицо);
	//Результат = Запрос.Выполнить().Выбрать();
	к = 0;
	Пока Результат.Следующий() Цикл
		Если к = 0 Тогда
			ДокументОбъект = Документы.ФССП_ЗапросыПоИП.СоздатьДокумент();
			ДокументОбъект.Автор = Бит_ФССП_Переопределяемый.ПолучитьТекущегоПользователя();
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			ДокументОбъект.НомерОчереди = НомерОчереди;
			ДокументОбъект.Статус = Перечисления.ФССП_СтатусыЗаданийИП.ГотовКВыгрузке;
			
			тЗаписьJSON = Новый ЗаписьJSON;
			тПараметрыJSON = Новый
			ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);
			тЗаписьJSON.УстановитьСтроку(тПараметрыJSON);
			
			тДанные = Новый Структура;
			тДанные.Вставить("token", token);
			тЗапросы = Новый Массив;
		КонецЕсли;
		
		ФИО = Результат.ОбъектДолжник.Наименование;
		ФИО = СтрЗаменить(ФИО, " ", " ");
		Фамилия = Лев(ФИО, СтрНайти(ФИО, " ") - 1);
		Имя = Сред(ФИО, СтрНайти(ФИО, " ") + 1, СтрНайти(ФИО, " ", ,,2) - СтрНайти(ФИО, " ") );
		Отчество = Сред(ФИО, СтрНайти(ФИО, " ", ,,2)+1, стрДлина(ФИО) - СтрНайти(ФИО, " ", ,,2) + 1);
		
		Фамилия = стрЗаменить(Фамилия, "ё", "е");
		Имя = стрЗаменить(Имя, "ё", "е");
		Отчество = стрЗаменить(Отчество, "ё", "е");
		
		Регион = Бит_ФССП_Переопределяемый.ПолучитьКодРегионаПоДолжнику(Результат.ОбъектДолжник);
		ДатаРождения = бит_ФССП_переопределяемый.ПолучитьДатуРожденияДолжника(Результат.ОбъектДолжник);
		стрДата = Лев(Строка(ДатаРождения), 10);
		//стрДата = "date(" + Лев(Строка(ДатаРождения), 10) + ")";
		
		тЗапрос = Новый Структура;
		тЗапрос.Вставить("type", 1);
		тПараметры = Новый Структура;
		тПараметры.Вставить("firstname", Имя);
		тПараметры.Вставить("lastname", Фамилия);
		тПараметры.Вставить("secondname", Отчество);
		тПараметры.Вставить("region", Регион);
		тПараметры.Вставить("birthdate", стрДата);        
		тЗапрос.Вставить("params", тПараметры);
		тЗапросы.Добавить(тЗапрос);
		
		//ДокументЗадание = Документы.ЗаданияПоИП.СоздатьДокумент();
		//ДокументЗадание.Автор =	Константы.ПолучательТехническихСообщений.Получить();
		//ДокументЗадание.Организация =Константы.ПолучательТехническихСообщений.Получить().Организация;
		//ДокументЗадание.Дата = ТекущаяДатаСеанса();
		//ДокументЗадание.Должник = Результат.ОбъектДолжник;
		//ДокументЗадание.birthdate = стрДата;
		//ДокументЗадание.region = Регион;
		//ДокументЗадание.firstname = Имя;
		//ДокументЗадание.lastname = Фамилия;
		//ДокументЗадание.secondname = Отчество;
		//ДокументЗадание.НомерОчереди = НомерОчереди;
		//ДокументЗадание.Статус =Перечисления.СтатусыЗаданийИП.ГотовКВыгрузке;
		//ДокументЗадание.Записать(РежимЗаписиДокумента.Проведение);
		
		стрЗадание = ДокументОбъект.Задания.Добавить();
		стрЗадание.Должник = Результат.ОбъектДолжник;
		стрЗадание.birthdate = стрДата;
		стрЗадание.region = Регион;
		стрЗадание.firstname = Имя;
		стрЗадание.lastname = Фамилия;
		стрЗадание.secondname = Отчество;
		стрЗадание.Статус = Перечисления.ФССП_СтатусыЗаданийИП.ГотовКВыгрузке;
		
		
		//стрЗадание.Задание = ДокументЗадание.Ссылка;
		
		Если к = РазмерГрупповогоЗапроса() - 1 Тогда
			тДанные.Вставить("request", тЗапросы);
			ЗаписатьJSON(тЗаписьJSON, тДанные);
			strJSON = тЗаписьJSON.Закрыть();
			ДокументОбъект.strJSON = strJSON;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
			к = 0;
		Иначе
			к = к + 1;
		КонецЕсли;
	КонецЦикла;
	Если к <> 0 Тогда
		тДанные.Вставить("request", тЗапросы);
		ЗаписатьJSON(тЗаписьJSON, тДанные);
		strJSON = тЗаписьJSON.Закрыть();
		
		ДокументОбъект.strJSON = strJSON;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	КонецЕсли;
КонецПроцедуры

Функция РазмерГрупповогоЗапроса()
	Возврат 49;
КонецФункции

Процедура ОсуществитьВыгрузку() Экспорт
	НомерОчереди = ПолучитьНомерОчереди();
	Запрос = Новый Запрос("ВЫБРАТЬ Первые 10
	| ЗапросыПоИП.Ссылка КАК Ссылка
	|ИЗ
	| Документ.ФССП_ЗапросыПоИП КАК ЗапросыПоИП
	|ГДЕ
	| ЗапросыПоИП.Статус = &Статус
	| И ЗапросыПоИП.НомерОчереди = &НомерОчереди
	| И ЗапросыПоИП.ПометкаУдаления = ЛОЖЬ");
	Запрос.УстановитьПараметр("НомерОчереди", НомерОчереди);
	Запрос.УстановитьПараметр("Статус",Перечисления.ФССП_СтатусыЗаданийИП.ГотовКВыгрузке);

	ЧислоОбработанныхПакетно = 0;
	ЧислоОбработанныхЕдинично = 0;
	
	РезультатПустой = Запрос.Выполнить().Пустой();
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Не РезультатПустой Тогда
		Пока Результат.Следующий() Цикл
			Пакет = Результат.Ссылка;
			Если Не ОбработатьПакетГрупповымЗапросом(Пакет) Тогда
				Если Не ОбработатьПакетЕдиничнымиЗапросами(Пакет) Тогда
					ТекстОшибки = "Ошибка выгрузки данных. Пакет№ " + Пакет.Номер;
					//Сообщить("Ошибка выгрузки данных. Пакет№ " + Пакет.Номер);
					СообщитьОбОшибке(ТекстОшибки);
					Продолжить;
				Иначе
					ЗагрузитьДанные();
					
					//ВызватьИсключение("Ошибка выгрузки данных. Пакет№ " + Пакет.Номер);
				КонецЕсли;
			иначе
				ЗагрузитьДанные();
			КонецЕсли;
		КонецЦикла;
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ Первые 1
		| ЗапросыПоИП.Ссылка КАК Ссылка
		|ИЗ
		| Документ.ФССП_ЗапросыПоИП КАК ЗапросыПоИП
		|ГДЕ
		| ЗапросыПоИП.Статус = &Статус
		| И ЗапросыПоИП.НомерОчереди = &НомерОчереди
		| И ЗапросыПоИП.ПометкаУдаления = ЛОЖЬ");
		Запрос.УстановитьПараметр("НомерОчереди", НомерОчереди);
		Запрос.УстановитьПараметр("Статус",Перечисления.ФССП_СтатусыЗаданийИП.Выгружен);
		
		РезультатВыгруженПустой = Запрос.Выполнить().Пустой();
		
		Если Не РезультатВыгруженПустой Тогда
			ЗагрузитьДанные();
		Иначе
			Возврат;
		КонецЕсли;	
		
	КонецЕсли;	
	
	
КонецПроцедуры

Функция ОбработатьПакетГрупповымЗапросом(Пакет)
	token = ПолучитьТокен();
	token = СтрЗаменить(token," ","");
	ПакетОбъект = Пакет.ПолучитьОбъект();
	strJSON = ПакетОбъект.strJSON;
	
	
	//ПакетОбъект = Документы.ЗапросыПоИП.СоздатьДокумент();
	
	//Сервер = "api-ip.fssprus.ru";
	Сервер = ПолучитьЗначениеСервера();
	Ресурс = "/api/v1.0/search/group";
	
	КоличествоПопыток = 0;
	
	Пока КоличествоПопыток < 12 Цикл
		Попытка
			HTTPЗапрос = Новый HTTPЗапрос;
			HTTPЗапрос.УстановитьТелоИзСтроки(strJSON);
			
			HTTPЗапрос.АдресРесурса = Ресурс;
			ssl = Новый ЗащищенноеСоединениеOpenSSL;
			
			HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);
			
			ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();
			
			HTTPЗапрос.Заголовки.Вставить("accept", "application/json");
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
			ОтветHTTP = HTTP.ОтправитьДляОбработки(HTTPЗапрос,ИмяВыходногоФайла);
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.ОткрытьФайл(имяВыходногоФайла);
			
			СтруктураJSON = ПрочитатьJSON(ЧтениеJSON);
			Если СтруктураJSON.status = "error" тогда
				
				КоличествоПопыток = КоличествоПопыток + 1;
				СделатьПаузу(5);
				//Если СтруктураJSON.exception = "Too Many Attempts." ИЛИ КоличествоПопыток = 10 Тогда
				Если КоличествоПопыток = 12 Тогда
					//Сообщить("Ошибка при выполнении запроса!");
					//ПакетОбъект.Статус = Перечисления.ФССП_СтатусыЗаданийИП.Ошибка;
					ПакетОбъект.Статус = Перечисления.ФССП_СтатусыЗаданийИП.Выгружен;
					Успешно = Ложь;
					ПакетОбъект.ТекстОшибки = СтруктураJSON.exception;
					ПакетОбъект.КодОшибки = СтруктураJSON.code;
					КоличествоПопыток = 12;
				КонецЕсли;
			ИначеЕсли СтруктураJSON.status = "success" тогда
				ПакетОбъект.task = СтруктураJSON.response.task;
				ПакетОбъект.ВидЗадания = Перечисления.ФССП_ВидыЗаданийФССП.group;
				ПакетОбъект.Статус = Перечисления.ФССП_СтатусыЗаданийИП.Выгружен;
				ПакетОбъект.ТекстОшибки = "";
				ПакетОбъект.КодОшибки = 0;
				ПакетОбъект.КоличествоПопыток = КоличествоПопыток + 1;
				//СоздатьЗадание(СтруктураJSON.response.task,Перечисления.ВидыЗаданийФССП.group);
				КоличествоПопыток = 12;
				Успешно = Истина;
				ПакетОбъект.ДатаВыгрузки = ТекущаяДатаСеанса();
			КонецЕсли;
			ЧтениеJSON.Закрыть();
			УдалитьФайлы(имяВыходногоФайла);
		Исключение
			КоличествоПопыток = КоличествоПопыток + 1;
		КонецПопытки;
	КонецЦикла;
	
	ПакетОбъект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
	Возврат Успешно;
КонецФункции

Функция ОбработатьПакетЕдиничнымиЗапросами(Пакет)
	ПакетОбъект = Пакет.ПолучитьОбъект();
	ВремяПаузы = 5;
	ЧислоДопустимыхОшибок = 12;
	ЧислоОшибокПодряд = 0;
	//ПакетОбъект = Документы.ЗапросыПоИП.СоздатьДокумент();
	к = 0;
	Пока к < ПакетОбъект.Задания.Количество() Цикл
		стр = ПакетОбъект.Задания[к];
		СоздатьЕдиничныйЗапросИзПакета(стр);
		Если ЗначениеЗаполнено(стр.task) Тогда
			к = к + 1;
			ЧислоОшибокПодряд = 0;
		ИначеЕсли стр.ТекстОшибки = "Too Many Attempts." Тогда
			СделатьПаузу(ВремяПаузы);
			ЧислоОшибокПодряд = ЧислоОшибокПодряд + 1;
		Иначе
			ЧислоОшибокПодряд = ЧислоОшибокПодряд + 1;
		КонецЕсли;
		Если ЧислоОшибокПодряд = ЧислоДопустимыхОшибок Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если к = ПакетОбъект.Задания.Количество() Тогда
		ПакетОбъект.Статус = Перечисления.ФССП_СтатусыЗаданийИП.Выгружен;
		ПакетОбъект.ВидЗадания = Перечисления.ФССП_ВидыЗаданийФССП.physical;
		ПакетОбъект.ДатаВыгрузки = ТекущаяДатаСеанса();
		ПакетОбъект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
		Возврат Истина;
	Иначе
		ПакетОбъект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура СделатьПаузу(КоличествоСекунд)
	ДатаВыхода = ТекущаяДатаСеанса() + КоличествоСекунд;
	Пока ТекущаяДатаСеанса() < ДатаВыхода Цикл
		ааа = 1;
	КонецЦикла;
КонецПроцедуры

Процедура СоздатьЕдиничныйЗапросИзПакета(стр) Экспорт
	token = ПолучитьТокен();
	token = СтрЗаменить(token," ","");
	
	//ФИО = Должник.Наименование;
	//Фамилия = Лев(ФИО, СтрНайти(ФИО, " ") - 1);
	//Имя = Сред(ФИО, СтрНайти(ФИО, " ") + 1, СтрНайти(ФИО, " ", ,,2) -СтрНайти(ФИО, " ") );
	//Отчество = Сред(ФИО, СтрНайти(ФИО, " ", ,,2), стрДлина(ФИО) -СтрНайти(ФИО, " ", ,,2) + 1);
	//Регион = ПолучитьКодРегионаПоДолжнику(Должник);
	//ДатаРождения = ОбъектыСервер.ПолучитьЗначениеСвойства(Должник, "0047");
	//стрДата = Лев(Строка(ДатаРождения), 10);
	
	Фамилия = стрЗаменить(стр.lastname, "ё", "е");
	Имя = стрЗаменить(стр.firstname, "ё", "е");
	Отчество = стрЗаменить(стр.secondname, "ё", "е");
	
	//Сервер = "api-ip.fssprus.ru";
	Сервер = ПолучитьЗначениеСервера();
	Ресурс = "/api/v1.0/search/physical";
	СтрокаПараметров = "?token=" + token + "&region=" + стр.region +"&firstname=" + Имя + "&secondname=" + Отчество + "&lastname=" + Фамилия +"&birthdate=" + стр.birthdate;
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаПараметров);
	HTTPЗапрос.АдресРесурса = Ресурс + СтрокаПараметров;
	ssl = Новый ЗащищенноеСоединениеOpenSSL;
	HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();
	ОтветHTTP = HTTP.Получить(HTTPЗапрос, ИмяВыходногоФайла);
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(имяВыходногоФайла);
	
	Попытка
		СтруктураJSON = ПрочитатьJSON(ЧтениеJSON);
		
		Если СтруктураJSON.status = "error" тогда
			//Сообщить("Ошибка при выполнении запроса!");
			стр.Статус = Перечисления.ФССП_СтатусыЗаданийИП.Выгружен;
			стр.ТекстОшибки = СтруктураJSON.exception;
			стр.КодОшибки = СтруктураJSON.code;
			стр.task = "";
		ИначеЕсли СтруктураJSON.status = "success" тогда
			стр.Статус = Перечисления.ФССП_СтатусыЗаданийИП.Выгружен;
			стр.ТекстОшибки = СтруктураJSON.exception;
			стр.КодОшибки = СтруктураJSON.code;
			стр.task = СтруктураJSON.response.task;
		КонецЕсли;
	Исключение
		стр.Статус = Перечисления.ФССП_СтатусыЗаданийИП.Выгружен;
		стр.ТекстОшибки = "Неизвестная ошибка";
		стр.КодОшибки = 0;
		стр.task = "";
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	УдалитьФайлы(имяВыходногоФайла);
КонецПроцедуры

Процедура ЗагрузитьДанные() Экспорт
	НомерОчереди = ПолучитьНомерТекущейОчереди();
	token = ПолучитьТокен();
	token = СтрЗаменить(token," ","");
	//Сервер = "api-ip.fssprus.ru";
	Сервер = ПолучитьЗначениеСервера();
	Ресурс = "/api/v1.0/result";
	
	
	ВремяПаузы = 5;
	ЧислоДопустимыхОшибок = 12;
	ЧислоОшибокПодряд = 0;
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|       ЗапросыПоИП.Ссылка КАК Ссылка,
	|       ЗапросыПоИП.task КАК task
	|ИЗ
	|       Документ.ФССП_ЗапросыПоИП КАК ЗапросыПоИП
	|ГДЕ
	|       ЗапросыПоИП.ПометкаУдаления = ЛОЖЬ
	|       И ЗапросыПоИП.НомерОчереди = &НомерОчереди
	|       И ЗапросыПоИП.Статус = &Статус
	|       И ЗапросыПоИП.ВидЗадания = &ВидЗадания");
	Запрос.УстановитьПараметр("НомерОчереди", НомерОчереди);
	Запрос.УстановитьПараметр("Статус",Перечисления.ФССП_СтатусыЗаданийИП.Выгружен);
	Запрос.УстановитьПараметр("ВидЗадания",Перечисления.ФССП_ВидыЗаданийФССП.group);
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Обработано = Ложь;
		ОбработатьПрогресс(Результат.task,Обработано);
		Если Обработано Тогда
			ЧислоОшибокПодряд = 0;
			ТекстОшибки = "Ошибка загрузки данных групповой запрос.";
			ДокументОбъект = Результат.Ссылка.ПолучитьОбъект();
			Пока (ЧислоОшибокПодряд < ЧислоДопустимыхОшибок) Цикл
				СтрокаПараметров = "?token=" + token + "&task=" + Результат.task; //ca7d41a2-080a-4e4f-a8f7-7c0140107924
				HTTPЗапрос = Новый HTTPЗапрос;
				HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаПараметров);
				HTTPЗапрос.АдресРесурса = Ресурс + СтрокаПараметров;
				ssl = Новый ЗащищенноеСоединениеOpenSSL;
				HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);
				ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();
				Попытка
					ОтветHTTP = HTTP.Получить(HTTPЗапрос,ИмяВыходногоФайла);
				Исключение
					ЗагруженоУспешно = Ложь;
					Продолжить;
				КонецПопытки;	
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.ОткрытьФайл(имяВыходногоФайла);
				СтруктураJSON = ПрочитатьJSON(ЧтениеJSON);
				Если СтруктураJSON.status = "error" тогда
					//Сообщить("Ошибка при выполнении запроса-ответа!");
					ДокументОбъект = Результат.Ссылка.ПолучитьОбъект();
					ДокументОбъект.КодОшибкиЗагруженыДанные = СтруктураJSON.code;
					ДокументОбъект.ТекстОшибкиЗагруженыДанные = СтруктураJSON.exception;
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					ЧислоОшибокПодряд = ЧислоОшибокПодряд + 1;
					СделатьПаузу(5);
					ЗагруженоУспешно = Ложь;
				ИначеЕсли СтруктураJSON.status = "success" И Число(СтруктураJSON.response.status) <=1 Тогда
					к = 0;
					ЧислоОшибокПодряд = 0;
					ЗагруженоУспешно = Истина;
					Для Каждого ДолжникJSON из СтруктураJSON.response.result Цикл
						Если ДолжникJSON.status = 0 Тогда
							стр = ДокументОбъект.Задания[к];
							//Параметры =ДолжникJSON.query.params;
							ДокументЗадание = Документы.ФССП_ЗаданияПоИП.СоздатьДокумент();
							//ЗаполнитьЗначенияСвойств(ДокументЗадание, Параметры);
							Для Каждого ИП из ДолжникJSON.result Цикл
								ОбъектЗадание = ДокументЗадание.Объекты.Добавить();
								ЗаполнитьЗначенияСвойств(ОбъектЗадание, ИП);
							КонецЦикла;
							ДокументЗадание.Статус = Перечисления.ФССП_СтатусыЗаданийИП.ЗагруженыДанные;
							ДокументЗадание.Автор = Бит_ФССП_Переопределяемый.ПолучитьТекущегоПользователя();
							ДокументЗадание.Дата = ТекущаяДатаСеанса();
							ДокументЗадание.Записать(РежимЗаписиДокумента.Проведение);
							стр.Задание =ДокументЗадание.Ссылка;
							к = к + 1;
						Иначе
							стр = ДокументОбъект.Задания[к];
							Стр.КодОшибкиЗагруженыДанные = ДолжникJSON.status;
							Стр.ТекстОшибкиЗагруженыДанные = ДолжникJSON.result.message;
							ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
							
							//ЗагруженоУспешно = Ложь;
							ТекстОшибки1 = "Ошибка загрузки данных групповой запрос.";
							ТекстОшибки1 = ТекстОшибки1 + Символы.ПС + "Номер пакета: " + ДокументОбъект.Номер;
							ТекстОшибки1 = ТекстОшибки1 + Символы.ПС + "Не загружены данные по должнику: " + ДокументОбъект.Задания[к].Должник.Наименование + ". " + "Текст ошибки: " + ДолжникJSON.result.message;
							СообщитьОбОшибке(ТекстОшибки1);
							//Сообщить(ТекстОшибки1);
							к = к + 1;	
						Конецесли;
					КонецЦикла;
					ДокументОбъект.Статус = Перечисления.ФССП_СтатусыЗаданийИП.ЗагруженыДанные;
					ДокументОбъект.ДатаЗагрузки = ТекущаяДатаСеанса();
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					Прервать;
					//Сообщить("Данные по заданию загружены!");
				ИначеЕсли СтруктураJSON.status = "success" и СтруктураJSON.response.status > 1 тогда
					//Сообщить("Задание еще не обработано!");
					//ДокументОбъект = Результат.Ссылка.ПолучитьОбъект();
					//ДокументОбъект.КодОшибкиЗагруженыДанные = СтруктураJSON.code;
					//ДокументОбъект.ТекстОшибкиЗагруженыДанные = СтруктураJSON.exception;
					//ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					
					ЧислоОшибокПодряд = ЧислоОшибокПодряд + 1;
					СделатьПаузу(5);
					ЗагруженоУспешно = Ложь;
				КонецЕсли;
				
				ЧтениеJSON.Закрыть();
				//
				// удаляем файл после использования
				УдалитьФайлы(имяВыходногоФайла);
			КонецЦикла;
			
			Если Не ЗагруженоУспешно Тогда
				ТекстОшибки = "Ошибка загрузки данных групповым запросом. Пакет № " + ДОкументОбъект.Номер;
				СообщитьОбОшибке(ТекстОшибки);
				//Сообщить("Ошибка загрузки данных групповым запросом. Пакет № " + ДОкументОбъект.Номер);
				Если ДокументОбъект.Проведен Тогда
					ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Конецесли;
				ДокументОбъект.ПометкаУдаления = Истина;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);		
				Продолжить;
				//ВызватьИсключение("Ошибка загрузки данных групповым запросом. Пакет № " + ДОкументОбъект.Номер);
			КонецЕсли;
		иначе
			ДокументОбъект = Результат.Ссылка.ПолучитьОбъект();
			ДокументОбъект.КодОшибкиЗагруженыДанные = 429;
			ДокументОбъект.ТекстОшибкиЗагруженыДанные = "Ошибка получения статуса";
			Если ДокументОбъект.Проведен Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Конецесли;
			ДокументОбъект.ПометкаУдаления = Истина;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЕсли;
	КонецЦикла;
	
	ВремяПаузы = 5;
	ЧислоДопустимыхОшибок = 12;
	ЧислоОшибокПодряд = 0;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|       ЗапросыПоИП.Ссылка КАК Ссылка,
	|       ЗапросыПоИП.task КАК task
	|ИЗ
	|       Документ.ФССП_ЗапросыПоИП КАК ЗапросыПоИП
	|ГДЕ
	|       ЗапросыПоИП.ПометкаУдаления = ЛОЖЬ
	|       И ЗапросыПоИП.НомерОчереди = &НомерОчереди
	|       И ЗапросыПоИП.Статус = &Статус
	|       И ЗапросыПоИП.ВидЗадания = &ВидЗадания");
	Запрос.УстановитьПараметр("НомерОчереди", НомерОчереди);
	Запрос.УстановитьПараметр("Статус", Перечисления.ФССП_СтатусыЗаданийИП.Выгружен);
	Запрос.УстановитьПараметр("ВидЗадания",Перечисления.ФССП_ВидыЗаданийФССП.physical);
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		//ДокументОбъект = Документы.ЗапросыПоИП.СоздатьДокумент();
		ДокументОбъект = Результат.Ссылка.ПолучитьОбъект();
		к = 0;
		Для Каждого стр из ДокументОбъект.Задания Цикл
			Обработано = Ложь;
			ОбработатьПрогресс(стр.task,Обработано);
			Если Обработано Тогда
				
				ЧислоОшибокПодряд = 0;
				Пока (ЧислоОшибокПодряд < ЧислоДопустимыхОшибок) Цикл
					СтрокаПараметров = "?token=" + token + "&task=" + стр.task;
					HTTPЗапрос = Новый HTTPЗапрос;
					HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаПараметров);
					HTTPЗапрос.АдресРесурса = Ресурс + СтрокаПараметров;
					ssl = Новый ЗащищенноеСоединениеOpenSSL;
					HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);
					ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();
					попытка
						ОтветHTTP = HTTP.Получить(HTTPЗапрос, ИмяВыходногоФайла);
					исключение
						ЗагруженоУспешно = Ложь;
						Продолжить;					
					конецпопытки;
					ЧтениеJSON = Новый ЧтениеJSON;
					ЧтениеJSON.ОткрытьФайл(имяВыходногоФайла);
					СтруктураJSON = ПрочитатьJSON(ЧтениеJSON);
					Если СтруктураJSON.status = "error" тогда
						ЧислоОшибокПодряд = ЧислоОшибокПодряд +	1;
						СделатьПаузу(5);
						ЗагруженоУспешно = ЛОжь;
					ИначеЕсли СтруктураJSON.status = "success" И Число(СтруктураJSON.response.status) <=1 Тогда
						к = к + 1;
						ЧислоОшибокПодряд = 0;
						ЗагруженоУспешно = Истина;
						Для Каждого ДолжникJSON из СтруктураJSON.response.result Цикл	
							Если ДолжникJSON.status = 0 Тогда
								//Параметры =ДолжникJSON.query.params;
								ДокументЗадание = Документы.ФССП_ЗаданияПоИП.СоздатьДокумент();
								//ЗаполнитьЗначенияСвойств(ДокументЗадание, Параметры);
								Для Каждого ИП из ДолжникJSON.result Цикл
									ОбъектЗадание = ДокументЗадание.Объекты.Добавить();
									ЗаполнитьЗначенияСвойств(ОбъектЗадание, ИП);
								КонецЦикла;
								ДокументЗадание.Статус = Перечисления.ФССП_СтатусыЗаданийИП.ЗагруженыДанные;
								ДокументЗадание.Автор = бит_ФССП_Переопределяемый.ПолучитьТекущегоПользователя();
								ДокументЗадание.Дата = ТекущаяДатаСеанса();
								ДокументЗадание.Записать(РежимЗаписиДокумента.Проведение);
								стр.Задание = ДокументЗадание.Ссылка;	
							Иначе
								Стр.КодОшибкиЗагруженыДанные = ДолжникJSON.status;
								Стр.ТекстОшибкиЗагруженыДанные = ДолжникJSON.result.message;
								ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
								ЗагруженоУспешно = ЛОжь;
							Конецесли;
						КонецЦикла;
						Прервать;
					ИначеЕсли СтруктураJSON.status = "success" и СтруктураJSON.response.status > 1 тогда 
						ЧислоОшибокПодряд = ЧислоОшибокПодряд +	1;
						ЗагруженоУспешно = Ложь;
					КонецЕсли;
					
					ЧтениеJSON.Закрыть();
					//
					// удаляем файл после использования
					УдалитьФайлы(имяВыходногоФайла);
					
				КонецЦикла;
				Если Не ЗагруженоУспешно Тогда
					ТекстОшибки ="В пакете № " + ДокументОбъект.Номер + "произошла ошибка зазагрузки данных единичным запросом. Должник:" + Стр.Должник;  
					СообщитьОбОшибке(ТекстОшибки);
					//Сообщить("В пакете № " + ДокументОбъект.Номер + "произошла ошибка зазагрузки данных единичным запросом. Должник:" + Стр.Должник);
					Если ДокументОбъект.Проведен Тогда
						ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Конецесли;
					ДокументОбъект.ПометкаУдаления = Истина;
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);		
					Продолжить;
					//ВызватьИсключение("Ошибка загрузки данных единичным запросом. Пакет № " + ДокументОбъект.Номер);
				КонецЕсли;
			Иначе
				ТекстОшибки ="В пакете № " + ДокументОбъект.Номер + "произошла ошибка получения статуса. Должник:" + Стр.Должник;  
				СообщитьОбОшибке(ТекстОшибки);
				//Сообщить("В пакете № " + ДокументОбъект.Номер + "произошла ошибка получения статуса. Должник:" + Стр.Должник);
				Стр.КодОшибкиЗагруженыДанные = 429;
				Стр.ТекстОшибкиЗагруженыДанные = "Ошибка обработки статуса";
				Если ДокументОбъект.Проведен Тогда
					ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Конецесли;
				ДокументОбъект.ПометкаУдаления = Истина;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);		
				Прервать;	                                      
			КонецЕсли;

		КонецЦикла;
		Если к = ДокументОбъект.Задания.Количество() Тогда
			ДокументОбъект.Статус = Перечисления.ФССП_СтатусыЗаданийИП.ЗагруженыДанные;
			ДокументОбъект.ДатаЗагрузки = ТекущаяДатаСеанса();
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);	
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьПрогресс(Задание, ОбработкаЗакончена) Экспорт
	token = ПолучитьТокен();
	token = СтрЗаменить(token," ","");
	//Сервер = "api-ip.fssprus.ru";
	Сервер = ПолучитьЗначениеСервера();
	Ресурс = "/api/v1.0/status";
	СтрокаПараметров = "?token=" + token + "&task=" + Задание; //ca7d41a2-080a-4e4f-a8f7-7c0140107924
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаПараметров);
	HTTPЗапрос.АдресРесурса = Ресурс + СтрокаПараметров;
	ssl = Новый ЗащищенноеСоединениеOpenSSL;
	HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();
	Попытка
		ОтветHTTP = HTTP.Получить(HTTPЗапрос,ИмяВыходногоФайла);
	Исключение
		ОбработкаЗакончена = Ложь;
		ОбработатьПрогресс(Задание,ОбработкаЗакончена);
	КонецПопытки;	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(имяВыходногоФайла);
	СтруктураJSON = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	УдалитьФайлы(имяВыходногоФайла);

	Если СтруктураJSON.status = "error" тогда
		Если стрНайти(СтруктураJSON.exception,"not exist")>0 Тогда
			ОбработкаЗакончена = Ложь;
			Возврат;
		Иначе
			ОбработкаЗакончена = Ложь;
			СделатьПаузу(1800);
			ОбработатьПрогресс(Задание,ОбработкаЗакончена);
		КонецЕсли;
	ИначеЕсли СтруктураJSON.status = "success" И Число(СтруктураJSON.response.status) = 0 Тогда
		ОбработкаЗакончена = Истина;
		Возврат;	
	ИначеЕсли СтруктураJSON.status = "success" и СтруктураJSON.response.status = 3 тогда
		ОбработкаЗакончена = Ложь;
		Возврат;
	ИначеЕсли СтруктураJSON.status = "success" и ( СтруктураJSON.response.status = 1 ИЛИ СтруктураJSON.response.status = 2) Тогда
		ОбработкаЗакончена = Ложь; 
		//Сообщить(Строка(СтруктураJSON.response.progress));
		СделатьПаузу(1800);
		ОбработатьПрогресс(Задание,ОбработкаЗакончена);
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ОбработатьДанные() Экспорт
	НомерОчереди = ПолучитьНомерТекущейОчереди();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|       ЗапросыПоИП.Ссылка КАК Ссылка
	|ИЗ
	|       Документ.ФССП_ЗапросыПоИП КАК ЗапросыПоИП
	|ГДЕ
	|       ЗапросыПоИП.Статус = &Статус
	|       И ЗапросыПоИП.НомерОчереди = &НомерОчереди
	|       И ЗапросыПоИП.ПометкаУдаления = ЛОЖЬ");
	Запрос.УстановитьПараметр("НомерОчереди", НомерОчереди);
	Запрос.УстановитьПараметр("Статус", Перечисления.ФССП_СтатусыЗаданийИП.ЗагруженыДанные);
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Запрос = Результат.Ссылка;
		Задания = Запрос.Задания;
		Для Каждого стр из Задания Цикл
			Задание = стр.Задание;
			//ФИО = Задание.lastname + " " + Задание.firstname + " " + Задание.secondname;
			//Попытка
			//      ДатаРождения = Дата(Задание.birthdate + " 00:00:00");
			//Исключение
			//      ДатаРождения = Неопределено;
			//КонецПопытки;
			//Должник = ПолучитьДолжника(ФИО, ДатаРождения);
			//ДокументДолжник = Должник;
			Должник = стр.Должник;
			Если Задание.Объекты.Количество() = 0 Тогда
				Если Не ЕстьНезавершенныеИППоДолжнику(Должник) Тогда
					Продолжить;
				Иначе
					ДокументИП = Документы.ФССП_ЗагрузкаИсполнительногоПроизводства.СоздатьДокумент();
					ДокументИП.task = Запрос.task;
					ДокументИП.Автор = бит_Фссп_переопределяемый.ПолучитьТекущегоПользователя();
					//ДокументИП.Автор = Константы.ПолучательТехническихСообщений.Получить();
					ДокументИП.Комментарий = "Регламентное задание";
					ДокументИП.Дата = ТекущаяДатаСеанса();
					ДокументИП.Должник = Должник;
					ДокументИП.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			//МассивИП = ФССП_ОбщийМодуль_ИнтеграцияФССП.ЗаполнитьДанныеДокумента(Задание, Должник, Истина);
			МассивИП = бит_ФССП_ИнтеграцияФССП.ЗаполнитьДанныеДокумента1С(Задание, Должник, Истина);
			ДокументИП = ДОкументы.ФССП_ЗагрузкаИсполнительногоПроизводства.СоздатьДокумент();
			ДокументИП.task = Запрос.task;
			ДокументИП.Автор = бит_Фссп_переопределяемый.ПолучитьТекущегоПользователя();
			//ДокументИП.Автор = Константы.ПолучательТехническихСообщений.Получить();
			ДокументИП.Комментарий = "Регламентное задание";
			ДокументИП.Дата = ТекущаяДатаСеанса();
			ДокументИП.Должник = Должник;
			//Записывать = Ложь;
			Записывать = Истина;
			Для Каждого ип из МассивИП Цикл
				стр = ДокументИП.тчИсполнительныеПроизводства.Добавить();
				ЗаполнитьЗначенияСвойств(стр, ИП);
				//Если ИП.ЕстьИзменения Тогда
				//	Записывать = Истина;
				//КонецЕсли;
			КонецЦикла;
			Если Записывать Тогда
				Попытка
					ДокументИП.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				Исключение
					ДокументИП.ПометкаУдаления = Истина;
					ДокументИП.Записать(РежимЗаписиДокумента.Запись);
					ТекстОшибки = "При записи документа Загрузка исполнительного производства № "+ ДокументИП.Номер+" произошла ошибка!";
					СообщитьОбОшибке(ТекстОшибки);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		ЗапросОбъект = Запрос.ПолучитьОбъект();
		ЗапросОбъект.Статус = Перечисления.ФССП_СтатусыЗаданийИП.ДокументыСформированы;
		ЗапросОбъект.ДатаОбработки = ТекущаяДатаСеанса();
		ЗапросОбъект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ЕстьНезавершенныеИППоДолжнику(Должник)
	Запрос = Новый Запрос("ВЫБРАТЬ
	| СостоянияИПСрезПоследних.ИП КАК ID,
	| СостоянияИПСрезПоследних.Период КАК Период
	|ИЗ
	| РегистрСведений.ФССП_СостояниеИП.СрезПоследних КАК СостоянияИПСрезПоследних
	| Где СостоянияИПСрезПоследних.Завершено = ЛОЖЬ");
	Запрос.УстановитьПараметр("Должник", Должник);
	Результат = Запрос.Выполнить().Выбрать();
	Возврат Результат.Следующий();
КонецФункции

Процедура УдалитьОчередь() Экспорт
	НомерОчереди = ПолучитьНомерТекущейОчереди();
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗапросыПоИП.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.ФССП_ЗапросыПоИП КАК ЗапросыПоИП
	                      |ГДЕ
	                      |	ЗапросыПоИП.НомерОчереди = &НомерОчереди
	                      |	И ЗапросыПоИП.Статус = &Статус
	                      |	И ЗапросыПоИП.ПометкаУдаления = Ложь");
	Запрос.УстановитьПараметр("НомерОчереди", НомерОчереди);
	Запрос.УстановитьПараметр("Статус",Перечисления.ФССП_СтатусыЗаданийИП.ДокументыСформированы);
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		ДокументОбъект = Результат.Ссылка.ПолучитьОбъект();
		Для Каждого стр из ДокументОбъект.Задания Цикл
			Если ЗначениеЗаполнено(стр.Задание) Тогда
				ЗаданияОбъект = стр.Задание.ПолучитьОбъект();
				ЗаданияОбъект.Удалить();
			КонецЕсли;
		КонецЦикла;
		ДокументОбъект.Удалить();
	КонецЦикла;
КонецПроцедуры

Функция ЗаполнитьДанныеДокумента1С(МассивДанных, Должник, ГрупповойЗапрос) Экспорт
	МассивИП = Новый Массив;
	МассивЗначенийИП = Новый Массив;
	ИмяСправочникаПриставы = Бит_ФССП_Переопределяемый.ПолучитьИмяСправочникаСудебныеПриставы();
	
	Для Каждого ИП из МассивДанных.Объекты Цикл
		стр = Новый Структура;
		стр.Вставить("name",                   ИП.name);
		стр.Вставить("exe_production", ИП.exe_production);
		стр.Вставить("details",                ИП.details);
		стр.Вставить("subject",                ИП.subject);
		стр.Вставить("department",             ИП.department);
		стр.Вставить("bailiff",                ИП.bailiff);
		стр.Вставить("ip_end",                 ИП.ip_end);
		
		ДатаВозбужденияИП = ПолучитьДатуОт(ИП.exe_production);
		
		НомерСД = ПолучитьНомерСД(ИП.exe_production);
		стр.Вставить("НомерСД", НомерСД);
		стр.Вставить("ДатаВозбуждения", ДатаВозбужденияИП);  
		
		МассивПредметов = Новый Массив;
				
		Предмет = ИП.subject;
		
		подстрокиПредмет = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Предмет, "руб.",Истина,Истина);
		
		Для каждого строкаПредмет из подстрокиПредмет Цикл 
			стрПредмет = Новый Структура("Предмет, Сумма", "",0);
			ПолучитьСуммуИПредмет(стрПредмет.Предмет, стрПредмет.Сумма,строкаПредмет);
			МассивПредметов.Добавить(стрПредмет);
		КонецЦикла;	
				
		колвоПредметов = 1;
		Для каждого Пред из МассивПредметов Цикл 
			спрПредмет = ПолучитьСправочникПредмет(Пред.Предмет);
			стр.Вставить("Предмет" + строка(колвоПредметов), спрПредмет);
			стр.Вставить("Сумма"+ строка(колвоПредметов),Пред.Сумма);
			колвоПредметов = колвоПредметов + 1;
		КонецЦикла;		
		
		Детали = ИП.details;
		Детали = СтрЗаменить(Детали, " ", " ");
		ВидИДСтрока = ПолучитьНомерОт(ИП.details);
		ДатаИД = ПолучитьДатуОт(ИП.details);
		Предложение = Детали;
		Для к = 1 по 99 Цикл
			Слово = ПолучитьПервоеСлово(Предложение);
			Если ПолучитьТипСлова(Слово) = "Слово" Тогда
				Слово = ОтрезатьПервоеСлово(Предложение);
			Иначе
				ааа = ааа;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Слово = ОтрезатьПервоеСлово(Предложение);
		ТипСлова1 = ПолучитьТипСлова(Слово);
		Если ТипСлова1 = "Дата" Тогда
			НачалоНомераИД = СтрНайти(Детали, Слово) + СтрДлина(Слово) + 1;
		Иначе
			НачалоНомераИД = СтрНайти(Детали, Слово);
		КонецЕсли;
		
		Для к = 1 по 99 Цикл
			Слово = ПолучитьПервоеСлово(Предложение);
			ТипСлова2 = ПолучитьТипСлова(Слово);
			Если ТипСлова2 = "Слово" И ТипСлова1 <> "Символ" Тогда
				ааа = ааа;
				Прервать;
			Иначе
				Слово = ОтрезатьПервоеСлово(Предложение);
				ТипСлова1 = ТипСлова2;
				ТипСлова2 = "";
			КонецЕсли;
		КонецЦикла;
		
		НомерИД = Сред(Детали, НачалоНомераИД, СтрНайти(Детали,Предложение) - НачалоНомераИД);
		НомерИД = СтрЗаменить(НомерИД, "№", "");
		НомерИД = СтрЗаменить(НомерИД, " ", " ");
		УдалитьПробелыСКраев(НомерИД);
		
		ОрганВыдающийИД = Предложение;
		ОрганВыдающийИД = СтрЗаменить(ОрганВыдающийИД, "Постановление о взыскании исполнительского сбора", "");
		ОрганВыдающийИД = СтрЗаменить(ОрганВыдающийИД, " ", " ");
		УдалитьПробелыСКраев(ОрганВыдающийИД);
		
		
		НомерИД = НомерИД;
		ОрганВыдавшийИД = ОрганВыдающийИД;
		
		ВидИД = ПолучитьСправочникВидИД(ВидИДСтрока);
		
		Стр.Вставить("НомерИД", НомерИД);
		Стр.Вставить("ДатаИД", ДатаИД);
		стр.Вставить("ОрганВыдавшийИД", ОрганВыдавшийИД);
		Стр.Вставить("ВидИД",ВидИД);
		
		ip_end = ИП.ip_end;
		ДатаОкончанияИП = ПолучитьДатуОкончанияИП(ip_end);
		ПричинаОкончанияИП = ПолучитьПричинуОкончанияИП(ip_end);
		
		стр.Вставить("ДатаОкончания", ДатаОкончанияИП);
		стр.Вставить("ПричинаОкончания", ПричинаОкончанияИП);
		
		
		Департамент = ИП.department;
		ТипСловаДепартамент = ПолучитьТипСлова(Департамент);
		//Если типзнч(Департамент) = Тип("Число") Тогда
		Если ТипСловаДепартамент = "Число" или типзнч(Департамент) = Тип("Число") Тогда
			ОтделСудебныхПриставов = ПоискДепартаментаПоЧисловомуЗначению(Департамент);
		Иначе	
			СтрокаИндекс = ПолучитьИндексИзСтроки(Департамент);
			СтрокаРосп = Лев(Департамент, Найти(Департамент,	СтрокаИндекс)-1);
			УдалитьПробелыСКраев(СтрокаРОСП);
			ОтделСудебныхПриставовСтрока = СтрокаРОСП;
			ОтделСудебныхПриставовИндекс = СтрокаИндекс;
			КодРегиона = Строка(бит_ФССП_Переопределяемый.ПолучитьКодРегионаПоИндексу(СтрокаИндекс));
			ОтделСудебныхПриставов = бит_ФССП_Переопределяемый.ПолучитьРОСП(СтрокаРОСП, КодРегиона);
			
			Если Не ЗначениеЗаполнено(ОтделСудебныхПриставов) Тогда
				ОтделСудебныхПриставов = ПолучитьТекущееРОСП(ИП.exe_production);
			КонецЕсли;
		КонецЕсли;
		
		стр.Вставить("ОтделСудебныхПриставов", ОтделСудебныхПриставов);
		
		Если ЗначениеЗаполнено(ОтделСудебныхПриставов) Тогда
			Пристав = ИП.bailiff;
			Пристав = стрЗаменить(Пристав, "<br>", " ");
			Пристав = стрЗаменить(Пристав, "<br/>", " ");	
			Пристав = СтрЗаменить(Пристав, " ", " ");
			Пристав = СтрЗаменить(Пристав, " ", Символы.ПС);
			ЧислоСтрок = СтрЧислоСтрок(Пристав);
			Если ЧислоСтрок = 0 Тогда
				СтрокаПристав = "";
			ИначеЕсли ЧислоСтрок = 1 Тогда
				СтрокаПристав = СтрПолучитьСтроку(Пристав, 1);
			Иначе
				СтрокаПристав = СтрПолучитьСтроку(Пристав, 1);
				Для к = 2 по ЧислоСтрок Цикл
					ТипСлова = ПолучитьТипСлова(СтрПолучитьСтроку(Пристав, к));
					Если ТипСлова = "Число" ИЛИ ТипСлова = "Номер" Тогда
						Прервать;
					Иначе
						СтрокаПристав = СтрокаПристав + " " + СтрПолучитьСтроку(Пристав, к);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			СтрПристав = СтрЗаменить(СтрокаПристав, " ", "_");
			СтрПристав = СтрЗаменить(СтрПристав, ".", "");
			Если КодРегиона = Неопределено Тогда
				Попытка
					КодРегиона = Строка(ОтделСудебныхПриставов.КодРегиона);
				Исключение
					КодРегиона = "0";
				КонецПопытки;	
			КонецЕсли;	
			
			СудебныйПриставИсполнитель = Бит_ФССП_Переопределяемый.ПоискПриставаВБазе(КодРегиона,СтрПристав,ОтделСудебныхПриставов.НаименованиеПолное);
			Если СудебныйПриставИсполнитель = Справочники[ИмяСправочникаПриставы].ПустаяСсылка() Тогда
				Попытка
					ПапкаРегион = Бит_ФССП_Переопределяемый.ПоискПапкиРегион(КодРегиона);
					ПриставОбъект = Справочники[ИмяСправочникаПриставы].СоздатьЭлемент();
					ПриставОбъект.Наименование = СтрокаПристав;
					ПриставОбъект.ФамилияИО = СтрПристав;
					ПриставОбъект.Родитель = Бит_ФССП_Переопределяемый.ПоискПапкиОСП(ОтделСудебныхПриставов.Наименование, ПапкаРегион);
					ПриставОбъект.Записать();
					СудебныйПриставИсполнитель = ПриставОбъект.Ссылка;	
				Исключение
					
				КонецПопытки;
			КонецЕсли;
			
			стр.Вставить("СудебныйПриставИсполнитель",СудебныйПриставИсполнитель);
			
			Если ЗначениеЗаполнено(СудебныйПриставИсполнитель) Тогда
				Попытка
					ПриставОб = СудебныйПриставИсполнитель.ПолучитьОбъект();
					Телефон1 = "";
					Телефон2 = "";
					Телефон3 = "";
					СтрокаОстаток = Прав(ИП.bailiff, стрДлина(ИП.bailiff) - стрДлина(СтрокаПристав));
					СтрокаОстаток = СтрЗаменить(СтрокаОстаток, " ", "");
					СтрокаОстаток = стрЗаменить(СтрокаОстаток, "<br>", " ");
					СтрокаОстаток = стрЗаменить(СтрокаОстаток, "<br/>", " ");
					СтрокаОстаток = СтрЗаменить(СтрокаОстаток, " ", " ");
					УдалитьПробелыСКраев(СтрокаОстаток);
					СтрокаОстаток = стрЗаменить(СтрокаОстаток, " ", Символы.ПС);
					к = мин(стрчислоСтрок(СтрокаОстаток),3);
					Для п = 1 по к Цикл
						тел = СтрПолучитьСтроку(СтрокаОстаток, п);
						ТипСлова = бит_ФССП_ИнтеграцияФССП.ПолучитьТипСлова(тел);
						Если ТипСлова = "Число" Тогда
							стрКоманда = "Телефон" + строка(п) + " = бит_ФССП_ИнтеграцияФССП.ПреобразоватьТелефон(тел)";
							Выполнить(стрКоманда);
						КонецЕсли;
					КонецЦикла;
					Если ЗначениеЗаполнено(Телефон1) Тогда
						ТелефонПристава1 = ПриставОб.Телефоны.Добавить();
						ТелефонПристава1.ВидТелефона = бит_ФССП_Переопределяемый.ПолучитьВидТелефонаРабочий();
						бит_ФССП_Переопределяемый.ОбработатьНомерТелефона(ТелефонПристава1,Телефон1);
					КонецЕсли;
					Если ЗначениеЗаполнено(Телефон2) Тогда
						ТелефонПристава2 = ПриставОб.Телефоны.Добавить();
						ТелефонПристава2.ВидТелефона = бит_ФССП_Переопределяемый.ПолучитьВидТелефонаРабочий();
						бит_ФССП_Переопределяемый.ОбработатьНомерТелефона(ТелефонПристава2,Телефон2);
					КонецЕсли;
					Если ЗначениеЗаполнено(Телефон3) Тогда
						ТелефонПристава3 = ПриставОб.Телефоны.Добавить();
						ТелефонПристава3.ВидТелефона = бит_ФССП_Переопределяемый.ПолучитьВидТелефонаРабочий();
						бит_ФССП_Переопределяемый.ОбработатьНомерТелефона(ТелефонПристава3,Телефон3);
					КонецЕсли;		
					бит_ФССП_Переопределяемый.СвернутьДублиТЧтелефоны(ПриставОб.Телефоны);
					ПриставОб.Записать();
				Исключение;
				КонецПопыткИ;
			КонецЕсли;
		КонецЕсли;
		МассивИП.Добавить(стр);
	КонецЦикла;
	Возврат МассивИП;
КонецФункции  

Функция РоботЗаполнитьДанныеДокумента1С(МассивДанных, ДокументДолжник, ГрупповойЗапрос) Экспорт
	МассивИП = Новый Массив;
	МассивЗначенийИП = Новый Массив;
	ИмяСправочникаПриставы = Бит_ФССП_Переопределяемый.ПолучитьИмяСправочникаСудебныеПриставы();
	
	Для Каждого ИП из МассивДанных Цикл
		стр = Новый Структура;
		стр.Вставить("name",                   ИП.name);
		стр.Вставить("exe_production", ИП.exe_production);
		стр.Вставить("details",                ИП.details);
		стр.Вставить("subject",                ИП.subject);
		стр.Вставить("department",             ИП.department);
		стр.Вставить("bailiff",                ИП.bailiff);
		стр.Вставить("ip_end",                 ИП.ip_end);
		
		ДатаВозбужденияИП = ПолучитьДатуОт(ИП.exe_production);
		
		НомерСД = ПолучитьНомерСД(ИП.exe_production);
		стр.Вставить("НомерСД", НомерСД);
		стр.Вставить("ДатаВозбуждения", ДатаВозбужденияИП);  
		
		МассивПредметов = Новый Массив;
				
		Предмет = ИП.subject;
		//++КазанцевЯА
		//подстрокиПредмет = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Предмет, "руб.",Истина,Истина);
		//
		//Для каждого строкаПредмет из подстрокиПредмет Цикл 
		//	стрПредмет = Новый Структура("Предмет, Сумма", "",0);
		//	ПолучитьСуммуИПредмет(стрПредмет.Предмет, стрПредмет.Сумма,строкаПредмет);
		//	МассивПредметов.Добавить(стрПредмет);
		//КонецЦикла;	
		//Если СтрНайти(Предмет,"руб.") > 0 Тогда  
		//	подстрокиПредмет = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Предмет, "руб.",Истина,Истина);	
		//	Для каждого строкаПредмет из подстрокиПредмет Цикл 
		//		стрПредмет = Новый Структура("Предмет, Сумма", "",0);
		//		бит_ФССП_ИнтеграцияФССП.ПолучитьСуммуИПредмет(стрПредмет.Предмет, стрПредмет.Сумма,строкаПредмет);
		//		МассивПредметов.Добавить(стрПредмет);
		//	КонецЦикла;	
		//Иначе
			КонецПодстраки = 0;
			Для Индекс = 1 По СтрДлина(Предмет) Цикл
				Если Сред(Предмет,Индекс,1) = " " И СтрНайти("0123456789",Сред(Предмет,Индекс-1,1)) > 0
						ИЛИ Индекс = СтрДлина(Предмет) И СтрНайти("0123456789",Сред(Предмет,Индекс-1,1)) > 0 Тогда
					строкаПредмет = Сред(Предмет,КонецПодстраки,Индекс);
					стрПредмет = Новый Структура("Предмет, Сумма", "",0);
					бит_ФССП_ИнтеграцияФССП.ПолучитьСуммуИПредмет(стрПредмет.Предмет, стрПредмет.Сумма,строкаПредмет);
					МассивПредметов.Добавить(стрПредмет);
					КонецПодстраки = Индекс;
				КонецЕсли;
			КонецЦикла;
		//КонецЕсли;
		//--КазанцевЯА
				
		колвоПредметов = 1;
		Для каждого Пред из МассивПредметов Цикл 
			спрПредмет = ПолучитьСправочникПредмет(Пред.Предмет);
			стр.Вставить("Предмет" + строка(колвоПредметов), спрПредмет);
			стр.Вставить("Сумма"+ строка(колвоПредметов),Пред.Сумма);
			колвоПредметов = колвоПредметов + 1;
		КонецЦикла;		
		
		Детали = ИП.details;
		Детали = СтрЗаменить(Детали, " ", " ");
		ВидИДСтрока = ПолучитьНомерОт(ИП.details);
		ДатаИД = ПолучитьДатуОт(ИП.details);
		Предложение = Детали;
		Для к = 1 по 99 Цикл
			Слово = ПолучитьПервоеСлово(Предложение);
			Если ПолучитьТипСлова(Слово) = "Слово" Тогда
				Слово = ОтрезатьПервоеСлово(Предложение);
			Иначе
				ааа = ааа;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Слово = ОтрезатьПервоеСлово(Предложение);
		ТипСлова1 = ПолучитьТипСлова(Слово);
		Если ТипСлова1 = "Дата" Тогда
			НачалоНомераИД = СтрНайти(Детали, Слово) + СтрДлина(Слово) + 1;
		Иначе
			НачалоНомераИД = СтрНайти(Детали, Слово);
		КонецЕсли;
		
		Для к = 1 по 99 Цикл
			Слово = ПолучитьПервоеСлово(Предложение);
			ТипСлова2 = ПолучитьТипСлова(Слово);
			Если ТипСлова2 = "Слово" И ТипСлова1 <> "Символ" Тогда
				ааа = ааа;
				Прервать;
			Иначе
				Слово = ОтрезатьПервоеСлово(Предложение);
				ТипСлова1 = ТипСлова2;
				ТипСлова2 = "";
			КонецЕсли;
		КонецЦикла;
		
		НомерИД = Сред(Детали, НачалоНомераИД, СтрНайти(Детали,Предложение) - НачалоНомераИД);
		НомерИД = СтрЗаменить(НомерИД, "№", "");
		НомерИД = СтрЗаменить(НомерИД, " ", " ");
		УдалитьПробелыСКраев(НомерИД);
		
		//++КазанцевЯА
		//если пробел и (не ВС или не ФС)    
		ИсполЛист = Ложь;
		Если СтрНайти(НомерИД,"ВС") > 0 ИЛИ СтрНайти(НомерИД,"ФС") > 0 ИЛИ СтрНайти(НомерИД,"АС") > 0 Тогда
			ИсполЛист = Истина;	
		КонецЕсли;
		ПробелНомерИД = СтрНайти(НомерИД," "); 
		Если ПробелНомерИД > 0 И НЕ ИсполЛист Тогда
			Предложение = СокрЛП(Сред(НомерИД,ПробелНомерИД,СтрДлина(НомерИД))) + " " + Предложение;
			НомерИД = Лев(НомерИД,ПробелНомерИД);	
		КонецЕсли;    
		
		Если СтрДлина(НомерИД) < 3 Тогда
			НомерИД = Детали;	
		КонецЕсли;
		//--КазанцевЯА
		
		ОрганВыдающийИД = Предложение;
		ОрганВыдающийИД = СтрЗаменить(ОрганВыдающийИД, "Постановление о взыскании исполнительского сбора", "");
		ОрганВыдающийИД = СтрЗаменить(ОрганВыдающийИД, " ", " ");
		УдалитьПробелыСКраев(ОрганВыдающийИД);
		
		
		НомерИД = НомерИД;
		ОрганВыдавшийИД = ОрганВыдающийИД;
		
		ВидИД = ПолучитьСправочникВидИД(ВидИДСтрока);
		
		Стр.Вставить("НомерИД", НомерИД);
		Стр.Вставить("ДатаИД", ДатаИД);
		стр.Вставить("ОрганВыдавшийИД", ОрганВыдавшийИД);
		Стр.Вставить("ВидИД",ВидИД);
		
		ip_end = ИП.ip_end;
		ДатаОкончанияИП = ПолучитьДатуОкончанияИП(ip_end);
		ПричинаОкончанияИП = СокрЛП(ПолучитьПричинуОкончанияИП(СтрЗаменить(ip_end,Лев(ДатаОкончанияИП,10),"")));
		
		стр.Вставить("ДатаОкончания", ДатаОкончанияИП);
		стр.Вставить("ПричинаОкончания", ПричинаОкончанияИП);
		
		
		Департамент = ИП.department;
		ТипСловаДепартамент = ПолучитьТипСлова(Департамент);
		//Если типзнч(Департамент) = Тип("Число") Тогда
		Если ТипСловаДепартамент = "Число" или типзнч(Департамент) = Тип("Число") Тогда
			ОтделСудебныхПриставов = ПоискДепартаментаПоЧисловомуЗначению(Департамент);
		Иначе	
			СтрокаИндекс = ПолучитьИндексИзСтроки(Департамент);
			СтрокаРосп = Лев(Департамент, Найти(Департамент,	СтрокаИндекс)-1);
			УдалитьПробелыСКраев(СтрокаРОСП);
			ОтделСудебныхПриставовСтрока = СтрокаРОСП;
			ОтделСудебныхПриставовИндекс = СтрокаИндекс;
			КодРегиона = Строка(бит_ФССП_Переопределяемый.ПолучитьКодРегионаПоИндексу(СтрокаИндекс));
			//КодРегиона = 39;// УБРАТЬ !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			ОтделСудебныхПриставов = бит_ФССП_Переопределяемый.ПолучитьРОСП(СтрокаРОСП, КодРегиона);
			
			Если Не ЗначениеЗаполнено(ОтделСудебныхПриставов) Тогда
				ОтделСудебныхПриставов = ПолучитьТекущееРОСП(ИП.exe_production);
			КонецЕсли;
		КонецЕсли;
		
		стр.Вставить("ОтделСудебныхПриставов", ОтделСудебныхПриставов);
		
		Если ЗначениеЗаполнено(ОтделСудебныхПриставов) Тогда
			Пристав = ИП.bailiff;
			Пристав = стрЗаменить(Пристав, "<br>", " ");
			Пристав = стрЗаменить(Пристав, "<br/>", " ");	
			Пристав = СтрЗаменить(Пристав, " ", " ");
			Пристав = СтрЗаменить(Пристав, " ", Символы.ПС);
			ЧислоСтрок = СтрЧислоСтрок(Пристав);
			Если ЧислоСтрок = 0 Тогда
				СтрокаПристав = "";
			ИначеЕсли ЧислоСтрок = 1 Тогда
				СтрокаПристав = СтрПолучитьСтроку(Пристав, 1);
			Иначе
				СтрокаПристав = СтрПолучитьСтроку(Пристав, 1);
				Для к = 2 по ЧислоСтрок Цикл
					ТипСлова = ПолучитьТипСлова(СтрПолучитьСтроку(Пристав, к));
					Если ТипСлова = "Число" ИЛИ ТипСлова = "Номер" Тогда
						Прервать;
					Иначе
						СтрокаПристав = СтрокаПристав + " " + СтрПолучитьСтроку(Пристав, к);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			СтрПристав = СтрЗаменить(СтрокаПристав, " ", "_");
			СтрПристав = СтрЗаменить(СтрПристав, ".", "");
			Если КодРегиона = Неопределено Тогда
				Попытка
					КодРегиона = Строка(ОтделСудебныхПриставов.КодРегиона);
				Исключение
					КодРегиона = "0";
				КонецПопытки;	
			КонецЕсли;	
			
			СудебныйПриставИсполнитель = Бит_ФССП_Переопределяемый.ПоискПриставаВБазе(КодРегиона,СтрПристав,ОтделСудебныхПриставов.НаименованиеПолное);
			Если СудебныйПриставИсполнитель = Справочники[ИмяСправочникаПриставы].ПустаяСсылка() Тогда
				Попытка
					ПапкаРегион = Бит_ФССП_Переопределяемый.ПоискПапкиРегион(КодРегиона);
					ПриставОбъект = Справочники[ИмяСправочникаПриставы].СоздатьЭлемент();
					ПриставОбъект.Наименование = СтрокаПристав;
					ПриставОбъект.ФамилияИО = СтрПристав;
					ПриставОбъект.Родитель = Бит_ФССП_Переопределяемый.ПоискПапкиОСП(ОтделСудебныхПриставов.Наименование, ПапкаРегион);
					ПриставОбъект.Записать();
					СудебныйПриставИсполнитель = ПриставОбъект.Ссылка;	
				Исключение
					
				КонецПопытки;
			КонецЕсли;
			
			стр.Вставить("СудебныйПриставИсполнитель",СудебныйПриставИсполнитель);
			
			Если ЗначениеЗаполнено(СудебныйПриставИсполнитель) Тогда
				Попытка
					ПриставОб = СудебныйПриставИсполнитель.ПолучитьОбъект();
					Телефон1 = "";
					Телефон2 = "";
					Телефон3 = "";
					СтрокаОстаток = Прав(ИП.bailiff, стрДлина(ИП.bailiff) - стрДлина(СтрокаПристав));
					СтрокаОстаток = СтрЗаменить(СтрокаОстаток, " ", "");
					СтрокаОстаток = стрЗаменить(СтрокаОстаток, "<br>", " ");
					СтрокаОстаток = стрЗаменить(СтрокаОстаток, "<br/>", " ");
					СтрокаОстаток = СтрЗаменить(СтрокаОстаток, " ", " ");
					УдалитьПробелыСКраев(СтрокаОстаток);
					СтрокаОстаток = стрЗаменить(СтрокаОстаток, " ", Символы.ПС);
					к = мин(стрчислоСтрок(СтрокаОстаток),3);
					Для п = 1 по к Цикл
						тел = СтрПолучитьСтроку(СтрокаОстаток, п);
						ТипСлова = бит_ФССП_ИнтеграцияФССП.ПолучитьТипСлова(тел);
						Если ТипСлова = "Число" Тогда
							стрКоманда = "Телефон" + строка(п) + " = бит_ФССП_ИнтеграцияФССП.ПреобразоватьТелефон(тел)";
							Выполнить(стрКоманда);
						КонецЕсли;
					КонецЦикла;
					Если ЗначениеЗаполнено(Телефон1) Тогда
						ТелефонПристава1 = ПриставОб.Телефоны.Добавить();
						ТелефонПристава1.ВидТелефона = бит_ФССП_Переопределяемый.ПолучитьВидТелефонаРабочий();
						бит_ФССП_Переопределяемый.ОбработатьНомерТелефона(ТелефонПристава1,Телефон1);
					КонецЕсли;
					Если ЗначениеЗаполнено(Телефон2) Тогда
						ТелефонПристава2 = ПриставОб.Телефоны.Добавить();
						ТелефонПристава2.ВидТелефона = бит_ФССП_Переопределяемый.ПолучитьВидТелефонаРабочий();
						бит_ФССП_Переопределяемый.ОбработатьНомерТелефона(ТелефонПристава2,Телефон2);
					КонецЕсли;
					Если ЗначениеЗаполнено(Телефон3) Тогда
						ТелефонПристава3 = ПриставОб.Телефоны.Добавить();
						ТелефонПристава3.ВидТелефона = бит_ФССП_Переопределяемый.ПолучитьВидТелефонаРабочий();
						бит_ФССП_Переопределяемый.ОбработатьНомерТелефона(ТелефонПристава3,Телефон3);
					КонецЕсли;		
					бит_ФССП_Переопределяемый.СвернутьДублиТЧтелефоны(ПриставОб.Телефоны);
					ПриставОб.Записать();
				Исключение;
				КонецПопыткИ;
			КонецЕсли;
		КонецЕсли;
		МассивИП.Добавить(стр);
	КонецЦикла;
	Возврат МассивИП;
КонецФункции


Процедура СообщитьОбОшибке(ТекстОшибки)
	Об = Задачи.Сообщения.СоздатьЗадачу();
	Об.ТипСообщения = Перечисления.ТипыСообщений.КСотруднику;
	Об.Наименование = "Ошибка при обработке данных ФССП";
	Об.Текст = ТекстОшибки;
	Об.Автор = ПараметрыСеанса.ТекущийПользователь;
	Об.Дата = ТекущаяДатаСеанса();
	Об.ПланируемаяДата = Об.Дата;
	Об.Сотрудник = ПараметрыСеанса.ТекущийПользователь;
	Об.Записать();
КонецПроцедуры



Процедура КомментыНовые()
//	                                    1111.txt

//&НаСервере
//Процедура СоздатьЗадание(НомерЗадания, ВидЗадания) Экспорт
//        МенеджерЗаписи =
//РегистрыСведений.ЛогированиеЗапросовФССП.СоздатьМенеджерЗаписи();
//        МенеджерЗаписи.task = НомерЗадания;
//        МенеджерЗаписи.Статус = 5;
//        МенеджерЗаписи.ДатаСоздания = ТекущаяДата();
//        МенеджерЗаписи.Учетка = Константы.УчеткаФССП.Получить();
//        МенеджерЗаписи.ВидЗадания = ВидЗадания;
//        МенеджерЗаписи.Записать();
//КонецПроцедуры

//&НаСервере
//Процедура ЗавершитьЗадание(НомерЗадания) Экспорт
//        Запрос = Новый Запрос("ВЫБРАТЬ
//                              | ЛогированиеЗапросовФССП.task КАК task
//                              |ИЗ
//                              | РегистрСведений.ЛогированиеЗапросовФССП КАК
//ЛогированиеЗапросовФССП
//                              |ГДЕ
//                              | ЛогированиеЗапросовФССП.task = &НомерЗадания");
//        Запрос.УстановитьПараметр("НомерЗадания", НомерЗадания);
//        Результат = Запрос.Выполнить().Выбрать();
//        Пока Результат.Следующий() Цикл
//                МенеджерЗаписи =
//РегистрыСведений.ЛогированиеЗапросовФССП.СоздатьМенеджерЗаписи();
//                МенеджерЗаписи.task = Результат.task;
//                МенеджерЗаписи.Прочитать();
//                МенеджерЗаписи.Завершено = Истина;
//                МенеджерЗаписи.Записать();
//        КонецЦикла;
//КонецПроцедуры

//&НаСервере
//Процедура ЗавершитьАктивныеЗадания()
//        Запрос = Новый Запрос("ВЫБРАТЬ
//                              | ЛогированиеЗапросовФССП.task КАК task
//                              |ИЗ
//                              | РегистрСведений.ЛогированиеЗапросовФССП КАК
//ЛогированиеЗапросовФССП
//                              |ГДЕ
//                              | ЛогированиеЗапросовФССП.Завершено = ЛОЖЬ");
//        Результат = Запрос.Выполнить().Выбрать();
//        Пока Результат.Следующий() Цикл
//                МенеджерЗаписи =
//РегистрыСведений.ЛогированиеЗапросовФССП.СоздатьМенеджерЗаписи();
//                МенеджерЗаписи.task = Результат.task;
//                МенеджерЗаписи.Прочитать();
//                МенеджерЗаписи.Завершено = Истина;
//                МенеджерЗаписи.Записать();
//        КонецЦикла;
//                                   Страница 1
//                                     1111.txt
//КонецПроцедуры

//&НаСервере
//Процедура СоздатьПулЗаданийМассовыйЗапрос() Экспорт
//        token = ПолучитьТокен();
//        token = СтрЗаменить(token," ","");

//        Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
//                              | ОбъектыВРаботеОстатки.Объект.Должник КАК
//ОбъектДолжник
//                              |ИЗ
//                              | РегистрНакопления.ОбъектыВРаботе.Остатки КАК
//ОбъектыВРаботеОстатки
//                              |ГДЕ
//                              | ЕСТЬNULL(ОбъектыВРаботеОстатки.Объект.Должник,
//0) <> 0
//                              | И ОбъектыВРаботеОстатки.Объект.Должник.ЮрФизЛицо
//= &ЮрФизЛицо
//                              | И
//ОбъектыВРаботеОстатки.Объект.Должник.ПометкаУдаления = ЛОЖЬ
//                              |
//                              |УПОРЯДОЧИТЬ ПО
//                              |
//ОбъектыВРаботеОстатки.Объект.Должник.Наименование");
//        Запрос.УстановитьПараметр("ЮрФизЛицо", Справочники.ЮрФизЛицо.ФизЛицо);
//        Результат = Запрос.Выполнить().Выбрать();
//        к = 0;
//        Пока Результат.Следующий() Цикл
//                Если к = 0 Тогда
//                        тЗаписьJSON = Новый ЗаписьJSON;
//                        тПараметрыJSON = Новый
//ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);
//                        тЗаписьJSON.УстановитьСтроку(тПараметрыJSON);

//                         тДанные = Новый Структура;
//                         тДанные.Вставить("token", token);
//                         тЗапросы = Новый Массив;
//                 КонецЕсли;

//                ФИО = Результат.ОбъектДолжник.Наименование;
//                Фамилия = Лев(ФИО, СтрНайти(ФИО, " ") - 1);
//                Имя = Сред(ФИО, СтрНайти(ФИО, " ") + 1, СтрНайти(ФИО, " ", ,,2)
//- СтрНайти(ФИО, " ") );
//                Отчество = Сред(ФИО, СтрНайти(ФИО, " ", ,,2), стрДлина(ФИО) -
//СтрНайти(ФИО, " ", ,,2) + 1);
//                Регион = ПолучитьКодРегионаПоДолжнику(Результат.ОбъектДолжник);
//                ДатаРождения =
//ОбъектыСервер.ПолучитьЗначениеСвойства(Результат.ОбъектДолжник, "0047     ");
//                стрДата = Лев(Строка(ДатаРождения), 10);
//                //стрДата = "date(" + Лев(Строка(ДатаРождения), 10) + ")";

//                 тЗапрос = Новый Структура;
//                                    Страница 2
//                                    1111.txt
//                тЗапрос.Вставить("type", 1);
//                тПараметры = Новый Структура;
//                тПараметры.Вставить("firstname", Имя);
//                тПараметры.Вставить("lastname", Фамилия);
//                тПараметры.Вставить("secondname", Отчество);
//                тПараметры.Вставить("region", Регион);
//                тПараметры.Вставить("birthdate", стрДата);
//                тЗапрос.Вставить("params", тПараметры);
//                тЗапросы.Добавить(тЗапрос);

//                Если к = РазмерГрупповогоЗапроса() - 1 Тогда
//                        тДанные.Вставить("request", тЗапросы);
//                        ЗаписатьJSON(тЗаписьJSON, тДанные);
//                        strJSON = тЗаписьJSON.Закрыть();
//                        Сервер = "api-ip.fssprus.ru";
//                        Ресурс = "/api/v1.0/search/group";
//                        HTTPЗапрос = Новый HTTPЗапрос;
//                        HTTPЗапрос.УстановитьТелоИзСтроки(strJSON);

//                        HTTPЗапрос.АдресРесурса = Ресурс;
//                        КоличествоПопыток = 0;

//                        Пока КоличествоПопыток < 5 Цикл
//                                Попытка
//                                        ssl = Новый ЗащищенноеСоединениеOpenSSL;

//                                        HTTP = Новый
//HTTPСоединение(Сервер,,,,,,ssl);
//                                        ИмяВыходногоФайла =
//ПолучитьИмяВременногоФайла();
//                                        HTTPЗапрос.Заголовки.Вставить("accept",
//"application/json");

//HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");

//                                        ОтветHTTP =
//HTTP.ОтправитьДляОбработки(HTTPЗапрос,ИмяВыходногоФайла);
//                                        ЧтениеJSON = Новый ЧтениеJSON;


//ЧтениеJSON.ОткрытьФайл(имяВыходногоФайла);
//                                        СтруктураJSON =
//ПрочитатьJSON(ЧтениеJSON);
//                                        Если СтруктураJSON.status = "error"
//тогда
//                                                КоличествоПопыток =
//КоличествоПопыток + 1;
//                                                Если КоличествоПопыток = 5 Тогда
//                                                        Сообщить("Ошибка при
//выполнении запроса!");
//                                                КонецЕсли;
//                                        ИначеЕсли СтруктураJSON.status =
//                                   Страница 3
//                                      1111.txt
//"success" тогда

//СоздатьЗадание(СтруктураJSON.response.task, Перечисления.ВидыЗаданийФССП.group);
//                                                КоличествоПопыток = 5;
//                                        КонецЕсли;

//                                          ЧтениеJSON.Закрыть();
//                                          УдалитьФайлы(имяВыходногоФайла);
//                                  Исключение
//                                          КоличествоПопыток = КоличествоПопыток +
//1;
//                                  КонецПопытки;
//                          КонецЦикла;
//                          к = 0;
//                  Иначе
//                        к = к + 1;
//                КонецЕсли;
//        КонецЦикла;
//        Если к <> 0 Тогда
//                тДанные.Вставить("request", тЗапросы);
//                ЗаписатьJSON(тЗаписьJSON, тДанные);
//                strJSON = тЗаписьJSON.Закрыть();
//                Сервер = "api-ip.fssprus.ru";
//                Ресурс = "/api/v1.0/search/group";
//                HTTPЗапрос = Новый HTTPЗапрос;
//                HTTPЗапрос.УстановитьТелоИзСтроки(strJSON);
//                HTTPЗапрос.АдресРесурса = Ресурс;
//                ssl = Новый ЗащищенноеСоединениеOpenSSL;
//                HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);

//                  ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();

//                  HTTPЗапрос.Заголовки.Вставить("accept", "application/json");

//                HTTPЗапрос.Заголовки.Вставить("Content-Type",
//"application/json");
//                ОтветHTTP =
//HTTP.ОтправитьДляОбработки(HTTPЗапрос,ИмяВыходногоФайла);
//                ЧтениеJSON = Новый ЧтениеJSON;
//                ЧтениеJSON.ОткрытьФайл(имяВыходногоФайла);
//                СтруктураJSON = ПрочитатьJSON(ЧтениеJSON);
//                Если СтруктураJSON.status = "error" тогда
//                        Сообщить("Ошибка при выполнении запроса!");
//                ИначеЕсли СтруктураJSON.status = "success" тогда
//                        СоздатьЗадание(СтруктураJSON.response.task,
//Перечисления.ВидыЗаданийФССП.group);
//                КонецЕсли;
//                ЧтениеJSON.Закрыть();
//                УдалитьФайлы(имяВыходногоФайла);
//        КонецЕсли;
//КонецПроцедуры

//                                     Страница 4
//                                    1111.txt
//&НаСервере
//Процедура СформироватьДанныеДляВыгрузки() Экспорт
//        token = ПолучитьТокен();
//        token = СтрЗаменить(token," ","");

//        НомерОчереди = ПолучитьНомерОчереди();

//        Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
//                              | ОбъектыВРаботеОстатки.Объект.Должник КАК
//ОбъектДолжник
//                              |ИЗ
//                              | РегистрНакопления.ОбъектыВРаботе.Остатки КАК
//ОбъектыВРаботеОстатки
//                              |ГДЕ
//                              | ЕСТЬNULL(ОбъектыВРаботеОстатки.Объект.Должник,
//0) <> 0
//                              | И ОбъектыВРаботеОстатки.Объект.Должник.ЮрФизЛицо
//= &ЮрФизЛицо
//                              | И
//ОбъектыВРаботеОстатки.Объект.Должник.ПометкаУдаления = ЛОЖЬ
//                              |
//                              |УПОРЯДОЧИТЬ ПО
//                              |
//ОбъектыВРаботеОстатки.Объект.Должник.Наименование");
//        Запрос.УстановитьПараметр("ЮрФизЛицо", Справочники.ЮрФизЛицо.ФизЛицо);
//        Результат = Запрос.Выполнить().Выбрать();
//        к = 0;
//        Пока Результат.Следующий() Цикл
//                Если к = 0 Тогда
//                        ДокументОбъект =
//Документы.ЗапросыПоИП.СоздатьДокумент();
//                        ДокументОбъект.Автор =
//Константы.ПолучательТехническихСообщений.Получить();
//                        ДокументОбъект.Организация =
//Константы.ПолучательТехническихСообщений.Получить().Организация;
//                        ДокументОбъект.Дата = ТекущаяДата();
//                        ДокументОбъект.НомерОчереди = НомерОчереди;
//                        ДокументОбъект.Статус =
//Перечисления.СтатусыЗаданийИП.ГотовКВыгрузке;

//                        тЗаписьJSON = Новый ЗаписьJSON;
//                        тПараметрыJSON = Новый
//ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);
//                        тЗаписьJSON.УстановитьСтроку(тПараметрыJSON);

//                        тДанные = Новый Структура;
//                        тДанные.Вставить("token", token);
//                        тЗапросы = Новый Массив;
//                КонецЕсли;

//                ФИО = Результат.ОбъектДолжник.Наименование;
//                ФИО = СтрЗаменить(ФИО, " ", " ");
//                                   Страница 5
//                                    1111.txt
//                Фамилия = Лев(ФИО, СтрНайти(ФИО, " ") - 1);
//                Имя = Сред(ФИО, СтрНайти(ФИО, " ") + 1, СтрНайти(ФИО, " ", ,,2)
//- СтрНайти(ФИО, " ") );
//                Отчество = Сред(ФИО, СтрНайти(ФИО, " ", ,,2)+1, стрДлина(ФИО) -
//СтрНайти(ФИО, " ", ,,2) + 1);

//               Фамилия = стрЗаменить(Фамилия, "ё", "е");
//               Имя = стрЗаменить(Имя, "ё", "е");
//               Отчество = стрЗаменить(Отчество, "ё", "е");

//                Регион = ПолучитьКодРегионаПоДолжнику(Результат.ОбъектДолжник);
//                ДатаРождения =
//ОбъектыСервер.ПолучитьЗначениеСвойства(Результат.ОбъектДолжник, "0047     ");
//                стрДата = Лев(Строка(ДатаРождения), 10);
//                //стрДата = "date(" + Лев(Строка(ДатаРождения), 10) + ")";

//               тЗапрос = Новый Структура;
//               тЗапрос.Вставить("type", 1);
//               тПараметры = Новый Структура;
//               тПараметры.Вставить("firstname", Имя);
//               тПараметры.Вставить("lastname", Фамилия);
//               тПараметры.Вставить("secondname", Отчество);
//               тПараметры.Вставить("region", Регион);
//               тПараметры.Вставить("birthdate", стрДата);
//               тЗапрос.Вставить("params", тПараметры);
//               тЗапросы.Добавить(тЗапрос);

//                //ДокументЗадание = Документы.ЗаданияПоИП.СоздатьДокумент();
//                //ДокументЗадание.Автор =
//Константы.ПолучательТехническихСообщений.Получить();
//                //ДокументЗадание.Организация =
//Константы.ПолучательТехническихСообщений.Получить().Организация;
//                //ДокументЗадание.Дата = ТекущаяДата();
//                //ДокументЗадание.Должник = Результат.ОбъектДолжник;
//                //ДокументЗадание.birthdate = стрДата;
//                //ДокументЗадание.region = Регион;
//                //ДокументЗадание.firstname = Имя;
//                //ДокументЗадание.lastname = Фамилия;
//                //ДокументЗадание.secondname = Отчество;
//                //ДокументЗадание.НомерОчереди = НомерОчереди;
//                //ДокументЗадание.Статус =
//Перечисления.СтатусыЗаданийИП.ГотовКВыгрузке;
//                //ДокументЗадание.Записать(РежимЗаписиДокумента.Проведение);

//               стрЗадание = ДокументОбъект.Задания.Добавить();
//               стрЗадание.Должник = Результат.ОбъектДолжник;
//               стрЗадание.birthdate = стрДата;
//               стрЗадание.region = Регион;
//               стрЗадание.firstname = Имя;
//               стрЗадание.lastname = Фамилия;
//               стрЗадание.secondname = Отчество;

//                                   Страница 6
//                                    1111.txt
//                стрЗадание.Статус =
//Перечисления.СтатусыЗаданийИП.ГотовКВыгрузке;


//                //стрЗадание.Задание = ДокументЗадание.Ссылка;

//                Если к = РазмерГрупповогоЗапроса() - 1 Тогда
//                        тДанные.Вставить("request", тЗапросы);
//                        ЗаписатьJSON(тЗаписьJSON, тДанные);
//                        strJSON = тЗаписьJSON.Закрыть();

//                        ДокументОбъект.strJSON = strJSON;
//                        ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение,
//РежимПроведенияДокумента.Неоперативный);
//                        к = 0;
//                Иначе
//                        к = к + 1;
//                КонецЕсли;
//        КонецЦикла;
//        Если к <> 0 Тогда
//                тДанные.Вставить("request", тЗапросы);
//                ЗаписатьJSON(тЗаписьJSON, тДанные);
//                strJSON = тЗаписьJSON.Закрыть();

//                ДокументОбъект.strJSON = strJSON;
//                ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение,
//РежимПроведенияДокумента.Неоперативный);
//        КонецЕсли;
//КонецПроцедуры

//&НаСервере
//Процедура ОсуществитьВыгрузку() Экспорт
//        НомерОчереди = ПолучитьНомерОчереди();
//        Запрос = Новый Запрос("ВЫБРАТЬ Первые 10
//                              | ЗапросыПоИП.Ссылка КАК Ссылка
//                              |ИЗ
//                              | Документ.ЗапросыПоИП КАК ЗапросыПоИП
//                              |ГДЕ
//                              | ЗапросыПоИП.Статус = &Статус
//                              | И ЗапросыПоИП.НомерОчереди = &НомерОчереди
//                              | И ЗапросыПоИП.ПометкаУдаления = ЛОЖЬ");
//        Запрос.УстановитьПараметр("НомерОчереди", НомерОчереди);
//        Запрос.УстановитьПараметр("Статус",
//Перечисления.СтатусыЗаданийИП.ГотовКВыгрузке);

//        ЧислоОбработанныхПакетно = 0;
//        ЧислоОбработанныхЕдинично = 0;

//        Результат = Запрос.Выполнить().Выбрать();
//        Пока Результат.Следующий() Цикл
//                Пакет = Результат.Ссылка;
//                Если Не ОбработатьПакетГрупповымЗапросом(Пакет) Тогда
//                                   Страница 7
//                                    1111.txt
//                        Если Не ОбработатьПакетЕдиничнымиЗапросами(Пакет) Тогда
//                                ВызватьИсключение("Ошибка выгрузки данных. Пакет
//№ " + Пакет.Номер);
//                        КонецЕсли;
//                КонецЕсли;
//        КонецЦикла;
//КонецПроцедуры

//&НаСервере
//Функция ОбработатьПакетГрупповымЗапросом(Пакет)
//        token = ПолучитьТокен();
//        token = СтрЗаменить(token," ","");
//        ПакетОбъект = Пакет.ПолучитьОбъект();
//        strJSON = ПакетОбъект.strJSON;


//        //ПакетОбъект = Документы.ЗапросыПоИП.СоздатьДокумент();

//        Сервер = "api-ip.fssprus.ru";
//        Ресурс = "/api/v1.0/search/group";

//        КоличествоПопыток = 0;

//        Пока КоличествоПопыток < 12 Цикл
//                Попытка
//                        HTTPЗапрос = Новый HTTPЗапрос;
//                        HTTPЗапрос.УстановитьТелоИзСтроки(strJSON);

//                        HTTPЗапрос.АдресРесурса = Ресурс;
//                        ssl = Новый ЗащищенноеСоединениеOpenSSL;

//                        HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);

//                        ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();

//                        HTTPЗапрос.Заголовки.Вставить("accept",
//"application/json");
//                        HTTPЗапрос.Заголовки.Вставить("Content-Type",
//"application/json");
//                        ОтветHTTP =
//HTTP.ОтправитьДляОбработки(HTTPЗапрос,ИмяВыходногоФайла);
//                        ЧтениеJSON = Новый ЧтениеJSON;
//                        ЧтениеJSON.ОткрытьФайл(имяВыходногоФайла);

//                        СтруктураJSON = ПрочитатьJSON(ЧтениеJSON);
//                        Если СтруктураJSON.status = "error" тогда

//                                КоличествоПопыток = КоличествоПопыток + 1;
//                                СделатьПаузу(5);
//                                //Если СтруктураJSON.exception = "Too Many
//Attempts." ИЛИ КоличествоПопыток = 10 Тогда
//                                Если КоличествоПопыток = 12 Тогда
//                                     Страница 8
//                                    1111.txt
//                                        //Сообщить("Ошибка при выполнении
//запроса!");
//                                        ПакетОбъект.Статус =
//Перечисления.СтатусыЗаданийИП.Ошибка;
//                                        Успешно = Ложь;
//                                        ПакетОбъект.ТекстОшибки =
//СтруктураJSON.exception;
//                                        ПакетОбъект.КодОшибки =
//СтруктураJSON.code;
//                                        КоличествоПопыток = 12;
//                                КонецЕсли;
//                        ИначеЕсли СтруктураJSON.status = "success" тогда
//                                ПакетОбъект.task = СтруктураJSON.response.task;
//                                ПакетОбъект.ВидЗадания =
//Перечисления.ВидыЗаданийФССП.group;
//                                ПакетОбъект.Статус =
//Перечисления.СтатусыЗаданийИП.Выгружен;
//                                ПакетОбъект.ТекстОшибки = "";
//                                ПакетОбъект.КодОшибки = 0;
//                                ПакетОбъект.КоличествоПопыток =
//КоличествоПопыток + 1;
//                                //СоздатьЗадание(СтруктураJSON.response.task,
//Перечисления.ВидыЗаданийФССП.group);
//                                КоличествоПопыток = 12;
//                                Успешно = Истина;
//                                ПакетОбъект.ДатаВыгрузки = ТекущаяДата();
//                        КонецЕсли;
//                        ЧтениеJSON.Закрыть();
//                        УдалитьФайлы(имяВыходногоФайла);
//                Исключение
//                        КоличествоПопыток = КоличествоПопыток + 1;
//                КонецПопытки;
//        КонецЦикла;

//        ПакетОбъект.Записать(РежимЗаписиДокумента.Проведение,
//РежимПроведенияДокумента.Неоперативный);
//        Возврат Успешно;
//КонецФункции

//&НаСервере
//Функция ОбработатьПакетЕдиничнымиЗапросами(Пакет)
//        ПакетОбъект = Пакет.ПолучитьОбъект();
//        ВремяПаузы = 5;
//        ЧислоДопустимыхОшибок = 12;
//        ЧислоОшибокПодряд = 0;
//        //ПакетОбъект = Документы.ЗапросыПоИП.СоздатьДокумент();
//        к = 0;
//        Пока к < ПакетОбъект.Задания.Количество() Цикл
//                стр = ПакетОбъект.Задания[к];
//                СоздатьЕдиничныйЗапросИзПакета(стр);
//                Если ЗначениеЗаполнено(стр.task) Тогда
//                        к = к + 1;
//                                   Страница 9
//                                    1111.txt
//                        ЧислоОшибокПодряд = 0;
//                ИначеЕсли стр.ТекстОшибки = "Too Many Attempts." Тогда
//                        СделатьПаузу(ВремяПаузы);
//                        ЧислоОшибокПодряд = ЧислоОшибокПодряд + 1;
//                Иначе
//                        ЧислоОшибокПодряд = ЧислоОшибокПодряд + 1;
//                КонецЕсли;
//                Если ЧислоОшибокПодряд = ЧислоДопустимыхОшибок Тогда
//                        Прервать;
//                КонецЕсли;
//        КонецЦикла;

//        Если к = ПакетОбъект.Задания.Количество() Тогда
//                ПакетОбъект.Статус = Перечисления.СтатусыЗаданийИП.Выгружен;
//                ПакетОбъект.ВидЗадания = Перечисления.ВидыЗаданийФССП.physical;
//                ПакетОбъект.ДатаВыгрузки = ТекущаяДата();
//                ПакетОбъект.Записать(РежимЗаписиДокумента.Проведение,
//РежимПроведенияДокумента.Неоперативный);
//                Возврат Истина;
//        Иначе
//                ПакетОбъект.Записать(РежимЗаписиДокумента.Проведение,
//РежимПроведенияДокумента.Неоперативный);
//                Возврат Ложь;
//        КонецЕсли;

//КонецФункции

//Процедура СоздатьЕдиничныйЗапросИзПакета(стр) Экспорт
//        token = ПолучитьТокен();
//        token = СтрЗаменить(token," ","");

//        //ФИО = Должник.Наименование;
//        //Фамилия = Лев(ФИО, СтрНайти(ФИО, " ") - 1);
//        //Имя = Сред(ФИО, СтрНайти(ФИО, " ") + 1, СтрНайти(ФИО, " ", ,,2) -
//СтрНайти(ФИО, " ") );
//        //Отчество = Сред(ФИО, СтрНайти(ФИО, " ", ,,2), стрДлина(ФИО) -
//СтрНайти(ФИО, " ", ,,2) + 1);
//        //Регион = ПолучитьКодРегионаПоДолжнику(Должник);
//        //ДатаРождения = ОбъектыСервер.ПолучитьЗначениеСвойства(Должник, "0047
//  ");
//        //стрДата = Лев(Строка(ДатаРождения), 10);

//        Фамилия = стрЗаменить(стр.lastname, "ё", "е");
//        Имя = стрЗаменить(стр.firstname, "ё", "е");
//        Отчество = стрЗаменить(стр.secondname, "ё", "е");

//        Сервер = "api-ip.fssprus.ru";
//        Ресурс = "/api/v1.0/search/physical";
//        СтрокаПараметров = "?token=" + token + "&region=" + стр.region +
//"&firstname=" + Имя + "&secondname=" + Отчество + "&lastname=" + Фамилия +
//"&birthdate=" + стр.birthdate;
//        HTTPЗапрос = Новый HTTPЗапрос;
//                                  Страница 10
//                                    1111.txt
//        HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаПараметров);
//        HTTPЗапрос.АдресРесурса = Ресурс + СтрокаПараметров;
//        ssl = Новый ЗащищенноеСоединениеOpenSSL;
//        HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);
//        ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();
//        ОтветHTTP = HTTP.Получить(HTTPЗапрос, ИмяВыходногоФайла);
//        ЧтениеJSON = Новый ЧтениеJSON;
//        ЧтениеJSON.ОткрытьФайл(имяВыходногоФайла);

//        Попытка
//                  СтруктураJSON = ПрочитатьJSON(ЧтениеJSON);

//                Если СтруктураJSON.status = "error" тогда
//                        //Сообщить("Ошибка при выполнении запроса!");
//                        стр.Статус = Перечисления.СтатусыЗаданийИП.Ошибка;
//                        стр.ТекстОшибки = СтруктураJSON.exception;
//                        стр.КодОшибки = СтруктураJSON.code;
//                        стр.task = "";
//                ИначеЕсли СтруктураJSON.status = "success" тогда
//                        стр.Статус = Перечисления.СтатусыЗаданийИП.Выгружен;
//                        стр.ТекстОшибки = СтруктураJSON.exception;
//                        стр.КодОшибки = СтруктураJSON.code;
//                        стр.task = СтруктураJSON.response.task;
//                КонецЕсли;
//        Исключение
//                стр.Статус = Перечисления.СтатусыЗаданийИП.Ошибка;
//                стр.ТекстОшибки = "Неизвестная ошибка";
//                стр.КодОшибки = 0;
//                стр.task = "";
//        КонецПопытки;
//        ЧтениеJSON.Закрыть();
//        УдалитьФайлы(имяВыходногоФайла);
//КонецПроцедуры

//Процедура СообщитьРуководителюОбОшибке(ЧислоОбработанныхЕдинично,
//ЧислоОбработанныхПакетно, ВсегоПакетов, Пакет) Экспорт

//КонецПроцедуры

//Процедура СообщитьРуководителюОбУспешномЗавершении(ЧислоОбработанныхЕдинично,
//ЧислоОбработанныхПакетно, ВсегоПакетов) Экспорт

//КонецПроцедуры


//Процедура СообщитьРуководителюОТаймауте(ЧислоОбработанныхЕдинично,
//ЧислоОбработанныхПакетно, ВсегоПакетов, Пакет) Экспорт

//КонецПроцедуры

//&НаСервере
//Функция ПолучитьНомерОчереди() Экспорт
//                                    Страница 11
//                                    1111.txt
//        Возврат Константы.НомерОчередиФССП.Получить();
//КонецФункции

//&НаСервере
//Функция ПолучитьНомерТекущейОчереди() Экспорт
//        Возврат Константы.НомерОчередиФССП.Получить();
//КонецФункции

//&НаСервере
//Процедура СделатьПаузу(КоличествоСекунд)
//        ДатаВыхода = ТекущаяДата() + КоличествоСекунд;
//        Пока ТекущаяДата() < ДатаВыхода Цикл
//                ааа = 1;
//        КонецЦикла;
//КонецПроцедуры

//&НаСервере
//Процедура СоздатьПулЗаданийЕдиничныйЗапрос() Экспорт
//        token = ПолучитьТокен();
//        token = СтрЗаменить(token," ","");

//        Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
//                              | ОбъектыВРаботеОстатки.Объект.Должник КАК
//ОбъектДолжник
//                              |ИЗ
//                              | РегистрНакопления.ОбъектыВРаботе.Остатки КАК
//ОбъектыВРаботеОстатки
//                              |ГДЕ
//                              | ЕСТЬNULL(ОбъектыВРаботеОстатки.Объект.Должник,
//0) <> 0
//                              | И ОбъектыВРаботеОстатки.Объект.Должник.ЮрФизЛицо
//= &ЮрФизЛицо
//                              | И
//ОбъектыВРаботеОстатки.Объект.Должник.ПометкаУдаления = ЛОЖЬ
//                              |
//                              |УПОРЯДОЧИТЬ ПО
//                              |
//ОбъектыВРаботеОстатки.Объект.Должник.Наименование");
//        Запрос.УстановитьПараметр("ЮрФизЛицо", Справочники.ЮрФизЛицо.ФизЛицо);
//        Результат = Запрос.Выполнить().Выбрать();
//        к = 0;
//        Пока Результат.Следующий() Цикл
//                Если к = 0 Тогда
//                        тЗаписьJSON = Новый ЗаписьJSON;
//                        тПараметрыJSON = Новый
//ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);
//                        тЗаписьJSON.УстановитьСтроку(тПараметрыJSON);

//                        тДанные = Новый Структура;
//                        тДанные.Вставить("token", token);
//                        тЗапросы = Новый Массив;
//                КонецЕсли;
//                                  Страница 12
//                                    1111.txt

//                ФИО = Результат.ОбъектДолжник.Наименование;
//                Фамилия = Лев(ФИО, СтрНайти(ФИО, " ") - 1);
//                Имя = Сред(ФИО, СтрНайти(ФИО, " ") + 1, СтрНайти(ФИО, " ", ,,2)
//- СтрНайти(ФИО, " ") );
//                Отчество = Сред(ФИО, СтрНайти(ФИО, " ", ,,2), стрДлина(ФИО) -
//СтрНайти(ФИО, " ", ,,2) + 1);
//                Регион = ПолучитьКодРегионаПоДолжнику(Результат.ОбъектДолжник);
//                ДатаРождения =
//ОбъектыСервер.ПолучитьЗначениеСвойства(Результат.ОбъектДолжник, "0047     ");
//                стрДата = Лев(Строка(ДатаРождения), 10);

//                тЗапрос = Новый Структура;
//                тЗапрос.Вставить("type", 1);
//                тПараметры = Новый Структура;
//                тПараметры.Вставить("firstname", Имя);
//                тПараметры.Вставить("lastname", Фамилия);
//                тПараметры.Вставить("secondname", Отчество);
//                тПараметры.Вставить("region", Регион);
//                тПараметры.Вставить("birthdate", стрДата);
//                тЗапрос.Вставить("params", тПараметры);
//                тЗапросы.Добавить(тЗапрос);

//                Если к = РазмерГрупповогоЗапроса() Тогда
//                        тДанные.Вставить("request", тЗапросы);
//                        ЗаписатьJSON(тЗаписьJSON, тДанные);
//                        strJSON = тЗаписьJSON.Закрыть();
//                        Сервер = "api-ip.fssprus.ru";
//                        Ресурс = "/api/v1.0/search/group";
//                        HTTPЗапрос = Новый HTTPЗапрос;
//                        HTTPЗапрос.УстановитьТелоИзСтроки(strJSON);

//                        HTTPЗапрос.АдресРесурса = Ресурс;
//                        ssl = Новый ЗащищенноеСоединениеOpenSSL;

//                        HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);

//                        ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();

//                        HTTPЗапрос.Заголовки.Вставить("accept",
//"application/json");
//                        HTTPЗапрос.Заголовки.Вставить("Content-Type",
//"application/json");
//                        ОтветHTTP =
//HTTP.ОтправитьДляОбработки(HTTPЗапрос,ИмяВыходногоФайла);
//                        ЧтениеJSON = Новый ЧтениеJSON;
//                        ЧтениеJSON.ОткрытьФайл(имяВыходногоФайла);

//                        СтруктураJSON = ПрочитатьJSON(ЧтениеJSON);
//                        Если СтруктураJSON.status = "error" тогда
//                                Сообщить("Ошибка при выполнении запроса!");
//                        ИначеЕсли СтруктураJSON.status = "success" тогда
//                                  Страница 13
//                                    1111.txt
//                                СоздатьЗадание(СтруктураJSON.response.task,
//Перечисления.ВидыЗаданийФССП.physical);
//                        КонецЕсли;
//                        ЧтениеJSON.Закрыть();
//                        УдалитьФайлы(имяВыходногоФайла);
//                        к = 0;
//                Иначе
//                        к = к + 1;
//                КонецЕсли;
//        КонецЦикла;
//        Если к <> РазмерГрупповогоЗапроса() Тогда
//                тДанные.Вставить("request", тЗапросы);
//                ЗаписатьJSON(тЗаписьJSON, тДанные);
//                strJSON = тЗаписьJSON.Закрыть();
//                Сервер = "api-ip.fssprus.ru";
//                Ресурс = "/api/v1.0/search/group";
//                HTTPЗапрос = Новый HTTPЗапрос;
//                HTTPЗапрос.УстановитьТелоИзСтроки(strJSON);
//                HTTPЗапрос.АдресРесурса = Ресурс;
//                ssl = Новый ЗащищенноеСоединениеOpenSSL;
//                HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);

//                 ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();

//                 HTTPЗапрос.Заголовки.Вставить("accept", "application/json");

//                HTTPЗапрос.Заголовки.Вставить("Content-Type",
//"application/json");
//                ОтветHTTP =
//HTTP.ОтправитьДляОбработки(HTTPЗапрос,ИмяВыходногоФайла);
//                ЧтениеJSON = Новый ЧтениеJSON;
//                ЧтениеJSON.ОткрытьФайл(имяВыходногоФайла);
//                СтруктураJSON = ПрочитатьJSON(ЧтениеJSON);
//                Если СтруктураJSON.status = "error" тогда
//                        Сообщить("Ошибка при выполнении запроса!");
//                ИначеЕсли СтруктураJSON.status = "success" тогда
//                        СоздатьЗадание(СтруктураJSON.response.task,
//перечисления.ВидыЗаданийФССП.physical);
//                КонецЕсли;
//                ЧтениеJSON.Закрыть();
//                УдалитьФайлы(имяВыходногоФайла);
//        КонецЕсли;

//КонецПроцедуры

//&НаСервере
//Процедура ОбработатьВсеЗадания() Экспорт

//        Запрос = Новый Запрос("ВЫБРАТЬ
//                              | ЛогированиеЗапросовФССП.task КАК task,
//                              | ЛогированиеЗапросовФССП.Учетка КАК Учетка
//                              |ИЗ
//                                   Страница 14
//                                     1111.txt
//                               | РегистрСведений.ЛогированиеЗапросовФССП КАК
//ЛогированиеЗапросовФССП
//                              |ГДЕ
//                              | ЛогированиеЗапросовФССП.Завершено = ЛОЖЬ
//                              | И ЛогированиеЗапросовФССП.ВидЗадания =
//ЗНАЧЕНИЕ(Перечисление.ВидыЗаданийФССП.group)");
//        Результат = Запрос.Выполнить().Выбрать();
//        Пока Результат.Следующий() Цикл
//                Сервер = "api-ip.fssprus.ru";
//                Ресурс = "/api/v1.0/result";
//                СтрокаПараметров = "?token=" + Результат.Учетка.token + "&task="
//+ Результат.task; //ca7d41a2-080a-4e4f-a8f7-7c0140107924
//                HTTPЗапрос = Новый HTTPЗапрос;
//                HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаПараметров);
//                HTTPЗапрос.АдресРесурса = Ресурс + СтрокаПараметров;
//                ssl = Новый ЗащищенноеСоединениеOpenSSL;
//                HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);
//                ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();
//                ОтветHTTP = HTTP.Получить(HTTPЗапрос, ИмяВыходногоФайла);
//                ЧтениеJSON = Новый ЧтениеJSON;
//                ЧтениеJSON.ОткрытьФайл(имяВыходногоФайла);

//                СтруктураJSON = ПрочитатьJSON(ЧтениеJSON);
//                Если СтруктураJSON.status = "error" тогда
//                        Сообщить("Ошибка при выполнении запроса-ответа!");
//                ИначеЕсли СтруктураJSON.status = "success" И
//Число(СтруктураJSON.response.status) <=1 Тогда
//                        ДокументОбъект =
//Документы.ЗапросыПоИП.СоздатьДокумент();
//                        ДокументОбъект.Автор =
//Константы.ПолучательТехническихСообщений.Получить();
//                        ДокументОбъект.Организация =
//Константы.ПолучательТехническихСообщений.Получить().Организация;
//                        ДокументОбъект.task = Результат.task;
//                        ДокументОбъект.Дата = ТекущаяДата();

//                          Для Каждого ДолжникJSON из СтруктураJSON.response.result
//Цикл

//                                 Если ДолжникJSON.status = 0 Тогда
//                                         стр = ДокументОбъект.Задания.Добавить();
//                                         Параметры = ДолжникJSON.query.params;

//                                        ДокументЗадание =
//Документы.ЗаданияПоИП.СоздатьДокумент();

//ЗаполнитьЗначенияСвойств(ДокументЗадание, Параметры);
//                                        Для Каждого ИП из ДолжникJSON.result
//Цикл
//                                                ОбъектЗадание =
//ДокументЗадание.Объекты.Добавить();

//                                    Страница 15
//                                    1111.txt
//ЗаполнитьЗначенияСвойств(ОбъектЗадание, ИП);
//                                        КонецЦикла;
//                                        ДокументЗадание.Автор =
//Константы.ПолучательТехническихСообщений.Получить();
//                                        ДокументЗадание.Организация =
//Константы.ПолучательТехническихСообщений.Получить().Организация;
//                                        ДокументЗадание.Дата = ТекущаяДата();

//ДокументЗадание.Записать(РежимЗаписиДокумента.Проведение);
//                                        стр.Задание = ДокументЗадание.Ссылка;
//                                Конецесли;
//                        КонецЦикла;

//ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);

//                        Сообщить("Данные по заданию загружены!");
//                ИначеЕсли СтруктураJSON.status = "success" и
//СтруктураJSON.response.status > 1 тогда
//                        Сообщить("Задание еще не обработано!");
//                КонецЕсли;


//                ЧтениеJSON.Закрыть();
//                //
//                // удаляем файл после использования
//                УдалитьФайлы(имяВыходногоФайла);
//        КонецЦикла;
//КонецПроцедуры

//&НаСервере
//Процедура ОбработатьДанные() Экспорт
//        НомерОчереди = ПолучитьНомерТекущейОчереди();

//        Запрос = Новый Запрос("ВЫБРАТЬ
//        |       ЗапросыПоИП.Ссылка КАК Ссылка
//        |ИЗ
//        |       Документ.ЗапросыПоИП КАК ЗапросыПоИП
//        |ГДЕ
//        |       ЗапросыПоИП.Статус = &Статус
//        |       И ЗапросыПоИП.НомерОчереди = &НомерОчереди
//        |       И ЗапросыПоИП.ПометкаУдаления = ЛОЖЬ");
//        Запрос.УстановитьПараметр("НомерОчереди", НомерОчереди);
//        Запрос.УстановитьПараметр("Статус",
//Перечисления.СтатусыЗаданийИП.ЗагруженыДанные);
//        Результат = Запрос.Выполнить().Выбрать();
//        Пока Результат.Следующий() Цикл
//                Запрос = Результат.Ссылка;
//                Задания = Запрос.Задания;

//                Для Каждого стр из Задания Цикл
//                        Задание = стр.Задание;

//                                  Страница 16
//                                    1111.txt
//                        //ФИО = Задание.lastname + " " + Задание.firstname + " "
//+ Задание.secondname;
//                        //Попытка
//                        //      ДатаРождения = Дата(Задание.birthdate + "
//00:00:00");
//                        //Исключение
//                        //      ДатаРождения = Неопределено;
//                        //КонецПопытки;
//                        //Должник = ПолучитьДолжника(ФИО, ДатаРождения);
//                        //ДокументДолжник = Должник;
//                        Должник = стр.Должник;
//                        Если Задание.Объекты.Количество() = 0 Тогда
//                                Если Не ЕстьНезавершенныеИППоДолжнику(Должник)
//Тогда
//                                        Продолжить;
//                                Иначе
//                                        ДокументИП =
//ДОкументы.ИсполнительноеПроизводство.СоздатьДокумент();
//                                        ДокументИП.task = Запрос.task;
//                                        //ДокументИП.Автор =
//Константы.ПолучательТехническихСообщений.Получить();
//                                        ДокументИП.Организация =
//Справочники.Организации.НайтиПоКоду("000000002");
//                                        ДокументИП.Комментарий = "Регламентное
//задание";
//                                        ДокументИП.Дата = ТекущаяДата();
//                                        ДокументИП.Должник = Должник;

//ДокументИП.Записать(РежимЗаписиДокумента.Проведение,
//РежимПроведенияДокумента.Неоперативный);
//                                        Продолжить;
//                                КонецЕсли;
//                        КонецЕсли;

//                        МассивИП =
//ИнтеграцияФССП.ЗаполнитьДанныеДокумента1С(Задание, Должник, Истина);
//                        ДокументИП =
//ДОкументы.ИсполнительноеПроизводство.СоздатьДокумент();
//                        ДокументИП.task = Запрос.task;
//                        //ДокументИП.Автор =
//Константы.ПолучательТехническихСообщений.Получить();
//                        ДокументИП.Организация =
//Справочники.Организации.НайтиПоКоду("000000002");
//                        ДокументИП.Комментарий = "Регламентное задание";
//                        ДокументИП.Дата = ТекущаяДата();
//                        ДокументИП.Должник = Должник;
//                        Записывать = Ложь;
//                        Для Каждого ип из МассивИП Цикл
//                                стр = ДокументИП.Объекты.Добавить();
//                                ЗаполнитьЗначенияСвойств(стр, ИП);
//                                Если ИП.ЕстьИзменения Тогда
//                                        Записывать = Истина;
//                                  Страница 17
//                                    1111.txt
//                                КонецЕсли;
//                        КонецЦикла;
//                        Если Записывать Тогда

//ДокументИП.Записать(РежимЗаписиДокумента.Проведение,
//РежимПроведенияДокумента.Неоперативный);
//                        КонецЕсли;
//                КонецЦикла;
//                ЗапросОбъект = Запрос.ПолучитьОбъект();
//                ЗапросОбъект.Статус =
//Перечисления.СтатусыЗаданийИП.ДокументыСформированы;
//                ЗапросОбъект.ДатаОбработки = ТекущаяДата();
//                ЗапросОбъект.Записать(РежимЗаписиДокумента.Проведение,
//РежимПроведенияДокумента.Неоперативный);
//        КонецЦикла;
//КонецПроцедуры

//&НаСервере
//Процедура ЗагрузитьДанные() Экспорт
//        НомерОчереди = ПолучитьНомерТекущейОчереди();
//        token = ПолучитьТокен();
//        token = СтрЗаменить(token," ","");
//        Сервер = "api-ip.fssprus.ru";
//        Ресурс = "/api/v1.0/result";


//        ВремяПаузы = 5;
//        ЧислоДопустимыхОшибок = 12;
//        ЧислоОшибокПодряд = 0;


//        Запрос = Новый Запрос("ВЫБРАТЬ
//        |       ЗапросыПоИП.Ссылка КАК Ссылка,
//        |       ЗапросыПоИП.task КАК task
//        |ИЗ
//        |       Документ.ЗапросыПоИП КАК ЗапросыПоИП
//        |ГДЕ
//        |       ЗапросыПоИП.ПометкаУдаления = ЛОЖЬ
//        |       И ЗапросыПоИП.НомерОчереди = &НомерОчереди
//        |       И ЗапросыПоИП.Статус = &Статус
//        |       И ЗапросыПоИП.ВидЗадания = &ВидЗадания");
//        Запрос.УстановитьПараметр("НомерОчереди", НомерОчереди);
//        Запрос.УстановитьПараметр("Статус",
//Перечисления.СтатусыЗаданийИП.Выгружен);
//        Запрос.УстановитьПараметр("ВидЗадания",
//Перечисления.ВидыЗаданийФССП.group);
//        Результат = Запрос.Выполнить().Выбрать();
//        Пока Результат.Следующий() Цикл
//                ЧислоОшибокПодряд = 0;
//                ТекстОшибки = "Ошибка загрузки данных групповой запрос.";
//                ДокументОбъект = Результат.Ссылка.ПолучитьОбъект();
//                Пока (ЧислоОшибокПодряд < ЧислоДопустимыхОшибок) Цикл
//                                  Страница 18
//                                    1111.txt
//                        СтрокаПараметров = "?token=" + token + "&task=" +
//Результат.task; //ca7d41a2-080a-4e4f-a8f7-7c0140107924
//                        HTTPЗапрос = Новый HTTPЗапрос;
//                        HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаПараметров);
//                        HTTPЗапрос.АдресРесурса = Ресурс + СтрокаПараметров;
//                        ssl = Новый ЗащищенноеСоединениеOpenSSL;
//                        HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);
//                        ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();

//                        ОтветHTTP = HTTP.Получить(HTTPЗапрос,
//ИмяВыходногоФайла);
//                        ЧтениеJSON = Новый ЧтениеJSON;
//                        ЧтениеJSON.ОткрытьФайл(имяВыходногоФайла);

//                        СтруктураJSON = ПрочитатьJSON(ЧтениеJSON);
//                        Если СтруктураJSON.status = "error" тогда
//                                //Сообщить("Ошибка при выполнении
//запроса-ответа!");
//                                ЧислоОшибокПодряд = ЧислоОшибокПодряд + 1;
//                                СделатьПаузу(5);
//                                ЗагруженоУспешно = Ложь;
//                        ИначеЕсли СтруктураJSON.status = "success" И
//Число(СтруктураJSON.response.status) <=1 Тогда
//                                к = 0;
//                                ЧислоОшибокПодряд = 0;

//                                ЗагруженоУспешно = Истина;
//                                Для Каждого ДолжникJSON из
//СтруктураJSON.response.result Цикл

//                                        Если ДолжникJSON.status = 0 Тогда
//                                                стр = ДокументОбъект.Задания[к];
//                                                //Параметры =
//ДолжникJSON.query.params;

//                                                 ДокументЗадание =
//Документы.ЗаданияПоИП.СоздатьДокумент();


////ЗаполнитьЗначенияСвойств(ДокументЗадание, Параметры);
//                                                Для Каждого ИП из
//ДолжникJSON.result Цикл
//                                                        ОбъектЗадание =
//ДокументЗадание.Объекты.Добавить();

//ЗаполнитьЗначенияСвойств(ОбъектЗадание, ИП);
//                                                 КонецЦикла;
//                                                 ДокументЗадание.Статус =
//Перечисления.СтатусыЗаданийИП.ЗагруженыДанные;
//                                                ДокументЗадание.Автор =
//Константы.ПолучательТехническихСообщений.Получить();
//                                                ДокументЗадание.Организация =
//                                  Страница 19
//                                    1111.txt
//Константы.ПолучательТехническихСообщений.Получить().Организация;
//                                                ДокументЗадание.Дата =
//ТекущаяДата();

//ДокументЗадание.Записать(РежимЗаписиДокумента.Проведение);
//                                                стр.Задание =
//ДокументЗадание.Ссылка;

//                                                   к = к + 1;
//                                          Иначе

//        //ЗагруженоУспешно = Ложь;
//                                                   ТекстОшибки1 = "Ошибка загрузки
//данных групповой запрос.";
//                                                ТекстОшибки1 = ТекстОшибки1 +
//Символы.ПС + "Номер пакета: " + ДокументОбъект.Номер;
//                                                ТекстОшибки1 = ТекстОшибки1 +
//Символы.ПС + "Не загружены данные по должнику: " +
//ДокументОбъект.Задания[к].Должник.Наименование + ". " + "Текст ошибки: " +
//ДолжникJSON.result.message;
//                                                СообщитьОбОшибке(ТекстОшибки1);

//                                                   к = к + 1;

//                                        Конецесли;
//                                КонецЦикла;
//                                ДокументОбъект.Статус =
//Перечисления.СтатусыЗаданийИП.ЗагруженыДанные;
//                                ДокументОбъект.ДатаЗагрузки = ТекущаяДата();

//ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
//                                Прервать;
//                                //Сообщить("Данные по заданию загружены!");
//                        ИначеЕсли СтруктураJSON.status = "success" и
//СтруктураJSON.response.status > 1 тогда
//                                //Сообщить("Задание еще не обработано!");
//                                ЧислоОшибокПодряд = ЧислоОшибокПодряд + 1;
//                                СделатьПаузу(5);
//                                ЗагруженоУспешно = Ложь;
//                        КонецЕсли;


//                        ЧтениеJSON.Закрыть();
//                        //
//                        // удаляем файл после использования
//                        УдалитьФайлы(имяВыходногоФайла);

//                КонецЦИкла;
//                Если Не ЗагруженоУспешно Тогда
//                        ВызватьИсключение("Ошибка загрузки данных групповым
//запросом. Пакет № " + ДОкументОбъект.Номер);
//                КонецЕсли;
//                                     Страница 20
//                                      1111.txt

//        КонецЦикла;

//        ВремяПаузы = 5;
//        ЧислоДопустимыхОшибок = 12;
//        ЧислоОшибокПодряд = 0;

//        Запрос = Новый Запрос("ВЫБРАТЬ
//        |       ЗапросыПоИП.Ссылка КАК Ссылка,
//        |       ЗапросыПоИП.task КАК task
//        |ИЗ
//        |       Документ.ЗапросыПоИП КАК ЗапросыПоИП
//        |ГДЕ
//        |       ЗапросыПоИП.ПометкаУдаления = ЛОЖЬ
//        |       И ЗапросыПоИП.НомерОчереди = &НомерОчереди
//        |       И ЗапросыПоИП.Статус = &Статус
//        |       И ЗапросыПоИП.ВидЗадания = &ВидЗадания");
//        Запрос.УстановитьПараметр("НомерОчереди", НомерОчереди);
//        Запрос.УстановитьПараметр("Статус",
//Перечисления.СтатусыЗаданийИП.Выгружен);
//        Запрос.УстановитьПараметр("ВидЗадания",
//Перечисления.ВидыЗаданийФССП.physical);
//        Результат = Запрос.Выполнить().Выбрать();
//        Пока Результат.Следующий() Цикл
//                //ДокументОбъект = Документы.ЗапросыПоИП.СоздатьДокумент();
//                ДокументОбъект = Результат.Ссылка.ПолучитьОбъект();
//                к = 0;

//                Для Каждого стр из ДокументОбъект.Задания Цикл
//                        ЧислоОшибокПодряд = 0;
//                        Пока (ЧислоОшибокПодряд < ЧислоДопустимыхОшибок) Цикл

//                                СтрокаПараметров = "?token=" + token + "&task="
//+ стр.task;
//                                HTTPЗапрос = Новый HTTPЗапрос;

//HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаПараметров);
//                                HTTPЗапрос.АдресРесурса = Ресурс +
//СтрокаПараметров;
//                                ssl = Новый ЗащищенноеСоединениеOpenSSL;
//                                HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);

//                                ИмяВыходногоФайла =
//ПолучитьИмяВременногоФайла();
//                                ОтветHTTP = HTTP.Получить(HTTPЗапрос,
//ИмяВыходногоФайла);
//                                ЧтениеJSON = Новый ЧтениеJSON;
//                                ЧтениеJSON.ОткрытьФайл(имяВыходногоФайла);

//                                СтруктураJSON = ПрочитатьJSON(ЧтениеJSON);
//                                Если СтруктураJSON.status = "error" тогда
//                                        ЧислоОшибокПодряд = ЧислоОшибокПодряд +
//                                  Страница 21
//                                      1111.txt
//1;
//                                        СделатьПаузу(5);
//                                        ЗагруженоУспешно = ЛОжь;
//                                ИначеЕсли СтруктураJSON.status = "success" И
//Число(СтруктураJSON.response.status) <=1 Тогда

//                                          к = к + 1;
//                                          ЧислоОшибокПодряд = 0;

//                                          ЗагруженоУспешно = Истина;
//                                          Для Каждого ДолжникJSON из
//СтруктураJSON.response.result Цикл

//                                                   Если ДолжникJSON.status = 0
//Тогда
//                                                           //Параметры =
//ДолжникJSON.query.params;

//                                                           ДокументЗадание =
//Документы.ЗаданияПоИП.СоздатьДокумент();

////ЗаполнитьЗначенияСвойств(ДокументЗадание, Параметры);
//                                                           Для Каждого ИП из
//ДолжникJSON.result Цикл
//                                                                   ОбъектЗадание =
//ДокументЗадание.Объекты.Добавить();

//ЗаполнитьЗначенияСвойств(ОбъектЗадание, ИП);
//                                                           КонецЦикла;
//                                                           ДокументЗадание.Статус =
//Перечисления.СтатусыЗаданийИП.ЗагруженыДанные;
//                                                           ДокументЗадание.Автор =
//Константы.ПолучательТехническихСообщений.Получить();

//ДокументЗадание.Организация =
//Константы.ПолучательТехническихСообщений.Получить().Организация;
//                                                        ДокументЗадание.Дата =
//ТекущаяДата();

//ДокументЗадание.Записать(РежимЗаписиДокумента.Проведение);
//                                                        стр.Задание =
//ДокументЗадание.Ссылка;

//                                                   Иначе
//                                                          ЗагруженоУспешно = ЛОжь;
//                                                  Конецесли;
//                                          КонецЦикла;
//                                          Прервать;

//                                ИначеЕсли СтруктураJSON.status = "success" и
//СтруктураJSON.response.status > 1 тогда
//                                        ЧислоОшибокПодряд = ЧислоОшибокПодряд +
//                                     Страница 22
//                                    1111.txt
//1;
//                                        ЗагруженоУспешно = Ложь;
//                                КонецЕсли;

//                                ЧтениеJSON.Закрыть();
//                                //
//                                // удаляем файл после использования
//                                УдалитьФайлы(имяВыходногоФайла);

//                        КонецЦикла;
//                        Если Не ЗагруженоУспешно Тогда
//                                ВызватьИсключение("Ошибка загрузки данных
//единичным запросом. Пакет № " + ДОкументОбъект.Номер);
//                        КонецЕсли;

//                КонецЦикла;
//                Если к = ДокументОбъект.Задания.Количество() Тогда
//                        ДокументОбъект.Статус =
//Перечисления.СтатусыЗаданийИП.ЗагруженыДанные;
//                        ДокументОбъект.ДатаЗагрузки = ТекущаяДата();

//ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
//                КонецЕсли;

//        КонецЦикла;
//КонецПроцедуры

//&НаСервере
//Процедура УдалитьОчередь() Экспорт
//        НомерОчереди = ПолучитьНомерТекущейОчереди();
//        Запрос = Новый Запрос("ВЫБРАТЬ
//                              | ЗапросыПоИП.Ссылка КАК Ссылка
//                              |ИЗ
//                              | Документ.ЗапросыПоИП КАК ЗапросыПоИП
//                              |ГДЕ
//                              | ЗапросыПоИП.НомерОчереди = &НомерОчереди
//                              | И ЗапросыПоИП.Статус = &Статус");
//        Запрос.УстановитьПараметр("НомерОчереди", НомерОчереди);
//        Запрос.УстановитьПараметр("Статус",
//Перечисления.СтатусыЗаданийИП.ДокументыСформированы);
//        Результат = Запрос.Выполнить().Выбрать();
//        Пока Результат.Следующий() Цикл
//                ДокументОбъект = Результат.Ссылка.ПолучитьОбъект();

//                Для Каждого стр из ДокументОбъект.Задания Цикл
//                        Если ЗначениеЗаполнено(стр.Задание) Тогда
//                                ЗаданияОбъект = стр.Задание.ПолучитьОбъект();
//                                ЗаданияОбъект.Удалить();
//                        КонецЕсли;
//                КонецЦикла;
//                ДокументОбъект.Удалить();
//        КонецЦикла;
//                                  Страница 23
//                                    1111.txt
//КонецПроцедуры


//&НаСервере
//Функция ЕстьНезавершенныеИППоДолжнику(Должник)
//        Запрос = Новый Запрос("ВЫБРАТЬ
//                              | СостоянияИПСрезПоследних.ID КАК ID,
//                              | СостоянияИПСрезПоследних.Период КАК Период,
//                              | СостоянияИПСрезПоследних.Должник КАК Должник
//                              |ИЗ
//                              | РегистрСведений.СостоянияИП.СрезПоследних КАК
//СостоянияИПСрезПоследних
//                              |ГДЕ
//                              | СостоянияИПСрезПоследних.Должник = &Должник
//                              | И СостоянияИПСрезПоследних.Завершено = ЛОЖЬ");
//        Запрос.УстановитьПараметр("Должник", Должник);
//        Результат = Запрос.Выполнить().Выбрать();
//        Возврат Результат.Следующий();
//КонецФункции

//&НаСервере
//Функция ПолучитьДолжника(ФИО, ДатаРождения)
//        Запрос = Новый запрос("ВЫБРАТЬ
//                              | Контрагенты.Ссылка КАК Ссылка,
//                              | ДополнительныеСведения.Значение КАК Значение
//                              |ИЗ
//                              | Справочник.Контрагенты КАК Контрагенты
//                              |         ЛЕВОЕ СОЕДИНЕНИЕ
//РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
//                              |         ПО Контрагенты.Ссылка =
//ДополнительныеСведения.Объект
//                              |                 И
//(ДополнительныеСведения.Свойство.Код = ""0047     "")
//                              |ГДЕ
//                              | Контрагенты.Наименование = &Наименование
//                              | И Контрагенты.ПометкаУдаления = ЛОЖЬ
//                              | И ДополнительныеСведения.Значение = &Значение");

//        Запрос.УстановитьПараметр("Наименование", ФИО);
//        Запрос.УстановитьПараметр("Значение", ДатаРождения);
//        Результат = Запрос.Выполнить().Выбрать();
//        Если Результат.Следующий() Тогда
//                Возврат Результат.Ссылка;
//        Иначе
//                Возврат Справочники.Контрагенты.ПустаяСсылка();
//        КонецЕсли;
//КонецФункции

//&НаСервере
//Функция ПолучитьТокен() Экспорт
//        Учетка = Константы.УчеткаФССП.Получить();
//        Попытка
//                                  Страница 24
//                                    1111.txt
//                Возврат Учетка.token;
//        Исключение
//                Возврат "";
//        КонецПопытки;
//КонецФункции

//&НаСервере
//Функция РазмерГрупповогоЗапроса()
//        Возврат 49;
//КонецФункции

//Функция ПреобразоватьТелефон(СтрТелефон) Экспорт
//        УдалитьСкобки=СтрЗаменить(СтрТелефон,"(","");
//        УдалитьСкобки=СтрЗаменить(УдалитьСкобки,")","");
//        УдалитьТире = СтрЗаменить(УдалитьСкобки,"-","");
//        УдалитьРавно = СтрЗаменить(УдалитьСкобки,"=","");
//        УдалитьПлюс = стрЗаменить(УдалитьТире,"+","");

//        ДлинаСтроки= СтрДлина(УдалитьПлюс);
//        ТелефонМассив = Новый Массив;
//        строкаПроверки =
//"АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЫЬЪЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ";

//        Для СчетчикЦифр = 1 по ДлинаСтроки Цикл
//                ТелефонМассив.Добавить(Сред(УдалитьПлюс,СчетчикЦифр,1));
//        КонецЦикла;

//        ОчиститьТелефон = Новый Массив;

//        Для каждого символ из ТелефонМассив Цикл
//                Если СтрНайти(СтрокаПроверки,символ,,,) = 0 Тогда
//                        ОчиститьТелефон.Добавить(Символ);
//                КонецЕсли;
//        КонецЦикла;


//        Если ОчиститьТелефон.Количество() = 11 и ОчиститьТелефон[0] ="8" Тогда
//                Для каждого Символ из ОчиститьТелефон Цикл
//                        СтрокаТелефонбезСимволов =
//Строка(СтрокаТелефонбезСимволов) + Символ;
//                КонецЦикла;
//                Возврат СтрокаТелефонбезСимволов;
//        ИначеЕсли ОчиститьТелефон.Количество() = 11 и ОчиститьТелефон[0] ="7"
//Тогда
//                ОчиститьТелефон[0] ="8";
//                Для каждого Символ из ОчиститьТелефон Цикл
//                        СтрокаТелефонбезСимволов =
//Строка(СтрокаТелефонбезСимволов) + Символ;
//                КонецЦикла;
//                Возврат СтрокаТелефонбезСимволов;
//        ИначеЕсли ОчиститьТелефон.Количество() = 10 Тогда
//                СтрокаТелефонбезСимволов = "8";
//                                    Страница 25
//                                    1111.txt
//                Для каждого Символ из ОчиститьТелефон Цикл
//                        СтрокаТелефонбезСимволов =
//Строка(СтрокаТелефонбезСимволов) + Символ;
//                КонецЦикла;
//                Возврат СтрокаТелефонбезСимволов;
//        ИначеЕсли ОчиститьТелефон.Количество() < 10 Тогда
//                Для каждого Символ из ОчиститьТелефон Цикл
//                        СтрокаТелефонбезСимволов =
//Строка(СтрокаТелефонбезСимволов) + Символ;
//                КонецЦикла;
//                Возврат СтрокаТелефонбезСимволов;
//        КонецЕсли;


//КонецФункции

//Функция ПолучитьКодРегионаПоДолжнику(ОбъектВх) Экспорт

//        // УСТАРЕЛО МЕНЯЕМ НА ФИАС
//        //Адрес = ОбъектыСервер.ПолучитьЗначениеСвойства(ОбъектВх, "0042     ");
//        ////Сообщить(Адрес);
//        //Значение = Адрес;
//        //
//        //Номер = Найти(Значение, ";");
//        //Строка = Прав(Значение, СтрДлина(Значение) - Номер+1);
//        //Строки = СтрЗаменить(Строка, ";", Символы.Пс);
//        //Значение = 0;
//        //Для Номер = 1 По СтрЧислоСтрок(Строки) Цикл
//        //      Стр = СтрПолучитьСтроку(Строки, Номер);
//        //      Если Найти (Стр, "Индекс=") > 0 Тогда
//        //              Значение = Прав(Стр, СтрДлина(стр) - Найти(Стр, "="));
//        //              //Сообщить(Значение);
//        //      КонецЕсли;
//        //КонецЦикла;
//        //
//        //
//        //Запрос = Новый Запрос("ВЫБРАТЬ Первые 1
//        //                      |
//АдресныйКлассификатор.КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде
//        //                      |ИЗ
//        //                      |       РегистрСведений.АдресныйКлассификатор
//КАК АдресныйКлассификатор
//        //                      |ГДЕ
//        //                      |       АдресныйКлассификатор.Индекс =
//&Индекс");
//        //
//        //
//        //Запрос.УстановитьПараметр("Индекс", Значение);
//        //
//        //Результат = Запрос.Выполнить().Выбрать();
//        //Если Результат.Следующий() Тогда
//        //      Значение = Результат.КодАдресногоОбъектаВКоде;
//                                  Страница 26
//                                    1111.txt
//        //Иначе
//        //      Значение = 0;
//        //КонецЕсли;
//        //Возврат Значение;

//        Адрес = ОбъектыСервер.ПолучитьЗначениеСвойства(ОбъектВх, "0042     ");
//        Значение = бит_АдресныйКлассификатор.ПолучитьЧастьАдресаИзФИАС(Адрес,
//"Индекс");
//        Возврат ПолучитьКодРегионаПоИндексу(Значение);

//КонецФункции

//Функция ПолучитьКодРегионаПоИндексу(Индекс) Экспорт


//        //УСТАРЕЛО МЕНЯЕМ НА ФИАС
//        //Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
//        //|     АдресныйКлассификатор.КодАдресногоОбъектаВКоде КАК
//КодАдресногоОбъектаВКоде,
//        //|     АдресныйКлассификатор.Индекс КАК стрИндекc
//        //|ИЗ
//        //|     РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
//        //|ГДЕ
//        //|     АдресныйКлассификатор.Индекс = &Индекс");
//        //
//        //
//        //Запрос.УстановитьПараметр("Индекс", Индекс);
//        //
//        //
//        //Результат = Запрос.Выполнить().Выбрать();
//        //Если Результат.Следующий() Тогда
//        //      Значение = Результат.КодАдресногоОбъектаВКоде;
//        //Иначе
//        //      Запрос1 = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 100
//        //      |       АдресныйКлассификатор.КодАдресногоОбъектаВКоде КАК
//КодАдресногоОбъектаВКоде,
//        //      |       ВЫРАЗИТЬ(АдресныйКлассификатор.Индекс КАК СТРОКА(3)) КАК
//стрИндек
//        //      |ИЗ
//        //      |       РегистрСведений.АдресныйКлассификатор КАК
//АдресныйКлассификатор
//        //      |ГДЕ
//        //      |       (ВЫРАЗИТЬ(АдресныйКлассификатор.Индекс КАК СТРОКА(3))) =
//&Индекс");
//        //
//        //
//        //      Запрос1.УстановитьПараметр("Индекс", Лев(Индекс, 3));
//        //      Результат1 = Запрос1.Выполнить().Выбрать();
//        //      Если Результат1.Следующий() Тогда
//        //              Значение = Результат1.КодАдресногоОбъектаВКоде;
//        //      Иначе
//        //              Значение = 0;
//                                  Страница 27
//                                    1111.txt
//        //      КонецЕсли;
//        //КонецЕсли;
//        //Возврат Значение;
//        Попытка
//                ЧислоИндекс = Число(Индекс);
//        Исключение
//                Возврат 0;
//        КонецПопытки;

//        Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
//                              | ДополнительныеАдресныеСведения.КодСубъектаРФ КАК
//КодАдресногоОбъектаВКоде,
//                              | ДополнительныеАдресныеСведения.ПочтовыйИндекс
//КАК стрИндекc
//                              |ИЗ
//                              | РегистрСведений.ДополнительныеАдресныеСведения
//КАК ДополнительныеАдресныеСведения
//                              |ГДЕ
//                              | ДополнительныеАдресныеСведения.ПочтовыйИндекс =
//&Индекс");


//        Запрос.УстановитьПараметр("Индекс", ЧислоИндекс);


//        Результат = Запрос.Выполнить().Выбрать();
//        Если Результат.Следующий() Тогда
//                 Значение = Результат.КодАдресногоОбъектаВКоде;
//        Иначе
//                 Запрос1 = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
//                                        |
//ДополнительныеАдресныеСведения.КодСубъектаРФ КАК КодАдресногоОбъектаВКоде,
//                                        |
//ВЫРАЗИТЬ(ДополнительныеАдресныеСведения.ПочтовыйИндекс / 1000 - 0.5 КАК ЧИСЛО(3,
//0)) КАК стрИндек
//                                        |ИЗ
//                                        |
//РегистрСведений.ДополнительныеАдресныеСведения КАК
//ДополнительныеАдресныеСведения
//                                        |ГДЕ
//                                        |
//(ВЫРАЗИТЬ(ДополнительныеАдресныеСведения.ПочтовыйИндекс / 1000 - 0.5 КАК
//ЧИСЛО(3, 0))) = &Индекс");


//                Запрос1.УстановитьПараметр("Индекс", Число(Лев(Индекс, 3)));
//                Результат1 = Запрос1.Выполнить().Выбрать();
//                Если Результат1.Следующий() Тогда
//                        Значение = Результат1.КодАдресногоОбъектаВКоде;
//                Иначе
//                        Значение = 0;
//                КонецЕсли;
//                                  Страница 28
//                                      1111.txt
//        КонецЕсли;
//        Возврат Значение;
//КонецФункции

//Функция СоздатьЕдиничныйЗапрос(Должник, Фамилия, Имя, Отчество, ДатаРождения,
//Регион) Экспорт
//        token = ПолучитьТокен();
//        token = СтрЗаменить(token," ","");

//        //ФИО = Должник.Наименование;
//        //Фамилия = Лев(ФИО, СтрНайти(ФИО, " ") - 1);
//        //Имя = Сред(ФИО, СтрНайти(ФИО, " ") + 1, СтрНайти(ФИО, " ", ,,2) -
//СтрНайти(ФИО, " ") );
//        //Отчество = Сред(ФИО, СтрНайти(ФИО, " ", ,,2), стрДлина(ФИО) -
//СтрНайти(ФИО, " ", ,,2) + 1);
//        //Регион = ПолучитьКодРегионаПоДолжнику(Должник);
//        //ДатаРождения = ОбъектыСервер.ПолучитьЗначениеСвойства(Должник, "0047
//  ");
//        стрДата = Лев(Строка(ДатаРождения), 10);

//        Фамилия = стрЗаменить(Фамилия, "ё", "е");
//        Имя = стрЗаменить(Имя, "ё", "е");
//        Отчество = стрЗаменить(Отчество, "ё", "е");

//        Сервер = "api-ip.fssprus.ru";
//        Ресурс = "/api/v1.0/search/physical";
//        СтрокаПараметров = "?token=" + token + "&region=" + Регион +
//"&firstname=" + Имя + "&secondname=" + Отчество + "&lastname=" + Фамилия +
//"&birthdate=" + ДатаРождения;
//        HTTPЗапрос = Новый HTTPЗапрос;
//        HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаПараметров);
//        HTTPЗапрос.АдресРесурса = Ресурс + СтрокаПараметров;
//        ssl = Новый ЗащищенноеСоединениеOpenSSL;
//        HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);
//        ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();
//        ОтветHTTP = HTTP.Получить(HTTPЗапрос, ИмяВыходногоФайла);
//        ЧтениеJSON = Новый ЧтениеJSON;
//        ЧтениеJSON.ОткрытьФайл(имяВыходногоФайла);

//        Попытка
//                  СтруктураJSON = ПрочитатьJSON(ЧтениеJSON);

//                Если СтруктураJSON.status = "error" тогда
//                        Сообщить("Ошибка при выполнении запроса!");
//                        Возврат Неопределено;
//                ИначеЕсли СтруктураJSON.status = "success" тогда
//                        СоздатьЗадание(СтруктураJSON.response.task,
//Перечисления.ВидыЗаданийФССП.physical);
//                        Возврат СтруктураJSON.response.task;
//                КонецЕсли;
//        Исключение
//                Сообщить("Ошибка при выполнении запроса!");
//                                    Страница 29
//                                    1111.txt
//                Возврат Неопределено;
//        КонецПопытки;
//        ЧтениеJSON.Закрыть();
//        УдалитьФайлы(имяВыходногоФайла);
//КонецФункции


//Функция ОбработатьЕдиничноеЗадание(НомерЗадания) Экспорт
//        Сервер = "api-ip.fssprus.ru";
//        Ресурс = "/api/v1.0/result";
//        СтрокаПараметров = "?token=" +
//ПолучитьТокенПоНомеруЗадания(НомерЗадания) + "&task=" + НомерЗадания;
////ca7d41a2-080a-4e4f-a8f7-7c0140107924
//        HTTPЗапрос = Новый HTTPЗапрос;
//        HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаПараметров);
//        HTTPЗапрос.АдресРесурса = Ресурс + СтрокаПараметров;
//        ssl = Новый ЗащищенноеСоединениеOpenSSL;
//        HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);
//        ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();
//        ОтветHTTP = HTTP.Получить(HTTPЗапрос, ИмяВыходногоФайла);
//        ЧтениеJSON = Новый ЧтениеJSON;
//        ЧтениеJSON.ОткрытьФайл(имяВыходногоФайла);

//       Попытка
//                //Попытка
//                //      СтруктураJSON = ПрочитатьJSON(ЧтениеJSON,,"birthdate",
//ФорматДатыJson.ISO);
//                //Исключение
//                        СтруктураJSON = ПрочитатьJSON(ЧтениеJSON);
//                //КонецПопытки;
//                Если СтруктураJSON.status = "error" тогда
//                        Сообщить("Ошибка при выполнении запроса-ответа!");
//                        Возврат Неопределено;
//                ИначеЕсли СтруктураJSON.status = "success" и
//Число(СтруктураJSON.response.status) <= 1 тогда
//                        Сообщить("Данные по заданию загружены!");
//                        Возврат СтруктураJSON.response.result;
//                ИначеЕсли СтруктураJSON.status = "success" и
//Число(СтруктураJSON.response.status) > 1 тогда
//                        Сообщить("Задание еще не обработано!");
//                        Возврат Неопределено;
//                КонецЕсли;
//        Исключение
//                Сообщить("Ошибка при выполнении запроса-ответа!");
//                Возврат Неопределено;
//        КонецПопытки;

//       ЧтениеJSON.Закрыть();
//       //
//       // удаляем файл после использования
//       УдалитьФайлы(имяВыходногоФайла);

//                                  Страница 30
//                                    1111.txt
//КонецФункции

//&наСервере
//Функция ПолучитьТокенПоНомеруЗадания(НомерЗадания)
//        МенеджерЗаписи =
//РегистрыСведений.ЛогированиеЗапросовФССП.СоздатьМенеджерЗаписи();
//        МенеджерЗаписи.task = НомерЗадания;
//        МенеджерЗаписи.Прочитать();
//        Если МенеджерЗаписи.Учетка =
//Справочники.УчетныеЗаписиФССП.ПустаяСсылка() Тогда
//                Учетка = Константы.УчеткаФССП.Получить();
//        Иначе
//                Учетка = МенеджерЗаписи.Учетка;
//        КонецЕсли;
//        Возврат Учетка.token;
//КонецФункции

//&НаСервере
//Функция ЗаполнитьДанныеДокумента(МассивДанных, ДокументДолжник, ГрупповойЗапрос)
//Экспорт
//        МассивИП = Новый Массив;

//        Параметры = МассивДанных.query.params;
//        ФИО = Параметры.lastname + " " + Параметры.firstname + " " +
//Параметры.secondname;
//        Попытка
//                Если ГрупповойЗапрос Тогда
//                        //ДатаРождения = Параметры.birthdate;
//                        ДатаРождения = Дата(Параметры.birthdate);
//                Иначе
//                        //ДатаРождения = Параметры.birthdate;
//                        ДатаРождения = Дата(Параметры.birthdate);
//                КонецЕсли;
//        Исключение
//                //Попытка
//                //      ДатаРождения = Дата(сред(ИП.name, СтрНайти(ИП.name, " ",
//, ,3)+1, 10) + " 00:00:00");
//                //Исключение
//                //      ДатаРождения = Неопределено;
//                //КонецПопытки;
//        КонецПопытки;
//        Должник = ПолучитьДолжника(ФИО, ДатаРождения);
//        ДокументДолжник = Должник;

//       Для Каждого ИП из МассивДанных.result Цикл
//               стр = Новый Структура;
//               стр.Вставить("name",                   ИП.name);
//               стр.Вставить("exe_production", ИП.exe_production);
//               стр.Вставить("details",                ИП.details);
//               стр.Вставить("subject",                ИП.subject);
//               стр.Вставить("department",             ИП.department);
//               стр.Вставить("bailiff",                ИП.bailiff);
//                                  Страница 31
//                                      1111.txt
//                  стр.Вставить("ip_end",                  ИП.ip_end);

//                  НомерИП = ПолучитьНомерОт(ИП.exe_production);

//                  ДатаВозбужденияИП= ПолучитьДатуОт(ИП.exe_production);

//                стр.Вставить("НомерИП",                   НомерИП);
//                стр.Вставить("ID", НомерИП + " от " +
//Лев(Строка(ДатаВозбужденияИП), 10));

//                  Если ПроверитьПредыдущиеЗначенияИП(ИП, стр) Тогда
//                          МассивИП.Добавить(стр);
//                          Продолжить;
//                  КонецЕсли;

//                  ТаблицаДО = ПолучитьТаблицуДО(Должник);
//                  НомерСД = ПолучитьНомерСД(ИП.exe_production);
//                  стр.Вставить("НомерСД",                 НомерСД);
//                  стр.Вставить("Должник",                 Должник);
//                  стр.Вставить("ДатаВозбужденияИП", ДатаВозбужденияИП);

//                  Предмет1 = "";
//                  Предмет2 = "";
//                  Предмет3 = "";
//                  Сумма1 = 0;
//                  Сумма2 = 0;
//                  Сумма3 = 0;
//                  Предмет = ИП.subject;

//                  ПозицияИС = СтрНайти(Предмет, "Исполнительский сбор");
//                  Если ПозицияИС = 0 Тогда
//                      Предмет1стр = Предмет;
//                          Предмет2стр = "";
//                  Иначе
//                          Предмет1стр = Лев(Предмет, ПозицияИС-1);
//                          Предмет2стр = Прав(Предмет, стрдлина(Предмет) -
//ПозицияИС + 1);
//                  КонецЕсли;

//                ПозицияРуб = СтрНайти(Предмет1стр, "руб");
//                Если ПозицияРуб = 0 Тогда
//                        Предмет1 = Предмет1стр;
//                        Сумма1 = 0;
//                Иначе
//                        ИнтеграцияФССП.ПолучитьСуммуИПредмет(Предмет1, Сумма1,
//Лев(Предмет1стр, ПозицияРуб+2));
//                КонецЕсли;

//                  ПозицияРуб = СтрНайти(Предмет2стр, "руб");
//                  Если ПозицияРуб = 0 Тогда
//                          Предмет2 = Предмет2стр;
//                          Сумма2 = 0;
//                                    Страница 32
//                                    1111.txt
//               Иначе
//                        ИнтеграцияФССП.ПолучитьСуммуИПредмет(Предмет2, Сумма2,
//Лев(Предмет2стр, ПозицияРуб+2));
//                КонецЕсли;
//                ИнтеграцияФССП.УдалитьПробелыСКраев(Предмет1);
//                ИнтеграцияФССП.УдалитьПробелыСКраев(Предмет2);

//               спрПредмет1 = ПолучитьСправочникПредмет(Предмет1);
//               спрПредмет2 = ПолучитьСправочникПредмет(Предмет2);
//               спрПредмет3 = ПолучитьСправочникПредмет(Предмет3);

//               стр.Вставить("Предмет1", спрПредмет1);
//               стр.Вставить("Предмет2", спрПредмет2);
//               стр.Вставить("Предмет3", спрПредмет3);
//               стр.Вставить("Сумма1", Сумма1);
//               стр.Вставить("Сумма2", Сумма2);
//               стр.Вставить("Сумма3", Сумма3);


//                Детали = ИП.details;
//                Детали = СтрЗаменить(Детали, " ", " ");
//                ВидИДСтрока = ПолучитьНомерОт(ИП.details);
//                ДатаИД = ПолучитьДатуОт(ИП.details);
//                Предложение = Детали;
//                Для к = 1 по 99 Цикл
//                        Слово = ПолучитьПервоеСлово(Предложение);
//                        Если ПолучитьТипСлова(Слово) = "Слово" Тогда
//                                Слово = ОтрезатьПервоеСлово(Предложение);
//                        Иначе
//                                ааа = ааа;
//                                Прервать;
//                        КонецЕсли;
//                КонецЦикла;
//                Слово = ОтрезатьПервоеСлово(Предложение);
//                ТипСлова1 = ПолучитьТипСлова(Слово);
//                Если ТипСлова1 = "Дата" Тогда
//                        НачалоНомераИД = СтрНайти(Детали, Слово) +
//СтрДлина(Слово) + 1;
//                Иначе
//                        НачалоНомераИД = СтрНайти(Детали, Слово);
//                КонецЕсли;

//               Для к = 1 по 99 Цикл
//                       Слово = ПолучитьПервоеСлово(Предложение);
//                       ТипСлова2 = ПолучитьТипСлова(Слово);
//                       Если ТипСлова2 = "Слово" И ТипСлова1 <> "Символ" Тогда
//                               ааа = ааа;
//                               Прервать;
//                       Иначе
//                               Слово = ОтрезатьПервоеСлово(Предложение);
//                               ТипСлова1 = ТипСлова2;
//                               ТипСлова2 = "";
//                                  Страница 33
//                                     1111.txt
//                       КонецЕсли;
//               КонецЦикла;

//                НомерИД = Сред(Детали, НачалоНомераИД, СтрНайти(Детали,
//Предложение) - НачалоНомераИД);

//               НомерИД = СтрЗаменить(НомерИД, "№", "");
//               НомерИД = СтрЗаменить(НомерИД, " ", " ");
//               УдалитьПробелыСКраев(НомерИД);

//                ОрганВыдающийИД = Предложение;
//                ОрганВыдающийИД = СтрЗаменить(ОрганВыдающийИД, "Постановление о
//взыскании исполнительского сбора", "");
//                ОрганВыдающийИД = СтрЗаменить(ОрганВыдающийИД, " ", " ");
//                УдалитьПробелыСКраев(ОрганВыдающийИД);


//               НомерИД = НомерИД;
//               ОрганВыдавшийИД = ОрганВыдающийИД;

//               ВидИД = ПолучитьСправочникВидИД(ВидИДСтрока);

//               Стр.Вставить("НомерИД", НомерИД);
//               Стр.Вставить("ДатаИД", ДатаИД);
//               стр.Вставить("ОрганВыдавшийИД", ОрганВыдавшийИД);
//               Стр.Вставить("ВидИД",ВидИД);

//                ДОРучнаяПривязка = ПолучитьРучнуюПривязку(ИП.exe_production);
//                Если ДОРучнаяПривязка <>
//Справочники.ДолговыеОбязательства.ПустаяСсылка() Тогда
//                        ДолговоеОбязательство = ДОРучнаяПривязка;
//                        ПривязкаКДО = Перечисления.ВидыПривязкиИПкДО.Ручная;
//                Иначе
//                        ДолговоеОбязательство =
//НайтиДолговоеОбязательство(НомерИД, ДатаИД, ТаблицаДО);
//                        ПривязкаКДО =
//Перечисления.ВидыПривязкиИПкДО.Автоматическая;
//                КонецЕсли;


//                Если ДолговоеОбязательство <>
//Справочники.ДолговыеОбязательства.ПустаяСсылка() Тогда
//                        стр.Вставить("ПривязкаКДО", ПривязкаКДО);
//                        стр.Вставить("ДолговоеОбязательство",
//ДолговоеОбязательство);
//                КонецЕсли;

//               ip_end = ИП.ip_end;
//               ДатаОкончанияИП = ПолучитьДатуОкончанияИП(ip_end);
//               ПричинаОкончанияИП = ПолучитьПричинуОкончанияИП(ip_end);

//               стр.Вставить("ДатаОкончанияИП", ДатаОкончанияИП);
//                                    Страница 34
//                                    1111.txt
//                стр.Вставить("ПричинаОКончанияИП", ПричинаОкончанияИП);

//                Департамент = ИП.department;
//                СтрокаИндекс = ПолучитьИндексИзСтроки(Департамент);
//                СтрокаРосп = Лев(Департамент, Найти(Департамент,
//СтрокаИндекс)-1);

//                ОтделСудебныхПриставовСтрока = СтрокаРОСП;
//                ОтделСудебныхПриставовИндекс = СтрокаИндекс;
//                КодРегиона = Строка(ПолучитьКодРегионаПоИндексу(СтрокаИндекс));
//                ОтделСудебныхПриставов = ПолучитьРОСП(СтрокаРОСП, КодРегиона);

//                Если Не ЗначениеЗаполнено(ОтделСудебныхПриставов) Тогда
//                        ОтделСудебныхПриставов =
//ПолучитьТекущееРОСП(ИП.exe_production);
//                КонецЕсли;

//                стр.Вставить("ОтделСудебныхПриставов", ОтделСудебныхПриставов);

//                Если ЗначениеЗаполнено(ОтделСудебныхПриставов) Тогда
//                        Пристав = ИП.bailiff;
//                        Пристав = СтрЗаменить(Пристав, " ", " ");
//                        Пристав = СтрЗаменить(Пристав, " ", Символы.ПС);
//                        ЧислоСтрок = СтрЧислоСтрок(Пристав);
//                        Если ЧислоСтрок = 0 Тогда
//                                СтрокаПристав = "";
//                        ИначеЕсли ЧислоСтрок = 1 Тогда
//                                СтрокаПристав = СтрПолучитьСтроку(Пристав, 1);
//                        Иначе
//                                СтрокаПристав = СтрПолучитьСтроку(Пристав, 1);
//                                Для к = 2 по ЧислоСтрок Цикл
//                                        ТипСлова =
//ПолучитьТипСлова(СтрПолучитьСтроку(Пристав, к));
//                                        Если ТипСлова = "Число" ИЛИ ТипСлова =
//"Номер" Тогда
//                                                 Прервать;
//                                        Иначе
//                                                 СтрокаПристав = СтрокаПристав +
//" " + СтрПолучитьСтроку(Пристав, к);
//                                        КонецЕсли;
//                                КонецЦикла;
//                        КонецЕсли;

//                        СтрПристав = СтрЗаменить(СтрокаПристав, " ", "_");
//                        СтрПристав = СтрЗаменить(СтрПристав, ".", "");
//                        КодРегиона =
//ОбъектыСервер.ПолучитьЗначениеСвойства(ОтделСудебныхПриставов, "0469     ");
//                        КодПодразделения =
//ОбъектыСервер.ПолучитьЗначениеСвойства(ОтделСудебныхПриставов, "0470     ");

//                        КодЗначение = "СП_" + КодРегиона+"_"+
//КодПодразделения+"_"+ врег(СтрПристав);
//                                   Страница 35
//                                   1111.txt
//                       СудебныйПриставИсполнительСтрока = КодЗначение;

//                        СудебныйПриставИсполнитель =
//ПоискПриставаВБазе(КодЗначение);
//                        Если СудебныйПриставИсполнитель =
//Справочники.Контрагенты.ПустаяСсылка() Тогда
//                                Попытка
//                                        ПапкаРегион =
//ПоискПапкиРегион(КодРегиона);
//                                        ПриставОбъект =
//Справочники.Контрагенты.СоздатьЭлемент();
//                                        ПриставОбъект.КодКонтрагента =
//КодЗначение;
//                                        ПриставОбъект.Наименование =
//СтрокаПристав;
//                                        ПриставОбъект.Родитель =
//ПоискПапкиОСП(ОтделСудебныхПриставов.Наименование, ПапкаРегион);
//                                        ПриставОбъект.ЮрФизЛицо =
//Справочники.ЮрФизЛицо.НайтиПоКоду("0005     ");
//                                        ПриставОбъект.Организация =
//Справочники.Организации.НайтиПоКоду("000000002");
//                                        ПриставОбъект.Записать();
//                                        СудебныйПриставИсполнитель =
//ПриставОбъект.Ссылка;

//                               Исключение
//                               КонецПопыткИ;
//                               Попытка

//ОбъектыСервер.ЗаписатьДополнительноеСведение(СудебныйПриставИсполнитель,ПланыВид
//овХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоКоду("0070     "),
//"Судебный пристав-исполнитель");
//                                Исключение
//                                        Продолжить;
//                                КонецПопытки;
//                                Попытка

//ОбъектыСервер.ЗаписатьДополнительноеСведение(СудебныйПриставИсполнитель,ПланыВид
//овХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоКоду("0265     "),
//ОтделСудебныхПриставов);
//                                Исключение
//                                        Продолжить;
//                                КонецПопытки;
//                                Попытка

//ОбъектыСервер.ЗаписатьДополнительноеСведение(СудебныйПриставИсполнитель,ПланыВид
//овХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоКоду("0179     "),
//СократитьИмяСТочками(СтрокаПристав));
//                                Исключение
//                                        Продолжить;
//                                КонецПопытки;
//                        КонецЕсли;
//                                  Страница 36
//                                    1111.txt

//                        стр.Вставить("СудебныйПриставИсполнитель",
//СудебныйПриставИсполнитель);

//                        Если ЗначениеЗаполнено(СудебныйПриставИсполнитель) Тогда
//                                Попытка

//                                        Телефон1 = "";
//                                        Телефон2 = "";
//                                        Телефон3 = "";
//                                        СтрокаОстаток = Прав(ИП.bailiff,
//стрДлина(ИП.bailiff) - стрДлина(СтрокаПристав));
//                                        СтрокаОстаток =
//СтрЗаменить(СтрокаОстаток, " ", "");
//                                        СтрокаОстаток =
//стрЗаменить(СтрокаОстаток, "<br>", " ");
//                                        СтрокаОстаток =
//стрЗаменить(СтрокаОстаток, "<br/>", " ");
//                                        СтрокаОстаток =
//СтрЗаменить(СтрокаОстаток, " ", " ");
//                                        УдалитьПробелыСКраев(СтрокаОстаток);
//                                        СтрокаОстаток =
//стрЗаменить(СтрокаОстаток, " ", Символы.ПС);
//                                        к = мин(стрчислоСтрок(СтрокаОстаток),
//3);
//                                        Для п = 1 по к Цикл
//                                                 тел =
//СтрПолучитьСтроку(СтрокаОстаток, п);
//                                                 ТипСлова =
//ИнтеграцияФССП.ПолучитьТипСлова(тел);
//                                                 Если ТипСлова = "Число" Тогда
//                                                         стрКоманда = "Телефон" +
//строка(п) + " = ИнтеграцияФССП.ПреобразоватьТелефон(тел)";
//                                                         Выполнить(стрКоманда);
//                                                 КонецЕсли;
//                                        КонецЦикла;
//                                        стр.Вставить("ТелефонПристава1",
//Телефон1);
//                                        стр.Вставить("ТелефонПристава2",
//Телефон2);
//                                        стр.Вставить("ТелефонПристава3",
//Телефон3);
//                                Исключение;
//                                КонецПопыткИ;
//                        КонецЕсли;
//                КонецЕсли;
//                МассивИП.Добавить(стр);
//        КонецЦикла;
//        Возврат МассивИП;
//КонецФункции

//&НаСервере
//                                   Страница 37
//                                    1111.txt
//Функция ЗаполнитьДанныеДокумента1С(МассивДанных, Должник, ГрупповойЗапрос)
//Экспорт
//        МассивИП = Новый Массив;
//        ТаблицаДО = Неопределено;
//        МассивЗначенийИП = Новый Массив;

//        Для Каждого ИП из МассивДанных.Объекты Цикл
//                стр = Новый Структура;
//                стр.Вставить("name",                   ИП.name);
//                стр.Вставить("exe_production", ИП.exe_production);
//                стр.Вставить("details",                ИП.details);
//                стр.Вставить("subject",                ИП.subject);
//                стр.Вставить("department",             ИП.department);
//                стр.Вставить("bailiff",                ИП.bailiff);
//                стр.Вставить("ip_end",                 ИП.ip_end);

//                НомерИП = ПолучитьНомерОт(ИП.exe_production);

//                ДатаВозбужденияИП= ПолучитьДатуОт(ИП.exe_production);

//                стр.Вставить("НомерИП",                 НомерИП);
//                стр.Вставить("ID", НомерИП + " от " +
//Лев(Строка(ДатаВозбужденияИП), 10));

//                Если МассивЗначенийИП.Найти(стр.ID) <> Неопределено Тогда
//                        Продолжить;
//                Иначе
//                        МассивЗначенийИП.Добавить(стр.ID);
//                КонецЕсли;
//                Если ПроверитьПредыдущиеЗначенияИП(ИП, стр) Тогда
//                        стр.Вставить("ЕстьИзменения", Ложь);
//                        МассивИП.Добавить(стр);
//                        Продолжить;
//                Иначе
//                        стр.Вставить("ЕстьИзменения", Истина);
//                КонецЕсли;

//                Если ТаблицаДО = Неопределено Тогда
//                        ТаблицаДО = ПолучитьТаблицуДО(Должник);
//                КонецЕсли;

//                НомерСД = ПолучитьНомерСД(ИП.exe_production);
//                стр.Вставить("НомерСД",                 НомерСД);
//                стр.Вставить("Должник",                 Должник);
//                стр.Вставить("ДатаВозбужденияИП", ДатаВозбужденияИП);

//                Предмет1   = "";
//                Предмет2   = "";
//                Предмет3   = "";
//                Сумма1 =   0;
//                Сумма2 =   0;
//                Сумма3 =   0;
//                                   Страница 38
//                                      1111.txt
//                  Предмет = ИП.subject;

//                  ПозицияИС = СтрНайти(Предмет, "Исполнительский сбор");
//                  Если ПозицияИС = 0 Тогда
//                      Предмет1стр = Предмет;
//                          Предмет2стр = "";
//                  Иначе
//                          Предмет1стр = Лев(Предмет, ПозицияИС-1);
//                          Предмет2стр = Прав(Предмет, стрдлина(Предмет) -
//ПозицияИС + 1);
//                  КонецЕсли;

//                ПозицияРуб = СтрНайти(Предмет1стр, "руб");
//                Если ПозицияРуб = 0 Тогда
//                        Предмет1 = Предмет1стр;
//                        Сумма1 = 0;
//                Иначе
//                        ИнтеграцияФССП.ПолучитьСуммуИПредмет(Предмет1, Сумма1,
//Лев(Предмет1стр, ПозицияРуб+2));
//                КонецЕсли;

//                ПозицияРуб = СтрНайти(Предмет2стр, "руб");
//                Если ПозицияРуб = 0 Тогда
//                        Предмет2 = Предмет2стр;
//                        Сумма2 = 0;
//                Иначе
//                        ИнтеграцияФССП.ПолучитьСуммуИПредмет(Предмет2, Сумма2,
//Лев(Предмет2стр, ПозицияРуб+2));
//                КонецЕсли;
//                ИнтеграцияФССП.УдалитьПробелыСКраев(Предмет1);
//                ИнтеграцияФССП.УдалитьПробелыСКраев(Предмет2);

//                  спрПредмет1 = ПолучитьСправочникПредмет(Предмет1);
//                  спрПредмет2 = ПолучитьСправочникПредмет(Предмет2);
//                  спрПредмет3 = ПолучитьСправочникПредмет(Предмет3);

//                  стр.Вставить("Предмет1", спрПредмет1);
//                  стр.Вставить("Предмет2", спрПредмет2);
//                  стр.Вставить("Предмет3", спрПредмет3);
//                  стр.Вставить("Сумма1", Сумма1);
//                  стр.Вставить("Сумма2", Сумма2);
//                  стр.Вставить("Сумма3", Сумма3);


//                  Детали = ИП.details;
//                  Детали = СтрЗаменить(Детали, " ", " ");
//                  ВидИДСтрока = ПолучитьНомерОт(ИП.details);
//                  ДатаИД = ПолучитьДатуОт(ИП.details);
//                  Предложение = Детали;
//                  Для к = 1 по 99 Цикл
//                          Слово = ПолучитьПервоеСлово(Предложение);
//                          Если ПолучитьТипСлова(Слово) = "Слово" Тогда
//                                    Страница 39
//                                   1111.txt
//                               Слово = ОтрезатьПервоеСлово(Предложение);
//                       Иначе
//                                ааа = ааа;
//                                Прервать;
//                        КонецЕсли;
//                КонецЦикла;
//                Слово = ОтрезатьПервоеСлово(Предложение);
//                ТипСлова1 = ПолучитьТипСлова(Слово);
//                Если ТипСлова1 = "Дата" Тогда
//                        НачалоНомераИД = СтрНайти(Детали, Слово) +
//СтрДлина(Слово) + 1;
//                Иначе
//                        НачалоНомераИД = СтрНайти(Детали, Слово);
//                КонецЕсли;

//               Для к = 1 по 99 Цикл
//                       Слово = ПолучитьПервоеСлово(Предложение);
//                       ТипСлова2 = ПолучитьТипСлова(Слово);
//                       Если ТипСлова2 = "Слово" И ТипСлова1 <> "Символ" Тогда
//                               ааа = ааа;
//                               Прервать;
//                       Иначе
//                               Слово = ОтрезатьПервоеСлово(Предложение);
//                               ТипСлова1 = ТипСлова2;
//                               ТипСлова2 = "";
//                       КонецЕсли;
//               КонецЦикла;

//                НомерИД = Сред(Детали, НачалоНомераИД, СтрНайти(Детали,
//Предложение) - НачалоНомераИД);

//               НомерИД = СтрЗаменить(НомерИД, "№", "");
//               НомерИД = СтрЗаменить(НомерИД, " ", " ");
//               УдалитьПробелыСКраев(НомерИД);

//                ОрганВыдающийИД = Предложение;
//                ОрганВыдающийИД = СтрЗаменить(ОрганВыдающийИД, "Постановление о
//взыскании исполнительского сбора", "");
//                ОрганВыдающийИД = СтрЗаменить(ОрганВыдающийИД, " ", " ");
//                УдалитьПробелыСКраев(ОрганВыдающийИД);


//               НомерИД = НомерИД;
//               ОрганВыдавшийИД = ОрганВыдающийИД;

//               ВидИД = ПолучитьСправочникВидИД(ВидИДСтрока);

//               Стр.Вставить("НомерИД", НомерИД);
//               Стр.Вставить("ДатаИД", ДатаИД);
//               стр.Вставить("ОрганВыдавшийИД", ОрганВыдавшийИД);
//               Стр.Вставить("ВидИД",ВидИД);

//                                  Страница 40
//                                    1111.txt
//                ДОРучнаяПривязка = ПолучитьРучнуюПривязку(ИП.exe_production);
//                Если ДОРучнаяПривязка <>
//Справочники.ДолговыеОбязательства.ПустаяСсылка() Тогда
//                        ДолговоеОбязательство = ДОРучнаяПривязка;
//                        ПривязкаКДО = Перечисления.ВидыПривязкиИПкДО.Ручная;
//                Иначе
//                        ДолговоеОбязательство =
//НайтиДолговоеОбязательство(НомерИД, ДатаИД, ТаблицаДО);
//                        ПривязкаКДО =
//Перечисления.ВидыПривязкиИПкДО.Автоматическая;
//                КонецЕсли;


//                Если ДолговоеОбязательство <>
//Справочники.ДолговыеОбязательства.ПустаяСсылка() Тогда
//                        стр.Вставить("ПривязкаКДО", ПривязкаКДО);
//                        стр.Вставить("ДолговоеОбязательство",
//ДолговоеОбязательство);
//                КонецЕсли;

//                ip_end = ИП.ip_end;
//                ДатаОкончанияИП = ПолучитьДатуОкончанияИП(ip_end);
//                ПричинаОкончанияИП = ПолучитьПричинуОкончанияИП(ip_end);

//                стр.Вставить("ДатаОкончанияИП", ДатаОкончанияИП);
//                стр.Вставить("ПричинаОКончанияИП", ПричинаОкончанияИП);

//                Департамент = ИП.department;
//                СтрокаИндекс = ПолучитьИндексИзСтроки(Департамент);
//                СтрокаРосп = Лев(Департамент, Найти(Департамент,
//СтрокаИндекс)-1);

//                ОтделСудебныхПриставовСтрока = СтрокаРОСП;
//                ОтделСудебныхПриставовИндекс = СтрокаИндекс;
//                КодРегиона = Строка(ПолучитьКодРегионаПоИндексу(СтрокаИндекс));
//                ОтделСудебныхПриставов = ПолучитьРОСП(СтрокаРОСП, КодРегиона);

//                Если Не ЗначениеЗаполнено(ОтделСудебныхПриставов) Тогда
//                        ОтделСудебныхПриставов =
//ПолучитьТекущееРОСП(ИП.exe_production);
//                КонецЕсли;

//                стр.Вставить("ОтделСудебныхПриставов", ОтделСудебныхПриставов);

//                Если ЗначениеЗаполнено(ОтделСудебныхПриставов) Тогда
//                        Пристав = ИП.bailiff;
//                        Пристав = СтрЗаменить(Пристав, " ", " ");
//                        Пристав = СтрЗаменить(Пристав, " ", Символы.ПС);
//                        ЧислоСтрок = СтрЧислоСтрок(Пристав);
//                        Если ЧислоСтрок = 0 Тогда
//                                СтрокаПристав = "";
//                        ИначеЕсли ЧислоСтрок = 1 Тогда
//                                  Страница 41
//                                    1111.txt
//                                СтрокаПристав = СтрПолучитьСтроку(Пристав, 1);
//                        Иначе
//                                СтрокаПристав = СтрПолучитьСтроку(Пристав, 1);
//                                Для к = 2 по ЧислоСтрок Цикл
//                                        ТипСлова =
//ПолучитьТипСлова(СтрПолучитьСтроку(Пристав, к));
//                                        Если ТипСлова = "Число" ИЛИ ТипСлова =
//"Номер" Тогда
//                                                 Прервать;
//                                        Иначе
//                                                 СтрокаПристав = СтрокаПристав +
//" " + СтрПолучитьСтроку(Пристав, к);
//                                        КонецЕсли;
//                                КонецЦикла;
//                        КонецЕсли;

//                        СтрПристав = СтрЗаменить(СтрокаПристав, " ", "_");
//                        СтрПристав = СтрЗаменить(СтрПристав, ".", "");
//                        КодРегиона =
//ОбъектыСервер.ПолучитьЗначениеСвойства(ОтделСудебныхПриставов, "0469     ");
//                        КодПодразделения =
//ОбъектыСервер.ПолучитьЗначениеСвойства(ОтделСудебныхПриставов, "0470     ");

//                        КодЗначение = "СП_" + КодРегиона+"_"+
//КодПодразделения+"_"+ врег(СтрПристав);
//                        СудебныйПриставИсполнительСтрока = КодЗначение;

//                        СудебныйПриставИсполнитель =
//ПоискПриставаВБазе(КодЗначение);
//                        Если СудебныйПриставИсполнитель =
//Справочники.Контрагенты.ПустаяСсылка() Тогда
//                                Попытка
//                                        ПапкаРегион =
//ПоискПапкиРегион(КодРегиона);
//                                        ПриставОбъект =
//Справочники.Контрагенты.СоздатьЭлемент();
//                                        ПриставОбъект.КодКонтрагента =
//КодЗначение;
//                                        ПриставОбъект.Наименование =
//СтрокаПристав;
//                                        ПриставОбъект.Родитель =
//ПоискПапкиОСП(ОтделСудебныхПриставов.Наименование, ПапкаРегион);
//                                        ПриставОбъект.ЮрФизЛицо =
//Справочники.ЮрФизЛицо.НайтиПоКоду("0005     ");
//                                        ПриставОбъект.Организация =
//Справочники.Организации.НайтиПоКоду("000000002");
//                                        ПриставОбъект.Записать();
//                                        СудебныйПриставИсполнитель =
//ПриставОбъект.Ссылка;

//                                Исключение
//                                КонецПопыткИ;
//                                   Страница 42
//                                   1111.txt
//                               Попытка

//ОбъектыСервер.ЗаписатьДополнительноеСведение(СудебныйПриставИсполнитель,ПланыВид
//овХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоКоду("0070     "),
//"Судебный пристав-исполнитель");
//                                Исключение
//                                        Продолжить;
//                                КонецПопытки;
//                                Попытка

//ОбъектыСервер.ЗаписатьДополнительноеСведение(СудебныйПриставИсполнитель,ПланыВид
//овХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоКоду("0265     "),
//ОтделСудебныхПриставов);
//                                Исключение
//                                        Продолжить;
//                                КонецПопытки;
//                                Попытка

//ОбъектыСервер.ЗаписатьДополнительноеСведение(СудебныйПриставИсполнитель,ПланыВид
//овХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоКоду("0179     "),
//СократитьИмяСТочками(СтрокаПристав));
//                                Исключение
//                                        Продолжить;
//                                КонецПопытки;
//                        КонецЕсли;

//                        стр.Вставить("СудебныйПриставИсполнитель",
//СудебныйПриставИсполнитель);

//                       Если ЗначениеЗаполнено(СудебныйПриставИсполнитель) Тогда
//                               Попытка

//                                        Телефон1 = "";
//                                        Телефон2 = "";
//                                        Телефон3 = "";
//                                        СтрокаОстаток = Прав(ИП.bailiff,
//стрДлина(ИП.bailiff) - стрДлина(СтрокаПристав));
//                                        СтрокаОстаток =
//СтрЗаменить(СтрокаОстаток, " ", "");
//                                        СтрокаОстаток =
//стрЗаменить(СтрокаОстаток, "<br>", " ");
//                                        СтрокаОстаток =
//стрЗаменить(СтрокаОстаток, "<br/>", " ");
//                                        СтрокаОстаток =
//СтрЗаменить(СтрокаОстаток, " ", " ");
//                                        УдалитьПробелыСКраев(СтрокаОстаток);
//                                        СтрокаОстаток =
//стрЗаменить(СтрокаОстаток, " ", Символы.ПС);
//                                        к = мин(стрчислоСтрок(СтрокаОстаток),
//3);
//                                        Для п = 1 по к Цикл
//                                                 тел =
//                                  Страница 43
//                                       1111.txt
//СтрПолучитьСтроку(СтрокаОстаток, п);
//                                                  ТипСлова =
//ИнтеграцияФССП.ПолучитьТипСлова(тел);
//                                                Если ТипСлова = "Число" Тогда
//                                                        стрКоманда = "Телефон" +
//строка(п) + " = ИнтеграцияФССП.ПреобразоватьТелефон(тел)";
//                                                        Выполнить(стрКоманда);
//                                                КонецЕсли;
//                                        КонецЦикла;
//                                        стр.Вставить("ТелефонПристава1",
//Телефон1);
//                                        стр.Вставить("ТелефонПристава2",
//Телефон2);
//                                        стр.Вставить("ТелефонПристава3",
//Телефон3);
//                                Исключение;
//                                КонецПопыткИ;
//                        КонецЕсли;
//                КонецЕсли;
//                МассивИП.Добавить(стр);
//        КонецЦикла;
//        Возврат МассивИП;
//КонецФункции


//Функция ПроверитьПредыдущиеЗначенияИП(ИП, стр)
//        //Возврат Ложь;
//        Запрос = Новый Запрос("ВЫБРАТЬ
//                              | СостоянияИПСрезПоследних.Период КАК Период,
//                              | СостоянияИПСрезПоследних.Регистратор КАК
//Регистратор,
//                              | СостоянияИПСрезПоследних.НомерСтроки КАК
//НомерСтроки,
//                              | СостоянияИПСрезПоследних.Активность КАК
//Активность,
//                              | СостоянияИПСрезПоследних.ID КАК ID,
//                              | СостоянияИПСрезПоследних.Должник КАК Должник,
//                              | СостоянияИПСрезПоследних.НомерИП КАК НомерИП,
//                              | СостоянияИПСрезПоследних.ДатаВозбужденияИП КАК
//ДатаВозбужденияИП,
//                              | СостоянияИПСрезПоследних.НомерСД КАК НомерСД,
//                              | СостоянияИПСрезПоследних.ВидИД КАК ВидИД,
//                              | СостоянияИПСрезПоследних.ДатаИД КАК ДатаИД,
//                              | СостоянияИПСрезПоследних.НомерИД КАК НомерИД,
//                              | СостоянияИПСрезПоследних.ОрганВыдавшийИД КАК
//ОрганВыдавшийИД,
//                              | СостоянияИПСрезПоследних.ДатаОкончанияИП КАК
//ДатаОкончанияИП,
//                              | СостоянияИПСрезПоследних.ПричинаОкончанияИП КАК
//ПричинаОкончанияИП,
//                              | СостоянияИПСрезПоследних.ОтделСудебныхПриставов
//КАК ОтделСудебныхПриставов,
//                                  Страница 44
//                                    1111.txt
//                              |
//СостоянияИПСрезПоследних.ОтделСудебныхПриставовСтрока КАК
//ОтделСудебныхПриставовСтрока,
//                              |
//СостоянияИПСрезПоследних.ОтделСудебныхПриставовИндекс КАК
//ОтделСудебныхПриставовИндекс,
//                              |
//СостоянияИПСрезПоследних.СудебныйПриставИсполнитель КАК
//СудебныйПриставИсполнитель,
//                              | СостоянияИПСрезПоследних.ТелефонПристава1 КАК
//ТелефонПристава1,
//                              | СостоянияИПСрезПоследних.ТелефонПристава2 КАК
//ТелефонПристава2,
//                              | СостоянияИПСрезПоследних.ТелефонПристава3 КАК
//ТелефонПристава3,
//                              | СостоянияИПСрезПоследних.ПривязкаКДО КАК
//ПривязкаКДО,
//                              | СостоянияИПСрезПоследних.ДолговоеОбязательство
//КАК ДолговоеОбязательство,
//                              | СостоянияИПСрезПоследних.task КАК task,
//                              | СостоянияИПСрезПоследних.Предмет1 КАК Предмет1,
//                              | СостоянияИПСрезПоследних.Предмет2 КАК Предмет2,
//                              | СостоянияИПСрезПоследних.Предмет3 КАК Предмет3,
//                              | СостоянияИПСрезПоследних.Сумма1 КАК Сумма1,
//                              | СостоянияИПСрезПоследних.Сумма2 КАК Сумма2,
//                              | СостоянияИПСрезПоследних.Сумма3 КАК Сумма3,
//                              | СостоянияИПСрезПоследних.Завершено КАК
//Завершено,
//                              | СостоянияИПСрезПоследних.Статус КАК Статус,
//                              | СостоянияИПСрезПоследних.name КАК name,
//                              | СостоянияИПСрезПоследних.exe_production КАК
//exe_production,
//                              | СостоянияИПСрезПоследних.details КАК details,
//                              | СостоянияИПСрезПоследних.subject КАК subject,
//                              | СостоянияИПСрезПоследних.department КАК
//department,
//                              | СостоянияИПСрезПоследних.bailiff КАК bailiff,
//                              | СостоянияИПСрезПоследних.ip_end КАК ip_end
//                              |ПОМЕСТИТЬ ПоследнееСостояниеИП
//                              |ИЗ
//                              | РегистрСведений.СостоянияИП.СрезПоследних(, ID =
//&ИД) КАК СостоянияИПСрезПоследних
//                              |;
//                              |

//|///////////////////////////////////////////////////////////////////////////////
///
//                              |ВЫБРАТЬ
//                              | ПоследнееСостояниеИП.Период КАК Период,
//                              | ПоследнееСостояниеИП.Регистратор КАК
//Регистратор,
//                              | ПоследнееСостояниеИП.НомерСтроки КАК
//                                  Страница 45
//                                     1111.txt
//НомерСтроки,
//                             |   ПоследнееСостояниеИП.Активность КАК Активность,
//                             |   ПоследнееСостояниеИП.ID КАК ID,
//                             |   ПоследнееСостояниеИП.Должник КАК Должник,
//                             |   ПоследнееСостояниеИП.НомерИП КАК НомерИП,
//                             |   ПоследнееСостояниеИП.ДатаВозбужденияИП КАК
//ДатаВозбужденияИП,
//                             |   ПоследнееСостояниеИП.НомерСД КАК НомерСД,
//                             |   ПоследнееСостояниеИП.ВидИД КАК ВидИД,
//                             |   ПоследнееСостояниеИП.ДатаИД КАК ДатаИД,
//                             |   ПоследнееСостояниеИП.НомерИД КАК НомерИД,
//                             |   ПоследнееСостояниеИП.ОрганВыдавшийИД КАК
//ОрганВыдавшийИД,
//                             | ПоследнееСостояниеИП.ДатаОкончанияИП КАК
//ДатаОкончанияИП,
//                             | ПоследнееСостояниеИП.ПричинаОкончанияИП КАК
//ПричинаОкончанияИП,
//                             | ПоследнееСостояниеИП.ОтделСудебныхПриставов КАК
//ОтделСудебныхПриставов,
//                              |
//ПоследнееСостояниеИП.ОтделСудебныхПриставовСтрока КАК
//ОтделСудебныхПриставовСтрока,
//                              |
//ПоследнееСостояниеИП.ОтделСудебныхПриставовИндекс КАК
//ОтделСудебныхПриставовИндекс,
//                              | ПоследнееСостояниеИП.СудебныйПриставИсполнитель
//КАК СудебныйПриставИсполнитель,
//                              | ПоследнееСостояниеИП.ТелефонПристава1 КАК
//ТелефонПристава1,
//                              | ПоследнееСостояниеИП.ТелефонПристава2 КАК
//ТелефонПристава2,
//                              | ПоследнееСостояниеИП.ТелефонПристава3 КАК
//ТелефонПристава3,
//                              | ПоследнееСостояниеИП.ПривязкаКДО КАК
//ПривязкаКДО,
//                              | ПоследнееСостояниеИП.ДолговоеОбязательство КАК
//ДолговоеОбязательство,
//                              | ПоследнееСостояниеИП.task КАК task,
//                              | ПоследнееСостояниеИП.Предмет1 КАК Предмет1,
//                              | ПоследнееСостояниеИП.Предмет2 КАК Предмет2,
//                              | ПоследнееСостояниеИП.Предмет3 КАК Предмет3,
//                              | ПоследнееСостояниеИП.Сумма1 КАК Сумма1,
//                              | ПоследнееСостояниеИП.Сумма2 КАК Сумма2,
//                              | ПоследнееСостояниеИП.Сумма3 КАК Сумма3,
//                              | ПоследнееСостояниеИП.Завершено КАК Завершено,
//                              | ПоследнееСостояниеИП.Статус КАК Статус,
//                              | ПоследнееСостояниеИП.name КАК name,
//                              | ПоследнееСостояниеИП.exe_production КАК
//exe_production,
//                              | ПоследнееСостояниеИП.details КАК details,
//                              | ПоследнееСостояниеИП.subject КАК subject,
//                              | ПоследнееСостояниеИП.department КАК department,
//                                   Страница 46
//                                   1111.txt
//                             | ПоследнееСостояниеИП.bailiff КАК bailiff,
//                             | ПоследнееСостояниеИП.ip_end КАК ip_end
//                             |ИЗ
//                             | ПоследнееСостояниеИП КАК ПоследнееСостояниеИП
//                             |ГДЕ
//                             | ПоследнееСостояниеИП.name ПОДОБНО &name
//                             | И ПоследнееСостояниеИП.exe_production ПОДОБНО
//&exe_production
//                             | И ПоследнееСостояниеИП.details ПОДОБНО &details
//                             | И ПоследнееСостояниеИП.subject ПОДОБНО &subject
//                             | И ПоследнееСостояниеИП.department ПОДОБНО
//&department
//                             | И ПоследнееСостояниеИП.bailiff ПОДОБНО &bailiff
//                             | И ПоследнееСостояниеИП.ip_end ПОДОБНО &ip_end");

//        Запрос.УстановитьПараметр("ИД", стр.ID);
//        Запрос.УстановитьПараметр("name", стр.name);
//        Запрос.УстановитьПараметр("exe_production", стр.exe_production);
//        Запрос.УстановитьПараметр("details", стр.details);
//        Запрос.УстановитьПараметр("subject", стр.subject);
//        Запрос.УстановитьПараметр("department", стр.department);
//        Запрос.УстановитьПараметр("bailiff", стр.bailiff);
//        Запрос.УстановитьПараметр("ip_end", стр.ip_end);
//        Результат = Запрос.Выполнить().Выбрать();
//        Если Результат.Следующий() Тогда
//                //Если Результат.name = стр.name
//                //      И Результат.exe_production = стр.exe_production
//                //      И Результат.details = стр.details
//                //      И Результат.subject = стр.subject
//                //      И Результат.department = стр.department
//                //      И Результат.bailiff = стр.bailiff
//                //      И Результат.ip_end = стр.ip_end




//                Если Результат.ОтделСудебныхПриставов =
//Справочники.Контрагенты.ПустаяСсылка() ИЛИ Результат.ОтделСудебныхПриставов =
//Неопределено Тогда
//                        Департамент = стр.department;
//                        СтрокаИндекс = ПолучитьИндексИзСтроки(Департамент);
//                        СтрокаРосп = Лев(Департамент, Найти(Департамент,
//СтрокаИндекс)-1);

//                        ОтделСудебныхПриставовСтрока = СтрокаРОСП;
//                        ОтделСудебныхПриставовИндекс = СтрокаИндекс;
//                        КодРегиона =
//Строка(ПолучитьКодРегионаПоИндексу(СтрокаИндекс));
//                        ОтделСудебныхПриставов = ПолучитьРОСП(СтрокаРОСП,
//КодРегиона);

//                        Если Не ЗначениеЗаполнено(ОтделСудебныхПриставов) Тогда
//                                  Страница 47
//                                    1111.txt
//                                Возврат Истина;
//                        КонецЕсли;

//                        Возврат Ложь;
//                Иначе
//                        стр.Вставить("НомерИП", Результат.НомерИП);
//                        стр.Вставить("ДатаВозбужденияИП",
//Результат.ДатаВозбужденияИП);
//                        стр.Вставить("НомерСД", Результат.НомерСД);
//                        стр.Вставить("ВидИД", Результат.ВидИД);
//                        стр.Вставить("ДатаИД", Результат.ДатаИД);
//                        стр.Вставить("НомерИД", Результат.НомерИД);
//                        стр.Вставить("ОрганВыдавшийИД",
//Результат.ОрганВыдавшийИД);
//                        стр.Вставить("ДатаОкончанияИП",
//Результат.ДатаОкончанияИП);
//                        стр.Вставить("ПричинаОкончанияИП",
//Результат.ПричинаОкончанияИП);
//                        стр.Вставить("ОтделСудебныхПриставов",
//Результат.ОтделСудебныхПриставов);
//                        стр.Вставить("СудебныйПриставИсполнитель",
//Результат.СудебныйПриставИсполнитель);
//                        стр.Вставить("ТелефонПристава1",
//Результат.ТелефонПристава1);
//                        стр.Вставить("ТелефонПристава2",
//Результат.ТелефонПристава2);
//                        стр.Вставить("ТелефонПристава3",
//Результат.ТелефонПристава3);
//                        стр.Вставить("ПривязкаКДО", Результат.ПривязкаКДО);
//                        стр.Вставить("ДолговоеОбязательство",
//Результат.ДолговоеОбязательство);
//                        стр.Вставить("Предмет1", Результат.Предмет1);
//                        стр.Вставить("Предмет2", Результат.Предмет2);
//                        стр.Вставить("Предмет3", Результат.Предмет3);
//                        стр.Вставить("Сумма1", Результат.Сумма1);
//                        стр.Вставить("Сумма2", Результат.Сумма2);
//                        стр.Вставить("Сумма3", Результат.Сумма3);

//                        Возврат Истина;

//                КонецЕсли;
//        Иначе
//                Возврат Ложь;
//        КонецЕсли;
//КонецФункции


//Функция ПолучитьНомерОт(СтрокаИП)
//        ПозицияОТ = СтрНайти(СтрокаИП," от ",НаправлениеПоиска.СНачала,,);
//        НомерИП = Лев(СтрокаИП,ПозицияОТ-1);
//        Возврат(НомерИП);
//КонецФункции
//                                  Страница 48
//                                    1111.txt

//Функция ПолучитьДатуОт(СтрокаИП)
//        ПозицияОТ = СтрНайти(СтрокаИП,"от ",НаправлениеПоиска.СНачала,,);
//        СтрДата = Сред(СтрокаИП,ПозицияОТ + 3,10);
//        Попытка
//                ДатаИП = Дата(СтрДата+ " 00:00:00");
//                Если Год(ДатаИП) > 3999 Тогда

//                       Возврат Дата(1,1,1);
//               Иначе
//                       Возврат(ДатаИП);
//               КонецЕсли;
//       Исключение
//               Возврат Дата(1,1,1);
//       КонецПопытки;

//КонецФункции

//Функция ПолучитьНомерСД(СтрокаИП)
//        Предложение = СтрокаИП;
//        НомерИП = ОтрезатьПервоеСлово(Предложение);
//        НомерСД = "";
//        для к = 1 по 999 Цикл
//                стр = ОтрезатьПервоеСлово(Предложение);
//                Если ПолучитьТипСлова(стр) = "Номер" Тогда
//                         НомерСД = стр;
//                         Прервать;
//                КонецЕсли;
//        КонецЦикла;
//        Возврат НомерСД;
//КонецФункции

//&НаСервере
//Функция ОтрезатьПервоеСлово(Предложение) Экспорт
//        Номер = Найти(Предложение, " ");
//        Если Номер > 0 Тогда
//                Стр = Лев(Предложение, Номер-1);
//                Предложение = Прав(Предложение, СтрДлина(Предложение) - Номер);
//                Возврат Стр;
//        Иначе
//                Слово = Предложение;
//                Предложение = "";
//                Возврат Слово;
//        КонецЕсли;
//КонецФункции

//&НаСервере
//Процедура УдалитьПробелыСКраев(Предложение) Экспорт
//        Пока Лев(Предложение, 1) = " " Цикл
//                Предложение = Прав(Предложение, СтрДлина(Предложение) - 1);
//        КонецЦикла;
//        Пока Прав(Предложение, 1) = " " Цикл
//                                  Страница 49
//                                    1111.txt
//                Предложение = Лев(Предложение, СтрДлина(Предложение) - 1)
//        КонецЦикла;
//КонецПроцедуры

//&НаСервере
//Функция ПолучитьПервоеСлово(Предложение) Экспорт
//        Номер = Найти(Предложение, " ");
//        Если Номер > 0 Тогда
//                Стр = Лев(Предложение, Номер-1);
//                Возврат Стр;
//        Иначе
//                Возврат Предложение;
//        КонецЕсли;
//КонецФункции

//&НаСервере
//Функция ЭтоНомерБезБукв(Слово)
//        строкаПроверки =
//"АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЫЬЪЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ";
//        НомерБезБукв = Истина;
//        стр = Слово;
//        Пока СтрДлина(стр) > 0 Цикл
//                Буква = Лев(стр, 1);
//                стр = Прав(стр, стрДлина(стр) - 1);
//                Если СтрНайти(строкаПроверки, врег(Буква)) > 0 Тогда
//                         НомерБезБукв = ЛОжь;
//                КонецЕсли;
//        КонецЦикла;
//        Возврат НомерБезБукв;
//КонецФункции

//&НаСервере
//Функция ЭтоДата(Слово)
//        Попытка
//                ДатаИП = Дата(Слово + " 00:00:00");
//                Возврат Истина
//        Исключение
//                Возврат Ложь;
//        КонецПопытки;

//КонецФункции

//&НаСервере
//Функция ПолучитьТипСлова(Слово) Экспорт


//       //Попытка
//       //      ДатаИП = Дата(Слово + " 00:00:00");
//       //      Возврат "Дата";
//       //Исключение
//       //КонецПопытки;

//                                  Страница 50
//                                   1111.txt
//       Если Врег(Слово) = "СЕРИЯ" Тогда
//               Возврат "Символ";
//       КонецЕсли;

//        СтрокаЦифры = "0123456789";
//        СтрокаБуквы =
//"АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЫЬЪЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ";


//       ЕстьБуквы = Ложь;
//       стр = Слово;
//       Пока СтрДлина(стр) > 0 Цикл
//               Буква = Лев(стр, 1);
//               стр = Прав(стр, стрДлина(стр) - 1);
//               Если СтрНайти(СтрокаБуквы, врег(Буква)) > 0 Тогда
//                       ЕстьБуквы = Истина;
//                       //Прервать;
//               КонецЕсли;
//       КонецЦикла;

//       ЕстьЦифры = Ложь;
//       стр = Слово;
//       Пока СтрДлина(стр) > 0 Цикл
//               Буква = Лев(стр, 1);
//               стр = Прав(стр, стрДлина(стр) - 1);
//               Если СтрНайти(СтрокаЦифры, Буква) > 0 Тогда
//                       ЕстьЦифры = Истина;
//                       //Прервать;
//               КонецЕсли;
//       КонецЦикла;

//        Если ЕстьЦифры И Не ЕстьБуквы Тогда
//                Попытка
//                        ДатаИП = Дата(Слово + " 00:00:00");
//                        Возврат "Дата";
//                Исключение
//                        Возврат "Число";
//                КонецПопытки;
//        ИначеЕсли ЕстьЦифры и ЕстьБуквы Тогда
//                Возврат "Номер";
//        ИначеЕсли Не ЕстьЦифры и ЕстьБуквы Тогда
//                Возврат "Слово";
//        ИначеЕсли Не ЕстьЦифры и Не ЕстьБуквы Тогда
//                Возврат "Символ";
//        КонецЕсли;
//КонецФункции



//&НаСервере
//Функция ПолучитьСправочникПредмет(Предмет)
//        Если Предмет = "" Тогда
//                                  Страница 51
//                                   1111.txt
//               Возврат Справочники.ПредметыИП.ПустаяСсылка();
//       Иначе
//                Запрос = Новый Запрос("ВЫБРАТЬ
//                                      | ПредметыИП.Ссылка КАК Ссылка
//                                      |ИЗ
//                                      | Справочник.ПредметыИП КАК ПредметыИП
//                                      |ГДЕ
//                                      | ПредметыИП.ПометкаУдаления = ЛОЖЬ
//                                      | И ПредметыИП.Имя = &Имя");
//                Запрос.УстановитьПараметр("Имя",Предмет);
//                Результат = Запрос.Выполнить().Выбрать();
//                Если Результат.Следующий() Тогда
//                        Возврат Результат.Ссылка;
//                Иначе
//                        ПредметОбъект = Справочники.ПредметыИП.СоздатьЭлемент();
//                        ПредметОбъект.Наименование = Предмет;
//                        ПредметОбъект.Имя = Предмет;
//                        ПредметОбъект.Записать();
//                        Об = Задачи.Сообщения.СоздатьЗадачу();
//                        Об.ТипСообщения =
//Перечисления.ТипыСообщений.КСотруднику;
//                        Об.Наименование = "Создан предмет Исполнительного
//производства";
//                        Об.Текст = Предмет;
//                        Об.Автор = Справочники.Пользователи.НайтиПоКоду("БИТ
//ФОН");
//                        Об.Дата = ТекущаяДата();
//                        Об.ПланируемаяДата = Об.Дата;
//                        Об.Сотрудник =
//Константы.ПолучательТехническихСообщений.Получить();
//                        Об.Записать();

//                        Возврат ПредметОбъект.Ссылка;
//                КонецЕсли;
//        КонецЕсли;
//КонецФункции

//&НаСервере
//Функция ПолучитьСправочникВидИД(ВидИД)
//        Если ВидИД = "" Тогда
//                Возврат Справочники.ТипыИсполнительныхДокументов.ПустаяСсылка();
//        Иначе
//                ВидИДСсылка =
//Справочники.ТипыИсполнительныхДокументов.НайтиПоНаименованию(ВидИД, Истина);
//                Если ВидИДССылка =
//Справочники.ТипыИсполнительныхДокументов.ПустаяСсылка() Тогда
//                        ВидИДОбъект =
//Справочники.ТипыИсполнительныхДокументов.СоздатьЭлемент();
//                        ВидИДОбъект.Наименование = ВидИД;
//                        ВидИДОбъект.Записать();
//                        Возврат ВидИДОбъект.Ссылка;
//                Иначе
//                                  Страница 52
//                                    1111.txt
//                        Возврат ВидИДСсылка;
//                КонецЕсли;
//        КонецЕсли;
//КонецФункции

//&НаСервере
//Процедура ПолучитьСуммуИПредмет(ПредметЗначение, СуммаЗначение, СтрокаЗначение)
//Экспорт
//        Предмет = СтрокаЗначение;
//        ПозицияДвоеточие = СтрНайти(Предмет, ":") -1;
//        Если ПозицияДвоеточие = 0 Тогда
//                ПредметЗначение = Предмет;
//                СуммаЗначение = 0;
//        Иначе

//               Предмет1 = Лев(Предмет, ПозицияДвоеточие);
//               Предмет = Прав(Предмет, стрДлина(Предмет) - ПозицияДвоеточие
//-1);

//               ПозицияРуб = СтрНайти(Предмет, "руб");
//               Если ПозицияРуб = 0 Тогда
//                       ПредметЗначение = Предмет;
//                       СуммаЗначение = 0;
//               Иначе
//                       Сумма1Стр = Лев(Предмет, ПозицияРуб-1);
//                       Сумма1Стр = Сумма1Стр;
//                       Предмет = Прав(Предмет, СтрДлина(Предмет) - ПозицияРуб
//-2);
//                        СуммаЗначение = Число(Сумма1Стр);
//                        ПредметЗначение = Предмет1;
//                КонецЕсли;
//        КонецЕсли;
//КонецПроцедуры

//Функция ПолучитьПричинуОкончанияИП(СтрокаОкончаниеИП)
//        Если СтрокаОкончаниеИП = "" Тогда
//                Причина = "";
//        Иначе
//                ПозицияДата =
//СтрНайти(СтрокаОкончаниеИП,",",НаправлениеПоиска.СНачала,,1);
//                СтрДата = Лев(СтрокаОкончаниеИП,ПозицияДата);
//                СтрПричина = СтрЗаменить(СтрокаОкончаниеИП,СтрДата,"ст.");
//                Запятая1 = СтрНайти(СтрПричина,",",,1);
//                СтрСтатья = Лев(СтрПричина,Запятая1);
//                СтрЧасть = СтрСтатья + " ч.";
//                СтрПричина = СтрЗаменить(СтрПричина,СтрСтатья,СтрЧасть);
//                //Запятая2 = СтрНайти(СтрПричина,",",,2);
//                СтрСтатьяЧасть = Лев(СтрПричина,13);
//                СтрПункт = СтрСтатьяЧасть + " п.";
//                СтрПричина = СтрЗаменить(СтрПричина,СтрСтатьяЧасть,СтрПункт);
//                Причина = СтрПричина;
//        КонецЕсли;
//                                  Страница 53
//                                    1111.txt
//        Возврат Причина;
//КонецФункции

//Функция ПолучитьДатуОкончанияИП(СтрокаОкончаниеИП)
//        Если СтрокаОкончаниеИП = "" Тогда
//                Возврат Дата(1,1,1);
//        Иначе
//                ПозицияДата =
//СтрНайти(СтрокаОкончаниеИП,",",НаправлениеПоиска.СНачала,,1);
//                СтрДата = Лев(СтрокаОкончаниеИП,ПозицияДата-1);
//                СтрДата=СтрЗаменить(СтрДата,"-","");
//                СтрДата =
//Сред(СтрДата,7,8)+"."+Сред(СтрДата,5,2)+"."+Сред(СтрДата,1,4);
//                СтрДата = СтрДата + " 00:00:00";
//                Попытка
//                        ДатаОкончанияИП = Дата(СтрДата);
//                        Если Год(ДатаОкончанияИП) > 3999 Тогда
//                                Возврат Дата(1,1,1);
//                        Иначе
//                                Возврат(ДатаОкончанияИП);
//                        КонецЕсли;
//                Исключение
//                        Возврат Дата(1,1,1);
//                КонецПопытки;
//        КонецЕсли;
//КонецФункции

//&НаСервере
//Функция ПолучитьРОСП(Наименование, КодРегиона)
//        Запрос = Новый запрос("ВЫБРАТЬ
//                              | Контрагенты.Ссылка КАК Ссылка,
//                              | ДополнительныеСведения.Значение КАК Значение
//                              |ИЗ
//                              | Справочник.Контрагенты КАК Контрагенты
//                              |         ЛЕВОЕ СОЕДИНЕНИЕ
//РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
//                              |         ПО Контрагенты.Ссылка =
//ДополнительныеСведения.Объект
//                              |                 И
//(ДополнительныеСведения.Свойство.Код = ""0469     "")
//                              |ГДЕ
//                              | &Наименование ПОДОБНО ""%"" +
//Контрагенты.Наименование + ""%""
//                              | И Контрагенты.ПометкаУдаления = ЛОЖЬ
//                              | И ДополнительныеСведения.Значение = &Значение
//                              | И Контрагенты.КодКонтрагента ПОДОБНО ""%ССП%""
//                              | И Контрагенты.ЭтоГруппа = ЛОЖЬ
//                              | И Контрагенты.ЮрФизЛицо.Код = ""0004     """);

//        Запрос.УстановитьПараметр("Наименование", Наименование);
//        Запрос.УстановитьПараметр("Значение", КодРегиона);
//        Результат = Запрос.Выполнить().Выбрать();
//                                  Страница 54
//                                    1111.txt
//        Если Результат.Следующий() Тогда
//                Возврат Результат.Ссылка;
//        Иначе
//                Возврат Справочники.Контрагенты.ПустаяСсылка();
//        КонецЕсли;
//КонецФункции

//Функция ПолучитьТекущееРОСП(ИД)
//        Запрос = Новый Запрос("ВЫБРАТЬ
//                              | СостоянияИПСрезПоследних.ОтделСудебныхПриставов
//КАК ОтделСудебныхПриставов
//                              |ИЗ
//                              | РегистрСведений.СостоянияИП.СрезПоследних(, ID =
//&ИД) КАК СостоянияИПСрезПоследних");
//        Запрос.УстановитьПараметр("ИД", ИД);
//        Результат = Запрос.Выполнить().Выбрать();
//        Если Результат.Следующий() Тогда
//                Возврат Результат.ОтделСудебныхПриставов;
//        Иначе
//                Возврат Справочники.Контрагенты.ПустаяСсылка();
//        КонецЕсли;
//КонецФункции

//Функция ПоискПриставаВБазе(КодЗначение)

//        Запрос = Новый Запрос;
//        Запрос.Текст =
//                "ВЫБРАТЬ
//                |        Контрагенты.Ссылка КАК Ссылка
//                |ИЗ
//                |        Справочник.Контрагенты КАК Контрагенты
//                |ГДЕ
//                |        Контрагенты.КодКонтрагента = &КодКонтрагента
//                |        И Контрагенты.ПометкаУдаления = ЛОЖЬ
//                |        И Контрагенты.ЭтоГруппа = ЛОЖЬ";

//        Запрос.УстановитьПараметр("КодКонтрагента", КодЗначение);

//        Результат = Запрос.Выполнить().Выбрать();
//        Если Результат.Следующий() Тогда
//                Возврат Результат.Ссылка;
//        Иначе
//                Возврат Справочники.Контрагенты.ПустаяСсылка();
//        КонецЕсли;

//КонецФункции


//Функция ЭтоИндекс(Индекс)
//        Стр = Индекс;
//        Если СтрДлина(Индекс) = 6 Тогда
//        ИначеЕсли СтрДлина(Индекс) >= 7 Тогда
//                                   Страница 55
//                                      1111.txt
//                  Индекс = Лев(Индекс, 6);
//        Иначе
//                Возврат Ложь;
//        КонецЕсли;

//        Попытка
//                Число = Число(Индекс);
//                Возврат Истина;
//        Исключение
//                Индекс = стр;
//                Возврат Ложь;
//        КонецПопытки;
//КонецФункции

//Функция ПоискПапкиОСП(Наименование, Родитель)
//        ЗапросПапкаОСП = Новый Запрос;
//        ЗапросПапкаОСП.Текст =
//                "ВЫБРАТЬ
//                |        Контрагенты.Ссылка КАК Ссылка
//                |ИЗ
//                |        Справочник.Контрагенты КАК Контрагенты
//                |ГДЕ
//                |        Контрагенты.ЭтоГруппа = ИСТИНА
//                |        И Контрагенты.ПометкаУдаления = ЛОЖЬ
//                |        И Контрагенты.Наименование = &Наименование
//                |        И Контрагенты.Родитель = &Родитель";

//        ЗапросПапкаОСП.УстановитьПараметр("Наименование", Наименование);
//        ЗапросПапкаОСП.УстановитьПараметр("Родитель", Родитель);

//        РезультатЗапроса = ЗапросПапкаОСП.Выполнить().Выгрузить();
//        Если РезультатЗапроса.Количество() > 0 Тогда
//                Возврат РезультатЗапроса[0].Ссылка;
//        Иначе
//                Возврат Справочники.Контрагенты.ПустаяСсылка();
//        КонецЕсли;
//КонецФункции

//Функция ПоискПапкиРегион(КодРегиона)
//        ЗапросПапкаОСП = Новый Запрос;
//        ЗапросПапкаОСП.Текст =
//                "ВЫБРАТЬ
//                |        Контрагенты.Ссылка КАК Ссылка
//                |ИЗ
//                |        Справочник.Контрагенты КАК Контрагенты
//                |ГДЕ
//                |        Контрагенты.ЭтоГруппа = ИСТИНА
//                |        И Контрагенты.ПометкаУдаления = ЛОЖЬ
//                |        И Контрагенты.КодАдресногоОбъектаВКоде = &КодРегиона
//                |        И Контрагенты.Родитель = &Родитель";

//        ЗапросПапкаОСП.УстановитьПараметр("КодРегиона", Число(КодРегиона));
//                                    Страница 56
//                                    1111.txt
//        ЗапросПапкаОСП.УстановитьПараметр("Родитель",
//Справочники.Контрагенты.НайтиПоКоду("000000011"));

//        РезультатЗапроса = ЗапросПапкаОСП.Выполнить().Выгрузить();
//        Если РезультатЗапроса.Количество() > 0 Тогда
//                Возврат РезультатЗапроса[0].Ссылка;
//        Иначе
//                Возврат Справочники.Контрагенты.ПустаяСсылка();
//        КонецЕсли;
//КонецФункции


//&НаСервере
//Функция НайтиДолговоеОбязательство(НомерИД, ДатаИД, Таблица)
//        //ЗапросДО = Новый Запрос("ВЫБРАТЬ
//        //                        |     ОбъектыВРаботеОстатки.Объект КАК Объект,
//        //                        |     ДополнительныеСведения.Значение КАК
//Серия,
//        //                        |     ДополнительныеСведения1.Значение КАК
//Номер,
//        //                        |     ДополнительныеСведения2.Значение КАК
//ДатаИД,
//        //                        |
//(ВЫРАЗИТЬ(ЕСТЬNULL(ДополнительныеСведения.Значение, """") КАК СТРОКА(100))) +
//(ВЫРАЗИТЬ(ЕСТЬNULL(ДополнительныеСведения1.Значение, """") КАК СТРОКА(100))) КАК
//СерияНомер,
//        //                        |     ОбъектыВРаботеОстатки.Объект.Должник КАК
//Должник
//        //                        |ИЗ
//        //                        |     РегистрНакопления.ОбъектыВРаботе.Остатки
//КАК ОбъектыВРаботеОстатки
//        //                        |             ЛЕВОЕ СОЕДИНЕНИЕ
//РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
//        //                        |             ПО ОбъектыВРаботеОстатки.Объект
//= ДополнительныеСведения.Объект
//        //                        |                     И
//(ДополнительныеСведения.Свойство.Код = ""0193     "")
//        //                        |             ЛЕВОЕ СОЕДИНЕНИЕ
//РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения1
//        //                        |             ПО ОбъектыВРаботеОстатки.Объект
//= ДополнительныеСведения1.Объект
//        //                        |                     И
//(ДополнительныеСведения1.Свойство.Код = ""0194     "")
//        //                        |             ЛЕВОЕ СОЕДИНЕНИЕ
//РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения2
//        //                        |             ПО ОбъектыВРаботеОстатки.Объект
//= ДополнительныеСведения2.Объект
//        //                        |                     И
//(ДополнительныеСведения2.Свойство.Код = ""0195     "")
//        //                        |ГДЕ
//        //                        |     ОбъектыВРаботеОстатки.Объект.Должник =
//&Должник");
//                                  Страница 57
//                                    1111.txt
//        //ЗапросДО.УстановитьПараметр("Должник", Должник);
//        //Таблица = ЗапросДО.Выполнить().Выгрузить();
//        Для Каждого стртаб из Таблица Цикл
//                стртаб.СерияНомер = СтрЗаменить(стрТаб.СерияНомер, "№", "");
//                стртаб.СерияНомер = СтрЗаменить(стрТаб.СерияНомер, " ", "");
//                стртаб.СерияНомер = СтрЗаменить(стрТаб.СерияНомер, "-", "");
//                стртаб.СерияНомер = СтрЗаменить(стрТаб.СерияНомер, "/", "");
//                стртаб.СерияНомер = СтрЗаменить(стрТаб.СерияНомер, "\", "");
//        КонецЦикла;
//        СерияНомер = НомерИД;
//        СерияНомер = СтрЗаменить(СерияНомер, " ", "");
//        СерияНомер = СтрЗаменить(СерияНомер, "/", "");
//        СерияНомер = СтрЗаменить(СерияНомер, "\", "");
//        СерияНомер = СтрЗаменить(СерияНомер, "-", "");
//        Если СерияНомер = "" Тогда
//                Возврат Справочники.ДолговыеОбязательства.ПустаяСсылка();
//        Иначе
//                Стр = Новый Структура;
//                //ЗапросДО.УстановитьПараметр("Дата", ДатаИД);
//                Стр.Вставить("СерияНомер", СерияНомер);
//                Стр.Вставить("ДатаИД", ДатаИД);
//                Строки = Таблица.НайтиСтроки(стр);
//                Если Строки.Количество() > 0 Тогда
//                        Возврат Строки[0].Объект;
//                Иначе
//                        Возврат
//Справочники.ДолговыеОбязательства.ПустаяСсылка();
//                КонецЕсли;
//        КонецЕсли;
//КонецФункции

//&НаСервере
//Функция ПолучитьТаблицуДО(Должник)
//        ЗапросДО = Новый Запрос("ВЫБРАТЬ
//                                |        ОбъектыВРаботеОстатки.Объект КАК Объект,
//                                |        ДополнительныеСведения.Значение КАК
//Серия,
//                                |        ДополнительныеСведения1.Значение КАК
//Номер,
//                                |        ДополнительныеСведения2.Значение КАК
//ДатаИД,
//                                |
//(ВЫРАЗИТЬ(ЕСТЬNULL(ДополнительныеСведения.Значение, """") КАК СТРОКА(100))) +
//(ВЫРАЗИТЬ(ЕСТЬNULL(ДополнительныеСведения1.Значение, """") КАК СТРОКА(100))) КАК
//СерияНомер,
//                                |        ОбъектыВРаботеОстатки.Объект.Должник КАК
//Должник
//                                |ИЗ
//                                |        РегистрНакопления.ОбъектыВРаботе.Остатки
//КАК ОбъектыВРаботеОстатки
//                                |                ЛЕВОЕ СОЕДИНЕНИЕ
//РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
//                                   Страница 58
//                                       1111.txt
//                                  |                 ПО ОбъектыВРаботеОстатки.Объект
//= ДополнительныеСведения.Объект
//                                |                        И
//(ДополнительныеСведения.Свойство.Код = ""0193     "")
//                                |               ЛЕВОЕ СОЕДИНЕНИЕ
//РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения1
//                                |               ПО ОбъектыВРаботеОстатки.Объект
//= ДополнительныеСведения1.Объект
//                                |                        И
//(ДополнительныеСведения1.Свойство.Код = ""0194      "")
//                                |               ЛЕВОЕ СОЕДИНЕНИЕ
//РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения2
//                                |               ПО ОбъектыВРаботеОстатки.Объект
//= ДополнительныеСведения2.Объект
//                                |                        И
//(ДополнительныеСведения2.Свойство.Код = ""0195      "")
//                                |ГДЕ
//                                |       ОбъектыВРаботеОстатки.Объект.Должник =
//&Должник");
//        ЗапросДО.УстановитьПараметр("Должник", Должник);
//        Таблица = ЗапросДО.Выполнить().Выгрузить();
//        Возврат Таблица;
//КонецФункции

//&НаСервере
//Функция ПолучитьРучнуюПривязку(ИД)
//        Запрос = Новый Запрос("ВЫБРАТЬ
//                              | СостоянияИПСрезПоследних.ID КАК ID,
//                              | СостоянияИПСрезПоследних.ПривязкаКДО КАК
//ПривязкаКДО,
//                              | СостоянияИПСрезПоследних.ДолговоеОбязательство
//КАК ДолговоеОбязательство
//                              |ИЗ
//                              | РегистрСведений.СостоянияИП.СрезПоследних(, ID =
//&ИД) КАК СостоянияИПСрезПоследних");
//        Запрос.УстановитьПараметр("ИД", ИД);
//        Результат = Запрос.Выполнить().Выбрать();
//        Если Результат.Следующий() Тогда
//                Если Результат.ПривязкаКДО =
//Перечисления.ВидыПривязкиИПкДО.Ручная Тогда
//                        Возврат Результат.ДолговоеОбязательство;
//                Иначе
//                        Возврат
//Справочники.ДолговыеОбязательства.ПустаяСсылка();
//                КонецЕСли;
//        Иначе
//                Возврат Справочники.ДолговыеОбязательства.ПустаяСсылка();
//        КонецЕсли;
//КонецФункции

//Функция СократитьИмяСТочками(СтрокаВх)
//        ИмяПристава = СтрокаВх;
//                                      Страница 59
//                                   1111.txt
//       //ИмяПристава = СтрЗаменить(ИмяПристава, ".", " ");
//       ИмяПристава = стрЗаменить(ИмяПристава, " ", " ");

//       Если Лев(ИмяПристава, 1) = " " Тогда
//               ИмяПристава = Прав(ИмяПристава, СтрДлина(ИмяПристава) - 1);
//       КонецЕсли;
//       ИмяПристава = СтрЗаменить(ИмяПристава, " ", Символы.ПС);
//       ЧислоСтрок = СтрЧислоСтрок(ИмяПристава);


//       Фамилия = стрПолучитьСтроку(ИмяПристава, 1);
//       Имя = стрПолучитьСтроку(ИмяПристава, 2);
//       Отчество = стрПолучитьСтроку(ИмяПристава, 3);

//       ФИО = Фамилия;
//       Если СтрДлина(Имя) > 0 Тогда
//               ФИО = ФИО + " " + Лев(Имя, 1) + ".";
//       КонецЕсли;

//        Если СтрДлина(Отчество) > 0 Тогда
//                ФИО = ФИО + Лев(Отчество, 1) + ".";
//        КонецЕсли;
//        Возврат(ФИО);
//КонецФункции

//&НаСервере
//Функция ПолучитьИндексИзСтроки(стр)
//        Значение = стр;
//        стрцифры = "0123456789";
//        стриндекс = "";
//        Для к = 1 по стрДлина(Значение) Цикл
//                Буква = Сред(Значение, к, 1);
//                Если Найти(стрЦифры, Буква) > 0 Тогда
//                        стрИндекс = стрИндекс + Буква;
//                        Если стрДлина(стрИндекс) = 6 Тогда
//                                 Прервать;
//                        КонецЕсли;
//                Иначе
//                        стрИндекс = "";
//                КонецЕсли;
//        КонецЦикла;


//       Если СтрИндекс = "" Тогда
//               Для к = 1 по стрДлина(Значение) Цикл
//                       Буква = Сред(Значение, к, 1);
//                       Если Найти(стрЦифры, Буква) > 0 Тогда
//                               стрИндекс = стрИндекс + Буква;
//                               Если стрДлина(стрИндекс) = 5 Тогда
//                                       Прервать;
//                               КонецЕсли;
//                       Иначе
//                                  Страница 60
//                                    1111.txt
//                                стрИндекс = "";
//                        КонецЕсли;
//                КонецЦикла;
//        КонецЕсли;

//        Возврат СтрИндекс;
//КонецФункции


//Процедура ПолныйЦикл() Экспорт
//        Если Не ЕстьНезавершенныеЗадания() Тогда
//                НомерОчереди = Константы.НомерОчередиФССП.Получить();
//                Константы.НомерОчередиФССП.Установить(НомерОчереди + 1);
//                СформироватьДанныеДляВыгрузки();
//        КонецЕсли;

//        Пока ЕстьНезавершенныеЗадания() Цикл
//                Попытка
//                        ОсуществитьВыгрузку();
//                        ЗагрузитьДанные();
//                        ОбработатьДанные();
//                        УдалитьОчередь();
//                Исключение
//                        ТекстОшибки = ОписаниеОшибки();
//                        СообщитьОбОшибке(ТекстОшибки);
//                        Прервать;
//                КонецПопытки;
//        КонецЦикла;
//КонецПроцедуры

//Процедура СообщитьОбОшибке(ТекстОшибки)
//        Об = Задачи.Сообщения.СоздатьЗадачу();
//        Об.ТипСообщения = Перечисления.ТипыСообщений.КСотруднику;
//        Об.Наименование = "Ошибка при обработке данных ФССП";
//        Об.Текст = ТекстОшибки;
//        Об.Автор = Справочники.Пользователи.НайтиПоКоду("БИТ ФОН");
//        Об.Дата = ТекущаяДата();
//        Об.ПланируемаяДата = Об.Дата;
//        Об.Сотрудник = Константы.ПолучательТехническихСообщений.Получить();
//        Об.Записать();
//КонецПроцедуры

//Функция ЕстьНезавершенныеЗадания()
//        НомерОчереди = Константы.НомерОчередиФССП.Получить();
//        Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
//                              | ЗапросыПоИП.Ссылка КАК Ссылка
//                              |ИЗ
//                              | Документ.ЗапросыПоИП КАК ЗапросыПоИП
//                              |ГДЕ
//                              | ЗапросыПоИП.Статус <> &Статус
//                              | И ЗапросыПоИП.НомерОчереди = &НомерОчереди
//                              | И ЗапросыПоИП.ПометкаУдаления = ЛОЖЬ");
//                                  Страница 61
//                                    1111.txt
//        Запрос.УстановитьПараметр("Статус",
//Перечисления.СтатусыЗаданийИП.ДокументыСформированы);
//        Запрос.УстановитьПараметр("НомерОчереди", НомерОчереди);
//        Результат = Запрос.Выполнить().Выбрать();
//        Если Результат.Следующий() Тогда
//                Возврат Истина;
//        Иначе
//                Возврат Ложь;
//        КонецЕсли;
//КонецФункции


////&НаСервере
////Процедура ОбработатьВсеЗадания() Экспорт
////
////      Запрос = Новый Запрос("ВЫБРАТЬ
////                            | ЛогированиеЗапросовФССП.task КАК task,
////                            | ЛогированиеЗапросовФССП.Учетка КАК Учетка
////                            |ИЗ
////                            | РегистрСведений.ЛогированиеЗапросовФССП КАК
//ЛогированиеЗапросовФССП
////                            |ГДЕ
////                            | ЛогированиеЗапросовФССП.Завершено = ЛОЖЬ
////                            | И ЛогированиеЗапросовФССП.ВидЗадания =
//ЗНАЧЕНИЕ(Перечисление.ВидыЗаданийФССП.group)");
////      Результат = Запрос.Выполнить().Выбрать();
////      Пока Результат.Следующий() Цикл
////              Сервер = "api-ip.fssprus.ru";
////              Ресурс = "/api/v1.0/result";
////              СтрокаПараметров = "?token=" + Результат.Учетка.token + "&task="
//+ Результат.task; //ca7d41a2-080a-4e4f-a8f7-7c0140107924
////              HTTPЗапрос = Новый HTTPЗапрос;
////              HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаПараметров);
////              HTTPЗапрос.АдресРесурса = Ресурс + СтрокаПараметров;
////              ssl = Новый ЗащищенноеСоединениеOpenSSL;
////              HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);
////              ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();
////              ОтветHTTP = HTTP.Получить(HTTPЗапрос, ИмяВыходногоФайла);
////              ЧтениеJSON = Новый ЧтениеJSON;
////              ЧтениеJSON.ОткрытьФайл(имяВыходногоФайла);
////
////              СтруктураJSON = ПрочитатьJSON(ЧтениеJSON);
////              Если СтруктураJSON.status = "error" тогда
////                      Сообщить("Ошибка при выполнении запроса-ответа!");
////              ИначеЕсли СтруктураJSON.status = "success" И
//Число(СтруктураJSON.response.status) <=1 Тогда
////                      ДокументОбъект =
//Документы.ВнесениеСведенийОбИП.СоздатьДокумент();
////                      ДокументОбъект.Автор =
//ПараметрыСеанса.ТекущийПользователь;
////                      ДокументОбъект.Организация =
//ПараметрыСеанса.ТекущийПользователь.Организация;
//                                  Страница 62
//                                     1111.txt
////                      ДокументОбъект.task = Результат.task;
////                      ДокументОбъект.Дата = ТекущаяДата();
////
////                      //Для Каждого ИП из Объект.ИП Цикл
////                      //      стр = ДокументОбъект.Объекты.Добавить();
////                      //      ЗаполнитьЗначенияСвойств(стр, ИП);
////                      //      стр.Период = ТекущаяДата();
////                      //      стр.Должник = ИП.Объект;
////                      //      стр.ID = ИП.exe_production;
////                      //
////                      //КонецЦикла;
////
////
////                      Для Каждого ДолжникJSON из СтруктураJSON.response.result
//Цикл
////                              Если ДолжникJSON.status = 0 Тогда
////                                       ФормаДолжник =
//Справочники.Контрагенты.ПустаяСсылка();
////                                       МассивИП =
//ИнтеграцияФССП.ЗаполнитьДанныеДокумента(ДолжникJSON, ФормаДолжник, Истина);
////                                       //Для Каждого ИП из ДолжникJSON.result
//Цикл
////                                       //      Если
//ДокументОбъект.Объекты.НайтиСтроки(Новый Структура("ID",
//ИП.exe_production)).Количество() = 0 Тогда
////                                       //              ФИО =
//ДолжникJSON.query.params.lastname + " " + ДолжникJSON.query.params.firstname + "
//" + ДолжникJSON.query.params.secondname;
////                                       //              Попытка
////                                       //                      ДатаРождения =
//ДолжникJSON.query.params.birthdate;
////                                       //              Исключение
////                                       //                      Попытка
////                                       //
//ДатаРождения = Дата(сред(ИП.name, СтрНайти(ИП.name, " ", , ,3)+1, 10) + "
//00:00:00");
////                                       //                      Исключение
////                                       //
//ДатаРождения = Неопределено;
////                                       //                      КонецПопытки;
////                                       //              КонецПопытки;
////                                       //
////                                       //              Должник =
//ПолучитьДолжника(ФИО, ДатаРождения);
////                                       //              стр =
//ДокументОбъект.Объекты.Добавить();
////                                       //
//ЗаполнитьЗначенияСвойств(стр, ИП);
////                                       //              стр.Должник = Должник;
////                                       //              стр.Период =
//ТекущаяДата();
////                                       //              стр.ID =
//                                  Страница 63
//                                      1111.txt
//ИП.exe_production;
////                                        //      КонецЕсли;
////                                        //КонецЦикла;
////                                        Для Каждого ип из МассивИП Цикл
////                                                стр =
//ДокументОбъект.Объекты.Добавить();
////                                                 ЗаполнитьЗначенияСвойств(стр,
//ИП);
////                                                 стр.Должник = ФормаДолжник;
////                                                 стр.Период = ТекущаяДата();

////                                      КонецЦикла;
////                              Конецесли;
////                      КонецЦикла;
////                      ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение,
//РежимПроведенияДокумента.Неоперативный);

////                       Сообщить("Данные по заданию загружены!");
////               ИначеЕсли СтруктураJSON.status = "success" и
//СтруктураJSON.response.status > 1 тогда
////                       Сообщить("Задание еще не обработано!");
////               КонецЕсли;
////
////
////               ЧтениеJSON.Закрыть();
////               //
////               // удаляем файл после использования
////               УдалитьФайлы(имяВыходногоФайла);
////      КонецЦикла;
////КонецПроцедуры




//                                     Страница 64

КонецПроцедуры

Процедура ОбработатьПрогрессЕдиничного(Задание,АдресРезультата) Экспорт
	Задание.ОбработкаЗакончена = Ложь;
	token = ПолучитьТокен();
	token = СтрЗаменить(token," ","");
	//Сервер = "api-ip.fssprus.ru";
	Сервер = ПолучитьЗначениеСервера();
	Ресурс = "/api/v1.0/status";
	СтрокаПараметров = "?token=" + token + "&task=" + Задание.Задание; //ca7d41a2-080a-4e4f-a8f7-7c0140107924
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаПараметров);
	HTTPЗапрос.АдресРесурса = Ресурс + СтрокаПараметров;
	ssl = Новый ЗащищенноеСоединениеOpenSSL;
	HTTP = Новый HTTPСоединение(Сервер,,,,,,ssl);
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();
	Попытка
		ОтветHTTP = HTTP.Получить(HTTPЗапрос,ИмяВыходногоФайла);
	Исключение
		Задание.ОбработкаЗакончена = Ложь;
		ОбработатьПрогрессЕдиничного(Задание,АдресРезультата);
	КонецПопытки;	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(имяВыходногоФайла);
	СтруктураJSON = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	УдалитьФайлы(имяВыходногоФайла);

	Если СтруктураJSON.status = "error" тогда
		Если стрНайти(СтруктураJSON.exception,"not exist")>0 Тогда
			Описание = "При обработке задания произошла ошибка: Задание не существует!";
			ДлительныеОперации.СообщитьПрогресс(Окр(0, 0), Описание);
			Задание.ОбработкаЗакончена = Ложь;
			АдресРезультата = ПоместитьВоВременноеХранилище(Задание.ОбработкаЗакончена,АдресРезультата);
			Возврат;
		Иначе
			Задание.ОбработкаЗакончена = Ложь;
			СделатьПаузу(5);
			Описание = "Задание повторно отправлено в очередь на сервисе ФССП...";
			ДлительныеОперации.СообщитьПрогресс(Окр(0, 0), Описание);
			ОбработатьПрогрессЕдиничного(Задание,АдресРезультата);
		КонецЕсли;
		
	ИначеЕсли СтруктураJSON.status = "success" И Число(СтруктураJSON.response.status) = 0 Тогда
		Описание = "Задание обработано!";
		ДлительныеОперации.СообщитьПрогресс(Окр(100, 0), Описание);
		Задание.ОбработкаЗакончена = Истина;
		АдресРезультата = ПоместитьВоВременноеХранилище(Задание.ОбработкаЗакончена,АдресРезультата);
		Возврат;	
	ИначеЕсли СтруктураJSON.status = "success" и СтруктураJSON.response.status = 3 тогда
		Описание = "При обработке задания произошла частичная потеря данных. Повторите попытку позже!";
		ДлительныеОперации.СообщитьПрогресс(Окр(0, 0), Описание);
		Задание.ОбработкаЗакончена = Ложь;
		АдресРезультата = ПоместитьВоВременноеХранилище(Задание.ОбработкаЗакончена,АдресРезультата);
		Возврат;
	ИначеЕсли СтруктураJSON.status = "success" и (СтруктураJSON.response.status = 1) Тогда
		Задание.ОбработкаЗакончена = Ложь; 
		СделатьПаузу(5);
		Описание = "Задание обрабатывается на сервисе ФССП...";
		ПозицияOF = СтрНайти(СтруктураJSON.response.progress, "of");
		ЛевыйПрогресс = Лев(СтруктураJSON.response.progress, ПозицияOF-1);
		ЛевыйПрогрессЧисло = Число(ЛевыйПрогресс);
		ДлительныеОперации.СообщитьПрогресс(Окр(ЛевыйПрогрессЧисло, 0), Описание);
		ОбработатьПрогрессЕдиничного(Задание,АдресРезультата);
	ИначеЕсли СтруктураJSON.status = "success" и (СтруктураJSON.response.status = 2) Тогда
		Задание.ОбработкаЗакончена = Ложь; 
		СделатьПаузу(5);
		Описание = "Задание находится в очереди на сервисе ФССП...";
		ПозицияOF = СтрНайти(СтруктураJSON.response.progress, "of");
		ЛевыйПрогресс = Лев(СтруктураJSON.response.progress, ПозицияOF-1);
		ЛевыйПрогрессЧисло = Число(ЛевыйПрогресс);
		ДлительныеОперации.СообщитьПрогресс(Окр(ЛевыйПрогрессЧисло, 0), Описание);
		ОбработатьПрогрессЕдиничного(Задание,АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗначениеСервера()

	Сервер = "api-ip.fssp.gov.ru";
	Возврат Сервер;

КонецФункции

Процедура ЗапуститьРобота() Экспорт
	
	Обработки.ФССП_Робот.ОбходОчередьЗагрузкиДолжниковНаСервере();
	
КонецПроцедуры

Функция ПолучитьСуммуИзСтрокиПредмета(Строка)
	зСтрока = Строка;
	зСтрока = СтрЗаменить(зСтрока,"руб.","");
	зСтрока = СтрЗаменить(зСтрока,"руб","");
	зСтрока = СтрЗаменить(зСтрока,",",".");
	НоваяСтрока = "";
	ЧитаемыеСимволы = "0123456789.";
	Для Сч = 1 по СтрДлина(зСтрока) Цикл
		Символ = Сред(зСтрока, Сч, 1);
		Если Найти(ЧитаемыеСимволы, Символ) > 0 Тогда
			НоваяСтрока = НоваяСтрока + Символ;
		ИначеЕсли Сч > 1  И Сч < СтрДлина(зСтрока) И Символ = "." И СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Сред(зСтрока, Сч - 1, 1)) <> Неопределено Тогда // если точка и предущий символ число , то предпологаем что это разделитель
			НоваяСтрока = НоваяСтрока + Символ;	
		КонецЕсли;
	КонецЦикла;
	
	Сумма = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(НоваяСтрока);
	Если Сумма = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Сумма;
	КонецЕсли;
КонецФункции
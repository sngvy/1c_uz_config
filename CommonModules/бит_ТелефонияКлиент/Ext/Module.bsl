////////////////////////////////////////////////////////////////////////////////
// Общий модуль телефонии БИТ
// Содержит общие функции, которые вызываются на клиенте.
////////////////////////////////////////////////////////////////////////////////

// Выводит сообщение пользователю.
//
// Параметры:
//  Текст - Строка, текст сообщения
//  Форма - УправляемаяФорма к которой привязывается сообщение.
//
Процедура ВывестиСообщение(Текст, Форма=Неопределено) ЭКСПОРТ
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = Текст;
	Если Форма <> Неопределено Тогда
		Сообщение.ИдентификаторНазначения = Форма.УникальныйИдентификатор;
	КонецЕсли;
	Сообщение.Сообщить();
КонецПроцедуры

// Формирует полный номер телефона с префиксами выхода в город и на междугороднюю линию.
// Из номера удаляются лишние символы.
// Если номер уже с префиксами, то сначала префиксы удаляются.
//
// Параметры:
//  стрНомерИсх - Строка - номер телефона 
//  флагПрямойНабор - Булево - признак "прямого" набора, когда преобразования не делаются
//  стрПрефиксВнешЛинии - Строка - префикс выхода на внешнюю линию с офисной АТС.
//
// Возвращаемое значение:
//   Строка - сформированный полный номер с префиксами, очищенный от лишних символов.
//
Функция СформироватьНомерСПрефиксами(стрНомерИсх, флагПрямойНабор, стрПрефиксВнешЛинии) ЭКСПОРТ
	стрНомер = бит_ТелефонияКлиентСервер.ОчиститьНомерЦифрыЗвРеш(стрНомерИсх);
	Если НЕ ЗначениеЗаполнено(стрНомер) Тогда
		Возврат "";
	КонецЕсли;
	индексЗвРеш = бит_ТелефонияКлиентСервер.ПолучитьИндексЗвРеш(стрНомер);
	Если (НЕ флагПрямойНабор) И (индексЗвРеш = 0) Тогда
		стрНомер = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(стрНомер);
		длинаНомера = СтрДлина(стрНомер);
		длинаВнешнегоНомера = бит_ТелефонияКлиентСервер.ПолучитьДлинуВнешнегоНомера();
		//
		Если длинаНомера >= длинаВнешнегоНомера Тогда
			стрНомер = "8" + стрНомер;	// добавим префикс межгорода
			//
			Если ЗначениеЗаполнено(стрПрефиксВнешЛинии) Тогда    //добавим префикс исх. линии к номеру, если он есть
				стрНомер = стрПрефиксВнешЛинии + стрНомер;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат стрНомер;
КонецФункции

// Возвращает значение системной переменной окружения APPDATA (папки для приложений в профиле пользователя).
//
// Параметры:
//  стрЗаголовокОшибки - Строка - заголовок для вывода ошибок.
//
// Возвращаемое значение:
//   Строка - путь к директории.
//
Функция ПолучитьПапкуПриложенийПользователя(стрЗаголовокОшибки) ЭКСПОРТ
	Перем шелл;
	Попытка
		шелл = Новый COMОбъект("WScript.Shell");
	Исключение
		ВывестиСообщение(стрЗаголовокОшибки + "Не удалось создать COM-объект WScript.Shell" + ОписаниеОшибки());
	КонецПопытки;
	стрПрофиль = шелл.ExpandEnvironmentStrings("%appdata%");
	Если НЕ ЗначениеЗаполнено(стрПрофиль) Тогда
		ВывестиСообщение(стрЗаголовокОшибки + "Не удалось получить директорию профиля пользователя");
	КонецЕсли;
	Возврат стрПрофиль;
КонецФункции

// Удаление файла внешней компоненты.
//
// Параметры:
//   стрИмяФайлаСокр - Строка - имя dll-файла внешней компоненты без пути.
//
// Возвращаемое значение:
//   Строка - полное имя файла внешней компоненты.
//
Функция УдалениеФайлаВнешнейКомпонентыТелефонии(стрИмяФайлаСокр) ЭКСПОРТ

	Перем офс;
	
	// Удаляем ВК, если она была ранее установлена.
	
	стрЗаголовокОшибки = "Ошибка при удалении старого файла внешней компоненты '" + стрИмяФайлаСокр + "'. ";
	
	// объект файловой системы MS FileSystemObject
	Попытка
		офс = Новый COMОбъект("Scripting.FileSystemObject");
	Исключение
		ВывестиСообщение(стрЗаголовокОшибки + "Не удалось создать COM-объект FileSystemObject" + ОписаниеОшибки());
	КонецПопытки;
	
	стрПрофиль = ПолучитьПапкуПриложенийПользователя(стрЗаголовокОшибки);
	
	СистИнформация = Новый СистемнаяИнформация;
	стрВерсияПлатформы = СистИнформация.ВерсияПриложения;
	стрВерсияПлатформыОсн = Лев(стрВерсияПлатформы, 3);
	
	стрПапкаКэша1С = "";
	
	Если стрВерсияПлатформыОсн = "8.2" Тогда
		стрПапкаКэша1С = стрПрофиль + "\1C\1Cv82";
	ИначеЕсли стрВерсияПлатформыОсн = "8.1" Тогда
		стрПапкаКэша1С = стрПрофиль + "\1C\1Cv81";
	Иначе
		стрПапкаКэша1С = стрПрофиль + "\1C\1Cv8";
	КонецЕсли;
	
	// проверить в папке файл location.cfg
	стрФайлКонфигурацииРасположения = стрПапкаКэша1С + "\location.cfg";
	файлКонфигурацииРасположения = Новый Файл(стрФайлКонфигурацииРасположения);
	Если файлКонфигурацииРасположения.Существует() И файлКонфигурацииРасположения.ЭтоФайл() Тогда
		стрРасположение = "location=";
		файлЧтение = Новый ЧтениеТекста;
		файлЧтение.Открыть(стрФайлКонфигурацииРасположения, КодировкаТекста.UTF8);
		стрЧтениеФайла = файлЧтение.ПрочитатьСтроку();
		Пока стрЧтениеФайла <> Неопределено Цикл
			индексРасположение = Найти(стрЧтениеФайла, стрРасположение);
			Если индексРасположение > 0 Тогда
				стрПапкаКэша1С = Сред(стрЧтениеФайла, индексРасположение + СтрДлина(стрРасположение));
				Прервать;
			КонецЕсли;
			стрЧтениеФайла = файлЧтение.ПрочитатьСтроку();
		КонецЦикла;
		файлЧтение.Закрыть();
	КонецЕсли;
	//
	
	стрИмяФайлаВК = стрПапкаКэша1С + "\ExtCompT\" + стрИмяФайлаСокр;
	Попытка
		офс.DeleteFile(стрИмяФайлаВК, Истина);
	Исключение
		// Если файла нет - исключение не обрабатывается.
	КонецПопытки;

	бит_ТелефонияКлиент.ВывестиСообщение("Обновление внешней компоненты '" + стрИмяФайлаСокр + "'...");
	
	Возврат стрИмяФайлаВК;
	
КонецФункции

// Проверка разрядности платформы 1С
Функция Клиент64бит() ЭКСПОРТ
	Клиент64 = Ложь;
	Попытка
		шелл = Новый COMОбъект("WScript.Shell");
		параметры_процесса = шелл.Environment("Process");
		стрАрхитектураПроцесса = параметры_процесса.Item("PROCESSOR_ARCHITECTURE");
		Клиент64 = (стрАрхитектураПроцесса <> "x86");
	Исключение
		ВывестиСообщение("Ошибка проверки разрядности платформы 1С. " + ОписаниеОшибки());
	КонецПопытки;
	Возврат Клиент64;
КонецФункции

// Возвращает массив из 3 чисел
Функция ПолучитьВерсиюПлатформы() ЭКСПОРТ
	массВерсия = Новый Массив(3);
	СисИнфо = Новый СистемнаяИнформация;
	стрВерсияПлатформы = СисИнфо.ВерсияПриложения;
	списЗначВерс = бит_ТелефонияКлиентСервер.СтрРазбить(стрВерсияПлатформы, ".");
	Для й=0 По 2 Цикл
		массВерсия[й] = Число(списЗначВерс[й].Значение);
	КонецЦикла;
	Возврат массВерсия;
КонецФункции

// Возвращает строку, имя файла для записи разговора, без расширения.
Функция ПолучитьИмяФайлаЗаписиСДатой(датаЗаписи) ЭКСПОРТ
	стрИмяФайла = "record" + Формат(датаЗаписи, "ДФ=""yyyyMMddHHmmss""");
	Возврат стрИмяФайла;
КонецФункции

//
Процедура ОткрытьФормуВыполнитьДействие(ИмяФормы, стрДействие, стрПараметрДействия) ЭКСПОРТ
	Попытка
		ФормаОповещ = ПолучитьФорму(ИмяФормы);
		Если ФормаОповещ.Открыта() Тогда
			ФормаОповещ.Активизировать();
			Если ЗначениеЗаполнено(стрДействие) Тогда
				Оповестить(стрДействие, стрПараметрДействия);
			КонецЕсли;
		Иначе
			ФормаОповещ.ПриПодключенииДействие = стрДействие;
			ФормаОповещ.ПриПодключенииПараметр = стрПараметрДействия;
			ФормаОповещ.Открыть();
			ФормаОповещ.Активизировать();
			Состояние("Ожидание подключения...");
		КонецЕсли;
	Исключение
		бит_ТелефонияКлиент.ВывестиСообщение( ОписаниеОшибки() );
	КонецПопытки;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с HTTP

// Скачивание страницы по HTTPS
//
// Параметры:
//   АдресHTTP - Строка - полный адрес страницы.
//   таймаут - целое число, время ожидания в секундах.
//   флагЗагрузкаТекста - Булево, флаг загрузки текста или двоичных данных.
//   ТелоОтвета - Строка или ДвоичныеДанные - возвращаемое значение.
//
// Возвращаемое значение:
//   Булево - успешность загрузки.
//
Функция СкачатьПоHTTPS(АдресHTTP, таймаут, флагЗагрузкаТекста, ТелоОтвета) ЭКСПОРТ
	скачиваниеУспешно = Истина;
	Попытка
		ТелоОтвета = "";
		протокол = "";
		АдресЗагрузки = АдресHTTP;
		инд = Найти(АдресЗагрузки, "://");
		Если инд > 0 Тогда
			протокол = НРег(Лев(АдресЗагрузки, инд-1));
			АдресЗагрузки = Сред(АдресЗагрузки, инд+3);
		КонецЕсли;
		//
		СоединХост = АдресЗагрузки;
		СоединЗапрос = "";
		инд = Найти(АдресЗагрузки, "/");
		Если инд > 0 Тогда
			СоединХост = Лев(АдресЗагрузки, инд-1);
			СоединЗапрос = Сред(АдресЗагрузки, инд);
		КонецЕсли;
		//
		ssl = Неопределено;
		Если протокол = "https" Тогда
			ssl = Новый ЗащищенноеСоединениеOpenSSL;
		КонецЕсли;
		прокси = Новый ИнтернетПрокси(Ложь);
		соед = Новый HTTPСоединение(СоединХост, , , , прокси, таймаут, ssl);
		запрос = Новый HTTPЗапрос(СоединЗапрос);
		ответ = соед.Получить(запрос);
		ТелоОтвета = ? (флагЗагрузкаТекста, ответ.ПолучитьТелоКакСтроку(), ответ.ПолучитьТелоКакДвоичныеДанные());
		Если Цел(ответ.КодСостояния/100) = 2 Тогда
			скачиваниеУспешно = Истина;
		Иначе
			Если ответ.КодСостояния = 301 Тогда
				// редирект
				скачиваниеУспешно = СкачатьПоHTTPS(ответ.Заголовки["Location"], таймаут, флагЗагрузкаТекста, ТелоОтвета);
			Иначе
				скачиваниеУспешно = Ложь;
				ВывестиСообщение( "Ошибка загрузки, код " + Строка(ответ.КодСостояния) );
			КонецЕсли;
		КонецЕсли;
	Исключение
		скачиваниеУспешно = Ложь;
		ВывестиСообщение( ОписаниеОшибки() );
	КонецПопытки;
	Возврат скачиваниеУспешно;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с отборами динамических списков

Процедура УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля, ПравоеЗначение) ЭКСПОРТ
	элОтбора = Неопределено;
	Для Каждого элСпискаОтбора Из ДинамическийСписок.Отбор.Элементы Цикл
		Если Строка(элСпискаОтбора.ЛевоеЗначение) = ИмяПоля Тогда
			элОтбора = элСпискаОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если элОтбора = Неопределено Тогда
		элОтбора = ДинамическийСписок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	КонецЕсли;
	элОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	элОтбора.Использование = Истина;
	элОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	элОтбора.ПравоеЗначение = ПравоеЗначение;
КонецПроцедуры

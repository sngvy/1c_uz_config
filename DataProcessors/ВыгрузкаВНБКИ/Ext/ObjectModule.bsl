&НаСервере 
Перем МассивУникальныеДатыПлатежа Экспорт;


Процедура ВыгрузитьДанныеВФайл(РучнаяВыгрузка) Экспорт
	//РучнаяВыгрузка = Ложь;
	Сформирован = Ложь;                                                      
	ПараметрыВыгрузки = Новый ТаблицаЗначений;
	ПараметрыВыгрузки.Колонки.Добавить("Настройка");
	ПараметрыВыгрузки.Колонки.Добавить("МассивОбъектов");
	Если РучнаяВыгрузка Тогда
		НастройкаВыгрузки = ЭтотОбъект.НастройкаВыгрузки;
		МассивОбъектов = ЭтотОбъект.Объекты.ВыгрузитьКолонку("Объект");
		МассивОбъектов = ПроверитьМассив(МассивОбъектов,НастройкаВыгрузки);
		ДобавитьСтрокуВТаблицу(ПараметрыВыгрузки,НастройкаВыгрузки,МассивОбъектов);
	ИначеЕсли Не РучнаяВыгрузка Тогда
		НастройкиВыгрузки = ПолучитьТекущиеНастройкиВыгрузкиНБКИ();
		Если НастройкиВыгрузки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;	
		Для каждого Настройка из НастройкиВыгрузки Цикл
			МассивОбъектов = СформироватьМассивОбъектовДляВыгрузкиПоРС(Настройка);
			ДобавитьСтрокуВТаблицу(ПараметрыВыгрузки,Настройка,МассивОбъектов);	
		КонецЦикла;
	КонецЕсли;	
	
	Для каждого ПараметрВыгрузки из ПараметрыВыгрузки Цикл
		ДатаНачалаВыгрузки = ТекущаяДата();
		СформироватьФайлВыгрузки(ПараметрВыгрузки.Настройка, ПараметрВыгрузки.МассивОбъектов,Сформирован,ДатаНачалаВыгрузки);
		Если Сформирован Тогда
			ПроставитьДатуВыгрузки(ПараметрВыгрузки.МассивОбъектов,ПараметрВыгрузки.Настройка,ДатаНачалаВыгрузки);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура ДобавитьСтрокуВТаблицу(Таблица,Парам1,Парам2)
	Нстрока = Таблица.Добавить();
	Нстрока.Настройка = Парам1;
	Нстрока.МассивОбъектов = Парам2;
КонецПроцедуры	

Процедура СформироватьФайлВыгрузки(Настройка,МассивОбъектов,Сформирован,ДатаНачалаВыгрузки)
	КаталогФайловВыгрузки = Настройка.КаталогДляВыгрузки;
	ДатаОтчета = ДатаНачалаВыгрузки;
	ДатаОтчета = СформироватьСтрокуДаты(ДатаОтчета);
	ИмяФайла = Строка(Настройка.ИмяПользователяНБКИ)+"_"+ДатаОтчета;
	Путь = КаталогФайловВыгрузки+"\"+ИмяФайла;
	//ФайлВыгрузки = Новый Файл(Путь);
	ТекстовыйДок = Новый ТекстовыйДокумент;
	//Текст = Новый ЗаписьТекста(Путь, КодировкаТекста.ANSI);
	СтрокаЗаголовок = "TUTDF" + Символы.Таб 
					+ Настройка.ВерсияTUTDF + Символы.Таб
					+ Настройка.ДатаПубликации + Символы.Таб  
					+ Настройка.ИмяПользователяНБКИ + Символы.Таб 
					+ Символы.Таб 
					+ Лев(ДатаОтчета,8) +Символы.Таб
					+ Настройка.ПарольПользователяНБКИ +Символы.Таб;		
	//Текст.ЗаписатьСтроку(СтрокаЗаголовок);
	ТекстовыйДок.ДобавитьСтроку(СтрокаЗаголовок);
	//СчетчикЗаписей = 0;
	
	Если МассивОбъектов = Неопределено или МассивОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	МассивТаблицСегментов = СформироватьМассивТаблицСегментов(Настройка);
	Для Каждого Об из МассивОбъектов Цикл
		//МассивТаблицСегментов = СформироватьМассивТаблицСегментов(Настройка);
		ТекстСегментовОбъекта = Новый ТекстовыйДокумент;
		Для Каждого Таблица Из  МассивТаблицСегментов Цикл
			ИмяТекТаблицы = Таблица[0].ИмяТаблицы;
			КоличествоСтрокСегмента = НадоДелитьМассив(ИмяТекТаблицы,Настройка);
			СтрокаЗаписи = "";
			ЗаголовокСегмента = ВернутьЗаголовокСегментаПоИмениТаблицы(ИмяТекТаблицы);
			СтрокаЗаписи = СтрокаЗаписи + ЗаголовокСегмента+Символы.Таб; 
			мсЗначения = Новый Массив();
			Для Каждого ТекСтрокаПодстановки Из Таблица Цикл
				Значение = УЭДСервер.ГенерацияЗначениия(ТекСтрокаПодстановки, Ложь, Об, Об);
				ФункцияОпределена = УЭДСервер.ФункцияУспешноОпределена(ТекСтрокаПодстановки);
				Если ФункцияОпределена Тогда
					//ТекстФункции = ТекСтрокаПодстановки.Функция.Функция;
					//Значение = ВычислениеФункции(ТекстФункции, Об, Значение);
					Значение = УЭДСервер.ШаблоныТекстаДляАвтоинформирования_ВычислитьФункцию(ТекСтрокаПодстановки.Функция, Об, Значение);
					Если ТипЗнч(Значение) <> Тип("ТаблицаЗначений") Тогда
						Значение = СокрЛП(Значение);
					КонецЕсли;	
					мсЗначения.Добавить(Значение);
				Иначе 	
					Значение = СокрЛП(Значение);
					мсЗначения.Добавить(Значение);
				КонецЕсли; 
			КонецЦикла;	
						
	
			К = 0;
			
			Если ИмяТекТаблицы = "СегментФактическоеИсполнениеОбязательств" Тогда
				ОбработатьСегментPA(СтрокаЗаписи,мсЗначения,ТекстСегментовОбъекта,ЗаголовокСегмента,ТекстовыйДок);
				Продолжить;
			КонецЕсли;
			
			
			Если КоличествоСтрокСегмента = 1 Тогда
				СтрокаЗаписи = стрЗаменить(СтрокаЗаписи,ЗаголовокСегмента,ЗаголовокСегмента+"0"+Строка(КоличествоСтрокСегмента));
				Для каждого Значение из мсЗначения Цикл 
					Если К = мсЗначения.Количество() - 1 Тогда
						СтрокаЗаписи = СтрокаЗаписи + Строка(Значение);
						СтрокаЗаписи = СтрЗаменить(СтрокаЗаписи,Символы.НПП,"");
						ПустаяСтрока = ЕстьЗначащиеСимволы(СтрокаЗаписи,ИмяТекТаблицы);
						Если НЕ ПустаяСтрока Тогда
							Если ИмяТекТаблицы = "СегментИнформационнаяЧасть" 
								Или  ИмяТекТаблицы = "СегментСделка" ИЛИ  ИмяТекТаблицы = "СегментБанкротствоФизлица" Тогда
								СтрокаЗамены = ЗаголовокСегмента+"0"+Строка(КоличествоСтрокСегмента)+Символы.Таб+ строка(Настройка.ИмяПользователяНБКИ);
								СтрокаЗаписи = СтрЗаменить(СтрокаЗаписи,ЗаголовокСегмента+"0"+Строка(КоличествоСтрокСегмента),СтрокаЗамены);
							КонецЕсли;	
							Если ИмяТекТаблицы <> "СегментСделка" И ИмяТекТаблицы <> "СегментФактическоеИсполнениеОбязательств" И ИмяТекТаблицы <> "СегментИнформационнаяЧасть"Тогда 
								ТекстСегментовОбъекта.ДобавитьСтроку(СтрокаЗаписи);
							КонецЕсли;
							ТекстовыйДок.ДобавитьСтроку(?(ИмяТекТаблицы = "СегментИнформационнаяЧасть",ТекстСегментовОбъекта.ПолучитьТекст()+ СтрокаЗаписи,СтрокаЗаписи));
							Если ИмяТекТаблицы = "СегментСделка" Тогда
								ТекстФайла = ТекстовыйДок.ПолучитьТекст();
								ОбработатьСегментTR(ТекстФайла,мсЗначения,Таблица,МассивУникальныеДатыПлатежа,Об,СтрокаЗамены);
								//ТекстФайла = СтрЗаменить(ТекстФайла,"МестоЗаписиTR",СтрокаЗаписи);
								ТекстовыйДок.УстановитьТекст(ТекстФайла);
							КонецЕсли;	
						КонецЕсли;
					Иначе
						СтрокаЗаписи = СтрокаЗаписи + Строка(Значение)+Символы.Таб;	
					КонецЕсли;
					К = К+1;
				КонецЦикла;
			КонецЕсли;
			
						
			Если КоличествоСтрокСегмента > 1 Тогда
				ПустаяСтрока = Ложь;
				Итератор = 1;
				Шаг = мсЗначения.Количество()/КоличествоСтрокСегмента; 
				СтрокаЗаписи = стрЗаменить(СтрокаЗаписи,ЗаголовокСегмента,ЗаголовокСегмента+"0"+Строка(Итератор));
				КоличествоЗначенийВстроке = Шаг;
				Для каждого Значение из мсЗначения Цикл
					Если К = КоличествоЗначенийВстроке-1 Тогда
						СтрокаЗаписи = СтрокаЗаписи + Строка(Значение);
						СтрокаЗаписи = СтрЗаменить(СтрокаЗаписи,Символы.НПП,"");
						ПустаяСтрока = ЕстьЗначащиеСимволы(СтрокаЗаписи,ИмяТекТаблицы);
						Если НЕ ПустаяСтрока Тогда
							ТекстовыйДок.ДобавитьСтроку(СтрокаЗаписи);
							Если ИмяТекТаблицы <> "СегментСделка" или ИмяТекТаблицы <> "СегментФактическоеИсполнениеОбязательств" Тогда 
								ТекстСегментовОбъекта.ДобавитьСтроку(СтрокаЗаписи);
							КонецЕсли;
							Итератор = Итератор + 1;
						КонецЕсли;
						ПустаяСтрока = Ложь;
						КоличествоЗначенийВстроке = КоличествоЗначенийВстроке+Шаг;
						СтрокаЗаписи = "";
						СтрокаЗаписи = СтрокаЗаписи + ЗаголовокСегмента+Символы.Таб; 
						СтрокаЗаписи = стрЗаменить(СтрокаЗаписи,ЗаголовокСегмента,ЗаголовокСегмента+"0"+Строка(Итератор));
					Иначе
						СтрокаЗаписи = СтрокаЗаписи + Строка(Значение)+Символы.Таб;
					КонецЕсли;
					К = К+1;
				КонецЦикла;
			КонецЕсли;		
		КонецЦикла;

		//ТекстовыйДок.ДобавитьСтроку(СтрокаЗаписи);
		//Текст.ЗаписатьСтроку(СтрокаЗаписи);
		//СчетчикЗаписей = СчетчикЗаписей + 1;
	КонецЦикла;
	СтрокаПодвал = "TRLR" + Символы.Таб + Строка(ТекстовыйДок.КоличествоСтрок()+1);
	СтрокаПодвал =  СтрЗаменить(СтрокаПодвал,Символы.НПП,"");
	ТекстовыйДок.ДобавитьСтроку(СтрокаПодвал);
	//ТекстВсегоФайла = ТекстовыйДок.ПолучитьТекст();
	//ТекстВсегоФайла = СтрЗаменить(ТекстВсегоФайла," ","");
	//ТекстовыйДок.УстановитьТекст(ТекстВсегоФайла);
	//Текст.ЗаписатьСтроку(СтрокаПодвал);
	//Текст.Закрыть();
	ТекстовыйДок.Записать(Путь,КодировкаТекста.ANSI,,Ложь);
	Сформирован  = Истина;
КонецПроцедуры

Процедура ОчиститьОтПробелов(МассивЗначений)
	Для Индекс = 0 по МассивЗначений.Количество()-1 Цикл
		Если ПустаяСтрока(МассивЗначений[Индекс]) Тогда
			Значение = СтрЗаменить(МассивЗначений[Индекс]," ","");
			МассивЗначений.Вставить(Индекс,Значение);
		КонецЕсли;
		Индекс = Индекс+1;
	КонецЦикла;	
КонецПроцедуры

Функция СформироватьМассивОбъектовДляВыгрузки(Настройка)
	ТипОбъекта = ТипЗнч(Настройка.НаПримереДокумента);
	МассивОбъектов = Неопределено;
	Если ТипОбъекта = Тип("СправочникСсылка.Контрагенты") Тогда
		СписокКА = ПолучитьСписокКонтрагентов(Настройка);
		МассивОбъектов = СписокКА;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда
		СписокДО = ПолучитьСписокДолговыхОбязательств(Настройка);
		МассивОбъектов = СписокДО;
	КонецЕсли;
	Возврат МассивОбъектов;
КонецФункции

Функция СформироватьМассивОбъектовДляВыгрузкиПоРС(Настройка)
	МассивОбъектов = Неопределено;	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиВыгрузкиНБКИДляОбъектовУчета.ОбъектУчета КАК ОбъектУчета
		|ИЗ
		|	РегистрСведений.НастройкиВыгрузкиНБКИДляОбъектовУчета КАК НастройкиВыгрузкиНБКИДляОбъектовУчета
		|ГДЕ
		|	НастройкиВыгрузкиНБКИДляОбъектовУчета.ТекущаяНастройка = &ТекущаяНастройка";
	
	Запрос.УстановитьПараметр("ТекущаяНастройка", Настройка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	
	Если Настройка.ДляПроданных = Истина Тогда
		 МассивОбъектов = ПроверитьНеобходимостьВыгрузкиПроданных(ВыборкаДетальныеЗаписи);
	Иначе	 
		 МассивОбъектов = ПроверитьИзмененияВОбъектахУчета(Настройка,ВыборкаДетальныеЗаписи);
	КонецЕсли;	 
	
	Возврат МассивОбъектов;
КонецФункции

Функция ПроверитьМассив(Массив,Настройка)
	МассивОбъектов = Неопределено;
	ТипОбъекта = ТипЗнч(Настройка.НаПримереДокумента);
	Если ТипОбъекта = Тип("СправочникСсылка.Контрагенты") Тогда
		МассивОбъектов = Массив;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ДолговыеОбязательства") Тогда
		//СписокДО = ПроверитьМассивДО(Массив,Настройка);
		//МассивОбъектов = СписокДО;
		МассивОбъектов = Массив;
	КонецЕсли;
	Возврат МассивОбъектов;
КонецФункции

Функция ПолучитьСписокКонтрагентов(Настройка) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ПометкаУдаления = ЛОЖЬ
	|	И Контрагенты.ЭтоГруппа = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МассивОбъектов = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивОбъектов.Добавить(ВыборкаДетальныеЗаписи.Объект);
	КонецЦикла;
	Возврат МассивОбъектов;
КонецФункции	

Функция ПроверитьМассивДО(Массив,Настройка)
	
	//1 проверка на изменения  и на то, прошло ли обязательное количество дней для выгрузки в НБКИ
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДолговыеОбязательства.Ссылка КАК Ссылка,
	               |	ЕСТЬNULL(ДолговыеОбязательстваДополнительныеРеквизиты.Значение, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоследнейВыгрузки,
	               |	ЕСТЬNULL(ЗадолженностьПоОбъектамОстатки.СуммаДООстаток, 0) КАК ТекЗадолженность
	               |ПОМЕСТИТЬ ДОиДатаПоследнейВыгрузки
	               |ИЗ
	               |	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДолговыеОбязательства.ДополнительныеРеквизиты КАК ДолговыеОбязательстваДополнительныеРеквизиты
	               |		ПО (ДолговыеОбязательстваДополнительныеРеквизиты.Ссылка = ДолговыеОбязательства.Ссылка)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗадолженностьПоОбъектам.Остатки КАК ЗадолженностьПоОбъектамОстатки
	               |		ПО (ЗадолженностьПоОбъектамОстатки.Объект = ДолговыеОбязательства.Ссылка)
	               |ГДЕ
	               |	ДолговыеОбязательстваДополнительныеРеквизиты.Свойство.Код = &СвойствоКод
	               |	И ДолговыеОбязательства.Ссылка В(&МассивОбъектов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗадолженностьПоОбъектам.Период КАК Период,
	               |	ЗадолженностьПоОбъектам.Объект КАК Объект
	               |ПОМЕСТИТЬ ПериодПлатежей
	               |ИЗ
	               |	РегистрНакопления.ЗадолженностьПоОбъектам КАК ЗадолженностьПоОбъектам
	               |ГДЕ
	               |	(ЗадолженностьПоОбъектам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |				И ТИПЗНАЧЕНИЯ(ЗадолженностьПоОбъектам.Регистратор) = ТИП(Документ.ПоступлениеПлатежей))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДОиДатаПоследнейВыгрузки.Ссылка КАК Ссылка,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПериодПлатежей.Период) КАК Период
	               |ПОМЕСТИТЬ КоличествоПлатежейЗаПериод
	               |ИЗ
	               |	ДОиДатаПоследнейВыгрузки КАК ДОиДатаПоследнейВыгрузки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПериодПлатежей КАК ПериодПлатежей
	               |		ПО ДОиДатаПоследнейВыгрузки.Ссылка = ПериодПлатежей.Объект
	               |			И ДОиДатаПоследнейВыгрузки.ДатаПоследнейВыгрузки <= ПериодПлатежей.Период
	               |ГДЕ
	               |	ДОиДатаПоследнейВыгрузки.ТекЗадолженность > 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДОиДатаПоследнейВыгрузки.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДОиДатаПоследнейВыгрузки.Ссылка КАК Ссылка,
	               |	РАЗНОСТЬДАТ(ВЫРАЗИТЬ(ДОиДатаПоследнейВыгрузки.ДатаПоследнейВыгрузки КАК ДАТА), &ТекДата, ДЕНЬ) КАК КолВоДнейСпоследнейВыгрузки
	               |ПОМЕСТИТЬ ПериодОбязательнойВыгрузки
	               |ИЗ
	               |	ДОиДатаПоследнейВыгрузки КАК ДОиДатаПоследнейВыгрузки
	               |ГДЕ
	               |	ДОиДатаПоследнейВыгрузки.ТекЗадолженность > 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПериодПлатежей.Объект КАК Объект,
	               |	МАКСИМУМ(ЕСТЬNULL(ПериодПлатежей.Период, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаПоследнегоПлатежа
	               |ПОМЕСТИТЬ ПоследПлатеж
	               |ИЗ
	               |	ПериодПлатежей КАК ПериодПлатежей
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПериодПлатежей.Объект
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДОиДатаПоследнейВыгрузки.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ПроверкаЗакрытых
	               |ИЗ
	               |	ДОиДатаПоследнейВыгрузки КАК ДОиДатаПоследнейВыгрузки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоследПлатеж КАК ПоследПлатеж
	               |		ПО ДОиДатаПоследнейВыгрузки.Ссылка = ПоследПлатеж.Объект
	               |			И ДОиДатаПоследнейВыгрузки.ДатаПоследнейВыгрузки <= ПоследПлатеж.ДатаПоследнегоПлатежа
	               |ГДЕ
	               |	ДОиДатаПоследнейВыгрузки.ТекЗадолженность <= 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КоличествоПлатежейЗаПериод.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ
	               |ИЗ
	               |	КоличествоПлатежейЗаПериод КАК КоличествоПлатежейЗаПериод
	               |ГДЕ
	               |	КоличествоПлатежейЗаПериод.Период <> 0
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ПериодОбязательнойВыгрузки.Ссылка
	               |ИЗ
	               |	ПериодОбязательнойВыгрузки КАК ПериодОбязательнойВыгрузки
	               |ГДЕ
	               |	ПериодОбязательнойВыгрузки.КолВоДнейСпоследнейВыгрузки >= &КолВоДнейСпоследнейВыгрузки
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ПроверкаЗакрытых.Ссылка
	               |ИЗ
	               |	ПроверкаЗакрытых КАК ПроверкаЗакрытых
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ.Ссылка КАК Ссылка,
	               |	ДОиДатаПоследнейВыгрузки.ДатаПоследнейВыгрузки КАК ДатаПоследнейВыгрузки,
	               |	ЕСТЬNULL(ДолговыеОбязательстваДополнительныеРеквизиты.Значение, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПродажи
	               |ПОМЕСТИТЬ Продажа
	               |ИЗ
	               |	ВТ КАК ВТ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ДОиДатаПоследнейВыгрузки КАК ДОиДатаПоследнейВыгрузки
	               |		ПО ВТ.Ссылка = ДОиДатаПоследнейВыгрузки.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДолговыеОбязательства.ДополнительныеРеквизиты КАК ДолговыеОбязательстваДополнительныеРеквизиты
	               |		ПО ВТ.Ссылка = ДолговыеОбязательстваДополнительныеРеквизиты.Ссылка
	               |			И (ДолговыеОбязательстваДополнительныеРеквизиты.Свойство.Код = &Продажа)
	               |ГДЕ
	               |	(ДОиДатаПоследнейВыгрузки.ДатаПоследнейВыгрузки < ЕСТЬNULL(ДолговыеОбязательстваДополнительныеРеквизиты.Значение, ДАТАВРЕМЯ(1, 1, 1))
	               |			ИЛИ ЕСТЬNULL(ДолговыеОбязательстваДополнительныеРеквизиты.Значение, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Продажа.Ссылка КАК Ссылка
	               |ИЗ
	               |	Продажа КАК Продажа
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДолговыеОбязательства.ДополнительныеРеквизиты КАК ДолговыеОбязательстваДополнительныеРеквизиты
	               |		ПО Продажа.Ссылка = ДолговыеОбязательстваДополнительныеРеквизиты.Ссылка
	               |			И (ДолговыеОбязательстваДополнительныеРеквизиты.Свойство.Код = &СвойствоСогласие)
	               |ГДЕ
	               |	(Продажа.ДатаПоследнейВыгрузки <> ДАТАВРЕМЯ(1, 1, 1)
	               |			ИЛИ ЕСТЬNULL(ДолговыеОбязательстваДополнительныеРеквизиты.Значение, ЛОЖЬ) = ИСТИНА)";
	
	Запрос.УстановитьПараметр("СвойствоКод",Настройка.РеквизитДатаПоследнейВыгрузки.Код);
	Запрос.УстановитьПараметр("Продажа",Настройка.РеквизитДатаПродажи.Код);
	Запрос.УстановитьПараметр("СвойствоСогласие",Настройка.РеквизитСогласие.Код);
	Запрос.УстановитьПараметр("ТекДата",ТекущаяДата());
	Запрос.УстановитьПараметр("КолВоДнейСпоследнейВыгрузки",Настройка.ПериодОбязательнойВыгрузки);
	Запрос.УстановитьПараметр("МассивОбъектов",Массив);
	
	РезультатЗапроса = Запрос.Выполнить();
		
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МассивОбъектов = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивОбъектов.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	Возврат МассивОбъектов;
КонецФункции


Функция ПолучитьСписокДолговыхОбязательств(Настройка) 
	//1 проверка на изменения  и на то, прошло ли обязательное количество дней для выгрузки в НБКИ
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДолговыеОбязательства.Ссылка КАК Ссылка,
	               |	ЕСТЬNULL(ДолговыеОбязательстваДополнительныеРеквизиты.Значение, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоследнейВыгрузки,
	               |	ЕСТЬNULL(ЗадолженностьПоОбъектамОстатки.СуммаДООстаток, 0) КАК ТекЗадолженность
	               |ПОМЕСТИТЬ ДОиДатаПоследнейВыгрузки
	               |ИЗ
	               |	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДолговыеОбязательства.ДополнительныеРеквизиты КАК ДолговыеОбязательстваДополнительныеРеквизиты
	               |		ПО (ДолговыеОбязательстваДополнительныеРеквизиты.Ссылка = ДолговыеОбязательства.Ссылка)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗадолженностьПоОбъектам.Остатки КАК ЗадолженностьПоОбъектамОстатки
	               |		ПО (ЗадолженностьПоОбъектамОстатки.Объект = ДолговыеОбязательства.Ссылка)
	               |ГДЕ
	               |	ДолговыеОбязательстваДополнительныеРеквизиты.Свойство.Код = &СвойствоКод
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗадолженностьПоОбъектам.Период КАК Период,
	               |	ЗадолженностьПоОбъектам.Объект КАК Объект
	               |ПОМЕСТИТЬ ПериодПлатежей
	               |ИЗ
	               |	РегистрНакопления.ЗадолженностьПоОбъектам КАК ЗадолженностьПоОбъектам
	               |ГДЕ
	               |	(ЗадолженностьПоОбъектам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |				И ТИПЗНАЧЕНИЯ(ЗадолженностьПоОбъектам.Регистратор) = ТИП(Документ.ПоступлениеПлатежей))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДОиДатаПоследнейВыгрузки.Ссылка КАК Ссылка,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПериодПлатежей.Период) КАК Период
	               |ПОМЕСТИТЬ КоличествоПлатежейЗаПериод
	               |ИЗ
	               |	ДОиДатаПоследнейВыгрузки КАК ДОиДатаПоследнейВыгрузки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПериодПлатежей КАК ПериодПлатежей
	               |		ПО ДОиДатаПоследнейВыгрузки.Ссылка = ПериодПлатежей.Объект
	               |			И ДОиДатаПоследнейВыгрузки.ДатаПоследнейВыгрузки <= ПериодПлатежей.Период
	               |ГДЕ
	               |	ДОиДатаПоследнейВыгрузки.ТекЗадолженность > 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДОиДатаПоследнейВыгрузки.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДОиДатаПоследнейВыгрузки.Ссылка КАК Ссылка,
	               |	РАЗНОСТЬДАТ(ВЫРАЗИТЬ(ДОиДатаПоследнейВыгрузки.ДатаПоследнейВыгрузки КАК ДАТА), &ТекДата, ДЕНЬ) КАК КолВоДнейСпоследнейВыгрузки
	               |ПОМЕСТИТЬ ПериодОбязательнойВыгрузки
	               |ИЗ
	               |	ДОиДатаПоследнейВыгрузки КАК ДОиДатаПоследнейВыгрузки
	               |ГДЕ
	               |	ДОиДатаПоследнейВыгрузки.ТекЗадолженность > 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПериодПлатежей.Объект КАК Объект,
	               |	МАКСИМУМ(ЕСТЬNULL(ПериодПлатежей.Период, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаПоследнегоПлатежа
	               |ПОМЕСТИТЬ ПоследПлатеж
	               |ИЗ
	               |	ПериодПлатежей КАК ПериодПлатежей
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПериодПлатежей.Объект
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДОиДатаПоследнейВыгрузки.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ПроверкаЗакрытых
	               |ИЗ
	               |	ДОиДатаПоследнейВыгрузки КАК ДОиДатаПоследнейВыгрузки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоследПлатеж КАК ПоследПлатеж
	               |		ПО ДОиДатаПоследнейВыгрузки.Ссылка = ПоследПлатеж.Объект
	               |			И ДОиДатаПоследнейВыгрузки.ДатаПоследнейВыгрузки <= ПоследПлатеж.ДатаПоследнегоПлатежа
	               |ГДЕ
	               |	ДОиДатаПоследнейВыгрузки.ТекЗадолженность <= 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КоличествоПлатежейЗаПериод.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ
	               |ИЗ
	               |	КоличествоПлатежейЗаПериод КАК КоличествоПлатежейЗаПериод
	               |ГДЕ
	               |	КоличествоПлатежейЗаПериод.Период <> 0
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ПериодОбязательнойВыгрузки.Ссылка
	               |ИЗ
	               |	ПериодОбязательнойВыгрузки КАК ПериодОбязательнойВыгрузки
	               |ГДЕ
	               |	ПериодОбязательнойВыгрузки.КолВоДнейСпоследнейВыгрузки >= &КолВоДнейСпоследнейВыгрузки
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ПроверкаЗакрытых.Ссылка
	               |ИЗ
	               |	ПроверкаЗакрытых КАК ПроверкаЗакрытых
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ.Ссылка КАК Ссылка,
	               |	ДОиДатаПоследнейВыгрузки.ДатаПоследнейВыгрузки КАК ДатаПоследнейВыгрузки,
	               |	ЕСТЬNULL(ДолговыеОбязательстваДополнительныеРеквизиты.Значение, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПродажи
	               |ПОМЕСТИТЬ Продажа
	               |ИЗ
	               |	ВТ КАК ВТ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ДОиДатаПоследнейВыгрузки КАК ДОиДатаПоследнейВыгрузки
	               |		ПО ВТ.Ссылка = ДОиДатаПоследнейВыгрузки.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДолговыеОбязательства.ДополнительныеРеквизиты КАК ДолговыеОбязательстваДополнительныеРеквизиты
	               |		ПО ВТ.Ссылка = ДолговыеОбязательстваДополнительныеРеквизиты.Ссылка
	               |			И (ДолговыеОбязательстваДополнительныеРеквизиты.Свойство.Код = &Продажа)
	               |ГДЕ
	               |	(ДОиДатаПоследнейВыгрузки.ДатаПоследнейВыгрузки < ЕСТЬNULL(ДолговыеОбязательстваДополнительныеРеквизиты.Значение, ДАТАВРЕМЯ(1, 1, 1))
	               |			ИЛИ ЕСТЬNULL(ДолговыеОбязательстваДополнительныеРеквизиты.Значение, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Продажа.Ссылка КАК Ссылка
	               |ИЗ
	               |	Продажа КАК Продажа
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДолговыеОбязательства.ДополнительныеРеквизиты КАК ДолговыеОбязательстваДополнительныеРеквизиты
	               |		ПО Продажа.Ссылка = ДолговыеОбязательстваДополнительныеРеквизиты.Ссылка
	               |			И (ДолговыеОбязательстваДополнительныеРеквизиты.Свойство.Код = &СвойствоСогласие)
	               |ГДЕ
	               |	(Продажа.ДатаПоследнейВыгрузки <> ДАТАВРЕМЯ(1, 1, 1)
	               |			ИЛИ ЕСТЬNULL(ДолговыеОбязательстваДополнительныеРеквизиты.Значение, ЛОЖЬ) = ИСТИНА)";
	
	Запрос.УстановитьПараметр("СвойствоКод",Настройка.РеквизитДатаПоследнейВыгрузки.Код);
	Запрос.УстановитьПараметр("Продажа",Настройка.РеквизитДатаПродажи.Код);
	Запрос.УстановитьПараметр("СвойствоСогласие",Настройка.РеквизитСогласие.Код);
	Запрос.УстановитьПараметр("ТекДата",ТекущаяДата());
	Запрос.УстановитьПараметр("КолВоДнейСпоследнейВыгрузки",Настройка.ПериодОбязательнойВыгрузки);
	
	РезультатЗапроса = Запрос.Выполнить();
		
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МассивОбъектов = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивОбъектов.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	Возврат МассивОбъектов;
КонецФункции	

Функция ПроверитьИзмененияВОбъектахУчета(НастройкаНБКИ,ТЗОбъектов)
	
	МассивОбъектов = Неопределено;
	
	//1Если Расчеты или Судебный блок
	Если Константы.РасчетНачислений.Получить() ИЛИ Константы.ИспользоватьСудебныйБлок.Получить() Тогда
		МассивОбъектов = СформироватьМассивОбъектовПоИсторияПлатежей(НастройкаНБКИ,ТЗОбъектов);	
	Иначе
		МассивОбъектов = СформироватьМассивОбъектовПоЗадолженностьПоОбъектам(НастройкаНБКИ,ТЗОбъектов);
	КонецЕсли;	
	
	Возврат МассивОбъектов;
КонецФункции

Функция СформироватьМассивОбъектовПоЗадолженностьПоОбъектам(НастройкаНБКИ,ТЗОбъектов)
				
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДолговыеОбязательства.Ссылка КАК Об
		|ПОМЕСТИТЬ ДолговыеПоНастойкам
		|ИЗ
		|	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
		|ГДЕ
		|	ДолговыеОбязательства.Ссылка В(&ОбъектыПоНастройкам)
		|	И ДолговыеОбязательства.ПометкаУдаления = ЛОЖЬ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Об
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЖурналВыгрузокНБКИ.ОбъектУчета КАК ОбъектУчета,
		|	МАКСИМУМ(ЖурналВыгрузокНБКИ.ДатаПоследнейВыгрузки) КАК ДатаПоследнейВыгрузки
		|ПОМЕСТИТЬ ДатаПоследнейВыгрузкиПоЖурналу
		|ИЗ
		|	РегистрСведений.ЖурналВыгрузокНБКИ КАК ЖурналВыгрузокНБКИ
		|
		|СГРУППИРОВАТЬ ПО
		|	ЖурналВыгрузокНБКИ.ОбъектУчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатаПоследнейВыгрузкиПоЖурналу.ОбъектУчета КАК ОбъектУчета,
		|	ДатаПоследнейВыгрузкиПоЖурналу.ДатаПоследнейВыгрузки КАК ДатаПоследнейВыгрузки,
		|	РАЗНОСТЬДАТ(ДатаПоследнейВыгрузкиПоЖурналу.ДатаПоследнейВыгрузки, &ТекущаяДата, ДЕНЬ) КАК КоличествоДней
		|ПОМЕСТИТЬ ДатаПоследнейВыгрузкиИКолвоДней
		|ИЗ
		|	ДатаПоследнейВыгрузкиПоЖурналу КАК ДатаПоследнейВыгрузкиПоЖурналу
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗадолженностьПоОбъектам.Объект КАК Объект,
		|	МАКСИМУМ(ЗадолженностьПоОбъектам.Период) КАК ДатаПоследнегоПлатежа
		|ПОМЕСТИТЬ ДатыПоследнегоПлатежа
		|ИЗ
		|	РегистрНакопления.ЗадолженностьПоОбъектам КАК ЗадолженностьПоОбъектам
		|ГДЕ
		|	ЗадолженностьПоОбъектам.ВидДвижения = &ВидДвижения
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗадолженностьПоОбъектам.Объект
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДолговыеПоНастойкам.Об КАК Об,
		|	ЕСТЬNULL(ДатаПоследнейВыгрузкиИКолвоДней.ДатаПоследнейВыгрузки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоследнейВыгрузки,
		|	ЕСТЬNULL(ДатаПоследнейВыгрузкиИКолвоДней.КоличествоДней, 0) КАК КоличествоДнейСПоследнейВыгрузки,
		|	ЕСТЬNULL(ДатыПоследнегоПлатежа.ДатаПоследнегоПлатежа, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоследнегоПлатежаОб
		|ПОМЕСТИТЬ ДляОбработки
		|ИЗ
		|	ДолговыеПоНастойкам КАК ДолговыеПоНастойкам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДатаПоследнейВыгрузкиИКолвоДней КАК ДатаПоследнейВыгрузкиИКолвоДней
		|		ПО ДолговыеПоНастойкам.Об = ДатаПоследнейВыгрузкиИКолвоДней.ОбъектУчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыПоследнегоПлатежа КАК ДатыПоследнегоПлатежа
		|		ПО ДолговыеПоНастойкам.Об = ДатыПоследнегоПлатежа.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДляОбработки.Об КАК Об
		|ИЗ
		|	ДляОбработки КАК ДляОбработки
		|ГДЕ
		|	(ДляОбработки.КоличествоДнейСПоследнейВыгрузки >= &КоличествоДнейНастройка
		|			ИЛИ ДляОбработки.ДатаПоследнейВыгрузки < ДляОбработки.ДатаПоследнегоПлатежаОб
		|			ИЛИ ДляОбработки.ДатаПоследнейВыгрузки = ДАТАВРЕМЯ(1, 1, 1))";
	
	Запрос.УстановитьПараметр("ВидДвижения",ВидДвиженияНакопления.Расход );
	Запрос.УстановитьПараметр("КоличествоДнейНастройка", НастройкаНБКИ.ПериодОбязательнойВыгрузки);
	Запрос.УстановитьПараметр("ОбъектыПоНастройкам", ТЗОбъектов);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		МассивОбъектов = Неопределено;
	Иначе	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		МассивОбъектов = Новый Массив;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МассивОбъектов.Добавить(ВыборкаДетальныеЗаписи.Об);
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивОбъектов;
КонецФункции

Функция СформироватьМассивОбъектовПоИсторияПлатежей(НастройкаНБКИ,ТЗОбъектов)
				
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДолговыеОбязательства.Ссылка КАК Об
		|ПОМЕСТИТЬ ДолговыеПоНастойкам
		|ИЗ
		|	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
		|ГДЕ
		|	ДолговыеОбязательства.Ссылка В(&ОбъектыПоНастройкам)
		|	И ДолговыеОбязательства.ПометкаУдаления = ЛОЖЬ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Об
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЖурналВыгрузокНБКИ.ОбъектУчета КАК ОбъектУчета,
		|	МАКСИМУМ(ЖурналВыгрузокНБКИ.ДатаПоследнейВыгрузки) КАК ДатаПоследнейВыгрузки
		|ПОМЕСТИТЬ ДатаПоследнейВыгрузкиПоЖурналу
		|ИЗ
		|	РегистрСведений.ЖурналВыгрузокНБКИ КАК ЖурналВыгрузокНБКИ
		|
		|СГРУППИРОВАТЬ ПО
		|	ЖурналВыгрузокНБКИ.ОбъектУчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатаПоследнейВыгрузкиПоЖурналу.ОбъектУчета КАК ОбъектУчета,
		|	ДатаПоследнейВыгрузкиПоЖурналу.ДатаПоследнейВыгрузки КАК ДатаПоследнейВыгрузки,
		|	РАЗНОСТЬДАТ(ДатаПоследнейВыгрузкиПоЖурналу.ДатаПоследнейВыгрузки, &ТекущаяДата, ДЕНЬ) КАК КоличествоДней
		|ПОМЕСТИТЬ ДатаПоследнейВыгрузкиИКолвоДней
		|ИЗ
		|	ДатаПоследнейВыгрузкиПоЖурналу КАК ДатаПоследнейВыгрузкиПоЖурналу
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсторияПлатежей.Объект КАК Объект,
		|	МАКСИМУМ(ИсторияПлатежей.Период) КАК ДатаПоследнегоПлатежа
		|ПОМЕСТИТЬ ДатыПоследнегоПлатежа
		|ИЗ
		|	РегистрНакопления.ИсторияПлатежей КАК ИсторияПлатежей
		|ГДЕ
		|	ИсторияПлатежей.ВидДвижения = &ВидДвижения
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсторияПлатежей.Объект
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДолговыеПоНастойкам.Об КАК Об,
		|	ЕСТЬNULL(ДатаПоследнейВыгрузкиИКолвоДней.ДатаПоследнейВыгрузки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоследнейВыгрузки,
		|	ЕСТЬNULL(ДатаПоследнейВыгрузкиИКолвоДней.КоличествоДней, 0) КАК КоличествоДнейСПоследнейВыгрузки,
		|	ЕСТЬNULL(ДатыПоследнегоПлатежа.ДатаПоследнегоПлатежа, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоследнегоПлатежаОб
		|ПОМЕСТИТЬ ДляОбработки
		|ИЗ
		|	ДолговыеПоНастойкам КАК ДолговыеПоНастойкам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДатаПоследнейВыгрузкиИКолвоДней КАК ДатаПоследнейВыгрузкиИКолвоДней
		|		ПО ДолговыеПоНастойкам.Об = ДатаПоследнейВыгрузкиИКолвоДней.ОбъектУчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыПоследнегоПлатежа КАК ДатыПоследнегоПлатежа
		|		ПО ДолговыеПоНастойкам.Об = ДатыПоследнегоПлатежа.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДляОбработки.Об КАК Об
		|ИЗ
		|	ДляОбработки КАК ДляОбработки
		|ГДЕ
		|	(ДляОбработки.КоличествоДнейСПоследнейВыгрузки >= &КоличествоДнейНастройка
		|			ИЛИ ДляОбработки.ДатаПоследнейВыгрузки < ДляОбработки.ДатаПоследнегоПлатежаОб
		|			ИЛИ ДляОбработки.ДатаПоследнейВыгрузки = ДАТАВРЕМЯ(1, 1, 1))";
	
	Запрос.УстановитьПараметр("ВидДвижения",ВидДвиженияНакопления.Приход );
	Запрос.УстановитьПараметр("КоличествоДнейНастройка", НастройкаНБКИ.ПериодОбязательнойВыгрузки);
	Запрос.УстановитьПараметр("ОбъектыПоНастройкам", ТЗОбъектов);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		МассивОбъектов = Неопределено;
	Иначе	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		МассивОбъектов = Новый Массив;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МассивОбъектов.Добавить(ВыборкаДетальныеЗаписи.Об);
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивОбъектов;
КонецФункции





Функция ПроверитьНеобходимостьВыгрузкиПроданных(ТЗОбъектов)
	
	//1 проверка на то, выгружался ли проданный договор ранее
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЖурналПроданныхДоговоровСрезПоследних.ОбъектУчета КАК ОбъектУчета,
		|	ЖурналПроданныхДоговоровСрезПоследних.Период КАК ДатаПродажи
		|ПОМЕСТИТЬ ЖурналПродаж
		|ИЗ
		|	РегистрСведений.ЖурналПроданныхДоговоров.СрезПоследних(&ТекДата, ОбъектУчета В (&ТЗОбъектов)) КАК ЖурналПроданныхДоговоровСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЖурналВыгрузокНБКИ.ОбъектУчета КАК ОбъектУчета,
		|	МАКСИМУМ(ЖурналВыгрузокНБКИ.ДатаПоследнейВыгрузки) КАК ДатаПоследнейВыгрузки
		|ПОМЕСТИТЬ ЖурналВыгрузок
		|ИЗ
		|	РегистрСведений.ЖурналВыгрузокНБКИ КАК ЖурналВыгрузокНБКИ
		|ГДЕ
		|	ЖурналВыгрузокНБКИ.ОбъектУчета В(&ТЗОбъектов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЖурналВыгрузокНБКИ.ОбъектУчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЖурналПродаж.ОбъектУчета КАК ОбъектУчета,
		|	ЖурналПродаж.ДатаПродажи КАК ДатаПродажи,
		|	ЕСТЬNULL(ЖурналВыгрузок.ДатаПоследнейВыгрузки, ДАТАВРЕМЯ(1234, 1, 1, 1, 1, 1)) КАК ПоследняяВыгрузка
		|ИЗ
		|	ЖурналПродаж КАК ЖурналПродаж
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЖурналВыгрузок КАК ЖурналВыгрузок
		|		ПО ЖурналПродаж.ОбъектУчета = ЖурналВыгрузок.ОбъектУчета
		|ГДЕ
		|	ЖурналПродаж.ДатаПродажи > ЖурналВыгрузок.ДатаПоследнейВыгрузки";
	
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	мОбъектов = ТЗОбъектов.ВыгрузитьКолонку("ОбъектУчета");
	Запрос.УстановитьПараметр("ТЗОбъектов", мОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		МассивОбъектов = Неопределено;
	Иначе
		МассивОбъектов = Новый Массив;
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МассивОбъектов.Добавить(ВыборкаДетальныеЗаписи.ОбъектУчета);
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивОбъектов;
КонецФункции


Функция ПолучитьТекущиеНастройкиВыгрузкиНБКИ() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиВыгрузкиНБКИ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиВыгрузкиНБКИ КАК НастройкиВыгрузкиНБКИ
	|ГДЕ
	|	НастройкиВыгрузкиНБКИ.ПометкаУдаления = ЛОЖЬ
	|	И НастройкиВыгрузкиНБКИ.Используется = ИСТИНА";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();                               
	МассивНастроек = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивНастроек.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Возврат МассивНастроек;
КонецФункции

Функция СформироватьСтрокуДаты(Дата)
	
	ДатаСтрока = "";
	Число = Формат(Дата, "ДФ=дд"); 
	Месяц = Формат(Дата, "ДФ=ММ"); 
	Год = Формат(Дата, "ДФ=гггг");
    Час = Формат(Дата, "ДФ=ЧЧ");
    Минута = Формат(Дата, "ДФ=мм"); 
    Секунда = Формат(Дата, "ДФ=сс"); 
	ДатаСтрока = Год+Месяц+Число+"_"+Час+Минута+Секунда;
	Возврат ДатаСтрока;

КонецФункции

Функция СформироватьМассивТаблицСегментов(Настройка)
	МассивТаблицСегментов = Новый Массив;	
	Для Каждого ТабличнаяЧасть из Настройка.Метаданные().ТабличныеЧасти Цикл
		ИмяТаблицы = ТабличнаяЧасть.Имя;
		ТЗ = Настройка[ИмяТаблицы].Выгрузить();
		Строки = УдалитьОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗ); 
		Результат = Новый Массив();
		Для Каждого Элемент Из Строки Цикл
			Результат.Добавить(Новый Структура("ИмяТаблицы, Поле, Значение, Функция, СтрокаДляПолученияЗначения, КодДопСвойства,
			| ОбъектДопСвойства, СтрокаХранилище",ИмяТаблицы, Элемент.Поле, Элемент.Значение, Элемент.Функция,
			Элемент.СтрокаДляПолученияЗначения, Элемент.КодДопСвойства, Элемент.ОбъектДопСвойства, Элемент.СтрокаХранилище));	
		КонецЦикла;
		ТЗ.Свернуть("Функция,Значение");
		Если ТЗ.Количество() >= 1 Тогда
			МассивТаблицСегментов.Добавить(Результат);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивТаблицСегментов;	
	
КонецФункции	

Функция ВернутьЗаголовокСегментаПоИмениТаблицы(ИмяТаблицы)	
	ИмяСегмента = "";
	Если ИмяТаблицы ="ИдентифицирующийСегмент" Тогда
		ИмяСегмента = "ID";
		Возврат ИмяСегмента;
	КонецЕсли;	
	Если ИмяТаблицы ="СегментИмени" Тогда
		ИмяСегмента = "NA";
		Возврат ИмяСегмента;
	КонецЕсли;
	Если ИмяТаблицы ="СегментПредприятия" Тогда
		ИмяСегмента = "BU";
		Возврат ИмяСегмента;
	КонецЕсли;
	Если ИмяТаблицы ="СегментАдреса" Тогда
		ИмяСегмента = "AD";
		Возврат ИмяСегмента;
	КонецЕсли;
	Если ИмяТаблицы ="СегментТелефона" Тогда
		ИмяСегмента = "PN";
		Возврат ИмяСегмента;
	КонецЕсли;
	Если ИмяТаблицы ="СегментФактическоеИсполнениеОбязательств" Тогда
		ИмяСегмента = "PA";
		Возврат ИмяСегмента;
	КонецЕсли;
	Если ИмяТаблицы ="СегментДополнительныеЗалоги" Тогда
		ИмяСегмента = "CL";
		Возврат ИмяСегмента;
	КонецЕсли;
	Если ИмяТаблицы ="СегментДополнительныеПоручители" Тогда
		ИмяСегмента = "GR";
		Возврат ИмяСегмента;
	КонецЕсли;
	Если ИмяТаблицы ="СегментДополнительныеБанковскиеГарантии" Тогда
		ИмяСегмента = "BG";
		Возврат ИмяСегмента;
	КонецЕсли;
	Если ИмяТаблицы ="СегментСделка" Тогда
		ИмяСегмента = "TR";
		Возврат ИмяСегмента;
	КонецЕсли;
	Если ИмяТаблицы ="СегментЮридическийСтатус" Тогда
		ИмяСегмента = "LE";
		Возврат ИмяСегмента;
	КонецЕсли;
	Если ИмяТаблицы ="СегментБанкротствоЮрлица" Тогда
		ИмяСегмента = "BK";
		Возврат ИмяСегмента;
	КонецЕсли;
	Если ИмяТаблицы ="СегментБанкротствоФизлица" Тогда
		ИмяСегмента = "BC";
		Возврат ИмяСегмента;
	КонецЕсли;
	Если ИмяТаблицы ="СегментИнформационнаяЧасть" Тогда
		ИмяСегмента = "IP";
		Возврат ИмяСегмента;
	КонецЕсли;

КонецФункции

Функция НадоДелитьМассив(ИмяТаблицы,Настройка)
	КоличествоЭлементов = 1;
	Если ИмяТаблицы ="ИдентифицирующийСегмент" Тогда
		КоличествоЭлементов = Настройка.КоличествоДокументов;
		Возврат КоличествоЭлементов;
	КонецЕсли;	
	Если ИмяТаблицы ="СегментИмени" Тогда
		Возврат КоличествоЭлементов;
	КонецЕсли;
	Если ИмяТаблицы ="СегментПредприятия" Тогда
		Возврат КоличествоЭлементов;
	КонецЕсли;
	Если ИмяТаблицы ="СегментАдреса" Тогда
		КоличествоЭлементов = Настройка.КоличествоАдресов;
		Возврат КоличествоЭлементов;
	КонецЕсли;
	Если ИмяТаблицы ="СегментТелефона" Тогда
		КоличествоЭлементов = Настройка.КоличествоТелефонов;
		Возврат КоличествоЭлементов;
	КонецЕсли;
	Если ИмяТаблицы ="СегментФактическоеИсполнениеОбязательств" Тогда
		Возврат КоличествоЭлементов;
	КонецЕсли;
	Если ИмяТаблицы ="СегментДополнительныеЗалоги" Тогда
		Возврат КоличествоЭлементов;
	КонецЕсли;
	Если ИмяТаблицы ="СегментДополнительныеПоручители" Тогда
		Возврат КоличествоЭлементов;
	КонецЕсли;
	Если ИмяТаблицы ="СегментДополнительныеБанковскиеГарантии" Тогда
		Возврат КоличествоЭлементов;
	КонецЕсли;
	Если ИмяТаблицы ="СегментСделка" Тогда
		Возврат КоличествоЭлементов;
	КонецЕсли;
	Если ИмяТаблицы ="СегментЮридическийСтатус" Тогда
		Возврат КоличествоЭлементов;
	КонецЕсли;
	Если ИмяТаблицы ="СегментБанкротствоЮрлица" Тогда
		Возврат КоличествоЭлементов;
	КонецЕсли;
	Если ИмяТаблицы ="СегментБанкротствоФизлица" Тогда
		Возврат КоличествоЭлементов;
	КонецЕсли;
	Если ИмяТаблицы ="СегментИнформационнаяЧасть" Тогда
		Возврат КоличествоЭлементов;
	КонецЕсли;
КонецФункции
 
Функция ЕстьЗначащиеСимволы(ИсхСтрока,ИмяТекТаблицы)
	КоличествоСимволов = 4;
	Если ИмяТекТаблицы = "СегментАдреса" Или ИмяТекТаблицы = "ИдентифицирующийСегмент" Тогда
		КоличествоСимволов = 7;
	КонецЕсли;
	РабочаяСтрока = ИсхСтрока;
	РабочаяСтрока = СтрЗаменить(РабочаяСтрока,Лев(РабочаяСтрока,КоличествоСимволов),"");
	Если ИмяТекТаблицы = "СегментТелефона" Тогда
		 РабочаяСтрока = СтрЗаменить(РабочаяСтрока,Прав(РабочаяСтрока,КоличествоСимволов),"");
	КонецЕсли;	  
	Возврат ПустаяСтрока(РабочаяСтрока);
КонецФункции

Функция ЗапросПлатежиЗаПериод()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДолговыеОбязательства.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ДолговыеОбязательстваДополнительныеРеквизиты.Значение, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоследнейВыгрузки
	|ПОМЕСТИТЬ ДОиДатаПоследнейВыгрузки
	|ИЗ
	|	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДолговыеОбязательства.ДополнительныеРеквизиты КАК ДолговыеОбязательстваДополнительныеРеквизиты
	|		ПО (ДолговыеОбязательстваДополнительныеРеквизиты.Ссылка = ДолговыеОбязательства.Ссылка)
	|ГДЕ
	|	ДолговыеОбязательстваДополнительныеРеквизиты.Свойство.Код = &СвойствоКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадолженностьПоОбъектам.Период КАК Период,
	|	ЗадолженностьПоОбъектам.Объект КАК Объект
	|ПОМЕСТИТЬ ПериодПлатежей
	|ИЗ
	|	РегистрНакопления.ЗадолженностьПоОбъектам КАК ЗадолженностьПоОбъектам
	|ГДЕ
	|	ЗадолженностьПоОбъектам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ТИПЗНАЧЕНИЯ(ЗадолженностьПоОбъектам.Регистратор) = ТИП(Документ.ПоступлениеПлатежей)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДОиДатаПоследнейВыгрузки.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПериодПлатежей.Период) КАК Период
	|ПОМЕСТИТЬ КоличествоПлатежейЗаПериод
	|ИЗ
	|	ДОиДатаПоследнейВыгрузки КАК ДОиДатаПоследнейВыгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПериодПлатежей КАК ПериодПлатежей
	|		ПО ДОиДатаПоследнейВыгрузки.Ссылка = ПериодПлатежей.Объект
	|			И ДОиДатаПоследнейВыгрузки.ДатаПоследнейВыгрузки <= ПериодПлатежей.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ДОиДатаПоследнейВыгрузки.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоличествоПлатежейЗаПериод.Ссылка КАК Объект
	|ИЗ
	|	КоличествоПлатежейЗаПериод КАК КоличествоПлатежейЗаПериод
	|ГДЕ
	|	КоличествоПлатежейЗаПериод.Период <> 0";
		
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДолговыеОбязательства.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ДолговыеОбязательстваДополнительныеРеквизиты.Значение, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоследнейВыгрузки
	|ПОМЕСТИТЬ ДОиДатаПоследнейВыгрузки
	|ИЗ
	|	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДолговыеОбязательства.ДополнительныеРеквизиты КАК ДолговыеОбязательстваДополнительныеРеквизиты
	|		ПО (ДолговыеОбязательстваДополнительныеРеквизиты.Ссылка = ДолговыеОбязательства.Ссылка)
	|ГДЕ
	|	ДолговыеОбязательстваДополнительныеРеквизиты.Свойство.Код = &СвойствоКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадолженностьПоОбъектам.Период КАК Период,
	|	ЗадолженностьПоОбъектам.Объект КАК Объект,
	|	ЗадолженностьПоОбъектам.СуммаДО КАК СуммаДО
	|ПОМЕСТИТЬ ПериодПлатежей
	|ИЗ
	|	РегистрНакопления.ЗадолженностьПоОбъектам КАК ЗадолженностьПоОбъектам
	|ГДЕ
	|	ЗадолженностьПоОбъектам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ТИПЗНАЧЕНИЯ(ЗадолженностьПоОбъектам.Регистратор) = ТИП(Документ.ПоступлениеПлатежей)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ПериодПлатежей.СуммаДО, 0) КАК СуммаДО,
	|	ЕСТЬNULL(ПериодПлатежей.Период, 0) КАК Период
	|	
	|ИЗ
	|	ДОиДатаПоследнейВыгрузки КАК ДОиДатаПоследнейВыгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПериодПлатежей КАК ПериодПлатежей
	|		ПО ДОиДатаПоследнейВыгрузки.Ссылка = ПериодПлатежей.Объект
	|			И ДОиДатаПоследнейВыгрузки.ДатаПоследнейВыгрузки <= ПериодПлатежей.Период
	|ГДЕ
	|	ДОиДатаПоследнейВыгрузки.Ссылка = &Ссылка";

КонецФункции

Процедура ОбработатьСегментPA(СтрокаЗаписи,мсЗначения,ТекстСегментовОбъекта,ЗаголовокСегмента,ТекстовыйДок)
	БуферТекста = Лев(ТекстСегментовОбъекта.ПолучитьТекст(),СтрДлина(ТекстСегментовОбъекта.ПолучитьТекст())-1);
	СтрокаЗаписи = "";
	Для каждого Значение из мсЗначения Цикл 
		Если ТипЗнч(Значение) <> Тип("ТаблицаЗначений") Тогда
			Продолжить;
		КонецЕсли;
		ТЗУникальныеДатыПлатежа = Значение.Скопировать();
		Для Каждого КолонкаТЧ из ТЗУникальныеДатыПлатежа.Колонки цикл
			Если КолонкаТЧ.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
				ИмяКолонкиДатаПлатежа = КолонкаТЧ.Имя; 
				ТЗУникальныеДатыПлатежа.Свернуть(КолонкаТЧ.Имя);
				МассивУникальныеДатыПлатежа = ТЗУникальныеДатыПлатежа.ВыгрузитьКолонку(КолонкаТЧ.Имя); 
			КонецЕсли;
		КонецЦикла;
		
		СчетчикДат = 1;
		
		Для Каждого Эл из МассивУникальныеДатыПлатежа Цикл
			Если Эл = 0 или Эл = Null Тогда 
				Возврат;
			КонецЕсли;	
			МассивПлатежей = Значение.НайтиСтроки(Новый Структура(ИмяКолонкиДатаПлатежа,Эл));
			СчетчикПлатежей = 1;
			Если СчетчикДат > 1 Тогда
				ТекстовыйДок.ДобавитьСтроку(БуферТекста);
			КонецЕсли;	
			Для Каждого Платеж из МассивПлатежей Цикл
				НольСтрокой = ?(СчетчикПлатежей > 9,"","0");
				СтрокаЗаписи = ЗаголовокСегмента + НольСтрокой + СчетчикПлатежей + Символы.Таб;
				Для Индекс = 0 по Значение.Колонки.Количество()-1 Цикл
					Если ТипЗнч(Платеж[Индекс]) = Тип("Дата") Тогда
						ДатаПлатежа = СформироватьСтрокуДаты(Платеж[Индекс]);
						ДатаПлатежа = Лев(ДатаПлатежа,8);
						СтрокаЗаписи = СтрокаЗаписи + ДатаПлатежа + Символы.Таб;
					Иначе
						Если Индекс =  Значение.Колонки.Количество()-1 Тогда
							СтрокаЗаписи = СтрокаЗаписи+Платеж[Индекс];
						Иначе
							СтрокаЗаписи = СтрокаЗаписи+Платеж[Индекс] + Символы.Таб;
						КонецЕсли;
					КонецЕсли;	
					
					СтрокаЗаписи = СтрЗаменить(СтрокаЗаписи,Символы.НПП,"");
				КонецЦикла;
				ТекстовыйДок.ДобавитьСтроку(СтрокаЗаписи);
				СчетчикПлатежей = СчетчикПлатежей + 1;
			КонецЦикла;
			Если СчетчикДат <> МассивУникальныеДатыПлатежа.Количество() Тогда
				Если СчетчикДат < 10 Тогда
					Ноль = "0";
				Иначе
					Ноль = "";
				КонецЕсли;	
				ТекстовыйДок.ДобавитьСтроку("МестоЗаписиTR"+Ноль + СчетчикДат);
			КонецЕсли;	 
			СчетчикДат = СчетчикДат + 1;
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ОбработатьСегментTR(ТекстФайла,мсЗначения,Таблица,МассивУникальныеДатыПлатежа,Об,СтрокаЗамены)
	//5,6,9,10,22,40-45 для проданных 8 35 36 37
	КоличествоПлатежейПерерасчет = МассивУникальныеДатыПлатежа.Количество()-1;
	Если КоличествоПлатежейПерерасчет < 0 Тогда
		Возврат;
	КонецЕсли;	
	Если КоличествоПлатежейПерерасчет = 0 Тогда
		ДатаСтрока = СформироватьСтрокуДаты(МассивУникальныеДатыПлатежа[КоличествоПлатежейПерерасчет]);
		ДатаСтрока = Лев(ДатаСтрока,8);
		ТекстФайла = СтрЗаменить(ТекстФайла,"ДатаПоследнегоПлатежа",ДатаСтрока);
		
		Возврат;
	КонецЕсли;	

	
	Для СчетчикПлатежей = 1 По КоличествоПлатежейПерерасчет Цикл
		СтрокаЗаписи = СтрокаЗамены+Символы.Таб;
		ДатаПерерасчета = МассивУникальныеДатыПлатежа[СчетчикПлатежей-1];
		Для СчетчикЗначений = 0 ПО мсЗначения.Количество() - 1 Цикл
			Если СчетчикЗначений = 5 или СчетчикЗначений = 6
				Или СчетчикЗначений = 9 или СчетчикЗначений = 10
				Или СчетчикЗначений = 22 или СчетчикЗначений = 40
				Или СчетчикЗначений = 41 Или СчетчикЗначений = 42
				Или СчетчикЗначений = 43 Или СчетчикЗначений = 44 
				Или СчетчикЗначений = 45 Или счетчикЗначений = 8 
				Или СчетчикЗначений = 35 Или счетчикЗначений = 36
				Или счетчикЗначений = 37 Тогда
				Значение = УЭДСервер.ГенерацияЗначениия(Таблица[СчетчикЗначений], Ложь, Об, Об);
				ФункцияОпределена = УЭДСервер.ФункцияУспешноОпределена(Таблица[СчетчикЗначений]);
				Если ФункцияОпределена Тогда
					ТекстФункции = Таблица[СчетчикЗначений].Функция.Функция;
					ТекстФункции = ОбработатьТекстФункции(ТекстФункции,ДатаПерерасчета);
					Если СтрНайти(ТекстФункции,"(&ДатаПерерасчета)(&Дата, Объект = &Объект)",,,)>0 Тогда
						 ТекстФункции = Таблица[СчетчикЗначений].Функция.Функция;
					КонецЕсли;	 
					Значение = ВычислениеФункции(ТекстФункции, Об, Значение);
					Если ТипЗнч(Значение) <> Тип("ТаблицаЗначений") Тогда
						Значение = СокрЛП(Значение);
					КонецЕсли;	
				Иначе 	
					Значение = СокрЛП(Значение);
				КонецЕсли;
			Иначе
				Значение =  мсЗначения[СчетчикЗначений];
			КонецЕсли;	
			СтрокаЗаписи = ?(СчетчикЗначений = мсЗначения.Количество() - 1, СтрокаЗаписи+Значение, СтрокаЗаписи+Значение+Символы.Таб);
			СтрокаЗаписи = СтрЗаменить(СтрокаЗаписи,Символы.НПП,"");
		КонецЦикла;	
		Если СчетчикПлатежей < 10 Тогда
			Ноль = "0";
		Иначе
			Ноль = "";
		КонецЕсли;	
		ТекстФайла = СтрЗаменить(ТекстФайла,Строка("МестоЗаписиTR"+Ноль+Строка(СчетчикПлатежей)),СтрокаЗаписи);
	КонецЦикла;
	ДатаСтрока = СформироватьСтрокуДаты(МассивУникальныеДатыПлатежа[КоличествоПлатежейПерерасчет]);
	ДатаСтрока = Лев(ДатаСтрока,8);
	ТекстФайла = СтрЗаменить(ТекстФайла,"ДатаПоследнегоПлатежа",ДатаСтрока);
КонецПроцедуры

Функция ОбработатьТекстФункции(ТекстФункции,ДатаПерерасчета)
	ДатаПерерасчета = КонецДня(ДатаПерерасчета);
	СтрокаДата = Формат(ДатаПерерасчета, "ДФ=yyyyMMddччммсс");
	Если СтрНайти(ТекстФункции,"Обороты",,,)> 0 Тогда
		ТекстФункции = Стрзаменить(ТекстФункции,"ТекущаяДата()","Дата("+Символ(34)+СтрокаДата+Символ(34)+")");	
	ИначеЕсли СтрНайти(ТекстФункции,"ДатаПерерасчета",,,)>0 Тогда
		ТекстФункции = Стрзаменить(ТекстФункции,"ДатаПерерасчета = Значение","ДатаПерерасчета = Дата("+Символ(34)+СтрокаДата+Символ(34)+")");	
		ТекстФункции=СтрЗаменить(ТекстФункции,"РегистрНакопления.ЗадолженностьПоОбъектам.Остатки","РегистрНакопления.ЗадолженностьПоОбъектам.Остатки(&ДатаПерерасчета)");
		ТекстФункции=СтрЗаменить(ТекстФункции,"Запрос.УстановитьПараметр(""Объект"",ОбъектВх );","Запрос.УстановитьПараметр(""Объект"",ОбъектВх );"+Символы.ПС+"Запрос.УстановитьПараметр("+Символ(34)+"ДатаПерерасчета"+Символ(34)+","+"ДатаПерерасчета"+")"+";"+Символы.ПС);
	Иначе	
		ТекстСДатой = "ДатаПерерасчета = Дата("+Символ(34)+СтрокаДата+Символ(34)+")"+";"+Символы.ПС;
		ТекстФункции = ТекстСДатой + ТекстФункции;  
		ТекстФункции=СтрЗаменить(ТекстФункции,"РегистрНакопления.ЗадолженностьПоОбъектам.Остатки","РегистрНакопления.ЗадолженностьПоОбъектам.Остатки(&ДатаПерерасчета)");
		ТекстФункции=СтрЗаменить(ТекстФункции,"Запрос.УстановитьПараметр(""Объект"",ОбъектВх );","Запрос.УстановитьПараметр(""Объект"",ОбъектВх );"+Символы.ПС+"Запрос.УстановитьПараметр("+Символ(34)+"ДатаПерерасчета"+Символ(34)+","+"ДатаПерерасчета"+")"+";"+Символы.ПС);
	КонецЕсли;
	Возврат ТекстФункции;
КонецФункции

Функция ВычислениеФункции(Знач Запрос, Знач ОбъектВх, Знач Значение = Неопределено)
	Попытка
		Выполнить(Запрос);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	Возврат Значение;

КонецФункции

Процедура ПроставитьДатуВыгрузки(МассивОбъектов,Настройка,ДатаНачалаВыгрузки)
	Для каждого Об из МассивОбъектов Цикл
		//ОбъектыСервер.ЗаписатьЗначениеСвойства(Об,Настройка.РеквизитДатаПоследнейВыгрузки.Код,ДатаНачалаВыгрузки);
		МЗ = РегистрыСведений.ЖурналВыгрузокНБКИ.СоздатьМенеджерЗаписи();
		МЗ.ОбъектУчета = Об;
		МЗ.ДатаПоследнейВыгрузки = ДатаНачалаВыгрузки;
		МЗ.Записать();
	КонецЦикла;
	НастройкаОбъект = Настройка.ПолучитьОбъект();
	НастройкаОбъект.ДатаПоследнейВыгрузкиПоНастройке = ДатаНачалаВыгрузки;
	НастройкаОбъект.Записать();
	
КонецПроцедуры	


Процедура ПерезаписатьДатуПередачи(ПолеИсходнойТаблицы,Настройка,ТекстФайлаОшибок,ПоЖурналу) Экспорт
	Если Не ЗначениеЗаполнено(ТекстФайлаОшибок) Тогда
		Сообщить("Скопируйте текст файла ошибок в поле ""Текст файла ошибок.""");
		Возврат;
	КонецЕсли;	
	
	Если ПоЖурналу Тогда
		 ПерезаписатьДатуПередачиЖурнал(Настройка,ТекстФайлаОшибок);
		 Сообщить("Данные перезаписаны на основании 1С-журнала передачи в НБКИ.");
	Иначе
		ПерезаписатьДатуПередачиФайл(ПолеИсходнойТаблицы,Настройка,ТекстФайлаОшибок);
		Сообщить("Данные перезаписаны на основании файла Эксель.");
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьНомераСтолбцов() Экспорт
	ЭтотОбъект.ОбъектУчета = 1;
	ЭтотОбъект.ДатаПоследнейУспешнойПередачиНБКИ = 2;
КонецПроцедуры

Функция ПолучитьДатуПередачи(СтрДата)
	Попытка
		ДатаПередачи = Дата(СтрДата+ " 00:00:00");
		Если Год(ДатаПередачи) > 3999 Тогда
			Возврат Дата(1,1,1);
		Иначе
			Возврат(ДатаПередачи);
		КонецЕсли;
	Исключение
		Возврат Дата(1,1,1);
	КонецПопытки;	
КонецФункции	


Процедура ПерезаписатьДатуПередачиФайл(ПолеИсходнойТаблицы,Настройка,ТекстФайлаОшибок) Экспорт
	Для НомерСтроки = 2 По ПолеИсходнойТаблицы.ВысотаТаблицы Цикл
		ОбъектУчетаЗнач = ПолеИсходнойТаблицы.Область("R" + Формат(НомерСтроки, "ЧГ=") + "C" + Формат(ЭтотОбъект.ОбъектУчета, "ЧГ=")).Текст;
		ДатаПередачиЗнач = ПолеИсходнойТаблицы.Область("R" + Формат(НомерСтроки, "ЧГ=") + "C" + Формат(ЭтотОбъект.ДатаПоследнейУспешнойПередачиНБКИ, "ЧГ=")).Текст;
		Если ЗначениеЗаполнено(ОбъектУчетаЗнач) Тогда
			Если стрНайти(ТекстФайлаОшибок,ОбъектУчетаЗнач,,,)> 0 Тогда
				ДОСсылка =  Справочники.ДолговыеОбязательства.НайтиПоНаименованию(ОбъектУчетаЗнач,Истина);
				Если ДОСсылка = Неопределено Или ДОСсылка = Справочники.ДолговыеОбязательства.ПустаяСсылка() Тогда
					Продолжить;
				Иначе	
					Если ЗначениеЗаполнено(ДатаПередачиЗнач) Тогда
						ДатаПередачиДата = ПолучитьДатуПередачи(ДатаПередачиЗнач);
						ОбъектыСервер.ЗаписатьЗначениеСвойства(ДОСсылка,Настройка.РеквизитДатаПоследнейВыгрузки.Код,ДатаПередачиДата);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;		
КонецПроцедуры

Процедура ПерезаписатьДатуПередачиЖурнал(Настройка,ТекстФайлаОшибок) Экспорт
	
	ДатаПоНастройке = Настройка.ДатаПоследнейВыгрузкиПоНастройке;
	КодДопРекв = Настройка.РеквизитДатаПоследнейВыгрузки.Код;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЖурналВыгрузокНБКИ.ОбъектУчета КАК ОбъектУчета,
		|	ЖурналВыгрузокНБКИ.ДатаПоследнейВыгрузки КАК ДатаПоследнейВыгрузки
		|ИЗ
		|	РегистрСведений.ЖурналВыгрузокНБКИ КАК ЖурналВыгрузокНБКИ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПоследнейВыгрузки УБЫВ
		|ИТОГИ ПО
		|	ОбъектУчета";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаОбъектУчета = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОбъектУчета.Следующий() Цикл
		ОбъектУчетаСтр = ВыборкаОбъектУчета.ОбъектУчета.Наименование; 
		Если стрНайти(ТекстФайлаОшибок,ОбъектУчетаСтр,,,)> 0 Тогда
			Запись = РегистрыСведений.ЖурналВыгрузокНБКИ.СоздатьМенеджерЗаписи();
			Запись.ОбъектУчета = ВыборкаОбъектУчета.ОбъектУчета;
			Запись.ДатаПоследнейВыгрузки = ДатаПоНастройке;
			Запись.Удалить();
			Если ЗначениеЗаполнено(КодДопРекв) Тогда
				ВыборкаДетальныеЗаписи = ВыборкаОбъектУчета.Выбрать();
				КоличествоДат = ВыборкаДетальныеЗаписи.Количество();
				Если КоличествоДат <= 1 Тогда
					ОбъектыСервер.ЗаписатьЗначениеСвойства(ВыборкаОбъектУчета.ОбъектУчета,КодДопРекв,Дата("00010101"));
				ИначеЕсли КоличествоДат = 1 Тогда
					//Ничего не делай!!!
				Иначе	
					Сч = 1;
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						Если Сч = 2 Тогда	
							ОбъектыСервер.ЗаписатьЗначениеСвойства(ВыборкаОбъектУчета.ОбъектУчета,КодДопРекв,ВыборкаДетальныеЗаписи.ДатаПоследнейВыгрузки);
						ИначеЕсли Сч > 2 Тогда
							Прервать;
						КонецЕсли;
						Сч = Сч+1;
					КонецЦикла;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры


Процедура ЗаполнитьРСНастройкиВыгрузки() Экспорт
	
	//Получаем таблицу настроек. 
	МассивНастроекНБКИ = ПолучитьТекущиеНастройкиВыгрузкиНБКИ();
	//Если таблица настроек пуста, предупреждаем пользователя
	Если МассивНастроекНБКИ.Количество() = 0 Тогда
		Сообщить("В системе не определена ни одна действующая настройка.");
		Возврат;
	КонецЕсли;
	//Получаем таблицу всех ДО и КА (Таблица Ссылок)
	
	тСсылки = ПолучитьСписокОбъектовУчетаОПД(); 
	//Если таблица ссылок пуста, предупреждаем пользователя
	Если тСсылки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//3. Делаем запись в РС НастройкиВыгрузкиНБКИДляОбъектовУчета
	ЗафиксироватьНастройки(МассивНастроекНБКИ,тСсылки);
			
КонецПроцедуры

Функция ПолучитьСписокОбъектовУчетаОПД() 
	//1. Убираем из таблицы ссылок тех, у кого отозваны персональные данные. Критерий: КА: ОтзывПерсональныхДанных.
	//2. Добавляем параметры Продажа (запись в РС Журнал проданных договоров), Тип должника КА: ЮрФизЛицо, тип самлй ссылки - ДО или КА
	

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДолговыеОбязательства.Ссылка КАК Ссылка,
		|	ДолговыеОбязательства.Должник.ЮрФизЛицо КАК ТипДолжника
		|ПОМЕСТИТЬ ОбъектыОПД
		|ИЗ
		|	Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
		|ГДЕ
		|	ДолговыеОбязательства.ПометкаУдаления = ЛОЖЬ
		|	И ДолговыеОбязательства.Должник.ОтзывПерсональныхДанных = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка,
		|	Контрагенты.ЮрФизЛицо
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ПометкаУдаления = ЛОЖЬ
		|	И Контрагенты.ОтзывПерсональныхДанных = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъектыОПД.Ссылка КАК Ссылка,
		|	ОбъектыОПД.ТипДолжника КАК ТипДолжника,
		|	ЕСТЬNULL(ЖурналПроданныхДоговоровСрезПоследних.ОбъектУчета, ЛОЖЬ) КАК Продажа,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОбъектыОПД.Ссылка) = ТИП(Справочник.ДолговыеОбязательства)
		|			ТОГДА ""ДО""
		|		КОГДА ТИПЗНАЧЕНИЯ(ОбъектыОПД.Ссылка) = ТИП(Справочник.Контрагенты)
		|			ТОГДА ""КА""
		|		ИНАЧЕ ""NA""
		|	КОНЕЦ КАК ТипСсылки
		|ПОМЕСТИТЬ ОбъектыДоОбработки
		|ИЗ
		|	ОбъектыОПД КАК ОбъектыОПД
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналПроданныхДоговоров.СрезПоследних(
		|				&ТекДата,
		|				ОбъектУчета В
		|					(ВЫБРАТЬ
		|						ОбъектыОПД.Ссылка КАК Ссылка
		|					ИЗ
		|						ОбъектыОПД КАК ОбъектыОПД)) КАК ЖурналПроданныхДоговоровСрезПоследних
		|		ПО ОбъектыОПД.Ссылка = ЖурналПроданныхДоговоровСрезПоследних.ОбъектУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъектыДоОбработки.Ссылка КАК Ссылка,
		|	ОбъектыДоОбработки.ТипДолжника КАК ТипДолжника,
		|	ВЫБОР
		|		КОГДА ОбъектыДоОбработки.Продажа = ЛОЖЬ
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Продажа,
		|	ОбъектыДоОбработки.ТипСсылки КАК ТипОбъекта
		|ИЗ
		|	ОбъектыДоОбработки КАК ОбъектыДоОбработки";
	Запрос.УстановитьПараметр("ТекДата",ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗ = РезультатЗапроса.Выгрузить();
	
	Возврат ТЗ;
КонецФункции

Процедура ЗафиксироватьНастройки(мНастройки,тСсылки)
	
	НЗ = РегистрыСведений.НастройкиВыгрузкиНБКИДляОбъектовУчета.СоздатьНаборЗаписей();
	НЗ.Записать();
	
	Для каждого Настройка из мНастройки Цикл
		ТипОбъекта =?(ТипЗнч(Настройка.НаПримереДокумента) = Тип("СправочникСсылка.ДолговыеОбязательства"),"ДО","КА");
		ТипДолжника = Настройка.ТипДолжника;
		ДляПроданных = Настройка.ДляПроданных; 
		Отбор = Новый Структура;
		Отбор.Вставить("ТипДолжника",ТипДолжника);
		Отбор.Вставить("ТипОбъекта",ТипОбъекта);
		Отбор.Вставить("Продажа",ДляПроданных);
		мсОбъектыДляНастройки = тСсылки.НайтиСтроки(Отбор);
		ЗаписатьРСНастройкиНБКИДляОбъектовУчета(Настройка,мсОбъектыДляНастройки);
	КонецЦикла;	
				
КонецПроцедуры

Процедура ЗаписатьРСНастройкиНБКИДляОбъектовУчета(Настройка,МассивСтрок)
	
	НаборЗаписей = РегистрыСведений.НастройкиВыгрузкиНБКИДляОбъектовУчета.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ТекущаяНастройка.Установить(Настройка); 
	
	Для Каждого стр Из МассивСтрок Цикл 
		НоваяЗапись = НаборЗаписей.Добавить(); 
		НоваяЗапись.ОбъектУчета = Стр.Ссылка; 
		НоваяЗапись.ТекущаяНастройка = Настройка; 
	КонецЦикла; 
	
	НаборЗаписей.Записать(); 
	
	
КонецПроцедуры





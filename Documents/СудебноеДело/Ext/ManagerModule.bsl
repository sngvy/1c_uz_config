
Процедура ПровестиПоследовательность(ЭтотОбъект) Экспорт
	//Корректировка последовательности, поиск первого документа актуализации и его ПРОГРАММНОЕ перепроведение
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПоступлениеПлатежа.Ссылка КАК Ссылка,
	|	ПоступлениеПлатежа.ДатаПлатежа КАК ДатаПлатежа
	|ИЗ
	|	Документ.ПоступлениеПлатежа КАК ПоступлениеПлатежа
	|ГДЕ
	|	ПоступлениеПлатежа.Займ = &Займ
	|	И ПоступлениеПлатежа.ДатаПлатежа >= &МоментВремени
	|	И ПоступлениеПлатежа.Проведен = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеПлатежа.ДатаПлатежа,
	|	Ссылка");
	Запрос.УстановитьПараметр("Займ", ЭтотОбъект.Займ);
	Запрос.УстановитьПараметр("МоментВремени", ?(ЗначениеЗаполнено(ЭтотОбъект.ДатаВступленияВЗаконнуюСилу), ЭтотОбъект.ДатаВступленияВЗаконнуюСилу, ЭтотОбъект.ДатаИска));
	Результат = Запрос.Выполнить().Выгрузить();
	//к = Результат.Количество() - 1;
	//Для н = 0 по к Цикл
	//	ДокументОбъект = Результат[к - н].Ссылка.ПолучитьОбъект();
	//	ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	//КонецЦикла;  

	//НетПлатежей =  (Результат.Количество() = 0);  
	МенеджерКорректировки = РегистрыСведений.ОчередьПерепроведенияЗадолженности;
	ЭтоПервый = 0; 
	
	ОбъектыСервер.ЗаписатьТекущиеПараметрыЗадолженностиОбработчик(ЭтотОбъект);

	
	Для Каждого стр Из Результат Цикл
		
		ЗаписьНаКорректировку = МенеджерКорректировки.СоздатьМенеджерЗаписи();
		ЗаписьНаКорректировку.ДокументИсточник = ЭтотОбъект.Ссылка;
		ЗаписьНаКорректировку.ДокументНаКорректировку = стр.Ссылка;
		ЗаписьНаКорректировку.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		ЗаписьНаКорректировку.Порядок = ЭтоПервый;
		ЗаписьНаКорректировку.Записать();  
		Если ЭтоПервый = 0 Тогда
			ДокументСтарт = стр.Ссылка;
		КонецЕсли;
		ЭтоПервый = ЭтоПервый + 1; 
	КонецЦикла;  
	
	Если ЗначениеЗаполнено(ДокументСтарт) Тогда
		Документы.ПоступлениеПлатежа.ПровестиПоследовательность(ДокументСтарт);
	КонецЕсли;
		
	
	
КонецПроцедуры     

Функция РасчитатьСуммуГоспошлины(Сумма, ЗначениеВидаТребований, ДатаРасчета = Неопределено) Экспорт

	Если Сумма = 0 Тогда	
		Возврат 0;		
	КонецЕсли;
	
	Если ДатаРасчета = Неопределено Тогда
		ДатаРасчета = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ДатаРасчета < Дата(2024,9,9) Тогда
		Госпошлина = РасчетЗадолженностиСудопроизводство.РассчитатьГоспошлинуФЛ_ДоИндексации(Сумма);
	Иначе
		Госпошлина = РасчетЗадолженностиСудопроизводство.РсчитатьГоспошлинуФЛ_ПослеИндексации(Сумма);
	КонецЕсли;	
	
	Если ЗначениеВидаТребований = Перечисления.ВидыИсковыхТребований.СудебныйПриказ Тогда
		Возврат Госпошлина / 2;
	КонецЕсли;
	
	Возврат Госпошлина;

КонецФункции // ()   

Процедура ЗаполнитьССП() Экспорт
	
	Свойство = Константы.АдресДолжникаПодсудностиРОСП.Получить();
	Если Не ЗначениеЗАполнено(Свойство) Тогда
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации("Не установлена константа ""Адрес должника подсудности РОСП"". Заполнение РОСП невозможно без заполненного адреса должника в формате ФИАС");
		Возврат;
	КонецЕсли;
	
	СвойствоВидСтроки = Свойство.ВидСтроки;
	Если НЕ СвойствоВидСтроки = ПредопределенноеЗначение("Перечисление.ВидыТипаСтрока.АдресФИАС") Тогда
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации("Заполнение РОСП возможно только для адреса в формате ФИАС. Проверьте формат дополнительного реквизита");
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СудебноеДелоСписокРОСП.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_СудебныеДелаСРОСП
	               |ИЗ
	               |	Документ.СудебноеДело.СписокРОСП КАК СудебноеДелоСписокРОСП
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СудебноеДело.Ссылка КАК Ссылка,
	               |	ПРЕДСТАВЛЕНИЕ(СудебноеДело.Ссылка) КАК ПредставлениеСсылка,
	               |	СудебноеДело.Займ КАК Займ,
	               |	ДолговыеОбязательства.Должник КАК Должник
	               |ИЗ
	               |	Документ.СудебноеДело КАК СудебноеДело
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДолговыеОбязательства КАК ДолговыеОбязательства
	               |		ПО СудебноеДело.Займ = ДолговыеОбязательства.Ссылка
	               |ГДЕ
	               |	НЕ СудебноеДело.Ссылка В
	               |				(ВЫБРАТЬ
	               |					ВТ_СудебныеДелаСРОСП.Ссылка КАК Ссылка
	               |				ИЗ
	               |					ВТ_СудебныеДелаСРОСП КАК ВТ_СудебныеДелаСРОСП)
	               |	И СудебноеДело.Проведен
	               |	И НЕ СудебноеДело.ПометкаУдаления
	               |	И СудебноеДело.РОСП = ЗНАЧЕНИЕ(Справочник.ФССП_СлужбыСудебныхПриставов.ПустаяСсылка)
				   //|	И СудебноеДело.УФССП = ЗНАЧЕНИЕ(Справочник.ФССП_СлужбыСудебныхПриставов.ПустаяСсылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СудебноеДело.Ссылка,
	               |	ДолговыеОбязательства.Должник,
	               |	СудебноеДело.Займ";

	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Займ = Выборка.Займ;
		
			АдресДолжника = ОбъектыСервер.ПолучитьЗначениеСвойства(Выборка.Должник, Свойство.код);
			
			Если НЕ ЗначениеЗаполнено(АдресДолжника) Тогда
				ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(Выборка.ПредставлениеСсылка + ": Заполнение РОСП возможно только для адреса в формате ФИАС. Проверьте адресные данные должника");
				Продолжить;
			КонецЕсли; 
			
			СтрокаJSON = бит_АдресныйКлассификатор.ПолучитьJSONИзXML(АдресДолжника);
			
			Если СтрокаJSON = "" Тогда
				Продолжить;
			КонецЕсли;
			
			ИнформацияОРОСП = "";
			ТаблицаРОСП = Новый ТаблицаЗначений;
			ЗаполнитьРОСП(ТаблицаРОСП, СтрокаJSON, ИнформацияОРОСП);
			
			Если ТаблицаРОСП.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;

			Если ЗначениеЗаполнено(ИнформацияОРОСП) Тогда
				ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(Выборка.ПредставлениеСсылка + ": " + ИнформацияОРОСП);
			КонецЕсли;
			
			ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			ТекущийОбъект.СписокРОСП.Загрузить(ТаблицаРОСП);
			Если ТаблицаРОСП.Количество() = 1 Тогда
				Для Каждого стрРОСП из ТаблицаРОСП Цикл
					ТекущийОбъект.РОСП = стрРОСП.СсылкаССП;
					ТекущийОбъект.УФССП = стрРОСП.УФССП;
				КонецЦикла;
			КонецЕсли;
			
			Попытка
				ТекущийОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
							ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры //ЗаполнитьССП()

Процедура ЗаполнитьРОСП(ДанныеРОСП, СтрокаJSON, ИнформацияОРОСП) Экспорт
	
	ДанныеАдреса = УправлениеКонтактнойИнформациейСлужебный.СтрокаJSONВСтруктуру(СтрокаJSON);
	НаселенныйПунктДетально = РаботаСАдресами.ПодготовитьАдресДляВвода(ДанныеАдреса);
	
	Запрос = Новый Запрос;
	ТелоЗапроса = "";
	ТелоОбъединения = "";
	ТелоИсточника = "";
	
	Если НЕ ЗначениеЗаполнено(НаселенныйПунктДетально.areaId) Тогда
		ИнформацияОРОСП = "Проверьте заполнение региона адреса ФИАС";
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИДСубъектРФ", Новый УникальныйИдентификатор(НаселенныйПунктДетально.areaId));
	
	Если ЗначениеЗаполнено(НаселенныйПунктДетально.cityId) ИЛИ
		 ЗначениеЗаполнено(НаселенныйПунктДетально.localityid) Тогда
		ТелоЗапроса = ТелоЗапроса + "
                    |
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	АдресныеОбъекты.КодКЛАДР КАК city
					|ПОМЕСТИТЬ ВТ_Город
					|ИЗ
					|	РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
					|ГДЕ
					|	АдресныеОбъекты.Идентификатор = &ИДНаселенныйПункт
					|;";
		ТелоОбъединения = ТелоОбъединения + ?(ЗначениеЗаполнено(ТелоОбъединения), ",", "") + "
											|ВТ_Город.city КАК city"; 
		
		ТелоИсточника = ТелоИсточника + "
						|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Город КАК ВТ_Город
	               		|		ПО (ИСТИНА)"; 
		
		Запрос.УстановитьПараметр("ИДНаселенныйПункт", Новый УникальныйИдентификатор(?(ЗначениеЗаполнено(НаселенныйПунктДетально.cityId),
								   НаселенныйПунктДетально.cityId, НаселенныйПунктДетально.localityId)));
								   
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НаселенныйПунктДетально.streetId) Тогда
		ТелоЗапроса = ТелоЗапроса + "
					|
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	АдресныеОбъекты.КодКЛАДР КАК street
					|ПОМЕСТИТЬ ВТ_Улица
					|ИЗ
					|	РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
					|ГДЕ
					|	АдресныеОбъекты.Идентификатор = &ИДУлица
					|;";
		
		ТелоОбъединения = ТелоОбъединения + ?(ЗначениеЗаполнено(ТелоОбъединения), ",", "") + "
						  |ВТ_Улица.street КАК street";
		
		ТелоИсточника = ТелоИсточника + "
						|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Улица КАК ВТ_Улица
	               		|		ПО (ИСТИНА)";
		
		Запрос.УстановитьПараметр("ИДУлица", Новый УникальныйИдентификатор(НаселенныйПунктДетально.streetId));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НаселенныйПунктДетально.houseId) Тогда
		ТелоЗапроса = ТелоЗапроса + "
					|
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	АдресныеОбъекты.КодКЛАДР КАК home
					|ПОМЕСТИТЬ ВТ_Дом
					|ИЗ
					|	РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
					|ГДЕ
					|	АдресныеОбъекты.Идентификатор = &ИДДом
					|;"; 
		
		ТелоОбъединения = ТелоОбъединения + ?(ЗначениеЗаполнено(ТелоОбъединения), ",", "") + "
						  |ВТ_Дом.home КАК home";
		
		ТелоИсточника = ТелоИсточника + "
						|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Дом КАК ВТ_Дом
	               		|		ПО (ИСТИНА)";
		
		Запрос.УстановитьПараметр("ИДДом", Новый УникальныйИдентификатор(НаселенныйПунктДетально.houseId)); 
		
	КонецЕсли;
	
	Если ТелоЗапроса = "" тогда
		ИнформацияОРОСП = "Проверьте заполнение адреса ФИАС";
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	АдресныеОбъекты.КодСубъектаРФ КАК КодСубъектаРФ,
					|	АдресныеОбъекты.КодКЛАДР КАК region
					|ПОМЕСТИТЬ ВТ_Регион
					|ИЗ
					|	РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
					|ГДЕ
					|	АдресныеОбъекты.Идентификатор = &ИДСубъектРФ
					|;" + ТелоЗапроса + "
					|
					|ВЫБРАТЬ
					|ВТ_Регион.КодСубъектаРФ КАК КодСубъектаРФ,
					|ВТ_Регион.region КАК region," + ТелоОбъединения + "
					|ИЗ
					|	ВТ_Регион КАК ВТ_Регион" + ТелоИсточника;

	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ИнформацияОРОСП = "Не удалось определить отдел, обслуживающий данный адрес";
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	стрКоды = Новый Структура;
	стрКоды.Вставить("region", "");
	стрКоды.Вставить("city", "");
	стрКоды.Вставить("street", "");
	стрКоды.Вставить("home", "");
	
	ЗаполнитьЗначенияСвойств(стрКоды, Выборка);
	
	стрКоды.region = СтрЗаменить(Строка(стрКоды.region), " ", "");
	стрКоды.city = СтрЗаменить(Строка(стрКоды.city), " ", "");
	стрКоды.street = СтрЗаменить(Строка(стрКоды.street), " ", "");
	стрКоды.home = СтрЗаменить(Строка(стрКоды.home), " ", "");
	
	ПодборРОСП(ДанныеРОСП, стрКоды, Выборка.КодСубъектаРФ, ИнформацияОРОСП);
	
КонецПроцедуры //ПодобратьКоды()

Процедура ПодборРОСП(ТаблицаРОСП, стрАдрес, КодРегиона, ИнформацияОРОСП) Экспорт			
	
	ДанныеПоОтделу = ТаблицаПолученныеДанные();
	
	ДополнительныеПараметры = КоннекторHTTP.НовыеПараметры();
	ДополнительныеПараметры.ПараметрыПреобразованияJSON.ПрочитатьВСоответствие = Ложь;

	// TODO Текущая ссылка может не работать. ФССП перемстили форму. Работает по методу парсинга со страницы сайта.
	// Попробовать эту ссылку: https://fssp.gov.ru/iss/osp Но на момент комментария сервис на сайте не работал
	// Возможно потребуется переписать модуль получения РОСП
	ВебСтраница = КоннекторHTTPGetJson("https://fssp.gov.ru/api/is/departments/search/by_territory", стрАдрес, ДополнительныеПараметры);
	
	Если Тип(ВебСтраница) = Тип("Структура") И
		 ВебСтраница.Свойство("data") Тогда
		Для Каждого СтрокаВебСтраницы Из ВебСтраница.data Цикл
			Если Тип(СтрокаВебСтраницы) = Тип("Структура") Тогда
				НоваяСтрока = ДанныеПоОтделу.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВебСтраницы.department);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеПоОтделу.Количество() = 0 тогда
		ИнформацияОРОСП = "Нет данных о соответствующем РОСП для указанного адреса";
		Возврат;
	КонецЕсли;
	
	КолонкиСтрокой = "";
	Для Каждого Колонка Из ДанныеПоОтделу.Колонки Цикл
		КолонкиСтрокой = КолонкиСтрокой + ?(ЗначениеЗаполнено(КолонкиСтрокой), ", ", "") + Колонка.Имя;
	КонецЦикла;
	
	ДанныеПоОтделу.Свернуть(КолонкиСтрокой);
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеПоОтделу.terotdel КАК terotdel,
	|	ДанныеПоОтделу.fax КАК fax,
	|	ДанныеПоОтделу.address КАК address,
	|	ДанныеПоОтделу.worktime КАК worktime,
	|	ДанныеПоОтделу.fio КАК fio,
	|	ДанныеПоОтделу.inquiry_services_tel КАК inquiry_services_tel,
	|	ДанныеПоОтделу.inquiry_services_tel_2 КАК inquiry_services_tel_2,
	|	ДанныеПоОтделу.phone КАК phone,
	|	ДанныеПоОтделу.territory КАК territory
	|ПОМЕСТИТЬ ВТ_ДанныеСайта
	|ИЗ
	|	&ДанныеПоОтделу КАК ДанныеПоОтделу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УФССП.Ссылка КАК УФССП
	|ПОМЕСТИТЬ ВТ_УФССП
	|ИЗ
	|	Справочник.ФССП_СлужбыСудебныхПриставов КАК УФССП
	|ГДЕ
	|	УФССП.КодРегиона = &КодРегиона
	|	И УФССП.КодТерриториальногоАгенства = ""0""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФССП_СлужбыСудебныхПриставов.Ссылка КАК Родитель
	|ПОМЕСТИТЬ ВТ_ГруппаРОСП
	|ИЗ
	|	Справочник.ФССП_СлужбыСудебныхПриставов КАК ФССП_СлужбыСудебныхПриставов
	|ГДЕ
	|	ФССП_СлужбыСудебныхПриставов.ЭтоГруппа
	|	И ФССП_СлужбыСудебныхПриставов.КодРегиона = &КодРегиона
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФССП_СлужбыСудебныхПриставов.Ссылка КАК СсылкаССП,
	|	ВТ_ДанныеСайта.terotdel КАК Наименование,
	|	ВТ_ДанныеСайта.fax КАК Факс,
	|	ВТ_ДанныеСайта.address КАК ПочтовыйАдрес,
	|	ВТ_ДанныеСайта.worktime КАК ГрафикРаботы,
	|	ВТ_ДанныеСайта.fio КАК Руководитель,
	|	ВТ_ДанныеСайта.inquiry_services_tel КАК ТелефонСправочнойСлужбы,
	|	ВТ_ДанныеСайта.inquiry_services_tel_2 КАК ТелефонСправочнойСлужбы2,
	|	ВТ_ДанныеСайта.phone КАК Телефон,
	|	ВТ_ДанныеСайта.territory КАК ТерриторияОбслуживания,
	|	ВТ_УФССП.УФССП КАК УФССП,
	|	ВТ_ГруппаРОСП.Родитель КАК Родитель
	|ИЗ
	|	ВТ_ДанныеСайта КАК ВТ_ДанныеСайта
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФССП_СлужбыСудебныхПриставов КАК ФССП_СлужбыСудебныхПриставов
	|		ПО ВТ_ДанныеСайта.terotdel = ФССП_СлужбыСудебныхПриставов.НаименованиеПолное
	|			И ВТ_ДанныеСайта.fio = ФССП_СлужбыСудебныхПриставов.Руководитель
	|			И (ФССП_СлужбыСудебныхПриставов.КодРегиона = &КодРегиона)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УФССП КАК ВТ_УФССП
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГруппаРОСП КАК ВТ_ГруппаРОСП
	|		ПО (ИСТИНА)";
	
	Запрос.УстановитьПараметр("КодРегиона", КодРегиона);
	Запрос.УстановитьПараметр("ДанныеПоОтделу", ДанныеПоОтделу);
	
	Результат = Запрос.Выполнить();
	
	ТаблицаРОСП = Результат.Выгрузить();
	
	констЗаписыватьРОСПы = Константы.ЗаписыватьРОСПыСДанныхТерподсудности.Получить();
	
	Для Каждого СтрокаТаблицыРосп Из ТаблицаРОСП Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыРосп.СсылкаССП) Тогда
			Если констЗаписыватьРОСПы Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицыРосп.Родитель) Тогда
					НовыйГруппаРОСП = Справочники.ФССП_СлужбыСудебныхПриставов.СоздатьГруппу();
					НовыйГруппаРОСП.КодРегиона = КодРегиона;
					НовыйГруппаРОСП.Наименование = КодРегиона;
					Попытка
						НовыйГруппаРОСП.Записать();
						СтрокаТаблицыРосп.Родитель = НовыйГруппаРОСП.Ссылка;
					Исключение
						ИнформацияОРОСП = "Не удалось записать группу РОСП для " + СтрокаТаблицыРосп.terotdel;
						Продолжить;
					КонецПопытки;
				КонецЕсли;
				
				НовыйРОСП = Справочники.ФССП_СлужбыСудебныхПриставов.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(НовыйРОСП, СтрокаТаблицыРосп); 
				НовыйРОСП.КодРегиона = КодРегиона;
				НовыйРОСП.НаименованиеПолное = СтрокаТаблицыРосп.Наименование;
				
				Если ЗначениеЗаполнено(СтрокаТаблицыРосп.Телефон)  Тогда
					ЗаполнитьТелефонныеНомера(НовыйРОСП.Телефоны, СтрокаТаблицыРосп.Телефон);
				КонецЕсли;  
				Если ЗначениеЗаполнено(СтрокаТаблицыРосп.Факс)  Тогда
					ЗаполнитьТелефонныеНомера(НовыйРОСП.Телефоны, СтрокаТаблицыРосп.Факс, Истина);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТаблицыРосп.ТелефонСправочнойСлужбы)  Тогда
					ЗаполнитьТелефонныеНомера(НовыйРОСП.Телефоны, СтрокаТаблицыРосп.ТелефонСправочнойСлужбы);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТаблицыРосп.ТелефонСправочнойСлужбы2)  Тогда
					ЗаполнитьТелефонныеНомера(НовыйРОСП.Телефоны, СтрокаТаблицыРосп.ТелефонСправочнойСлужбы2);
				КонецЕсли;
				Попытка
					НовыйРОСП.Записать();
					СтрокаТаблицыРосп.СсылкаССП = НовыйРОСП.Ссылка;
				Исключение
					ИнформацияОРОСП = "Не удалось записать РОСП для " + СтрокаТаблицыРосп.Наименование;
				КонецПопытки;
			Иначе
				ИнформацияОРОСП = "В базе не найден соответствующий РОСП для " + СтрокаТаблицыРосп.Наименование;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НулевыеСтроки = ТаблицаРОСП.НайтиСтроки(Новый Структура("СсылкаССП", Справочники.ФССП_СлужбыСудебныхПриставов.ПустаяСсылка()));
	Для каждого СтрокаТаблицы Из НулевыеСтроки Цикл
		ТаблицаРОСП.Удалить(СтрокаТаблицы)
	КонецЦикла;
	
	Если ТаблицаРОСП.Количество() > 1 Тогда
		ИнформацияОРОСП = "Найдено несколько отделений РОСП для " + СтрокаТаблицыРосп.Наименование;
	КонецЕсли;
	
КонецПроцедуры //ПодборРОСП()

Функция КоннекторHTTPGetJson(URL, стрАдрес, ДополнительныеПараметры); 

	ВебСтраница = КоннекторHTTP.GetJson(URL, стрАдрес, ДополнительныеПараметры);
	
	Если Тип(ВебСтраница) = Тип("Структура") И
		 ВебСтраница.Свойство("data") Тогда
		Если ВебСтраница.data.Количество() = 0 И ЗначениеЗаполнено(стрАдрес.street) тогда
			стрАдрес.street = "";
			ВебСтраница = КоннекторHTTPGetJson(URL, стрАдрес, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВебСтраница;	
		
 КонецФункции
		
Функция ТаблицаПолученныеДанные()
	
	ТабЗнч = Новый ТаблицаЗначений;
	ТабЗнч.Колонки.Добавить("terotdel", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(500)), "Территориальный отдел судебных приставов");
	ТабЗнч.Колонки.Добавить("fax", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(500)), "Факс");
	ТабЗнч.Колонки.Добавить("address", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(500)), "Адрес");
	ТабЗнч.Колонки.Добавить("worktime", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(500)), "Часы приема");
	ТабЗнч.Колонки.Добавить("fio", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(500)), "ФИО старшего судебного пристава");
	ТабЗнч.Колонки.Добавить("inquiry_services_tel", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(500)), "Телефон справочной службы 1");
	ТабЗнч.Колонки.Добавить("inquiry_services_tel_2", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(500)), "Телефоны справочной службы 2");
	ТабЗнч.Колонки.Добавить("phone", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(500)), "Телефон");
	ТабЗнч.Колонки.Добавить("territory", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(500)), "Районы обслуживания");

	Возврат ТабЗнч;
	
КонецФункции // ТаблицаПолученныеДанные()

Процедура ЗаполнитьТелефонныеНомера(ТЧТелефоны, НомерТелефона, Факс = Ложь)
	
	СписокТелефонов = ТЧТелефоны.Добавить();
	СписокТелефонов.ВидТелефона = ?(Факс,Справочники.ВидыТелефонов.Факс, Справочники.ВидыТелефонов.Рабочий);
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "-", "");	
	МассивЧастиНомера = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(НомерТелефона, "()");
	
	Если МассивЧастиНомера.Количество() = 3 Тогда
		СписокТелефонов.КодСтраны = МассивЧастиНомера[0];
		СписокТелефонов.КодГорода = МассивЧастиНомера[1];
		СписокТелефонов.НомерТелефона = МассивЧастиНомера[2];
		СписокТелефонов.НомерДляПоиска = МассивЧастиНомера[1] + МассивЧастиНомера[2];
	КонецЕсли;
	
	СписокТелефонов.Номер = НомерТелефона;
	
КонецПроцедуры // ЗаполнитьТелефонныеНомера()

Процедура Сообщение(ТекстСообщения)

Сообщение = Новый СообщениеПользователю;
Сообщение.Текст = ТекстСообщения;
Сообщение.Сообщить();	

КонецПроцедуры
